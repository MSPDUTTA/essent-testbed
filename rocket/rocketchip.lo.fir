[0m[[0minfo[0m] [0mLoading project definition from /Users/sbeamer/Simulation/playground/essent/project[0m
[0m[[0minfo[0m] [0mSet current project to essent (in build file:/Users/sbeamer/Simulation/playground/essent/)[0m
[0m[[0minfo[0m] [0mRunning essent.Driver -v test_fir/TestHarness.DefaultConfig.fir[0m
circuit TestHarness :
  module RVCExpander :
    input clk : Clock
    input reset : UInt<1>
    input io_in : UInt<32>
    output io_out_bits : UInt<32>
    output io_out_rd : UInt<5>
    output io_out_rs1 : UInt<5>
    output io_out_rs2 : UInt<5>
    output io_out_rs3 : UInt<5>
    output io_rvc : UInt<1>
  
    node T_8 = bits(io_in, 1, 0)
    node T_10 = neq(T_8, UInt<2>("h3"))
    node T_11 = bits(io_in, 12, 5)
    node T_13 = neq(T_11, UInt<8>("h0"))
    node T_16 = mux(T_13, UInt<7>("h13"), UInt<7>("h1f"))
    node T_17 = bits(io_in, 10, 7)
    node T_18 = bits(io_in, 12, 11)
    node T_19 = bits(io_in, 5, 5)
    node T_20 = bits(io_in, 6, 6)
    node T_22 = cat(T_20, UInt<2>("h0"))
    node T_23 = cat(T_17, T_18)
    node T_24 = cat(T_23, T_19)
    node T_25 = cat(T_24, T_22)
    node T_29 = bits(io_in, 4, 2)
    node T_30 = cat(UInt<2>("h1"), T_29)
    node T_31 = cat(T_30, T_16)
    node T_32 = cat(T_25, UInt<5>("h2"))
    node T_33 = cat(T_32, UInt<3>("h0"))
    node T_34 = cat(T_33, T_31)
    node T_42 = bits(io_in, 31, 27)
    wire T_49_bits : UInt<32>
    wire T_49_rd : UInt<5>
    wire T_49_rs1 : UInt<5>
    wire T_49_rs2 : UInt<5>
    wire T_49_rs3 : UInt<5>
    node T_55 = bits(io_in, 6, 5)
    node T_56 = bits(io_in, 12, 10)
    node T_58 = cat(T_55, T_56)
    node T_59 = cat(T_58, UInt<3>("h0"))
    node T_61 = bits(io_in, 9, 7)
    node T_62 = cat(UInt<2>("h1"), T_61)
    node T_68 = cat(T_30, UInt<7>("h7"))
    node T_69 = cat(T_59, T_62)
    node T_70 = cat(T_69, UInt<3>("h3"))
    node T_71 = cat(T_70, T_68)
    wire T_88_bits : UInt<32>
    wire T_88_rd : UInt<5>
    wire T_88_rs1 : UInt<5>
    wire T_88_rs2 : UInt<5>
    wire T_88_rs3 : UInt<5>
    node T_99 = cat(T_19, T_56)
    node T_100 = cat(T_99, T_22)
    node T_109 = cat(T_30, UInt<7>("h3"))
    node T_110 = cat(T_100, T_62)
    node T_111 = cat(T_110, UInt<3>("h2"))
    node T_112 = cat(T_111, T_109)
    wire T_129_bits : UInt<32>
    wire T_129_rd : UInt<5>
    wire T_129_rs1 : UInt<5>
    wire T_129_rs2 : UInt<5>
    wire T_129_rs3 : UInt<5>
    node T_151 = cat(T_70, T_109)
    wire T_168_bits : UInt<32>
    wire T_168_rd : UInt<5>
    wire T_168_rs1 : UInt<5>
    wire T_168_rs2 : UInt<5>
    wire T_168_rs3 : UInt<5>
    node T_181 = shr(T_100, 5)
    node T_196 = bits(T_100, 4, 0)
    node T_198 = cat(UInt<3>("h2"), T_196)
    node T_199 = cat(T_198, UInt<7>("h2f"))
    node T_200 = cat(T_181, T_30)
    node T_201 = cat(T_200, T_62)
    node T_202 = cat(T_201, T_199)
    wire T_219_bits : UInt<32>
    wire T_219_rd : UInt<5>
    wire T_219_rs1 : UInt<5>
    wire T_219_rs2 : UInt<5>
    wire T_219_rs3 : UInt<5>
    node T_230 = shr(T_59, 5)
    node T_243 = bits(T_59, 4, 0)
    node T_245 = cat(UInt<3>("h3"), T_243)
    node T_246 = cat(T_245, UInt<7>("h27"))
    node T_247 = cat(T_230, T_30)
    node T_248 = cat(T_247, T_62)
    node T_249 = cat(T_248, T_246)
    wire T_266_bits : UInt<32>
    wire T_266_rd : UInt<5>
    wire T_266_rs1 : UInt<5>
    wire T_266_rs2 : UInt<5>
    wire T_266_rs3 : UInt<5>
    node T_297 = cat(T_198, UInt<7>("h23"))
    node T_300 = cat(T_201, T_297)
    wire T_317_bits : UInt<32>
    wire T_317_rd : UInt<5>
    wire T_317_rs1 : UInt<5>
    wire T_317_rs2 : UInt<5>
    wire T_317_rs3 : UInt<5>
    node T_344 = cat(T_245, UInt<7>("h23"))
    node T_347 = cat(T_248, T_344)
    wire T_364_bits : UInt<32>
    wire T_364_rd : UInt<5>
    wire T_364_rs1 : UInt<5>
    wire T_364_rs2 : UInt<5>
    wire T_364_rs3 : UInt<5>
    node T_370 = bits(io_in, 12, 12)
    node T_374 = mux(T_370, UInt<7>("h7f"), UInt<7>("h0"))
    node T_375 = bits(io_in, 6, 2)
    node T_376 = cat(T_374, T_375)
    node T_377 = bits(io_in, 11, 7)
    node T_381 = cat(T_377, UInt<7>("h13"))
    node T_382 = cat(T_376, T_377)
    node T_383 = cat(T_382, UInt<3>("h0"))
    node T_384 = cat(T_383, T_381)
    wire T_397_bits : UInt<32>
    wire T_397_rd : UInt<5>
    wire T_397_rs1 : UInt<5>
    wire T_397_rs2 : UInt<5>
    wire T_397_rs3 : UInt<5>
    node T_405 = neq(T_377, UInt<5>("h0"))
    node T_408 = mux(T_405, UInt<7>("h1b"), UInt<7>("h1f"))
    node T_419 = cat(T_377, T_408)
    node T_422 = cat(T_383, T_419)
    wire T_435_bits : UInt<32>
    wire T_435_rd : UInt<5>
    wire T_435_rs1 : UInt<5>
    wire T_435_rs2 : UInt<5>
    wire T_435_rs3 : UInt<5>
    node T_453 = cat(T_376, UInt<5>("h0"))
    node T_454 = cat(T_453, UInt<3>("h0"))
    node T_455 = cat(T_454, T_381)
    wire T_468_bits : UInt<32>
    wire T_468_rd : UInt<5>
    wire T_468_rs1 : UInt<5>
    wire T_468_rs2 : UInt<5>
    wire T_468_rs3 : UInt<5>
    node T_482 = neq(T_376, UInt<12>("h0"))
    node T_485 = mux(T_482, UInt<7>("h37"), UInt<7>("h3f"))
    node T_490 = mux(T_370, UInt<15>("h7fff"), UInt<15>("h0"))
    node T_493 = cat(T_490, T_375)
    node T_494 = cat(T_493, UInt<12>("h0"))
    node T_495 = bits(T_494, 31, 12)
    node T_497 = cat(T_495, T_377)
    node T_498 = cat(T_497, T_485)
    wire T_511_bits : UInt<32>
    wire T_511_rd : UInt<5>
    wire T_511_rs1 : UInt<5>
    wire T_511_rs2 : UInt<5>
    wire T_511_rs3 : UInt<5>
    node T_519 = eq(T_377, UInt<5>("h0"))
    node T_522 = eq(T_377, UInt<5>("h2"))
    node T_523 = or(T_519, T_522)
    node T_535 = mux(T_482, UInt<7>("h13"), UInt<7>("h1f"))
    node T_540 = mux(T_370, UInt<3>("h7"), UInt<3>("h0"))
    node T_541 = bits(io_in, 4, 3)
    node T_543 = bits(io_in, 2, 2)
    node T_546 = cat(T_543, T_20)
    node T_547 = cat(T_546, UInt<4>("h0"))
    node T_548 = cat(T_540, T_541)
    node T_549 = cat(T_548, T_19)
    node T_550 = cat(T_549, T_547)
    node T_554 = cat(T_377, T_535)
    node T_555 = cat(T_550, T_377)
    node T_556 = cat(T_555, UInt<3>("h0"))
    node T_557 = cat(T_556, T_554)
    wire T_570_bits : UInt<32>
    wire T_570_rd : UInt<5>
    wire T_570_rs1 : UInt<5>
    wire T_570_rs2 : UInt<5>
    wire T_570_rs3 : UInt<5>
    node T_576_bits = mux(T_523, T_570_bits, T_511_bits)
    node T_576_rd = mux(T_523, T_570_rd, T_511_rd)
    node T_576_rs1 = mux(T_523, T_570_rs1, T_511_rs1)
    node T_576_rs2 = mux(T_523, T_570_rs2, T_511_rs2)
    node T_576_rs3 = mux(T_523, T_570_rs3, T_511_rs3)
    node T_584 = cat(T_370, T_375)
    node T_593 = cat(T_62, UInt<7>("h13"))
    node T_594 = cat(T_584, T_62)
    node T_595 = cat(T_594, UInt<3>("h5"))
    node T_596 = cat(T_595, T_593)
    node GEN_0 = pad(T_596, 31)
    node T_613 = or(GEN_0, UInt<31>("h40000000"))
    node T_630 = cat(T_376, T_62)
    node T_631 = cat(T_630, UInt<3>("h7"))
    node T_632 = cat(T_631, T_593)
    node T_643 = cat(T_370, T_55)
    node T_645 = and(T_643, UInt<3>("h3"))
    node T_647 = geq(T_643, UInt<3>("h4"))
    node T_649 = and(T_645, UInt<3>("h1"))
    node T_651 = geq(T_645, UInt<3>("h2"))
    node T_655 = geq(T_649, UInt<3>("h1"))
    node T_656 = mux(T_655, UInt<2>("h3"), UInt<2>("h2"))
    node T_662 = mux(T_651, T_656, UInt<2>("h0"))
    node T_671 = mux(T_655, UInt<3>("h7"), UInt<3>("h6"))
    node T_676 = mux(T_655, UInt<3>("h4"), UInt<3>("h0"))
    node T_677 = mux(T_651, T_671, T_676)
    node T_678 = mux(T_647, pad(T_662, 3), T_677)
    node T_681 = eq(T_55, UInt<2>("h0"))
    node T_684 = mux(T_681, UInt<31>("h40000000"), UInt<31>("h0"))
    node T_688 = mux(T_370, UInt<7>("h3b"), UInt<7>("h33"))
    node T_698 = cat(T_62, T_688)
    node T_699 = cat(T_30, T_62)
    node T_700 = cat(T_699, T_678)
    node T_701 = cat(T_700, T_698)
    node GEN_1 = pad(T_701, 31)
    node T_702 = or(GEN_1, T_684)
    node T_703 = bits(io_in, 11, 10)
    node T_705 = and(T_703, UInt<2>("h1"))
    node T_707 = geq(T_703, UInt<2>("h2"))
    node T_711 = geq(T_705, UInt<2>("h1"))
    node T_712 = mux(T_711, pad(T_702, 32), T_632)
    node T_717 = mux(T_711, T_613, pad(T_596, 31))
    node T_718 = mux(T_707, T_712, pad(T_717, 32))
    wire T_735_bits : UInt<32>
    wire T_735_rd : UInt<5>
    wire T_735_rs1 : UInt<5>
    wire T_735_rs2 : UInt<5>
    wire T_735_rs3 : UInt<5>
    node T_745 = mux(T_370, UInt<10>("h3ff"), UInt<10>("h0"))
    node T_746 = bits(io_in, 8, 8)
    node T_747 = bits(io_in, 10, 9)
    node T_749 = bits(io_in, 7, 7)
    node T_751 = bits(io_in, 11, 11)
    node T_752 = bits(io_in, 5, 3)
    node T_754 = cat(T_752, UInt<1>("h0"))
    node T_755 = cat(T_543, T_751)
    node T_756 = cat(T_755, T_754)
    node T_757 = cat(T_20, T_749)
    node T_758 = cat(T_745, T_746)
    node T_759 = cat(T_758, T_747)
    node T_760 = cat(T_759, T_757)
    node T_761 = cat(T_760, T_756)
    node T_762 = bits(T_761, 20, 20)
    node T_784 = bits(T_761, 10, 1)
    node T_806 = bits(T_761, 11, 11)
    node T_828 = bits(T_761, 19, 12)
    node T_831 = cat(T_828, UInt<5>("h0"))
    node T_832 = cat(T_831, UInt<7>("h6f"))
    node T_833 = cat(T_762, T_784)
    node T_834 = cat(T_833, T_806)
    node T_835 = cat(T_834, T_832)
    wire T_850_bits : UInt<32>
    wire T_850_rd : UInt<5>
    wire T_850_rs1 : UInt<5>
    wire T_850_rs2 : UInt<5>
    wire T_850_rs3 : UInt<5>
    node T_860 = mux(T_370, UInt<5>("h1f"), UInt<5>("h0"))
    node T_866 = cat(T_703, T_541)
    node T_867 = cat(T_866, UInt<1>("h0"))
    node T_868 = cat(T_860, T_55)
    node T_869 = cat(T_868, T_543)
    node T_870 = cat(T_869, T_867)
    node T_871 = bits(T_870, 12, 12)
    node T_887 = bits(T_870, 10, 5)
    node T_908 = bits(T_870, 4, 1)
    node T_924 = bits(T_870, 11, 11)
    node T_926 = cat(T_924, UInt<7>("h63"))
    node T_927 = cat(UInt<3>("h0"), T_908)
    node T_928 = cat(T_927, T_926)
    node T_929 = cat(UInt<5>("h0"), T_62)
    node T_930 = cat(T_871, T_887)
    node T_931 = cat(T_930, T_929)
    node T_932 = cat(T_931, T_928)
    wire T_947_bits : UInt<32>
    wire T_947_rd : UInt<5>
    wire T_947_rs1 : UInt<5>
    wire T_947_rs2 : UInt<5>
    wire T_947_rs3 : UInt<5>
    node T_1024 = cat(UInt<3>("h1"), T_908)
    node T_1025 = cat(T_1024, T_926)
    node T_1029 = cat(T_931, T_1025)
    wire T_1042_bits : UInt<32>
    wire T_1042_rd : UInt<5>
    wire T_1042_rs1 : UInt<5>
    wire T_1042_rs2 : UInt<5>
    wire T_1042_rs3 : UInt<5>
    node T_1056 = cat(T_584, T_377)
    node T_1057 = cat(T_1056, UInt<3>("h1"))
    node T_1058 = cat(T_1057, T_381)
    wire T_1069_bits : UInt<32>
    wire T_1069_rd : UInt<5>
    wire T_1069_rs1 : UInt<5>
    wire T_1069_rs2 : UInt<5>
    wire T_1069_rs3 : UInt<5>
    node T_1079 = cat(T_55, UInt<3>("h0"))
    node T_1080 = cat(T_29, T_370)
    node T_1081 = cat(T_1080, T_1079)
    node T_1086 = cat(T_377, UInt<7>("h7"))
    node T_1087 = cat(T_1081, UInt<5>("h2"))
    node T_1088 = cat(T_1087, UInt<3>("h3"))
    node T_1089 = cat(T_1088, T_1086)
    wire T_1100_bits : UInt<32>
    wire T_1100_rd : UInt<5>
    wire T_1100_rs1 : UInt<5>
    wire T_1100_rs2 : UInt<5>
    wire T_1100_rs3 : UInt<5>
    node T_1106 = bits(io_in, 3, 2)
    node T_1108 = bits(io_in, 6, 4)
    node T_1110 = cat(T_1108, UInt<2>("h0"))
    node T_1111 = cat(T_1106, T_370)
    node T_1112 = cat(T_1111, T_1110)
    node T_1117 = cat(T_377, UInt<7>("h3"))
    node T_1118 = cat(T_1112, UInt<5>("h2"))
    node T_1119 = cat(T_1118, UInt<3>("h2"))
    node T_1120 = cat(T_1119, T_1117)
    wire T_1131_bits : UInt<32>
    wire T_1131_rd : UInt<5>
    wire T_1131_rs1 : UInt<5>
    wire T_1131_rs2 : UInt<5>
    wire T_1131_rs3 : UInt<5>
    node T_1151 = cat(T_1088, T_1117)
    wire T_1162_bits : UInt<32>
    wire T_1162_rd : UInt<5>
    wire T_1162_rs1 : UInt<5>
    wire T_1162_rs2 : UInt<5>
    wire T_1162_rs3 : UInt<5>
    node T_1173 = cat(T_377, UInt<7>("h33"))
    node T_1174 = cat(T_375, UInt<5>("h0"))
    node T_1175 = cat(T_1174, UInt<3>("h0"))
    node T_1176 = cat(T_1175, T_1173)
    wire T_1187_bits : UInt<32>
    wire T_1187_rd : UInt<5>
    wire T_1187_rs1 : UInt<5>
    wire T_1187_rs2 : UInt<5>
    wire T_1187_rs3 : UInt<5>
    node T_1199 = cat(T_375, T_377)
    node T_1200 = cat(T_1199, UInt<3>("h0"))
    node T_1201 = cat(T_1200, T_1173)
    wire T_1212_bits : UInt<32>
    wire T_1212_rd : UInt<5>
    wire T_1212_rs1 : UInt<5>
    wire T_1212_rs2 : UInt<5>
    wire T_1212_rs3 : UInt<5>
    node T_1226 = cat(T_1200, UInt<12>("h67"))
    node T_1227 = shr(T_1226, 7)
    node T_1229 = cat(T_1227, UInt<7>("h1f"))
    node T_1233 = mux(T_405, T_1226, T_1229)
    wire T_1244_bits : UInt<32>
    wire T_1244_rd : UInt<5>
    wire T_1244_rs1 : UInt<5>
    wire T_1244_rs2 : UInt<5>
    wire T_1244_rs3 : UInt<5>
    node T_1252 = neq(T_375, UInt<5>("h0"))
    node T_1253_bits = mux(T_1252, T_1187_bits, T_1244_bits)
    node T_1253_rd = mux(T_1252, T_1187_rd, UInt<5>("h0"))
    node T_1253_rs1 = mux(T_1252, UInt<5>("h0"), T_1244_rs1)
    node T_1253_rs2 = mux(T_1252, T_1187_rs2, T_1244_rs2)
    node T_1253_rs3 = mux(T_1252, T_1187_rs3, T_1244_rs3)
    node T_1267 = cat(T_1200, UInt<12>("he7"))
    node T_1270 = cat(T_1227, UInt<7>("h73"))
    node T_1272 = or(T_1270, UInt<25>("h100000"))
    node T_1276 = mux(T_405, T_1267, T_1272)
    wire T_1287_bits : UInt<32>
    wire T_1287_rd : UInt<5>
    wire T_1287_rs1 : UInt<5>
    wire T_1287_rs2 : UInt<5>
    wire T_1287_rs3 : UInt<5>
    node T_1296_bits = mux(T_1252, T_1212_bits, T_1287_bits)
    node T_1296_rd = mux(T_1252, T_1212_rd, UInt<5>("h1"))
    node T_1296_rs1 = mux(T_1252, T_1212_rs1, T_1287_rs1)
    node T_1296_rs2 = mux(T_1252, T_1212_rs2, T_1287_rs2)
    node T_1296_rs3 = mux(T_1252, T_1212_rs3, T_1287_rs3)
    node T_1303_bits = mux(T_370, T_1296_bits, T_1253_bits)
    node T_1303_rd = mux(T_370, T_1296_rd, T_1253_rd)
    node T_1303_rs1 = mux(T_370, T_1296_rs1, T_1253_rs1)
    node T_1303_rs2 = mux(T_370, T_1296_rs2, T_1253_rs2)
    node T_1303_rs3 = mux(T_370, T_1296_rs3, T_1253_rs3)
    node T_1312 = cat(T_61, T_56)
    node T_1313 = cat(T_1312, UInt<3>("h0"))
    node T_1314 = shr(T_1313, 5)
    node T_1323 = bits(T_1313, 4, 0)
    node T_1325 = cat(UInt<3>("h3"), T_1323)
    node T_1326 = cat(T_1325, UInt<7>("h27"))
    node T_1327 = cat(T_1314, T_375)
    node T_1328 = cat(T_1327, UInt<5>("h2"))
    node T_1329 = cat(T_1328, T_1326)
    wire T_1340_bits : UInt<32>
    wire T_1340_rd : UInt<5>
    wire T_1340_rs1 : UInt<5>
    wire T_1340_rs2 : UInt<5>
    wire T_1340_rs3 : UInt<5>
    node T_1346 = bits(io_in, 8, 7)
    node T_1347 = bits(io_in, 12, 9)
    node T_1349 = cat(T_1346, T_1347)
    node T_1350 = cat(T_1349, UInt<2>("h0"))
    node T_1351 = shr(T_1350, 5)
    node T_1360 = bits(T_1350, 4, 0)
    node T_1362 = cat(UInt<3>("h2"), T_1360)
    node T_1363 = cat(T_1362, UInt<7>("h23"))
    node T_1364 = cat(T_1351, T_375)
    node T_1365 = cat(T_1364, UInt<5>("h2"))
    node T_1366 = cat(T_1365, T_1363)
    wire T_1377_bits : UInt<32>
    wire T_1377_rd : UInt<5>
    wire T_1377_rs1 : UInt<5>
    wire T_1377_rs2 : UInt<5>
    wire T_1377_rs3 : UInt<5>
    node T_1400 = cat(T_1325, UInt<7>("h23"))
    node T_1403 = cat(T_1328, T_1400)
    wire T_1414_bits : UInt<32>
    wire T_1414_rd : UInt<5>
    wire T_1414_rs1 : UInt<5>
    wire T_1414_rs2 : UInt<5>
    wire T_1414_rs3 : UInt<5>
    node T_1421 = bits(io_in, 19, 15)
    node T_1422 = bits(io_in, 24, 20)
    wire T_1430_bits : UInt<32>
    wire T_1430_rd : UInt<5>
    wire T_1430_rs1 : UInt<5>
    wire T_1430_rs2 : UInt<5>
    wire T_1430_rs3 : UInt<5>
    wire T_1446_bits : UInt<32>
    wire T_1446_rd : UInt<5>
    wire T_1446_rs1 : UInt<5>
    wire T_1446_rs2 : UInt<5>
    wire T_1446_rs3 : UInt<5>
    wire T_1462_bits : UInt<32>
    wire T_1462_rd : UInt<5>
    wire T_1462_rs1 : UInt<5>
    wire T_1462_rs2 : UInt<5>
    wire T_1462_rs3 : UInt<5>
    wire T_1478_bits : UInt<32>
    wire T_1478_rd : UInt<5>
    wire T_1478_rs1 : UInt<5>
    wire T_1478_rs2 : UInt<5>
    wire T_1478_rs3 : UInt<5>
    wire T_1494_bits : UInt<32>
    wire T_1494_rd : UInt<5>
    wire T_1494_rs1 : UInt<5>
    wire T_1494_rs2 : UInt<5>
    wire T_1494_rs3 : UInt<5>
    wire T_1510_bits : UInt<32>
    wire T_1510_rd : UInt<5>
    wire T_1510_rs1 : UInt<5>
    wire T_1510_rs2 : UInt<5>
    wire T_1510_rs3 : UInt<5>
    wire T_1526_bits : UInt<32>
    wire T_1526_rd : UInt<5>
    wire T_1526_rs1 : UInt<5>
    wire T_1526_rs2 : UInt<5>
    wire T_1526_rs3 : UInt<5>
    wire T_1542_bits : UInt<32>
    wire T_1542_rd : UInt<5>
    wire T_1542_rs1 : UInt<5>
    wire T_1542_rs2 : UInt<5>
    wire T_1542_rs3 : UInt<5>
    node T_1549 = bits(io_in, 15, 13)
    node T_1550 = cat(T_8, T_1549)
    node T_1552 = and(T_1550, UInt<5>("hf"))
    node T_1554 = geq(T_1550, UInt<5>("h10"))
    node T_1556 = and(T_1552, UInt<5>("h7"))
    node T_1558 = geq(T_1552, UInt<5>("h8"))
    node T_1560 = and(T_1556, UInt<5>("h3"))
    node T_1562 = geq(T_1556, UInt<5>("h4"))
    node T_1564 = and(T_1560, UInt<5>("h1"))
    node T_1566 = geq(T_1560, UInt<5>("h2"))
    node T_1570 = geq(T_1564, UInt<5>("h1"))
    node T_1571_bits = mux(T_1570, T_1542_bits, T_1526_bits)
    node T_1571_rd = mux(T_1570, T_1542_rd, T_1526_rd)
    node T_1571_rs1 = mux(T_1570, T_1542_rs1, T_1526_rs1)
    node T_1571_rs2 = mux(T_1570, T_1542_rs2, T_1526_rs2)
    node T_1571_rs3 = mux(T_1570, T_1542_rs3, T_1526_rs3)
    node T_1581_bits = mux(T_1570, T_1510_bits, T_1494_bits)
    node T_1581_rd = mux(T_1570, T_1510_rd, T_1494_rd)
    node T_1581_rs1 = mux(T_1570, T_1510_rs1, T_1494_rs1)
    node T_1581_rs2 = mux(T_1570, T_1510_rs2, T_1494_rs2)
    node T_1581_rs3 = mux(T_1570, T_1510_rs3, T_1494_rs3)
    node T_1587_bits = mux(T_1566, T_1571_bits, T_1581_bits)
    node T_1587_rd = mux(T_1566, T_1571_rd, T_1581_rd)
    node T_1587_rs1 = mux(T_1566, T_1571_rs1, T_1581_rs1)
    node T_1587_rs2 = mux(T_1566, T_1571_rs2, T_1581_rs2)
    node T_1587_rs3 = mux(T_1566, T_1571_rs3, T_1581_rs3)
    node T_1601_bits = mux(T_1570, T_1478_bits, T_1462_bits)
    node T_1601_rd = mux(T_1570, T_1478_rd, T_1462_rd)
    node T_1601_rs1 = mux(T_1570, T_1478_rs1, T_1462_rs1)
    node T_1601_rs2 = mux(T_1570, T_1478_rs2, T_1462_rs2)
    node T_1601_rs3 = mux(T_1570, T_1478_rs3, T_1462_rs3)
    node T_1611_bits = mux(T_1570, T_1446_bits, T_1430_bits)
    node T_1611_rd = mux(T_1570, T_1446_rd, T_1430_rd)
    node T_1611_rs1 = mux(T_1570, T_1446_rs1, T_1430_rs1)
    node T_1611_rs2 = mux(T_1570, T_1446_rs2, T_1430_rs2)
    node T_1611_rs3 = mux(T_1570, T_1446_rs3, T_1430_rs3)
    node T_1617_bits = mux(T_1566, T_1601_bits, T_1611_bits)
    node T_1617_rd = mux(T_1566, T_1601_rd, T_1611_rd)
    node T_1617_rs1 = mux(T_1566, T_1601_rs1, T_1611_rs1)
    node T_1617_rs2 = mux(T_1566, T_1601_rs2, T_1611_rs2)
    node T_1617_rs3 = mux(T_1566, T_1601_rs3, T_1611_rs3)
    node T_1623_bits = mux(T_1562, T_1587_bits, T_1617_bits)
    node T_1623_rd = mux(T_1562, T_1587_rd, T_1617_rd)
    node T_1623_rs1 = mux(T_1562, T_1587_rs1, T_1617_rs1)
    node T_1623_rs2 = mux(T_1562, T_1587_rs2, T_1617_rs2)
    node T_1623_rs3 = mux(T_1562, T_1587_rs3, T_1617_rs3)
    node T_1641_bits = mux(T_1570, T_1414_bits, T_1377_bits)
    node T_1641_rd = mux(T_1570, T_1414_rd, T_1377_rd)
    node T_1641_rs1 = mux(T_1570, UInt<5>("h2"), UInt<5>("h2"))
    node T_1641_rs2 = mux(T_1570, T_1414_rs2, T_1377_rs2)
    node T_1641_rs3 = mux(T_1570, T_1414_rs3, T_1377_rs3)
    node T_1651_bits = mux(T_1570, T_1340_bits, T_1303_bits)
    node T_1651_rd = mux(T_1570, T_1340_rd, T_1303_rd)
    node T_1651_rs1 = mux(T_1570, UInt<5>("h2"), T_1303_rs1)
    node T_1651_rs2 = mux(T_1570, T_1340_rs2, T_1303_rs2)
    node T_1651_rs3 = mux(T_1570, T_1340_rs3, T_1303_rs3)
    node T_1657_bits = mux(T_1566, T_1641_bits, T_1651_bits)
    node T_1657_rd = mux(T_1566, T_1641_rd, T_1651_rd)
    node T_1657_rs1 = mux(T_1566, T_1641_rs1, T_1651_rs1)
    node T_1657_rs2 = mux(T_1566, T_1641_rs2, T_1651_rs2)
    node T_1657_rs3 = mux(T_1566, T_1641_rs3, T_1651_rs3)
    node T_1671_bits = mux(T_1570, T_1162_bits, T_1131_bits)
    node T_1671_rd = mux(T_1570, T_1162_rd, T_1131_rd)
    node T_1671_rs1 = mux(T_1570, UInt<5>("h2"), UInt<5>("h2"))
    node T_1671_rs2 = mux(T_1570, T_1162_rs2, T_1131_rs2)
    node T_1671_rs3 = mux(T_1570, T_1162_rs3, T_1131_rs3)
    node T_1681_bits = mux(T_1570, T_1100_bits, T_1069_bits)
    node T_1681_rd = mux(T_1570, T_1100_rd, T_1069_rd)
    node T_1681_rs1 = mux(T_1570, UInt<5>("h2"), T_1069_rs1)
    node T_1681_rs2 = mux(T_1570, T_1100_rs2, T_1069_rs2)
    node T_1681_rs3 = mux(T_1570, T_1100_rs3, T_1069_rs3)
    node T_1687_bits = mux(T_1566, T_1671_bits, T_1681_bits)
    node T_1687_rd = mux(T_1566, T_1671_rd, T_1681_rd)
    node T_1687_rs1 = mux(T_1566, T_1671_rs1, T_1681_rs1)
    node T_1687_rs2 = mux(T_1566, T_1671_rs2, T_1681_rs2)
    node T_1687_rs3 = mux(T_1566, T_1671_rs3, T_1681_rs3)
    node T_1693_bits = mux(T_1562, T_1657_bits, T_1687_bits)
    node T_1693_rd = mux(T_1562, T_1657_rd, T_1687_rd)
    node T_1693_rs1 = mux(T_1562, T_1657_rs1, T_1687_rs1)
    node T_1693_rs2 = mux(T_1562, T_1657_rs2, T_1687_rs2)
    node T_1693_rs3 = mux(T_1562, T_1657_rs3, T_1687_rs3)
    node T_1699_bits = mux(T_1558, T_1623_bits, T_1693_bits)
    node T_1699_rd = mux(T_1558, T_1623_rd, T_1693_rd)
    node T_1699_rs1 = mux(T_1558, T_1623_rs1, T_1693_rs1)
    node T_1699_rs2 = mux(T_1558, T_1623_rs2, T_1693_rs2)
    node T_1699_rs3 = mux(T_1558, T_1623_rs3, T_1693_rs3)
    node T_1721_bits = mux(T_1570, T_1042_bits, T_947_bits)
    node T_1721_rd = mux(T_1570, UInt<5>("h0"), T_947_rd)
    node T_1721_rs1 = mux(T_1570, T_1042_rs1, T_947_rs1)
    node T_1721_rs2 = mux(T_1570, UInt<5>("h0"), UInt<5>("h0"))
    node T_1721_rs3 = mux(T_1570, T_1042_rs3, T_947_rs3)
    node T_1731_bits = mux(T_1570, T_850_bits, T_735_bits)
    node T_1731_rd = mux(T_1570, UInt<5>("h0"), T_735_rd)
    node T_1731_rs1 = mux(T_1570, T_850_rs1, T_735_rs1)
    node T_1731_rs2 = mux(T_1570, T_850_rs2, T_735_rs2)
    node T_1731_rs3 = mux(T_1570, T_850_rs3, T_735_rs3)
    node T_1737_bits = mux(T_1566, T_1721_bits, T_1731_bits)
    node T_1737_rd = mux(T_1566, T_1721_rd, T_1731_rd)
    node T_1737_rs1 = mux(T_1566, T_1721_rs1, T_1731_rs1)
    node T_1737_rs2 = mux(T_1566, T_1721_rs2, T_1731_rs2)
    node T_1737_rs3 = mux(T_1566, T_1721_rs3, T_1731_rs3)
    node T_1751_bits = mux(T_1570, T_576_bits, T_468_bits)
    node T_1751_rd = mux(T_1570, T_576_rd, T_468_rd)
    node T_1751_rs1 = mux(T_1570, T_576_rs1, UInt<5>("h0"))
    node T_1751_rs2 = mux(T_1570, T_576_rs2, T_468_rs2)
    node T_1751_rs3 = mux(T_1570, T_576_rs3, T_468_rs3)
    node T_1761_bits = mux(T_1570, T_435_bits, T_397_bits)
    node T_1761_rd = mux(T_1570, T_435_rd, T_397_rd)
    node T_1761_rs1 = mux(T_1570, T_435_rs1, T_397_rs1)
    node T_1761_rs2 = mux(T_1570, T_435_rs2, T_397_rs2)
    node T_1761_rs3 = mux(T_1570, T_435_rs3, T_397_rs3)
    node T_1767_bits = mux(T_1566, T_1751_bits, T_1761_bits)
    node T_1767_rd = mux(T_1566, T_1751_rd, T_1761_rd)
    node T_1767_rs1 = mux(T_1566, T_1751_rs1, T_1761_rs1)
    node T_1767_rs2 = mux(T_1566, T_1751_rs2, T_1761_rs2)
    node T_1767_rs3 = mux(T_1566, T_1751_rs3, T_1761_rs3)
    node T_1773_bits = mux(T_1562, T_1737_bits, T_1767_bits)
    node T_1773_rd = mux(T_1562, T_1737_rd, T_1767_rd)
    node T_1773_rs1 = mux(T_1562, T_1737_rs1, T_1767_rs1)
    node T_1773_rs2 = mux(T_1562, T_1737_rs2, T_1767_rs2)
    node T_1773_rs3 = mux(T_1562, T_1737_rs3, T_1767_rs3)
    node T_1791_bits = mux(T_1570, T_364_bits, T_317_bits)
    node T_1791_rd = mux(T_1570, T_364_rd, T_317_rd)
    node T_1791_rs1 = mux(T_1570, T_364_rs1, T_317_rs1)
    node T_1791_rs2 = mux(T_1570, T_364_rs2, T_317_rs2)
    node T_1791_rs3 = mux(T_1570, T_364_rs3, T_317_rs3)
    node T_1801_bits = mux(T_1570, T_266_bits, T_219_bits)
    node T_1801_rd = mux(T_1570, T_266_rd, T_219_rd)
    node T_1801_rs1 = mux(T_1570, T_266_rs1, T_219_rs1)
    node T_1801_rs2 = mux(T_1570, T_266_rs2, T_219_rs2)
    node T_1801_rs3 = mux(T_1570, T_266_rs3, T_219_rs3)
    node T_1807_bits = mux(T_1566, T_1791_bits, T_1801_bits)
    node T_1807_rd = mux(T_1566, T_1791_rd, T_1801_rd)
    node T_1807_rs1 = mux(T_1566, T_1791_rs1, T_1801_rs1)
    node T_1807_rs2 = mux(T_1566, T_1791_rs2, T_1801_rs2)
    node T_1807_rs3 = mux(T_1566, T_1791_rs3, T_1801_rs3)
    node T_1821_bits = mux(T_1570, T_168_bits, T_129_bits)
    node T_1821_rd = mux(T_1570, T_168_rd, T_129_rd)
    node T_1821_rs1 = mux(T_1570, T_168_rs1, T_129_rs1)
    node T_1821_rs2 = mux(T_1570, T_168_rs2, T_129_rs2)
    node T_1821_rs3 = mux(T_1570, T_168_rs3, T_129_rs3)
    node T_1831_bits = mux(T_1570, T_88_bits, T_49_bits)
    node T_1831_rd = mux(T_1570, T_88_rd, T_49_rd)
    node T_1831_rs1 = mux(T_1570, T_88_rs1, UInt<5>("h2"))
    node T_1831_rs2 = mux(T_1570, T_88_rs2, T_49_rs2)
    node T_1831_rs3 = mux(T_1570, T_88_rs3, T_49_rs3)
    node T_1837_bits = mux(T_1566, T_1821_bits, T_1831_bits)
    node T_1837_rd = mux(T_1566, T_1821_rd, T_1831_rd)
    node T_1837_rs1 = mux(T_1566, T_1821_rs1, T_1831_rs1)
    node T_1837_rs2 = mux(T_1566, T_1821_rs2, T_1831_rs2)
    node T_1837_rs3 = mux(T_1566, T_1821_rs3, T_1831_rs3)
    node T_1843_bits = mux(T_1562, T_1807_bits, T_1837_bits)
    node T_1843_rd = mux(T_1562, T_1807_rd, T_1837_rd)
    node T_1843_rs1 = mux(T_1562, T_1807_rs1, T_1837_rs1)
    node T_1843_rs2 = mux(T_1562, T_1807_rs2, T_1837_rs2)
    node T_1843_rs3 = mux(T_1562, T_1807_rs3, T_1837_rs3)
    node T_1849_bits = mux(T_1558, T_1773_bits, T_1843_bits)
    node T_1849_rd = mux(T_1558, T_1773_rd, T_1843_rd)
    node T_1849_rs1 = mux(T_1558, T_1773_rs1, T_1843_rs1)
    node T_1849_rs2 = mux(T_1558, T_1773_rs2, T_1843_rs2)
    node T_1849_rs3 = mux(T_1558, T_1773_rs3, T_1843_rs3)
    node T_1855_bits = mux(T_1554, T_1699_bits, T_1849_bits)
    node T_1855_rd = mux(T_1554, T_1699_rd, T_1849_rd)
    node T_1855_rs1 = mux(T_1554, T_1699_rs1, T_1849_rs1)
    node T_1855_rs2 = mux(T_1554, T_1699_rs2, T_1849_rs2)
    node T_1855_rs3 = mux(T_1554, T_1699_rs3, T_1849_rs3)
    io_out_bits <= T_1855_bits
    io_out_rd <= T_1855_rd
    io_out_rs1 <= T_1855_rs1
    io_out_rs2 <= T_1855_rs2
    io_out_rs3 <= T_1855_rs3
    io_rvc <= T_10
    T_49_bits <= pad(T_34, 32)
    T_49_rd <= T_30
    T_49_rs2 <= T_30
    T_49_rs3 <= T_42
    T_88_bits <= pad(T_71, 32)
    T_88_rd <= T_30
    T_88_rs1 <= T_62
    T_88_rs2 <= T_30
    T_88_rs3 <= T_42
    T_129_bits <= pad(T_112, 32)
    T_129_rd <= T_30
    T_129_rs1 <= T_62
    T_129_rs2 <= T_30
    T_129_rs3 <= T_42
    T_168_bits <= pad(T_151, 32)
    T_168_rd <= T_30
    T_168_rs1 <= T_62
    T_168_rs2 <= T_30
    T_168_rs3 <= T_42
    T_219_bits <= pad(T_202, 32)
    T_219_rd <= T_30
    T_219_rs1 <= T_62
    T_219_rs2 <= T_30
    T_219_rs3 <= T_42
    T_266_bits <= pad(T_249, 32)
    T_266_rd <= T_30
    T_266_rs1 <= T_62
    T_266_rs2 <= T_30
    T_266_rs3 <= T_42
    T_317_bits <= pad(T_300, 32)
    T_317_rd <= T_30
    T_317_rs1 <= T_62
    T_317_rs2 <= T_30
    T_317_rs3 <= T_42
    T_364_bits <= pad(T_347, 32)
    T_364_rd <= T_30
    T_364_rs1 <= T_62
    T_364_rs2 <= T_30
    T_364_rs3 <= T_42
    T_397_bits <= T_384
    T_397_rd <= T_377
    T_397_rs1 <= T_377
    T_397_rs2 <= T_30
    T_397_rs3 <= T_42
    T_435_bits <= T_422
    T_435_rd <= T_377
    T_435_rs1 <= T_377
    T_435_rs2 <= T_30
    T_435_rs3 <= T_42
    T_468_bits <= T_455
    T_468_rd <= T_377
    T_468_rs2 <= T_30
    T_468_rs3 <= T_42
    T_511_bits <= T_498
    T_511_rd <= T_377
    T_511_rs1 <= T_377
    T_511_rs2 <= T_30
    T_511_rs3 <= T_42
    T_570_bits <= T_557
    T_570_rd <= T_377
    T_570_rs1 <= T_377
    T_570_rs2 <= T_30
    T_570_rs3 <= T_42
    T_735_bits <= T_718
    T_735_rd <= T_62
    T_735_rs1 <= T_62
    T_735_rs2 <= T_30
    T_735_rs3 <= T_42
    T_850_bits <= T_835
    T_850_rs1 <= T_62
    T_850_rs2 <= T_30
    T_850_rs3 <= T_42
    T_947_bits <= T_932
    T_947_rd <= T_62
    T_947_rs1 <= T_62
    T_947_rs3 <= T_42
    T_1042_bits <= T_1029
    T_1042_rs1 <= T_62
    T_1042_rs3 <= T_42
    T_1069_bits <= pad(T_1058, 32)
    T_1069_rd <= T_377
    T_1069_rs1 <= T_377
    T_1069_rs2 <= T_375
    T_1069_rs3 <= T_42
    T_1100_bits <= pad(T_1089, 32)
    T_1100_rd <= T_377
    T_1100_rs2 <= T_375
    T_1100_rs3 <= T_42
    T_1131_bits <= pad(T_1120, 32)
    T_1131_rd <= T_377
    T_1131_rs2 <= T_375
    T_1131_rs3 <= T_42
    T_1162_bits <= pad(T_1151, 32)
    T_1162_rd <= T_377
    T_1162_rs2 <= T_375
    T_1162_rs3 <= T_42
    T_1187_bits <= pad(T_1176, 32)
    T_1187_rd <= T_377
    T_1187_rs2 <= T_375
    T_1187_rs3 <= T_42
    T_1212_bits <= pad(T_1201, 32)
    T_1212_rd <= T_377
    T_1212_rs1 <= T_377
    T_1212_rs2 <= T_375
    T_1212_rs3 <= T_42
    T_1244_bits <= pad(T_1233, 32)
    T_1244_rs1 <= T_377
    T_1244_rs2 <= T_375
    T_1244_rs3 <= T_42
    T_1287_bits <= pad(T_1276, 32)
    T_1287_rs1 <= T_377
    T_1287_rs2 <= T_375
    T_1287_rs3 <= T_42
    T_1340_bits <= pad(T_1329, 32)
    T_1340_rd <= T_377
    T_1340_rs2 <= T_375
    T_1340_rs3 <= T_42
    T_1377_bits <= pad(T_1366, 32)
    T_1377_rd <= T_377
    T_1377_rs2 <= T_375
    T_1377_rs3 <= T_42
    T_1414_bits <= pad(T_1403, 32)
    T_1414_rd <= T_377
    T_1414_rs2 <= T_375
    T_1414_rs3 <= T_42
    T_1430_bits <= io_in
    T_1430_rd <= T_377
    T_1430_rs1 <= T_1421
    T_1430_rs2 <= T_1422
    T_1430_rs3 <= T_42
    T_1446_bits <= io_in
    T_1446_rd <= T_377
    T_1446_rs1 <= T_1421
    T_1446_rs2 <= T_1422
    T_1446_rs3 <= T_42
    T_1462_bits <= io_in
    T_1462_rd <= T_377
    T_1462_rs1 <= T_1421
    T_1462_rs2 <= T_1422
    T_1462_rs3 <= T_42
    T_1478_bits <= io_in
    T_1478_rd <= T_377
    T_1478_rs1 <= T_1421
    T_1478_rs2 <= T_1422
    T_1478_rs3 <= T_42
    T_1494_bits <= io_in
    T_1494_rd <= T_377
    T_1494_rs1 <= T_1421
    T_1494_rs2 <= T_1422
    T_1494_rs3 <= T_42
    T_1510_bits <= io_in
    T_1510_rd <= T_377
    T_1510_rs1 <= T_1421
    T_1510_rs2 <= T_1422
    T_1510_rs3 <= T_42
    T_1526_bits <= io_in
    T_1526_rd <= T_377
    T_1526_rs1 <= T_1421
    T_1526_rs2 <= T_1422
    T_1526_rs3 <= T_42
    T_1542_bits <= io_in
    T_1542_rd <= T_377
    T_1542_rs1 <= T_1421
    T_1542_rs2 <= T_1422
    T_1542_rs3 <= T_42

  module IBuf :
    input clk : Clock
    input reset : UInt<1>
    output io_imem_ready : UInt<1>
    input io_imem_valid : UInt<1>
    input io_imem_bits_btb_valid : UInt<1>
    input io_imem_bits_btb_bits_taken : UInt<1>
    input io_imem_bits_btb_bits_mask : UInt<2>
    input io_imem_bits_btb_bits_bridx : UInt<1>
    input io_imem_bits_btb_bits_target : UInt<39>
    input io_imem_bits_btb_bits_entry : UInt<6>
    input io_imem_bits_btb_bits_bht_history : UInt<7>
    input io_imem_bits_btb_bits_bht_value : UInt<2>
    input io_imem_bits_pc : UInt<40>
    input io_imem_bits_data : UInt<32>
    input io_imem_bits_mask : UInt<2>
    input io_imem_bits_xcpt_if : UInt<1>
    input io_imem_bits_replay : UInt<1>
    input io_kill : UInt<1>
    output io_pc : UInt<40>
    output io_btb_resp_taken : UInt<1>
    output io_btb_resp_mask : UInt<2>
    output io_btb_resp_bridx : UInt<1>
    output io_btb_resp_target : UInt<39>
    output io_btb_resp_entry : UInt<6>
    output io_btb_resp_bht_history : UInt<7>
    output io_btb_resp_bht_value : UInt<2>
    input io_inst_0_ready : UInt<1>
    output io_inst_0_valid : UInt<1>
    output io_inst_0_bits_pf0 : UInt<1>
    output io_inst_0_bits_pf1 : UInt<1>
    output io_inst_0_bits_replay : UInt<1>
    output io_inst_0_bits_btb_hit : UInt<1>
    output io_inst_0_bits_rvc : UInt<1>
    output io_inst_0_bits_inst_bits : UInt<32>
    output io_inst_0_bits_inst_rd : UInt<5>
    output io_inst_0_bits_inst_rs1 : UInt<5>
    output io_inst_0_bits_inst_rs2 : UInt<5>
    output io_inst_0_bits_inst_rs3 : UInt<5>
  
    reg nBufValid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg buf_btb_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), buf_btb_valid)
    reg buf_btb_bits_taken : UInt<1>, clk with :
      reset => (UInt<1>("h0"), buf_btb_bits_taken)
    reg buf_btb_bits_mask : UInt<2>, clk with :
      reset => (UInt<1>("h0"), buf_btb_bits_mask)
    reg buf_btb_bits_bridx : UInt<1>, clk with :
      reset => (UInt<1>("h0"), buf_btb_bits_bridx)
    reg buf_btb_bits_target : UInt<39>, clk with :
      reset => (UInt<1>("h0"), buf_btb_bits_target)
    reg buf_btb_bits_entry : UInt<6>, clk with :
      reset => (UInt<1>("h0"), buf_btb_bits_entry)
    reg buf_btb_bits_bht_history : UInt<7>, clk with :
      reset => (UInt<1>("h0"), buf_btb_bits_bht_history)
    reg buf_btb_bits_bht_value : UInt<2>, clk with :
      reset => (UInt<1>("h0"), buf_btb_bits_bht_value)
    reg buf_pc : UInt<40>, clk with :
      reset => (UInt<1>("h0"), buf_pc)
    reg buf_data : UInt<32>, clk with :
      reset => (UInt<1>("h0"), buf_data)
    reg buf_mask : UInt<2>, clk with :
      reset => (UInt<1>("h0"), buf_mask)
    reg buf_xcpt_if : UInt<1>, clk with :
      reset => (UInt<1>("h0"), buf_xcpt_if)
    reg buf_replay : UInt<1>, clk with :
      reset => (UInt<1>("h0"), buf_replay)
    reg ibufBTBHit : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ibufBTBHit)
    reg ibufBTBResp_taken : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ibufBTBResp_taken)
    reg ibufBTBResp_mask : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ibufBTBResp_mask)
    reg ibufBTBResp_bridx : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ibufBTBResp_bridx)
    reg ibufBTBResp_target : UInt<39>, clk with :
      reset => (UInt<1>("h0"), ibufBTBResp_target)
    reg ibufBTBResp_entry : UInt<6>, clk with :
      reset => (UInt<1>("h0"), ibufBTBResp_entry)
    reg ibufBTBResp_bht_history : UInt<7>, clk with :
      reset => (UInt<1>("h0"), ibufBTBResp_bht_history)
    reg ibufBTBResp_bht_value : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ibufBTBResp_bht_value)
    node pcWordBits = bits(io_imem_bits_pc, 1, 1)
    wire nReady : UInt<2>
    node T_375 = and(io_imem_bits_btb_valid, io_imem_bits_btb_bits_taken)
    node T_377 = add(io_imem_bits_btb_bits_bridx, UInt<1>("h1"))
    node T_379 = mux(T_375, T_377, UInt<2>("h2"))
    node GEN_31 = pad(pcWordBits, 2)
    node T_380 = sub(T_379, GEN_31)
    node nIC = tail(T_380, 1)
    node GEN_32 = pad(nBufValid, 2)
    node T_381 = sub(nReady, GEN_32)
    node nICReady = tail(T_381, 1)
    node T_383 = mux(io_imem_valid, nIC, UInt<2>("h0"))
    node T_384 = add(T_383, GEN_32)
    node nValid = tail(T_384, 1)
    node T_385 = geq(nReady, GEN_32)
    node T_386 = geq(nICReady, nIC)
    node T_388 = sub(nIC, nICReady)
    node T_389 = tail(T_388, 1)
    node T_390 = geq(UInt<2>("h1"), T_389)
    node T_391 = or(T_386, T_390)
    node T_392 = and(T_385, T_391)
    node T_395 = sub(GEN_32, nReady)
    node T_396 = tail(T_395, 1)
    node T_397 = mux(T_385, UInt<2>("h0"), T_396)
    node T_399 = and(io_imem_valid, T_385)
    node T_400 = lt(nICReady, nIC)
    node T_401 = and(T_399, T_400)
    node T_406 = and(T_401, T_390)
    node T_407 = add(GEN_31, nICReady)
    node T_408 = tail(T_407, 1)
    node T_411 = shr(io_imem_bits_data, 16)
    node T_412 = cat(T_411, T_411)
    node T_413 = cat(T_412, io_imem_bits_data)
    node GEN_39 = pad(T_408, 6)
    node T_414 = shlw(GEN_39, 4)
    node T_415 = dshr(T_413, T_414)
    node T_416 = bits(T_415, 15, 0)
    node T_418 = and(io_imem_bits_pc, UInt<40>("hfffffffffc"))
    node GEN_40 = pad(nICReady, 3)
    node T_419 = shlw(GEN_40, 1)
    node GEN_41 = pad(T_419, 40)
    node T_420 = add(io_imem_bits_pc, GEN_41)
    node T_421 = tail(T_420, 1)
    node T_422 = and(T_421, UInt<40>("h3"))
    node T_423 = or(T_418, T_422)
    node GEN_42 = pad(io_imem_bits_btb_bits_bridx, 2)
    node T_424 = add(GEN_42, nICReady)
    node T_425 = tail(T_424, 1)
    node GEN_0 = mux(io_imem_bits_btb_valid, io_imem_bits_btb_bits_taken, ibufBTBResp_taken)
    node GEN_1 = mux(io_imem_bits_btb_valid, io_imem_bits_btb_bits_mask, ibufBTBResp_mask)
    node GEN_2 = mux(io_imem_bits_btb_valid, T_425, pad(ibufBTBResp_bridx, 2))
    node GEN_3 = mux(io_imem_bits_btb_valid, io_imem_bits_btb_bits_target, ibufBTBResp_target)
    node GEN_4 = mux(io_imem_bits_btb_valid, io_imem_bits_btb_bits_entry, ibufBTBResp_entry)
    node GEN_5 = mux(io_imem_bits_btb_valid, io_imem_bits_btb_bits_bht_history, ibufBTBResp_bht_history)
    node GEN_6 = mux(io_imem_bits_btb_valid, io_imem_bits_btb_bits_bht_value, ibufBTBResp_bht_value)
    node GEN_7 = mux(T_406, T_389, T_397)
    node GEN_8 = mux(T_406, io_imem_bits_btb_valid, buf_btb_valid)
    node GEN_9 = mux(T_406, io_imem_bits_btb_bits_taken, buf_btb_bits_taken)
    node GEN_10 = mux(T_406, io_imem_bits_btb_bits_mask, buf_btb_bits_mask)
    node GEN_11 = mux(T_406, io_imem_bits_btb_bits_bridx, buf_btb_bits_bridx)
    node GEN_12 = mux(T_406, io_imem_bits_btb_bits_target, buf_btb_bits_target)
    node GEN_13 = mux(T_406, io_imem_bits_btb_bits_entry, buf_btb_bits_entry)
    node GEN_14 = mux(T_406, io_imem_bits_btb_bits_bht_history, buf_btb_bits_bht_history)
    node GEN_15 = mux(T_406, io_imem_bits_btb_bits_bht_value, buf_btb_bits_bht_value)
    node GEN_16 = mux(T_406, T_423, buf_pc)
    node GEN_17 = mux(T_406, pad(T_416, 32), buf_data)
    node GEN_18 = mux(T_406, io_imem_bits_mask, buf_mask)
    node GEN_19 = mux(T_406, io_imem_bits_xcpt_if, buf_xcpt_if)
    node GEN_20 = mux(T_406, io_imem_bits_replay, buf_replay)
    node GEN_21 = mux(T_406, io_imem_bits_btb_valid, ibufBTBHit)
    node GEN_22 = mux(T_406, GEN_0, ibufBTBResp_taken)
    node GEN_23 = mux(T_406, GEN_1, ibufBTBResp_mask)
    node GEN_24 = mux(T_406, GEN_2, pad(ibufBTBResp_bridx, 2))
    node GEN_25 = mux(T_406, GEN_3, ibufBTBResp_target)
    node GEN_26 = mux(T_406, GEN_4, ibufBTBResp_entry)
    node GEN_27 = mux(T_406, GEN_5, ibufBTBResp_bht_history)
    node GEN_28 = mux(T_406, GEN_6, ibufBTBResp_bht_value)
    node GEN_29 = mux(io_kill, UInt<2>("h0"), GEN_7)
    node T_428 = add(UInt<2>("h2"), GEN_32)
    node T_429 = tail(T_428, 1)
    node T_430 = sub(T_429, GEN_31)
    node T_431 = tail(T_430, 1)
    node T_432 = bits(io_imem_bits_data, 15, 0)
    node T_433 = cat(T_432, T_432)
    node T_434 = cat(io_imem_bits_data, T_433)
    node T_435 = shr(T_434, 48)
    node T_436 = cat(T_435, T_435)
    node T_437 = cat(T_436, T_436)
    node T_438 = cat(T_437, T_434)
    node GEN_45 = pad(T_431, 6)
    node T_439 = shlw(GEN_45, 4)
    node GEN_46 = pad(T_438, 191)
    node T_440 = dshlw(GEN_46, T_439)
    node icData = bits(T_440, 95, 64)
    node GEN_47 = pad(nBufValid, 5)
    node T_443 = shlw(GEN_47, 4)
    node T_444 = dshlw(UInt<63>("hffffffff"), T_443)
    node icMask = bits(T_444, 31, 0)
    node T_445 = and(icData, icMask)
    node T_446 = not(icMask)
    node T_447 = and(buf_data, T_446)
    node inst = or(T_445, T_447)
    node T_449 = dshlw(UInt<4>("h1"), nValid)
    node T_451 = sub(T_449, UInt<4>("h1"))
    node T_452 = tail(T_451, 1)
    node valid = bits(T_452, 1, 0)
    node T_454 = dshlw(UInt<2>("h1"), nBufValid)
    node T_456 = sub(T_454, UInt<2>("h1"))
    node bufMask = tail(T_456, 1)
    node T_458 = mux(buf_xcpt_if, bufMask, UInt<2>("h0"))
    node T_459 = not(bufMask)
    node T_461 = mux(io_imem_bits_xcpt_if, T_459, UInt<2>("h0"))
    node T_462 = or(T_458, T_461)
    node xcpt_if = and(valid, T_462)
    node T_464 = mux(buf_replay, bufMask, UInt<2>("h0"))
    node T_467 = mux(io_imem_bits_replay, T_459, UInt<2>("h0"))
    node T_468 = or(T_464, T_467)
    node ic_replay = and(valid, T_468)
    node T_470 = dshlw(UInt<2>("h1"), ibufBTBResp_bridx)
    node ibufBTBHitMask = mux(ibufBTBHit, T_470, UInt<2>("h0"))
    node T_472 = add(io_imem_bits_btb_bits_bridx, nBufValid)
    node T_473 = sub(T_472, GEN_31)
    node T_474 = tail(T_473, 1)
    node T_476 = dshlw(UInt<4>("h1"), T_474)
    node icBTBHitMask = mux(io_imem_bits_btb_valid, T_476, UInt<4>("h0"))
    node T_478 = and(ibufBTBHitMask, bufMask)
    node GEN_49 = pad(T_459, 4)
    node T_480 = and(icBTBHitMask, GEN_49)
    node GEN_50 = pad(T_478, 4)
    node btbHitMask = or(GEN_50, T_480)
    node T_483 = neq(T_478, UInt<2>("h0"))
    node T_484_taken = mux(T_483, ibufBTBResp_taken, io_imem_bits_btb_bits_taken)
    node T_484_mask = mux(T_483, ibufBTBResp_mask, io_imem_bits_btb_bits_mask)
    node T_484_bridx = mux(T_483, ibufBTBResp_bridx, io_imem_bits_btb_bits_bridx)
    node T_484_target = mux(T_483, ibufBTBResp_target, io_imem_bits_btb_bits_target)
    node T_484_entry = mux(T_483, ibufBTBResp_entry, io_imem_bits_btb_bits_entry)
    node T_484_bht_history = mux(T_483, ibufBTBResp_bht_history, io_imem_bits_btb_bits_bht_history)
    node T_484_bht_value = mux(T_483, ibufBTBResp_bht_value, io_imem_bits_btb_bits_bht_value)
    node T_494 = gt(nBufValid, UInt<1>("h0"))
    node T_495 = mux(T_494, buf_pc, io_imem_bits_pc)
    inst RVCExpander_1 of RVCExpander
    node T_497 = dshr(ic_replay, UInt<1>("h0"))
    node T_498 = bits(T_497, 0, 0)
    node T_500 = eq(RVCExpander_1.io_rvc, UInt<1>("h0"))
    node T_501 = dshr(btbHitMask, UInt<1>("h0"))
    node T_502 = bits(T_501, 0, 0)
    node T_504 = add(UInt<1>("h0"), UInt<1>("h1"))
    node T_505 = tail(T_504, 1)
    node T_506 = dshr(ic_replay, T_505)
    node T_507 = bits(T_506, 0, 0)
    node T_508 = or(T_502, T_507)
    node T_509 = and(T_500, T_508)
    node T_510 = or(T_498, T_509)
    node T_511 = dshr(valid, UInt<1>("h0"))
    node T_512 = bits(T_511, 0, 0)
    node T_516 = dshr(valid, T_505)
    node T_517 = bits(T_516, 0, 0)
    node T_518 = or(RVCExpander_1.io_rvc, T_517)
    node T_522 = dshr(xcpt_if, T_505)
    node T_523 = bits(T_522, 0, 0)
    node T_524 = or(T_518, T_523)
    node T_525 = or(T_524, T_510)
    node T_526 = and(T_512, T_525)
    node T_527 = dshr(xcpt_if, UInt<1>("h0"))
    node T_528 = bits(T_527, 0, 0)
    node T_536 = and(T_500, T_523)
    node T_544 = dshr(btbHitMask, T_505)
    node T_545 = bits(T_544, 0, 0)
    node T_546 = and(T_500, T_545)
    node T_547 = or(T_502, T_546)
    node T_548 = and(io_inst_0_ready, io_inst_0_valid)
    node T_553 = add(UInt<2>("h0"), UInt<2>("h2"))
    node T_554 = tail(T_553, 1)
    node T_555 = mux(RVCExpander_1.io_rvc, pad(T_505, 2), T_554)
    node GEN_30 = mux(T_548, T_555, UInt<2>("h0"))
    io_imem_ready <= T_392
    io_pc <= T_495
    io_btb_resp_taken <= T_484_taken
    io_btb_resp_mask <= T_484_mask
    io_btb_resp_bridx <= T_484_bridx
    io_btb_resp_target <= T_484_target
    io_btb_resp_entry <= T_484_entry
    io_btb_resp_bht_history <= T_484_bht_history
    io_btb_resp_bht_value <= T_484_bht_value
    io_inst_0_valid <= T_526
    io_inst_0_bits_pf0 <= T_528
    io_inst_0_bits_pf1 <= T_536
    io_inst_0_bits_replay <= T_510
    io_inst_0_bits_btb_hit <= T_547
    io_inst_0_bits_rvc <= RVCExpander_1.io_rvc
    io_inst_0_bits_inst_bits <= RVCExpander_1.io_out_bits
    io_inst_0_bits_inst_rd <= RVCExpander_1.io_out_rd
    io_inst_0_bits_inst_rs1 <= RVCExpander_1.io_out_rs1
    io_inst_0_bits_inst_rs2 <= RVCExpander_1.io_out_rs2
    io_inst_0_bits_inst_rs3 <= RVCExpander_1.io_out_rs3
    nBufValid <= bits(GEN_29, 0, 0)
    buf_btb_valid <= GEN_8
    buf_btb_bits_taken <= GEN_9
    buf_btb_bits_mask <= GEN_10
    buf_btb_bits_bridx <= GEN_11
    buf_btb_bits_target <= GEN_12
    buf_btb_bits_entry <= GEN_13
    buf_btb_bits_bht_history <= GEN_14
    buf_btb_bits_bht_value <= GEN_15
    buf_pc <= GEN_16
    buf_data <= GEN_17
    buf_mask <= GEN_18
    buf_xcpt_if <= GEN_19
    buf_replay <= GEN_20
    ibufBTBHit <= GEN_21
    ibufBTBResp_taken <= GEN_22
    ibufBTBResp_mask <= GEN_23
    ibufBTBResp_bridx <= bits(GEN_24, 0, 0)
    ibufBTBResp_target <= GEN_25
    ibufBTBResp_entry <= GEN_26
    ibufBTBResp_bht_history <= GEN_27
    ibufBTBResp_bht_value <= GEN_28
    nReady <= GEN_30
    RVCExpander_1.io_in <= inst

  module CSRFile :
    input clk : Clock
    input reset : UInt<1>
    input io_prci_reset : UInt<1>
    input io_prci_id : UInt<1>
    input io_prci_interrupts_meip : UInt<1>
    input io_prci_interrupts_seip : UInt<1>
    input io_prci_interrupts_debug : UInt<1>
    input io_prci_interrupts_mtip : UInt<1>
    input io_prci_interrupts_msip : UInt<1>
    input io_rw_addr : UInt<12>
    input io_rw_cmd : UInt<3>
    output io_rw_rdata : UInt<64>
    input io_rw_wdata : UInt<64>
    output io_csr_stall : UInt<1>
    output io_csr_xcpt : UInt<1>
    output io_eret : UInt<1>
    output io_singleStep : UInt<1>
    output io_status_debug : UInt<1>
    output io_status_isa : UInt<32>
    output io_status_prv : UInt<2>
    output io_status_sd : UInt<1>
    output io_status_zero3 : UInt<31>
    output io_status_sd_rv32 : UInt<1>
    output io_status_zero2 : UInt<2>
    output io_status_vm : UInt<5>
    output io_status_zero1 : UInt<4>
    output io_status_mxr : UInt<1>
    output io_status_pum : UInt<1>
    output io_status_mprv : UInt<1>
    output io_status_xs : UInt<2>
    output io_status_fs : UInt<2>
    output io_status_mpp : UInt<2>
    output io_status_hpp : UInt<2>
    output io_status_spp : UInt<1>
    output io_status_mpie : UInt<1>
    output io_status_hpie : UInt<1>
    output io_status_spie : UInt<1>
    output io_status_upie : UInt<1>
    output io_status_mie : UInt<1>
    output io_status_hie : UInt<1>
    output io_status_sie : UInt<1>
    output io_status_uie : UInt<1>
    output io_ptbr_asid : UInt<7>
    output io_ptbr_ppn : UInt<38>
    output io_evec : UInt<40>
    input io_exception : UInt<1>
    input io_retire : UInt<1>
    input io_cause : UInt<64>
    input io_pc : UInt<40>
    input io_badaddr : UInt<40>
    output io_fatc : UInt<1>
    output io_time : UInt<64>
    output io_fcsr_rm : UInt<3>
    input io_fcsr_flags_valid : UInt<1>
    input io_fcsr_flags_bits : UInt<5>
    input io_rocc_cmd_ready : UInt<1>
    output io_rocc_cmd_valid : UInt<1>
    output io_rocc_cmd_bits_inst_funct : UInt<7>
    output io_rocc_cmd_bits_inst_rs2 : UInt<5>
    output io_rocc_cmd_bits_inst_rs1 : UInt<5>
    output io_rocc_cmd_bits_inst_xd : UInt<1>
    output io_rocc_cmd_bits_inst_xs1 : UInt<1>
    output io_rocc_cmd_bits_inst_xs2 : UInt<1>
    output io_rocc_cmd_bits_inst_rd : UInt<5>
    output io_rocc_cmd_bits_inst_opcode : UInt<7>
    output io_rocc_cmd_bits_rs1 : UInt<64>
    output io_rocc_cmd_bits_rs2 : UInt<64>
    output io_rocc_cmd_bits_status_debug : UInt<1>
    output io_rocc_cmd_bits_status_isa : UInt<32>
    output io_rocc_cmd_bits_status_prv : UInt<2>
    output io_rocc_cmd_bits_status_sd : UInt<1>
    output io_rocc_cmd_bits_status_zero3 : UInt<31>
    output io_rocc_cmd_bits_status_sd_rv32 : UInt<1>
    output io_rocc_cmd_bits_status_zero2 : UInt<2>
    output io_rocc_cmd_bits_status_vm : UInt<5>
    output io_rocc_cmd_bits_status_zero1 : UInt<4>
    output io_rocc_cmd_bits_status_mxr : UInt<1>
    output io_rocc_cmd_bits_status_pum : UInt<1>
    output io_rocc_cmd_bits_status_mprv : UInt<1>
    output io_rocc_cmd_bits_status_xs : UInt<2>
    output io_rocc_cmd_bits_status_fs : UInt<2>
    output io_rocc_cmd_bits_status_mpp : UInt<2>
    output io_rocc_cmd_bits_status_hpp : UInt<2>
    output io_rocc_cmd_bits_status_spp : UInt<1>
    output io_rocc_cmd_bits_status_mpie : UInt<1>
    output io_rocc_cmd_bits_status_hpie : UInt<1>
    output io_rocc_cmd_bits_status_spie : UInt<1>
    output io_rocc_cmd_bits_status_upie : UInt<1>
    output io_rocc_cmd_bits_status_mie : UInt<1>
    output io_rocc_cmd_bits_status_hie : UInt<1>
    output io_rocc_cmd_bits_status_sie : UInt<1>
    output io_rocc_cmd_bits_status_uie : UInt<1>
    output io_rocc_resp_ready : UInt<1>
    input io_rocc_resp_valid : UInt<1>
    input io_rocc_resp_bits_rd : UInt<5>
    input io_rocc_resp_bits_data : UInt<64>
    output io_rocc_mem_req_ready : UInt<1>
    input io_rocc_mem_req_valid : UInt<1>
    input io_rocc_mem_req_bits_addr : UInt<40>
    input io_rocc_mem_req_bits_tag : UInt<7>
    input io_rocc_mem_req_bits_cmd : UInt<5>
    input io_rocc_mem_req_bits_typ : UInt<3>
    input io_rocc_mem_req_bits_phys : UInt<1>
    input io_rocc_mem_req_bits_data : UInt<64>
    input io_rocc_mem_s1_kill : UInt<1>
    input io_rocc_mem_s1_data : UInt<64>
    output io_rocc_mem_s2_nack : UInt<1>
    output io_rocc_mem_resp_valid : UInt<1>
    output io_rocc_mem_resp_bits_addr : UInt<40>
    output io_rocc_mem_resp_bits_tag : UInt<7>
    output io_rocc_mem_resp_bits_cmd : UInt<5>
    output io_rocc_mem_resp_bits_typ : UInt<3>
    output io_rocc_mem_resp_bits_data : UInt<64>
    output io_rocc_mem_resp_bits_replay : UInt<1>
    output io_rocc_mem_resp_bits_has_data : UInt<1>
    output io_rocc_mem_resp_bits_data_word_bypass : UInt<64>
    output io_rocc_mem_resp_bits_store_data : UInt<64>
    output io_rocc_mem_replay_next : UInt<1>
    output io_rocc_mem_xcpt_ma_ld : UInt<1>
    output io_rocc_mem_xcpt_ma_st : UInt<1>
    output io_rocc_mem_xcpt_pf_ld : UInt<1>
    output io_rocc_mem_xcpt_pf_st : UInt<1>
    input io_rocc_mem_invalidate_lr : UInt<1>
    output io_rocc_mem_ordered : UInt<1>
    input io_rocc_busy : UInt<1>
    input io_rocc_interrupt : UInt<1>
    output io_rocc_autl_acquire_ready : UInt<1>
    input io_rocc_autl_acquire_valid : UInt<1>
    input io_rocc_autl_acquire_bits_addr_block : UInt<26>
    input io_rocc_autl_acquire_bits_client_xact_id : UInt<1>
    input io_rocc_autl_acquire_bits_addr_beat : UInt<3>
    input io_rocc_autl_acquire_bits_is_builtin_type : UInt<1>
    input io_rocc_autl_acquire_bits_a_type : UInt<3>
    input io_rocc_autl_acquire_bits_union : UInt<11>
    input io_rocc_autl_acquire_bits_data : UInt<64>
    input io_rocc_autl_grant_ready : UInt<1>
    output io_rocc_autl_grant_valid : UInt<1>
    output io_rocc_autl_grant_bits_addr_beat : UInt<3>
    output io_rocc_autl_grant_bits_client_xact_id : UInt<1>
    output io_rocc_autl_grant_bits_manager_xact_id : UInt<4>
    output io_rocc_autl_grant_bits_is_builtin_type : UInt<1>
    output io_rocc_autl_grant_bits_g_type : UInt<4>
    output io_rocc_autl_grant_bits_data : UInt<64>
    output io_rocc_fpu_req_ready : UInt<1>
    input io_rocc_fpu_req_valid : UInt<1>
    input io_rocc_fpu_req_bits_cmd : UInt<5>
    input io_rocc_fpu_req_bits_ldst : UInt<1>
    input io_rocc_fpu_req_bits_wen : UInt<1>
    input io_rocc_fpu_req_bits_ren1 : UInt<1>
    input io_rocc_fpu_req_bits_ren2 : UInt<1>
    input io_rocc_fpu_req_bits_ren3 : UInt<1>
    input io_rocc_fpu_req_bits_swap12 : UInt<1>
    input io_rocc_fpu_req_bits_swap23 : UInt<1>
    input io_rocc_fpu_req_bits_single : UInt<1>
    input io_rocc_fpu_req_bits_fromint : UInt<1>
    input io_rocc_fpu_req_bits_toint : UInt<1>
    input io_rocc_fpu_req_bits_fastpipe : UInt<1>
    input io_rocc_fpu_req_bits_fma : UInt<1>
    input io_rocc_fpu_req_bits_div : UInt<1>
    input io_rocc_fpu_req_bits_sqrt : UInt<1>
    input io_rocc_fpu_req_bits_round : UInt<1>
    input io_rocc_fpu_req_bits_wflags : UInt<1>
    input io_rocc_fpu_req_bits_rm : UInt<3>
    input io_rocc_fpu_req_bits_typ : UInt<2>
    input io_rocc_fpu_req_bits_in1 : UInt<65>
    input io_rocc_fpu_req_bits_in2 : UInt<65>
    input io_rocc_fpu_req_bits_in3 : UInt<65>
    input io_rocc_fpu_resp_ready : UInt<1>
    output io_rocc_fpu_resp_valid : UInt<1>
    output io_rocc_fpu_resp_bits_data : UInt<65>
    output io_rocc_fpu_resp_bits_exc : UInt<5>
    output io_rocc_exception : UInt<1>
    output io_interrupt : UInt<1>
    output io_interrupt_cause : UInt<64>
    output io_bp_0_control_ttype : UInt<4>
    output io_bp_0_control_dmode : UInt<1>
    output io_bp_0_control_maskmax : UInt<6>
    output io_bp_0_control_reserved : UInt<40>
    output io_bp_0_control_action : UInt<1>
    output io_bp_0_control_chain : UInt<1>
    output io_bp_0_control_zero : UInt<2>
    output io_bp_0_control_tmatch : UInt<2>
    output io_bp_0_control_m : UInt<1>
    output io_bp_0_control_h : UInt<1>
    output io_bp_0_control_s : UInt<1>
    output io_bp_0_control_u : UInt<1>
    output io_bp_0_control_x : UInt<1>
    output io_bp_0_control_w : UInt<1>
    output io_bp_0_control_r : UInt<1>
    output io_bp_0_address : UInt<39>
  
    wire T_5008_debug : UInt<1>
    wire T_5008_isa : UInt<32>
    wire T_5008_prv : UInt<2>
    wire T_5008_sd : UInt<1>
    wire T_5008_zero3 : UInt<31>
    wire T_5008_sd_rv32 : UInt<1>
    wire T_5008_zero2 : UInt<2>
    wire T_5008_vm : UInt<5>
    wire T_5008_zero1 : UInt<4>
    wire T_5008_mxr : UInt<1>
    wire T_5008_pum : UInt<1>
    wire T_5008_mprv : UInt<1>
    wire T_5008_xs : UInt<2>
    wire T_5008_fs : UInt<2>
    wire T_5008_mpp : UInt<2>
    wire T_5008_hpp : UInt<2>
    wire T_5008_spp : UInt<1>
    wire T_5008_mpie : UInt<1>
    wire T_5008_hpie : UInt<1>
    wire T_5008_spie : UInt<1>
    wire T_5008_upie : UInt<1>
    wire T_5008_mie : UInt<1>
    wire T_5008_hie : UInt<1>
    wire T_5008_sie : UInt<1>
    wire T_5008_uie : UInt<1>
    wire T_5035 : UInt<99>
    wire reset_mstatus_debug : UInt<1>
    wire reset_mstatus_isa : UInt<32>
    wire reset_mstatus_prv : UInt<2>
    wire reset_mstatus_sd : UInt<1>
    wire reset_mstatus_zero3 : UInt<31>
    wire reset_mstatus_sd_rv32 : UInt<1>
    wire reset_mstatus_zero2 : UInt<2>
    wire reset_mstatus_vm : UInt<5>
    wire reset_mstatus_zero1 : UInt<4>
    wire reset_mstatus_mxr : UInt<1>
    wire reset_mstatus_pum : UInt<1>
    wire reset_mstatus_mprv : UInt<1>
    wire reset_mstatus_xs : UInt<2>
    wire reset_mstatus_fs : UInt<2>
    wire reset_mstatus_mpp : UInt<2>
    wire reset_mstatus_hpp : UInt<2>
    wire reset_mstatus_spp : UInt<1>
    wire reset_mstatus_mpie : UInt<1>
    wire reset_mstatus_hpie : UInt<1>
    wire reset_mstatus_spie : UInt<1>
    wire reset_mstatus_upie : UInt<1>
    wire reset_mstatus_mie : UInt<1>
    wire reset_mstatus_hie : UInt<1>
    wire reset_mstatus_sie : UInt<1>
    wire reset_mstatus_uie : UInt<1>
    reg reg_mstatus_debug : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_isa : UInt<32>, clk with :
      reset => (reset, UInt<32>("h0"))
    reg reg_mstatus_prv : UInt<2>, clk with :
      reset => (reset, UInt<2>("h3"))
    reg reg_mstatus_sd : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_zero3 : UInt<31>, clk with :
      reset => (reset, UInt<31>("h0"))
    reg reg_mstatus_sd_rv32 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_zero2 : UInt<2>, clk with :
      reset => (reset, UInt<2>("h0"))
    reg reg_mstatus_vm : UInt<5>, clk with :
      reset => (reset, UInt<5>("h0"))
    reg reg_mstatus_zero1 : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg reg_mstatus_mxr : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_pum : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_mprv : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_xs : UInt<2>, clk with :
      reset => (reset, UInt<2>("h0"))
    reg reg_mstatus_fs : UInt<2>, clk with :
      reset => (reset, UInt<2>("h0"))
    reg reg_mstatus_mpp : UInt<2>, clk with :
      reset => (reset, UInt<2>("h3"))
    reg reg_mstatus_hpp : UInt<2>, clk with :
      reset => (reset, UInt<2>("h0"))
    reg reg_mstatus_spp : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_mpie : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_hpie : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_spie : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_upie : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_mie : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_hie : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_sie : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_mstatus_uie : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire new_prv : UInt<2>
    node T_5114 = eq(new_prv, UInt<2>("h2"))
    node T_5116 = mux(T_5114, UInt<2>("h0"), new_prv)
    wire T_5154_xdebugver : UInt<2>
    wire T_5154_ndreset : UInt<1>
    wire T_5154_fullreset : UInt<1>
    wire T_5154_zero3 : UInt<12>
    wire T_5154_ebreakm : UInt<1>
    wire T_5154_ebreakh : UInt<1>
    wire T_5154_ebreaks : UInt<1>
    wire T_5154_ebreaku : UInt<1>
    wire T_5154_zero2 : UInt<1>
    wire T_5154_stopcycle : UInt<1>
    wire T_5154_stoptime : UInt<1>
    wire T_5154_cause : UInt<3>
    wire T_5154_debugint : UInt<1>
    wire T_5154_zero1 : UInt<1>
    wire T_5154_halt : UInt<1>
    wire T_5154_step : UInt<1>
    wire T_5154_prv : UInt<2>
    wire T_5173 : UInt<32>
    wire reset_dcsr_xdebugver : UInt<2>
    wire reset_dcsr_ndreset : UInt<1>
    wire reset_dcsr_fullreset : UInt<1>
    wire reset_dcsr_zero3 : UInt<12>
    wire reset_dcsr_ebreakm : UInt<1>
    wire reset_dcsr_ebreakh : UInt<1>
    wire reset_dcsr_ebreaks : UInt<1>
    wire reset_dcsr_ebreaku : UInt<1>
    wire reset_dcsr_zero2 : UInt<1>
    wire reset_dcsr_stopcycle : UInt<1>
    wire reset_dcsr_stoptime : UInt<1>
    wire reset_dcsr_cause : UInt<3>
    wire reset_dcsr_debugint : UInt<1>
    wire reset_dcsr_zero1 : UInt<1>
    wire reset_dcsr_halt : UInt<1>
    wire reset_dcsr_step : UInt<1>
    wire reset_dcsr_prv : UInt<2>
    reg reg_dcsr_xdebugver : UInt<2>, clk with :
      reset => (reset, UInt<2>("h1"))
    reg reg_dcsr_ndreset : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_fullreset : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_zero3 : UInt<12>, clk with :
      reset => (reset, UInt<12>("h0"))
    reg reg_dcsr_ebreakm : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_ebreakh : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_ebreaks : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_ebreaku : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_zero2 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_stopcycle : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_stoptime : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_cause : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg reg_dcsr_debugint : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_zero1 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_halt : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_step : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dcsr_prv : UInt<2>, clk with :
      reset => (reset, UInt<2>("h3"))
    wire T_5256_rocc : UInt<1>
    wire T_5256_meip : UInt<1>
    wire T_5256_heip : UInt<1>
    wire T_5256_seip : UInt<1>
    wire T_5256_ueip : UInt<1>
    wire T_5256_mtip : UInt<1>
    wire T_5256_htip : UInt<1>
    wire T_5256_stip : UInt<1>
    wire T_5256_utip : UInt<1>
    wire T_5256_msip : UInt<1>
    wire T_5256_hsip : UInt<1>
    wire T_5256_ssip : UInt<1>
    wire T_5256_usip : UInt<1>
    wire T_5271 : UInt<13>
    wire T_5285_rocc : UInt<1>
    wire T_5285_meip : UInt<1>
    wire T_5285_heip : UInt<1>
    wire T_5285_seip : UInt<1>
    wire T_5285_ueip : UInt<1>
    wire T_5285_mtip : UInt<1>
    wire T_5285_htip : UInt<1>
    wire T_5285_stip : UInt<1>
    wire T_5285_utip : UInt<1>
    wire T_5285_msip : UInt<1>
    wire T_5285_hsip : UInt<1>
    wire T_5285_ssip : UInt<1>
    wire T_5285_usip : UInt<1>
    wire T_5306_rocc : UInt<1>
    wire T_5306_meip : UInt<1>
    wire T_5306_heip : UInt<1>
    wire T_5306_seip : UInt<1>
    wire T_5306_ueip : UInt<1>
    wire T_5306_mtip : UInt<1>
    wire T_5306_htip : UInt<1>
    wire T_5306_stip : UInt<1>
    wire T_5306_utip : UInt<1>
    wire T_5306_msip : UInt<1>
    wire T_5306_hsip : UInt<1>
    wire T_5306_ssip : UInt<1>
    wire T_5306_usip : UInt<1>
    node T_5323 = cat(UInt<1>("h0"), UInt<1>("h1"))
    node T_5324 = cat(T_5323, UInt<1>("h0"))
    node T_5325 = cat(UInt<1>("h1"), UInt<1>("h0"))
    node T_5326 = cat(T_5325, UInt<1>("h1"))
    node T_5327 = cat(T_5326, T_5324)
    node T_5328 = cat(UInt<1>("h0"), UInt<1>("h1"))
    node T_5329 = cat(T_5328, UInt<1>("h0"))
    node T_5330 = cat(UInt<1>("h0"), UInt<1>("h1"))
    node T_5331 = cat(UInt<1>("h0"), UInt<1>("h1"))
    node T_5332 = cat(T_5331, T_5330)
    node T_5333 = cat(T_5332, T_5329)
    node supported_interrupts = cat(T_5333, T_5327)
    node T_5334 = cat(UInt<1>("h0"), UInt<1>("h1"))
    node T_5335 = cat(T_5334, UInt<1>("h0"))
    node T_5336 = cat(UInt<1>("h1"), UInt<1>("h0"))
    node T_5337 = cat(T_5336, UInt<1>("h0"))
    node T_5338 = cat(T_5337, T_5335)
    node T_5339 = cat(UInt<1>("h0"), UInt<1>("h0"))
    node T_5340 = cat(T_5339, UInt<1>("h0"))
    node T_5341 = cat(UInt<1>("h0"), UInt<1>("h1"))
    node T_5342 = cat(UInt<1>("h0"), UInt<1>("h0"))
    node T_5343 = cat(T_5342, T_5341)
    node T_5344 = cat(T_5343, T_5340)
    node delegable_interrupts = cat(T_5344, T_5338)
    node exception = or(io_exception, io_csr_xcpt)
    reg reg_debug : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_dpc : UInt<40>, clk with :
      reset => (UInt<1>("h0"), reg_dpc)
    reg reg_dscratch : UInt<64>, clk with :
      reset => (UInt<1>("h0"), reg_dscratch)
    reg reg_singleStepped : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_singleStepped)
    node T_5350 = or(io_retire, exception)
    node GEN_36 = mux(T_5350, UInt<1>("h1"), reg_singleStepped)
    node T_5353 = eq(io_singleStep, UInt<1>("h0"))
    node GEN_37 = mux(T_5353, UInt<1>("h0"), GEN_36)
    node T_5364 = eq(reg_singleStepped, UInt<1>("h0"))
    node T_5366 = eq(io_retire, UInt<1>("h0"))
    node T_5367 = or(T_5364, T_5366)
    node T_5368 = or(T_5367, reset)
    node T_5370 = eq(T_5368, UInt<1>("h0"))
    reg reg_tselect : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_0_control_ttype : UInt<4>, clk with :
      reset => (UInt<1>("h0"), UInt<4>("h2"))
    reg reg_bp_0_control_dmode : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_dmode)
    reg reg_bp_0_control_maskmax : UInt<6>, clk with :
      reset => (UInt<1>("h0"), UInt<6>("h4"))
    reg reg_bp_0_control_reserved : UInt<40>, clk with :
      reset => (UInt<1>("h0"), UInt<40>("h0"))
    reg reg_bp_0_control_action : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_action)
    reg reg_bp_0_control_chain : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_0_control_zero : UInt<2>, clk with :
      reset => (UInt<1>("h0"), UInt<2>("h0"))
    reg reg_bp_0_control_tmatch : UInt<2>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_tmatch)
    reg reg_bp_0_control_m : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_m)
    reg reg_bp_0_control_h : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_0_control_s : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_s)
    reg reg_bp_0_control_u : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_u)
    reg reg_bp_0_control_x : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_x)
    reg reg_bp_0_control_w : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_w)
    reg reg_bp_0_control_r : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_control_r)
    reg reg_bp_0_address : UInt<39>, clk with :
      reset => (UInt<1>("h0"), reg_bp_0_address)
    reg reg_bp_1_control_ttype : UInt<4>, clk with :
      reset => (UInt<1>("h0"), UInt<4>("h0"))
    reg reg_bp_1_control_dmode : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_maskmax : UInt<6>, clk with :
      reset => (UInt<1>("h0"), UInt<6>("h0"))
    reg reg_bp_1_control_reserved : UInt<40>, clk with :
      reset => (UInt<1>("h0"), UInt<40>("h0"))
    reg reg_bp_1_control_action : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_chain : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_zero : UInt<2>, clk with :
      reset => (UInt<1>("h0"), UInt<2>("h0"))
    reg reg_bp_1_control_tmatch : UInt<2>, clk with :
      reset => (UInt<1>("h0"), UInt<2>("h0"))
    reg reg_bp_1_control_m : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_h : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_s : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_u : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_x : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_w : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_control_r : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg reg_bp_1_address : UInt<39>, clk with :
      reset => (UInt<1>("h0"), UInt<39>("h0"))
    reg reg_mie : UInt<64>, clk with :
      reset => (UInt<1>("h0"), reg_mie)
    reg reg_mideleg : UInt<64>, clk with :
      reset => (UInt<1>("h0"), reg_mideleg)
    reg reg_medeleg : UInt<64>, clk with :
      reset => (UInt<1>("h0"), reg_medeleg)
    reg reg_mip_rocc : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_rocc)
    reg reg_mip_meip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_meip)
    reg reg_mip_heip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_heip)
    reg reg_mip_seip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_seip)
    reg reg_mip_ueip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_ueip)
    reg reg_mip_mtip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_mtip)
    reg reg_mip_htip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_htip)
    reg reg_mip_stip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_stip)
    reg reg_mip_utip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_utip)
    reg reg_mip_msip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_msip)
    reg reg_mip_hsip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_hsip)
    reg reg_mip_ssip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_ssip)
    reg reg_mip_usip : UInt<1>, clk with :
      reset => (UInt<1>("h0"), reg_mip_usip)
    reg reg_mepc : UInt<40>, clk with :
      reset => (UInt<1>("h0"), reg_mepc)
    reg reg_mcause : UInt<64>, clk with :
      reset => (UInt<1>("h0"), reg_mcause)
    reg reg_mbadaddr : UInt<40>, clk with :
      reset => (UInt<1>("h0"), reg_mbadaddr)
    reg reg_mscratch : UInt<64>, clk with :
      reset => (UInt<1>("h0"), reg_mscratch)
    reg reg_mtvec : UInt<32>, clk with :
      reset => (reset, UInt<32>("h1010"))
    reg reg_mucounteren : UInt<32>, clk with :
      reset => (UInt<1>("h0"), reg_mucounteren)
    reg reg_mscounteren : UInt<32>, clk with :
      reset => (UInt<1>("h0"), reg_mscounteren)
    reg reg_sepc : UInt<40>, clk with :
      reset => (UInt<1>("h0"), reg_sepc)
    reg reg_scause : UInt<64>, clk with :
      reset => (UInt<1>("h0"), reg_scause)
    reg reg_sbadaddr : UInt<40>, clk with :
      reset => (UInt<1>("h0"), reg_sbadaddr)
    reg reg_sscratch : UInt<64>, clk with :
      reset => (UInt<1>("h0"), reg_sscratch)
    reg reg_stvec : UInt<39>, clk with :
      reset => (UInt<1>("h0"), reg_stvec)
    reg reg_sptbr_asid : UInt<7>, clk with :
      reset => (UInt<1>("h0"), UInt<7>("h0"))
    reg reg_sptbr_ppn : UInt<38>, clk with :
      reset => (UInt<1>("h0"), reg_sptbr_ppn)
    reg reg_wfi : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg reg_fflags : UInt<5>, clk with :
      reset => (UInt<1>("h0"), reg_fflags)
    reg reg_frm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), reg_frm)
    reg T_5600 : UInt<6>, clk with :
      reset => (reset, UInt<6>("h0"))
    node GEN_0 = pad(io_retire, 6)
    node T_5601 = add(T_5600, GEN_0)
    reg T_5603 : UInt<58>, clk with :
      reset => (reset, UInt<58>("h0"))
    node T_5604 = bits(T_5601, 6, 6)
    node T_5606 = add(T_5603, UInt<58>("h1"))
    node T_5607 = tail(T_5606, 1)
    node GEN_38 = mux(T_5604, T_5607, T_5603)
    node T_5608 = cat(T_5603, T_5600)
    reg T_5611 : UInt<6>, clk with :
      reset => (reset, UInt<6>("h0"))
    node T_5612 = add(T_5611, UInt<6>("h1"))
    reg T_5614 : UInt<58>, clk with :
      reset => (reset, UInt<58>("h0"))
    node T_5615 = bits(T_5612, 6, 6)
    node T_5617 = add(T_5614, UInt<58>("h1"))
    node T_5618 = tail(T_5617, 1)
    node GEN_39 = mux(T_5615, T_5618, T_5614)
    node T_5619 = cat(T_5614, T_5611)
    wire mip_rocc : UInt<1>
    wire mip_meip : UInt<1>
    wire mip_heip : UInt<1>
    wire mip_seip : UInt<1>
    wire mip_ueip : UInt<1>
    wire mip_mtip : UInt<1>
    wire mip_htip : UInt<1>
    wire mip_stip : UInt<1>
    wire mip_utip : UInt<1>
    wire mip_msip : UInt<1>
    wire mip_hsip : UInt<1>
    wire mip_ssip : UInt<1>
    wire mip_usip : UInt<1>
    node T_5633 = cat(mip_hsip, mip_ssip)
    node T_5634 = cat(T_5633, mip_usip)
    node T_5635 = cat(mip_stip, mip_utip)
    node T_5636 = cat(T_5635, mip_msip)
    node T_5637 = cat(T_5636, T_5634)
    node T_5638 = cat(mip_ueip, mip_mtip)
    node T_5639 = cat(T_5638, mip_htip)
    node T_5640 = cat(mip_heip, mip_seip)
    node T_5641 = cat(mip_rocc, mip_meip)
    node T_5642 = cat(T_5641, T_5640)
    node T_5643 = cat(T_5642, T_5639)
    node T_5644 = cat(T_5643, T_5637)
    node read_mip = and(T_5644, supported_interrupts)
    node GEN_1 = pad(read_mip, 64)
    node pending_interrupts = and(GEN_1, reg_mie)
    node T_5646 = eq(reg_debug, UInt<1>("h0"))
    node T_5648 = lt(reg_mstatus_prv, UInt<2>("h3"))
    node T_5650 = eq(reg_mstatus_prv, UInt<2>("h3"))
    node T_5651 = and(T_5650, reg_mstatus_mie)
    node T_5652 = or(T_5648, T_5651)
    node T_5653 = and(T_5646, T_5652)
    node T_5654 = not(reg_mideleg)
    node T_5655 = and(pending_interrupts, T_5654)
    node m_interrupts = mux(T_5653, T_5655, UInt<64>("h0"))
    node T_5660 = lt(reg_mstatus_prv, UInt<2>("h1"))
    node T_5662 = eq(reg_mstatus_prv, UInt<2>("h1"))
    node T_5663 = and(T_5662, reg_mstatus_sie)
    node T_5664 = or(T_5660, T_5663)
    node T_5665 = and(T_5646, T_5664)
    node T_5666 = and(pending_interrupts, reg_mideleg)
    node s_interrupts = mux(T_5665, T_5666, UInt<64>("h0"))
    node all_interrupts = or(m_interrupts, s_interrupts)
    node T_5669 = bits(all_interrupts, 0, 0)
    node T_5670 = bits(all_interrupts, 1, 1)
    node T_5671 = bits(all_interrupts, 2, 2)
    node T_5672 = bits(all_interrupts, 3, 3)
    node T_5673 = bits(all_interrupts, 4, 4)
    node T_5674 = bits(all_interrupts, 5, 5)
    node T_5675 = bits(all_interrupts, 6, 6)
    node T_5676 = bits(all_interrupts, 7, 7)
    node T_5677 = bits(all_interrupts, 8, 8)
    node T_5678 = bits(all_interrupts, 9, 9)
    node T_5679 = bits(all_interrupts, 10, 10)
    node T_5680 = bits(all_interrupts, 11, 11)
    node T_5681 = bits(all_interrupts, 12, 12)
    node T_5682 = bits(all_interrupts, 13, 13)
    node T_5683 = bits(all_interrupts, 14, 14)
    node T_5684 = bits(all_interrupts, 15, 15)
    node T_5685 = bits(all_interrupts, 16, 16)
    node T_5686 = bits(all_interrupts, 17, 17)
    node T_5687 = bits(all_interrupts, 18, 18)
    node T_5688 = bits(all_interrupts, 19, 19)
    node T_5689 = bits(all_interrupts, 20, 20)
    node T_5690 = bits(all_interrupts, 21, 21)
    node T_5691 = bits(all_interrupts, 22, 22)
    node T_5692 = bits(all_interrupts, 23, 23)
    node T_5693 = bits(all_interrupts, 24, 24)
    node T_5694 = bits(all_interrupts, 25, 25)
    node T_5695 = bits(all_interrupts, 26, 26)
    node T_5696 = bits(all_interrupts, 27, 27)
    node T_5697 = bits(all_interrupts, 28, 28)
    node T_5698 = bits(all_interrupts, 29, 29)
    node T_5699 = bits(all_interrupts, 30, 30)
    node T_5700 = bits(all_interrupts, 31, 31)
    node T_5701 = bits(all_interrupts, 32, 32)
    node T_5702 = bits(all_interrupts, 33, 33)
    node T_5703 = bits(all_interrupts, 34, 34)
    node T_5704 = bits(all_interrupts, 35, 35)
    node T_5705 = bits(all_interrupts, 36, 36)
    node T_5706 = bits(all_interrupts, 37, 37)
    node T_5707 = bits(all_interrupts, 38, 38)
    node T_5708 = bits(all_interrupts, 39, 39)
    node T_5709 = bits(all_interrupts, 40, 40)
    node T_5710 = bits(all_interrupts, 41, 41)
    node T_5711 = bits(all_interrupts, 42, 42)
    node T_5712 = bits(all_interrupts, 43, 43)
    node T_5713 = bits(all_interrupts, 44, 44)
    node T_5714 = bits(all_interrupts, 45, 45)
    node T_5715 = bits(all_interrupts, 46, 46)
    node T_5716 = bits(all_interrupts, 47, 47)
    node T_5717 = bits(all_interrupts, 48, 48)
    node T_5718 = bits(all_interrupts, 49, 49)
    node T_5719 = bits(all_interrupts, 50, 50)
    node T_5720 = bits(all_interrupts, 51, 51)
    node T_5721 = bits(all_interrupts, 52, 52)
    node T_5722 = bits(all_interrupts, 53, 53)
    node T_5723 = bits(all_interrupts, 54, 54)
    node T_5724 = bits(all_interrupts, 55, 55)
    node T_5725 = bits(all_interrupts, 56, 56)
    node T_5726 = bits(all_interrupts, 57, 57)
    node T_5727 = bits(all_interrupts, 58, 58)
    node T_5728 = bits(all_interrupts, 59, 59)
    node T_5729 = bits(all_interrupts, 60, 60)
    node T_5730 = bits(all_interrupts, 61, 61)
    node T_5731 = bits(all_interrupts, 62, 62)
    node T_5797 = mux(T_5731, UInt<6>("h3e"), UInt<6>("h3f"))
    node T_5798 = mux(T_5730, UInt<6>("h3d"), T_5797)
    node T_5799 = mux(T_5729, UInt<6>("h3c"), T_5798)
    node T_5800 = mux(T_5728, UInt<6>("h3b"), T_5799)
    node T_5801 = mux(T_5727, UInt<6>("h3a"), T_5800)
    node T_5802 = mux(T_5726, UInt<6>("h39"), T_5801)
    node T_5803 = mux(T_5725, UInt<6>("h38"), T_5802)
    node T_5804 = mux(T_5724, UInt<6>("h37"), T_5803)
    node T_5805 = mux(T_5723, UInt<6>("h36"), T_5804)
    node T_5806 = mux(T_5722, UInt<6>("h35"), T_5805)
    node T_5807 = mux(T_5721, UInt<6>("h34"), T_5806)
    node T_5808 = mux(T_5720, UInt<6>("h33"), T_5807)
    node T_5809 = mux(T_5719, UInt<6>("h32"), T_5808)
    node T_5810 = mux(T_5718, UInt<6>("h31"), T_5809)
    node T_5811 = mux(T_5717, UInt<6>("h30"), T_5810)
    node T_5812 = mux(T_5716, UInt<6>("h2f"), T_5811)
    node T_5813 = mux(T_5715, UInt<6>("h2e"), T_5812)
    node T_5814 = mux(T_5714, UInt<6>("h2d"), T_5813)
    node T_5815 = mux(T_5713, UInt<6>("h2c"), T_5814)
    node T_5816 = mux(T_5712, UInt<6>("h2b"), T_5815)
    node T_5817 = mux(T_5711, UInt<6>("h2a"), T_5816)
    node T_5818 = mux(T_5710, UInt<6>("h29"), T_5817)
    node T_5819 = mux(T_5709, UInt<6>("h28"), T_5818)
    node T_5820 = mux(T_5708, UInt<6>("h27"), T_5819)
    node T_5821 = mux(T_5707, UInt<6>("h26"), T_5820)
    node T_5822 = mux(T_5706, UInt<6>("h25"), T_5821)
    node T_5823 = mux(T_5705, UInt<6>("h24"), T_5822)
    node T_5824 = mux(T_5704, UInt<6>("h23"), T_5823)
    node T_5825 = mux(T_5703, UInt<6>("h22"), T_5824)
    node T_5826 = mux(T_5702, UInt<6>("h21"), T_5825)
    node T_5827 = mux(T_5701, UInt<6>("h20"), T_5826)
    node T_5828 = mux(T_5700, UInt<6>("h1f"), T_5827)
    node T_5829 = mux(T_5699, UInt<6>("h1e"), T_5828)
    node T_5830 = mux(T_5698, UInt<6>("h1d"), T_5829)
    node T_5831 = mux(T_5697, UInt<6>("h1c"), T_5830)
    node T_5832 = mux(T_5696, UInt<6>("h1b"), T_5831)
    node T_5833 = mux(T_5695, UInt<6>("h1a"), T_5832)
    node T_5834 = mux(T_5694, UInt<6>("h19"), T_5833)
    node T_5835 = mux(T_5693, UInt<6>("h18"), T_5834)
    node T_5836 = mux(T_5692, UInt<6>("h17"), T_5835)
    node T_5837 = mux(T_5691, UInt<6>("h16"), T_5836)
    node T_5838 = mux(T_5690, UInt<6>("h15"), T_5837)
    node T_5839 = mux(T_5689, UInt<6>("h14"), T_5838)
    node T_5840 = mux(T_5688, UInt<6>("h13"), T_5839)
    node T_5841 = mux(T_5687, UInt<6>("h12"), T_5840)
    node T_5842 = mux(T_5686, UInt<6>("h11"), T_5841)
    node T_5843 = mux(T_5685, UInt<6>("h10"), T_5842)
    node T_5844 = mux(T_5684, UInt<6>("hf"), T_5843)
    node T_5845 = mux(T_5683, UInt<6>("he"), T_5844)
    node T_5846 = mux(T_5682, UInt<6>("hd"), T_5845)
    node T_5847 = mux(T_5681, UInt<6>("hc"), T_5846)
    node T_5848 = mux(T_5680, UInt<6>("hb"), T_5847)
    node T_5849 = mux(T_5679, UInt<6>("ha"), T_5848)
    node T_5850 = mux(T_5678, UInt<6>("h9"), T_5849)
    node T_5851 = mux(T_5677, UInt<6>("h8"), T_5850)
    node T_5852 = mux(T_5676, UInt<6>("h7"), T_5851)
    node T_5853 = mux(T_5675, UInt<6>("h6"), T_5852)
    node T_5854 = mux(T_5674, UInt<6>("h5"), T_5853)
    node T_5855 = mux(T_5673, UInt<6>("h4"), T_5854)
    node T_5856 = mux(T_5672, UInt<6>("h3"), T_5855)
    node T_5857 = mux(T_5671, UInt<6>("h2"), T_5856)
    node T_5858 = mux(T_5670, UInt<6>("h1"), T_5857)
    node T_5859 = mux(T_5669, UInt<6>("h0"), T_5858)
    node GEN_2 = pad(T_5859, 64)
    node interruptCause = addw(UInt<64>("h8000000000000000"), GEN_2)
    node T_5862 = neq(all_interrupts, UInt<64>("h0"))
    node T_5865 = and(T_5862, T_5353)
    node T_5866 = or(T_5865, reg_singleStepped)
    node T_5871 = and(reg_dcsr_debugint, T_5646)
    node GEN_40 = mux(T_5871, UInt<1>("h1"), T_5866)
    node GEN_41 = mux(T_5871, UInt<64>("h800000000000000d"), interruptCause)
    node system_insn = eq(io_rw_cmd, UInt<3>("h4"))
    node T_5874 = neq(io_rw_cmd, UInt<3>("h0"))
    node T_5876 = eq(system_insn, UInt<1>("h0"))
    node cpu_ren = and(T_5874, T_5876)
    node T_5877 = neq(io_rw_cmd, UInt<3>("h5"))
    node cpu_wen = and(cpu_ren, T_5877)
    reg reg_misa : UInt<64>, clk with :
      reset => (reset, UInt<64>("h800000000014112d"))
    node T_5879 = cat(io_status_hie, io_status_sie)
    node T_5880 = cat(T_5879, io_status_uie)
    node T_5881 = cat(io_status_spie, io_status_upie)
    node T_5882 = cat(T_5881, io_status_mie)
    node T_5883 = cat(T_5882, T_5880)
    node T_5884 = cat(io_status_spp, io_status_mpie)
    node T_5885 = cat(T_5884, io_status_hpie)
    node T_5886 = cat(io_status_fs, io_status_mpp)
    node T_5887 = cat(T_5886, io_status_hpp)
    node T_5888 = cat(T_5887, T_5885)
    node T_5889 = cat(T_5888, T_5883)
    node T_5890 = cat(io_status_pum, io_status_mprv)
    node T_5891 = cat(T_5890, io_status_xs)
    node T_5892 = cat(io_status_vm, io_status_zero1)
    node T_5893 = cat(T_5892, io_status_mxr)
    node T_5894 = cat(T_5893, T_5891)
    node T_5895 = cat(io_status_zero3, io_status_sd_rv32)
    node T_5896 = cat(T_5895, io_status_zero2)
    node T_5897 = cat(io_status_prv, io_status_sd)
    node T_5898 = cat(io_status_debug, io_status_isa)
    node T_5899 = cat(T_5898, T_5897)
    node T_5900 = cat(T_5899, T_5896)
    node T_5901 = cat(T_5900, T_5894)
    node T_5902 = cat(T_5901, T_5889)
    node read_mstatus = bits(T_5902, 63, 0)
    wire GEN_0_control_ttype : UInt<4>
    wire GEN_0_control_dmode : UInt<1>
    wire GEN_0_control_maskmax : UInt<6>
    wire GEN_0_control_reserved : UInt<40>
    wire GEN_0_control_action : UInt<1>
    wire GEN_0_control_chain : UInt<1>
    wire GEN_0_control_zero : UInt<2>
    wire GEN_0_control_tmatch : UInt<2>
    wire GEN_0_control_m : UInt<1>
    wire GEN_0_control_h : UInt<1>
    wire GEN_0_control_s : UInt<1>
    wire GEN_0_control_u : UInt<1>
    wire GEN_0_control_x : UInt<1>
    wire GEN_0_control_w : UInt<1>
    wire GEN_0_control_r : UInt<1>
    wire GEN_0_address : UInt<39>
    node GEN_42 = mux(UInt<1>("h0"), UInt<4>("h0"), UInt<4>("h2"))
    node GEN_43 = mux(UInt<1>("h0"), UInt<1>("h0"), reg_bp_0_control_dmode)
    node GEN_44 = mux(UInt<1>("h0"), UInt<6>("h0"), UInt<6>("h4"))
    node GEN_45 = mux(UInt<1>("h0"), UInt<40>("h0"), UInt<40>("h0"))
    node GEN_46 = mux(UInt<1>("h0"), UInt<1>("h0"), reg_bp_0_control_action)
    node GEN_47 = mux(UInt<1>("h0"), UInt<1>("h0"), UInt<1>("h0"))
    node GEN_48 = mux(UInt<1>("h0"), UInt<2>("h0"), UInt<2>("h0"))
    node GEN_49 = mux(UInt<1>("h0"), UInt<2>("h0"), reg_bp_0_control_tmatch)
    node GEN_50 = mux(UInt<1>("h0"), UInt<1>("h0"), reg_bp_0_control_m)
    node GEN_51 = mux(UInt<1>("h0"), UInt<1>("h0"), UInt<1>("h0"))
    node GEN_52 = mux(UInt<1>("h0"), UInt<1>("h0"), reg_bp_0_control_s)
    node GEN_53 = mux(UInt<1>("h0"), UInt<1>("h0"), reg_bp_0_control_u)
    node GEN_54 = mux(UInt<1>("h0"), UInt<1>("h0"), reg_bp_0_control_x)
    node GEN_55 = mux(UInt<1>("h0"), UInt<1>("h0"), reg_bp_0_control_w)
    node GEN_56 = mux(UInt<1>("h0"), UInt<1>("h0"), reg_bp_0_control_r)
    node GEN_57 = mux(UInt<1>("h0"), UInt<39>("h0"), reg_bp_0_address)
    wire GEN_1_control_ttype : UInt<4>
    wire GEN_1_control_dmode : UInt<1>
    wire GEN_1_control_maskmax : UInt<6>
    wire GEN_1_control_reserved : UInt<40>
    wire GEN_1_control_action : UInt<1>
    wire GEN_1_control_chain : UInt<1>
    wire GEN_1_control_zero : UInt<2>
    wire GEN_1_control_tmatch : UInt<2>
    wire GEN_1_control_m : UInt<1>
    wire GEN_1_control_h : UInt<1>
    wire GEN_1_control_s : UInt<1>
    wire GEN_1_control_u : UInt<1>
    wire GEN_1_control_x : UInt<1>
    wire GEN_1_control_w : UInt<1>
    wire GEN_1_control_r : UInt<1>
    wire GEN_1_address : UInt<39>
    node T_5920 = cat(GEN_0_control_x, GEN_1_control_w)
    wire GEN_2_control_ttype : UInt<4>
    wire GEN_2_control_dmode : UInt<1>
    wire GEN_2_control_maskmax : UInt<6>
    wire GEN_2_control_reserved : UInt<40>
    wire GEN_2_control_action : UInt<1>
    wire GEN_2_control_chain : UInt<1>
    wire GEN_2_control_zero : UInt<2>
    wire GEN_2_control_tmatch : UInt<2>
    wire GEN_2_control_m : UInt<1>
    wire GEN_2_control_h : UInt<1>
    wire GEN_2_control_s : UInt<1>
    wire GEN_2_control_u : UInt<1>
    wire GEN_2_control_x : UInt<1>
    wire GEN_2_control_w : UInt<1>
    wire GEN_2_control_r : UInt<1>
    wire GEN_2_address : UInt<39>
    node T_5921 = cat(T_5920, GEN_2_control_r)
    wire GEN_3_control_ttype : UInt<4>
    wire GEN_3_control_dmode : UInt<1>
    wire GEN_3_control_maskmax : UInt<6>
    wire GEN_3_control_reserved : UInt<40>
    wire GEN_3_control_action : UInt<1>
    wire GEN_3_control_chain : UInt<1>
    wire GEN_3_control_zero : UInt<2>
    wire GEN_3_control_tmatch : UInt<2>
    wire GEN_3_control_m : UInt<1>
    wire GEN_3_control_h : UInt<1>
    wire GEN_3_control_s : UInt<1>
    wire GEN_3_control_u : UInt<1>
    wire GEN_3_control_x : UInt<1>
    wire GEN_3_control_w : UInt<1>
    wire GEN_3_control_r : UInt<1>
    wire GEN_3_address : UInt<39>
    wire GEN_4_control_ttype : UInt<4>
    wire GEN_4_control_dmode : UInt<1>
    wire GEN_4_control_maskmax : UInt<6>
    wire GEN_4_control_reserved : UInt<40>
    wire GEN_4_control_action : UInt<1>
    wire GEN_4_control_chain : UInt<1>
    wire GEN_4_control_zero : UInt<2>
    wire GEN_4_control_tmatch : UInt<2>
    wire GEN_4_control_m : UInt<1>
    wire GEN_4_control_h : UInt<1>
    wire GEN_4_control_s : UInt<1>
    wire GEN_4_control_u : UInt<1>
    wire GEN_4_control_x : UInt<1>
    wire GEN_4_control_w : UInt<1>
    wire GEN_4_control_r : UInt<1>
    wire GEN_4_address : UInt<39>
    node T_5922 = cat(GEN_3_control_s, GEN_4_control_u)
    wire GEN_5_control_ttype : UInt<4>
    wire GEN_5_control_dmode : UInt<1>
    wire GEN_5_control_maskmax : UInt<6>
    wire GEN_5_control_reserved : UInt<40>
    wire GEN_5_control_action : UInt<1>
    wire GEN_5_control_chain : UInt<1>
    wire GEN_5_control_zero : UInt<2>
    wire GEN_5_control_tmatch : UInt<2>
    wire GEN_5_control_m : UInt<1>
    wire GEN_5_control_h : UInt<1>
    wire GEN_5_control_s : UInt<1>
    wire GEN_5_control_u : UInt<1>
    wire GEN_5_control_x : UInt<1>
    wire GEN_5_control_w : UInt<1>
    wire GEN_5_control_r : UInt<1>
    wire GEN_5_address : UInt<39>
    wire GEN_6_control_ttype : UInt<4>
    wire GEN_6_control_dmode : UInt<1>
    wire GEN_6_control_maskmax : UInt<6>
    wire GEN_6_control_reserved : UInt<40>
    wire GEN_6_control_action : UInt<1>
    wire GEN_6_control_chain : UInt<1>
    wire GEN_6_control_zero : UInt<2>
    wire GEN_6_control_tmatch : UInt<2>
    wire GEN_6_control_m : UInt<1>
    wire GEN_6_control_h : UInt<1>
    wire GEN_6_control_s : UInt<1>
    wire GEN_6_control_u : UInt<1>
    wire GEN_6_control_x : UInt<1>
    wire GEN_6_control_w : UInt<1>
    wire GEN_6_control_r : UInt<1>
    wire GEN_6_address : UInt<39>
    node T_5923 = cat(GEN_5_control_m, GEN_6_control_h)
    node T_5924 = cat(T_5923, T_5922)
    node T_5925 = cat(T_5924, T_5921)
    wire GEN_7_control_ttype : UInt<4>
    wire GEN_7_control_dmode : UInt<1>
    wire GEN_7_control_maskmax : UInt<6>
    wire GEN_7_control_reserved : UInt<40>
    wire GEN_7_control_action : UInt<1>
    wire GEN_7_control_chain : UInt<1>
    wire GEN_7_control_zero : UInt<2>
    wire GEN_7_control_tmatch : UInt<2>
    wire GEN_7_control_m : UInt<1>
    wire GEN_7_control_h : UInt<1>
    wire GEN_7_control_s : UInt<1>
    wire GEN_7_control_u : UInt<1>
    wire GEN_7_control_x : UInt<1>
    wire GEN_7_control_w : UInt<1>
    wire GEN_7_control_r : UInt<1>
    wire GEN_7_address : UInt<39>
    wire GEN_8_control_ttype : UInt<4>
    wire GEN_8_control_dmode : UInt<1>
    wire GEN_8_control_maskmax : UInt<6>
    wire GEN_8_control_reserved : UInt<40>
    wire GEN_8_control_action : UInt<1>
    wire GEN_8_control_chain : UInt<1>
    wire GEN_8_control_zero : UInt<2>
    wire GEN_8_control_tmatch : UInt<2>
    wire GEN_8_control_m : UInt<1>
    wire GEN_8_control_h : UInt<1>
    wire GEN_8_control_s : UInt<1>
    wire GEN_8_control_u : UInt<1>
    wire GEN_8_control_x : UInt<1>
    wire GEN_8_control_w : UInt<1>
    wire GEN_8_control_r : UInt<1>
    wire GEN_8_address : UInt<39>
    node T_5926 = cat(GEN_7_control_zero, GEN_8_control_tmatch)
    wire GEN_9_control_ttype : UInt<4>
    wire GEN_9_control_dmode : UInt<1>
    wire GEN_9_control_maskmax : UInt<6>
    wire GEN_9_control_reserved : UInt<40>
    wire GEN_9_control_action : UInt<1>
    wire GEN_9_control_chain : UInt<1>
    wire GEN_9_control_zero : UInt<2>
    wire GEN_9_control_tmatch : UInt<2>
    wire GEN_9_control_m : UInt<1>
    wire GEN_9_control_h : UInt<1>
    wire GEN_9_control_s : UInt<1>
    wire GEN_9_control_u : UInt<1>
    wire GEN_9_control_x : UInt<1>
    wire GEN_9_control_w : UInt<1>
    wire GEN_9_control_r : UInt<1>
    wire GEN_9_address : UInt<39>
    wire GEN_10_control_ttype : UInt<4>
    wire GEN_10_control_dmode : UInt<1>
    wire GEN_10_control_maskmax : UInt<6>
    wire GEN_10_control_reserved : UInt<40>
    wire GEN_10_control_action : UInt<1>
    wire GEN_10_control_chain : UInt<1>
    wire GEN_10_control_zero : UInt<2>
    wire GEN_10_control_tmatch : UInt<2>
    wire GEN_10_control_m : UInt<1>
    wire GEN_10_control_h : UInt<1>
    wire GEN_10_control_s : UInt<1>
    wire GEN_10_control_u : UInt<1>
    wire GEN_10_control_x : UInt<1>
    wire GEN_10_control_w : UInt<1>
    wire GEN_10_control_r : UInt<1>
    wire GEN_10_address : UInt<39>
    node T_5927 = cat(GEN_9_control_action, GEN_10_control_chain)
    node T_5928 = cat(T_5927, T_5926)
    wire GEN_11_control_ttype : UInt<4>
    wire GEN_11_control_dmode : UInt<1>
    wire GEN_11_control_maskmax : UInt<6>
    wire GEN_11_control_reserved : UInt<40>
    wire GEN_11_control_action : UInt<1>
    wire GEN_11_control_chain : UInt<1>
    wire GEN_11_control_zero : UInt<2>
    wire GEN_11_control_tmatch : UInt<2>
    wire GEN_11_control_m : UInt<1>
    wire GEN_11_control_h : UInt<1>
    wire GEN_11_control_s : UInt<1>
    wire GEN_11_control_u : UInt<1>
    wire GEN_11_control_x : UInt<1>
    wire GEN_11_control_w : UInt<1>
    wire GEN_11_control_r : UInt<1>
    wire GEN_11_address : UInt<39>
    wire GEN_12_control_ttype : UInt<4>
    wire GEN_12_control_dmode : UInt<1>
    wire GEN_12_control_maskmax : UInt<6>
    wire GEN_12_control_reserved : UInt<40>
    wire GEN_12_control_action : UInt<1>
    wire GEN_12_control_chain : UInt<1>
    wire GEN_12_control_zero : UInt<2>
    wire GEN_12_control_tmatch : UInt<2>
    wire GEN_12_control_m : UInt<1>
    wire GEN_12_control_h : UInt<1>
    wire GEN_12_control_s : UInt<1>
    wire GEN_12_control_u : UInt<1>
    wire GEN_12_control_x : UInt<1>
    wire GEN_12_control_w : UInt<1>
    wire GEN_12_control_r : UInt<1>
    wire GEN_12_address : UInt<39>
    node T_5929 = cat(GEN_11_control_maskmax, GEN_12_control_reserved)
    wire GEN_13_control_ttype : UInt<4>
    wire GEN_13_control_dmode : UInt<1>
    wire GEN_13_control_maskmax : UInt<6>
    wire GEN_13_control_reserved : UInt<40>
    wire GEN_13_control_action : UInt<1>
    wire GEN_13_control_chain : UInt<1>
    wire GEN_13_control_zero : UInt<2>
    wire GEN_13_control_tmatch : UInt<2>
    wire GEN_13_control_m : UInt<1>
    wire GEN_13_control_h : UInt<1>
    wire GEN_13_control_s : UInt<1>
    wire GEN_13_control_u : UInt<1>
    wire GEN_13_control_x : UInt<1>
    wire GEN_13_control_w : UInt<1>
    wire GEN_13_control_r : UInt<1>
    wire GEN_13_address : UInt<39>
    wire GEN_14_control_ttype : UInt<4>
    wire GEN_14_control_dmode : UInt<1>
    wire GEN_14_control_maskmax : UInt<6>
    wire GEN_14_control_reserved : UInt<40>
    wire GEN_14_control_action : UInt<1>
    wire GEN_14_control_chain : UInt<1>
    wire GEN_14_control_zero : UInt<2>
    wire GEN_14_control_tmatch : UInt<2>
    wire GEN_14_control_m : UInt<1>
    wire GEN_14_control_h : UInt<1>
    wire GEN_14_control_s : UInt<1>
    wire GEN_14_control_u : UInt<1>
    wire GEN_14_control_x : UInt<1>
    wire GEN_14_control_w : UInt<1>
    wire GEN_14_control_r : UInt<1>
    wire GEN_14_address : UInt<39>
    node T_5930 = cat(GEN_13_control_ttype, GEN_14_control_dmode)
    node T_5931 = cat(T_5930, T_5929)
    node T_5932 = cat(T_5931, T_5928)
    node T_5933 = cat(T_5932, T_5925)
    wire GEN_15_control_ttype : UInt<4>
    wire GEN_15_control_dmode : UInt<1>
    wire GEN_15_control_maskmax : UInt<6>
    wire GEN_15_control_reserved : UInt<40>
    wire GEN_15_control_action : UInt<1>
    wire GEN_15_control_chain : UInt<1>
    wire GEN_15_control_zero : UInt<2>
    wire GEN_15_control_tmatch : UInt<2>
    wire GEN_15_control_m : UInt<1>
    wire GEN_15_control_h : UInt<1>
    wire GEN_15_control_s : UInt<1>
    wire GEN_15_control_u : UInt<1>
    wire GEN_15_control_x : UInt<1>
    wire GEN_15_control_w : UInt<1>
    wire GEN_15_control_r : UInt<1>
    wire GEN_15_address : UInt<39>
    node T_5951 = bits(GEN_15_address, 38, 38)
    node T_5955 = mux(T_5951, UInt<25>("h1ffffff"), UInt<25>("h0"))
    wire GEN_16_control_ttype : UInt<4>
    wire GEN_16_control_dmode : UInt<1>
    wire GEN_16_control_maskmax : UInt<6>
    wire GEN_16_control_reserved : UInt<40>
    wire GEN_16_control_action : UInt<1>
    wire GEN_16_control_chain : UInt<1>
    wire GEN_16_control_zero : UInt<2>
    wire GEN_16_control_tmatch : UInt<2>
    wire GEN_16_control_m : UInt<1>
    wire GEN_16_control_h : UInt<1>
    wire GEN_16_control_s : UInt<1>
    wire GEN_16_control_u : UInt<1>
    wire GEN_16_control_x : UInt<1>
    wire GEN_16_control_w : UInt<1>
    wire GEN_16_control_r : UInt<1>
    wire GEN_16_address : UInt<39>
    node T_5956 = cat(T_5955, GEN_16_address)
    node T_5960 = bits(reg_mepc, 39, 39)
    node T_5964 = mux(T_5960, UInt<24>("hffffff"), UInt<24>("h0"))
    node T_5965 = cat(T_5964, reg_mepc)
    node T_5966 = bits(reg_mbadaddr, 39, 39)
    node T_5970 = mux(T_5966, UInt<24>("hffffff"), UInt<24>("h0"))
    node T_5971 = cat(T_5970, reg_mbadaddr)
    node T_5972 = cat(reg_dcsr_step, reg_dcsr_prv)
    node T_5973 = cat(reg_dcsr_zero1, reg_dcsr_halt)
    node T_5974 = cat(T_5973, T_5972)
    node T_5975 = cat(reg_dcsr_cause, reg_dcsr_debugint)
    node T_5976 = cat(reg_dcsr_stopcycle, reg_dcsr_stoptime)
    node T_5977 = cat(T_5976, T_5975)
    node T_5978 = cat(T_5977, T_5974)
    node T_5979 = cat(reg_dcsr_ebreaku, reg_dcsr_zero2)
    node T_5980 = cat(reg_dcsr_ebreakh, reg_dcsr_ebreaks)
    node T_5981 = cat(T_5980, T_5979)
    node T_5982 = cat(reg_dcsr_zero3, reg_dcsr_ebreakm)
    node T_5983 = cat(reg_dcsr_xdebugver, reg_dcsr_ndreset)
    node T_5984 = cat(T_5983, reg_dcsr_fullreset)
    node T_5985 = cat(T_5984, T_5982)
    node T_5986 = cat(T_5985, T_5981)
    node T_5987 = cat(T_5986, T_5978)
    node T_5988 = cat(reg_frm, reg_fflags)
    node T_5991 = and(reg_mie, reg_mideleg)
    node T_5992 = and(GEN_1, reg_mideleg)
    wire T_5993_debug : UInt<1>
    wire T_5993_isa : UInt<32>
    wire T_5993_prv : UInt<2>
    wire T_5993_sd : UInt<1>
    wire T_5993_zero3 : UInt<31>
    wire T_5993_sd_rv32 : UInt<1>
    wire T_5993_zero2 : UInt<2>
    wire T_5993_vm : UInt<5>
    wire T_5993_zero1 : UInt<4>
    wire T_5993_mxr : UInt<1>
    wire T_5993_pum : UInt<1>
    wire T_5993_mprv : UInt<1>
    wire T_5993_xs : UInt<2>
    wire T_5993_fs : UInt<2>
    wire T_5993_mpp : UInt<2>
    wire T_5993_hpp : UInt<2>
    wire T_5993_spp : UInt<1>
    wire T_5993_mpie : UInt<1>
    wire T_5993_hpie : UInt<1>
    wire T_5993_spie : UInt<1>
    wire T_5993_upie : UInt<1>
    wire T_5993_mie : UInt<1>
    wire T_5993_hie : UInt<1>
    wire T_5993_sie : UInt<1>
    wire T_5993_uie : UInt<1>
    node T_6027 = cat(UInt<1>("h0"), T_5993_sie)
    node T_6028 = cat(T_6027, T_5993_uie)
    node T_6029 = cat(T_5993_spie, T_5993_upie)
    node T_6030 = cat(T_6029, UInt<1>("h0"))
    node T_6031 = cat(T_6030, T_6028)
    node T_6032 = cat(T_5993_spp, UInt<1>("h0"))
    node T_6033 = cat(T_6032, UInt<1>("h0"))
    node T_6034 = cat(T_5993_fs, UInt<2>("h0"))
    node T_6035 = cat(T_6034, UInt<2>("h0"))
    node T_6036 = cat(T_6035, T_6033)
    node T_6037 = cat(T_6036, T_6031)
    node T_6038 = cat(T_5993_pum, UInt<1>("h0"))
    node T_6039 = cat(T_6038, T_5993_xs)
    node T_6040 = cat(UInt<5>("h0"), T_5993_zero1)
    node T_6041 = cat(T_6040, T_5993_mxr)
    node T_6042 = cat(T_6041, T_6039)
    node T_6043 = cat(T_5993_zero3, T_5993_sd_rv32)
    node T_6044 = cat(T_6043, T_5993_zero2)
    node T_6045 = cat(T_5993_prv, T_5993_sd)
    node T_6046 = cat(T_5993_debug, T_5993_isa)
    node T_6047 = cat(T_6046, T_6045)
    node T_6048 = cat(T_6047, T_6044)
    node T_6049 = cat(T_6048, T_6042)
    node T_6050 = cat(T_6049, T_6037)
    node T_6051 = bits(T_6050, 63, 0)
    node T_6052 = bits(reg_sbadaddr, 39, 39)
    node T_6056 = mux(T_6052, UInt<24>("hffffff"), UInt<24>("h0"))
    node T_6057 = cat(T_6056, reg_sbadaddr)
    node T_6058 = cat(UInt<7>("h0"), reg_sptbr_ppn)
    node T_6059 = bits(reg_sepc, 39, 39)
    node T_6063 = mux(T_6059, UInt<24>("hffffff"), UInt<24>("h0"))
    node T_6064 = cat(T_6063, reg_sepc)
    node T_6065 = bits(reg_stvec, 38, 38)
    node T_6069 = mux(T_6065, UInt<25>("h1ffffff"), UInt<25>("h0"))
    node T_6070 = cat(T_6069, reg_stvec)
    node T_6072 = eq(io_rw_addr, UInt<12>("h7a0"))
    node T_6074 = eq(io_rw_addr, UInt<12>("h7a1"))
    node T_6076 = eq(io_rw_addr, UInt<12>("h7a2"))
    node T_6078 = eq(io_rw_addr, UInt<12>("hf13"))
    node T_6080 = eq(io_rw_addr, UInt<12>("hf12"))
    node T_6082 = eq(io_rw_addr, UInt<12>("hf11"))
    node T_6084 = eq(io_rw_addr, UInt<12>("hb00"))
    node T_6086 = eq(io_rw_addr, UInt<12>("hb02"))
    node T_6088 = eq(io_rw_addr, UInt<12>("h301"))
    node T_6090 = eq(io_rw_addr, UInt<12>("h300"))
    node T_6092 = eq(io_rw_addr, UInt<12>("h305"))
    node T_6094 = eq(io_rw_addr, UInt<12>("h344"))
    node T_6096 = eq(io_rw_addr, UInt<12>("h304"))
    node T_6098 = eq(io_rw_addr, UInt<12>("h303"))
    node T_6100 = eq(io_rw_addr, UInt<12>("h302"))
    node T_6102 = eq(io_rw_addr, UInt<12>("h340"))
    node T_6104 = eq(io_rw_addr, UInt<12>("h341"))
    node T_6106 = eq(io_rw_addr, UInt<12>("h343"))
    node T_6108 = eq(io_rw_addr, UInt<12>("h342"))
    node T_6110 = eq(io_rw_addr, UInt<12>("hf14"))
    node T_6112 = eq(io_rw_addr, UInt<12>("h7b0"))
    node T_6114 = eq(io_rw_addr, UInt<12>("h7b1"))
    node T_6116 = eq(io_rw_addr, UInt<12>("h7b2"))
    node T_6118 = eq(io_rw_addr, UInt<12>("h1"))
    node T_6120 = eq(io_rw_addr, UInt<12>("h2"))
    node T_6122 = eq(io_rw_addr, UInt<12>("h3"))
    node T_6124 = eq(io_rw_addr, UInt<12>("h323"))
    node T_6126 = eq(io_rw_addr, UInt<12>("hb03"))
    node T_6128 = eq(io_rw_addr, UInt<12>("hc03"))
    node T_6130 = eq(io_rw_addr, UInt<12>("h324"))
    node T_6132 = eq(io_rw_addr, UInt<12>("hb04"))
    node T_6134 = eq(io_rw_addr, UInt<12>("hc04"))
    node T_6136 = eq(io_rw_addr, UInt<12>("h325"))
    node T_6138 = eq(io_rw_addr, UInt<12>("hb05"))
    node T_6140 = eq(io_rw_addr, UInt<12>("hc05"))
    node T_6142 = eq(io_rw_addr, UInt<12>("h326"))
    node T_6144 = eq(io_rw_addr, UInt<12>("hb06"))
    node T_6146 = eq(io_rw_addr, UInt<12>("hc06"))
    node T_6148 = eq(io_rw_addr, UInt<12>("h327"))
    node T_6150 = eq(io_rw_addr, UInt<12>("hb07"))
    node T_6152 = eq(io_rw_addr, UInt<12>("hc07"))
    node T_6154 = eq(io_rw_addr, UInt<12>("h328"))
    node T_6156 = eq(io_rw_addr, UInt<12>("hb08"))
    node T_6158 = eq(io_rw_addr, UInt<12>("hc08"))
    node T_6160 = eq(io_rw_addr, UInt<12>("h329"))
    node T_6162 = eq(io_rw_addr, UInt<12>("hb09"))
    node T_6164 = eq(io_rw_addr, UInt<12>("hc09"))
    node T_6166 = eq(io_rw_addr, UInt<12>("h32a"))
    node T_6168 = eq(io_rw_addr, UInt<12>("hb0a"))
    node T_6170 = eq(io_rw_addr, UInt<12>("hc0a"))
    node T_6172 = eq(io_rw_addr, UInt<12>("h32b"))
    node T_6174 = eq(io_rw_addr, UInt<12>("hb0b"))
    node T_6176 = eq(io_rw_addr, UInt<12>("hc0b"))
    node T_6178 = eq(io_rw_addr, UInt<12>("h32c"))
    node T_6180 = eq(io_rw_addr, UInt<12>("hb0c"))
    node T_6182 = eq(io_rw_addr, UInt<12>("hc0c"))
    node T_6184 = eq(io_rw_addr, UInt<12>("h32d"))
    node T_6186 = eq(io_rw_addr, UInt<12>("hb0d"))
    node T_6188 = eq(io_rw_addr, UInt<12>("hc0d"))
    node T_6190 = eq(io_rw_addr, UInt<12>("h32e"))
    node T_6192 = eq(io_rw_addr, UInt<12>("hb0e"))
    node T_6194 = eq(io_rw_addr, UInt<12>("hc0e"))
    node T_6196 = eq(io_rw_addr, UInt<12>("h32f"))
    node T_6198 = eq(io_rw_addr, UInt<12>("hb0f"))
    node T_6200 = eq(io_rw_addr, UInt<12>("hc0f"))
    node T_6202 = eq(io_rw_addr, UInt<12>("h330"))
    node T_6204 = eq(io_rw_addr, UInt<12>("hb10"))
    node T_6206 = eq(io_rw_addr, UInt<12>("hc10"))
    node T_6208 = eq(io_rw_addr, UInt<12>("h331"))
    node T_6210 = eq(io_rw_addr, UInt<12>("hb11"))
    node T_6212 = eq(io_rw_addr, UInt<12>("hc11"))
    node T_6214 = eq(io_rw_addr, UInt<12>("h332"))
    node T_6216 = eq(io_rw_addr, UInt<12>("hb12"))
    node T_6218 = eq(io_rw_addr, UInt<12>("hc12"))
    node T_6220 = eq(io_rw_addr, UInt<12>("h333"))
    node T_6222 = eq(io_rw_addr, UInt<12>("hb13"))
    node T_6224 = eq(io_rw_addr, UInt<12>("hc13"))
    node T_6226 = eq(io_rw_addr, UInt<12>("h334"))
    node T_6228 = eq(io_rw_addr, UInt<12>("hb14"))
    node T_6230 = eq(io_rw_addr, UInt<12>("hc14"))
    node T_6232 = eq(io_rw_addr, UInt<12>("h335"))
    node T_6234 = eq(io_rw_addr, UInt<12>("hb15"))
    node T_6236 = eq(io_rw_addr, UInt<12>("hc15"))
    node T_6238 = eq(io_rw_addr, UInt<12>("h336"))
    node T_6240 = eq(io_rw_addr, UInt<12>("hb16"))
    node T_6242 = eq(io_rw_addr, UInt<12>("hc16"))
    node T_6244 = eq(io_rw_addr, UInt<12>("h337"))
    node T_6246 = eq(io_rw_addr, UInt<12>("hb17"))
    node T_6248 = eq(io_rw_addr, UInt<12>("hc17"))
    node T_6250 = eq(io_rw_addr, UInt<12>("h338"))
    node T_6252 = eq(io_rw_addr, UInt<12>("hb18"))
    node T_6254 = eq(io_rw_addr, UInt<12>("hc18"))
    node T_6256 = eq(io_rw_addr, UInt<12>("h339"))
    node T_6258 = eq(io_rw_addr, UInt<12>("hb19"))
    node T_6260 = eq(io_rw_addr, UInt<12>("hc19"))
    node T_6262 = eq(io_rw_addr, UInt<12>("h33a"))
    node T_6264 = eq(io_rw_addr, UInt<12>("hb1a"))
    node T_6266 = eq(io_rw_addr, UInt<12>("hc1a"))
    node T_6268 = eq(io_rw_addr, UInt<12>("h33b"))
    node T_6270 = eq(io_rw_addr, UInt<12>("hb1b"))
    node T_6272 = eq(io_rw_addr, UInt<12>("hc1b"))
    node T_6274 = eq(io_rw_addr, UInt<12>("h33c"))
    node T_6276 = eq(io_rw_addr, UInt<12>("hb1c"))
    node T_6278 = eq(io_rw_addr, UInt<12>("hc1c"))
    node T_6280 = eq(io_rw_addr, UInt<12>("h33d"))
    node T_6282 = eq(io_rw_addr, UInt<12>("hb1d"))
    node T_6284 = eq(io_rw_addr, UInt<12>("hc1d"))
    node T_6286 = eq(io_rw_addr, UInt<12>("h33e"))
    node T_6288 = eq(io_rw_addr, UInt<12>("hb1e"))
    node T_6290 = eq(io_rw_addr, UInt<12>("hc1e"))
    node T_6292 = eq(io_rw_addr, UInt<12>("h33f"))
    node T_6294 = eq(io_rw_addr, UInt<12>("hb1f"))
    node T_6296 = eq(io_rw_addr, UInt<12>("hc1f"))
    node T_6298 = eq(io_rw_addr, UInt<12>("h100"))
    node T_6300 = eq(io_rw_addr, UInt<12>("h144"))
    node T_6302 = eq(io_rw_addr, UInt<12>("h104"))
    node T_6304 = eq(io_rw_addr, UInt<12>("h140"))
    node T_6306 = eq(io_rw_addr, UInt<12>("h142"))
    node T_6308 = eq(io_rw_addr, UInt<12>("h143"))
    node T_6310 = eq(io_rw_addr, UInt<12>("h180"))
    node T_6312 = eq(io_rw_addr, UInt<12>("h141"))
    node T_6314 = eq(io_rw_addr, UInt<12>("h105"))
    node T_6316 = eq(io_rw_addr, UInt<12>("h321"))
    node T_6318 = eq(io_rw_addr, UInt<12>("h320"))
    node T_6320 = eq(io_rw_addr, UInt<12>("hc00"))
    node T_6322 = eq(io_rw_addr, UInt<12>("hc02"))
    node T_6323 = or(T_6072, T_6074)
    node T_6324 = or(T_6323, T_6076)
    node T_6325 = or(T_6324, T_6078)
    node T_6326 = or(T_6325, T_6080)
    node T_6327 = or(T_6326, T_6082)
    node T_6328 = or(T_6327, T_6084)
    node T_6329 = or(T_6328, T_6086)
    node T_6330 = or(T_6329, T_6088)
    node T_6331 = or(T_6330, T_6090)
    node T_6332 = or(T_6331, T_6092)
    node T_6333 = or(T_6332, T_6094)
    node T_6334 = or(T_6333, T_6096)
    node T_6335 = or(T_6334, T_6098)
    node T_6336 = or(T_6335, T_6100)
    node T_6337 = or(T_6336, T_6102)
    node T_6338 = or(T_6337, T_6104)
    node T_6339 = or(T_6338, T_6106)
    node T_6340 = or(T_6339, T_6108)
    node T_6341 = or(T_6340, T_6110)
    node T_6342 = or(T_6341, T_6112)
    node T_6343 = or(T_6342, T_6114)
    node T_6344 = or(T_6343, T_6116)
    node T_6345 = or(T_6344, T_6118)
    node T_6346 = or(T_6345, T_6120)
    node T_6347 = or(T_6346, T_6122)
    node T_6348 = or(T_6347, T_6124)
    node T_6349 = or(T_6348, T_6126)
    node T_6350 = or(T_6349, T_6128)
    node T_6351 = or(T_6350, T_6130)
    node T_6352 = or(T_6351, T_6132)
    node T_6353 = or(T_6352, T_6134)
    node T_6354 = or(T_6353, T_6136)
    node T_6355 = or(T_6354, T_6138)
    node T_6356 = or(T_6355, T_6140)
    node T_6357 = or(T_6356, T_6142)
    node T_6358 = or(T_6357, T_6144)
    node T_6359 = or(T_6358, T_6146)
    node T_6360 = or(T_6359, T_6148)
    node T_6361 = or(T_6360, T_6150)
    node T_6362 = or(T_6361, T_6152)
    node T_6363 = or(T_6362, T_6154)
    node T_6364 = or(T_6363, T_6156)
    node T_6365 = or(T_6364, T_6158)
    node T_6366 = or(T_6365, T_6160)
    node T_6367 = or(T_6366, T_6162)
    node T_6368 = or(T_6367, T_6164)
    node T_6369 = or(T_6368, T_6166)
    node T_6370 = or(T_6369, T_6168)
    node T_6371 = or(T_6370, T_6170)
    node T_6372 = or(T_6371, T_6172)
    node T_6373 = or(T_6372, T_6174)
    node T_6374 = or(T_6373, T_6176)
    node T_6375 = or(T_6374, T_6178)
    node T_6376 = or(T_6375, T_6180)
    node T_6377 = or(T_6376, T_6182)
    node T_6378 = or(T_6377, T_6184)
    node T_6379 = or(T_6378, T_6186)
    node T_6380 = or(T_6379, T_6188)
    node T_6381 = or(T_6380, T_6190)
    node T_6382 = or(T_6381, T_6192)
    node T_6383 = or(T_6382, T_6194)
    node T_6384 = or(T_6383, T_6196)
    node T_6385 = or(T_6384, T_6198)
    node T_6386 = or(T_6385, T_6200)
    node T_6387 = or(T_6386, T_6202)
    node T_6388 = or(T_6387, T_6204)
    node T_6389 = or(T_6388, T_6206)
    node T_6390 = or(T_6389, T_6208)
    node T_6391 = or(T_6390, T_6210)
    node T_6392 = or(T_6391, T_6212)
    node T_6393 = or(T_6392, T_6214)
    node T_6394 = or(T_6393, T_6216)
    node T_6395 = or(T_6394, T_6218)
    node T_6396 = or(T_6395, T_6220)
    node T_6397 = or(T_6396, T_6222)
    node T_6398 = or(T_6397, T_6224)
    node T_6399 = or(T_6398, T_6226)
    node T_6400 = or(T_6399, T_6228)
    node T_6401 = or(T_6400, T_6230)
    node T_6402 = or(T_6401, T_6232)
    node T_6403 = or(T_6402, T_6234)
    node T_6404 = or(T_6403, T_6236)
    node T_6405 = or(T_6404, T_6238)
    node T_6406 = or(T_6405, T_6240)
    node T_6407 = or(T_6406, T_6242)
    node T_6408 = or(T_6407, T_6244)
    node T_6409 = or(T_6408, T_6246)
    node T_6410 = or(T_6409, T_6248)
    node T_6411 = or(T_6410, T_6250)
    node T_6412 = or(T_6411, T_6252)
    node T_6413 = or(T_6412, T_6254)
    node T_6414 = or(T_6413, T_6256)
    node T_6415 = or(T_6414, T_6258)
    node T_6416 = or(T_6415, T_6260)
    node T_6417 = or(T_6416, T_6262)
    node T_6418 = or(T_6417, T_6264)
    node T_6419 = or(T_6418, T_6266)
    node T_6420 = or(T_6419, T_6268)
    node T_6421 = or(T_6420, T_6270)
    node T_6422 = or(T_6421, T_6272)
    node T_6423 = or(T_6422, T_6274)
    node T_6424 = or(T_6423, T_6276)
    node T_6425 = or(T_6424, T_6278)
    node T_6426 = or(T_6425, T_6280)
    node T_6427 = or(T_6426, T_6282)
    node T_6428 = or(T_6427, T_6284)
    node T_6429 = or(T_6428, T_6286)
    node T_6430 = or(T_6429, T_6288)
    node T_6431 = or(T_6430, T_6290)
    node T_6432 = or(T_6431, T_6292)
    node T_6433 = or(T_6432, T_6294)
    node T_6434 = or(T_6433, T_6296)
    node T_6435 = or(T_6434, T_6298)
    node T_6436 = or(T_6435, T_6300)
    node T_6437 = or(T_6436, T_6302)
    node T_6438 = or(T_6437, T_6304)
    node T_6439 = or(T_6438, T_6306)
    node T_6440 = or(T_6439, T_6308)
    node T_6441 = or(T_6440, T_6310)
    node T_6442 = or(T_6441, T_6312)
    node T_6443 = or(T_6442, T_6314)
    node T_6444 = or(T_6443, T_6316)
    node T_6445 = or(T_6444, T_6318)
    node T_6446 = or(T_6445, T_6320)
    node addr_valid = or(T_6446, T_6322)
    node T_6447 = or(T_6118, T_6120)
    node fp_csr = or(T_6447, T_6122)
    node T_6449 = geq(io_rw_addr, UInt<12>("hc00"))
    node T_6451 = lt(io_rw_addr, UInt<12>("hc20"))
    node hpm_csr = and(T_6449, T_6451)
    node T_6454 = or(reg_debug, T_5650)
    node T_6457 = bits(io_rw_addr, 4, 0)
    node T_6458 = dshr(reg_mscounteren, T_6457)
    node T_6459 = bits(T_6458, 0, 0)
    node T_6460 = and(T_5662, T_6459)
    node T_6461 = or(T_6454, T_6460)
    node T_6463 = eq(reg_mstatus_prv, UInt<2>("h0"))
    node T_6465 = dshr(reg_mucounteren, T_6457)
    node T_6466 = bits(T_6465, 0, 0)
    node T_6467 = and(T_6463, T_6466)
    node hpm_en = or(T_6461, T_6467)
    node csr_addr_priv = bits(io_rw_addr, 9, 8)
    node T_6470 = and(io_rw_addr, UInt<12>("h90"))
    node T_6472 = eq(T_6470, UInt<12>("h90"))
    node T_6474 = eq(T_6472, UInt<1>("h0"))
    node T_6475 = geq(reg_mstatus_prv, csr_addr_priv)
    node T_6476 = and(T_6474, T_6475)
    node priv_sufficient = or(reg_debug, T_6476)
    node T_6477 = bits(io_rw_addr, 11, 10)
    node T_6478 = not(T_6477)
    node read_only = eq(T_6478, UInt<2>("h0"))
    node T_6480 = and(cpu_wen, priv_sufficient)
    node T_6482 = eq(read_only, UInt<1>("h0"))
    node wen = and(T_6480, T_6482)
    node T_6483 = eq(io_rw_cmd, UInt<3>("h2"))
    node T_6484 = eq(io_rw_cmd, UInt<3>("h3"))
    node T_6485 = or(T_6483, T_6484)
    node T_6487 = mux(T_6485, io_rw_rdata, UInt<64>("h0"))
    node T_6488 = neq(io_rw_cmd, UInt<3>("h3"))
    node T_6490 = mux(T_6488, io_rw_wdata, UInt<64>("h0"))
    node T_6491 = or(T_6487, T_6490)
    node T_6494 = mux(T_6484, io_rw_wdata, UInt<64>("h0"))
    node T_6495 = not(T_6494)
    node wdata = and(T_6491, T_6495)
    node do_system_insn = and(priv_sufficient, system_insn)
    node T_6497 = bits(io_rw_addr, 2, 0)
    node opcode = dshlw(UInt<8>("h1"), T_6497)
    node T_6498 = bits(opcode, 0, 0)
    node insn_call = and(do_system_insn, T_6498)
    node T_6499 = bits(opcode, 1, 1)
    node insn_break = and(do_system_insn, T_6499)
    node T_6500 = bits(opcode, 2, 2)
    node insn_ret = and(do_system_insn, T_6500)
    node T_6501 = bits(opcode, 4, 4)
    node insn_sfence_vm = and(do_system_insn, T_6501)
    node T_6502 = bits(opcode, 5, 5)
    node insn_wfi = and(do_system_insn, T_6502)
    node T_6503 = and(cpu_wen, read_only)
    node T_6505 = eq(priv_sufficient, UInt<1>("h0"))
    node T_6507 = eq(addr_valid, UInt<1>("h0"))
    node T_6508 = or(T_6505, T_6507)
    node T_6510 = eq(hpm_en, UInt<1>("h0"))
    node T_6511 = and(hpm_csr, T_6510)
    node T_6512 = or(T_6508, T_6511)
    node T_6514 = neq(io_status_fs, UInt<2>("h0"))
    node T_6515 = bits(reg_misa, 5, 5)
    node T_6516 = and(T_6514, T_6515)
    node T_6518 = eq(T_6516, UInt<1>("h0"))
    node T_6519 = and(fp_csr, T_6518)
    node T_6520 = or(T_6512, T_6519)
    node T_6521 = and(cpu_ren, T_6520)
    node T_6522 = or(T_6503, T_6521)
    node T_6525 = and(system_insn, T_6505)
    node T_6526 = or(T_6522, T_6525)
    node T_6527 = or(T_6526, insn_call)
    node T_6528 = or(T_6527, insn_break)
    node GEN_58 = mux(insn_wfi, UInt<1>("h1"), reg_wfi)
    node T_6531 = neq(pending_interrupts, UInt<64>("h0"))
    node GEN_59 = mux(T_6531, UInt<1>("h0"), GEN_58)
    node T_6534 = eq(io_csr_xcpt, UInt<1>("h0"))
    node GEN_4 = pad(reg_mstatus_prv, 4)
    node T_6536 = add(GEN_4, UInt<4>("h8"))
    node T_6537 = tail(T_6536, 1)
    node T_6540 = mux(insn_break, UInt<2>("h3"), UInt<2>("h2"))
    node T_6541 = mux(insn_call, T_6537, pad(T_6540, 4))
    node cause = mux(T_6534, io_cause, pad(T_6541, 64))
    node cause_lsbs = bits(cause, 5, 0)
    node T_6542 = bits(cause, 63, 63)
    node T_6544 = eq(cause_lsbs, UInt<6>("hd"))
    node causeIsDebugInt = and(T_6542, T_6544)
    node T_6547 = eq(T_6542, UInt<1>("h0"))
    node causeIsDebugTrigger = and(T_6547, T_6544)
    node T_6553 = and(T_6547, insn_break)
    node T_6554 = cat(reg_dcsr_ebreaks, reg_dcsr_ebreaku)
    node T_6555 = cat(reg_dcsr_ebreakm, reg_dcsr_ebreakh)
    node T_6556 = cat(T_6555, T_6554)
    node T_6557 = dshr(T_6556, reg_mstatus_prv)
    node T_6558 = bits(T_6557, 0, 0)
    node causeIsDebugBreak = and(T_6553, T_6558)
    node T_6560 = or(reg_singleStepped, causeIsDebugInt)
    node T_6561 = or(T_6560, causeIsDebugTrigger)
    node T_6562 = or(T_6561, causeIsDebugBreak)
    node T_6563 = or(T_6562, reg_debug)
    node T_6569 = dshr(reg_mideleg, cause_lsbs)
    node T_6570 = bits(T_6569, 0, 0)
    node T_6571 = dshr(reg_medeleg, cause_lsbs)
    node T_6572 = bits(T_6571, 0, 0)
    node T_6573 = mux(T_6542, T_6570, T_6572)
    node delegate = and(T_5648, T_6573)
    node debugTVec = mux(reg_debug, UInt<12>("h808"), UInt<12>("h800"))
    node T_6577 = cat(T_6065, reg_stvec)
    node T_6578 = mux(delegate, T_6577, pad(reg_mtvec, 40))
    node tvec = mux(T_6563, pad(debugTVec, 40), T_6578)
    node T_6580 = bits(csr_addr_priv, 1, 1)
    node T_6582 = eq(T_6580, UInt<1>("h0"))
    node T_6584 = mux(T_6582, reg_sepc, reg_mepc)
    node epc = mux(T_6472, reg_dpc, T_6584)
    node T_6585 = mux(exception, tvec, epc)
    node T_6588 = and(reg_dcsr_step, T_5646)
    node T_6589 = not(io_status_fs)
    node T_6591 = eq(T_6589, UInt<2>("h0"))
    node T_6592 = not(io_status_xs)
    node T_6594 = eq(T_6592, UInt<2>("h0"))
    node T_6595 = or(T_6591, T_6594)
    node T_6596 = not(io_pc)
    node T_6598 = or(T_6596, UInt<40>("h1"))
    node T_6599 = not(T_6598)
    node T_6600 = dshr(read_mstatus, reg_mstatus_prv)
    node T_6601 = bits(T_6600, 0, 0)
    node T_6609 = eq(cause, UInt<64>("h3"))
    node T_6610 = eq(cause, UInt<64>("h4"))
    node T_6611 = eq(cause, UInt<64>("h6"))
    node T_6612 = eq(cause, UInt<64>("h0"))
    node T_6613 = eq(cause, UInt<64>("h5"))
    node T_6614 = eq(cause, UInt<64>("h7"))
    node T_6615 = eq(cause, UInt<64>("h1"))
    node T_6616 = or(T_6609, T_6610)
    node T_6617 = or(T_6616, T_6611)
    node T_6618 = or(T_6617, T_6612)
    node T_6619 = or(T_6618, T_6613)
    node T_6620 = or(T_6619, T_6614)
    node T_6621 = or(T_6620, T_6615)
    node T_6627 = mux(causeIsDebugTrigger, UInt<2>("h2"), UInt<2>("h1"))
    node T_6628 = mux(causeIsDebugInt, UInt<2>("h3"), T_6627)
    node T_6629 = mux(reg_singleStepped, UInt<3>("h4"), pad(T_6628, 3))
    node GEN_60 = mux(T_6563, UInt<1>("h1"), reg_debug)
    node GEN_61 = mux(T_6563, T_6599, reg_dpc)
    node GEN_62 = mux(T_6563, T_6629, reg_dcsr_cause)
    node GEN_63 = mux(T_6563, reg_mstatus_prv, reg_dcsr_prv)
    node T_6631 = eq(T_6563, UInt<1>("h0"))
    node T_6632 = and(T_6631, delegate)
    node T_6633 = not(T_6599)
    node T_6634 = bits(reg_misa, 2, 2)
    node T_6636 = eq(T_6634, UInt<1>("h0"))
    node T_6638 = cat(T_6636, UInt<1>("h1"))
    node GEN_5 = pad(T_6638, 40)
    node T_6639 = or(T_6633, GEN_5)
    node T_6640 = not(T_6639)
    node GEN_64 = mux(T_6621, io_badaddr, reg_sbadaddr)
    node GEN_65 = mux(T_6632, T_6640, reg_sepc)
    node GEN_66 = mux(T_6632, cause, reg_scause)
    node GEN_67 = mux(T_6632, GEN_64, reg_sbadaddr)
    node GEN_68 = mux(T_6632, T_6601, reg_mstatus_spie)
    node GEN_69 = mux(T_6632, reg_mstatus_prv, pad(reg_mstatus_spp, 2))
    node GEN_70 = mux(T_6632, UInt<1>("h0"), reg_mstatus_sie)
    node GEN_71 = mux(T_6632, UInt<2>("h1"), reg_mstatus_prv)
    node T_6646 = eq(delegate, UInt<1>("h0"))
    node T_6647 = and(T_6631, T_6646)
    node GEN_72 = mux(T_6621, io_badaddr, reg_mbadaddr)
    node GEN_73 = mux(T_6647, T_6640, reg_mepc)
    node GEN_74 = mux(T_6647, cause, reg_mcause)
    node GEN_75 = mux(T_6647, GEN_72, reg_mbadaddr)
    node GEN_76 = mux(T_6647, T_6601, reg_mstatus_mpie)
    node GEN_77 = mux(T_6647, reg_mstatus_prv, reg_mstatus_mpp)
    node GEN_78 = mux(T_6647, UInt<1>("h0"), reg_mstatus_mie)
    node GEN_79 = mux(T_6647, UInt<2>("h3"), GEN_71)
    node GEN_80 = mux(exception, GEN_60, reg_debug)
    node GEN_81 = mux(exception, GEN_61, reg_dpc)
    node GEN_82 = mux(exception, GEN_62, reg_dcsr_cause)
    node GEN_83 = mux(exception, GEN_63, reg_dcsr_prv)
    node GEN_84 = mux(exception, GEN_65, reg_sepc)
    node GEN_85 = mux(exception, GEN_66, reg_scause)
    node GEN_86 = mux(exception, GEN_67, reg_sbadaddr)
    node GEN_87 = mux(exception, GEN_68, reg_mstatus_spie)
    node GEN_88 = mux(exception, GEN_69, pad(reg_mstatus_spp, 2))
    node GEN_89 = mux(exception, GEN_70, reg_mstatus_sie)
    node GEN_90 = mux(exception, GEN_79, reg_mstatus_prv)
    node GEN_91 = mux(exception, GEN_73, reg_mepc)
    node GEN_92 = mux(exception, GEN_74, reg_mcause)
    node GEN_93 = mux(exception, GEN_75, reg_mbadaddr)
    node GEN_94 = mux(exception, GEN_76, reg_mstatus_mpie)
    node GEN_95 = mux(exception, GEN_77, reg_mstatus_mpp)
    node GEN_96 = mux(exception, GEN_78, reg_mstatus_mie)
    node GEN_97 = mux(reg_mstatus_spp, reg_mstatus_spie, GEN_89)
    node GEN_98 = mux(T_6582, GEN_97, GEN_89)
    node GEN_99 = mux(T_6582, UInt<1>("h0"), GEN_87)
    node GEN_100 = mux(T_6582, UInt<2>("h0"), GEN_88)
    node GEN_101 = mux(T_6582, pad(reg_mstatus_spp, 2), GEN_90)
    node T_6667 = eq(T_6582, UInt<1>("h0"))
    node T_6668 = and(T_6667, T_6472)
    node GEN_102 = mux(T_6668, reg_dcsr_prv, GEN_101)
    node GEN_103 = mux(T_6668, UInt<1>("h0"), GEN_80)
    node T_6674 = and(T_6667, T_6474)
    node T_6675 = bits(reg_mstatus_mpp, 1, 1)
    node GEN_104 = mux(T_6675, reg_mstatus_mpie, GEN_96)
    node T_6677 = bits(reg_mstatus_mpp, 0, 0)
    node T_6680 = eq(T_6675, UInt<1>("h0"))
    node T_6681 = and(T_6680, T_6677)
    node GEN_105 = mux(T_6681, reg_mstatus_mpie, GEN_98)
    node GEN_106 = mux(T_6674, GEN_104, GEN_96)
    node GEN_107 = mux(T_6674, GEN_105, GEN_98)
    node GEN_108 = mux(T_6674, UInt<1>("h0"), GEN_94)
    node GEN_109 = mux(T_6674, UInt<2>("h0"), GEN_95)
    node GEN_110 = mux(T_6674, reg_mstatus_mpp, GEN_102)
    node GEN_111 = mux(insn_ret, GEN_107, GEN_89)
    node GEN_112 = mux(insn_ret, GEN_99, GEN_87)
    node GEN_113 = mux(insn_ret, GEN_100, GEN_88)
    node GEN_114 = mux(insn_ret, GEN_110, GEN_90)
    node GEN_115 = mux(insn_ret, GEN_103, GEN_80)
    node GEN_116 = mux(insn_ret, GEN_106, GEN_96)
    node GEN_117 = mux(insn_ret, GEN_108, GEN_94)
    node GEN_118 = mux(insn_ret, GEN_109, GEN_95)
    node T_6688 = add(io_exception, io_csr_xcpt)
    node GEN_7 = pad(insn_ret, 2)
    node T_6689 = add(GEN_7, T_6688)
    node T_6691 = leq(T_6689, UInt<3>("h1"))
    node T_6692 = or(T_6691, reset)
    node T_6694 = eq(T_6692, UInt<1>("h0"))
    node T_6696 = mux(T_6072, UInt<1>("h0"), UInt<1>("h0"))
    node T_6698 = mux(T_6074, T_5933, UInt<64>("h0"))
    node T_6700 = mux(T_6076, T_5956, UInt<64>("h0"))
    node T_6708 = mux(T_6084, T_5619, UInt<64>("h0"))
    node T_6710 = mux(T_6086, T_5608, UInt<64>("h0"))
    node T_6712 = mux(T_6088, reg_misa, UInt<64>("h0"))
    node T_6714 = mux(T_6090, read_mstatus, UInt<64>("h0"))
    node T_6716 = mux(T_6092, reg_mtvec, UInt<32>("h0"))
    node T_6718 = mux(T_6094, read_mip, UInt<13>("h0"))
    node T_6720 = mux(T_6096, reg_mie, UInt<64>("h0"))
    node T_6722 = mux(T_6098, reg_mideleg, UInt<64>("h0"))
    node T_6724 = mux(T_6100, reg_medeleg, UInt<64>("h0"))
    node T_6726 = mux(T_6102, reg_mscratch, UInt<64>("h0"))
    node T_6728 = mux(T_6104, T_5965, UInt<64>("h0"))
    node T_6730 = mux(T_6106, T_5971, UInt<64>("h0"))
    node T_6732 = mux(T_6108, reg_mcause, UInt<64>("h0"))
    node T_6734 = mux(T_6110, io_prci_id, UInt<1>("h0"))
    node T_6736 = mux(T_6112, T_5987, UInt<32>("h0"))
    node T_6738 = mux(T_6114, reg_dpc, UInt<40>("h0"))
    node T_6740 = mux(T_6116, reg_dscratch, UInt<64>("h0"))
    node T_6742 = mux(T_6118, reg_fflags, UInt<5>("h0"))
    node T_6744 = mux(T_6120, reg_frm, UInt<3>("h0"))
    node T_6746 = mux(T_6122, T_5988, UInt<8>("h0"))
    node T_6922 = mux(T_6298, T_6051, UInt<64>("h0"))
    node T_6924 = mux(T_6300, T_5992, UInt<64>("h0"))
    node T_6926 = mux(T_6302, T_5991, UInt<64>("h0"))
    node T_6928 = mux(T_6304, reg_sscratch, UInt<64>("h0"))
    node T_6930 = mux(T_6306, reg_scause, UInt<64>("h0"))
    node T_6932 = mux(T_6308, T_6057, UInt<64>("h0"))
    node T_6934 = mux(T_6310, T_6058, UInt<45>("h0"))
    node T_6936 = mux(T_6312, T_6064, UInt<64>("h0"))
    node T_6938 = mux(T_6314, T_6070, UInt<64>("h0"))
    node T_6940 = mux(T_6316, reg_mscounteren, UInt<32>("h0"))
    node T_6942 = mux(T_6318, reg_mucounteren, UInt<32>("h0"))
    node T_6944 = mux(T_6320, T_5619, UInt<64>("h0"))
    node T_6946 = mux(T_6322, T_5608, UInt<64>("h0"))
    node GEN_8 = pad(T_6696, 64)
    node T_6948 = or(GEN_8, T_6698)
    node T_6949 = or(T_6948, T_6700)
    node T_6953 = or(T_6949, T_6708)
    node T_6954 = or(T_6953, T_6710)
    node T_6955 = or(T_6954, T_6712)
    node T_6956 = or(T_6955, T_6714)
    node GEN_9 = pad(T_6716, 64)
    node T_6957 = or(T_6956, GEN_9)
    node GEN_10 = pad(T_6718, 64)
    node T_6958 = or(T_6957, GEN_10)
    node T_6959 = or(T_6958, T_6720)
    node T_6960 = or(T_6959, T_6722)
    node T_6961 = or(T_6960, T_6724)
    node T_6962 = or(T_6961, T_6726)
    node T_6963 = or(T_6962, T_6728)
    node T_6964 = or(T_6963, T_6730)
    node T_6965 = or(T_6964, T_6732)
    node GEN_11 = pad(T_6734, 64)
    node T_6966 = or(T_6965, GEN_11)
    node GEN_12 = pad(T_6736, 64)
    node T_6967 = or(T_6966, GEN_12)
    node GEN_13 = pad(T_6738, 64)
    node T_6968 = or(T_6967, GEN_13)
    node T_6969 = or(T_6968, T_6740)
    node GEN_14 = pad(T_6742, 64)
    node T_6970 = or(T_6969, GEN_14)
    node GEN_15 = pad(T_6744, 64)
    node T_6971 = or(T_6970, GEN_15)
    node GEN_16 = pad(T_6746, 64)
    node T_6972 = or(T_6971, GEN_16)
    node T_7060 = or(T_6972, T_6922)
    node T_7061 = or(T_7060, T_6924)
    node T_7062 = or(T_7061, T_6926)
    node T_7063 = or(T_7062, T_6928)
    node T_7064 = or(T_7063, T_6930)
    node T_7065 = or(T_7064, T_6932)
    node GEN_17 = pad(T_6934, 64)
    node T_7066 = or(T_7065, GEN_17)
    node T_7067 = or(T_7066, T_6936)
    node T_7068 = or(T_7067, T_6938)
    node GEN_363 = pad(T_6940, 64)
    node T_7069 = or(T_7068, GEN_363)
    node GEN_364 = pad(T_6942, 64)
    node T_7070 = or(T_7069, GEN_364)
    node T_7071 = or(T_7070, T_6944)
    node T_7072 = or(T_7071, T_6946)
    wire T_7073 : UInt<64>
    node T_7074 = or(reg_fflags, io_fcsr_flags_bits)
    node GEN_119 = mux(io_fcsr_flags_valid, T_7074, reg_fflags)
    wire T_7127_debug : UInt<1>
    wire T_7127_isa : UInt<32>
    wire T_7127_prv : UInt<2>
    wire T_7127_sd : UInt<1>
    wire T_7127_zero3 : UInt<31>
    wire T_7127_sd_rv32 : UInt<1>
    wire T_7127_zero2 : UInt<2>
    wire T_7127_vm : UInt<5>
    wire T_7127_zero1 : UInt<4>
    wire T_7127_mxr : UInt<1>
    wire T_7127_pum : UInt<1>
    wire T_7127_mprv : UInt<1>
    wire T_7127_xs : UInt<2>
    wire T_7127_fs : UInt<2>
    wire T_7127_mpp : UInt<2>
    wire T_7127_hpp : UInt<2>
    wire T_7127_spp : UInt<1>
    wire T_7127_mpie : UInt<1>
    wire T_7127_hpie : UInt<1>
    wire T_7127_spie : UInt<1>
    wire T_7127_upie : UInt<1>
    wire T_7127_mie : UInt<1>
    wire T_7127_hie : UInt<1>
    wire T_7127_sie : UInt<1>
    wire T_7127_uie : UInt<1>
    wire T_7154 : UInt<99>
    node T_7155 = bits(T_7154, 0, 0)
    node T_7156 = bits(T_7154, 1, 1)
    node T_7157 = bits(T_7154, 2, 2)
    node T_7158 = bits(T_7154, 3, 3)
    node T_7159 = bits(T_7154, 4, 4)
    node T_7160 = bits(T_7154, 5, 5)
    node T_7161 = bits(T_7154, 6, 6)
    node T_7162 = bits(T_7154, 7, 7)
    node T_7163 = bits(T_7154, 8, 8)
    node T_7164 = bits(T_7154, 10, 9)
    node T_7165 = bits(T_7154, 12, 11)
    node T_7166 = bits(T_7154, 14, 13)
    node T_7167 = bits(T_7154, 16, 15)
    node T_7168 = bits(T_7154, 17, 17)
    node T_7169 = bits(T_7154, 18, 18)
    node T_7170 = bits(T_7154, 19, 19)
    node T_7171 = bits(T_7154, 23, 20)
    node T_7172 = bits(T_7154, 28, 24)
    node T_7173 = bits(T_7154, 30, 29)
    node T_7174 = bits(T_7154, 31, 31)
    node T_7175 = bits(T_7154, 62, 32)
    node T_7176 = bits(T_7154, 63, 63)
    node T_7177 = bits(T_7154, 65, 64)
    node T_7178 = bits(T_7154, 97, 66)
    node T_7179 = bits(T_7154, 98, 98)
    node T_7181 = eq(T_7127_vm, UInt<5>("h0"))
    node GEN_120 = mux(T_7181, UInt<5>("h0"), reg_mstatus_vm)
    node T_7184 = eq(T_7127_vm, UInt<5>("h9"))
    node GEN_121 = mux(T_7184, UInt<5>("h9"), GEN_120)
    node T_7187 = neq(T_7127_fs, UInt<2>("h0"))
    node T_7191 = mux(T_7187, UInt<2>("h3"), UInt<2>("h0"))
    node GEN_122 = mux(T_6090, T_7127_mie, GEN_116)
    node GEN_123 = mux(T_6090, T_7127_mpie, GEN_117)
    node GEN_124 = mux(T_6090, T_7127_mprv, reg_mstatus_mprv)
    node GEN_125 = mux(T_6090, T_7127_mpp, GEN_118)
    node GEN_126 = mux(T_6090, T_7127_mxr, reg_mstatus_mxr)
    node GEN_127 = mux(T_6090, T_7127_pum, reg_mstatus_pum)
    node GEN_128 = mux(T_6090, pad(T_7127_spp, 2), GEN_113)
    node GEN_129 = mux(T_6090, T_7127_spie, GEN_112)
    node GEN_130 = mux(T_6090, T_7127_sie, GEN_111)
    node GEN_131 = mux(T_6090, GEN_121, reg_mstatus_vm)
    node GEN_132 = mux(T_6090, T_7191, reg_mstatus_fs)
    node T_7193 = bits(wdata, 5, 5)
    node T_7194 = not(wdata)
    node T_7196 = eq(T_7193, UInt<1>("h0"))
    node GEN_365 = pad(T_7196, 4)
    node T_7197 = shlw(GEN_365, 3)
    node GEN_366 = pad(T_7197, 64)
    node T_7198 = or(T_7194, GEN_366)
    node T_7199 = not(T_7198)
    node T_7200 = and(T_7199, UInt<64>("h102d"))
    node T_7202 = and(reg_misa, UInt<64>("hfd2"))
    node T_7203 = or(T_7200, T_7202)
    node GEN_133 = mux(T_6088, T_7203, reg_misa)
    wire T_7232_rocc : UInt<1>
    wire T_7232_meip : UInt<1>
    wire T_7232_heip : UInt<1>
    wire T_7232_seip : UInt<1>
    wire T_7232_ueip : UInt<1>
    wire T_7232_mtip : UInt<1>
    wire T_7232_htip : UInt<1>
    wire T_7232_stip : UInt<1>
    wire T_7232_utip : UInt<1>
    wire T_7232_msip : UInt<1>
    wire T_7232_hsip : UInt<1>
    wire T_7232_ssip : UInt<1>
    wire T_7232_usip : UInt<1>
    node T_7246 = bits(wdata, 0, 0)
    node T_7247 = bits(wdata, 1, 1)
    node T_7248 = bits(wdata, 2, 2)
    node T_7249 = bits(wdata, 3, 3)
    node T_7250 = bits(wdata, 4, 4)
    node T_7252 = bits(wdata, 6, 6)
    node T_7253 = bits(wdata, 7, 7)
    node T_7254 = bits(wdata, 8, 8)
    node T_7255 = bits(wdata, 9, 9)
    node T_7256 = bits(wdata, 10, 10)
    node T_7257 = bits(wdata, 11, 11)
    node T_7258 = bits(wdata, 12, 12)
    node GEN_134 = mux(T_6094, T_7232_ssip, reg_mip_ssip)
    node GEN_135 = mux(T_6094, T_7232_stip, reg_mip_stip)
    node GEN_367 = pad(supported_interrupts, 64)
    node T_7259 = and(wdata, GEN_367)
    node GEN_136 = mux(T_6096, T_7259, reg_mie)
    node GEN_368 = pad(T_6638, 64)
    node T_7266 = or(T_7194, GEN_368)
    node T_7267 = not(T_7266)
    node GEN_137 = mux(T_6104, T_7267, pad(GEN_91, 64))
    node GEN_138 = mux(T_6102, wdata, reg_mscratch)
    node T_7268 = shr(wdata, 2)
    node GEN_369 = pad(T_7268, 64)
    node T_7269 = shlw(GEN_369, 2)
    node GEN_139 = mux(T_6092, T_7269, pad(reg_mtvec, 64))
    node T_7271 = and(wdata, UInt<64>("h800000000000001f"))
    node GEN_140 = mux(T_6108, T_7271, GEN_92)
    node T_7272 = bits(wdata, 39, 0)
    node GEN_141 = mux(T_6106, T_7272, GEN_93)
    node T_7273 = shr(wdata, 6)
    node GEN_142 = mux(T_6084, wdata, pad(T_5612, 64))
    node GEN_143 = mux(T_6084, T_7273, GEN_39)
    node GEN_144 = mux(T_6086, wdata, pad(T_5601, 64))
    node GEN_145 = mux(T_6086, T_7273, GEN_38)
    node GEN_146 = mux(T_6118, wdata, pad(GEN_119, 64))
    node GEN_147 = mux(T_6120, wdata, pad(reg_frm, 64))
    node T_7275 = shr(wdata, 5)
    node GEN_148 = mux(T_6122, wdata, GEN_146)
    node GEN_149 = mux(T_6122, pad(T_7275, 64), GEN_147)
    wire T_7312_xdebugver : UInt<2>
    wire T_7312_ndreset : UInt<1>
    wire T_7312_fullreset : UInt<1>
    wire T_7312_zero3 : UInt<12>
    wire T_7312_ebreakm : UInt<1>
    wire T_7312_ebreakh : UInt<1>
    wire T_7312_ebreaks : UInt<1>
    wire T_7312_ebreaku : UInt<1>
    wire T_7312_zero2 : UInt<1>
    wire T_7312_stopcycle : UInt<1>
    wire T_7312_stoptime : UInt<1>
    wire T_7312_cause : UInt<3>
    wire T_7312_debugint : UInt<1>
    wire T_7312_zero1 : UInt<1>
    wire T_7312_halt : UInt<1>
    wire T_7312_step : UInt<1>
    wire T_7312_prv : UInt<2>
    node T_7330 = bits(wdata, 1, 0)
    node T_7335 = bits(wdata, 8, 6)
    node T_7340 = bits(wdata, 13, 13)
    node T_7341 = bits(wdata, 14, 14)
    node T_7342 = bits(wdata, 15, 15)
    node T_7343 = bits(wdata, 27, 16)
    node T_7344 = bits(wdata, 28, 28)
    node T_7345 = bits(wdata, 29, 29)
    node T_7346 = bits(wdata, 31, 30)
    node GEN_150 = mux(T_6112, T_7312_halt, reg_dcsr_halt)
    node GEN_151 = mux(T_6112, T_7312_step, reg_dcsr_step)
    node GEN_152 = mux(T_6112, T_7312_ebreakm, reg_dcsr_ebreakm)
    node GEN_153 = mux(T_6112, T_7312_ebreaks, reg_dcsr_ebreaks)
    node GEN_154 = mux(T_6112, T_7312_ebreaku, reg_dcsr_ebreaku)
    node GEN_155 = mux(T_6112, T_7312_prv, GEN_83)
    node T_7349 = or(T_7194, UInt<64>("h1"))
    node T_7350 = not(T_7349)
    node GEN_156 = mux(T_6114, T_7350, pad(GEN_81, 64))
    node GEN_157 = mux(T_6116, wdata, reg_dscratch)
    wire T_7403_debug : UInt<1>
    wire T_7403_isa : UInt<32>
    wire T_7403_prv : UInt<2>
    wire T_7403_sd : UInt<1>
    wire T_7403_zero3 : UInt<31>
    wire T_7403_sd_rv32 : UInt<1>
    wire T_7403_zero2 : UInt<2>
    wire T_7403_vm : UInt<5>
    wire T_7403_zero1 : UInt<4>
    wire T_7403_mxr : UInt<1>
    wire T_7403_pum : UInt<1>
    wire T_7403_mprv : UInt<1>
    wire T_7403_xs : UInt<2>
    wire T_7403_fs : UInt<2>
    wire T_7403_mpp : UInt<2>
    wire T_7403_hpp : UInt<2>
    wire T_7403_spp : UInt<1>
    wire T_7403_mpie : UInt<1>
    wire T_7403_hpie : UInt<1>
    wire T_7403_spie : UInt<1>
    wire T_7403_upie : UInt<1>
    wire T_7403_mie : UInt<1>
    wire T_7403_hie : UInt<1>
    wire T_7403_sie : UInt<1>
    wire T_7403_uie : UInt<1>
    wire T_7430 : UInt<99>
    node T_7431 = bits(T_7430, 0, 0)
    node T_7432 = bits(T_7430, 1, 1)
    node T_7433 = bits(T_7430, 2, 2)
    node T_7434 = bits(T_7430, 3, 3)
    node T_7435 = bits(T_7430, 4, 4)
    node T_7436 = bits(T_7430, 5, 5)
    node T_7437 = bits(T_7430, 6, 6)
    node T_7438 = bits(T_7430, 7, 7)
    node T_7439 = bits(T_7430, 8, 8)
    node T_7440 = bits(T_7430, 10, 9)
    node T_7441 = bits(T_7430, 12, 11)
    node T_7442 = bits(T_7430, 14, 13)
    node T_7443 = bits(T_7430, 16, 15)
    node T_7444 = bits(T_7430, 17, 17)
    node T_7445 = bits(T_7430, 18, 18)
    node T_7446 = bits(T_7430, 19, 19)
    node T_7447 = bits(T_7430, 23, 20)
    node T_7448 = bits(T_7430, 28, 24)
    node T_7449 = bits(T_7430, 30, 29)
    node T_7450 = bits(T_7430, 31, 31)
    node T_7451 = bits(T_7430, 62, 32)
    node T_7452 = bits(T_7430, 63, 63)
    node T_7453 = bits(T_7430, 65, 64)
    node T_7454 = bits(T_7430, 97, 66)
    node T_7455 = bits(T_7430, 98, 98)
    node T_7457 = neq(T_7403_fs, UInt<2>("h0"))
    node T_7461 = mux(T_7457, UInt<2>("h3"), UInt<2>("h0"))
    node GEN_158 = mux(T_6298, T_7403_sie, GEN_130)
    node GEN_159 = mux(T_6298, T_7403_spie, GEN_129)
    node GEN_160 = mux(T_6298, pad(T_7403_spp, 2), GEN_128)
    node GEN_161 = mux(T_6298, T_7403_pum, GEN_127)
    node GEN_162 = mux(T_6298, T_7461, GEN_132)
    wire T_7490_rocc : UInt<1>
    wire T_7490_meip : UInt<1>
    wire T_7490_heip : UInt<1>
    wire T_7490_seip : UInt<1>
    wire T_7490_ueip : UInt<1>
    wire T_7490_mtip : UInt<1>
    wire T_7490_htip : UInt<1>
    wire T_7490_stip : UInt<1>
    wire T_7490_utip : UInt<1>
    wire T_7490_msip : UInt<1>
    wire T_7490_hsip : UInt<1>
    wire T_7490_ssip : UInt<1>
    wire T_7490_usip : UInt<1>
    node GEN_163 = mux(T_6300, T_7490_ssip, GEN_134)
    node T_7518 = and(reg_mie, T_5654)
    node T_7519 = and(wdata, reg_mideleg)
    node T_7520 = or(T_7518, T_7519)
    node GEN_164 = mux(T_6302, T_7520, GEN_136)
    node GEN_165 = mux(T_6304, wdata, reg_sscratch)
    node T_7521 = bits(wdata, 19, 0)
    node GEN_166 = mux(T_6310, pad(T_7521, 38), reg_sptbr_ppn)
    node GEN_167 = mux(T_6312, T_7267, pad(GEN_84, 64))
    node GEN_168 = mux(T_6314, T_7269, pad(reg_stvec, 64))
    node GEN_169 = mux(T_6306, T_7271, GEN_85)
    node GEN_170 = mux(T_6308, T_7272, GEN_86)
    node GEN_372 = pad(delegable_interrupts, 64)
    node T_7535 = and(wdata, GEN_372)
    node GEN_171 = mux(T_6098, T_7535, reg_mideleg)
    node T_7536 = and(wdata, UInt<64>("h1ab"))
    node GEN_172 = mux(T_6100, T_7536, reg_medeleg)
    node T_7538 = and(wdata, UInt<64>("h7"))
    node GEN_173 = mux(T_6316, T_7538, pad(reg_mscounteren, 64))
    node GEN_174 = mux(T_6318, T_7538, pad(reg_mucounteren, 64))
    wire GEN_17_control_ttype : UInt<4>
    wire GEN_17_control_dmode : UInt<1>
    wire GEN_17_control_maskmax : UInt<6>
    wire GEN_17_control_reserved : UInt<40>
    wire GEN_17_control_action : UInt<1>
    wire GEN_17_control_chain : UInt<1>
    wire GEN_17_control_zero : UInt<2>
    wire GEN_17_control_tmatch : UInt<2>
    wire GEN_17_control_m : UInt<1>
    wire GEN_17_control_h : UInt<1>
    wire GEN_17_control_s : UInt<1>
    wire GEN_17_control_u : UInt<1>
    wire GEN_17_control_x : UInt<1>
    wire GEN_17_control_w : UInt<1>
    wire GEN_17_control_r : UInt<1>
    wire GEN_17_address : UInt<39>
    node T_7559 = eq(GEN_17_control_dmode, UInt<1>("h0"))
    node T_7560 = or(T_7559, reg_debug)
    wire T_7593_ttype : UInt<4>
    wire T_7593_dmode : UInt<1>
    wire T_7593_maskmax : UInt<6>
    wire T_7593_reserved : UInt<40>
    wire T_7593_action : UInt<1>
    wire T_7593_chain : UInt<1>
    wire T_7593_zero : UInt<2>
    wire T_7593_tmatch : UInt<2>
    wire T_7593_m : UInt<1>
    wire T_7593_h : UInt<1>
    wire T_7593_s : UInt<1>
    wire T_7593_u : UInt<1>
    wire T_7593_x : UInt<1>
    wire T_7593_w : UInt<1>
    wire T_7593_r : UInt<1>
    node T_7616 = bits(wdata, 8, 7)
    node T_7617 = bits(wdata, 10, 9)
    node T_7620 = bits(wdata, 52, 13)
    node T_7621 = bits(wdata, 58, 53)
    node T_7622 = bits(wdata, 59, 59)
    node T_7623 = bits(wdata, 63, 60)
    node T_7624 = and(T_7593_dmode, reg_debug)
    wire GEN_18 : UInt<4>
    wire GEN_19 : UInt<1>
    node GEN_178 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_19, reg_bp_0_control_dmode)
    wire GEN_20 : UInt<6>
    wire GEN_21 : UInt<40>
    wire GEN_22 : UInt<1>
    node GEN_184 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_22, reg_bp_0_control_action)
    wire GEN_23 : UInt<1>
    wire GEN_24 : UInt<2>
    wire GEN_25 : UInt<2>
    node GEN_190 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_25, reg_bp_0_control_tmatch)
    wire GEN_26 : UInt<1>
    node GEN_192 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_26, reg_bp_0_control_m)
    wire GEN_27 : UInt<1>
    wire GEN_28 : UInt<1>
    node GEN_196 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_28, reg_bp_0_control_s)
    wire GEN_29 : UInt<1>
    node GEN_198 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_29, reg_bp_0_control_u)
    wire GEN_30 : UInt<1>
    node GEN_200 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_30, reg_bp_0_control_x)
    wire GEN_31 : UInt<1>
    node GEN_202 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_31, reg_bp_0_control_w)
    wire GEN_32 : UInt<1>
    node GEN_204 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_32, reg_bp_0_control_r)
    wire GEN_33 : UInt<1>
    node GEN_206 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_33, GEN_178)
    node T_7625 = and(T_7624, T_7593_action)
    wire GEN_34 : UInt<1>
    node GEN_208 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_34, GEN_184)
    node GEN_212 = mux(T_6074, GEN_206, reg_bp_0_control_dmode)
    node GEN_218 = mux(T_6074, GEN_208, reg_bp_0_control_action)
    node GEN_224 = mux(T_6074, GEN_190, reg_bp_0_control_tmatch)
    node GEN_226 = mux(T_6074, GEN_192, reg_bp_0_control_m)
    node GEN_230 = mux(T_6074, GEN_196, reg_bp_0_control_s)
    node GEN_232 = mux(T_6074, GEN_198, reg_bp_0_control_u)
    node GEN_234 = mux(T_6074, GEN_200, reg_bp_0_control_x)
    node GEN_236 = mux(T_6074, GEN_202, reg_bp_0_control_w)
    node GEN_238 = mux(T_6074, GEN_204, reg_bp_0_control_r)
    wire GEN_35 : UInt<39>
    node GEN_240 = mux(eq(UInt<1>("h0"), UInt<1>("h0")), GEN_35, reg_bp_0_address)
    node GEN_242 = mux(T_6076, GEN_240, reg_bp_0_address)
    node GEN_246 = mux(T_7560, GEN_212, reg_bp_0_control_dmode)
    node GEN_252 = mux(T_7560, GEN_218, reg_bp_0_control_action)
    node GEN_258 = mux(T_7560, GEN_224, reg_bp_0_control_tmatch)
    node GEN_260 = mux(T_7560, GEN_226, reg_bp_0_control_m)
    node GEN_264 = mux(T_7560, GEN_230, reg_bp_0_control_s)
    node GEN_266 = mux(T_7560, GEN_232, reg_bp_0_control_u)
    node GEN_268 = mux(T_7560, GEN_234, reg_bp_0_control_x)
    node GEN_270 = mux(T_7560, GEN_236, reg_bp_0_control_w)
    node GEN_272 = mux(T_7560, GEN_238, reg_bp_0_control_r)
    node GEN_274 = mux(T_7560, GEN_242, reg_bp_0_address)
    node GEN_276 = mux(wen, GEN_122, GEN_116)
    node GEN_277 = mux(wen, GEN_123, GEN_117)
    node GEN_278 = mux(wen, GEN_124, reg_mstatus_mprv)
    node GEN_279 = mux(wen, GEN_125, GEN_118)
    node GEN_280 = mux(wen, GEN_126, reg_mstatus_mxr)
    node GEN_281 = mux(wen, GEN_161, reg_mstatus_pum)
    node GEN_282 = mux(wen, GEN_160, GEN_113)
    node GEN_283 = mux(wen, GEN_159, GEN_112)
    node GEN_284 = mux(wen, GEN_158, GEN_111)
    node GEN_285 = mux(wen, GEN_131, reg_mstatus_vm)
    node GEN_286 = mux(wen, GEN_162, reg_mstatus_fs)
    node GEN_287 = mux(wen, GEN_133, reg_misa)
    node GEN_288 = mux(wen, GEN_163, reg_mip_ssip)
    node GEN_289 = mux(wen, GEN_135, reg_mip_stip)
    node GEN_290 = mux(wen, GEN_164, reg_mie)
    node GEN_291 = mux(wen, GEN_137, pad(GEN_91, 64))
    node GEN_292 = mux(wen, GEN_138, reg_mscratch)
    node GEN_293 = mux(wen, GEN_139, pad(reg_mtvec, 64))
    node GEN_294 = mux(wen, GEN_140, GEN_92)
    node GEN_295 = mux(wen, GEN_141, GEN_93)
    node GEN_296 = mux(wen, GEN_142, pad(T_5612, 64))
    node GEN_297 = mux(wen, GEN_143, GEN_39)
    node GEN_298 = mux(wen, GEN_144, pad(T_5601, 64))
    node GEN_299 = mux(wen, GEN_145, GEN_38)
    node GEN_300 = mux(wen, GEN_148, pad(GEN_119, 64))
    node GEN_301 = mux(wen, GEN_149, pad(reg_frm, 64))
    node GEN_302 = mux(wen, GEN_150, reg_dcsr_halt)
    node GEN_303 = mux(wen, GEN_151, reg_dcsr_step)
    node GEN_304 = mux(wen, GEN_152, reg_dcsr_ebreakm)
    node GEN_305 = mux(wen, GEN_153, reg_dcsr_ebreaks)
    node GEN_306 = mux(wen, GEN_154, reg_dcsr_ebreaku)
    node GEN_307 = mux(wen, GEN_155, GEN_83)
    node GEN_308 = mux(wen, GEN_156, pad(GEN_81, 64))
    node GEN_309 = mux(wen, GEN_157, reg_dscratch)
    node GEN_310 = mux(wen, GEN_165, reg_sscratch)
    node GEN_311 = mux(wen, GEN_166, reg_sptbr_ppn)
    node GEN_312 = mux(wen, GEN_167, pad(GEN_84, 64))
    node GEN_313 = mux(wen, GEN_168, pad(reg_stvec, 64))
    node GEN_314 = mux(wen, GEN_169, GEN_85)
    node GEN_315 = mux(wen, GEN_170, GEN_86)
    node GEN_316 = mux(wen, GEN_171, reg_mideleg)
    node GEN_317 = mux(wen, GEN_172, reg_medeleg)
    node GEN_318 = mux(wen, GEN_173, pad(reg_mscounteren, 64))
    node GEN_319 = mux(wen, GEN_174, pad(reg_mucounteren, 64))
    node GEN_323 = mux(wen, GEN_246, reg_bp_0_control_dmode)
    node GEN_329 = mux(wen, GEN_252, reg_bp_0_control_action)
    node GEN_335 = mux(wen, GEN_258, reg_bp_0_control_tmatch)
    node GEN_337 = mux(wen, GEN_260, reg_bp_0_control_m)
    node GEN_341 = mux(wen, GEN_264, reg_bp_0_control_s)
    node GEN_343 = mux(wen, GEN_266, reg_bp_0_control_u)
    node GEN_345 = mux(wen, GEN_268, reg_bp_0_control_x)
    node GEN_347 = mux(wen, GEN_270, reg_bp_0_control_w)
    node GEN_349 = mux(wen, GEN_272, reg_bp_0_control_r)
    node GEN_351 = mux(wen, GEN_274, reg_bp_0_address)
    node GEN_353 = mux(reset, UInt<1>("h0"), GEN_329)
    node GEN_354 = mux(reset, UInt<1>("h0"), GEN_323)
    node GEN_355 = mux(reset, UInt<1>("h0"), GEN_349)
    node GEN_356 = mux(reset, UInt<1>("h0"), GEN_347)
    node GEN_357 = mux(reset, UInt<1>("h0"), GEN_345)
    wire T_7686_control_ttype : UInt<4>
    wire T_7686_control_dmode : UInt<1>
    wire T_7686_control_maskmax : UInt<6>
    wire T_7686_control_reserved : UInt<40>
    wire T_7686_control_action : UInt<1>
    wire T_7686_control_chain : UInt<1>
    wire T_7686_control_zero : UInt<2>
    wire T_7686_control_tmatch : UInt<2>
    wire T_7686_control_m : UInt<1>
    wire T_7686_control_h : UInt<1>
    wire T_7686_control_s : UInt<1>
    wire T_7686_control_u : UInt<1>
    wire T_7686_control_x : UInt<1>
    wire T_7686_control_w : UInt<1>
    wire T_7686_control_r : UInt<1>
    wire T_7686_address : UInt<39>
    wire T_7705 : UInt<103>
    io_rw_rdata <= T_7073
    io_csr_stall <= reg_wfi
    io_csr_xcpt <= T_6528
    io_eret <= insn_ret
    io_singleStep <= T_6588
    io_status_debug <= reg_debug
    io_status_isa <= bits(reg_misa, 31, 0)
    io_status_prv <= reg_mstatus_prv
    io_status_sd <= T_6595
    io_status_zero3 <= reg_mstatus_zero3
    io_status_sd_rv32 <= reg_mstatus_sd_rv32
    io_status_zero2 <= reg_mstatus_zero2
    io_status_vm <= reg_mstatus_vm
    io_status_zero1 <= reg_mstatus_zero1
    io_status_mxr <= reg_mstatus_mxr
    io_status_pum <= reg_mstatus_pum
    io_status_mprv <= reg_mstatus_mprv
    io_status_xs <= reg_mstatus_xs
    io_status_fs <= reg_mstatus_fs
    io_status_mpp <= reg_mstatus_mpp
    io_status_hpp <= reg_mstatus_hpp
    io_status_spp <= reg_mstatus_spp
    io_status_mpie <= reg_mstatus_mpie
    io_status_hpie <= reg_mstatus_hpie
    io_status_spie <= reg_mstatus_spie
    io_status_upie <= reg_mstatus_upie
    io_status_mie <= reg_mstatus_mie
    io_status_hie <= reg_mstatus_hie
    io_status_sie <= reg_mstatus_sie
    io_status_uie <= reg_mstatus_uie
    io_ptbr_asid <= UInt<7>("h0")
    io_ptbr_ppn <= reg_sptbr_ppn
    io_evec <= T_6585
    io_fatc <= insn_sfence_vm
    io_time <= T_5619
    io_fcsr_rm <= reg_frm
    io_rocc_cmd_valid <= UInt<1>("h0")
    io_rocc_cmd_bits_inst_funct <= UInt<7>("h73")
    io_rocc_cmd_bits_inst_rs2 <= UInt<5>("h5")
    io_rocc_cmd_bits_inst_rs1 <= UInt<5>("h1e")
    io_rocc_cmd_bits_inst_xd <= UInt<1>("h1")
    io_rocc_cmd_bits_inst_xs1 <= UInt<1>("h1")
    io_rocc_cmd_bits_inst_xs2 <= UInt<1>("h1")
    io_rocc_cmd_bits_inst_rd <= UInt<5>("h1a")
    io_rocc_cmd_bits_inst_opcode <= UInt<7>("hb")
    io_rocc_cmd_bits_rs1 <= UInt<64>("hcfba1aaf1241e87d")
    io_rocc_cmd_bits_rs2 <= UInt<64>("he018ca21a491b282")
    io_rocc_cmd_bits_status_debug <= UInt<1>("h1")
    io_rocc_cmd_bits_status_isa <= UInt<32>("h607dfcfd")
    io_rocc_cmd_bits_status_prv <= UInt<2>("h3")
    io_rocc_cmd_bits_status_sd <= UInt<1>("h1")
    io_rocc_cmd_bits_status_zero3 <= UInt<31>("h44ce6b02")
    io_rocc_cmd_bits_status_sd_rv32 <= UInt<1>("h1")
    io_rocc_cmd_bits_status_zero2 <= UInt<2>("h0")
    io_rocc_cmd_bits_status_vm <= UInt<5>("h4")
    io_rocc_cmd_bits_status_zero1 <= UInt<4>("h8")
    io_rocc_cmd_bits_status_mxr <= UInt<1>("h0")
    io_rocc_cmd_bits_status_pum <= UInt<1>("h0")
    io_rocc_cmd_bits_status_mprv <= UInt<1>("h1")
    io_rocc_cmd_bits_status_xs <= UInt<2>("h2")
    io_rocc_cmd_bits_status_fs <= UInt<2>("h0")
    io_rocc_cmd_bits_status_mpp <= UInt<2>("h1")
    io_rocc_cmd_bits_status_hpp <= UInt<2>("h0")
    io_rocc_cmd_bits_status_spp <= UInt<1>("h0")
    io_rocc_cmd_bits_status_mpie <= UInt<1>("h1")
    io_rocc_cmd_bits_status_hpie <= UInt<1>("h1")
    io_rocc_cmd_bits_status_spie <= UInt<1>("h1")
    io_rocc_cmd_bits_status_upie <= UInt<1>("h1")
    io_rocc_cmd_bits_status_mie <= UInt<1>("h0")
    io_rocc_cmd_bits_status_hie <= UInt<1>("h1")
    io_rocc_cmd_bits_status_sie <= UInt<1>("h1")
    io_rocc_cmd_bits_status_uie <= UInt<1>("h1")
    io_rocc_resp_ready <= UInt<1>("h0")
    io_rocc_mem_req_ready <= UInt<1>("h0")
    io_rocc_mem_s2_nack <= UInt<1>("h1")
    io_rocc_mem_resp_valid <= UInt<1>("h1")
    io_rocc_mem_resp_bits_addr <= UInt<40>("hc597ead07b")
    io_rocc_mem_resp_bits_tag <= UInt<7>("h4a")
    io_rocc_mem_resp_bits_cmd <= UInt<5>("ha")
    io_rocc_mem_resp_bits_typ <= UInt<3>("h4")
    io_rocc_mem_resp_bits_data <= UInt<64>("hffd432ef61aaf86b")
    io_rocc_mem_resp_bits_replay <= UInt<1>("h0")
    io_rocc_mem_resp_bits_has_data <= UInt<1>("h0")
    io_rocc_mem_resp_bits_data_word_bypass <= UInt<64>("he873eeb0affc9398")
    io_rocc_mem_resp_bits_store_data <= UInt<64>("hbcf94cc4082e8d22")
    io_rocc_mem_replay_next <= UInt<1>("h1")
    io_rocc_mem_xcpt_ma_ld <= UInt<1>("h0")
    io_rocc_mem_xcpt_ma_st <= UInt<1>("h1")
    io_rocc_mem_xcpt_pf_ld <= UInt<1>("h1")
    io_rocc_mem_xcpt_pf_st <= UInt<1>("h1")
    io_rocc_mem_ordered <= UInt<1>("h1")
    io_rocc_autl_acquire_ready <= UInt<1>("h0")
    io_rocc_autl_grant_valid <= UInt<1>("h1")
    io_rocc_autl_grant_bits_addr_beat <= UInt<3>("h6")
    io_rocc_autl_grant_bits_client_xact_id <= UInt<1>("h0")
    io_rocc_autl_grant_bits_manager_xact_id <= UInt<4>("h9")
    io_rocc_autl_grant_bits_is_builtin_type <= UInt<1>("h0")
    io_rocc_autl_grant_bits_g_type <= UInt<4>("h0")
    io_rocc_autl_grant_bits_data <= UInt<64>("h557abc18dee37a51")
    io_rocc_fpu_req_ready <= UInt<1>("h0")
    io_rocc_fpu_resp_valid <= UInt<1>("h1")
    io_rocc_fpu_resp_bits_data <= UInt<65>("heb83b18f5d558357")
    io_rocc_fpu_resp_bits_exc <= UInt<5>("h13")
    io_rocc_exception <= UInt<1>("h0")
    io_interrupt <= GEN_40
    io_interrupt_cause <= GEN_41
    io_bp_0_control_ttype <= UInt<4>("h2")
    io_bp_0_control_dmode <= reg_bp_0_control_dmode
    io_bp_0_control_maskmax <= UInt<6>("h4")
    io_bp_0_control_reserved <= UInt<40>("h0")
    io_bp_0_control_action <= reg_bp_0_control_action
    io_bp_0_control_chain <= UInt<1>("h0")
    io_bp_0_control_zero <= UInt<2>("h0")
    io_bp_0_control_tmatch <= reg_bp_0_control_tmatch
    io_bp_0_control_m <= reg_bp_0_control_m
    io_bp_0_control_h <= UInt<1>("h0")
    io_bp_0_control_s <= reg_bp_0_control_s
    io_bp_0_control_u <= reg_bp_0_control_u
    io_bp_0_control_x <= reg_bp_0_control_x
    io_bp_0_control_w <= reg_bp_0_control_w
    io_bp_0_control_r <= reg_bp_0_control_r
    io_bp_0_address <= reg_bp_0_address
    reg_mstatus_debug <= reg_mstatus_debug
    reg_mstatus_isa <= reg_mstatus_isa
    reg_mstatus_prv <= T_5116
    reg_mstatus_sd <= reg_mstatus_sd
    reg_mstatus_zero3 <= reg_mstatus_zero3
    reg_mstatus_sd_rv32 <= reg_mstatus_sd_rv32
    reg_mstatus_zero2 <= reg_mstatus_zero2
    reg_mstatus_vm <= GEN_285
    reg_mstatus_zero1 <= reg_mstatus_zero1
    reg_mstatus_mxr <= GEN_280
    reg_mstatus_pum <= GEN_281
    reg_mstatus_mprv <= GEN_278
    reg_mstatus_xs <= reg_mstatus_xs
    reg_mstatus_fs <= GEN_286
    reg_mstatus_mpp <= GEN_279
    reg_mstatus_hpp <= reg_mstatus_hpp
    reg_mstatus_spp <= bits(GEN_282, 0, 0)
    reg_mstatus_mpie <= GEN_277
    reg_mstatus_hpie <= reg_mstatus_hpie
    reg_mstatus_spie <= GEN_283
    reg_mstatus_upie <= reg_mstatus_upie
    reg_mstatus_mie <= GEN_276
    reg_mstatus_hie <= reg_mstatus_hie
    reg_mstatus_sie <= GEN_284
    reg_mstatus_uie <= reg_mstatus_uie
    new_prv <= GEN_114
    reg_dcsr_xdebugver <= reg_dcsr_xdebugver
    reg_dcsr_ndreset <= reg_dcsr_ndreset
    reg_dcsr_fullreset <= reg_dcsr_fullreset
    reg_dcsr_zero3 <= reg_dcsr_zero3
    reg_dcsr_ebreakm <= GEN_304
    reg_dcsr_ebreakh <= reg_dcsr_ebreakh
    reg_dcsr_ebreaks <= GEN_305
    reg_dcsr_ebreaku <= GEN_306
    reg_dcsr_zero2 <= reg_dcsr_zero2
    reg_dcsr_stopcycle <= reg_dcsr_stopcycle
    reg_dcsr_stoptime <= reg_dcsr_stoptime
    reg_dcsr_cause <= GEN_82
    reg_dcsr_debugint <= io_prci_interrupts_debug
    reg_dcsr_zero1 <= reg_dcsr_zero1
    reg_dcsr_halt <= GEN_302
    reg_dcsr_step <= GEN_303
    reg_dcsr_prv <= GEN_307
    reg_debug <= GEN_115
    reg_dpc <= bits(GEN_308, 39, 0)
    reg_dscratch <= GEN_309
    reg_singleStepped <= GEN_37
    reg_bp_0_control_dmode <= GEN_354
    reg_bp_0_control_action <= GEN_353
    reg_bp_0_control_tmatch <= GEN_335
    reg_bp_0_control_m <= GEN_337
    reg_bp_0_control_s <= GEN_341
    reg_bp_0_control_u <= GEN_343
    reg_bp_0_control_x <= GEN_357
    reg_bp_0_control_w <= GEN_356
    reg_bp_0_control_r <= GEN_355
    reg_bp_0_address <= GEN_351
    reg_mie <= GEN_290
    reg_mideleg <= GEN_316
    reg_medeleg <= GEN_317
    reg_mip_rocc <= reg_mip_rocc
    reg_mip_meip <= io_prci_interrupts_meip
    reg_mip_heip <= reg_mip_heip
    reg_mip_seip <= io_prci_interrupts_seip
    reg_mip_ueip <= reg_mip_ueip
    reg_mip_mtip <= io_prci_interrupts_mtip
    reg_mip_htip <= reg_mip_htip
    reg_mip_stip <= GEN_289
    reg_mip_utip <= reg_mip_utip
    reg_mip_msip <= io_prci_interrupts_msip
    reg_mip_hsip <= reg_mip_hsip
    reg_mip_ssip <= GEN_288
    reg_mip_usip <= reg_mip_usip
    reg_mepc <= bits(GEN_291, 39, 0)
    reg_mcause <= GEN_294
    reg_mbadaddr <= GEN_295
    reg_mscratch <= GEN_292
    reg_mtvec <= bits(GEN_293, 31, 0)
    reg_mucounteren <= bits(GEN_319, 31, 0)
    reg_mscounteren <= bits(GEN_318, 31, 0)
    reg_sepc <= bits(GEN_312, 39, 0)
    reg_scause <= GEN_314
    reg_sbadaddr <= GEN_315
    reg_sscratch <= GEN_310
    reg_stvec <= bits(GEN_313, 38, 0)
    reg_sptbr_ppn <= GEN_311
    reg_wfi <= GEN_59
    reg_fflags <= bits(GEN_300, 4, 0)
    reg_frm <= bits(GEN_301, 2, 0)
    T_5600 <= bits(GEN_298, 5, 0)
    T_5603 <= GEN_299
    T_5611 <= bits(GEN_296, 5, 0)
    T_5614 <= GEN_297
    mip_rocc <= io_rocc_interrupt
    mip_meip <= reg_mip_meip
    mip_heip <= reg_mip_heip
    mip_seip <= reg_mip_seip
    mip_ueip <= reg_mip_ueip
    mip_mtip <= reg_mip_mtip
    mip_htip <= reg_mip_htip
    mip_stip <= reg_mip_stip
    mip_utip <= reg_mip_utip
    mip_msip <= reg_mip_msip
    mip_hsip <= reg_mip_hsip
    mip_ssip <= reg_mip_ssip
    mip_usip <= reg_mip_usip
    reg_misa <= GEN_287
    GEN_0_control_ttype <= GEN_42
    GEN_0_control_dmode <= GEN_43
    GEN_0_control_maskmax <= GEN_44
    GEN_0_control_reserved <= GEN_45
    GEN_0_control_action <= GEN_46
    GEN_0_control_chain <= GEN_47
    GEN_0_control_zero <= GEN_48
    GEN_0_control_tmatch <= GEN_49
    GEN_0_control_m <= GEN_50
    GEN_0_control_h <= GEN_51
    GEN_0_control_s <= GEN_52
    GEN_0_control_u <= GEN_53
    GEN_0_control_x <= GEN_54
    GEN_0_control_w <= GEN_55
    GEN_0_control_r <= GEN_56
    GEN_0_address <= GEN_57
    GEN_1_control_ttype <= GEN_42
    GEN_1_control_dmode <= GEN_43
    GEN_1_control_maskmax <= GEN_44
    GEN_1_control_reserved <= GEN_45
    GEN_1_control_action <= GEN_46
    GEN_1_control_chain <= GEN_47
    GEN_1_control_zero <= GEN_48
    GEN_1_control_tmatch <= GEN_49
    GEN_1_control_m <= GEN_50
    GEN_1_control_h <= GEN_51
    GEN_1_control_s <= GEN_52
    GEN_1_control_u <= GEN_53
    GEN_1_control_x <= GEN_54
    GEN_1_control_w <= GEN_55
    GEN_1_control_r <= GEN_56
    GEN_1_address <= GEN_57
    GEN_2_control_ttype <= GEN_42
    GEN_2_control_dmode <= GEN_43
    GEN_2_control_maskmax <= GEN_44
    GEN_2_control_reserved <= GEN_45
    GEN_2_control_action <= GEN_46
    GEN_2_control_chain <= GEN_47
    GEN_2_control_zero <= GEN_48
    GEN_2_control_tmatch <= GEN_49
    GEN_2_control_m <= GEN_50
    GEN_2_control_h <= GEN_51
    GEN_2_control_s <= GEN_52
    GEN_2_control_u <= GEN_53
    GEN_2_control_x <= GEN_54
    GEN_2_control_w <= GEN_55
    GEN_2_control_r <= GEN_56
    GEN_2_address <= GEN_57
    GEN_3_control_ttype <= GEN_42
    GEN_3_control_dmode <= GEN_43
    GEN_3_control_maskmax <= GEN_44
    GEN_3_control_reserved <= GEN_45
    GEN_3_control_action <= GEN_46
    GEN_3_control_chain <= GEN_47
    GEN_3_control_zero <= GEN_48
    GEN_3_control_tmatch <= GEN_49
    GEN_3_control_m <= GEN_50
    GEN_3_control_h <= GEN_51
    GEN_3_control_s <= GEN_52
    GEN_3_control_u <= GEN_53
    GEN_3_control_x <= GEN_54
    GEN_3_control_w <= GEN_55
    GEN_3_control_r <= GEN_56
    GEN_3_address <= GEN_57
    GEN_4_control_ttype <= GEN_42
    GEN_4_control_dmode <= GEN_43
    GEN_4_control_maskmax <= GEN_44
    GEN_4_control_reserved <= GEN_45
    GEN_4_control_action <= GEN_46
    GEN_4_control_chain <= GEN_47
    GEN_4_control_zero <= GEN_48
    GEN_4_control_tmatch <= GEN_49
    GEN_4_control_m <= GEN_50
    GEN_4_control_h <= GEN_51
    GEN_4_control_s <= GEN_52
    GEN_4_control_u <= GEN_53
    GEN_4_control_x <= GEN_54
    GEN_4_control_w <= GEN_55
    GEN_4_control_r <= GEN_56
    GEN_4_address <= GEN_57
    GEN_5_control_ttype <= GEN_42
    GEN_5_control_dmode <= GEN_43
    GEN_5_control_maskmax <= GEN_44
    GEN_5_control_reserved <= GEN_45
    GEN_5_control_action <= GEN_46
    GEN_5_control_chain <= GEN_47
    GEN_5_control_zero <= GEN_48
    GEN_5_control_tmatch <= GEN_49
    GEN_5_control_m <= GEN_50
    GEN_5_control_h <= GEN_51
    GEN_5_control_s <= GEN_52
    GEN_5_control_u <= GEN_53
    GEN_5_control_x <= GEN_54
    GEN_5_control_w <= GEN_55
    GEN_5_control_r <= GEN_56
    GEN_5_address <= GEN_57
    GEN_6_control_ttype <= GEN_42
    GEN_6_control_dmode <= GEN_43
    GEN_6_control_maskmax <= GEN_44
    GEN_6_control_reserved <= GEN_45
    GEN_6_control_action <= GEN_46
    GEN_6_control_chain <= GEN_47
    GEN_6_control_zero <= GEN_48
    GEN_6_control_tmatch <= GEN_49
    GEN_6_control_m <= GEN_50
    GEN_6_control_h <= GEN_51
    GEN_6_control_s <= GEN_52
    GEN_6_control_u <= GEN_53
    GEN_6_control_x <= GEN_54
    GEN_6_control_w <= GEN_55
    GEN_6_control_r <= GEN_56
    GEN_6_address <= GEN_57
    GEN_7_control_ttype <= GEN_42
    GEN_7_control_dmode <= GEN_43
    GEN_7_control_maskmax <= GEN_44
    GEN_7_control_reserved <= GEN_45
    GEN_7_control_action <= GEN_46
    GEN_7_control_chain <= GEN_47
    GEN_7_control_zero <= GEN_48
    GEN_7_control_tmatch <= GEN_49
    GEN_7_control_m <= GEN_50
    GEN_7_control_h <= GEN_51
    GEN_7_control_s <= GEN_52
    GEN_7_control_u <= GEN_53
    GEN_7_control_x <= GEN_54
    GEN_7_control_w <= GEN_55
    GEN_7_control_r <= GEN_56
    GEN_7_address <= GEN_57
    GEN_8_control_ttype <= GEN_42
    GEN_8_control_dmode <= GEN_43
    GEN_8_control_maskmax <= GEN_44
    GEN_8_control_reserved <= GEN_45
    GEN_8_control_action <= GEN_46
    GEN_8_control_chain <= GEN_47
    GEN_8_control_zero <= GEN_48
    GEN_8_control_tmatch <= GEN_49
    GEN_8_control_m <= GEN_50
    GEN_8_control_h <= GEN_51
    GEN_8_control_s <= GEN_52
    GEN_8_control_u <= GEN_53
    GEN_8_control_x <= GEN_54
    GEN_8_control_w <= GEN_55
    GEN_8_control_r <= GEN_56
    GEN_8_address <= GEN_57
    GEN_9_control_ttype <= GEN_42
    GEN_9_control_dmode <= GEN_43
    GEN_9_control_maskmax <= GEN_44
    GEN_9_control_reserved <= GEN_45
    GEN_9_control_action <= GEN_46
    GEN_9_control_chain <= GEN_47
    GEN_9_control_zero <= GEN_48
    GEN_9_control_tmatch <= GEN_49
    GEN_9_control_m <= GEN_50
    GEN_9_control_h <= GEN_51
    GEN_9_control_s <= GEN_52
    GEN_9_control_u <= GEN_53
    GEN_9_control_x <= GEN_54
    GEN_9_control_w <= GEN_55
    GEN_9_control_r <= GEN_56
    GEN_9_address <= GEN_57
    GEN_10_control_ttype <= GEN_42
    GEN_10_control_dmode <= GEN_43
    GEN_10_control_maskmax <= GEN_44
    GEN_10_control_reserved <= GEN_45
    GEN_10_control_action <= GEN_46
    GEN_10_control_chain <= GEN_47
    GEN_10_control_zero <= GEN_48
    GEN_10_control_tmatch <= GEN_49
    GEN_10_control_m <= GEN_50
    GEN_10_control_h <= GEN_51
    GEN_10_control_s <= GEN_52
    GEN_10_control_u <= GEN_53
    GEN_10_control_x <= GEN_54
    GEN_10_control_w <= GEN_55
    GEN_10_control_r <= GEN_56
    GEN_10_address <= GEN_57
    GEN_11_control_ttype <= GEN_42
    GEN_11_control_dmode <= GEN_43
    GEN_11_control_maskmax <= GEN_44
    GEN_11_control_reserved <= GEN_45
    GEN_11_control_action <= GEN_46
    GEN_11_control_chain <= GEN_47
    GEN_11_control_zero <= GEN_48
    GEN_11_control_tmatch <= GEN_49
    GEN_11_control_m <= GEN_50
    GEN_11_control_h <= GEN_51
    GEN_11_control_s <= GEN_52
    GEN_11_control_u <= GEN_53
    GEN_11_control_x <= GEN_54
    GEN_11_control_w <= GEN_55
    GEN_11_control_r <= GEN_56
    GEN_11_address <= GEN_57
    GEN_12_control_ttype <= GEN_42
    GEN_12_control_dmode <= GEN_43
    GEN_12_control_maskmax <= GEN_44
    GEN_12_control_reserved <= GEN_45
    GEN_12_control_action <= GEN_46
    GEN_12_control_chain <= GEN_47
    GEN_12_control_zero <= GEN_48
    GEN_12_control_tmatch <= GEN_49
    GEN_12_control_m <= GEN_50
    GEN_12_control_h <= GEN_51
    GEN_12_control_s <= GEN_52
    GEN_12_control_u <= GEN_53
    GEN_12_control_x <= GEN_54
    GEN_12_control_w <= GEN_55
    GEN_12_control_r <= GEN_56
    GEN_12_address <= GEN_57
    GEN_13_control_ttype <= GEN_42
    GEN_13_control_dmode <= GEN_43
    GEN_13_control_maskmax <= GEN_44
    GEN_13_control_reserved <= GEN_45
    GEN_13_control_action <= GEN_46
    GEN_13_control_chain <= GEN_47
    GEN_13_control_zero <= GEN_48
    GEN_13_control_tmatch <= GEN_49
    GEN_13_control_m <= GEN_50
    GEN_13_control_h <= GEN_51
    GEN_13_control_s <= GEN_52
    GEN_13_control_u <= GEN_53
    GEN_13_control_x <= GEN_54
    GEN_13_control_w <= GEN_55
    GEN_13_control_r <= GEN_56
    GEN_13_address <= GEN_57
    GEN_14_control_ttype <= GEN_42
    GEN_14_control_dmode <= GEN_43
    GEN_14_control_maskmax <= GEN_44
    GEN_14_control_reserved <= GEN_45
    GEN_14_control_action <= GEN_46
    GEN_14_control_chain <= GEN_47
    GEN_14_control_zero <= GEN_48
    GEN_14_control_tmatch <= GEN_49
    GEN_14_control_m <= GEN_50
    GEN_14_control_h <= GEN_51
    GEN_14_control_s <= GEN_52
    GEN_14_control_u <= GEN_53
    GEN_14_control_x <= GEN_54
    GEN_14_control_w <= GEN_55
    GEN_14_control_r <= GEN_56
    GEN_14_address <= GEN_57
    GEN_15_control_ttype <= GEN_42
    GEN_15_control_dmode <= GEN_43
    GEN_15_control_maskmax <= GEN_44
    GEN_15_control_reserved <= GEN_45
    GEN_15_control_action <= GEN_46
    GEN_15_control_chain <= GEN_47
    GEN_15_control_zero <= GEN_48
    GEN_15_control_tmatch <= GEN_49
    GEN_15_control_m <= GEN_50
    GEN_15_control_h <= GEN_51
    GEN_15_control_s <= GEN_52
    GEN_15_control_u <= GEN_53
    GEN_15_control_x <= GEN_54
    GEN_15_control_w <= GEN_55
    GEN_15_control_r <= GEN_56
    GEN_15_address <= GEN_57
    GEN_16_control_ttype <= GEN_42
    GEN_16_control_dmode <= GEN_43
    GEN_16_control_maskmax <= GEN_44
    GEN_16_control_reserved <= GEN_45
    GEN_16_control_action <= GEN_46
    GEN_16_control_chain <= GEN_47
    GEN_16_control_zero <= GEN_48
    GEN_16_control_tmatch <= GEN_49
    GEN_16_control_m <= GEN_50
    GEN_16_control_h <= GEN_51
    GEN_16_control_s <= GEN_52
    GEN_16_control_u <= GEN_53
    GEN_16_control_x <= GEN_54
    GEN_16_control_w <= GEN_55
    GEN_16_control_r <= GEN_56
    GEN_16_address <= GEN_57
    T_5993_debug <= io_status_debug
    T_5993_isa <= io_status_isa
    T_5993_prv <= io_status_prv
    T_5993_sd <= io_status_sd
    T_5993_zero3 <= io_status_zero3
    T_5993_sd_rv32 <= io_status_sd_rv32
    T_5993_zero2 <= io_status_zero2
    T_5993_zero1 <= io_status_zero1
    T_5993_mxr <= io_status_mxr
    T_5993_pum <= io_status_pum
    T_5993_xs <= io_status_xs
    T_5993_fs <= io_status_fs
    T_5993_spp <= io_status_spp
    T_5993_spie <= io_status_spie
    T_5993_upie <= io_status_upie
    T_5993_sie <= io_status_sie
    T_5993_uie <= io_status_uie
    T_7073 <= T_7072
    T_7127_debug <= T_7179
    T_7127_isa <= T_7178
    T_7127_prv <= T_7177
    T_7127_sd <= T_7176
    T_7127_zero3 <= T_7175
    T_7127_sd_rv32 <= T_7174
    T_7127_zero2 <= T_7173
    T_7127_vm <= T_7172
    T_7127_zero1 <= T_7171
    T_7127_mxr <= T_7170
    T_7127_pum <= T_7169
    T_7127_mprv <= T_7168
    T_7127_xs <= T_7167
    T_7127_fs <= T_7166
    T_7127_mpp <= T_7165
    T_7127_hpp <= T_7164
    T_7127_spp <= T_7163
    T_7127_mpie <= T_7162
    T_7127_hpie <= T_7161
    T_7127_spie <= T_7160
    T_7127_upie <= T_7159
    T_7127_mie <= T_7158
    T_7127_hie <= T_7157
    T_7127_sie <= T_7156
    T_7127_uie <= T_7155
    T_7154 <= pad(wdata, 99)
    T_7232_rocc <= T_7258
    T_7232_meip <= T_7257
    T_7232_heip <= T_7256
    T_7232_seip <= T_7255
    T_7232_ueip <= T_7254
    T_7232_mtip <= T_7253
    T_7232_htip <= T_7252
    T_7232_stip <= T_7193
    T_7232_utip <= T_7250
    T_7232_msip <= T_7249
    T_7232_hsip <= T_7248
    T_7232_ssip <= T_7247
    T_7232_usip <= T_7246
    T_7312_xdebugver <= T_7346
    T_7312_ndreset <= T_7345
    T_7312_fullreset <= T_7344
    T_7312_zero3 <= T_7343
    T_7312_ebreakm <= T_7342
    T_7312_ebreakh <= T_7341
    T_7312_ebreaks <= T_7340
    T_7312_ebreaku <= T_7258
    T_7312_zero2 <= T_7257
    T_7312_stopcycle <= T_7256
    T_7312_stoptime <= T_7255
    T_7312_cause <= T_7335
    T_7312_debugint <= T_7193
    T_7312_zero1 <= T_7250
    T_7312_halt <= T_7249
    T_7312_step <= T_7248
    T_7312_prv <= T_7330
    T_7403_debug <= T_7455
    T_7403_isa <= T_7454
    T_7403_prv <= T_7453
    T_7403_sd <= T_7452
    T_7403_zero3 <= T_7451
    T_7403_sd_rv32 <= T_7450
    T_7403_zero2 <= T_7449
    T_7403_vm <= T_7448
    T_7403_zero1 <= T_7447
    T_7403_mxr <= T_7446
    T_7403_pum <= T_7445
    T_7403_mprv <= T_7444
    T_7403_xs <= T_7443
    T_7403_fs <= T_7442
    T_7403_mpp <= T_7441
    T_7403_hpp <= T_7440
    T_7403_spp <= T_7439
    T_7403_mpie <= T_7438
    T_7403_hpie <= T_7437
    T_7403_spie <= T_7436
    T_7403_upie <= T_7435
    T_7403_mie <= T_7434
    T_7403_hie <= T_7433
    T_7403_sie <= T_7432
    T_7403_uie <= T_7431
    T_7430 <= pad(wdata, 99)
    T_7490_rocc <= T_7258
    T_7490_meip <= T_7257
    T_7490_heip <= T_7256
    T_7490_seip <= T_7255
    T_7490_ueip <= T_7254
    T_7490_mtip <= T_7253
    T_7490_htip <= T_7252
    T_7490_stip <= T_7193
    T_7490_utip <= T_7250
    T_7490_msip <= T_7249
    T_7490_hsip <= T_7248
    T_7490_ssip <= T_7247
    T_7490_usip <= T_7246
    GEN_17_control_ttype <= GEN_42
    GEN_17_control_dmode <= GEN_43
    GEN_17_control_maskmax <= GEN_44
    GEN_17_control_reserved <= GEN_45
    GEN_17_control_action <= GEN_46
    GEN_17_control_chain <= GEN_47
    GEN_17_control_zero <= GEN_48
    GEN_17_control_tmatch <= GEN_49
    GEN_17_control_m <= GEN_50
    GEN_17_control_h <= GEN_51
    GEN_17_control_s <= GEN_52
    GEN_17_control_u <= GEN_53
    GEN_17_control_x <= GEN_54
    GEN_17_control_w <= GEN_55
    GEN_17_control_r <= GEN_56
    GEN_17_address <= GEN_57
    T_7593_ttype <= T_7623
    T_7593_dmode <= T_7622
    T_7593_maskmax <= T_7621
    T_7593_reserved <= T_7620
    T_7593_action <= T_7258
    T_7593_chain <= T_7257
    T_7593_zero <= T_7617
    T_7593_tmatch <= T_7616
    T_7593_m <= T_7252
    T_7593_h <= T_7193
    T_7593_s <= T_7250
    T_7593_u <= T_7249
    T_7593_x <= T_7248
    T_7593_w <= T_7247
    T_7593_r <= T_7246
    GEN_18 <= T_7593_ttype
    GEN_19 <= T_7593_dmode
    GEN_20 <= T_7593_maskmax
    GEN_21 <= T_7593_reserved
    GEN_22 <= T_7593_action
    GEN_23 <= T_7593_chain
    GEN_24 <= T_7593_zero
    GEN_25 <= T_7593_tmatch
    GEN_26 <= T_7593_m
    GEN_27 <= T_7593_h
    GEN_28 <= T_7593_s
    GEN_29 <= T_7593_u
    GEN_30 <= T_7593_x
    GEN_31 <= T_7593_w
    GEN_32 <= T_7593_r
    GEN_33 <= T_7624
    GEN_34 <= T_7625
    GEN_35 <= bits(wdata, 38, 0)
    printf(clk, UInt<1>("h0"), "Assertion failed\n    at csr.scala:207 assert(!io.singleStep || io.retire <= UInt(1))\n")
    stop(clk, UInt<1>("h0"), 1)
    printf(clk, T_5370, "Assertion failed\n    at csr.scala:208 assert(!reg_singleStepped || io.retire === UInt(0))\n")
    stop(clk, T_5370, 1)
    printf(clk, T_6694, "Assertion failed: these conditions must be mutually exclusive\n    at csr.scala:484 assert(PopCount(insn_ret :: io.exception :: io.csr_xcpt :: Nil) <= 1, \"these conditions must be mutually exclusive\")\n")
    stop(clk, T_6694, 1)

  module BreakpointUnit :
    input clk : Clock
    input reset : UInt<1>
    input io_status_debug : UInt<1>
    input io_status_isa : UInt<32>
    input io_status_prv : UInt<2>
    input io_status_sd : UInt<1>
    input io_status_zero3 : UInt<31>
    input io_status_sd_rv32 : UInt<1>
    input io_status_zero2 : UInt<2>
    input io_status_vm : UInt<5>
    input io_status_zero1 : UInt<4>
    input io_status_mxr : UInt<1>
    input io_status_pum : UInt<1>
    input io_status_mprv : UInt<1>
    input io_status_xs : UInt<2>
    input io_status_fs : UInt<2>
    input io_status_mpp : UInt<2>
    input io_status_hpp : UInt<2>
    input io_status_spp : UInt<1>
    input io_status_mpie : UInt<1>
    input io_status_hpie : UInt<1>
    input io_status_spie : UInt<1>
    input io_status_upie : UInt<1>
    input io_status_mie : UInt<1>
    input io_status_hie : UInt<1>
    input io_status_sie : UInt<1>
    input io_status_uie : UInt<1>
    input io_bp_0_control_ttype : UInt<4>
    input io_bp_0_control_dmode : UInt<1>
    input io_bp_0_control_maskmax : UInt<6>
    input io_bp_0_control_reserved : UInt<40>
    input io_bp_0_control_action : UInt<1>
    input io_bp_0_control_chain : UInt<1>
    input io_bp_0_control_zero : UInt<2>
    input io_bp_0_control_tmatch : UInt<2>
    input io_bp_0_control_m : UInt<1>
    input io_bp_0_control_h : UInt<1>
    input io_bp_0_control_s : UInt<1>
    input io_bp_0_control_u : UInt<1>
    input io_bp_0_control_x : UInt<1>
    input io_bp_0_control_w : UInt<1>
    input io_bp_0_control_r : UInt<1>
    input io_bp_0_address : UInt<39>
    input io_pc : UInt<39>
    input io_ea : UInt<39>
    output io_xcpt_if : UInt<1>
    output io_xcpt_ld : UInt<1>
    output io_xcpt_st : UInt<1>
    output io_debug_if : UInt<1>
    output io_debug_ld : UInt<1>
    output io_debug_st : UInt<1>
  
    node T_214 = eq(io_status_debug, UInt<1>("h0"))
    node T_215 = cat(io_bp_0_control_s, io_bp_0_control_u)
    node T_216 = cat(io_bp_0_control_m, io_bp_0_control_h)
    node T_217 = cat(T_216, T_215)
    node T_218 = dshr(T_217, io_status_prv)
    node T_219 = bits(T_218, 0, 0)
    node T_220 = and(T_214, T_219)
    node T_222 = and(T_220, io_bp_0_control_r)
    node T_223 = bits(io_bp_0_control_tmatch, 1, 1)
    node T_224 = geq(io_ea, io_bp_0_address)
    node T_225 = bits(io_bp_0_control_tmatch, 0, 0)
    node T_226 = xor(T_224, T_225)
    node T_227 = not(io_ea)
    node T_229 = bits(io_bp_0_address, 0, 0)
    node T_230 = and(T_225, T_229)
    node T_231 = bits(io_bp_0_address, 1, 1)
    node T_232 = and(T_230, T_231)
    node T_233 = bits(io_bp_0_address, 2, 2)
    node T_234 = and(T_232, T_233)
    node T_235 = cat(T_230, T_225)
    node T_236 = cat(T_234, T_232)
    node T_237 = cat(T_236, T_235)
    node GEN_6 = pad(T_237, 39)
    node T_238 = or(T_227, GEN_6)
    node T_239 = not(io_bp_0_address)
    node T_250 = or(T_239, GEN_6)
    node T_251 = eq(T_238, T_250)
    node T_252 = mux(T_223, T_226, T_251)
    node T_253 = and(T_222, T_252)
    node T_255 = and(T_220, io_bp_0_control_w)
    node T_286 = and(T_255, T_252)
    node T_288 = and(T_220, io_bp_0_control_x)
    node T_290 = geq(io_pc, io_bp_0_address)
    node T_292 = xor(T_290, T_225)
    node T_293 = not(io_pc)
    node T_304 = or(T_293, GEN_6)
    node T_317 = eq(T_304, T_250)
    node T_318 = mux(T_223, T_292, T_317)
    node T_319 = and(T_288, T_318)
    node T_321 = eq(io_bp_0_control_chain, UInt<1>("h0"))
    node T_322 = and(T_321, T_253)
    node T_324 = eq(io_bp_0_control_action, UInt<1>("h0"))
    node GEN_0 = mux(T_322, T_324, UInt<1>("h0"))
    node GEN_1 = mux(T_322, io_bp_0_control_action, UInt<1>("h0"))
    node T_325 = and(T_321, T_286)
    node GEN_2 = mux(T_325, T_324, UInt<1>("h0"))
    node GEN_3 = mux(T_325, io_bp_0_control_action, UInt<1>("h0"))
    node T_328 = and(T_321, T_319)
    node GEN_4 = mux(T_328, T_324, UInt<1>("h0"))
    node GEN_5 = mux(T_328, io_bp_0_control_action, UInt<1>("h0"))
    io_xcpt_if <= GEN_4
    io_xcpt_ld <= GEN_0
    io_xcpt_st <= GEN_2
    io_debug_if <= GEN_5
    io_debug_ld <= GEN_1
    io_debug_st <= GEN_3

  module ALU :
    input clk : Clock
    input reset : UInt<1>
    input io_dw : UInt<1>
    input io_fn : UInt<4>
    input io_in2 : UInt<64>
    input io_in1 : UInt<64>
    output io_out : UInt<64>
    output io_adder_out : UInt<64>
    output io_cmp_out : UInt<1>
  
    node T_7 = bits(io_fn, 3, 3)
    node T_8 = not(io_in2)
    node in2_inv = mux(T_7, T_8, io_in2)
    node in1_xor_in2 = xor(io_in1, in2_inv)
    node T_10 = addw(io_in1, in2_inv)
    node GEN_1 = pad(T_7, 64)
    node T_13 = addw(T_10, GEN_1)
    node T_14 = bits(io_fn, 0, 0)
    node T_17 = eq(T_7, UInt<1>("h0"))
    node T_19 = eq(in1_xor_in2, UInt<64>("h0"))
    node T_20 = bits(io_in1, 63, 63)
    node T_21 = bits(io_in2, 63, 63)
    node T_22 = eq(T_20, T_21)
    node T_23 = bits(io_adder_out, 63, 63)
    node T_24 = bits(io_fn, 1, 1)
    node T_27 = mux(T_24, T_21, T_20)
    node T_28 = mux(T_22, T_23, T_27)
    node T_29 = mux(T_17, T_19, T_28)
    node T_30 = xor(T_14, T_29)
    node T_32 = bits(io_in1, 31, 31)
    node T_33 = and(T_7, T_32)
    node T_37 = mux(T_33, UInt<32>("hffffffff"), UInt<32>("h0"))
    node T_39 = bits(io_in1, 63, 32)
    node T_40 = mux(io_dw, T_39, T_37)
    node T_41 = bits(io_in2, 5, 5)
    node T_43 = and(T_41, io_dw)
    node T_44 = bits(io_in2, 4, 0)
    node shamt = cat(T_43, T_44)
    node T_45 = bits(io_in1, 31, 0)
    node shin_r = cat(T_40, T_45)
    node T_46 = eq(io_fn, UInt<4>("h5"))
    node T_47 = eq(io_fn, UInt<4>("hb"))
    node T_48 = or(T_46, T_47)
    node T_53 = shr(shin_r, 32)
    node T_54 = pad(T_53, 64)
    node T_55 = bits(shin_r, 31, 0)
    node GEN_2 = pad(T_55, 64)
    node T_56 = shlw(GEN_2, 32)
    node T_58 = and(T_56, UInt<64>("hffffffff00000000"))
    node T_59 = or(T_54, T_58)
    node T_63 = shr(T_59, 16)
    node GEN_3 = pad(T_63, 64)
    node T_64 = and(GEN_3, UInt<64>("hffff0000ffff"))
    node T_65 = bits(T_59, 47, 0)
    node GEN_4 = pad(T_65, 64)
    node T_66 = shlw(GEN_4, 16)
    node T_68 = and(T_66, UInt<64>("hffff0000ffff0000"))
    node T_69 = or(T_64, T_68)
    node T_73 = shr(T_69, 8)
    node GEN_5 = pad(T_73, 64)
    node T_74 = and(GEN_5, UInt<64>("hff00ff00ff00ff"))
    node T_75 = bits(T_69, 55, 0)
    node GEN_6 = pad(T_75, 64)
    node T_76 = shlw(GEN_6, 8)
    node T_78 = and(T_76, UInt<64>("hff00ff00ff00ff00"))
    node T_79 = or(T_74, T_78)
    node T_83 = shr(T_79, 4)
    node GEN_7 = pad(T_83, 64)
    node T_84 = and(GEN_7, UInt<64>("hf0f0f0f0f0f0f0f"))
    node T_85 = bits(T_79, 59, 0)
    node GEN_8 = pad(T_85, 64)
    node T_86 = shlw(GEN_8, 4)
    node T_88 = and(T_86, UInt<64>("hf0f0f0f0f0f0f0f0"))
    node T_89 = or(T_84, T_88)
    node T_93 = shr(T_89, 2)
    node GEN_9 = pad(T_93, 64)
    node T_94 = and(GEN_9, UInt<64>("h3333333333333333"))
    node T_95 = bits(T_89, 61, 0)
    node GEN_10 = pad(T_95, 64)
    node T_96 = shlw(GEN_10, 2)
    node T_98 = and(T_96, UInt<64>("hcccccccccccccccc"))
    node T_99 = or(T_94, T_98)
    node T_103 = shr(T_99, 1)
    node GEN_11 = pad(T_103, 64)
    node T_104 = and(GEN_11, UInt<64>("h5555555555555555"))
    node T_105 = bits(T_99, 62, 0)
    node GEN_12 = pad(T_105, 64)
    node T_106 = shlw(GEN_12, 1)
    node T_108 = and(T_106, UInt<64>("haaaaaaaaaaaaaaaa"))
    node T_109 = or(T_104, T_108)
    node shin = mux(T_48, shin_r, T_109)
    node T_111 = bits(shin, 63, 63)
    node T_112 = and(T_7, T_111)
    node T_113 = cat(T_112, shin)
    node T_114 = asSInt(T_113)
    node T_115 = dshr(T_114, shamt)
    node shout_r = bits(T_115, 63, 0)
    node T_120 = shr(shout_r, 32)
    node T_121 = pad(T_120, 64)
    node T_122 = bits(shout_r, 31, 0)
    node GEN_13 = pad(T_122, 64)
    node T_123 = shlw(GEN_13, 32)
    node T_125 = and(T_123, UInt<64>("hffffffff00000000"))
    node T_126 = or(T_121, T_125)
    node T_130 = shr(T_126, 16)
    node GEN_14 = pad(T_130, 64)
    node T_131 = and(GEN_14, UInt<64>("hffff0000ffff"))
    node T_132 = bits(T_126, 47, 0)
    node GEN_15 = pad(T_132, 64)
    node T_133 = shlw(GEN_15, 16)
    node T_135 = and(T_133, UInt<64>("hffff0000ffff0000"))
    node T_136 = or(T_131, T_135)
    node T_140 = shr(T_136, 8)
    node GEN_16 = pad(T_140, 64)
    node T_141 = and(GEN_16, UInt<64>("hff00ff00ff00ff"))
    node T_142 = bits(T_136, 55, 0)
    node GEN_17 = pad(T_142, 64)
    node T_143 = shlw(GEN_17, 8)
    node T_145 = and(T_143, UInt<64>("hff00ff00ff00ff00"))
    node T_146 = or(T_141, T_145)
    node T_150 = shr(T_146, 4)
    node GEN_18 = pad(T_150, 64)
    node T_151 = and(GEN_18, UInt<64>("hf0f0f0f0f0f0f0f"))
    node T_152 = bits(T_146, 59, 0)
    node GEN_19 = pad(T_152, 64)
    node T_153 = shlw(GEN_19, 4)
    node T_155 = and(T_153, UInt<64>("hf0f0f0f0f0f0f0f0"))
    node T_156 = or(T_151, T_155)
    node T_160 = shr(T_156, 2)
    node GEN_20 = pad(T_160, 64)
    node T_161 = and(GEN_20, UInt<64>("h3333333333333333"))
    node T_162 = bits(T_156, 61, 0)
    node GEN_21 = pad(T_162, 64)
    node T_163 = shlw(GEN_21, 2)
    node T_165 = and(T_163, UInt<64>("hcccccccccccccccc"))
    node T_166 = or(T_161, T_165)
    node T_170 = shr(T_166, 1)
    node GEN_22 = pad(T_170, 64)
    node T_171 = and(GEN_22, UInt<64>("h5555555555555555"))
    node T_172 = bits(T_166, 62, 0)
    node GEN_23 = pad(T_172, 64)
    node T_173 = shlw(GEN_23, 1)
    node T_175 = and(T_173, UInt<64>("haaaaaaaaaaaaaaaa"))
    node shout_l = or(T_171, T_175)
    node T_180 = mux(T_48, shout_r, UInt<64>("h0"))
    node T_181 = eq(io_fn, UInt<4>("h1"))
    node T_183 = mux(T_181, shout_l, UInt<64>("h0"))
    node shout = or(T_180, T_183)
    node T_184 = eq(io_fn, UInt<4>("h4"))
    node T_185 = eq(io_fn, UInt<4>("h6"))
    node T_186 = or(T_184, T_185)
    node T_188 = mux(T_186, in1_xor_in2, UInt<64>("h0"))
    node T_190 = eq(io_fn, UInt<4>("h7"))
    node T_191 = or(T_185, T_190)
    node T_192 = and(io_in1, io_in2)
    node T_194 = mux(T_191, T_192, UInt<64>("h0"))
    node logic = or(T_188, T_194)
    node T_195 = eq(io_fn, UInt<4>("h2"))
    node T_196 = eq(io_fn, UInt<4>("h3"))
    node T_197 = or(T_195, T_196)
    node T_198 = geq(io_fn, UInt<4>("hc"))
    node T_199 = or(T_197, T_198)
    node T_200 = and(T_199, io_cmp_out)
    node GEN_24 = pad(T_200, 64)
    node T_201 = or(GEN_24, logic)
    node shift_logic = or(T_201, shout)
    node T_202 = eq(io_fn, UInt<4>("h0"))
    node T_203 = eq(io_fn, UInt<4>("ha"))
    node T_204 = or(T_202, T_203)
    node out = mux(T_204, io_adder_out, shift_logic)
    node T_205 = eq(io_dw, UInt<1>("h0"))
    node T_206 = bits(out, 31, 31)
    node T_210 = mux(T_206, UInt<32>("hffffffff"), UInt<32>("h0"))
    node T_211 = bits(out, 31, 0)
    node T_212 = cat(T_210, T_211)
    node GEN_0 = mux(T_205, T_212, out)
    io_out <= GEN_0
    io_adder_out <= T_13
    io_cmp_out <= T_30

  module MulDiv :
    input clk : Clock
    input reset : UInt<1>
    output io_req_ready : UInt<1>
    input io_req_valid : UInt<1>
    input io_req_bits_fn : UInt<4>
    input io_req_bits_dw : UInt<1>
    input io_req_bits_in1 : UInt<64>
    input io_req_bits_in2 : UInt<64>
    input io_req_bits_tag : UInt<5>
    input io_kill : UInt<1>
    input io_resp_ready : UInt<1>
    output io_resp_valid : UInt<1>
    output io_resp_bits_data : UInt<64>
    output io_resp_bits_tag : UInt<5>
  
    reg state : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg req_fn : UInt<4>, clk with :
      reset => (UInt<1>("h0"), req_fn)
    reg req_dw : UInt<1>, clk with :
      reset => (UInt<1>("h0"), req_dw)
    reg req_in1 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), req_in1)
    reg req_in2 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), req_in2)
    reg req_tag : UInt<5>, clk with :
      reset => (UInt<1>("h0"), req_tag)
    reg count : UInt<7>, clk with :
      reset => (UInt<1>("h0"), count)
    reg neg_out : UInt<1>, clk with :
      reset => (UInt<1>("h0"), neg_out)
    reg isMul : UInt<1>, clk with :
      reset => (UInt<1>("h0"), isMul)
    reg isHi : UInt<1>, clk with :
      reset => (UInt<1>("h0"), isHi)
    reg divisor : UInt<65>, clk with :
      reset => (UInt<1>("h0"), divisor)
    reg remainder : UInt<130>, clk with :
      reset => (UInt<1>("h0"), remainder)
    node T_62 = and(io_req_bits_fn, UInt<4>("h4"))
    node T_64 = eq(T_62, UInt<4>("h0"))
    node T_66 = and(io_req_bits_fn, UInt<4>("h8"))
    node T_68 = eq(T_66, UInt<4>("h8"))
    node T_71 = or(T_64, T_68)
    node T_73 = and(io_req_bits_fn, UInt<4>("h5"))
    node T_75 = eq(T_73, UInt<4>("h1"))
    node T_77 = and(io_req_bits_fn, UInt<4>("h2"))
    node T_79 = eq(T_77, UInt<4>("h2"))
    node T_82 = or(T_75, T_79)
    node T_83 = or(T_82, T_68)
    node T_85 = and(io_req_bits_fn, UInt<4>("h9"))
    node T_87 = eq(T_85, UInt<4>("h0"))
    node T_89 = and(io_req_bits_fn, UInt<4>("h3"))
    node T_91 = eq(T_89, UInt<4>("h0"))
    node T_94 = or(T_87, T_64)
    node T_95 = or(T_94, T_91)
    node T_100 = eq(io_req_bits_dw, UInt<1>("h0"))
    node T_102 = bits(io_req_bits_in1, 31, 31)
    node T_103 = bits(io_req_bits_in1, 63, 63)
    node T_104 = mux(T_100, T_102, T_103)
    node lhs_sign = and(T_95, T_104)
    node T_108 = mux(lhs_sign, UInt<32>("hffffffff"), UInt<32>("h0"))
    node T_109 = bits(io_req_bits_in1, 63, 32)
    node T_110 = mux(T_100, T_108, T_109)
    node T_111 = bits(io_req_bits_in1, 31, 0)
    node lhs_in = cat(T_110, T_111)
    node T_115 = bits(io_req_bits_in2, 31, 31)
    node T_116 = bits(io_req_bits_in2, 63, 63)
    node T_117 = mux(T_100, T_115, T_116)
    node rhs_sign = and(T_94, T_117)
    node T_121 = mux(rhs_sign, UInt<32>("hffffffff"), UInt<32>("h0"))
    node T_122 = bits(io_req_bits_in2, 63, 32)
    node T_123 = mux(T_100, T_121, T_122)
    node T_124 = bits(io_req_bits_in2, 31, 0)
    node rhs_in = cat(T_123, T_124)
    node T_125 = bits(remainder, 128, 64)
    node T_127 = sub(T_125, divisor)
    node subtractor = tail(T_127, 1)
    node less = bits(subtractor, 64, 64)
    node T_128 = bits(remainder, 63, 0)
    node negated_remainder = subw(UInt<64>("h0"), T_128)
    node T_131 = eq(state, UInt<3>("h1"))
    node T_132 = bits(remainder, 63, 63)
    node T_133 = or(T_132, isMul)
    node GEN_0 = mux(T_133, pad(negated_remainder, 130), remainder)
    node T_134 = bits(divisor, 63, 63)
    node T_135 = or(T_134, isMul)
    node GEN_1 = mux(T_135, subtractor, divisor)
    node GEN_2 = mux(T_131, GEN_0, remainder)
    node GEN_3 = mux(T_131, GEN_1, divisor)
    node GEN_4 = mux(T_131, UInt<3>("h2"), state)
    node T_136 = eq(state, UInt<3>("h4"))
    node GEN_5 = mux(T_136, pad(negated_remainder, 130), GEN_2)
    node GEN_6 = mux(T_136, UInt<3>("h5"), GEN_4)
    node T_137 = eq(state, UInt<3>("h3"))
    node T_138 = bits(remainder, 128, 65)
    node T_139 = mux(neg_out, UInt<3>("h4"), UInt<3>("h5"))
    node GEN_7 = mux(T_137, pad(T_138, 130), GEN_5)
    node GEN_8 = mux(T_137, T_139, GEN_6)
    node T_140 = eq(state, UInt<3>("h2"))
    node T_141 = and(T_140, isMul)
    node T_142 = bits(remainder, 129, 65)
    node T_144 = cat(T_142, T_128)
    node T_145 = bits(T_144, 63, 0)
    node T_146 = bits(T_144, 128, 64)
    node T_147 = asSInt(T_146)
    node T_148 = asSInt(divisor)
    node T_149 = bits(T_145, 7, 0)
    node GEN_34 = pad(T_149, 65)
    node T_150 = mul(T_148, GEN_34)
    node GEN_35 = pad(T_147, 73)
    node T_151 = add(T_150, GEN_35)
    node T_152 = tail(T_151, 1)
    node T_153 = asSInt(T_152)
    node T_154 = bits(T_145, 63, 8)
    node T_155 = asUInt(T_153)
    node T_156 = cat(T_155, T_154)
    node T_159 = mul(count, UInt<7>("h8"))
    node T_160 = bits(T_159, 5, 0)
    node T_161 = dshr(SInt<65>("h10000000000000000"), T_160)
    node T_162 = bits(T_161, 63, 0)
    node T_165 = neq(count, UInt<7>("h7"))
    node T_168 = neq(count, UInt<7>("h0"))
    node T_169 = and(T_165, T_168)
    node T_171 = eq(isHi, UInt<1>("h0"))
    node T_172 = and(T_169, T_171)
    node T_173 = not(T_162)
    node T_174 = and(T_145, T_173)
    node T_176 = eq(T_174, UInt<64>("h0"))
    node T_177 = and(T_172, T_176)
    node T_181 = sub(UInt<11>("h40"), T_159)
    node T_182 = tail(T_181, 1)
    node T_183 = bits(T_182, 5, 0)
    node T_184 = dshr(T_144, T_183)
    node T_185 = bits(T_156, 128, 64)
    node T_186 = mux(T_177, T_184, T_156)
    node T_187 = bits(T_186, 63, 0)
    node T_188 = cat(T_185, T_187)
    node T_189 = shr(T_188, 64)
    node T_191 = bits(T_188, 63, 0)
    node T_192 = cat(T_189, UInt<1>("h0"))
    node T_193 = cat(T_192, T_191)
    node T_195 = add(count, UInt<7>("h1"))
    node T_196 = tail(T_195, 1)
    node T_198 = eq(count, UInt<7>("h7"))
    node T_199 = or(T_177, T_198)
    node T_200 = mux(isHi, UInt<3>("h3"), UInt<3>("h5"))
    node GEN_9 = mux(T_199, T_200, GEN_8)
    node GEN_10 = mux(T_141, T_193, GEN_7)
    node GEN_11 = mux(T_141, T_196, count)
    node GEN_12 = mux(T_141, GEN_9, GEN_8)
    node T_203 = eq(isMul, UInt<1>("h0"))
    node T_204 = and(T_140, T_203)
    node T_206 = eq(count, UInt<7>("h40"))
    node T_208 = mux(isHi, UInt<3>("h3"), T_139)
    node GEN_13 = mux(T_206, T_208, GEN_12)
    node T_212 = bits(remainder, 127, 64)
    node T_213 = bits(subtractor, 63, 0)
    node T_214 = mux(less, T_212, T_213)
    node T_217 = eq(less, UInt<1>("h0"))
    node T_218 = cat(T_214, T_128)
    node T_219 = cat(T_218, T_217)
    node T_220 = bits(divisor, 63, 0)
    node T_221 = bits(T_220, 63, 32)
    node T_222 = bits(T_220, 31, 0)
    node T_224 = neq(T_221, UInt<32>("h0"))
    node T_225 = bits(T_221, 31, 16)
    node T_226 = bits(T_221, 15, 0)
    node T_228 = neq(T_225, UInt<16>("h0"))
    node T_229 = bits(T_225, 15, 8)
    node T_230 = bits(T_225, 7, 0)
    node T_232 = neq(T_229, UInt<8>("h0"))
    node T_233 = bits(T_229, 7, 4)
    node T_234 = bits(T_229, 3, 0)
    node T_236 = neq(T_233, UInt<4>("h0"))
    node T_237 = bits(T_233, 3, 3)
    node T_239 = bits(T_233, 2, 2)
    node T_241 = bits(T_233, 1, 1)
    node T_243 = mux(T_239, UInt<2>("h2"), pad(T_241, 2))
    node T_244 = mux(T_237, UInt<2>("h3"), T_243)
    node T_245 = bits(T_234, 3, 3)
    node T_247 = bits(T_234, 2, 2)
    node T_249 = bits(T_234, 1, 1)
    node T_251 = mux(T_247, UInt<2>("h2"), pad(T_249, 2))
    node T_252 = mux(T_245, UInt<2>("h3"), T_251)
    node T_253 = mux(T_236, T_244, T_252)
    node T_254 = cat(T_236, T_253)
    node T_255 = bits(T_230, 7, 4)
    node T_256 = bits(T_230, 3, 0)
    node T_258 = neq(T_255, UInt<4>("h0"))
    node T_259 = bits(T_255, 3, 3)
    node T_261 = bits(T_255, 2, 2)
    node T_263 = bits(T_255, 1, 1)
    node T_265 = mux(T_261, UInt<2>("h2"), pad(T_263, 2))
    node T_266 = mux(T_259, UInt<2>("h3"), T_265)
    node T_267 = bits(T_256, 3, 3)
    node T_269 = bits(T_256, 2, 2)
    node T_271 = bits(T_256, 1, 1)
    node T_273 = mux(T_269, UInt<2>("h2"), pad(T_271, 2))
    node T_274 = mux(T_267, UInt<2>("h3"), T_273)
    node T_275 = mux(T_258, T_266, T_274)
    node T_276 = cat(T_258, T_275)
    node T_277 = mux(T_232, T_254, T_276)
    node T_278 = cat(T_232, T_277)
    node T_279 = bits(T_226, 15, 8)
    node T_280 = bits(T_226, 7, 0)
    node T_282 = neq(T_279, UInt<8>("h0"))
    node T_283 = bits(T_279, 7, 4)
    node T_284 = bits(T_279, 3, 0)
    node T_286 = neq(T_283, UInt<4>("h0"))
    node T_287 = bits(T_283, 3, 3)
    node T_289 = bits(T_283, 2, 2)
    node T_291 = bits(T_283, 1, 1)
    node T_293 = mux(T_289, UInt<2>("h2"), pad(T_291, 2))
    node T_294 = mux(T_287, UInt<2>("h3"), T_293)
    node T_295 = bits(T_284, 3, 3)
    node T_297 = bits(T_284, 2, 2)
    node T_299 = bits(T_284, 1, 1)
    node T_301 = mux(T_297, UInt<2>("h2"), pad(T_299, 2))
    node T_302 = mux(T_295, UInt<2>("h3"), T_301)
    node T_303 = mux(T_286, T_294, T_302)
    node T_304 = cat(T_286, T_303)
    node T_305 = bits(T_280, 7, 4)
    node T_306 = bits(T_280, 3, 0)
    node T_308 = neq(T_305, UInt<4>("h0"))
    node T_309 = bits(T_305, 3, 3)
    node T_311 = bits(T_305, 2, 2)
    node T_313 = bits(T_305, 1, 1)
    node T_315 = mux(T_311, UInt<2>("h2"), pad(T_313, 2))
    node T_316 = mux(T_309, UInt<2>("h3"), T_315)
    node T_317 = bits(T_306, 3, 3)
    node T_319 = bits(T_306, 2, 2)
    node T_321 = bits(T_306, 1, 1)
    node T_323 = mux(T_319, UInt<2>("h2"), pad(T_321, 2))
    node T_324 = mux(T_317, UInt<2>("h3"), T_323)
    node T_325 = mux(T_308, T_316, T_324)
    node T_326 = cat(T_308, T_325)
    node T_327 = mux(T_282, T_304, T_326)
    node T_328 = cat(T_282, T_327)
    node T_329 = mux(T_228, T_278, T_328)
    node T_330 = cat(T_228, T_329)
    node T_331 = bits(T_222, 31, 16)
    node T_332 = bits(T_222, 15, 0)
    node T_334 = neq(T_331, UInt<16>("h0"))
    node T_335 = bits(T_331, 15, 8)
    node T_336 = bits(T_331, 7, 0)
    node T_338 = neq(T_335, UInt<8>("h0"))
    node T_339 = bits(T_335, 7, 4)
    node T_340 = bits(T_335, 3, 0)
    node T_342 = neq(T_339, UInt<4>("h0"))
    node T_343 = bits(T_339, 3, 3)
    node T_345 = bits(T_339, 2, 2)
    node T_347 = bits(T_339, 1, 1)
    node T_349 = mux(T_345, UInt<2>("h2"), pad(T_347, 2))
    node T_350 = mux(T_343, UInt<2>("h3"), T_349)
    node T_351 = bits(T_340, 3, 3)
    node T_353 = bits(T_340, 2, 2)
    node T_355 = bits(T_340, 1, 1)
    node T_357 = mux(T_353, UInt<2>("h2"), pad(T_355, 2))
    node T_358 = mux(T_351, UInt<2>("h3"), T_357)
    node T_359 = mux(T_342, T_350, T_358)
    node T_360 = cat(T_342, T_359)
    node T_361 = bits(T_336, 7, 4)
    node T_362 = bits(T_336, 3, 0)
    node T_364 = neq(T_361, UInt<4>("h0"))
    node T_365 = bits(T_361, 3, 3)
    node T_367 = bits(T_361, 2, 2)
    node T_369 = bits(T_361, 1, 1)
    node T_371 = mux(T_367, UInt<2>("h2"), pad(T_369, 2))
    node T_372 = mux(T_365, UInt<2>("h3"), T_371)
    node T_373 = bits(T_362, 3, 3)
    node T_375 = bits(T_362, 2, 2)
    node T_377 = bits(T_362, 1, 1)
    node T_379 = mux(T_375, UInt<2>("h2"), pad(T_377, 2))
    node T_380 = mux(T_373, UInt<2>("h3"), T_379)
    node T_381 = mux(T_364, T_372, T_380)
    node T_382 = cat(T_364, T_381)
    node T_383 = mux(T_338, T_360, T_382)
    node T_384 = cat(T_338, T_383)
    node T_385 = bits(T_332, 15, 8)
    node T_386 = bits(T_332, 7, 0)
    node T_388 = neq(T_385, UInt<8>("h0"))
    node T_389 = bits(T_385, 7, 4)
    node T_390 = bits(T_385, 3, 0)
    node T_392 = neq(T_389, UInt<4>("h0"))
    node T_393 = bits(T_389, 3, 3)
    node T_395 = bits(T_389, 2, 2)
    node T_397 = bits(T_389, 1, 1)
    node T_399 = mux(T_395, UInt<2>("h2"), pad(T_397, 2))
    node T_400 = mux(T_393, UInt<2>("h3"), T_399)
    node T_401 = bits(T_390, 3, 3)
    node T_403 = bits(T_390, 2, 2)
    node T_405 = bits(T_390, 1, 1)
    node T_407 = mux(T_403, UInt<2>("h2"), pad(T_405, 2))
    node T_408 = mux(T_401, UInt<2>("h3"), T_407)
    node T_409 = mux(T_392, T_400, T_408)
    node T_410 = cat(T_392, T_409)
    node T_411 = bits(T_386, 7, 4)
    node T_412 = bits(T_386, 3, 0)
    node T_414 = neq(T_411, UInt<4>("h0"))
    node T_415 = bits(T_411, 3, 3)
    node T_417 = bits(T_411, 2, 2)
    node T_419 = bits(T_411, 1, 1)
    node T_421 = mux(T_417, UInt<2>("h2"), pad(T_419, 2))
    node T_422 = mux(T_415, UInt<2>("h3"), T_421)
    node T_423 = bits(T_412, 3, 3)
    node T_425 = bits(T_412, 2, 2)
    node T_427 = bits(T_412, 1, 1)
    node T_429 = mux(T_425, UInt<2>("h2"), pad(T_427, 2))
    node T_430 = mux(T_423, UInt<2>("h3"), T_429)
    node T_431 = mux(T_414, T_422, T_430)
    node T_432 = cat(T_414, T_431)
    node T_433 = mux(T_388, T_410, T_432)
    node T_434 = cat(T_388, T_433)
    node T_435 = mux(T_334, T_384, T_434)
    node T_436 = cat(T_334, T_435)
    node T_437 = mux(T_224, T_330, T_436)
    node T_438 = cat(T_224, T_437)
    node T_440 = bits(T_128, 63, 32)
    node T_441 = bits(T_128, 31, 0)
    node T_443 = neq(T_440, UInt<32>("h0"))
    node T_444 = bits(T_440, 31, 16)
    node T_445 = bits(T_440, 15, 0)
    node T_447 = neq(T_444, UInt<16>("h0"))
    node T_448 = bits(T_444, 15, 8)
    node T_449 = bits(T_444, 7, 0)
    node T_451 = neq(T_448, UInt<8>("h0"))
    node T_452 = bits(T_448, 7, 4)
    node T_453 = bits(T_448, 3, 0)
    node T_455 = neq(T_452, UInt<4>("h0"))
    node T_456 = bits(T_452, 3, 3)
    node T_458 = bits(T_452, 2, 2)
    node T_460 = bits(T_452, 1, 1)
    node T_462 = mux(T_458, UInt<2>("h2"), pad(T_460, 2))
    node T_463 = mux(T_456, UInt<2>("h3"), T_462)
    node T_464 = bits(T_453, 3, 3)
    node T_466 = bits(T_453, 2, 2)
    node T_468 = bits(T_453, 1, 1)
    node T_470 = mux(T_466, UInt<2>("h2"), pad(T_468, 2))
    node T_471 = mux(T_464, UInt<2>("h3"), T_470)
    node T_472 = mux(T_455, T_463, T_471)
    node T_473 = cat(T_455, T_472)
    node T_474 = bits(T_449, 7, 4)
    node T_475 = bits(T_449, 3, 0)
    node T_477 = neq(T_474, UInt<4>("h0"))
    node T_478 = bits(T_474, 3, 3)
    node T_480 = bits(T_474, 2, 2)
    node T_482 = bits(T_474, 1, 1)
    node T_484 = mux(T_480, UInt<2>("h2"), pad(T_482, 2))
    node T_485 = mux(T_478, UInt<2>("h3"), T_484)
    node T_486 = bits(T_475, 3, 3)
    node T_488 = bits(T_475, 2, 2)
    node T_490 = bits(T_475, 1, 1)
    node T_492 = mux(T_488, UInt<2>("h2"), pad(T_490, 2))
    node T_493 = mux(T_486, UInt<2>("h3"), T_492)
    node T_494 = mux(T_477, T_485, T_493)
    node T_495 = cat(T_477, T_494)
    node T_496 = mux(T_451, T_473, T_495)
    node T_497 = cat(T_451, T_496)
    node T_498 = bits(T_445, 15, 8)
    node T_499 = bits(T_445, 7, 0)
    node T_501 = neq(T_498, UInt<8>("h0"))
    node T_502 = bits(T_498, 7, 4)
    node T_503 = bits(T_498, 3, 0)
    node T_505 = neq(T_502, UInt<4>("h0"))
    node T_506 = bits(T_502, 3, 3)
    node T_508 = bits(T_502, 2, 2)
    node T_510 = bits(T_502, 1, 1)
    node T_512 = mux(T_508, UInt<2>("h2"), pad(T_510, 2))
    node T_513 = mux(T_506, UInt<2>("h3"), T_512)
    node T_514 = bits(T_503, 3, 3)
    node T_516 = bits(T_503, 2, 2)
    node T_518 = bits(T_503, 1, 1)
    node T_520 = mux(T_516, UInt<2>("h2"), pad(T_518, 2))
    node T_521 = mux(T_514, UInt<2>("h3"), T_520)
    node T_522 = mux(T_505, T_513, T_521)
    node T_523 = cat(T_505, T_522)
    node T_524 = bits(T_499, 7, 4)
    node T_525 = bits(T_499, 3, 0)
    node T_527 = neq(T_524, UInt<4>("h0"))
    node T_528 = bits(T_524, 3, 3)
    node T_530 = bits(T_524, 2, 2)
    node T_532 = bits(T_524, 1, 1)
    node T_534 = mux(T_530, UInt<2>("h2"), pad(T_532, 2))
    node T_535 = mux(T_528, UInt<2>("h3"), T_534)
    node T_536 = bits(T_525, 3, 3)
    node T_538 = bits(T_525, 2, 2)
    node T_540 = bits(T_525, 1, 1)
    node T_542 = mux(T_538, UInt<2>("h2"), pad(T_540, 2))
    node T_543 = mux(T_536, UInt<2>("h3"), T_542)
    node T_544 = mux(T_527, T_535, T_543)
    node T_545 = cat(T_527, T_544)
    node T_546 = mux(T_501, T_523, T_545)
    node T_547 = cat(T_501, T_546)
    node T_548 = mux(T_447, T_497, T_547)
    node T_549 = cat(T_447, T_548)
    node T_550 = bits(T_441, 31, 16)
    node T_551 = bits(T_441, 15, 0)
    node T_553 = neq(T_550, UInt<16>("h0"))
    node T_554 = bits(T_550, 15, 8)
    node T_555 = bits(T_550, 7, 0)
    node T_557 = neq(T_554, UInt<8>("h0"))
    node T_558 = bits(T_554, 7, 4)
    node T_559 = bits(T_554, 3, 0)
    node T_561 = neq(T_558, UInt<4>("h0"))
    node T_562 = bits(T_558, 3, 3)
    node T_564 = bits(T_558, 2, 2)
    node T_566 = bits(T_558, 1, 1)
    node T_568 = mux(T_564, UInt<2>("h2"), pad(T_566, 2))
    node T_569 = mux(T_562, UInt<2>("h3"), T_568)
    node T_570 = bits(T_559, 3, 3)
    node T_572 = bits(T_559, 2, 2)
    node T_574 = bits(T_559, 1, 1)
    node T_576 = mux(T_572, UInt<2>("h2"), pad(T_574, 2))
    node T_577 = mux(T_570, UInt<2>("h3"), T_576)
    node T_578 = mux(T_561, T_569, T_577)
    node T_579 = cat(T_561, T_578)
    node T_580 = bits(T_555, 7, 4)
    node T_581 = bits(T_555, 3, 0)
    node T_583 = neq(T_580, UInt<4>("h0"))
    node T_584 = bits(T_580, 3, 3)
    node T_586 = bits(T_580, 2, 2)
    node T_588 = bits(T_580, 1, 1)
    node T_590 = mux(T_586, UInt<2>("h2"), pad(T_588, 2))
    node T_591 = mux(T_584, UInt<2>("h3"), T_590)
    node T_592 = bits(T_581, 3, 3)
    node T_594 = bits(T_581, 2, 2)
    node T_596 = bits(T_581, 1, 1)
    node T_598 = mux(T_594, UInt<2>("h2"), pad(T_596, 2))
    node T_599 = mux(T_592, UInt<2>("h3"), T_598)
    node T_600 = mux(T_583, T_591, T_599)
    node T_601 = cat(T_583, T_600)
    node T_602 = mux(T_557, T_579, T_601)
    node T_603 = cat(T_557, T_602)
    node T_604 = bits(T_551, 15, 8)
    node T_605 = bits(T_551, 7, 0)
    node T_607 = neq(T_604, UInt<8>("h0"))
    node T_608 = bits(T_604, 7, 4)
    node T_609 = bits(T_604, 3, 0)
    node T_611 = neq(T_608, UInt<4>("h0"))
    node T_612 = bits(T_608, 3, 3)
    node T_614 = bits(T_608, 2, 2)
    node T_616 = bits(T_608, 1, 1)
    node T_618 = mux(T_614, UInt<2>("h2"), pad(T_616, 2))
    node T_619 = mux(T_612, UInt<2>("h3"), T_618)
    node T_620 = bits(T_609, 3, 3)
    node T_622 = bits(T_609, 2, 2)
    node T_624 = bits(T_609, 1, 1)
    node T_626 = mux(T_622, UInt<2>("h2"), pad(T_624, 2))
    node T_627 = mux(T_620, UInt<2>("h3"), T_626)
    node T_628 = mux(T_611, T_619, T_627)
    node T_629 = cat(T_611, T_628)
    node T_630 = bits(T_605, 7, 4)
    node T_631 = bits(T_605, 3, 0)
    node T_633 = neq(T_630, UInt<4>("h0"))
    node T_634 = bits(T_630, 3, 3)
    node T_636 = bits(T_630, 2, 2)
    node T_638 = bits(T_630, 1, 1)
    node T_640 = mux(T_636, UInt<2>("h2"), pad(T_638, 2))
    node T_641 = mux(T_634, UInt<2>("h3"), T_640)
    node T_642 = bits(T_631, 3, 3)
    node T_644 = bits(T_631, 2, 2)
    node T_646 = bits(T_631, 1, 1)
    node T_648 = mux(T_644, UInt<2>("h2"), pad(T_646, 2))
    node T_649 = mux(T_642, UInt<2>("h3"), T_648)
    node T_650 = mux(T_633, T_641, T_649)
    node T_651 = cat(T_633, T_650)
    node T_652 = mux(T_607, T_629, T_651)
    node T_653 = cat(T_607, T_652)
    node T_654 = mux(T_553, T_603, T_653)
    node T_655 = cat(T_553, T_654)
    node T_656 = mux(T_443, T_549, T_655)
    node T_657 = cat(T_443, T_656)
    node T_659 = add(UInt<6>("h3f"), T_438)
    node T_660 = tail(T_659, 1)
    node T_661 = sub(T_660, T_657)
    node T_662 = tail(T_661, 1)
    node T_663 = gt(T_438, T_657)
    node T_665 = eq(count, UInt<7>("h0"))
    node T_666 = and(T_665, less)
    node T_668 = gt(T_662, UInt<6>("h0"))
    node T_669 = or(T_668, T_663)
    node T_670 = and(T_666, T_669)
    node T_675 = mux(T_663, UInt<6>("h3f"), T_662)
    node GEN_36 = pad(T_128, 127)
    node T_677 = dshlw(GEN_36, T_675)
    node GEN_14 = mux(T_670, pad(T_677, 129), T_219)
    node GEN_15 = mux(T_670, pad(T_675, 7), T_196)
    node T_682 = and(T_665, T_217)
    node T_685 = and(T_682, T_171)
    node GEN_16 = mux(T_685, UInt<1>("h0"), neg_out)
    node GEN_17 = mux(T_204, GEN_13, GEN_12)
    node GEN_18 = mux(T_204, GEN_15, GEN_11)
    node GEN_19 = mux(T_204, pad(GEN_14, 130), GEN_10)
    node GEN_20 = mux(T_204, GEN_16, neg_out)
    node T_687 = and(io_resp_ready, io_resp_valid)
    node T_688 = or(T_687, io_kill)
    node GEN_21 = mux(T_688, UInt<3>("h0"), GEN_17)
    node T_689 = and(io_req_ready, io_req_valid)
    node T_691 = eq(T_71, UInt<1>("h0"))
    node T_692 = and(rhs_sign, T_691)
    node T_693 = or(lhs_sign, T_692)
    node T_694 = mux(T_693, UInt<3>("h1"), UInt<3>("h2"))
    node T_698 = neq(lhs_sign, rhs_sign)
    node T_699 = mux(T_83, lhs_sign, T_698)
    node T_700 = and(T_691, T_699)
    node T_701 = cat(rhs_sign, rhs_in)
    node GEN_22 = mux(T_689, T_694, GEN_21)
    node GEN_23 = mux(T_689, T_71, isMul)
    node GEN_24 = mux(T_689, T_83, isHi)
    node GEN_25 = mux(T_689, UInt<7>("h0"), GEN_18)
    node GEN_26 = mux(T_689, T_700, GEN_20)
    node GEN_27 = mux(T_689, T_701, GEN_3)
    node GEN_28 = mux(T_689, pad(lhs_in, 130), GEN_19)
    node GEN_29 = mux(T_689, io_req_bits_fn, req_fn)
    node GEN_30 = mux(T_689, io_req_bits_dw, req_dw)
    node GEN_31 = mux(T_689, io_req_bits_in1, req_in1)
    node GEN_32 = mux(T_689, io_req_bits_in2, req_in2)
    node GEN_33 = mux(T_689, io_req_bits_tag, req_tag)
    node T_703 = eq(req_dw, UInt<1>("h0"))
    node T_705 = bits(remainder, 31, 31)
    node T_709 = mux(T_705, UInt<32>("hffffffff"), UInt<32>("h0"))
    node T_710 = bits(remainder, 31, 0)
    node T_711 = cat(T_709, T_710)
    node T_713 = mux(T_703, T_711, T_128)
    node T_714 = eq(state, UInt<3>("h5"))
    node T_715 = eq(state, UInt<3>("h0"))
    io_req_ready <= T_715
    io_resp_valid <= T_714
    io_resp_bits_data <= T_713
    io_resp_bits_tag <= req_tag
    state <= GEN_22
    req_fn <= GEN_29
    req_dw <= GEN_30
    req_in1 <= GEN_31
    req_in2 <= GEN_32
    req_tag <= GEN_33
    count <= GEN_25
    neg_out <= GEN_26
    isMul <= GEN_23
    isHi <= GEN_24
    divisor <= GEN_27
    remainder <= GEN_28

  module Rocket :
    input clk : Clock
    input reset : UInt<1>
    input io_prci_reset : UInt<1>
    input io_prci_id : UInt<1>
    input io_prci_interrupts_meip : UInt<1>
    input io_prci_interrupts_seip : UInt<1>
    input io_prci_interrupts_debug : UInt<1>
    input io_prci_interrupts_mtip : UInt<1>
    input io_prci_interrupts_msip : UInt<1>
    output io_imem_req_valid : UInt<1>
    output io_imem_req_bits_pc : UInt<40>
    output io_imem_req_bits_speculative : UInt<1>
    output io_imem_resp_ready : UInt<1>
    input io_imem_resp_valid : UInt<1>
    input io_imem_resp_bits_btb_valid : UInt<1>
    input io_imem_resp_bits_btb_bits_taken : UInt<1>
    input io_imem_resp_bits_btb_bits_mask : UInt<2>
    input io_imem_resp_bits_btb_bits_bridx : UInt<1>
    input io_imem_resp_bits_btb_bits_target : UInt<39>
    input io_imem_resp_bits_btb_bits_entry : UInt<6>
    input io_imem_resp_bits_btb_bits_bht_history : UInt<7>
    input io_imem_resp_bits_btb_bits_bht_value : UInt<2>
    input io_imem_resp_bits_pc : UInt<40>
    input io_imem_resp_bits_data : UInt<32>
    input io_imem_resp_bits_mask : UInt<2>
    input io_imem_resp_bits_xcpt_if : UInt<1>
    input io_imem_resp_bits_replay : UInt<1>
    output io_imem_btb_update_valid : UInt<1>
    output io_imem_btb_update_bits_prediction_valid : UInt<1>
    output io_imem_btb_update_bits_prediction_bits_taken : UInt<1>
    output io_imem_btb_update_bits_prediction_bits_mask : UInt<2>
    output io_imem_btb_update_bits_prediction_bits_bridx : UInt<1>
    output io_imem_btb_update_bits_prediction_bits_target : UInt<39>
    output io_imem_btb_update_bits_prediction_bits_entry : UInt<6>
    output io_imem_btb_update_bits_prediction_bits_bht_history : UInt<7>
    output io_imem_btb_update_bits_prediction_bits_bht_value : UInt<2>
    output io_imem_btb_update_bits_pc : UInt<39>
    output io_imem_btb_update_bits_target : UInt<39>
    output io_imem_btb_update_bits_taken : UInt<1>
    output io_imem_btb_update_bits_isValid : UInt<1>
    output io_imem_btb_update_bits_isJump : UInt<1>
    output io_imem_btb_update_bits_isReturn : UInt<1>
    output io_imem_btb_update_bits_br_pc : UInt<39>
    output io_imem_bht_update_valid : UInt<1>
    output io_imem_bht_update_bits_prediction_valid : UInt<1>
    output io_imem_bht_update_bits_prediction_bits_taken : UInt<1>
    output io_imem_bht_update_bits_prediction_bits_mask : UInt<2>
    output io_imem_bht_update_bits_prediction_bits_bridx : UInt<1>
    output io_imem_bht_update_bits_prediction_bits_target : UInt<39>
    output io_imem_bht_update_bits_prediction_bits_entry : UInt<6>
    output io_imem_bht_update_bits_prediction_bits_bht_history : UInt<7>
    output io_imem_bht_update_bits_prediction_bits_bht_value : UInt<2>
    output io_imem_bht_update_bits_pc : UInt<39>
    output io_imem_bht_update_bits_taken : UInt<1>
    output io_imem_bht_update_bits_mispredict : UInt<1>
    output io_imem_ras_update_valid : UInt<1>
    output io_imem_ras_update_bits_isCall : UInt<1>
    output io_imem_ras_update_bits_isReturn : UInt<1>
    output io_imem_ras_update_bits_returnAddr : UInt<39>
    output io_imem_ras_update_bits_prediction_valid : UInt<1>
    output io_imem_ras_update_bits_prediction_bits_taken : UInt<1>
    output io_imem_ras_update_bits_prediction_bits_mask : UInt<2>
    output io_imem_ras_update_bits_prediction_bits_bridx : UInt<1>
    output io_imem_ras_update_bits_prediction_bits_target : UInt<39>
    output io_imem_ras_update_bits_prediction_bits_entry : UInt<6>
    output io_imem_ras_update_bits_prediction_bits_bht_history : UInt<7>
    output io_imem_ras_update_bits_prediction_bits_bht_value : UInt<2>
    output io_imem_flush_icache : UInt<1>
    output io_imem_flush_tlb : UInt<1>
    input io_imem_npc : UInt<40>
    input io_dmem_req_ready : UInt<1>
    output io_dmem_req_valid : UInt<1>
    output io_dmem_req_bits_addr : UInt<40>
    output io_dmem_req_bits_tag : UInt<7>
    output io_dmem_req_bits_cmd : UInt<5>
    output io_dmem_req_bits_typ : UInt<3>
    output io_dmem_req_bits_phys : UInt<1>
    output io_dmem_req_bits_data : UInt<64>
    output io_dmem_s1_kill : UInt<1>
    output io_dmem_s1_data : UInt<64>
    input io_dmem_s2_nack : UInt<1>
    input io_dmem_resp_valid : UInt<1>
    input io_dmem_resp_bits_addr : UInt<40>
    input io_dmem_resp_bits_tag : UInt<7>
    input io_dmem_resp_bits_cmd : UInt<5>
    input io_dmem_resp_bits_typ : UInt<3>
    input io_dmem_resp_bits_data : UInt<64>
    input io_dmem_resp_bits_replay : UInt<1>
    input io_dmem_resp_bits_has_data : UInt<1>
    input io_dmem_resp_bits_data_word_bypass : UInt<64>
    input io_dmem_resp_bits_store_data : UInt<64>
    input io_dmem_replay_next : UInt<1>
    input io_dmem_xcpt_ma_ld : UInt<1>
    input io_dmem_xcpt_ma_st : UInt<1>
    input io_dmem_xcpt_pf_ld : UInt<1>
    input io_dmem_xcpt_pf_st : UInt<1>
    output io_dmem_invalidate_lr : UInt<1>
    input io_dmem_ordered : UInt<1>
    output io_ptw_ptbr_asid : UInt<7>
    output io_ptw_ptbr_ppn : UInt<38>
    output io_ptw_invalidate : UInt<1>
    output io_ptw_status_debug : UInt<1>
    output io_ptw_status_isa : UInt<32>
    output io_ptw_status_prv : UInt<2>
    output io_ptw_status_sd : UInt<1>
    output io_ptw_status_zero3 : UInt<31>
    output io_ptw_status_sd_rv32 : UInt<1>
    output io_ptw_status_zero2 : UInt<2>
    output io_ptw_status_vm : UInt<5>
    output io_ptw_status_zero1 : UInt<4>
    output io_ptw_status_mxr : UInt<1>
    output io_ptw_status_pum : UInt<1>
    output io_ptw_status_mprv : UInt<1>
    output io_ptw_status_xs : UInt<2>
    output io_ptw_status_fs : UInt<2>
    output io_ptw_status_mpp : UInt<2>
    output io_ptw_status_hpp : UInt<2>
    output io_ptw_status_spp : UInt<1>
    output io_ptw_status_mpie : UInt<1>
    output io_ptw_status_hpie : UInt<1>
    output io_ptw_status_spie : UInt<1>
    output io_ptw_status_upie : UInt<1>
    output io_ptw_status_mie : UInt<1>
    output io_ptw_status_hie : UInt<1>
    output io_ptw_status_sie : UInt<1>
    output io_ptw_status_uie : UInt<1>
    output io_fpu_inst : UInt<32>
    output io_fpu_fromint_data : UInt<64>
    output io_fpu_fcsr_rm : UInt<3>
    input io_fpu_fcsr_flags_valid : UInt<1>
    input io_fpu_fcsr_flags_bits : UInt<5>
    input io_fpu_store_data : UInt<64>
    input io_fpu_toint_data : UInt<64>
    output io_fpu_dmem_resp_val : UInt<1>
    output io_fpu_dmem_resp_type : UInt<3>
    output io_fpu_dmem_resp_tag : UInt<5>
    output io_fpu_dmem_resp_data : UInt<64>
    output io_fpu_valid : UInt<1>
    input io_fpu_fcsr_rdy : UInt<1>
    input io_fpu_nack_mem : UInt<1>
    input io_fpu_illegal_rm : UInt<1>
    output io_fpu_killx : UInt<1>
    output io_fpu_killm : UInt<1>
    input io_fpu_dec_cmd : UInt<5>
    input io_fpu_dec_ldst : UInt<1>
    input io_fpu_dec_wen : UInt<1>
    input io_fpu_dec_ren1 : UInt<1>
    input io_fpu_dec_ren2 : UInt<1>
    input io_fpu_dec_ren3 : UInt<1>
    input io_fpu_dec_swap12 : UInt<1>
    input io_fpu_dec_swap23 : UInt<1>
    input io_fpu_dec_single : UInt<1>
    input io_fpu_dec_fromint : UInt<1>
    input io_fpu_dec_toint : UInt<1>
    input io_fpu_dec_fastpipe : UInt<1>
    input io_fpu_dec_fma : UInt<1>
    input io_fpu_dec_div : UInt<1>
    input io_fpu_dec_sqrt : UInt<1>
    input io_fpu_dec_round : UInt<1>
    input io_fpu_dec_wflags : UInt<1>
    input io_fpu_sboard_set : UInt<1>
    input io_fpu_sboard_clr : UInt<1>
    input io_fpu_sboard_clra : UInt<5>
    input io_fpu_cp_req_ready : UInt<1>
    output io_fpu_cp_req_valid : UInt<1>
    output io_fpu_cp_req_bits_cmd : UInt<5>
    output io_fpu_cp_req_bits_ldst : UInt<1>
    output io_fpu_cp_req_bits_wen : UInt<1>
    output io_fpu_cp_req_bits_ren1 : UInt<1>
    output io_fpu_cp_req_bits_ren2 : UInt<1>
    output io_fpu_cp_req_bits_ren3 : UInt<1>
    output io_fpu_cp_req_bits_swap12 : UInt<1>
    output io_fpu_cp_req_bits_swap23 : UInt<1>
    output io_fpu_cp_req_bits_single : UInt<1>
    output io_fpu_cp_req_bits_fromint : UInt<1>
    output io_fpu_cp_req_bits_toint : UInt<1>
    output io_fpu_cp_req_bits_fastpipe : UInt<1>
    output io_fpu_cp_req_bits_fma : UInt<1>
    output io_fpu_cp_req_bits_div : UInt<1>
    output io_fpu_cp_req_bits_sqrt : UInt<1>
    output io_fpu_cp_req_bits_round : UInt<1>
    output io_fpu_cp_req_bits_wflags : UInt<1>
    output io_fpu_cp_req_bits_rm : UInt<3>
    output io_fpu_cp_req_bits_typ : UInt<2>
    output io_fpu_cp_req_bits_in1 : UInt<65>
    output io_fpu_cp_req_bits_in2 : UInt<65>
    output io_fpu_cp_req_bits_in3 : UInt<65>
    output io_fpu_cp_resp_ready : UInt<1>
    input io_fpu_cp_resp_valid : UInt<1>
    input io_fpu_cp_resp_bits_data : UInt<65>
    input io_fpu_cp_resp_bits_exc : UInt<5>
    input io_rocc_cmd_ready : UInt<1>
    output io_rocc_cmd_valid : UInt<1>
    output io_rocc_cmd_bits_inst_funct : UInt<7>
    output io_rocc_cmd_bits_inst_rs2 : UInt<5>
    output io_rocc_cmd_bits_inst_rs1 : UInt<5>
    output io_rocc_cmd_bits_inst_xd : UInt<1>
    output io_rocc_cmd_bits_inst_xs1 : UInt<1>
    output io_rocc_cmd_bits_inst_xs2 : UInt<1>
    output io_rocc_cmd_bits_inst_rd : UInt<5>
    output io_rocc_cmd_bits_inst_opcode : UInt<7>
    output io_rocc_cmd_bits_rs1 : UInt<64>
    output io_rocc_cmd_bits_rs2 : UInt<64>
    output io_rocc_cmd_bits_status_debug : UInt<1>
    output io_rocc_cmd_bits_status_isa : UInt<32>
    output io_rocc_cmd_bits_status_prv : UInt<2>
    output io_rocc_cmd_bits_status_sd : UInt<1>
    output io_rocc_cmd_bits_status_zero3 : UInt<31>
    output io_rocc_cmd_bits_status_sd_rv32 : UInt<1>
    output io_rocc_cmd_bits_status_zero2 : UInt<2>
    output io_rocc_cmd_bits_status_vm : UInt<5>
    output io_rocc_cmd_bits_status_zero1 : UInt<4>
    output io_rocc_cmd_bits_status_mxr : UInt<1>
    output io_rocc_cmd_bits_status_pum : UInt<1>
    output io_rocc_cmd_bits_status_mprv : UInt<1>
    output io_rocc_cmd_bits_status_xs : UInt<2>
    output io_rocc_cmd_bits_status_fs : UInt<2>
    output io_rocc_cmd_bits_status_mpp : UInt<2>
    output io_rocc_cmd_bits_status_hpp : UInt<2>
    output io_rocc_cmd_bits_status_spp : UInt<1>
    output io_rocc_cmd_bits_status_mpie : UInt<1>
    output io_rocc_cmd_bits_status_hpie : UInt<1>
    output io_rocc_cmd_bits_status_spie : UInt<1>
    output io_rocc_cmd_bits_status_upie : UInt<1>
    output io_rocc_cmd_bits_status_mie : UInt<1>
    output io_rocc_cmd_bits_status_hie : UInt<1>
    output io_rocc_cmd_bits_status_sie : UInt<1>
    output io_rocc_cmd_bits_status_uie : UInt<1>
    output io_rocc_resp_ready : UInt<1>
    input io_rocc_resp_valid : UInt<1>
    input io_rocc_resp_bits_rd : UInt<5>
    input io_rocc_resp_bits_data : UInt<64>
    output io_rocc_mem_req_ready : UInt<1>
    input io_rocc_mem_req_valid : UInt<1>
    input io_rocc_mem_req_bits_addr : UInt<40>
    input io_rocc_mem_req_bits_tag : UInt<7>
    input io_rocc_mem_req_bits_cmd : UInt<5>
    input io_rocc_mem_req_bits_typ : UInt<3>
    input io_rocc_mem_req_bits_phys : UInt<1>
    input io_rocc_mem_req_bits_data : UInt<64>
    input io_rocc_mem_s1_kill : UInt<1>
    input io_rocc_mem_s1_data : UInt<64>
    output io_rocc_mem_s2_nack : UInt<1>
    output io_rocc_mem_resp_valid : UInt<1>
    output io_rocc_mem_resp_bits_addr : UInt<40>
    output io_rocc_mem_resp_bits_tag : UInt<7>
    output io_rocc_mem_resp_bits_cmd : UInt<5>
    output io_rocc_mem_resp_bits_typ : UInt<3>
    output io_rocc_mem_resp_bits_data : UInt<64>
    output io_rocc_mem_resp_bits_replay : UInt<1>
    output io_rocc_mem_resp_bits_has_data : UInt<1>
    output io_rocc_mem_resp_bits_data_word_bypass : UInt<64>
    output io_rocc_mem_resp_bits_store_data : UInt<64>
    output io_rocc_mem_replay_next : UInt<1>
    output io_rocc_mem_xcpt_ma_ld : UInt<1>
    output io_rocc_mem_xcpt_ma_st : UInt<1>
    output io_rocc_mem_xcpt_pf_ld : UInt<1>
    output io_rocc_mem_xcpt_pf_st : UInt<1>
    input io_rocc_mem_invalidate_lr : UInt<1>
    output io_rocc_mem_ordered : UInt<1>
    input io_rocc_busy : UInt<1>
    input io_rocc_interrupt : UInt<1>
    output io_rocc_autl_acquire_ready : UInt<1>
    input io_rocc_autl_acquire_valid : UInt<1>
    input io_rocc_autl_acquire_bits_addr_block : UInt<26>
    input io_rocc_autl_acquire_bits_client_xact_id : UInt<1>
    input io_rocc_autl_acquire_bits_addr_beat : UInt<3>
    input io_rocc_autl_acquire_bits_is_builtin_type : UInt<1>
    input io_rocc_autl_acquire_bits_a_type : UInt<3>
    input io_rocc_autl_acquire_bits_union : UInt<11>
    input io_rocc_autl_acquire_bits_data : UInt<64>
    input io_rocc_autl_grant_ready : UInt<1>
    output io_rocc_autl_grant_valid : UInt<1>
    output io_rocc_autl_grant_bits_addr_beat : UInt<3>
    output io_rocc_autl_grant_bits_client_xact_id : UInt<1>
    output io_rocc_autl_grant_bits_manager_xact_id : UInt<4>
    output io_rocc_autl_grant_bits_is_builtin_type : UInt<1>
    output io_rocc_autl_grant_bits_g_type : UInt<4>
    output io_rocc_autl_grant_bits_data : UInt<64>
    output io_rocc_fpu_req_ready : UInt<1>
    input io_rocc_fpu_req_valid : UInt<1>
    input io_rocc_fpu_req_bits_cmd : UInt<5>
    input io_rocc_fpu_req_bits_ldst : UInt<1>
    input io_rocc_fpu_req_bits_wen : UInt<1>
    input io_rocc_fpu_req_bits_ren1 : UInt<1>
    input io_rocc_fpu_req_bits_ren2 : UInt<1>
    input io_rocc_fpu_req_bits_ren3 : UInt<1>
    input io_rocc_fpu_req_bits_swap12 : UInt<1>
    input io_rocc_fpu_req_bits_swap23 : UInt<1>
    input io_rocc_fpu_req_bits_single : UInt<1>
    input io_rocc_fpu_req_bits_fromint : UInt<1>
    input io_rocc_fpu_req_bits_toint : UInt<1>
    input io_rocc_fpu_req_bits_fastpipe : UInt<1>
    input io_rocc_fpu_req_bits_fma : UInt<1>
    input io_rocc_fpu_req_bits_div : UInt<1>
    input io_rocc_fpu_req_bits_sqrt : UInt<1>
    input io_rocc_fpu_req_bits_round : UInt<1>
    input io_rocc_fpu_req_bits_wflags : UInt<1>
    input io_rocc_fpu_req_bits_rm : UInt<3>
    input io_rocc_fpu_req_bits_typ : UInt<2>
    input io_rocc_fpu_req_bits_in1 : UInt<65>
    input io_rocc_fpu_req_bits_in2 : UInt<65>
    input io_rocc_fpu_req_bits_in3 : UInt<65>
    input io_rocc_fpu_resp_ready : UInt<1>
    output io_rocc_fpu_resp_valid : UInt<1>
    output io_rocc_fpu_resp_bits_data : UInt<65>
    output io_rocc_fpu_resp_bits_exc : UInt<5>
    output io_rocc_exception : UInt<1>
  
    reg ex_ctrl_legal : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_legal)
    reg ex_ctrl_fp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_fp)
    reg ex_ctrl_rocc : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_rocc)
    reg ex_ctrl_branch : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_branch)
    reg ex_ctrl_jal : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_jal)
    reg ex_ctrl_jalr : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_jalr)
    reg ex_ctrl_rxs2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_rxs2)
    reg ex_ctrl_rxs1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_rxs1)
    reg ex_ctrl_sel_alu2 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_sel_alu2)
    reg ex_ctrl_sel_alu1 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_sel_alu1)
    reg ex_ctrl_sel_imm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_sel_imm)
    reg ex_ctrl_alu_dw : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_alu_dw)
    reg ex_ctrl_alu_fn : UInt<4>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_alu_fn)
    reg ex_ctrl_mem : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_mem)
    reg ex_ctrl_mem_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_mem_cmd)
    reg ex_ctrl_mem_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_mem_type)
    reg ex_ctrl_rfs1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_rfs1)
    reg ex_ctrl_rfs2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_rfs2)
    reg ex_ctrl_rfs3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_rfs3)
    reg ex_ctrl_wfd : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_wfd)
    reg ex_ctrl_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_div)
    reg ex_ctrl_wxd : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_wxd)
    reg ex_ctrl_csr : UInt<3>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_csr)
    reg ex_ctrl_fence_i : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_fence_i)
    reg ex_ctrl_fence : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_fence)
    reg ex_ctrl_amo : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_amo)
    reg ex_ctrl_dp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_ctrl_dp)
    reg mem_ctrl_legal : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_legal)
    reg mem_ctrl_fp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_fp)
    reg mem_ctrl_rocc : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_rocc)
    reg mem_ctrl_branch : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_branch)
    reg mem_ctrl_jal : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_jal)
    reg mem_ctrl_jalr : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_jalr)
    reg mem_ctrl_rxs2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_rxs2)
    reg mem_ctrl_rxs1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_rxs1)
    reg mem_ctrl_sel_alu2 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_sel_alu2)
    reg mem_ctrl_sel_alu1 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_sel_alu1)
    reg mem_ctrl_sel_imm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_sel_imm)
    reg mem_ctrl_alu_dw : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_alu_dw)
    reg mem_ctrl_alu_fn : UInt<4>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_alu_fn)
    reg mem_ctrl_mem : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_mem)
    reg mem_ctrl_mem_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_mem_cmd)
    reg mem_ctrl_mem_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_mem_type)
    reg mem_ctrl_rfs1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_rfs1)
    reg mem_ctrl_rfs2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_rfs2)
    reg mem_ctrl_rfs3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_rfs3)
    reg mem_ctrl_wfd : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_wfd)
    reg mem_ctrl_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_div)
    reg mem_ctrl_wxd : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_wxd)
    reg mem_ctrl_csr : UInt<3>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_csr)
    reg mem_ctrl_fence_i : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_fence_i)
    reg mem_ctrl_fence : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_fence)
    reg mem_ctrl_amo : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_amo)
    reg mem_ctrl_dp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_dp)
    reg wb_ctrl_legal : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_legal)
    reg wb_ctrl_fp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_fp)
    reg wb_ctrl_rocc : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_rocc)
    reg wb_ctrl_branch : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_branch)
    reg wb_ctrl_jal : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_jal)
    reg wb_ctrl_jalr : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_jalr)
    reg wb_ctrl_rxs2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_rxs2)
    reg wb_ctrl_rxs1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_rxs1)
    reg wb_ctrl_sel_alu2 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_sel_alu2)
    reg wb_ctrl_sel_alu1 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_sel_alu1)
    reg wb_ctrl_sel_imm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_sel_imm)
    reg wb_ctrl_alu_dw : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_alu_dw)
    reg wb_ctrl_alu_fn : UInt<4>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_alu_fn)
    reg wb_ctrl_mem : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_mem)
    reg wb_ctrl_mem_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_mem_cmd)
    reg wb_ctrl_mem_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_mem_type)
    reg wb_ctrl_rfs1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_rfs1)
    reg wb_ctrl_rfs2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_rfs2)
    reg wb_ctrl_rfs3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_rfs3)
    reg wb_ctrl_wfd : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_wfd)
    reg wb_ctrl_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_div)
    reg wb_ctrl_wxd : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_wxd)
    reg wb_ctrl_csr : UInt<3>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_csr)
    reg wb_ctrl_fence_i : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_fence_i)
    reg wb_ctrl_fence : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_fence)
    reg wb_ctrl_amo : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_amo)
    reg wb_ctrl_dp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_dp)
    reg ex_reg_xcpt_interrupt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_xcpt_interrupt)
    reg ex_reg_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_valid)
    reg ex_reg_rvc : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_rvc)
    reg ex_reg_btb_hit : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_btb_hit)
    reg ex_reg_btb_resp_taken : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_btb_resp_taken)
    reg ex_reg_btb_resp_mask : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ex_reg_btb_resp_mask)
    reg ex_reg_btb_resp_bridx : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_btb_resp_bridx)
    reg ex_reg_btb_resp_target : UInt<39>, clk with :
      reset => (UInt<1>("h0"), ex_reg_btb_resp_target)
    reg ex_reg_btb_resp_entry : UInt<6>, clk with :
      reset => (UInt<1>("h0"), ex_reg_btb_resp_entry)
    reg ex_reg_btb_resp_bht_history : UInt<7>, clk with :
      reset => (UInt<1>("h0"), ex_reg_btb_resp_bht_history)
    reg ex_reg_btb_resp_bht_value : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ex_reg_btb_resp_bht_value)
    reg ex_reg_xcpt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_xcpt)
    reg ex_reg_flush_pipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_flush_pipe)
    reg ex_reg_load_use : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_load_use)
    reg ex_reg_cause : UInt<64>, clk with :
      reset => (UInt<1>("h0"), ex_reg_cause)
    reg ex_reg_replay : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_replay)
    reg ex_reg_pc : UInt<40>, clk with :
      reset => (UInt<1>("h0"), ex_reg_pc)
    reg ex_reg_inst : UInt<32>, clk with :
      reset => (UInt<1>("h0"), ex_reg_inst)
    reg mem_reg_xcpt_interrupt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_xcpt_interrupt)
    reg mem_reg_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_valid)
    reg mem_reg_rvc : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_rvc)
    reg mem_reg_btb_hit : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_btb_hit)
    reg mem_reg_btb_resp_taken : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_btb_resp_taken)
    reg mem_reg_btb_resp_mask : UInt<2>, clk with :
      reset => (UInt<1>("h0"), mem_reg_btb_resp_mask)
    reg mem_reg_btb_resp_bridx : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_btb_resp_bridx)
    reg mem_reg_btb_resp_target : UInt<39>, clk with :
      reset => (UInt<1>("h0"), mem_reg_btb_resp_target)
    reg mem_reg_btb_resp_entry : UInt<6>, clk with :
      reset => (UInt<1>("h0"), mem_reg_btb_resp_entry)
    reg mem_reg_btb_resp_bht_history : UInt<7>, clk with :
      reset => (UInt<1>("h0"), mem_reg_btb_resp_bht_history)
    reg mem_reg_btb_resp_bht_value : UInt<2>, clk with :
      reset => (UInt<1>("h0"), mem_reg_btb_resp_bht_value)
    reg mem_reg_xcpt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_xcpt)
    reg mem_reg_replay : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_replay)
    reg mem_reg_flush_pipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_flush_pipe)
    reg mem_reg_cause : UInt<64>, clk with :
      reset => (UInt<1>("h0"), mem_reg_cause)
    reg mem_reg_slow_bypass : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_slow_bypass)
    reg mem_reg_load : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_load)
    reg mem_reg_store : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_reg_store)
    reg mem_reg_pc : UInt<40>, clk with :
      reset => (UInt<1>("h0"), mem_reg_pc)
    reg mem_reg_inst : UInt<32>, clk with :
      reset => (UInt<1>("h0"), mem_reg_inst)
    reg mem_reg_wdata : UInt<64>, clk with :
      reset => (UInt<1>("h0"), mem_reg_wdata)
    reg mem_reg_rs2 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), mem_reg_rs2)
    wire take_pc_mem : UInt<1>
    reg wb_reg_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_reg_valid)
    reg wb_reg_xcpt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_reg_xcpt)
    reg wb_reg_replay : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_reg_replay)
    reg wb_reg_cause : UInt<64>, clk with :
      reset => (UInt<1>("h0"), wb_reg_cause)
    reg wb_reg_pc : UInt<40>, clk with :
      reset => (UInt<1>("h0"), wb_reg_pc)
    reg wb_reg_inst : UInt<32>, clk with :
      reset => (UInt<1>("h0"), wb_reg_inst)
    reg wb_reg_wdata : UInt<64>, clk with :
      reset => (UInt<1>("h0"), wb_reg_wdata)
    reg wb_reg_rs2 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), wb_reg_rs2)
    wire take_pc_wb : UInt<1>
    wire take_pc_id : UInt<1>
    node take_pc_mem_wb = or(take_pc_wb, take_pc_mem)
    node take_pc = or(take_pc_mem_wb, UInt<1>("h0"))
    inst ibuf of IBuf
    wire id_ctrl_legal : UInt<1>
    wire id_ctrl_fp : UInt<1>
    wire id_ctrl_rocc : UInt<1>
    wire id_ctrl_branch : UInt<1>
    wire id_ctrl_jal : UInt<1>
    wire id_ctrl_jalr : UInt<1>
    wire id_ctrl_rxs2 : UInt<1>
    wire id_ctrl_rxs1 : UInt<1>
    wire id_ctrl_sel_alu2 : UInt<2>
    wire id_ctrl_sel_alu1 : UInt<2>
    wire id_ctrl_sel_imm : UInt<3>
    wire id_ctrl_alu_dw : UInt<1>
    wire id_ctrl_alu_fn : UInt<4>
    wire id_ctrl_mem : UInt<1>
    wire id_ctrl_mem_cmd : UInt<5>
    wire id_ctrl_mem_type : UInt<3>
    wire id_ctrl_rfs1 : UInt<1>
    wire id_ctrl_rfs2 : UInt<1>
    wire id_ctrl_rfs3 : UInt<1>
    wire id_ctrl_wfd : UInt<1>
    wire id_ctrl_div : UInt<1>
    wire id_ctrl_wxd : UInt<1>
    wire id_ctrl_csr : UInt<3>
    wire id_ctrl_fence_i : UInt<1>
    wire id_ctrl_fence : UInt<1>
    wire id_ctrl_amo : UInt<1>
    wire id_ctrl_dp : UInt<1>
    node T_6680 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h207f"))
    node T_6682 = eq(T_6680, UInt<32>("h3"))
    node T_6684 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h106f"))
    node T_6686 = eq(T_6684, UInt<32>("h3"))
    node T_6688 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h607f"))
    node T_6690 = eq(T_6688, UInt<32>("hf"))
    node T_6692 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h7077"))
    node T_6694 = eq(T_6692, UInt<32>("h13"))
    node T_6696 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h5f"))
    node T_6698 = eq(T_6696, UInt<32>("h17"))
    node T_6700 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hfc00007f"))
    node T_6702 = eq(T_6700, UInt<32>("h33"))
    node T_6704 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hbe007077"))
    node T_6706 = eq(T_6704, UInt<32>("h33"))
    node T_6708 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h4000073"))
    node T_6710 = eq(T_6708, UInt<32>("h43"))
    node T_6712 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("he400007f"))
    node T_6714 = eq(T_6712, UInt<32>("h53"))
    node T_6716 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h707b"))
    node T_6718 = eq(T_6716, UInt<32>("h63"))
    node T_6720 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h7f"))
    node T_6722 = eq(T_6720, UInt<32>("h6f"))
    node T_6724 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hffefffff"))
    node T_6726 = eq(T_6724, UInt<32>("h73"))
    node T_6728 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hfc00305f"))
    node T_6730 = eq(T_6728, UInt<32>("h1013"))
    node T_6732 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hfe00305f"))
    node T_6734 = eq(T_6732, UInt<32>("h101b"))
    node T_6736 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h605b"))
    node T_6738 = eq(T_6736, UInt<32>("h2003"))
    node T_6742 = eq(T_6680, UInt<32>("h2013"))
    node T_6744 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h1800607f"))
    node T_6746 = eq(T_6744, UInt<32>("h202f"))
    node T_6750 = eq(T_6680, UInt<32>("h2073"))
    node T_6752 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hbc00707f"))
    node T_6754 = eq(T_6752, UInt<32>("h5013"))
    node T_6756 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hbe00705f"))
    node T_6758 = eq(T_6756, UInt<32>("h501b"))
    node T_6762 = eq(T_6704, UInt<32>("h5033"))
    node T_6764 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hfe004077"))
    node T_6766 = eq(T_6764, UInt<32>("h2004033"))
    node T_6768 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("he800607f"))
    node T_6770 = eq(T_6768, UInt<32>("h800202f"))
    node T_6772 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hf9f0607f"))
    node T_6774 = eq(T_6772, UInt<32>("h1000202f"))
    node T_6776 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hdfffffff"))
    node T_6778 = eq(T_6776, UInt<32>("h10200073"))
    node T_6780 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hfff07fff"))
    node T_6782 = eq(T_6780, UInt<32>("h10400073"))
    node T_6784 = eq(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h10500073"))
    node T_6786 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hf400607f"))
    node T_6788 = eq(T_6786, UInt<32>("h20000053"))
    node T_6790 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h7c00607f"))
    node T_6792 = eq(T_6790, UInt<32>("h20000053"))
    node T_6794 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h7c00507f"))
    node T_6796 = eq(T_6794, UInt<32>("h20000053"))
    node T_6798 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h7ff0007f"))
    node T_6800 = eq(T_6798, UInt<32>("h40100053"))
    node T_6804 = eq(T_6798, UInt<32>("h42000053"))
    node T_6806 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hfdf0007f"))
    node T_6808 = eq(T_6806, UInt<32>("h58000053"))
    node T_6810 = eq(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h7b200073"))
    node T_6812 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hedc0007f"))
    node T_6814 = eq(T_6812, UInt<32>("hc0000053"))
    node T_6816 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hfdf0607f"))
    node T_6818 = eq(T_6816, UInt<32>("he0000053"))
    node T_6820 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hedf0707f"))
    node T_6822 = eq(T_6820, UInt<32>("he0000053"))
    node T_6824 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h603f"))
    node T_6826 = eq(T_6824, UInt<32>("h23"))
    node T_6828 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h306f"))
    node T_6830 = eq(T_6828, UInt<32>("h1063"))
    node T_6832 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h407f"))
    node T_6834 = eq(T_6832, UInt<32>("h4063"))
    node T_6836 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hfc007077"))
    node T_6838 = eq(T_6836, UInt<32>("h33"))
    node T_6841 = or(T_6682, T_6686)
    node T_6842 = or(T_6841, T_6690)
    node T_6843 = or(T_6842, T_6694)
    node T_6844 = or(T_6843, T_6698)
    node T_6845 = or(T_6844, T_6702)
    node T_6846 = or(T_6845, T_6706)
    node T_6847 = or(T_6846, T_6710)
    node T_6848 = or(T_6847, T_6714)
    node T_6849 = or(T_6848, T_6718)
    node T_6850 = or(T_6849, T_6722)
    node T_6851 = or(T_6850, T_6726)
    node T_6852 = or(T_6851, T_6730)
    node T_6853 = or(T_6852, T_6734)
    node T_6854 = or(T_6853, T_6738)
    node T_6855 = or(T_6854, T_6742)
    node T_6856 = or(T_6855, T_6746)
    node T_6857 = or(T_6856, T_6750)
    node T_6858 = or(T_6857, T_6754)
    node T_6859 = or(T_6858, T_6758)
    node T_6860 = or(T_6859, T_6762)
    node T_6861 = or(T_6860, T_6766)
    node T_6862 = or(T_6861, T_6770)
    node T_6863 = or(T_6862, T_6774)
    node T_6864 = or(T_6863, T_6778)
    node T_6865 = or(T_6864, T_6782)
    node T_6866 = or(T_6865, T_6784)
    node T_6867 = or(T_6866, T_6788)
    node T_6868 = or(T_6867, T_6792)
    node T_6869 = or(T_6868, T_6796)
    node T_6870 = or(T_6869, T_6800)
    node T_6871 = or(T_6870, T_6804)
    node T_6872 = or(T_6871, T_6808)
    node T_6873 = or(T_6872, T_6810)
    node T_6874 = or(T_6873, T_6814)
    node T_6875 = or(T_6874, T_6818)
    node T_6876 = or(T_6875, T_6822)
    node T_6877 = or(T_6876, T_6826)
    node T_6878 = or(T_6877, T_6830)
    node T_6879 = or(T_6878, T_6834)
    node T_6880 = or(T_6879, T_6838)
    node T_6882 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h5c"))
    node T_6884 = eq(T_6882, UInt<32>("h4"))
    node T_6886 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h60"))
    node T_6888 = eq(T_6886, UInt<32>("h40"))
    node T_6891 = or(T_6884, T_6888)
    node T_6894 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h74"))
    node T_6896 = eq(T_6894, UInt<32>("h60"))
    node T_6900 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h68"))
    node T_6902 = eq(T_6900, UInt<32>("h68"))
    node T_6906 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h203c"))
    node T_6908 = eq(T_6906, UInt<32>("h24"))
    node T_6912 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h64"))
    node T_6914 = eq(T_6912, UInt<32>("h20"))
    node T_6916 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h34"))
    node T_6918 = eq(T_6916, UInt<32>("h20"))
    node T_6920 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2048"))
    node T_6922 = eq(T_6920, UInt<32>("h2008"))
    node T_6925 = or(T_6914, T_6918)
    node T_6926 = or(T_6925, T_6922)
    node T_6928 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h44"))
    node T_6930 = eq(T_6928, UInt<32>("h0"))
    node T_6932 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h4024"))
    node T_6934 = eq(T_6932, UInt<32>("h20"))
    node T_6936 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h38"))
    node T_6938 = eq(T_6936, UInt<32>("h20"))
    node T_6940 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2050"))
    node T_6942 = eq(T_6940, UInt<32>("h2000"))
    node T_6944 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h90000034"))
    node T_6946 = eq(T_6944, UInt<32>("h90000010"))
    node T_6949 = or(T_6930, T_6934)
    node T_6950 = or(T_6949, T_6938)
    node T_6951 = or(T_6950, T_6942)
    node T_6952 = or(T_6951, T_6946)
    node T_6954 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h58"))
    node T_6956 = eq(T_6954, UInt<32>("h0"))
    node T_6958 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h20"))
    node T_6960 = eq(T_6958, UInt<32>("h0"))
    node T_6962 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hc"))
    node T_6964 = eq(T_6962, UInt<32>("h4"))
    node T_6966 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h48"))
    node T_6968 = eq(T_6966, UInt<32>("h48"))
    node T_6970 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h4050"))
    node T_6972 = eq(T_6970, UInt<32>("h4050"))
    node T_6975 = or(T_6956, T_6960)
    node T_6976 = or(T_6975, T_6964)
    node T_6977 = or(T_6976, T_6968)
    node T_6978 = or(T_6977, T_6972)
    node T_6982 = eq(T_6966, UInt<32>("h0"))
    node T_6984 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h18"))
    node T_6986 = eq(T_6984, UInt<32>("h0"))
    node T_6988 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h4008"))
    node T_6990 = eq(T_6988, UInt<32>("h4000"))
    node T_6993 = or(T_6982, T_6930)
    node T_6994 = or(T_6993, T_6986)
    node T_6995 = or(T_6994, T_6990)
    node T_6996 = cat(T_6995, T_6978)
    node T_6998 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h4004"))
    node T_7000 = eq(T_6998, UInt<32>("h0"))
    node T_7002 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h50"))
    node T_7004 = eq(T_7002, UInt<32>("h0"))
    node T_7006 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h24"))
    node T_7008 = eq(T_7006, UInt<32>("h0"))
    node T_7011 = or(T_7000, T_7004)
    node T_7012 = or(T_7011, T_6930)
    node T_7013 = or(T_7012, T_7008)
    node T_7014 = or(T_7013, T_6986)
    node T_7018 = eq(T_6916, UInt<32>("h14"))
    node T_7021 = or(T_7018, T_6968)
    node T_7022 = cat(T_7021, T_7014)
    node T_7026 = eq(T_6984, UInt<32>("h8"))
    node T_7030 = eq(T_6928, UInt<32>("h40"))
    node T_7033 = or(T_7026, T_7030)
    node T_7035 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h14"))
    node T_7037 = eq(T_7035, UInt<32>("h14"))
    node T_7040 = or(T_7026, T_7037)
    node T_7042 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h30"))
    node T_7044 = eq(T_7042, UInt<32>("h0"))
    node T_7046 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h201c"))
    node T_7048 = eq(T_7046, UInt<32>("h4"))
    node T_7052 = eq(T_7035, UInt<32>("h10"))
    node T_7055 = or(T_7044, T_7048)
    node T_7056 = or(T_7055, T_7052)
    node T_7057 = cat(T_7056, T_7040)
    node T_7058 = cat(T_7057, T_7033)
    node T_7060 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h10"))
    node T_7062 = eq(T_7060, UInt<32>("h0"))
    node T_7064 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h8"))
    node T_7066 = eq(T_7064, UInt<32>("h0"))
    node T_7069 = or(T_7062, T_7066)
    node T_7071 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h3054"))
    node T_7073 = eq(T_7071, UInt<32>("h1010"))
    node T_7075 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h1058"))
    node T_7077 = eq(T_7075, UInt<32>("h1040"))
    node T_7079 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h7044"))
    node T_7081 = eq(T_7079, UInt<32>("h7000"))
    node T_7084 = or(T_7073, T_7077)
    node T_7085 = or(T_7084, T_7081)
    node T_7087 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h4054"))
    node T_7089 = eq(T_7087, UInt<32>("h40"))
    node T_7091 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2058"))
    node T_7093 = eq(T_7091, UInt<32>("h2040"))
    node T_7097 = eq(T_7071, UInt<32>("h3010"))
    node T_7099 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h6054"))
    node T_7101 = eq(T_7099, UInt<32>("h6010"))
    node T_7103 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h40003034"))
    node T_7105 = eq(T_7103, UInt<32>("h40000030"))
    node T_7107 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h40001054"))
    node T_7109 = eq(T_7107, UInt<32>("h40001010"))
    node T_7112 = or(T_7089, T_7093)
    node T_7113 = or(T_7112, T_7097)
    node T_7114 = or(T_7113, T_7101)
    node T_7115 = or(T_7114, T_7105)
    node T_7116 = or(T_7115, T_7109)
    node T_7118 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2054"))
    node T_7120 = eq(T_7118, UInt<32>("h2010"))
    node T_7122 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h40004054"))
    node T_7124 = eq(T_7122, UInt<32>("h4010"))
    node T_7126 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h5054"))
    node T_7128 = eq(T_7126, UInt<32>("h4010"))
    node T_7130 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h4058"))
    node T_7132 = eq(T_7130, UInt<32>("h4040"))
    node T_7135 = or(T_7120, T_7124)
    node T_7136 = or(T_7135, T_7128)
    node T_7137 = or(T_7136, T_7132)
    node T_7141 = eq(T_7099, UInt<32>("h2010"))
    node T_7143 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h40003054"))
    node T_7145 = eq(T_7143, UInt<32>("h40001010"))
    node T_7148 = or(T_7141, T_7132)
    node T_7149 = or(T_7148, T_7105)
    node T_7150 = or(T_7149, T_7145)
    node T_7151 = cat(T_7116, T_7085)
    node T_7152 = cat(T_7150, T_7137)
    node T_7153 = cat(T_7152, T_7151)
    node T_7155 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h405f"))
    node T_7157 = eq(T_7155, UInt<32>("h3"))
    node T_7159 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h107f"))
    node T_7161 = eq(T_7159, UInt<32>("h3"))
    node T_7163 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h707f"))
    node T_7165 = eq(T_7163, UInt<32>("h100f"))
    node T_7168 = or(T_7157, T_6682)
    node T_7169 = or(T_7168, T_7161)
    node T_7170 = or(T_7169, T_7165)
    node T_7171 = or(T_7170, T_6738)
    node T_7172 = or(T_7171, T_6746)
    node T_7173 = or(T_7172, T_6770)
    node T_7174 = or(T_7173, T_6774)
    node T_7176 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2008"))
    node T_7178 = eq(T_7176, UInt<32>("h8"))
    node T_7180 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h28"))
    node T_7182 = eq(T_7180, UInt<32>("h20"))
    node T_7184 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h18000020"))
    node T_7186 = eq(T_7184, UInt<32>("h18000020"))
    node T_7188 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h20000020"))
    node T_7190 = eq(T_7188, UInt<32>("h20000020"))
    node T_7193 = or(T_7178, T_7182)
    node T_7194 = or(T_7193, T_7186)
    node T_7195 = or(T_7194, T_7190)
    node T_7197 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h10002008"))
    node T_7199 = eq(T_7197, UInt<32>("h10002008"))
    node T_7201 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h40002008"))
    node T_7203 = eq(T_7201, UInt<32>("h40002008"))
    node T_7206 = or(T_7199, T_7203)
    node T_7208 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h8000008"))
    node T_7210 = eq(T_7208, UInt<32>("h8000008"))
    node T_7212 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h10000008"))
    node T_7214 = eq(T_7212, UInt<32>("h10000008"))
    node T_7216 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h80000008"))
    node T_7218 = eq(T_7216, UInt<32>("h80000008"))
    node T_7221 = or(T_7178, T_7210)
    node T_7222 = or(T_7221, T_7214)
    node T_7223 = or(T_7222, T_7218)
    node T_7225 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h18002008"))
    node T_7227 = eq(T_7225, UInt<32>("h2008"))
    node T_7231 = cat(T_7206, T_7195)
    node T_7232 = cat(UInt<1>("h0"), T_7227)
    node T_7233 = cat(T_7232, T_7223)
    node T_7234 = cat(T_7233, T_7231)
    node T_7236 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h1000"))
    node T_7238 = eq(T_7236, UInt<32>("h1000"))
    node T_7242 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2000"))
    node T_7244 = eq(T_7242, UInt<32>("h2000"))
    node T_7248 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h4000"))
    node T_7250 = eq(T_7248, UInt<32>("h4000"))
    node T_7253 = cat(T_7250, T_7244)
    node T_7254 = cat(T_7253, T_7238)
    node T_7256 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h80000060"))
    node T_7258 = eq(T_7256, UInt<32>("h40"))
    node T_7260 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h10000060"))
    node T_7262 = eq(T_7260, UInt<32>("h40"))
    node T_7264 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h70"))
    node T_7266 = eq(T_7264, UInt<32>("h40"))
    node T_7269 = or(T_7258, T_7262)
    node T_7270 = or(T_7269, T_7266)
    node T_7272 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h7c"))
    node T_7274 = eq(T_7272, UInt<32>("h24"))
    node T_7276 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h40000060"))
    node T_7278 = eq(T_7276, UInt<32>("h40"))
    node T_7280 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h90000060"))
    node T_7282 = eq(T_7280, UInt<32>("h10000040"))
    node T_7285 = or(T_7274, T_7278)
    node T_7286 = or(T_7285, T_7266)
    node T_7287 = or(T_7286, T_7282)
    node T_7291 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h3c"))
    node T_7293 = eq(T_7291, UInt<32>("h4"))
    node T_7297 = eq(T_7260, UInt<32>("h10000040"))
    node T_7300 = or(T_7293, T_7258)
    node T_7301 = or(T_7300, T_7266)
    node T_7302 = or(T_7301, T_7297)
    node T_7304 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2000074"))
    node T_7306 = eq(T_7304, UInt<32>("h2000030"))
    node T_7312 = eq(T_6912, UInt<32>("h0"))
    node T_7316 = eq(T_7002, UInt<32>("h10"))
    node T_7318 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2024"))
    node T_7320 = eq(T_7318, UInt<32>("h24"))
    node T_7324 = eq(T_7180, UInt<32>("h28"))
    node T_7326 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h1030"))
    node T_7328 = eq(T_7326, UInt<32>("h1030"))
    node T_7330 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2030"))
    node T_7332 = eq(T_7330, UInt<32>("h2030"))
    node T_7334 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h90000010"))
    node T_7336 = eq(T_7334, UInt<32>("h80000010"))
    node T_7339 = or(T_7312, T_7316)
    node T_7340 = or(T_7339, T_7320)
    node T_7341 = or(T_7340, T_7324)
    node T_7342 = or(T_7341, T_7328)
    node T_7343 = or(T_7342, T_7332)
    node T_7344 = or(T_7343, T_7336)
    node T_7346 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h1070"))
    node T_7348 = eq(T_7346, UInt<32>("h1070"))
    node T_7352 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2070"))
    node T_7354 = eq(T_7352, UInt<32>("h2070"))
    node T_7358 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h3070"))
    node T_7360 = eq(T_7358, UInt<32>("h70"))
    node T_7363 = cat(T_7360, T_7354)
    node T_7364 = cat(T_7363, T_7348)
    node T_7366 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h3058"))
    node T_7368 = eq(T_7366, UInt<32>("h1008"))
    node T_7374 = eq(T_7366, UInt<32>("h8"))
    node T_7378 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h6048"))
    node T_7380 = eq(T_7378, UInt<32>("h2008"))
    node T_7384 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h105c"))
    node T_7386 = eq(T_7384, UInt<32>("h1004"))
    node T_7388 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("h2000060"))
    node T_7390 = eq(T_7388, UInt<32>("h2000040"))
    node T_7392 = and(ibuf.io_inst_0_bits_inst_bits, UInt<32>("hd0000070"))
    node T_7394 = eq(T_7392, UInt<32>("h40000050"))
    node T_7397 = or(T_7386, T_7390)
    node T_7398 = or(T_7397, T_7394)
    wire id_load_use : UInt<1>
    reg id_reg_fence : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    mem T_7403 :
      data-type => UInt<64>
      depth => 31
      read-latency => 0
      write-latency => 1
      reader => T_7412
      reader => T_7422
      writer => T_8266
      read-under-write => undefined
    T_7403.T_7412.en <= UInt<1>("h1")
    T_7403.T_7412.addr <= T_7411
    T_7403.T_7422.en <= UInt<1>("h1")
    T_7403.T_7422.addr <= T_7421
    T_7403.T_8266.en <= GEN_166
    T_7403.T_8266.mask <= GEN_166
    T_7403.T_8266.addr <= T_8265
    T_7403.T_8266.data <= rf_wdata
    wire id_rs_0 : UInt<64>
    node T_7407 = eq(ibuf.io_inst_0_bits_inst_rs1, UInt<5>("h0"))
    node T_7410 = ibuf.io_inst_0_bits_inst_rs1
    node T_7411 = not(T_7410)
    node T_7413 = T_7403.T_7412.data
    wire id_rs_1 : UInt<64>
    node T_7420 = ibuf.io_inst_0_bits_inst_rs2
    node T_7421 = not(T_7420)
    node T_7423 = T_7403.T_7422.data
    wire ctrl_killd : UInt<1>
    node T_7501 = eq(ctrl_killd, UInt<1>("h0"))
    inst csr of CSRFile
    node id_csr_en = neq(id_ctrl_csr, UInt<3>("h0"))
    node id_system_insn = eq(id_ctrl_csr, UInt<3>("h4"))
    node T_7504 = eq(id_ctrl_csr, UInt<3>("h2"))
    node T_7505 = eq(id_ctrl_csr, UInt<3>("h3"))
    node T_7506 = or(T_7504, T_7505)
    node id_csr_ren = and(T_7506, T_7407)
    node id_csr = mux(id_csr_ren, UInt<3>("h5"), id_ctrl_csr)
    node id_csr_addr = bits(ibuf.io_inst_0_bits_inst_bits, 31, 20)
    node T_7510 = eq(id_csr_ren, UInt<1>("h0"))
    node T_7511 = and(id_csr_en, T_7510)
    node T_7641 = and(id_csr_addr, UInt<12>("h46"))
    node T_7643 = eq(T_7641, UInt<12>("h40"))
    node T_7645 = and(id_csr_addr, UInt<12>("h244"))
    node T_7647 = eq(T_7645, UInt<12>("h240"))
    node T_7650 = or(T_7643, T_7647)
    node T_7653 = eq(T_7650, UInt<1>("h0"))
    node T_7654 = and(T_7511, T_7653)
    node id_csr_flush = or(id_system_insn, T_7654)
    node T_7656 = eq(id_ctrl_legal, UInt<1>("h0"))
    node T_7657 = bits(csr.io_status_isa, 12, 12)
    node T_7659 = eq(T_7657, UInt<1>("h0"))
    node T_7660 = and(id_ctrl_div, T_7659)
    node T_7661 = or(T_7656, T_7660)
    node T_7662 = bits(csr.io_status_isa, 0, 0)
    node T_7664 = eq(T_7662, UInt<1>("h0"))
    node T_7665 = and(id_ctrl_amo, T_7664)
    node T_7666 = or(T_7661, T_7665)
    node T_7668 = neq(csr.io_status_fs, UInt<2>("h0"))
    node T_7669 = bits(csr.io_status_isa, 5, 5)
    node T_7670 = and(T_7668, T_7669)
    node T_7672 = eq(T_7670, UInt<1>("h0"))
    node T_7673 = and(id_ctrl_fp, T_7672)
    node T_7674 = or(T_7666, T_7673)
    node T_7675 = bits(csr.io_status_isa, 3, 3)
    node T_7677 = eq(T_7675, UInt<1>("h0"))
    node T_7678 = and(id_ctrl_dp, T_7677)
    node T_7679 = or(T_7674, T_7678)
    node T_7680 = bits(csr.io_status_isa, 2, 2)
    node T_7682 = eq(T_7680, UInt<1>("h0"))
    node T_7683 = and(ibuf.io_inst_0_bits_rvc, T_7682)
    node T_7684 = or(T_7679, T_7683)
    node T_7686 = neq(csr.io_status_xs, UInt<2>("h0"))
    node T_7687 = bits(csr.io_status_isa, 23, 23)
    node T_7688 = and(T_7686, T_7687)
    node T_7690 = eq(T_7688, UInt<1>("h0"))
    node T_7691 = and(UInt<1>("h0"), T_7690)
    node id_illegal_insn = or(T_7684, T_7691)
    node id_amo_aq = bits(ibuf.io_inst_0_bits_inst_bits, 26, 26)
    node id_amo_rl = bits(ibuf.io_inst_0_bits_inst_bits, 25, 25)
    node T_7692 = and(id_ctrl_amo, id_amo_rl)
    node id_fence_next = or(id_ctrl_fence, T_7692)
    node T_7694 = eq(io_dmem_ordered, UInt<1>("h0"))
    node id_mem_busy = or(T_7694, io_dmem_req_valid)
    node T_7700 = and(wb_reg_valid, wb_ctrl_rocc)
    node T_7702 = and(id_reg_fence, id_mem_busy)
    node T_7703 = or(id_fence_next, T_7702)
    node T_7705 = and(id_ctrl_amo, id_amo_aq)
    node T_7706 = or(T_7705, id_ctrl_fence_i)
    node T_7707 = or(id_ctrl_mem, UInt<1>("h0"))
    node T_7708 = and(id_reg_fence, T_7707)
    node T_7709 = or(T_7706, T_7708)
    node T_7710 = or(T_7709, id_csr_en)
    node T_7711 = and(id_mem_busy, T_7710)
    inst bpu of BreakpointUnit
    node id_xcpt_if = or(ibuf.io_inst_0_bits_pf0, ibuf.io_inst_0_bits_pf1)
    node T_7716 = or(csr.io_interrupt, bpu.io_debug_if)
    node T_7717 = or(T_7716, bpu.io_xcpt_if)
    node T_7718 = or(T_7717, id_xcpt_if)
    node id_xcpt = or(T_7718, id_illegal_insn)
    node T_7719 = mux(id_xcpt_if, UInt<2>("h1"), UInt<2>("h2"))
    node T_7720 = mux(bpu.io_xcpt_if, UInt<2>("h3"), T_7719)
    node T_7721 = mux(bpu.io_debug_if, UInt<4>("hd"), pad(T_7720, 4))
    node id_cause = mux(csr.io_interrupt, csr.io_interrupt_cause, pad(T_7721, 64))
    node ex_waddr = bits(ex_reg_inst, 11, 7)
    node mem_waddr = bits(mem_reg_inst, 11, 7)
    node wb_waddr = bits(wb_reg_inst, 11, 7)
    node T_7725 = and(ex_reg_valid, ex_ctrl_wxd)
    node T_7726 = and(mem_reg_valid, mem_ctrl_wxd)
    node T_7728 = eq(mem_ctrl_mem, UInt<1>("h0"))
    node T_7729 = and(T_7726, T_7728)
    node T_7731 = eq(UInt<5>("h0"), ibuf.io_inst_0_bits_inst_rs1)
    node T_7732 = eq(ex_waddr, ibuf.io_inst_0_bits_inst_rs1)
    node id_bypass_src_0_1 = and(T_7725, T_7732)
    node T_7733 = eq(mem_waddr, ibuf.io_inst_0_bits_inst_rs1)
    node id_bypass_src_0_2 = and(T_7729, T_7733)
    node id_bypass_src_0_3 = and(T_7726, T_7733)
    node T_7735 = eq(UInt<5>("h0"), ibuf.io_inst_0_bits_inst_rs2)
    node T_7736 = eq(ex_waddr, ibuf.io_inst_0_bits_inst_rs2)
    node id_bypass_src_1_1 = and(T_7725, T_7736)
    node T_7737 = eq(mem_waddr, ibuf.io_inst_0_bits_inst_rs2)
    node id_bypass_src_1_2 = and(T_7729, T_7737)
    node id_bypass_src_1_3 = and(T_7726, T_7737)
    wire bypass_mux_0 : UInt<64>
    wire bypass_mux_1 : UInt<64>
    wire bypass_mux_2 : UInt<64>
    wire bypass_mux_3 : UInt<64>
    reg ex_reg_rs_bypass_0 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_rs_bypass_0)
    reg ex_reg_rs_bypass_1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ex_reg_rs_bypass_1)
    reg ex_reg_rs_lsb_0 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ex_reg_rs_lsb_0)
    reg ex_reg_rs_lsb_1 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ex_reg_rs_lsb_1)
    reg ex_reg_rs_msb_0 : UInt<62>, clk with :
      reset => (UInt<1>("h0"), ex_reg_rs_msb_0)
    reg ex_reg_rs_msb_1 : UInt<62>, clk with :
      reset => (UInt<1>("h0"), ex_reg_rs_msb_1)
    node T_7766 = cat(ex_reg_rs_msb_0, ex_reg_rs_lsb_0)
    wire GEN_0 : UInt<64>
    node GEN_2 = mux(eq(UInt<2>("h1"), ex_reg_rs_lsb_0), bypass_mux_1, UInt<64>("h0"))
    node GEN_3 = mux(eq(UInt<2>("h2"), ex_reg_rs_lsb_0), bypass_mux_2, GEN_2)
    node GEN_4 = mux(eq(UInt<2>("h3"), ex_reg_rs_lsb_0), bypass_mux_3, GEN_3)
    node ex_rs_0 = mux(ex_reg_rs_bypass_0, GEN_0, T_7766)
    node T_7767 = cat(ex_reg_rs_msb_1, ex_reg_rs_lsb_1)
    wire GEN_1 : UInt<64>
    node GEN_5 = mux(eq(UInt<2>("h1"), ex_reg_rs_lsb_1), bypass_mux_1, UInt<64>("h0"))
    node GEN_6 = mux(eq(UInt<2>("h2"), ex_reg_rs_lsb_1), bypass_mux_2, GEN_5)
    node GEN_7 = mux(eq(UInt<2>("h3"), ex_reg_rs_lsb_1), bypass_mux_3, GEN_6)
    node ex_rs_1 = mux(ex_reg_rs_bypass_1, GEN_1, T_7767)
    node T_7768 = eq(ex_ctrl_sel_imm, UInt<3>("h5"))
    node T_7770 = bits(ex_reg_inst, 31, 31)
    node T_7771 = asSInt(T_7770)
    node T_7772 = mux(T_7768, SInt<1>("h0"), T_7771)
    node T_7773 = eq(ex_ctrl_sel_imm, UInt<3>("h2"))
    node T_7774 = bits(ex_reg_inst, 30, 20)
    node T_7775 = asSInt(T_7774)
    node T_7776 = mux(T_7773, T_7775, pad(T_7772, 11))
    node T_7777 = neq(ex_ctrl_sel_imm, UInt<3>("h2"))
    node T_7778 = neq(ex_ctrl_sel_imm, UInt<3>("h3"))
    node T_7779 = and(T_7777, T_7778)
    node T_7780 = bits(ex_reg_inst, 19, 12)
    node T_7781 = asSInt(T_7780)
    node T_7782 = mux(T_7779, pad(T_7772, 8), T_7781)
    node T_7785 = or(T_7773, T_7768)
    node T_7787 = eq(ex_ctrl_sel_imm, UInt<3>("h3"))
    node T_7788 = bits(ex_reg_inst, 20, 20)
    node T_7789 = asSInt(T_7788)
    node T_7790 = eq(ex_ctrl_sel_imm, UInt<3>("h1"))
    node T_7791 = bits(ex_reg_inst, 7, 7)
    node T_7792 = asSInt(T_7791)
    node T_7793 = mux(T_7790, T_7792, T_7772)
    node T_7794 = mux(T_7787, T_7789, T_7793)
    node T_7795 = mux(T_7785, SInt<1>("h0"), T_7794)
    node T_7800 = bits(ex_reg_inst, 30, 25)
    node T_7801 = mux(T_7785, UInt<6>("h0"), T_7800)
    node T_7804 = eq(ex_ctrl_sel_imm, UInt<3>("h0"))
    node T_7806 = or(T_7804, T_7790)
    node T_7807 = bits(ex_reg_inst, 11, 8)
    node T_7809 = bits(ex_reg_inst, 19, 16)
    node T_7810 = bits(ex_reg_inst, 24, 21)
    node T_7811 = mux(T_7768, T_7809, T_7810)
    node T_7812 = mux(T_7806, T_7807, T_7811)
    node T_7813 = mux(T_7773, UInt<4>("h0"), T_7812)
    node T_7816 = eq(ex_ctrl_sel_imm, UInt<3>("h4"))
    node T_7819 = bits(ex_reg_inst, 15, 15)
    node T_7822 = mux(T_7768, T_7819, UInt<1>("h0"))
    node T_7824 = mux(T_7816, T_7788, T_7822)
    node T_7826 = mux(T_7804, T_7791, T_7824)
    node T_7827 = cat(T_7801, T_7813)
    node T_7828 = cat(T_7827, T_7826)
    node T_7829 = asUInt(T_7795)
    node T_7830 = asUInt(T_7782)
    node T_7831 = cat(T_7830, T_7829)
    node T_7832 = asUInt(T_7776)
    node T_7833 = asUInt(T_7772)
    node T_7834 = cat(T_7833, T_7832)
    node T_7835 = cat(T_7834, T_7831)
    node T_7836 = cat(T_7835, T_7828)
    node ex_imm = asSInt(T_7836)
    node T_7838 = asSInt(ex_rs_0)
    node T_7839 = asSInt(ex_reg_pc)
    node T_7840 = eq(UInt<2>("h2"), ex_ctrl_sel_alu1)
    node T_7841 = mux(T_7840, T_7839, SInt<40>("h0"))
    node T_7842 = eq(UInt<2>("h1"), ex_ctrl_sel_alu1)
    node ex_op1 = mux(T_7842, T_7838, pad(T_7841, 64))
    node T_7844 = asSInt(ex_rs_1)
    node T_7847 = mux(ex_reg_rvc, SInt<4>("h2"), SInt<4>("h4"))
    node T_7848 = eq(UInt<2>("h1"), ex_ctrl_sel_alu2)
    node T_7849 = mux(T_7848, T_7847, SInt<4>("h0"))
    node T_7850 = eq(UInt<2>("h3"), ex_ctrl_sel_alu2)
    node T_7851 = mux(T_7850, ex_imm, pad(T_7849, 32))
    node T_7852 = eq(UInt<2>("h2"), ex_ctrl_sel_alu2)
    node ex_op2 = mux(T_7852, T_7844, pad(T_7851, 64))
    inst alu of ALU
    node T_7853 = asUInt(ex_op2)
    node T_7854 = asUInt(ex_op1)
    inst div of MulDiv
    node T_7855 = and(ex_reg_valid, ex_ctrl_div)
    node T_7859 = eq(take_pc, UInt<1>("h0"))
    node T_7860 = and(T_7859, ibuf.io_inst_0_valid)
    node T_7861 = and(T_7860, ibuf.io_inst_0_bits_replay)
    node T_7864 = and(T_7501, id_xcpt)
    node T_7868 = and(T_7860, csr.io_interrupt)
    node GEN_8 = mux(id_xcpt, id_cause, ex_reg_cause)
    node GEN_9 = mux(ibuf.io_inst_0_bits_btb_hit, ibuf.io_btb_resp_taken, ex_reg_btb_resp_taken)
    node GEN_10 = mux(ibuf.io_inst_0_bits_btb_hit, ibuf.io_btb_resp_mask, ex_reg_btb_resp_mask)
    node GEN_11 = mux(ibuf.io_inst_0_bits_btb_hit, ibuf.io_btb_resp_bridx, ex_reg_btb_resp_bridx)
    node GEN_12 = mux(ibuf.io_inst_0_bits_btb_hit, ibuf.io_btb_resp_target, ex_reg_btb_resp_target)
    node GEN_13 = mux(ibuf.io_inst_0_bits_btb_hit, ibuf.io_btb_resp_entry, ex_reg_btb_resp_entry)
    node GEN_14 = mux(ibuf.io_inst_0_bits_btb_hit, ibuf.io_btb_resp_bht_history, ex_reg_btb_resp_bht_history)
    node GEN_15 = mux(ibuf.io_inst_0_bits_btb_hit, ibuf.io_btb_resp_bht_value, ex_reg_btb_resp_bht_value)
    node T_7872 = eq(bpu.io_xcpt_if, UInt<1>("h0"))
    node T_7874 = eq(ibuf.io_inst_0_bits_pf0, UInt<1>("h0"))
    node T_7875 = and(T_7872, T_7874)
    node T_7876 = and(T_7875, ibuf.io_inst_0_bits_pf1)
    node GEN_16 = mux(T_7876, UInt<2>("h1"), UInt<2>("h0"))
    node GEN_17 = mux(T_7876, UInt<1>("h1"), ibuf.io_inst_0_bits_rvc)
    node GEN_18 = mux(id_xcpt, UInt<4>("h0"), id_ctrl_alu_fn)
    node GEN_19 = mux(id_xcpt, UInt<1>("h1"), id_ctrl_alu_dw)
    node GEN_20 = mux(id_xcpt, UInt<2>("h2"), id_ctrl_sel_alu1)
    node GEN_21 = mux(id_xcpt, GEN_16, id_ctrl_sel_alu2)
    node GEN_22 = mux(id_xcpt, GEN_17, ibuf.io_inst_0_bits_rvc)
    node T_7878 = or(id_ctrl_fence_i, id_csr_flush)
    node T_7879 = or(T_7878, csr.io_singleStep)
    node T_7880 = and(id_ctrl_jalr, csr.io_status_debug)
    node GEN_23 = mux(T_7880, UInt<1>("h1"), T_7879)
    node GEN_24 = mux(T_7880, UInt<1>("h1"), id_ctrl_fence_i)
    node T_7883 = or(T_7731, id_bypass_src_0_1)
    node T_7884 = or(T_7883, id_bypass_src_0_2)
    node T_7885 = or(T_7884, id_bypass_src_0_3)
    node T_7890 = mux(id_bypass_src_0_2, UInt<2>("h2"), UInt<2>("h3"))
    node T_7891 = mux(id_bypass_src_0_1, UInt<2>("h1"), T_7890)
    node T_7892 = mux(T_7731, UInt<2>("h0"), T_7891)
    node T_7894 = eq(T_7885, UInt<1>("h0"))
    node T_7895 = and(id_ctrl_rxs1, T_7894)
    node T_7896 = bits(id_rs_0, 1, 0)
    node T_7897 = shr(id_rs_0, 2)
    node GEN_25 = mux(T_7895, T_7896, T_7892)
    node GEN_26 = mux(T_7895, T_7897, ex_reg_rs_msb_0)
    node T_7898 = or(T_7735, id_bypass_src_1_1)
    node T_7899 = or(T_7898, id_bypass_src_1_2)
    node T_7900 = or(T_7899, id_bypass_src_1_3)
    node T_7905 = mux(id_bypass_src_1_2, UInt<2>("h2"), UInt<2>("h3"))
    node T_7906 = mux(id_bypass_src_1_1, UInt<2>("h1"), T_7905)
    node T_7907 = mux(T_7735, UInt<2>("h0"), T_7906)
    node T_7909 = eq(T_7900, UInt<1>("h0"))
    node T_7910 = and(id_ctrl_rxs2, T_7909)
    node T_7911 = bits(id_rs_1, 1, 0)
    node T_7912 = shr(id_rs_1, 2)
    node GEN_27 = mux(T_7910, T_7911, T_7907)
    node GEN_28 = mux(T_7910, T_7912, ex_reg_rs_msb_1)
    node GEN_29 = mux(T_7501, id_ctrl_legal, ex_ctrl_legal)
    node GEN_30 = mux(T_7501, id_ctrl_fp, ex_ctrl_fp)
    node GEN_31 = mux(T_7501, UInt<1>("h0"), ex_ctrl_rocc)
    node GEN_32 = mux(T_7501, id_ctrl_branch, ex_ctrl_branch)
    node GEN_33 = mux(T_7501, id_ctrl_jal, ex_ctrl_jal)
    node GEN_34 = mux(T_7501, id_ctrl_jalr, ex_ctrl_jalr)
    node GEN_35 = mux(T_7501, id_ctrl_rxs2, ex_ctrl_rxs2)
    node GEN_36 = mux(T_7501, id_ctrl_rxs1, ex_ctrl_rxs1)
    node GEN_37 = mux(T_7501, GEN_21, ex_ctrl_sel_alu2)
    node GEN_38 = mux(T_7501, GEN_20, ex_ctrl_sel_alu1)
    node GEN_39 = mux(T_7501, id_ctrl_sel_imm, ex_ctrl_sel_imm)
    node GEN_40 = mux(T_7501, GEN_19, ex_ctrl_alu_dw)
    node GEN_41 = mux(T_7501, GEN_18, ex_ctrl_alu_fn)
    node GEN_42 = mux(T_7501, id_ctrl_mem, ex_ctrl_mem)
    node GEN_43 = mux(T_7501, id_ctrl_mem_cmd, ex_ctrl_mem_cmd)
    node GEN_44 = mux(T_7501, id_ctrl_mem_type, ex_ctrl_mem_type)
    node GEN_45 = mux(T_7501, id_ctrl_rfs1, ex_ctrl_rfs1)
    node GEN_46 = mux(T_7501, id_ctrl_rfs2, ex_ctrl_rfs2)
    node GEN_47 = mux(T_7501, id_ctrl_rfs3, ex_ctrl_rfs3)
    node GEN_48 = mux(T_7501, id_ctrl_wfd, ex_ctrl_wfd)
    node GEN_49 = mux(T_7501, id_ctrl_div, ex_ctrl_div)
    node GEN_50 = mux(T_7501, id_ctrl_wxd, ex_ctrl_wxd)
    node GEN_51 = mux(T_7501, id_csr, ex_ctrl_csr)
    node GEN_52 = mux(T_7501, GEN_24, ex_ctrl_fence_i)
    node GEN_53 = mux(T_7501, id_ctrl_fence, ex_ctrl_fence)
    node GEN_54 = mux(T_7501, id_ctrl_amo, ex_ctrl_amo)
    node GEN_55 = mux(T_7501, id_ctrl_dp, ex_ctrl_dp)
    node GEN_56 = mux(T_7501, GEN_22, ex_reg_rvc)
    node GEN_57 = mux(T_7501, GEN_23, ex_reg_flush_pipe)
    node GEN_58 = mux(T_7501, id_load_use, ex_reg_load_use)
    node GEN_59 = mux(T_7501, T_7885, ex_reg_rs_bypass_0)
    node GEN_60 = mux(T_7501, GEN_25, ex_reg_rs_lsb_0)
    node GEN_61 = mux(T_7501, GEN_26, ex_reg_rs_msb_0)
    node GEN_62 = mux(T_7501, T_7900, ex_reg_rs_bypass_1)
    node GEN_63 = mux(T_7501, GEN_27, ex_reg_rs_lsb_1)
    node GEN_64 = mux(T_7501, GEN_28, ex_reg_rs_msb_1)
    node T_7915 = or(T_7501, csr.io_interrupt)
    node T_7916 = or(T_7915, ibuf.io_inst_0_bits_replay)
    node GEN_65 = mux(T_7916, ibuf.io_inst_0_bits_inst_bits, ex_reg_inst)
    node GEN_66 = mux(T_7916, ibuf.io_pc, ex_reg_pc)
    node T_7917 = or(ex_reg_valid, ex_reg_replay)
    node ex_pc_valid = or(T_7917, ex_reg_xcpt_interrupt)
    node T_7919 = eq(io_dmem_resp_valid, UInt<1>("h0"))
    node wb_dcache_miss = and(wb_ctrl_mem, T_7919)
    node T_7921 = eq(io_dmem_req_ready, UInt<1>("h0"))
    node T_7922 = and(ex_ctrl_mem, T_7921)
    node T_7924 = eq(div.io_req_ready, UInt<1>("h0"))
    node T_7925 = and(ex_ctrl_div, T_7924)
    node replay_ex_structural = or(T_7922, T_7925)
    node replay_ex_load_use = and(wb_dcache_miss, ex_reg_load_use)
    node T_7926 = or(replay_ex_structural, replay_ex_load_use)
    node T_7927 = and(ex_reg_valid, T_7926)
    node replay_ex = or(ex_reg_replay, T_7927)
    node T_7928 = or(take_pc_mem_wb, replay_ex)
    node T_7930 = eq(ex_reg_valid, UInt<1>("h0"))
    node ctrl_killx = or(T_7928, T_7930)
    node T_7931 = eq(ex_ctrl_mem_cmd, UInt<5>("h7"))
    wire T_7937_0 : UInt<3>
    wire T_7937_1 : UInt<3>
    wire T_7937_2 : UInt<3>
    wire T_7937_3 : UInt<3>
    node T_7939 = eq(UInt<3>("h0"), ex_ctrl_mem_type)
    node T_7940 = eq(UInt<3>("h4"), ex_ctrl_mem_type)
    node T_7941 = eq(UInt<3>("h1"), ex_ctrl_mem_type)
    node T_7942 = eq(UInt<3>("h5"), ex_ctrl_mem_type)
    node T_7945 = or(T_7939, T_7940)
    node T_7946 = or(T_7945, T_7941)
    node T_7947 = or(T_7946, T_7942)
    node ex_slow_bypass = or(T_7931, T_7947)
    node T_7948 = or(ex_reg_xcpt_interrupt, ex_reg_xcpt)
    node T_7949 = and(ex_ctrl_fp, io_fpu_illegal_rm)
    node ex_xcpt = or(T_7948, T_7949)
    node ex_cause = mux(T_7948, ex_reg_cause, UInt<64>("h2"))
    node mem_br_taken = bits(mem_reg_wdata, 0, 0)
    node T_7951 = asSInt(mem_reg_pc)
    node T_7952 = and(mem_ctrl_branch, mem_br_taken)
    node T_7955 = bits(mem_reg_inst, 31, 31)
    node T_7956 = asSInt(T_7955)
    node T_7961 = pad(T_7956, 11)
    node T_7965 = bits(mem_reg_inst, 19, 12)
    node T_7966 = asSInt(T_7965)
    node T_7967 = pad(T_7956, 8)
    node T_7973 = bits(mem_reg_inst, 20, 20)
    node T_7974 = asSInt(T_7973)
    node T_7976 = bits(mem_reg_inst, 7, 7)
    node T_7977 = asSInt(T_7976)
    node T_7985 = bits(mem_reg_inst, 30, 25)
    node T_7992 = bits(mem_reg_inst, 11, 8)
    node T_7995 = bits(mem_reg_inst, 24, 21)
    node T_8012 = cat(T_7985, T_7992)
    node T_8013 = cat(T_8012, UInt<1>("h0"))
    node T_8014 = asUInt(T_7977)
    node T_8015 = asUInt(T_7967)
    node T_8016 = cat(T_8015, T_8014)
    node T_8017 = asUInt(T_7961)
    node T_8018 = asUInt(T_7956)
    node T_8019 = cat(T_8018, T_8017)
    node T_8020 = cat(T_8019, T_8016)
    node T_8021 = cat(T_8020, T_8013)
    node T_8022 = asSInt(T_8021)
    node T_8084 = cat(T_7985, T_7995)
    node T_8085 = cat(T_8084, UInt<1>("h0"))
    node T_8086 = asUInt(T_7974)
    node T_8087 = asUInt(T_7966)
    node T_8088 = cat(T_8087, T_8086)
    node T_8092 = cat(T_8019, T_8088)
    node T_8093 = cat(T_8092, T_8085)
    node T_8094 = asSInt(T_8093)
    node T_8097 = mux(mem_reg_rvc, SInt<4>("h2"), SInt<4>("h4"))
    node T_8098 = mux(mem_ctrl_jal, T_8094, pad(T_8097, 32))
    node T_8099 = mux(T_7952, T_8022, T_8098)
    node GEN_184 = pad(T_8099, 40)
    node T_8100 = add(T_7951, GEN_184)
    node T_8101 = tail(T_8100, 1)
    node mem_br_target = asSInt(T_8101)
    node T_8102 = shr(mem_reg_wdata, 38)
    node T_8103 = bits(mem_reg_wdata, 39, 38)
    node T_8104 = asSInt(T_8103)
    node T_8106 = eq(T_8102, UInt<26>("h0"))
    node T_8108 = eq(T_8102, UInt<26>("h1"))
    node T_8109 = or(T_8106, T_8108)
    node T_8111 = neq(T_8104, SInt<2>("h0"))
    node T_8112 = asSInt(T_8102)
    node T_8114 = eq(T_8112, SInt<26>("h1"))
    node T_8117 = eq(T_8112, SInt<26>("h2"))
    node T_8118 = or(T_8114, T_8117)
    node T_8120 = eq(T_8104, SInt<2>("h1"))
    node T_8121 = bits(T_8104, 0, 0)
    node T_8122 = mux(T_8118, T_8120, T_8121)
    node T_8123 = mux(T_8109, T_8111, T_8122)
    node T_8124 = bits(mem_reg_wdata, 38, 0)
    node T_8125 = cat(T_8123, T_8124)
    node T_8126 = asSInt(T_8125)
    node T_8127 = mux(mem_ctrl_jalr, T_8126, mem_br_target)
    node T_8129 = and(T_8127, SInt<40>("h2"))
    node T_8130 = asSInt(T_8129)
    node mem_npc = asUInt(T_8130)
    node T_8131 = neq(mem_npc, ex_reg_pc)
    node T_8132 = neq(mem_npc, ibuf.io_pc)
    node T_8134 = mux(ibuf.io_inst_0_valid, T_8132, UInt<1>("h1"))
    node mem_wrong_npc = mux(ex_pc_valid, T_8131, T_8134)
    node T_8138 = bits(mem_npc, 1, 1)
    node mem_npc_misaligned = and(T_7682, T_8138)
    node T_8140 = eq(mem_reg_xcpt, UInt<1>("h0"))
    node T_8141 = xor(mem_ctrl_jalr, mem_npc_misaligned)
    node T_8142 = and(T_8140, T_8141)
    node T_8143 = asSInt(mem_reg_wdata)
    node T_8144 = mux(T_8142, pad(mem_br_target, 64), T_8143)
    node mem_int_wdata = asUInt(T_8144)
    node T_8145 = or(mem_ctrl_branch, mem_ctrl_jalr)
    node mem_cfi = or(T_8145, mem_ctrl_jal)
    node T_8147 = or(T_7952, mem_ctrl_jalr)
    node mem_cfi_taken = or(T_8147, mem_ctrl_jal)
    node T_8150 = or(mem_wrong_npc, mem_reg_flush_pipe)
    node T_8151 = and(mem_reg_valid, T_8150)
    node T_8153 = eq(ctrl_killx, UInt<1>("h0"))
    node T_8155 = eq(take_pc_mem_wb, UInt<1>("h0"))
    node T_8156 = and(T_8155, replay_ex)
    node T_8159 = and(T_8153, ex_xcpt)
    node T_8162 = and(T_8155, ex_reg_xcpt_interrupt)
    node GEN_67 = mux(ex_xcpt, ex_cause, mem_reg_cause)
    node T_8163 = eq(ex_ctrl_mem_cmd, UInt<5>("h0"))
    node T_8164 = eq(ex_ctrl_mem_cmd, UInt<5>("h6"))
    node T_8165 = or(T_8163, T_8164)
    node T_8167 = or(T_8165, T_7931)
    node T_8168 = bits(ex_ctrl_mem_cmd, 3, 3)
    node T_8169 = eq(ex_ctrl_mem_cmd, UInt<5>("h4"))
    node T_8170 = or(T_8168, T_8169)
    node T_8171 = or(T_8167, T_8170)
    node T_8172 = and(ex_ctrl_mem, T_8171)
    node T_8173 = eq(ex_ctrl_mem_cmd, UInt<5>("h1"))
    node T_8175 = or(T_8173, T_7931)
    node T_8179 = or(T_8175, T_8170)
    node T_8180 = and(ex_ctrl_mem, T_8179)
    node GEN_68 = mux(ex_reg_btb_hit, ex_reg_btb_resp_taken, mem_reg_btb_resp_taken)
    node GEN_69 = mux(ex_reg_btb_hit, ex_reg_btb_resp_mask, mem_reg_btb_resp_mask)
    node GEN_70 = mux(ex_reg_btb_hit, ex_reg_btb_resp_bridx, mem_reg_btb_resp_bridx)
    node GEN_71 = mux(ex_reg_btb_hit, ex_reg_btb_resp_target, mem_reg_btb_resp_target)
    node GEN_72 = mux(ex_reg_btb_hit, ex_reg_btb_resp_entry, mem_reg_btb_resp_entry)
    node GEN_73 = mux(ex_reg_btb_hit, ex_reg_btb_resp_bht_history, mem_reg_btb_resp_bht_history)
    node GEN_74 = mux(ex_reg_btb_hit, ex_reg_btb_resp_bht_value, mem_reg_btb_resp_bht_value)
    node T_8181 = or(ex_ctrl_mem, ex_ctrl_rocc)
    node T_8182 = and(ex_ctrl_rxs2, T_8181)
    node GEN_75 = mux(T_8182, ex_rs_1, mem_reg_rs2)
    node GEN_76 = mux(ex_pc_valid, ex_ctrl_legal, mem_ctrl_legal)
    node GEN_77 = mux(ex_pc_valid, ex_ctrl_fp, mem_ctrl_fp)
    node GEN_78 = mux(ex_pc_valid, ex_ctrl_rocc, mem_ctrl_rocc)
    node GEN_79 = mux(ex_pc_valid, ex_ctrl_branch, mem_ctrl_branch)
    node GEN_80 = mux(ex_pc_valid, ex_ctrl_jal, mem_ctrl_jal)
    node GEN_81 = mux(ex_pc_valid, ex_ctrl_jalr, mem_ctrl_jalr)
    node GEN_82 = mux(ex_pc_valid, ex_ctrl_rxs2, mem_ctrl_rxs2)
    node GEN_83 = mux(ex_pc_valid, ex_ctrl_rxs1, mem_ctrl_rxs1)
    node GEN_84 = mux(ex_pc_valid, ex_ctrl_sel_alu2, mem_ctrl_sel_alu2)
    node GEN_85 = mux(ex_pc_valid, ex_ctrl_sel_alu1, mem_ctrl_sel_alu1)
    node GEN_86 = mux(ex_pc_valid, ex_ctrl_sel_imm, mem_ctrl_sel_imm)
    node GEN_87 = mux(ex_pc_valid, ex_ctrl_alu_dw, mem_ctrl_alu_dw)
    node GEN_88 = mux(ex_pc_valid, ex_ctrl_alu_fn, mem_ctrl_alu_fn)
    node GEN_89 = mux(ex_pc_valid, ex_ctrl_mem, mem_ctrl_mem)
    node GEN_90 = mux(ex_pc_valid, ex_ctrl_mem_cmd, mem_ctrl_mem_cmd)
    node GEN_91 = mux(ex_pc_valid, ex_ctrl_mem_type, mem_ctrl_mem_type)
    node GEN_92 = mux(ex_pc_valid, ex_ctrl_rfs1, mem_ctrl_rfs1)
    node GEN_93 = mux(ex_pc_valid, ex_ctrl_rfs2, mem_ctrl_rfs2)
    node GEN_94 = mux(ex_pc_valid, ex_ctrl_rfs3, mem_ctrl_rfs3)
    node GEN_95 = mux(ex_pc_valid, ex_ctrl_wfd, mem_ctrl_wfd)
    node GEN_96 = mux(ex_pc_valid, ex_ctrl_div, mem_ctrl_div)
    node GEN_97 = mux(ex_pc_valid, ex_ctrl_wxd, mem_ctrl_wxd)
    node GEN_98 = mux(ex_pc_valid, ex_ctrl_csr, mem_ctrl_csr)
    node GEN_99 = mux(ex_pc_valid, ex_ctrl_fence_i, mem_ctrl_fence_i)
    node GEN_100 = mux(ex_pc_valid, ex_ctrl_fence, mem_ctrl_fence)
    node GEN_101 = mux(ex_pc_valid, ex_ctrl_amo, mem_ctrl_amo)
    node GEN_102 = mux(ex_pc_valid, ex_ctrl_dp, mem_ctrl_dp)
    node GEN_103 = mux(ex_pc_valid, ex_reg_rvc, mem_reg_rvc)
    node GEN_104 = mux(ex_pc_valid, T_8172, mem_reg_load)
    node GEN_105 = mux(ex_pc_valid, T_8180, mem_reg_store)
    node GEN_106 = mux(ex_pc_valid, ex_reg_btb_hit, mem_reg_btb_hit)
    node GEN_107 = mux(ex_pc_valid, GEN_68, mem_reg_btb_resp_taken)
    node GEN_108 = mux(ex_pc_valid, GEN_69, mem_reg_btb_resp_mask)
    node GEN_109 = mux(ex_pc_valid, GEN_70, mem_reg_btb_resp_bridx)
    node GEN_110 = mux(ex_pc_valid, GEN_71, mem_reg_btb_resp_target)
    node GEN_111 = mux(ex_pc_valid, GEN_72, mem_reg_btb_resp_entry)
    node GEN_112 = mux(ex_pc_valid, GEN_73, mem_reg_btb_resp_bht_history)
    node GEN_113 = mux(ex_pc_valid, GEN_74, mem_reg_btb_resp_bht_value)
    node GEN_114 = mux(ex_pc_valid, ex_reg_flush_pipe, mem_reg_flush_pipe)
    node GEN_115 = mux(ex_pc_valid, ex_slow_bypass, mem_reg_slow_bypass)
    node GEN_116 = mux(ex_pc_valid, ex_reg_inst, mem_reg_inst)
    node GEN_117 = mux(ex_pc_valid, ex_reg_pc, mem_reg_pc)
    node GEN_118 = mux(ex_pc_valid, alu.io_out, mem_reg_wdata)
    node GEN_119 = mux(ex_pc_valid, GEN_75, mem_reg_rs2)
    node T_8183 = and(mem_reg_load, bpu.io_xcpt_ld)
    node T_8184 = and(mem_reg_store, bpu.io_xcpt_st)
    node mem_breakpoint = or(T_8183, T_8184)
    node T_8185 = and(mem_reg_load, bpu.io_debug_ld)
    node T_8186 = and(mem_reg_store, bpu.io_debug_st)
    node mem_debug_breakpoint = or(T_8185, T_8186)
    node T_8190 = and(mem_ctrl_mem, io_dmem_xcpt_ma_st)
    node T_8192 = and(mem_ctrl_mem, io_dmem_xcpt_ma_ld)
    node T_8194 = and(mem_ctrl_mem, io_dmem_xcpt_pf_st)
    node T_8196 = and(mem_ctrl_mem, io_dmem_xcpt_pf_ld)
    node T_8198 = or(mem_debug_breakpoint, mem_breakpoint)
    node T_8199 = or(T_8198, mem_npc_misaligned)
    node T_8200 = or(T_8199, T_8190)
    node T_8201 = or(T_8200, T_8192)
    node T_8202 = or(T_8201, T_8194)
    node mem_new_xcpt = or(T_8202, T_8196)
    node T_8203 = mux(T_8194, UInt<3>("h7"), UInt<3>("h5"))
    node T_8204 = mux(T_8192, UInt<3>("h4"), T_8203)
    node T_8205 = mux(T_8190, UInt<3>("h6"), T_8204)
    node T_8206 = mux(mem_npc_misaligned, UInt<3>("h0"), T_8205)
    node T_8207 = mux(mem_breakpoint, UInt<3>("h3"), T_8206)
    node mem_new_cause = mux(mem_debug_breakpoint, UInt<4>("hd"), pad(T_8207, 4))
    node T_8208 = or(mem_reg_xcpt_interrupt, mem_reg_xcpt)
    node T_8209 = and(mem_reg_valid, mem_new_xcpt)
    node mem_xcpt = or(T_8208, T_8209)
    node mem_cause = mux(T_8208, mem_reg_cause, pad(mem_new_cause, 64))
    node dcache_kill_mem = and(T_7726, io_dmem_replay_next)
    node T_8211 = and(mem_reg_valid, mem_ctrl_fp)
    node fpu_kill_mem = and(T_8211, io_fpu_nack_mem)
    node T_8212 = or(dcache_kill_mem, mem_reg_replay)
    node replay_mem = or(T_8212, fpu_kill_mem)
    node T_8213 = or(dcache_kill_mem, take_pc_wb)
    node T_8214 = or(T_8213, mem_reg_xcpt)
    node T_8216 = eq(mem_reg_valid, UInt<1>("h0"))
    node killm_common = or(T_8214, T_8216)
    node T_8217 = and(div.io_req_ready, div.io_req_valid)
    reg T_8218 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_8218)
    node T_8219 = and(killm_common, T_8218)
    node T_8220 = or(killm_common, mem_xcpt)
    node ctrl_killm = or(T_8220, fpu_kill_mem)
    node T_8222 = eq(ctrl_killm, UInt<1>("h0"))
    node T_8224 = eq(take_pc_wb, UInt<1>("h0"))
    node T_8225 = and(replay_mem, T_8224)
    node T_8228 = and(mem_xcpt, T_8224)
    node GEN_120 = mux(mem_xcpt, mem_cause, wb_reg_cause)
    node T_8229 = or(mem_reg_valid, mem_reg_replay)
    node T_8230 = or(T_8229, mem_reg_xcpt_interrupt)
    node T_8233 = and(T_8140, mem_ctrl_fp)
    node T_8234 = and(T_8233, mem_ctrl_wxd)
    node T_8235 = mux(T_8234, io_fpu_toint_data, mem_int_wdata)
    node GEN_121 = mux(mem_ctrl_rocc, mem_reg_rs2, wb_reg_rs2)
    node GEN_122 = mux(T_8230, mem_ctrl_legal, wb_ctrl_legal)
    node GEN_123 = mux(T_8230, mem_ctrl_fp, wb_ctrl_fp)
    node GEN_124 = mux(T_8230, mem_ctrl_rocc, wb_ctrl_rocc)
    node GEN_125 = mux(T_8230, mem_ctrl_branch, wb_ctrl_branch)
    node GEN_126 = mux(T_8230, mem_ctrl_jal, wb_ctrl_jal)
    node GEN_127 = mux(T_8230, mem_ctrl_jalr, wb_ctrl_jalr)
    node GEN_128 = mux(T_8230, mem_ctrl_rxs2, wb_ctrl_rxs2)
    node GEN_129 = mux(T_8230, mem_ctrl_rxs1, wb_ctrl_rxs1)
    node GEN_130 = mux(T_8230, mem_ctrl_sel_alu2, wb_ctrl_sel_alu2)
    node GEN_131 = mux(T_8230, mem_ctrl_sel_alu1, wb_ctrl_sel_alu1)
    node GEN_132 = mux(T_8230, mem_ctrl_sel_imm, wb_ctrl_sel_imm)
    node GEN_133 = mux(T_8230, mem_ctrl_alu_dw, wb_ctrl_alu_dw)
    node GEN_134 = mux(T_8230, mem_ctrl_alu_fn, wb_ctrl_alu_fn)
    node GEN_135 = mux(T_8230, mem_ctrl_mem, wb_ctrl_mem)
    node GEN_136 = mux(T_8230, mem_ctrl_mem_cmd, wb_ctrl_mem_cmd)
    node GEN_137 = mux(T_8230, mem_ctrl_mem_type, wb_ctrl_mem_type)
    node GEN_138 = mux(T_8230, mem_ctrl_rfs1, wb_ctrl_rfs1)
    node GEN_139 = mux(T_8230, mem_ctrl_rfs2, wb_ctrl_rfs2)
    node GEN_140 = mux(T_8230, mem_ctrl_rfs3, wb_ctrl_rfs3)
    node GEN_141 = mux(T_8230, mem_ctrl_wfd, wb_ctrl_wfd)
    node GEN_142 = mux(T_8230, mem_ctrl_div, wb_ctrl_div)
    node GEN_143 = mux(T_8230, mem_ctrl_wxd, wb_ctrl_wxd)
    node GEN_144 = mux(T_8230, mem_ctrl_csr, wb_ctrl_csr)
    node GEN_145 = mux(T_8230, mem_ctrl_fence_i, wb_ctrl_fence_i)
    node GEN_146 = mux(T_8230, mem_ctrl_fence, wb_ctrl_fence)
    node GEN_147 = mux(T_8230, mem_ctrl_amo, wb_ctrl_amo)
    node GEN_148 = mux(T_8230, mem_ctrl_dp, wb_ctrl_dp)
    node GEN_149 = mux(T_8230, T_8235, wb_reg_wdata)
    node GEN_150 = mux(T_8230, GEN_121, wb_reg_rs2)
    node GEN_151 = mux(T_8230, mem_reg_inst, wb_reg_inst)
    node GEN_152 = mux(T_8230, mem_reg_pc, wb_reg_pc)
    node T_8236 = or(wb_ctrl_div, wb_dcache_miss)
    node wb_set_sboard = or(T_8236, wb_ctrl_rocc)
    node replay_wb_common = or(io_dmem_s2_nack, wb_reg_replay)
    node T_8239 = eq(io_rocc_cmd_ready, UInt<1>("h0"))
    node replay_wb_rocc = and(T_7700, T_8239)
    node replay_wb = or(replay_wb_common, replay_wb_rocc)
    node wb_xcpt = or(wb_reg_xcpt, csr.io_csr_xcpt)
    node T_8240 = or(replay_wb, wb_xcpt)
    node T_8241 = or(T_8240, csr.io_eret)
    node T_8242 = bits(io_dmem_resp_bits_tag, 0, 0)
    node dmem_resp_xpu = eq(T_8242, UInt<1>("h0"))
    node dmem_resp_waddr = bits(io_dmem_resp_bits_tag, 5, 1)
    node dmem_resp_valid = and(io_dmem_resp_valid, io_dmem_resp_bits_has_data)
    node dmem_resp_replay = and(dmem_resp_valid, io_dmem_resp_bits_replay)
    node T_8246 = and(wb_reg_valid, wb_ctrl_wxd)
    node T_8248 = eq(T_8246, UInt<1>("h0"))
    wire ll_wdata : UInt<64>
    wire ll_waddr : UInt<5>
    node T_8249 = and(div.io_resp_ready, div.io_resp_valid)
    wire ll_wen : UInt<1>
    node T_8250 = and(dmem_resp_replay, dmem_resp_xpu)
    node GEN_153 = mux(T_8250, UInt<1>("h0"), T_8248)
    node GEN_154 = mux(T_8250, dmem_resp_waddr, div.io_resp_bits_tag)
    node GEN_155 = mux(T_8250, UInt<1>("h1"), T_8249)
    node T_8254 = eq(replay_wb, UInt<1>("h0"))
    node T_8255 = and(wb_reg_valid, T_8254)
    node T_8257 = eq(wb_xcpt, UInt<1>("h0"))
    node wb_valid = and(T_8255, T_8257)
    node wb_wen = and(wb_valid, wb_ctrl_wxd)
    node rf_wen = or(wb_wen, ll_wen)
    node rf_waddr = mux(ll_wen, ll_waddr, wb_waddr)
    node T_8258 = and(dmem_resp_valid, dmem_resp_xpu)
    node T_8259 = neq(wb_ctrl_csr, UInt<3>("h0"))
    node T_8260 = mux(T_8259, csr.io_rw_rdata, wb_reg_wdata)
    node T_8261 = mux(ll_wen, ll_wdata, T_8260)
    node rf_wdata = mux(T_8258, io_dmem_resp_bits_data, T_8261)
    node T_8263 = neq(rf_waddr, UInt<5>("h0"))
    node T_8265 = not(rf_waddr)
    node T_8267 = eq(rf_waddr, ibuf.io_inst_0_bits_inst_rs1)
    node GEN_156 = mux(T_8267, rf_wdata, T_7413)
    node T_8268 = eq(rf_waddr, ibuf.io_inst_0_bits_inst_rs2)
    node GEN_157 = mux(T_8268, rf_wdata, T_7423)
    node GEN_162 = mux(T_8263, GEN_156, T_7413)
    node GEN_163 = mux(T_8263, GEN_157, T_7423)
    node GEN_166 = mux(rf_wen, T_8263, UInt<1>("h0"))
    node GEN_168 = mux(rf_wen, GEN_162, T_7413)
    node GEN_169 = mux(rf_wen, GEN_163, T_7423)
    node T_8269 = shr(wb_reg_wdata, 38)
    node T_8270 = bits(wb_reg_wdata, 39, 38)
    node T_8271 = asSInt(T_8270)
    node T_8273 = eq(T_8269, UInt<26>("h0"))
    node T_8275 = eq(T_8269, UInt<26>("h1"))
    node T_8276 = or(T_8273, T_8275)
    node T_8278 = neq(T_8271, SInt<2>("h0"))
    node T_8279 = asSInt(T_8269)
    node T_8281 = eq(T_8279, SInt<26>("h1"))
    node T_8284 = eq(T_8279, SInt<26>("h2"))
    node T_8285 = or(T_8281, T_8284)
    node T_8287 = eq(T_8271, SInt<2>("h1"))
    node T_8288 = bits(T_8271, 0, 0)
    node T_8289 = mux(T_8285, T_8287, T_8288)
    node T_8290 = mux(T_8276, T_8278, T_8289)
    node T_8291 = bits(wb_reg_wdata, 38, 0)
    node T_8292 = cat(T_8290, T_8291)
    node T_8293 = bits(wb_reg_inst, 31, 20)
    node T_8294 = mux(wb_reg_valid, wb_ctrl_csr, UInt<3>("h0"))
    node T_8296 = neq(ibuf.io_inst_0_bits_inst_rs1, UInt<5>("h0"))
    node T_8297 = and(id_ctrl_rxs1, T_8296)
    node T_8299 = neq(ibuf.io_inst_0_bits_inst_rs2, UInt<5>("h0"))
    node T_8300 = and(id_ctrl_rxs2, T_8299)
    node T_8302 = neq(ibuf.io_inst_0_bits_inst_rd, UInt<5>("h0"))
    node T_8303 = and(id_ctrl_wxd, T_8302)
    reg T_8305 : UInt<32>, clk with :
      reset => (reset, UInt<32>("h0"))
    node T_8306 = shr(T_8305, 1)
    node GEN_185 = pad(T_8306, 32)
    node T_8307 = shlw(GEN_185, 1)
    node T_8310 = dshlw(UInt<32>("h1"), ll_waddr)
    node T_8312 = mux(ll_wen, T_8310, UInt<32>("h0"))
    node T_8313 = not(T_8312)
    node T_8314 = and(T_8307, T_8313)
    node GEN_170 = mux(ll_wen, T_8314, T_8305)
    node T_8316 = dshr(T_8307, ibuf.io_inst_0_bits_inst_rs1)
    node T_8317 = bits(T_8316, 0, 0)
    node T_8318 = and(T_8297, T_8317)
    node T_8319 = dshr(T_8307, ibuf.io_inst_0_bits_inst_rs2)
    node T_8320 = bits(T_8319, 0, 0)
    node T_8321 = and(T_8300, T_8320)
    node T_8322 = dshr(T_8307, ibuf.io_inst_0_bits_inst_rd)
    node T_8323 = bits(T_8322, 0, 0)
    node T_8324 = and(T_8303, T_8323)
    node T_8325 = or(T_8318, T_8321)
    node id_sboard_hazard = or(T_8325, T_8324)
    node T_8326 = and(wb_set_sboard, wb_wen)
    node T_8328 = dshlw(UInt<32>("h1"), wb_waddr)
    node T_8330 = mux(T_8326, T_8328, UInt<32>("h0"))
    node T_8331 = or(T_8314, T_8330)
    node T_8332 = or(ll_wen, T_8326)
    node GEN_171 = mux(T_8332, T_8331, GEN_170)
    node T_8333 = neq(ex_ctrl_csr, UInt<3>("h0"))
    node T_8334 = or(T_8333, ex_ctrl_jalr)
    node T_8335 = or(T_8334, ex_ctrl_mem)
    node T_8336 = or(T_8335, ex_ctrl_div)
    node T_8337 = or(T_8336, ex_ctrl_fp)
    node ex_cannot_bypass = or(T_8337, ex_ctrl_rocc)
    node T_8338 = eq(ibuf.io_inst_0_bits_inst_rs1, ex_waddr)
    node T_8339 = and(T_8297, T_8338)
    node T_8340 = eq(ibuf.io_inst_0_bits_inst_rs2, ex_waddr)
    node T_8341 = and(T_8300, T_8340)
    node T_8342 = eq(ibuf.io_inst_0_bits_inst_rd, ex_waddr)
    node T_8343 = and(T_8303, T_8342)
    node T_8344 = or(T_8339, T_8341)
    node T_8345 = or(T_8344, T_8343)
    node data_hazard_ex = and(ex_ctrl_wxd, T_8345)
    node T_8347 = and(io_fpu_dec_ren1, T_8338)
    node T_8349 = and(io_fpu_dec_ren2, T_8340)
    node T_8350 = eq(ibuf.io_inst_0_bits_inst_rs3, ex_waddr)
    node T_8351 = and(io_fpu_dec_ren3, T_8350)
    node T_8353 = and(io_fpu_dec_wen, T_8342)
    node T_8354 = or(T_8347, T_8349)
    node T_8355 = or(T_8354, T_8351)
    node T_8356 = or(T_8355, T_8353)
    node fp_data_hazard_ex = and(ex_ctrl_wfd, T_8356)
    node T_8357 = and(data_hazard_ex, ex_cannot_bypass)
    node T_8358 = or(T_8357, fp_data_hazard_ex)
    node id_ex_hazard = and(ex_reg_valid, T_8358)
    node T_8360 = neq(mem_ctrl_csr, UInt<3>("h0"))
    node T_8361 = and(mem_ctrl_mem, mem_reg_slow_bypass)
    node T_8362 = or(T_8360, T_8361)
    node T_8363 = or(T_8362, mem_ctrl_div)
    node T_8364 = or(T_8363, mem_ctrl_fp)
    node mem_cannot_bypass = or(T_8364, mem_ctrl_rocc)
    node T_8365 = eq(ibuf.io_inst_0_bits_inst_rs1, mem_waddr)
    node T_8366 = and(T_8297, T_8365)
    node T_8367 = eq(ibuf.io_inst_0_bits_inst_rs2, mem_waddr)
    node T_8368 = and(T_8300, T_8367)
    node T_8369 = eq(ibuf.io_inst_0_bits_inst_rd, mem_waddr)
    node T_8370 = and(T_8303, T_8369)
    node T_8371 = or(T_8366, T_8368)
    node T_8372 = or(T_8371, T_8370)
    node data_hazard_mem = and(mem_ctrl_wxd, T_8372)
    node T_8374 = and(io_fpu_dec_ren1, T_8365)
    node T_8376 = and(io_fpu_dec_ren2, T_8367)
    node T_8377 = eq(ibuf.io_inst_0_bits_inst_rs3, mem_waddr)
    node T_8378 = and(io_fpu_dec_ren3, T_8377)
    node T_8380 = and(io_fpu_dec_wen, T_8369)
    node T_8381 = or(T_8374, T_8376)
    node T_8382 = or(T_8381, T_8378)
    node T_8383 = or(T_8382, T_8380)
    node fp_data_hazard_mem = and(mem_ctrl_wfd, T_8383)
    node T_8384 = and(data_hazard_mem, mem_cannot_bypass)
    node T_8385 = or(T_8384, fp_data_hazard_mem)
    node id_mem_hazard = and(mem_reg_valid, T_8385)
    node T_8386 = and(mem_reg_valid, data_hazard_mem)
    node T_8387 = and(T_8386, mem_ctrl_mem)
    node T_8388 = eq(ibuf.io_inst_0_bits_inst_rs1, wb_waddr)
    node T_8389 = and(T_8297, T_8388)
    node T_8390 = eq(ibuf.io_inst_0_bits_inst_rs2, wb_waddr)
    node T_8391 = and(T_8300, T_8390)
    node T_8392 = eq(ibuf.io_inst_0_bits_inst_rd, wb_waddr)
    node T_8393 = and(T_8303, T_8392)
    node T_8394 = or(T_8389, T_8391)
    node T_8395 = or(T_8394, T_8393)
    node data_hazard_wb = and(wb_ctrl_wxd, T_8395)
    node T_8397 = and(io_fpu_dec_ren1, T_8388)
    node T_8399 = and(io_fpu_dec_ren2, T_8390)
    node T_8400 = eq(ibuf.io_inst_0_bits_inst_rs3, wb_waddr)
    node T_8401 = and(io_fpu_dec_ren3, T_8400)
    node T_8403 = and(io_fpu_dec_wen, T_8392)
    node T_8404 = or(T_8397, T_8399)
    node T_8405 = or(T_8404, T_8401)
    node T_8406 = or(T_8405, T_8403)
    node fp_data_hazard_wb = and(wb_ctrl_wfd, T_8406)
    node T_8407 = and(data_hazard_wb, wb_set_sboard)
    node T_8408 = or(T_8407, fp_data_hazard_wb)
    node id_wb_hazard = and(wb_reg_valid, T_8408)
    reg T_8410 : UInt<32>, clk with :
      reset => (reset, UInt<32>("h0"))
    node T_8412 = and(wb_dcache_miss, wb_ctrl_wfd)
    node T_8413 = or(T_8412, io_fpu_sboard_set)
    node T_8414 = and(T_8413, wb_valid)
    node T_8418 = mux(T_8414, T_8328, UInt<32>("h0"))
    node T_8419 = or(T_8410, T_8418)
    node GEN_172 = mux(T_8414, T_8419, T_8410)
    node T_8421 = and(dmem_resp_replay, T_8242)
    node T_8423 = dshlw(UInt<32>("h1"), dmem_resp_waddr)
    node T_8425 = mux(T_8421, T_8423, UInt<32>("h0"))
    node T_8426 = not(T_8425)
    node T_8427 = and(T_8419, T_8426)
    node T_8428 = or(T_8414, T_8421)
    node GEN_173 = mux(T_8428, T_8427, GEN_172)
    node T_8430 = dshlw(UInt<32>("h1"), io_fpu_sboard_clra)
    node T_8432 = mux(io_fpu_sboard_clr, T_8430, UInt<32>("h0"))
    node T_8433 = not(T_8432)
    node T_8434 = and(T_8427, T_8433)
    node T_8435 = or(T_8428, io_fpu_sboard_clr)
    node GEN_174 = mux(T_8435, T_8434, GEN_173)
    node T_8437 = eq(io_fpu_fcsr_rdy, UInt<1>("h0"))
    node T_8438 = and(id_csr_en, T_8437)
    node T_8439 = dshr(T_8410, ibuf.io_inst_0_bits_inst_rs1)
    node T_8440 = bits(T_8439, 0, 0)
    node T_8441 = and(io_fpu_dec_ren1, T_8440)
    node T_8442 = dshr(T_8410, ibuf.io_inst_0_bits_inst_rs2)
    node T_8443 = bits(T_8442, 0, 0)
    node T_8444 = and(io_fpu_dec_ren2, T_8443)
    node T_8445 = dshr(T_8410, ibuf.io_inst_0_bits_inst_rs3)
    node T_8446 = bits(T_8445, 0, 0)
    node T_8447 = and(io_fpu_dec_ren3, T_8446)
    node T_8448 = dshr(T_8410, ibuf.io_inst_0_bits_inst_rd)
    node T_8449 = bits(T_8448, 0, 0)
    node T_8450 = and(io_fpu_dec_wen, T_8449)
    node T_8451 = or(T_8441, T_8444)
    node T_8452 = or(T_8451, T_8447)
    node T_8453 = or(T_8452, T_8450)
    node id_stall_fpu = or(T_8438, T_8453)
    reg dcache_blocked : UInt<1>, clk with :
      reset => (UInt<1>("h0"), dcache_blocked)
    node T_8457 = or(io_dmem_req_valid, dcache_blocked)
    node T_8458 = and(T_7921, T_8457)
    reg rocc_blocked : UInt<1>, clk with :
      reset => (UInt<1>("h0"), rocc_blocked)
    node T_8461 = eq(wb_reg_xcpt, UInt<1>("h0"))
    node T_8464 = and(T_8461, T_8239)
    node T_8465 = or(io_rocc_cmd_valid, rocc_blocked)
    node T_8466 = and(T_8464, T_8465)
    node T_8467 = or(id_ex_hazard, id_mem_hazard)
    node T_8468 = or(T_8467, id_wb_hazard)
    node T_8469 = or(T_8468, id_sboard_hazard)
    node T_8470 = and(id_ctrl_fp, id_stall_fpu)
    node T_8471 = or(T_8469, T_8470)
    node T_8472 = and(id_ctrl_mem, dcache_blocked)
    node T_8473 = or(T_8471, T_8472)
    node T_8474 = and(UInt<1>("h0"), rocc_blocked)
    node T_8475 = or(T_8473, T_8474)
    node T_8476 = or(T_8475, T_7711)
    node ctrl_stalld = or(T_8476, csr.io_csr_stall)
    node T_8478 = eq(ibuf.io_inst_0_valid, UInt<1>("h0"))
    node T_8479 = or(T_8478, ibuf.io_inst_0_bits_replay)
    node T_8480 = or(T_8479, take_pc_mem_wb)
    node T_8481 = or(T_8480, ctrl_stalld)
    node T_8482 = or(T_8481, csr.io_interrupt)
    node T_8485 = or(wb_xcpt, csr.io_eret)
    node T_8489 = mux(replay_wb, wb_reg_pc, mem_npc)
    node T_8490 = mux(T_8485, csr.io_evec, T_8489)
    node T_8491 = and(wb_reg_valid, wb_ctrl_fence_i)
    node T_8493 = eq(io_dmem_s2_nack, UInt<1>("h0"))
    node T_8494 = and(T_8491, T_8493)
    node T_8496 = eq(ctrl_stalld, UInt<1>("h0"))
    node T_8497 = or(T_8496, csr.io_interrupt)
    node T_8498 = and(mem_reg_replay, mem_reg_btb_hit)
    node T_8501 = and(mem_reg_valid, T_8224)
    node T_8503 = eq(mem_cfi, UInt<1>("h0"))
    node T_8504 = or(mem_cfi_taken, T_8503)
    node T_8505 = and(T_8504, mem_wrong_npc)
    node T_8512 = and(T_8501, T_8505)
    node T_8513 = or(T_8498, T_8512)
    node T_8515 = eq(mem_reg_replay, UInt<1>("h0"))
    node T_8516 = and(T_8515, mem_cfi)
    node T_8517 = or(mem_ctrl_jal, mem_ctrl_jalr)
    node T_8518 = bits(mem_reg_inst, 19, 15)
    node T_8521 = and(T_8518, UInt<5>("h19"))
    node T_8522 = eq(UInt<5>("h1"), T_8521)
    node T_8523 = and(mem_ctrl_jalr, T_8522)
    node T_8526 = mux(mem_reg_rvc, UInt<2>("h0"), UInt<2>("h2"))
    node GEN_186 = pad(T_8526, 40)
    node T_8527 = add(mem_reg_pc, GEN_186)
    node T_8528 = tail(T_8527, 1)
    node T_8529 = not(io_imem_btb_update_bits_br_pc)
    node T_8531 = or(T_8529, UInt<39>("h3"))
    node T_8532 = not(T_8531)
    node T_8536 = and(T_8501, mem_ctrl_branch)
    node T_8540 = bits(mem_waddr, 0, 0)
    node T_8541 = and(io_imem_btb_update_bits_isJump, T_8540)
    node T_8544 = and(T_7501, id_ctrl_fp)
    node T_8545 = and(dmem_resp_valid, T_8242)
    node T_8546 = and(ex_reg_valid, ex_ctrl_mem)
    node ex_dcache_tag = cat(ex_waddr, ex_ctrl_fp)
    node T_8548 = shr(ex_rs_0, 38)
    node T_8549 = bits(alu.io_adder_out, 39, 38)
    node T_8550 = asSInt(T_8549)
    node T_8552 = eq(T_8548, UInt<26>("h0"))
    node T_8554 = eq(T_8548, UInt<26>("h1"))
    node T_8555 = or(T_8552, T_8554)
    node T_8557 = neq(T_8550, SInt<2>("h0"))
    node T_8558 = asSInt(T_8548)
    node T_8560 = eq(T_8558, SInt<26>("h1"))
    node T_8563 = eq(T_8558, SInt<26>("h2"))
    node T_8564 = or(T_8560, T_8563)
    node T_8566 = eq(T_8550, SInt<2>("h1"))
    node T_8567 = bits(T_8550, 0, 0)
    node T_8568 = mux(T_8564, T_8566, T_8567)
    node T_8569 = mux(T_8555, T_8557, T_8568)
    node T_8570 = bits(alu.io_adder_out, 38, 0)
    node T_8571 = cat(T_8569, T_8570)
    node T_8572 = mux(mem_ctrl_fp, io_fpu_store_data, mem_reg_rs2)
    node T_8573 = or(killm_common, mem_breakpoint)
    node T_8574 = and(mem_ctrl_mem, mem_xcpt)
    node T_8576 = eq(io_dmem_s1_kill, UInt<1>("h0"))
    node T_8577 = and(T_8574, T_8576)
    node T_8578 = cat(io_dmem_xcpt_pf_ld, io_dmem_xcpt_pf_st)
    node T_8579 = cat(io_dmem_xcpt_ma_ld, io_dmem_xcpt_ma_st)
    node T_8580 = cat(T_8579, T_8578)
    node T_8582 = neq(T_8580, UInt<4>("h0"))
    node T_8583 = or(T_8582, reset)
    node T_8585 = eq(T_8583, UInt<1>("h0"))
    node T_8588 = eq(replay_wb_common, UInt<1>("h0"))
    node T_8589 = and(T_7700, T_8588)
    node T_8592 = and(wb_xcpt, T_7686)
    wire T_8611_funct : UInt<7>
    wire T_8611_rs2 : UInt<5>
    wire T_8611_rs1 : UInt<5>
    wire T_8611_xd : UInt<1>
    wire T_8611_xs1 : UInt<1>
    wire T_8611_xs2 : UInt<1>
    wire T_8611_rd : UInt<5>
    wire T_8611_opcode : UInt<7>
    wire T_8621 : UInt<32>
    node T_8622 = bits(T_8621, 6, 0)
    node T_8623 = bits(T_8621, 11, 7)
    node T_8624 = bits(T_8621, 12, 12)
    node T_8625 = bits(T_8621, 13, 13)
    node T_8626 = bits(T_8621, 14, 14)
    node T_8627 = bits(T_8621, 19, 15)
    node T_8628 = bits(T_8621, 24, 20)
    node T_8629 = bits(T_8621, 31, 25)
    node T_8630 = bits(csr.io_time, 31, 0)
    node T_8632 = mux(rf_wen, rf_waddr, UInt<5>("h0"))
    node T_8633 = bits(wb_reg_inst, 19, 15)
    reg T_8634 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), T_8634)
    reg T_8635 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), T_8635)
    node T_8636 = bits(wb_reg_inst, 24, 20)
    reg T_8637 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), T_8637)
    reg T_8638 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), T_8638)
    node T_8640 = eq(reset, UInt<1>("h0"))
    io_imem_req_valid <= take_pc
    io_imem_req_bits_pc <= T_8490
    io_imem_req_bits_speculative <= T_8224
    io_imem_resp_ready <= ibuf.io_imem_ready
    io_imem_btb_update_valid <= T_8513
    io_imem_btb_update_bits_prediction_valid <= mem_reg_btb_hit
    io_imem_btb_update_bits_prediction_bits_taken <= mem_reg_btb_resp_taken
    io_imem_btb_update_bits_prediction_bits_mask <= mem_reg_btb_resp_mask
    io_imem_btb_update_bits_prediction_bits_bridx <= mem_reg_btb_resp_bridx
    io_imem_btb_update_bits_prediction_bits_target <= mem_reg_btb_resp_target
    io_imem_btb_update_bits_prediction_bits_entry <= mem_reg_btb_resp_entry
    io_imem_btb_update_bits_prediction_bits_bht_history <= mem_reg_btb_resp_bht_history
    io_imem_btb_update_bits_prediction_bits_bht_value <= mem_reg_btb_resp_bht_value
    io_imem_btb_update_bits_pc <= T_8532
    io_imem_btb_update_bits_target <= bits(io_imem_req_bits_pc, 38, 0)
    io_imem_btb_update_bits_taken <= UInt<1>("h0")
    io_imem_btb_update_bits_isValid <= T_8516
    io_imem_btb_update_bits_isJump <= T_8517
    io_imem_btb_update_bits_isReturn <= T_8523
    io_imem_btb_update_bits_br_pc <= bits(T_8528, 38, 0)
    io_imem_bht_update_valid <= T_8536
    io_imem_bht_update_bits_prediction_valid <= io_imem_btb_update_bits_prediction_valid
    io_imem_bht_update_bits_prediction_bits_taken <= io_imem_btb_update_bits_prediction_bits_taken
    io_imem_bht_update_bits_prediction_bits_mask <= io_imem_btb_update_bits_prediction_bits_mask
    io_imem_bht_update_bits_prediction_bits_bridx <= io_imem_btb_update_bits_prediction_bits_bridx
    io_imem_bht_update_bits_prediction_bits_target <= io_imem_btb_update_bits_prediction_bits_target
    io_imem_bht_update_bits_prediction_bits_entry <= io_imem_btb_update_bits_prediction_bits_entry
    io_imem_bht_update_bits_prediction_bits_bht_history <= io_imem_btb_update_bits_prediction_bits_bht_history
    io_imem_bht_update_bits_prediction_bits_bht_value <= io_imem_btb_update_bits_prediction_bits_bht_value
    io_imem_bht_update_bits_pc <= io_imem_btb_update_bits_pc
    io_imem_bht_update_bits_taken <= mem_br_taken
    io_imem_bht_update_bits_mispredict <= mem_wrong_npc
    io_imem_ras_update_valid <= T_8501
    io_imem_ras_update_bits_isCall <= T_8541
    io_imem_ras_update_bits_isReturn <= io_imem_btb_update_bits_isReturn
    io_imem_ras_update_bits_returnAddr <= bits(mem_int_wdata, 38, 0)
    io_imem_ras_update_bits_prediction_valid <= io_imem_btb_update_bits_prediction_valid
    io_imem_ras_update_bits_prediction_bits_taken <= io_imem_btb_update_bits_prediction_bits_taken
    io_imem_ras_update_bits_prediction_bits_mask <= io_imem_btb_update_bits_prediction_bits_mask
    io_imem_ras_update_bits_prediction_bits_bridx <= io_imem_btb_update_bits_prediction_bits_bridx
    io_imem_ras_update_bits_prediction_bits_target <= io_imem_btb_update_bits_prediction_bits_target
    io_imem_ras_update_bits_prediction_bits_entry <= io_imem_btb_update_bits_prediction_bits_entry
    io_imem_ras_update_bits_prediction_bits_bht_history <= io_imem_btb_update_bits_prediction_bits_bht_history
    io_imem_ras_update_bits_prediction_bits_bht_value <= io_imem_btb_update_bits_prediction_bits_bht_value
    io_imem_flush_icache <= T_8494
    io_imem_flush_tlb <= csr.io_fatc
    io_dmem_req_valid <= T_8546
    io_dmem_req_bits_addr <= T_8571
    io_dmem_req_bits_tag <= pad(ex_dcache_tag, 7)
    io_dmem_req_bits_cmd <= ex_ctrl_mem_cmd
    io_dmem_req_bits_typ <= ex_ctrl_mem_type
    io_dmem_req_bits_phys <= UInt<1>("h0")
    io_dmem_req_bits_data <= UInt<64>("h410dc3182afbd7d4")
    io_dmem_s1_kill <= T_8573
    io_dmem_s1_data <= T_8572
    io_dmem_invalidate_lr <= wb_xcpt
    io_ptw_ptbr_asid <= csr.io_ptbr_asid
    io_ptw_ptbr_ppn <= csr.io_ptbr_ppn
    io_ptw_invalidate <= csr.io_fatc
    io_ptw_status_debug <= csr.io_status_debug
    io_ptw_status_isa <= csr.io_status_isa
    io_ptw_status_prv <= csr.io_status_prv
    io_ptw_status_sd <= csr.io_status_sd
    io_ptw_status_zero3 <= csr.io_status_zero3
    io_ptw_status_sd_rv32 <= csr.io_status_sd_rv32
    io_ptw_status_zero2 <= csr.io_status_zero2
    io_ptw_status_vm <= csr.io_status_vm
    io_ptw_status_zero1 <= csr.io_status_zero1
    io_ptw_status_mxr <= csr.io_status_mxr
    io_ptw_status_pum <= csr.io_status_pum
    io_ptw_status_mprv <= csr.io_status_mprv
    io_ptw_status_xs <= csr.io_status_xs
    io_ptw_status_fs <= csr.io_status_fs
    io_ptw_status_mpp <= csr.io_status_mpp
    io_ptw_status_hpp <= csr.io_status_hpp
    io_ptw_status_spp <= csr.io_status_spp
    io_ptw_status_mpie <= csr.io_status_mpie
    io_ptw_status_hpie <= csr.io_status_hpie
    io_ptw_status_spie <= csr.io_status_spie
    io_ptw_status_upie <= csr.io_status_upie
    io_ptw_status_mie <= csr.io_status_mie
    io_ptw_status_hie <= csr.io_status_hie
    io_ptw_status_sie <= csr.io_status_sie
    io_ptw_status_uie <= csr.io_status_uie
    io_fpu_inst <= ibuf.io_inst_0_bits_inst_bits
    io_fpu_fromint_data <= ex_rs_0
    io_fpu_fcsr_rm <= csr.io_fcsr_rm
    io_fpu_dmem_resp_val <= T_8545
    io_fpu_dmem_resp_type <= io_dmem_resp_bits_typ
    io_fpu_dmem_resp_tag <= dmem_resp_waddr
    io_fpu_dmem_resp_data <= io_dmem_resp_bits_data_word_bypass
    io_fpu_valid <= T_8544
    io_fpu_killx <= ctrl_killx
    io_fpu_killm <= killm_common
    io_fpu_cp_req_valid <= UInt<1>("h1")
    io_fpu_cp_req_bits_cmd <= UInt<5>("h2")
    io_fpu_cp_req_bits_ldst <= UInt<1>("h0")
    io_fpu_cp_req_bits_wen <= UInt<1>("h1")
    io_fpu_cp_req_bits_ren1 <= UInt<1>("h1")
    io_fpu_cp_req_bits_ren2 <= UInt<1>("h0")
    io_fpu_cp_req_bits_ren3 <= UInt<1>("h1")
    io_fpu_cp_req_bits_swap12 <= UInt<1>("h1")
    io_fpu_cp_req_bits_swap23 <= UInt<1>("h0")
    io_fpu_cp_req_bits_single <= UInt<1>("h1")
    io_fpu_cp_req_bits_fromint <= UInt<1>("h1")
    io_fpu_cp_req_bits_toint <= UInt<1>("h1")
    io_fpu_cp_req_bits_fastpipe <= UInt<1>("h0")
    io_fpu_cp_req_bits_fma <= UInt<1>("h1")
    io_fpu_cp_req_bits_div <= UInt<1>("h0")
    io_fpu_cp_req_bits_sqrt <= UInt<1>("h1")
    io_fpu_cp_req_bits_round <= UInt<1>("h0")
    io_fpu_cp_req_bits_wflags <= UInt<1>("h0")
    io_fpu_cp_req_bits_rm <= UInt<3>("h6")
    io_fpu_cp_req_bits_typ <= UInt<2>("h3")
    io_fpu_cp_req_bits_in1 <= UInt<65>("ha47620f898440294")
    io_fpu_cp_req_bits_in2 <= UInt<65>("hcd6dc630b0612b84")
    io_fpu_cp_req_bits_in3 <= UInt<65>("h37105491bebad411")
    io_fpu_cp_resp_ready <= UInt<1>("h0")
    io_rocc_cmd_valid <= T_8589
    io_rocc_cmd_bits_inst_funct <= T_8611_funct
    io_rocc_cmd_bits_inst_rs2 <= T_8611_rs2
    io_rocc_cmd_bits_inst_rs1 <= T_8611_rs1
    io_rocc_cmd_bits_inst_xd <= T_8611_xd
    io_rocc_cmd_bits_inst_xs1 <= T_8611_xs1
    io_rocc_cmd_bits_inst_xs2 <= T_8611_xs2
    io_rocc_cmd_bits_inst_rd <= T_8611_rd
    io_rocc_cmd_bits_inst_opcode <= T_8611_opcode
    io_rocc_cmd_bits_rs1 <= wb_reg_wdata
    io_rocc_cmd_bits_rs2 <= wb_reg_rs2
    io_rocc_cmd_bits_status_debug <= csr.io_status_debug
    io_rocc_cmd_bits_status_isa <= csr.io_status_isa
    io_rocc_cmd_bits_status_prv <= csr.io_status_prv
    io_rocc_cmd_bits_status_sd <= csr.io_status_sd
    io_rocc_cmd_bits_status_zero3 <= csr.io_status_zero3
    io_rocc_cmd_bits_status_sd_rv32 <= csr.io_status_sd_rv32
    io_rocc_cmd_bits_status_zero2 <= csr.io_status_zero2
    io_rocc_cmd_bits_status_vm <= csr.io_status_vm
    io_rocc_cmd_bits_status_zero1 <= csr.io_status_zero1
    io_rocc_cmd_bits_status_mxr <= csr.io_status_mxr
    io_rocc_cmd_bits_status_pum <= csr.io_status_pum
    io_rocc_cmd_bits_status_mprv <= csr.io_status_mprv
    io_rocc_cmd_bits_status_xs <= csr.io_status_xs
    io_rocc_cmd_bits_status_fs <= csr.io_status_fs
    io_rocc_cmd_bits_status_mpp <= csr.io_status_mpp
    io_rocc_cmd_bits_status_hpp <= csr.io_status_hpp
    io_rocc_cmd_bits_status_spp <= csr.io_status_spp
    io_rocc_cmd_bits_status_mpie <= csr.io_status_mpie
    io_rocc_cmd_bits_status_hpie <= csr.io_status_hpie
    io_rocc_cmd_bits_status_spie <= csr.io_status_spie
    io_rocc_cmd_bits_status_upie <= csr.io_status_upie
    io_rocc_cmd_bits_status_mie <= csr.io_status_mie
    io_rocc_cmd_bits_status_hie <= csr.io_status_hie
    io_rocc_cmd_bits_status_sie <= csr.io_status_sie
    io_rocc_cmd_bits_status_uie <= csr.io_status_uie
    io_rocc_resp_ready <= UInt<1>("h0")
    io_rocc_mem_req_ready <= UInt<1>("h0")
    io_rocc_mem_s2_nack <= UInt<1>("h0")
    io_rocc_mem_resp_valid <= UInt<1>("h0")
    io_rocc_mem_resp_bits_addr <= UInt<40>("hb1252ef68e")
    io_rocc_mem_resp_bits_tag <= UInt<7>("h34")
    io_rocc_mem_resp_bits_cmd <= UInt<5>("h1c")
    io_rocc_mem_resp_bits_typ <= UInt<3>("h5")
    io_rocc_mem_resp_bits_data <= UInt<64>("h373c94417dd1b08e")
    io_rocc_mem_resp_bits_replay <= UInt<1>("h1")
    io_rocc_mem_resp_bits_has_data <= UInt<1>("h0")
    io_rocc_mem_resp_bits_data_word_bypass <= UInt<64>("hc6e82023ebca69f5")
    io_rocc_mem_resp_bits_store_data <= UInt<64>("h4ae2d9013ec2ea1c")
    io_rocc_mem_replay_next <= UInt<1>("h1")
    io_rocc_mem_xcpt_ma_ld <= UInt<1>("h1")
    io_rocc_mem_xcpt_ma_st <= UInt<1>("h0")
    io_rocc_mem_xcpt_pf_ld <= UInt<1>("h1")
    io_rocc_mem_xcpt_pf_st <= UInt<1>("h0")
    io_rocc_mem_ordered <= UInt<1>("h1")
    io_rocc_autl_acquire_ready <= UInt<1>("h1")
    io_rocc_autl_grant_valid <= UInt<1>("h1")
    io_rocc_autl_grant_bits_addr_beat <= UInt<3>("h5")
    io_rocc_autl_grant_bits_client_xact_id <= UInt<1>("h1")
    io_rocc_autl_grant_bits_manager_xact_id <= UInt<4>("h2")
    io_rocc_autl_grant_bits_is_builtin_type <= UInt<1>("h0")
    io_rocc_autl_grant_bits_g_type <= UInt<4>("hb")
    io_rocc_autl_grant_bits_data <= UInt<64>("hc15302501058b694")
    io_rocc_fpu_req_ready <= UInt<1>("h0")
    io_rocc_fpu_resp_valid <= UInt<1>("h1")
    io_rocc_fpu_resp_bits_data <= UInt<65>("h5feedeac13279d7e")
    io_rocc_fpu_resp_bits_exc <= UInt<5>("h9")
    io_rocc_exception <= T_8592
    ex_ctrl_legal <= GEN_29
    ex_ctrl_fp <= GEN_30
    ex_ctrl_rocc <= GEN_31
    ex_ctrl_branch <= GEN_32
    ex_ctrl_jal <= GEN_33
    ex_ctrl_jalr <= GEN_34
    ex_ctrl_rxs2 <= GEN_35
    ex_ctrl_rxs1 <= GEN_36
    ex_ctrl_sel_alu2 <= GEN_37
    ex_ctrl_sel_alu1 <= GEN_38
    ex_ctrl_sel_imm <= GEN_39
    ex_ctrl_alu_dw <= GEN_40
    ex_ctrl_alu_fn <= GEN_41
    ex_ctrl_mem <= GEN_42
    ex_ctrl_mem_cmd <= GEN_43
    ex_ctrl_mem_type <= GEN_44
    ex_ctrl_rfs1 <= GEN_45
    ex_ctrl_rfs2 <= GEN_46
    ex_ctrl_rfs3 <= GEN_47
    ex_ctrl_wfd <= GEN_48
    ex_ctrl_div <= GEN_49
    ex_ctrl_wxd <= GEN_50
    ex_ctrl_csr <= GEN_51
    ex_ctrl_fence_i <= GEN_52
    ex_ctrl_fence <= GEN_53
    ex_ctrl_amo <= GEN_54
    ex_ctrl_dp <= GEN_55
    mem_ctrl_legal <= GEN_76
    mem_ctrl_fp <= GEN_77
    mem_ctrl_rocc <= GEN_78
    mem_ctrl_branch <= GEN_79
    mem_ctrl_jal <= GEN_80
    mem_ctrl_jalr <= GEN_81
    mem_ctrl_rxs2 <= GEN_82
    mem_ctrl_rxs1 <= GEN_83
    mem_ctrl_sel_alu2 <= GEN_84
    mem_ctrl_sel_alu1 <= GEN_85
    mem_ctrl_sel_imm <= GEN_86
    mem_ctrl_alu_dw <= GEN_87
    mem_ctrl_alu_fn <= GEN_88
    mem_ctrl_mem <= GEN_89
    mem_ctrl_mem_cmd <= GEN_90
    mem_ctrl_mem_type <= GEN_91
    mem_ctrl_rfs1 <= GEN_92
    mem_ctrl_rfs2 <= GEN_93
    mem_ctrl_rfs3 <= GEN_94
    mem_ctrl_wfd <= GEN_95
    mem_ctrl_div <= GEN_96
    mem_ctrl_wxd <= GEN_97
    mem_ctrl_csr <= GEN_98
    mem_ctrl_fence_i <= GEN_99
    mem_ctrl_fence <= GEN_100
    mem_ctrl_amo <= GEN_101
    mem_ctrl_dp <= GEN_102
    wb_ctrl_legal <= GEN_122
    wb_ctrl_fp <= GEN_123
    wb_ctrl_rocc <= GEN_124
    wb_ctrl_branch <= GEN_125
    wb_ctrl_jal <= GEN_126
    wb_ctrl_jalr <= GEN_127
    wb_ctrl_rxs2 <= GEN_128
    wb_ctrl_rxs1 <= GEN_129
    wb_ctrl_sel_alu2 <= GEN_130
    wb_ctrl_sel_alu1 <= GEN_131
    wb_ctrl_sel_imm <= GEN_132
    wb_ctrl_alu_dw <= GEN_133
    wb_ctrl_alu_fn <= GEN_134
    wb_ctrl_mem <= GEN_135
    wb_ctrl_mem_cmd <= GEN_136
    wb_ctrl_mem_type <= GEN_137
    wb_ctrl_rfs1 <= GEN_138
    wb_ctrl_rfs2 <= GEN_139
    wb_ctrl_rfs3 <= GEN_140
    wb_ctrl_wfd <= GEN_141
    wb_ctrl_div <= GEN_142
    wb_ctrl_wxd <= GEN_143
    wb_ctrl_csr <= GEN_144
    wb_ctrl_fence_i <= GEN_145
    wb_ctrl_fence <= GEN_146
    wb_ctrl_amo <= GEN_147
    wb_ctrl_dp <= GEN_148
    ex_reg_xcpt_interrupt <= T_7868
    ex_reg_valid <= T_7501
    ex_reg_rvc <= GEN_56
    ex_reg_btb_hit <= ibuf.io_inst_0_bits_btb_hit
    ex_reg_btb_resp_taken <= GEN_9
    ex_reg_btb_resp_mask <= GEN_10
    ex_reg_btb_resp_bridx <= GEN_11
    ex_reg_btb_resp_target <= GEN_12
    ex_reg_btb_resp_entry <= GEN_13
    ex_reg_btb_resp_bht_history <= GEN_14
    ex_reg_btb_resp_bht_value <= GEN_15
    ex_reg_xcpt <= T_7864
    ex_reg_flush_pipe <= GEN_57
    ex_reg_load_use <= GEN_58
    ex_reg_cause <= GEN_8
    ex_reg_replay <= T_7861
    ex_reg_pc <= GEN_66
    ex_reg_inst <= GEN_65
    mem_reg_xcpt_interrupt <= T_8162
    mem_reg_valid <= T_8153
    mem_reg_rvc <= GEN_103
    mem_reg_btb_hit <= GEN_106
    mem_reg_btb_resp_taken <= GEN_107
    mem_reg_btb_resp_mask <= GEN_108
    mem_reg_btb_resp_bridx <= GEN_109
    mem_reg_btb_resp_target <= GEN_110
    mem_reg_btb_resp_entry <= GEN_111
    mem_reg_btb_resp_bht_history <= GEN_112
    mem_reg_btb_resp_bht_value <= GEN_113
    mem_reg_xcpt <= T_8159
    mem_reg_replay <= T_8156
    mem_reg_flush_pipe <= GEN_114
    mem_reg_cause <= GEN_67
    mem_reg_slow_bypass <= GEN_115
    mem_reg_load <= GEN_104
    mem_reg_store <= GEN_105
    mem_reg_pc <= GEN_117
    mem_reg_inst <= GEN_116
    mem_reg_wdata <= GEN_118
    mem_reg_rs2 <= GEN_119
    take_pc_mem <= T_8151
    wb_reg_valid <= T_8222
    wb_reg_xcpt <= T_8228
    wb_reg_replay <= T_8225
    wb_reg_cause <= GEN_120
    wb_reg_pc <= GEN_152
    wb_reg_inst <= GEN_151
    wb_reg_wdata <= GEN_149
    wb_reg_rs2 <= GEN_150
    take_pc_wb <= T_8241
    ibuf.io_imem_valid <= io_imem_resp_valid
    ibuf.io_imem_bits_btb_valid <= io_imem_resp_bits_btb_valid
    ibuf.io_imem_bits_btb_bits_taken <= io_imem_resp_bits_btb_bits_taken
    ibuf.io_imem_bits_btb_bits_mask <= io_imem_resp_bits_btb_bits_mask
    ibuf.io_imem_bits_btb_bits_bridx <= io_imem_resp_bits_btb_bits_bridx
    ibuf.io_imem_bits_btb_bits_target <= io_imem_resp_bits_btb_bits_target
    ibuf.io_imem_bits_btb_bits_entry <= io_imem_resp_bits_btb_bits_entry
    ibuf.io_imem_bits_btb_bits_bht_history <= io_imem_resp_bits_btb_bits_bht_history
    ibuf.io_imem_bits_btb_bits_bht_value <= io_imem_resp_bits_btb_bits_bht_value
    ibuf.io_imem_bits_pc <= io_imem_resp_bits_pc
    ibuf.io_imem_bits_data <= io_imem_resp_bits_data
    ibuf.io_imem_bits_mask <= io_imem_resp_bits_mask
    ibuf.io_imem_bits_xcpt_if <= io_imem_resp_bits_xcpt_if
    ibuf.io_imem_bits_replay <= io_imem_resp_bits_replay
    ibuf.io_kill <= take_pc
    ibuf.io_inst_0_ready <= T_8497
    id_ctrl_legal <= T_6880
    id_ctrl_fp <= T_6891
    id_ctrl_branch <= T_6896
    id_ctrl_jal <= T_6902
    id_ctrl_jalr <= T_6908
    id_ctrl_rxs2 <= T_6926
    id_ctrl_rxs1 <= T_6952
    id_ctrl_sel_alu2 <= T_6996
    id_ctrl_sel_alu1 <= T_7022
    id_ctrl_sel_imm <= T_7058
    id_ctrl_alu_dw <= T_7069
    id_ctrl_alu_fn <= T_7153
    id_ctrl_mem <= T_7174
    id_ctrl_mem_cmd <= T_7234
    id_ctrl_mem_type <= T_7254
    id_ctrl_rfs1 <= T_7270
    id_ctrl_rfs2 <= T_7287
    id_ctrl_rfs3 <= T_7266
    id_ctrl_wfd <= T_7302
    id_ctrl_div <= T_7306
    id_ctrl_wxd <= T_7344
    id_ctrl_csr <= T_7364
    id_ctrl_fence_i <= T_7368
    id_ctrl_fence <= T_7374
    id_ctrl_amo <= T_7380
    id_ctrl_dp <= T_7398
    id_load_use <= T_8387
    id_reg_fence <= T_7703
    id_rs_0 <= GEN_168
    id_rs_1 <= GEN_169
    ctrl_killd <= T_8482
    csr.io_prci_reset <= io_prci_reset
    csr.io_prci_id <= io_prci_id
    csr.io_prci_interrupts_meip <= io_prci_interrupts_meip
    csr.io_prci_interrupts_seip <= io_prci_interrupts_seip
    csr.io_prci_interrupts_debug <= io_prci_interrupts_debug
    csr.io_prci_interrupts_mtip <= io_prci_interrupts_mtip
    csr.io_prci_interrupts_msip <= io_prci_interrupts_msip
    csr.io_rw_addr <= T_8293
    csr.io_rw_cmd <= T_8294
    csr.io_rw_wdata <= wb_reg_wdata
    csr.io_exception <= wb_reg_xcpt
    csr.io_retire <= wb_valid
    csr.io_cause <= wb_reg_cause
    csr.io_pc <= wb_reg_pc
    csr.io_badaddr <= T_8292
    csr.io_fcsr_flags_valid <= io_fpu_fcsr_flags_valid
    csr.io_fcsr_flags_bits <= io_fpu_fcsr_flags_bits
    csr.io_rocc_cmd_ready <= UInt<1>("h0")
    csr.io_rocc_resp_valid <= UInt<1>("h1")
    csr.io_rocc_resp_bits_rd <= UInt<5>("h1")
    csr.io_rocc_resp_bits_data <= UInt<64>("h5421f30e96f90a7e")
    csr.io_rocc_mem_req_valid <= UInt<1>("h1")
    csr.io_rocc_mem_req_bits_addr <= UInt<40>("h6148d1358e")
    csr.io_rocc_mem_req_bits_tag <= UInt<7>("hc")
    csr.io_rocc_mem_req_bits_cmd <= UInt<5>("h4")
    csr.io_rocc_mem_req_bits_typ <= UInt<3>("h7")
    csr.io_rocc_mem_req_bits_phys <= UInt<1>("h0")
    csr.io_rocc_mem_req_bits_data <= UInt<64>("hd46a7bbd71f42b90")
    csr.io_rocc_mem_s1_kill <= UInt<1>("h0")
    csr.io_rocc_mem_s1_data <= UInt<64>("hb5fd8680245792b4")
    csr.io_rocc_mem_invalidate_lr <= UInt<1>("h1")
    csr.io_rocc_busy <= UInt<1>("h0")
    csr.io_rocc_interrupt <= io_rocc_interrupt
    csr.io_rocc_autl_acquire_valid <= UInt<1>("h1")
    csr.io_rocc_autl_acquire_bits_addr_block <= UInt<26>("h8ec20d")
    csr.io_rocc_autl_acquire_bits_client_xact_id <= UInt<1>("h1")
    csr.io_rocc_autl_acquire_bits_addr_beat <= UInt<3>("h3")
    csr.io_rocc_autl_acquire_bits_is_builtin_type <= UInt<1>("h1")
    csr.io_rocc_autl_acquire_bits_a_type <= UInt<3>("h4")
    csr.io_rocc_autl_acquire_bits_union <= UInt<11>("h559")
    csr.io_rocc_autl_acquire_bits_data <= UInt<64>("h2bc9a87c9dc3efa")
    csr.io_rocc_autl_grant_ready <= UInt<1>("h1")
    csr.io_rocc_fpu_req_valid <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_cmd <= UInt<5>("h6")
    csr.io_rocc_fpu_req_bits_ldst <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_wen <= UInt<1>("h1")
    csr.io_rocc_fpu_req_bits_ren1 <= UInt<1>("h1")
    csr.io_rocc_fpu_req_bits_ren2 <= UInt<1>("h1")
    csr.io_rocc_fpu_req_bits_ren3 <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_swap12 <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_swap23 <= UInt<1>("h1")
    csr.io_rocc_fpu_req_bits_single <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_fromint <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_toint <= UInt<1>("h1")
    csr.io_rocc_fpu_req_bits_fastpipe <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_fma <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_div <= UInt<1>("h1")
    csr.io_rocc_fpu_req_bits_sqrt <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_round <= UInt<1>("h1")
    csr.io_rocc_fpu_req_bits_wflags <= UInt<1>("h0")
    csr.io_rocc_fpu_req_bits_rm <= UInt<3>("h5")
    csr.io_rocc_fpu_req_bits_typ <= UInt<2>("h1")
    csr.io_rocc_fpu_req_bits_in1 <= UInt<65>("h522aca8b23bb5869")
    csr.io_rocc_fpu_req_bits_in2 <= UInt<65>("h1d8dcc69883217607")
    csr.io_rocc_fpu_req_bits_in3 <= UInt<65>("hb56e612254d7e531")
    csr.io_rocc_fpu_resp_ready <= UInt<1>("h0")
    bpu.io_status_debug <= csr.io_status_debug
    bpu.io_status_isa <= csr.io_status_isa
    bpu.io_status_prv <= csr.io_status_prv
    bpu.io_status_sd <= csr.io_status_sd
    bpu.io_status_zero3 <= csr.io_status_zero3
    bpu.io_status_sd_rv32 <= csr.io_status_sd_rv32
    bpu.io_status_zero2 <= csr.io_status_zero2
    bpu.io_status_vm <= csr.io_status_vm
    bpu.io_status_zero1 <= csr.io_status_zero1
    bpu.io_status_mxr <= csr.io_status_mxr
    bpu.io_status_pum <= csr.io_status_pum
    bpu.io_status_mprv <= csr.io_status_mprv
    bpu.io_status_xs <= csr.io_status_xs
    bpu.io_status_fs <= csr.io_status_fs
    bpu.io_status_mpp <= csr.io_status_mpp
    bpu.io_status_hpp <= csr.io_status_hpp
    bpu.io_status_spp <= csr.io_status_spp
    bpu.io_status_mpie <= csr.io_status_mpie
    bpu.io_status_hpie <= csr.io_status_hpie
    bpu.io_status_spie <= csr.io_status_spie
    bpu.io_status_upie <= csr.io_status_upie
    bpu.io_status_mie <= csr.io_status_mie
    bpu.io_status_hie <= csr.io_status_hie
    bpu.io_status_sie <= csr.io_status_sie
    bpu.io_status_uie <= csr.io_status_uie
    bpu.io_bp_0_control_ttype <= csr.io_bp_0_control_ttype
    bpu.io_bp_0_control_dmode <= csr.io_bp_0_control_dmode
    bpu.io_bp_0_control_maskmax <= csr.io_bp_0_control_maskmax
    bpu.io_bp_0_control_reserved <= csr.io_bp_0_control_reserved
    bpu.io_bp_0_control_action <= csr.io_bp_0_control_action
    bpu.io_bp_0_control_chain <= csr.io_bp_0_control_chain
    bpu.io_bp_0_control_zero <= csr.io_bp_0_control_zero
    bpu.io_bp_0_control_tmatch <= csr.io_bp_0_control_tmatch
    bpu.io_bp_0_control_m <= csr.io_bp_0_control_m
    bpu.io_bp_0_control_h <= csr.io_bp_0_control_h
    bpu.io_bp_0_control_s <= csr.io_bp_0_control_s
    bpu.io_bp_0_control_u <= csr.io_bp_0_control_u
    bpu.io_bp_0_control_x <= csr.io_bp_0_control_x
    bpu.io_bp_0_control_w <= csr.io_bp_0_control_w
    bpu.io_bp_0_control_r <= csr.io_bp_0_control_r
    bpu.io_bp_0_address <= csr.io_bp_0_address
    bpu.io_pc <= bits(ibuf.io_pc, 38, 0)
    bpu.io_ea <= bits(mem_reg_wdata, 38, 0)
    bypass_mux_1 <= mem_reg_wdata
    bypass_mux_2 <= wb_reg_wdata
    bypass_mux_3 <= io_dmem_resp_bits_data_word_bypass
    ex_reg_rs_bypass_0 <= GEN_59
    ex_reg_rs_bypass_1 <= GEN_62
    ex_reg_rs_lsb_0 <= GEN_60
    ex_reg_rs_lsb_1 <= GEN_63
    ex_reg_rs_msb_0 <= GEN_61
    ex_reg_rs_msb_1 <= GEN_64
    GEN_0 <= GEN_4
    GEN_1 <= GEN_7
    alu.io_dw <= ex_ctrl_alu_dw
    alu.io_fn <= ex_ctrl_alu_fn
    alu.io_in2 <= T_7853
    alu.io_in1 <= T_7854
    div.io_req_valid <= T_7855
    div.io_req_bits_fn <= ex_ctrl_alu_fn
    div.io_req_bits_dw <= ex_ctrl_alu_dw
    div.io_req_bits_in1 <= ex_rs_0
    div.io_req_bits_in2 <= ex_rs_1
    div.io_req_bits_tag <= ex_waddr
    div.io_kill <= T_8219
    div.io_resp_ready <= GEN_153
    T_8218 <= T_8217
    ll_wdata <= div.io_resp_bits_data
    ll_waddr <= GEN_154
    ll_wen <= GEN_155
    T_8305 <= GEN_171
    T_8410 <= GEN_174
    dcache_blocked <= T_8458
    rocc_blocked <= T_8466
    T_8611_funct <= T_8629
    T_8611_rs2 <= T_8628
    T_8611_rs1 <= T_8627
    T_8611_xd <= T_8626
    T_8611_xs1 <= T_8625
    T_8611_xs2 <= T_8624
    T_8611_rd <= T_8623
    T_8611_opcode <= T_8622
    T_8621 <= wb_reg_inst
    T_8634 <= ex_rs_0
    T_8635 <= T_8634
    T_8637 <= ex_rs_1
    T_8638 <= T_8637
    printf(clk, and(T_8577, T_8585), "Assertion failed\n    at rocket.scala:642 assert(io.dmem.xcpt.asUInt.orR) // make sure s1_kill is exhaustive\n")
    stop(clk, and(T_8577, T_8585), 1)
    printf(clk, T_8640, "C%d: %d [%d] pc=[%h] W[r%d=%h][%d] R[r%d=%h] R[r%d=%h] inst=[%h] DASM(%h)\n", io_prci_id, T_8630, wb_valid, wb_reg_pc, T_8632, rf_wdata, rf_wen, T_8633, T_8635, T_8636, T_8638, wb_reg_inst, wb_reg_inst)

  module FlowThroughSerializer :
    input clk : Clock
    input reset : UInt<1>
    output io_in_ready : UInt<1>
    input io_in_valid : UInt<1>
    input io_in_bits_addr_beat : UInt<3>
    input io_in_bits_client_xact_id : UInt<1>
    input io_in_bits_manager_xact_id : UInt<4>
    input io_in_bits_is_builtin_type : UInt<1>
    input io_in_bits_g_type : UInt<4>
    input io_in_bits_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_beat : UInt<3>
    output io_out_bits_client_xact_id : UInt<1>
    output io_out_bits_manager_xact_id : UInt<4>
    output io_out_bits_is_builtin_type : UInt<1>
    output io_out_bits_g_type : UInt<4>
    output io_out_bits_data : UInt<64>
    output io_cnt : UInt<1>
    output io_done : UInt<1>
  
    io_in_ready <= io_out_ready
    io_out_valid <= io_in_valid
    io_out_bits_addr_beat <= io_in_bits_addr_beat
    io_out_bits_client_xact_id <= io_in_bits_client_xact_id
    io_out_bits_manager_xact_id <= io_in_bits_manager_xact_id
    io_out_bits_is_builtin_type <= io_in_bits_is_builtin_type
    io_out_bits_g_type <= io_in_bits_g_type
    io_out_bits_data <= io_in_bits_data
    io_cnt <= UInt<1>("h0")
    io_done <= UInt<1>("h1")

  module ICache :
    input clk : Clock
    input reset : UInt<1>
    input io_req_valid : UInt<1>
    input io_req_bits_addr : UInt<39>
    input io_s1_ppn : UInt<20>
    input io_s1_kill : UInt<1>
    input io_s2_kill : UInt<1>
    input io_resp_ready : UInt<1>
    output io_resp_valid : UInt<1>
    output io_resp_bits_data : UInt<16>
    output io_resp_bits_datablock : UInt<64>
    input io_invalidate : UInt<1>
    input io_mem_acquire_ready : UInt<1>
    output io_mem_acquire_valid : UInt<1>
    output io_mem_acquire_bits_addr_block : UInt<26>
    output io_mem_acquire_bits_client_xact_id : UInt<1>
    output io_mem_acquire_bits_addr_beat : UInt<3>
    output io_mem_acquire_bits_is_builtin_type : UInt<1>
    output io_mem_acquire_bits_a_type : UInt<3>
    output io_mem_acquire_bits_union : UInt<11>
    output io_mem_acquire_bits_data : UInt<64>
    output io_mem_grant_ready : UInt<1>
    input io_mem_grant_valid : UInt<1>
    input io_mem_grant_bits_addr_beat : UInt<3>
    input io_mem_grant_bits_client_xact_id : UInt<1>
    input io_mem_grant_bits_manager_xact_id : UInt<4>
    input io_mem_grant_bits_is_builtin_type : UInt<1>
    input io_mem_grant_bits_g_type : UInt<4>
    input io_mem_grant_bits_data : UInt<64>
  
    reg state : UInt<2>, clk with :
      reset => (reset, UInt<2>("h0"))
    reg invalidated : UInt<1>, clk with :
      reset => (UInt<1>("h0"), invalidated)
    node stall = eq(io_resp_ready, UInt<1>("h0"))
    wire rdy : UInt<1>
    reg refill_addr : UInt<32>, clk with :
      reset => (UInt<1>("h0"), refill_addr)
    wire s1_any_tag_hit : UInt<1>
    reg s1_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg s1_vaddr : UInt<39>, clk with :
      reset => (UInt<1>("h0"), s1_vaddr)
    node T_827 = bits(s1_vaddr, 11, 0)
    node s1_paddr = cat(io_s1_ppn, T_827)
    node s1_tag = bits(s1_paddr, 31, 12)
    node T_828 = and(s1_valid, stall)
    node s0_valid = or(io_req_valid, T_828)
    node s0_vaddr = mux(T_828, s1_vaddr, io_req_bits_addr)
    node T_830 = and(io_req_valid, rdy)
    node T_833 = eq(io_s1_kill, UInt<1>("h0"))
    node T_834 = and(T_828, T_833)
    node T_835 = or(T_830, T_834)
    node GEN_0 = mux(T_830, io_req_bits_addr, s1_vaddr)
    node T_839 = and(s1_valid, T_833)
    node T_840 = eq(state, UInt<2>("h0"))
    node out_valid = and(T_839, T_840)
    node s1_idx = bits(s1_vaddr, 11, 6)
    node s1_hit = and(out_valid, s1_any_tag_hit)
    node T_842 = eq(s1_any_tag_hit, UInt<1>("h0"))
    node s1_miss = and(out_valid, T_842)
    node T_845 = eq(s1_miss, UInt<1>("h0"))
    node T_846 = and(T_840, T_845)
    node T_848 = and(s1_miss, T_840)
    node GEN_1 = mux(T_848, s1_paddr, refill_addr)
    node refill_tag = bits(refill_addr, 31, 12)
    inst FlowThroughSerializer_1 of FlowThroughSerializer
    node T_849 = and(FlowThroughSerializer_1.io_out_ready, FlowThroughSerializer_1.io_out_valid)
    reg refill_cnt : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_852 = eq(refill_cnt, UInt<3>("h7"))
    node T_854 = add(refill_cnt, UInt<3>("h1"))
    node T_855 = tail(T_854, 1)
    node GEN_2 = mux(T_849, T_855, refill_cnt)
    node refill_wrap = and(T_849, T_852)
    node T_856 = eq(state, UInt<2>("h3"))
    node refill_done = and(T_856, refill_wrap)
    reg T_859 : UInt<16>, clk with :
      reset => (reset, UInt<16>("h1"))
    node T_860 = bits(T_859, 0, 0)
    node T_861 = bits(T_859, 2, 2)
    node T_862 = xor(T_860, T_861)
    node T_863 = bits(T_859, 3, 3)
    node T_864 = xor(T_862, T_863)
    node T_865 = bits(T_859, 5, 5)
    node T_866 = xor(T_864, T_865)
    node T_867 = bits(T_859, 15, 1)
    node T_868 = cat(T_866, T_867)
    node GEN_3 = mux(s1_miss, T_868, T_859)
    node repl_way = bits(T_859, 1, 0)
    mem tag_array_0 :
      data-type => UInt<20>
      depth => 64
      read-latency => 0
      write-latency => 1
      reader => tag_rdata
      writer => T_910
      read-under-write => undefined
    reg tag_array_0_tag_rdata_addr_pipe_0 : UInt<6>, clk with :
      reset => (UInt<1>("h0"), tag_array_0_tag_rdata_addr_pipe_0)
    tag_array_0_tag_rdata_addr_pipe_0 <= mux(T_880, T_882, tag_array_0_tag_rdata_addr_pipe_0)
    tag_array_0.tag_rdata.en <= T_880
    tag_array_0.tag_rdata.addr <= tag_array_0_tag_rdata_addr_pipe_0
    tag_array_0.T_910.en <= refill_done
    tag_array_0.T_910.mask <= GEN_18
    tag_array_0.T_910.addr <= s1_idx
    tag_array_0.T_910.data <= T_891_0
    mem tag_array_1 :
      data-type => UInt<20>
      depth => 64
      read-latency => 0
      write-latency => 1
      reader => tag_rdata
      writer => T_910
      read-under-write => undefined
    reg tag_array_1_tag_rdata_addr_pipe_0 : UInt<6>, clk with :
      reset => (UInt<1>("h0"), tag_array_1_tag_rdata_addr_pipe_0)
    tag_array_1_tag_rdata_addr_pipe_0 <= mux(T_880, T_882, tag_array_1_tag_rdata_addr_pipe_0)
    tag_array_1.tag_rdata.en <= T_880
    tag_array_1.tag_rdata.addr <= tag_array_1_tag_rdata_addr_pipe_0
    tag_array_1.T_910.en <= refill_done
    tag_array_1.T_910.mask <= GEN_20
    tag_array_1.T_910.addr <= s1_idx
    tag_array_1.T_910.data <= T_891_1
    mem tag_array_2 :
      data-type => UInt<20>
      depth => 64
      read-latency => 0
      write-latency => 1
      reader => tag_rdata
      writer => T_910
      read-under-write => undefined
    reg tag_array_2_tag_rdata_addr_pipe_0 : UInt<6>, clk with :
      reset => (UInt<1>("h0"), tag_array_2_tag_rdata_addr_pipe_0)
    tag_array_2_tag_rdata_addr_pipe_0 <= mux(T_880, T_882, tag_array_2_tag_rdata_addr_pipe_0)
    tag_array_2.tag_rdata.en <= T_880
    tag_array_2.tag_rdata.addr <= tag_array_2_tag_rdata_addr_pipe_0
    tag_array_2.T_910.en <= refill_done
    tag_array_2.T_910.mask <= GEN_22
    tag_array_2.T_910.addr <= s1_idx
    tag_array_2.T_910.data <= T_891_2
    mem tag_array_3 :
      data-type => UInt<20>
      depth => 64
      read-latency => 0
      write-latency => 1
      reader => tag_rdata
      writer => T_910
      read-under-write => undefined
    reg tag_array_3_tag_rdata_addr_pipe_0 : UInt<6>, clk with :
      reset => (UInt<1>("h0"), tag_array_3_tag_rdata_addr_pipe_0)
    tag_array_3_tag_rdata_addr_pipe_0 <= mux(T_880, T_882, tag_array_3_tag_rdata_addr_pipe_0)
    tag_array_3.tag_rdata.en <= T_880
    tag_array_3.tag_rdata.addr <= tag_array_3_tag_rdata_addr_pipe_0
    tag_array_3.T_910.en <= refill_done
    tag_array_3.T_910.mask <= GEN_24
    tag_array_3.T_910.addr <= s1_idx
    tag_array_3.T_910.data <= T_891_3
    node T_877 = bits(s0_vaddr, 11, 6)
    node T_879 = eq(refill_done, UInt<1>("h0"))
    node T_880 = and(T_879, s0_valid)
    wire T_882 : UInt<6>
    wire T_891_0 : UInt<20>
    wire T_891_1 : UInt<20>
    wire T_891_2 : UInt<20>
    wire T_891_3 : UInt<20>
    node T_894 = eq(repl_way, UInt<2>("h0"))
    node T_896 = eq(repl_way, UInt<2>("h1"))
    node T_898 = eq(repl_way, UInt<2>("h2"))
    node T_900 = eq(repl_way, UInt<2>("h3"))
    wire T_906_0 : UInt<1>
    wire T_906_1 : UInt<1>
    wire T_906_2 : UInt<1>
    wire T_906_3 : UInt<1>
    node GEN_18 = mux(refill_done, T_906_0, UInt<1>("h0"))
    node GEN_20 = mux(refill_done, T_906_1, UInt<1>("h0"))
    node GEN_22 = mux(refill_done, T_906_2, UInt<1>("h0"))
    node GEN_24 = mux(refill_done, T_906_3, UInt<1>("h0"))
    reg vb_array : UInt<256>, clk with :
      reset => (reset, UInt<256>("h0"))
    node T_914 = eq(invalidated, UInt<1>("h0"))
    node T_915 = and(refill_done, T_914)
    node T_916 = cat(repl_way, s1_idx)
    node T_919 = dshlw(UInt<256>("h1"), T_916)
    node T_920 = or(vb_array, T_919)
    node T_921 = not(vb_array)
    node GEN_25 = mux(T_915, T_920, vb_array)
    node GEN_26 = mux(io_invalidate, UInt<256>("h0"), GEN_25)
    node GEN_27 = mux(io_invalidate, UInt<1>("h1"), invalidated)
    wire s1_disparity_0 : UInt<1>
    wire s1_disparity_1 : UInt<1>
    wire s1_disparity_2 : UInt<1>
    wire s1_disparity_3 : UInt<1>
    node T_934 = and(s1_valid, UInt<1>("h0"))
    node T_936 = cat(UInt<1>("h0"), s1_idx)
    node T_939 = dshlw(UInt<128>("h1"), T_936)
    node GEN_123 = pad(T_939, 256)
    node T_942 = or(T_921, GEN_123)
    node T_943 = not(T_942)
    node GEN_28 = mux(T_934, T_943, GEN_26)
    node T_945 = and(s1_valid, UInt<1>("h0"))
    node T_947 = cat(UInt<1>("h1"), s1_idx)
    node T_950 = dshlw(UInt<128>("h1"), T_947)
    node GEN_125 = pad(T_950, 256)
    node T_953 = or(T_921, GEN_125)
    node T_954 = not(T_953)
    node GEN_29 = mux(T_945, T_954, GEN_28)
    node T_956 = and(s1_valid, UInt<1>("h0"))
    node T_958 = cat(UInt<2>("h2"), s1_idx)
    node T_961 = dshlw(UInt<256>("h1"), T_958)
    node T_964 = or(T_921, T_961)
    node T_965 = not(T_964)
    node GEN_30 = mux(T_956, T_965, GEN_29)
    node T_967 = and(s1_valid, UInt<1>("h0"))
    node T_969 = cat(UInt<2>("h3"), s1_idx)
    node T_972 = dshlw(UInt<256>("h1"), T_969)
    node T_975 = or(T_921, T_972)
    node T_976 = not(T_975)
    node GEN_31 = mux(T_967, T_976, GEN_30)
    wire s1_tag_match_0 : UInt<1>
    wire s1_tag_match_1 : UInt<1>
    wire s1_tag_match_2 : UInt<1>
    wire s1_tag_match_3 : UInt<1>
    wire s1_tag_hit_0 : UInt<1>
    wire s1_tag_hit_1 : UInt<1>
    wire s1_tag_hit_2 : UInt<1>
    wire s1_tag_hit_3 : UInt<1>
    wire s1_dout_0 : UInt<64>
    wire s1_dout_1 : UInt<64>
    wire s1_dout_2 : UInt<64>
    wire s1_dout_3 : UInt<64>
    node T_1000 = eq(io_invalidate, UInt<1>("h0"))
    node T_1004 = dshr(vb_array, T_936)
    node T_1005 = bits(T_1004, 0, 0)
    node T_1007 = and(T_1000, T_1005)
    node T_1011 = tag_array_0.tag_rdata.data
    node T_1012 = eq(T_1011, s1_tag)
    node T_1013 = and(T_1007, s1_tag_match_0)
    node T_1024 = dshr(vb_array, T_947)
    node T_1025 = bits(T_1024, 0, 0)
    node T_1027 = and(T_1000, T_1025)
    node T_1031 = tag_array_1.tag_rdata.data
    node T_1032 = eq(T_1031, s1_tag)
    node T_1033 = and(T_1027, s1_tag_match_1)
    node T_1044 = dshr(vb_array, T_958)
    node T_1045 = bits(T_1044, 0, 0)
    node T_1047 = and(T_1000, T_1045)
    node T_1051 = tag_array_2.tag_rdata.data
    node T_1052 = eq(T_1051, s1_tag)
    node T_1053 = and(T_1047, s1_tag_match_2)
    node T_1064 = dshr(vb_array, T_969)
    node T_1065 = bits(T_1064, 0, 0)
    node T_1067 = and(T_1000, T_1065)
    node T_1071 = tag_array_3.tag_rdata.data
    node T_1072 = eq(T_1071, s1_tag)
    node T_1073 = and(T_1067, s1_tag_match_3)
    node T_1079 = or(s1_tag_hit_0, s1_tag_hit_1)
    node T_1080 = or(T_1079, s1_tag_hit_2)
    node T_1081 = or(T_1080, s1_tag_hit_3)
    node T_1082 = or(UInt<1>("h0"), UInt<1>("h0"))
    node T_1083 = or(T_1082, UInt<1>("h0"))
    node T_1084 = or(T_1083, UInt<1>("h0"))
    node T_1086 = eq(T_1084, UInt<1>("h0"))
    node T_1087 = and(T_1081, T_1086)
    mem T_1090 :
      data-type => UInt<64>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_1103
      writer => T_1096
      read-under-write => undefined
    reg T_1090_T_1103_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_1090_T_1103_addr_pipe_0)
    T_1090_T_1103_addr_pipe_0 <= mux(T_1100, T_1102, T_1090_T_1103_addr_pipe_0)
    T_1090.T_1103.en <= T_1100
    T_1090.T_1103.addr <= T_1090_T_1103_addr_pipe_0
    T_1090.T_1096.en <= T_1093
    T_1090.T_1096.mask <= T_1093
    T_1090.T_1096.addr <= T_1095
    T_1090.T_1096.data <= GEN_35
    node T_1093 = and(FlowThroughSerializer_1.io_out_valid, T_894)
    node GEN_127 = pad(s1_idx, 9)
    node T_1094 = shlw(GEN_127, 3)
    node GEN_128 = pad(refill_cnt, 9)
    node T_1095 = or(T_1094, GEN_128)
    node GEN_35 = FlowThroughSerializer_1.io_out_bits_data
    node T_1097 = bits(s0_vaddr, 11, 3)
    node T_1099 = eq(T_1093, UInt<1>("h0"))
    node T_1100 = and(T_1099, s0_valid)
    wire T_1102 : UInt<9>
    mem T_1106 :
      data-type => UInt<64>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_1119
      writer => T_1112
      read-under-write => undefined
    reg T_1106_T_1119_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_1106_T_1119_addr_pipe_0)
    T_1106_T_1119_addr_pipe_0 <= mux(T_1116, T_1118, T_1106_T_1119_addr_pipe_0)
    T_1106.T_1119.en <= T_1116
    T_1106.T_1119.addr <= T_1106_T_1119_addr_pipe_0
    T_1106.T_1112.en <= T_1109
    T_1106.T_1112.mask <= T_1109
    T_1106.T_1112.addr <= T_1095
    T_1106.T_1112.data <= GEN_35
    node T_1109 = and(FlowThroughSerializer_1.io_out_valid, T_896)
    node T_1115 = eq(T_1109, UInt<1>("h0"))
    node T_1116 = and(T_1115, s0_valid)
    wire T_1118 : UInt<9>
    mem T_1122 :
      data-type => UInt<64>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_1135
      writer => T_1128
      read-under-write => undefined
    reg T_1122_T_1135_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_1122_T_1135_addr_pipe_0)
    T_1122_T_1135_addr_pipe_0 <= mux(T_1132, T_1134, T_1122_T_1135_addr_pipe_0)
    T_1122.T_1135.en <= T_1132
    T_1122.T_1135.addr <= T_1122_T_1135_addr_pipe_0
    T_1122.T_1128.en <= T_1125
    T_1122.T_1128.mask <= T_1125
    T_1122.T_1128.addr <= T_1095
    T_1122.T_1128.data <= GEN_35
    node T_1125 = and(FlowThroughSerializer_1.io_out_valid, T_898)
    node T_1131 = eq(T_1125, UInt<1>("h0"))
    node T_1132 = and(T_1131, s0_valid)
    wire T_1134 : UInt<9>
    mem T_1138 :
      data-type => UInt<64>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_1151
      writer => T_1144
      read-under-write => undefined
    reg T_1138_T_1151_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_1138_T_1151_addr_pipe_0)
    T_1138_T_1151_addr_pipe_0 <= mux(T_1148, T_1150, T_1138_T_1151_addr_pipe_0)
    T_1138.T_1151.en <= T_1148
    T_1138.T_1151.addr <= T_1138_T_1151_addr_pipe_0
    T_1138.T_1144.en <= T_1141
    T_1138.T_1144.mask <= T_1141
    T_1138.T_1144.addr <= T_1095
    T_1138.T_1144.data <= GEN_35
    node T_1141 = and(FlowThroughSerializer_1.io_out_valid, T_900)
    node T_1147 = eq(T_1141, UInt<1>("h0"))
    node T_1148 = and(T_1147, s0_valid)
    wire T_1150 : UInt<9>
    node T_1153 = eq(stall, UInt<1>("h0"))
    reg T_1154 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_1154)
    node GEN_56 = mux(T_1153, s1_hit, T_1154)
    reg T_1159_0 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_1159_0)
    reg T_1159_1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_1159_1)
    reg T_1159_2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_1159_2)
    reg T_1159_3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_1159_3)
    node GEN_57 = mux(T_1153, s1_tag_hit_0, T_1159_0)
    node GEN_58 = mux(T_1153, s1_tag_hit_1, T_1159_1)
    node GEN_59 = mux(T_1153, s1_tag_hit_2, T_1159_2)
    node GEN_60 = mux(T_1153, s1_tag_hit_3, T_1159_3)
    reg T_1165_0 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), T_1165_0)
    reg T_1165_1 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), T_1165_1)
    reg T_1165_2 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), T_1165_2)
    reg T_1165_3 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), T_1165_3)
    node GEN_61 = mux(T_1153, s1_dout_0, T_1165_0)
    node GEN_62 = mux(T_1153, s1_dout_1, T_1165_1)
    node GEN_63 = mux(T_1153, s1_dout_2, T_1165_2)
    node GEN_64 = mux(T_1153, s1_dout_3, T_1165_3)
    node T_1168 = mux(T_1159_0, T_1165_0, UInt<64>("h0"))
    node T_1170 = mux(T_1159_1, T_1165_1, UInt<64>("h0"))
    node T_1172 = mux(T_1159_2, T_1165_2, UInt<64>("h0"))
    node T_1174 = mux(T_1159_3, T_1165_3, UInt<64>("h0"))
    node T_1176 = or(T_1168, T_1170)
    node T_1177 = or(T_1176, T_1172)
    node T_1178 = or(T_1177, T_1174)
    wire T_1179 : UInt<64>
    node T_1180 = eq(state, UInt<2>("h1"))
    node T_1182 = eq(io_s2_kill, UInt<1>("h0"))
    node T_1183 = and(T_1180, T_1182)
    node T_1184 = shr(refill_addr, 6)
    wire T_1308_addr_block : UInt<26>
    wire T_1308_client_xact_id : UInt<1>
    wire T_1308_addr_beat : UInt<3>
    wire T_1308_is_builtin_type : UInt<1>
    wire T_1308_a_type : UInt<3>
    wire T_1308_union : UInt<11>
    wire T_1308_data : UInt<64>
    node T_1336 = eq(UInt<2>("h0"), state)
    node GEN_65 = mux(s1_miss, UInt<2>("h1"), state)
    node GEN_66 = mux(T_1336, GEN_65, state)
    node GEN_67 = mux(T_1336, UInt<1>("h0"), GEN_27)
    node T_1338 = eq(UInt<2>("h1"), state)
    node GEN_68 = mux(io_mem_acquire_ready, UInt<2>("h2"), GEN_66)
    node GEN_69 = mux(io_s2_kill, UInt<2>("h0"), GEN_68)
    node GEN_70 = mux(T_1338, GEN_69, GEN_66)
    node T_1339 = eq(UInt<2>("h2"), state)
    node GEN_71 = mux(io_mem_grant_valid, UInt<2>("h3"), GEN_70)
    node GEN_72 = mux(T_1339, GEN_71, GEN_70)
    node T_1340 = eq(UInt<2>("h3"), state)
    node GEN_73 = mux(refill_done, UInt<2>("h0"), GEN_72)
    node GEN_74 = mux(T_1340, GEN_73, GEN_72)
    io_resp_valid <= T_1154
    io_resp_bits_data <= UInt<16>("hd7b")
    io_resp_bits_datablock <= T_1179
    io_mem_acquire_valid <= T_1183
    io_mem_acquire_bits_addr_block <= T_1308_addr_block
    io_mem_acquire_bits_client_xact_id <= UInt<1>("h0")
    io_mem_acquire_bits_addr_beat <= UInt<3>("h0")
    io_mem_acquire_bits_is_builtin_type <= UInt<1>("h1")
    io_mem_acquire_bits_a_type <= UInt<3>("h1")
    io_mem_acquire_bits_union <= UInt<11>("hc1")
    io_mem_acquire_bits_data <= UInt<64>("h0")
    io_mem_grant_ready <= FlowThroughSerializer_1.io_in_ready
    state <= GEN_74
    invalidated <= GEN_67
    rdy <= T_846
    refill_addr <= GEN_1
    s1_any_tag_hit <= T_1087
    s1_valid <= T_835
    s1_vaddr <= GEN_0
    FlowThroughSerializer_1.io_in_valid <= io_mem_grant_valid
    FlowThroughSerializer_1.io_in_bits_addr_beat <= io_mem_grant_bits_addr_beat
    FlowThroughSerializer_1.io_in_bits_client_xact_id <= io_mem_grant_bits_client_xact_id
    FlowThroughSerializer_1.io_in_bits_manager_xact_id <= io_mem_grant_bits_manager_xact_id
    FlowThroughSerializer_1.io_in_bits_is_builtin_type <= io_mem_grant_bits_is_builtin_type
    FlowThroughSerializer_1.io_in_bits_g_type <= io_mem_grant_bits_g_type
    FlowThroughSerializer_1.io_in_bits_data <= io_mem_grant_bits_data
    FlowThroughSerializer_1.io_out_ready <= UInt<1>("h1")
    refill_cnt <= GEN_2
    T_859 <= GEN_3
    T_882 <= T_877
    T_891_0 <= refill_tag
    T_891_1 <= refill_tag
    T_891_2 <= refill_tag
    T_891_3 <= refill_tag
    T_906_0 <= T_894
    T_906_1 <= T_896
    T_906_2 <= T_898
    T_906_3 <= T_900
    vb_array <= GEN_31
    s1_tag_match_0 <= T_1012
    s1_tag_match_1 <= T_1032
    s1_tag_match_2 <= T_1052
    s1_tag_match_3 <= T_1072
    s1_tag_hit_0 <= T_1013
    s1_tag_hit_1 <= T_1033
    s1_tag_hit_2 <= T_1053
    s1_tag_hit_3 <= T_1073
    s1_dout_0 <= T_1090.T_1103.data
    s1_dout_1 <= T_1106.T_1119.data
    s1_dout_2 <= T_1122.T_1135.data
    s1_dout_3 <= T_1138.T_1151.data
    T_1102 <= T_1097
    T_1118 <= T_1097
    T_1134 <= T_1097
    T_1150 <= T_1097
    T_1154 <= GEN_56
    T_1159_0 <= GEN_57
    T_1159_1 <= GEN_58
    T_1159_2 <= GEN_59
    T_1159_3 <= GEN_60
    T_1165_0 <= GEN_61
    T_1165_1 <= GEN_62
    T_1165_2 <= GEN_63
    T_1165_3 <= GEN_64
    T_1179 <= T_1178
    T_1308_addr_block <= T_1184

  module TLB :
    input clk : Clock
    input reset : UInt<1>
    output io_req_ready : UInt<1>
    input io_req_valid : UInt<1>
    input io_req_bits_vpn : UInt<28>
    input io_req_bits_passthrough : UInt<1>
    input io_req_bits_instruction : UInt<1>
    input io_req_bits_store : UInt<1>
    output io_resp_miss : UInt<1>
    output io_resp_ppn : UInt<20>
    output io_resp_xcpt_ld : UInt<1>
    output io_resp_xcpt_st : UInt<1>
    output io_resp_xcpt_if : UInt<1>
    output io_resp_cacheable : UInt<1>
    input io_ptw_req_ready : UInt<1>
    output io_ptw_req_valid : UInt<1>
    output io_ptw_req_bits_prv : UInt<2>
    output io_ptw_req_bits_pum : UInt<1>
    output io_ptw_req_bits_mxr : UInt<1>
    output io_ptw_req_bits_addr : UInt<27>
    output io_ptw_req_bits_store : UInt<1>
    output io_ptw_req_bits_fetch : UInt<1>
    input io_ptw_resp_valid : UInt<1>
    input io_ptw_resp_bits_pte_reserved_for_hardware : UInt<16>
    input io_ptw_resp_bits_pte_ppn : UInt<38>
    input io_ptw_resp_bits_pte_reserved_for_software : UInt<2>
    input io_ptw_resp_bits_pte_d : UInt<1>
    input io_ptw_resp_bits_pte_a : UInt<1>
    input io_ptw_resp_bits_pte_g : UInt<1>
    input io_ptw_resp_bits_pte_u : UInt<1>
    input io_ptw_resp_bits_pte_x : UInt<1>
    input io_ptw_resp_bits_pte_w : UInt<1>
    input io_ptw_resp_bits_pte_r : UInt<1>
    input io_ptw_resp_bits_pte_v : UInt<1>
    input io_ptw_ptbr_asid : UInt<7>
    input io_ptw_ptbr_ppn : UInt<38>
    input io_ptw_invalidate : UInt<1>
    input io_ptw_status_debug : UInt<1>
    input io_ptw_status_isa : UInt<32>
    input io_ptw_status_prv : UInt<2>
    input io_ptw_status_sd : UInt<1>
    input io_ptw_status_zero3 : UInt<31>
    input io_ptw_status_sd_rv32 : UInt<1>
    input io_ptw_status_zero2 : UInt<2>
    input io_ptw_status_vm : UInt<5>
    input io_ptw_status_zero1 : UInt<4>
    input io_ptw_status_mxr : UInt<1>
    input io_ptw_status_pum : UInt<1>
    input io_ptw_status_mprv : UInt<1>
    input io_ptw_status_xs : UInt<2>
    input io_ptw_status_fs : UInt<2>
    input io_ptw_status_mpp : UInt<2>
    input io_ptw_status_hpp : UInt<2>
    input io_ptw_status_spp : UInt<1>
    input io_ptw_status_mpie : UInt<1>
    input io_ptw_status_hpie : UInt<1>
    input io_ptw_status_spie : UInt<1>
    input io_ptw_status_upie : UInt<1>
    input io_ptw_status_mie : UInt<1>
    input io_ptw_status_hie : UInt<1>
    input io_ptw_status_sie : UInt<1>
    input io_ptw_status_uie : UInt<1>
  
    reg valid : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg ppns_0 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), ppns_0)
    reg ppns_1 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), ppns_1)
    reg ppns_2 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), ppns_2)
    reg ppns_3 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), ppns_3)
    reg ppns_4 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), ppns_4)
    reg ppns_5 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), ppns_5)
    reg ppns_6 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), ppns_6)
    reg ppns_7 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), ppns_7)
    reg tags_0 : UInt<34>, clk with :
      reset => (UInt<1>("h0"), tags_0)
    reg tags_1 : UInt<34>, clk with :
      reset => (UInt<1>("h0"), tags_1)
    reg tags_2 : UInt<34>, clk with :
      reset => (UInt<1>("h0"), tags_2)
    reg tags_3 : UInt<34>, clk with :
      reset => (UInt<1>("h0"), tags_3)
    reg tags_4 : UInt<34>, clk with :
      reset => (UInt<1>("h0"), tags_4)
    reg tags_5 : UInt<34>, clk with :
      reset => (UInt<1>("h0"), tags_5)
    reg tags_6 : UInt<34>, clk with :
      reset => (UInt<1>("h0"), tags_6)
    reg tags_7 : UInt<34>, clk with :
      reset => (UInt<1>("h0"), tags_7)
    reg state : UInt<2>, clk with :
      reset => (reset, UInt<2>("h0"))
    reg r_refill_tag : UInt<34>, clk with :
      reset => (UInt<1>("h0"), r_refill_tag)
    reg r_refill_waddr : UInt<3>, clk with :
      reset => (UInt<1>("h0"), r_refill_waddr)
    reg r_req_vpn : UInt<28>, clk with :
      reset => (UInt<1>("h0"), r_req_vpn)
    reg r_req_passthrough : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_req_passthrough)
    reg r_req_instruction : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_req_instruction)
    reg r_req_store : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_req_store)
    node T_219 = eq(io_req_bits_instruction, UInt<1>("h0"))
    node do_mprv = and(io_ptw_status_mprv, T_219)
    node priv = mux(do_mprv, io_ptw_status_mpp, io_ptw_status_prv)
    node priv_s = eq(priv, UInt<2>("h1"))
    node T_222 = leq(priv, UInt<2>("h1"))
    node T_224 = eq(io_ptw_status_debug, UInt<1>("h0"))
    node priv_uses_vm = and(T_222, T_224)
    node passthrough_ppn = bits(io_req_bits_vpn, 19, 0)
    node refill_ppn = bits(io_ptw_resp_bits_pte_ppn, 19, 0)
    node mpu_ppn = mux(io_ptw_resp_valid, refill_ppn, passthrough_ppn)
    node GEN_57 = pad(mpu_ppn, 32)
    node T_226 = shlw(GEN_57, 12)
    node T_230 = lt(T_226, UInt<32>("h1000"))
    node T_234 = mux(T_230, UInt<3>("h7"), UInt<3>("h0"))
    node T_236 = leq(UInt<32>("h1000"), T_226)
    node T_238 = lt(T_226, UInt<32>("h2000"))
    node T_239 = and(T_236, T_238)
    node T_242 = mux(T_239, UInt<3>("h5"), UInt<3>("h0"))
    node T_244 = leq(UInt<32>("h40000000"), T_226)
    node T_246 = lt(T_226, UInt<32>("h44000000"))
    node T_247 = and(T_244, T_246)
    node T_250 = mux(T_247, UInt<3>("h3"), UInt<3>("h0"))
    node T_252 = leq(UInt<32>("h44000000"), T_226)
    node T_254 = lt(T_226, UInt<32>("h48000000"))
    node T_255 = and(T_252, T_254)
    node T_258 = mux(T_255, UInt<3>("h3"), UInt<3>("h0"))
    node T_260 = leq(UInt<32>("h80000000"), T_226)
    node T_262 = lt(T_226, UInt<32>("h90000000"))
    node T_263 = and(T_260, T_262)
    node T_266 = mux(T_263, UInt<3>("h7"), UInt<3>("h0"))
    node T_271 = or(T_234, T_242)
    node T_272 = or(T_271, T_250)
    node T_273 = or(T_272, T_258)
    node T_274 = or(T_273, T_266)
    wire prot_x : UInt<1>
    wire prot_w : UInt<1>
    wire prot_r : UInt<1>
    node T_282 = bits(T_274, 0, 0)
    node T_283 = bits(T_274, 1, 1)
    node T_284 = bits(T_274, 2, 2)
    node T_292 = bits(io_req_bits_vpn, 26, 0)
    node lookup_tag = cat(io_ptw_ptbr_asid, T_292)
    node T_294 = bits(io_ptw_status_vm, 3, 3)
    node T_296 = and(T_294, priv_uses_vm)
    node T_298 = eq(io_req_bits_passthrough, UInt<1>("h0"))
    node vm_enabled = and(T_296, T_298)
    node T_299 = bits(valid, 0, 0)
    node T_300 = and(T_299, vm_enabled)
    node T_301 = eq(tags_0, lookup_tag)
    node hitsVec_0 = and(T_300, T_301)
    node T_302 = bits(valid, 1, 1)
    node T_303 = and(T_302, vm_enabled)
    node T_304 = eq(tags_1, lookup_tag)
    node hitsVec_1 = and(T_303, T_304)
    node T_305 = bits(valid, 2, 2)
    node T_306 = and(T_305, vm_enabled)
    node T_307 = eq(tags_2, lookup_tag)
    node hitsVec_2 = and(T_306, T_307)
    node T_308 = bits(valid, 3, 3)
    node T_309 = and(T_308, vm_enabled)
    node T_310 = eq(tags_3, lookup_tag)
    node hitsVec_3 = and(T_309, T_310)
    node T_311 = bits(valid, 4, 4)
    node T_312 = and(T_311, vm_enabled)
    node T_313 = eq(tags_4, lookup_tag)
    node hitsVec_4 = and(T_312, T_313)
    node T_314 = bits(valid, 5, 5)
    node T_315 = and(T_314, vm_enabled)
    node T_316 = eq(tags_5, lookup_tag)
    node hitsVec_5 = and(T_315, T_316)
    node T_317 = bits(valid, 6, 6)
    node T_318 = and(T_317, vm_enabled)
    node T_319 = eq(tags_6, lookup_tag)
    node hitsVec_6 = and(T_318, T_319)
    node T_320 = bits(valid, 7, 7)
    node T_321 = and(T_320, vm_enabled)
    node T_322 = eq(tags_7, lookup_tag)
    node hitsVec_7 = and(T_321, T_322)
    node hitsVec_8 = eq(vm_enabled, UInt<1>("h0"))
    node T_324 = cat(hitsVec_1, hitsVec_0)
    node T_325 = cat(hitsVec_3, hitsVec_2)
    node T_326 = cat(T_325, T_324)
    node T_327 = cat(hitsVec_5, hitsVec_4)
    node T_328 = cat(hitsVec_8, hitsVec_7)
    node T_329 = cat(T_328, hitsVec_6)
    node T_330 = cat(T_329, T_327)
    node hits = cat(T_330, T_326)
    reg pte_array_reserved_for_hardware : UInt<16>, clk with :
      reset => (UInt<1>("h0"), pte_array_reserved_for_hardware)
    reg pte_array_ppn : UInt<38>, clk with :
      reset => (UInt<1>("h0"), pte_array_ppn)
    reg pte_array_reserved_for_software : UInt<2>, clk with :
      reset => (UInt<1>("h0"), pte_array_reserved_for_software)
    reg pte_array_d : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pte_array_d)
    reg pte_array_a : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pte_array_a)
    reg pte_array_g : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pte_array_g)
    reg pte_array_u : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pte_array_u)
    reg pte_array_x : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pte_array_x)
    reg pte_array_w : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pte_array_w)
    reg pte_array_r : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pte_array_r)
    reg pte_array_v : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pte_array_v)
    reg u_array : UInt<8>, clk with :
      reset => (UInt<1>("h0"), u_array)
    reg sw_array : UInt<8>, clk with :
      reset => (UInt<1>("h0"), sw_array)
    reg sx_array : UInt<8>, clk with :
      reset => (UInt<1>("h0"), sx_array)
    reg sr_array : UInt<8>, clk with :
      reset => (UInt<1>("h0"), sr_array)
    reg xr_array : UInt<8>, clk with :
      reset => (UInt<1>("h0"), xr_array)
    reg cash_array : UInt<8>, clk with :
      reset => (UInt<1>("h0"), cash_array)
    reg dirty_array : UInt<8>, clk with :
      reset => (UInt<1>("h0"), dirty_array)
    wire GEN_0 : UInt<20>
    node GEN_2 = mux(eq(UInt<3>("h0"), r_refill_waddr), GEN_0, ppns_0)
    node GEN_3 = mux(eq(UInt<3>("h1"), r_refill_waddr), GEN_0, ppns_1)
    node GEN_4 = mux(eq(UInt<3>("h2"), r_refill_waddr), GEN_0, ppns_2)
    node GEN_5 = mux(eq(UInt<3>("h3"), r_refill_waddr), GEN_0, ppns_3)
    node GEN_6 = mux(eq(UInt<3>("h4"), r_refill_waddr), GEN_0, ppns_4)
    node GEN_7 = mux(eq(UInt<3>("h5"), r_refill_waddr), GEN_0, ppns_5)
    node GEN_8 = mux(eq(UInt<3>("h6"), r_refill_waddr), GEN_0, ppns_6)
    node GEN_9 = mux(eq(UInt<3>("h7"), r_refill_waddr), GEN_0, ppns_7)
    wire GEN_1 : UInt<34>
    node GEN_10 = mux(eq(UInt<3>("h0"), r_refill_waddr), GEN_1, tags_0)
    node GEN_11 = mux(eq(UInt<3>("h1"), r_refill_waddr), GEN_1, tags_1)
    node GEN_12 = mux(eq(UInt<3>("h2"), r_refill_waddr), GEN_1, tags_2)
    node GEN_13 = mux(eq(UInt<3>("h3"), r_refill_waddr), GEN_1, tags_3)
    node GEN_14 = mux(eq(UInt<3>("h4"), r_refill_waddr), GEN_1, tags_4)
    node GEN_15 = mux(eq(UInt<3>("h5"), r_refill_waddr), GEN_1, tags_5)
    node GEN_16 = mux(eq(UInt<3>("h6"), r_refill_waddr), GEN_1, tags_6)
    node GEN_17 = mux(eq(UInt<3>("h7"), r_refill_waddr), GEN_1, tags_7)
    node T_362 = dshlw(UInt<8>("h1"), r_refill_waddr)
    node T_363 = or(valid, T_362)
    node T_364 = or(u_array, T_362)
    node T_365 = not(T_362)
    node T_366 = and(u_array, T_365)
    node T_367 = mux(io_ptw_resp_bits_pte_u, T_364, T_366)
    node T_369 = eq(io_ptw_resp_bits_pte_w, UInt<1>("h0"))
    node T_370 = and(io_ptw_resp_bits_pte_x, T_369)
    node T_371 = or(io_ptw_resp_bits_pte_r, T_370)
    node T_372 = and(io_ptw_resp_bits_pte_v, T_371)
    node T_373 = and(T_372, io_ptw_resp_bits_pte_w)
    node T_374 = and(T_373, prot_w)
    node T_375 = or(sw_array, T_362)
    node T_377 = and(sw_array, T_365)
    node T_378 = mux(T_374, T_375, T_377)
    node T_384 = and(T_372, io_ptw_resp_bits_pte_x)
    node T_385 = and(T_384, prot_x)
    node T_386 = or(sx_array, T_362)
    node T_388 = and(sx_array, T_365)
    node T_389 = mux(T_385, T_386, T_388)
    node T_395 = and(T_372, io_ptw_resp_bits_pte_r)
    node T_396 = and(T_395, prot_r)
    node T_397 = or(sr_array, T_362)
    node T_399 = and(sr_array, T_365)
    node T_400 = mux(T_396, T_397, T_399)
    node T_407 = and(T_384, prot_r)
    node T_408 = or(xr_array, T_362)
    node T_410 = and(xr_array, T_365)
    node T_411 = mux(T_407, T_408, T_410)
    node T_412 = or(cash_array, T_362)
    node T_414 = and(cash_array, T_365)
    node T_415 = mux(T_263, T_412, T_414)
    node T_416 = or(dirty_array, T_362)
    node T_418 = and(dirty_array, T_365)
    node T_419 = mux(io_ptw_resp_bits_pte_d, T_416, T_418)
    node GEN_18 = mux(io_ptw_resp_valid, GEN_2, ppns_0)
    node GEN_19 = mux(io_ptw_resp_valid, GEN_3, ppns_1)
    node GEN_20 = mux(io_ptw_resp_valid, GEN_4, ppns_2)
    node GEN_21 = mux(io_ptw_resp_valid, GEN_5, ppns_3)
    node GEN_22 = mux(io_ptw_resp_valid, GEN_6, ppns_4)
    node GEN_23 = mux(io_ptw_resp_valid, GEN_7, ppns_5)
    node GEN_24 = mux(io_ptw_resp_valid, GEN_8, ppns_6)
    node GEN_25 = mux(io_ptw_resp_valid, GEN_9, ppns_7)
    node GEN_26 = mux(io_ptw_resp_valid, GEN_10, tags_0)
    node GEN_27 = mux(io_ptw_resp_valid, GEN_11, tags_1)
    node GEN_28 = mux(io_ptw_resp_valid, GEN_12, tags_2)
    node GEN_29 = mux(io_ptw_resp_valid, GEN_13, tags_3)
    node GEN_30 = mux(io_ptw_resp_valid, GEN_14, tags_4)
    node GEN_31 = mux(io_ptw_resp_valid, GEN_15, tags_5)
    node GEN_32 = mux(io_ptw_resp_valid, GEN_16, tags_6)
    node GEN_33 = mux(io_ptw_resp_valid, GEN_17, tags_7)
    node GEN_34 = mux(io_ptw_resp_valid, T_363, valid)
    node GEN_35 = mux(io_ptw_resp_valid, T_367, u_array)
    node GEN_36 = mux(io_ptw_resp_valid, T_378, sw_array)
    node GEN_37 = mux(io_ptw_resp_valid, T_389, sx_array)
    node GEN_38 = mux(io_ptw_resp_valid, T_400, sr_array)
    node GEN_39 = mux(io_ptw_resp_valid, T_411, xr_array)
    node GEN_40 = mux(io_ptw_resp_valid, T_415, cash_array)
    node GEN_41 = mux(io_ptw_resp_valid, T_419, dirty_array)
    reg T_421 : UInt<8>, clk with :
      reset => (UInt<1>("h0"), T_421)
    node T_422 = not(valid)
    node T_424 = eq(T_422, UInt<8>("h0"))
    node T_426 = eq(T_424, UInt<1>("h0"))
    node T_428 = bits(T_422, 0, 0)
    node T_429 = bits(T_422, 1, 1)
    node T_430 = bits(T_422, 2, 2)
    node T_431 = bits(T_422, 3, 3)
    node T_432 = bits(T_422, 4, 4)
    node T_433 = bits(T_422, 5, 5)
    node T_434 = bits(T_422, 6, 6)
    node T_444 = mux(T_434, UInt<3>("h6"), UInt<3>("h7"))
    node T_445 = mux(T_433, UInt<3>("h5"), T_444)
    node T_446 = mux(T_432, UInt<3>("h4"), T_445)
    node T_447 = mux(T_431, UInt<3>("h3"), T_446)
    node T_448 = mux(T_430, UInt<3>("h2"), T_447)
    node T_449 = mux(T_429, UInt<3>("h1"), T_448)
    node T_450 = mux(T_428, UInt<3>("h0"), T_449)
    node T_452 = dshr(T_421, UInt<1>("h1"))
    node T_453 = bits(T_452, 0, 0)
    node T_454 = cat(UInt<1>("h1"), T_453)
    node T_455 = dshr(T_421, T_454)
    node T_456 = bits(T_455, 0, 0)
    node T_457 = cat(T_454, T_456)
    node T_458 = dshr(T_421, T_457)
    node T_459 = bits(T_458, 0, 0)
    node T_460 = cat(T_457, T_459)
    node T_461 = bits(T_460, 2, 0)
    node repl_waddr = mux(T_426, T_450, T_461)
    node T_463 = mux(io_ptw_status_pum, u_array, UInt<8>("h0"))
    node T_464 = not(T_463)
    node priv_ok = mux(priv_s, T_464, u_array)
    node T_465 = and(priv_ok, sw_array)
    node w_array = cat(prot_w, T_465)
    node T_466 = and(priv_ok, sx_array)
    node x_array = cat(prot_x, T_466)
    node T_468 = mux(io_ptw_status_mxr, xr_array, UInt<8>("h0"))
    node T_469 = or(sr_array, T_468)
    node T_470 = and(priv_ok, T_469)
    node r_array = cat(prot_r, T_470)
    node c_array = cat(T_263, cash_array)
    node T_471 = bits(io_req_bits_vpn, 27, 27)
    node T_472 = bits(io_req_bits_vpn, 26, 26)
    node bad_va = neq(T_471, T_472)
    node T_473 = bits(hits, 7, 0)
    node T_475 = mux(io_req_bits_store, w_array, UInt<9>("h0"))
    node T_476 = not(T_475)
    node GEN_59 = pad(dirty_array, 9)
    node T_477 = or(GEN_59, T_476)
    node GEN_60 = pad(T_473, 9)
    node tlb_hits = and(GEN_60, T_477)
    node tlb_hit = neq(tlb_hits, UInt<9>("h0"))
    node T_480 = eq(bad_va, UInt<1>("h0"))
    node T_481 = and(vm_enabled, T_480)
    node T_483 = eq(tlb_hit, UInt<1>("h0"))
    node tlb_miss = and(T_481, T_483)
    node T_485 = eq(tlb_miss, UInt<1>("h0"))
    node T_486 = and(io_req_valid, T_485)
    node T_488 = bits(T_473, 7, 4)
    node T_489 = bits(T_473, 3, 0)
    node T_491 = neq(T_488, UInt<4>("h0"))
    node T_492 = or(T_488, T_489)
    node T_493 = bits(T_492, 3, 2)
    node T_494 = bits(T_492, 1, 0)
    node T_496 = neq(T_493, UInt<2>("h0"))
    node T_497 = or(T_493, T_494)
    node T_498 = bits(T_497, 1, 1)
    node T_499 = cat(T_496, T_498)
    node T_500 = cat(T_491, T_499)
    node T_502 = bits(T_500, 2, 2)
    node T_504 = eq(T_502, UInt<1>("h0"))
    node T_506 = dshlw(UInt<2>("h1"), UInt<1>("h1"))
    node GEN_61 = pad(T_506, 8)
    node T_507 = or(T_421, GEN_61)
    node T_508 = not(T_421)
    node T_509 = or(T_508, GEN_61)
    node T_510 = not(T_509)
    node T_511 = mux(T_504, T_507, T_510)
    node T_512 = cat(UInt<1>("h1"), T_502)
    node T_513 = bits(T_500, 1, 1)
    node T_515 = eq(T_513, UInt<1>("h0"))
    node T_517 = dshlw(UInt<4>("h1"), T_512)
    node GEN_63 = pad(T_517, 8)
    node T_518 = or(T_511, GEN_63)
    node T_519 = not(T_511)
    node T_520 = or(T_519, GEN_63)
    node T_521 = not(T_520)
    node T_522 = mux(T_515, T_518, T_521)
    node T_523 = cat(T_512, T_513)
    node T_524 = bits(T_500, 0, 0)
    node T_526 = eq(T_524, UInt<1>("h0"))
    node T_528 = dshlw(UInt<8>("h1"), T_523)
    node T_529 = or(T_522, T_528)
    node T_530 = not(T_522)
    node T_531 = or(T_530, T_528)
    node T_532 = not(T_531)
    node T_533 = mux(T_526, T_529, T_532)
    node GEN_42 = mux(T_486, T_533, T_421)
    node T_535 = eq(state, UInt<2>("h0"))
    node T_536 = not(r_array)
    node T_537 = and(T_536, hits)
    node T_539 = neq(T_537, UInt<9>("h0"))
    node T_540 = or(bad_va, T_539)
    node T_541 = not(w_array)
    node T_542 = and(T_541, hits)
    node T_544 = neq(T_542, UInt<9>("h0"))
    node T_545 = or(bad_va, T_544)
    node T_546 = not(x_array)
    node T_547 = and(T_546, hits)
    node T_549 = neq(T_547, UInt<9>("h0"))
    node T_550 = or(bad_va, T_549)
    node T_551 = and(c_array, hits)
    node T_553 = neq(T_551, UInt<9>("h0"))
    node T_554 = or(io_ptw_resp_valid, tlb_miss)
    node T_556 = mux(hitsVec_0, ppns_0, UInt<20>("h0"))
    node T_558 = mux(hitsVec_1, ppns_1, UInt<20>("h0"))
    node T_560 = mux(hitsVec_2, ppns_2, UInt<20>("h0"))
    node T_562 = mux(hitsVec_3, ppns_3, UInt<20>("h0"))
    node T_564 = mux(hitsVec_4, ppns_4, UInt<20>("h0"))
    node T_566 = mux(hitsVec_5, ppns_5, UInt<20>("h0"))
    node T_568 = mux(hitsVec_6, ppns_6, UInt<20>("h0"))
    node T_570 = mux(hitsVec_7, ppns_7, UInt<20>("h0"))
    node T_572 = mux(hitsVec_8, passthrough_ppn, UInt<20>("h0"))
    node T_574 = or(T_556, T_558)
    node T_575 = or(T_574, T_560)
    node T_576 = or(T_575, T_562)
    node T_577 = or(T_576, T_564)
    node T_578 = or(T_577, T_566)
    node T_579 = or(T_578, T_568)
    node T_580 = or(T_579, T_570)
    node T_581 = or(T_580, T_572)
    wire T_582 : UInt<20>
    node T_583 = eq(state, UInt<2>("h1"))
    node T_584 = and(io_req_ready, io_req_valid)
    node T_585 = and(T_584, tlb_miss)
    node GEN_43 = mux(T_585, UInt<2>("h1"), state)
    node GEN_44 = mux(T_585, lookup_tag, r_refill_tag)
    node GEN_45 = mux(T_585, repl_waddr, r_refill_waddr)
    node GEN_46 = mux(T_585, io_req_bits_vpn, r_req_vpn)
    node GEN_47 = mux(T_585, io_req_bits_passthrough, r_req_passthrough)
    node GEN_48 = mux(T_585, io_req_bits_instruction, r_req_instruction)
    node GEN_49 = mux(T_585, io_req_bits_store, r_req_store)
    node GEN_50 = mux(io_ptw_invalidate, UInt<2>("h0"), GEN_43)
    node GEN_51 = mux(io_ptw_invalidate, UInt<2>("h3"), UInt<2>("h2"))
    node GEN_52 = mux(io_ptw_req_ready, GEN_51, GEN_50)
    node GEN_53 = mux(T_583, GEN_52, GEN_43)
    node T_587 = eq(state, UInt<2>("h2"))
    node T_588 = and(T_587, io_ptw_invalidate)
    node GEN_54 = mux(T_588, UInt<2>("h3"), GEN_53)
    node GEN_55 = mux(io_ptw_resp_valid, UInt<2>("h0"), GEN_54)
    node GEN_56 = mux(io_ptw_invalidate, UInt<8>("h0"), GEN_34)
    io_req_ready <= T_535
    io_resp_miss <= T_554
    io_resp_ppn <= T_582
    io_resp_xcpt_ld <= T_540
    io_resp_xcpt_st <= T_545
    io_resp_xcpt_if <= T_550
    io_resp_cacheable <= T_553
    io_ptw_req_valid <= T_583
    io_ptw_req_bits_prv <= io_ptw_status_prv
    io_ptw_req_bits_pum <= io_ptw_status_pum
    io_ptw_req_bits_mxr <= io_ptw_status_mxr
    io_ptw_req_bits_addr <= bits(r_refill_tag, 26, 0)
    io_ptw_req_bits_store <= r_req_store
    io_ptw_req_bits_fetch <= r_req_instruction
    valid <= GEN_56
    ppns_0 <= GEN_18
    ppns_1 <= GEN_19
    ppns_2 <= GEN_20
    ppns_3 <= GEN_21
    ppns_4 <= GEN_22
    ppns_5 <= GEN_23
    ppns_6 <= GEN_24
    ppns_7 <= GEN_25
    tags_0 <= GEN_26
    tags_1 <= GEN_27
    tags_2 <= GEN_28
    tags_3 <= GEN_29
    tags_4 <= GEN_30
    tags_5 <= GEN_31
    tags_6 <= GEN_32
    tags_7 <= GEN_33
    state <= GEN_55
    r_refill_tag <= GEN_44
    r_refill_waddr <= GEN_45
    r_req_vpn <= GEN_46
    r_req_passthrough <= GEN_47
    r_req_instruction <= GEN_48
    r_req_store <= GEN_49
    prot_x <= T_284
    prot_w <= T_283
    prot_r <= T_282
    pte_array_reserved_for_hardware <= pte_array_reserved_for_hardware
    pte_array_ppn <= pte_array_ppn
    pte_array_reserved_for_software <= pte_array_reserved_for_software
    pte_array_d <= pte_array_d
    pte_array_a <= pte_array_a
    pte_array_g <= pte_array_g
    pte_array_u <= pte_array_u
    pte_array_x <= pte_array_x
    pte_array_w <= pte_array_w
    pte_array_r <= pte_array_r
    pte_array_v <= pte_array_v
    u_array <= GEN_35
    sw_array <= GEN_36
    sx_array <= GEN_37
    sr_array <= GEN_38
    xr_array <= GEN_39
    cash_array <= GEN_40
    dirty_array <= GEN_41
    GEN_0 <= bits(io_ptw_resp_bits_pte_ppn, 19, 0)
    GEN_1 <= r_refill_tag
    T_421 <= GEN_42
    T_582 <= T_581

  module BTB :
    input clk : Clock
    input reset : UInt<1>
    input io_req_valid : UInt<1>
    input io_req_bits_addr : UInt<39>
    output io_resp_valid : UInt<1>
    output io_resp_bits_taken : UInt<1>
    output io_resp_bits_mask : UInt<2>
    output io_resp_bits_bridx : UInt<1>
    output io_resp_bits_target : UInt<39>
    output io_resp_bits_entry : UInt<6>
    output io_resp_bits_bht_history : UInt<7>
    output io_resp_bits_bht_value : UInt<2>
    input io_btb_update_valid : UInt<1>
    input io_btb_update_bits_prediction_valid : UInt<1>
    input io_btb_update_bits_prediction_bits_taken : UInt<1>
    input io_btb_update_bits_prediction_bits_mask : UInt<2>
    input io_btb_update_bits_prediction_bits_bridx : UInt<1>
    input io_btb_update_bits_prediction_bits_target : UInt<39>
    input io_btb_update_bits_prediction_bits_entry : UInt<6>
    input io_btb_update_bits_prediction_bits_bht_history : UInt<7>
    input io_btb_update_bits_prediction_bits_bht_value : UInt<2>
    input io_btb_update_bits_pc : UInt<39>
    input io_btb_update_bits_target : UInt<39>
    input io_btb_update_bits_taken : UInt<1>
    input io_btb_update_bits_isValid : UInt<1>
    input io_btb_update_bits_isJump : UInt<1>
    input io_btb_update_bits_isReturn : UInt<1>
    input io_btb_update_bits_br_pc : UInt<39>
    input io_bht_update_valid : UInt<1>
    input io_bht_update_bits_prediction_valid : UInt<1>
    input io_bht_update_bits_prediction_bits_taken : UInt<1>
    input io_bht_update_bits_prediction_bits_mask : UInt<2>
    input io_bht_update_bits_prediction_bits_bridx : UInt<1>
    input io_bht_update_bits_prediction_bits_target : UInt<39>
    input io_bht_update_bits_prediction_bits_entry : UInt<6>
    input io_bht_update_bits_prediction_bits_bht_history : UInt<7>
    input io_bht_update_bits_prediction_bits_bht_value : UInt<2>
    input io_bht_update_bits_pc : UInt<39>
    input io_bht_update_bits_taken : UInt<1>
    input io_bht_update_bits_mispredict : UInt<1>
    input io_ras_update_valid : UInt<1>
    input io_ras_update_bits_isCall : UInt<1>
    input io_ras_update_bits_isReturn : UInt<1>
    input io_ras_update_bits_returnAddr : UInt<39>
    input io_ras_update_bits_prediction_valid : UInt<1>
    input io_ras_update_bits_prediction_bits_taken : UInt<1>
    input io_ras_update_bits_prediction_bits_mask : UInt<2>
    input io_ras_update_bits_prediction_bits_bridx : UInt<1>
    input io_ras_update_bits_prediction_bits_target : UInt<39>
    input io_ras_update_bits_prediction_bits_entry : UInt<6>
    input io_ras_update_bits_prediction_bits_bht_history : UInt<7>
    input io_ras_update_bits_prediction_bits_bht_value : UInt<2>
  
    reg idxs_0 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_0)
    reg idxs_1 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_1)
    reg idxs_2 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_2)
    reg idxs_3 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_3)
    reg idxs_4 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_4)
    reg idxs_5 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_5)
    reg idxs_6 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_6)
    reg idxs_7 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_7)
    reg idxs_8 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_8)
    reg idxs_9 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_9)
    reg idxs_10 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_10)
    reg idxs_11 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_11)
    reg idxs_12 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_12)
    reg idxs_13 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_13)
    reg idxs_14 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_14)
    reg idxs_15 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_15)
    reg idxs_16 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_16)
    reg idxs_17 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_17)
    reg idxs_18 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_18)
    reg idxs_19 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_19)
    reg idxs_20 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_20)
    reg idxs_21 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_21)
    reg idxs_22 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_22)
    reg idxs_23 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_23)
    reg idxs_24 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_24)
    reg idxs_25 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_25)
    reg idxs_26 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_26)
    reg idxs_27 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_27)
    reg idxs_28 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_28)
    reg idxs_29 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_29)
    reg idxs_30 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_30)
    reg idxs_31 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_31)
    reg idxs_32 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_32)
    reg idxs_33 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_33)
    reg idxs_34 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_34)
    reg idxs_35 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_35)
    reg idxs_36 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_36)
    reg idxs_37 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_37)
    reg idxs_38 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_38)
    reg idxs_39 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), idxs_39)
    reg idxPages_0 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_0)
    reg idxPages_1 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_1)
    reg idxPages_2 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_2)
    reg idxPages_3 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_3)
    reg idxPages_4 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_4)
    reg idxPages_5 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_5)
    reg idxPages_6 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_6)
    reg idxPages_7 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_7)
    reg idxPages_8 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_8)
    reg idxPages_9 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_9)
    reg idxPages_10 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_10)
    reg idxPages_11 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_11)
    reg idxPages_12 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_12)
    reg idxPages_13 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_13)
    reg idxPages_14 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_14)
    reg idxPages_15 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_15)
    reg idxPages_16 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_16)
    reg idxPages_17 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_17)
    reg idxPages_18 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_18)
    reg idxPages_19 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_19)
    reg idxPages_20 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_20)
    reg idxPages_21 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_21)
    reg idxPages_22 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_22)
    reg idxPages_23 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_23)
    reg idxPages_24 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_24)
    reg idxPages_25 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_25)
    reg idxPages_26 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_26)
    reg idxPages_27 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_27)
    reg idxPages_28 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_28)
    reg idxPages_29 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_29)
    reg idxPages_30 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_30)
    reg idxPages_31 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_31)
    reg idxPages_32 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_32)
    reg idxPages_33 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_33)
    reg idxPages_34 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_34)
    reg idxPages_35 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_35)
    reg idxPages_36 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_36)
    reg idxPages_37 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_37)
    reg idxPages_38 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_38)
    reg idxPages_39 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), idxPages_39)
    reg tgts_0 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_0)
    reg tgts_1 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_1)
    reg tgts_2 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_2)
    reg tgts_3 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_3)
    reg tgts_4 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_4)
    reg tgts_5 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_5)
    reg tgts_6 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_6)
    reg tgts_7 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_7)
    reg tgts_8 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_8)
    reg tgts_9 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_9)
    reg tgts_10 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_10)
    reg tgts_11 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_11)
    reg tgts_12 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_12)
    reg tgts_13 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_13)
    reg tgts_14 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_14)
    reg tgts_15 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_15)
    reg tgts_16 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_16)
    reg tgts_17 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_17)
    reg tgts_18 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_18)
    reg tgts_19 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_19)
    reg tgts_20 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_20)
    reg tgts_21 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_21)
    reg tgts_22 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_22)
    reg tgts_23 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_23)
    reg tgts_24 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_24)
    reg tgts_25 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_25)
    reg tgts_26 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_26)
    reg tgts_27 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_27)
    reg tgts_28 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_28)
    reg tgts_29 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_29)
    reg tgts_30 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_30)
    reg tgts_31 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_31)
    reg tgts_32 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_32)
    reg tgts_33 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_33)
    reg tgts_34 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_34)
    reg tgts_35 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_35)
    reg tgts_36 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_36)
    reg tgts_37 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_37)
    reg tgts_38 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_38)
    reg tgts_39 : UInt<11>, clk with :
      reset => (UInt<1>("h0"), tgts_39)
    reg tgtPages_0 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_0)
    reg tgtPages_1 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_1)
    reg tgtPages_2 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_2)
    reg tgtPages_3 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_3)
    reg tgtPages_4 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_4)
    reg tgtPages_5 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_5)
    reg tgtPages_6 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_6)
    reg tgtPages_7 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_7)
    reg tgtPages_8 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_8)
    reg tgtPages_9 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_9)
    reg tgtPages_10 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_10)
    reg tgtPages_11 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_11)
    reg tgtPages_12 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_12)
    reg tgtPages_13 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_13)
    reg tgtPages_14 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_14)
    reg tgtPages_15 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_15)
    reg tgtPages_16 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_16)
    reg tgtPages_17 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_17)
    reg tgtPages_18 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_18)
    reg tgtPages_19 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_19)
    reg tgtPages_20 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_20)
    reg tgtPages_21 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_21)
    reg tgtPages_22 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_22)
    reg tgtPages_23 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_23)
    reg tgtPages_24 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_24)
    reg tgtPages_25 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_25)
    reg tgtPages_26 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_26)
    reg tgtPages_27 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_27)
    reg tgtPages_28 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_28)
    reg tgtPages_29 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_29)
    reg tgtPages_30 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_30)
    reg tgtPages_31 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_31)
    reg tgtPages_32 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_32)
    reg tgtPages_33 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_33)
    reg tgtPages_34 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_34)
    reg tgtPages_35 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_35)
    reg tgtPages_36 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_36)
    reg tgtPages_37 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_37)
    reg tgtPages_38 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_38)
    reg tgtPages_39 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), tgtPages_39)
    reg pages_0 : UInt<27>, clk with :
      reset => (UInt<1>("h0"), pages_0)
    reg pages_1 : UInt<27>, clk with :
      reset => (UInt<1>("h0"), pages_1)
    reg pages_2 : UInt<27>, clk with :
      reset => (UInt<1>("h0"), pages_2)
    reg pages_3 : UInt<27>, clk with :
      reset => (UInt<1>("h0"), pages_3)
    reg pages_4 : UInt<27>, clk with :
      reset => (UInt<1>("h0"), pages_4)
    reg pages_5 : UInt<27>, clk with :
      reset => (UInt<1>("h0"), pages_5)
    reg pageValid : UInt<6>, clk with :
      reset => (reset, UInt<6>("h0"))
    node T_606 = dshlw(UInt<8>("h1"), idxPages_0)
    node idxPagesOH_0 = bits(T_606, 5, 0)
    node T_608 = dshlw(UInt<8>("h1"), idxPages_1)
    node idxPagesOH_1 = bits(T_608, 5, 0)
    node T_610 = dshlw(UInt<8>("h1"), idxPages_2)
    node idxPagesOH_2 = bits(T_610, 5, 0)
    node T_612 = dshlw(UInt<8>("h1"), idxPages_3)
    node idxPagesOH_3 = bits(T_612, 5, 0)
    node T_614 = dshlw(UInt<8>("h1"), idxPages_4)
    node idxPagesOH_4 = bits(T_614, 5, 0)
    node T_616 = dshlw(UInt<8>("h1"), idxPages_5)
    node idxPagesOH_5 = bits(T_616, 5, 0)
    node T_618 = dshlw(UInt<8>("h1"), idxPages_6)
    node idxPagesOH_6 = bits(T_618, 5, 0)
    node T_620 = dshlw(UInt<8>("h1"), idxPages_7)
    node idxPagesOH_7 = bits(T_620, 5, 0)
    node T_622 = dshlw(UInt<8>("h1"), idxPages_8)
    node idxPagesOH_8 = bits(T_622, 5, 0)
    node T_624 = dshlw(UInt<8>("h1"), idxPages_9)
    node idxPagesOH_9 = bits(T_624, 5, 0)
    node T_626 = dshlw(UInt<8>("h1"), idxPages_10)
    node idxPagesOH_10 = bits(T_626, 5, 0)
    node T_628 = dshlw(UInt<8>("h1"), idxPages_11)
    node idxPagesOH_11 = bits(T_628, 5, 0)
    node T_630 = dshlw(UInt<8>("h1"), idxPages_12)
    node idxPagesOH_12 = bits(T_630, 5, 0)
    node T_632 = dshlw(UInt<8>("h1"), idxPages_13)
    node idxPagesOH_13 = bits(T_632, 5, 0)
    node T_634 = dshlw(UInt<8>("h1"), idxPages_14)
    node idxPagesOH_14 = bits(T_634, 5, 0)
    node T_636 = dshlw(UInt<8>("h1"), idxPages_15)
    node idxPagesOH_15 = bits(T_636, 5, 0)
    node T_638 = dshlw(UInt<8>("h1"), idxPages_16)
    node idxPagesOH_16 = bits(T_638, 5, 0)
    node T_640 = dshlw(UInt<8>("h1"), idxPages_17)
    node idxPagesOH_17 = bits(T_640, 5, 0)
    node T_642 = dshlw(UInt<8>("h1"), idxPages_18)
    node idxPagesOH_18 = bits(T_642, 5, 0)
    node T_644 = dshlw(UInt<8>("h1"), idxPages_19)
    node idxPagesOH_19 = bits(T_644, 5, 0)
    node T_646 = dshlw(UInt<8>("h1"), idxPages_20)
    node idxPagesOH_20 = bits(T_646, 5, 0)
    node T_648 = dshlw(UInt<8>("h1"), idxPages_21)
    node idxPagesOH_21 = bits(T_648, 5, 0)
    node T_650 = dshlw(UInt<8>("h1"), idxPages_22)
    node idxPagesOH_22 = bits(T_650, 5, 0)
    node T_652 = dshlw(UInt<8>("h1"), idxPages_23)
    node idxPagesOH_23 = bits(T_652, 5, 0)
    node T_654 = dshlw(UInt<8>("h1"), idxPages_24)
    node idxPagesOH_24 = bits(T_654, 5, 0)
    node T_656 = dshlw(UInt<8>("h1"), idxPages_25)
    node idxPagesOH_25 = bits(T_656, 5, 0)
    node T_658 = dshlw(UInt<8>("h1"), idxPages_26)
    node idxPagesOH_26 = bits(T_658, 5, 0)
    node T_660 = dshlw(UInt<8>("h1"), idxPages_27)
    node idxPagesOH_27 = bits(T_660, 5, 0)
    node T_662 = dshlw(UInt<8>("h1"), idxPages_28)
    node idxPagesOH_28 = bits(T_662, 5, 0)
    node T_664 = dshlw(UInt<8>("h1"), idxPages_29)
    node idxPagesOH_29 = bits(T_664, 5, 0)
    node T_666 = dshlw(UInt<8>("h1"), idxPages_30)
    node idxPagesOH_30 = bits(T_666, 5, 0)
    node T_668 = dshlw(UInt<8>("h1"), idxPages_31)
    node idxPagesOH_31 = bits(T_668, 5, 0)
    node T_670 = dshlw(UInt<8>("h1"), idxPages_32)
    node idxPagesOH_32 = bits(T_670, 5, 0)
    node T_672 = dshlw(UInt<8>("h1"), idxPages_33)
    node idxPagesOH_33 = bits(T_672, 5, 0)
    node T_674 = dshlw(UInt<8>("h1"), idxPages_34)
    node idxPagesOH_34 = bits(T_674, 5, 0)
    node T_676 = dshlw(UInt<8>("h1"), idxPages_35)
    node idxPagesOH_35 = bits(T_676, 5, 0)
    node T_678 = dshlw(UInt<8>("h1"), idxPages_36)
    node idxPagesOH_36 = bits(T_678, 5, 0)
    node T_680 = dshlw(UInt<8>("h1"), idxPages_37)
    node idxPagesOH_37 = bits(T_680, 5, 0)
    node T_682 = dshlw(UInt<8>("h1"), idxPages_38)
    node idxPagesOH_38 = bits(T_682, 5, 0)
    node T_684 = dshlw(UInt<8>("h1"), idxPages_39)
    node idxPagesOH_39 = bits(T_684, 5, 0)
    node T_686 = dshlw(UInt<8>("h1"), tgtPages_0)
    node tgtPagesOH_0 = bits(T_686, 5, 0)
    node T_688 = dshlw(UInt<8>("h1"), tgtPages_1)
    node tgtPagesOH_1 = bits(T_688, 5, 0)
    node T_690 = dshlw(UInt<8>("h1"), tgtPages_2)
    node tgtPagesOH_2 = bits(T_690, 5, 0)
    node T_692 = dshlw(UInt<8>("h1"), tgtPages_3)
    node tgtPagesOH_3 = bits(T_692, 5, 0)
    node T_694 = dshlw(UInt<8>("h1"), tgtPages_4)
    node tgtPagesOH_4 = bits(T_694, 5, 0)
    node T_696 = dshlw(UInt<8>("h1"), tgtPages_5)
    node tgtPagesOH_5 = bits(T_696, 5, 0)
    node T_698 = dshlw(UInt<8>("h1"), tgtPages_6)
    node tgtPagesOH_6 = bits(T_698, 5, 0)
    node T_700 = dshlw(UInt<8>("h1"), tgtPages_7)
    node tgtPagesOH_7 = bits(T_700, 5, 0)
    node T_702 = dshlw(UInt<8>("h1"), tgtPages_8)
    node tgtPagesOH_8 = bits(T_702, 5, 0)
    node T_704 = dshlw(UInt<8>("h1"), tgtPages_9)
    node tgtPagesOH_9 = bits(T_704, 5, 0)
    node T_706 = dshlw(UInt<8>("h1"), tgtPages_10)
    node tgtPagesOH_10 = bits(T_706, 5, 0)
    node T_708 = dshlw(UInt<8>("h1"), tgtPages_11)
    node tgtPagesOH_11 = bits(T_708, 5, 0)
    node T_710 = dshlw(UInt<8>("h1"), tgtPages_12)
    node tgtPagesOH_12 = bits(T_710, 5, 0)
    node T_712 = dshlw(UInt<8>("h1"), tgtPages_13)
    node tgtPagesOH_13 = bits(T_712, 5, 0)
    node T_714 = dshlw(UInt<8>("h1"), tgtPages_14)
    node tgtPagesOH_14 = bits(T_714, 5, 0)
    node T_716 = dshlw(UInt<8>("h1"), tgtPages_15)
    node tgtPagesOH_15 = bits(T_716, 5, 0)
    node T_718 = dshlw(UInt<8>("h1"), tgtPages_16)
    node tgtPagesOH_16 = bits(T_718, 5, 0)
    node T_720 = dshlw(UInt<8>("h1"), tgtPages_17)
    node tgtPagesOH_17 = bits(T_720, 5, 0)
    node T_722 = dshlw(UInt<8>("h1"), tgtPages_18)
    node tgtPagesOH_18 = bits(T_722, 5, 0)
    node T_724 = dshlw(UInt<8>("h1"), tgtPages_19)
    node tgtPagesOH_19 = bits(T_724, 5, 0)
    node T_726 = dshlw(UInt<8>("h1"), tgtPages_20)
    node tgtPagesOH_20 = bits(T_726, 5, 0)
    node T_728 = dshlw(UInt<8>("h1"), tgtPages_21)
    node tgtPagesOH_21 = bits(T_728, 5, 0)
    node T_730 = dshlw(UInt<8>("h1"), tgtPages_22)
    node tgtPagesOH_22 = bits(T_730, 5, 0)
    node T_732 = dshlw(UInt<8>("h1"), tgtPages_23)
    node tgtPagesOH_23 = bits(T_732, 5, 0)
    node T_734 = dshlw(UInt<8>("h1"), tgtPages_24)
    node tgtPagesOH_24 = bits(T_734, 5, 0)
    node T_736 = dshlw(UInt<8>("h1"), tgtPages_25)
    node tgtPagesOH_25 = bits(T_736, 5, 0)
    node T_738 = dshlw(UInt<8>("h1"), tgtPages_26)
    node tgtPagesOH_26 = bits(T_738, 5, 0)
    node T_740 = dshlw(UInt<8>("h1"), tgtPages_27)
    node tgtPagesOH_27 = bits(T_740, 5, 0)
    node T_742 = dshlw(UInt<8>("h1"), tgtPages_28)
    node tgtPagesOH_28 = bits(T_742, 5, 0)
    node T_744 = dshlw(UInt<8>("h1"), tgtPages_29)
    node tgtPagesOH_29 = bits(T_744, 5, 0)
    node T_746 = dshlw(UInt<8>("h1"), tgtPages_30)
    node tgtPagesOH_30 = bits(T_746, 5, 0)
    node T_748 = dshlw(UInt<8>("h1"), tgtPages_31)
    node tgtPagesOH_31 = bits(T_748, 5, 0)
    node T_750 = dshlw(UInt<8>("h1"), tgtPages_32)
    node tgtPagesOH_32 = bits(T_750, 5, 0)
    node T_752 = dshlw(UInt<8>("h1"), tgtPages_33)
    node tgtPagesOH_33 = bits(T_752, 5, 0)
    node T_754 = dshlw(UInt<8>("h1"), tgtPages_34)
    node tgtPagesOH_34 = bits(T_754, 5, 0)
    node T_756 = dshlw(UInt<8>("h1"), tgtPages_35)
    node tgtPagesOH_35 = bits(T_756, 5, 0)
    node T_758 = dshlw(UInt<8>("h1"), tgtPages_36)
    node tgtPagesOH_36 = bits(T_758, 5, 0)
    node T_760 = dshlw(UInt<8>("h1"), tgtPages_37)
    node tgtPagesOH_37 = bits(T_760, 5, 0)
    node T_762 = dshlw(UInt<8>("h1"), tgtPages_38)
    node tgtPagesOH_38 = bits(T_762, 5, 0)
    node T_764 = dshlw(UInt<8>("h1"), tgtPages_39)
    node tgtPagesOH_39 = bits(T_764, 5, 0)
    reg isValid : UInt<40>, clk with :
      reset => (reset, UInt<40>("h0"))
    reg isReturn : UInt<40>, clk with :
      reset => (UInt<1>("h0"), isReturn)
    reg isJump : UInt<40>, clk with :
      reset => (UInt<1>("h0"), isJump)
    reg brIdx_0 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_0)
    reg brIdx_1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_1)
    reg brIdx_2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_2)
    reg brIdx_3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_3)
    reg brIdx_4 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_4)
    reg brIdx_5 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_5)
    reg brIdx_6 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_6)
    reg brIdx_7 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_7)
    reg brIdx_8 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_8)
    reg brIdx_9 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_9)
    reg brIdx_10 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_10)
    reg brIdx_11 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_11)
    reg brIdx_12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_12)
    reg brIdx_13 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_13)
    reg brIdx_14 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_14)
    reg brIdx_15 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_15)
    reg brIdx_16 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_16)
    reg brIdx_17 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_17)
    reg brIdx_18 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_18)
    reg brIdx_19 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_19)
    reg brIdx_20 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_20)
    reg brIdx_21 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_21)
    reg brIdx_22 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_22)
    reg brIdx_23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_23)
    reg brIdx_24 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_24)
    reg brIdx_25 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_25)
    reg brIdx_26 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_26)
    reg brIdx_27 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_27)
    reg brIdx_28 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_28)
    reg brIdx_29 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_29)
    reg brIdx_30 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_30)
    reg brIdx_31 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_31)
    reg brIdx_32 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_32)
    reg brIdx_33 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_33)
    reg brIdx_34 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_34)
    reg brIdx_35 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_35)
    reg brIdx_36 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_36)
    reg brIdx_37 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_37)
    reg brIdx_38 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_38)
    reg brIdx_39 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), brIdx_39)
    reg T_777 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_778_prediction_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_778_prediction_valid)
    reg T_778_prediction_bits_taken : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_778_prediction_bits_taken)
    reg T_778_prediction_bits_mask : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_778_prediction_bits_mask)
    reg T_778_prediction_bits_bridx : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_778_prediction_bits_bridx)
    reg T_778_prediction_bits_target : UInt<39>, clk with :
      reset => (UInt<1>("h0"), T_778_prediction_bits_target)
    reg T_778_prediction_bits_entry : UInt<6>, clk with :
      reset => (UInt<1>("h0"), T_778_prediction_bits_entry)
    reg T_778_prediction_bits_bht_history : UInt<7>, clk with :
      reset => (UInt<1>("h0"), T_778_prediction_bits_bht_history)
    reg T_778_prediction_bits_bht_value : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_778_prediction_bits_bht_value)
    reg T_778_pc : UInt<39>, clk with :
      reset => (UInt<1>("h0"), T_778_pc)
    reg T_778_target : UInt<39>, clk with :
      reset => (UInt<1>("h0"), T_778_target)
    reg T_778_taken : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_778_taken)
    reg T_778_isValid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_778_isValid)
    reg T_778_isJump : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_778_isJump)
    reg T_778_isReturn : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_778_isReturn)
    reg T_778_br_pc : UInt<39>, clk with :
      reset => (UInt<1>("h0"), T_778_br_pc)
    node GEN_7 = mux(io_btb_update_valid, io_btb_update_bits_prediction_valid, T_778_prediction_valid)
    node GEN_8 = mux(io_btb_update_valid, io_btb_update_bits_prediction_bits_taken, T_778_prediction_bits_taken)
    node GEN_9 = mux(io_btb_update_valid, io_btb_update_bits_prediction_bits_mask, T_778_prediction_bits_mask)
    node GEN_10 = mux(io_btb_update_valid, io_btb_update_bits_prediction_bits_bridx, T_778_prediction_bits_bridx)
    node GEN_11 = mux(io_btb_update_valid, io_btb_update_bits_prediction_bits_target, T_778_prediction_bits_target)
    node GEN_12 = mux(io_btb_update_valid, io_btb_update_bits_prediction_bits_entry, T_778_prediction_bits_entry)
    node GEN_13 = mux(io_btb_update_valid, io_btb_update_bits_prediction_bits_bht_history, T_778_prediction_bits_bht_history)
    node GEN_14 = mux(io_btb_update_valid, io_btb_update_bits_prediction_bits_bht_value, T_778_prediction_bits_bht_value)
    node GEN_15 = mux(io_btb_update_valid, io_btb_update_bits_pc, T_778_pc)
    node GEN_16 = mux(io_btb_update_valid, io_btb_update_bits_target, T_778_target)
    node GEN_17 = mux(io_btb_update_valid, io_btb_update_bits_taken, T_778_taken)
    node GEN_18 = mux(io_btb_update_valid, io_btb_update_bits_isValid, T_778_isValid)
    node GEN_19 = mux(io_btb_update_valid, io_btb_update_bits_isJump, T_778_isJump)
    node GEN_20 = mux(io_btb_update_valid, io_btb_update_bits_isReturn, T_778_isReturn)
    node GEN_21 = mux(io_btb_update_valid, io_btb_update_bits_br_pc, T_778_br_pc)
    wire r_btb_update_valid : UInt<1>
    wire r_btb_update_bits_prediction_valid : UInt<1>
    wire r_btb_update_bits_prediction_bits_taken : UInt<1>
    wire r_btb_update_bits_prediction_bits_mask : UInt<2>
    wire r_btb_update_bits_prediction_bits_bridx : UInt<1>
    wire r_btb_update_bits_prediction_bits_target : UInt<39>
    wire r_btb_update_bits_prediction_bits_entry : UInt<6>
    wire r_btb_update_bits_prediction_bits_bht_history : UInt<7>
    wire r_btb_update_bits_prediction_bits_bht_value : UInt<2>
    wire r_btb_update_bits_pc : UInt<39>
    wire r_btb_update_bits_target : UInt<39>
    wire r_btb_update_bits_taken : UInt<1>
    wire r_btb_update_bits_isValid : UInt<1>
    wire r_btb_update_bits_isJump : UInt<1>
    wire r_btb_update_bits_isReturn : UInt<1>
    wire r_btb_update_bits_br_pc : UInt<39>
    node T_964 = shr(io_req_bits_addr, 12)
    node T_965 = eq(pages_0, T_964)
    node T_966 = eq(pages_1, T_964)
    node T_967 = eq(pages_2, T_964)
    node T_968 = eq(pages_3, T_964)
    node T_969 = eq(pages_4, T_964)
    node T_970 = eq(pages_5, T_964)
    node T_971 = cat(T_967, T_966)
    node T_972 = cat(T_971, T_965)
    node T_973 = cat(T_970, T_969)
    node T_974 = cat(T_973, T_968)
    node T_975 = cat(T_974, T_972)
    node pageHit = and(pageValid, T_975)
    node T_976 = bits(io_req_bits_addr, 11, 1)
    node T_977 = eq(idxs_0, T_976)
    node T_979 = eq(idxs_1, T_976)
    node T_981 = eq(idxs_2, T_976)
    node T_983 = eq(idxs_3, T_976)
    node T_985 = eq(idxs_4, T_976)
    node T_987 = eq(idxs_5, T_976)
    node T_989 = eq(idxs_6, T_976)
    node T_991 = eq(idxs_7, T_976)
    node T_993 = eq(idxs_8, T_976)
    node T_995 = eq(idxs_9, T_976)
    node T_997 = eq(idxs_10, T_976)
    node T_999 = eq(idxs_11, T_976)
    node T_1001 = eq(idxs_12, T_976)
    node T_1003 = eq(idxs_13, T_976)
    node T_1005 = eq(idxs_14, T_976)
    node T_1007 = eq(idxs_15, T_976)
    node T_1009 = eq(idxs_16, T_976)
    node T_1011 = eq(idxs_17, T_976)
    node T_1013 = eq(idxs_18, T_976)
    node T_1015 = eq(idxs_19, T_976)
    node T_1017 = eq(idxs_20, T_976)
    node T_1019 = eq(idxs_21, T_976)
    node T_1021 = eq(idxs_22, T_976)
    node T_1023 = eq(idxs_23, T_976)
    node T_1025 = eq(idxs_24, T_976)
    node T_1027 = eq(idxs_25, T_976)
    node T_1029 = eq(idxs_26, T_976)
    node T_1031 = eq(idxs_27, T_976)
    node T_1033 = eq(idxs_28, T_976)
    node T_1035 = eq(idxs_29, T_976)
    node T_1037 = eq(idxs_30, T_976)
    node T_1039 = eq(idxs_31, T_976)
    node T_1041 = eq(idxs_32, T_976)
    node T_1043 = eq(idxs_33, T_976)
    node T_1045 = eq(idxs_34, T_976)
    node T_1047 = eq(idxs_35, T_976)
    node T_1049 = eq(idxs_36, T_976)
    node T_1051 = eq(idxs_37, T_976)
    node T_1053 = eq(idxs_38, T_976)
    node T_1055 = eq(idxs_39, T_976)
    node T_1056 = cat(T_979, T_977)
    node T_1057 = cat(T_985, T_983)
    node T_1058 = cat(T_1057, T_981)
    node T_1059 = cat(T_1058, T_1056)
    node T_1060 = cat(T_989, T_987)
    node T_1061 = cat(T_995, T_993)
    node T_1062 = cat(T_1061, T_991)
    node T_1063 = cat(T_1062, T_1060)
    node T_1064 = cat(T_1063, T_1059)
    node T_1065 = cat(T_999, T_997)
    node T_1066 = cat(T_1005, T_1003)
    node T_1067 = cat(T_1066, T_1001)
    node T_1068 = cat(T_1067, T_1065)
    node T_1069 = cat(T_1009, T_1007)
    node T_1070 = cat(T_1015, T_1013)
    node T_1071 = cat(T_1070, T_1011)
    node T_1072 = cat(T_1071, T_1069)
    node T_1073 = cat(T_1072, T_1068)
    node T_1074 = cat(T_1073, T_1064)
    node T_1075 = cat(T_1019, T_1017)
    node T_1076 = cat(T_1025, T_1023)
    node T_1077 = cat(T_1076, T_1021)
    node T_1078 = cat(T_1077, T_1075)
    node T_1079 = cat(T_1029, T_1027)
    node T_1080 = cat(T_1035, T_1033)
    node T_1081 = cat(T_1080, T_1031)
    node T_1082 = cat(T_1081, T_1079)
    node T_1083 = cat(T_1082, T_1078)
    node T_1084 = cat(T_1039, T_1037)
    node T_1085 = cat(T_1045, T_1043)
    node T_1086 = cat(T_1085, T_1041)
    node T_1087 = cat(T_1086, T_1084)
    node T_1088 = cat(T_1049, T_1047)
    node T_1089 = cat(T_1055, T_1053)
    node T_1090 = cat(T_1089, T_1051)
    node T_1091 = cat(T_1090, T_1088)
    node T_1092 = cat(T_1091, T_1087)
    node T_1093 = cat(T_1092, T_1083)
    node T_1094 = cat(T_1093, T_1074)
    node T_1095 = and(idxPagesOH_0, pageHit)
    node T_1096 = and(idxPagesOH_1, pageHit)
    node T_1097 = and(idxPagesOH_2, pageHit)
    node T_1098 = and(idxPagesOH_3, pageHit)
    node T_1099 = and(idxPagesOH_4, pageHit)
    node T_1100 = and(idxPagesOH_5, pageHit)
    node T_1101 = and(idxPagesOH_6, pageHit)
    node T_1102 = and(idxPagesOH_7, pageHit)
    node T_1103 = and(idxPagesOH_8, pageHit)
    node T_1104 = and(idxPagesOH_9, pageHit)
    node T_1105 = and(idxPagesOH_10, pageHit)
    node T_1106 = and(idxPagesOH_11, pageHit)
    node T_1107 = and(idxPagesOH_12, pageHit)
    node T_1108 = and(idxPagesOH_13, pageHit)
    node T_1109 = and(idxPagesOH_14, pageHit)
    node T_1110 = and(idxPagesOH_15, pageHit)
    node T_1111 = and(idxPagesOH_16, pageHit)
    node T_1112 = and(idxPagesOH_17, pageHit)
    node T_1113 = and(idxPagesOH_18, pageHit)
    node T_1114 = and(idxPagesOH_19, pageHit)
    node T_1115 = and(idxPagesOH_20, pageHit)
    node T_1116 = and(idxPagesOH_21, pageHit)
    node T_1117 = and(idxPagesOH_22, pageHit)
    node T_1118 = and(idxPagesOH_23, pageHit)
    node T_1119 = and(idxPagesOH_24, pageHit)
    node T_1120 = and(idxPagesOH_25, pageHit)
    node T_1121 = and(idxPagesOH_26, pageHit)
    node T_1122 = and(idxPagesOH_27, pageHit)
    node T_1123 = and(idxPagesOH_28, pageHit)
    node T_1124 = and(idxPagesOH_29, pageHit)
    node T_1125 = and(idxPagesOH_30, pageHit)
    node T_1126 = and(idxPagesOH_31, pageHit)
    node T_1127 = and(idxPagesOH_32, pageHit)
    node T_1128 = and(idxPagesOH_33, pageHit)
    node T_1129 = and(idxPagesOH_34, pageHit)
    node T_1130 = and(idxPagesOH_35, pageHit)
    node T_1131 = and(idxPagesOH_36, pageHit)
    node T_1132 = and(idxPagesOH_37, pageHit)
    node T_1133 = and(idxPagesOH_38, pageHit)
    node T_1134 = and(idxPagesOH_39, pageHit)
    node T_1136 = neq(T_1095, UInt<6>("h0"))
    node T_1138 = neq(T_1096, UInt<6>("h0"))
    node T_1140 = neq(T_1097, UInt<6>("h0"))
    node T_1142 = neq(T_1098, UInt<6>("h0"))
    node T_1144 = neq(T_1099, UInt<6>("h0"))
    node T_1146 = neq(T_1100, UInt<6>("h0"))
    node T_1148 = neq(T_1101, UInt<6>("h0"))
    node T_1150 = neq(T_1102, UInt<6>("h0"))
    node T_1152 = neq(T_1103, UInt<6>("h0"))
    node T_1154 = neq(T_1104, UInt<6>("h0"))
    node T_1156 = neq(T_1105, UInt<6>("h0"))
    node T_1158 = neq(T_1106, UInt<6>("h0"))
    node T_1160 = neq(T_1107, UInt<6>("h0"))
    node T_1162 = neq(T_1108, UInt<6>("h0"))
    node T_1164 = neq(T_1109, UInt<6>("h0"))
    node T_1166 = neq(T_1110, UInt<6>("h0"))
    node T_1168 = neq(T_1111, UInt<6>("h0"))
    node T_1170 = neq(T_1112, UInt<6>("h0"))
    node T_1172 = neq(T_1113, UInt<6>("h0"))
    node T_1174 = neq(T_1114, UInt<6>("h0"))
    node T_1176 = neq(T_1115, UInt<6>("h0"))
    node T_1178 = neq(T_1116, UInt<6>("h0"))
    node T_1180 = neq(T_1117, UInt<6>("h0"))
    node T_1182 = neq(T_1118, UInt<6>("h0"))
    node T_1184 = neq(T_1119, UInt<6>("h0"))
    node T_1186 = neq(T_1120, UInt<6>("h0"))
    node T_1188 = neq(T_1121, UInt<6>("h0"))
    node T_1190 = neq(T_1122, UInt<6>("h0"))
    node T_1192 = neq(T_1123, UInt<6>("h0"))
    node T_1194 = neq(T_1124, UInt<6>("h0"))
    node T_1196 = neq(T_1125, UInt<6>("h0"))
    node T_1198 = neq(T_1126, UInt<6>("h0"))
    node T_1200 = neq(T_1127, UInt<6>("h0"))
    node T_1202 = neq(T_1128, UInt<6>("h0"))
    node T_1204 = neq(T_1129, UInt<6>("h0"))
    node T_1206 = neq(T_1130, UInt<6>("h0"))
    node T_1208 = neq(T_1131, UInt<6>("h0"))
    node T_1210 = neq(T_1132, UInt<6>("h0"))
    node T_1212 = neq(T_1133, UInt<6>("h0"))
    node T_1214 = neq(T_1134, UInt<6>("h0"))
    node T_1215 = cat(T_1138, T_1136)
    node T_1216 = cat(T_1144, T_1142)
    node T_1217 = cat(T_1216, T_1140)
    node T_1218 = cat(T_1217, T_1215)
    node T_1219 = cat(T_1148, T_1146)
    node T_1220 = cat(T_1154, T_1152)
    node T_1221 = cat(T_1220, T_1150)
    node T_1222 = cat(T_1221, T_1219)
    node T_1223 = cat(T_1222, T_1218)
    node T_1224 = cat(T_1158, T_1156)
    node T_1225 = cat(T_1164, T_1162)
    node T_1226 = cat(T_1225, T_1160)
    node T_1227 = cat(T_1226, T_1224)
    node T_1228 = cat(T_1168, T_1166)
    node T_1229 = cat(T_1174, T_1172)
    node T_1230 = cat(T_1229, T_1170)
    node T_1231 = cat(T_1230, T_1228)
    node T_1232 = cat(T_1231, T_1227)
    node T_1233 = cat(T_1232, T_1223)
    node T_1234 = cat(T_1178, T_1176)
    node T_1235 = cat(T_1184, T_1182)
    node T_1236 = cat(T_1235, T_1180)
    node T_1237 = cat(T_1236, T_1234)
    node T_1238 = cat(T_1188, T_1186)
    node T_1239 = cat(T_1194, T_1192)
    node T_1240 = cat(T_1239, T_1190)
    node T_1241 = cat(T_1240, T_1238)
    node T_1242 = cat(T_1241, T_1237)
    node T_1243 = cat(T_1198, T_1196)
    node T_1244 = cat(T_1204, T_1202)
    node T_1245 = cat(T_1244, T_1200)
    node T_1246 = cat(T_1245, T_1243)
    node T_1247 = cat(T_1208, T_1206)
    node T_1248 = cat(T_1214, T_1212)
    node T_1249 = cat(T_1248, T_1210)
    node T_1250 = cat(T_1249, T_1247)
    node T_1251 = cat(T_1250, T_1246)
    node T_1252 = cat(T_1251, T_1242)
    node T_1253 = cat(T_1252, T_1233)
    node T_1254 = and(T_1094, T_1253)
    node hitsVec = and(T_1254, isValid)
    node T_1255 = shr(r_btb_update_bits_pc, 12)
    node T_1256 = eq(pages_0, T_1255)
    node T_1257 = eq(pages_1, T_1255)
    node T_1258 = eq(pages_2, T_1255)
    node T_1259 = eq(pages_3, T_1255)
    node T_1260 = eq(pages_4, T_1255)
    node T_1261 = eq(pages_5, T_1255)
    node T_1262 = cat(T_1258, T_1257)
    node T_1263 = cat(T_1262, T_1256)
    node T_1264 = cat(T_1261, T_1260)
    node T_1265 = cat(T_1264, T_1259)
    node T_1266 = cat(T_1265, T_1263)
    node updatePageHit = and(pageValid, T_1266)
    node T_1267 = bits(r_btb_update_bits_pc, 11, 1)
    node T_1547 = eq(r_btb_update_bits_prediction_valid, UInt<1>("h0"))
    node T_1548 = and(r_btb_update_valid, T_1547)
    reg nextRepl : UInt<6>, clk with :
      reset => (reset, UInt<6>("h0"))
    node T_1551 = eq(nextRepl, UInt<6>("h27"))
    node T_1553 = add(nextRepl, UInt<6>("h1"))
    node T_1554 = tail(T_1553, 1)
    node GEN_22 = mux(T_1551, UInt<6>("h0"), T_1554)
    node GEN_23 = mux(T_1548, GEN_22, nextRepl)
    node useUpdatePageHit = neq(updatePageHit, UInt<6>("h0"))
    node usePageHit = neq(pageHit, UInt<6>("h0"))
    node doIdxPageRepl = eq(useUpdatePageHit, UInt<1>("h0"))
    reg nextPageRepl : UInt<3>, clk with :
      reset => (UInt<1>("h0"), nextPageRepl)
    node T_1561 = bits(pageHit, 4, 0)
    node T_1562 = bits(pageHit, 5, 5)
    node T_1563 = cat(T_1561, T_1562)
    node T_1565 = dshlw(UInt<8>("h1"), nextPageRepl)
    node idxPageRepl = mux(usePageHit, pad(T_1563, 8), T_1565)
    node idxPageUpdateOH = mux(useUpdatePageHit, pad(updatePageHit, 8), idxPageRepl)
    node T_1566 = bits(idxPageUpdateOH, 7, 4)
    node T_1567 = bits(idxPageUpdateOH, 3, 0)
    node T_1569 = neq(T_1566, UInt<4>("h0"))
    node T_1570 = or(T_1566, T_1567)
    node T_1571 = bits(T_1570, 3, 2)
    node T_1572 = bits(T_1570, 1, 0)
    node T_1574 = neq(T_1571, UInt<2>("h0"))
    node T_1575 = or(T_1571, T_1572)
    node T_1576 = bits(T_1575, 1, 1)
    node T_1577 = cat(T_1574, T_1576)
    node idxPageUpdate = cat(T_1569, T_1577)
    node idxPageReplEn = mux(doIdxPageRepl, idxPageRepl, UInt<8>("h0"))
    node samePage = eq(T_1255, T_964)
    node T_1582 = eq(samePage, UInt<1>("h0"))
    node T_1584 = eq(usePageHit, UInt<1>("h0"))
    node doTgtPageRepl = and(T_1582, T_1584)
    node T_1585 = bits(idxPageUpdateOH, 4, 0)
    node T_1586 = bits(idxPageUpdateOH, 5, 5)
    node T_1587 = cat(T_1585, T_1586)
    node tgtPageRepl = mux(samePage, idxPageUpdateOH, pad(T_1587, 8))
    node T_1588 = mux(usePageHit, pad(pageHit, 8), tgtPageRepl)
    node T_1589 = bits(T_1588, 7, 4)
    node T_1590 = bits(T_1588, 3, 0)
    node T_1592 = neq(T_1589, UInt<4>("h0"))
    node T_1593 = or(T_1589, T_1590)
    node T_1594 = bits(T_1593, 3, 2)
    node T_1595 = bits(T_1593, 1, 0)
    node T_1597 = neq(T_1594, UInt<2>("h0"))
    node T_1598 = or(T_1594, T_1595)
    node T_1599 = bits(T_1598, 1, 1)
    node T_1600 = cat(T_1597, T_1599)
    node tgtPageUpdate = cat(T_1592, T_1600)
    node tgtPageReplEn = mux(doTgtPageRepl, tgtPageRepl, UInt<8>("h0"))
    node T_1602 = or(doIdxPageRepl, doTgtPageRepl)
    node T_1603 = and(r_btb_update_valid, T_1602)
    node T_1604 = and(doIdxPageRepl, doTgtPageRepl)
    node T_1607 = mux(T_1604, UInt<2>("h2"), UInt<2>("h1"))
    node GEN_475 = pad(T_1607, 3)
    node T_1608 = add(nextPageRepl, GEN_475)
    node T_1609 = tail(T_1608, 1)
    node T_1611 = geq(T_1609, UInt<3>("h6"))
    node T_1612 = bits(T_1609, 0, 0)
    node T_1614 = mux(T_1611, pad(T_1612, 3), T_1609)
    node GEN_24 = mux(T_1603, T_1614, nextPageRepl)
    node T_1615 = mux(r_btb_update_bits_prediction_valid, r_btb_update_bits_prediction_bits_entry, nextRepl)
    node T_1617 = dshlw(UInt<64>("h1"), T_1615)
    wire GEN_0 : UInt<11>
    node GEN_25 = mux(eq(UInt<6>("h0"), T_1615), GEN_0, idxs_0)
    node GEN_26 = mux(eq(UInt<6>("h1"), T_1615), GEN_0, idxs_1)
    node GEN_27 = mux(eq(UInt<6>("h2"), T_1615), GEN_0, idxs_2)
    node GEN_28 = mux(eq(UInt<6>("h3"), T_1615), GEN_0, idxs_3)
    node GEN_29 = mux(eq(UInt<6>("h4"), T_1615), GEN_0, idxs_4)
    node GEN_30 = mux(eq(UInt<6>("h5"), T_1615), GEN_0, idxs_5)
    node GEN_31 = mux(eq(UInt<6>("h6"), T_1615), GEN_0, idxs_6)
    node GEN_32 = mux(eq(UInt<6>("h7"), T_1615), GEN_0, idxs_7)
    node GEN_33 = mux(eq(UInt<6>("h8"), T_1615), GEN_0, idxs_8)
    node GEN_34 = mux(eq(UInt<6>("h9"), T_1615), GEN_0, idxs_9)
    node GEN_35 = mux(eq(UInt<6>("ha"), T_1615), GEN_0, idxs_10)
    node GEN_36 = mux(eq(UInt<6>("hb"), T_1615), GEN_0, idxs_11)
    node GEN_37 = mux(eq(UInt<6>("hc"), T_1615), GEN_0, idxs_12)
    node GEN_38 = mux(eq(UInt<6>("hd"), T_1615), GEN_0, idxs_13)
    node GEN_39 = mux(eq(UInt<6>("he"), T_1615), GEN_0, idxs_14)
    node GEN_40 = mux(eq(UInt<6>("hf"), T_1615), GEN_0, idxs_15)
    node GEN_41 = mux(eq(UInt<6>("h10"), T_1615), GEN_0, idxs_16)
    node GEN_42 = mux(eq(UInt<6>("h11"), T_1615), GEN_0, idxs_17)
    node GEN_43 = mux(eq(UInt<6>("h12"), T_1615), GEN_0, idxs_18)
    node GEN_44 = mux(eq(UInt<6>("h13"), T_1615), GEN_0, idxs_19)
    node GEN_45 = mux(eq(UInt<6>("h14"), T_1615), GEN_0, idxs_20)
    node GEN_46 = mux(eq(UInt<6>("h15"), T_1615), GEN_0, idxs_21)
    node GEN_47 = mux(eq(UInt<6>("h16"), T_1615), GEN_0, idxs_22)
    node GEN_48 = mux(eq(UInt<6>("h17"), T_1615), GEN_0, idxs_23)
    node GEN_49 = mux(eq(UInt<6>("h18"), T_1615), GEN_0, idxs_24)
    node GEN_50 = mux(eq(UInt<6>("h19"), T_1615), GEN_0, idxs_25)
    node GEN_51 = mux(eq(UInt<6>("h1a"), T_1615), GEN_0, idxs_26)
    node GEN_52 = mux(eq(UInt<6>("h1b"), T_1615), GEN_0, idxs_27)
    node GEN_53 = mux(eq(UInt<6>("h1c"), T_1615), GEN_0, idxs_28)
    node GEN_54 = mux(eq(UInt<6>("h1d"), T_1615), GEN_0, idxs_29)
    node GEN_55 = mux(eq(UInt<6>("h1e"), T_1615), GEN_0, idxs_30)
    node GEN_56 = mux(eq(UInt<6>("h1f"), T_1615), GEN_0, idxs_31)
    node GEN_57 = mux(eq(UInt<6>("h20"), T_1615), GEN_0, idxs_32)
    node GEN_58 = mux(eq(UInt<6>("h21"), T_1615), GEN_0, idxs_33)
    node GEN_59 = mux(eq(UInt<6>("h22"), T_1615), GEN_0, idxs_34)
    node GEN_60 = mux(eq(UInt<6>("h23"), T_1615), GEN_0, idxs_35)
    node GEN_61 = mux(eq(UInt<6>("h24"), T_1615), GEN_0, idxs_36)
    node GEN_62 = mux(eq(UInt<6>("h25"), T_1615), GEN_0, idxs_37)
    node GEN_63 = mux(eq(UInt<6>("h26"), T_1615), GEN_0, idxs_38)
    node GEN_64 = mux(eq(UInt<6>("h27"), T_1615), GEN_0, idxs_39)
    wire GEN_1 : UInt<11>
    node GEN_65 = mux(eq(UInt<6>("h0"), T_1615), GEN_1, tgts_0)
    node GEN_66 = mux(eq(UInt<6>("h1"), T_1615), GEN_1, tgts_1)
    node GEN_67 = mux(eq(UInt<6>("h2"), T_1615), GEN_1, tgts_2)
    node GEN_68 = mux(eq(UInt<6>("h3"), T_1615), GEN_1, tgts_3)
    node GEN_69 = mux(eq(UInt<6>("h4"), T_1615), GEN_1, tgts_4)
    node GEN_70 = mux(eq(UInt<6>("h5"), T_1615), GEN_1, tgts_5)
    node GEN_71 = mux(eq(UInt<6>("h6"), T_1615), GEN_1, tgts_6)
    node GEN_72 = mux(eq(UInt<6>("h7"), T_1615), GEN_1, tgts_7)
    node GEN_73 = mux(eq(UInt<6>("h8"), T_1615), GEN_1, tgts_8)
    node GEN_74 = mux(eq(UInt<6>("h9"), T_1615), GEN_1, tgts_9)
    node GEN_75 = mux(eq(UInt<6>("ha"), T_1615), GEN_1, tgts_10)
    node GEN_76 = mux(eq(UInt<6>("hb"), T_1615), GEN_1, tgts_11)
    node GEN_77 = mux(eq(UInt<6>("hc"), T_1615), GEN_1, tgts_12)
    node GEN_78 = mux(eq(UInt<6>("hd"), T_1615), GEN_1, tgts_13)
    node GEN_79 = mux(eq(UInt<6>("he"), T_1615), GEN_1, tgts_14)
    node GEN_80 = mux(eq(UInt<6>("hf"), T_1615), GEN_1, tgts_15)
    node GEN_81 = mux(eq(UInt<6>("h10"), T_1615), GEN_1, tgts_16)
    node GEN_82 = mux(eq(UInt<6>("h11"), T_1615), GEN_1, tgts_17)
    node GEN_83 = mux(eq(UInt<6>("h12"), T_1615), GEN_1, tgts_18)
    node GEN_84 = mux(eq(UInt<6>("h13"), T_1615), GEN_1, tgts_19)
    node GEN_85 = mux(eq(UInt<6>("h14"), T_1615), GEN_1, tgts_20)
    node GEN_86 = mux(eq(UInt<6>("h15"), T_1615), GEN_1, tgts_21)
    node GEN_87 = mux(eq(UInt<6>("h16"), T_1615), GEN_1, tgts_22)
    node GEN_88 = mux(eq(UInt<6>("h17"), T_1615), GEN_1, tgts_23)
    node GEN_89 = mux(eq(UInt<6>("h18"), T_1615), GEN_1, tgts_24)
    node GEN_90 = mux(eq(UInt<6>("h19"), T_1615), GEN_1, tgts_25)
    node GEN_91 = mux(eq(UInt<6>("h1a"), T_1615), GEN_1, tgts_26)
    node GEN_92 = mux(eq(UInt<6>("h1b"), T_1615), GEN_1, tgts_27)
    node GEN_93 = mux(eq(UInt<6>("h1c"), T_1615), GEN_1, tgts_28)
    node GEN_94 = mux(eq(UInt<6>("h1d"), T_1615), GEN_1, tgts_29)
    node GEN_95 = mux(eq(UInt<6>("h1e"), T_1615), GEN_1, tgts_30)
    node GEN_96 = mux(eq(UInt<6>("h1f"), T_1615), GEN_1, tgts_31)
    node GEN_97 = mux(eq(UInt<6>("h20"), T_1615), GEN_1, tgts_32)
    node GEN_98 = mux(eq(UInt<6>("h21"), T_1615), GEN_1, tgts_33)
    node GEN_99 = mux(eq(UInt<6>("h22"), T_1615), GEN_1, tgts_34)
    node GEN_100 = mux(eq(UInt<6>("h23"), T_1615), GEN_1, tgts_35)
    node GEN_101 = mux(eq(UInt<6>("h24"), T_1615), GEN_1, tgts_36)
    node GEN_102 = mux(eq(UInt<6>("h25"), T_1615), GEN_1, tgts_37)
    node GEN_103 = mux(eq(UInt<6>("h26"), T_1615), GEN_1, tgts_38)
    node GEN_104 = mux(eq(UInt<6>("h27"), T_1615), GEN_1, tgts_39)
    wire GEN_2 : UInt<3>
    node GEN_105 = mux(eq(UInt<6>("h0"), T_1615), GEN_2, idxPages_0)
    node GEN_106 = mux(eq(UInt<6>("h1"), T_1615), GEN_2, idxPages_1)
    node GEN_107 = mux(eq(UInt<6>("h2"), T_1615), GEN_2, idxPages_2)
    node GEN_108 = mux(eq(UInt<6>("h3"), T_1615), GEN_2, idxPages_3)
    node GEN_109 = mux(eq(UInt<6>("h4"), T_1615), GEN_2, idxPages_4)
    node GEN_110 = mux(eq(UInt<6>("h5"), T_1615), GEN_2, idxPages_5)
    node GEN_111 = mux(eq(UInt<6>("h6"), T_1615), GEN_2, idxPages_6)
    node GEN_112 = mux(eq(UInt<6>("h7"), T_1615), GEN_2, idxPages_7)
    node GEN_113 = mux(eq(UInt<6>("h8"), T_1615), GEN_2, idxPages_8)
    node GEN_114 = mux(eq(UInt<6>("h9"), T_1615), GEN_2, idxPages_9)
    node GEN_115 = mux(eq(UInt<6>("ha"), T_1615), GEN_2, idxPages_10)
    node GEN_116 = mux(eq(UInt<6>("hb"), T_1615), GEN_2, idxPages_11)
    node GEN_117 = mux(eq(UInt<6>("hc"), T_1615), GEN_2, idxPages_12)
    node GEN_118 = mux(eq(UInt<6>("hd"), T_1615), GEN_2, idxPages_13)
    node GEN_119 = mux(eq(UInt<6>("he"), T_1615), GEN_2, idxPages_14)
    node GEN_120 = mux(eq(UInt<6>("hf"), T_1615), GEN_2, idxPages_15)
    node GEN_121 = mux(eq(UInt<6>("h10"), T_1615), GEN_2, idxPages_16)
    node GEN_122 = mux(eq(UInt<6>("h11"), T_1615), GEN_2, idxPages_17)
    node GEN_123 = mux(eq(UInt<6>("h12"), T_1615), GEN_2, idxPages_18)
    node GEN_124 = mux(eq(UInt<6>("h13"), T_1615), GEN_2, idxPages_19)
    node GEN_125 = mux(eq(UInt<6>("h14"), T_1615), GEN_2, idxPages_20)
    node GEN_126 = mux(eq(UInt<6>("h15"), T_1615), GEN_2, idxPages_21)
    node GEN_127 = mux(eq(UInt<6>("h16"), T_1615), GEN_2, idxPages_22)
    node GEN_128 = mux(eq(UInt<6>("h17"), T_1615), GEN_2, idxPages_23)
    node GEN_129 = mux(eq(UInt<6>("h18"), T_1615), GEN_2, idxPages_24)
    node GEN_130 = mux(eq(UInt<6>("h19"), T_1615), GEN_2, idxPages_25)
    node GEN_131 = mux(eq(UInt<6>("h1a"), T_1615), GEN_2, idxPages_26)
    node GEN_132 = mux(eq(UInt<6>("h1b"), T_1615), GEN_2, idxPages_27)
    node GEN_133 = mux(eq(UInt<6>("h1c"), T_1615), GEN_2, idxPages_28)
    node GEN_134 = mux(eq(UInt<6>("h1d"), T_1615), GEN_2, idxPages_29)
    node GEN_135 = mux(eq(UInt<6>("h1e"), T_1615), GEN_2, idxPages_30)
    node GEN_136 = mux(eq(UInt<6>("h1f"), T_1615), GEN_2, idxPages_31)
    node GEN_137 = mux(eq(UInt<6>("h20"), T_1615), GEN_2, idxPages_32)
    node GEN_138 = mux(eq(UInt<6>("h21"), T_1615), GEN_2, idxPages_33)
    node GEN_139 = mux(eq(UInt<6>("h22"), T_1615), GEN_2, idxPages_34)
    node GEN_140 = mux(eq(UInt<6>("h23"), T_1615), GEN_2, idxPages_35)
    node GEN_141 = mux(eq(UInt<6>("h24"), T_1615), GEN_2, idxPages_36)
    node GEN_142 = mux(eq(UInt<6>("h25"), T_1615), GEN_2, idxPages_37)
    node GEN_143 = mux(eq(UInt<6>("h26"), T_1615), GEN_2, idxPages_38)
    node GEN_144 = mux(eq(UInt<6>("h27"), T_1615), GEN_2, idxPages_39)
    wire GEN_3 : UInt<3>
    node GEN_145 = mux(eq(UInt<6>("h0"), T_1615), GEN_3, tgtPages_0)
    node GEN_146 = mux(eq(UInt<6>("h1"), T_1615), GEN_3, tgtPages_1)
    node GEN_147 = mux(eq(UInt<6>("h2"), T_1615), GEN_3, tgtPages_2)
    node GEN_148 = mux(eq(UInt<6>("h3"), T_1615), GEN_3, tgtPages_3)
    node GEN_149 = mux(eq(UInt<6>("h4"), T_1615), GEN_3, tgtPages_4)
    node GEN_150 = mux(eq(UInt<6>("h5"), T_1615), GEN_3, tgtPages_5)
    node GEN_151 = mux(eq(UInt<6>("h6"), T_1615), GEN_3, tgtPages_6)
    node GEN_152 = mux(eq(UInt<6>("h7"), T_1615), GEN_3, tgtPages_7)
    node GEN_153 = mux(eq(UInt<6>("h8"), T_1615), GEN_3, tgtPages_8)
    node GEN_154 = mux(eq(UInt<6>("h9"), T_1615), GEN_3, tgtPages_9)
    node GEN_155 = mux(eq(UInt<6>("ha"), T_1615), GEN_3, tgtPages_10)
    node GEN_156 = mux(eq(UInt<6>("hb"), T_1615), GEN_3, tgtPages_11)
    node GEN_157 = mux(eq(UInt<6>("hc"), T_1615), GEN_3, tgtPages_12)
    node GEN_158 = mux(eq(UInt<6>("hd"), T_1615), GEN_3, tgtPages_13)
    node GEN_159 = mux(eq(UInt<6>("he"), T_1615), GEN_3, tgtPages_14)
    node GEN_160 = mux(eq(UInt<6>("hf"), T_1615), GEN_3, tgtPages_15)
    node GEN_161 = mux(eq(UInt<6>("h10"), T_1615), GEN_3, tgtPages_16)
    node GEN_162 = mux(eq(UInt<6>("h11"), T_1615), GEN_3, tgtPages_17)
    node GEN_163 = mux(eq(UInt<6>("h12"), T_1615), GEN_3, tgtPages_18)
    node GEN_164 = mux(eq(UInt<6>("h13"), T_1615), GEN_3, tgtPages_19)
    node GEN_165 = mux(eq(UInt<6>("h14"), T_1615), GEN_3, tgtPages_20)
    node GEN_166 = mux(eq(UInt<6>("h15"), T_1615), GEN_3, tgtPages_21)
    node GEN_167 = mux(eq(UInt<6>("h16"), T_1615), GEN_3, tgtPages_22)
    node GEN_168 = mux(eq(UInt<6>("h17"), T_1615), GEN_3, tgtPages_23)
    node GEN_169 = mux(eq(UInt<6>("h18"), T_1615), GEN_3, tgtPages_24)
    node GEN_170 = mux(eq(UInt<6>("h19"), T_1615), GEN_3, tgtPages_25)
    node GEN_171 = mux(eq(UInt<6>("h1a"), T_1615), GEN_3, tgtPages_26)
    node GEN_172 = mux(eq(UInt<6>("h1b"), T_1615), GEN_3, tgtPages_27)
    node GEN_173 = mux(eq(UInt<6>("h1c"), T_1615), GEN_3, tgtPages_28)
    node GEN_174 = mux(eq(UInt<6>("h1d"), T_1615), GEN_3, tgtPages_29)
    node GEN_175 = mux(eq(UInt<6>("h1e"), T_1615), GEN_3, tgtPages_30)
    node GEN_176 = mux(eq(UInt<6>("h1f"), T_1615), GEN_3, tgtPages_31)
    node GEN_177 = mux(eq(UInt<6>("h20"), T_1615), GEN_3, tgtPages_32)
    node GEN_178 = mux(eq(UInt<6>("h21"), T_1615), GEN_3, tgtPages_33)
    node GEN_179 = mux(eq(UInt<6>("h22"), T_1615), GEN_3, tgtPages_34)
    node GEN_180 = mux(eq(UInt<6>("h23"), T_1615), GEN_3, tgtPages_35)
    node GEN_181 = mux(eq(UInt<6>("h24"), T_1615), GEN_3, tgtPages_36)
    node GEN_182 = mux(eq(UInt<6>("h25"), T_1615), GEN_3, tgtPages_37)
    node GEN_183 = mux(eq(UInt<6>("h26"), T_1615), GEN_3, tgtPages_38)
    node GEN_184 = mux(eq(UInt<6>("h27"), T_1615), GEN_3, tgtPages_39)
    node GEN_476 = pad(isValid, 64)
    node T_1620 = or(GEN_476, T_1617)
    node T_1621 = not(T_1617)
    node T_1622 = and(GEN_476, T_1621)
    node T_1623 = mux(r_btb_update_bits_isValid, T_1620, T_1622)
    node GEN_478 = pad(isReturn, 64)
    node T_1624 = or(GEN_478, T_1617)
    node T_1626 = and(GEN_478, T_1621)
    node T_1627 = mux(r_btb_update_bits_isReturn, T_1624, T_1626)
    node GEN_480 = pad(isJump, 64)
    node T_1628 = or(GEN_480, T_1617)
    node T_1630 = and(GEN_480, T_1621)
    node T_1631 = mux(r_btb_update_bits_isJump, T_1628, T_1630)
    node T_1632 = shr(r_btb_update_bits_br_pc, 1)
    wire GEN_4 : UInt<1>
    node GEN_185 = mux(eq(UInt<6>("h0"), T_1615), GEN_4, brIdx_0)
    node GEN_186 = mux(eq(UInt<6>("h1"), T_1615), GEN_4, brIdx_1)
    node GEN_187 = mux(eq(UInt<6>("h2"), T_1615), GEN_4, brIdx_2)
    node GEN_188 = mux(eq(UInt<6>("h3"), T_1615), GEN_4, brIdx_3)
    node GEN_189 = mux(eq(UInt<6>("h4"), T_1615), GEN_4, brIdx_4)
    node GEN_190 = mux(eq(UInt<6>("h5"), T_1615), GEN_4, brIdx_5)
    node GEN_191 = mux(eq(UInt<6>("h6"), T_1615), GEN_4, brIdx_6)
    node GEN_192 = mux(eq(UInt<6>("h7"), T_1615), GEN_4, brIdx_7)
    node GEN_193 = mux(eq(UInt<6>("h8"), T_1615), GEN_4, brIdx_8)
    node GEN_194 = mux(eq(UInt<6>("h9"), T_1615), GEN_4, brIdx_9)
    node GEN_195 = mux(eq(UInt<6>("ha"), T_1615), GEN_4, brIdx_10)
    node GEN_196 = mux(eq(UInt<6>("hb"), T_1615), GEN_4, brIdx_11)
    node GEN_197 = mux(eq(UInt<6>("hc"), T_1615), GEN_4, brIdx_12)
    node GEN_198 = mux(eq(UInt<6>("hd"), T_1615), GEN_4, brIdx_13)
    node GEN_199 = mux(eq(UInt<6>("he"), T_1615), GEN_4, brIdx_14)
    node GEN_200 = mux(eq(UInt<6>("hf"), T_1615), GEN_4, brIdx_15)
    node GEN_201 = mux(eq(UInt<6>("h10"), T_1615), GEN_4, brIdx_16)
    node GEN_202 = mux(eq(UInt<6>("h11"), T_1615), GEN_4, brIdx_17)
    node GEN_203 = mux(eq(UInt<6>("h12"), T_1615), GEN_4, brIdx_18)
    node GEN_204 = mux(eq(UInt<6>("h13"), T_1615), GEN_4, brIdx_19)
    node GEN_205 = mux(eq(UInt<6>("h14"), T_1615), GEN_4, brIdx_20)
    node GEN_206 = mux(eq(UInt<6>("h15"), T_1615), GEN_4, brIdx_21)
    node GEN_207 = mux(eq(UInt<6>("h16"), T_1615), GEN_4, brIdx_22)
    node GEN_208 = mux(eq(UInt<6>("h17"), T_1615), GEN_4, brIdx_23)
    node GEN_209 = mux(eq(UInt<6>("h18"), T_1615), GEN_4, brIdx_24)
    node GEN_210 = mux(eq(UInt<6>("h19"), T_1615), GEN_4, brIdx_25)
    node GEN_211 = mux(eq(UInt<6>("h1a"), T_1615), GEN_4, brIdx_26)
    node GEN_212 = mux(eq(UInt<6>("h1b"), T_1615), GEN_4, brIdx_27)
    node GEN_213 = mux(eq(UInt<6>("h1c"), T_1615), GEN_4, brIdx_28)
    node GEN_214 = mux(eq(UInt<6>("h1d"), T_1615), GEN_4, brIdx_29)
    node GEN_215 = mux(eq(UInt<6>("h1e"), T_1615), GEN_4, brIdx_30)
    node GEN_216 = mux(eq(UInt<6>("h1f"), T_1615), GEN_4, brIdx_31)
    node GEN_217 = mux(eq(UInt<6>("h20"), T_1615), GEN_4, brIdx_32)
    node GEN_218 = mux(eq(UInt<6>("h21"), T_1615), GEN_4, brIdx_33)
    node GEN_219 = mux(eq(UInt<6>("h22"), T_1615), GEN_4, brIdx_34)
    node GEN_220 = mux(eq(UInt<6>("h23"), T_1615), GEN_4, brIdx_35)
    node GEN_221 = mux(eq(UInt<6>("h24"), T_1615), GEN_4, brIdx_36)
    node GEN_222 = mux(eq(UInt<6>("h25"), T_1615), GEN_4, brIdx_37)
    node GEN_223 = mux(eq(UInt<6>("h26"), T_1615), GEN_4, brIdx_38)
    node GEN_224 = mux(eq(UInt<6>("h27"), T_1615), GEN_4, brIdx_39)
    node T_1633 = bits(idxPageUpdate, 0, 0)
    node T_1635 = eq(T_1633, UInt<1>("h0"))
    node T_1636 = mux(T_1635, idxPageReplEn, tgtPageReplEn)
    node T_1639 = mux(T_1635, T_1255, T_964)
    node T_1640 = bits(T_1636, 0, 0)
    node GEN_225 = mux(T_1640, T_1639, pages_0)
    node T_1641 = bits(T_1636, 2, 2)
    node GEN_226 = mux(T_1641, T_1639, pages_2)
    node T_1642 = bits(T_1636, 4, 4)
    node GEN_227 = mux(T_1642, T_1639, pages_4)
    node T_1643 = mux(T_1635, tgtPageReplEn, idxPageReplEn)
    node T_1646 = mux(T_1635, T_964, T_1255)
    node T_1647 = bits(T_1643, 1, 1)
    node GEN_228 = mux(T_1647, T_1646, pages_1)
    node T_1648 = bits(T_1643, 3, 3)
    node GEN_229 = mux(T_1648, T_1646, pages_3)
    node T_1649 = bits(T_1643, 5, 5)
    node GEN_230 = mux(T_1649, T_1646, pages_5)
    node GEN_482 = pad(pageValid, 8)
    node T_1650 = or(GEN_482, tgtPageReplEn)
    node T_1651 = or(T_1650, idxPageReplEn)
    node GEN_231 = mux(r_btb_update_valid, GEN_25, idxs_0)
    node GEN_232 = mux(r_btb_update_valid, GEN_26, idxs_1)
    node GEN_233 = mux(r_btb_update_valid, GEN_27, idxs_2)
    node GEN_234 = mux(r_btb_update_valid, GEN_28, idxs_3)
    node GEN_235 = mux(r_btb_update_valid, GEN_29, idxs_4)
    node GEN_236 = mux(r_btb_update_valid, GEN_30, idxs_5)
    node GEN_237 = mux(r_btb_update_valid, GEN_31, idxs_6)
    node GEN_238 = mux(r_btb_update_valid, GEN_32, idxs_7)
    node GEN_239 = mux(r_btb_update_valid, GEN_33, idxs_8)
    node GEN_240 = mux(r_btb_update_valid, GEN_34, idxs_9)
    node GEN_241 = mux(r_btb_update_valid, GEN_35, idxs_10)
    node GEN_242 = mux(r_btb_update_valid, GEN_36, idxs_11)
    node GEN_243 = mux(r_btb_update_valid, GEN_37, idxs_12)
    node GEN_244 = mux(r_btb_update_valid, GEN_38, idxs_13)
    node GEN_245 = mux(r_btb_update_valid, GEN_39, idxs_14)
    node GEN_246 = mux(r_btb_update_valid, GEN_40, idxs_15)
    node GEN_247 = mux(r_btb_update_valid, GEN_41, idxs_16)
    node GEN_248 = mux(r_btb_update_valid, GEN_42, idxs_17)
    node GEN_249 = mux(r_btb_update_valid, GEN_43, idxs_18)
    node GEN_250 = mux(r_btb_update_valid, GEN_44, idxs_19)
    node GEN_251 = mux(r_btb_update_valid, GEN_45, idxs_20)
    node GEN_252 = mux(r_btb_update_valid, GEN_46, idxs_21)
    node GEN_253 = mux(r_btb_update_valid, GEN_47, idxs_22)
    node GEN_254 = mux(r_btb_update_valid, GEN_48, idxs_23)
    node GEN_255 = mux(r_btb_update_valid, GEN_49, idxs_24)
    node GEN_256 = mux(r_btb_update_valid, GEN_50, idxs_25)
    node GEN_257 = mux(r_btb_update_valid, GEN_51, idxs_26)
    node GEN_258 = mux(r_btb_update_valid, GEN_52, idxs_27)
    node GEN_259 = mux(r_btb_update_valid, GEN_53, idxs_28)
    node GEN_260 = mux(r_btb_update_valid, GEN_54, idxs_29)
    node GEN_261 = mux(r_btb_update_valid, GEN_55, idxs_30)
    node GEN_262 = mux(r_btb_update_valid, GEN_56, idxs_31)
    node GEN_263 = mux(r_btb_update_valid, GEN_57, idxs_32)
    node GEN_264 = mux(r_btb_update_valid, GEN_58, idxs_33)
    node GEN_265 = mux(r_btb_update_valid, GEN_59, idxs_34)
    node GEN_266 = mux(r_btb_update_valid, GEN_60, idxs_35)
    node GEN_267 = mux(r_btb_update_valid, GEN_61, idxs_36)
    node GEN_268 = mux(r_btb_update_valid, GEN_62, idxs_37)
    node GEN_269 = mux(r_btb_update_valid, GEN_63, idxs_38)
    node GEN_270 = mux(r_btb_update_valid, GEN_64, idxs_39)
    node GEN_271 = mux(r_btb_update_valid, GEN_65, tgts_0)
    node GEN_272 = mux(r_btb_update_valid, GEN_66, tgts_1)
    node GEN_273 = mux(r_btb_update_valid, GEN_67, tgts_2)
    node GEN_274 = mux(r_btb_update_valid, GEN_68, tgts_3)
    node GEN_275 = mux(r_btb_update_valid, GEN_69, tgts_4)
    node GEN_276 = mux(r_btb_update_valid, GEN_70, tgts_5)
    node GEN_277 = mux(r_btb_update_valid, GEN_71, tgts_6)
    node GEN_278 = mux(r_btb_update_valid, GEN_72, tgts_7)
    node GEN_279 = mux(r_btb_update_valid, GEN_73, tgts_8)
    node GEN_280 = mux(r_btb_update_valid, GEN_74, tgts_9)
    node GEN_281 = mux(r_btb_update_valid, GEN_75, tgts_10)
    node GEN_282 = mux(r_btb_update_valid, GEN_76, tgts_11)
    node GEN_283 = mux(r_btb_update_valid, GEN_77, tgts_12)
    node GEN_284 = mux(r_btb_update_valid, GEN_78, tgts_13)
    node GEN_285 = mux(r_btb_update_valid, GEN_79, tgts_14)
    node GEN_286 = mux(r_btb_update_valid, GEN_80, tgts_15)
    node GEN_287 = mux(r_btb_update_valid, GEN_81, tgts_16)
    node GEN_288 = mux(r_btb_update_valid, GEN_82, tgts_17)
    node GEN_289 = mux(r_btb_update_valid, GEN_83, tgts_18)
    node GEN_290 = mux(r_btb_update_valid, GEN_84, tgts_19)
    node GEN_291 = mux(r_btb_update_valid, GEN_85, tgts_20)
    node GEN_292 = mux(r_btb_update_valid, GEN_86, tgts_21)
    node GEN_293 = mux(r_btb_update_valid, GEN_87, tgts_22)
    node GEN_294 = mux(r_btb_update_valid, GEN_88, tgts_23)
    node GEN_295 = mux(r_btb_update_valid, GEN_89, tgts_24)
    node GEN_296 = mux(r_btb_update_valid, GEN_90, tgts_25)
    node GEN_297 = mux(r_btb_update_valid, GEN_91, tgts_26)
    node GEN_298 = mux(r_btb_update_valid, GEN_92, tgts_27)
    node GEN_299 = mux(r_btb_update_valid, GEN_93, tgts_28)
    node GEN_300 = mux(r_btb_update_valid, GEN_94, tgts_29)
    node GEN_301 = mux(r_btb_update_valid, GEN_95, tgts_30)
    node GEN_302 = mux(r_btb_update_valid, GEN_96, tgts_31)
    node GEN_303 = mux(r_btb_update_valid, GEN_97, tgts_32)
    node GEN_304 = mux(r_btb_update_valid, GEN_98, tgts_33)
    node GEN_305 = mux(r_btb_update_valid, GEN_99, tgts_34)
    node GEN_306 = mux(r_btb_update_valid, GEN_100, tgts_35)
    node GEN_307 = mux(r_btb_update_valid, GEN_101, tgts_36)
    node GEN_308 = mux(r_btb_update_valid, GEN_102, tgts_37)
    node GEN_309 = mux(r_btb_update_valid, GEN_103, tgts_38)
    node GEN_310 = mux(r_btb_update_valid, GEN_104, tgts_39)
    node GEN_311 = mux(r_btb_update_valid, GEN_105, idxPages_0)
    node GEN_312 = mux(r_btb_update_valid, GEN_106, idxPages_1)
    node GEN_313 = mux(r_btb_update_valid, GEN_107, idxPages_2)
    node GEN_314 = mux(r_btb_update_valid, GEN_108, idxPages_3)
    node GEN_315 = mux(r_btb_update_valid, GEN_109, idxPages_4)
    node GEN_316 = mux(r_btb_update_valid, GEN_110, idxPages_5)
    node GEN_317 = mux(r_btb_update_valid, GEN_111, idxPages_6)
    node GEN_318 = mux(r_btb_update_valid, GEN_112, idxPages_7)
    node GEN_319 = mux(r_btb_update_valid, GEN_113, idxPages_8)
    node GEN_320 = mux(r_btb_update_valid, GEN_114, idxPages_9)
    node GEN_321 = mux(r_btb_update_valid, GEN_115, idxPages_10)
    node GEN_322 = mux(r_btb_update_valid, GEN_116, idxPages_11)
    node GEN_323 = mux(r_btb_update_valid, GEN_117, idxPages_12)
    node GEN_324 = mux(r_btb_update_valid, GEN_118, idxPages_13)
    node GEN_325 = mux(r_btb_update_valid, GEN_119, idxPages_14)
    node GEN_326 = mux(r_btb_update_valid, GEN_120, idxPages_15)
    node GEN_327 = mux(r_btb_update_valid, GEN_121, idxPages_16)
    node GEN_328 = mux(r_btb_update_valid, GEN_122, idxPages_17)
    node GEN_329 = mux(r_btb_update_valid, GEN_123, idxPages_18)
    node GEN_330 = mux(r_btb_update_valid, GEN_124, idxPages_19)
    node GEN_331 = mux(r_btb_update_valid, GEN_125, idxPages_20)
    node GEN_332 = mux(r_btb_update_valid, GEN_126, idxPages_21)
    node GEN_333 = mux(r_btb_update_valid, GEN_127, idxPages_22)
    node GEN_334 = mux(r_btb_update_valid, GEN_128, idxPages_23)
    node GEN_335 = mux(r_btb_update_valid, GEN_129, idxPages_24)
    node GEN_336 = mux(r_btb_update_valid, GEN_130, idxPages_25)
    node GEN_337 = mux(r_btb_update_valid, GEN_131, idxPages_26)
    node GEN_338 = mux(r_btb_update_valid, GEN_132, idxPages_27)
    node GEN_339 = mux(r_btb_update_valid, GEN_133, idxPages_28)
    node GEN_340 = mux(r_btb_update_valid, GEN_134, idxPages_29)
    node GEN_341 = mux(r_btb_update_valid, GEN_135, idxPages_30)
    node GEN_342 = mux(r_btb_update_valid, GEN_136, idxPages_31)
    node GEN_343 = mux(r_btb_update_valid, GEN_137, idxPages_32)
    node GEN_344 = mux(r_btb_update_valid, GEN_138, idxPages_33)
    node GEN_345 = mux(r_btb_update_valid, GEN_139, idxPages_34)
    node GEN_346 = mux(r_btb_update_valid, GEN_140, idxPages_35)
    node GEN_347 = mux(r_btb_update_valid, GEN_141, idxPages_36)
    node GEN_348 = mux(r_btb_update_valid, GEN_142, idxPages_37)
    node GEN_349 = mux(r_btb_update_valid, GEN_143, idxPages_38)
    node GEN_350 = mux(r_btb_update_valid, GEN_144, idxPages_39)
    node GEN_351 = mux(r_btb_update_valid, GEN_145, tgtPages_0)
    node GEN_352 = mux(r_btb_update_valid, GEN_146, tgtPages_1)
    node GEN_353 = mux(r_btb_update_valid, GEN_147, tgtPages_2)
    node GEN_354 = mux(r_btb_update_valid, GEN_148, tgtPages_3)
    node GEN_355 = mux(r_btb_update_valid, GEN_149, tgtPages_4)
    node GEN_356 = mux(r_btb_update_valid, GEN_150, tgtPages_5)
    node GEN_357 = mux(r_btb_update_valid, GEN_151, tgtPages_6)
    node GEN_358 = mux(r_btb_update_valid, GEN_152, tgtPages_7)
    node GEN_359 = mux(r_btb_update_valid, GEN_153, tgtPages_8)
    node GEN_360 = mux(r_btb_update_valid, GEN_154, tgtPages_9)
    node GEN_361 = mux(r_btb_update_valid, GEN_155, tgtPages_10)
    node GEN_362 = mux(r_btb_update_valid, GEN_156, tgtPages_11)
    node GEN_363 = mux(r_btb_update_valid, GEN_157, tgtPages_12)
    node GEN_364 = mux(r_btb_update_valid, GEN_158, tgtPages_13)
    node GEN_365 = mux(r_btb_update_valid, GEN_159, tgtPages_14)
    node GEN_366 = mux(r_btb_update_valid, GEN_160, tgtPages_15)
    node GEN_367 = mux(r_btb_update_valid, GEN_161, tgtPages_16)
    node GEN_368 = mux(r_btb_update_valid, GEN_162, tgtPages_17)
    node GEN_369 = mux(r_btb_update_valid, GEN_163, tgtPages_18)
    node GEN_370 = mux(r_btb_update_valid, GEN_164, tgtPages_19)
    node GEN_371 = mux(r_btb_update_valid, GEN_165, tgtPages_20)
    node GEN_372 = mux(r_btb_update_valid, GEN_166, tgtPages_21)
    node GEN_373 = mux(r_btb_update_valid, GEN_167, tgtPages_22)
    node GEN_374 = mux(r_btb_update_valid, GEN_168, tgtPages_23)
    node GEN_375 = mux(r_btb_update_valid, GEN_169, tgtPages_24)
    node GEN_376 = mux(r_btb_update_valid, GEN_170, tgtPages_25)
    node GEN_377 = mux(r_btb_update_valid, GEN_171, tgtPages_26)
    node GEN_378 = mux(r_btb_update_valid, GEN_172, tgtPages_27)
    node GEN_379 = mux(r_btb_update_valid, GEN_173, tgtPages_28)
    node GEN_380 = mux(r_btb_update_valid, GEN_174, tgtPages_29)
    node GEN_381 = mux(r_btb_update_valid, GEN_175, tgtPages_30)
    node GEN_382 = mux(r_btb_update_valid, GEN_176, tgtPages_31)
    node GEN_383 = mux(r_btb_update_valid, GEN_177, tgtPages_32)
    node GEN_384 = mux(r_btb_update_valid, GEN_178, tgtPages_33)
    node GEN_385 = mux(r_btb_update_valid, GEN_179, tgtPages_34)
    node GEN_386 = mux(r_btb_update_valid, GEN_180, tgtPages_35)
    node GEN_387 = mux(r_btb_update_valid, GEN_181, tgtPages_36)
    node GEN_388 = mux(r_btb_update_valid, GEN_182, tgtPages_37)
    node GEN_389 = mux(r_btb_update_valid, GEN_183, tgtPages_38)
    node GEN_390 = mux(r_btb_update_valid, GEN_184, tgtPages_39)
    node GEN_391 = mux(r_btb_update_valid, T_1623, pad(isValid, 64))
    node GEN_392 = mux(r_btb_update_valid, T_1627, pad(isReturn, 64))
    node GEN_393 = mux(r_btb_update_valid, T_1631, pad(isJump, 64))
    node GEN_394 = mux(r_btb_update_valid, GEN_185, brIdx_0)
    node GEN_395 = mux(r_btb_update_valid, GEN_186, brIdx_1)
    node GEN_396 = mux(r_btb_update_valid, GEN_187, brIdx_2)
    node GEN_397 = mux(r_btb_update_valid, GEN_188, brIdx_3)
    node GEN_398 = mux(r_btb_update_valid, GEN_189, brIdx_4)
    node GEN_399 = mux(r_btb_update_valid, GEN_190, brIdx_5)
    node GEN_400 = mux(r_btb_update_valid, GEN_191, brIdx_6)
    node GEN_401 = mux(r_btb_update_valid, GEN_192, brIdx_7)
    node GEN_402 = mux(r_btb_update_valid, GEN_193, brIdx_8)
    node GEN_403 = mux(r_btb_update_valid, GEN_194, brIdx_9)
    node GEN_404 = mux(r_btb_update_valid, GEN_195, brIdx_10)
    node GEN_405 = mux(r_btb_update_valid, GEN_196, brIdx_11)
    node GEN_406 = mux(r_btb_update_valid, GEN_197, brIdx_12)
    node GEN_407 = mux(r_btb_update_valid, GEN_198, brIdx_13)
    node GEN_408 = mux(r_btb_update_valid, GEN_199, brIdx_14)
    node GEN_409 = mux(r_btb_update_valid, GEN_200, brIdx_15)
    node GEN_410 = mux(r_btb_update_valid, GEN_201, brIdx_16)
    node GEN_411 = mux(r_btb_update_valid, GEN_202, brIdx_17)
    node GEN_412 = mux(r_btb_update_valid, GEN_203, brIdx_18)
    node GEN_413 = mux(r_btb_update_valid, GEN_204, brIdx_19)
    node GEN_414 = mux(r_btb_update_valid, GEN_205, brIdx_20)
    node GEN_415 = mux(r_btb_update_valid, GEN_206, brIdx_21)
    node GEN_416 = mux(r_btb_update_valid, GEN_207, brIdx_22)
    node GEN_417 = mux(r_btb_update_valid, GEN_208, brIdx_23)
    node GEN_418 = mux(r_btb_update_valid, GEN_209, brIdx_24)
    node GEN_419 = mux(r_btb_update_valid, GEN_210, brIdx_25)
    node GEN_420 = mux(r_btb_update_valid, GEN_211, brIdx_26)
    node GEN_421 = mux(r_btb_update_valid, GEN_212, brIdx_27)
    node GEN_422 = mux(r_btb_update_valid, GEN_213, brIdx_28)
    node GEN_423 = mux(r_btb_update_valid, GEN_214, brIdx_29)
    node GEN_424 = mux(r_btb_update_valid, GEN_215, brIdx_30)
    node GEN_425 = mux(r_btb_update_valid, GEN_216, brIdx_31)
    node GEN_426 = mux(r_btb_update_valid, GEN_217, brIdx_32)
    node GEN_427 = mux(r_btb_update_valid, GEN_218, brIdx_33)
    node GEN_428 = mux(r_btb_update_valid, GEN_219, brIdx_34)
    node GEN_429 = mux(r_btb_update_valid, GEN_220, brIdx_35)
    node GEN_430 = mux(r_btb_update_valid, GEN_221, brIdx_36)
    node GEN_431 = mux(r_btb_update_valid, GEN_222, brIdx_37)
    node GEN_432 = mux(r_btb_update_valid, GEN_223, brIdx_38)
    node GEN_433 = mux(r_btb_update_valid, GEN_224, brIdx_39)
    node GEN_434 = mux(r_btb_update_valid, GEN_225, pages_0)
    node GEN_435 = mux(r_btb_update_valid, GEN_226, pages_2)
    node GEN_436 = mux(r_btb_update_valid, GEN_227, pages_4)
    node GEN_437 = mux(r_btb_update_valid, GEN_228, pages_1)
    node GEN_438 = mux(r_btb_update_valid, GEN_229, pages_3)
    node GEN_439 = mux(r_btb_update_valid, GEN_230, pages_5)
    node GEN_440 = mux(r_btb_update_valid, T_1651, pad(pageValid, 8))
    node T_1653 = neq(hitsVec, UInt<40>("h0"))
    node T_1655 = bits(hitsVec, 0, 0)
    node T_1656 = bits(hitsVec, 1, 1)
    node T_1657 = bits(hitsVec, 2, 2)
    node T_1658 = bits(hitsVec, 3, 3)
    node T_1659 = bits(hitsVec, 4, 4)
    node T_1660 = bits(hitsVec, 5, 5)
    node T_1661 = bits(hitsVec, 6, 6)
    node T_1662 = bits(hitsVec, 7, 7)
    node T_1663 = bits(hitsVec, 8, 8)
    node T_1664 = bits(hitsVec, 9, 9)
    node T_1665 = bits(hitsVec, 10, 10)
    node T_1666 = bits(hitsVec, 11, 11)
    node T_1667 = bits(hitsVec, 12, 12)
    node T_1668 = bits(hitsVec, 13, 13)
    node T_1669 = bits(hitsVec, 14, 14)
    node T_1670 = bits(hitsVec, 15, 15)
    node T_1671 = bits(hitsVec, 16, 16)
    node T_1672 = bits(hitsVec, 17, 17)
    node T_1673 = bits(hitsVec, 18, 18)
    node T_1674 = bits(hitsVec, 19, 19)
    node T_1675 = bits(hitsVec, 20, 20)
    node T_1676 = bits(hitsVec, 21, 21)
    node T_1677 = bits(hitsVec, 22, 22)
    node T_1678 = bits(hitsVec, 23, 23)
    node T_1679 = bits(hitsVec, 24, 24)
    node T_1680 = bits(hitsVec, 25, 25)
    node T_1681 = bits(hitsVec, 26, 26)
    node T_1682 = bits(hitsVec, 27, 27)
    node T_1683 = bits(hitsVec, 28, 28)
    node T_1684 = bits(hitsVec, 29, 29)
    node T_1685 = bits(hitsVec, 30, 30)
    node T_1686 = bits(hitsVec, 31, 31)
    node T_1687 = bits(hitsVec, 32, 32)
    node T_1688 = bits(hitsVec, 33, 33)
    node T_1689 = bits(hitsVec, 34, 34)
    node T_1690 = bits(hitsVec, 35, 35)
    node T_1691 = bits(hitsVec, 36, 36)
    node T_1692 = bits(hitsVec, 37, 37)
    node T_1693 = bits(hitsVec, 38, 38)
    node T_1694 = bits(hitsVec, 39, 39)
    node T_1696 = mux(T_1655, tgtPagesOH_0, UInt<6>("h0"))
    node T_1698 = mux(T_1656, tgtPagesOH_1, UInt<6>("h0"))
    node T_1700 = mux(T_1657, tgtPagesOH_2, UInt<6>("h0"))
    node T_1702 = mux(T_1658, tgtPagesOH_3, UInt<6>("h0"))
    node T_1704 = mux(T_1659, tgtPagesOH_4, UInt<6>("h0"))
    node T_1706 = mux(T_1660, tgtPagesOH_5, UInt<6>("h0"))
    node T_1708 = mux(T_1661, tgtPagesOH_6, UInt<6>("h0"))
    node T_1710 = mux(T_1662, tgtPagesOH_7, UInt<6>("h0"))
    node T_1712 = mux(T_1663, tgtPagesOH_8, UInt<6>("h0"))
    node T_1714 = mux(T_1664, tgtPagesOH_9, UInt<6>("h0"))
    node T_1716 = mux(T_1665, tgtPagesOH_10, UInt<6>("h0"))
    node T_1718 = mux(T_1666, tgtPagesOH_11, UInt<6>("h0"))
    node T_1720 = mux(T_1667, tgtPagesOH_12, UInt<6>("h0"))
    node T_1722 = mux(T_1668, tgtPagesOH_13, UInt<6>("h0"))
    node T_1724 = mux(T_1669, tgtPagesOH_14, UInt<6>("h0"))
    node T_1726 = mux(T_1670, tgtPagesOH_15, UInt<6>("h0"))
    node T_1728 = mux(T_1671, tgtPagesOH_16, UInt<6>("h0"))
    node T_1730 = mux(T_1672, tgtPagesOH_17, UInt<6>("h0"))
    node T_1732 = mux(T_1673, tgtPagesOH_18, UInt<6>("h0"))
    node T_1734 = mux(T_1674, tgtPagesOH_19, UInt<6>("h0"))
    node T_1736 = mux(T_1675, tgtPagesOH_20, UInt<6>("h0"))
    node T_1738 = mux(T_1676, tgtPagesOH_21, UInt<6>("h0"))
    node T_1740 = mux(T_1677, tgtPagesOH_22, UInt<6>("h0"))
    node T_1742 = mux(T_1678, tgtPagesOH_23, UInt<6>("h0"))
    node T_1744 = mux(T_1679, tgtPagesOH_24, UInt<6>("h0"))
    node T_1746 = mux(T_1680, tgtPagesOH_25, UInt<6>("h0"))
    node T_1748 = mux(T_1681, tgtPagesOH_26, UInt<6>("h0"))
    node T_1750 = mux(T_1682, tgtPagesOH_27, UInt<6>("h0"))
    node T_1752 = mux(T_1683, tgtPagesOH_28, UInt<6>("h0"))
    node T_1754 = mux(T_1684, tgtPagesOH_29, UInt<6>("h0"))
    node T_1756 = mux(T_1685, tgtPagesOH_30, UInt<6>("h0"))
    node T_1758 = mux(T_1686, tgtPagesOH_31, UInt<6>("h0"))
    node T_1760 = mux(T_1687, tgtPagesOH_32, UInt<6>("h0"))
    node T_1762 = mux(T_1688, tgtPagesOH_33, UInt<6>("h0"))
    node T_1764 = mux(T_1689, tgtPagesOH_34, UInt<6>("h0"))
    node T_1766 = mux(T_1690, tgtPagesOH_35, UInt<6>("h0"))
    node T_1768 = mux(T_1691, tgtPagesOH_36, UInt<6>("h0"))
    node T_1770 = mux(T_1692, tgtPagesOH_37, UInt<6>("h0"))
    node T_1772 = mux(T_1693, tgtPagesOH_38, UInt<6>("h0"))
    node T_1774 = mux(T_1694, tgtPagesOH_39, UInt<6>("h0"))
    node T_1776 = or(T_1696, T_1698)
    node T_1777 = or(T_1776, T_1700)
    node T_1778 = or(T_1777, T_1702)
    node T_1779 = or(T_1778, T_1704)
    node T_1780 = or(T_1779, T_1706)
    node T_1781 = or(T_1780, T_1708)
    node T_1782 = or(T_1781, T_1710)
    node T_1783 = or(T_1782, T_1712)
    node T_1784 = or(T_1783, T_1714)
    node T_1785 = or(T_1784, T_1716)
    node T_1786 = or(T_1785, T_1718)
    node T_1787 = or(T_1786, T_1720)
    node T_1788 = or(T_1787, T_1722)
    node T_1789 = or(T_1788, T_1724)
    node T_1790 = or(T_1789, T_1726)
    node T_1791 = or(T_1790, T_1728)
    node T_1792 = or(T_1791, T_1730)
    node T_1793 = or(T_1792, T_1732)
    node T_1794 = or(T_1793, T_1734)
    node T_1795 = or(T_1794, T_1736)
    node T_1796 = or(T_1795, T_1738)
    node T_1797 = or(T_1796, T_1740)
    node T_1798 = or(T_1797, T_1742)
    node T_1799 = or(T_1798, T_1744)
    node T_1800 = or(T_1799, T_1746)
    node T_1801 = or(T_1800, T_1748)
    node T_1802 = or(T_1801, T_1750)
    node T_1803 = or(T_1802, T_1752)
    node T_1804 = or(T_1803, T_1754)
    node T_1805 = or(T_1804, T_1756)
    node T_1806 = or(T_1805, T_1758)
    node T_1807 = or(T_1806, T_1760)
    node T_1808 = or(T_1807, T_1762)
    node T_1809 = or(T_1808, T_1764)
    node T_1810 = or(T_1809, T_1766)
    node T_1811 = or(T_1810, T_1768)
    node T_1812 = or(T_1811, T_1770)
    node T_1813 = or(T_1812, T_1772)
    node T_1814 = or(T_1813, T_1774)
    wire T_1815 : UInt<6>
    node T_1816 = bits(T_1815, 0, 0)
    node T_1817 = bits(T_1815, 1, 1)
    node T_1818 = bits(T_1815, 2, 2)
    node T_1819 = bits(T_1815, 3, 3)
    node T_1820 = bits(T_1815, 4, 4)
    node T_1821 = bits(T_1815, 5, 5)
    node T_1823 = mux(T_1816, pages_0, UInt<27>("h0"))
    node T_1825 = mux(T_1817, pages_1, UInt<27>("h0"))
    node T_1827 = mux(T_1818, pages_2, UInt<27>("h0"))
    node T_1829 = mux(T_1819, pages_3, UInt<27>("h0"))
    node T_1831 = mux(T_1820, pages_4, UInt<27>("h0"))
    node T_1833 = mux(T_1821, pages_5, UInt<27>("h0"))
    node T_1835 = or(T_1823, T_1825)
    node T_1836 = or(T_1835, T_1827)
    node T_1837 = or(T_1836, T_1829)
    node T_1838 = or(T_1837, T_1831)
    node T_1839 = or(T_1838, T_1833)
    wire T_1840 : UInt<27>
    node T_1882 = mux(T_1655, tgts_0, UInt<11>("h0"))
    node T_1884 = mux(T_1656, tgts_1, UInt<11>("h0"))
    node T_1886 = mux(T_1657, tgts_2, UInt<11>("h0"))
    node T_1888 = mux(T_1658, tgts_3, UInt<11>("h0"))
    node T_1890 = mux(T_1659, tgts_4, UInt<11>("h0"))
    node T_1892 = mux(T_1660, tgts_5, UInt<11>("h0"))
    node T_1894 = mux(T_1661, tgts_6, UInt<11>("h0"))
    node T_1896 = mux(T_1662, tgts_7, UInt<11>("h0"))
    node T_1898 = mux(T_1663, tgts_8, UInt<11>("h0"))
    node T_1900 = mux(T_1664, tgts_9, UInt<11>("h0"))
    node T_1902 = mux(T_1665, tgts_10, UInt<11>("h0"))
    node T_1904 = mux(T_1666, tgts_11, UInt<11>("h0"))
    node T_1906 = mux(T_1667, tgts_12, UInt<11>("h0"))
    node T_1908 = mux(T_1668, tgts_13, UInt<11>("h0"))
    node T_1910 = mux(T_1669, tgts_14, UInt<11>("h0"))
    node T_1912 = mux(T_1670, tgts_15, UInt<11>("h0"))
    node T_1914 = mux(T_1671, tgts_16, UInt<11>("h0"))
    node T_1916 = mux(T_1672, tgts_17, UInt<11>("h0"))
    node T_1918 = mux(T_1673, tgts_18, UInt<11>("h0"))
    node T_1920 = mux(T_1674, tgts_19, UInt<11>("h0"))
    node T_1922 = mux(T_1675, tgts_20, UInt<11>("h0"))
    node T_1924 = mux(T_1676, tgts_21, UInt<11>("h0"))
    node T_1926 = mux(T_1677, tgts_22, UInt<11>("h0"))
    node T_1928 = mux(T_1678, tgts_23, UInt<11>("h0"))
    node T_1930 = mux(T_1679, tgts_24, UInt<11>("h0"))
    node T_1932 = mux(T_1680, tgts_25, UInt<11>("h0"))
    node T_1934 = mux(T_1681, tgts_26, UInt<11>("h0"))
    node T_1936 = mux(T_1682, tgts_27, UInt<11>("h0"))
    node T_1938 = mux(T_1683, tgts_28, UInt<11>("h0"))
    node T_1940 = mux(T_1684, tgts_29, UInt<11>("h0"))
    node T_1942 = mux(T_1685, tgts_30, UInt<11>("h0"))
    node T_1944 = mux(T_1686, tgts_31, UInt<11>("h0"))
    node T_1946 = mux(T_1687, tgts_32, UInt<11>("h0"))
    node T_1948 = mux(T_1688, tgts_33, UInt<11>("h0"))
    node T_1950 = mux(T_1689, tgts_34, UInt<11>("h0"))
    node T_1952 = mux(T_1690, tgts_35, UInt<11>("h0"))
    node T_1954 = mux(T_1691, tgts_36, UInt<11>("h0"))
    node T_1956 = mux(T_1692, tgts_37, UInt<11>("h0"))
    node T_1958 = mux(T_1693, tgts_38, UInt<11>("h0"))
    node T_1960 = mux(T_1694, tgts_39, UInt<11>("h0"))
    node T_1962 = or(T_1882, T_1884)
    node T_1963 = or(T_1962, T_1886)
    node T_1964 = or(T_1963, T_1888)
    node T_1965 = or(T_1964, T_1890)
    node T_1966 = or(T_1965, T_1892)
    node T_1967 = or(T_1966, T_1894)
    node T_1968 = or(T_1967, T_1896)
    node T_1969 = or(T_1968, T_1898)
    node T_1970 = or(T_1969, T_1900)
    node T_1971 = or(T_1970, T_1902)
    node T_1972 = or(T_1971, T_1904)
    node T_1973 = or(T_1972, T_1906)
    node T_1974 = or(T_1973, T_1908)
    node T_1975 = or(T_1974, T_1910)
    node T_1976 = or(T_1975, T_1912)
    node T_1977 = or(T_1976, T_1914)
    node T_1978 = or(T_1977, T_1916)
    node T_1979 = or(T_1978, T_1918)
    node T_1980 = or(T_1979, T_1920)
    node T_1981 = or(T_1980, T_1922)
    node T_1982 = or(T_1981, T_1924)
    node T_1983 = or(T_1982, T_1926)
    node T_1984 = or(T_1983, T_1928)
    node T_1985 = or(T_1984, T_1930)
    node T_1986 = or(T_1985, T_1932)
    node T_1987 = or(T_1986, T_1934)
    node T_1988 = or(T_1987, T_1936)
    node T_1989 = or(T_1988, T_1938)
    node T_1990 = or(T_1989, T_1940)
    node T_1991 = or(T_1990, T_1942)
    node T_1992 = or(T_1991, T_1944)
    node T_1993 = or(T_1992, T_1946)
    node T_1994 = or(T_1993, T_1948)
    node T_1995 = or(T_1994, T_1950)
    node T_1996 = or(T_1995, T_1952)
    node T_1997 = or(T_1996, T_1954)
    node T_1998 = or(T_1997, T_1956)
    node T_1999 = or(T_1998, T_1958)
    node T_2000 = or(T_1999, T_1960)
    wire T_2001 : UInt<11>
    node GEN_483 = pad(T_2001, 12)
    node T_2002 = shlw(GEN_483, 1)
    node T_2003 = cat(T_1840, T_2002)
    node T_2004 = bits(hitsVec, 39, 32)
    node T_2005 = bits(hitsVec, 31, 0)
    node T_2007 = neq(T_2004, UInt<8>("h0"))
    node GEN_484 = pad(T_2004, 32)
    node T_2008 = or(GEN_484, T_2005)
    node T_2009 = bits(T_2008, 31, 16)
    node T_2010 = bits(T_2008, 15, 0)
    node T_2012 = neq(T_2009, UInt<16>("h0"))
    node T_2013 = or(T_2009, T_2010)
    node T_2014 = bits(T_2013, 15, 8)
    node T_2015 = bits(T_2013, 7, 0)
    node T_2017 = neq(T_2014, UInt<8>("h0"))
    node T_2018 = or(T_2014, T_2015)
    node T_2019 = bits(T_2018, 7, 4)
    node T_2020 = bits(T_2018, 3, 0)
    node T_2022 = neq(T_2019, UInt<4>("h0"))
    node T_2023 = or(T_2019, T_2020)
    node T_2024 = bits(T_2023, 3, 2)
    node T_2025 = bits(T_2023, 1, 0)
    node T_2027 = neq(T_2024, UInt<2>("h0"))
    node T_2028 = or(T_2024, T_2025)
    node T_2029 = bits(T_2028, 1, 1)
    node T_2030 = cat(T_2027, T_2029)
    node T_2031 = cat(T_2022, T_2030)
    node T_2032 = cat(T_2017, T_2031)
    node T_2033 = cat(T_2012, T_2032)
    node T_2034 = cat(T_2007, T_2033)
    node T_2076 = mux(T_1655, brIdx_0, UInt<1>("h0"))
    node T_2078 = mux(T_1656, brIdx_1, UInt<1>("h0"))
    node T_2080 = mux(T_1657, brIdx_2, UInt<1>("h0"))
    node T_2082 = mux(T_1658, brIdx_3, UInt<1>("h0"))
    node T_2084 = mux(T_1659, brIdx_4, UInt<1>("h0"))
    node T_2086 = mux(T_1660, brIdx_5, UInt<1>("h0"))
    node T_2088 = mux(T_1661, brIdx_6, UInt<1>("h0"))
    node T_2090 = mux(T_1662, brIdx_7, UInt<1>("h0"))
    node T_2092 = mux(T_1663, brIdx_8, UInt<1>("h0"))
    node T_2094 = mux(T_1664, brIdx_9, UInt<1>("h0"))
    node T_2096 = mux(T_1665, brIdx_10, UInt<1>("h0"))
    node T_2098 = mux(T_1666, brIdx_11, UInt<1>("h0"))
    node T_2100 = mux(T_1667, brIdx_12, UInt<1>("h0"))
    node T_2102 = mux(T_1668, brIdx_13, UInt<1>("h0"))
    node T_2104 = mux(T_1669, brIdx_14, UInt<1>("h0"))
    node T_2106 = mux(T_1670, brIdx_15, UInt<1>("h0"))
    node T_2108 = mux(T_1671, brIdx_16, UInt<1>("h0"))
    node T_2110 = mux(T_1672, brIdx_17, UInt<1>("h0"))
    node T_2112 = mux(T_1673, brIdx_18, UInt<1>("h0"))
    node T_2114 = mux(T_1674, brIdx_19, UInt<1>("h0"))
    node T_2116 = mux(T_1675, brIdx_20, UInt<1>("h0"))
    node T_2118 = mux(T_1676, brIdx_21, UInt<1>("h0"))
    node T_2120 = mux(T_1677, brIdx_22, UInt<1>("h0"))
    node T_2122 = mux(T_1678, brIdx_23, UInt<1>("h0"))
    node T_2124 = mux(T_1679, brIdx_24, UInt<1>("h0"))
    node T_2126 = mux(T_1680, brIdx_25, UInt<1>("h0"))
    node T_2128 = mux(T_1681, brIdx_26, UInt<1>("h0"))
    node T_2130 = mux(T_1682, brIdx_27, UInt<1>("h0"))
    node T_2132 = mux(T_1683, brIdx_28, UInt<1>("h0"))
    node T_2134 = mux(T_1684, brIdx_29, UInt<1>("h0"))
    node T_2136 = mux(T_1685, brIdx_30, UInt<1>("h0"))
    node T_2138 = mux(T_1686, brIdx_31, UInt<1>("h0"))
    node T_2140 = mux(T_1687, brIdx_32, UInt<1>("h0"))
    node T_2142 = mux(T_1688, brIdx_33, UInt<1>("h0"))
    node T_2144 = mux(T_1689, brIdx_34, UInt<1>("h0"))
    node T_2146 = mux(T_1690, brIdx_35, UInt<1>("h0"))
    node T_2148 = mux(T_1691, brIdx_36, UInt<1>("h0"))
    node T_2150 = mux(T_1692, brIdx_37, UInt<1>("h0"))
    node T_2152 = mux(T_1693, brIdx_38, UInt<1>("h0"))
    node T_2154 = mux(T_1694, brIdx_39, UInt<1>("h0"))
    node T_2156 = or(T_2076, T_2078)
    node T_2157 = or(T_2156, T_2080)
    node T_2158 = or(T_2157, T_2082)
    node T_2159 = or(T_2158, T_2084)
    node T_2160 = or(T_2159, T_2086)
    node T_2161 = or(T_2160, T_2088)
    node T_2162 = or(T_2161, T_2090)
    node T_2163 = or(T_2162, T_2092)
    node T_2164 = or(T_2163, T_2094)
    node T_2165 = or(T_2164, T_2096)
    node T_2166 = or(T_2165, T_2098)
    node T_2167 = or(T_2166, T_2100)
    node T_2168 = or(T_2167, T_2102)
    node T_2169 = or(T_2168, T_2104)
    node T_2170 = or(T_2169, T_2106)
    node T_2171 = or(T_2170, T_2108)
    node T_2172 = or(T_2171, T_2110)
    node T_2173 = or(T_2172, T_2112)
    node T_2174 = or(T_2173, T_2114)
    node T_2175 = or(T_2174, T_2116)
    node T_2176 = or(T_2175, T_2118)
    node T_2177 = or(T_2176, T_2120)
    node T_2178 = or(T_2177, T_2122)
    node T_2179 = or(T_2178, T_2124)
    node T_2180 = or(T_2179, T_2126)
    node T_2181 = or(T_2180, T_2128)
    node T_2182 = or(T_2181, T_2130)
    node T_2183 = or(T_2182, T_2132)
    node T_2184 = or(T_2183, T_2134)
    node T_2185 = or(T_2184, T_2136)
    node T_2186 = or(T_2185, T_2138)
    node T_2187 = or(T_2186, T_2140)
    node T_2188 = or(T_2187, T_2142)
    node T_2189 = or(T_2188, T_2144)
    node T_2190 = or(T_2189, T_2146)
    node T_2191 = or(T_2190, T_2148)
    node T_2192 = or(T_2191, T_2150)
    node T_2193 = or(T_2192, T_2152)
    node T_2194 = or(T_2193, T_2154)
    wire T_2195 : UInt<1>
    node T_2197 = not(io_resp_bits_bridx)
    node T_2199 = mux(io_resp_bits_taken, T_2197, UInt<1>("h0"))
    node T_2200 = not(T_2199)
    node T_2201 = dshlw(UInt<2>("h1"), T_2200)
    node T_2203 = sub(T_2201, UInt<2>("h1"))
    node T_2204 = tail(T_2203, 1)
    node T_2206 = cat(T_2204, UInt<1>("h1"))
    mem T_2209 :
      data-type => UInt<2>
      depth => 128
      read-latency => 0
      write-latency => 1
      reader => T_2227
      writer => T_2234
      read-under-write => undefined
    node GEN_470 = bits(T_2226, 6, 0)
    T_2209.T_2227.en <= UInt<1>("h1")
    T_2209.T_2227.addr <= GEN_470
    node GEN_473 = bits(T_2233, 6, 0)
    T_2209.T_2234.en <= T_2231
    T_2209.T_2234.mask <= T_2231
    T_2209.T_2234.addr <= GEN_473
    T_2209.T_2234.data <= T_2243
    reg T_2211 : UInt<7>, clk with :
      reset => (UInt<1>("h0"), T_2211)
    node T_2212 = and(hitsVec, isJump)
    node T_2214 = neq(T_2212, UInt<40>("h0"))
    node T_2216 = eq(T_2214, UInt<1>("h0"))
    node T_2217 = and(io_req_valid, io_resp_valid)
    node T_2218 = and(T_2217, T_2216)
    wire T_2222_history : UInt<7>
    wire T_2222_value : UInt<2>
    node T_2225 = bits(io_req_bits_addr, 8, 1)
    node GEN_485 = pad(T_2211, 8)
    node T_2226 = xor(T_2225, GEN_485)
    node T_2228 = bits(T_2222_value, 0, 0)
    node T_2229 = bits(T_2211, 6, 1)
    node T_2230 = cat(T_2228, T_2229)
    node GEN_441 = mux(T_2218, T_2230, T_2211)
    node T_2231 = and(io_bht_update_valid, io_bht_update_bits_prediction_valid)
    node T_2232 = bits(io_bht_update_bits_pc, 8, 1)
    node GEN_486 = pad(io_bht_update_bits_prediction_bits_bht_history, 8)
    node T_2233 = xor(T_2232, GEN_486)
    node T_2235 = bits(io_bht_update_bits_prediction_bits_bht_value, 1, 1)
    node T_2236 = bits(io_bht_update_bits_prediction_bits_bht_value, 0, 0)
    node T_2237 = and(T_2235, T_2236)
    node T_2240 = or(T_2235, T_2236)
    node T_2241 = and(T_2240, io_bht_update_bits_taken)
    node T_2242 = or(T_2237, T_2241)
    node T_2243 = cat(io_bht_update_bits_taken, T_2242)
    node T_2244 = bits(io_bht_update_bits_prediction_bits_bht_history, 6, 1)
    node T_2245 = cat(io_bht_update_bits_taken, T_2244)
    node GEN_442 = mux(io_bht_update_bits_mispredict, T_2245, GEN_441)
    node GEN_447 = mux(T_2231, GEN_442, GEN_441)
    node T_2248 = eq(T_2228, UInt<1>("h0"))
    node T_2249 = and(T_2248, T_2216)
    node GEN_448 = mux(T_2249, UInt<1>("h0"), UInt<1>("h1"))
    reg T_2252 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_2252)
    reg T_2254 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_2254)
    reg T_2261_0 : UInt<39>, clk with :
      reset => (UInt<1>("h0"), T_2261_0)
    reg T_2261_1 : UInt<39>, clk with :
      reset => (UInt<1>("h0"), T_2261_1)
    node T_2263 = and(hitsVec, isReturn)
    node T_2265 = neq(T_2263, UInt<40>("h0"))
    node T_2267 = eq(T_2252, UInt<2>("h0"))
    node T_2269 = eq(T_2267, UInt<1>("h0"))
    node T_2270 = and(T_2269, T_2265)
    wire GEN_5 : UInt<39>
    node GEN_449 = mux(T_2254, T_2261_1, T_2261_0)
    node GEN_450 = mux(T_2270, GEN_5, T_2003)
    node T_2272 = lt(T_2252, UInt<2>("h2"))
    node T_2274 = add(T_2252, UInt<2>("h1"))
    node T_2275 = tail(T_2274, 1)
    node GEN_451 = mux(T_2272, T_2275, T_2252)
    node T_2281 = add(T_2254, UInt<1>("h1"))
    node T_2282 = tail(T_2281, 1)
    wire GEN_6 : UInt<39>
    node GEN_452 = mux(eq(UInt<1>("h0"), T_2282), GEN_6, T_2261_0)
    node GEN_453 = mux(T_2282, GEN_6, T_2261_1)
    node GEN_454 = mux(T_2265, io_ras_update_bits_returnAddr, GEN_450)
    node GEN_455 = mux(io_ras_update_bits_isCall, GEN_451, T_2252)
    node GEN_456 = mux(io_ras_update_bits_isCall, GEN_452, T_2261_0)
    node GEN_457 = mux(io_ras_update_bits_isCall, GEN_453, T_2261_1)
    node GEN_458 = mux(io_ras_update_bits_isCall, T_2282, T_2254)
    node GEN_459 = mux(io_ras_update_bits_isCall, GEN_454, GEN_450)
    node T_2285 = and(io_ras_update_bits_isReturn, io_ras_update_bits_prediction_valid)
    node T_2287 = eq(io_ras_update_bits_isCall, UInt<1>("h0"))
    node T_2288 = and(T_2287, T_2285)
    node T_2294 = sub(T_2252, UInt<2>("h1"))
    node T_2295 = tail(T_2294, 1)
    node T_2301 = sub(T_2254, UInt<1>("h1"))
    node T_2302 = tail(T_2301, 1)
    node GEN_460 = mux(T_2269, T_2295, GEN_455)
    node GEN_461 = mux(T_2269, T_2302, GEN_458)
    node GEN_462 = mux(T_2288, GEN_460, GEN_455)
    node GEN_463 = mux(T_2288, GEN_461, GEN_458)
    node GEN_464 = mux(io_ras_update_valid, GEN_462, T_2252)
    node GEN_465 = mux(io_ras_update_valid, GEN_456, T_2261_0)
    node GEN_466 = mux(io_ras_update_valid, GEN_457, T_2261_1)
    node GEN_467 = mux(io_ras_update_valid, GEN_463, T_2254)
    node GEN_468 = mux(io_ras_update_valid, GEN_459, GEN_450)
    io_resp_valid <= T_1653
    io_resp_bits_taken <= GEN_448
    io_resp_bits_mask <= bits(T_2206, 1, 0)
    io_resp_bits_bridx <= T_2195
    io_resp_bits_target <= GEN_468
    io_resp_bits_entry <= T_2034
    io_resp_bits_bht_history <= T_2222_history
    io_resp_bits_bht_value <= T_2222_value
    idxs_0 <= GEN_231
    idxs_1 <= GEN_232
    idxs_2 <= GEN_233
    idxs_3 <= GEN_234
    idxs_4 <= GEN_235
    idxs_5 <= GEN_236
    idxs_6 <= GEN_237
    idxs_7 <= GEN_238
    idxs_8 <= GEN_239
    idxs_9 <= GEN_240
    idxs_10 <= GEN_241
    idxs_11 <= GEN_242
    idxs_12 <= GEN_243
    idxs_13 <= GEN_244
    idxs_14 <= GEN_245
    idxs_15 <= GEN_246
    idxs_16 <= GEN_247
    idxs_17 <= GEN_248
    idxs_18 <= GEN_249
    idxs_19 <= GEN_250
    idxs_20 <= GEN_251
    idxs_21 <= GEN_252
    idxs_22 <= GEN_253
    idxs_23 <= GEN_254
    idxs_24 <= GEN_255
    idxs_25 <= GEN_256
    idxs_26 <= GEN_257
    idxs_27 <= GEN_258
    idxs_28 <= GEN_259
    idxs_29 <= GEN_260
    idxs_30 <= GEN_261
    idxs_31 <= GEN_262
    idxs_32 <= GEN_263
    idxs_33 <= GEN_264
    idxs_34 <= GEN_265
    idxs_35 <= GEN_266
    idxs_36 <= GEN_267
    idxs_37 <= GEN_268
    idxs_38 <= GEN_269
    idxs_39 <= GEN_270
    idxPages_0 <= GEN_311
    idxPages_1 <= GEN_312
    idxPages_2 <= GEN_313
    idxPages_3 <= GEN_314
    idxPages_4 <= GEN_315
    idxPages_5 <= GEN_316
    idxPages_6 <= GEN_317
    idxPages_7 <= GEN_318
    idxPages_8 <= GEN_319
    idxPages_9 <= GEN_320
    idxPages_10 <= GEN_321
    idxPages_11 <= GEN_322
    idxPages_12 <= GEN_323
    idxPages_13 <= GEN_324
    idxPages_14 <= GEN_325
    idxPages_15 <= GEN_326
    idxPages_16 <= GEN_327
    idxPages_17 <= GEN_328
    idxPages_18 <= GEN_329
    idxPages_19 <= GEN_330
    idxPages_20 <= GEN_331
    idxPages_21 <= GEN_332
    idxPages_22 <= GEN_333
    idxPages_23 <= GEN_334
    idxPages_24 <= GEN_335
    idxPages_25 <= GEN_336
    idxPages_26 <= GEN_337
    idxPages_27 <= GEN_338
    idxPages_28 <= GEN_339
    idxPages_29 <= GEN_340
    idxPages_30 <= GEN_341
    idxPages_31 <= GEN_342
    idxPages_32 <= GEN_343
    idxPages_33 <= GEN_344
    idxPages_34 <= GEN_345
    idxPages_35 <= GEN_346
    idxPages_36 <= GEN_347
    idxPages_37 <= GEN_348
    idxPages_38 <= GEN_349
    idxPages_39 <= GEN_350
    tgts_0 <= GEN_271
    tgts_1 <= GEN_272
    tgts_2 <= GEN_273
    tgts_3 <= GEN_274
    tgts_4 <= GEN_275
    tgts_5 <= GEN_276
    tgts_6 <= GEN_277
    tgts_7 <= GEN_278
    tgts_8 <= GEN_279
    tgts_9 <= GEN_280
    tgts_10 <= GEN_281
    tgts_11 <= GEN_282
    tgts_12 <= GEN_283
    tgts_13 <= GEN_284
    tgts_14 <= GEN_285
    tgts_15 <= GEN_286
    tgts_16 <= GEN_287
    tgts_17 <= GEN_288
    tgts_18 <= GEN_289
    tgts_19 <= GEN_290
    tgts_20 <= GEN_291
    tgts_21 <= GEN_292
    tgts_22 <= GEN_293
    tgts_23 <= GEN_294
    tgts_24 <= GEN_295
    tgts_25 <= GEN_296
    tgts_26 <= GEN_297
    tgts_27 <= GEN_298
    tgts_28 <= GEN_299
    tgts_29 <= GEN_300
    tgts_30 <= GEN_301
    tgts_31 <= GEN_302
    tgts_32 <= GEN_303
    tgts_33 <= GEN_304
    tgts_34 <= GEN_305
    tgts_35 <= GEN_306
    tgts_36 <= GEN_307
    tgts_37 <= GEN_308
    tgts_38 <= GEN_309
    tgts_39 <= GEN_310
    tgtPages_0 <= GEN_351
    tgtPages_1 <= GEN_352
    tgtPages_2 <= GEN_353
    tgtPages_3 <= GEN_354
    tgtPages_4 <= GEN_355
    tgtPages_5 <= GEN_356
    tgtPages_6 <= GEN_357
    tgtPages_7 <= GEN_358
    tgtPages_8 <= GEN_359
    tgtPages_9 <= GEN_360
    tgtPages_10 <= GEN_361
    tgtPages_11 <= GEN_362
    tgtPages_12 <= GEN_363
    tgtPages_13 <= GEN_364
    tgtPages_14 <= GEN_365
    tgtPages_15 <= GEN_366
    tgtPages_16 <= GEN_367
    tgtPages_17 <= GEN_368
    tgtPages_18 <= GEN_369
    tgtPages_19 <= GEN_370
    tgtPages_20 <= GEN_371
    tgtPages_21 <= GEN_372
    tgtPages_22 <= GEN_373
    tgtPages_23 <= GEN_374
    tgtPages_24 <= GEN_375
    tgtPages_25 <= GEN_376
    tgtPages_26 <= GEN_377
    tgtPages_27 <= GEN_378
    tgtPages_28 <= GEN_379
    tgtPages_29 <= GEN_380
    tgtPages_30 <= GEN_381
    tgtPages_31 <= GEN_382
    tgtPages_32 <= GEN_383
    tgtPages_33 <= GEN_384
    tgtPages_34 <= GEN_385
    tgtPages_35 <= GEN_386
    tgtPages_36 <= GEN_387
    tgtPages_37 <= GEN_388
    tgtPages_38 <= GEN_389
    tgtPages_39 <= GEN_390
    pages_0 <= GEN_434
    pages_1 <= GEN_437
    pages_2 <= GEN_435
    pages_3 <= GEN_438
    pages_4 <= GEN_436
    pages_5 <= GEN_439
    pageValid <= bits(GEN_440, 5, 0)
    isValid <= bits(GEN_391, 39, 0)
    isReturn <= bits(GEN_392, 39, 0)
    isJump <= bits(GEN_393, 39, 0)
    brIdx_0 <= GEN_394
    brIdx_1 <= GEN_395
    brIdx_2 <= GEN_396
    brIdx_3 <= GEN_397
    brIdx_4 <= GEN_398
    brIdx_5 <= GEN_399
    brIdx_6 <= GEN_400
    brIdx_7 <= GEN_401
    brIdx_8 <= GEN_402
    brIdx_9 <= GEN_403
    brIdx_10 <= GEN_404
    brIdx_11 <= GEN_405
    brIdx_12 <= GEN_406
    brIdx_13 <= GEN_407
    brIdx_14 <= GEN_408
    brIdx_15 <= GEN_409
    brIdx_16 <= GEN_410
    brIdx_17 <= GEN_411
    brIdx_18 <= GEN_412
    brIdx_19 <= GEN_413
    brIdx_20 <= GEN_414
    brIdx_21 <= GEN_415
    brIdx_22 <= GEN_416
    brIdx_23 <= GEN_417
    brIdx_24 <= GEN_418
    brIdx_25 <= GEN_419
    brIdx_26 <= GEN_420
    brIdx_27 <= GEN_421
    brIdx_28 <= GEN_422
    brIdx_29 <= GEN_423
    brIdx_30 <= GEN_424
    brIdx_31 <= GEN_425
    brIdx_32 <= GEN_426
    brIdx_33 <= GEN_427
    brIdx_34 <= GEN_428
    brIdx_35 <= GEN_429
    brIdx_36 <= GEN_430
    brIdx_37 <= GEN_431
    brIdx_38 <= GEN_432
    brIdx_39 <= GEN_433
    T_777 <= io_btb_update_valid
    T_778_prediction_valid <= GEN_7
    T_778_prediction_bits_taken <= GEN_8
    T_778_prediction_bits_mask <= GEN_9
    T_778_prediction_bits_bridx <= GEN_10
    T_778_prediction_bits_target <= GEN_11
    T_778_prediction_bits_entry <= GEN_12
    T_778_prediction_bits_bht_history <= GEN_13
    T_778_prediction_bits_bht_value <= GEN_14
    T_778_pc <= GEN_15
    T_778_target <= GEN_16
    T_778_taken <= GEN_17
    T_778_isValid <= GEN_18
    T_778_isJump <= GEN_19
    T_778_isReturn <= GEN_20
    T_778_br_pc <= GEN_21
    r_btb_update_valid <= T_777
    r_btb_update_bits_prediction_valid <= T_778_prediction_valid
    r_btb_update_bits_prediction_bits_taken <= T_778_prediction_bits_taken
    r_btb_update_bits_prediction_bits_mask <= T_778_prediction_bits_mask
    r_btb_update_bits_prediction_bits_bridx <= T_778_prediction_bits_bridx
    r_btb_update_bits_prediction_bits_target <= T_778_prediction_bits_target
    r_btb_update_bits_prediction_bits_entry <= T_778_prediction_bits_entry
    r_btb_update_bits_prediction_bits_bht_history <= T_778_prediction_bits_bht_history
    r_btb_update_bits_prediction_bits_bht_value <= T_778_prediction_bits_bht_value
    r_btb_update_bits_pc <= T_778_pc
    r_btb_update_bits_target <= T_778_target
    r_btb_update_bits_taken <= T_778_taken
    r_btb_update_bits_isValid <= T_778_isValid
    r_btb_update_bits_isJump <= T_778_isJump
    r_btb_update_bits_isReturn <= T_778_isReturn
    r_btb_update_bits_br_pc <= T_778_br_pc
    nextRepl <= GEN_23
    nextPageRepl <= GEN_24
    GEN_0 <= T_1267
    GEN_1 <= T_976
    GEN_2 <= idxPageUpdate
    GEN_3 <= tgtPageUpdate
    GEN_4 <= bits(T_1632, 0, 0)
    T_1815 <= T_1814
    T_1840 <= T_1839
    T_2001 <= T_2000
    T_2195 <= T_2194
    T_2211 <= GEN_447
    T_2222_history <= T_2211
    T_2222_value <= T_2209.T_2227.data
    T_2252 <= GEN_464
    T_2254 <= GEN_467
    T_2261_0 <= GEN_465
    T_2261_1 <= GEN_466
    GEN_5 <= GEN_449
    GEN_6 <= io_ras_update_bits_returnAddr

  module Frontend :
    input clk : Clock
    input reset : UInt<1>
    input io_cpu_req_valid : UInt<1>
    input io_cpu_req_bits_pc : UInt<40>
    input io_cpu_req_bits_speculative : UInt<1>
    input io_cpu_resp_ready : UInt<1>
    output io_cpu_resp_valid : UInt<1>
    output io_cpu_resp_bits_btb_valid : UInt<1>
    output io_cpu_resp_bits_btb_bits_taken : UInt<1>
    output io_cpu_resp_bits_btb_bits_mask : UInt<2>
    output io_cpu_resp_bits_btb_bits_bridx : UInt<1>
    output io_cpu_resp_bits_btb_bits_target : UInt<39>
    output io_cpu_resp_bits_btb_bits_entry : UInt<6>
    output io_cpu_resp_bits_btb_bits_bht_history : UInt<7>
    output io_cpu_resp_bits_btb_bits_bht_value : UInt<2>
    output io_cpu_resp_bits_pc : UInt<40>
    output io_cpu_resp_bits_data : UInt<32>
    output io_cpu_resp_bits_mask : UInt<2>
    output io_cpu_resp_bits_xcpt_if : UInt<1>
    output io_cpu_resp_bits_replay : UInt<1>
    input io_cpu_btb_update_valid : UInt<1>
    input io_cpu_btb_update_bits_prediction_valid : UInt<1>
    input io_cpu_btb_update_bits_prediction_bits_taken : UInt<1>
    input io_cpu_btb_update_bits_prediction_bits_mask : UInt<2>
    input io_cpu_btb_update_bits_prediction_bits_bridx : UInt<1>
    input io_cpu_btb_update_bits_prediction_bits_target : UInt<39>
    input io_cpu_btb_update_bits_prediction_bits_entry : UInt<6>
    input io_cpu_btb_update_bits_prediction_bits_bht_history : UInt<7>
    input io_cpu_btb_update_bits_prediction_bits_bht_value : UInt<2>
    input io_cpu_btb_update_bits_pc : UInt<39>
    input io_cpu_btb_update_bits_target : UInt<39>
    input io_cpu_btb_update_bits_taken : UInt<1>
    input io_cpu_btb_update_bits_isValid : UInt<1>
    input io_cpu_btb_update_bits_isJump : UInt<1>
    input io_cpu_btb_update_bits_isReturn : UInt<1>
    input io_cpu_btb_update_bits_br_pc : UInt<39>
    input io_cpu_bht_update_valid : UInt<1>
    input io_cpu_bht_update_bits_prediction_valid : UInt<1>
    input io_cpu_bht_update_bits_prediction_bits_taken : UInt<1>
    input io_cpu_bht_update_bits_prediction_bits_mask : UInt<2>
    input io_cpu_bht_update_bits_prediction_bits_bridx : UInt<1>
    input io_cpu_bht_update_bits_prediction_bits_target : UInt<39>
    input io_cpu_bht_update_bits_prediction_bits_entry : UInt<6>
    input io_cpu_bht_update_bits_prediction_bits_bht_history : UInt<7>
    input io_cpu_bht_update_bits_prediction_bits_bht_value : UInt<2>
    input io_cpu_bht_update_bits_pc : UInt<39>
    input io_cpu_bht_update_bits_taken : UInt<1>
    input io_cpu_bht_update_bits_mispredict : UInt<1>
    input io_cpu_ras_update_valid : UInt<1>
    input io_cpu_ras_update_bits_isCall : UInt<1>
    input io_cpu_ras_update_bits_isReturn : UInt<1>
    input io_cpu_ras_update_bits_returnAddr : UInt<39>
    input io_cpu_ras_update_bits_prediction_valid : UInt<1>
    input io_cpu_ras_update_bits_prediction_bits_taken : UInt<1>
    input io_cpu_ras_update_bits_prediction_bits_mask : UInt<2>
    input io_cpu_ras_update_bits_prediction_bits_bridx : UInt<1>
    input io_cpu_ras_update_bits_prediction_bits_target : UInt<39>
    input io_cpu_ras_update_bits_prediction_bits_entry : UInt<6>
    input io_cpu_ras_update_bits_prediction_bits_bht_history : UInt<7>
    input io_cpu_ras_update_bits_prediction_bits_bht_value : UInt<2>
    input io_cpu_flush_icache : UInt<1>
    input io_cpu_flush_tlb : UInt<1>
    output io_cpu_npc : UInt<40>
    input io_ptw_req_ready : UInt<1>
    output io_ptw_req_valid : UInt<1>
    output io_ptw_req_bits_prv : UInt<2>
    output io_ptw_req_bits_pum : UInt<1>
    output io_ptw_req_bits_mxr : UInt<1>
    output io_ptw_req_bits_addr : UInt<27>
    output io_ptw_req_bits_store : UInt<1>
    output io_ptw_req_bits_fetch : UInt<1>
    input io_ptw_resp_valid : UInt<1>
    input io_ptw_resp_bits_pte_reserved_for_hardware : UInt<16>
    input io_ptw_resp_bits_pte_ppn : UInt<38>
    input io_ptw_resp_bits_pte_reserved_for_software : UInt<2>
    input io_ptw_resp_bits_pte_d : UInt<1>
    input io_ptw_resp_bits_pte_a : UInt<1>
    input io_ptw_resp_bits_pte_g : UInt<1>
    input io_ptw_resp_bits_pte_u : UInt<1>
    input io_ptw_resp_bits_pte_x : UInt<1>
    input io_ptw_resp_bits_pte_w : UInt<1>
    input io_ptw_resp_bits_pte_r : UInt<1>
    input io_ptw_resp_bits_pte_v : UInt<1>
    input io_ptw_ptbr_asid : UInt<7>
    input io_ptw_ptbr_ppn : UInt<38>
    input io_ptw_invalidate : UInt<1>
    input io_ptw_status_debug : UInt<1>
    input io_ptw_status_isa : UInt<32>
    input io_ptw_status_prv : UInt<2>
    input io_ptw_status_sd : UInt<1>
    input io_ptw_status_zero3 : UInt<31>
    input io_ptw_status_sd_rv32 : UInt<1>
    input io_ptw_status_zero2 : UInt<2>
    input io_ptw_status_vm : UInt<5>
    input io_ptw_status_zero1 : UInt<4>
    input io_ptw_status_mxr : UInt<1>
    input io_ptw_status_pum : UInt<1>
    input io_ptw_status_mprv : UInt<1>
    input io_ptw_status_xs : UInt<2>
    input io_ptw_status_fs : UInt<2>
    input io_ptw_status_mpp : UInt<2>
    input io_ptw_status_hpp : UInt<2>
    input io_ptw_status_spp : UInt<1>
    input io_ptw_status_mpie : UInt<1>
    input io_ptw_status_hpie : UInt<1>
    input io_ptw_status_spie : UInt<1>
    input io_ptw_status_upie : UInt<1>
    input io_ptw_status_mie : UInt<1>
    input io_ptw_status_hie : UInt<1>
    input io_ptw_status_sie : UInt<1>
    input io_ptw_status_uie : UInt<1>
    input io_mem_acquire_ready : UInt<1>
    output io_mem_acquire_valid : UInt<1>
    output io_mem_acquire_bits_addr_block : UInt<26>
    output io_mem_acquire_bits_client_xact_id : UInt<1>
    output io_mem_acquire_bits_addr_beat : UInt<3>
    output io_mem_acquire_bits_is_builtin_type : UInt<1>
    output io_mem_acquire_bits_a_type : UInt<3>
    output io_mem_acquire_bits_union : UInt<11>
    output io_mem_acquire_bits_data : UInt<64>
    output io_mem_grant_ready : UInt<1>
    input io_mem_grant_valid : UInt<1>
    input io_mem_grant_bits_addr_beat : UInt<3>
    input io_mem_grant_bits_client_xact_id : UInt<1>
    input io_mem_grant_bits_manager_xact_id : UInt<4>
    input io_mem_grant_bits_is_builtin_type : UInt<1>
    input io_mem_grant_bits_g_type : UInt<4>
    input io_mem_grant_bits_data : UInt<64>
  
    inst icache of ICache
    inst tlb of TLB
    reg s1_pc_ : UInt<40>, clk with :
      reset => (UInt<1>("h0"), s1_pc_)
    node T_1485 = not(s1_pc_)
    node T_1487 = or(T_1485, UInt<40>("h1"))
    node s1_pc = not(T_1487)
    reg s1_speculative : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s1_speculative)
    reg s1_same_block : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s1_same_block)
    reg s2_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg s2_pc : UInt<40>, clk with :
      reset => (reset, UInt<40>("h1000"))
    reg s2_btb_resp_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg s2_btb_resp_bits_taken : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s2_btb_resp_bits_taken)
    reg s2_btb_resp_bits_mask : UInt<2>, clk with :
      reset => (UInt<1>("h0"), s2_btb_resp_bits_mask)
    reg s2_btb_resp_bits_bridx : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s2_btb_resp_bits_bridx)
    reg s2_btb_resp_bits_target : UInt<39>, clk with :
      reset => (UInt<1>("h0"), s2_btb_resp_bits_target)
    reg s2_btb_resp_bits_entry : UInt<6>, clk with :
      reset => (UInt<1>("h0"), s2_btb_resp_bits_entry)
    reg s2_btb_resp_bits_bht_history : UInt<7>, clk with :
      reset => (UInt<1>("h0"), s2_btb_resp_bits_bht_history)
    reg s2_btb_resp_bits_bht_value : UInt<2>, clk with :
      reset => (UInt<1>("h0"), s2_btb_resp_bits_bht_value)
    reg s2_xcpt_if : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg s2_speculative : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg s2_cacheable : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_1513 = not(s1_pc)
    node T_1515 = or(T_1513, UInt<40>("h3"))
    node T_1516 = not(T_1515)
    node T_1518 = add(T_1516, UInt<40>("h4"))
    node ntpc = tail(T_1518, 1)
    node T_1520 = and(ntpc, UInt<40>("h8"))
    node T_1522 = and(s1_pc, UInt<40>("h8"))
    node ntpc_same_block = eq(T_1520, T_1522)
    wire predicted_npc : UInt<40>
    wire predicted_taken : UInt<1>
    node T_1525 = eq(icache.io_resp_valid, UInt<1>("h0"))
    node icmiss = and(s2_valid, T_1525)
    node npc = mux(icmiss, s2_pc, predicted_npc)
    node T_1527 = eq(predicted_taken, UInt<1>("h0"))
    node T_1529 = eq(icmiss, UInt<1>("h0"))
    node T_1530 = and(T_1527, T_1529)
    node T_1532 = eq(io_cpu_req_valid, UInt<1>("h0"))
    node T_1533 = and(T_1530, T_1532)
    node s0_same_block = and(T_1533, ntpc_same_block)
    node T_1535 = eq(io_cpu_resp_ready, UInt<1>("h0"))
    node stall = and(io_cpu_resp_valid, T_1535)
    node T_1537 = eq(stall, UInt<1>("h0"))
    node T_1539 = eq(tlb.io_resp_miss, UInt<1>("h0"))
    node T_1540 = and(s0_same_block, T_1539)
    node T_1542 = eq(s2_speculative, UInt<1>("h0"))
    node T_1543 = and(s2_valid, T_1542)
    node T_1544 = or(s1_speculative, T_1543)
    node T_1545 = or(T_1544, predicted_taken)
    node T_1546 = mux(icmiss, s2_speculative, T_1545)
    node GEN_0 = mux(T_1529, s1_pc, s2_pc)
    node GEN_1 = mux(T_1529, s1_speculative, s2_speculative)
    node GEN_2 = mux(T_1529, tlb.io_resp_cacheable, s2_cacheable)
    node GEN_3 = mux(T_1529, tlb.io_resp_xcpt_if, s2_xcpt_if)
    node GEN_4 = mux(T_1537, T_1540, s1_same_block)
    node GEN_5 = mux(T_1537, io_cpu_npc, s1_pc_)
    node GEN_6 = mux(T_1537, T_1546, s1_speculative)
    node GEN_7 = mux(T_1537, T_1529, s2_valid)
    node GEN_8 = mux(T_1537, GEN_0, s2_pc)
    node GEN_9 = mux(T_1537, GEN_1, s2_speculative)
    node GEN_10 = mux(T_1537, GEN_2, s2_cacheable)
    node GEN_11 = mux(T_1537, GEN_3, s2_xcpt_if)
    node GEN_12 = mux(io_cpu_req_valid, UInt<1>("h0"), GEN_4)
    node GEN_13 = mux(io_cpu_req_valid, io_cpu_npc, GEN_5)
    node GEN_14 = mux(io_cpu_req_valid, io_cpu_req_bits_speculative, GEN_6)
    node GEN_15 = mux(io_cpu_req_valid, UInt<1>("h0"), GEN_7)
    inst BTB_1 of BTB
    node T_1558 = and(T_1537, T_1529)
    node GEN_17 = mux(T_1558, BTB_1.io_resp_valid, s2_btb_resp_valid)
    node GEN_18 = mux(T_1558, BTB_1.io_resp_bits_taken, s2_btb_resp_bits_taken)
    node GEN_19 = mux(T_1558, BTB_1.io_resp_bits_mask, s2_btb_resp_bits_mask)
    node GEN_20 = mux(T_1558, BTB_1.io_resp_bits_bridx, s2_btb_resp_bits_bridx)
    node GEN_21 = mux(T_1558, BTB_1.io_resp_bits_target, s2_btb_resp_bits_target)
    node GEN_22 = mux(T_1558, BTB_1.io_resp_bits_entry, s2_btb_resp_bits_entry)
    node GEN_23 = mux(T_1558, BTB_1.io_resp_bits_bht_history, s2_btb_resp_bits_bht_history)
    node GEN_24 = mux(T_1558, BTB_1.io_resp_bits_bht_value, s2_btb_resp_bits_bht_value)
    node T_1560 = and(BTB_1.io_resp_valid, BTB_1.io_resp_bits_taken)
    node T_1561 = bits(BTB_1.io_resp_bits_target, 38, 38)
    node T_1562 = cat(T_1561, BTB_1.io_resp_bits_target)
    node GEN_25 = mux(T_1560, T_1562, ntpc)
    node T_1569 = shr(s1_pc, 12)
    node T_1576 = eq(s0_same_block, UInt<1>("h0"))
    node T_1577 = and(T_1537, T_1576)
    node T_1578 = or(io_cpu_req_valid, tlb.io_resp_miss)
    node T_1579 = or(T_1578, tlb.io_resp_xcpt_if)
    node T_1580 = or(T_1579, icmiss)
    node T_1581 = or(T_1580, io_cpu_flush_tlb)
    node T_1583 = eq(s2_cacheable, UInt<1>("h0"))
    node T_1584 = and(s2_speculative, T_1583)
    node T_1588 = eq(s1_same_block, UInt<1>("h0"))
    node T_1589 = and(T_1537, T_1588)
    node T_1590 = or(icache.io_resp_valid, icache.io_s2_kill)
    node T_1591 = or(T_1590, s2_xcpt_if)
    node T_1592 = and(s2_valid, T_1591)
    node T_1593 = mux(io_cpu_req_valid, io_cpu_req_bits_pc, npc)
    node T_1594 = bits(s2_pc, 2, 2)
    node GEN_27 = pad(T_1594, 6)
    node T_1595 = shlw(GEN_27, 5)
    node T_1596 = dshr(icache.io_resp_bits_datablock, T_1595)
    node T_1598 = bits(s2_pc, 1, 1)
    node T_1599 = dshlw(UInt<3>("h3"), T_1598)
    node T_1602 = and(icache.io_s2_kill, T_1525)
    node T_1604 = eq(s2_xcpt_if, UInt<1>("h0"))
    node T_1605 = and(T_1602, T_1604)
    io_cpu_resp_valid <= T_1592
    io_cpu_resp_bits_btb_valid <= s2_btb_resp_valid
    io_cpu_resp_bits_btb_bits_taken <= s2_btb_resp_bits_taken
    io_cpu_resp_bits_btb_bits_mask <= s2_btb_resp_bits_mask
    io_cpu_resp_bits_btb_bits_bridx <= s2_btb_resp_bits_bridx
    io_cpu_resp_bits_btb_bits_target <= s2_btb_resp_bits_target
    io_cpu_resp_bits_btb_bits_entry <= s2_btb_resp_bits_entry
    io_cpu_resp_bits_btb_bits_bht_history <= s2_btb_resp_bits_bht_history
    io_cpu_resp_bits_btb_bits_bht_value <= s2_btb_resp_bits_bht_value
    io_cpu_resp_bits_pc <= s2_pc
    io_cpu_resp_bits_data <= bits(T_1596, 31, 0)
    io_cpu_resp_bits_mask <= bits(T_1599, 1, 0)
    io_cpu_resp_bits_xcpt_if <= s2_xcpt_if
    io_cpu_resp_bits_replay <= T_1605
    io_cpu_npc <= T_1593
    io_ptw_req_valid <= tlb.io_ptw_req_valid
    io_ptw_req_bits_prv <= tlb.io_ptw_req_bits_prv
    io_ptw_req_bits_pum <= tlb.io_ptw_req_bits_pum
    io_ptw_req_bits_mxr <= tlb.io_ptw_req_bits_mxr
    io_ptw_req_bits_addr <= tlb.io_ptw_req_bits_addr
    io_ptw_req_bits_store <= tlb.io_ptw_req_bits_store
    io_ptw_req_bits_fetch <= tlb.io_ptw_req_bits_fetch
    io_mem_acquire_valid <= icache.io_mem_acquire_valid
    io_mem_acquire_bits_addr_block <= icache.io_mem_acquire_bits_addr_block
    io_mem_acquire_bits_client_xact_id <= icache.io_mem_acquire_bits_client_xact_id
    io_mem_acquire_bits_addr_beat <= icache.io_mem_acquire_bits_addr_beat
    io_mem_acquire_bits_is_builtin_type <= icache.io_mem_acquire_bits_is_builtin_type
    io_mem_acquire_bits_a_type <= icache.io_mem_acquire_bits_a_type
    io_mem_acquire_bits_union <= icache.io_mem_acquire_bits_union
    io_mem_acquire_bits_data <= icache.io_mem_acquire_bits_data
    io_mem_grant_ready <= icache.io_mem_grant_ready
    icache.io_req_valid <= T_1577
    icache.io_req_bits_addr <= bits(io_cpu_npc, 38, 0)
    icache.io_s1_ppn <= tlb.io_resp_ppn
    icache.io_s1_kill <= T_1581
    icache.io_s2_kill <= T_1584
    icache.io_resp_ready <= T_1589
    icache.io_invalidate <= io_cpu_flush_icache
    icache.io_mem_acquire_ready <= io_mem_acquire_ready
    icache.io_mem_grant_valid <= io_mem_grant_valid
    icache.io_mem_grant_bits_addr_beat <= io_mem_grant_bits_addr_beat
    icache.io_mem_grant_bits_client_xact_id <= io_mem_grant_bits_client_xact_id
    icache.io_mem_grant_bits_manager_xact_id <= io_mem_grant_bits_manager_xact_id
    icache.io_mem_grant_bits_is_builtin_type <= io_mem_grant_bits_is_builtin_type
    icache.io_mem_grant_bits_g_type <= io_mem_grant_bits_g_type
    icache.io_mem_grant_bits_data <= io_mem_grant_bits_data
    tlb.io_req_valid <= T_1558
    tlb.io_req_bits_vpn <= T_1569
    tlb.io_req_bits_passthrough <= UInt<1>("h0")
    tlb.io_req_bits_instruction <= UInt<1>("h1")
    tlb.io_req_bits_store <= UInt<1>("h0")
    tlb.io_ptw_req_ready <= io_ptw_req_ready
    tlb.io_ptw_resp_valid <= io_ptw_resp_valid
    tlb.io_ptw_resp_bits_pte_reserved_for_hardware <= io_ptw_resp_bits_pte_reserved_for_hardware
    tlb.io_ptw_resp_bits_pte_ppn <= io_ptw_resp_bits_pte_ppn
    tlb.io_ptw_resp_bits_pte_reserved_for_software <= io_ptw_resp_bits_pte_reserved_for_software
    tlb.io_ptw_resp_bits_pte_d <= io_ptw_resp_bits_pte_d
    tlb.io_ptw_resp_bits_pte_a <= io_ptw_resp_bits_pte_a
    tlb.io_ptw_resp_bits_pte_g <= io_ptw_resp_bits_pte_g
    tlb.io_ptw_resp_bits_pte_u <= io_ptw_resp_bits_pte_u
    tlb.io_ptw_resp_bits_pte_x <= io_ptw_resp_bits_pte_x
    tlb.io_ptw_resp_bits_pte_w <= io_ptw_resp_bits_pte_w
    tlb.io_ptw_resp_bits_pte_r <= io_ptw_resp_bits_pte_r
    tlb.io_ptw_resp_bits_pte_v <= io_ptw_resp_bits_pte_v
    tlb.io_ptw_ptbr_asid <= io_ptw_ptbr_asid
    tlb.io_ptw_ptbr_ppn <= io_ptw_ptbr_ppn
    tlb.io_ptw_invalidate <= io_ptw_invalidate
    tlb.io_ptw_status_debug <= io_ptw_status_debug
    tlb.io_ptw_status_isa <= io_ptw_status_isa
    tlb.io_ptw_status_prv <= io_ptw_status_prv
    tlb.io_ptw_status_sd <= io_ptw_status_sd
    tlb.io_ptw_status_zero3 <= io_ptw_status_zero3
    tlb.io_ptw_status_sd_rv32 <= io_ptw_status_sd_rv32
    tlb.io_ptw_status_zero2 <= io_ptw_status_zero2
    tlb.io_ptw_status_vm <= io_ptw_status_vm
    tlb.io_ptw_status_zero1 <= io_ptw_status_zero1
    tlb.io_ptw_status_mxr <= io_ptw_status_mxr
    tlb.io_ptw_status_pum <= io_ptw_status_pum
    tlb.io_ptw_status_mprv <= io_ptw_status_mprv
    tlb.io_ptw_status_xs <= io_ptw_status_xs
    tlb.io_ptw_status_fs <= io_ptw_status_fs
    tlb.io_ptw_status_mpp <= io_ptw_status_mpp
    tlb.io_ptw_status_hpp <= io_ptw_status_hpp
    tlb.io_ptw_status_spp <= io_ptw_status_spp
    tlb.io_ptw_status_mpie <= io_ptw_status_mpie
    tlb.io_ptw_status_hpie <= io_ptw_status_hpie
    tlb.io_ptw_status_spie <= io_ptw_status_spie
    tlb.io_ptw_status_upie <= io_ptw_status_upie
    tlb.io_ptw_status_mie <= io_ptw_status_mie
    tlb.io_ptw_status_hie <= io_ptw_status_hie
    tlb.io_ptw_status_sie <= io_ptw_status_sie
    tlb.io_ptw_status_uie <= io_ptw_status_uie
    s1_pc_ <= GEN_13
    s1_speculative <= GEN_14
    s1_same_block <= GEN_12
    s2_valid <= GEN_15
    s2_pc <= GEN_8
    s2_btb_resp_valid <= GEN_17
    s2_btb_resp_bits_taken <= GEN_18
    s2_btb_resp_bits_mask <= GEN_19
    s2_btb_resp_bits_bridx <= GEN_20
    s2_btb_resp_bits_target <= GEN_21
    s2_btb_resp_bits_entry <= GEN_22
    s2_btb_resp_bits_bht_history <= GEN_23
    s2_btb_resp_bits_bht_value <= GEN_24
    s2_xcpt_if <= GEN_11
    s2_speculative <= GEN_9
    s2_cacheable <= GEN_10
    predicted_npc <= GEN_25
    predicted_taken <= T_1560
    BTB_1.io_req_valid <= T_1558
    BTB_1.io_req_bits_addr <= bits(s1_pc_, 38, 0)
    BTB_1.io_btb_update_valid <= io_cpu_btb_update_valid
    BTB_1.io_btb_update_bits_prediction_valid <= io_cpu_btb_update_bits_prediction_valid
    BTB_1.io_btb_update_bits_prediction_bits_taken <= io_cpu_btb_update_bits_prediction_bits_taken
    BTB_1.io_btb_update_bits_prediction_bits_mask <= io_cpu_btb_update_bits_prediction_bits_mask
    BTB_1.io_btb_update_bits_prediction_bits_bridx <= io_cpu_btb_update_bits_prediction_bits_bridx
    BTB_1.io_btb_update_bits_prediction_bits_target <= io_cpu_btb_update_bits_prediction_bits_target
    BTB_1.io_btb_update_bits_prediction_bits_entry <= io_cpu_btb_update_bits_prediction_bits_entry
    BTB_1.io_btb_update_bits_prediction_bits_bht_history <= io_cpu_btb_update_bits_prediction_bits_bht_history
    BTB_1.io_btb_update_bits_prediction_bits_bht_value <= io_cpu_btb_update_bits_prediction_bits_bht_value
    BTB_1.io_btb_update_bits_pc <= io_cpu_btb_update_bits_pc
    BTB_1.io_btb_update_bits_target <= io_cpu_btb_update_bits_target
    BTB_1.io_btb_update_bits_taken <= io_cpu_btb_update_bits_taken
    BTB_1.io_btb_update_bits_isValid <= io_cpu_btb_update_bits_isValid
    BTB_1.io_btb_update_bits_isJump <= io_cpu_btb_update_bits_isJump
    BTB_1.io_btb_update_bits_isReturn <= io_cpu_btb_update_bits_isReturn
    BTB_1.io_btb_update_bits_br_pc <= io_cpu_btb_update_bits_br_pc
    BTB_1.io_bht_update_valid <= io_cpu_bht_update_valid
    BTB_1.io_bht_update_bits_prediction_valid <= io_cpu_bht_update_bits_prediction_valid
    BTB_1.io_bht_update_bits_prediction_bits_taken <= io_cpu_bht_update_bits_prediction_bits_taken
    BTB_1.io_bht_update_bits_prediction_bits_mask <= io_cpu_bht_update_bits_prediction_bits_mask
    BTB_1.io_bht_update_bits_prediction_bits_bridx <= io_cpu_bht_update_bits_prediction_bits_bridx
    BTB_1.io_bht_update_bits_prediction_bits_target <= io_cpu_bht_update_bits_prediction_bits_target
    BTB_1.io_bht_update_bits_prediction_bits_entry <= io_cpu_bht_update_bits_prediction_bits_entry
    BTB_1.io_bht_update_bits_prediction_bits_bht_history <= io_cpu_bht_update_bits_prediction_bits_bht_history
    BTB_1.io_bht_update_bits_prediction_bits_bht_value <= io_cpu_bht_update_bits_prediction_bits_bht_value
    BTB_1.io_bht_update_bits_pc <= io_cpu_bht_update_bits_pc
    BTB_1.io_bht_update_bits_taken <= io_cpu_bht_update_bits_taken
    BTB_1.io_bht_update_bits_mispredict <= io_cpu_bht_update_bits_mispredict
    BTB_1.io_ras_update_valid <= io_cpu_ras_update_valid
    BTB_1.io_ras_update_bits_isCall <= io_cpu_ras_update_bits_isCall
    BTB_1.io_ras_update_bits_isReturn <= io_cpu_ras_update_bits_isReturn
    BTB_1.io_ras_update_bits_returnAddr <= io_cpu_ras_update_bits_returnAddr
    BTB_1.io_ras_update_bits_prediction_valid <= io_cpu_ras_update_bits_prediction_valid
    BTB_1.io_ras_update_bits_prediction_bits_taken <= io_cpu_ras_update_bits_prediction_bits_taken
    BTB_1.io_ras_update_bits_prediction_bits_mask <= io_cpu_ras_update_bits_prediction_bits_mask
    BTB_1.io_ras_update_bits_prediction_bits_bridx <= io_cpu_ras_update_bits_prediction_bits_bridx
    BTB_1.io_ras_update_bits_prediction_bits_target <= io_cpu_ras_update_bits_prediction_bits_target
    BTB_1.io_ras_update_bits_prediction_bits_entry <= io_cpu_ras_update_bits_prediction_bits_entry
    BTB_1.io_ras_update_bits_prediction_bits_bht_history <= io_cpu_ras_update_bits_prediction_bits_bht_history
    BTB_1.io_ras_update_bits_prediction_bits_bht_value <= io_cpu_ras_update_bits_prediction_bits_bht_value

  module FinishQueue :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_manager_xact_id : UInt<4>
    input io_enq_bits_manager_id : UInt<1>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_manager_xact_id : UInt<4>
    output io_deq_bits_manager_id : UInt<1>
    output io_count : UInt<1>
  
    mem ram_manager_xact_id :
      data-type => UInt<4>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_manager_xact_id.T_254.en <= UInt<1>("h1")
    ram_manager_xact_id.T_254.addr <= UInt<1>("h0")
    ram_manager_xact_id.T_224.en <= do_enq
    ram_manager_xact_id.T_224.mask <= do_enq
    ram_manager_xact_id.T_224.addr <= UInt<1>("h0")
    ram_manager_xact_id.T_224.data <= io_enq_bits_manager_xact_id
    mem ram_manager_id :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_manager_id.T_254.en <= UInt<1>("h1")
    ram_manager_id.T_254.addr <= UInt<1>("h0")
    ram_manager_id.T_224.en <= do_enq
    ram_manager_id.T_224.mask <= do_enq
    ram_manager_id.T_224.addr <= UInt<1>("h0")
    ram_manager_id.T_224.data <= io_enq_bits_manager_id
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_221 = eq(maybe_full, UInt<1>("h0"))
    node T_222 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_223 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_249 = neq(do_enq, do_deq)
    node GEN_5 = mux(T_249, do_enq, maybe_full)
    node T_251 = eq(T_221, UInt<1>("h0"))
    node T_277 = sub(UInt<1>("h0"), UInt<1>("h0"))
    node ptr_diff = tail(T_277, 1)
    node T_279 = cat(maybe_full, ptr_diff)
    io_enq_ready <= T_221
    io_deq_valid <= T_251
    io_deq_bits_manager_xact_id <= ram_manager_xact_id.T_254.data
    io_deq_bits_manager_id <= ram_manager_id.T_254.data
    io_count <= bits(T_279, 0, 0)
    maybe_full <= GEN_5
    do_enq <= T_222
    do_deq <= T_223

  module Arbiter :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_idx : UInt<6>
    input io_in_0_bits_way_en : UInt<4>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_idx : UInt<6>
    input io_in_1_bits_way_en : UInt<4>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_idx : UInt<6>
    input io_in_2_bits_way_en : UInt<4>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_idx : UInt<6>
    output io_out_bits_way_en : UInt<4>
    output io_chosen : UInt<2>
  
    node GEN_0 = mux(io_in_1_valid, UInt<2>("h1"), UInt<2>("h2"))
    node GEN_1 = mux(io_in_1_valid, io_in_1_bits_idx, io_in_2_bits_idx)
    node GEN_2 = mux(io_in_1_valid, io_in_1_bits_way_en, io_in_2_bits_way_en)
    node GEN_3 = mux(io_in_0_valid, UInt<2>("h0"), GEN_0)
    node GEN_4 = mux(io_in_0_valid, io_in_0_bits_idx, GEN_1)
    node GEN_5 = mux(io_in_0_valid, io_in_0_bits_way_en, GEN_2)
    node T_637 = or(io_in_0_valid, io_in_1_valid)
    node grant_1 = eq(io_in_0_valid, UInt<1>("h0"))
    node grant_2 = eq(T_637, UInt<1>("h0"))
    node T_641 = and(grant_1, io_out_ready)
    node T_642 = and(grant_2, io_out_ready)
    node T_644 = eq(grant_2, UInt<1>("h0"))
    node T_645 = or(T_644, io_in_2_valid)
    io_in_0_ready <= io_out_ready
    io_in_1_ready <= T_641
    io_in_2_ready <= T_642
    io_out_valid <= T_645
    io_out_bits_idx <= GEN_4
    io_out_bits_way_en <= GEN_5
    io_chosen <= GEN_3

  module Arbiter_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_idx : UInt<6>
    input io_in_0_bits_way_en : UInt<4>
    input io_in_0_bits_data_tag : UInt<20>
    input io_in_0_bits_data_coh_state : UInt<2>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_idx : UInt<6>
    input io_in_1_bits_way_en : UInt<4>
    input io_in_1_bits_data_tag : UInt<20>
    input io_in_1_bits_data_coh_state : UInt<2>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_idx : UInt<6>
    input io_in_2_bits_way_en : UInt<4>
    input io_in_2_bits_data_tag : UInt<20>
    input io_in_2_bits_data_coh_state : UInt<2>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_idx : UInt<6>
    output io_out_bits_way_en : UInt<4>
    output io_out_bits_data_tag : UInt<20>
    output io_out_bits_data_coh_state : UInt<2>
    output io_chosen : UInt<2>
  
    node GEN_0 = mux(io_in_1_valid, UInt<2>("h1"), UInt<2>("h2"))
    node GEN_1 = mux(io_in_1_valid, io_in_1_bits_idx, io_in_2_bits_idx)
    node GEN_2 = mux(io_in_1_valid, io_in_1_bits_way_en, io_in_2_bits_way_en)
    node GEN_3 = mux(io_in_1_valid, io_in_1_bits_data_tag, io_in_2_bits_data_tag)
    node GEN_4 = mux(io_in_1_valid, io_in_1_bits_data_coh_state, io_in_2_bits_data_coh_state)
    node GEN_5 = mux(io_in_0_valid, UInt<2>("h0"), GEN_0)
    node GEN_6 = mux(io_in_0_valid, io_in_0_bits_idx, GEN_1)
    node GEN_7 = mux(io_in_0_valid, io_in_0_bits_way_en, GEN_2)
    node GEN_8 = mux(io_in_0_valid, io_in_0_bits_data_tag, GEN_3)
    node GEN_9 = mux(io_in_0_valid, io_in_0_bits_data_coh_state, GEN_4)
    node T_2821 = or(io_in_0_valid, io_in_1_valid)
    node grant_1 = eq(io_in_0_valid, UInt<1>("h0"))
    node grant_2 = eq(T_2821, UInt<1>("h0"))
    node T_2825 = and(grant_1, io_out_ready)
    node T_2826 = and(grant_2, io_out_ready)
    node T_2828 = eq(grant_2, UInt<1>("h0"))
    node T_2829 = or(T_2828, io_in_2_valid)
    io_in_0_ready <= io_out_ready
    io_in_1_ready <= T_2825
    io_in_2_ready <= T_2826
    io_out_valid <= T_2829
    io_out_bits_idx <= GEN_6
    io_out_bits_way_en <= GEN_7
    io_out_bits_data_tag <= GEN_8
    io_out_bits_data_coh_state <= GEN_9
    io_chosen <= GEN_5

  module DCacheDataArray :
    input clk : Clock
    input reset : UInt<1>
    input io_req_valid : UInt<1>
    input io_req_bits_addr : UInt<12>
    input io_req_bits_write : UInt<1>
    input io_req_bits_wdata : UInt<64>
    input io_req_bits_wmask : UInt<8>
    input io_req_bits_way_en : UInt<4>
    output io_resp_0 : UInt<64>
    output io_resp_1 : UInt<64>
    output io_resp_2 : UInt<64>
    output io_resp_3 : UInt<64>
  
    node addr = shr(io_req_bits_addr, 3)
    mem T_406_0 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_446
      writer => T_437
      read-under-write => undefined
    reg T_406_0_T_446_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_406_0_T_446_addr_pipe_0)
    T_406_0_T_446_addr_pipe_0 <= mux(T_441, T_443, T_406_0_T_446_addr_pipe_0)
    T_406_0.T_446.en <= T_441
    T_406_0.T_446.addr <= T_406_0_T_446_addr_pipe_0
    T_406_0.T_437.en <= T_411
    T_406_0.T_437.mask <= GEN_20
    T_406_0.T_437.addr <= addr
    T_406_0.T_437.data <= T_425_0
    mem T_406_1 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_446
      writer => T_437
      read-under-write => undefined
    reg T_406_1_T_446_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_406_1_T_446_addr_pipe_0)
    T_406_1_T_446_addr_pipe_0 <= mux(T_441, T_443, T_406_1_T_446_addr_pipe_0)
    T_406_1.T_446.en <= T_441
    T_406_1.T_446.addr <= T_406_1_T_446_addr_pipe_0
    T_406_1.T_437.en <= T_411
    T_406_1.T_437.mask <= GEN_22
    T_406_1.T_437.addr <= addr
    T_406_1.T_437.data <= T_425_1
    mem T_406_2 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_446
      writer => T_437
      read-under-write => undefined
    reg T_406_2_T_446_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_406_2_T_446_addr_pipe_0)
    T_406_2_T_446_addr_pipe_0 <= mux(T_441, T_443, T_406_2_T_446_addr_pipe_0)
    T_406_2.T_446.en <= T_441
    T_406_2.T_446.addr <= T_406_2_T_446_addr_pipe_0
    T_406_2.T_437.en <= T_411
    T_406_2.T_437.mask <= GEN_24
    T_406_2.T_437.addr <= addr
    T_406_2.T_437.data <= T_425_2
    mem T_406_3 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_446
      writer => T_437
      read-under-write => undefined
    reg T_406_3_T_446_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_406_3_T_446_addr_pipe_0)
    T_406_3_T_446_addr_pipe_0 <= mux(T_441, T_443, T_406_3_T_446_addr_pipe_0)
    T_406_3.T_446.en <= T_441
    T_406_3.T_446.addr <= T_406_3_T_446_addr_pipe_0
    T_406_3.T_437.en <= T_411
    T_406_3.T_437.mask <= GEN_26
    T_406_3.T_437.addr <= addr
    T_406_3.T_437.data <= T_425_3
    mem T_406_4 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_446
      writer => T_437
      read-under-write => undefined
    reg T_406_4_T_446_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_406_4_T_446_addr_pipe_0)
    T_406_4_T_446_addr_pipe_0 <= mux(T_441, T_443, T_406_4_T_446_addr_pipe_0)
    T_406_4.T_446.en <= T_441
    T_406_4.T_446.addr <= T_406_4_T_446_addr_pipe_0
    T_406_4.T_437.en <= T_411
    T_406_4.T_437.mask <= GEN_28
    T_406_4.T_437.addr <= addr
    T_406_4.T_437.data <= T_425_4
    mem T_406_5 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_446
      writer => T_437
      read-under-write => undefined
    reg T_406_5_T_446_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_406_5_T_446_addr_pipe_0)
    T_406_5_T_446_addr_pipe_0 <= mux(T_441, T_443, T_406_5_T_446_addr_pipe_0)
    T_406_5.T_446.en <= T_441
    T_406_5.T_446.addr <= T_406_5_T_446_addr_pipe_0
    T_406_5.T_437.en <= T_411
    T_406_5.T_437.mask <= GEN_30
    T_406_5.T_437.addr <= addr
    T_406_5.T_437.data <= T_425_5
    mem T_406_6 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_446
      writer => T_437
      read-under-write => undefined
    reg T_406_6_T_446_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_406_6_T_446_addr_pipe_0)
    T_406_6_T_446_addr_pipe_0 <= mux(T_441, T_443, T_406_6_T_446_addr_pipe_0)
    T_406_6.T_446.en <= T_441
    T_406_6.T_446.addr <= T_406_6_T_446_addr_pipe_0
    T_406_6.T_437.en <= T_411
    T_406_6.T_437.mask <= GEN_32
    T_406_6.T_437.addr <= addr
    T_406_6.T_437.data <= T_425_6
    mem T_406_7 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_446
      writer => T_437
      read-under-write => undefined
    reg T_406_7_T_446_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_406_7_T_446_addr_pipe_0)
    T_406_7_T_446_addr_pipe_0 <= mux(T_441, T_443, T_406_7_T_446_addr_pipe_0)
    T_406_7.T_446.en <= T_441
    T_406_7.T_446.addr <= T_406_7_T_446_addr_pipe_0
    T_406_7.T_437.en <= T_411
    T_406_7.T_437.mask <= GEN_34
    T_406_7.T_437.addr <= addr
    T_406_7.T_437.data <= T_425_7
    node T_408 = bits(io_req_bits_way_en, 0, 0)
    node T_410 = and(io_req_valid, T_408)
    node T_411 = and(T_410, io_req_bits_write)
    node T_412 = bits(io_req_bits_wdata, 7, 0)
    node T_413 = bits(io_req_bits_wdata, 15, 8)
    node T_414 = bits(io_req_bits_wdata, 23, 16)
    node T_415 = bits(io_req_bits_wdata, 31, 24)
    node T_416 = bits(io_req_bits_wdata, 39, 32)
    node T_417 = bits(io_req_bits_wdata, 47, 40)
    node T_418 = bits(io_req_bits_wdata, 55, 48)
    node T_419 = bits(io_req_bits_wdata, 63, 56)
    wire T_425_0 : UInt<8>
    wire T_425_1 : UInt<8>
    wire T_425_2 : UInt<8>
    wire T_425_3 : UInt<8>
    wire T_425_4 : UInt<8>
    wire T_425_5 : UInt<8>
    wire T_425_6 : UInt<8>
    wire T_425_7 : UInt<8>
    node T_427 = bits(io_req_bits_wmask, 0, 0)
    node T_428 = bits(io_req_bits_wmask, 1, 1)
    node T_429 = bits(io_req_bits_wmask, 2, 2)
    node T_430 = bits(io_req_bits_wmask, 3, 3)
    node T_431 = bits(io_req_bits_wmask, 4, 4)
    node T_432 = bits(io_req_bits_wmask, 5, 5)
    node T_433 = bits(io_req_bits_wmask, 6, 6)
    node T_434 = bits(io_req_bits_wmask, 7, 7)
    node GEN_20 = mux(T_411, T_427, UInt<1>("h0"))
    node GEN_22 = mux(T_411, T_428, UInt<1>("h0"))
    node GEN_24 = mux(T_411, T_429, UInt<1>("h0"))
    node GEN_26 = mux(T_411, T_430, UInt<1>("h0"))
    node GEN_28 = mux(T_411, T_431, UInt<1>("h0"))
    node GEN_30 = mux(T_411, T_432, UInt<1>("h0"))
    node GEN_32 = mux(T_411, T_433, UInt<1>("h0"))
    node GEN_34 = mux(T_411, T_434, UInt<1>("h0"))
    node T_440 = eq(io_req_bits_write, UInt<1>("h0"))
    node T_441 = and(T_410, T_440)
    wire T_443 : UInt<9>
    node T_448 = cat(T_406_1.T_446.data, T_406_0.T_446.data)
    node T_449 = cat(T_406_3.T_446.data, T_406_2.T_446.data)
    node T_450 = cat(T_449, T_448)
    node T_451 = cat(T_406_5.T_446.data, T_406_4.T_446.data)
    node T_452 = cat(T_406_7.T_446.data, T_406_6.T_446.data)
    node T_453 = cat(T_452, T_451)
    node T_454 = cat(T_453, T_450)
    mem T_463_0 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_503
      writer => T_494
      read-under-write => undefined
    reg T_463_0_T_503_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_463_0_T_503_addr_pipe_0)
    T_463_0_T_503_addr_pipe_0 <= mux(T_498, T_500, T_463_0_T_503_addr_pipe_0)
    T_463_0.T_503.en <= T_498
    T_463_0.T_503.addr <= T_463_0_T_503_addr_pipe_0
    T_463_0.T_494.en <= T_468
    T_463_0.T_494.mask <= GEN_57
    T_463_0.T_494.addr <= addr
    T_463_0.T_494.data <= T_482_0
    mem T_463_1 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_503
      writer => T_494
      read-under-write => undefined
    reg T_463_1_T_503_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_463_1_T_503_addr_pipe_0)
    T_463_1_T_503_addr_pipe_0 <= mux(T_498, T_500, T_463_1_T_503_addr_pipe_0)
    T_463_1.T_503.en <= T_498
    T_463_1.T_503.addr <= T_463_1_T_503_addr_pipe_0
    T_463_1.T_494.en <= T_468
    T_463_1.T_494.mask <= GEN_59
    T_463_1.T_494.addr <= addr
    T_463_1.T_494.data <= T_482_1
    mem T_463_2 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_503
      writer => T_494
      read-under-write => undefined
    reg T_463_2_T_503_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_463_2_T_503_addr_pipe_0)
    T_463_2_T_503_addr_pipe_0 <= mux(T_498, T_500, T_463_2_T_503_addr_pipe_0)
    T_463_2.T_503.en <= T_498
    T_463_2.T_503.addr <= T_463_2_T_503_addr_pipe_0
    T_463_2.T_494.en <= T_468
    T_463_2.T_494.mask <= GEN_61
    T_463_2.T_494.addr <= addr
    T_463_2.T_494.data <= T_482_2
    mem T_463_3 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_503
      writer => T_494
      read-under-write => undefined
    reg T_463_3_T_503_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_463_3_T_503_addr_pipe_0)
    T_463_3_T_503_addr_pipe_0 <= mux(T_498, T_500, T_463_3_T_503_addr_pipe_0)
    T_463_3.T_503.en <= T_498
    T_463_3.T_503.addr <= T_463_3_T_503_addr_pipe_0
    T_463_3.T_494.en <= T_468
    T_463_3.T_494.mask <= GEN_63
    T_463_3.T_494.addr <= addr
    T_463_3.T_494.data <= T_482_3
    mem T_463_4 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_503
      writer => T_494
      read-under-write => undefined
    reg T_463_4_T_503_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_463_4_T_503_addr_pipe_0)
    T_463_4_T_503_addr_pipe_0 <= mux(T_498, T_500, T_463_4_T_503_addr_pipe_0)
    T_463_4.T_503.en <= T_498
    T_463_4.T_503.addr <= T_463_4_T_503_addr_pipe_0
    T_463_4.T_494.en <= T_468
    T_463_4.T_494.mask <= GEN_65
    T_463_4.T_494.addr <= addr
    T_463_4.T_494.data <= T_482_4
    mem T_463_5 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_503
      writer => T_494
      read-under-write => undefined
    reg T_463_5_T_503_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_463_5_T_503_addr_pipe_0)
    T_463_5_T_503_addr_pipe_0 <= mux(T_498, T_500, T_463_5_T_503_addr_pipe_0)
    T_463_5.T_503.en <= T_498
    T_463_5.T_503.addr <= T_463_5_T_503_addr_pipe_0
    T_463_5.T_494.en <= T_468
    T_463_5.T_494.mask <= GEN_67
    T_463_5.T_494.addr <= addr
    T_463_5.T_494.data <= T_482_5
    mem T_463_6 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_503
      writer => T_494
      read-under-write => undefined
    reg T_463_6_T_503_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_463_6_T_503_addr_pipe_0)
    T_463_6_T_503_addr_pipe_0 <= mux(T_498, T_500, T_463_6_T_503_addr_pipe_0)
    T_463_6.T_503.en <= T_498
    T_463_6.T_503.addr <= T_463_6_T_503_addr_pipe_0
    T_463_6.T_494.en <= T_468
    T_463_6.T_494.mask <= GEN_69
    T_463_6.T_494.addr <= addr
    T_463_6.T_494.data <= T_482_6
    mem T_463_7 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_503
      writer => T_494
      read-under-write => undefined
    reg T_463_7_T_503_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_463_7_T_503_addr_pipe_0)
    T_463_7_T_503_addr_pipe_0 <= mux(T_498, T_500, T_463_7_T_503_addr_pipe_0)
    T_463_7.T_503.en <= T_498
    T_463_7.T_503.addr <= T_463_7_T_503_addr_pipe_0
    T_463_7.T_494.en <= T_468
    T_463_7.T_494.mask <= GEN_71
    T_463_7.T_494.addr <= addr
    T_463_7.T_494.data <= T_482_7
    node T_465 = bits(io_req_bits_way_en, 1, 1)
    node T_467 = and(io_req_valid, T_465)
    node T_468 = and(T_467, io_req_bits_write)
    wire T_482_0 : UInt<8>
    wire T_482_1 : UInt<8>
    wire T_482_2 : UInt<8>
    wire T_482_3 : UInt<8>
    wire T_482_4 : UInt<8>
    wire T_482_5 : UInt<8>
    wire T_482_6 : UInt<8>
    wire T_482_7 : UInt<8>
    node GEN_57 = mux(T_468, T_427, UInt<1>("h0"))
    node GEN_59 = mux(T_468, T_428, UInt<1>("h0"))
    node GEN_61 = mux(T_468, T_429, UInt<1>("h0"))
    node GEN_63 = mux(T_468, T_430, UInt<1>("h0"))
    node GEN_65 = mux(T_468, T_431, UInt<1>("h0"))
    node GEN_67 = mux(T_468, T_432, UInt<1>("h0"))
    node GEN_69 = mux(T_468, T_433, UInt<1>("h0"))
    node GEN_71 = mux(T_468, T_434, UInt<1>("h0"))
    node T_498 = and(T_467, T_440)
    wire T_500 : UInt<9>
    node T_505 = cat(T_463_1.T_503.data, T_463_0.T_503.data)
    node T_506 = cat(T_463_3.T_503.data, T_463_2.T_503.data)
    node T_507 = cat(T_506, T_505)
    node T_508 = cat(T_463_5.T_503.data, T_463_4.T_503.data)
    node T_509 = cat(T_463_7.T_503.data, T_463_6.T_503.data)
    node T_510 = cat(T_509, T_508)
    node T_511 = cat(T_510, T_507)
    mem T_520_0 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_560
      writer => T_551
      read-under-write => undefined
    reg T_520_0_T_560_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_520_0_T_560_addr_pipe_0)
    T_520_0_T_560_addr_pipe_0 <= mux(T_555, T_557, T_520_0_T_560_addr_pipe_0)
    T_520_0.T_560.en <= T_555
    T_520_0.T_560.addr <= T_520_0_T_560_addr_pipe_0
    T_520_0.T_551.en <= T_525
    T_520_0.T_551.mask <= GEN_94
    T_520_0.T_551.addr <= addr
    T_520_0.T_551.data <= T_539_0
    mem T_520_1 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_560
      writer => T_551
      read-under-write => undefined
    reg T_520_1_T_560_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_520_1_T_560_addr_pipe_0)
    T_520_1_T_560_addr_pipe_0 <= mux(T_555, T_557, T_520_1_T_560_addr_pipe_0)
    T_520_1.T_560.en <= T_555
    T_520_1.T_560.addr <= T_520_1_T_560_addr_pipe_0
    T_520_1.T_551.en <= T_525
    T_520_1.T_551.mask <= GEN_96
    T_520_1.T_551.addr <= addr
    T_520_1.T_551.data <= T_539_1
    mem T_520_2 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_560
      writer => T_551
      read-under-write => undefined
    reg T_520_2_T_560_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_520_2_T_560_addr_pipe_0)
    T_520_2_T_560_addr_pipe_0 <= mux(T_555, T_557, T_520_2_T_560_addr_pipe_0)
    T_520_2.T_560.en <= T_555
    T_520_2.T_560.addr <= T_520_2_T_560_addr_pipe_0
    T_520_2.T_551.en <= T_525
    T_520_2.T_551.mask <= GEN_98
    T_520_2.T_551.addr <= addr
    T_520_2.T_551.data <= T_539_2
    mem T_520_3 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_560
      writer => T_551
      read-under-write => undefined
    reg T_520_3_T_560_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_520_3_T_560_addr_pipe_0)
    T_520_3_T_560_addr_pipe_0 <= mux(T_555, T_557, T_520_3_T_560_addr_pipe_0)
    T_520_3.T_560.en <= T_555
    T_520_3.T_560.addr <= T_520_3_T_560_addr_pipe_0
    T_520_3.T_551.en <= T_525
    T_520_3.T_551.mask <= GEN_100
    T_520_3.T_551.addr <= addr
    T_520_3.T_551.data <= T_539_3
    mem T_520_4 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_560
      writer => T_551
      read-under-write => undefined
    reg T_520_4_T_560_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_520_4_T_560_addr_pipe_0)
    T_520_4_T_560_addr_pipe_0 <= mux(T_555, T_557, T_520_4_T_560_addr_pipe_0)
    T_520_4.T_560.en <= T_555
    T_520_4.T_560.addr <= T_520_4_T_560_addr_pipe_0
    T_520_4.T_551.en <= T_525
    T_520_4.T_551.mask <= GEN_102
    T_520_4.T_551.addr <= addr
    T_520_4.T_551.data <= T_539_4
    mem T_520_5 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_560
      writer => T_551
      read-under-write => undefined
    reg T_520_5_T_560_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_520_5_T_560_addr_pipe_0)
    T_520_5_T_560_addr_pipe_0 <= mux(T_555, T_557, T_520_5_T_560_addr_pipe_0)
    T_520_5.T_560.en <= T_555
    T_520_5.T_560.addr <= T_520_5_T_560_addr_pipe_0
    T_520_5.T_551.en <= T_525
    T_520_5.T_551.mask <= GEN_104
    T_520_5.T_551.addr <= addr
    T_520_5.T_551.data <= T_539_5
    mem T_520_6 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_560
      writer => T_551
      read-under-write => undefined
    reg T_520_6_T_560_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_520_6_T_560_addr_pipe_0)
    T_520_6_T_560_addr_pipe_0 <= mux(T_555, T_557, T_520_6_T_560_addr_pipe_0)
    T_520_6.T_560.en <= T_555
    T_520_6.T_560.addr <= T_520_6_T_560_addr_pipe_0
    T_520_6.T_551.en <= T_525
    T_520_6.T_551.mask <= GEN_106
    T_520_6.T_551.addr <= addr
    T_520_6.T_551.data <= T_539_6
    mem T_520_7 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_560
      writer => T_551
      read-under-write => undefined
    reg T_520_7_T_560_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_520_7_T_560_addr_pipe_0)
    T_520_7_T_560_addr_pipe_0 <= mux(T_555, T_557, T_520_7_T_560_addr_pipe_0)
    T_520_7.T_560.en <= T_555
    T_520_7.T_560.addr <= T_520_7_T_560_addr_pipe_0
    T_520_7.T_551.en <= T_525
    T_520_7.T_551.mask <= GEN_108
    T_520_7.T_551.addr <= addr
    T_520_7.T_551.data <= T_539_7
    node T_522 = bits(io_req_bits_way_en, 2, 2)
    node T_524 = and(io_req_valid, T_522)
    node T_525 = and(T_524, io_req_bits_write)
    wire T_539_0 : UInt<8>
    wire T_539_1 : UInt<8>
    wire T_539_2 : UInt<8>
    wire T_539_3 : UInt<8>
    wire T_539_4 : UInt<8>
    wire T_539_5 : UInt<8>
    wire T_539_6 : UInt<8>
    wire T_539_7 : UInt<8>
    node GEN_94 = mux(T_525, T_427, UInt<1>("h0"))
    node GEN_96 = mux(T_525, T_428, UInt<1>("h0"))
    node GEN_98 = mux(T_525, T_429, UInt<1>("h0"))
    node GEN_100 = mux(T_525, T_430, UInt<1>("h0"))
    node GEN_102 = mux(T_525, T_431, UInt<1>("h0"))
    node GEN_104 = mux(T_525, T_432, UInt<1>("h0"))
    node GEN_106 = mux(T_525, T_433, UInt<1>("h0"))
    node GEN_108 = mux(T_525, T_434, UInt<1>("h0"))
    node T_555 = and(T_524, T_440)
    wire T_557 : UInt<9>
    node T_562 = cat(T_520_1.T_560.data, T_520_0.T_560.data)
    node T_563 = cat(T_520_3.T_560.data, T_520_2.T_560.data)
    node T_564 = cat(T_563, T_562)
    node T_565 = cat(T_520_5.T_560.data, T_520_4.T_560.data)
    node T_566 = cat(T_520_7.T_560.data, T_520_6.T_560.data)
    node T_567 = cat(T_566, T_565)
    node T_568 = cat(T_567, T_564)
    mem T_577_0 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_617
      writer => T_608
      read-under-write => undefined
    reg T_577_0_T_617_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_577_0_T_617_addr_pipe_0)
    T_577_0_T_617_addr_pipe_0 <= mux(T_612, T_614, T_577_0_T_617_addr_pipe_0)
    T_577_0.T_617.en <= T_612
    T_577_0.T_617.addr <= T_577_0_T_617_addr_pipe_0
    T_577_0.T_608.en <= T_582
    T_577_0.T_608.mask <= GEN_131
    T_577_0.T_608.addr <= addr
    T_577_0.T_608.data <= T_596_0
    mem T_577_1 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_617
      writer => T_608
      read-under-write => undefined
    reg T_577_1_T_617_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_577_1_T_617_addr_pipe_0)
    T_577_1_T_617_addr_pipe_0 <= mux(T_612, T_614, T_577_1_T_617_addr_pipe_0)
    T_577_1.T_617.en <= T_612
    T_577_1.T_617.addr <= T_577_1_T_617_addr_pipe_0
    T_577_1.T_608.en <= T_582
    T_577_1.T_608.mask <= GEN_133
    T_577_1.T_608.addr <= addr
    T_577_1.T_608.data <= T_596_1
    mem T_577_2 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_617
      writer => T_608
      read-under-write => undefined
    reg T_577_2_T_617_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_577_2_T_617_addr_pipe_0)
    T_577_2_T_617_addr_pipe_0 <= mux(T_612, T_614, T_577_2_T_617_addr_pipe_0)
    T_577_2.T_617.en <= T_612
    T_577_2.T_617.addr <= T_577_2_T_617_addr_pipe_0
    T_577_2.T_608.en <= T_582
    T_577_2.T_608.mask <= GEN_135
    T_577_2.T_608.addr <= addr
    T_577_2.T_608.data <= T_596_2
    mem T_577_3 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_617
      writer => T_608
      read-under-write => undefined
    reg T_577_3_T_617_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_577_3_T_617_addr_pipe_0)
    T_577_3_T_617_addr_pipe_0 <= mux(T_612, T_614, T_577_3_T_617_addr_pipe_0)
    T_577_3.T_617.en <= T_612
    T_577_3.T_617.addr <= T_577_3_T_617_addr_pipe_0
    T_577_3.T_608.en <= T_582
    T_577_3.T_608.mask <= GEN_137
    T_577_3.T_608.addr <= addr
    T_577_3.T_608.data <= T_596_3
    mem T_577_4 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_617
      writer => T_608
      read-under-write => undefined
    reg T_577_4_T_617_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_577_4_T_617_addr_pipe_0)
    T_577_4_T_617_addr_pipe_0 <= mux(T_612, T_614, T_577_4_T_617_addr_pipe_0)
    T_577_4.T_617.en <= T_612
    T_577_4.T_617.addr <= T_577_4_T_617_addr_pipe_0
    T_577_4.T_608.en <= T_582
    T_577_4.T_608.mask <= GEN_139
    T_577_4.T_608.addr <= addr
    T_577_4.T_608.data <= T_596_4
    mem T_577_5 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_617
      writer => T_608
      read-under-write => undefined
    reg T_577_5_T_617_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_577_5_T_617_addr_pipe_0)
    T_577_5_T_617_addr_pipe_0 <= mux(T_612, T_614, T_577_5_T_617_addr_pipe_0)
    T_577_5.T_617.en <= T_612
    T_577_5.T_617.addr <= T_577_5_T_617_addr_pipe_0
    T_577_5.T_608.en <= T_582
    T_577_5.T_608.mask <= GEN_141
    T_577_5.T_608.addr <= addr
    T_577_5.T_608.data <= T_596_5
    mem T_577_6 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_617
      writer => T_608
      read-under-write => undefined
    reg T_577_6_T_617_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_577_6_T_617_addr_pipe_0)
    T_577_6_T_617_addr_pipe_0 <= mux(T_612, T_614, T_577_6_T_617_addr_pipe_0)
    T_577_6.T_617.en <= T_612
    T_577_6.T_617.addr <= T_577_6_T_617_addr_pipe_0
    T_577_6.T_608.en <= T_582
    T_577_6.T_608.mask <= GEN_143
    T_577_6.T_608.addr <= addr
    T_577_6.T_608.data <= T_596_6
    mem T_577_7 :
      data-type => UInt<8>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => T_617
      writer => T_608
      read-under-write => undefined
    reg T_577_7_T_617_addr_pipe_0 : UInt<9>, clk with :
      reset => (UInt<1>("h0"), T_577_7_T_617_addr_pipe_0)
    T_577_7_T_617_addr_pipe_0 <= mux(T_612, T_614, T_577_7_T_617_addr_pipe_0)
    T_577_7.T_617.en <= T_612
    T_577_7.T_617.addr <= T_577_7_T_617_addr_pipe_0
    T_577_7.T_608.en <= T_582
    T_577_7.T_608.mask <= GEN_145
    T_577_7.T_608.addr <= addr
    T_577_7.T_608.data <= T_596_7
    node T_579 = bits(io_req_bits_way_en, 3, 3)
    node T_581 = and(io_req_valid, T_579)
    node T_582 = and(T_581, io_req_bits_write)
    wire T_596_0 : UInt<8>
    wire T_596_1 : UInt<8>
    wire T_596_2 : UInt<8>
    wire T_596_3 : UInt<8>
    wire T_596_4 : UInt<8>
    wire T_596_5 : UInt<8>
    wire T_596_6 : UInt<8>
    wire T_596_7 : UInt<8>
    node GEN_131 = mux(T_582, T_427, UInt<1>("h0"))
    node GEN_133 = mux(T_582, T_428, UInt<1>("h0"))
    node GEN_135 = mux(T_582, T_429, UInt<1>("h0"))
    node GEN_137 = mux(T_582, T_430, UInt<1>("h0"))
    node GEN_139 = mux(T_582, T_431, UInt<1>("h0"))
    node GEN_141 = mux(T_582, T_432, UInt<1>("h0"))
    node GEN_143 = mux(T_582, T_433, UInt<1>("h0"))
    node GEN_145 = mux(T_582, T_434, UInt<1>("h0"))
    node T_612 = and(T_581, T_440)
    wire T_614 : UInt<9>
    node T_619 = cat(T_577_1.T_617.data, T_577_0.T_617.data)
    node T_620 = cat(T_577_3.T_617.data, T_577_2.T_617.data)
    node T_621 = cat(T_620, T_619)
    node T_622 = cat(T_577_5.T_617.data, T_577_4.T_617.data)
    node T_623 = cat(T_577_7.T_617.data, T_577_6.T_617.data)
    node T_624 = cat(T_623, T_622)
    node T_625 = cat(T_624, T_621)
    io_resp_0 <= T_454
    io_resp_1 <= T_511
    io_resp_2 <= T_568
    io_resp_3 <= T_625
    T_425_0 <= T_412
    T_425_1 <= T_413
    T_425_2 <= T_414
    T_425_3 <= T_415
    T_425_4 <= T_416
    T_425_5 <= T_417
    T_425_6 <= T_418
    T_425_7 <= T_419
    T_443 <= addr
    T_482_0 <= T_412
    T_482_1 <= T_413
    T_482_2 <= T_414
    T_482_3 <= T_415
    T_482_4 <= T_416
    T_482_5 <= T_417
    T_482_6 <= T_418
    T_482_7 <= T_419
    T_500 <= addr
    T_539_0 <= T_412
    T_539_1 <= T_413
    T_539_2 <= T_414
    T_539_3 <= T_415
    T_539_4 <= T_416
    T_539_5 <= T_417
    T_539_6 <= T_418
    T_539_7 <= T_419
    T_557 <= addr
    T_596_0 <= T_412
    T_596_1 <= T_413
    T_596_2 <= T_414
    T_596_3 <= T_415
    T_596_4 <= T_416
    T_596_5 <= T_417
    T_596_6 <= T_418
    T_596_7 <= T_419
    T_614 <= addr

  module Arbiter_2 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr : UInt<12>
    input io_in_0_bits_write : UInt<1>
    input io_in_0_bits_wdata : UInt<64>
    input io_in_0_bits_wmask : UInt<8>
    input io_in_0_bits_way_en : UInt<4>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_addr : UInt<12>
    input io_in_1_bits_write : UInt<1>
    input io_in_1_bits_wdata : UInt<64>
    input io_in_1_bits_wmask : UInt<8>
    input io_in_1_bits_way_en : UInt<4>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_addr : UInt<12>
    input io_in_2_bits_write : UInt<1>
    input io_in_2_bits_wdata : UInt<64>
    input io_in_2_bits_wmask : UInt<8>
    input io_in_2_bits_way_en : UInt<4>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_addr : UInt<12>
    input io_in_3_bits_write : UInt<1>
    input io_in_3_bits_wdata : UInt<64>
    input io_in_3_bits_wmask : UInt<8>
    input io_in_3_bits_way_en : UInt<4>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr : UInt<12>
    output io_out_bits_write : UInt<1>
    output io_out_bits_wdata : UInt<64>
    output io_out_bits_wmask : UInt<8>
    output io_out_bits_way_en : UInt<4>
    output io_chosen : UInt<2>
  
    node GEN_0 = mux(io_in_2_valid, UInt<2>("h2"), UInt<2>("h3"))
    node GEN_1 = mux(io_in_2_valid, io_in_2_bits_addr, io_in_3_bits_addr)
    node GEN_2 = mux(io_in_2_valid, io_in_2_bits_write, io_in_3_bits_write)
    node GEN_3 = mux(io_in_2_valid, io_in_2_bits_wdata, io_in_3_bits_wdata)
    node GEN_4 = mux(io_in_2_valid, io_in_2_bits_wmask, io_in_3_bits_wmask)
    node GEN_5 = mux(io_in_2_valid, io_in_2_bits_way_en, io_in_3_bits_way_en)
    node GEN_6 = mux(io_in_1_valid, UInt<2>("h1"), GEN_0)
    node GEN_7 = mux(io_in_1_valid, io_in_1_bits_addr, GEN_1)
    node GEN_8 = mux(io_in_1_valid, io_in_1_bits_write, GEN_2)
    node GEN_9 = mux(io_in_1_valid, io_in_1_bits_wdata, GEN_3)
    node GEN_10 = mux(io_in_1_valid, io_in_1_bits_wmask, GEN_4)
    node GEN_11 = mux(io_in_1_valid, io_in_1_bits_way_en, GEN_5)
    node GEN_12 = mux(io_in_0_valid, UInt<2>("h0"), GEN_6)
    node GEN_13 = mux(io_in_0_valid, io_in_0_bits_addr, GEN_7)
    node GEN_14 = mux(io_in_0_valid, io_in_0_bits_write, GEN_8)
    node GEN_15 = mux(io_in_0_valid, io_in_0_bits_wdata, GEN_9)
    node GEN_16 = mux(io_in_0_valid, io_in_0_bits_wmask, GEN_10)
    node GEN_17 = mux(io_in_0_valid, io_in_0_bits_way_en, GEN_11)
    node T_2024 = or(io_in_0_valid, io_in_1_valid)
    node T_2025 = or(T_2024, io_in_2_valid)
    node grant_1 = eq(io_in_0_valid, UInt<1>("h0"))
    node grant_2 = eq(T_2024, UInt<1>("h0"))
    node grant_3 = eq(T_2025, UInt<1>("h0"))
    node T_2030 = and(grant_1, io_out_ready)
    node T_2031 = and(grant_2, io_out_ready)
    node T_2032 = and(grant_3, io_out_ready)
    node T_2034 = eq(grant_3, UInt<1>("h0"))
    node T_2035 = or(T_2034, io_in_3_valid)
    io_in_0_ready <= io_out_ready
    io_in_1_ready <= T_2030
    io_in_2_ready <= T_2031
    io_in_3_ready <= T_2032
    io_out_valid <= T_2035
    io_out_bits_addr <= GEN_13
    io_out_bits_write <= GEN_14
    io_out_bits_wdata <= GEN_15
    io_out_bits_wmask <= GEN_16
    io_out_bits_way_en <= GEN_17
    io_chosen <= GEN_12

  module MetadataArray :
    input clk : Clock
    input reset : UInt<1>
    output io_read_ready : UInt<1>
    input io_read_valid : UInt<1>
    input io_read_bits_idx : UInt<6>
    input io_read_bits_way_en : UInt<4>
    output io_write_ready : UInt<1>
    input io_write_valid : UInt<1>
    input io_write_bits_idx : UInt<6>
    input io_write_bits_way_en : UInt<4>
    input io_write_bits_data_tag : UInt<20>
    input io_write_bits_data_coh_state : UInt<2>
    output io_resp_0_tag : UInt<20>
    output io_resp_0_coh_state : UInt<2>
    output io_resp_1_tag : UInt<20>
    output io_resp_1_coh_state : UInt<2>
    output io_resp_2_tag : UInt<20>
    output io_resp_2_coh_state : UInt<2>
    output io_resp_3_tag : UInt<20>
    output io_resp_3_coh_state : UInt<2>
  
    wire T_44_state : UInt<2>
    wire rstVal_tag : UInt<20>
    wire rstVal_coh_state : UInt<2>
    reg rst_cnt : UInt<7>, clk with :
      reset => (reset, UInt<7>("h0"))
    node rst = lt(rst_cnt, UInt<7>("h40"))
    node waddr = mux(rst, rst_cnt, pad(io_write_bits_idx, 7))
    node T_2067_tag = mux(rst, UInt<20>("h0"), io_write_bits_data_tag)
    node T_2067_coh_state = mux(rst, UInt<2>("h0"), io_write_bits_data_coh_state)
    node wdata = cat(T_2067_tag, T_2067_coh_state)
    node T_2154 = asSInt(io_write_bits_way_en)
    node T_2155 = mux(rst, SInt<4>("h1"), T_2154)
    node wmask_0 = bits(T_2155, 0, 0)
    node wmask_1 = bits(T_2155, 1, 1)
    node wmask_2 = bits(T_2155, 2, 2)
    node wmask_3 = bits(T_2155, 3, 3)
    node T_2162 = add(rst_cnt, UInt<7>("h1"))
    node T_2163 = tail(T_2162, 1)
    node GEN_0 = mux(rst, T_2163, rst_cnt)
    mem T_2172_0 :
      data-type => UInt<22>
      depth => 64
      read-latency => 0
      write-latency => 1
      reader => T_2189
      writer => T_2183
      read-under-write => undefined
    reg T_2172_0_T_2189_addr_pipe_0 : UInt<6>, clk with :
      reset => (UInt<1>("h0"), T_2172_0_T_2189_addr_pipe_0)
    T_2172_0_T_2189_addr_pipe_0 <= mux(io_read_valid, T_2186, T_2172_0_T_2189_addr_pipe_0)
    T_2172_0.T_2189.en <= io_read_valid
    T_2172_0.T_2189.addr <= T_2172_0_T_2189_addr_pipe_0
    node GEN_26 = bits(waddr, 5, 0)
    T_2172_0.T_2183.en <= T_2173
    T_2172_0.T_2183.mask <= GEN_13
    T_2172_0.T_2183.addr <= GEN_26
    T_2172_0.T_2183.data <= T_2179_0
    mem T_2172_1 :
      data-type => UInt<22>
      depth => 64
      read-latency => 0
      write-latency => 1
      reader => T_2189
      writer => T_2183
      read-under-write => undefined
    reg T_2172_1_T_2189_addr_pipe_0 : UInt<6>, clk with :
      reset => (UInt<1>("h0"), T_2172_1_T_2189_addr_pipe_0)
    T_2172_1_T_2189_addr_pipe_0 <= mux(io_read_valid, T_2186, T_2172_1_T_2189_addr_pipe_0)
    T_2172_1.T_2189.en <= io_read_valid
    T_2172_1.T_2189.addr <= T_2172_1_T_2189_addr_pipe_0
    T_2172_1.T_2183.en <= T_2173
    T_2172_1.T_2183.mask <= GEN_15
    T_2172_1.T_2183.addr <= GEN_26
    T_2172_1.T_2183.data <= T_2179_1
    mem T_2172_2 :
      data-type => UInt<22>
      depth => 64
      read-latency => 0
      write-latency => 1
      reader => T_2189
      writer => T_2183
      read-under-write => undefined
    reg T_2172_2_T_2189_addr_pipe_0 : UInt<6>, clk with :
      reset => (UInt<1>("h0"), T_2172_2_T_2189_addr_pipe_0)
    T_2172_2_T_2189_addr_pipe_0 <= mux(io_read_valid, T_2186, T_2172_2_T_2189_addr_pipe_0)
    T_2172_2.T_2189.en <= io_read_valid
    T_2172_2.T_2189.addr <= T_2172_2_T_2189_addr_pipe_0
    T_2172_2.T_2183.en <= T_2173
    T_2172_2.T_2183.mask <= GEN_17
    T_2172_2.T_2183.addr <= GEN_26
    T_2172_2.T_2183.data <= T_2179_2
    mem T_2172_3 :
      data-type => UInt<22>
      depth => 64
      read-latency => 0
      write-latency => 1
      reader => T_2189
      writer => T_2183
      read-under-write => undefined
    reg T_2172_3_T_2189_addr_pipe_0 : UInt<6>, clk with :
      reset => (UInt<1>("h0"), T_2172_3_T_2189_addr_pipe_0)
    T_2172_3_T_2189_addr_pipe_0 <= mux(io_read_valid, T_2186, T_2172_3_T_2189_addr_pipe_0)
    T_2172_3.T_2189.en <= io_read_valid
    T_2172_3.T_2189.addr <= T_2172_3_T_2189_addr_pipe_0
    T_2172_3.T_2183.en <= T_2173
    T_2172_3.T_2183.mask <= GEN_19
    T_2172_3.T_2183.addr <= GEN_26
    T_2172_3.T_2183.data <= T_2179_3
    node T_2173 = or(rst, io_write_valid)
    wire T_2179_0 : UInt<22>
    wire T_2179_1 : UInt<22>
    wire T_2179_2 : UInt<22>
    wire T_2179_3 : UInt<22>
    node GEN_13 = mux(T_2173, wmask_0, UInt<1>("h0"))
    node GEN_15 = mux(T_2173, wmask_1, UInt<1>("h0"))
    node GEN_17 = mux(T_2173, wmask_2, UInt<1>("h0"))
    node GEN_19 = mux(T_2173, wmask_3, UInt<1>("h0"))
    wire T_2186 : UInt<6>
    wire T_2275_tag : UInt<20>
    wire T_2275_coh_state : UInt<2>
    node T_2359 = bits(T_2172_0.T_2189.data, 1, 0)
    node T_2360 = bits(T_2172_0.T_2189.data, 21, 2)
    wire T_2445_tag : UInt<20>
    wire T_2445_coh_state : UInt<2>
    node T_2529 = bits(T_2172_1.T_2189.data, 1, 0)
    node T_2530 = bits(T_2172_1.T_2189.data, 21, 2)
    wire T_2615_tag : UInt<20>
    wire T_2615_coh_state : UInt<2>
    node T_2699 = bits(T_2172_2.T_2189.data, 1, 0)
    node T_2700 = bits(T_2172_2.T_2189.data, 21, 2)
    wire T_2785_tag : UInt<20>
    wire T_2785_coh_state : UInt<2>
    node T_2869 = bits(T_2172_3.T_2189.data, 1, 0)
    node T_2870 = bits(T_2172_3.T_2189.data, 21, 2)
    node T_2872 = eq(rst, UInt<1>("h0"))
    node T_2874 = eq(io_write_valid, UInt<1>("h0"))
    node T_2875 = and(T_2872, T_2874)
    io_read_ready <= T_2875
    io_write_ready <= T_2872
    io_resp_0_tag <= T_2275_tag
    io_resp_0_coh_state <= T_2275_coh_state
    io_resp_1_tag <= T_2445_tag
    io_resp_1_coh_state <= T_2445_coh_state
    io_resp_2_tag <= T_2615_tag
    io_resp_2_coh_state <= T_2615_coh_state
    io_resp_3_tag <= T_2785_tag
    io_resp_3_coh_state <= T_2785_coh_state
    rst_cnt <= GEN_0
    T_2179_0 <= wdata
    T_2179_1 <= wdata
    T_2179_2 <= wdata
    T_2179_3 <= wdata
    T_2186 <= io_read_bits_idx
    T_2275_tag <= T_2360
    T_2275_coh_state <= T_2359
    T_2445_tag <= T_2530
    T_2445_coh_state <= T_2529
    T_2615_tag <= T_2700
    T_2615_coh_state <= T_2699
    T_2785_tag <= T_2870
    T_2785_coh_state <= T_2869

  module AMOALU :
    input clk : Clock
    input reset : UInt<1>
    input io_addr : UInt<3>
    input io_cmd : UInt<5>
    input io_typ : UInt<2>
    input io_lhs : UInt<64>
    input io_rhs : UInt<64>
    output io_out : UInt<64>
  
    node T_8 = eq(io_typ, UInt<2>("h2"))
    node T_9 = bits(io_rhs, 31, 0)
    node T_10 = cat(T_9, T_9)
    node rhs = mux(T_8, T_10, io_rhs)
    node T_11 = eq(io_cmd, UInt<5>("hc"))
    node T_12 = eq(io_cmd, UInt<5>("hd"))
    node sgned = or(T_11, T_12)
    node T_14 = eq(io_cmd, UInt<5>("hf"))
    node max = or(T_12, T_14)
    node T_16 = eq(io_cmd, UInt<5>("he"))
    node min = or(T_11, T_16)
    node T_19 = bits(io_addr, 2, 2)
    node GEN_0 = pad(T_19, 32)
    node T_20 = shlw(GEN_0, 31)
    node GEN_1 = pad(T_20, 64)
    node T_21 = xor(UInt<64>("hffffffffffffffff"), GEN_1)
    node T_22 = and(io_lhs, T_21)
    node T_23 = and(rhs, T_21)
    node adder_out = addw(T_22, T_23)
    node T_25 = bits(io_typ, 0, 0)
    node T_27 = eq(T_25, UInt<1>("h0"))
    node T_30 = eq(T_19, UInt<1>("h0"))
    node T_31 = and(T_27, T_30)
    node T_32 = bits(io_lhs, 31, 31)
    node T_33 = bits(io_lhs, 63, 63)
    node T_34 = mux(T_31, T_32, T_33)
    node T_39 = bits(rhs, 31, 31)
    node T_40 = bits(rhs, 63, 63)
    node T_41 = mux(T_31, T_39, T_40)
    node T_42 = bits(io_lhs, 31, 0)
    node T_43 = bits(rhs, 31, 0)
    node T_44 = lt(T_42, T_43)
    node T_45 = bits(io_lhs, 63, 32)
    node T_46 = bits(rhs, 63, 32)
    node T_47 = lt(T_45, T_46)
    node T_50 = eq(T_45, T_46)
    node T_52 = mux(T_19, T_47, T_44)
    node T_53 = and(T_50, T_44)
    node T_54 = or(T_47, T_53)
    node T_55 = mux(T_27, T_52, T_54)
    node T_56 = eq(T_34, T_41)
    node T_57 = mux(sgned, T_34, T_41)
    node less = mux(T_56, T_55, T_57)
    node T_58 = eq(io_cmd, UInt<5>("h8"))
    node T_59 = eq(io_cmd, UInt<5>("hb"))
    node T_60 = and(io_lhs, rhs)
    node T_61 = eq(io_cmd, UInt<5>("ha"))
    node T_62 = or(io_lhs, rhs)
    node T_63 = eq(io_cmd, UInt<5>("h9"))
    node T_64 = xor(io_lhs, rhs)
    node T_65 = mux(less, min, max)
    node T_67 = eq(io_typ, UInt<2>("h0"))
    node T_68 = bits(io_rhs, 7, 0)
    node T_69 = cat(T_68, T_68)
    node T_70 = cat(T_69, T_69)
    node T_71 = cat(T_70, T_70)
    node T_73 = eq(io_typ, UInt<2>("h1"))
    node T_74 = bits(io_rhs, 15, 0)
    node T_75 = cat(T_74, T_74)
    node T_76 = cat(T_75, T_75)
    node T_82 = mux(T_73, T_76, rhs)
    node T_83 = mux(T_67, T_71, T_82)
    node T_84 = mux(T_65, io_lhs, T_83)
    node T_85 = mux(T_63, T_64, T_84)
    node T_86 = mux(T_61, T_62, T_85)
    node T_87 = mux(T_59, T_60, T_86)
    node out = mux(T_58, adder_out, T_87)
    node T_89 = bits(io_addr, 0, 0)
    node T_93 = geq(io_typ, UInt<2>("h1"))
    node T_97 = or(T_89, T_93)
    node T_100 = mux(T_89, UInt<1>("h0"), UInt<1>("h1"))
    node T_101 = cat(T_97, T_100)
    node T_102 = bits(io_addr, 1, 1)
    node T_104 = mux(T_102, T_101, UInt<2>("h0"))
    node T_106 = geq(io_typ, UInt<2>("h2"))
    node T_109 = mux(T_106, UInt<2>("h3"), UInt<2>("h0"))
    node T_110 = or(T_104, T_109)
    node T_113 = mux(T_102, UInt<2>("h0"), T_101)
    node T_114 = cat(T_110, T_113)
    node T_117 = mux(T_19, T_114, UInt<4>("h0"))
    node T_119 = geq(io_typ, UInt<2>("h3"))
    node T_122 = mux(T_119, UInt<4>("hf"), UInt<4>("h0"))
    node T_123 = or(T_117, T_122)
    node T_126 = mux(T_19, UInt<4>("h0"), T_114)
    node T_127 = cat(T_123, T_126)
    node T_128 = bits(T_127, 0, 0)
    node T_129 = bits(T_127, 1, 1)
    node T_130 = bits(T_127, 2, 2)
    node T_131 = bits(T_127, 3, 3)
    node T_132 = bits(T_127, 4, 4)
    node T_133 = bits(T_127, 5, 5)
    node T_134 = bits(T_127, 6, 6)
    node T_135 = bits(T_127, 7, 7)
    node T_139 = mux(T_128, UInt<8>("hff"), UInt<8>("h0"))
    node T_143 = mux(T_129, UInt<8>("hff"), UInt<8>("h0"))
    node T_147 = mux(T_130, UInt<8>("hff"), UInt<8>("h0"))
    node T_151 = mux(T_131, UInt<8>("hff"), UInt<8>("h0"))
    node T_155 = mux(T_132, UInt<8>("hff"), UInt<8>("h0"))
    node T_159 = mux(T_133, UInt<8>("hff"), UInt<8>("h0"))
    node T_163 = mux(T_134, UInt<8>("hff"), UInt<8>("h0"))
    node T_167 = mux(T_135, UInt<8>("hff"), UInt<8>("h0"))
    node T_168 = cat(T_143, T_139)
    node T_169 = cat(T_151, T_147)
    node T_170 = cat(T_169, T_168)
    node T_171 = cat(T_159, T_155)
    node T_172 = cat(T_167, T_163)
    node T_173 = cat(T_172, T_171)
    node wmask = cat(T_173, T_170)
    node T_174 = and(wmask, out)
    node T_175 = not(wmask)
    node T_176 = and(T_175, io_lhs)
    node T_177 = or(T_174, T_176)
    io_out <= T_177

  module DCache :
    input clk : Clock
    input reset : UInt<1>
    output io_cpu_req_ready : UInt<1>
    input io_cpu_req_valid : UInt<1>
    input io_cpu_req_bits_addr : UInt<40>
    input io_cpu_req_bits_tag : UInt<7>
    input io_cpu_req_bits_cmd : UInt<5>
    input io_cpu_req_bits_typ : UInt<3>
    input io_cpu_req_bits_phys : UInt<1>
    input io_cpu_req_bits_data : UInt<64>
    input io_cpu_s1_kill : UInt<1>
    input io_cpu_s1_data : UInt<64>
    output io_cpu_s2_nack : UInt<1>
    output io_cpu_resp_valid : UInt<1>
    output io_cpu_resp_bits_addr : UInt<40>
    output io_cpu_resp_bits_tag : UInt<7>
    output io_cpu_resp_bits_cmd : UInt<5>
    output io_cpu_resp_bits_typ : UInt<3>
    output io_cpu_resp_bits_data : UInt<64>
    output io_cpu_resp_bits_replay : UInt<1>
    output io_cpu_resp_bits_has_data : UInt<1>
    output io_cpu_resp_bits_data_word_bypass : UInt<64>
    output io_cpu_resp_bits_store_data : UInt<64>
    output io_cpu_replay_next : UInt<1>
    output io_cpu_xcpt_ma_ld : UInt<1>
    output io_cpu_xcpt_ma_st : UInt<1>
    output io_cpu_xcpt_pf_ld : UInt<1>
    output io_cpu_xcpt_pf_st : UInt<1>
    input io_cpu_invalidate_lr : UInt<1>
    output io_cpu_ordered : UInt<1>
    input io_ptw_req_ready : UInt<1>
    output io_ptw_req_valid : UInt<1>
    output io_ptw_req_bits_prv : UInt<2>
    output io_ptw_req_bits_pum : UInt<1>
    output io_ptw_req_bits_mxr : UInt<1>
    output io_ptw_req_bits_addr : UInt<27>
    output io_ptw_req_bits_store : UInt<1>
    output io_ptw_req_bits_fetch : UInt<1>
    input io_ptw_resp_valid : UInt<1>
    input io_ptw_resp_bits_pte_reserved_for_hardware : UInt<16>
    input io_ptw_resp_bits_pte_ppn : UInt<38>
    input io_ptw_resp_bits_pte_reserved_for_software : UInt<2>
    input io_ptw_resp_bits_pte_d : UInt<1>
    input io_ptw_resp_bits_pte_a : UInt<1>
    input io_ptw_resp_bits_pte_g : UInt<1>
    input io_ptw_resp_bits_pte_u : UInt<1>
    input io_ptw_resp_bits_pte_x : UInt<1>
    input io_ptw_resp_bits_pte_w : UInt<1>
    input io_ptw_resp_bits_pte_r : UInt<1>
    input io_ptw_resp_bits_pte_v : UInt<1>
    input io_ptw_ptbr_asid : UInt<7>
    input io_ptw_ptbr_ppn : UInt<38>
    input io_ptw_invalidate : UInt<1>
    input io_ptw_status_debug : UInt<1>
    input io_ptw_status_isa : UInt<32>
    input io_ptw_status_prv : UInt<2>
    input io_ptw_status_sd : UInt<1>
    input io_ptw_status_zero3 : UInt<31>
    input io_ptw_status_sd_rv32 : UInt<1>
    input io_ptw_status_zero2 : UInt<2>
    input io_ptw_status_vm : UInt<5>
    input io_ptw_status_zero1 : UInt<4>
    input io_ptw_status_mxr : UInt<1>
    input io_ptw_status_pum : UInt<1>
    input io_ptw_status_mprv : UInt<1>
    input io_ptw_status_xs : UInt<2>
    input io_ptw_status_fs : UInt<2>
    input io_ptw_status_mpp : UInt<2>
    input io_ptw_status_hpp : UInt<2>
    input io_ptw_status_spp : UInt<1>
    input io_ptw_status_mpie : UInt<1>
    input io_ptw_status_hpie : UInt<1>
    input io_ptw_status_spie : UInt<1>
    input io_ptw_status_upie : UInt<1>
    input io_ptw_status_mie : UInt<1>
    input io_ptw_status_hie : UInt<1>
    input io_ptw_status_sie : UInt<1>
    input io_ptw_status_uie : UInt<1>
    input io_mem_acquire_ready : UInt<1>
    output io_mem_acquire_valid : UInt<1>
    output io_mem_acquire_bits_addr_block : UInt<26>
    output io_mem_acquire_bits_client_xact_id : UInt<1>
    output io_mem_acquire_bits_addr_beat : UInt<3>
    output io_mem_acquire_bits_is_builtin_type : UInt<1>
    output io_mem_acquire_bits_a_type : UInt<3>
    output io_mem_acquire_bits_union : UInt<11>
    output io_mem_acquire_bits_data : UInt<64>
    output io_mem_probe_ready : UInt<1>
    input io_mem_probe_valid : UInt<1>
    input io_mem_probe_bits_addr_block : UInt<26>
    input io_mem_probe_bits_p_type : UInt<2>
    input io_mem_release_ready : UInt<1>
    output io_mem_release_valid : UInt<1>
    output io_mem_release_bits_addr_beat : UInt<3>
    output io_mem_release_bits_addr_block : UInt<26>
    output io_mem_release_bits_client_xact_id : UInt<1>
    output io_mem_release_bits_voluntary : UInt<1>
    output io_mem_release_bits_r_type : UInt<3>
    output io_mem_release_bits_data : UInt<64>
    output io_mem_grant_ready : UInt<1>
    input io_mem_grant_valid : UInt<1>
    input io_mem_grant_bits_addr_beat : UInt<3>
    input io_mem_grant_bits_client_xact_id : UInt<1>
    input io_mem_grant_bits_manager_xact_id : UInt<4>
    input io_mem_grant_bits_is_builtin_type : UInt<1>
    input io_mem_grant_bits_g_type : UInt<4>
    input io_mem_grant_bits_data : UInt<64>
    input io_mem_grant_bits_manager_id : UInt<1>
    input io_mem_finish_ready : UInt<1>
    output io_mem_finish_valid : UInt<1>
    output io_mem_finish_bits_manager_xact_id : UInt<4>
    output io_mem_finish_bits_manager_id : UInt<1>
  
    inst fq of FinishQueue
    wire T_1926 : UInt<1>
    reg T_1929 : UInt<16>, clk with :
      reset => (reset, UInt<16>("h1"))
    node T_1930 = bits(T_1929, 0, 0)
    node T_1931 = bits(T_1929, 2, 2)
    node T_1932 = xor(T_1930, T_1931)
    node T_1933 = bits(T_1929, 3, 3)
    node T_1934 = xor(T_1932, T_1933)
    node T_1935 = bits(T_1929, 5, 5)
    node T_1936 = xor(T_1934, T_1935)
    node T_1937 = bits(T_1929, 15, 1)
    node T_1938 = cat(T_1936, T_1937)
    node GEN_2 = mux(T_1926, T_1938, T_1929)
    inst metaReadArb of Arbiter
    inst metaWriteArb of Arbiter_1
    inst data of DCacheDataArray
    inst dataArb of Arbiter_2
    node T_2220 = and(io_cpu_req_ready, io_cpu_req_valid)
    reg s1_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2222 = and(io_mem_probe_ready, io_mem_probe_valid)
    reg s1_probe : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg probe_bits_addr_block : UInt<26>, clk with :
      reset => (UInt<1>("h0"), probe_bits_addr_block)
    reg probe_bits_p_type : UInt<2>, clk with :
      reset => (UInt<1>("h0"), probe_bits_p_type)
    node GEN_3 = mux(T_2222, io_mem_probe_bits_addr_block, probe_bits_addr_block)
    node GEN_4 = mux(T_2222, io_mem_probe_bits_p_type, probe_bits_p_type)
    wire s1_nack : UInt<1>
    node T_2249 = eq(io_cpu_s1_kill, UInt<1>("h0"))
    node T_2250 = and(s1_valid, T_2249)
    node T_2251 = cat(io_cpu_xcpt_pf_ld, io_cpu_xcpt_pf_st)
    node T_2252 = cat(io_cpu_xcpt_ma_ld, io_cpu_xcpt_ma_st)
    node T_2253 = cat(T_2252, T_2251)
    node T_2255 = neq(T_2253, UInt<4>("h0"))
    node T_2257 = eq(T_2255, UInt<1>("h0"))
    node s1_valid_masked = and(T_2250, T_2257)
    node T_2259 = eq(s1_nack, UInt<1>("h0"))
    node s1_valid_not_nacked = and(s1_valid_masked, T_2259)
    reg s1_req_addr : UInt<40>, clk with :
      reset => (UInt<1>("h0"), s1_req_addr)
    reg s1_req_tag : UInt<7>, clk with :
      reset => (UInt<1>("h0"), s1_req_tag)
    reg s1_req_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), s1_req_cmd)
    reg s1_req_typ : UInt<3>, clk with :
      reset => (UInt<1>("h0"), s1_req_typ)
    reg s1_req_phys : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s1_req_phys)
    reg s1_req_data : UInt<64>, clk with :
      reset => (UInt<1>("h0"), s1_req_data)
    node T_2326 = shr(io_cpu_req_bits_addr, 12)
    node T_2327 = bits(io_cpu_req_bits_addr, 5, 0)
    node T_2328 = cat(T_2326, metaReadArb.io_out_bits_idx)
    node T_2329 = cat(T_2328, T_2327)
    node GEN_5 = mux(metaReadArb.io_out_valid, T_2329, s1_req_addr)
    node GEN_6 = mux(metaReadArb.io_out_valid, io_cpu_req_bits_tag, s1_req_tag)
    node GEN_7 = mux(metaReadArb.io_out_valid, io_cpu_req_bits_cmd, s1_req_cmd)
    node GEN_8 = mux(metaReadArb.io_out_valid, io_cpu_req_bits_typ, s1_req_typ)
    node GEN_9 = mux(metaReadArb.io_out_valid, io_cpu_req_bits_phys, s1_req_phys)
    node GEN_10 = mux(metaReadArb.io_out_valid, io_cpu_req_bits_data, s1_req_data)
    node T_2330 = eq(s1_req_cmd, UInt<5>("h0"))
    node T_2331 = eq(s1_req_cmd, UInt<5>("h6"))
    node T_2332 = or(T_2330, T_2331)
    node T_2333 = eq(s1_req_cmd, UInt<5>("h7"))
    node T_2334 = or(T_2332, T_2333)
    node T_2335 = bits(s1_req_cmd, 3, 3)
    node T_2336 = eq(s1_req_cmd, UInt<5>("h4"))
    node T_2337 = or(T_2335, T_2336)
    node s1_read = or(T_2334, T_2337)
    node T_2338 = eq(s1_req_cmd, UInt<5>("h1"))
    node T_2340 = or(T_2338, T_2333)
    node s1_write = or(T_2340, T_2337)
    node s1_readwrite = or(s1_read, s1_write)
    reg s1_flush_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s1_flush_valid)
    reg grant_wait : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg release_ack_wait : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg release_state : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    wire pstore1_valid : UInt<1>
    reg pstore2_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pstore2_valid)
    node T_2350 = eq(release_state, UInt<3>("h2"))
    node T_2351 = eq(release_state, UInt<3>("h3"))
    node inWriteback = or(T_2350, T_2351)
    wire releaseWay : UInt<4>
    node T_2353 = eq(release_state, UInt<3>("h0"))
    node T_2355 = eq(grant_wait, UInt<1>("h0"))
    node T_2356 = and(T_2353, T_2355)
    node T_2359 = and(T_2356, T_2259)
    node T_2360 = eq(io_cpu_req_bits_cmd, UInt<5>("h0"))
    node T_2361 = eq(io_cpu_req_bits_cmd, UInt<5>("h6"))
    node T_2362 = or(T_2360, T_2361)
    node T_2363 = eq(io_cpu_req_bits_cmd, UInt<5>("h7"))
    node T_2364 = or(T_2362, T_2363)
    node T_2365 = bits(io_cpu_req_bits_cmd, 3, 3)
    node T_2366 = eq(io_cpu_req_bits_cmd, UInt<5>("h4"))
    node T_2367 = or(T_2365, T_2366)
    node T_2368 = or(T_2364, T_2367)
    node T_2369 = and(io_cpu_req_valid, T_2368)
    node T_2374 = eq(dataArb.io_in_3_ready, UInt<1>("h0"))
    node T_2384 = and(T_2374, T_2368)
    node GEN_11 = mux(T_2384, UInt<1>("h0"), T_2359)
    node T_2386 = bits(io_cpu_req_bits_addr, 11, 6)
    node T_2390 = eq(metaReadArb.io_in_2_ready, UInt<1>("h0"))
    node GEN_12 = mux(T_2390, UInt<1>("h0"), GEN_11)
    inst tlb of TLB
    node T_2392 = and(s1_valid_masked, s1_readwrite)
    node T_2393 = shr(s1_req_addr, 12)
    node T_2396 = eq(tlb.io_req_ready, UInt<1>("h0"))
    node T_2398 = eq(io_cpu_req_bits_phys, UInt<1>("h0"))
    node T_2399 = and(T_2396, T_2398)
    node GEN_13 = mux(T_2399, UInt<1>("h0"), GEN_12)
    node T_2401 = and(s1_valid, s1_readwrite)
    node T_2402 = and(T_2401, tlb.io_resp_miss)
    node T_2404 = bits(s1_req_addr, 11, 0)
    node s1_paddr = cat(tlb.io_resp_ppn, T_2404)
    node T_2405 = shr(probe_bits_addr_block, 6)
    node T_2406 = bits(s1_paddr, 31, 12)
    node s1_tag = mux(s1_probe, T_2405, T_2406)
    node T_2407 = bits(T_1929, 1, 0)
    wire s1_victim_way : UInt<2>
    inst MetadataArray_1 of MetadataArray
    node T_2408 = neq(MetadataArray_1.io_resp_0_coh_state, UInt<2>("h0"))
    node T_2409 = eq(MetadataArray_1.io_resp_0_tag, s1_tag)
    node T_2410 = and(T_2408, T_2409)
    node T_2411 = neq(MetadataArray_1.io_resp_1_coh_state, UInt<2>("h0"))
    node T_2412 = eq(MetadataArray_1.io_resp_1_tag, s1_tag)
    node T_2413 = and(T_2411, T_2412)
    node T_2414 = neq(MetadataArray_1.io_resp_2_coh_state, UInt<2>("h0"))
    node T_2415 = eq(MetadataArray_1.io_resp_2_tag, s1_tag)
    node T_2416 = and(T_2414, T_2415)
    node T_2417 = neq(MetadataArray_1.io_resp_3_coh_state, UInt<2>("h0"))
    node T_2418 = eq(MetadataArray_1.io_resp_3_tag, s1_tag)
    node T_2419 = and(T_2417, T_2418)
    node T_2420 = cat(T_2413, T_2410)
    node T_2421 = cat(T_2419, T_2416)
    node s1_hit_way = cat(T_2421, T_2420)
    wire T_2445_state : UInt<2>
    node T_2469 = mux(T_2409, MetadataArray_1.io_resp_0_coh_state, UInt<2>("h0"))
    node T_2472 = mux(T_2412, MetadataArray_1.io_resp_1_coh_state, UInt<2>("h0"))
    node T_2475 = mux(T_2415, MetadataArray_1.io_resp_2_coh_state, UInt<2>("h0"))
    node T_2478 = mux(T_2418, MetadataArray_1.io_resp_3_coh_state, UInt<2>("h0"))
    node T_2479 = or(T_2469, T_2472)
    node T_2480 = or(T_2479, T_2475)
    node T_2481 = or(T_2480, T_2478)
    wire s1_hit_state_state : UInt<2>
    node s1_data_way = mux(inWriteback, releaseWay, s1_hit_way)
    node T_2609 = bits(s1_data_way, 0, 0)
    node T_2610 = bits(s1_data_way, 1, 1)
    node T_2611 = bits(s1_data_way, 2, 2)
    node T_2612 = bits(s1_data_way, 3, 3)
    node T_2614 = mux(T_2609, data.io_resp_0, UInt<64>("h0"))
    node T_2616 = mux(T_2610, data.io_resp_1, UInt<64>("h0"))
    node T_2618 = mux(T_2611, data.io_resp_2, UInt<64>("h0"))
    node T_2620 = mux(T_2612, data.io_resp_3, UInt<64>("h0"))
    node T_2622 = or(T_2614, T_2616)
    node T_2623 = or(T_2622, T_2618)
    node T_2624 = or(T_2623, T_2620)
    wire s1_data : UInt<64>
    reg s2_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg s2_probe : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2627 = or(s1_probe, s2_probe)
    node T_2628 = neq(release_state, UInt<3>("h0"))
    node releaseInFlight = or(T_2627, T_2628)
    reg T_2631 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_2631)
    node s2_valid_masked = and(s2_valid, T_2631)
    reg s2_req_addr : UInt<40>, clk with :
      reset => (UInt<1>("h0"), s2_req_addr)
    reg s2_req_tag : UInt<7>, clk with :
      reset => (UInt<1>("h0"), s2_req_tag)
    reg s2_req_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), s2_req_cmd)
    reg s2_req_typ : UInt<3>, clk with :
      reset => (UInt<1>("h0"), s2_req_typ)
    reg s2_req_phys : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s2_req_phys)
    reg s2_req_data : UInt<64>, clk with :
      reset => (UInt<1>("h0"), s2_req_data)
    reg s2_uncached : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s2_uncached)
    node T_2699 = or(s1_valid_not_nacked, s1_flush_valid)
    node T_2701 = eq(tlb.io_resp_cacheable, UInt<1>("h0"))
    node GEN_15 = mux(T_2699, pad(s1_paddr, 40), s2_req_addr)
    node GEN_16 = mux(T_2699, s1_req_tag, s2_req_tag)
    node GEN_17 = mux(T_2699, s1_req_cmd, s2_req_cmd)
    node GEN_18 = mux(T_2699, s1_req_typ, s2_req_typ)
    node GEN_19 = mux(T_2699, s1_req_phys, s2_req_phys)
    node GEN_20 = mux(T_2699, s1_req_data, s2_req_data)
    node GEN_21 = mux(T_2699, T_2701, s2_uncached)
    node T_2704 = eq(s2_req_cmd, UInt<5>("h0"))
    node T_2705 = eq(s2_req_cmd, UInt<5>("h6"))
    node T_2706 = or(T_2704, T_2705)
    node T_2707 = eq(s2_req_cmd, UInt<5>("h7"))
    node T_2708 = or(T_2706, T_2707)
    node T_2709 = bits(s2_req_cmd, 3, 3)
    node T_2710 = eq(s2_req_cmd, UInt<5>("h4"))
    node T_2711 = or(T_2709, T_2710)
    node s2_read = or(T_2708, T_2711)
    node T_2712 = eq(s2_req_cmd, UInt<5>("h1"))
    node T_2714 = or(T_2712, T_2707)
    node s2_write = or(T_2714, T_2711)
    node s2_readwrite = or(s2_read, s2_write)
    reg s2_flush_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s2_flush_valid)
    node T_2718 = or(s1_valid, inWriteback)
    reg s2_data : UInt<64>, clk with :
      reset => (UInt<1>("h0"), s2_data)
    node GEN_22 = mux(T_2718, s1_data, s2_data)
    reg s2_probe_way : UInt<4>, clk with :
      reset => (UInt<1>("h0"), s2_probe_way)
    node GEN_23 = mux(s1_probe, s1_hit_way, s2_probe_way)
    reg s2_probe_state_state : UInt<2>, clk with :
      reset => (UInt<1>("h0"), s2_probe_state_state)
    node GEN_24 = mux(s1_probe, s1_hit_state_state, s2_probe_state_state)
    reg s2_hit_way : UInt<4>, clk with :
      reset => (UInt<1>("h0"), s2_hit_way)
    node GEN_25 = mux(s1_valid_not_nacked, s1_hit_way, s2_hit_way)
    reg s2_hit_state_state : UInt<2>, clk with :
      reset => (UInt<1>("h0"), s2_hit_state_state)
    node GEN_26 = mux(s1_valid_not_nacked, s1_hit_state_state, s2_hit_state_state)
    node T_2768 = eq(s2_req_cmd, UInt<5>("h3"))
    node T_2769 = or(s2_write, T_2768)
    node T_2771 = or(T_2769, T_2705)
    node T_2772 = eq(s2_hit_state_state, UInt<2>("h1"))
    node T_2773 = eq(s2_hit_state_state, UInt<2>("h2"))
    node T_2774 = or(T_2772, T_2773)
    node s2_hit = mux(T_2771, T_2774, T_2774)
    node T_2778 = and(s2_valid_masked, s2_readwrite)
    node s2_valid_hit = and(T_2778, s2_hit)
    node T_2781 = eq(s2_hit, UInt<1>("h0"))
    node T_2782 = and(T_2778, T_2781)
    node T_2783 = or(pstore1_valid, pstore2_valid)
    node T_2785 = eq(T_2783, UInt<1>("h0"))
    node T_2786 = and(T_2782, T_2785)
    node T_2788 = eq(release_ack_wait, UInt<1>("h0"))
    node s2_valid_miss = and(T_2786, T_2788)
    node T_2790 = eq(s2_uncached, UInt<1>("h0"))
    node s2_valid_cached_miss = and(s2_valid_miss, T_2790)
    node s2_victimize = or(s2_valid_cached_miss, s2_flush_valid)
    node s2_valid_uncached = and(s2_valid_miss, s2_uncached)
    node T_2791 = neq(s2_hit_state_state, UInt<2>("h0"))
    node T_2793 = eq(s2_flush_valid, UInt<1>("h0"))
    node T_2794 = and(T_2791, T_2793)
    reg T_2796 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_2796)
    node GEN_27 = mux(T_2699, s1_victim_way, T_2796)
    node T_2798 = dshlw(UInt<4>("h1"), T_2796)
    node s2_victim_way = mux(T_2794, s2_hit_way, T_2798)
    reg s2_victim_tag : UInt<20>, clk with :
      reset => (UInt<1>("h0"), s2_victim_tag)
    wire GEN_0_tag : UInt<20>
    wire GEN_0_coh_state : UInt<2>
    node GEN_28 = mux(eq(UInt<2>("h1"), s1_victim_way), MetadataArray_1.io_resp_1_tag, MetadataArray_1.io_resp_0_tag)
    node GEN_29 = mux(eq(UInt<2>("h1"), s1_victim_way), MetadataArray_1.io_resp_1_coh_state, MetadataArray_1.io_resp_0_coh_state)
    node GEN_30 = mux(eq(UInt<2>("h2"), s1_victim_way), MetadataArray_1.io_resp_2_tag, GEN_28)
    node GEN_31 = mux(eq(UInt<2>("h2"), s1_victim_way), MetadataArray_1.io_resp_2_coh_state, GEN_29)
    node GEN_32 = mux(eq(UInt<2>("h3"), s1_victim_way), MetadataArray_1.io_resp_3_tag, GEN_30)
    node GEN_33 = mux(eq(UInt<2>("h3"), s1_victim_way), MetadataArray_1.io_resp_3_coh_state, GEN_31)
    node GEN_34 = mux(T_2699, GEN_0_tag, s2_victim_tag)
    reg T_2805_state : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_2805_state)
    wire GEN_1_tag : UInt<20>
    wire GEN_1_coh_state : UInt<2>
    node GEN_35 = mux(T_2699, GEN_1_coh_state, T_2805_state)
    node s2_victim_state_state = mux(T_2794, s2_hit_state_state, T_2805_state)
    node s2_victim_dirty = eq(s2_victim_state_state, UInt<2>("h2"))
    node T_2855 = mux(s2_write, UInt<2>("h2"), s2_hit_state_state)
    wire s2_new_hit_state_state : UInt<2>
    node T_2899 = eq(s2_hit_state_state, s2_new_hit_state_state)
    node s2_update_meta = eq(T_2899, UInt<1>("h0"))
    node T_2902 = eq(s2_valid_hit, UInt<1>("h0"))
    node T_2903 = and(s2_valid, T_2902)
    node T_2904 = and(s2_valid_uncached, io_mem_acquire_ready)
    node T_2906 = eq(T_2904, UInt<1>("h0"))
    node T_2907 = and(T_2903, T_2906)
    node T_2910 = or(T_2902, s2_update_meta)
    node T_2911 = and(s2_valid, T_2910)
    node GEN_36 = mux(T_2911, UInt<1>("h1"), T_2402)
    node T_2914 = bits(s1_req_typ, 1, 0)
    node T_2916 = dshlw(UInt<4>("h1"), T_2914)
    node T_2918 = sub(T_2916, UInt<4>("h1"))
    node T_2919 = tail(T_2918, 1)
    node T_2920 = bits(T_2919, 2, 0)
    node GEN_0 = pad(T_2920, 40)
    node T_2921 = and(s1_req_addr, GEN_0)
    node T_2923 = neq(T_2921, UInt<40>("h0"))
    node T_2924 = and(s1_read, T_2923)
    node T_2934 = and(s1_write, T_2923)
    node T_2935 = and(s1_read, tlb.io_resp_xcpt_ld)
    node T_2936 = and(s1_write, tlb.io_resp_xcpt_st)
    reg lrscCount : UInt<5>, clk with :
      reset => (reset, UInt<5>("h0"))
    node lrscValid = gt(lrscCount, UInt<5>("h0"))
    reg lrscAddr : UInt<34>, clk with :
      reset => (UInt<1>("h0"), lrscAddr)
    node T_2944 = shr(s2_req_addr, 6)
    node T_2945 = eq(lrscAddr, T_2944)
    node T_2946 = and(lrscValid, T_2945)
    node T_2948 = eq(T_2946, UInt<1>("h0"))
    node s2_sc_fail = and(T_2707, T_2948)
    node T_2949 = and(s2_valid_hit, T_2705)
    node GEN_37 = mux(T_2949, UInt<5>("h1f"), lrscCount)
    node GEN_38 = mux(T_2949, T_2944, lrscAddr)
    node T_2953 = sub(lrscCount, UInt<5>("h1"))
    node T_2954 = tail(T_2953, 1)
    node GEN_39 = mux(lrscValid, T_2954, GEN_37)
    node T_2955 = and(s2_valid_hit, T_2707)
    node T_2956 = or(T_2955, io_cpu_invalidate_lr)
    node GEN_40 = mux(T_2956, UInt<5>("h0"), GEN_39)
    node T_2958 = and(s1_valid_not_nacked, s1_write)
    reg pstore1_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), pstore1_cmd)
    node GEN_41 = mux(T_2958, s1_req_cmd, pstore1_cmd)
    reg pstore1_typ : UInt<3>, clk with :
      reset => (UInt<1>("h0"), pstore1_typ)
    node GEN_42 = mux(T_2958, s1_req_typ, pstore1_typ)
    reg pstore1_addr : UInt<32>, clk with :
      reset => (UInt<1>("h0"), pstore1_addr)
    node GEN_43 = mux(T_2958, s1_paddr, pstore1_addr)
    reg pstore1_data : UInt<64>, clk with :
      reset => (UInt<1>("h0"), pstore1_data)
    node GEN_44 = mux(T_2958, io_cpu_s1_data, pstore1_data)
    reg pstore1_way : UInt<4>, clk with :
      reset => (UInt<1>("h0"), pstore1_way)
    node GEN_45 = mux(T_2958, s1_hit_way, pstore1_way)
    node T_2963 = bits(pstore1_typ, 1, 0)
    node T_2965 = eq(T_2963, UInt<2>("h0"))
    node T_2966 = bits(pstore1_data, 7, 0)
    node T_2967 = cat(T_2966, T_2966)
    node T_2968 = cat(T_2967, T_2967)
    node T_2969 = cat(T_2968, T_2968)
    node T_2971 = eq(T_2963, UInt<2>("h1"))
    node T_2972 = bits(pstore1_data, 15, 0)
    node T_2973 = cat(T_2972, T_2972)
    node T_2974 = cat(T_2973, T_2973)
    node T_2976 = eq(T_2963, UInt<2>("h2"))
    node T_2977 = bits(pstore1_data, 31, 0)
    node T_2978 = cat(T_2977, T_2977)
    node T_2979 = mux(T_2976, T_2978, pstore1_data)
    node T_2980 = mux(T_2971, T_2974, T_2979)
    node T_2981 = mux(T_2965, T_2969, T_2980)
    wire pstore1_storegen_data : UInt<64>
    node T_2983 = eq(pstore1_cmd, UInt<5>("h0"))
    node T_2984 = eq(pstore1_cmd, UInt<5>("h6"))
    node T_2985 = or(T_2983, T_2984)
    node T_2986 = eq(pstore1_cmd, UInt<5>("h7"))
    node T_2987 = or(T_2985, T_2986)
    node T_2988 = bits(pstore1_cmd, 3, 3)
    node T_2989 = eq(pstore1_cmd, UInt<5>("h4"))
    node T_2990 = or(T_2988, T_2989)
    node T_2991 = or(T_2987, T_2990)
    node T_2992 = and(pstore1_valid, pstore2_valid)
    node T_2993 = and(s1_valid, s1_write)
    node T_2994 = or(T_2993, T_2991)
    node pstore_drain_structural = and(T_2992, T_2994)
    node pstore_drain_opportunistic = eq(T_2369, UInt<1>("h0"))
    node pstore_drain_on_miss = or(releaseInFlight, io_cpu_s2_nack)
    node T_3009 = eq(T_2991, UInt<1>("h0"))
    node T_3010 = and(pstore1_valid, T_3009)
    node T_3011 = or(T_3010, pstore2_valid)
    node T_3012 = or(pstore_drain_opportunistic, pstore_drain_on_miss)
    node T_3013 = and(T_3011, T_3012)
    node pstore_drain = or(pstore_drain_structural, T_3013)
    node T_3014 = and(s2_valid_hit, s2_write)
    node T_3016 = eq(s2_sc_fail, UInt<1>("h0"))
    node T_3017 = and(T_3014, T_3016)
    reg T_3019 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_3019)
    node T_3021 = eq(T_3017, UInt<1>("h0"))
    node T_3023 = eq(T_3019, UInt<1>("h0"))
    node T_3024 = or(T_3021, T_3023)
    node T_3025 = or(T_3024, reset)
    node T_3027 = eq(T_3025, UInt<1>("h0"))
    node T_3028 = or(T_3017, T_3019)
    node T_3029 = and(T_3028, pstore2_valid)
    node T_3031 = eq(pstore_drain, UInt<1>("h0"))
    node T_3032 = and(T_3029, T_3031)
    node T_3034 = eq(pstore2_valid, pstore_drain)
    node advance_pstore1 = and(pstore1_valid, T_3034)
    node T_3037 = and(pstore2_valid, T_3031)
    node T_3038 = or(T_3037, advance_pstore1)
    reg pstore2_addr : UInt<32>, clk with :
      reset => (UInt<1>("h0"), pstore2_addr)
    node GEN_46 = mux(advance_pstore1, pstore1_addr, pstore2_addr)
    reg pstore2_way : UInt<4>, clk with :
      reset => (UInt<1>("h0"), pstore2_way)
    node GEN_47 = mux(advance_pstore1, pstore1_way, pstore2_way)
    reg pstore2_storegen_data : UInt<64>, clk with :
      reset => (UInt<1>("h0"), pstore2_storegen_data)
    node GEN_48 = mux(advance_pstore1, pstore1_storegen_data, pstore2_storegen_data)
    node T_3040 = bits(pstore1_addr, 0, 0)
    node T_3044 = geq(T_2963, UInt<2>("h1"))
    node T_3048 = or(T_3040, T_3044)
    node T_3051 = mux(T_3040, UInt<1>("h0"), UInt<1>("h1"))
    node T_3052 = cat(T_3048, T_3051)
    node T_3053 = bits(pstore1_addr, 1, 1)
    node T_3055 = mux(T_3053, T_3052, UInt<2>("h0"))
    node T_3057 = geq(T_2963, UInt<2>("h2"))
    node T_3060 = mux(T_3057, UInt<2>("h3"), UInt<2>("h0"))
    node T_3061 = or(T_3055, T_3060)
    node T_3064 = mux(T_3053, UInt<2>("h0"), T_3052)
    node T_3065 = cat(T_3061, T_3064)
    node T_3066 = bits(pstore1_addr, 2, 2)
    node T_3068 = mux(T_3066, T_3065, UInt<4>("h0"))
    node T_3070 = geq(T_2963, UInt<2>("h3"))
    node T_3073 = mux(T_3070, UInt<4>("hf"), UInt<4>("h0"))
    node T_3074 = or(T_3068, T_3073)
    node T_3077 = mux(T_3066, UInt<4>("h0"), T_3065)
    node T_3078 = cat(T_3074, T_3077)
    reg pstore2_storegen_mask : UInt<8>, clk with :
      reset => (UInt<1>("h0"), pstore2_storegen_mask)
    node GEN_49 = mux(advance_pstore1, T_3078, pstore2_storegen_mask)
    node T_3080 = mux(pstore2_valid, pstore2_addr, pstore1_addr)
    node T_3081 = mux(pstore2_valid, pstore2_way, pstore1_way)
    node T_3082 = mux(pstore2_valid, pstore2_storegen_data, pstore1_storegen_data)
    node T_3125 = mux(pstore2_valid, pstore2_storegen_mask, T_3078)
    node GEN_127 = pad(T_3125, 23)
    node T_3126 = dshlw(GEN_127, UInt<4>("h0"))
    node s1_idx = bits(s1_req_addr, 11, 3)
    node T_3127 = bits(pstore1_addr, 11, 3)
    node T_3128 = eq(T_3127, s1_idx)
    node T_3129 = and(pstore1_valid, T_3128)
    node T_3171 = bits(s1_req_addr, 0, 0)
    node T_3175 = geq(T_2914, UInt<2>("h1"))
    node T_3179 = or(T_3171, T_3175)
    node T_3182 = mux(T_3171, UInt<1>("h0"), UInt<1>("h1"))
    node T_3183 = cat(T_3179, T_3182)
    node T_3184 = bits(s1_req_addr, 1, 1)
    node T_3186 = mux(T_3184, T_3183, UInt<2>("h0"))
    node T_3188 = geq(T_2914, UInt<2>("h2"))
    node T_3191 = mux(T_3188, UInt<2>("h3"), UInt<2>("h0"))
    node T_3192 = or(T_3186, T_3191)
    node T_3195 = mux(T_3184, UInt<2>("h0"), T_3183)
    node T_3196 = cat(T_3192, T_3195)
    node T_3197 = bits(s1_req_addr, 2, 2)
    node T_3199 = mux(T_3197, T_3196, UInt<4>("h0"))
    node T_3201 = geq(T_2914, UInt<2>("h3"))
    node T_3204 = mux(T_3201, UInt<4>("hf"), UInt<4>("h0"))
    node T_3205 = or(T_3199, T_3204)
    node T_3208 = mux(T_3197, UInt<4>("h0"), T_3196)
    node T_3209 = cat(T_3205, T_3208)
    node T_3210 = and(T_3078, T_3209)
    node T_3212 = neq(T_3210, UInt<8>("h0"))
    node T_3213 = and(T_3129, T_3212)
    node T_3214 = bits(pstore2_addr, 11, 3)
    node T_3215 = eq(T_3214, s1_idx)
    node T_3216 = and(pstore2_valid, T_3215)
    node T_3257 = and(pstore2_storegen_mask, T_3209)
    node T_3259 = neq(T_3257, UInt<8>("h0"))
    node T_3260 = and(T_3216, T_3259)
    node T_3261 = or(T_3213, T_3260)
    node s1_raw_hazard = and(s1_read, T_3261)
    node T_3262 = and(s1_valid, s1_raw_hazard)
    node GEN_50 = mux(T_3262, UInt<1>("h1"), GEN_36)
    node T_3264 = and(s2_valid_hit, s2_update_meta)
    node T_3266 = eq(s2_victim_dirty, UInt<1>("h0"))
    node T_3267 = and(s2_victimize, T_3266)
    node T_3268 = or(T_3264, T_3267)
    node T_3269 = bits(s2_req_addr, 11, 6)
    wire T_3293_state : UInt<2>
    node T_3315_state = mux(s2_valid_hit, s2_new_hit_state_state, UInt<2>("h0"))
    node T_3337 = bits(s2_req_addr, 31, 12)
    node T_3339 = bits(s2_req_addr, 31, 6)
    node T_3354 = cat(s2_req_cmd, UInt<1>("h1"))
    wire cachedGetMessage_addr_block : UInt<26>
    wire cachedGetMessage_client_xact_id : UInt<1>
    wire cachedGetMessage_addr_beat : UInt<3>
    wire cachedGetMessage_is_builtin_type : UInt<1>
    wire cachedGetMessage_a_type : UInt<3>
    wire cachedGetMessage_union : UInt<11>
    wire cachedGetMessage_data : UInt<64>
    node T_3414 = bits(s2_req_addr, 5, 3)
    node T_3415 = bits(s2_req_addr, 2, 0)
    node T_3446 = bits(s2_req_typ, 1, 0)
    node T_3456 = cat(T_3415, T_3446)
    node T_3457 = cat(T_3456, UInt<6>("h0"))
    wire uncachedGetMessage_addr_block : UInt<26>
    wire uncachedGetMessage_client_xact_id : UInt<1>
    wire uncachedGetMessage_addr_beat : UInt<3>
    wire uncachedGetMessage_is_builtin_type : UInt<1>
    wire uncachedGetMessage_a_type : UInt<3>
    wire uncachedGetMessage_union : UInt<11>
    wire uncachedGetMessage_data : UInt<64>
    node GEN_128 = pad(T_3078, 23)
    node T_3604 = dshlw(GEN_128, UInt<4>("h0"))
    node T_3642 = bits(T_3604, 7, 0)
    node T_3652 = cat(T_3642, UInt<1>("h0"))
    node T_3672 = pad(T_3652, 11)
    wire uncachedPutMessage_addr_block : UInt<26>
    wire uncachedPutMessage_client_xact_id : UInt<1>
    wire uncachedPutMessage_addr_beat : UInt<3>
    wire uncachedPutMessage_is_builtin_type : UInt<1>
    wire uncachedPutMessage_a_type : UInt<3>
    wire uncachedPutMessage_union : UInt<11>
    wire uncachedPutMessage_data : UInt<64>
    node T_3794 = cat(T_3456, T_3354)
    wire uncachedPutAtomicMessage_addr_block : UInt<26>
    wire uncachedPutAtomicMessage_client_xact_id : UInt<1>
    wire uncachedPutAtomicMessage_addr_beat : UInt<3>
    wire uncachedPutAtomicMessage_is_builtin_type : UInt<1>
    wire uncachedPutAtomicMessage_a_type : UInt<3>
    wire uncachedPutAtomicMessage_union : UInt<11>
    wire uncachedPutAtomicMessage_data : UInt<64>
    node T_3881 = and(s2_valid_cached_miss, T_3266)
    node T_3882 = or(T_3881, s2_valid_uncached)
    node T_3883 = and(T_3882, fq.io_enq_ready)
    node T_3885 = eq(s2_valid_masked, UInt<1>("h0"))
    node T_3888 = eq(T_2791, UInt<1>("h0"))
    node T_3889 = or(T_3885, T_3888)
    node T_3890 = or(T_3889, reset)
    node T_3892 = eq(T_3890, UInt<1>("h0"))
    node GEN_51 = mux(T_2991, uncachedPutAtomicMessage_addr_block, uncachedPutMessage_addr_block)
    node GEN_52 = mux(T_2991, UInt<1>("h0"), UInt<1>("h0"))
    node GEN_53 = mux(T_2991, uncachedPutAtomicMessage_addr_beat, uncachedPutMessage_addr_beat)
    node GEN_54 = mux(T_2991, UInt<1>("h1"), UInt<1>("h1"))
    node GEN_55 = mux(T_2991, UInt<3>("h4"), UInt<3>("h2"))
    node GEN_56 = mux(T_2991, uncachedPutAtomicMessage_union, uncachedPutMessage_union)
    node GEN_57 = mux(T_2991, uncachedPutAtomicMessage_data, uncachedPutMessage_data)
    node GEN_58 = mux(s2_write, GEN_51, uncachedGetMessage_addr_block)
    node GEN_59 = mux(s2_write, GEN_52, UInt<1>("h0"))
    node GEN_60 = mux(s2_write, GEN_53, uncachedGetMessage_addr_beat)
    node GEN_61 = mux(s2_write, GEN_54, UInt<1>("h1"))
    node GEN_62 = mux(s2_write, GEN_55, UInt<3>("h0"))
    node GEN_63 = mux(s2_write, GEN_56, uncachedGetMessage_union)
    node GEN_64 = mux(s2_write, GEN_57, UInt<64>("h0"))
    node GEN_65 = mux(s2_uncached, GEN_58, cachedGetMessage_addr_block)
    node GEN_66 = mux(s2_uncached, GEN_59, UInt<1>("h0"))
    node GEN_67 = mux(s2_uncached, GEN_60, UInt<3>("h0"))
    node GEN_68 = mux(s2_uncached, GEN_61, UInt<1>("h0"))
    node GEN_69 = mux(s2_uncached, GEN_62, cachedGetMessage_a_type)
    node GEN_70 = mux(s2_uncached, GEN_63, cachedGetMessage_union)
    node GEN_71 = mux(s2_uncached, GEN_64, UInt<64>("h0"))
    node T_3893 = and(io_mem_acquire_ready, io_mem_acquire_valid)
    node GEN_72 = mux(T_3893, UInt<1>("h1"), grant_wait)
    wire T_3902_0 : UInt<3>
    node GEN_129 = pad(UInt<3>("h5"), 4)
    node T_3904 = eq(io_mem_grant_bits_g_type, GEN_129)
    node T_3905 = eq(io_mem_grant_bits_g_type, UInt<4>("h0"))
    node T_3906 = mux(io_mem_grant_bits_is_builtin_type, T_3904, T_3905)
    node grantIsVoluntary = and(io_mem_grant_bits_is_builtin_type, T_3905)
    node T_3910 = eq(T_3906, UInt<1>("h0"))
    node T_3912 = eq(grantIsVoluntary, UInt<1>("h0"))
    node grantIsUncached = and(T_3910, T_3912)
    node T_3913 = and(grantIsVoluntary, release_ack_wait)
    node T_3914 = or(grant_wait, T_3913)
    node T_3915 = or(T_3914, reset)
    node T_3917 = eq(T_3915, UInt<1>("h0"))
    node GEN_73 = mux(grantIsUncached, io_mem_grant_bits_data, GEN_22)
    node GEN_74 = mux(grantIsVoluntary, UInt<1>("h0"), release_ack_wait)
    node GEN_75 = mux(io_mem_grant_valid, GEN_73, GEN_22)
    node GEN_76 = mux(io_mem_grant_valid, GEN_74, release_ack_wait)
    node T_3919 = and(io_mem_grant_ready, io_mem_grant_valid)
    node T_3920 = and(T_3919, T_3906)
    reg refillCount : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3923 = eq(refillCount, UInt<3>("h7"))
    node T_3925 = add(refillCount, UInt<3>("h1"))
    node T_3926 = tail(T_3925, 1)
    node GEN_77 = mux(T_3920, T_3926, refillCount)
    node refillDone = and(T_3920, T_3923)
    node grantDone = or(refillDone, grantIsUncached)
    node T_3928 = and(T_3919, grantDone)
    node GEN_78 = mux(T_3928, UInt<1>("h0"), GEN_72)
    node T_3930 = and(T_3906, io_mem_grant_valid)
    node T_3933 = eq(dataArb.io_in_1_valid, UInt<1>("h0"))
    node T_3934 = or(dataArb.io_in_1_ready, T_3933)
    node T_3935 = or(T_3934, reset)
    node T_3937 = eq(T_3935, UInt<1>("h0"))
    node T_3940 = cat(T_3339, io_mem_grant_bits_addr_beat)
    node GEN_130 = pad(T_3940, 32)
    node T_3941 = shlw(GEN_130, 3)
    node T_3945 = eq(metaWriteArb.io_in_1_valid, UInt<1>("h0"))
    node T_3946 = or(T_3945, metaWriteArb.io_in_1_ready)
    node T_3947 = or(T_3946, reset)
    node T_3949 = eq(T_3947, UInt<1>("h0"))
    node T_3958 = mux(s2_write, UInt<2>("h2"), UInt<2>("h1"))
    node T_3959 = mux(io_mem_grant_bits_is_builtin_type, UInt<2>("h0"), T_3958)
    wire T_3982_state : UInt<2>
    node T_4015 = and(T_3919, T_3912)
    node T_4018 = or(T_3910, refillDone)
    node T_4019 = and(T_4015, T_4018)
    wire T_4043_manager_xact_id : UInt<4>
    wire T_4043_manager_id : UInt<1>
    node T_4066 = or(fq.io_enq_ready, reset)
    node T_4068 = eq(T_4066, UInt<1>("h0"))
    node T_4070 = or(releaseInFlight, lrscValid)
    node block_probe = or(T_4070, T_2949)
    node T_4073 = eq(block_probe, UInt<1>("h0"))
    node T_4074 = and(io_mem_probe_valid, T_4073)
    node T_4077 = and(metaReadArb.io_in_1_ready, T_4073)
    node T_4079 = eq(s1_valid, UInt<1>("h0"))
    node T_4080 = and(T_4077, T_4079)
    node T_4082 = eq(s2_valid, UInt<1>("h0"))
    node T_4083 = or(T_4082, s2_valid_hit)
    node T_4084 = and(T_4080, T_4083)
    node T_4087 = and(io_mem_release_ready, io_mem_release_valid)
    node T_4088 = and(T_4087, inWriteback)
    reg writebackCount : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_4091 = eq(writebackCount, UInt<3>("h7"))
    node T_4093 = add(writebackCount, UInt<3>("h1"))
    node T_4094 = tail(T_4093, 1)
    node GEN_80 = mux(T_4088, T_4094, writebackCount)
    node writebackDone = and(T_4088, T_4091)
    node T_4097 = eq(inWriteback, UInt<1>("h0"))
    node T_4098 = and(T_4087, T_4097)
    node releaseDone = or(writebackDone, T_4098)
    node T_4100 = eq(io_mem_release_ready, UInt<1>("h0"))
    node releaseRejected = and(io_mem_release_valid, T_4100)
    node T_4101 = and(dataArb.io_in_2_ready, dataArb.io_in_2_valid)
    reg s1_release_data_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s1_release_data_valid)
    node T_4103 = eq(releaseRejected, UInt<1>("h0"))
    node T_4104 = and(s1_release_data_valid, T_4103)
    reg s2_release_data_valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s2_release_data_valid)
    node T_4106 = cat(UInt<1>("h0"), writebackCount)
    node T_4109 = cat(UInt<1>("h0"), s2_release_data_valid)
    node GEN_131 = pad(s1_release_data_valid, 2)
    node T_4110 = add(GEN_131, T_4109)
    node T_4111 = tail(T_4110, 1)
    node T_4112 = mux(releaseRejected, UInt<2>("h0"), T_4111)
    node GEN_132 = pad(T_4112, 4)
    node T_4113 = add(T_4106, GEN_132)
    node releaseDataBeat = tail(T_4113, 1)
    wire T_4137_state : UInt<2>
    node T_4162 = eq(UInt<2>("h0"), UInt<2>("h2"))
    node T_4163 = mux(T_4162, UInt<3>("h0"), UInt<3>("h3"))
    node T_4192 = eq(UInt<2>("h2"), probe_bits_p_type)
    node T_4193 = mux(T_4192, T_4163, UInt<3>("h3"))
    node T_4194 = eq(UInt<2>("h1"), probe_bits_p_type)
    node T_4195 = mux(T_4194, T_4163, T_4193)
    node T_4196 = eq(UInt<2>("h0"), probe_bits_p_type)
    node T_4197 = mux(T_4196, T_4163, T_4195)
    wire T_4226_addr_beat : UInt<3>
    wire T_4226_addr_block : UInt<26>
    wire T_4226_client_xact_id : UInt<1>
    wire T_4226_voluntary : UInt<1>
    wire T_4226_r_type : UInt<3>
    wire T_4226_data : UInt<64>
    node T_4259 = mux(s2_victim_dirty, UInt<3>("h0"), UInt<3>("h3"))
    wire voluntaryReleaseMessage_addr_beat : UInt<3>
    wire voluntaryReleaseMessage_addr_block : UInt<26>
    wire voluntaryReleaseMessage_client_xact_id : UInt<1>
    wire voluntaryReleaseMessage_voluntary : UInt<1>
    wire voluntaryReleaseMessage_r_type : UInt<3>
    wire voluntaryReleaseMessage_data : UInt<64>
    wire voluntaryNewCoh_state : UInt<2>
    node T_4373 = eq(s2_probe_state_state, UInt<2>("h2"))
    node T_4374 = mux(T_4373, UInt<3>("h0"), UInt<3>("h3"))
    node T_4404 = mux(T_4192, T_4374, UInt<3>("h3"))
    node T_4406 = mux(T_4194, T_4374, T_4404)
    node T_4408 = mux(T_4196, T_4374, T_4406)
    wire probeResponseMessage_addr_beat : UInt<3>
    wire probeResponseMessage_addr_block : UInt<26>
    wire probeResponseMessage_client_xact_id : UInt<1>
    wire probeResponseMessage_voluntary : UInt<1>
    wire probeResponseMessage_r_type : UInt<3>
    wire probeResponseMessage_data : UInt<64>
    node T_4464 = mux(T_4192, UInt<2>("h0"), s2_probe_state_state)
    node T_4466 = mux(T_4194, UInt<2>("h0"), T_4464)
    node T_4468 = mux(T_4196, UInt<2>("h0"), T_4466)
    wire probeNewCoh_state : UInt<2>
    wire newCoh_state : UInt<2>
    node T_4533 = and(s2_victimize, s2_victim_dirty)
    node T_4535 = and(s2_valid, T_2791)
    node T_4537 = eq(T_4535, UInt<1>("h0"))
    node T_4538 = or(T_4537, reset)
    node T_4540 = eq(T_4538, UInt<1>("h0"))
    node T_4542 = cat(s2_victim_tag, T_3269)
    node GEN_81 = mux(T_4533, UInt<3>("h2"), release_state)
    node GEN_82 = mux(T_4533, T_4542, GEN_3)
    node GEN_83 = mux(T_4373, UInt<3>("h3"), GEN_81)
    node T_4544 = neq(s2_probe_state_state, UInt<2>("h0"))
    node T_4546 = eq(T_4373, UInt<1>("h0"))
    node T_4547 = and(T_4546, T_4544)
    node GEN_84 = mux(T_4547, UInt<3>("h4"), GEN_83)
    node T_4551 = eq(T_4544, UInt<1>("h0"))
    node T_4552 = and(T_4546, T_4551)
    node GEN_85 = mux(T_4552, UInt<1>("h1"), s2_release_data_valid)
    node GEN_86 = mux(T_4552, UInt<3>("h5"), GEN_84)
    node GEN_87 = mux(s2_probe, GEN_86, GEN_81)
    node GEN_88 = mux(s2_probe, GEN_85, s2_release_data_valid)
    node GEN_89 = mux(releaseDone, UInt<3>("h0"), GEN_87)
    node T_4554 = eq(release_state, UInt<3>("h5"))
    node T_4555 = eq(release_state, UInt<3>("h4"))
    node T_4556 = or(T_4554, T_4555)
    node GEN_90 = mux(T_4556, UInt<1>("h1"), GEN_88)
    node T_4560 = or(T_4555, T_2351)
    node GEN_91 = mux(releaseDone, UInt<3>("h7"), GEN_89)
    node GEN_94 = mux(T_4560, UInt<1>("h0"), UInt<1>("h0"))
    node GEN_95 = mux(T_4560, UInt<1>("h0"), UInt<1>("h0"))
    node GEN_96 = mux(T_4560, probeResponseMessage_r_type, T_4226_r_type)
    node GEN_98 = mux(T_4560, GEN_91, GEN_89)
    node T_4562 = eq(release_state, UInt<3>("h6"))
    node T_4563 = or(T_2350, T_4562)
    node GEN_99 = mux(releaseDone, UInt<3>("h6"), GEN_98)
    node GEN_100 = mux(releaseDone, UInt<1>("h1"), GEN_76)
    node GEN_103 = mux(T_4563, UInt<1>("h0"), GEN_94)
    node GEN_104 = mux(T_4563, UInt<1>("h1"), GEN_95)
    node GEN_105 = mux(T_4563, voluntaryReleaseMessage_r_type, GEN_96)
    node GEN_107 = mux(T_4563, UInt<2>("h0"), probeNewCoh_state)
    node GEN_108 = mux(T_4563, s2_victim_way, s2_probe_way)
    node GEN_109 = mux(T_4563, GEN_99, GEN_98)
    node GEN_110 = mux(T_4563, GEN_100, GEN_76)
    node T_4567 = eq(T_4087, UInt<1>("h0"))
    node T_4568 = and(s2_probe, T_4567)
    node GEN_111 = mux(T_4568, UInt<1>("h1"), GEN_50)
    node T_4571 = lt(releaseDataBeat, UInt<4>("h8"))
    node T_4572 = and(inWriteback, T_4571)
    node T_4574 = bits(releaseDataBeat, 2, 0)
    node T_4575 = cat(io_mem_release_bits_addr_block, T_4574)
    node GEN_133 = pad(T_4575, 32)
    node T_4576 = shlw(GEN_133, 3)
    node T_4580 = eq(release_state, UInt<3>("h7"))
    node T_4581 = or(T_4562, T_4580)
    node T_4583 = cat(io_mem_release_bits_addr_block, io_mem_release_bits_addr_beat)
    node T_4584 = cat(T_4583, UInt<3>("h0"))
    node T_4585 = bits(T_4584, 11, 6)
    node T_4589 = bits(T_4584, 31, 12)
    node T_4590 = and(metaWriteArb.io_in_2_ready, metaWriteArb.io_in_2_valid)
    node GEN_112 = mux(T_4590, UInt<3>("h0"), GEN_109)
    node T_4592 = or(s1_valid, s2_valid)
    node T_4593 = or(T_4592, grant_wait)
    node T_4595 = eq(T_4593, UInt<1>("h0"))
    node T_4596 = and(io_mem_grant_valid, grantIsUncached)
    reg doUncachedResp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), doUncachedResp)
    node T_4599 = or(T_2902, reset)
    node T_4601 = eq(T_4599, UInt<1>("h0"))
    node GEN_113 = mux(doUncachedResp, UInt<1>("h1"), s2_valid_hit)
    node s2_data_word = dshr(s2_data, UInt<7>("h0"))
    node T_4606 = bits(s2_req_typ, 2, 2)
    node T_4608 = eq(T_4606, UInt<1>("h0"))
    node T_4610 = bits(s2_req_addr, 2, 2)
    node T_4611 = bits(s2_data_word, 63, 32)
    node T_4612 = bits(s2_data_word, 31, 0)
    node T_4613 = mux(T_4610, T_4611, T_4612)
    node T_4619 = eq(T_3446, UInt<2>("h2"))
    node T_4621 = bits(T_4613, 31, 31)
    node T_4622 = and(T_4608, T_4621)
    node T_4626 = mux(T_4622, UInt<32>("hffffffff"), UInt<32>("h0"))
    node T_4628 = mux(T_4619, T_4626, T_4611)
    node T_4629 = cat(T_4628, T_4613)
    node T_4630 = bits(s2_req_addr, 1, 1)
    node T_4631 = bits(T_4629, 31, 16)
    node T_4632 = bits(T_4629, 15, 0)
    node T_4633 = mux(T_4630, T_4631, T_4632)
    node T_4639 = eq(T_3446, UInt<2>("h1"))
    node T_4641 = bits(T_4633, 15, 15)
    node T_4642 = and(T_4608, T_4641)
    node T_4646 = mux(T_4642, UInt<48>("hffffffffffff"), UInt<48>("h0"))
    node T_4647 = bits(T_4629, 63, 16)
    node T_4648 = mux(T_4639, T_4646, T_4647)
    node T_4649 = cat(T_4648, T_4633)
    node T_4650 = bits(s2_req_addr, 0, 0)
    node T_4651 = bits(T_4649, 15, 8)
    node T_4652 = bits(T_4649, 7, 0)
    node T_4653 = mux(T_4650, T_4651, T_4652)
    node T_4657 = mux(T_2707, UInt<8>("h0"), T_4653)
    node T_4659 = eq(T_3446, UInt<2>("h0"))
    node T_4660 = or(T_4659, T_2707)
    node T_4661 = bits(T_4657, 7, 7)
    node T_4662 = and(T_4608, T_4661)
    node T_4666 = mux(T_4662, UInt<56>("hffffffffffffff"), UInt<56>("h0"))
    node T_4667 = bits(T_4649, 63, 8)
    node T_4668 = mux(T_4660, T_4666, T_4667)
    node T_4669 = cat(T_4668, T_4657)
    node GEN_134 = pad(s2_sc_fail, 64)
    node T_4670 = or(T_4669, GEN_134)
    inst AMOALU_1 of AMOALU
    reg flushed : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg flushing : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_4694 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    node T_4698 = and(T_3893, T_2790)
    node GEN_115 = mux(T_4698, UInt<1>("h0"), flushed)
    node T_4700 = eq(s2_req_cmd, UInt<5>("h5"))
    node T_4701 = and(s2_valid_masked, T_4700)
    node T_4703 = eq(flushed, UInt<1>("h0"))
    node GEN_116 = mux(T_4703, T_2788, flushing)
    node GEN_117 = mux(T_4701, T_4703, T_2907)
    node GEN_118 = mux(T_4701, GEN_116, flushing)
    node T_4708 = and(metaReadArb.io_in_0_ready, metaReadArb.io_in_0_valid)
    node T_4710 = eq(s1_flush_valid, UInt<1>("h0"))
    node T_4711 = and(T_4708, T_4710)
    node T_4714 = and(T_4711, T_2793)
    node T_4716 = and(T_4714, T_2353)
    node T_4719 = and(T_4716, T_2788)
    node T_4722 = shr(T_4694, 6)
    node T_4724 = eq(T_4694, UInt<8>("hff"))
    node T_4726 = add(T_4694, UInt<8>("h1"))
    node T_4727 = tail(T_4726, 1)
    node GEN_119 = mux(T_4724, UInt<1>("h1"), GEN_115)
    node GEN_120 = mux(s2_flush_valid, T_4727, T_4694)
    node GEN_121 = mux(s2_flush_valid, GEN_119, GEN_115)
    node T_4730 = and(flushed, T_2353)
    node T_4733 = and(T_4730, T_2788)
    node GEN_122 = mux(T_4733, UInt<1>("h0"), GEN_118)
    node GEN_123 = mux(flushing, T_4722, T_2407)
    node GEN_124 = mux(flushing, GEN_120, T_4694)
    node GEN_125 = mux(flushing, GEN_121, GEN_115)
    node GEN_126 = mux(flushing, GEN_122, GEN_118)
    io_cpu_req_ready <= GEN_13
    io_cpu_s2_nack <= GEN_117
    io_cpu_resp_valid <= GEN_113
    io_cpu_resp_bits_addr <= s2_req_addr
    io_cpu_resp_bits_tag <= s2_req_tag
    io_cpu_resp_bits_cmd <= s2_req_cmd
    io_cpu_resp_bits_typ <= s2_req_typ
    io_cpu_resp_bits_data <= T_4670
    io_cpu_resp_bits_replay <= doUncachedResp
    io_cpu_resp_bits_has_data <= s2_read
    io_cpu_resp_bits_data_word_bypass <= T_4629
    io_cpu_resp_bits_store_data <= pstore1_data
    io_cpu_replay_next <= T_4596
    io_cpu_xcpt_ma_ld <= T_2924
    io_cpu_xcpt_ma_st <= T_2934
    io_cpu_xcpt_pf_ld <= T_2935
    io_cpu_xcpt_pf_st <= T_2936
    io_cpu_ordered <= T_4595
    io_ptw_req_valid <= tlb.io_ptw_req_valid
    io_ptw_req_bits_prv <= tlb.io_ptw_req_bits_prv
    io_ptw_req_bits_pum <= tlb.io_ptw_req_bits_pum
    io_ptw_req_bits_mxr <= tlb.io_ptw_req_bits_mxr
    io_ptw_req_bits_addr <= tlb.io_ptw_req_bits_addr
    io_ptw_req_bits_store <= tlb.io_ptw_req_bits_store
    io_ptw_req_bits_fetch <= tlb.io_ptw_req_bits_fetch
    io_mem_acquire_valid <= T_3883
    io_mem_acquire_bits_addr_block <= GEN_65
    io_mem_acquire_bits_client_xact_id <= GEN_66
    io_mem_acquire_bits_addr_beat <= GEN_67
    io_mem_acquire_bits_is_builtin_type <= GEN_68
    io_mem_acquire_bits_a_type <= GEN_69
    io_mem_acquire_bits_union <= GEN_70
    io_mem_acquire_bits_data <= GEN_71
    io_mem_probe_ready <= T_4084
    io_mem_release_valid <= GEN_90
    io_mem_release_bits_addr_beat <= writebackCount
    io_mem_release_bits_addr_block <= probe_bits_addr_block
    io_mem_release_bits_client_xact_id <= GEN_103
    io_mem_release_bits_voluntary <= GEN_104
    io_mem_release_bits_r_type <= GEN_105
    io_mem_release_bits_data <= s2_data
    io_mem_grant_ready <= UInt<1>("h1")
    io_mem_finish_valid <= fq.io_deq_valid
    io_mem_finish_bits_manager_xact_id <= fq.io_deq_bits_manager_xact_id
    io_mem_finish_bits_manager_id <= fq.io_deq_bits_manager_id
    fq.io_enq_valid <= T_4019
    fq.io_enq_bits_manager_xact_id <= T_4043_manager_xact_id
    fq.io_enq_bits_manager_id <= T_4043_manager_id
    fq.io_deq_ready <= io_mem_finish_ready
    T_1926 <= refillDone
    T_1929 <= GEN_2
    metaReadArb.io_in_0_valid <= flushing
    metaReadArb.io_in_0_bits_idx <= bits(T_4694, 5, 0)
    metaReadArb.io_in_0_bits_way_en <= UInt<4>("hf")
    metaReadArb.io_in_1_valid <= T_4074
    metaReadArb.io_in_1_bits_idx <= bits(io_mem_probe_bits_addr_block, 5, 0)
    metaReadArb.io_in_1_bits_way_en <= UInt<4>("hf")
    metaReadArb.io_in_2_valid <= io_cpu_req_valid
    metaReadArb.io_in_2_bits_idx <= T_2386
    metaReadArb.io_in_2_bits_way_en <= UInt<4>("hf")
    metaReadArb.io_out_ready <= MetadataArray_1.io_read_ready
    metaWriteArb.io_in_0_valid <= T_3268
    metaWriteArb.io_in_0_bits_idx <= T_3269
    metaWriteArb.io_in_0_bits_way_en <= s2_victim_way
    metaWriteArb.io_in_0_bits_data_tag <= T_3337
    metaWriteArb.io_in_0_bits_data_coh_state <= T_3315_state
    metaWriteArb.io_in_1_valid <= refillDone
    metaWriteArb.io_in_1_bits_idx <= T_3269
    metaWriteArb.io_in_1_bits_way_en <= s2_victim_way
    metaWriteArb.io_in_1_bits_data_tag <= T_3337
    metaWriteArb.io_in_1_bits_data_coh_state <= T_3982_state
    metaWriteArb.io_in_2_valid <= T_4581
    metaWriteArb.io_in_2_bits_idx <= T_4585
    metaWriteArb.io_in_2_bits_way_en <= releaseWay
    metaWriteArb.io_in_2_bits_data_tag <= T_4589
    metaWriteArb.io_in_2_bits_data_coh_state <= newCoh_state
    metaWriteArb.io_out_ready <= MetadataArray_1.io_write_ready
    data.io_req_valid <= dataArb.io_out_valid
    data.io_req_bits_addr <= dataArb.io_out_bits_addr
    data.io_req_bits_write <= dataArb.io_out_bits_write
    data.io_req_bits_wdata <= dataArb.io_out_bits_wdata
    data.io_req_bits_wmask <= dataArb.io_out_bits_wmask
    data.io_req_bits_way_en <= dataArb.io_out_bits_way_en
    dataArb.io_in_0_valid <= pstore_drain
    dataArb.io_in_0_bits_addr <= bits(T_3080, 11, 0)
    dataArb.io_in_0_bits_write <= UInt<1>("h1")
    dataArb.io_in_0_bits_wdata <= T_3082
    dataArb.io_in_0_bits_wmask <= bits(T_3126, 7, 0)
    dataArb.io_in_0_bits_way_en <= T_3081
    dataArb.io_in_1_valid <= T_3930
    dataArb.io_in_1_bits_addr <= bits(T_3941, 11, 0)
    dataArb.io_in_1_bits_write <= UInt<1>("h1")
    dataArb.io_in_1_bits_wdata <= io_mem_grant_bits_data
    dataArb.io_in_1_bits_wmask <= UInt<8>("hff")
    dataArb.io_in_1_bits_way_en <= s2_victim_way
    dataArb.io_in_2_valid <= T_4572
    dataArb.io_in_2_bits_addr <= bits(T_4576, 11, 0)
    dataArb.io_in_2_bits_write <= UInt<1>("h0")
    dataArb.io_in_2_bits_wdata <= UInt<64>("hf5149505c254628d")
    dataArb.io_in_2_bits_wmask <= UInt<8>("h90")
    dataArb.io_in_2_bits_way_en <= UInt<4>("hf")
    dataArb.io_in_3_valid <= T_2369
    dataArb.io_in_3_bits_addr <= bits(io_cpu_req_bits_addr, 11, 0)
    dataArb.io_in_3_bits_write <= UInt<1>("h0")
    dataArb.io_in_3_bits_wdata <= UInt<64>("hf33c5914c974d3ef")
    dataArb.io_in_3_bits_wmask <= UInt<8>("h5e")
    dataArb.io_in_3_bits_way_en <= UInt<4>("hf")
    dataArb.io_out_ready <= UInt<1>("h1")
    s1_valid <= T_2220
    s1_probe <= T_2222
    probe_bits_addr_block <= GEN_82
    probe_bits_p_type <= GEN_4
    s1_nack <= GEN_111
    s1_req_addr <= GEN_5
    s1_req_tag <= GEN_6
    s1_req_cmd <= GEN_7
    s1_req_typ <= GEN_8
    s1_req_phys <= GEN_9
    s1_req_data <= GEN_10
    s1_flush_valid <= T_4719
    grant_wait <= GEN_78
    release_ack_wait <= GEN_110
    release_state <= GEN_112
    pstore1_valid <= T_3028
    pstore2_valid <= T_3038
    releaseWay <= GEN_108
    tlb.io_req_valid <= T_2392
    tlb.io_req_bits_vpn <= T_2393
    tlb.io_req_bits_passthrough <= s1_req_phys
    tlb.io_req_bits_instruction <= UInt<1>("h0")
    tlb.io_req_bits_store <= s1_write
    tlb.io_ptw_req_ready <= io_ptw_req_ready
    tlb.io_ptw_resp_valid <= io_ptw_resp_valid
    tlb.io_ptw_resp_bits_pte_reserved_for_hardware <= io_ptw_resp_bits_pte_reserved_for_hardware
    tlb.io_ptw_resp_bits_pte_ppn <= io_ptw_resp_bits_pte_ppn
    tlb.io_ptw_resp_bits_pte_reserved_for_software <= io_ptw_resp_bits_pte_reserved_for_software
    tlb.io_ptw_resp_bits_pte_d <= io_ptw_resp_bits_pte_d
    tlb.io_ptw_resp_bits_pte_a <= io_ptw_resp_bits_pte_a
    tlb.io_ptw_resp_bits_pte_g <= io_ptw_resp_bits_pte_g
    tlb.io_ptw_resp_bits_pte_u <= io_ptw_resp_bits_pte_u
    tlb.io_ptw_resp_bits_pte_x <= io_ptw_resp_bits_pte_x
    tlb.io_ptw_resp_bits_pte_w <= io_ptw_resp_bits_pte_w
    tlb.io_ptw_resp_bits_pte_r <= io_ptw_resp_bits_pte_r
    tlb.io_ptw_resp_bits_pte_v <= io_ptw_resp_bits_pte_v
    tlb.io_ptw_ptbr_asid <= io_ptw_ptbr_asid
    tlb.io_ptw_ptbr_ppn <= io_ptw_ptbr_ppn
    tlb.io_ptw_invalidate <= io_ptw_invalidate
    tlb.io_ptw_status_debug <= io_ptw_status_debug
    tlb.io_ptw_status_isa <= io_ptw_status_isa
    tlb.io_ptw_status_prv <= io_ptw_status_prv
    tlb.io_ptw_status_sd <= io_ptw_status_sd
    tlb.io_ptw_status_zero3 <= io_ptw_status_zero3
    tlb.io_ptw_status_sd_rv32 <= io_ptw_status_sd_rv32
    tlb.io_ptw_status_zero2 <= io_ptw_status_zero2
    tlb.io_ptw_status_vm <= io_ptw_status_vm
    tlb.io_ptw_status_zero1 <= io_ptw_status_zero1
    tlb.io_ptw_status_mxr <= io_ptw_status_mxr
    tlb.io_ptw_status_pum <= io_ptw_status_pum
    tlb.io_ptw_status_mprv <= io_ptw_status_mprv
    tlb.io_ptw_status_xs <= io_ptw_status_xs
    tlb.io_ptw_status_fs <= io_ptw_status_fs
    tlb.io_ptw_status_mpp <= io_ptw_status_mpp
    tlb.io_ptw_status_hpp <= io_ptw_status_hpp
    tlb.io_ptw_status_spp <= io_ptw_status_spp
    tlb.io_ptw_status_mpie <= io_ptw_status_mpie
    tlb.io_ptw_status_hpie <= io_ptw_status_hpie
    tlb.io_ptw_status_spie <= io_ptw_status_spie
    tlb.io_ptw_status_upie <= io_ptw_status_upie
    tlb.io_ptw_status_mie <= io_ptw_status_mie
    tlb.io_ptw_status_hie <= io_ptw_status_hie
    tlb.io_ptw_status_sie <= io_ptw_status_sie
    tlb.io_ptw_status_uie <= io_ptw_status_uie
    s1_victim_way <= GEN_123
    MetadataArray_1.io_read_valid <= metaReadArb.io_out_valid
    MetadataArray_1.io_read_bits_idx <= metaReadArb.io_out_bits_idx
    MetadataArray_1.io_read_bits_way_en <= metaReadArb.io_out_bits_way_en
    MetadataArray_1.io_write_valid <= metaWriteArb.io_out_valid
    MetadataArray_1.io_write_bits_idx <= metaWriteArb.io_out_bits_idx
    MetadataArray_1.io_write_bits_way_en <= metaWriteArb.io_out_bits_way_en
    MetadataArray_1.io_write_bits_data_tag <= metaWriteArb.io_out_bits_data_tag
    MetadataArray_1.io_write_bits_data_coh_state <= metaWriteArb.io_out_bits_data_coh_state
    s1_hit_state_state <= T_2481
    s1_data <= T_2624
    s2_valid <= s1_valid_masked
    s2_probe <= s1_probe
    T_2631 <= T_2259
    s2_req_addr <= GEN_15
    s2_req_tag <= GEN_16
    s2_req_cmd <= GEN_17
    s2_req_typ <= GEN_18
    s2_req_phys <= GEN_19
    s2_req_data <= GEN_20
    s2_uncached <= GEN_21
    s2_flush_valid <= s1_flush_valid
    s2_data <= GEN_75
    s2_probe_way <= GEN_23
    s2_probe_state_state <= GEN_24
    s2_hit_way <= GEN_25
    s2_hit_state_state <= GEN_26
    T_2796 <= GEN_27
    s2_victim_tag <= GEN_34
    GEN_0_tag <= GEN_32
    GEN_0_coh_state <= GEN_33
    T_2805_state <= GEN_35
    GEN_1_tag <= GEN_32
    GEN_1_coh_state <= GEN_33
    s2_new_hit_state_state <= T_2855
    lrscCount <= GEN_40
    lrscAddr <= GEN_38
    pstore1_cmd <= GEN_41
    pstore1_typ <= GEN_42
    pstore1_addr <= GEN_43
    pstore1_data <= GEN_44
    pstore1_way <= GEN_45
    pstore1_storegen_data <= AMOALU_1.io_out
    T_3019 <= T_3032
    pstore2_addr <= GEN_46
    pstore2_way <= GEN_47
    pstore2_storegen_data <= GEN_48
    pstore2_storegen_mask <= GEN_49
    cachedGetMessage_addr_block <= T_3339
    cachedGetMessage_a_type <= pad(T_2771, 3)
    cachedGetMessage_union <= pad(T_3354, 11)
    uncachedGetMessage_addr_block <= T_3339
    uncachedGetMessage_addr_beat <= T_3414
    uncachedGetMessage_union <= T_3457
    uncachedPutMessage_addr_block <= T_3339
    uncachedPutMessage_addr_beat <= T_3414
    uncachedPutMessage_union <= T_3672
    uncachedPutMessage_data <= T_2981
    uncachedPutAtomicMessage_addr_block <= T_3339
    uncachedPutAtomicMessage_addr_beat <= T_3414
    uncachedPutAtomicMessage_union <= T_3794
    uncachedPutAtomicMessage_data <= T_2981
    refillCount <= GEN_77
    T_3982_state <= T_3959
    T_4043_manager_xact_id <= io_mem_grant_bits_manager_xact_id
    T_4043_manager_id <= io_mem_grant_bits_manager_id
    writebackCount <= GEN_80
    s1_release_data_valid <= T_4101
    s2_release_data_valid <= T_4104
    T_4226_addr_block <= probe_bits_addr_block
    T_4226_r_type <= T_4197
    voluntaryReleaseMessage_r_type <= T_4259
    probeResponseMessage_addr_block <= probe_bits_addr_block
    probeResponseMessage_r_type <= T_4408
    probeNewCoh_state <= T_4468
    newCoh_state <= GEN_107
    doUncachedResp <= io_cpu_replay_next
    AMOALU_1.io_addr <= bits(pstore1_addr, 2, 0)
    AMOALU_1.io_cmd <= pstore1_cmd
    AMOALU_1.io_typ <= bits(pstore1_typ, 1, 0)
    AMOALU_1.io_lhs <= s2_data_word
    AMOALU_1.io_rhs <= pstore1_data
    flushed <= GEN_125
    flushing <= GEN_126
    T_4694 <= GEN_124
    printf(clk, T_3027, "Assertion failed\n    at dcache.scala:214 assert(!s2_store_valid || !pstore1_held)\n")
    stop(clk, T_3027, 1)
    printf(clk, and(s2_uncached, T_3892), "Assertion failed: cache hit on uncached access\n    at dcache.scala:277 assert(!s2_valid_masked || !s2_hit_state.isValid(), \"cache hit on uncached access\")\n")
    stop(clk, and(s2_uncached, T_3892), 1)
    printf(clk, and(io_mem_grant_valid, T_3917), "Assertion failed: unexpected grant\n    at dcache.scala:293 assert(grant_wait || grantIsVoluntary && release_ack_wait, \"unexpected grant\")\n")
    stop(clk, and(io_mem_grant_valid, T_3917), 1)
    printf(clk, T_3937, "Assertion failed\n    at dcache.scala:304 assert(dataArb.io.in(1).ready || !dataArb.io.in(1).valid)\n")
    stop(clk, T_3937, 1)
    printf(clk, T_3949, "Assertion failed\n    at dcache.scala:312 assert(!metaWriteArb.io.in(1).valid || metaWriteArb.io.in(1).ready)\n")
    stop(clk, T_3949, 1)
    printf(clk, and(fq.io_enq_valid, T_4068), "Assertion failed\n    at dcache.scala:322 when (fq.io.enq.valid) { assert(fq.io.enq.ready) }\n")
    stop(clk, and(fq.io_enq_valid, T_4068), 1)
    printf(clk, and(T_4533, T_4540), "Assertion failed\n    at dcache.scala:348 assert(!(s2_valid && s2_hit_state.isValid()))\n")
    stop(clk, and(T_4533, T_4540), 1)
    printf(clk, and(doUncachedResp, T_4601), "Assertion failed\n    at dcache.scala:405 assert(!s2_valid_hit)\n")
    stop(clk, and(doUncachedResp, T_4601), 1)

  module FPUDecoder :
    input clk : Clock
    input reset : UInt<1>
    input io_inst : UInt<32>
    output io_sigs_cmd : UInt<5>
    output io_sigs_ldst : UInt<1>
    output io_sigs_wen : UInt<1>
    output io_sigs_ren1 : UInt<1>
    output io_sigs_ren2 : UInt<1>
    output io_sigs_ren3 : UInt<1>
    output io_sigs_swap12 : UInt<1>
    output io_sigs_swap23 : UInt<1>
    output io_sigs_single : UInt<1>
    output io_sigs_fromint : UInt<1>
    output io_sigs_toint : UInt<1>
    output io_sigs_fastpipe : UInt<1>
    output io_sigs_fma : UInt<1>
    output io_sigs_div : UInt<1>
    output io_sigs_sqrt : UInt<1>
    output io_sigs_round : UInt<1>
    output io_sigs_wflags : UInt<1>
  
    node T_20 = and(io_inst, UInt<32>("h4"))
    node T_22 = eq(T_20, UInt<32>("h4"))
    node T_24 = and(io_inst, UInt<32>("h8000010"))
    node T_26 = eq(T_24, UInt<32>("h8000010"))
    node T_29 = or(T_22, T_26)
    node T_31 = and(io_inst, UInt<32>("h8"))
    node T_33 = eq(T_31, UInt<32>("h8"))
    node T_35 = and(io_inst, UInt<32>("h10000010"))
    node T_37 = eq(T_35, UInt<32>("h10000010"))
    node T_40 = or(T_33, T_37)
    node T_42 = and(io_inst, UInt<32>("h40"))
    node T_44 = eq(T_42, UInt<32>("h0"))
    node T_46 = and(io_inst, UInt<32>("h20000000"))
    node T_48 = eq(T_46, UInt<32>("h20000000"))
    node T_51 = or(T_44, T_48)
    node T_53 = and(io_inst, UInt<32>("h40000000"))
    node T_55 = eq(T_53, UInt<32>("h40000000"))
    node T_58 = or(T_44, T_55)
    node T_60 = and(io_inst, UInt<32>("h10"))
    node T_62 = eq(T_60, UInt<32>("h0"))
    node T_65 = cat(T_40, T_29)
    node T_66 = cat(T_62, T_58)
    node T_67 = cat(T_66, T_51)
    node decoder_0 = cat(T_67, T_65)
    node T_70 = and(io_inst, UInt<32>("h80000020"))
    node T_72 = eq(T_70, UInt<32>("h0"))
    node T_74 = and(io_inst, UInt<32>("h30"))
    node T_76 = eq(T_74, UInt<32>("h0"))
    node T_78 = and(io_inst, UInt<32>("h10000020"))
    node T_80 = eq(T_78, UInt<32>("h10000000"))
    node T_83 = or(T_72, T_76)
    node decoder_2 = or(T_83, T_80)
    node T_85 = and(io_inst, UInt<32>("h80000004"))
    node T_87 = eq(T_85, UInt<32>("h0"))
    node T_89 = and(io_inst, UInt<32>("h10000004"))
    node T_91 = eq(T_89, UInt<32>("h0"))
    node T_93 = and(io_inst, UInt<32>("h50"))
    node T_95 = eq(T_93, UInt<32>("h40"))
    node T_98 = or(T_87, T_91)
    node decoder_3 = or(T_98, T_95)
    node T_100 = and(io_inst, UInt<32>("h40000004"))
    node T_102 = eq(T_100, UInt<32>("h0"))
    node T_104 = and(io_inst, UInt<32>("h20"))
    node T_106 = eq(T_104, UInt<32>("h20"))
    node T_109 = or(T_102, T_106)
    node decoder_4 = or(T_109, T_95)
    node T_112 = and(io_inst, UInt<32>("h50000010"))
    node T_114 = eq(T_112, UInt<32>("h50000010"))
    node decoder_6 = or(T_44, T_114)
    node T_118 = and(io_inst, UInt<32>("h30000010"))
    node T_120 = eq(T_118, UInt<32>("h10"))
    node T_123 = and(io_inst, UInt<32>("h1040"))
    node T_125 = eq(T_123, UInt<32>("h0"))
    node T_127 = and(io_inst, UInt<32>("h2000040"))
    node T_129 = eq(T_127, UInt<32>("h40"))
    node decoder_8 = or(T_125, T_129)
    node T_133 = and(io_inst, UInt<32>("h90000010"))
    node T_135 = eq(T_133, UInt<32>("h90000010"))
    node T_140 = eq(T_133, UInt<32>("h80000010"))
    node decoder_10 = or(T_106, T_140)
    node T_144 = and(io_inst, UInt<32>("ha0000010"))
    node T_146 = eq(T_144, UInt<32>("h20000010"))
    node T_148 = and(io_inst, UInt<32>("hd0000010"))
    node T_150 = eq(T_148, UInt<32>("h40000010"))
    node decoder_11 = or(T_146, T_150)
    node T_154 = and(io_inst, UInt<32>("h70000004"))
    node T_156 = eq(T_154, UInt<32>("h0"))
    node T_158 = and(io_inst, UInt<32>("h68000004"))
    node T_160 = eq(T_158, UInt<32>("h0"))
    node T_163 = or(T_156, T_160)
    node decoder_12 = or(T_163, T_95)
    node T_165 = and(io_inst, UInt<32>("h58000010"))
    node T_167 = eq(T_165, UInt<32>("h18000010"))
    node T_172 = eq(T_148, UInt<32>("h50000010"))
    node T_175 = and(io_inst, UInt<32>("h20000004"))
    node T_177 = eq(T_175, UInt<32>("h0"))
    node T_179 = and(io_inst, UInt<32>("h40002000"))
    node T_181 = eq(T_179, UInt<32>("h40000000"))
    node T_184 = or(T_177, T_95)
    node decoder_15 = or(T_184, T_181)
    node T_186 = and(io_inst, UInt<32>("h8002000"))
    node T_188 = eq(T_186, UInt<32>("h8000000"))
    node T_190 = and(io_inst, UInt<32>("hc0000004"))
    node T_192 = eq(T_190, UInt<32>("h80000000"))
    node T_196 = or(T_184, T_188)
    node decoder_16 = or(T_196, T_192)
    io_sigs_cmd <= decoder_0
    io_sigs_ldst <= T_44
    io_sigs_wen <= decoder_2
    io_sigs_ren1 <= decoder_3
    io_sigs_ren2 <= decoder_4
    io_sigs_ren3 <= T_95
    io_sigs_swap12 <= decoder_6
    io_sigs_swap23 <= T_120
    io_sigs_single <= decoder_8
    io_sigs_fromint <= T_135
    io_sigs_toint <= decoder_10
    io_sigs_fastpipe <= decoder_11
    io_sigs_fma <= decoder_12
    io_sigs_div <= T_167
    io_sigs_sqrt <= T_172
    io_sigs_round <= decoder_15
    io_sigs_wflags <= decoder_16

  module MulAddRecFN_preMul :
    input clk : Clock
    input reset : UInt<1>
    input io_op : UInt<2>
    input io_a : UInt<33>
    input io_b : UInt<33>
    input io_c : UInt<33>
    input io_roundingMode : UInt<2>
    output io_mulAddA : UInt<24>
    output io_mulAddB : UInt<24>
    output io_mulAddC : UInt<48>
    output io_toPostMul_highExpA : UInt<3>
    output io_toPostMul_isNaN_isQuietNaNA : UInt<1>
    output io_toPostMul_highExpB : UInt<3>
    output io_toPostMul_isNaN_isQuietNaNB : UInt<1>
    output io_toPostMul_signProd : UInt<1>
    output io_toPostMul_isZeroProd : UInt<1>
    output io_toPostMul_opSignC : UInt<1>
    output io_toPostMul_highExpC : UInt<3>
    output io_toPostMul_isNaN_isQuietNaNC : UInt<1>
    output io_toPostMul_isCDominant : UInt<1>
    output io_toPostMul_CAlignDist_0 : UInt<1>
    output io_toPostMul_CAlignDist : UInt<7>
    output io_toPostMul_bit0AlignedNegSigC : UInt<1>
    output io_toPostMul_highAlignedNegSigC : UInt<26>
    output io_toPostMul_sExpSum : UInt<11>
    output io_toPostMul_roundingMode : UInt<2>
  
    node signA = bits(io_a, 32, 32)
    node expA = bits(io_a, 31, 23)
    node fractA = bits(io_a, 22, 0)
    node T_42 = bits(expA, 8, 6)
    node isZeroA = eq(T_42, UInt<3>("h0"))
    node T_45 = eq(isZeroA, UInt<1>("h0"))
    node sigA = cat(T_45, fractA)
    node signB = bits(io_b, 32, 32)
    node expB = bits(io_b, 31, 23)
    node fractB = bits(io_b, 22, 0)
    node T_46 = bits(expB, 8, 6)
    node isZeroB = eq(T_46, UInt<3>("h0"))
    node T_49 = eq(isZeroB, UInt<1>("h0"))
    node sigB = cat(T_49, fractB)
    node T_50 = bits(io_c, 32, 32)
    node T_51 = bits(io_op, 0, 0)
    node opSignC = xor(T_50, T_51)
    node expC = bits(io_c, 31, 23)
    node fractC = bits(io_c, 22, 0)
    node T_52 = bits(expC, 8, 6)
    node isZeroC = eq(T_52, UInt<3>("h0"))
    node T_55 = eq(isZeroC, UInt<1>("h0"))
    node sigC = cat(T_55, fractC)
    node T_56 = xor(signA, signB)
    node T_57 = bits(io_op, 1, 1)
    node signProd = xor(T_56, T_57)
    node isZeroProd = or(isZeroA, isZeroB)
    node T_58 = bits(expB, 8, 8)
    node T_60 = eq(T_58, UInt<1>("h0"))
    node T_64 = mux(T_60, UInt<3>("h7"), UInt<3>("h0"))
    node T_65 = bits(expB, 7, 0)
    node T_66 = cat(T_64, T_65)
    node GEN_0 = pad(expA, 11)
    node T_67 = add(GEN_0, T_66)
    node T_68 = tail(T_67, 1)
    node T_70 = add(T_68, UInt<11>("h1b"))
    node sExpAlignedProd = tail(T_70, 1)
    node doSubMags = xor(signProd, opSignC)
    node GEN_1 = pad(expC, 11)
    node T_71 = sub(sExpAlignedProd, GEN_1)
    node sNatCAlignDist = tail(T_71, 1)
    node T_72 = bits(sNatCAlignDist, 10, 10)
    node CAlignDist_floor = or(isZeroProd, T_72)
    node T_73 = bits(sNatCAlignDist, 9, 0)
    node T_75 = eq(T_73, UInt<10>("h0"))
    node CAlignDist_0 = or(CAlignDist_floor, T_75)
    node T_80 = lt(T_73, UInt<10>("h19"))
    node T_81 = or(CAlignDist_floor, T_80)
    node isCDominant = and(T_55, T_81)
    node T_85 = lt(T_73, UInt<10>("h4a"))
    node T_86 = bits(sNatCAlignDist, 6, 0)
    node T_88 = mux(T_85, T_86, UInt<7>("h4a"))
    node CAlignDist = mux(CAlignDist_floor, UInt<7>("h0"), T_88)
    node sExpSum = mux(CAlignDist_floor, pad(expC, 11), sExpAlignedProd)
    node T_89 = bits(CAlignDist, 6, 6)
    node T_90 = bits(CAlignDist, 5, 0)
    node T_92 = dshr(SInt<65>("h10000000000000000"), T_90)
    node T_93 = bits(T_92, 63, 54)
    node T_94 = bits(T_93, 7, 0)
    node T_99 = shr(T_94, 4)
    node T_100 = pad(T_99, 8)
    node T_101 = bits(T_94, 3, 0)
    node GEN_2 = pad(T_101, 8)
    node T_102 = shlw(GEN_2, 4)
    node T_104 = and(T_102, UInt<8>("hf0"))
    node T_105 = or(T_100, T_104)
    node T_109 = shr(T_105, 2)
    node GEN_3 = pad(T_109, 8)
    node T_110 = and(GEN_3, UInt<8>("h33"))
    node T_111 = bits(T_105, 5, 0)
    node GEN_4 = pad(T_111, 8)
    node T_112 = shlw(GEN_4, 2)
    node T_114 = and(T_112, UInt<8>("hcc"))
    node T_115 = or(T_110, T_114)
    node T_119 = shr(T_115, 1)
    node GEN_5 = pad(T_119, 8)
    node T_120 = and(GEN_5, UInt<8>("h55"))
    node T_121 = bits(T_115, 6, 0)
    node GEN_6 = pad(T_121, 8)
    node T_122 = shlw(GEN_6, 1)
    node T_124 = and(T_122, UInt<8>("haa"))
    node T_125 = or(T_120, T_124)
    node T_126 = bits(T_93, 9, 8)
    node T_127 = bits(T_126, 0, 0)
    node T_128 = bits(T_126, 1, 1)
    node T_129 = cat(T_127, T_128)
    node T_130 = cat(T_125, T_129)
    node T_132 = cat(T_130, UInt<14>("h3fff"))
    node T_135 = bits(T_92, 13, 0)
    node T_136 = bits(T_135, 7, 0)
    node T_141 = shr(T_136, 4)
    node T_142 = pad(T_141, 8)
    node T_143 = bits(T_136, 3, 0)
    node GEN_7 = pad(T_143, 8)
    node T_144 = shlw(GEN_7, 4)
    node T_146 = and(T_144, UInt<8>("hf0"))
    node T_147 = or(T_142, T_146)
    node T_151 = shr(T_147, 2)
    node GEN_8 = pad(T_151, 8)
    node T_152 = and(GEN_8, UInt<8>("h33"))
    node T_153 = bits(T_147, 5, 0)
    node GEN_9 = pad(T_153, 8)
    node T_154 = shlw(GEN_9, 2)
    node T_156 = and(T_154, UInt<8>("hcc"))
    node T_157 = or(T_152, T_156)
    node T_161 = shr(T_157, 1)
    node GEN_10 = pad(T_161, 8)
    node T_162 = and(GEN_10, UInt<8>("h55"))
    node T_163 = bits(T_157, 6, 0)
    node GEN_11 = pad(T_163, 8)
    node T_164 = shlw(GEN_11, 1)
    node T_166 = and(T_164, UInt<8>("haa"))
    node T_167 = or(T_162, T_166)
    node T_168 = bits(T_135, 13, 8)
    node T_169 = bits(T_168, 3, 0)
    node T_170 = bits(T_169, 1, 0)
    node T_171 = bits(T_170, 0, 0)
    node T_172 = bits(T_170, 1, 1)
    node T_173 = cat(T_171, T_172)
    node T_174 = bits(T_169, 3, 2)
    node T_175 = bits(T_174, 0, 0)
    node T_176 = bits(T_174, 1, 1)
    node T_177 = cat(T_175, T_176)
    node T_178 = cat(T_173, T_177)
    node T_179 = bits(T_168, 5, 4)
    node T_180 = bits(T_179, 0, 0)
    node T_181 = bits(T_179, 1, 1)
    node T_182 = cat(T_180, T_181)
    node T_183 = cat(T_178, T_182)
    node T_184 = cat(T_167, T_183)
    node CExtraMask = mux(T_89, T_132, pad(T_184, 24))
    node T_185 = not(sigC)
    node negSigC = mux(doSubMags, T_185, sigC)
    node T_189 = mux(doSubMags, UInt<50>("h3ffffffffffff"), UInt<50>("h0"))
    node T_190 = cat(doSubMags, negSigC)
    node T_191 = cat(T_190, T_189)
    node T_192 = asSInt(T_191)
    node T_193 = dshr(T_192, CAlignDist)
    node T_194 = and(sigC, CExtraMask)
    node T_196 = neq(T_194, UInt<24>("h0"))
    node T_197 = xor(T_196, doSubMags)
    node T_198 = asUInt(T_193)
    node T_199 = cat(T_198, T_197)
    node alignedNegSigC = bits(T_199, 74, 0)
    node T_200 = bits(alignedNegSigC, 48, 1)
    node T_202 = bits(fractA, 22, 22)
    node T_204 = bits(fractB, 22, 22)
    node T_206 = bits(fractC, 22, 22)
    node T_207 = bits(alignedNegSigC, 0, 0)
    node T_208 = bits(alignedNegSigC, 74, 49)
    io_mulAddA <= sigA
    io_mulAddB <= sigB
    io_mulAddC <= T_200
    io_toPostMul_highExpA <= T_42
    io_toPostMul_isNaN_isQuietNaNA <= T_202
    io_toPostMul_highExpB <= T_46
    io_toPostMul_isNaN_isQuietNaNB <= T_204
    io_toPostMul_signProd <= signProd
    io_toPostMul_isZeroProd <= isZeroProd
    io_toPostMul_opSignC <= opSignC
    io_toPostMul_highExpC <= T_52
    io_toPostMul_isNaN_isQuietNaNC <= T_206
    io_toPostMul_isCDominant <= isCDominant
    io_toPostMul_CAlignDist_0 <= CAlignDist_0
    io_toPostMul_CAlignDist <= CAlignDist
    io_toPostMul_bit0AlignedNegSigC <= T_207
    io_toPostMul_highAlignedNegSigC <= T_208
    io_toPostMul_sExpSum <= sExpSum
    io_toPostMul_roundingMode <= io_roundingMode

  module MulAddRecFN_postMul :
    input clk : Clock
    input reset : UInt<1>
    input io_fromPreMul_highExpA : UInt<3>
    input io_fromPreMul_isNaN_isQuietNaNA : UInt<1>
    input io_fromPreMul_highExpB : UInt<3>
    input io_fromPreMul_isNaN_isQuietNaNB : UInt<1>
    input io_fromPreMul_signProd : UInt<1>
    input io_fromPreMul_isZeroProd : UInt<1>
    input io_fromPreMul_opSignC : UInt<1>
    input io_fromPreMul_highExpC : UInt<3>
    input io_fromPreMul_isNaN_isQuietNaNC : UInt<1>
    input io_fromPreMul_isCDominant : UInt<1>
    input io_fromPreMul_CAlignDist_0 : UInt<1>
    input io_fromPreMul_CAlignDist : UInt<7>
    input io_fromPreMul_bit0AlignedNegSigC : UInt<1>
    input io_fromPreMul_highAlignedNegSigC : UInt<26>
    input io_fromPreMul_sExpSum : UInt<11>
    input io_fromPreMul_roundingMode : UInt<2>
    input io_mulAddResult : UInt<49>
    output io_out : UInt<33>
    output io_exceptionFlags : UInt<5>
  
    node isZeroA = eq(io_fromPreMul_highExpA, UInt<3>("h0"))
    node T_38 = bits(io_fromPreMul_highExpA, 2, 1)
    node isSpecialA = eq(T_38, UInt<2>("h3"))
    node T_40 = bits(io_fromPreMul_highExpA, 0, 0)
    node T_42 = eq(T_40, UInt<1>("h0"))
    node isInfA = and(isSpecialA, T_42)
    node isNaNA = and(isSpecialA, T_40)
    node T_45 = eq(io_fromPreMul_isNaN_isQuietNaNA, UInt<1>("h0"))
    node isSigNaNA = and(isNaNA, T_45)
    node isZeroB = eq(io_fromPreMul_highExpB, UInt<3>("h0"))
    node T_47 = bits(io_fromPreMul_highExpB, 2, 1)
    node isSpecialB = eq(T_47, UInt<2>("h3"))
    node T_49 = bits(io_fromPreMul_highExpB, 0, 0)
    node T_51 = eq(T_49, UInt<1>("h0"))
    node isInfB = and(isSpecialB, T_51)
    node isNaNB = and(isSpecialB, T_49)
    node T_54 = eq(io_fromPreMul_isNaN_isQuietNaNB, UInt<1>("h0"))
    node isSigNaNB = and(isNaNB, T_54)
    node isZeroC = eq(io_fromPreMul_highExpC, UInt<3>("h0"))
    node T_56 = bits(io_fromPreMul_highExpC, 2, 1)
    node isSpecialC = eq(T_56, UInt<2>("h3"))
    node T_58 = bits(io_fromPreMul_highExpC, 0, 0)
    node T_60 = eq(T_58, UInt<1>("h0"))
    node isInfC = and(isSpecialC, T_60)
    node isNaNC = and(isSpecialC, T_58)
    node T_63 = eq(io_fromPreMul_isNaN_isQuietNaNC, UInt<1>("h0"))
    node isSigNaNC = and(isNaNC, T_63)
    node roundingMode_nearest_even = eq(io_fromPreMul_roundingMode, UInt<2>("h0"))
    node roundingMode_min = eq(io_fromPreMul_roundingMode, UInt<2>("h2"))
    node roundingMode_max = eq(io_fromPreMul_roundingMode, UInt<2>("h3"))
    node doSubMags = xor(io_fromPreMul_signProd, io_fromPreMul_opSignC)
    node T_70 = bits(io_mulAddResult, 48, 48)
    node T_72 = add(io_fromPreMul_highAlignedNegSigC, UInt<26>("h1"))
    node T_73 = tail(T_72, 1)
    node T_74 = mux(T_70, T_73, io_fromPreMul_highAlignedNegSigC)
    node T_75 = bits(io_mulAddResult, 47, 0)
    node T_76 = cat(T_74, T_75)
    node sigSum = cat(T_76, io_fromPreMul_bit0AlignedNegSigC)
    node T_78 = bits(sigSum, 50, 1)
    node GEN_0 = pad(T_78, 51)
    node T_81 = shlw(GEN_0, 1)
    node T_82 = xor(GEN_0, T_81)
    node T_84 = bits(T_82, 49, 0)
    node T_85 = bits(T_84, 49, 32)
    node T_86 = bits(T_84, 31, 0)
    node T_88 = neq(T_85, UInt<18>("h0"))
    node T_89 = bits(T_85, 17, 16)
    node T_90 = bits(T_85, 15, 0)
    node T_92 = neq(T_89, UInt<2>("h0"))
    node T_93 = bits(T_89, 1, 1)
    node T_94 = bits(T_90, 15, 8)
    node T_95 = bits(T_90, 7, 0)
    node T_97 = neq(T_94, UInt<8>("h0"))
    node T_98 = bits(T_94, 7, 4)
    node T_99 = bits(T_94, 3, 0)
    node T_101 = neq(T_98, UInt<4>("h0"))
    node T_102 = bits(T_98, 3, 3)
    node T_104 = bits(T_98, 2, 2)
    node T_106 = bits(T_98, 1, 1)
    node T_108 = mux(T_104, UInt<2>("h2"), pad(T_106, 2))
    node T_109 = mux(T_102, UInt<2>("h3"), T_108)
    node T_110 = bits(T_99, 3, 3)
    node T_112 = bits(T_99, 2, 2)
    node T_114 = bits(T_99, 1, 1)
    node T_116 = mux(T_112, UInt<2>("h2"), pad(T_114, 2))
    node T_117 = mux(T_110, UInt<2>("h3"), T_116)
    node T_118 = mux(T_101, T_109, T_117)
    node T_119 = cat(T_101, T_118)
    node T_120 = bits(T_95, 7, 4)
    node T_121 = bits(T_95, 3, 0)
    node T_123 = neq(T_120, UInt<4>("h0"))
    node T_124 = bits(T_120, 3, 3)
    node T_126 = bits(T_120, 2, 2)
    node T_128 = bits(T_120, 1, 1)
    node T_130 = mux(T_126, UInt<2>("h2"), pad(T_128, 2))
    node T_131 = mux(T_124, UInt<2>("h3"), T_130)
    node T_132 = bits(T_121, 3, 3)
    node T_134 = bits(T_121, 2, 2)
    node T_136 = bits(T_121, 1, 1)
    node T_138 = mux(T_134, UInt<2>("h2"), pad(T_136, 2))
    node T_139 = mux(T_132, UInt<2>("h3"), T_138)
    node T_140 = mux(T_123, T_131, T_139)
    node T_141 = cat(T_123, T_140)
    node T_142 = mux(T_97, T_119, T_141)
    node T_143 = cat(T_97, T_142)
    node T_145 = mux(T_92, pad(T_93, 4), T_143)
    node T_146 = cat(T_92, T_145)
    node T_147 = bits(T_86, 31, 16)
    node T_148 = bits(T_86, 15, 0)
    node T_150 = neq(T_147, UInt<16>("h0"))
    node T_151 = bits(T_147, 15, 8)
    node T_152 = bits(T_147, 7, 0)
    node T_154 = neq(T_151, UInt<8>("h0"))
    node T_155 = bits(T_151, 7, 4)
    node T_156 = bits(T_151, 3, 0)
    node T_158 = neq(T_155, UInt<4>("h0"))
    node T_159 = bits(T_155, 3, 3)
    node T_161 = bits(T_155, 2, 2)
    node T_163 = bits(T_155, 1, 1)
    node T_165 = mux(T_161, UInt<2>("h2"), pad(T_163, 2))
    node T_166 = mux(T_159, UInt<2>("h3"), T_165)
    node T_167 = bits(T_156, 3, 3)
    node T_169 = bits(T_156, 2, 2)
    node T_171 = bits(T_156, 1, 1)
    node T_173 = mux(T_169, UInt<2>("h2"), pad(T_171, 2))
    node T_174 = mux(T_167, UInt<2>("h3"), T_173)
    node T_175 = mux(T_158, T_166, T_174)
    node T_176 = cat(T_158, T_175)
    node T_177 = bits(T_152, 7, 4)
    node T_178 = bits(T_152, 3, 0)
    node T_180 = neq(T_177, UInt<4>("h0"))
    node T_181 = bits(T_177, 3, 3)
    node T_183 = bits(T_177, 2, 2)
    node T_185 = bits(T_177, 1, 1)
    node T_187 = mux(T_183, UInt<2>("h2"), pad(T_185, 2))
    node T_188 = mux(T_181, UInt<2>("h3"), T_187)
    node T_189 = bits(T_178, 3, 3)
    node T_191 = bits(T_178, 2, 2)
    node T_193 = bits(T_178, 1, 1)
    node T_195 = mux(T_191, UInt<2>("h2"), pad(T_193, 2))
    node T_196 = mux(T_189, UInt<2>("h3"), T_195)
    node T_197 = mux(T_180, T_188, T_196)
    node T_198 = cat(T_180, T_197)
    node T_199 = mux(T_154, T_176, T_198)
    node T_200 = cat(T_154, T_199)
    node T_201 = bits(T_148, 15, 8)
    node T_202 = bits(T_148, 7, 0)
    node T_204 = neq(T_201, UInt<8>("h0"))
    node T_205 = bits(T_201, 7, 4)
    node T_206 = bits(T_201, 3, 0)
    node T_208 = neq(T_205, UInt<4>("h0"))
    node T_209 = bits(T_205, 3, 3)
    node T_211 = bits(T_205, 2, 2)
    node T_213 = bits(T_205, 1, 1)
    node T_215 = mux(T_211, UInt<2>("h2"), pad(T_213, 2))
    node T_216 = mux(T_209, UInt<2>("h3"), T_215)
    node T_217 = bits(T_206, 3, 3)
    node T_219 = bits(T_206, 2, 2)
    node T_221 = bits(T_206, 1, 1)
    node T_223 = mux(T_219, UInt<2>("h2"), pad(T_221, 2))
    node T_224 = mux(T_217, UInt<2>("h3"), T_223)
    node T_225 = mux(T_208, T_216, T_224)
    node T_226 = cat(T_208, T_225)
    node T_227 = bits(T_202, 7, 4)
    node T_228 = bits(T_202, 3, 0)
    node T_230 = neq(T_227, UInt<4>("h0"))
    node T_231 = bits(T_227, 3, 3)
    node T_233 = bits(T_227, 2, 2)
    node T_235 = bits(T_227, 1, 1)
    node T_237 = mux(T_233, UInt<2>("h2"), pad(T_235, 2))
    node T_238 = mux(T_231, UInt<2>("h3"), T_237)
    node T_239 = bits(T_228, 3, 3)
    node T_241 = bits(T_228, 2, 2)
    node T_243 = bits(T_228, 1, 1)
    node T_245 = mux(T_241, UInt<2>("h2"), pad(T_243, 2))
    node T_246 = mux(T_239, UInt<2>("h3"), T_245)
    node T_247 = mux(T_230, T_238, T_246)
    node T_248 = cat(T_230, T_247)
    node T_249 = mux(T_204, T_226, T_248)
    node T_250 = cat(T_204, T_249)
    node T_251 = mux(T_150, T_200, T_250)
    node T_252 = cat(T_150, T_251)
    node T_253 = mux(T_88, T_146, T_252)
    node T_254 = cat(T_88, T_253)
    node GEN_2 = pad(T_254, 7)
    node T_255 = sub(UInt<7>("h49"), GEN_2)
    node estNormPos_dist = tail(T_255, 1)
    node T_256 = bits(sigSum, 33, 18)
    node T_258 = neq(T_256, UInt<16>("h0"))
    node T_259 = bits(sigSum, 17, 0)
    node T_261 = neq(T_259, UInt<18>("h0"))
    node firstReduceSigSum = cat(T_258, T_261)
    node complSigSum = not(sigSum)
    node T_262 = bits(complSigSum, 33, 18)
    node T_264 = neq(T_262, UInt<16>("h0"))
    node T_265 = bits(complSigSum, 17, 0)
    node T_267 = neq(T_265, UInt<18>("h0"))
    node firstReduceComplSigSum = cat(T_264, T_267)
    node T_268 = or(io_fromPreMul_CAlignDist_0, doSubMags)
    node T_270 = sub(io_fromPreMul_CAlignDist, UInt<7>("h1"))
    node T_271 = tail(T_270, 1)
    node T_272 = bits(T_271, 4, 0)
    node CDom_estNormDist = mux(T_268, io_fromPreMul_CAlignDist, pad(T_272, 7))
    node T_274 = eq(doSubMags, UInt<1>("h0"))
    node T_275 = bits(CDom_estNormDist, 4, 4)
    node T_277 = eq(T_275, UInt<1>("h0"))
    node T_278 = and(T_274, T_277)
    node T_279 = bits(sigSum, 74, 34)
    node T_281 = neq(firstReduceSigSum, UInt<2>("h0"))
    node T_282 = cat(T_279, T_281)
    node T_284 = mux(T_278, T_282, UInt<42>("h0"))
    node T_288 = and(T_274, T_275)
    node T_289 = bits(sigSum, 58, 18)
    node T_290 = bits(firstReduceSigSum, 0, 0)
    node T_291 = cat(T_289, T_290)
    node T_293 = mux(T_288, T_291, UInt<42>("h0"))
    node T_294 = or(T_284, T_293)
    node T_298 = and(doSubMags, T_277)
    node T_299 = bits(complSigSum, 74, 34)
    node T_301 = neq(firstReduceComplSigSum, UInt<2>("h0"))
    node T_302 = cat(T_299, T_301)
    node T_304 = mux(T_298, T_302, UInt<42>("h0"))
    node T_305 = or(T_294, T_304)
    node T_307 = and(doSubMags, T_275)
    node T_308 = bits(complSigSum, 58, 18)
    node T_309 = bits(firstReduceComplSigSum, 0, 0)
    node T_310 = cat(T_308, T_309)
    node T_312 = mux(T_307, T_310, UInt<42>("h0"))
    node CDom_firstNormAbsSigSum = or(T_305, T_312)
    node T_313 = bits(sigSum, 50, 18)
    node T_316 = eq(T_309, UInt<1>("h0"))
    node T_318 = mux(doSubMags, T_316, T_290)
    node T_319 = cat(T_313, T_318)
    node T_320 = bits(sigSum, 42, 1)
    node T_321 = bits(estNormPos_dist, 5, 5)
    node T_322 = bits(estNormPos_dist, 4, 4)
    node T_323 = bits(sigSum, 26, 1)
    node T_327 = mux(doSubMags, UInt<16>("hffff"), UInt<16>("h0"))
    node T_328 = cat(T_323, T_327)
    node T_329 = mux(T_322, T_328, T_320)
    node T_331 = bits(sigSum, 10, 1)
    node T_335 = mux(doSubMags, UInt<32>("hffffffff"), UInt<32>("h0"))
    node T_336 = cat(T_331, T_335)
    node T_337 = mux(T_322, pad(T_319, 42), T_336)
    node notCDom_pos_firstNormAbsSigSum = mux(T_321, T_329, T_337)
    node T_338 = bits(complSigSum, 49, 18)
    node T_340 = cat(T_338, T_309)
    node T_341 = bits(complSigSum, 42, 1)
    node T_344 = bits(complSigSum, 27, 1)
    node GEN_3 = pad(T_344, 43)
    node T_345 = shlw(GEN_3, 16)
    node T_346 = mux(T_322, T_345, pad(T_341, 43))
    node T_348 = bits(complSigSum, 11, 1)
    node GEN_4 = pad(T_348, 43)
    node T_349 = shlw(GEN_4, 32)
    node T_350 = mux(T_322, pad(T_340, 43), T_349)
    node notCDom_neg_cFirstNormAbsSigSum = mux(T_321, T_346, T_350)
    node notCDom_signSigSum = bits(sigSum, 51, 51)
    node T_352 = eq(isZeroC, UInt<1>("h0"))
    node T_353 = and(doSubMags, T_352)
    node doNegSignSum = mux(io_fromPreMul_isCDominant, T_353, notCDom_signSigSum)
    node estNormDist = mux(io_fromPreMul_isCDominant, CDom_estNormDist, estNormPos_dist)
    node T_355 = mux(io_fromPreMul_isCDominant, pad(CDom_firstNormAbsSigSum, 43), notCDom_neg_cFirstNormAbsSigSum)
    node T_356 = mux(io_fromPreMul_isCDominant, CDom_firstNormAbsSigSum, notCDom_pos_firstNormAbsSigSum)
    node cFirstNormAbsSigSum = mux(notCDom_signSigSum, T_355, pad(T_356, 43))
    node T_358 = eq(io_fromPreMul_isCDominant, UInt<1>("h0"))
    node T_360 = eq(notCDom_signSigSum, UInt<1>("h0"))
    node T_361 = and(T_358, T_360)
    node doIncrSig = and(T_361, doSubMags)
    node estNormDist_5 = bits(estNormDist, 3, 0)
    node normTo2ShiftDist = not(estNormDist_5)
    node T_363 = dshr(SInt<17>("h10000"), normTo2ShiftDist)
    node T_364 = bits(T_363, 15, 1)
    node T_365 = bits(T_364, 7, 0)
    node T_370 = shr(T_365, 4)
    node T_371 = pad(T_370, 8)
    node T_372 = bits(T_365, 3, 0)
    node GEN_5 = pad(T_372, 8)
    node T_373 = shlw(GEN_5, 4)
    node T_375 = and(T_373, UInt<8>("hf0"))
    node T_376 = or(T_371, T_375)
    node T_380 = shr(T_376, 2)
    node GEN_6 = pad(T_380, 8)
    node T_381 = and(GEN_6, UInt<8>("h33"))
    node T_382 = bits(T_376, 5, 0)
    node GEN_7 = pad(T_382, 8)
    node T_383 = shlw(GEN_7, 2)
    node T_385 = and(T_383, UInt<8>("hcc"))
    node T_386 = or(T_381, T_385)
    node T_390 = shr(T_386, 1)
    node GEN_8 = pad(T_390, 8)
    node T_391 = and(GEN_8, UInt<8>("h55"))
    node T_392 = bits(T_386, 6, 0)
    node GEN_9 = pad(T_392, 8)
    node T_393 = shlw(GEN_9, 1)
    node T_395 = and(T_393, UInt<8>("haa"))
    node T_396 = or(T_391, T_395)
    node T_397 = bits(T_364, 14, 8)
    node T_398 = bits(T_397, 3, 0)
    node T_399 = bits(T_398, 1, 0)
    node T_400 = bits(T_399, 0, 0)
    node T_401 = bits(T_399, 1, 1)
    node T_402 = cat(T_400, T_401)
    node T_403 = bits(T_398, 3, 2)
    node T_404 = bits(T_403, 0, 0)
    node T_405 = bits(T_403, 1, 1)
    node T_406 = cat(T_404, T_405)
    node T_407 = cat(T_402, T_406)
    node T_408 = bits(T_397, 6, 4)
    node T_409 = bits(T_408, 1, 0)
    node T_410 = bits(T_409, 0, 0)
    node T_411 = bits(T_409, 1, 1)
    node T_412 = cat(T_410, T_411)
    node T_413 = bits(T_408, 2, 2)
    node T_414 = cat(T_412, T_413)
    node T_415 = cat(T_407, T_414)
    node T_416 = cat(T_396, T_415)
    node absSigSumExtraMask = cat(T_416, UInt<1>("h1"))
    node T_418 = bits(cFirstNormAbsSigSum, 42, 1)
    node T_419 = dshr(T_418, normTo2ShiftDist)
    node T_420 = bits(cFirstNormAbsSigSum, 15, 0)
    node T_421 = not(T_420)
    node T_422 = and(T_421, absSigSumExtraMask)
    node T_424 = eq(T_422, UInt<16>("h0"))
    node T_426 = and(T_420, absSigSumExtraMask)
    node T_428 = neq(T_426, UInt<16>("h0"))
    node T_429 = mux(doIncrSig, T_424, T_428)
    node T_430 = cat(T_419, T_429)
    node sigX3 = bits(T_430, 27, 0)
    node T_431 = bits(sigX3, 27, 26)
    node sigX3Shift1 = eq(T_431, UInt<2>("h0"))
    node GEN_10 = pad(estNormDist, 11)
    node T_433 = sub(io_fromPreMul_sExpSum, GEN_10)
    node sExpX3 = tail(T_433, 1)
    node T_434 = bits(sigX3, 27, 25)
    node isZeroY = eq(T_434, UInt<3>("h0"))
    node T_436 = xor(io_fromPreMul_signProd, doNegSignSum)
    node signY = mux(isZeroY, roundingMode_min, T_436)
    node sExpX3_13 = bits(sExpX3, 9, 0)
    node T_437 = bits(sExpX3, 10, 10)
    node T_441 = mux(T_437, UInt<27>("h7ffffff"), UInt<27>("h0"))
    node T_442 = not(sExpX3_13)
    node T_443 = bits(T_442, 9, 9)
    node T_444 = bits(T_442, 8, 0)
    node T_445 = bits(T_444, 8, 8)
    node T_446 = bits(T_444, 7, 0)
    node T_447 = bits(T_446, 7, 7)
    node T_448 = bits(T_446, 6, 0)
    node T_449 = bits(T_448, 6, 6)
    node T_450 = bits(T_448, 5, 0)
    node T_453 = dshr(SInt<65>("h10000000000000000"), T_450)
    node T_454 = bits(T_453, 63, 43)
    node T_455 = bits(T_454, 15, 0)
    node T_460 = shr(T_455, 8)
    node T_461 = pad(T_460, 16)
    node T_462 = bits(T_455, 7, 0)
    node GEN_11 = pad(T_462, 16)
    node T_463 = shlw(GEN_11, 8)
    node T_465 = and(T_463, UInt<16>("hff00"))
    node T_466 = or(T_461, T_465)
    node T_470 = shr(T_466, 4)
    node GEN_12 = pad(T_470, 16)
    node T_471 = and(GEN_12, UInt<16>("hf0f"))
    node T_472 = bits(T_466, 11, 0)
    node GEN_13 = pad(T_472, 16)
    node T_473 = shlw(GEN_13, 4)
    node T_475 = and(T_473, UInt<16>("hf0f0"))
    node T_476 = or(T_471, T_475)
    node T_480 = shr(T_476, 2)
    node GEN_14 = pad(T_480, 16)
    node T_481 = and(GEN_14, UInt<16>("h3333"))
    node T_482 = bits(T_476, 13, 0)
    node GEN_15 = pad(T_482, 16)
    node T_483 = shlw(GEN_15, 2)
    node T_485 = and(T_483, UInt<16>("hcccc"))
    node T_486 = or(T_481, T_485)
    node T_490 = shr(T_486, 1)
    node GEN_16 = pad(T_490, 16)
    node T_491 = and(GEN_16, UInt<16>("h5555"))
    node T_492 = bits(T_486, 14, 0)
    node GEN_17 = pad(T_492, 16)
    node T_493 = shlw(GEN_17, 1)
    node T_495 = and(T_493, UInt<16>("haaaa"))
    node T_496 = or(T_491, T_495)
    node T_497 = bits(T_454, 20, 16)
    node T_498 = bits(T_497, 3, 0)
    node T_499 = bits(T_498, 1, 0)
    node T_500 = bits(T_499, 0, 0)
    node T_501 = bits(T_499, 1, 1)
    node T_502 = cat(T_500, T_501)
    node T_503 = bits(T_498, 3, 2)
    node T_504 = bits(T_503, 0, 0)
    node T_505 = bits(T_503, 1, 1)
    node T_506 = cat(T_504, T_505)
    node T_507 = cat(T_502, T_506)
    node T_508 = bits(T_497, 4, 4)
    node T_509 = cat(T_507, T_508)
    node T_510 = cat(T_496, T_509)
    node T_511 = not(T_510)
    node T_512 = mux(T_449, UInt<21>("h0"), T_511)
    node T_513 = not(T_512)
    node T_515 = cat(T_513, UInt<4>("hf"))
    node T_520 = bits(T_453, 3, 0)
    node T_521 = bits(T_520, 1, 0)
    node T_522 = bits(T_521, 0, 0)
    node T_523 = bits(T_521, 1, 1)
    node T_524 = cat(T_522, T_523)
    node T_525 = bits(T_520, 3, 2)
    node T_526 = bits(T_525, 0, 0)
    node T_527 = bits(T_525, 1, 1)
    node T_528 = cat(T_526, T_527)
    node T_529 = cat(T_524, T_528)
    node T_531 = mux(T_449, T_529, UInt<4>("h0"))
    node T_532 = mux(T_447, T_515, pad(T_531, 25))
    node T_534 = mux(T_445, T_532, UInt<25>("h0"))
    node T_536 = mux(T_443, T_534, UInt<25>("h0"))
    node T_537 = bits(sigX3, 26, 26)
    node GEN_18 = pad(T_537, 25)
    node T_538 = or(T_536, GEN_18)
    node T_540 = cat(T_538, UInt<2>("h3"))
    node roundMask = or(T_441, T_540)
    node T_541 = shr(roundMask, 1)
    node T_542 = not(T_541)
    node GEN_19 = pad(T_542, 27)
    node roundPosMask = and(GEN_19, roundMask)
    node GEN_20 = pad(roundPosMask, 28)
    node T_543 = and(sigX3, GEN_20)
    node roundPosBit = neq(T_543, UInt<28>("h0"))
    node GEN_21 = pad(T_541, 28)
    node T_546 = and(sigX3, GEN_21)
    node anyRoundExtra = neq(T_546, UInt<28>("h0"))
    node T_548 = not(sigX3)
    node T_550 = and(T_548, GEN_21)
    node allRoundExtra = eq(T_550, UInt<28>("h0"))
    node anyRound = or(roundPosBit, anyRoundExtra)
    node allRound = and(roundPosBit, allRoundExtra)
    node roundDirectUp = mux(signY, roundingMode_min, roundingMode_max)
    node T_553 = eq(doIncrSig, UInt<1>("h0"))
    node T_554 = and(T_553, roundingMode_nearest_even)
    node T_555 = and(T_554, roundPosBit)
    node T_556 = and(T_555, anyRoundExtra)
    node T_559 = and(T_553, roundDirectUp)
    node T_560 = and(T_559, anyRound)
    node T_561 = or(T_556, T_560)
    node T_562 = and(doIncrSig, allRound)
    node T_563 = or(T_561, T_562)
    node T_564 = and(doIncrSig, roundingMode_nearest_even)
    node T_565 = and(T_564, roundPosBit)
    node T_566 = or(T_563, T_565)
    node T_567 = and(doIncrSig, roundDirectUp)
    node roundUp = or(T_566, T_567)
    node T_571 = eq(roundPosBit, UInt<1>("h0"))
    node T_572 = and(roundingMode_nearest_even, T_571)
    node T_573 = and(T_572, allRoundExtra)
    node T_574 = and(roundingMode_nearest_even, roundPosBit)
    node T_576 = eq(anyRoundExtra, UInt<1>("h0"))
    node T_577 = and(T_574, T_576)
    node roundEven = mux(doIncrSig, T_573, T_577)
    node T_579 = eq(allRound, UInt<1>("h0"))
    node roundInexact = mux(doIncrSig, T_579, anyRound)
    node GEN_23 = pad(roundMask, 28)
    node T_580 = or(sigX3, GEN_23)
    node T_581 = shr(T_580, 2)
    node T_583 = add(T_581, UInt<26>("h1"))
    node T_584 = tail(T_583, 1)
    node T_586 = eq(roundUp, UInt<1>("h0"))
    node T_588 = eq(roundEven, UInt<1>("h0"))
    node T_589 = and(T_586, T_588)
    node T_590 = not(roundMask)
    node GEN_24 = pad(T_590, 28)
    node T_591 = and(sigX3, GEN_24)
    node T_592 = shr(T_591, 2)
    node T_594 = mux(T_589, T_592, UInt<26>("h0"))
    node T_596 = mux(roundUp, T_584, UInt<26>("h0"))
    node T_597 = or(T_594, T_596)
    node T_600 = and(T_584, T_542)
    node T_602 = mux(roundEven, T_600, UInt<26>("h0"))
    node sigY3 = or(T_597, T_602)
    node T_603 = bits(sigY3, 25, 25)
    node T_605 = add(sExpX3, UInt<11>("h1"))
    node T_606 = tail(T_605, 1)
    node T_608 = mux(T_603, T_606, UInt<11>("h0"))
    node T_609 = bits(sigY3, 24, 24)
    node T_611 = mux(T_609, sExpX3, UInt<11>("h0"))
    node T_612 = or(T_608, T_611)
    node T_613 = bits(sigY3, 25, 24)
    node T_615 = eq(T_613, UInt<2>("h0"))
    node T_617 = sub(sExpX3, UInt<11>("h1"))
    node T_618 = tail(T_617, 1)
    node T_620 = mux(T_615, T_618, UInt<11>("h0"))
    node sExpY = or(T_612, T_620)
    node expY = bits(sExpY, 8, 0)
    node T_621 = bits(sigY3, 22, 0)
    node T_622 = bits(sigY3, 23, 1)
    node fractY = mux(sigX3Shift1, T_621, T_622)
    node T_623 = bits(sExpY, 9, 7)
    node overflowY = eq(T_623, UInt<3>("h3"))
    node T_626 = eq(isZeroY, UInt<1>("h0"))
    node T_627 = bits(sExpY, 9, 9)
    node T_630 = lt(expY, UInt<9>("h6b"))
    node T_631 = or(T_627, T_630)
    node totalUnderflowY = and(T_626, T_631)
    node T_635 = mux(sigX3Shift1, UInt<8>("h82"), UInt<8>("h81"))
    node GEN_25 = pad(T_635, 10)
    node T_636 = leq(sExpX3_13, GEN_25)
    node T_637 = or(T_437, T_636)
    node underflowY = and(roundInexact, T_637)
    node T_638 = and(roundingMode_min, signY)
    node T_640 = eq(signY, UInt<1>("h0"))
    node T_641 = and(roundingMode_max, T_640)
    node roundMagUp = or(T_638, T_641)
    node overflowY_roundMagUp = or(roundingMode_nearest_even, roundMagUp)
    node mulSpecial = or(isSpecialA, isSpecialB)
    node addSpecial = or(mulSpecial, isSpecialC)
    node notSpecial_addZeros = and(io_fromPreMul_isZeroProd, isZeroC)
    node T_643 = eq(addSpecial, UInt<1>("h0"))
    node T_645 = eq(notSpecial_addZeros, UInt<1>("h0"))
    node commonCase = and(T_643, T_645)
    node T_646 = and(isInfA, isZeroB)
    node T_647 = and(isZeroA, isInfB)
    node T_648 = or(T_646, T_647)
    node T_650 = eq(isNaNA, UInt<1>("h0"))
    node T_652 = eq(isNaNB, UInt<1>("h0"))
    node T_653 = and(T_650, T_652)
    node T_654 = or(isInfA, isInfB)
    node T_655 = and(T_653, T_654)
    node T_656 = and(T_655, isInfC)
    node T_657 = and(T_656, doSubMags)
    node notSigNaN_invalid = or(T_648, T_657)
    node T_658 = or(isSigNaNA, isSigNaNB)
    node T_659 = or(T_658, isSigNaNC)
    node invalid = or(T_659, notSigNaN_invalid)
    node overflow = and(commonCase, overflowY)
    node underflow = and(commonCase, underflowY)
    node T_660 = and(commonCase, roundInexact)
    node inexact = or(overflow, T_660)
    node T_661 = or(notSpecial_addZeros, isZeroY)
    node notSpecial_isZeroOut = or(T_661, totalUnderflowY)
    node T_662 = and(commonCase, totalUnderflowY)
    node pegMinFiniteMagOut = and(T_662, roundMagUp)
    node T_664 = eq(overflowY_roundMagUp, UInt<1>("h0"))
    node pegMaxFiniteMagOut = and(overflow, T_664)
    node T_666 = or(T_654, isInfC)
    node T_667 = and(overflow, overflowY_roundMagUp)
    node notNaN_isInfOut = or(T_666, T_667)
    node T_668 = or(isNaNA, isNaNB)
    node T_669 = or(T_668, isNaNC)
    node isNaNOut = or(T_669, notSigNaN_invalid)
    node T_672 = and(T_274, io_fromPreMul_opSignC)
    node T_674 = eq(isSpecialC, UInt<1>("h0"))
    node T_675 = and(mulSpecial, T_674)
    node T_676 = and(T_675, io_fromPreMul_signProd)
    node T_677 = or(T_672, T_676)
    node T_679 = eq(mulSpecial, UInt<1>("h0"))
    node T_680 = and(T_679, isSpecialC)
    node T_681 = and(T_680, io_fromPreMul_opSignC)
    node T_682 = or(T_677, T_681)
    node T_685 = and(T_679, notSpecial_addZeros)
    node T_686 = and(T_685, doSubMags)
    node T_687 = and(T_686, roundingMode_min)
    node uncommonCaseSignOut = or(T_682, T_687)
    node T_689 = eq(isNaNOut, UInt<1>("h0"))
    node T_690 = and(T_689, uncommonCaseSignOut)
    node T_691 = and(commonCase, signY)
    node signOut = or(T_690, T_691)
    node T_694 = mux(notSpecial_isZeroOut, UInt<9>("h1c0"), UInt<9>("h0"))
    node T_695 = not(T_694)
    node T_696 = and(expY, T_695)
    node T_700 = mux(pegMinFiniteMagOut, UInt<9>("h194"), UInt<9>("h0"))
    node T_701 = not(T_700)
    node T_702 = and(T_696, T_701)
    node T_705 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<9>("h0"))
    node T_706 = not(T_705)
    node T_707 = and(T_702, T_706)
    node T_710 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<9>("h0"))
    node T_711 = not(T_710)
    node T_712 = and(T_707, T_711)
    node T_715 = mux(pegMinFiniteMagOut, UInt<9>("h6b"), UInt<9>("h0"))
    node T_716 = or(T_712, T_715)
    node T_719 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<9>("h0"))
    node T_720 = or(T_716, T_719)
    node T_723 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<9>("h0"))
    node T_724 = or(T_720, T_723)
    node T_727 = mux(isNaNOut, UInt<9>("h1c0"), UInt<9>("h0"))
    node expOut = or(T_724, T_727)
    node T_728 = and(totalUnderflowY, roundMagUp)
    node T_729 = or(T_728, isNaNOut)
    node T_733 = mux(isNaNOut, UInt<23>("h400000"), UInt<23>("h0"))
    node T_734 = mux(T_729, T_733, fractY)
    node T_738 = mux(pegMaxFiniteMagOut, UInt<23>("h7fffff"), UInt<23>("h0"))
    node fractOut = or(T_734, T_738)
    node T_739 = cat(signOut, expOut)
    node T_740 = cat(T_739, fractOut)
    node T_742 = cat(underflow, inexact)
    node T_743 = cat(invalid, UInt<1>("h0"))
    node T_744 = cat(T_743, overflow)
    node T_745 = cat(T_744, T_742)
    io_out <= T_740
    io_exceptionFlags <= T_745

  module MulAddRecFN :
    input clk : Clock
    input reset : UInt<1>
    input io_op : UInt<2>
    input io_a : UInt<33>
    input io_b : UInt<33>
    input io_c : UInt<33>
    input io_roundingMode : UInt<2>
    output io_out : UInt<33>
    output io_exceptionFlags : UInt<5>
  
    inst mulAddRecFN_preMul of MulAddRecFN_preMul
    inst mulAddRecFN_postMul of MulAddRecFN_postMul
    node T_7 = mul(mulAddRecFN_preMul.io_mulAddA, mulAddRecFN_preMul.io_mulAddB)
    node T_9 = cat(UInt<1>("h0"), mulAddRecFN_preMul.io_mulAddC)
    node GEN_0 = pad(T_7, 49)
    node T_10 = add(GEN_0, T_9)
    node T_11 = tail(T_10, 1)
    io_out <= mulAddRecFN_postMul.io_out
    io_exceptionFlags <= mulAddRecFN_postMul.io_exceptionFlags
    mulAddRecFN_preMul.io_op <= io_op
    mulAddRecFN_preMul.io_a <= io_a
    mulAddRecFN_preMul.io_b <= io_b
    mulAddRecFN_preMul.io_c <= io_c
    mulAddRecFN_preMul.io_roundingMode <= io_roundingMode
    mulAddRecFN_postMul.io_fromPreMul_highExpA <= mulAddRecFN_preMul.io_toPostMul_highExpA
    mulAddRecFN_postMul.io_fromPreMul_isNaN_isQuietNaNA <= mulAddRecFN_preMul.io_toPostMul_isNaN_isQuietNaNA
    mulAddRecFN_postMul.io_fromPreMul_highExpB <= mulAddRecFN_preMul.io_toPostMul_highExpB
    mulAddRecFN_postMul.io_fromPreMul_isNaN_isQuietNaNB <= mulAddRecFN_preMul.io_toPostMul_isNaN_isQuietNaNB
    mulAddRecFN_postMul.io_fromPreMul_signProd <= mulAddRecFN_preMul.io_toPostMul_signProd
    mulAddRecFN_postMul.io_fromPreMul_isZeroProd <= mulAddRecFN_preMul.io_toPostMul_isZeroProd
    mulAddRecFN_postMul.io_fromPreMul_opSignC <= mulAddRecFN_preMul.io_toPostMul_opSignC
    mulAddRecFN_postMul.io_fromPreMul_highExpC <= mulAddRecFN_preMul.io_toPostMul_highExpC
    mulAddRecFN_postMul.io_fromPreMul_isNaN_isQuietNaNC <= mulAddRecFN_preMul.io_toPostMul_isNaN_isQuietNaNC
    mulAddRecFN_postMul.io_fromPreMul_isCDominant <= mulAddRecFN_preMul.io_toPostMul_isCDominant
    mulAddRecFN_postMul.io_fromPreMul_CAlignDist_0 <= mulAddRecFN_preMul.io_toPostMul_CAlignDist_0
    mulAddRecFN_postMul.io_fromPreMul_CAlignDist <= mulAddRecFN_preMul.io_toPostMul_CAlignDist
    mulAddRecFN_postMul.io_fromPreMul_bit0AlignedNegSigC <= mulAddRecFN_preMul.io_toPostMul_bit0AlignedNegSigC
    mulAddRecFN_postMul.io_fromPreMul_highAlignedNegSigC <= mulAddRecFN_preMul.io_toPostMul_highAlignedNegSigC
    mulAddRecFN_postMul.io_fromPreMul_sExpSum <= mulAddRecFN_preMul.io_toPostMul_sExpSum
    mulAddRecFN_postMul.io_fromPreMul_roundingMode <= mulAddRecFN_preMul.io_toPostMul_roundingMode
    mulAddRecFN_postMul.io_mulAddResult <= T_11

  module FPUFMAPipe :
    input clk : Clock
    input reset : UInt<1>
    input io_in_valid : UInt<1>
    input io_in_bits_cmd : UInt<5>
    input io_in_bits_ldst : UInt<1>
    input io_in_bits_wen : UInt<1>
    input io_in_bits_ren1 : UInt<1>
    input io_in_bits_ren2 : UInt<1>
    input io_in_bits_ren3 : UInt<1>
    input io_in_bits_swap12 : UInt<1>
    input io_in_bits_swap23 : UInt<1>
    input io_in_bits_single : UInt<1>
    input io_in_bits_fromint : UInt<1>
    input io_in_bits_toint : UInt<1>
    input io_in_bits_fastpipe : UInt<1>
    input io_in_bits_fma : UInt<1>
    input io_in_bits_div : UInt<1>
    input io_in_bits_sqrt : UInt<1>
    input io_in_bits_round : UInt<1>
    input io_in_bits_wflags : UInt<1>
    input io_in_bits_rm : UInt<3>
    input io_in_bits_typ : UInt<2>
    input io_in_bits_in1 : UInt<65>
    input io_in_bits_in2 : UInt<65>
    input io_in_bits_in3 : UInt<65>
    output io_out_valid : UInt<1>
    output io_out_bits_data : UInt<65>
    output io_out_bits_exc : UInt<5>
  
    node T_131 = bits(io_in_bits_in1, 32, 32)
    node T_132 = bits(io_in_bits_in2, 32, 32)
    node T_133 = xor(T_131, T_132)
    node GEN_28 = pad(T_133, 33)
    node zero = shlw(GEN_28, 32)
    reg valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), valid)
    reg in_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), in_cmd)
    reg in_ldst : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ldst)
    reg in_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_wen)
    reg in_ren1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren1)
    reg in_ren2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren2)
    reg in_ren3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren3)
    reg in_swap12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_swap12)
    reg in_swap23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_swap23)
    reg in_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_single)
    reg in_fromint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fromint)
    reg in_toint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_toint)
    reg in_fastpipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fastpipe)
    reg in_fma : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fma)
    reg in_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_div)
    reg in_sqrt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_sqrt)
    reg in_round : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_round)
    reg in_wflags : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_wflags)
    reg in_rm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), in_rm)
    reg in_typ : UInt<2>, clk with :
      reset => (UInt<1>("h0"), in_typ)
    reg in_in1 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in1)
    reg in_in2 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in2)
    reg in_in3 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in3)
    node T_179 = bits(io_in_bits_cmd, 1, 1)
    node T_180 = or(io_in_bits_ren3, io_in_bits_swap23)
    node T_181 = and(T_179, T_180)
    node T_182 = bits(io_in_bits_cmd, 0, 0)
    node T_183 = cat(T_181, T_182)
    node GEN_0 = mux(io_in_bits_swap23, UInt<65>("h80000000"), io_in_bits_in2)
    node T_186 = eq(T_180, UInt<1>("h0"))
    node GEN_1 = mux(T_186, pad(zero, 65), io_in_bits_in3)
    node GEN_2 = mux(io_in_valid, pad(T_183, 5), in_cmd)
    node GEN_3 = mux(io_in_valid, io_in_bits_ldst, in_ldst)
    node GEN_4 = mux(io_in_valid, io_in_bits_wen, in_wen)
    node GEN_5 = mux(io_in_valid, io_in_bits_ren1, in_ren1)
    node GEN_6 = mux(io_in_valid, io_in_bits_ren2, in_ren2)
    node GEN_7 = mux(io_in_valid, io_in_bits_ren3, in_ren3)
    node GEN_8 = mux(io_in_valid, io_in_bits_swap12, in_swap12)
    node GEN_9 = mux(io_in_valid, io_in_bits_swap23, in_swap23)
    node GEN_10 = mux(io_in_valid, io_in_bits_single, in_single)
    node GEN_11 = mux(io_in_valid, io_in_bits_fromint, in_fromint)
    node GEN_12 = mux(io_in_valid, io_in_bits_toint, in_toint)
    node GEN_13 = mux(io_in_valid, io_in_bits_fastpipe, in_fastpipe)
    node GEN_14 = mux(io_in_valid, io_in_bits_fma, in_fma)
    node GEN_15 = mux(io_in_valid, io_in_bits_div, in_div)
    node GEN_16 = mux(io_in_valid, io_in_bits_sqrt, in_sqrt)
    node GEN_17 = mux(io_in_valid, io_in_bits_round, in_round)
    node GEN_18 = mux(io_in_valid, io_in_bits_wflags, in_wflags)
    node GEN_19 = mux(io_in_valid, io_in_bits_rm, in_rm)
    node GEN_20 = mux(io_in_valid, io_in_bits_typ, in_typ)
    node GEN_21 = mux(io_in_valid, io_in_bits_in1, in_in1)
    node GEN_22 = mux(io_in_valid, GEN_0, in_in2)
    node GEN_23 = mux(io_in_valid, GEN_1, in_in3)
    inst fma of MulAddRecFN
    wire res_data : UInt<65>
    wire res_exc : UInt<5>
    node T_193 = cat(UInt<32>("hffffffff"), fma.io_out)
    reg T_196 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_197_data : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_197_data)
    reg T_197_exc : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_197_exc)
    node GEN_24 = mux(valid, res_data, T_197_data)
    node GEN_25 = mux(valid, res_exc, T_197_exc)
    reg T_202 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_203_data : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_203_data)
    reg T_203_exc : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_203_exc)
    node GEN_26 = mux(T_196, T_197_data, T_203_data)
    node GEN_27 = mux(T_196, T_197_exc, T_203_exc)
    wire T_214_valid : UInt<1>
    wire T_214_bits_data : UInt<65>
    wire T_214_bits_exc : UInt<5>
    io_out_valid <= T_214_valid
    io_out_bits_data <= T_214_bits_data
    io_out_bits_exc <= T_214_bits_exc
    valid <= io_in_valid
    in_cmd <= GEN_2
    in_ldst <= GEN_3
    in_wen <= GEN_4
    in_ren1 <= GEN_5
    in_ren2 <= GEN_6
    in_ren3 <= GEN_7
    in_swap12 <= GEN_8
    in_swap23 <= GEN_9
    in_single <= GEN_10
    in_fromint <= GEN_11
    in_toint <= GEN_12
    in_fastpipe <= GEN_13
    in_fma <= GEN_14
    in_div <= GEN_15
    in_sqrt <= GEN_16
    in_round <= GEN_17
    in_wflags <= GEN_18
    in_rm <= GEN_19
    in_typ <= GEN_20
    in_in1 <= GEN_21
    in_in2 <= GEN_22
    in_in3 <= GEN_23
    fma.io_op <= bits(in_cmd, 1, 0)
    fma.io_a <= bits(in_in1, 32, 0)
    fma.io_b <= bits(in_in2, 32, 0)
    fma.io_c <= bits(in_in3, 32, 0)
    fma.io_roundingMode <= bits(in_rm, 1, 0)
    res_data <= T_193
    res_exc <= fma.io_exceptionFlags
    T_196 <= valid
    T_197_data <= GEN_24
    T_197_exc <= GEN_25
    T_202 <= T_196
    T_203_data <= GEN_26
    T_203_exc <= GEN_27
    T_214_valid <= T_202
    T_214_bits_data <= T_203_data
    T_214_bits_exc <= T_203_exc

  module CompareRecFN :
    input clk : Clock
    input reset : UInt<1>
    input io_a : UInt<65>
    input io_b : UInt<65>
    input io_signaling : UInt<1>
    output io_lt : UInt<1>
    output io_eq : UInt<1>
    output io_gt : UInt<1>
    output io_exceptionFlags : UInt<5>
  
    node T_7 = bits(io_a, 63, 52)
    node T_8 = bits(T_7, 11, 9)
    node T_10 = eq(T_8, UInt<3>("h0"))
    node T_11 = bits(T_7, 11, 10)
    node T_13 = eq(T_11, UInt<2>("h3"))
    wire rawA_sign : UInt<1>
    wire rawA_isNaN : UInt<1>
    wire rawA_isInf : UInt<1>
    wire rawA_isZero : UInt<1>
    wire rawA_sExp : SInt<13>
    wire rawA_sig : UInt<56>
    node T_27 = bits(io_a, 64, 64)
    node T_28 = bits(T_7, 9, 9)
    node T_29 = and(T_13, T_28)
    node T_32 = eq(T_28, UInt<1>("h0"))
    node T_33 = and(T_13, T_32)
    node T_34 = cvt(T_7)
    node T_37 = eq(T_10, UInt<1>("h0"))
    node T_38 = bits(io_a, 51, 0)
    node T_40 = cat(T_38, UInt<2>("h0"))
    node T_41 = cat(UInt<1>("h0"), T_37)
    node T_42 = cat(T_41, T_40)
    node T_43 = bits(io_b, 63, 52)
    node T_44 = bits(T_43, 11, 9)
    node T_46 = eq(T_44, UInt<3>("h0"))
    node T_47 = bits(T_43, 11, 10)
    node T_49 = eq(T_47, UInt<2>("h3"))
    wire rawB_sign : UInt<1>
    wire rawB_isNaN : UInt<1>
    wire rawB_isInf : UInt<1>
    wire rawB_isZero : UInt<1>
    wire rawB_sExp : SInt<13>
    wire rawB_sig : UInt<56>
    node T_63 = bits(io_b, 64, 64)
    node T_64 = bits(T_43, 9, 9)
    node T_65 = and(T_49, T_64)
    node T_68 = eq(T_64, UInt<1>("h0"))
    node T_69 = and(T_49, T_68)
    node T_70 = cvt(T_43)
    node T_73 = eq(T_46, UInt<1>("h0"))
    node T_74 = bits(io_b, 51, 0)
    node T_76 = cat(T_74, UInt<2>("h0"))
    node T_77 = cat(UInt<1>("h0"), T_73)
    node T_78 = cat(T_77, T_76)
    node T_80 = eq(rawA_isNaN, UInt<1>("h0"))
    node T_82 = eq(rawB_isNaN, UInt<1>("h0"))
    node ordered = and(T_80, T_82)
    node bothInfs = and(rawA_isInf, rawB_isInf)
    node bothZeros = and(rawA_isZero, rawB_isZero)
    node eqExps = eq(rawA_sExp, rawB_sExp)
    node T_83 = lt(rawA_sExp, rawB_sExp)
    node T_84 = lt(rawA_sig, rawB_sig)
    node T_85 = and(eqExps, T_84)
    node common_ltMags = or(T_83, T_85)
    node T_86 = eq(rawA_sig, rawB_sig)
    node common_eqMags = and(eqExps, T_86)
    node T_88 = eq(bothZeros, UInt<1>("h0"))
    node T_90 = eq(rawB_sign, UInt<1>("h0"))
    node T_91 = and(rawA_sign, T_90)
    node T_93 = eq(bothInfs, UInt<1>("h0"))
    node T_95 = eq(common_ltMags, UInt<1>("h0"))
    node T_96 = and(rawA_sign, T_95)
    node T_98 = eq(common_eqMags, UInt<1>("h0"))
    node T_99 = and(T_96, T_98)
    node T_102 = and(T_90, common_ltMags)
    node T_103 = or(T_99, T_102)
    node T_104 = and(T_93, T_103)
    node T_105 = or(T_91, T_104)
    node ordered_lt = and(T_88, T_105)
    node T_106 = eq(rawA_sign, rawB_sign)
    node T_107 = or(bothInfs, common_eqMags)
    node T_108 = and(T_106, T_107)
    node ordered_eq = or(bothZeros, T_108)
    node T_109 = bits(rawA_sig, 53, 53)
    node T_111 = eq(T_109, UInt<1>("h0"))
    node T_112 = and(rawA_isNaN, T_111)
    node T_113 = bits(rawB_sig, 53, 53)
    node T_115 = eq(T_113, UInt<1>("h0"))
    node T_116 = and(rawB_isNaN, T_115)
    node T_117 = or(T_112, T_116)
    node T_119 = eq(ordered, UInt<1>("h0"))
    node T_120 = and(io_signaling, T_119)
    node invalid = or(T_117, T_120)
    node T_121 = and(ordered, ordered_lt)
    node T_122 = and(ordered, ordered_eq)
    node T_124 = eq(ordered_lt, UInt<1>("h0"))
    node T_125 = and(ordered, T_124)
    node T_127 = eq(ordered_eq, UInt<1>("h0"))
    node T_128 = and(T_125, T_127)
    node T_130 = cat(invalid, UInt<4>("h0"))
    io_lt <= T_121
    io_eq <= T_122
    io_gt <= T_128
    io_exceptionFlags <= T_130
    rawA_sign <= T_27
    rawA_isNaN <= T_29
    rawA_isInf <= T_33
    rawA_isZero <= T_10
    rawA_sExp <= T_34
    rawA_sig <= T_42
    rawB_sign <= T_63
    rawB_isNaN <= T_65
    rawB_isInf <= T_69
    rawB_isZero <= T_46
    rawB_sExp <= T_70
    rawB_sig <= T_78

  module RecFNToIN :
    input clk : Clock
    input reset : UInt<1>
    input io_in : UInt<65>
    input io_roundingMode : UInt<2>
    input io_signedOut : UInt<1>
    output io_out : UInt<32>
    output io_intExceptionFlags : UInt<3>
  
    node sign = bits(io_in, 64, 64)
    node exp = bits(io_in, 63, 52)
    node fract = bits(io_in, 51, 0)
    node T_5 = bits(exp, 11, 9)
    node isZero = eq(T_5, UInt<3>("h0"))
    node T_7 = bits(exp, 11, 10)
    node isSpecial = eq(T_7, UInt<2>("h3"))
    node T_9 = bits(exp, 9, 9)
    node isNaN = and(isSpecial, T_9)
    node notSpecial_magGeOne = bits(exp, 11, 11)
    node T_10 = cat(notSpecial_magGeOne, fract)
    node T_11 = bits(exp, 4, 0)
    node T_13 = mux(notSpecial_magGeOne, T_11, UInt<5>("h0"))
    node GEN_0 = pad(T_10, 84)
    node shiftedSig = dshlw(GEN_0, T_13)
    node unroundedInt = bits(shiftedSig, 83, 52)
    node T_14 = bits(shiftedSig, 52, 51)
    node T_15 = bits(shiftedSig, 50, 0)
    node T_17 = neq(T_15, UInt<51>("h0"))
    node roundBits = cat(T_14, T_17)
    node T_18 = bits(roundBits, 1, 0)
    node T_20 = neq(T_18, UInt<2>("h0"))
    node T_22 = eq(isZero, UInt<1>("h0"))
    node roundInexact = mux(notSpecial_magGeOne, T_20, T_22)
    node T_23 = bits(roundBits, 2, 1)
    node T_24 = not(T_23)
    node T_26 = eq(T_24, UInt<2>("h0"))
    node T_28 = not(T_18)
    node T_30 = eq(T_28, UInt<2>("h0"))
    node T_31 = or(T_26, T_30)
    node T_32 = bits(exp, 10, 0)
    node T_33 = not(T_32)
    node T_35 = eq(T_33, UInt<11>("h0"))
    node T_40 = mux(T_35, T_20, UInt<1>("h0"))
    node roundIncr_nearestEven = mux(notSpecial_magGeOne, T_31, T_40)
    node T_41 = eq(io_roundingMode, UInt<2>("h0"))
    node T_42 = and(T_41, roundIncr_nearestEven)
    node T_43 = eq(io_roundingMode, UInt<2>("h2"))
    node T_44 = and(sign, roundInexact)
    node T_45 = and(T_43, T_44)
    node T_46 = or(T_42, T_45)
    node T_47 = eq(io_roundingMode, UInt<2>("h3"))
    node T_49 = eq(sign, UInt<1>("h0"))
    node T_50 = and(T_49, roundInexact)
    node T_51 = and(T_47, T_50)
    node roundIncr = or(T_46, T_51)
    node T_52 = not(unroundedInt)
    node complUnroundedInt = mux(sign, T_52, unroundedInt)
    node T_53 = xor(roundIncr, sign)
    node T_55 = add(complUnroundedInt, UInt<32>("h1"))
    node T_56 = tail(T_55, 1)
    node roundedInt = mux(T_53, T_56, complUnroundedInt)
    node T_57 = bits(unroundedInt, 29, 0)
    node T_58 = not(T_57)
    node T_60 = eq(T_58, UInt<30>("h0"))
    node roundCarryBut2 = and(T_60, roundIncr)
    node T_62 = geq(T_32, UInt<11>("h20"))
    node T_64 = eq(T_32, UInt<11>("h1f"))
    node T_67 = bits(unroundedInt, 30, 0)
    node T_69 = neq(T_67, UInt<31>("h0"))
    node T_70 = or(T_49, T_69)
    node T_71 = or(T_70, roundIncr)
    node T_72 = and(T_64, T_71)
    node T_73 = or(T_62, T_72)
    node T_77 = eq(T_32, UInt<11>("h1e"))
    node T_78 = and(T_49, T_77)
    node T_79 = and(T_78, roundCarryBut2)
    node T_80 = or(T_73, T_79)
    node overflow_signed = mux(notSpecial_magGeOne, T_80, UInt<1>("h0"))
    node T_84 = or(sign, T_62)
    node T_87 = bits(unroundedInt, 30, 30)
    node T_88 = and(T_64, T_87)
    node T_89 = and(T_88, roundCarryBut2)
    node T_90 = or(T_84, T_89)
    node T_91 = and(sign, roundIncr)
    node overflow_unsigned = mux(notSpecial_magGeOne, T_90, T_91)
    node overflow = mux(io_signedOut, overflow_signed, overflow_unsigned)
    node T_93 = eq(isNaN, UInt<1>("h0"))
    node excSign = and(sign, T_93)
    node T_94 = and(io_signedOut, excSign)
    node T_98 = mux(T_94, UInt<32>("h80000000"), UInt<32>("h0"))
    node T_100 = eq(excSign, UInt<1>("h0"))
    node T_101 = and(io_signedOut, T_100)
    node T_104 = mux(T_101, UInt<31>("h7fffffff"), UInt<31>("h0"))
    node GEN_1 = pad(T_104, 32)
    node T_105 = or(T_98, GEN_1)
    node T_107 = eq(io_signedOut, UInt<1>("h0"))
    node T_110 = and(T_107, T_100)
    node T_113 = mux(T_110, UInt<32>("hffffffff"), UInt<32>("h0"))
    node excValue = or(T_105, T_113)
    node T_115 = eq(isSpecial, UInt<1>("h0"))
    node T_116 = and(roundInexact, T_115)
    node T_118 = eq(overflow, UInt<1>("h0"))
    node inexact = and(T_116, T_118)
    node T_119 = or(isSpecial, overflow)
    node T_120 = mux(T_119, excValue, roundedInt)
    node T_121 = cat(isSpecial, overflow)
    node T_122 = cat(T_121, inexact)
    io_out <= T_120
    io_intExceptionFlags <= T_122

  module RecFNToIN_1 :
    input clk : Clock
    input reset : UInt<1>
    input io_in : UInt<65>
    input io_roundingMode : UInt<2>
    input io_signedOut : UInt<1>
    output io_out : UInt<64>
    output io_intExceptionFlags : UInt<3>
  
    node sign = bits(io_in, 64, 64)
    node exp = bits(io_in, 63, 52)
    node fract = bits(io_in, 51, 0)
    node T_5 = bits(exp, 11, 9)
    node isZero = eq(T_5, UInt<3>("h0"))
    node T_7 = bits(exp, 11, 10)
    node isSpecial = eq(T_7, UInt<2>("h3"))
    node T_9 = bits(exp, 9, 9)
    node isNaN = and(isSpecial, T_9)
    node notSpecial_magGeOne = bits(exp, 11, 11)
    node T_10 = cat(notSpecial_magGeOne, fract)
    node T_11 = bits(exp, 5, 0)
    node T_13 = mux(notSpecial_magGeOne, T_11, UInt<6>("h0"))
    node GEN_0 = pad(T_10, 116)
    node shiftedSig = dshlw(GEN_0, T_13)
    node unroundedInt = bits(shiftedSig, 115, 52)
    node T_14 = bits(shiftedSig, 52, 51)
    node T_15 = bits(shiftedSig, 50, 0)
    node T_17 = neq(T_15, UInt<51>("h0"))
    node roundBits = cat(T_14, T_17)
    node T_18 = bits(roundBits, 1, 0)
    node T_20 = neq(T_18, UInt<2>("h0"))
    node T_22 = eq(isZero, UInt<1>("h0"))
    node roundInexact = mux(notSpecial_magGeOne, T_20, T_22)
    node T_23 = bits(roundBits, 2, 1)
    node T_24 = not(T_23)
    node T_26 = eq(T_24, UInt<2>("h0"))
    node T_28 = not(T_18)
    node T_30 = eq(T_28, UInt<2>("h0"))
    node T_31 = or(T_26, T_30)
    node T_32 = bits(exp, 10, 0)
    node T_33 = not(T_32)
    node T_35 = eq(T_33, UInt<11>("h0"))
    node T_40 = mux(T_35, T_20, UInt<1>("h0"))
    node roundIncr_nearestEven = mux(notSpecial_magGeOne, T_31, T_40)
    node T_41 = eq(io_roundingMode, UInt<2>("h0"))
    node T_42 = and(T_41, roundIncr_nearestEven)
    node T_43 = eq(io_roundingMode, UInt<2>("h2"))
    node T_44 = and(sign, roundInexact)
    node T_45 = and(T_43, T_44)
    node T_46 = or(T_42, T_45)
    node T_47 = eq(io_roundingMode, UInt<2>("h3"))
    node T_49 = eq(sign, UInt<1>("h0"))
    node T_50 = and(T_49, roundInexact)
    node T_51 = and(T_47, T_50)
    node roundIncr = or(T_46, T_51)
    node T_52 = not(unroundedInt)
    node complUnroundedInt = mux(sign, T_52, unroundedInt)
    node T_53 = xor(roundIncr, sign)
    node T_56 = addw(complUnroundedInt, UInt<64>("h1"))
    node roundedInt = mux(T_53, T_56, complUnroundedInt)
    node T_57 = bits(unroundedInt, 61, 0)
    node T_58 = not(T_57)
    node T_60 = eq(T_58, UInt<62>("h0"))
    node roundCarryBut2 = and(T_60, roundIncr)
    node T_62 = geq(T_32, UInt<11>("h40"))
    node T_64 = eq(T_32, UInt<11>("h3f"))
    node T_67 = bits(unroundedInt, 62, 0)
    node T_69 = neq(T_67, UInt<63>("h0"))
    node T_70 = or(T_49, T_69)
    node T_71 = or(T_70, roundIncr)
    node T_72 = and(T_64, T_71)
    node T_73 = or(T_62, T_72)
    node T_77 = eq(T_32, UInt<11>("h3e"))
    node T_78 = and(T_49, T_77)
    node T_79 = and(T_78, roundCarryBut2)
    node T_80 = or(T_73, T_79)
    node overflow_signed = mux(notSpecial_magGeOne, T_80, UInt<1>("h0"))
    node T_84 = or(sign, T_62)
    node T_87 = bits(unroundedInt, 62, 62)
    node T_88 = and(T_64, T_87)
    node T_89 = and(T_88, roundCarryBut2)
    node T_90 = or(T_84, T_89)
    node T_91 = and(sign, roundIncr)
    node overflow_unsigned = mux(notSpecial_magGeOne, T_90, T_91)
    node overflow = mux(io_signedOut, overflow_signed, overflow_unsigned)
    node T_93 = eq(isNaN, UInt<1>("h0"))
    node excSign = and(sign, T_93)
    node T_94 = and(io_signedOut, excSign)
    node T_98 = mux(T_94, UInt<64>("h8000000000000000"), UInt<64>("h0"))
    node T_100 = eq(excSign, UInt<1>("h0"))
    node T_101 = and(io_signedOut, T_100)
    node T_104 = mux(T_101, UInt<63>("h7fffffffffffffff"), UInt<63>("h0"))
    node GEN_1 = pad(T_104, 64)
    node T_105 = or(T_98, GEN_1)
    node T_107 = eq(io_signedOut, UInt<1>("h0"))
    node T_110 = and(T_107, T_100)
    node T_113 = mux(T_110, UInt<64>("hffffffffffffffff"), UInt<64>("h0"))
    node excValue = or(T_105, T_113)
    node T_115 = eq(isSpecial, UInt<1>("h0"))
    node T_116 = and(roundInexact, T_115)
    node T_118 = eq(overflow, UInt<1>("h0"))
    node inexact = and(T_116, T_118)
    node T_119 = or(isSpecial, overflow)
    node T_120 = mux(T_119, excValue, roundedInt)
    node T_121 = cat(isSpecial, overflow)
    node T_122 = cat(T_121, inexact)
    io_out <= T_120
    io_intExceptionFlags <= T_122

  module FPToInt :
    input clk : Clock
    input reset : UInt<1>
    input io_in_valid : UInt<1>
    input io_in_bits_cmd : UInt<5>
    input io_in_bits_ldst : UInt<1>
    input io_in_bits_wen : UInt<1>
    input io_in_bits_ren1 : UInt<1>
    input io_in_bits_ren2 : UInt<1>
    input io_in_bits_ren3 : UInt<1>
    input io_in_bits_swap12 : UInt<1>
    input io_in_bits_swap23 : UInt<1>
    input io_in_bits_single : UInt<1>
    input io_in_bits_fromint : UInt<1>
    input io_in_bits_toint : UInt<1>
    input io_in_bits_fastpipe : UInt<1>
    input io_in_bits_fma : UInt<1>
    input io_in_bits_div : UInt<1>
    input io_in_bits_sqrt : UInt<1>
    input io_in_bits_round : UInt<1>
    input io_in_bits_wflags : UInt<1>
    input io_in_bits_rm : UInt<3>
    input io_in_bits_typ : UInt<2>
    input io_in_bits_in1 : UInt<65>
    input io_in_bits_in2 : UInt<65>
    input io_in_bits_in3 : UInt<65>
    output io_as_double_cmd : UInt<5>
    output io_as_double_ldst : UInt<1>
    output io_as_double_wen : UInt<1>
    output io_as_double_ren1 : UInt<1>
    output io_as_double_ren2 : UInt<1>
    output io_as_double_ren3 : UInt<1>
    output io_as_double_swap12 : UInt<1>
    output io_as_double_swap23 : UInt<1>
    output io_as_double_single : UInt<1>
    output io_as_double_fromint : UInt<1>
    output io_as_double_toint : UInt<1>
    output io_as_double_fastpipe : UInt<1>
    output io_as_double_fma : UInt<1>
    output io_as_double_div : UInt<1>
    output io_as_double_sqrt : UInt<1>
    output io_as_double_round : UInt<1>
    output io_as_double_wflags : UInt<1>
    output io_as_double_rm : UInt<3>
    output io_as_double_typ : UInt<2>
    output io_as_double_in1 : UInt<65>
    output io_as_double_in2 : UInt<65>
    output io_as_double_in3 : UInt<65>
    output io_out_valid : UInt<1>
    output io_out_bits_lt : UInt<1>
    output io_out_bits_store : UInt<64>
    output io_out_bits_toint : UInt<64>
    output io_out_bits_exc : UInt<5>
  
    reg in_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), in_cmd)
    reg in_ldst : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ldst)
    reg in_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_wen)
    reg in_ren1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren1)
    reg in_ren2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren2)
    reg in_ren3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren3)
    reg in_swap12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_swap12)
    reg in_swap23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_swap23)
    reg in_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_single)
    reg in_fromint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fromint)
    reg in_toint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_toint)
    reg in_fastpipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fastpipe)
    reg in_fma : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fma)
    reg in_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_div)
    reg in_sqrt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_sqrt)
    reg in_round : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_round)
    reg in_wflags : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_wflags)
    reg in_rm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), in_rm)
    reg in_typ : UInt<2>, clk with :
      reset => (UInt<1>("h0"), in_typ)
    reg in_in1 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in1)
    reg in_in2 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in2)
    reg in_in3 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in3)
    reg valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), valid)
    node T_228 = eq(io_in_bits_ldst, UInt<1>("h0"))
    node T_229 = and(io_in_bits_single, T_228)
    node T_232 = and(io_in_bits_cmd, UInt<5>("hc"))
    node T_233 = eq(UInt<5>("hc"), T_232)
    node T_235 = eq(T_233, UInt<1>("h0"))
    node T_236 = and(T_229, T_235)
    node T_237 = bits(io_in_bits_in1, 32, 32)
    node T_238 = bits(io_in_bits_in1, 22, 0)
    node T_239 = bits(io_in_bits_in1, 31, 23)
    node GEN_32 = pad(T_238, 76)
    node T_240 = shlw(GEN_32, 53)
    node T_241 = shr(T_240, 24)
    node T_242 = bits(T_239, 8, 6)
    node GEN_33 = pad(T_239, 12)
    node T_244 = add(GEN_33, UInt<12>("h800"))
    node T_245 = tail(T_244, 1)
    node T_247 = sub(T_245, UInt<12>("h100"))
    node T_248 = tail(T_247, 1)
    node T_250 = eq(T_242, UInt<3>("h0"))
    node T_252 = geq(T_242, UInt<3>("h6"))
    node T_253 = or(T_250, T_252)
    node T_254 = bits(T_248, 8, 0)
    node T_255 = cat(T_242, T_254)
    node T_257 = mux(T_253, T_255, T_248)
    node T_258 = cat(T_237, T_257)
    node T_259 = cat(T_258, T_241)
    node T_260 = bits(io_in_bits_in2, 32, 32)
    node T_261 = bits(io_in_bits_in2, 22, 0)
    node T_262 = bits(io_in_bits_in2, 31, 23)
    node GEN_34 = pad(T_261, 76)
    node T_263 = shlw(GEN_34, 53)
    node T_264 = shr(T_263, 24)
    node T_265 = bits(T_262, 8, 6)
    node GEN_35 = pad(T_262, 12)
    node T_267 = add(GEN_35, UInt<12>("h800"))
    node T_268 = tail(T_267, 1)
    node T_270 = sub(T_268, UInt<12>("h100"))
    node T_271 = tail(T_270, 1)
    node T_273 = eq(T_265, UInt<3>("h0"))
    node T_275 = geq(T_265, UInt<3>("h6"))
    node T_276 = or(T_273, T_275)
    node T_277 = bits(T_271, 8, 0)
    node T_278 = cat(T_265, T_277)
    node T_280 = mux(T_276, T_278, T_271)
    node T_281 = cat(T_260, T_280)
    node T_282 = cat(T_281, T_264)
    node GEN_0 = mux(T_236, T_259, io_in_bits_in1)
    node GEN_1 = mux(T_236, T_282, io_in_bits_in2)
    node GEN_2 = mux(io_in_valid, io_in_bits_cmd, in_cmd)
    node GEN_3 = mux(io_in_valid, io_in_bits_ldst, in_ldst)
    node GEN_4 = mux(io_in_valid, io_in_bits_wen, in_wen)
    node GEN_5 = mux(io_in_valid, io_in_bits_ren1, in_ren1)
    node GEN_6 = mux(io_in_valid, io_in_bits_ren2, in_ren2)
    node GEN_7 = mux(io_in_valid, io_in_bits_ren3, in_ren3)
    node GEN_8 = mux(io_in_valid, io_in_bits_swap12, in_swap12)
    node GEN_9 = mux(io_in_valid, io_in_bits_swap23, in_swap23)
    node GEN_10 = mux(io_in_valid, io_in_bits_single, in_single)
    node GEN_11 = mux(io_in_valid, io_in_bits_fromint, in_fromint)
    node GEN_12 = mux(io_in_valid, io_in_bits_toint, in_toint)
    node GEN_13 = mux(io_in_valid, io_in_bits_fastpipe, in_fastpipe)
    node GEN_14 = mux(io_in_valid, io_in_bits_fma, in_fma)
    node GEN_15 = mux(io_in_valid, io_in_bits_div, in_div)
    node GEN_16 = mux(io_in_valid, io_in_bits_sqrt, in_sqrt)
    node GEN_17 = mux(io_in_valid, io_in_bits_round, in_round)
    node GEN_18 = mux(io_in_valid, io_in_bits_wflags, in_wflags)
    node GEN_19 = mux(io_in_valid, io_in_bits_rm, in_rm)
    node GEN_20 = mux(io_in_valid, io_in_bits_typ, in_typ)
    node GEN_21 = mux(io_in_valid, GEN_0, in_in1)
    node GEN_22 = mux(io_in_valid, GEN_1, in_in2)
    node GEN_23 = mux(io_in_valid, io_in_bits_in3, in_in3)
    node T_283 = bits(in_in1, 32, 32)
    node T_284 = bits(in_in1, 31, 23)
    node T_285 = bits(in_in1, 22, 0)
    node T_286 = bits(T_284, 6, 0)
    node T_288 = lt(T_286, UInt<7>("h2"))
    node T_289 = bits(T_284, 8, 6)
    node T_291 = eq(T_289, UInt<3>("h1"))
    node T_292 = bits(T_284, 8, 7)
    node T_294 = eq(T_292, UInt<2>("h1"))
    node T_295 = and(T_294, T_288)
    node T_296 = or(T_291, T_295)
    node T_301 = eq(T_288, UInt<1>("h0"))
    node T_302 = and(T_294, T_301)
    node T_305 = eq(T_292, UInt<2>("h2"))
    node T_306 = or(T_302, T_305)
    node T_309 = eq(T_292, UInt<2>("h3"))
    node T_310 = bits(T_284, 6, 6)
    node T_311 = and(T_309, T_310)
    node T_313 = bits(T_284, 4, 0)
    node T_314 = sub(UInt<5>("h2"), T_313)
    node T_315 = tail(T_314, 1)
    node T_317 = cat(UInt<1>("h1"), T_285)
    node T_318 = dshr(T_317, T_315)
    node T_319 = bits(T_318, 22, 0)
    node T_320 = bits(T_284, 7, 0)
    node T_322 = sub(T_320, UInt<8>("h81"))
    node T_323 = tail(T_322, 1)
    node T_327 = mux(T_309, UInt<8>("hff"), UInt<8>("h0"))
    node T_328 = mux(T_306, T_323, T_327)
    node T_329 = or(T_306, T_311)
    node T_331 = mux(T_296, T_319, UInt<23>("h0"))
    node T_332 = mux(T_329, T_285, T_331)
    node T_333 = cat(T_283, T_328)
    node T_334 = cat(T_333, T_332)
    node T_335 = bits(T_334, 31, 31)
    node T_339 = mux(T_335, UInt<32>("hffffffff"), UInt<32>("h0"))
    node unrec_s = cat(T_339, T_334)
    node T_340 = bits(in_in1, 64, 64)
    node T_341 = bits(in_in1, 63, 52)
    node T_342 = bits(in_in1, 51, 0)
    node T_343 = bits(T_341, 9, 0)
    node T_345 = lt(T_343, UInt<10>("h2"))
    node T_346 = bits(T_341, 11, 9)
    node T_348 = eq(T_346, UInt<3>("h1"))
    node T_349 = bits(T_341, 11, 10)
    node T_351 = eq(T_349, UInt<2>("h1"))
    node T_352 = and(T_351, T_345)
    node T_353 = or(T_348, T_352)
    node T_358 = eq(T_345, UInt<1>("h0"))
    node T_359 = and(T_351, T_358)
    node T_362 = eq(T_349, UInt<2>("h2"))
    node T_363 = or(T_359, T_362)
    node T_366 = eq(T_349, UInt<2>("h3"))
    node T_367 = bits(T_341, 9, 9)
    node T_368 = and(T_366, T_367)
    node T_370 = bits(T_341, 5, 0)
    node T_371 = sub(UInt<6>("h2"), T_370)
    node T_372 = tail(T_371, 1)
    node T_374 = cat(UInt<1>("h1"), T_342)
    node T_375 = dshr(T_374, T_372)
    node T_376 = bits(T_375, 51, 0)
    node T_377 = bits(T_341, 10, 0)
    node T_379 = sub(T_377, UInt<11>("h401"))
    node T_380 = tail(T_379, 1)
    node T_384 = mux(T_366, UInt<11>("h7ff"), UInt<11>("h0"))
    node T_385 = mux(T_363, T_380, T_384)
    node T_386 = or(T_363, T_368)
    node T_388 = mux(T_353, T_376, UInt<52>("h0"))
    node T_389 = mux(T_386, T_342, T_388)
    node T_390 = cat(T_340, T_385)
    node T_391 = cat(T_390, T_389)
    node unrec_mem = mux(in_single, unrec_s, T_391)
    node T_396 = bits(T_289, 2, 1)
    node T_398 = eq(T_396, UInt<2>("h3"))
    node T_405 = eq(T_396, UInt<2>("h1"))
    node T_406 = and(T_405, T_288)
    node T_407 = or(T_291, T_406)
    node T_412 = and(T_405, T_301)
    node T_414 = eq(T_396, UInt<2>("h2"))
    node T_415 = or(T_412, T_414)
    node T_417 = eq(T_289, UInt<3>("h0"))
    node T_420 = eq(T_310, UInt<1>("h0"))
    node T_421 = and(T_398, T_420)
    node T_422 = not(T_289)
    node T_424 = eq(T_422, UInt<3>("h0"))
    node T_425 = bits(T_285, 22, 22)
    node T_427 = eq(T_425, UInt<1>("h0"))
    node T_428 = and(T_424, T_427)
    node T_430 = and(T_424, T_425)
    node T_432 = eq(T_283, UInt<1>("h0"))
    node T_433 = and(T_421, T_432)
    node T_436 = and(T_415, T_432)
    node T_439 = and(T_407, T_432)
    node T_442 = and(T_417, T_432)
    node T_443 = and(T_417, T_283)
    node T_444 = and(T_407, T_283)
    node T_445 = and(T_415, T_283)
    node T_446 = and(T_421, T_283)
    node T_447 = cat(T_445, T_446)
    node T_448 = cat(T_442, T_443)
    node T_449 = cat(T_448, T_444)
    node T_450 = cat(T_449, T_447)
    node T_451 = cat(T_436, T_439)
    node T_452 = cat(T_430, T_428)
    node T_453 = cat(T_452, T_433)
    node T_454 = cat(T_453, T_451)
    node classify_s = cat(T_454, T_450)
    node T_459 = bits(T_346, 2, 1)
    node T_461 = eq(T_459, UInt<2>("h3"))
    node T_468 = eq(T_459, UInt<2>("h1"))
    node T_469 = and(T_468, T_345)
    node T_470 = or(T_348, T_469)
    node T_475 = and(T_468, T_358)
    node T_477 = eq(T_459, UInt<2>("h2"))
    node T_478 = or(T_475, T_477)
    node T_480 = eq(T_346, UInt<3>("h0"))
    node T_483 = eq(T_367, UInt<1>("h0"))
    node T_484 = and(T_461, T_483)
    node T_485 = not(T_346)
    node T_487 = eq(T_485, UInt<3>("h0"))
    node T_488 = bits(T_342, 51, 51)
    node T_490 = eq(T_488, UInt<1>("h0"))
    node T_491 = and(T_487, T_490)
    node T_493 = and(T_487, T_488)
    node T_495 = eq(T_340, UInt<1>("h0"))
    node T_496 = and(T_484, T_495)
    node T_499 = and(T_478, T_495)
    node T_502 = and(T_470, T_495)
    node T_505 = and(T_480, T_495)
    node T_506 = and(T_480, T_340)
    node T_507 = and(T_470, T_340)
    node T_508 = and(T_478, T_340)
    node T_509 = and(T_484, T_340)
    node T_510 = cat(T_508, T_509)
    node T_511 = cat(T_505, T_506)
    node T_512 = cat(T_511, T_507)
    node T_513 = cat(T_512, T_510)
    node T_514 = cat(T_499, T_502)
    node T_515 = cat(T_493, T_491)
    node T_516 = cat(T_515, T_496)
    node T_517 = cat(T_516, T_514)
    node T_518 = cat(T_517, T_513)
    node classify_out = mux(in_single, classify_s, T_518)
    inst dcmp of CompareRecFN
    node T_520 = not(in_rm)
    node T_521 = cat(dcmp.io_lt, dcmp.io_eq)
    node GEN_36 = pad(T_521, 3)
    node T_522 = and(T_520, GEN_36)
    node dcmp_out = neq(T_522, UInt<3>("h0"))
    node T_524 = bits(in_rm, 0, 0)
    node T_525 = mux(T_524, pad(classify_out, 64), unrec_mem)
    node T_529 = and(in_cmd, UInt<5>("hc"))
    node T_530 = eq(UInt<5>("h4"), T_529)
    node GEN_24 = mux(T_530, pad(dcmp_out, 64), T_525)
    node GEN_25 = mux(T_530, dcmp.io_exceptionFlags, UInt<5>("h0"))
    node T_534 = eq(UInt<5>("h8"), T_529)
    inst RecFNToIN_2 of RecFNToIN
    node T_535 = bits(in_typ, 0, 0)
    node T_536 = not(T_535)
    node T_537 = bits(in_typ, 1, 1)
    node T_539 = eq(T_537, UInt<1>("h0"))
    node T_540 = bits(RecFNToIN_2.io_out, 31, 31)
    node T_544 = mux(T_540, UInt<32>("hffffffff"), UInt<32>("h0"))
    node T_545 = cat(T_544, RecFNToIN_2.io_out)
    node T_546 = bits(RecFNToIN_2.io_intExceptionFlags, 2, 1)
    node T_548 = neq(T_546, UInt<2>("h0"))
    node T_550 = bits(RecFNToIN_2.io_intExceptionFlags, 0, 0)
    node T_551 = cat(T_548, UInt<3>("h0"))
    node T_552 = cat(T_551, T_550)
    node GEN_26 = mux(T_539, T_545, GEN_24)
    node GEN_27 = mux(T_539, T_552, GEN_25)
    inst RecFNToIN_1_1 of RecFNToIN_1
    node T_558 = bits(RecFNToIN_1_1.io_intExceptionFlags, 2, 1)
    node T_560 = neq(T_558, UInt<2>("h0"))
    node T_562 = bits(RecFNToIN_1_1.io_intExceptionFlags, 0, 0)
    node T_563 = cat(T_560, UInt<3>("h0"))
    node T_564 = cat(T_563, T_562)
    node GEN_28 = mux(T_537, RecFNToIN_1_1.io_out, GEN_26)
    node GEN_29 = mux(T_537, T_564, GEN_27)
    node GEN_30 = mux(T_534, GEN_28, GEN_24)
    node GEN_31 = mux(T_534, GEN_29, GEN_25)
    io_as_double_cmd <= in_cmd
    io_as_double_ldst <= in_ldst
    io_as_double_wen <= in_wen
    io_as_double_ren1 <= in_ren1
    io_as_double_ren2 <= in_ren2
    io_as_double_ren3 <= in_ren3
    io_as_double_swap12 <= in_swap12
    io_as_double_swap23 <= in_swap23
    io_as_double_single <= in_single
    io_as_double_fromint <= in_fromint
    io_as_double_toint <= in_toint
    io_as_double_fastpipe <= in_fastpipe
    io_as_double_fma <= in_fma
    io_as_double_div <= in_div
    io_as_double_sqrt <= in_sqrt
    io_as_double_round <= in_round
    io_as_double_wflags <= in_wflags
    io_as_double_rm <= in_rm
    io_as_double_typ <= in_typ
    io_as_double_in1 <= in_in1
    io_as_double_in2 <= in_in2
    io_as_double_in3 <= in_in3
    io_out_valid <= valid
    io_out_bits_lt <= dcmp.io_lt
    io_out_bits_store <= unrec_mem
    io_out_bits_toint <= GEN_30
    io_out_bits_exc <= GEN_31
    in_cmd <= GEN_2
    in_ldst <= GEN_3
    in_wen <= GEN_4
    in_ren1 <= GEN_5
    in_ren2 <= GEN_6
    in_ren3 <= GEN_7
    in_swap12 <= GEN_8
    in_swap23 <= GEN_9
    in_single <= GEN_10
    in_fromint <= GEN_11
    in_toint <= GEN_12
    in_fastpipe <= GEN_13
    in_fma <= GEN_14
    in_div <= GEN_15
    in_sqrt <= GEN_16
    in_round <= GEN_17
    in_wflags <= GEN_18
    in_rm <= GEN_19
    in_typ <= GEN_20
    in_in1 <= GEN_21
    in_in2 <= GEN_22
    in_in3 <= GEN_23
    valid <= io_in_valid
    dcmp.io_a <= in_in1
    dcmp.io_b <= in_in2
    dcmp.io_signaling <= UInt<1>("h1")
    RecFNToIN_2.io_in <= in_in1
    RecFNToIN_2.io_roundingMode <= bits(in_rm, 1, 0)
    RecFNToIN_2.io_signedOut <= T_536
    RecFNToIN_1_1.io_in <= in_in1
    RecFNToIN_1_1.io_roundingMode <= bits(in_rm, 1, 0)
    RecFNToIN_1_1.io_signedOut <= T_536

  module INToRecFN :
    input clk : Clock
    input reset : UInt<1>
    input io_signedIn : UInt<1>
    input io_in : UInt<64>
    input io_roundingMode : UInt<2>
    output io_out : UInt<33>
    output io_exceptionFlags : UInt<5>
  
    node T_5 = bits(io_in, 63, 63)
    node sign = and(io_signedIn, T_5)
    node T_8 = subw(UInt<64>("h0"), io_in)
    node absIn = mux(sign, T_8, io_in)
    node T_10 = bits(absIn, 63, 32)
    node T_11 = bits(absIn, 31, 0)
    node T_13 = neq(T_10, UInt<32>("h0"))
    node T_14 = bits(T_10, 31, 16)
    node T_15 = bits(T_10, 15, 0)
    node T_17 = neq(T_14, UInt<16>("h0"))
    node T_18 = bits(T_14, 15, 8)
    node T_19 = bits(T_14, 7, 0)
    node T_21 = neq(T_18, UInt<8>("h0"))
    node T_22 = bits(T_18, 7, 4)
    node T_23 = bits(T_18, 3, 0)
    node T_25 = neq(T_22, UInt<4>("h0"))
    node T_26 = bits(T_22, 3, 3)
    node T_28 = bits(T_22, 2, 2)
    node T_30 = bits(T_22, 1, 1)
    node T_32 = mux(T_28, UInt<2>("h2"), pad(T_30, 2))
    node T_33 = mux(T_26, UInt<2>("h3"), T_32)
    node T_34 = bits(T_23, 3, 3)
    node T_36 = bits(T_23, 2, 2)
    node T_38 = bits(T_23, 1, 1)
    node T_40 = mux(T_36, UInt<2>("h2"), pad(T_38, 2))
    node T_41 = mux(T_34, UInt<2>("h3"), T_40)
    node T_42 = mux(T_25, T_33, T_41)
    node T_43 = cat(T_25, T_42)
    node T_44 = bits(T_19, 7, 4)
    node T_45 = bits(T_19, 3, 0)
    node T_47 = neq(T_44, UInt<4>("h0"))
    node T_48 = bits(T_44, 3, 3)
    node T_50 = bits(T_44, 2, 2)
    node T_52 = bits(T_44, 1, 1)
    node T_54 = mux(T_50, UInt<2>("h2"), pad(T_52, 2))
    node T_55 = mux(T_48, UInt<2>("h3"), T_54)
    node T_56 = bits(T_45, 3, 3)
    node T_58 = bits(T_45, 2, 2)
    node T_60 = bits(T_45, 1, 1)
    node T_62 = mux(T_58, UInt<2>("h2"), pad(T_60, 2))
    node T_63 = mux(T_56, UInt<2>("h3"), T_62)
    node T_64 = mux(T_47, T_55, T_63)
    node T_65 = cat(T_47, T_64)
    node T_66 = mux(T_21, T_43, T_65)
    node T_67 = cat(T_21, T_66)
    node T_68 = bits(T_15, 15, 8)
    node T_69 = bits(T_15, 7, 0)
    node T_71 = neq(T_68, UInt<8>("h0"))
    node T_72 = bits(T_68, 7, 4)
    node T_73 = bits(T_68, 3, 0)
    node T_75 = neq(T_72, UInt<4>("h0"))
    node T_76 = bits(T_72, 3, 3)
    node T_78 = bits(T_72, 2, 2)
    node T_80 = bits(T_72, 1, 1)
    node T_82 = mux(T_78, UInt<2>("h2"), pad(T_80, 2))
    node T_83 = mux(T_76, UInt<2>("h3"), T_82)
    node T_84 = bits(T_73, 3, 3)
    node T_86 = bits(T_73, 2, 2)
    node T_88 = bits(T_73, 1, 1)
    node T_90 = mux(T_86, UInt<2>("h2"), pad(T_88, 2))
    node T_91 = mux(T_84, UInt<2>("h3"), T_90)
    node T_92 = mux(T_75, T_83, T_91)
    node T_93 = cat(T_75, T_92)
    node T_94 = bits(T_69, 7, 4)
    node T_95 = bits(T_69, 3, 0)
    node T_97 = neq(T_94, UInt<4>("h0"))
    node T_98 = bits(T_94, 3, 3)
    node T_100 = bits(T_94, 2, 2)
    node T_102 = bits(T_94, 1, 1)
    node T_104 = mux(T_100, UInt<2>("h2"), pad(T_102, 2))
    node T_105 = mux(T_98, UInt<2>("h3"), T_104)
    node T_106 = bits(T_95, 3, 3)
    node T_108 = bits(T_95, 2, 2)
    node T_110 = bits(T_95, 1, 1)
    node T_112 = mux(T_108, UInt<2>("h2"), pad(T_110, 2))
    node T_113 = mux(T_106, UInt<2>("h3"), T_112)
    node T_114 = mux(T_97, T_105, T_113)
    node T_115 = cat(T_97, T_114)
    node T_116 = mux(T_71, T_93, T_115)
    node T_117 = cat(T_71, T_116)
    node T_118 = mux(T_17, T_67, T_117)
    node T_119 = cat(T_17, T_118)
    node T_120 = bits(T_11, 31, 16)
    node T_121 = bits(T_11, 15, 0)
    node T_123 = neq(T_120, UInt<16>("h0"))
    node T_124 = bits(T_120, 15, 8)
    node T_125 = bits(T_120, 7, 0)
    node T_127 = neq(T_124, UInt<8>("h0"))
    node T_128 = bits(T_124, 7, 4)
    node T_129 = bits(T_124, 3, 0)
    node T_131 = neq(T_128, UInt<4>("h0"))
    node T_132 = bits(T_128, 3, 3)
    node T_134 = bits(T_128, 2, 2)
    node T_136 = bits(T_128, 1, 1)
    node T_138 = mux(T_134, UInt<2>("h2"), pad(T_136, 2))
    node T_139 = mux(T_132, UInt<2>("h3"), T_138)
    node T_140 = bits(T_129, 3, 3)
    node T_142 = bits(T_129, 2, 2)
    node T_144 = bits(T_129, 1, 1)
    node T_146 = mux(T_142, UInt<2>("h2"), pad(T_144, 2))
    node T_147 = mux(T_140, UInt<2>("h3"), T_146)
    node T_148 = mux(T_131, T_139, T_147)
    node T_149 = cat(T_131, T_148)
    node T_150 = bits(T_125, 7, 4)
    node T_151 = bits(T_125, 3, 0)
    node T_153 = neq(T_150, UInt<4>("h0"))
    node T_154 = bits(T_150, 3, 3)
    node T_156 = bits(T_150, 2, 2)
    node T_158 = bits(T_150, 1, 1)
    node T_160 = mux(T_156, UInt<2>("h2"), pad(T_158, 2))
    node T_161 = mux(T_154, UInt<2>("h3"), T_160)
    node T_162 = bits(T_151, 3, 3)
    node T_164 = bits(T_151, 2, 2)
    node T_166 = bits(T_151, 1, 1)
    node T_168 = mux(T_164, UInt<2>("h2"), pad(T_166, 2))
    node T_169 = mux(T_162, UInt<2>("h3"), T_168)
    node T_170 = mux(T_153, T_161, T_169)
    node T_171 = cat(T_153, T_170)
    node T_172 = mux(T_127, T_149, T_171)
    node T_173 = cat(T_127, T_172)
    node T_174 = bits(T_121, 15, 8)
    node T_175 = bits(T_121, 7, 0)
    node T_177 = neq(T_174, UInt<8>("h0"))
    node T_178 = bits(T_174, 7, 4)
    node T_179 = bits(T_174, 3, 0)
    node T_181 = neq(T_178, UInt<4>("h0"))
    node T_182 = bits(T_178, 3, 3)
    node T_184 = bits(T_178, 2, 2)
    node T_186 = bits(T_178, 1, 1)
    node T_188 = mux(T_184, UInt<2>("h2"), pad(T_186, 2))
    node T_189 = mux(T_182, UInt<2>("h3"), T_188)
    node T_190 = bits(T_179, 3, 3)
    node T_192 = bits(T_179, 2, 2)
    node T_194 = bits(T_179, 1, 1)
    node T_196 = mux(T_192, UInt<2>("h2"), pad(T_194, 2))
    node T_197 = mux(T_190, UInt<2>("h3"), T_196)
    node T_198 = mux(T_181, T_189, T_197)
    node T_199 = cat(T_181, T_198)
    node T_200 = bits(T_175, 7, 4)
    node T_201 = bits(T_175, 3, 0)
    node T_203 = neq(T_200, UInt<4>("h0"))
    node T_204 = bits(T_200, 3, 3)
    node T_206 = bits(T_200, 2, 2)
    node T_208 = bits(T_200, 1, 1)
    node T_210 = mux(T_206, UInt<2>("h2"), pad(T_208, 2))
    node T_211 = mux(T_204, UInt<2>("h3"), T_210)
    node T_212 = bits(T_201, 3, 3)
    node T_214 = bits(T_201, 2, 2)
    node T_216 = bits(T_201, 1, 1)
    node T_218 = mux(T_214, UInt<2>("h2"), pad(T_216, 2))
    node T_219 = mux(T_212, UInt<2>("h3"), T_218)
    node T_220 = mux(T_203, T_211, T_219)
    node T_221 = cat(T_203, T_220)
    node T_222 = mux(T_177, T_199, T_221)
    node T_223 = cat(T_177, T_222)
    node T_224 = mux(T_123, T_173, T_223)
    node T_225 = cat(T_123, T_224)
    node T_226 = mux(T_13, T_119, T_225)
    node T_227 = cat(T_13, T_226)
    node normCount = not(T_227)
    node GEN_0 = pad(absIn, 127)
    node T_228 = dshlw(GEN_0, normCount)
    node normAbsIn = bits(T_228, 63, 0)
    node T_230 = bits(normAbsIn, 40, 39)
    node T_231 = bits(normAbsIn, 38, 0)
    node T_233 = neq(T_231, UInt<39>("h0"))
    node roundBits = cat(T_230, T_233)
    node T_234 = bits(roundBits, 1, 0)
    node roundInexact = neq(T_234, UInt<2>("h0"))
    node T_236 = eq(io_roundingMode, UInt<2>("h0"))
    node T_237 = bits(roundBits, 2, 1)
    node T_238 = not(T_237)
    node T_240 = eq(T_238, UInt<2>("h0"))
    node T_242 = not(T_234)
    node T_244 = eq(T_242, UInt<2>("h0"))
    node T_245 = or(T_240, T_244)
    node T_247 = mux(T_236, T_245, UInt<1>("h0"))
    node T_248 = eq(io_roundingMode, UInt<2>("h2"))
    node T_249 = and(sign, roundInexact)
    node T_251 = mux(T_248, T_249, UInt<1>("h0"))
    node T_252 = or(T_247, T_251)
    node T_253 = eq(io_roundingMode, UInt<2>("h3"))
    node T_255 = eq(sign, UInt<1>("h0"))
    node T_256 = and(T_255, roundInexact)
    node T_258 = mux(T_253, T_256, UInt<1>("h0"))
    node round = or(T_252, T_258)
    node T_260 = bits(normAbsIn, 63, 40)
    node unroundedNorm = cat(UInt<1>("h0"), T_260)
    node T_263 = add(unroundedNorm, UInt<25>("h1"))
    node T_264 = tail(T_263, 1)
    node roundedNorm = mux(round, T_264, unroundedNorm)
    node T_265 = not(normCount)
    node unroundedExp = cat(UInt<1>("h0"), T_265)
    node T_268 = cat(UInt<1>("h0"), unroundedExp)
    node T_269 = bits(roundedNorm, 24, 24)
    node GEN_1 = pad(T_269, 8)
    node T_270 = add(T_268, GEN_1)
    node roundedExp = tail(T_270, 1)
    node T_271 = bits(normAbsIn, 63, 63)
    node expOut = cat(T_271, roundedExp)
    node T_275 = bits(roundedNorm, 22, 0)
    node T_276 = cat(sign, expOut)
    node T_277 = cat(T_276, T_275)
    node T_280 = cat(UInt<1>("h0"), roundInexact)
    node T_282 = cat(UInt<3>("h0"), T_280)
    io_out <= T_277
    io_exceptionFlags <= T_282

  module INToRecFN_1 :
    input clk : Clock
    input reset : UInt<1>
    input io_signedIn : UInt<1>
    input io_in : UInt<64>
    input io_roundingMode : UInt<2>
    output io_out : UInt<65>
    output io_exceptionFlags : UInt<5>
  
    node T_5 = bits(io_in, 63, 63)
    node sign = and(io_signedIn, T_5)
    node T_8 = subw(UInt<64>("h0"), io_in)
    node absIn = mux(sign, T_8, io_in)
    node T_10 = bits(absIn, 63, 32)
    node T_11 = bits(absIn, 31, 0)
    node T_13 = neq(T_10, UInt<32>("h0"))
    node T_14 = bits(T_10, 31, 16)
    node T_15 = bits(T_10, 15, 0)
    node T_17 = neq(T_14, UInt<16>("h0"))
    node T_18 = bits(T_14, 15, 8)
    node T_19 = bits(T_14, 7, 0)
    node T_21 = neq(T_18, UInt<8>("h0"))
    node T_22 = bits(T_18, 7, 4)
    node T_23 = bits(T_18, 3, 0)
    node T_25 = neq(T_22, UInt<4>("h0"))
    node T_26 = bits(T_22, 3, 3)
    node T_28 = bits(T_22, 2, 2)
    node T_30 = bits(T_22, 1, 1)
    node T_32 = mux(T_28, UInt<2>("h2"), pad(T_30, 2))
    node T_33 = mux(T_26, UInt<2>("h3"), T_32)
    node T_34 = bits(T_23, 3, 3)
    node T_36 = bits(T_23, 2, 2)
    node T_38 = bits(T_23, 1, 1)
    node T_40 = mux(T_36, UInt<2>("h2"), pad(T_38, 2))
    node T_41 = mux(T_34, UInt<2>("h3"), T_40)
    node T_42 = mux(T_25, T_33, T_41)
    node T_43 = cat(T_25, T_42)
    node T_44 = bits(T_19, 7, 4)
    node T_45 = bits(T_19, 3, 0)
    node T_47 = neq(T_44, UInt<4>("h0"))
    node T_48 = bits(T_44, 3, 3)
    node T_50 = bits(T_44, 2, 2)
    node T_52 = bits(T_44, 1, 1)
    node T_54 = mux(T_50, UInt<2>("h2"), pad(T_52, 2))
    node T_55 = mux(T_48, UInt<2>("h3"), T_54)
    node T_56 = bits(T_45, 3, 3)
    node T_58 = bits(T_45, 2, 2)
    node T_60 = bits(T_45, 1, 1)
    node T_62 = mux(T_58, UInt<2>("h2"), pad(T_60, 2))
    node T_63 = mux(T_56, UInt<2>("h3"), T_62)
    node T_64 = mux(T_47, T_55, T_63)
    node T_65 = cat(T_47, T_64)
    node T_66 = mux(T_21, T_43, T_65)
    node T_67 = cat(T_21, T_66)
    node T_68 = bits(T_15, 15, 8)
    node T_69 = bits(T_15, 7, 0)
    node T_71 = neq(T_68, UInt<8>("h0"))
    node T_72 = bits(T_68, 7, 4)
    node T_73 = bits(T_68, 3, 0)
    node T_75 = neq(T_72, UInt<4>("h0"))
    node T_76 = bits(T_72, 3, 3)
    node T_78 = bits(T_72, 2, 2)
    node T_80 = bits(T_72, 1, 1)
    node T_82 = mux(T_78, UInt<2>("h2"), pad(T_80, 2))
    node T_83 = mux(T_76, UInt<2>("h3"), T_82)
    node T_84 = bits(T_73, 3, 3)
    node T_86 = bits(T_73, 2, 2)
    node T_88 = bits(T_73, 1, 1)
    node T_90 = mux(T_86, UInt<2>("h2"), pad(T_88, 2))
    node T_91 = mux(T_84, UInt<2>("h3"), T_90)
    node T_92 = mux(T_75, T_83, T_91)
    node T_93 = cat(T_75, T_92)
    node T_94 = bits(T_69, 7, 4)
    node T_95 = bits(T_69, 3, 0)
    node T_97 = neq(T_94, UInt<4>("h0"))
    node T_98 = bits(T_94, 3, 3)
    node T_100 = bits(T_94, 2, 2)
    node T_102 = bits(T_94, 1, 1)
    node T_104 = mux(T_100, UInt<2>("h2"), pad(T_102, 2))
    node T_105 = mux(T_98, UInt<2>("h3"), T_104)
    node T_106 = bits(T_95, 3, 3)
    node T_108 = bits(T_95, 2, 2)
    node T_110 = bits(T_95, 1, 1)
    node T_112 = mux(T_108, UInt<2>("h2"), pad(T_110, 2))
    node T_113 = mux(T_106, UInt<2>("h3"), T_112)
    node T_114 = mux(T_97, T_105, T_113)
    node T_115 = cat(T_97, T_114)
    node T_116 = mux(T_71, T_93, T_115)
    node T_117 = cat(T_71, T_116)
    node T_118 = mux(T_17, T_67, T_117)
    node T_119 = cat(T_17, T_118)
    node T_120 = bits(T_11, 31, 16)
    node T_121 = bits(T_11, 15, 0)
    node T_123 = neq(T_120, UInt<16>("h0"))
    node T_124 = bits(T_120, 15, 8)
    node T_125 = bits(T_120, 7, 0)
    node T_127 = neq(T_124, UInt<8>("h0"))
    node T_128 = bits(T_124, 7, 4)
    node T_129 = bits(T_124, 3, 0)
    node T_131 = neq(T_128, UInt<4>("h0"))
    node T_132 = bits(T_128, 3, 3)
    node T_134 = bits(T_128, 2, 2)
    node T_136 = bits(T_128, 1, 1)
    node T_138 = mux(T_134, UInt<2>("h2"), pad(T_136, 2))
    node T_139 = mux(T_132, UInt<2>("h3"), T_138)
    node T_140 = bits(T_129, 3, 3)
    node T_142 = bits(T_129, 2, 2)
    node T_144 = bits(T_129, 1, 1)
    node T_146 = mux(T_142, UInt<2>("h2"), pad(T_144, 2))
    node T_147 = mux(T_140, UInt<2>("h3"), T_146)
    node T_148 = mux(T_131, T_139, T_147)
    node T_149 = cat(T_131, T_148)
    node T_150 = bits(T_125, 7, 4)
    node T_151 = bits(T_125, 3, 0)
    node T_153 = neq(T_150, UInt<4>("h0"))
    node T_154 = bits(T_150, 3, 3)
    node T_156 = bits(T_150, 2, 2)
    node T_158 = bits(T_150, 1, 1)
    node T_160 = mux(T_156, UInt<2>("h2"), pad(T_158, 2))
    node T_161 = mux(T_154, UInt<2>("h3"), T_160)
    node T_162 = bits(T_151, 3, 3)
    node T_164 = bits(T_151, 2, 2)
    node T_166 = bits(T_151, 1, 1)
    node T_168 = mux(T_164, UInt<2>("h2"), pad(T_166, 2))
    node T_169 = mux(T_162, UInt<2>("h3"), T_168)
    node T_170 = mux(T_153, T_161, T_169)
    node T_171 = cat(T_153, T_170)
    node T_172 = mux(T_127, T_149, T_171)
    node T_173 = cat(T_127, T_172)
    node T_174 = bits(T_121, 15, 8)
    node T_175 = bits(T_121, 7, 0)
    node T_177 = neq(T_174, UInt<8>("h0"))
    node T_178 = bits(T_174, 7, 4)
    node T_179 = bits(T_174, 3, 0)
    node T_181 = neq(T_178, UInt<4>("h0"))
    node T_182 = bits(T_178, 3, 3)
    node T_184 = bits(T_178, 2, 2)
    node T_186 = bits(T_178, 1, 1)
    node T_188 = mux(T_184, UInt<2>("h2"), pad(T_186, 2))
    node T_189 = mux(T_182, UInt<2>("h3"), T_188)
    node T_190 = bits(T_179, 3, 3)
    node T_192 = bits(T_179, 2, 2)
    node T_194 = bits(T_179, 1, 1)
    node T_196 = mux(T_192, UInt<2>("h2"), pad(T_194, 2))
    node T_197 = mux(T_190, UInt<2>("h3"), T_196)
    node T_198 = mux(T_181, T_189, T_197)
    node T_199 = cat(T_181, T_198)
    node T_200 = bits(T_175, 7, 4)
    node T_201 = bits(T_175, 3, 0)
    node T_203 = neq(T_200, UInt<4>("h0"))
    node T_204 = bits(T_200, 3, 3)
    node T_206 = bits(T_200, 2, 2)
    node T_208 = bits(T_200, 1, 1)
    node T_210 = mux(T_206, UInt<2>("h2"), pad(T_208, 2))
    node T_211 = mux(T_204, UInt<2>("h3"), T_210)
    node T_212 = bits(T_201, 3, 3)
    node T_214 = bits(T_201, 2, 2)
    node T_216 = bits(T_201, 1, 1)
    node T_218 = mux(T_214, UInt<2>("h2"), pad(T_216, 2))
    node T_219 = mux(T_212, UInt<2>("h3"), T_218)
    node T_220 = mux(T_203, T_211, T_219)
    node T_221 = cat(T_203, T_220)
    node T_222 = mux(T_177, T_199, T_221)
    node T_223 = cat(T_177, T_222)
    node T_224 = mux(T_123, T_173, T_223)
    node T_225 = cat(T_123, T_224)
    node T_226 = mux(T_13, T_119, T_225)
    node T_227 = cat(T_13, T_226)
    node normCount = not(T_227)
    node GEN_0 = pad(absIn, 127)
    node T_228 = dshlw(GEN_0, normCount)
    node normAbsIn = bits(T_228, 63, 0)
    node T_230 = bits(normAbsIn, 11, 10)
    node T_231 = bits(normAbsIn, 9, 0)
    node T_233 = neq(T_231, UInt<10>("h0"))
    node roundBits = cat(T_230, T_233)
    node T_234 = bits(roundBits, 1, 0)
    node roundInexact = neq(T_234, UInt<2>("h0"))
    node T_236 = eq(io_roundingMode, UInt<2>("h0"))
    node T_237 = bits(roundBits, 2, 1)
    node T_238 = not(T_237)
    node T_240 = eq(T_238, UInt<2>("h0"))
    node T_242 = not(T_234)
    node T_244 = eq(T_242, UInt<2>("h0"))
    node T_245 = or(T_240, T_244)
    node T_247 = mux(T_236, T_245, UInt<1>("h0"))
    node T_248 = eq(io_roundingMode, UInt<2>("h2"))
    node T_249 = and(sign, roundInexact)
    node T_251 = mux(T_248, T_249, UInt<1>("h0"))
    node T_252 = or(T_247, T_251)
    node T_253 = eq(io_roundingMode, UInt<2>("h3"))
    node T_255 = eq(sign, UInt<1>("h0"))
    node T_256 = and(T_255, roundInexact)
    node T_258 = mux(T_253, T_256, UInt<1>("h0"))
    node round = or(T_252, T_258)
    node T_260 = bits(normAbsIn, 63, 11)
    node unroundedNorm = cat(UInt<1>("h0"), T_260)
    node T_263 = add(unroundedNorm, UInt<54>("h1"))
    node T_264 = tail(T_263, 1)
    node roundedNorm = mux(round, T_264, unroundedNorm)
    node T_265 = not(normCount)
    node unroundedExp = cat(UInt<4>("h0"), T_265)
    node T_268 = cat(UInt<1>("h0"), unroundedExp)
    node T_269 = bits(roundedNorm, 53, 53)
    node GEN_1 = pad(T_269, 11)
    node T_270 = add(T_268, GEN_1)
    node roundedExp = tail(T_270, 1)
    node T_271 = bits(normAbsIn, 63, 63)
    node expOut = cat(T_271, roundedExp)
    node T_275 = bits(roundedNorm, 51, 0)
    node T_276 = cat(sign, expOut)
    node T_277 = cat(T_276, T_275)
    node T_280 = cat(UInt<1>("h0"), roundInexact)
    node T_282 = cat(UInt<3>("h0"), T_280)
    io_out <= T_277
    io_exceptionFlags <= T_282

  module IntToFP :
    input clk : Clock
    input reset : UInt<1>
    input io_in_valid : UInt<1>
    input io_in_bits_cmd : UInt<5>
    input io_in_bits_ldst : UInt<1>
    input io_in_bits_wen : UInt<1>
    input io_in_bits_ren1 : UInt<1>
    input io_in_bits_ren2 : UInt<1>
    input io_in_bits_ren3 : UInt<1>
    input io_in_bits_swap12 : UInt<1>
    input io_in_bits_swap23 : UInt<1>
    input io_in_bits_single : UInt<1>
    input io_in_bits_fromint : UInt<1>
    input io_in_bits_toint : UInt<1>
    input io_in_bits_fastpipe : UInt<1>
    input io_in_bits_fma : UInt<1>
    input io_in_bits_div : UInt<1>
    input io_in_bits_sqrt : UInt<1>
    input io_in_bits_round : UInt<1>
    input io_in_bits_wflags : UInt<1>
    input io_in_bits_rm : UInt<3>
    input io_in_bits_typ : UInt<2>
    input io_in_bits_in1 : UInt<65>
    input io_in_bits_in2 : UInt<65>
    input io_in_bits_in3 : UInt<65>
    output io_out_valid : UInt<1>
    output io_out_bits_data : UInt<65>
    output io_out_bits_exc : UInt<5>
  
    reg T_132 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_133_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_133_cmd)
    reg T_133_ldst : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_ldst)
    reg T_133_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_wen)
    reg T_133_ren1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_ren1)
    reg T_133_ren2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_ren2)
    reg T_133_ren3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_ren3)
    reg T_133_swap12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_swap12)
    reg T_133_swap23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_swap23)
    reg T_133_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_single)
    reg T_133_fromint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_fromint)
    reg T_133_toint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_toint)
    reg T_133_fastpipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_fastpipe)
    reg T_133_fma : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_fma)
    reg T_133_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_div)
    reg T_133_sqrt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_sqrt)
    reg T_133_round : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_round)
    reg T_133_wflags : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_133_wflags)
    reg T_133_rm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), T_133_rm)
    reg T_133_typ : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_133_typ)
    reg T_133_in1 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_133_in1)
    reg T_133_in2 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_133_in2)
    reg T_133_in3 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_133_in3)
    node GEN_0 = mux(io_in_valid, io_in_bits_cmd, T_133_cmd)
    node GEN_1 = mux(io_in_valid, io_in_bits_ldst, T_133_ldst)
    node GEN_2 = mux(io_in_valid, io_in_bits_wen, T_133_wen)
    node GEN_3 = mux(io_in_valid, io_in_bits_ren1, T_133_ren1)
    node GEN_4 = mux(io_in_valid, io_in_bits_ren2, T_133_ren2)
    node GEN_5 = mux(io_in_valid, io_in_bits_ren3, T_133_ren3)
    node GEN_6 = mux(io_in_valid, io_in_bits_swap12, T_133_swap12)
    node GEN_7 = mux(io_in_valid, io_in_bits_swap23, T_133_swap23)
    node GEN_8 = mux(io_in_valid, io_in_bits_single, T_133_single)
    node GEN_9 = mux(io_in_valid, io_in_bits_fromint, T_133_fromint)
    node GEN_10 = mux(io_in_valid, io_in_bits_toint, T_133_toint)
    node GEN_11 = mux(io_in_valid, io_in_bits_fastpipe, T_133_fastpipe)
    node GEN_12 = mux(io_in_valid, io_in_bits_fma, T_133_fma)
    node GEN_13 = mux(io_in_valid, io_in_bits_div, T_133_div)
    node GEN_14 = mux(io_in_valid, io_in_bits_sqrt, T_133_sqrt)
    node GEN_15 = mux(io_in_valid, io_in_bits_round, T_133_round)
    node GEN_16 = mux(io_in_valid, io_in_bits_wflags, T_133_wflags)
    node GEN_17 = mux(io_in_valid, io_in_bits_rm, T_133_rm)
    node GEN_18 = mux(io_in_valid, io_in_bits_typ, T_133_typ)
    node GEN_19 = mux(io_in_valid, io_in_bits_in1, T_133_in1)
    node GEN_20 = mux(io_in_valid, io_in_bits_in2, T_133_in2)
    node GEN_21 = mux(io_in_valid, io_in_bits_in3, T_133_in3)
    wire in_valid : UInt<1>
    wire in_bits_cmd : UInt<5>
    wire in_bits_ldst : UInt<1>
    wire in_bits_wen : UInt<1>
    wire in_bits_ren1 : UInt<1>
    wire in_bits_ren2 : UInt<1>
    wire in_bits_ren3 : UInt<1>
    wire in_bits_swap12 : UInt<1>
    wire in_bits_swap23 : UInt<1>
    wire in_bits_single : UInt<1>
    wire in_bits_fromint : UInt<1>
    wire in_bits_toint : UInt<1>
    wire in_bits_fastpipe : UInt<1>
    wire in_bits_fma : UInt<1>
    wire in_bits_div : UInt<1>
    wire in_bits_sqrt : UInt<1>
    wire in_bits_round : UInt<1>
    wire in_bits_wflags : UInt<1>
    wire in_bits_rm : UInt<3>
    wire in_bits_typ : UInt<2>
    wire in_bits_in1 : UInt<65>
    wire in_bits_in2 : UInt<65>
    wire in_bits_in3 : UInt<65>
    wire mux_data : UInt<65>
    wire mux_exc : UInt<5>
    node T_257 = bits(in_bits_in1, 31, 31)
    node T_258 = bits(in_bits_in1, 30, 23)
    node T_259 = bits(in_bits_in1, 22, 0)
    node T_261 = eq(T_258, UInt<8>("h0"))
    node T_263 = eq(T_259, UInt<23>("h0"))
    node T_264 = and(T_261, T_263)
    node GEN_30 = pad(T_259, 32)
    node T_265 = shlw(GEN_30, 9)
    node T_266 = bits(T_265, 31, 16)
    node T_267 = bits(T_265, 15, 0)
    node T_269 = neq(T_266, UInt<16>("h0"))
    node T_270 = bits(T_266, 15, 8)
    node T_271 = bits(T_266, 7, 0)
    node T_273 = neq(T_270, UInt<8>("h0"))
    node T_274 = bits(T_270, 7, 4)
    node T_275 = bits(T_270, 3, 0)
    node T_277 = neq(T_274, UInt<4>("h0"))
    node T_278 = bits(T_274, 3, 3)
    node T_280 = bits(T_274, 2, 2)
    node T_282 = bits(T_274, 1, 1)
    node T_284 = mux(T_280, UInt<2>("h2"), pad(T_282, 2))
    node T_285 = mux(T_278, UInt<2>("h3"), T_284)
    node T_286 = bits(T_275, 3, 3)
    node T_288 = bits(T_275, 2, 2)
    node T_290 = bits(T_275, 1, 1)
    node T_292 = mux(T_288, UInt<2>("h2"), pad(T_290, 2))
    node T_293 = mux(T_286, UInt<2>("h3"), T_292)
    node T_294 = mux(T_277, T_285, T_293)
    node T_295 = cat(T_277, T_294)
    node T_296 = bits(T_271, 7, 4)
    node T_297 = bits(T_271, 3, 0)
    node T_299 = neq(T_296, UInt<4>("h0"))
    node T_300 = bits(T_296, 3, 3)
    node T_302 = bits(T_296, 2, 2)
    node T_304 = bits(T_296, 1, 1)
    node T_306 = mux(T_302, UInt<2>("h2"), pad(T_304, 2))
    node T_307 = mux(T_300, UInt<2>("h3"), T_306)
    node T_308 = bits(T_297, 3, 3)
    node T_310 = bits(T_297, 2, 2)
    node T_312 = bits(T_297, 1, 1)
    node T_314 = mux(T_310, UInt<2>("h2"), pad(T_312, 2))
    node T_315 = mux(T_308, UInt<2>("h3"), T_314)
    node T_316 = mux(T_299, T_307, T_315)
    node T_317 = cat(T_299, T_316)
    node T_318 = mux(T_273, T_295, T_317)
    node T_319 = cat(T_273, T_318)
    node T_320 = bits(T_267, 15, 8)
    node T_321 = bits(T_267, 7, 0)
    node T_323 = neq(T_320, UInt<8>("h0"))
    node T_324 = bits(T_320, 7, 4)
    node T_325 = bits(T_320, 3, 0)
    node T_327 = neq(T_324, UInt<4>("h0"))
    node T_328 = bits(T_324, 3, 3)
    node T_330 = bits(T_324, 2, 2)
    node T_332 = bits(T_324, 1, 1)
    node T_334 = mux(T_330, UInt<2>("h2"), pad(T_332, 2))
    node T_335 = mux(T_328, UInt<2>("h3"), T_334)
    node T_336 = bits(T_325, 3, 3)
    node T_338 = bits(T_325, 2, 2)
    node T_340 = bits(T_325, 1, 1)
    node T_342 = mux(T_338, UInt<2>("h2"), pad(T_340, 2))
    node T_343 = mux(T_336, UInt<2>("h3"), T_342)
    node T_344 = mux(T_327, T_335, T_343)
    node T_345 = cat(T_327, T_344)
    node T_346 = bits(T_321, 7, 4)
    node T_347 = bits(T_321, 3, 0)
    node T_349 = neq(T_346, UInt<4>("h0"))
    node T_350 = bits(T_346, 3, 3)
    node T_352 = bits(T_346, 2, 2)
    node T_354 = bits(T_346, 1, 1)
    node T_356 = mux(T_352, UInt<2>("h2"), pad(T_354, 2))
    node T_357 = mux(T_350, UInt<2>("h3"), T_356)
    node T_358 = bits(T_347, 3, 3)
    node T_360 = bits(T_347, 2, 2)
    node T_362 = bits(T_347, 1, 1)
    node T_364 = mux(T_360, UInt<2>("h2"), pad(T_362, 2))
    node T_365 = mux(T_358, UInt<2>("h3"), T_364)
    node T_366 = mux(T_349, T_357, T_365)
    node T_367 = cat(T_349, T_366)
    node T_368 = mux(T_323, T_345, T_367)
    node T_369 = cat(T_323, T_368)
    node T_370 = mux(T_269, T_319, T_369)
    node T_371 = cat(T_269, T_370)
    node T_372 = not(T_371)
    node GEN_31 = pad(T_259, 54)
    node T_373 = dshlw(GEN_31, T_372)
    node T_374 = bits(T_373, 21, 0)
    node T_376 = cat(T_374, UInt<1>("h0"))
    node GEN_32 = pad(T_372, 9)
    node T_382 = xor(GEN_32, UInt<9>("h1ff"))
    node T_383 = mux(T_261, T_382, pad(T_258, 9))
    node T_387 = mux(T_261, UInt<2>("h2"), UInt<2>("h1"))
    node GEN_33 = pad(T_387, 8)
    node T_388 = or(UInt<8>("h80"), GEN_33)
    node GEN_34 = pad(T_388, 9)
    node T_389 = add(T_383, GEN_34)
    node T_390 = tail(T_389, 1)
    node T_391 = bits(T_390, 8, 7)
    node T_393 = eq(T_391, UInt<2>("h3"))
    node T_395 = eq(T_263, UInt<1>("h0"))
    node T_396 = and(T_393, T_395)
    node T_400 = mux(T_264, UInt<3>("h7"), UInt<3>("h0"))
    node GEN_35 = pad(T_400, 9)
    node T_401 = shlw(GEN_35, 6)
    node T_402 = not(T_401)
    node T_403 = and(T_390, T_402)
    node GEN_36 = pad(T_396, 7)
    node T_404 = shlw(GEN_36, 6)
    node GEN_37 = pad(T_404, 9)
    node T_405 = or(T_403, GEN_37)
    node T_406 = mux(T_261, T_376, T_259)
    node T_407 = cat(T_257, T_405)
    node T_408 = cat(T_407, T_406)
    node T_410 = eq(in_bits_single, UInt<1>("h0"))
    node T_411 = bits(in_bits_in1, 63, 63)
    node T_412 = bits(in_bits_in1, 62, 52)
    node T_413 = bits(in_bits_in1, 51, 0)
    node T_415 = eq(T_412, UInt<11>("h0"))
    node T_417 = eq(T_413, UInt<52>("h0"))
    node T_418 = and(T_415, T_417)
    node GEN_38 = pad(T_413, 64)
    node T_419 = shlw(GEN_38, 12)
    node T_420 = bits(T_419, 63, 32)
    node T_421 = bits(T_419, 31, 0)
    node T_423 = neq(T_420, UInt<32>("h0"))
    node T_424 = bits(T_420, 31, 16)
    node T_425 = bits(T_420, 15, 0)
    node T_427 = neq(T_424, UInt<16>("h0"))
    node T_428 = bits(T_424, 15, 8)
    node T_429 = bits(T_424, 7, 0)
    node T_431 = neq(T_428, UInt<8>("h0"))
    node T_432 = bits(T_428, 7, 4)
    node T_433 = bits(T_428, 3, 0)
    node T_435 = neq(T_432, UInt<4>("h0"))
    node T_436 = bits(T_432, 3, 3)
    node T_438 = bits(T_432, 2, 2)
    node T_440 = bits(T_432, 1, 1)
    node T_442 = mux(T_438, UInt<2>("h2"), pad(T_440, 2))
    node T_443 = mux(T_436, UInt<2>("h3"), T_442)
    node T_444 = bits(T_433, 3, 3)
    node T_446 = bits(T_433, 2, 2)
    node T_448 = bits(T_433, 1, 1)
    node T_450 = mux(T_446, UInt<2>("h2"), pad(T_448, 2))
    node T_451 = mux(T_444, UInt<2>("h3"), T_450)
    node T_452 = mux(T_435, T_443, T_451)
    node T_453 = cat(T_435, T_452)
    node T_454 = bits(T_429, 7, 4)
    node T_455 = bits(T_429, 3, 0)
    node T_457 = neq(T_454, UInt<4>("h0"))
    node T_458 = bits(T_454, 3, 3)
    node T_460 = bits(T_454, 2, 2)
    node T_462 = bits(T_454, 1, 1)
    node T_464 = mux(T_460, UInt<2>("h2"), pad(T_462, 2))
    node T_465 = mux(T_458, UInt<2>("h3"), T_464)
    node T_466 = bits(T_455, 3, 3)
    node T_468 = bits(T_455, 2, 2)
    node T_470 = bits(T_455, 1, 1)
    node T_472 = mux(T_468, UInt<2>("h2"), pad(T_470, 2))
    node T_473 = mux(T_466, UInt<2>("h3"), T_472)
    node T_474 = mux(T_457, T_465, T_473)
    node T_475 = cat(T_457, T_474)
    node T_476 = mux(T_431, T_453, T_475)
    node T_477 = cat(T_431, T_476)
    node T_478 = bits(T_425, 15, 8)
    node T_479 = bits(T_425, 7, 0)
    node T_481 = neq(T_478, UInt<8>("h0"))
    node T_482 = bits(T_478, 7, 4)
    node T_483 = bits(T_478, 3, 0)
    node T_485 = neq(T_482, UInt<4>("h0"))
    node T_486 = bits(T_482, 3, 3)
    node T_488 = bits(T_482, 2, 2)
    node T_490 = bits(T_482, 1, 1)
    node T_492 = mux(T_488, UInt<2>("h2"), pad(T_490, 2))
    node T_493 = mux(T_486, UInt<2>("h3"), T_492)
    node T_494 = bits(T_483, 3, 3)
    node T_496 = bits(T_483, 2, 2)
    node T_498 = bits(T_483, 1, 1)
    node T_500 = mux(T_496, UInt<2>("h2"), pad(T_498, 2))
    node T_501 = mux(T_494, UInt<2>("h3"), T_500)
    node T_502 = mux(T_485, T_493, T_501)
    node T_503 = cat(T_485, T_502)
    node T_504 = bits(T_479, 7, 4)
    node T_505 = bits(T_479, 3, 0)
    node T_507 = neq(T_504, UInt<4>("h0"))
    node T_508 = bits(T_504, 3, 3)
    node T_510 = bits(T_504, 2, 2)
    node T_512 = bits(T_504, 1, 1)
    node T_514 = mux(T_510, UInt<2>("h2"), pad(T_512, 2))
    node T_515 = mux(T_508, UInt<2>("h3"), T_514)
    node T_516 = bits(T_505, 3, 3)
    node T_518 = bits(T_505, 2, 2)
    node T_520 = bits(T_505, 1, 1)
    node T_522 = mux(T_518, UInt<2>("h2"), pad(T_520, 2))
    node T_523 = mux(T_516, UInt<2>("h3"), T_522)
    node T_524 = mux(T_507, T_515, T_523)
    node T_525 = cat(T_507, T_524)
    node T_526 = mux(T_481, T_503, T_525)
    node T_527 = cat(T_481, T_526)
    node T_528 = mux(T_427, T_477, T_527)
    node T_529 = cat(T_427, T_528)
    node T_530 = bits(T_421, 31, 16)
    node T_531 = bits(T_421, 15, 0)
    node T_533 = neq(T_530, UInt<16>("h0"))
    node T_534 = bits(T_530, 15, 8)
    node T_535 = bits(T_530, 7, 0)
    node T_537 = neq(T_534, UInt<8>("h0"))
    node T_538 = bits(T_534, 7, 4)
    node T_539 = bits(T_534, 3, 0)
    node T_541 = neq(T_538, UInt<4>("h0"))
    node T_542 = bits(T_538, 3, 3)
    node T_544 = bits(T_538, 2, 2)
    node T_546 = bits(T_538, 1, 1)
    node T_548 = mux(T_544, UInt<2>("h2"), pad(T_546, 2))
    node T_549 = mux(T_542, UInt<2>("h3"), T_548)
    node T_550 = bits(T_539, 3, 3)
    node T_552 = bits(T_539, 2, 2)
    node T_554 = bits(T_539, 1, 1)
    node T_556 = mux(T_552, UInt<2>("h2"), pad(T_554, 2))
    node T_557 = mux(T_550, UInt<2>("h3"), T_556)
    node T_558 = mux(T_541, T_549, T_557)
    node T_559 = cat(T_541, T_558)
    node T_560 = bits(T_535, 7, 4)
    node T_561 = bits(T_535, 3, 0)
    node T_563 = neq(T_560, UInt<4>("h0"))
    node T_564 = bits(T_560, 3, 3)
    node T_566 = bits(T_560, 2, 2)
    node T_568 = bits(T_560, 1, 1)
    node T_570 = mux(T_566, UInt<2>("h2"), pad(T_568, 2))
    node T_571 = mux(T_564, UInt<2>("h3"), T_570)
    node T_572 = bits(T_561, 3, 3)
    node T_574 = bits(T_561, 2, 2)
    node T_576 = bits(T_561, 1, 1)
    node T_578 = mux(T_574, UInt<2>("h2"), pad(T_576, 2))
    node T_579 = mux(T_572, UInt<2>("h3"), T_578)
    node T_580 = mux(T_563, T_571, T_579)
    node T_581 = cat(T_563, T_580)
    node T_582 = mux(T_537, T_559, T_581)
    node T_583 = cat(T_537, T_582)
    node T_584 = bits(T_531, 15, 8)
    node T_585 = bits(T_531, 7, 0)
    node T_587 = neq(T_584, UInt<8>("h0"))
    node T_588 = bits(T_584, 7, 4)
    node T_589 = bits(T_584, 3, 0)
    node T_591 = neq(T_588, UInt<4>("h0"))
    node T_592 = bits(T_588, 3, 3)
    node T_594 = bits(T_588, 2, 2)
    node T_596 = bits(T_588, 1, 1)
    node T_598 = mux(T_594, UInt<2>("h2"), pad(T_596, 2))
    node T_599 = mux(T_592, UInt<2>("h3"), T_598)
    node T_600 = bits(T_589, 3, 3)
    node T_602 = bits(T_589, 2, 2)
    node T_604 = bits(T_589, 1, 1)
    node T_606 = mux(T_602, UInt<2>("h2"), pad(T_604, 2))
    node T_607 = mux(T_600, UInt<2>("h3"), T_606)
    node T_608 = mux(T_591, T_599, T_607)
    node T_609 = cat(T_591, T_608)
    node T_610 = bits(T_585, 7, 4)
    node T_611 = bits(T_585, 3, 0)
    node T_613 = neq(T_610, UInt<4>("h0"))
    node T_614 = bits(T_610, 3, 3)
    node T_616 = bits(T_610, 2, 2)
    node T_618 = bits(T_610, 1, 1)
    node T_620 = mux(T_616, UInt<2>("h2"), pad(T_618, 2))
    node T_621 = mux(T_614, UInt<2>("h3"), T_620)
    node T_622 = bits(T_611, 3, 3)
    node T_624 = bits(T_611, 2, 2)
    node T_626 = bits(T_611, 1, 1)
    node T_628 = mux(T_624, UInt<2>("h2"), pad(T_626, 2))
    node T_629 = mux(T_622, UInt<2>("h3"), T_628)
    node T_630 = mux(T_613, T_621, T_629)
    node T_631 = cat(T_613, T_630)
    node T_632 = mux(T_587, T_609, T_631)
    node T_633 = cat(T_587, T_632)
    node T_634 = mux(T_533, T_583, T_633)
    node T_635 = cat(T_533, T_634)
    node T_636 = mux(T_423, T_529, T_635)
    node T_637 = cat(T_423, T_636)
    node T_638 = not(T_637)
    node GEN_39 = pad(T_413, 115)
    node T_639 = dshlw(GEN_39, T_638)
    node T_640 = bits(T_639, 50, 0)
    node T_642 = cat(T_640, UInt<1>("h0"))
    node GEN_40 = pad(T_638, 12)
    node T_648 = xor(GEN_40, UInt<12>("hfff"))
    node T_649 = mux(T_415, T_648, pad(T_412, 12))
    node T_653 = mux(T_415, UInt<2>("h2"), UInt<2>("h1"))
    node GEN_41 = pad(T_653, 11)
    node T_654 = or(UInt<11>("h400"), GEN_41)
    node GEN_42 = pad(T_654, 12)
    node T_655 = add(T_649, GEN_42)
    node T_656 = tail(T_655, 1)
    node T_657 = bits(T_656, 11, 10)
    node T_659 = eq(T_657, UInt<2>("h3"))
    node T_661 = eq(T_417, UInt<1>("h0"))
    node T_662 = and(T_659, T_661)
    node T_666 = mux(T_418, UInt<3>("h7"), UInt<3>("h0"))
    node GEN_43 = pad(T_666, 12)
    node T_667 = shlw(GEN_43, 9)
    node T_668 = not(T_667)
    node T_669 = and(T_656, T_668)
    node GEN_44 = pad(T_662, 10)
    node T_670 = shlw(GEN_44, 9)
    node GEN_45 = pad(T_670, 12)
    node T_671 = or(T_669, GEN_45)
    node T_672 = mux(T_415, T_642, T_413)
    node T_673 = cat(T_411, T_671)
    node T_674 = cat(T_673, T_672)
    node GEN_22 = mux(T_410, T_674, pad(T_408, 65))
    node T_675 = asSInt(in_bits_in1)
    wire T_676 : SInt<65>
    node T_677 = bits(in_bits_in1, 31, 0)
    node T_678 = bits(in_bits_typ, 1, 1)
    node T_680 = eq(T_678, UInt<1>("h0"))
    node T_681 = bits(in_bits_typ, 0, 0)
    node T_682 = cvt(T_677)
    node T_683 = asSInt(T_677)
    node T_684 = mux(T_681, T_682, pad(T_683, 33))
    node GEN_23 = mux(T_680, pad(T_684, 65), T_675)
    node intValue = asUInt(T_676)
    node T_687 = and(in_bits_cmd, UInt<5>("h4"))
    node T_688 = eq(UInt<5>("h0"), T_687)
    inst INToRecFN_2 of INToRecFN
    node T_690 = not(T_681)
    node T_692 = cat(UInt<32>("hffffffff"), INToRecFN_2.io_out)
    inst INToRecFN_1_1 of INToRecFN_1
    node T_698 = cat(UInt<1>("h0"), INToRecFN_1_1.io_out)
    node GEN_24 = mux(T_410, T_698, pad(T_692, 66))
    node GEN_25 = mux(T_410, INToRecFN_1_1.io_exceptionFlags, INToRecFN_2.io_exceptionFlags)
    node GEN_26 = mux(T_688, GEN_24, pad(GEN_22, 66))
    node GEN_27 = mux(T_688, GEN_25, UInt<5>("h0"))
    reg T_701 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_702_data : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_702_data)
    reg T_702_exc : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_702_exc)
    node GEN_28 = mux(in_valid, mux_data, T_702_data)
    node GEN_29 = mux(in_valid, mux_exc, T_702_exc)
    wire T_713_valid : UInt<1>
    wire T_713_bits_data : UInt<65>
    wire T_713_bits_exc : UInt<5>
    io_out_valid <= T_713_valid
    io_out_bits_data <= T_713_bits_data
    io_out_bits_exc <= T_713_bits_exc
    T_132 <= io_in_valid
    T_133_cmd <= GEN_0
    T_133_ldst <= GEN_1
    T_133_wen <= GEN_2
    T_133_ren1 <= GEN_3
    T_133_ren2 <= GEN_4
    T_133_ren3 <= GEN_5
    T_133_swap12 <= GEN_6
    T_133_swap23 <= GEN_7
    T_133_single <= GEN_8
    T_133_fromint <= GEN_9
    T_133_toint <= GEN_10
    T_133_fastpipe <= GEN_11
    T_133_fma <= GEN_12
    T_133_div <= GEN_13
    T_133_sqrt <= GEN_14
    T_133_round <= GEN_15
    T_133_wflags <= GEN_16
    T_133_rm <= GEN_17
    T_133_typ <= GEN_18
    T_133_in1 <= GEN_19
    T_133_in2 <= GEN_20
    T_133_in3 <= GEN_21
    in_valid <= T_132
    in_bits_cmd <= T_133_cmd
    in_bits_ldst <= T_133_ldst
    in_bits_wen <= T_133_wen
    in_bits_ren1 <= T_133_ren1
    in_bits_ren2 <= T_133_ren2
    in_bits_ren3 <= T_133_ren3
    in_bits_swap12 <= T_133_swap12
    in_bits_swap23 <= T_133_swap23
    in_bits_single <= T_133_single
    in_bits_fromint <= T_133_fromint
    in_bits_toint <= T_133_toint
    in_bits_fastpipe <= T_133_fastpipe
    in_bits_fma <= T_133_fma
    in_bits_div <= T_133_div
    in_bits_sqrt <= T_133_sqrt
    in_bits_round <= T_133_round
    in_bits_wflags <= T_133_wflags
    in_bits_rm <= T_133_rm
    in_bits_typ <= T_133_typ
    in_bits_in1 <= T_133_in1
    in_bits_in2 <= T_133_in2
    in_bits_in3 <= T_133_in3
    mux_data <= bits(GEN_26, 64, 0)
    mux_exc <= GEN_27
    T_676 <= GEN_23
    INToRecFN_2.io_signedIn <= T_690
    INToRecFN_2.io_in <= bits(intValue, 63, 0)
    INToRecFN_2.io_roundingMode <= bits(in_bits_rm, 1, 0)
    INToRecFN_1_1.io_signedIn <= T_690
    INToRecFN_1_1.io_in <= bits(intValue, 63, 0)
    INToRecFN_1_1.io_roundingMode <= bits(in_bits_rm, 1, 0)
    T_701 <= in_valid
    T_702_data <= GEN_28
    T_702_exc <= GEN_29
    T_713_valid <= T_701
    T_713_bits_data <= T_702_data
    T_713_bits_exc <= T_702_exc

  module RoundRawFNToRecFN :
    input clk : Clock
    input reset : UInt<1>
    input io_invalidExc : UInt<1>
    input io_infiniteExc : UInt<1>
    input io_in_sign : UInt<1>
    input io_in_isNaN : UInt<1>
    input io_in_isInf : UInt<1>
    input io_in_isZero : UInt<1>
    input io_in_sExp : SInt<10>
    input io_in_sig : UInt<27>
    input io_roundingMode : UInt<2>
    output io_out : UInt<33>
    output io_exceptionFlags : UInt<5>
  
    node roundingMode_nearest_even = eq(io_roundingMode, UInt<2>("h0"))
    node roundingMode_min = eq(io_roundingMode, UInt<2>("h2"))
    node roundingMode_max = eq(io_roundingMode, UInt<2>("h3"))
    node T_19 = and(roundingMode_min, io_in_sign)
    node T_21 = eq(io_in_sign, UInt<1>("h0"))
    node T_22 = and(roundingMode_max, T_21)
    node roundMagUp = or(T_19, T_22)
    node doShiftSigDown1 = bits(io_in_sig, 26, 26)
    node isNegExp = lt(io_in_sExp, SInt<10>("h0"))
    node T_27 = mux(isNegExp, UInt<25>("h1ffffff"), UInt<25>("h0"))
    node T_28 = bits(io_in_sExp, 8, 0)
    node T_29 = not(T_28)
    node T_30 = bits(T_29, 8, 8)
    node T_31 = bits(T_29, 7, 0)
    node T_32 = bits(T_31, 7, 7)
    node T_33 = bits(T_31, 6, 0)
    node T_34 = bits(T_33, 6, 6)
    node T_35 = bits(T_33, 5, 0)
    node T_38 = dshr(SInt<65>("h10000000000000000"), T_35)
    node T_39 = bits(T_38, 63, 42)
    node T_40 = bits(T_39, 15, 0)
    node T_45 = shr(T_40, 8)
    node T_46 = pad(T_45, 16)
    node T_47 = bits(T_40, 7, 0)
    node GEN_0 = pad(T_47, 16)
    node T_48 = shlw(GEN_0, 8)
    node T_50 = and(T_48, UInt<16>("hff00"))
    node T_51 = or(T_46, T_50)
    node T_55 = shr(T_51, 4)
    node GEN_1 = pad(T_55, 16)
    node T_56 = and(GEN_1, UInt<16>("hf0f"))
    node T_57 = bits(T_51, 11, 0)
    node GEN_2 = pad(T_57, 16)
    node T_58 = shlw(GEN_2, 4)
    node T_60 = and(T_58, UInt<16>("hf0f0"))
    node T_61 = or(T_56, T_60)
    node T_65 = shr(T_61, 2)
    node GEN_3 = pad(T_65, 16)
    node T_66 = and(GEN_3, UInt<16>("h3333"))
    node T_67 = bits(T_61, 13, 0)
    node GEN_4 = pad(T_67, 16)
    node T_68 = shlw(GEN_4, 2)
    node T_70 = and(T_68, UInt<16>("hcccc"))
    node T_71 = or(T_66, T_70)
    node T_75 = shr(T_71, 1)
    node GEN_5 = pad(T_75, 16)
    node T_76 = and(GEN_5, UInt<16>("h5555"))
    node T_77 = bits(T_71, 14, 0)
    node GEN_6 = pad(T_77, 16)
    node T_78 = shlw(GEN_6, 1)
    node T_80 = and(T_78, UInt<16>("haaaa"))
    node T_81 = or(T_76, T_80)
    node T_82 = bits(T_39, 21, 16)
    node T_83 = bits(T_82, 3, 0)
    node T_84 = bits(T_83, 1, 0)
    node T_85 = bits(T_84, 0, 0)
    node T_86 = bits(T_84, 1, 1)
    node T_87 = cat(T_85, T_86)
    node T_88 = bits(T_83, 3, 2)
    node T_89 = bits(T_88, 0, 0)
    node T_90 = bits(T_88, 1, 1)
    node T_91 = cat(T_89, T_90)
    node T_92 = cat(T_87, T_91)
    node T_93 = bits(T_82, 5, 4)
    node T_94 = bits(T_93, 0, 0)
    node T_95 = bits(T_93, 1, 1)
    node T_96 = cat(T_94, T_95)
    node T_97 = cat(T_92, T_96)
    node T_98 = cat(T_81, T_97)
    node T_99 = not(T_98)
    node T_100 = mux(T_34, UInt<22>("h0"), T_99)
    node T_101 = not(T_100)
    node T_103 = cat(T_101, UInt<3>("h7"))
    node T_108 = bits(T_38, 2, 0)
    node T_109 = bits(T_108, 1, 0)
    node T_110 = bits(T_109, 0, 0)
    node T_111 = bits(T_109, 1, 1)
    node T_112 = cat(T_110, T_111)
    node T_113 = bits(T_108, 2, 2)
    node T_114 = cat(T_112, T_113)
    node T_116 = mux(T_34, T_114, UInt<3>("h0"))
    node T_117 = mux(T_32, T_103, pad(T_116, 25))
    node T_119 = mux(T_30, T_117, UInt<25>("h0"))
    node T_120 = or(T_27, T_119)
    node GEN_7 = pad(doShiftSigDown1, 25)
    node T_121 = or(T_120, GEN_7)
    node roundMask = cat(T_121, UInt<2>("h3"))
    node T_123 = cat(isNegExp, roundMask)
    node shiftedRoundMask = shr(T_123, 1)
    node T_124 = not(shiftedRoundMask)
    node roundPosMask = and(T_124, roundMask)
    node T_125 = and(io_in_sig, roundPosMask)
    node roundPosBit = neq(T_125, UInt<27>("h0"))
    node T_127 = and(io_in_sig, shiftedRoundMask)
    node anyRoundExtra = neq(T_127, UInt<27>("h0"))
    node common_inexact = or(roundPosBit, anyRoundExtra)
    node T_129 = and(roundingMode_nearest_even, roundPosBit)
    node T_130 = and(roundMagUp, common_inexact)
    node T_131 = or(T_129, T_130)
    node T_132 = or(io_in_sig, roundMask)
    node T_133 = shr(T_132, 2)
    node T_135 = add(T_133, UInt<25>("h1"))
    node T_138 = eq(anyRoundExtra, UInt<1>("h0"))
    node T_139 = and(T_129, T_138)
    node T_140 = shr(roundMask, 1)
    node T_142 = mux(T_139, T_140, UInt<26>("h0"))
    node T_143 = not(T_142)
    node T_144 = and(T_135, T_143)
    node T_145 = not(roundMask)
    node T_146 = and(io_in_sig, T_145)
    node T_147 = shr(T_146, 2)
    node roundedSig = mux(T_131, T_144, pad(T_147, 26))
    node T_148 = shr(roundedSig, 24)
    node T_149 = cvt(T_148)
    node GEN_8 = pad(T_149, 10)
    node sRoundedExp = add(io_in_sExp, GEN_8)
    node common_expOut = bits(sRoundedExp, 8, 0)
    node T_150 = bits(roundedSig, 23, 1)
    node T_151 = bits(roundedSig, 22, 0)
    node common_fractOut = mux(doShiftSigDown1, T_150, T_151)
    node T_152 = shr(sRoundedExp, 7)
    node common_overflow = geq(T_152, SInt<4>("h3"))
    node common_totalUnderflow = lt(sRoundedExp, SInt<11>("h6b"))
    node T_157 = mux(doShiftSigDown1, SInt<9>("h81"), SInt<9>("h82"))
    node GEN_9 = pad(T_157, 10)
    node T_158 = lt(io_in_sExp, GEN_9)
    node common_underflow = and(common_inexact, T_158)
    node isNaNOut = or(io_invalidExc, io_in_isNaN)
    node notNaN_isSpecialInfOut = or(io_infiniteExc, io_in_isInf)
    node T_160 = eq(isNaNOut, UInt<1>("h0"))
    node T_162 = eq(notNaN_isSpecialInfOut, UInt<1>("h0"))
    node T_163 = and(T_160, T_162)
    node T_165 = eq(io_in_isZero, UInt<1>("h0"))
    node commonCase = and(T_163, T_165)
    node overflow = and(commonCase, common_overflow)
    node underflow = and(commonCase, common_underflow)
    node T_166 = and(commonCase, common_inexact)
    node inexact = or(overflow, T_166)
    node overflow_roundMagUp = or(roundingMode_nearest_even, roundMagUp)
    node T_167 = and(commonCase, common_totalUnderflow)
    node pegMinNonzeroMagOut = and(T_167, roundMagUp)
    node T_168 = and(commonCase, overflow)
    node T_170 = eq(overflow_roundMagUp, UInt<1>("h0"))
    node pegMaxFiniteMagOut = and(T_168, T_170)
    node T_171 = and(overflow, overflow_roundMagUp)
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, T_171)
    node signOut = mux(isNaNOut, UInt<1>("h0"), io_in_sign)
    node T_173 = or(io_in_isZero, common_totalUnderflow)
    node T_176 = mux(T_173, UInt<9>("h1c0"), UInt<9>("h0"))
    node T_177 = not(T_176)
    node T_178 = and(common_expOut, T_177)
    node T_182 = mux(pegMinNonzeroMagOut, UInt<9>("h194"), UInt<9>("h0"))
    node T_183 = not(T_182)
    node T_184 = and(T_178, T_183)
    node T_187 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<9>("h0"))
    node T_188 = not(T_187)
    node T_189 = and(T_184, T_188)
    node T_192 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<9>("h0"))
    node T_193 = not(T_192)
    node T_194 = and(T_189, T_193)
    node T_197 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<9>("h0"))
    node T_198 = or(T_194, T_197)
    node T_201 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<9>("h0"))
    node T_202 = or(T_198, T_201)
    node T_205 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<9>("h0"))
    node T_206 = or(T_202, T_205)
    node T_209 = mux(isNaNOut, UInt<9>("h1c0"), UInt<9>("h0"))
    node expOut = or(T_206, T_209)
    node T_210 = or(common_totalUnderflow, isNaNOut)
    node T_214 = mux(isNaNOut, UInt<23>("h400000"), UInt<23>("h0"))
    node T_215 = mux(T_210, T_214, common_fractOut)
    node T_219 = mux(pegMaxFiniteMagOut, UInt<23>("h7fffff"), UInt<23>("h0"))
    node fractOut = or(T_215, T_219)
    node T_220 = cat(signOut, expOut)
    node T_221 = cat(T_220, fractOut)
    node T_222 = cat(underflow, inexact)
    node T_223 = cat(io_invalidExc, io_infiniteExc)
    node T_224 = cat(T_223, overflow)
    node T_225 = cat(T_224, T_222)
    io_out <= T_221
    io_exceptionFlags <= T_225

  module RecFNToRecFN :
    input clk : Clock
    input reset : UInt<1>
    input io_in : UInt<65>
    input io_roundingMode : UInt<2>
    output io_out : UInt<33>
    output io_exceptionFlags : UInt<5>
  
    node T_4 = bits(io_in, 63, 52)
    node T_5 = bits(T_4, 11, 9)
    node T_7 = eq(T_5, UInt<3>("h0"))
    node T_8 = bits(T_4, 11, 10)
    node T_10 = eq(T_8, UInt<2>("h3"))
    wire T_18_sign : UInt<1>
    wire T_18_isNaN : UInt<1>
    wire T_18_isInf : UInt<1>
    wire T_18_isZero : UInt<1>
    wire T_18_sExp : SInt<13>
    wire T_18_sig : UInt<56>
    node T_25 = bits(io_in, 64, 64)
    node T_26 = bits(T_4, 9, 9)
    node T_27 = and(T_10, T_26)
    node T_30 = eq(T_26, UInt<1>("h0"))
    node T_31 = and(T_10, T_30)
    node T_32 = cvt(T_4)
    node T_35 = eq(T_7, UInt<1>("h0"))
    node T_36 = bits(io_in, 51, 0)
    node T_38 = cat(T_36, UInt<2>("h0"))
    node T_39 = cat(UInt<1>("h0"), T_35)
    node T_40 = cat(T_39, T_38)
    node T_42 = add(T_18_sExp, SInt<13>("h700"))
    wire outRawFloat_sign : UInt<1>
    wire outRawFloat_isNaN : UInt<1>
    wire outRawFloat_isInf : UInt<1>
    wire outRawFloat_isZero : UInt<1>
    wire outRawFloat_sExp : SInt<10>
    wire outRawFloat_sig : UInt<27>
    node T_57 = lt(T_42, SInt<14>("h0"))
    node T_58 = bits(T_42, 12, 9)
    node T_60 = neq(T_58, UInt<4>("h0"))
    node T_68 = bits(T_42, 8, 0)
    node T_69 = mux(T_60, UInt<9>("h1fc"), T_68)
    node T_70 = cat(T_57, T_69)
    node T_71 = asSInt(T_70)
    node T_72 = bits(T_18_sig, 55, 30)
    node T_73 = bits(T_18_sig, 29, 0)
    node T_75 = neq(T_73, UInt<30>("h0"))
    node T_76 = cat(T_72, T_75)
    node T_77 = bits(outRawFloat_sig, 24, 24)
    node T_79 = eq(T_77, UInt<1>("h0"))
    node invalidExc = and(outRawFloat_isNaN, T_79)
    inst RoundRawFNToRecFN_1 of RoundRawFNToRecFN
    io_out <= RoundRawFNToRecFN_1.io_out
    io_exceptionFlags <= RoundRawFNToRecFN_1.io_exceptionFlags
    T_18_sign <= T_25
    T_18_isNaN <= T_27
    T_18_isInf <= T_31
    T_18_isZero <= T_7
    T_18_sExp <= T_32
    T_18_sig <= T_40
    outRawFloat_sign <= T_18_sign
    outRawFloat_isNaN <= T_18_isNaN
    outRawFloat_isInf <= T_18_isInf
    outRawFloat_isZero <= T_18_isZero
    outRawFloat_sExp <= T_71
    outRawFloat_sig <= T_76
    RoundRawFNToRecFN_1.io_invalidExc <= invalidExc
    RoundRawFNToRecFN_1.io_infiniteExc <= UInt<1>("h0")
    RoundRawFNToRecFN_1.io_in_sign <= outRawFloat_sign
    RoundRawFNToRecFN_1.io_in_isNaN <= outRawFloat_isNaN
    RoundRawFNToRecFN_1.io_in_isInf <= outRawFloat_isInf
    RoundRawFNToRecFN_1.io_in_isZero <= outRawFloat_isZero
    RoundRawFNToRecFN_1.io_in_sExp <= outRawFloat_sExp
    RoundRawFNToRecFN_1.io_in_sig <= outRawFloat_sig
    RoundRawFNToRecFN_1.io_roundingMode <= io_roundingMode

  module RecFNToRecFN_1 :
    input clk : Clock
    input reset : UInt<1>
    input io_in : UInt<33>
    input io_roundingMode : UInt<2>
    output io_out : UInt<65>
    output io_exceptionFlags : UInt<5>
  
    node T_4 = bits(io_in, 31, 23)
    node T_5 = bits(T_4, 8, 6)
    node T_7 = eq(T_5, UInt<3>("h0"))
    node T_8 = bits(T_4, 8, 7)
    node T_10 = eq(T_8, UInt<2>("h3"))
    wire T_18_sign : UInt<1>
    wire T_18_isNaN : UInt<1>
    wire T_18_isInf : UInt<1>
    wire T_18_isZero : UInt<1>
    wire T_18_sExp : SInt<10>
    wire T_18_sig : UInt<27>
    node T_25 = bits(io_in, 32, 32)
    node T_26 = bits(T_4, 6, 6)
    node T_27 = and(T_10, T_26)
    node T_30 = eq(T_26, UInt<1>("h0"))
    node T_31 = and(T_10, T_30)
    node T_32 = cvt(T_4)
    node T_35 = eq(T_7, UInt<1>("h0"))
    node T_36 = bits(io_in, 22, 0)
    node T_38 = cat(T_36, UInt<2>("h0"))
    node T_39 = cat(UInt<1>("h0"), T_35)
    node T_40 = cat(T_39, T_38)
    node GEN_0 = pad(T_18_sExp, 12)
    node T_42 = add(GEN_0, SInt<12>("h700"))
    wire outRawFloat_sign : UInt<1>
    wire outRawFloat_isNaN : UInt<1>
    wire outRawFloat_isInf : UInt<1>
    wire outRawFloat_isZero : UInt<1>
    wire outRawFloat_sExp : SInt<13>
    wire outRawFloat_sig : UInt<56>
    node GEN_1 = pad(T_18_sig, 56)
    node T_56 = shlw(GEN_1, 29)
    node T_57 = bits(outRawFloat_sig, 53, 53)
    node T_59 = eq(T_57, UInt<1>("h0"))
    node invalidExc = and(outRawFloat_isNaN, T_59)
    node T_61 = eq(outRawFloat_isNaN, UInt<1>("h0"))
    node T_62 = and(outRawFloat_sign, T_61)
    node T_63 = bits(outRawFloat_sExp, 11, 0)
    node T_66 = mux(outRawFloat_isZero, UInt<12>("hc00"), UInt<12>("h0"))
    node T_67 = not(T_66)
    node T_68 = and(T_63, T_67)
    node T_69 = or(outRawFloat_isZero, outRawFloat_isInf)
    node T_72 = mux(T_69, UInt<12>("h200"), UInt<12>("h0"))
    node T_73 = not(T_72)
    node T_74 = and(T_68, T_73)
    node T_77 = mux(outRawFloat_isInf, UInt<12>("hc00"), UInt<12>("h0"))
    node T_78 = or(T_74, T_77)
    node T_81 = mux(outRawFloat_isNaN, UInt<12>("he00"), UInt<12>("h0"))
    node T_82 = or(T_78, T_81)
    node T_85 = bits(outRawFloat_sig, 53, 2)
    node T_86 = mux(outRawFloat_isNaN, UInt<52>("h8000000000000"), T_85)
    node T_87 = cat(T_62, T_82)
    node T_88 = cat(T_87, T_86)
    node T_90 = cat(invalidExc, UInt<4>("h0"))
    io_out <= T_88
    io_exceptionFlags <= T_90
    T_18_sign <= T_25
    T_18_isNaN <= T_27
    T_18_isInf <= T_31
    T_18_isZero <= T_7
    T_18_sExp <= T_32
    T_18_sig <= T_40
    outRawFloat_sign <= T_18_sign
    outRawFloat_isNaN <= T_18_isNaN
    outRawFloat_isInf <= T_18_isInf
    outRawFloat_isZero <= T_18_isZero
    outRawFloat_sExp <= T_42
    outRawFloat_sig <= T_56

  module FPToFP :
    input clk : Clock
    input reset : UInt<1>
    input io_in_valid : UInt<1>
    input io_in_bits_cmd : UInt<5>
    input io_in_bits_ldst : UInt<1>
    input io_in_bits_wen : UInt<1>
    input io_in_bits_ren1 : UInt<1>
    input io_in_bits_ren2 : UInt<1>
    input io_in_bits_ren3 : UInt<1>
    input io_in_bits_swap12 : UInt<1>
    input io_in_bits_swap23 : UInt<1>
    input io_in_bits_single : UInt<1>
    input io_in_bits_fromint : UInt<1>
    input io_in_bits_toint : UInt<1>
    input io_in_bits_fastpipe : UInt<1>
    input io_in_bits_fma : UInt<1>
    input io_in_bits_div : UInt<1>
    input io_in_bits_sqrt : UInt<1>
    input io_in_bits_round : UInt<1>
    input io_in_bits_wflags : UInt<1>
    input io_in_bits_rm : UInt<3>
    input io_in_bits_typ : UInt<2>
    input io_in_bits_in1 : UInt<65>
    input io_in_bits_in2 : UInt<65>
    input io_in_bits_in3 : UInt<65>
    output io_out_valid : UInt<1>
    output io_out_bits_data : UInt<65>
    output io_out_bits_exc : UInt<5>
    input io_lt : UInt<1>
  
    reg T_133 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_134_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_134_cmd)
    reg T_134_ldst : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_ldst)
    reg T_134_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_wen)
    reg T_134_ren1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_ren1)
    reg T_134_ren2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_ren2)
    reg T_134_ren3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_ren3)
    reg T_134_swap12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_swap12)
    reg T_134_swap23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_swap23)
    reg T_134_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_single)
    reg T_134_fromint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_fromint)
    reg T_134_toint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_toint)
    reg T_134_fastpipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_fastpipe)
    reg T_134_fma : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_fma)
    reg T_134_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_div)
    reg T_134_sqrt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_sqrt)
    reg T_134_round : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_round)
    reg T_134_wflags : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_134_wflags)
    reg T_134_rm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), T_134_rm)
    reg T_134_typ : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_134_typ)
    reg T_134_in1 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_134_in1)
    reg T_134_in2 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_134_in2)
    reg T_134_in3 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_134_in3)
    node GEN_0 = mux(io_in_valid, io_in_bits_cmd, T_134_cmd)
    node GEN_1 = mux(io_in_valid, io_in_bits_ldst, T_134_ldst)
    node GEN_2 = mux(io_in_valid, io_in_bits_wen, T_134_wen)
    node GEN_3 = mux(io_in_valid, io_in_bits_ren1, T_134_ren1)
    node GEN_4 = mux(io_in_valid, io_in_bits_ren2, T_134_ren2)
    node GEN_5 = mux(io_in_valid, io_in_bits_ren3, T_134_ren3)
    node GEN_6 = mux(io_in_valid, io_in_bits_swap12, T_134_swap12)
    node GEN_7 = mux(io_in_valid, io_in_bits_swap23, T_134_swap23)
    node GEN_8 = mux(io_in_valid, io_in_bits_single, T_134_single)
    node GEN_9 = mux(io_in_valid, io_in_bits_fromint, T_134_fromint)
    node GEN_10 = mux(io_in_valid, io_in_bits_toint, T_134_toint)
    node GEN_11 = mux(io_in_valid, io_in_bits_fastpipe, T_134_fastpipe)
    node GEN_12 = mux(io_in_valid, io_in_bits_fma, T_134_fma)
    node GEN_13 = mux(io_in_valid, io_in_bits_div, T_134_div)
    node GEN_14 = mux(io_in_valid, io_in_bits_sqrt, T_134_sqrt)
    node GEN_15 = mux(io_in_valid, io_in_bits_round, T_134_round)
    node GEN_16 = mux(io_in_valid, io_in_bits_wflags, T_134_wflags)
    node GEN_17 = mux(io_in_valid, io_in_bits_rm, T_134_rm)
    node GEN_18 = mux(io_in_valid, io_in_bits_typ, T_134_typ)
    node GEN_19 = mux(io_in_valid, io_in_bits_in1, T_134_in1)
    node GEN_20 = mux(io_in_valid, io_in_bits_in2, T_134_in2)
    node GEN_21 = mux(io_in_valid, io_in_bits_in3, T_134_in3)
    wire in_valid : UInt<1>
    wire in_bits_cmd : UInt<5>
    wire in_bits_ldst : UInt<1>
    wire in_bits_wen : UInt<1>
    wire in_bits_ren1 : UInt<1>
    wire in_bits_ren2 : UInt<1>
    wire in_bits_ren3 : UInt<1>
    wire in_bits_swap12 : UInt<1>
    wire in_bits_swap23 : UInt<1>
    wire in_bits_single : UInt<1>
    wire in_bits_fromint : UInt<1>
    wire in_bits_toint : UInt<1>
    wire in_bits_fastpipe : UInt<1>
    wire in_bits_fma : UInt<1>
    wire in_bits_div : UInt<1>
    wire in_bits_sqrt : UInt<1>
    wire in_bits_round : UInt<1>
    wire in_bits_wflags : UInt<1>
    wire in_bits_rm : UInt<3>
    wire in_bits_typ : UInt<2>
    wire in_bits_in1 : UInt<65>
    wire in_bits_in2 : UInt<65>
    wire in_bits_in3 : UInt<65>
    node T_252 = bits(in_bits_rm, 1, 1)
    node T_253 = xor(in_bits_in1, in_bits_in2)
    node T_254 = bits(in_bits_rm, 0, 0)
    node T_255 = not(in_bits_in2)
    node T_256 = mux(T_254, T_255, in_bits_in2)
    node signNum = mux(T_252, T_253, T_256)
    node T_257 = bits(signNum, 32, 32)
    node T_258 = bits(in_bits_in1, 31, 0)
    node fsgnj_s = cat(T_257, T_258)
    node T_259 = shr(in_bits_in1, 33)
    node T_260 = cat(T_259, fsgnj_s)
    node T_261 = bits(signNum, 64, 64)
    node T_262 = bits(in_bits_in1, 63, 0)
    node T_263 = cat(T_261, T_262)
    node fsgnj = mux(in_bits_single, T_260, T_263)
    wire mux_data : UInt<65>
    wire mux_exc : UInt<5>
    node T_272 = and(in_bits_cmd, UInt<5>("hd"))
    node T_273 = eq(UInt<5>("h5"), T_272)
    node T_274 = bits(in_bits_in1, 31, 29)
    node T_275 = not(T_274)
    node T_277 = eq(T_275, UInt<3>("h0"))
    node T_278 = bits(in_bits_in2, 31, 29)
    node T_279 = not(T_278)
    node T_281 = eq(T_279, UInt<3>("h0"))
    node T_286 = bits(in_bits_in1, 22, 22)
    node T_288 = eq(T_286, UInt<1>("h0"))
    node T_289 = and(T_277, T_288)
    node T_294 = bits(in_bits_in2, 22, 22)
    node T_296 = eq(T_294, UInt<1>("h0"))
    node T_297 = and(T_281, T_296)
    node T_299 = neq(T_254, io_lt)
    node T_301 = eq(T_277, UInt<1>("h0"))
    node T_302 = and(T_299, T_301)
    node T_303 = or(T_281, T_302)
    node T_304 = or(T_289, T_297)
    node T_305 = bits(in_bits_in1, 63, 61)
    node T_306 = not(T_305)
    node T_308 = eq(T_306, UInt<3>("h0"))
    node T_309 = bits(in_bits_in2, 63, 61)
    node T_310 = not(T_309)
    node T_312 = eq(T_310, UInt<3>("h0"))
    node T_317 = bits(in_bits_in1, 51, 51)
    node T_319 = eq(T_317, UInt<1>("h0"))
    node T_320 = and(T_308, T_319)
    node T_325 = bits(in_bits_in2, 51, 51)
    node T_327 = eq(T_325, UInt<1>("h0"))
    node T_328 = and(T_312, T_327)
    node T_332 = eq(T_308, UInt<1>("h0"))
    node T_333 = and(T_299, T_332)
    node T_334 = or(T_312, T_333)
    node T_335 = or(T_320, T_328)
    node T_336 = mux(in_bits_single, T_303, T_334)
    node T_337 = mux(in_bits_single, T_304, T_335)
    node GEN_33 = pad(T_337, 5)
    node T_338 = shlw(GEN_33, 4)
    node T_340 = eq(T_336, UInt<1>("h0"))
    node GEN_22 = mux(T_340, in_bits_in2, in_bits_in1)
    node GEN_23 = mux(T_273, T_338, UInt<5>("h0"))
    node GEN_24 = mux(T_273, GEN_22, fsgnj)
    node T_343 = and(in_bits_cmd, UInt<5>("h4"))
    node T_344 = eq(UInt<5>("h0"), T_343)
    inst RecFNToRecFN_2 of RecFNToRecFN
    node T_346 = cat(UInt<32>("hffffffff"), RecFNToRecFN_2.io_out)
    node GEN_25 = mux(in_bits_single, T_346, GEN_24)
    node GEN_26 = mux(in_bits_single, RecFNToRecFN_2.io_exceptionFlags, GEN_23)
    node T_348 = eq(in_bits_single, UInt<1>("h0"))
    inst RecFNToRecFN_1_1 of RecFNToRecFN_1
    node GEN_27 = mux(T_348, RecFNToRecFN_1_1.io_out, GEN_25)
    node GEN_28 = mux(T_348, RecFNToRecFN_1_1.io_exceptionFlags, GEN_26)
    node GEN_29 = mux(T_344, GEN_27, GEN_24)
    node GEN_30 = mux(T_344, GEN_28, GEN_23)
    reg T_351 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_352_data : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_352_data)
    reg T_352_exc : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_352_exc)
    node GEN_31 = mux(in_valid, mux_data, T_352_data)
    node GEN_32 = mux(in_valid, mux_exc, T_352_exc)
    wire T_363_valid : UInt<1>
    wire T_363_bits_data : UInt<65>
    wire T_363_bits_exc : UInt<5>
    io_out_valid <= T_363_valid
    io_out_bits_data <= T_363_bits_data
    io_out_bits_exc <= T_363_bits_exc
    T_133 <= io_in_valid
    T_134_cmd <= GEN_0
    T_134_ldst <= GEN_1
    T_134_wen <= GEN_2
    T_134_ren1 <= GEN_3
    T_134_ren2 <= GEN_4
    T_134_ren3 <= GEN_5
    T_134_swap12 <= GEN_6
    T_134_swap23 <= GEN_7
    T_134_single <= GEN_8
    T_134_fromint <= GEN_9
    T_134_toint <= GEN_10
    T_134_fastpipe <= GEN_11
    T_134_fma <= GEN_12
    T_134_div <= GEN_13
    T_134_sqrt <= GEN_14
    T_134_round <= GEN_15
    T_134_wflags <= GEN_16
    T_134_rm <= GEN_17
    T_134_typ <= GEN_18
    T_134_in1 <= GEN_19
    T_134_in2 <= GEN_20
    T_134_in3 <= GEN_21
    in_valid <= T_133
    in_bits_cmd <= T_134_cmd
    in_bits_ldst <= T_134_ldst
    in_bits_wen <= T_134_wen
    in_bits_ren1 <= T_134_ren1
    in_bits_ren2 <= T_134_ren2
    in_bits_ren3 <= T_134_ren3
    in_bits_swap12 <= T_134_swap12
    in_bits_swap23 <= T_134_swap23
    in_bits_single <= T_134_single
    in_bits_fromint <= T_134_fromint
    in_bits_toint <= T_134_toint
    in_bits_fastpipe <= T_134_fastpipe
    in_bits_fma <= T_134_fma
    in_bits_div <= T_134_div
    in_bits_sqrt <= T_134_sqrt
    in_bits_round <= T_134_round
    in_bits_wflags <= T_134_wflags
    in_bits_rm <= T_134_rm
    in_bits_typ <= T_134_typ
    in_bits_in1 <= T_134_in1
    in_bits_in2 <= T_134_in2
    in_bits_in3 <= T_134_in3
    mux_data <= GEN_29
    mux_exc <= GEN_30
    RecFNToRecFN_2.io_in <= in_bits_in1
    RecFNToRecFN_2.io_roundingMode <= bits(in_bits_rm, 1, 0)
    RecFNToRecFN_1_1.io_in <= bits(in_bits_in1, 32, 0)
    RecFNToRecFN_1_1.io_roundingMode <= bits(in_bits_rm, 1, 0)
    T_351 <= in_valid
    T_352_data <= GEN_31
    T_352_exc <= GEN_32
    T_363_valid <= T_351
    T_363_bits_data <= T_352_data
    T_363_bits_exc <= T_352_exc

  module MulAddRecFN_preMul_1 :
    input clk : Clock
    input reset : UInt<1>
    input io_op : UInt<2>
    input io_a : UInt<65>
    input io_b : UInt<65>
    input io_c : UInt<65>
    input io_roundingMode : UInt<2>
    output io_mulAddA : UInt<53>
    output io_mulAddB : UInt<53>
    output io_mulAddC : UInt<106>
    output io_toPostMul_highExpA : UInt<3>
    output io_toPostMul_isNaN_isQuietNaNA : UInt<1>
    output io_toPostMul_highExpB : UInt<3>
    output io_toPostMul_isNaN_isQuietNaNB : UInt<1>
    output io_toPostMul_signProd : UInt<1>
    output io_toPostMul_isZeroProd : UInt<1>
    output io_toPostMul_opSignC : UInt<1>
    output io_toPostMul_highExpC : UInt<3>
    output io_toPostMul_isNaN_isQuietNaNC : UInt<1>
    output io_toPostMul_isCDominant : UInt<1>
    output io_toPostMul_CAlignDist_0 : UInt<1>
    output io_toPostMul_CAlignDist : UInt<8>
    output io_toPostMul_bit0AlignedNegSigC : UInt<1>
    output io_toPostMul_highAlignedNegSigC : UInt<55>
    output io_toPostMul_sExpSum : UInt<14>
    output io_toPostMul_roundingMode : UInt<2>
  
    node signA = bits(io_a, 64, 64)
    node expA = bits(io_a, 63, 52)
    node fractA = bits(io_a, 51, 0)
    node T_42 = bits(expA, 11, 9)
    node isZeroA = eq(T_42, UInt<3>("h0"))
    node T_45 = eq(isZeroA, UInt<1>("h0"))
    node sigA = cat(T_45, fractA)
    node signB = bits(io_b, 64, 64)
    node expB = bits(io_b, 63, 52)
    node fractB = bits(io_b, 51, 0)
    node T_46 = bits(expB, 11, 9)
    node isZeroB = eq(T_46, UInt<3>("h0"))
    node T_49 = eq(isZeroB, UInt<1>("h0"))
    node sigB = cat(T_49, fractB)
    node T_50 = bits(io_c, 64, 64)
    node T_51 = bits(io_op, 0, 0)
    node opSignC = xor(T_50, T_51)
    node expC = bits(io_c, 63, 52)
    node fractC = bits(io_c, 51, 0)
    node T_52 = bits(expC, 11, 9)
    node isZeroC = eq(T_52, UInt<3>("h0"))
    node T_55 = eq(isZeroC, UInt<1>("h0"))
    node sigC = cat(T_55, fractC)
    node T_56 = xor(signA, signB)
    node T_57 = bits(io_op, 1, 1)
    node signProd = xor(T_56, T_57)
    node isZeroProd = or(isZeroA, isZeroB)
    node T_58 = bits(expB, 11, 11)
    node T_60 = eq(T_58, UInt<1>("h0"))
    node T_64 = mux(T_60, UInt<3>("h7"), UInt<3>("h0"))
    node T_65 = bits(expB, 10, 0)
    node T_66 = cat(T_64, T_65)
    node GEN_0 = pad(expA, 14)
    node T_67 = add(GEN_0, T_66)
    node T_68 = tail(T_67, 1)
    node T_70 = add(T_68, UInt<14>("h38"))
    node sExpAlignedProd = tail(T_70, 1)
    node doSubMags = xor(signProd, opSignC)
    node GEN_1 = pad(expC, 14)
    node T_71 = sub(sExpAlignedProd, GEN_1)
    node sNatCAlignDist = tail(T_71, 1)
    node T_72 = bits(sNatCAlignDist, 13, 13)
    node CAlignDist_floor = or(isZeroProd, T_72)
    node T_73 = bits(sNatCAlignDist, 12, 0)
    node T_75 = eq(T_73, UInt<13>("h0"))
    node CAlignDist_0 = or(CAlignDist_floor, T_75)
    node T_80 = lt(T_73, UInt<13>("h36"))
    node T_81 = or(CAlignDist_floor, T_80)
    node isCDominant = and(T_55, T_81)
    node T_85 = lt(T_73, UInt<13>("ha1"))
    node T_86 = bits(sNatCAlignDist, 7, 0)
    node T_88 = mux(T_85, T_86, UInt<8>("ha1"))
    node CAlignDist = mux(CAlignDist_floor, UInt<8>("h0"), T_88)
    node sExpSum = mux(CAlignDist_floor, pad(expC, 14), sExpAlignedProd)
    node T_89 = bits(CAlignDist, 7, 7)
    node T_90 = bits(CAlignDist, 6, 0)
    node T_91 = bits(T_90, 6, 6)
    node T_92 = bits(T_90, 5, 0)
    node T_95 = dshr(SInt<65>("h10000000000000000"), T_92)
    node T_96 = bits(T_95, 63, 31)
    node T_97 = bits(T_96, 31, 0)
    node T_102 = shr(T_97, 16)
    node T_103 = pad(T_102, 32)
    node T_104 = bits(T_97, 15, 0)
    node GEN_2 = pad(T_104, 32)
    node T_105 = shlw(GEN_2, 16)
    node T_107 = and(T_105, UInt<32>("hffff0000"))
    node T_108 = or(T_103, T_107)
    node T_112 = shr(T_108, 8)
    node GEN_3 = pad(T_112, 32)
    node T_113 = and(GEN_3, UInt<32>("hff00ff"))
    node T_114 = bits(T_108, 23, 0)
    node GEN_4 = pad(T_114, 32)
    node T_115 = shlw(GEN_4, 8)
    node T_117 = and(T_115, UInt<32>("hff00ff00"))
    node T_118 = or(T_113, T_117)
    node T_122 = shr(T_118, 4)
    node GEN_5 = pad(T_122, 32)
    node T_123 = and(GEN_5, UInt<32>("hf0f0f0f"))
    node T_124 = bits(T_118, 27, 0)
    node GEN_6 = pad(T_124, 32)
    node T_125 = shlw(GEN_6, 4)
    node T_127 = and(T_125, UInt<32>("hf0f0f0f0"))
    node T_128 = or(T_123, T_127)
    node T_132 = shr(T_128, 2)
    node GEN_7 = pad(T_132, 32)
    node T_133 = and(GEN_7, UInt<32>("h33333333"))
    node T_134 = bits(T_128, 29, 0)
    node GEN_8 = pad(T_134, 32)
    node T_135 = shlw(GEN_8, 2)
    node T_137 = and(T_135, UInt<32>("hcccccccc"))
    node T_138 = or(T_133, T_137)
    node T_142 = shr(T_138, 1)
    node GEN_9 = pad(T_142, 32)
    node T_143 = and(GEN_9, UInt<32>("h55555555"))
    node T_144 = bits(T_138, 30, 0)
    node GEN_10 = pad(T_144, 32)
    node T_145 = shlw(GEN_10, 1)
    node T_147 = and(T_145, UInt<32>("haaaaaaaa"))
    node T_148 = or(T_143, T_147)
    node T_149 = bits(T_96, 32, 32)
    node T_150 = cat(T_148, T_149)
    node T_151 = not(T_150)
    node T_152 = mux(T_91, UInt<33>("h0"), T_151)
    node T_153 = not(T_152)
    node T_155 = cat(T_153, UInt<20>("hfffff"))
    node T_160 = bits(T_95, 19, 0)
    node T_161 = bits(T_160, 15, 0)
    node T_166 = shr(T_161, 8)
    node T_167 = pad(T_166, 16)
    node T_168 = bits(T_161, 7, 0)
    node GEN_11 = pad(T_168, 16)
    node T_169 = shlw(GEN_11, 8)
    node T_171 = and(T_169, UInt<16>("hff00"))
    node T_172 = or(T_167, T_171)
    node T_176 = shr(T_172, 4)
    node GEN_12 = pad(T_176, 16)
    node T_177 = and(GEN_12, UInt<16>("hf0f"))
    node T_178 = bits(T_172, 11, 0)
    node GEN_13 = pad(T_178, 16)
    node T_179 = shlw(GEN_13, 4)
    node T_181 = and(T_179, UInt<16>("hf0f0"))
    node T_182 = or(T_177, T_181)
    node T_186 = shr(T_182, 2)
    node GEN_14 = pad(T_186, 16)
    node T_187 = and(GEN_14, UInt<16>("h3333"))
    node T_188 = bits(T_182, 13, 0)
    node GEN_15 = pad(T_188, 16)
    node T_189 = shlw(GEN_15, 2)
    node T_191 = and(T_189, UInt<16>("hcccc"))
    node T_192 = or(T_187, T_191)
    node T_196 = shr(T_192, 1)
    node GEN_16 = pad(T_196, 16)
    node T_197 = and(GEN_16, UInt<16>("h5555"))
    node T_198 = bits(T_192, 14, 0)
    node GEN_17 = pad(T_198, 16)
    node T_199 = shlw(GEN_17, 1)
    node T_201 = and(T_199, UInt<16>("haaaa"))
    node T_202 = or(T_197, T_201)
    node T_203 = bits(T_160, 19, 16)
    node T_204 = bits(T_203, 1, 0)
    node T_205 = bits(T_204, 0, 0)
    node T_206 = bits(T_204, 1, 1)
    node T_207 = cat(T_205, T_206)
    node T_208 = bits(T_203, 3, 2)
    node T_209 = bits(T_208, 0, 0)
    node T_210 = bits(T_208, 1, 1)
    node T_211 = cat(T_209, T_210)
    node T_212 = cat(T_207, T_211)
    node T_213 = cat(T_202, T_212)
    node T_215 = mux(T_91, T_213, UInt<20>("h0"))
    node CExtraMask = mux(T_89, T_155, pad(T_215, 53))
    node T_216 = not(sigC)
    node negSigC = mux(doSubMags, T_216, sigC)
    node T_220 = mux(doSubMags, UInt<108>("hfffffffffffffffffffffffffff"), UInt<108>("h0"))
    node T_221 = cat(doSubMags, negSigC)
    node T_222 = cat(T_221, T_220)
    node T_223 = asSInt(T_222)
    node T_224 = dshr(T_223, CAlignDist)
    node T_225 = and(sigC, CExtraMask)
    node T_227 = neq(T_225, UInt<53>("h0"))
    node T_228 = xor(T_227, doSubMags)
    node T_229 = asUInt(T_224)
    node T_230 = cat(T_229, T_228)
    node alignedNegSigC = bits(T_230, 161, 0)
    node T_231 = bits(alignedNegSigC, 106, 1)
    node T_233 = bits(fractA, 51, 51)
    node T_235 = bits(fractB, 51, 51)
    node T_237 = bits(fractC, 51, 51)
    node T_238 = bits(alignedNegSigC, 0, 0)
    node T_239 = bits(alignedNegSigC, 161, 107)
    io_mulAddA <= sigA
    io_mulAddB <= sigB
    io_mulAddC <= T_231
    io_toPostMul_highExpA <= T_42
    io_toPostMul_isNaN_isQuietNaNA <= T_233
    io_toPostMul_highExpB <= T_46
    io_toPostMul_isNaN_isQuietNaNB <= T_235
    io_toPostMul_signProd <= signProd
    io_toPostMul_isZeroProd <= isZeroProd
    io_toPostMul_opSignC <= opSignC
    io_toPostMul_highExpC <= T_52
    io_toPostMul_isNaN_isQuietNaNC <= T_237
    io_toPostMul_isCDominant <= isCDominant
    io_toPostMul_CAlignDist_0 <= CAlignDist_0
    io_toPostMul_CAlignDist <= CAlignDist
    io_toPostMul_bit0AlignedNegSigC <= T_238
    io_toPostMul_highAlignedNegSigC <= T_239
    io_toPostMul_sExpSum <= sExpSum
    io_toPostMul_roundingMode <= io_roundingMode

  module MulAddRecFN_postMul_1 :
    input clk : Clock
    input reset : UInt<1>
    input io_fromPreMul_highExpA : UInt<3>
    input io_fromPreMul_isNaN_isQuietNaNA : UInt<1>
    input io_fromPreMul_highExpB : UInt<3>
    input io_fromPreMul_isNaN_isQuietNaNB : UInt<1>
    input io_fromPreMul_signProd : UInt<1>
    input io_fromPreMul_isZeroProd : UInt<1>
    input io_fromPreMul_opSignC : UInt<1>
    input io_fromPreMul_highExpC : UInt<3>
    input io_fromPreMul_isNaN_isQuietNaNC : UInt<1>
    input io_fromPreMul_isCDominant : UInt<1>
    input io_fromPreMul_CAlignDist_0 : UInt<1>
    input io_fromPreMul_CAlignDist : UInt<8>
    input io_fromPreMul_bit0AlignedNegSigC : UInt<1>
    input io_fromPreMul_highAlignedNegSigC : UInt<55>
    input io_fromPreMul_sExpSum : UInt<14>
    input io_fromPreMul_roundingMode : UInt<2>
    input io_mulAddResult : UInt<107>
    output io_out : UInt<65>
    output io_exceptionFlags : UInt<5>
  
    node isZeroA = eq(io_fromPreMul_highExpA, UInt<3>("h0"))
    node T_38 = bits(io_fromPreMul_highExpA, 2, 1)
    node isSpecialA = eq(T_38, UInt<2>("h3"))
    node T_40 = bits(io_fromPreMul_highExpA, 0, 0)
    node T_42 = eq(T_40, UInt<1>("h0"))
    node isInfA = and(isSpecialA, T_42)
    node isNaNA = and(isSpecialA, T_40)
    node T_45 = eq(io_fromPreMul_isNaN_isQuietNaNA, UInt<1>("h0"))
    node isSigNaNA = and(isNaNA, T_45)
    node isZeroB = eq(io_fromPreMul_highExpB, UInt<3>("h0"))
    node T_47 = bits(io_fromPreMul_highExpB, 2, 1)
    node isSpecialB = eq(T_47, UInt<2>("h3"))
    node T_49 = bits(io_fromPreMul_highExpB, 0, 0)
    node T_51 = eq(T_49, UInt<1>("h0"))
    node isInfB = and(isSpecialB, T_51)
    node isNaNB = and(isSpecialB, T_49)
    node T_54 = eq(io_fromPreMul_isNaN_isQuietNaNB, UInt<1>("h0"))
    node isSigNaNB = and(isNaNB, T_54)
    node isZeroC = eq(io_fromPreMul_highExpC, UInt<3>("h0"))
    node T_56 = bits(io_fromPreMul_highExpC, 2, 1)
    node isSpecialC = eq(T_56, UInt<2>("h3"))
    node T_58 = bits(io_fromPreMul_highExpC, 0, 0)
    node T_60 = eq(T_58, UInt<1>("h0"))
    node isInfC = and(isSpecialC, T_60)
    node isNaNC = and(isSpecialC, T_58)
    node T_63 = eq(io_fromPreMul_isNaN_isQuietNaNC, UInt<1>("h0"))
    node isSigNaNC = and(isNaNC, T_63)
    node roundingMode_nearest_even = eq(io_fromPreMul_roundingMode, UInt<2>("h0"))
    node roundingMode_min = eq(io_fromPreMul_roundingMode, UInt<2>("h2"))
    node roundingMode_max = eq(io_fromPreMul_roundingMode, UInt<2>("h3"))
    node doSubMags = xor(io_fromPreMul_signProd, io_fromPreMul_opSignC)
    node T_66 = bits(io_mulAddResult, 106, 106)
    node T_68 = add(io_fromPreMul_highAlignedNegSigC, UInt<55>("h1"))
    node T_69 = tail(T_68, 1)
    node T_70 = mux(T_66, T_69, io_fromPreMul_highAlignedNegSigC)
    node T_71 = bits(io_mulAddResult, 105, 0)
    node T_72 = cat(T_70, T_71)
    node sigSum = cat(T_72, io_fromPreMul_bit0AlignedNegSigC)
    node T_74 = bits(sigSum, 108, 1)
    node GEN_0 = pad(T_74, 109)
    node T_77 = shlw(GEN_0, 1)
    node T_78 = xor(GEN_0, T_77)
    node T_80 = bits(T_78, 107, 0)
    node T_81 = bits(T_80, 107, 64)
    node T_82 = bits(T_80, 63, 0)
    node T_84 = neq(T_81, UInt<44>("h0"))
    node T_85 = bits(T_81, 43, 32)
    node T_86 = bits(T_81, 31, 0)
    node T_88 = neq(T_85, UInt<12>("h0"))
    node T_89 = bits(T_85, 11, 8)
    node T_90 = bits(T_85, 7, 0)
    node T_92 = neq(T_89, UInt<4>("h0"))
    node T_93 = bits(T_89, 3, 3)
    node T_95 = bits(T_89, 2, 2)
    node T_97 = bits(T_89, 1, 1)
    node T_99 = mux(T_95, UInt<2>("h2"), pad(T_97, 2))
    node T_100 = mux(T_93, UInt<2>("h3"), T_99)
    node T_101 = bits(T_90, 7, 4)
    node T_102 = bits(T_90, 3, 0)
    node T_104 = neq(T_101, UInt<4>("h0"))
    node T_105 = bits(T_101, 3, 3)
    node T_107 = bits(T_101, 2, 2)
    node T_109 = bits(T_101, 1, 1)
    node T_111 = mux(T_107, UInt<2>("h2"), pad(T_109, 2))
    node T_112 = mux(T_105, UInt<2>("h3"), T_111)
    node T_113 = bits(T_102, 3, 3)
    node T_115 = bits(T_102, 2, 2)
    node T_117 = bits(T_102, 1, 1)
    node T_119 = mux(T_115, UInt<2>("h2"), pad(T_117, 2))
    node T_120 = mux(T_113, UInt<2>("h3"), T_119)
    node T_121 = mux(T_104, T_112, T_120)
    node T_122 = cat(T_104, T_121)
    node T_123 = mux(T_92, pad(T_100, 3), T_122)
    node T_124 = cat(T_92, T_123)
    node T_125 = bits(T_86, 31, 16)
    node T_126 = bits(T_86, 15, 0)
    node T_128 = neq(T_125, UInt<16>("h0"))
    node T_129 = bits(T_125, 15, 8)
    node T_130 = bits(T_125, 7, 0)
    node T_132 = neq(T_129, UInt<8>("h0"))
    node T_133 = bits(T_129, 7, 4)
    node T_134 = bits(T_129, 3, 0)
    node T_136 = neq(T_133, UInt<4>("h0"))
    node T_137 = bits(T_133, 3, 3)
    node T_139 = bits(T_133, 2, 2)
    node T_141 = bits(T_133, 1, 1)
    node T_143 = mux(T_139, UInt<2>("h2"), pad(T_141, 2))
    node T_144 = mux(T_137, UInt<2>("h3"), T_143)
    node T_145 = bits(T_134, 3, 3)
    node T_147 = bits(T_134, 2, 2)
    node T_149 = bits(T_134, 1, 1)
    node T_151 = mux(T_147, UInt<2>("h2"), pad(T_149, 2))
    node T_152 = mux(T_145, UInt<2>("h3"), T_151)
    node T_153 = mux(T_136, T_144, T_152)
    node T_154 = cat(T_136, T_153)
    node T_155 = bits(T_130, 7, 4)
    node T_156 = bits(T_130, 3, 0)
    node T_158 = neq(T_155, UInt<4>("h0"))
    node T_159 = bits(T_155, 3, 3)
    node T_161 = bits(T_155, 2, 2)
    node T_163 = bits(T_155, 1, 1)
    node T_165 = mux(T_161, UInt<2>("h2"), pad(T_163, 2))
    node T_166 = mux(T_159, UInt<2>("h3"), T_165)
    node T_167 = bits(T_156, 3, 3)
    node T_169 = bits(T_156, 2, 2)
    node T_171 = bits(T_156, 1, 1)
    node T_173 = mux(T_169, UInt<2>("h2"), pad(T_171, 2))
    node T_174 = mux(T_167, UInt<2>("h3"), T_173)
    node T_175 = mux(T_158, T_166, T_174)
    node T_176 = cat(T_158, T_175)
    node T_177 = mux(T_132, T_154, T_176)
    node T_178 = cat(T_132, T_177)
    node T_179 = bits(T_126, 15, 8)
    node T_180 = bits(T_126, 7, 0)
    node T_182 = neq(T_179, UInt<8>("h0"))
    node T_183 = bits(T_179, 7, 4)
    node T_184 = bits(T_179, 3, 0)
    node T_186 = neq(T_183, UInt<4>("h0"))
    node T_187 = bits(T_183, 3, 3)
    node T_189 = bits(T_183, 2, 2)
    node T_191 = bits(T_183, 1, 1)
    node T_193 = mux(T_189, UInt<2>("h2"), pad(T_191, 2))
    node T_194 = mux(T_187, UInt<2>("h3"), T_193)
    node T_195 = bits(T_184, 3, 3)
    node T_197 = bits(T_184, 2, 2)
    node T_199 = bits(T_184, 1, 1)
    node T_201 = mux(T_197, UInt<2>("h2"), pad(T_199, 2))
    node T_202 = mux(T_195, UInt<2>("h3"), T_201)
    node T_203 = mux(T_186, T_194, T_202)
    node T_204 = cat(T_186, T_203)
    node T_205 = bits(T_180, 7, 4)
    node T_206 = bits(T_180, 3, 0)
    node T_208 = neq(T_205, UInt<4>("h0"))
    node T_209 = bits(T_205, 3, 3)
    node T_211 = bits(T_205, 2, 2)
    node T_213 = bits(T_205, 1, 1)
    node T_215 = mux(T_211, UInt<2>("h2"), pad(T_213, 2))
    node T_216 = mux(T_209, UInt<2>("h3"), T_215)
    node T_217 = bits(T_206, 3, 3)
    node T_219 = bits(T_206, 2, 2)
    node T_221 = bits(T_206, 1, 1)
    node T_223 = mux(T_219, UInt<2>("h2"), pad(T_221, 2))
    node T_224 = mux(T_217, UInt<2>("h3"), T_223)
    node T_225 = mux(T_208, T_216, T_224)
    node T_226 = cat(T_208, T_225)
    node T_227 = mux(T_182, T_204, T_226)
    node T_228 = cat(T_182, T_227)
    node T_229 = mux(T_128, T_178, T_228)
    node T_230 = cat(T_128, T_229)
    node T_231 = mux(T_88, pad(T_124, 5), T_230)
    node T_232 = cat(T_88, T_231)
    node T_233 = bits(T_82, 63, 32)
    node T_234 = bits(T_82, 31, 0)
    node T_236 = neq(T_233, UInt<32>("h0"))
    node T_237 = bits(T_233, 31, 16)
    node T_238 = bits(T_233, 15, 0)
    node T_240 = neq(T_237, UInt<16>("h0"))
    node T_241 = bits(T_237, 15, 8)
    node T_242 = bits(T_237, 7, 0)
    node T_244 = neq(T_241, UInt<8>("h0"))
    node T_245 = bits(T_241, 7, 4)
    node T_246 = bits(T_241, 3, 0)
    node T_248 = neq(T_245, UInt<4>("h0"))
    node T_249 = bits(T_245, 3, 3)
    node T_251 = bits(T_245, 2, 2)
    node T_253 = bits(T_245, 1, 1)
    node T_255 = mux(T_251, UInt<2>("h2"), pad(T_253, 2))
    node T_256 = mux(T_249, UInt<2>("h3"), T_255)
    node T_257 = bits(T_246, 3, 3)
    node T_259 = bits(T_246, 2, 2)
    node T_261 = bits(T_246, 1, 1)
    node T_263 = mux(T_259, UInt<2>("h2"), pad(T_261, 2))
    node T_264 = mux(T_257, UInt<2>("h3"), T_263)
    node T_265 = mux(T_248, T_256, T_264)
    node T_266 = cat(T_248, T_265)
    node T_267 = bits(T_242, 7, 4)
    node T_268 = bits(T_242, 3, 0)
    node T_270 = neq(T_267, UInt<4>("h0"))
    node T_271 = bits(T_267, 3, 3)
    node T_273 = bits(T_267, 2, 2)
    node T_275 = bits(T_267, 1, 1)
    node T_277 = mux(T_273, UInt<2>("h2"), pad(T_275, 2))
    node T_278 = mux(T_271, UInt<2>("h3"), T_277)
    node T_279 = bits(T_268, 3, 3)
    node T_281 = bits(T_268, 2, 2)
    node T_283 = bits(T_268, 1, 1)
    node T_285 = mux(T_281, UInt<2>("h2"), pad(T_283, 2))
    node T_286 = mux(T_279, UInt<2>("h3"), T_285)
    node T_287 = mux(T_270, T_278, T_286)
    node T_288 = cat(T_270, T_287)
    node T_289 = mux(T_244, T_266, T_288)
    node T_290 = cat(T_244, T_289)
    node T_291 = bits(T_238, 15, 8)
    node T_292 = bits(T_238, 7, 0)
    node T_294 = neq(T_291, UInt<8>("h0"))
    node T_295 = bits(T_291, 7, 4)
    node T_296 = bits(T_291, 3, 0)
    node T_298 = neq(T_295, UInt<4>("h0"))
    node T_299 = bits(T_295, 3, 3)
    node T_301 = bits(T_295, 2, 2)
    node T_303 = bits(T_295, 1, 1)
    node T_305 = mux(T_301, UInt<2>("h2"), pad(T_303, 2))
    node T_306 = mux(T_299, UInt<2>("h3"), T_305)
    node T_307 = bits(T_296, 3, 3)
    node T_309 = bits(T_296, 2, 2)
    node T_311 = bits(T_296, 1, 1)
    node T_313 = mux(T_309, UInt<2>("h2"), pad(T_311, 2))
    node T_314 = mux(T_307, UInt<2>("h3"), T_313)
    node T_315 = mux(T_298, T_306, T_314)
    node T_316 = cat(T_298, T_315)
    node T_317 = bits(T_292, 7, 4)
    node T_318 = bits(T_292, 3, 0)
    node T_320 = neq(T_317, UInt<4>("h0"))
    node T_321 = bits(T_317, 3, 3)
    node T_323 = bits(T_317, 2, 2)
    node T_325 = bits(T_317, 1, 1)
    node T_327 = mux(T_323, UInt<2>("h2"), pad(T_325, 2))
    node T_328 = mux(T_321, UInt<2>("h3"), T_327)
    node T_329 = bits(T_318, 3, 3)
    node T_331 = bits(T_318, 2, 2)
    node T_333 = bits(T_318, 1, 1)
    node T_335 = mux(T_331, UInt<2>("h2"), pad(T_333, 2))
    node T_336 = mux(T_329, UInt<2>("h3"), T_335)
    node T_337 = mux(T_320, T_328, T_336)
    node T_338 = cat(T_320, T_337)
    node T_339 = mux(T_294, T_316, T_338)
    node T_340 = cat(T_294, T_339)
    node T_341 = mux(T_240, T_290, T_340)
    node T_342 = cat(T_240, T_341)
    node T_343 = bits(T_234, 31, 16)
    node T_344 = bits(T_234, 15, 0)
    node T_346 = neq(T_343, UInt<16>("h0"))
    node T_347 = bits(T_343, 15, 8)
    node T_348 = bits(T_343, 7, 0)
    node T_350 = neq(T_347, UInt<8>("h0"))
    node T_351 = bits(T_347, 7, 4)
    node T_352 = bits(T_347, 3, 0)
    node T_354 = neq(T_351, UInt<4>("h0"))
    node T_355 = bits(T_351, 3, 3)
    node T_357 = bits(T_351, 2, 2)
    node T_359 = bits(T_351, 1, 1)
    node T_361 = mux(T_357, UInt<2>("h2"), pad(T_359, 2))
    node T_362 = mux(T_355, UInt<2>("h3"), T_361)
    node T_363 = bits(T_352, 3, 3)
    node T_365 = bits(T_352, 2, 2)
    node T_367 = bits(T_352, 1, 1)
    node T_369 = mux(T_365, UInt<2>("h2"), pad(T_367, 2))
    node T_370 = mux(T_363, UInt<2>("h3"), T_369)
    node T_371 = mux(T_354, T_362, T_370)
    node T_372 = cat(T_354, T_371)
    node T_373 = bits(T_348, 7, 4)
    node T_374 = bits(T_348, 3, 0)
    node T_376 = neq(T_373, UInt<4>("h0"))
    node T_377 = bits(T_373, 3, 3)
    node T_379 = bits(T_373, 2, 2)
    node T_381 = bits(T_373, 1, 1)
    node T_383 = mux(T_379, UInt<2>("h2"), pad(T_381, 2))
    node T_384 = mux(T_377, UInt<2>("h3"), T_383)
    node T_385 = bits(T_374, 3, 3)
    node T_387 = bits(T_374, 2, 2)
    node T_389 = bits(T_374, 1, 1)
    node T_391 = mux(T_387, UInt<2>("h2"), pad(T_389, 2))
    node T_392 = mux(T_385, UInt<2>("h3"), T_391)
    node T_393 = mux(T_376, T_384, T_392)
    node T_394 = cat(T_376, T_393)
    node T_395 = mux(T_350, T_372, T_394)
    node T_396 = cat(T_350, T_395)
    node T_397 = bits(T_344, 15, 8)
    node T_398 = bits(T_344, 7, 0)
    node T_400 = neq(T_397, UInt<8>("h0"))
    node T_401 = bits(T_397, 7, 4)
    node T_402 = bits(T_397, 3, 0)
    node T_404 = neq(T_401, UInt<4>("h0"))
    node T_405 = bits(T_401, 3, 3)
    node T_407 = bits(T_401, 2, 2)
    node T_409 = bits(T_401, 1, 1)
    node T_411 = mux(T_407, UInt<2>("h2"), pad(T_409, 2))
    node T_412 = mux(T_405, UInt<2>("h3"), T_411)
    node T_413 = bits(T_402, 3, 3)
    node T_415 = bits(T_402, 2, 2)
    node T_417 = bits(T_402, 1, 1)
    node T_419 = mux(T_415, UInt<2>("h2"), pad(T_417, 2))
    node T_420 = mux(T_413, UInt<2>("h3"), T_419)
    node T_421 = mux(T_404, T_412, T_420)
    node T_422 = cat(T_404, T_421)
    node T_423 = bits(T_398, 7, 4)
    node T_424 = bits(T_398, 3, 0)
    node T_426 = neq(T_423, UInt<4>("h0"))
    node T_427 = bits(T_423, 3, 3)
    node T_429 = bits(T_423, 2, 2)
    node T_431 = bits(T_423, 1, 1)
    node T_433 = mux(T_429, UInt<2>("h2"), pad(T_431, 2))
    node T_434 = mux(T_427, UInt<2>("h3"), T_433)
    node T_435 = bits(T_424, 3, 3)
    node T_437 = bits(T_424, 2, 2)
    node T_439 = bits(T_424, 1, 1)
    node T_441 = mux(T_437, UInt<2>("h2"), pad(T_439, 2))
    node T_442 = mux(T_435, UInt<2>("h3"), T_441)
    node T_443 = mux(T_426, T_434, T_442)
    node T_444 = cat(T_426, T_443)
    node T_445 = mux(T_400, T_422, T_444)
    node T_446 = cat(T_400, T_445)
    node T_447 = mux(T_346, T_396, T_446)
    node T_448 = cat(T_346, T_447)
    node T_449 = mux(T_236, T_342, T_448)
    node T_450 = cat(T_236, T_449)
    node T_451 = mux(T_84, T_232, T_450)
    node T_452 = cat(T_84, T_451)
    node GEN_2 = pad(T_452, 8)
    node T_453 = sub(UInt<8>("ha0"), GEN_2)
    node estNormPos_dist = tail(T_453, 1)
    node T_454 = bits(sigSum, 75, 44)
    node T_456 = neq(T_454, UInt<32>("h0"))
    node T_457 = bits(sigSum, 43, 0)
    node T_459 = neq(T_457, UInt<44>("h0"))
    node firstReduceSigSum = cat(T_456, T_459)
    node complSigSum = not(sigSum)
    node T_460 = bits(complSigSum, 75, 44)
    node T_462 = neq(T_460, UInt<32>("h0"))
    node T_463 = bits(complSigSum, 43, 0)
    node T_465 = neq(T_463, UInt<44>("h0"))
    node firstReduceComplSigSum = cat(T_462, T_465)
    node T_466 = or(io_fromPreMul_CAlignDist_0, doSubMags)
    node T_468 = sub(io_fromPreMul_CAlignDist, UInt<8>("h1"))
    node T_469 = tail(T_468, 1)
    node T_470 = bits(T_469, 5, 0)
    node CDom_estNormDist = mux(T_466, io_fromPreMul_CAlignDist, pad(T_470, 8))
    node T_472 = eq(doSubMags, UInt<1>("h0"))
    node T_473 = bits(CDom_estNormDist, 5, 5)
    node T_475 = eq(T_473, UInt<1>("h0"))
    node T_476 = and(T_472, T_475)
    node T_477 = bits(sigSum, 161, 76)
    node T_479 = neq(firstReduceSigSum, UInt<2>("h0"))
    node T_480 = cat(T_477, T_479)
    node T_482 = mux(T_476, T_480, UInt<87>("h0"))
    node T_486 = and(T_472, T_473)
    node T_487 = bits(sigSum, 129, 44)
    node T_488 = bits(firstReduceSigSum, 0, 0)
    node T_489 = cat(T_487, T_488)
    node T_491 = mux(T_486, T_489, UInt<87>("h0"))
    node T_492 = or(T_482, T_491)
    node T_496 = and(doSubMags, T_475)
    node T_497 = bits(complSigSum, 161, 76)
    node T_499 = neq(firstReduceComplSigSum, UInt<2>("h0"))
    node T_500 = cat(T_497, T_499)
    node T_502 = mux(T_496, T_500, UInt<87>("h0"))
    node T_503 = or(T_492, T_502)
    node T_505 = and(doSubMags, T_473)
    node T_506 = bits(complSigSum, 129, 44)
    node T_507 = bits(firstReduceComplSigSum, 0, 0)
    node T_508 = cat(T_506, T_507)
    node T_510 = mux(T_505, T_508, UInt<87>("h0"))
    node CDom_firstNormAbsSigSum = or(T_503, T_510)
    node T_511 = bits(sigSum, 108, 44)
    node T_514 = eq(T_507, UInt<1>("h0"))
    node T_516 = mux(doSubMags, T_514, T_488)
    node T_517 = cat(T_511, T_516)
    node T_519 = bits(estNormPos_dist, 4, 4)
    node T_520 = bits(sigSum, 1, 1)
    node T_524 = mux(doSubMags, UInt<86>("h3fffffffffffffffffffff"), UInt<86>("h0"))
    node T_525 = cat(T_520, T_524)
    node T_526 = mux(T_519, pad(T_517, 87), T_525)
    node T_527 = bits(sigSum, 97, 12)
    node T_528 = bits(complSigSum, 11, 1)
    node T_530 = eq(T_528, UInt<11>("h0"))
    node T_531 = bits(sigSum, 11, 1)
    node T_533 = neq(T_531, UInt<11>("h0"))
    node T_534 = mux(doSubMags, T_530, T_533)
    node T_535 = cat(T_527, T_534)
    node T_536 = bits(estNormPos_dist, 6, 6)
    node T_537 = bits(estNormPos_dist, 5, 5)
    node T_538 = bits(sigSum, 65, 1)
    node T_542 = mux(doSubMags, UInt<22>("h3fffff"), UInt<22>("h0"))
    node T_543 = cat(T_538, T_542)
    node T_544 = mux(T_537, T_543, T_535)
    node T_546 = bits(sigSum, 33, 1)
    node T_550 = mux(doSubMags, UInt<54>("h3fffffffffffff"), UInt<54>("h0"))
    node T_551 = cat(T_546, T_550)
    node T_552 = mux(T_537, T_526, T_551)
    node notCDom_pos_firstNormAbsSigSum = mux(T_536, T_544, T_552)
    node T_553 = bits(complSigSum, 107, 44)
    node T_555 = cat(T_553, T_507)
    node T_558 = bits(complSigSum, 2, 1)
    node GEN_3 = pad(T_558, 88)
    node T_559 = shlw(GEN_3, 86)
    node T_560 = mux(T_519, pad(T_555, 88), T_559)
    node T_561 = bits(complSigSum, 98, 12)
    node T_564 = neq(T_528, UInt<11>("h0"))
    node T_565 = cat(T_561, T_564)
    node T_568 = bits(complSigSum, 66, 1)
    node GEN_4 = pad(T_568, 88)
    node T_569 = shlw(GEN_4, 22)
    node T_570 = mux(T_537, T_569, T_565)
    node T_572 = bits(complSigSum, 34, 1)
    node GEN_5 = pad(T_572, 88)
    node T_573 = shlw(GEN_5, 54)
    node T_574 = mux(T_537, T_560, T_573)
    node notCDom_neg_cFirstNormAbsSigSum = mux(T_536, T_570, T_574)
    node notCDom_signSigSum = bits(sigSum, 109, 109)
    node T_576 = eq(isZeroC, UInt<1>("h0"))
    node T_577 = and(doSubMags, T_576)
    node doNegSignSum = mux(io_fromPreMul_isCDominant, T_577, notCDom_signSigSum)
    node estNormDist = mux(io_fromPreMul_isCDominant, CDom_estNormDist, estNormPos_dist)
    node T_579 = mux(io_fromPreMul_isCDominant, pad(CDom_firstNormAbsSigSum, 88), notCDom_neg_cFirstNormAbsSigSum)
    node T_580 = mux(io_fromPreMul_isCDominant, CDom_firstNormAbsSigSum, notCDom_pos_firstNormAbsSigSum)
    node cFirstNormAbsSigSum = mux(notCDom_signSigSum, T_579, pad(T_580, 88))
    node T_582 = eq(io_fromPreMul_isCDominant, UInt<1>("h0"))
    node T_584 = eq(notCDom_signSigSum, UInt<1>("h0"))
    node T_585 = and(T_582, T_584)
    node doIncrSig = and(T_585, doSubMags)
    node estNormDist_5 = bits(estNormDist, 4, 0)
    node normTo2ShiftDist = not(estNormDist_5)
    node T_587 = dshr(SInt<33>("h100000000"), normTo2ShiftDist)
    node T_588 = bits(T_587, 31, 1)
    node T_589 = bits(T_588, 15, 0)
    node T_594 = shr(T_589, 8)
    node T_595 = pad(T_594, 16)
    node T_596 = bits(T_589, 7, 0)
    node GEN_6 = pad(T_596, 16)
    node T_597 = shlw(GEN_6, 8)
    node T_599 = and(T_597, UInt<16>("hff00"))
    node T_600 = or(T_595, T_599)
    node T_604 = shr(T_600, 4)
    node GEN_7 = pad(T_604, 16)
    node T_605 = and(GEN_7, UInt<16>("hf0f"))
    node T_606 = bits(T_600, 11, 0)
    node GEN_8 = pad(T_606, 16)
    node T_607 = shlw(GEN_8, 4)
    node T_609 = and(T_607, UInt<16>("hf0f0"))
    node T_610 = or(T_605, T_609)
    node T_614 = shr(T_610, 2)
    node GEN_9 = pad(T_614, 16)
    node T_615 = and(GEN_9, UInt<16>("h3333"))
    node T_616 = bits(T_610, 13, 0)
    node GEN_10 = pad(T_616, 16)
    node T_617 = shlw(GEN_10, 2)
    node T_619 = and(T_617, UInt<16>("hcccc"))
    node T_620 = or(T_615, T_619)
    node T_624 = shr(T_620, 1)
    node GEN_11 = pad(T_624, 16)
    node T_625 = and(GEN_11, UInt<16>("h5555"))
    node T_626 = bits(T_620, 14, 0)
    node GEN_12 = pad(T_626, 16)
    node T_627 = shlw(GEN_12, 1)
    node T_629 = and(T_627, UInt<16>("haaaa"))
    node T_630 = or(T_625, T_629)
    node T_631 = bits(T_588, 30, 16)
    node T_632 = bits(T_631, 7, 0)
    node T_637 = shr(T_632, 4)
    node T_638 = pad(T_637, 8)
    node T_639 = bits(T_632, 3, 0)
    node GEN_13 = pad(T_639, 8)
    node T_640 = shlw(GEN_13, 4)
    node T_642 = and(T_640, UInt<8>("hf0"))
    node T_643 = or(T_638, T_642)
    node T_647 = shr(T_643, 2)
    node GEN_14 = pad(T_647, 8)
    node T_648 = and(GEN_14, UInt<8>("h33"))
    node T_649 = bits(T_643, 5, 0)
    node GEN_15 = pad(T_649, 8)
    node T_650 = shlw(GEN_15, 2)
    node T_652 = and(T_650, UInt<8>("hcc"))
    node T_653 = or(T_648, T_652)
    node T_657 = shr(T_653, 1)
    node GEN_16 = pad(T_657, 8)
    node T_658 = and(GEN_16, UInt<8>("h55"))
    node T_659 = bits(T_653, 6, 0)
    node GEN_17 = pad(T_659, 8)
    node T_660 = shlw(GEN_17, 1)
    node T_662 = and(T_660, UInt<8>("haa"))
    node T_663 = or(T_658, T_662)
    node T_664 = bits(T_631, 14, 8)
    node T_665 = bits(T_664, 3, 0)
    node T_666 = bits(T_665, 1, 0)
    node T_667 = bits(T_666, 0, 0)
    node T_668 = bits(T_666, 1, 1)
    node T_669 = cat(T_667, T_668)
    node T_670 = bits(T_665, 3, 2)
    node T_671 = bits(T_670, 0, 0)
    node T_672 = bits(T_670, 1, 1)
    node T_673 = cat(T_671, T_672)
    node T_674 = cat(T_669, T_673)
    node T_675 = bits(T_664, 6, 4)
    node T_676 = bits(T_675, 1, 0)
    node T_677 = bits(T_676, 0, 0)
    node T_678 = bits(T_676, 1, 1)
    node T_679 = cat(T_677, T_678)
    node T_680 = bits(T_675, 2, 2)
    node T_681 = cat(T_679, T_680)
    node T_682 = cat(T_674, T_681)
    node T_683 = cat(T_663, T_682)
    node T_684 = cat(T_630, T_683)
    node absSigSumExtraMask = cat(T_684, UInt<1>("h1"))
    node T_686 = bits(cFirstNormAbsSigSum, 87, 1)
    node T_687 = dshr(T_686, normTo2ShiftDist)
    node T_688 = bits(cFirstNormAbsSigSum, 31, 0)
    node T_689 = not(T_688)
    node T_690 = and(T_689, absSigSumExtraMask)
    node T_692 = eq(T_690, UInt<32>("h0"))
    node T_694 = and(T_688, absSigSumExtraMask)
    node T_696 = neq(T_694, UInt<32>("h0"))
    node T_697 = mux(doIncrSig, T_692, T_696)
    node T_698 = cat(T_687, T_697)
    node sigX3 = bits(T_698, 56, 0)
    node T_699 = bits(sigX3, 56, 55)
    node sigX3Shift1 = eq(T_699, UInt<2>("h0"))
    node GEN_18 = pad(estNormDist, 14)
    node T_701 = sub(io_fromPreMul_sExpSum, GEN_18)
    node sExpX3 = tail(T_701, 1)
    node T_702 = bits(sigX3, 56, 54)
    node isZeroY = eq(T_702, UInt<3>("h0"))
    node T_704 = xor(io_fromPreMul_signProd, doNegSignSum)
    node signY = mux(isZeroY, roundingMode_min, T_704)
    node sExpX3_13 = bits(sExpX3, 12, 0)
    node T_705 = bits(sExpX3, 13, 13)
    node T_709 = mux(T_705, UInt<56>("hffffffffffffff"), UInt<56>("h0"))
    node T_710 = not(sExpX3_13)
    node T_711 = bits(T_710, 12, 12)
    node T_712 = bits(T_710, 11, 0)
    node T_713 = bits(T_712, 11, 11)
    node T_714 = bits(T_712, 10, 0)
    node T_715 = bits(T_714, 10, 10)
    node T_716 = bits(T_714, 9, 0)
    node T_717 = bits(T_716, 9, 9)
    node T_718 = bits(T_716, 8, 0)
    node T_720 = bits(T_718, 8, 8)
    node T_721 = bits(T_718, 7, 0)
    node T_723 = bits(T_721, 7, 7)
    node T_724 = bits(T_721, 6, 0)
    node T_726 = bits(T_724, 6, 6)
    node T_727 = bits(T_724, 5, 0)
    node T_730 = dshr(SInt<65>("h10000000000000000"), T_727)
    node T_731 = bits(T_730, 63, 14)
    node T_732 = bits(T_731, 31, 0)
    node T_737 = shr(T_732, 16)
    node T_738 = pad(T_737, 32)
    node T_739 = bits(T_732, 15, 0)
    node GEN_19 = pad(T_739, 32)
    node T_740 = shlw(GEN_19, 16)
    node T_742 = and(T_740, UInt<32>("hffff0000"))
    node T_743 = or(T_738, T_742)
    node T_747 = shr(T_743, 8)
    node GEN_20 = pad(T_747, 32)
    node T_748 = and(GEN_20, UInt<32>("hff00ff"))
    node T_749 = bits(T_743, 23, 0)
    node GEN_21 = pad(T_749, 32)
    node T_750 = shlw(GEN_21, 8)
    node T_752 = and(T_750, UInt<32>("hff00ff00"))
    node T_753 = or(T_748, T_752)
    node T_757 = shr(T_753, 4)
    node GEN_22 = pad(T_757, 32)
    node T_758 = and(GEN_22, UInt<32>("hf0f0f0f"))
    node T_759 = bits(T_753, 27, 0)
    node GEN_23 = pad(T_759, 32)
    node T_760 = shlw(GEN_23, 4)
    node T_762 = and(T_760, UInt<32>("hf0f0f0f0"))
    node T_763 = or(T_758, T_762)
    node T_767 = shr(T_763, 2)
    node GEN_24 = pad(T_767, 32)
    node T_768 = and(GEN_24, UInt<32>("h33333333"))
    node T_769 = bits(T_763, 29, 0)
    node GEN_25 = pad(T_769, 32)
    node T_770 = shlw(GEN_25, 2)
    node T_772 = and(T_770, UInt<32>("hcccccccc"))
    node T_773 = or(T_768, T_772)
    node T_777 = shr(T_773, 1)
    node GEN_26 = pad(T_777, 32)
    node T_778 = and(GEN_26, UInt<32>("h55555555"))
    node T_779 = bits(T_773, 30, 0)
    node GEN_27 = pad(T_779, 32)
    node T_780 = shlw(GEN_27, 1)
    node T_782 = and(T_780, UInt<32>("haaaaaaaa"))
    node T_783 = or(T_778, T_782)
    node T_784 = bits(T_731, 49, 32)
    node T_785 = bits(T_784, 15, 0)
    node T_790 = shr(T_785, 8)
    node T_791 = pad(T_790, 16)
    node T_792 = bits(T_785, 7, 0)
    node GEN_28 = pad(T_792, 16)
    node T_793 = shlw(GEN_28, 8)
    node T_795 = and(T_793, UInt<16>("hff00"))
    node T_796 = or(T_791, T_795)
    node T_800 = shr(T_796, 4)
    node GEN_29 = pad(T_800, 16)
    node T_801 = and(GEN_29, UInt<16>("hf0f"))
    node T_802 = bits(T_796, 11, 0)
    node GEN_30 = pad(T_802, 16)
    node T_803 = shlw(GEN_30, 4)
    node T_805 = and(T_803, UInt<16>("hf0f0"))
    node T_806 = or(T_801, T_805)
    node T_810 = shr(T_806, 2)
    node GEN_31 = pad(T_810, 16)
    node T_811 = and(GEN_31, UInt<16>("h3333"))
    node T_812 = bits(T_806, 13, 0)
    node GEN_32 = pad(T_812, 16)
    node T_813 = shlw(GEN_32, 2)
    node T_815 = and(T_813, UInt<16>("hcccc"))
    node T_816 = or(T_811, T_815)
    node T_820 = shr(T_816, 1)
    node GEN_33 = pad(T_820, 16)
    node T_821 = and(GEN_33, UInt<16>("h5555"))
    node T_822 = bits(T_816, 14, 0)
    node GEN_34 = pad(T_822, 16)
    node T_823 = shlw(GEN_34, 1)
    node T_825 = and(T_823, UInt<16>("haaaa"))
    node T_826 = or(T_821, T_825)
    node T_827 = bits(T_784, 17, 16)
    node T_828 = bits(T_827, 0, 0)
    node T_829 = bits(T_827, 1, 1)
    node T_830 = cat(T_828, T_829)
    node T_831 = cat(T_826, T_830)
    node T_832 = cat(T_783, T_831)
    node T_833 = not(T_832)
    node T_834 = mux(T_726, UInt<50>("h0"), T_833)
    node T_835 = not(T_834)
    node T_836 = not(T_835)
    node T_837 = mux(T_723, UInt<50>("h0"), T_836)
    node T_838 = not(T_837)
    node T_839 = not(T_838)
    node T_840 = mux(T_720, UInt<50>("h0"), T_839)
    node T_841 = not(T_840)
    node T_842 = not(T_841)
    node T_843 = mux(T_717, UInt<50>("h0"), T_842)
    node T_844 = not(T_843)
    node T_846 = cat(T_844, UInt<4>("hf"))
    node T_857 = bits(T_730, 3, 0)
    node T_858 = bits(T_857, 1, 0)
    node T_859 = bits(T_858, 0, 0)
    node T_860 = bits(T_858, 1, 1)
    node T_861 = cat(T_859, T_860)
    node T_862 = bits(T_857, 3, 2)
    node T_863 = bits(T_862, 0, 0)
    node T_864 = bits(T_862, 1, 1)
    node T_865 = cat(T_863, T_864)
    node T_866 = cat(T_861, T_865)
    node T_868 = mux(T_726, T_866, UInt<4>("h0"))
    node T_870 = mux(T_723, T_868, UInt<4>("h0"))
    node T_872 = mux(T_720, T_870, UInt<4>("h0"))
    node T_874 = mux(T_717, T_872, UInt<4>("h0"))
    node T_875 = mux(T_715, T_846, pad(T_874, 54))
    node T_877 = mux(T_713, T_875, UInt<54>("h0"))
    node T_879 = mux(T_711, T_877, UInt<54>("h0"))
    node T_880 = bits(sigX3, 55, 55)
    node GEN_35 = pad(T_880, 54)
    node T_881 = or(T_879, GEN_35)
    node T_883 = cat(T_881, UInt<2>("h3"))
    node roundMask = or(T_709, T_883)
    node T_884 = shr(roundMask, 1)
    node T_885 = not(T_884)
    node GEN_36 = pad(T_885, 56)
    node roundPosMask = and(GEN_36, roundMask)
    node GEN_37 = pad(roundPosMask, 57)
    node T_886 = and(sigX3, GEN_37)
    node roundPosBit = neq(T_886, UInt<57>("h0"))
    node GEN_38 = pad(T_884, 57)
    node T_889 = and(sigX3, GEN_38)
    node anyRoundExtra = neq(T_889, UInt<57>("h0"))
    node T_891 = not(sigX3)
    node T_893 = and(T_891, GEN_38)
    node allRoundExtra = eq(T_893, UInt<57>("h0"))
    node anyRound = or(roundPosBit, anyRoundExtra)
    node allRound = and(roundPosBit, allRoundExtra)
    node roundDirectUp = mux(signY, roundingMode_min, roundingMode_max)
    node T_896 = eq(doIncrSig, UInt<1>("h0"))
    node T_897 = and(T_896, roundingMode_nearest_even)
    node T_898 = and(T_897, roundPosBit)
    node T_899 = and(T_898, anyRoundExtra)
    node T_902 = and(T_896, roundDirectUp)
    node T_903 = and(T_902, anyRound)
    node T_904 = or(T_899, T_903)
    node T_905 = and(doIncrSig, allRound)
    node T_906 = or(T_904, T_905)
    node T_907 = and(doIncrSig, roundingMode_nearest_even)
    node T_908 = and(T_907, roundPosBit)
    node T_909 = or(T_906, T_908)
    node T_910 = and(doIncrSig, roundDirectUp)
    node roundUp = or(T_909, T_910)
    node T_914 = eq(roundPosBit, UInt<1>("h0"))
    node T_915 = and(roundingMode_nearest_even, T_914)
    node T_916 = and(T_915, allRoundExtra)
    node T_917 = and(roundingMode_nearest_even, roundPosBit)
    node T_919 = eq(anyRoundExtra, UInt<1>("h0"))
    node T_920 = and(T_917, T_919)
    node roundEven = mux(doIncrSig, T_916, T_920)
    node T_922 = eq(allRound, UInt<1>("h0"))
    node roundInexact = mux(doIncrSig, T_922, anyRound)
    node GEN_40 = pad(roundMask, 57)
    node T_923 = or(sigX3, GEN_40)
    node T_924 = shr(T_923, 2)
    node T_926 = add(T_924, UInt<55>("h1"))
    node T_927 = tail(T_926, 1)
    node T_929 = eq(roundUp, UInt<1>("h0"))
    node T_931 = eq(roundEven, UInt<1>("h0"))
    node T_932 = and(T_929, T_931)
    node T_933 = not(roundMask)
    node GEN_41 = pad(T_933, 57)
    node T_934 = and(sigX3, GEN_41)
    node T_935 = shr(T_934, 2)
    node T_937 = mux(T_932, T_935, UInt<55>("h0"))
    node T_939 = mux(roundUp, T_927, UInt<55>("h0"))
    node T_940 = or(T_937, T_939)
    node T_943 = and(T_927, T_885)
    node T_945 = mux(roundEven, T_943, UInt<55>("h0"))
    node sigY3 = or(T_940, T_945)
    node T_946 = bits(sigY3, 54, 54)
    node T_948 = add(sExpX3, UInt<14>("h1"))
    node T_949 = tail(T_948, 1)
    node T_951 = mux(T_946, T_949, UInt<14>("h0"))
    node T_952 = bits(sigY3, 53, 53)
    node T_954 = mux(T_952, sExpX3, UInt<14>("h0"))
    node T_955 = or(T_951, T_954)
    node T_956 = bits(sigY3, 54, 53)
    node T_958 = eq(T_956, UInt<2>("h0"))
    node T_960 = sub(sExpX3, UInt<14>("h1"))
    node T_961 = tail(T_960, 1)
    node T_963 = mux(T_958, T_961, UInt<14>("h0"))
    node sExpY = or(T_955, T_963)
    node expY = bits(sExpY, 11, 0)
    node T_964 = bits(sigY3, 51, 0)
    node T_965 = bits(sigY3, 52, 1)
    node fractY = mux(sigX3Shift1, T_964, T_965)
    node T_966 = bits(sExpY, 12, 10)
    node overflowY = eq(T_966, UInt<3>("h3"))
    node T_969 = eq(isZeroY, UInt<1>("h0"))
    node T_970 = bits(sExpY, 12, 12)
    node T_973 = lt(expY, UInt<12>("h3ce"))
    node T_974 = or(T_970, T_973)
    node totalUnderflowY = and(T_969, T_974)
    node T_978 = mux(sigX3Shift1, UInt<11>("h402"), UInt<11>("h401"))
    node GEN_42 = pad(T_978, 13)
    node T_979 = leq(sExpX3_13, GEN_42)
    node T_980 = or(T_705, T_979)
    node underflowY = and(roundInexact, T_980)
    node T_981 = and(roundingMode_min, signY)
    node T_983 = eq(signY, UInt<1>("h0"))
    node T_984 = and(roundingMode_max, T_983)
    node roundMagUp = or(T_981, T_984)
    node overflowY_roundMagUp = or(roundingMode_nearest_even, roundMagUp)
    node mulSpecial = or(isSpecialA, isSpecialB)
    node addSpecial = or(mulSpecial, isSpecialC)
    node notSpecial_addZeros = and(io_fromPreMul_isZeroProd, isZeroC)
    node T_986 = eq(addSpecial, UInt<1>("h0"))
    node T_988 = eq(notSpecial_addZeros, UInt<1>("h0"))
    node commonCase = and(T_986, T_988)
    node T_989 = and(isInfA, isZeroB)
    node T_990 = and(isZeroA, isInfB)
    node T_991 = or(T_989, T_990)
    node T_993 = eq(isNaNA, UInt<1>("h0"))
    node T_995 = eq(isNaNB, UInt<1>("h0"))
    node T_996 = and(T_993, T_995)
    node T_997 = or(isInfA, isInfB)
    node T_998 = and(T_996, T_997)
    node T_999 = and(T_998, isInfC)
    node T_1000 = and(T_999, doSubMags)
    node notSigNaN_invalid = or(T_991, T_1000)
    node T_1001 = or(isSigNaNA, isSigNaNB)
    node T_1002 = or(T_1001, isSigNaNC)
    node invalid = or(T_1002, notSigNaN_invalid)
    node overflow = and(commonCase, overflowY)
    node underflow = and(commonCase, underflowY)
    node T_1003 = and(commonCase, roundInexact)
    node inexact = or(overflow, T_1003)
    node T_1004 = or(notSpecial_addZeros, isZeroY)
    node notSpecial_isZeroOut = or(T_1004, totalUnderflowY)
    node T_1005 = and(commonCase, totalUnderflowY)
    node pegMinFiniteMagOut = and(T_1005, roundMagUp)
    node T_1007 = eq(overflowY_roundMagUp, UInt<1>("h0"))
    node pegMaxFiniteMagOut = and(overflow, T_1007)
    node T_1009 = or(T_997, isInfC)
    node T_1010 = and(overflow, overflowY_roundMagUp)
    node notNaN_isInfOut = or(T_1009, T_1010)
    node T_1011 = or(isNaNA, isNaNB)
    node T_1012 = or(T_1011, isNaNC)
    node isNaNOut = or(T_1012, notSigNaN_invalid)
    node T_1015 = and(T_472, io_fromPreMul_opSignC)
    node T_1017 = eq(isSpecialC, UInt<1>("h0"))
    node T_1018 = and(mulSpecial, T_1017)
    node T_1019 = and(T_1018, io_fromPreMul_signProd)
    node T_1020 = or(T_1015, T_1019)
    node T_1022 = eq(mulSpecial, UInt<1>("h0"))
    node T_1023 = and(T_1022, isSpecialC)
    node T_1024 = and(T_1023, io_fromPreMul_opSignC)
    node T_1025 = or(T_1020, T_1024)
    node T_1028 = and(T_1022, notSpecial_addZeros)
    node T_1029 = and(T_1028, doSubMags)
    node T_1030 = and(T_1029, roundingMode_min)
    node uncommonCaseSignOut = or(T_1025, T_1030)
    node T_1032 = eq(isNaNOut, UInt<1>("h0"))
    node T_1033 = and(T_1032, uncommonCaseSignOut)
    node T_1034 = and(commonCase, signY)
    node signOut = or(T_1033, T_1034)
    node T_1037 = mux(notSpecial_isZeroOut, UInt<12>("he00"), UInt<12>("h0"))
    node T_1038 = not(T_1037)
    node T_1039 = and(expY, T_1038)
    node T_1043 = mux(pegMinFiniteMagOut, UInt<12>("hc31"), UInt<12>("h0"))
    node T_1044 = not(T_1043)
    node T_1045 = and(T_1039, T_1044)
    node T_1048 = mux(pegMaxFiniteMagOut, UInt<12>("h400"), UInt<12>("h0"))
    node T_1049 = not(T_1048)
    node T_1050 = and(T_1045, T_1049)
    node T_1053 = mux(notNaN_isInfOut, UInt<12>("h200"), UInt<12>("h0"))
    node T_1054 = not(T_1053)
    node T_1055 = and(T_1050, T_1054)
    node T_1058 = mux(pegMinFiniteMagOut, UInt<12>("h3ce"), UInt<12>("h0"))
    node T_1059 = or(T_1055, T_1058)
    node T_1062 = mux(pegMaxFiniteMagOut, UInt<12>("hbff"), UInt<12>("h0"))
    node T_1063 = or(T_1059, T_1062)
    node T_1066 = mux(notNaN_isInfOut, UInt<12>("hc00"), UInt<12>("h0"))
    node T_1067 = or(T_1063, T_1066)
    node T_1070 = mux(isNaNOut, UInt<12>("he00"), UInt<12>("h0"))
    node expOut = or(T_1067, T_1070)
    node T_1071 = and(totalUnderflowY, roundMagUp)
    node T_1072 = or(T_1071, isNaNOut)
    node T_1076 = mux(isNaNOut, UInt<52>("h8000000000000"), UInt<52>("h0"))
    node T_1077 = mux(T_1072, T_1076, fractY)
    node T_1081 = mux(pegMaxFiniteMagOut, UInt<52>("hfffffffffffff"), UInt<52>("h0"))
    node fractOut = or(T_1077, T_1081)
    node T_1082 = cat(signOut, expOut)
    node T_1083 = cat(T_1082, fractOut)
    node T_1085 = cat(underflow, inexact)
    node T_1086 = cat(invalid, UInt<1>("h0"))
    node T_1087 = cat(T_1086, overflow)
    node T_1088 = cat(T_1087, T_1085)
    io_out <= T_1083
    io_exceptionFlags <= T_1088

  module MulAddRecFN_1 :
    input clk : Clock
    input reset : UInt<1>
    input io_op : UInt<2>
    input io_a : UInt<65>
    input io_b : UInt<65>
    input io_c : UInt<65>
    input io_roundingMode : UInt<2>
    output io_out : UInt<65>
    output io_exceptionFlags : UInt<5>
  
    inst mulAddRecFN_preMul of MulAddRecFN_preMul_1
    inst mulAddRecFN_postMul of MulAddRecFN_postMul_1
    node T_7 = mul(mulAddRecFN_preMul.io_mulAddA, mulAddRecFN_preMul.io_mulAddB)
    node T_9 = cat(UInt<1>("h0"), mulAddRecFN_preMul.io_mulAddC)
    node GEN_0 = pad(T_7, 107)
    node T_10 = add(GEN_0, T_9)
    node T_11 = tail(T_10, 1)
    io_out <= mulAddRecFN_postMul.io_out
    io_exceptionFlags <= mulAddRecFN_postMul.io_exceptionFlags
    mulAddRecFN_preMul.io_op <= io_op
    mulAddRecFN_preMul.io_a <= io_a
    mulAddRecFN_preMul.io_b <= io_b
    mulAddRecFN_preMul.io_c <= io_c
    mulAddRecFN_preMul.io_roundingMode <= io_roundingMode
    mulAddRecFN_postMul.io_fromPreMul_highExpA <= mulAddRecFN_preMul.io_toPostMul_highExpA
    mulAddRecFN_postMul.io_fromPreMul_isNaN_isQuietNaNA <= mulAddRecFN_preMul.io_toPostMul_isNaN_isQuietNaNA
    mulAddRecFN_postMul.io_fromPreMul_highExpB <= mulAddRecFN_preMul.io_toPostMul_highExpB
    mulAddRecFN_postMul.io_fromPreMul_isNaN_isQuietNaNB <= mulAddRecFN_preMul.io_toPostMul_isNaN_isQuietNaNB
    mulAddRecFN_postMul.io_fromPreMul_signProd <= mulAddRecFN_preMul.io_toPostMul_signProd
    mulAddRecFN_postMul.io_fromPreMul_isZeroProd <= mulAddRecFN_preMul.io_toPostMul_isZeroProd
    mulAddRecFN_postMul.io_fromPreMul_opSignC <= mulAddRecFN_preMul.io_toPostMul_opSignC
    mulAddRecFN_postMul.io_fromPreMul_highExpC <= mulAddRecFN_preMul.io_toPostMul_highExpC
    mulAddRecFN_postMul.io_fromPreMul_isNaN_isQuietNaNC <= mulAddRecFN_preMul.io_toPostMul_isNaN_isQuietNaNC
    mulAddRecFN_postMul.io_fromPreMul_isCDominant <= mulAddRecFN_preMul.io_toPostMul_isCDominant
    mulAddRecFN_postMul.io_fromPreMul_CAlignDist_0 <= mulAddRecFN_preMul.io_toPostMul_CAlignDist_0
    mulAddRecFN_postMul.io_fromPreMul_CAlignDist <= mulAddRecFN_preMul.io_toPostMul_CAlignDist
    mulAddRecFN_postMul.io_fromPreMul_bit0AlignedNegSigC <= mulAddRecFN_preMul.io_toPostMul_bit0AlignedNegSigC
    mulAddRecFN_postMul.io_fromPreMul_highAlignedNegSigC <= mulAddRecFN_preMul.io_toPostMul_highAlignedNegSigC
    mulAddRecFN_postMul.io_fromPreMul_sExpSum <= mulAddRecFN_preMul.io_toPostMul_sExpSum
    mulAddRecFN_postMul.io_fromPreMul_roundingMode <= mulAddRecFN_preMul.io_toPostMul_roundingMode
    mulAddRecFN_postMul.io_mulAddResult <= T_11

  module FPUFMAPipe_1 :
    input clk : Clock
    input reset : UInt<1>
    input io_in_valid : UInt<1>
    input io_in_bits_cmd : UInt<5>
    input io_in_bits_ldst : UInt<1>
    input io_in_bits_wen : UInt<1>
    input io_in_bits_ren1 : UInt<1>
    input io_in_bits_ren2 : UInt<1>
    input io_in_bits_ren3 : UInt<1>
    input io_in_bits_swap12 : UInt<1>
    input io_in_bits_swap23 : UInt<1>
    input io_in_bits_single : UInt<1>
    input io_in_bits_fromint : UInt<1>
    input io_in_bits_toint : UInt<1>
    input io_in_bits_fastpipe : UInt<1>
    input io_in_bits_fma : UInt<1>
    input io_in_bits_div : UInt<1>
    input io_in_bits_sqrt : UInt<1>
    input io_in_bits_round : UInt<1>
    input io_in_bits_wflags : UInt<1>
    input io_in_bits_rm : UInt<3>
    input io_in_bits_typ : UInt<2>
    input io_in_bits_in1 : UInt<65>
    input io_in_bits_in2 : UInt<65>
    input io_in_bits_in3 : UInt<65>
    output io_out_valid : UInt<1>
    output io_out_bits_data : UInt<65>
    output io_out_bits_exc : UInt<5>
  
    node T_131 = bits(io_in_bits_in1, 64, 64)
    node T_132 = bits(io_in_bits_in2, 64, 64)
    node T_133 = xor(T_131, T_132)
    node GEN_30 = pad(T_133, 65)
    node zero = shlw(GEN_30, 64)
    reg valid : UInt<1>, clk with :
      reset => (UInt<1>("h0"), valid)
    reg in_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), in_cmd)
    reg in_ldst : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ldst)
    reg in_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_wen)
    reg in_ren1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren1)
    reg in_ren2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren2)
    reg in_ren3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_ren3)
    reg in_swap12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_swap12)
    reg in_swap23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_swap23)
    reg in_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_single)
    reg in_fromint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fromint)
    reg in_toint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_toint)
    reg in_fastpipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fastpipe)
    reg in_fma : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_fma)
    reg in_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_div)
    reg in_sqrt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_sqrt)
    reg in_round : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_round)
    reg in_wflags : UInt<1>, clk with :
      reset => (UInt<1>("h0"), in_wflags)
    reg in_rm : UInt<3>, clk with :
      reset => (UInt<1>("h0"), in_rm)
    reg in_typ : UInt<2>, clk with :
      reset => (UInt<1>("h0"), in_typ)
    reg in_in1 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in1)
    reg in_in2 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in2)
    reg in_in3 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), in_in3)
    node T_179 = bits(io_in_bits_cmd, 1, 1)
    node T_180 = or(io_in_bits_ren3, io_in_bits_swap23)
    node T_181 = and(T_179, T_180)
    node T_182 = bits(io_in_bits_cmd, 0, 0)
    node T_183 = cat(T_181, T_182)
    node GEN_0 = mux(io_in_bits_swap23, UInt<65>("h8000000000000000"), io_in_bits_in2)
    node T_186 = eq(T_180, UInt<1>("h0"))
    node GEN_1 = mux(T_186, zero, io_in_bits_in3)
    node GEN_2 = mux(io_in_valid, pad(T_183, 5), in_cmd)
    node GEN_3 = mux(io_in_valid, io_in_bits_ldst, in_ldst)
    node GEN_4 = mux(io_in_valid, io_in_bits_wen, in_wen)
    node GEN_5 = mux(io_in_valid, io_in_bits_ren1, in_ren1)
    node GEN_6 = mux(io_in_valid, io_in_bits_ren2, in_ren2)
    node GEN_7 = mux(io_in_valid, io_in_bits_ren3, in_ren3)
    node GEN_8 = mux(io_in_valid, io_in_bits_swap12, in_swap12)
    node GEN_9 = mux(io_in_valid, io_in_bits_swap23, in_swap23)
    node GEN_10 = mux(io_in_valid, io_in_bits_single, in_single)
    node GEN_11 = mux(io_in_valid, io_in_bits_fromint, in_fromint)
    node GEN_12 = mux(io_in_valid, io_in_bits_toint, in_toint)
    node GEN_13 = mux(io_in_valid, io_in_bits_fastpipe, in_fastpipe)
    node GEN_14 = mux(io_in_valid, io_in_bits_fma, in_fma)
    node GEN_15 = mux(io_in_valid, io_in_bits_div, in_div)
    node GEN_16 = mux(io_in_valid, io_in_bits_sqrt, in_sqrt)
    node GEN_17 = mux(io_in_valid, io_in_bits_round, in_round)
    node GEN_18 = mux(io_in_valid, io_in_bits_wflags, in_wflags)
    node GEN_19 = mux(io_in_valid, io_in_bits_rm, in_rm)
    node GEN_20 = mux(io_in_valid, io_in_bits_typ, in_typ)
    node GEN_21 = mux(io_in_valid, io_in_bits_in1, in_in1)
    node GEN_22 = mux(io_in_valid, GEN_0, in_in2)
    node GEN_23 = mux(io_in_valid, GEN_1, in_in3)
    inst fma of MulAddRecFN_1
    wire res_data : UInt<65>
    wire res_exc : UInt<5>
    node T_193 = cat(UInt<1>("h0"), fma.io_out)
    reg T_196 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_197_data : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_197_data)
    reg T_197_exc : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_197_exc)
    node GEN_24 = mux(valid, res_data, T_197_data)
    node GEN_25 = mux(valid, res_exc, T_197_exc)
    reg T_202 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_203_data : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_203_data)
    reg T_203_exc : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_203_exc)
    node GEN_26 = mux(T_196, T_197_data, T_203_data)
    node GEN_27 = mux(T_196, T_197_exc, T_203_exc)
    reg T_208 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_209_data : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_209_data)
    reg T_209_exc : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_209_exc)
    node GEN_28 = mux(T_202, T_203_data, T_209_data)
    node GEN_29 = mux(T_202, T_203_exc, T_209_exc)
    wire T_220_valid : UInt<1>
    wire T_220_bits_data : UInt<65>
    wire T_220_bits_exc : UInt<5>
    io_out_valid <= T_220_valid
    io_out_bits_data <= T_220_bits_data
    io_out_bits_exc <= T_220_bits_exc
    valid <= io_in_valid
    in_cmd <= GEN_2
    in_ldst <= GEN_3
    in_wen <= GEN_4
    in_ren1 <= GEN_5
    in_ren2 <= GEN_6
    in_ren3 <= GEN_7
    in_swap12 <= GEN_8
    in_swap23 <= GEN_9
    in_single <= GEN_10
    in_fromint <= GEN_11
    in_toint <= GEN_12
    in_fastpipe <= GEN_13
    in_fma <= GEN_14
    in_div <= GEN_15
    in_sqrt <= GEN_16
    in_round <= GEN_17
    in_wflags <= GEN_18
    in_rm <= GEN_19
    in_typ <= GEN_20
    in_in1 <= GEN_21
    in_in2 <= GEN_22
    in_in3 <= GEN_23
    fma.io_op <= bits(in_cmd, 1, 0)
    fma.io_a <= in_in1
    fma.io_b <= in_in2
    fma.io_c <= in_in3
    fma.io_roundingMode <= bits(in_rm, 1, 0)
    res_data <= bits(T_193, 64, 0)
    res_exc <= fma.io_exceptionFlags
    T_196 <= valid
    T_197_data <= GEN_24
    T_197_exc <= GEN_25
    T_202 <= T_196
    T_203_data <= GEN_26
    T_203_exc <= GEN_27
    T_208 <= T_202
    T_209_data <= GEN_28
    T_209_exc <= GEN_29
    T_220_valid <= T_208
    T_220_bits_data <= T_209_data
    T_220_bits_exc <= T_209_exc

  module DivSqrtRecF64_mulAddZ31 :
    input clk : Clock
    input reset : UInt<1>
    output io_inReady_div : UInt<1>
    output io_inReady_sqrt : UInt<1>
    input io_inValid : UInt<1>
    input io_sqrtOp : UInt<1>
    input io_a : UInt<65>
    input io_b : UInt<65>
    input io_roundingMode : UInt<2>
    output io_outValid_div : UInt<1>
    output io_outValid_sqrt : UInt<1>
    output io_out : UInt<65>
    output io_exceptionFlags : UInt<5>
    output io_usingMulAdd : UInt<4>
    output io_latchMulAddA_0 : UInt<1>
    output io_mulAddA_0 : UInt<54>
    output io_latchMulAddB_0 : UInt<1>
    output io_mulAddB_0 : UInt<54>
    output io_mulAddC_2 : UInt<105>
    input io_mulAddResult_3 : UInt<105>
  
    reg valid_PA : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg sqrtOp_PA : UInt<1>, clk with :
      reset => (UInt<1>("h0"), sqrtOp_PA)
    reg sign_PA : UInt<1>, clk with :
      reset => (UInt<1>("h0"), sign_PA)
    reg specialCodeB_PA : UInt<3>, clk with :
      reset => (UInt<1>("h0"), specialCodeB_PA)
    reg fractB_51_PA : UInt<1>, clk with :
      reset => (UInt<1>("h0"), fractB_51_PA)
    reg roundingMode_PA : UInt<2>, clk with :
      reset => (UInt<1>("h0"), roundingMode_PA)
    reg specialCodeA_PA : UInt<3>, clk with :
      reset => (UInt<1>("h0"), specialCodeA_PA)
    reg fractA_51_PA : UInt<1>, clk with :
      reset => (UInt<1>("h0"), fractA_51_PA)
    reg exp_PA : UInt<14>, clk with :
      reset => (UInt<1>("h0"), exp_PA)
    reg fractB_other_PA : UInt<51>, clk with :
      reset => (UInt<1>("h0"), fractB_other_PA)
    reg fractA_other_PA : UInt<51>, clk with :
      reset => (UInt<1>("h0"), fractA_other_PA)
    reg valid_PB : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg sqrtOp_PB : UInt<1>, clk with :
      reset => (UInt<1>("h0"), sqrtOp_PB)
    reg sign_PB : UInt<1>, clk with :
      reset => (UInt<1>("h0"), sign_PB)
    reg specialCodeA_PB : UInt<3>, clk with :
      reset => (UInt<1>("h0"), specialCodeA_PB)
    reg fractA_51_PB : UInt<1>, clk with :
      reset => (UInt<1>("h0"), fractA_51_PB)
    reg specialCodeB_PB : UInt<3>, clk with :
      reset => (UInt<1>("h0"), specialCodeB_PB)
    reg fractB_51_PB : UInt<1>, clk with :
      reset => (UInt<1>("h0"), fractB_51_PB)
    reg roundingMode_PB : UInt<2>, clk with :
      reset => (UInt<1>("h0"), roundingMode_PB)
    reg exp_PB : UInt<14>, clk with :
      reset => (UInt<1>("h0"), exp_PB)
    reg fractA_0_PB : UInt<1>, clk with :
      reset => (UInt<1>("h0"), fractA_0_PB)
    reg fractB_other_PB : UInt<51>, clk with :
      reset => (UInt<1>("h0"), fractB_other_PB)
    reg valid_PC : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg sqrtOp_PC : UInt<1>, clk with :
      reset => (UInt<1>("h0"), sqrtOp_PC)
    reg sign_PC : UInt<1>, clk with :
      reset => (UInt<1>("h0"), sign_PC)
    reg specialCodeA_PC : UInt<3>, clk with :
      reset => (UInt<1>("h0"), specialCodeA_PC)
    reg fractA_51_PC : UInt<1>, clk with :
      reset => (UInt<1>("h0"), fractA_51_PC)
    reg specialCodeB_PC : UInt<3>, clk with :
      reset => (UInt<1>("h0"), specialCodeB_PC)
    reg fractB_51_PC : UInt<1>, clk with :
      reset => (UInt<1>("h0"), fractB_51_PC)
    reg roundingMode_PC : UInt<2>, clk with :
      reset => (UInt<1>("h0"), roundingMode_PC)
    reg exp_PC : UInt<14>, clk with :
      reset => (UInt<1>("h0"), exp_PC)
    reg fractA_0_PC : UInt<1>, clk with :
      reset => (UInt<1>("h0"), fractA_0_PC)
    reg fractB_other_PC : UInt<51>, clk with :
      reset => (UInt<1>("h0"), fractB_other_PC)
    reg cycleNum_A : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg cycleNum_B : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg cycleNum_C : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg cycleNum_E : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg fractR0_A : UInt<9>, clk with :
      reset => (UInt<1>("h0"), fractR0_A)
    reg hiSqrR0_A_sqrt : UInt<10>, clk with :
      reset => (UInt<1>("h0"), hiSqrR0_A_sqrt)
    reg partNegSigma0_A : UInt<21>, clk with :
      reset => (UInt<1>("h0"), partNegSigma0_A)
    reg nextMulAdd9A_A : UInt<9>, clk with :
      reset => (UInt<1>("h0"), nextMulAdd9A_A)
    reg nextMulAdd9B_A : UInt<9>, clk with :
      reset => (UInt<1>("h0"), nextMulAdd9B_A)
    reg ER1_B_sqrt : UInt<17>, clk with :
      reset => (UInt<1>("h0"), ER1_B_sqrt)
    reg ESqrR1_B_sqrt : UInt<32>, clk with :
      reset => (UInt<1>("h0"), ESqrR1_B_sqrt)
    reg sigX1_B : UInt<58>, clk with :
      reset => (UInt<1>("h0"), sigX1_B)
    reg sqrSigma1_C : UInt<33>, clk with :
      reset => (UInt<1>("h0"), sqrSigma1_C)
    reg sigXN_C : UInt<58>, clk with :
      reset => (UInt<1>("h0"), sigXN_C)
    reg u_C_sqrt : UInt<31>, clk with :
      reset => (UInt<1>("h0"), u_C_sqrt)
    reg E_E_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), E_E_div)
    reg sigT_E : UInt<53>, clk with :
      reset => (UInt<1>("h0"), sigT_E)
    reg extraT_E : UInt<1>, clk with :
      reset => (UInt<1>("h0"), extraT_E)
    reg isNegRemT_E : UInt<1>, clk with :
      reset => (UInt<1>("h0"), isNegRemT_E)
    reg trueEqX_E1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), trueEqX_E1)
    wire ready_PA : UInt<1>
    wire ready_PB : UInt<1>
    wire ready_PC : UInt<1>
    wire leaving_PA : UInt<1>
    wire leaving_PB : UInt<1>
    wire leaving_PC : UInt<1>
    wire cyc_B10_sqrt : UInt<1>
    wire cyc_B9_sqrt : UInt<1>
    wire cyc_B8_sqrt : UInt<1>
    wire cyc_B7_sqrt : UInt<1>
    wire cyc_B6 : UInt<1>
    wire cyc_B5 : UInt<1>
    wire cyc_B4 : UInt<1>
    wire cyc_B3 : UInt<1>
    wire cyc_B2 : UInt<1>
    wire cyc_B1 : UInt<1>
    wire cyc_B6_div : UInt<1>
    wire cyc_B5_div : UInt<1>
    wire cyc_B4_div : UInt<1>
    wire cyc_B3_div : UInt<1>
    wire cyc_B2_div : UInt<1>
    wire cyc_B1_div : UInt<1>
    wire cyc_B6_sqrt : UInt<1>
    wire cyc_B5_sqrt : UInt<1>
    wire cyc_B4_sqrt : UInt<1>
    wire cyc_B3_sqrt : UInt<1>
    wire cyc_B2_sqrt : UInt<1>
    wire cyc_B1_sqrt : UInt<1>
    wire cyc_C5 : UInt<1>
    wire cyc_C4 : UInt<1>
    wire valid_normalCase_leaving_PB : UInt<1>
    wire cyc_C2 : UInt<1>
    wire cyc_C1 : UInt<1>
    wire cyc_E4 : UInt<1>
    wire cyc_E3 : UInt<1>
    wire cyc_E2 : UInt<1>
    wire cyc_E1 : UInt<1>
    wire zSigma1_B4 : UInt<46>
    wire sigXNU_B3_CX : UInt<58>
    wire zComplSigT_C1_sqrt : UInt<54>
    wire zComplSigT_C1 : UInt<54>
    node T_113 = eq(cyc_B7_sqrt, UInt<1>("h0"))
    node T_114 = and(ready_PA, T_113)
    node T_116 = eq(cyc_B6_sqrt, UInt<1>("h0"))
    node T_117 = and(T_114, T_116)
    node T_119 = eq(cyc_B5_sqrt, UInt<1>("h0"))
    node T_120 = and(T_117, T_119)
    node T_122 = eq(cyc_B4_sqrt, UInt<1>("h0"))
    node T_123 = and(T_120, T_122)
    node T_125 = eq(cyc_B3, UInt<1>("h0"))
    node T_126 = and(T_123, T_125)
    node T_128 = eq(cyc_B2, UInt<1>("h0"))
    node T_129 = and(T_126, T_128)
    node T_131 = eq(cyc_B1_sqrt, UInt<1>("h0"))
    node T_132 = and(T_129, T_131)
    node T_134 = eq(cyc_C5, UInt<1>("h0"))
    node T_135 = and(T_132, T_134)
    node T_137 = eq(cyc_C4, UInt<1>("h0"))
    node T_138 = and(T_135, T_137)
    node T_141 = and(ready_PA, T_116)
    node T_144 = and(T_141, T_119)
    node T_147 = and(T_144, T_122)
    node T_149 = eq(cyc_B2_div, UInt<1>("h0"))
    node T_150 = and(T_147, T_149)
    node T_153 = and(T_150, T_131)
    node T_154 = and(io_inReady_div, io_inValid)
    node T_156 = eq(io_sqrtOp, UInt<1>("h0"))
    node cyc_S_div = and(T_154, T_156)
    node T_157 = and(io_inReady_sqrt, io_inValid)
    node cyc_S_sqrt = and(T_157, io_sqrtOp)
    node cyc_S = or(cyc_S_div, cyc_S_sqrt)
    node signA_S = bits(io_a, 64, 64)
    node expA_S = bits(io_a, 63, 52)
    node fractA_S = bits(io_a, 51, 0)
    node specialCodeA_S = bits(expA_S, 11, 9)
    node isZeroA_S = eq(specialCodeA_S, UInt<3>("h0"))
    node T_159 = bits(specialCodeA_S, 2, 1)
    node isSpecialA_S = eq(T_159, UInt<2>("h3"))
    node signB_S = bits(io_b, 64, 64)
    node expB_S = bits(io_b, 63, 52)
    node fractB_S = bits(io_b, 51, 0)
    node specialCodeB_S = bits(expB_S, 11, 9)
    node isZeroB_S = eq(specialCodeB_S, UInt<3>("h0"))
    node T_162 = bits(specialCodeB_S, 2, 1)
    node isSpecialB_S = eq(T_162, UInt<2>("h3"))
    node T_164 = xor(signA_S, signB_S)
    node sign_S = mux(io_sqrtOp, signB_S, T_164)
    node T_166 = eq(isSpecialA_S, UInt<1>("h0"))
    node T_168 = eq(isSpecialB_S, UInt<1>("h0"))
    node T_169 = and(T_166, T_168)
    node T_171 = eq(isZeroA_S, UInt<1>("h0"))
    node T_172 = and(T_169, T_171)
    node T_174 = eq(isZeroB_S, UInt<1>("h0"))
    node normalCase_S_div = and(T_172, T_174)
    node T_179 = and(T_168, T_174)
    node T_181 = eq(signB_S, UInt<1>("h0"))
    node normalCase_S_sqrt = and(T_179, T_181)
    node normalCase_S = mux(io_sqrtOp, normalCase_S_sqrt, normalCase_S_div)
    node entering_PA_normalCase_div = and(cyc_S_div, normalCase_S_div)
    node entering_PA_normalCase_sqrt = and(cyc_S_sqrt, normalCase_S_sqrt)
    node entering_PA_normalCase = or(entering_PA_normalCase_div, entering_PA_normalCase_sqrt)
    node T_183 = eq(ready_PB, UInt<1>("h0"))
    node T_184 = or(valid_PA, T_183)
    node T_185 = and(cyc_S, T_184)
    node entering_PA = or(entering_PA_normalCase, T_185)
    node T_187 = eq(normalCase_S, UInt<1>("h0"))
    node T_188 = and(cyc_S, T_187)
    node T_190 = eq(valid_PA, UInt<1>("h0"))
    node T_191 = and(T_188, T_190)
    node T_193 = eq(valid_PB, UInt<1>("h0"))
    node T_195 = eq(ready_PC, UInt<1>("h0"))
    node T_196 = and(T_193, T_195)
    node T_197 = or(leaving_PB, T_196)
    node entering_PB_S = and(T_191, T_197)
    node T_206 = and(T_191, T_193)
    node entering_PC_S = and(T_206, ready_PC)
    node T_207 = or(entering_PA, leaving_PA)
    node GEN_0 = mux(T_207, entering_PA, valid_PA)
    node T_208 = bits(fractB_S, 51, 51)
    node GEN_1 = mux(entering_PA, io_sqrtOp, sqrtOp_PA)
    node GEN_2 = mux(entering_PA, sign_S, sign_PA)
    node GEN_3 = mux(entering_PA, specialCodeB_S, specialCodeB_PA)
    node GEN_4 = mux(entering_PA, T_208, fractB_51_PA)
    node GEN_5 = mux(entering_PA, io_roundingMode, roundingMode_PA)
    node T_211 = and(entering_PA, T_156)
    node T_212 = bits(fractA_S, 51, 51)
    node GEN_6 = mux(T_211, specialCodeA_S, specialCodeA_PA)
    node GEN_7 = mux(T_211, T_212, fractA_51_PA)
    node T_213 = bits(expB_S, 11, 11)
    node T_217 = mux(T_213, UInt<3>("h7"), UInt<3>("h0"))
    node T_218 = bits(expB_S, 10, 0)
    node T_219 = not(T_218)
    node T_220 = cat(T_217, T_219)
    node GEN_53 = pad(expA_S, 14)
    node T_221 = add(GEN_53, T_220)
    node T_222 = tail(T_221, 1)
    node T_223 = mux(io_sqrtOp, pad(expB_S, 14), T_222)
    node T_224 = bits(fractB_S, 50, 0)
    node GEN_8 = mux(entering_PA_normalCase, T_223, exp_PA)
    node GEN_9 = mux(entering_PA_normalCase, T_224, fractB_other_PA)
    node T_225 = bits(fractA_S, 50, 0)
    node GEN_10 = mux(entering_PA_normalCase_div, T_225, fractA_other_PA)
    node isZeroA_PA = eq(specialCodeA_PA, UInt<3>("h0"))
    node T_227 = bits(specialCodeA_PA, 2, 1)
    node isSpecialA_PA = eq(T_227, UInt<2>("h3"))
    node T_230 = cat(UInt<1>("h1"), fractA_51_PA)
    node sigA_PA = cat(T_230, fractA_other_PA)
    node isZeroB_PA = eq(specialCodeB_PA, UInt<3>("h0"))
    node T_232 = bits(specialCodeB_PA, 2, 1)
    node isSpecialB_PA = eq(T_232, UInt<2>("h3"))
    node T_235 = cat(UInt<1>("h1"), fractB_51_PA)
    node sigB_PA = cat(T_235, fractB_other_PA)
    node T_237 = eq(isSpecialB_PA, UInt<1>("h0"))
    node T_239 = eq(isZeroB_PA, UInt<1>("h0"))
    node T_240 = and(T_237, T_239)
    node T_242 = eq(sign_PA, UInt<1>("h0"))
    node T_243 = and(T_240, T_242)
    node T_245 = eq(isSpecialA_PA, UInt<1>("h0"))
    node T_248 = and(T_245, T_237)
    node T_250 = eq(isZeroA_PA, UInt<1>("h0"))
    node T_251 = and(T_248, T_250)
    node T_254 = and(T_251, T_239)
    node normalCase_PA = mux(sqrtOp_PA, T_243, T_254)
    node valid_normalCase_leaving_PA = or(cyc_B4_div, cyc_B7_sqrt)
    node valid_leaving_PA = mux(normalCase_PA, valid_normalCase_leaving_PA, ready_PB)
    node T_255 = and(valid_PA, valid_leaving_PA)
    node T_258 = or(T_190, valid_leaving_PA)
    node T_259 = and(valid_PA, normalCase_PA)
    node entering_PB_normalCase = and(T_259, valid_normalCase_leaving_PA)
    node entering_PB = or(entering_PB_S, leaving_PA)
    node T_260 = or(entering_PB, leaving_PB)
    node GEN_11 = mux(T_260, entering_PB, valid_PB)
    node T_261 = mux(valid_PA, sqrtOp_PA, io_sqrtOp)
    node T_262 = mux(valid_PA, sign_PA, sign_S)
    node T_263 = mux(valid_PA, specialCodeA_PA, specialCodeA_S)
    node T_265 = mux(valid_PA, fractA_51_PA, T_212)
    node T_266 = mux(valid_PA, specialCodeB_PA, specialCodeB_S)
    node T_268 = mux(valid_PA, fractB_51_PA, T_208)
    node T_269 = mux(valid_PA, roundingMode_PA, io_roundingMode)
    node GEN_12 = mux(entering_PB, T_261, sqrtOp_PB)
    node GEN_13 = mux(entering_PB, T_262, sign_PB)
    node GEN_14 = mux(entering_PB, T_263, specialCodeA_PB)
    node GEN_15 = mux(entering_PB, T_265, fractA_51_PB)
    node GEN_16 = mux(entering_PB, T_266, specialCodeB_PB)
    node GEN_17 = mux(entering_PB, T_268, fractB_51_PB)
    node GEN_18 = mux(entering_PB, T_269, roundingMode_PB)
    node T_270 = bits(fractA_other_PA, 0, 0)
    node GEN_19 = mux(entering_PB_normalCase, exp_PA, exp_PB)
    node GEN_20 = mux(entering_PB_normalCase, T_270, fractA_0_PB)
    node GEN_21 = mux(entering_PB_normalCase, fractB_other_PA, fractB_other_PB)
    node isZeroA_PB = eq(specialCodeA_PB, UInt<3>("h0"))
    node T_272 = bits(specialCodeA_PB, 2, 1)
    node isSpecialA_PB = eq(T_272, UInt<2>("h3"))
    node isZeroB_PB = eq(specialCodeB_PB, UInt<3>("h0"))
    node T_275 = bits(specialCodeB_PB, 2, 1)
    node isSpecialB_PB = eq(T_275, UInt<2>("h3"))
    node T_278 = eq(isSpecialB_PB, UInt<1>("h0"))
    node T_280 = eq(isZeroB_PB, UInt<1>("h0"))
    node T_281 = and(T_278, T_280)
    node T_283 = eq(sign_PB, UInt<1>("h0"))
    node T_284 = and(T_281, T_283)
    node T_286 = eq(isSpecialA_PB, UInt<1>("h0"))
    node T_289 = and(T_286, T_278)
    node T_291 = eq(isZeroA_PB, UInt<1>("h0"))
    node T_292 = and(T_289, T_291)
    node T_295 = and(T_292, T_280)
    node normalCase_PB = mux(sqrtOp_PB, T_284, T_295)
    node valid_leaving_PB = mux(normalCase_PB, valid_normalCase_leaving_PB, ready_PC)
    node T_296 = and(valid_PB, valid_leaving_PB)
    node T_299 = or(T_193, valid_leaving_PB)
    node T_300 = and(valid_PB, normalCase_PB)
    node entering_PC_normalCase = and(T_300, valid_normalCase_leaving_PB)
    node entering_PC = or(entering_PC_S, leaving_PB)
    node T_301 = or(entering_PC, leaving_PC)
    node GEN_22 = mux(T_301, entering_PC, valid_PC)
    node T_302 = mux(valid_PB, sqrtOp_PB, io_sqrtOp)
    node T_303 = mux(valid_PB, sign_PB, sign_S)
    node T_304 = mux(valid_PB, specialCodeA_PB, specialCodeA_S)
    node T_306 = mux(valid_PB, fractA_51_PB, T_212)
    node T_307 = mux(valid_PB, specialCodeB_PB, specialCodeB_S)
    node T_309 = mux(valid_PB, fractB_51_PB, T_208)
    node T_310 = mux(valid_PB, roundingMode_PB, io_roundingMode)
    node GEN_23 = mux(entering_PC, T_302, sqrtOp_PC)
    node GEN_24 = mux(entering_PC, T_303, sign_PC)
    node GEN_25 = mux(entering_PC, T_304, specialCodeA_PC)
    node GEN_26 = mux(entering_PC, T_306, fractA_51_PC)
    node GEN_27 = mux(entering_PC, T_307, specialCodeB_PC)
    node GEN_28 = mux(entering_PC, T_309, fractB_51_PC)
    node GEN_29 = mux(entering_PC, T_310, roundingMode_PC)
    node GEN_30 = mux(entering_PC_normalCase, exp_PB, exp_PC)
    node GEN_31 = mux(entering_PC_normalCase, fractA_0_PB, fractA_0_PC)
    node GEN_32 = mux(entering_PC_normalCase, fractB_other_PB, fractB_other_PC)
    node isZeroA_PC = eq(specialCodeA_PC, UInt<3>("h0"))
    node T_312 = bits(specialCodeA_PC, 2, 1)
    node isSpecialA_PC = eq(T_312, UInt<2>("h3"))
    node T_314 = bits(specialCodeA_PC, 0, 0)
    node T_316 = eq(T_314, UInt<1>("h0"))
    node isInfA_PC = and(isSpecialA_PC, T_316)
    node isNaNA_PC = and(isSpecialA_PC, T_314)
    node T_319 = eq(fractA_51_PC, UInt<1>("h0"))
    node isSigNaNA_PC = and(isNaNA_PC, T_319)
    node isZeroB_PC = eq(specialCodeB_PC, UInt<3>("h0"))
    node T_321 = bits(specialCodeB_PC, 2, 1)
    node isSpecialB_PC = eq(T_321, UInt<2>("h3"))
    node T_323 = bits(specialCodeB_PC, 0, 0)
    node T_325 = eq(T_323, UInt<1>("h0"))
    node isInfB_PC = and(isSpecialB_PC, T_325)
    node isNaNB_PC = and(isSpecialB_PC, T_323)
    node T_328 = eq(fractB_51_PC, UInt<1>("h0"))
    node isSigNaNB_PC = and(isNaNB_PC, T_328)
    node T_330 = cat(UInt<1>("h1"), fractB_51_PC)
    node sigB_PC = cat(T_330, fractB_other_PC)
    node T_332 = eq(isSpecialB_PC, UInt<1>("h0"))
    node T_334 = eq(isZeroB_PC, UInt<1>("h0"))
    node T_335 = and(T_332, T_334)
    node T_337 = eq(sign_PC, UInt<1>("h0"))
    node T_338 = and(T_335, T_337)
    node T_340 = eq(isSpecialA_PC, UInt<1>("h0"))
    node T_343 = and(T_340, T_332)
    node T_345 = eq(isZeroA_PC, UInt<1>("h0"))
    node T_346 = and(T_343, T_345)
    node T_349 = and(T_346, T_334)
    node normalCase_PC = mux(sqrtOp_PC, T_338, T_349)
    node T_351 = add(exp_PC, UInt<14>("h2"))
    node expP2_PC = tail(T_351, 1)
    node T_352 = bits(exp_PC, 0, 0)
    node T_353 = bits(expP2_PC, 13, 1)
    node T_355 = cat(T_353, UInt<1>("h0"))
    node T_356 = bits(exp_PC, 13, 1)
    node T_358 = cat(T_356, UInt<1>("h1"))
    node expP1_PC = mux(T_352, T_355, T_358)
    node roundingMode_near_even_PC = eq(roundingMode_PC, UInt<2>("h0"))
    node roundingMode_min_PC = eq(roundingMode_PC, UInt<2>("h2"))
    node roundingMode_max_PC = eq(roundingMode_PC, UInt<2>("h3"))
    node roundMagUp_PC = mux(sign_PC, roundingMode_min_PC, roundingMode_max_PC)
    node overflowY_roundMagUp_PC = or(roundingMode_near_even_PC, roundMagUp_PC)
    node T_360 = eq(roundMagUp_PC, UInt<1>("h0"))
    node T_362 = eq(roundingMode_near_even_PC, UInt<1>("h0"))
    node roundMagDown_PC = and(T_360, T_362)
    node T_364 = eq(normalCase_PC, UInt<1>("h0"))
    node valid_leaving_PC = or(T_364, cyc_E1)
    node T_365 = and(valid_PC, valid_leaving_PC)
    node T_367 = eq(valid_PC, UInt<1>("h0"))
    node T_368 = or(T_367, valid_leaving_PC)
    node T_370 = eq(sqrtOp_PC, UInt<1>("h0"))
    node T_371 = and(leaving_PC, T_370)
    node T_372 = and(leaving_PC, sqrtOp_PC)
    node T_374 = neq(cycleNum_A, UInt<3>("h0"))
    node T_375 = or(entering_PA_normalCase, T_374)
    node T_378 = mux(entering_PA_normalCase_div, UInt<2>("h3"), UInt<2>("h0"))
    node T_381 = mux(entering_PA_normalCase_sqrt, UInt<3>("h6"), UInt<3>("h0"))
    node GEN_54 = pad(T_378, 3)
    node T_382 = or(GEN_54, T_381)
    node T_384 = eq(entering_PA_normalCase, UInt<1>("h0"))
    node T_386 = sub(cycleNum_A, UInt<3>("h1"))
    node T_387 = tail(T_386, 1)
    node T_389 = mux(T_384, T_387, UInt<3>("h0"))
    node T_390 = or(T_382, T_389)
    node GEN_33 = mux(T_375, T_390, cycleNum_A)
    node cyc_A6_sqrt = eq(cycleNum_A, UInt<3>("h6"))
    node cyc_A5_sqrt = eq(cycleNum_A, UInt<3>("h5"))
    node cyc_A4_sqrt = eq(cycleNum_A, UInt<3>("h4"))
    node cyc_A4 = or(cyc_A4_sqrt, entering_PA_normalCase_div)
    node cyc_A3 = eq(cycleNum_A, UInt<3>("h3"))
    node cyc_A2 = eq(cycleNum_A, UInt<3>("h2"))
    node cyc_A1 = eq(cycleNum_A, UInt<3>("h1"))
    node T_398 = eq(sqrtOp_PA, UInt<1>("h0"))
    node cyc_A3_div = and(cyc_A3, T_398)
    node cyc_A2_div = and(cyc_A2, T_398)
    node cyc_A1_div = and(cyc_A1, T_398)
    node cyc_A3_sqrt = and(cyc_A3, sqrtOp_PA)
    node cyc_A1_sqrt = and(cyc_A1, sqrtOp_PA)
    node T_404 = neq(cycleNum_B, UInt<4>("h0"))
    node T_405 = or(cyc_A1, T_404)
    node T_408 = mux(sqrtOp_PA, UInt<4>("ha"), UInt<4>("h6"))
    node T_410 = sub(cycleNum_B, UInt<4>("h1"))
    node T_411 = tail(T_410, 1)
    node T_412 = mux(cyc_A1, T_408, T_411)
    node GEN_34 = mux(T_405, T_412, cycleNum_B)
    node T_414 = eq(cycleNum_B, UInt<4>("ha"))
    node T_416 = eq(cycleNum_B, UInt<4>("h9"))
    node T_418 = eq(cycleNum_B, UInt<4>("h8"))
    node T_420 = eq(cycleNum_B, UInt<4>("h7"))
    node T_422 = eq(cycleNum_B, UInt<4>("h6"))
    node T_424 = eq(cycleNum_B, UInt<4>("h5"))
    node T_426 = eq(cycleNum_B, UInt<4>("h4"))
    node T_428 = eq(cycleNum_B, UInt<4>("h3"))
    node T_430 = eq(cycleNum_B, UInt<4>("h2"))
    node T_432 = eq(cycleNum_B, UInt<4>("h1"))
    node T_433 = and(cyc_B6, valid_PA)
    node T_436 = and(T_433, T_398)
    node T_437 = and(cyc_B5, valid_PA)
    node T_440 = and(T_437, T_398)
    node T_441 = and(cyc_B4, valid_PA)
    node T_444 = and(T_441, T_398)
    node T_446 = eq(sqrtOp_PB, UInt<1>("h0"))
    node T_447 = and(cyc_B3, T_446)
    node T_450 = and(cyc_B2, T_446)
    node T_453 = and(cyc_B1, T_446)
    node T_454 = and(cyc_B6, valid_PB)
    node T_455 = and(T_454, sqrtOp_PB)
    node T_456 = and(cyc_B5, valid_PB)
    node T_457 = and(T_456, sqrtOp_PB)
    node T_458 = and(cyc_B4, valid_PB)
    node T_459 = and(T_458, sqrtOp_PB)
    node T_460 = and(cyc_B3, sqrtOp_PB)
    node T_461 = and(cyc_B2, sqrtOp_PB)
    node T_462 = and(cyc_B1, sqrtOp_PB)
    node T_464 = neq(cycleNum_C, UInt<3>("h0"))
    node T_465 = or(cyc_B1, T_464)
    node T_468 = mux(sqrtOp_PB, UInt<3>("h6"), UInt<3>("h5"))
    node T_470 = sub(cycleNum_C, UInt<3>("h1"))
    node T_471 = tail(T_470, 1)
    node T_472 = mux(cyc_B1, T_468, T_471)
    node GEN_35 = mux(T_465, T_472, cycleNum_C)
    node cyc_C6_sqrt = eq(cycleNum_C, UInt<3>("h6"))
    node T_475 = eq(cycleNum_C, UInt<3>("h5"))
    node T_477 = eq(cycleNum_C, UInt<3>("h4"))
    node T_479 = eq(cycleNum_C, UInt<3>("h3"))
    node T_481 = eq(cycleNum_C, UInt<3>("h2"))
    node T_483 = eq(cycleNum_C, UInt<3>("h1"))
    node cyc_C5_div = and(cyc_C5, T_446)
    node cyc_C4_div = and(cyc_C4, T_446)
    node cyc_C1_div = and(cyc_C1, T_370)
    node cyc_C5_sqrt = and(cyc_C5, sqrtOp_PB)
    node cyc_C4_sqrt = and(cyc_C4, sqrtOp_PB)
    node cyc_C3_sqrt = and(valid_normalCase_leaving_PB, sqrtOp_PB)
    node cyc_C1_sqrt = and(cyc_C1, sqrtOp_PC)
    node T_495 = neq(cycleNum_E, UInt<3>("h0"))
    node T_496 = or(cyc_C1, T_495)
    node T_499 = sub(cycleNum_E, UInt<3>("h1"))
    node T_500 = tail(T_499, 1)
    node T_501 = mux(cyc_C1, UInt<3>("h4"), T_500)
    node GEN_36 = mux(T_496, T_501, cycleNum_E)
    node T_503 = eq(cycleNum_E, UInt<3>("h4"))
    node T_505 = eq(cycleNum_E, UInt<3>("h3"))
    node T_507 = eq(cycleNum_E, UInt<3>("h2"))
    node T_509 = eq(cycleNum_E, UInt<3>("h1"))
    node cyc_E3_div = and(cyc_E3, T_370)
    node cyc_E3_sqrt = and(cyc_E3, sqrtOp_PC)
    node zFractB_A4_div = mux(entering_PA_normalCase_div, fractB_S, UInt<52>("h0"))
    node T_519 = bits(fractB_S, 51, 49)
    node T_521 = eq(T_519, UInt<3>("h0"))
    node zLinPiece_0_A4_div = and(entering_PA_normalCase_div, T_521)
    node T_524 = eq(T_519, UInt<3>("h1"))
    node zLinPiece_1_A4_div = and(entering_PA_normalCase_div, T_524)
    node T_527 = eq(T_519, UInt<3>("h2"))
    node zLinPiece_2_A4_div = and(entering_PA_normalCase_div, T_527)
    node T_530 = eq(T_519, UInt<3>("h3"))
    node zLinPiece_3_A4_div = and(entering_PA_normalCase_div, T_530)
    node T_533 = eq(T_519, UInt<3>("h4"))
    node zLinPiece_4_A4_div = and(entering_PA_normalCase_div, T_533)
    node T_536 = eq(T_519, UInt<3>("h5"))
    node zLinPiece_5_A4_div = and(entering_PA_normalCase_div, T_536)
    node T_539 = eq(T_519, UInt<3>("h6"))
    node zLinPiece_6_A4_div = and(entering_PA_normalCase_div, T_539)
    node T_542 = eq(T_519, UInt<3>("h7"))
    node zLinPiece_7_A4_div = and(entering_PA_normalCase_div, T_542)
    node T_545 = mux(zLinPiece_0_A4_div, UInt<9>("h1c7"), UInt<9>("h0"))
    node T_548 = mux(zLinPiece_1_A4_div, UInt<9>("h16c"), UInt<9>("h0"))
    node T_549 = or(T_545, T_548)
    node T_552 = mux(zLinPiece_2_A4_div, UInt<9>("h12a"), UInt<9>("h0"))
    node T_553 = or(T_549, T_552)
    node T_556 = mux(zLinPiece_3_A4_div, UInt<9>("hf8"), UInt<9>("h0"))
    node T_557 = or(T_553, T_556)
    node T_560 = mux(zLinPiece_4_A4_div, UInt<9>("hd2"), UInt<9>("h0"))
    node T_561 = or(T_557, T_560)
    node T_564 = mux(zLinPiece_5_A4_div, UInt<9>("hb4"), UInt<9>("h0"))
    node T_565 = or(T_561, T_564)
    node T_568 = mux(zLinPiece_6_A4_div, UInt<9>("h9c"), UInt<9>("h0"))
    node T_569 = or(T_565, T_568)
    node T_572 = mux(zLinPiece_7_A4_div, UInt<9>("h89"), UInt<9>("h0"))
    node zK1_A4_div = or(T_569, T_572)
    node T_576 = mux(zLinPiece_0_A4_div, UInt<12>("h1c"), UInt<12>("h0"))
    node T_580 = mux(zLinPiece_1_A4_div, UInt<12>("h3a2"), UInt<12>("h0"))
    node T_581 = or(T_576, T_580)
    node T_585 = mux(zLinPiece_2_A4_div, UInt<12>("h675"), UInt<12>("h0"))
    node T_586 = or(T_581, T_585)
    node T_590 = mux(zLinPiece_3_A4_div, UInt<12>("h8c6"), UInt<12>("h0"))
    node T_591 = or(T_586, T_590)
    node T_595 = mux(zLinPiece_4_A4_div, UInt<12>("hab4"), UInt<12>("h0"))
    node T_596 = or(T_591, T_595)
    node T_600 = mux(zLinPiece_5_A4_div, UInt<12>("hc56"), UInt<12>("h0"))
    node T_601 = or(T_596, T_600)
    node T_605 = mux(zLinPiece_6_A4_div, UInt<12>("hdbd"), UInt<12>("h0"))
    node T_606 = or(T_601, T_605)
    node T_610 = mux(zLinPiece_7_A4_div, UInt<12>("hef4"), UInt<12>("h0"))
    node zComplFractK0_A4_div = or(T_606, T_610)
    node zFractB_A7_sqrt = mux(entering_PA_normalCase_sqrt, fractB_S, UInt<52>("h0"))
    node T_612 = bits(expB_S, 0, 0)
    node T_614 = eq(T_612, UInt<1>("h0"))
    node T_615 = and(entering_PA_normalCase_sqrt, T_614)
    node T_618 = eq(T_208, UInt<1>("h0"))
    node zQuadPiece_0_A7_sqrt = and(T_615, T_618)
    node zQuadPiece_1_A7_sqrt = and(T_615, T_208)
    node T_625 = and(entering_PA_normalCase_sqrt, T_612)
    node zQuadPiece_2_A7_sqrt = and(T_625, T_618)
    node zQuadPiece_3_A7_sqrt = and(T_625, T_208)
    node T_634 = mux(zQuadPiece_0_A7_sqrt, UInt<9>("h1c8"), UInt<9>("h0"))
    node T_637 = mux(zQuadPiece_1_A7_sqrt, UInt<9>("hc1"), UInt<9>("h0"))
    node T_638 = or(T_634, T_637)
    node T_641 = mux(zQuadPiece_2_A7_sqrt, UInt<9>("h143"), UInt<9>("h0"))
    node T_642 = or(T_638, T_641)
    node T_645 = mux(zQuadPiece_3_A7_sqrt, UInt<9>("h89"), UInt<9>("h0"))
    node zK2_A7_sqrt = or(T_642, T_645)
    node T_649 = mux(zQuadPiece_0_A7_sqrt, UInt<10>("h2f"), UInt<10>("h0"))
    node T_653 = mux(zQuadPiece_1_A7_sqrt, UInt<10>("h1df"), UInt<10>("h0"))
    node T_654 = or(T_649, T_653)
    node T_658 = mux(zQuadPiece_2_A7_sqrt, UInt<10>("h14d"), UInt<10>("h0"))
    node T_659 = or(T_654, T_658)
    node T_663 = mux(zQuadPiece_3_A7_sqrt, UInt<10>("h27e"), UInt<10>("h0"))
    node zComplK1_A7_sqrt = or(T_659, T_663)
    node T_664 = bits(exp_PA, 0, 0)
    node T_666 = eq(T_664, UInt<1>("h0"))
    node T_667 = and(cyc_A6_sqrt, T_666)
    node T_668 = bits(sigB_PA, 51, 51)
    node T_670 = eq(T_668, UInt<1>("h0"))
    node zQuadPiece_0_A6_sqrt = and(T_667, T_670)
    node zQuadPiece_1_A6_sqrt = and(T_667, T_668)
    node T_677 = and(cyc_A6_sqrt, T_664)
    node zQuadPiece_2_A6_sqrt = and(T_677, T_670)
    node zQuadPiece_3_A6_sqrt = and(T_677, T_668)
    node T_687 = mux(zQuadPiece_0_A6_sqrt, UInt<13>("h1a"), UInt<13>("h0"))
    node T_691 = mux(zQuadPiece_1_A6_sqrt, UInt<13>("hbca"), UInt<13>("h0"))
    node T_692 = or(T_687, T_691)
    node T_696 = mux(zQuadPiece_2_A6_sqrt, UInt<13>("h12d3"), UInt<13>("h0"))
    node T_697 = or(T_692, T_696)
    node T_701 = mux(zQuadPiece_3_A6_sqrt, UInt<13>("h1b17"), UInt<13>("h0"))
    node zComplFractK0_A6_sqrt = or(T_697, T_701)
    node T_702 = bits(zFractB_A4_div, 48, 40)
    node T_703 = or(T_702, zK2_A7_sqrt)
    node T_705 = eq(cyc_S, UInt<1>("h0"))
    node T_707 = mux(T_705, nextMulAdd9A_A, UInt<9>("h0"))
    node mulAdd9A_A = or(T_703, T_707)
    node T_708 = bits(zFractB_A7_sqrt, 50, 42)
    node T_709 = or(zK1_A4_div, T_708)
    node T_713 = mux(T_705, nextMulAdd9B_A, UInt<9>("h0"))
    node mulAdd9B_A = or(T_709, T_713)
    node T_717 = mux(entering_PA_normalCase_sqrt, UInt<10>("h3ff"), UInt<10>("h0"))
    node T_718 = cat(zComplK1_A7_sqrt, T_717)
    node T_722 = mux(cyc_A6_sqrt, UInt<6>("h3f"), UInt<6>("h0"))
    node T_723 = cat(cyc_A6_sqrt, zComplFractK0_A6_sqrt)
    node T_724 = cat(T_723, T_722)
    node T_725 = or(T_718, T_724)
    node T_729 = mux(entering_PA_normalCase_div, UInt<8>("hff"), UInt<8>("h0"))
    node T_730 = cat(entering_PA_normalCase_div, zComplFractK0_A4_div)
    node T_731 = cat(T_730, T_729)
    node GEN_55 = pad(T_725, 21)
    node T_732 = or(GEN_55, T_731)
    node GEN_56 = pad(fractR0_A, 19)
    node T_734 = shlw(GEN_56, 10)
    node GEN_57 = pad(T_734, 20)
    node T_735 = add(UInt<20>("h40000"), GEN_57)
    node T_736 = tail(T_735, 1)
    node T_738 = mux(cyc_A5_sqrt, T_736, UInt<20>("h0"))
    node GEN_58 = pad(T_738, 21)
    node T_739 = or(T_732, GEN_58)
    node T_740 = bits(hiSqrR0_A_sqrt, 9, 9)
    node T_742 = eq(T_740, UInt<1>("h0"))
    node T_743 = and(cyc_A4_sqrt, T_742)
    node T_746 = mux(T_743, UInt<11>("h400"), UInt<11>("h0"))
    node GEN_59 = pad(T_746, 21)
    node T_747 = or(T_739, GEN_59)
    node T_749 = and(cyc_A4_sqrt, T_740)
    node T_750 = or(T_749, cyc_A3_div)
    node T_751 = bits(sigB_PA, 46, 26)
    node T_753 = add(T_751, UInt<21>("h400"))
    node T_754 = tail(T_753, 1)
    node T_756 = mux(T_750, T_754, UInt<21>("h0"))
    node T_757 = or(T_747, T_756)
    node T_758 = or(cyc_A3_sqrt, cyc_A2)
    node T_760 = mux(T_758, partNegSigma0_A, UInt<21>("h0"))
    node T_761 = or(T_757, T_760)
    node GEN_60 = pad(fractR0_A, 25)
    node T_762 = shlw(GEN_60, 16)
    node T_764 = mux(cyc_A1_sqrt, T_762, UInt<25>("h0"))
    node GEN_61 = pad(T_761, 25)
    node T_765 = or(GEN_61, T_764)
    node GEN_62 = pad(fractR0_A, 24)
    node T_766 = shlw(GEN_62, 15)
    node T_768 = mux(cyc_A1_div, T_766, UInt<24>("h0"))
    node GEN_63 = pad(T_768, 25)
    node mulAdd9C_A = or(T_765, GEN_63)
    node T_769 = mul(mulAdd9A_A, mulAdd9B_A)
    node T_771 = bits(mulAdd9C_A, 17, 0)
    node T_772 = cat(UInt<1>("h0"), T_771)
    node GEN_64 = pad(T_769, 19)
    node T_773 = add(GEN_64, T_772)
    node loMulAdd9Out_A = tail(T_773, 1)
    node T_774 = bits(loMulAdd9Out_A, 18, 18)
    node T_775 = bits(mulAdd9C_A, 24, 18)
    node T_777 = add(T_775, UInt<7>("h1"))
    node T_778 = tail(T_777, 1)
    node T_780 = mux(T_774, T_778, T_775)
    node T_781 = bits(loMulAdd9Out_A, 17, 0)
    node mulAdd9Out_A = cat(T_780, T_781)
    node T_782 = bits(mulAdd9Out_A, 19, 19)
    node T_783 = and(cyc_A6_sqrt, T_782)
    node T_784 = not(mulAdd9Out_A)
    node T_785 = shr(T_784, 10)
    node T_787 = mux(T_783, T_785, UInt<15>("h0"))
    node zFractR0_A6_sqrt = bits(T_787, 8, 0)
    node GEN_65 = pad(mulAdd9Out_A, 26)
    node T_789 = shlw(GEN_65, 1)
    node sqrR0_A5_sqrt = mux(T_664, T_789, pad(mulAdd9Out_A, 26))
    node T_790 = bits(mulAdd9Out_A, 20, 20)
    node T_791 = and(entering_PA_normalCase_div, T_790)
    node T_793 = shr(T_784, 11)
    node T_795 = mux(T_791, T_793, UInt<14>("h0"))
    node zFractR0_A4_div = bits(T_795, 8, 0)
    node T_796 = bits(mulAdd9Out_A, 11, 11)
    node T_797 = and(cyc_A2, T_796)
    node T_799 = shr(T_784, 2)
    node T_801 = mux(T_797, T_799, UInt<23>("h0"))
    node zSigma0_A2 = bits(T_801, 8, 0)
    node T_802 = shr(mulAdd9Out_A, 10)
    node T_803 = shr(mulAdd9Out_A, 9)
    node T_804 = mux(sqrtOp_PA, pad(T_802, 16), T_803)
    node fractR1_A1 = bits(T_804, 14, 0)
    node r1_A1 = cat(UInt<1>("h1"), fractR1_A1)
    node GEN_66 = pad(r1_A1, 17)
    node T_807 = shlw(GEN_66, 1)
    node ER1_A1_sqrt = mux(T_664, T_807, pad(r1_A1, 17))
    node T_808 = or(cyc_A6_sqrt, entering_PA_normalCase_div)
    node T_809 = or(zFractR0_A6_sqrt, zFractR0_A4_div)
    node GEN_37 = mux(T_808, T_809, fractR0_A)
    node T_810 = shr(sqrR0_A5_sqrt, 10)
    node GEN_38 = mux(cyc_A5_sqrt, T_810, pad(hiSqrR0_A_sqrt, 16))
    node T_811 = or(cyc_A4_sqrt, cyc_A3)
    node T_813 = mux(cyc_A4_sqrt, mulAdd9Out_A, pad(T_803, 25))
    node T_814 = bits(T_813, 20, 0)
    node GEN_39 = mux(T_811, T_814, partNegSigma0_A)
    node T_815 = or(entering_PA_normalCase_sqrt, cyc_A6_sqrt)
    node T_816 = or(T_815, cyc_A5_sqrt)
    node T_817 = or(T_816, cyc_A4)
    node T_818 = or(T_817, cyc_A3)
    node T_819 = or(T_818, cyc_A2)
    node T_823 = mux(entering_PA_normalCase_sqrt, T_793, UInt<14>("h0"))
    node GEN_67 = pad(zFractR0_A6_sqrt, 14)
    node T_824 = or(T_823, GEN_67)
    node T_825 = bits(sigB_PA, 43, 35)
    node T_827 = mux(cyc_A4_sqrt, T_825, UInt<9>("h0"))
    node GEN_68 = pad(T_827, 14)
    node T_828 = or(T_824, GEN_68)
    node T_829 = bits(zFractB_A4_div, 43, 35)
    node GEN_69 = pad(T_829, 14)
    node T_830 = or(T_828, GEN_69)
    node T_831 = or(cyc_A5_sqrt, cyc_A3)
    node T_832 = bits(sigB_PA, 52, 44)
    node T_834 = mux(T_831, T_832, UInt<9>("h0"))
    node GEN_70 = pad(T_834, 14)
    node T_835 = or(T_830, GEN_70)
    node GEN_71 = pad(zSigma0_A2, 14)
    node T_836 = or(T_835, GEN_71)
    node GEN_40 = mux(T_819, T_836, pad(nextMulAdd9A_A, 14))
    node T_840 = or(T_817, cyc_A2)
    node T_842 = or(T_708, zFractR0_A6_sqrt)
    node T_843 = bits(sqrR0_A5_sqrt, 9, 1)
    node T_845 = mux(cyc_A5_sqrt, T_843, UInt<9>("h0"))
    node T_846 = or(T_842, T_845)
    node T_847 = or(T_846, zFractR0_A4_div)
    node T_848 = bits(hiSqrR0_A_sqrt, 8, 0)
    node T_850 = mux(cyc_A4_sqrt, T_848, UInt<9>("h0"))
    node T_851 = or(T_847, T_850)
    node T_853 = bits(fractR0_A, 8, 1)
    node T_854 = cat(UInt<1>("h1"), T_853)
    node T_856 = mux(cyc_A2, T_854, UInt<9>("h0"))
    node T_857 = or(T_851, T_856)
    node GEN_41 = mux(T_840, T_857, nextMulAdd9B_A)
    node GEN_42 = mux(cyc_A1_sqrt, ER1_A1_sqrt, ER1_B_sqrt)
    node T_858 = or(cyc_A1, cyc_B7_sqrt)
    node T_859 = or(T_858, cyc_B6_div)
    node T_860 = or(T_859, cyc_B4)
    node T_861 = or(T_860, cyc_B3)
    node T_862 = or(T_861, cyc_C6_sqrt)
    node T_863 = or(T_862, cyc_C4)
    node T_864 = or(T_863, cyc_C1)
    node GEN_72 = pad(ER1_A1_sqrt, 53)
    node T_865 = shlw(GEN_72, 36)
    node T_867 = mux(cyc_A1_sqrt, T_865, UInt<53>("h0"))
    node T_868 = or(cyc_B7_sqrt, cyc_A1_div)
    node T_870 = mux(T_868, sigB_PA, UInt<53>("h0"))
    node T_871 = or(T_867, T_870)
    node T_873 = mux(cyc_B6_div, sigA_PA, UInt<53>("h0"))
    node T_874 = or(T_871, T_873)
    node T_875 = bits(zSigma1_B4, 45, 12)
    node GEN_73 = pad(T_875, 53)
    node T_876 = or(T_874, GEN_73)
    node T_877 = or(cyc_B3, cyc_C6_sqrt)
    node T_878 = bits(sigXNU_B3_CX, 57, 12)
    node T_880 = mux(T_877, T_878, UInt<46>("h0"))
    node GEN_74 = pad(T_880, 53)
    node T_881 = or(T_876, GEN_74)
    node T_882 = bits(sigXN_C, 57, 25)
    node GEN_75 = pad(T_882, 46)
    node T_883 = shlw(GEN_75, 13)
    node T_885 = mux(cyc_C4_div, T_883, UInt<46>("h0"))
    node GEN_76 = pad(T_885, 53)
    node T_886 = or(T_881, GEN_76)
    node GEN_77 = pad(u_C_sqrt, 46)
    node T_887 = shlw(GEN_77, 15)
    node T_889 = mux(cyc_C4_sqrt, T_887, UInt<46>("h0"))
    node GEN_78 = pad(T_889, 53)
    node T_890 = or(T_886, GEN_78)
    node T_892 = mux(cyc_C1_div, sigB_PC, UInt<53>("h0"))
    node T_893 = or(T_890, T_892)
    node GEN_79 = pad(T_893, 54)
    node T_894 = or(GEN_79, zComplSigT_C1_sqrt)
    node T_896 = or(T_858, cyc_B6_sqrt)
    node T_897 = or(T_896, cyc_B4)
    node T_898 = or(T_897, cyc_C6_sqrt)
    node T_899 = or(T_898, cyc_C4)
    node T_900 = or(T_899, cyc_C1)
    node GEN_80 = pad(r1_A1, 52)
    node T_901 = shlw(GEN_80, 36)
    node T_903 = mux(cyc_A1, T_901, UInt<52>("h0"))
    node GEN_81 = pad(ESqrR1_B_sqrt, 51)
    node T_904 = shlw(GEN_81, 19)
    node T_906 = mux(cyc_B7_sqrt, T_904, UInt<51>("h0"))
    node GEN_82 = pad(T_906, 52)
    node T_907 = or(T_903, GEN_82)
    node GEN_83 = pad(ER1_B_sqrt, 53)
    node T_908 = shlw(GEN_83, 36)
    node T_910 = mux(cyc_B6_sqrt, T_908, UInt<53>("h0"))
    node GEN_84 = pad(T_907, 53)
    node T_911 = or(GEN_84, T_910)
    node GEN_85 = pad(zSigma1_B4, 53)
    node T_912 = or(T_911, GEN_85)
    node T_913 = bits(sqrSigma1_C, 30, 1)
    node T_915 = mux(cyc_C6_sqrt, T_913, UInt<30>("h0"))
    node GEN_86 = pad(T_915, 53)
    node T_916 = or(T_912, GEN_86)
    node T_918 = mux(cyc_C4, sqrSigma1_C, UInt<33>("h0"))
    node GEN_87 = pad(T_918, 53)
    node T_919 = or(T_916, GEN_87)
    node GEN_88 = pad(T_919, 54)
    node T_920 = or(GEN_88, zComplSigT_C1)
    node T_921 = or(cyc_A4, cyc_A3_div)
    node T_922 = or(T_921, cyc_A1_div)
    node T_923 = or(T_922, cyc_B10_sqrt)
    node T_924 = or(T_923, cyc_B9_sqrt)
    node T_925 = or(T_924, cyc_B7_sqrt)
    node T_926 = or(T_925, cyc_B6)
    node T_927 = or(T_926, cyc_B5_sqrt)
    node T_928 = or(T_927, cyc_B3_sqrt)
    node T_929 = or(T_928, cyc_B2_div)
    node T_930 = or(T_929, cyc_B1_sqrt)
    node T_931 = or(T_930, cyc_C4)
    node T_932 = or(cyc_A3, cyc_A2_div)
    node T_933 = or(T_932, cyc_B9_sqrt)
    node T_934 = or(T_933, cyc_B8_sqrt)
    node T_935 = or(T_934, cyc_B6)
    node T_936 = or(T_935, cyc_B5)
    node T_937 = or(T_936, cyc_B4_sqrt)
    node T_938 = or(T_937, cyc_B2_sqrt)
    node T_939 = or(T_938, cyc_B1_div)
    node T_940 = or(T_939, cyc_C6_sqrt)
    node T_941 = or(T_940, valid_normalCase_leaving_PB)
    node T_942 = or(cyc_A2, cyc_A1_div)
    node T_943 = or(T_942, cyc_B8_sqrt)
    node T_944 = or(T_943, cyc_B7_sqrt)
    node T_945 = or(T_944, cyc_B5)
    node T_946 = or(T_945, cyc_B4)
    node T_947 = or(T_946, cyc_B3_sqrt)
    node T_948 = or(T_947, cyc_B1_sqrt)
    node T_949 = or(T_948, cyc_C5)
    node T_950 = or(T_949, cyc_C2)
    node T_951 = or(io_latchMulAddA_0, cyc_B6)
    node T_952 = or(T_951, cyc_B2_sqrt)
    node T_953 = cat(T_950, T_952)
    node T_954 = cat(T_931, T_941)
    node T_955 = cat(T_954, T_953)
    node GEN_89 = pad(sigX1_B, 105)
    node T_956 = shlw(GEN_89, 47)
    node T_958 = mux(cyc_B1, T_956, UInt<105>("h0"))
    node GEN_90 = pad(sigX1_B, 104)
    node T_959 = shlw(GEN_90, 46)
    node T_961 = mux(cyc_C6_sqrt, T_959, UInt<104>("h0"))
    node GEN_91 = pad(T_961, 105)
    node T_962 = or(T_958, GEN_91)
    node T_963 = or(cyc_C4_sqrt, cyc_C2)
    node GEN_92 = pad(sigXN_C, 105)
    node T_964 = shlw(GEN_92, 47)
    node T_966 = mux(T_963, T_964, UInt<105>("h0"))
    node T_967 = or(T_962, T_966)
    node T_969 = eq(E_E_div, UInt<1>("h0"))
    node T_970 = and(cyc_E3_div, T_969)
    node GEN_93 = pad(fractA_0_PC, 54)
    node T_971 = shlw(GEN_93, 53)
    node T_973 = mux(T_970, T_971, UInt<54>("h0"))
    node GEN_94 = pad(T_973, 105)
    node T_974 = or(T_967, GEN_94)
    node T_976 = bits(sigB_PC, 0, 0)
    node T_978 = cat(T_976, UInt<1>("h0"))
    node T_979 = bits(sigB_PC, 1, 1)
    node T_981 = xor(T_979, T_976)
    node T_983 = cat(T_981, T_976)
    node T_984 = mux(T_352, T_978, T_983)
    node T_986 = eq(extraT_E, UInt<1>("h0"))
    node T_988 = cat(T_986, UInt<1>("h0"))
    node T_989 = xor(T_984, T_988)
    node GEN_95 = pad(T_989, 56)
    node T_990 = shlw(GEN_95, 54)
    node T_992 = mux(cyc_E3_sqrt, T_990, UInt<56>("h0"))
    node GEN_96 = pad(T_992, 105)
    node T_993 = or(T_974, GEN_96)
    node ESqrR1_B8_sqrt = bits(io_mulAddResult_3, 103, 72)
    node T_994 = bits(io_mulAddResult_3, 90, 45)
    node T_995 = not(T_994)
    node T_997 = mux(cyc_B4, T_995, UInt<46>("h0"))
    node sqrSigma1_B1 = bits(io_mulAddResult_3, 79, 47)
    node T_998 = bits(io_mulAddResult_3, 104, 47)
    node T_999 = bits(io_mulAddResult_3, 104, 104)
    node E_C1_div = eq(T_999, UInt<1>("h0"))
    node T_1002 = eq(E_C1_div, UInt<1>("h0"))
    node T_1003 = and(cyc_C1_div, T_1002)
    node T_1004 = or(T_1003, cyc_C1_sqrt)
    node T_1005 = bits(io_mulAddResult_3, 104, 51)
    node T_1006 = not(T_1005)
    node T_1008 = mux(T_1004, T_1006, UInt<54>("h0"))
    node T_1009 = and(cyc_C1_div, E_C1_div)
    node T_1011 = bits(io_mulAddResult_3, 102, 50)
    node T_1012 = not(T_1011)
    node T_1013 = cat(UInt<1>("h0"), T_1012)
    node T_1015 = mux(T_1009, T_1013, UInt<54>("h0"))
    node T_1016 = or(T_1008, T_1015)
    node T_1020 = mux(cyc_C1_sqrt, T_1006, UInt<54>("h0"))
    node sigT_C1 = not(zComplSigT_C1)
    node remT_E2 = bits(io_mulAddResult_3, 55, 0)
    node GEN_43 = mux(cyc_B8_sqrt, ESqrR1_B8_sqrt, ESqrR1_B_sqrt)
    node GEN_44 = mux(cyc_B3, sigXNU_B3_CX, sigX1_B)
    node GEN_45 = mux(cyc_B1, sqrSigma1_B1, sqrSigma1_C)
    node T_1021 = or(cyc_C6_sqrt, cyc_C5_div)
    node T_1022 = or(T_1021, cyc_C3_sqrt)
    node GEN_46 = mux(T_1022, sigXNU_B3_CX, sigXN_C)
    node T_1023 = bits(sigXNU_B3_CX, 56, 26)
    node GEN_47 = mux(cyc_C5_sqrt, T_1023, u_C_sqrt)
    node T_1024 = bits(sigT_C1, 53, 1)
    node T_1025 = bits(sigT_C1, 0, 0)
    node GEN_48 = mux(cyc_C1, E_C1_div, E_E_div)
    node GEN_49 = mux(cyc_C1, T_1024, sigT_E)
    node GEN_50 = mux(cyc_C1, T_1025, extraT_E)
    node T_1026 = bits(remT_E2, 55, 55)
    node T_1027 = bits(remT_E2, 53, 53)
    node T_1028 = mux(sqrtOp_PC, T_1026, T_1027)
    node T_1029 = bits(remT_E2, 53, 0)
    node T_1031 = eq(T_1029, UInt<54>("h0"))
    node T_1034 = bits(remT_E2, 55, 54)
    node T_1036 = eq(T_1034, UInt<2>("h0"))
    node T_1037 = or(T_370, T_1036)
    node T_1038 = and(T_1031, T_1037)
    node GEN_51 = mux(cyc_E2, T_1028, isNegRemT_E)
    node GEN_52 = mux(cyc_E2, T_1038, trueEqX_E1)
    node T_1041 = and(T_370, E_E_div)
    node T_1043 = mux(T_1041, exp_PC, UInt<14>("h0"))
    node T_1048 = and(T_370, T_969)
    node T_1050 = mux(T_1048, expP1_PC, UInt<14>("h0"))
    node T_1051 = or(T_1043, T_1050)
    node T_1052 = shr(exp_PC, 1)
    node T_1054 = add(T_1052, UInt<13>("h400"))
    node T_1055 = tail(T_1054, 1)
    node T_1057 = mux(sqrtOp_PC, T_1055, UInt<13>("h0"))
    node GEN_97 = pad(T_1057, 14)
    node sExpX_E = or(T_1051, GEN_97)
    node posExpX_E = bits(sExpX_E, 12, 0)
    node T_1058 = not(posExpX_E)
    node T_1059 = bits(T_1058, 12, 12)
    node T_1060 = bits(T_1058, 11, 0)
    node T_1061 = bits(T_1060, 11, 11)
    node T_1062 = bits(T_1060, 10, 0)
    node T_1063 = bits(T_1062, 10, 10)
    node T_1064 = bits(T_1062, 9, 0)
    node T_1065 = bits(T_1064, 9, 9)
    node T_1066 = bits(T_1064, 8, 0)
    node T_1068 = bits(T_1066, 8, 8)
    node T_1069 = bits(T_1066, 7, 0)
    node T_1071 = bits(T_1069, 7, 7)
    node T_1072 = bits(T_1069, 6, 0)
    node T_1074 = bits(T_1072, 6, 6)
    node T_1075 = bits(T_1072, 5, 0)
    node T_1078 = dshr(SInt<65>("h10000000000000000"), T_1075)
    node T_1079 = bits(T_1078, 63, 14)
    node T_1080 = bits(T_1079, 31, 0)
    node T_1085 = shr(T_1080, 16)
    node T_1086 = pad(T_1085, 32)
    node T_1087 = bits(T_1080, 15, 0)
    node GEN_98 = pad(T_1087, 32)
    node T_1088 = shlw(GEN_98, 16)
    node T_1090 = and(T_1088, UInt<32>("hffff0000"))
    node T_1091 = or(T_1086, T_1090)
    node T_1095 = shr(T_1091, 8)
    node GEN_99 = pad(T_1095, 32)
    node T_1096 = and(GEN_99, UInt<32>("hff00ff"))
    node T_1097 = bits(T_1091, 23, 0)
    node GEN_100 = pad(T_1097, 32)
    node T_1098 = shlw(GEN_100, 8)
    node T_1100 = and(T_1098, UInt<32>("hff00ff00"))
    node T_1101 = or(T_1096, T_1100)
    node T_1105 = shr(T_1101, 4)
    node GEN_101 = pad(T_1105, 32)
    node T_1106 = and(GEN_101, UInt<32>("hf0f0f0f"))
    node T_1107 = bits(T_1101, 27, 0)
    node GEN_102 = pad(T_1107, 32)
    node T_1108 = shlw(GEN_102, 4)
    node T_1110 = and(T_1108, UInt<32>("hf0f0f0f0"))
    node T_1111 = or(T_1106, T_1110)
    node T_1115 = shr(T_1111, 2)
    node GEN_103 = pad(T_1115, 32)
    node T_1116 = and(GEN_103, UInt<32>("h33333333"))
    node T_1117 = bits(T_1111, 29, 0)
    node GEN_104 = pad(T_1117, 32)
    node T_1118 = shlw(GEN_104, 2)
    node T_1120 = and(T_1118, UInt<32>("hcccccccc"))
    node T_1121 = or(T_1116, T_1120)
    node T_1125 = shr(T_1121, 1)
    node GEN_105 = pad(T_1125, 32)
    node T_1126 = and(GEN_105, UInt<32>("h55555555"))
    node T_1127 = bits(T_1121, 30, 0)
    node GEN_106 = pad(T_1127, 32)
    node T_1128 = shlw(GEN_106, 1)
    node T_1130 = and(T_1128, UInt<32>("haaaaaaaa"))
    node T_1131 = or(T_1126, T_1130)
    node T_1132 = bits(T_1079, 49, 32)
    node T_1133 = bits(T_1132, 15, 0)
    node T_1138 = shr(T_1133, 8)
    node T_1139 = pad(T_1138, 16)
    node T_1140 = bits(T_1133, 7, 0)
    node GEN_107 = pad(T_1140, 16)
    node T_1141 = shlw(GEN_107, 8)
    node T_1143 = and(T_1141, UInt<16>("hff00"))
    node T_1144 = or(T_1139, T_1143)
    node T_1148 = shr(T_1144, 4)
    node GEN_108 = pad(T_1148, 16)
    node T_1149 = and(GEN_108, UInt<16>("hf0f"))
    node T_1150 = bits(T_1144, 11, 0)
    node GEN_109 = pad(T_1150, 16)
    node T_1151 = shlw(GEN_109, 4)
    node T_1153 = and(T_1151, UInt<16>("hf0f0"))
    node T_1154 = or(T_1149, T_1153)
    node T_1158 = shr(T_1154, 2)
    node GEN_110 = pad(T_1158, 16)
    node T_1159 = and(GEN_110, UInt<16>("h3333"))
    node T_1160 = bits(T_1154, 13, 0)
    node GEN_111 = pad(T_1160, 16)
    node T_1161 = shlw(GEN_111, 2)
    node T_1163 = and(T_1161, UInt<16>("hcccc"))
    node T_1164 = or(T_1159, T_1163)
    node T_1168 = shr(T_1164, 1)
    node GEN_112 = pad(T_1168, 16)
    node T_1169 = and(GEN_112, UInt<16>("h5555"))
    node T_1170 = bits(T_1164, 14, 0)
    node GEN_113 = pad(T_1170, 16)
    node T_1171 = shlw(GEN_113, 1)
    node T_1173 = and(T_1171, UInt<16>("haaaa"))
    node T_1174 = or(T_1169, T_1173)
    node T_1175 = bits(T_1132, 17, 16)
    node T_1176 = bits(T_1175, 0, 0)
    node T_1177 = bits(T_1175, 1, 1)
    node T_1178 = cat(T_1176, T_1177)
    node T_1179 = cat(T_1174, T_1178)
    node T_1180 = cat(T_1131, T_1179)
    node T_1181 = not(T_1180)
    node T_1182 = mux(T_1074, UInt<50>("h0"), T_1181)
    node T_1183 = not(T_1182)
    node T_1184 = not(T_1183)
    node T_1185 = mux(T_1071, UInt<50>("h0"), T_1184)
    node T_1186 = not(T_1185)
    node T_1187 = not(T_1186)
    node T_1188 = mux(T_1068, UInt<50>("h0"), T_1187)
    node T_1189 = not(T_1188)
    node T_1190 = not(T_1189)
    node T_1191 = mux(T_1065, UInt<50>("h0"), T_1190)
    node T_1192 = not(T_1191)
    node T_1194 = cat(T_1192, UInt<3>("h7"))
    node T_1205 = bits(T_1078, 2, 0)
    node T_1206 = bits(T_1205, 1, 0)
    node T_1207 = bits(T_1206, 0, 0)
    node T_1208 = bits(T_1206, 1, 1)
    node T_1209 = cat(T_1207, T_1208)
    node T_1210 = bits(T_1205, 2, 2)
    node T_1211 = cat(T_1209, T_1210)
    node T_1213 = mux(T_1074, T_1211, UInt<3>("h0"))
    node T_1215 = mux(T_1071, T_1213, UInt<3>("h0"))
    node T_1217 = mux(T_1068, T_1215, UInt<3>("h0"))
    node T_1219 = mux(T_1065, T_1217, UInt<3>("h0"))
    node T_1220 = mux(T_1063, T_1194, pad(T_1219, 53))
    node T_1222 = mux(T_1061, T_1220, UInt<53>("h0"))
    node roundMask_E = mux(T_1059, T_1222, UInt<53>("h0"))
    node T_1225 = cat(UInt<1>("h0"), roundMask_E)
    node T_1226 = not(T_1225)
    node T_1228 = cat(roundMask_E, UInt<1>("h1"))
    node incrPosMask_E = and(T_1226, T_1228)
    node T_1229 = shr(incrPosMask_E, 1)
    node T_1230 = and(sigT_E, T_1229)
    node hiRoundPosBitT_E = neq(T_1230, UInt<53>("h0"))
    node T_1232 = shr(roundMask_E, 1)
    node GEN_114 = pad(T_1232, 53)
    node T_1235 = not(sigT_E)
    node T_1237 = and(T_1235, GEN_114)
    node all1sHiRoundExtraT_E = eq(T_1237, UInt<53>("h0"))
    node T_1239 = bits(roundMask_E, 0, 0)
    node T_1241 = eq(T_1239, UInt<1>("h0"))
    node T_1242 = or(T_1241, hiRoundPosBitT_E)
    node all1sHiRoundT_E = and(T_1242, all1sHiRoundExtraT_E)
    node GEN_116 = pad(sigT_E, 54)
    node T_1244 = add(UInt<54>("h0"), GEN_116)
    node T_1245 = tail(T_1244, 1)
    node GEN_117 = pad(roundMagUp_PC, 54)
    node T_1246 = add(T_1245, GEN_117)
    node sigAdjT_E = tail(T_1246, 1)
    node T_1248 = not(roundMask_E)
    node T_1249 = cat(UInt<1>("h1"), T_1248)
    node sigY0_E = and(sigAdjT_E, T_1249)
    node T_1252 = or(sigAdjT_E, T_1225)
    node T_1254 = add(T_1252, UInt<54>("h1"))
    node sigY1_E = tail(T_1254, 1)
    node T_1256 = eq(isNegRemT_E, UInt<1>("h0"))
    node T_1258 = eq(trueEqX_E1, UInt<1>("h0"))
    node T_1259 = and(T_1256, T_1258)
    node trueLtX_E1 = mux(sqrtOp_PC, T_1259, isNegRemT_E)
    node T_1262 = eq(trueLtX_E1, UInt<1>("h0"))
    node T_1263 = and(T_1239, T_1262)
    node T_1264 = and(T_1263, all1sHiRoundExtraT_E)
    node T_1265 = and(T_1264, extraT_E)
    node hiRoundPosBit_E1 = xor(hiRoundPosBitT_E, T_1265)
    node T_1270 = or(T_1258, T_986)
    node T_1272 = eq(all1sHiRoundExtraT_E, UInt<1>("h0"))
    node anyRoundExtra_E1 = or(T_1270, T_1272)
    node T_1273 = and(roundingMode_near_even_PC, hiRoundPosBit_E1)
    node T_1275 = eq(anyRoundExtra_E1, UInt<1>("h0"))
    node T_1276 = and(T_1273, T_1275)
    node roundEvenMask_E1 = mux(T_1276, incrPosMask_E, UInt<54>("h0"))
    node T_1278 = and(roundMagDown_PC, extraT_E)
    node T_1281 = and(T_1278, T_1262)
    node T_1282 = and(T_1281, all1sHiRoundT_E)
    node T_1285 = and(extraT_E, T_1262)
    node T_1288 = and(T_1285, T_1258)
    node T_1290 = eq(all1sHiRoundT_E, UInt<1>("h0"))
    node T_1291 = or(T_1288, T_1290)
    node T_1292 = and(roundMagUp_PC, T_1291)
    node T_1293 = or(T_1282, T_1292)
    node T_1296 = or(extraT_E, T_1262)
    node T_1300 = and(T_1296, T_1241)
    node T_1301 = or(hiRoundPosBitT_E, T_1300)
    node T_1305 = and(T_1285, all1sHiRoundExtraT_E)
    node T_1306 = or(T_1301, T_1305)
    node T_1307 = and(roundingMode_near_even_PC, T_1306)
    node T_1308 = or(T_1293, T_1307)
    node T_1309 = mux(T_1308, sigY1_E, sigY0_E)
    node T_1310 = not(roundEvenMask_E1)
    node sigY_E1 = and(T_1309, T_1310)
    node fractY_E1 = bits(sigY_E1, 51, 0)
    node inexactY_E1 = or(hiRoundPosBit_E1, anyRoundExtra_E1)
    node T_1311 = bits(sigY_E1, 53, 53)
    node T_1313 = eq(T_1311, UInt<1>("h0"))
    node T_1315 = mux(T_1313, sExpX_E, UInt<14>("h0"))
    node T_1319 = and(T_1311, T_370)
    node T_1320 = and(T_1319, E_E_div)
    node T_1322 = mux(T_1320, expP1_PC, UInt<14>("h0"))
    node T_1323 = or(T_1315, T_1322)
    node T_1330 = and(T_1319, T_969)
    node T_1332 = mux(T_1330, expP2_PC, UInt<14>("h0"))
    node T_1333 = or(T_1323, T_1332)
    node T_1335 = and(T_1311, sqrtOp_PC)
    node T_1336 = shr(expP2_PC, 1)
    node T_1338 = add(T_1336, UInt<13>("h400"))
    node T_1339 = tail(T_1338, 1)
    node T_1341 = mux(T_1335, T_1339, UInt<13>("h0"))
    node GEN_118 = pad(T_1341, 14)
    node sExpY_E1 = or(T_1333, GEN_118)
    node expY_E1 = bits(sExpY_E1, 11, 0)
    node T_1342 = bits(sExpY_E1, 13, 13)
    node T_1344 = eq(T_1342, UInt<1>("h0"))
    node T_1346 = bits(sExpY_E1, 12, 10)
    node T_1347 = leq(UInt<3>("h3"), T_1346)
    node overflowY_E1 = and(T_1344, T_1347)
    node T_1349 = bits(sExpY_E1, 12, 0)
    node T_1351 = lt(T_1349, UInt<13>("h3ce"))
    node totalUnderflowY_E1 = or(T_1342, T_1351)
    node T_1353 = leq(posExpX_E, UInt<13>("h401"))
    node T_1354 = and(T_1353, inexactY_E1)
    node underflowY_E1 = or(totalUnderflowY_E1, T_1354)
    node T_1356 = eq(isNaNB_PC, UInt<1>("h0"))
    node T_1359 = and(T_1356, T_334)
    node T_1360 = and(T_1359, sign_PC)
    node T_1361 = and(isZeroA_PC, isZeroB_PC)
    node T_1362 = and(isInfA_PC, isInfB_PC)
    node T_1363 = or(T_1361, T_1362)
    node notSigNaN_invalid_PC = mux(sqrtOp_PC, T_1360, T_1363)
    node T_1366 = and(T_370, isSigNaNA_PC)
    node T_1367 = or(T_1366, isSigNaNB_PC)
    node invalid_PC = or(T_1367, notSigNaN_invalid_PC)
    node T_1372 = and(T_370, T_340)
    node T_1375 = and(T_1372, T_345)
    node infinity_PC = and(T_1375, isZeroB_PC)
    node overflow_E1 = and(normalCase_PC, overflowY_E1)
    node underflow_E1 = and(normalCase_PC, underflowY_E1)
    node T_1376 = or(overflow_E1, underflow_E1)
    node T_1377 = and(normalCase_PC, inexactY_E1)
    node inexact_E1 = or(T_1376, T_1377)
    node T_1378 = or(isZeroA_PC, isInfB_PC)
    node T_1381 = and(totalUnderflowY_E1, T_360)
    node T_1382 = or(T_1378, T_1381)
    node notSpecial_isZeroOut_E1 = mux(sqrtOp_PC, isZeroB_PC, T_1382)
    node T_1383 = and(normalCase_PC, totalUnderflowY_E1)
    node pegMinFiniteMagOut_E1 = and(T_1383, roundMagUp_PC)
    node T_1385 = eq(overflowY_roundMagUp_PC, UInt<1>("h0"))
    node pegMaxFiniteMagOut_E1 = and(overflow_E1, T_1385)
    node T_1386 = or(isInfA_PC, isZeroB_PC)
    node T_1387 = and(overflow_E1, overflowY_roundMagUp_PC)
    node T_1388 = or(T_1386, T_1387)
    node notNaN_isInfOut_E1 = mux(sqrtOp_PC, isInfB_PC, T_1388)
    node T_1391 = and(T_370, isNaNA_PC)
    node T_1392 = or(T_1391, isNaNB_PC)
    node isNaNOut_PC = or(T_1392, notSigNaN_invalid_PC)
    node T_1394 = eq(isNaNOut_PC, UInt<1>("h0"))
    node T_1395 = and(isZeroB_PC, sign_PC)
    node T_1396 = mux(sqrtOp_PC, T_1395, sign_PC)
    node signOut_PC = and(T_1394, T_1396)
    node T_1400 = mux(notSpecial_isZeroOut_E1, UInt<12>("he00"), UInt<12>("h0"))
    node T_1401 = not(T_1400)
    node T_1402 = and(expY_E1, T_1401)
    node T_1406 = mux(pegMinFiniteMagOut_E1, UInt<12>("hc31"), UInt<12>("h0"))
    node T_1407 = not(T_1406)
    node T_1408 = and(T_1402, T_1407)
    node T_1412 = mux(pegMaxFiniteMagOut_E1, UInt<12>("h400"), UInt<12>("h0"))
    node T_1413 = not(T_1412)
    node T_1414 = and(T_1408, T_1413)
    node T_1418 = mux(notNaN_isInfOut_E1, UInt<12>("h200"), UInt<12>("h0"))
    node T_1419 = not(T_1418)
    node T_1420 = and(T_1414, T_1419)
    node T_1423 = mux(pegMinFiniteMagOut_E1, UInt<12>("h3ce"), UInt<12>("h0"))
    node T_1424 = or(T_1420, T_1423)
    node T_1427 = mux(pegMaxFiniteMagOut_E1, UInt<12>("hbff"), UInt<12>("h0"))
    node T_1428 = or(T_1424, T_1427)
    node T_1431 = mux(notNaN_isInfOut_E1, UInt<12>("hc00"), UInt<12>("h0"))
    node T_1432 = or(T_1428, T_1431)
    node T_1435 = mux(isNaNOut_PC, UInt<12>("he00"), UInt<12>("h0"))
    node expOut_E1 = or(T_1432, T_1435)
    node T_1436 = or(notSpecial_isZeroOut_E1, totalUnderflowY_E1)
    node T_1437 = or(T_1436, isNaNOut_PC)
    node T_1441 = mux(isNaNOut_PC, UInt<52>("h8000000000000"), UInt<52>("h0"))
    node T_1442 = mux(T_1437, T_1441, fractY_E1)
    node T_1446 = mux(pegMaxFiniteMagOut_E1, UInt<52>("hfffffffffffff"), UInt<52>("h0"))
    node fractOut_E1 = or(T_1442, T_1446)
    node T_1447 = cat(signOut_PC, expOut_E1)
    node T_1448 = cat(T_1447, fractOut_E1)
    node T_1449 = cat(underflow_E1, inexact_E1)
    node T_1450 = cat(invalid_PC, infinity_PC)
    node T_1451 = cat(T_1450, overflow_E1)
    node T_1452 = cat(T_1451, T_1449)
    io_inReady_div <= T_138
    io_inReady_sqrt <= T_153
    io_outValid_div <= T_371
    io_outValid_sqrt <= T_372
    io_out <= T_1448
    io_exceptionFlags <= T_1452
    io_usingMulAdd <= T_955
    io_latchMulAddA_0 <= T_864
    io_mulAddA_0 <= T_894
    io_latchMulAddB_0 <= T_900
    io_mulAddB_0 <= T_920
    io_mulAddC_2 <= T_993
    valid_PA <= GEN_0
    sqrtOp_PA <= GEN_1
    sign_PA <= GEN_2
    specialCodeB_PA <= GEN_3
    fractB_51_PA <= GEN_4
    roundingMode_PA <= GEN_5
    specialCodeA_PA <= GEN_6
    fractA_51_PA <= GEN_7
    exp_PA <= GEN_8
    fractB_other_PA <= GEN_9
    fractA_other_PA <= GEN_10
    valid_PB <= GEN_11
    sqrtOp_PB <= GEN_12
    sign_PB <= GEN_13
    specialCodeA_PB <= GEN_14
    fractA_51_PB <= GEN_15
    specialCodeB_PB <= GEN_16
    fractB_51_PB <= GEN_17
    roundingMode_PB <= GEN_18
    exp_PB <= GEN_19
    fractA_0_PB <= GEN_20
    fractB_other_PB <= GEN_21
    valid_PC <= GEN_22
    sqrtOp_PC <= GEN_23
    sign_PC <= GEN_24
    specialCodeA_PC <= GEN_25
    fractA_51_PC <= GEN_26
    specialCodeB_PC <= GEN_27
    fractB_51_PC <= GEN_28
    roundingMode_PC <= GEN_29
    exp_PC <= GEN_30
    fractA_0_PC <= GEN_31
    fractB_other_PC <= GEN_32
    cycleNum_A <= GEN_33
    cycleNum_B <= GEN_34
    cycleNum_C <= GEN_35
    cycleNum_E <= GEN_36
    fractR0_A <= GEN_37
    hiSqrR0_A_sqrt <= bits(GEN_38, 9, 0)
    partNegSigma0_A <= GEN_39
    nextMulAdd9A_A <= bits(GEN_40, 8, 0)
    nextMulAdd9B_A <= GEN_41
    ER1_B_sqrt <= GEN_42
    ESqrR1_B_sqrt <= GEN_43
    sigX1_B <= GEN_44
    sqrSigma1_C <= GEN_45
    sigXN_C <= GEN_46
    u_C_sqrt <= GEN_47
    E_E_div <= GEN_48
    sigT_E <= GEN_49
    extraT_E <= GEN_50
    isNegRemT_E <= GEN_51
    trueEqX_E1 <= GEN_52
    ready_PA <= T_258
    ready_PB <= T_299
    ready_PC <= T_368
    leaving_PA <= T_255
    leaving_PB <= T_296
    leaving_PC <= T_365
    cyc_B10_sqrt <= T_414
    cyc_B9_sqrt <= T_416
    cyc_B8_sqrt <= T_418
    cyc_B7_sqrt <= T_420
    cyc_B6 <= T_422
    cyc_B5 <= T_424
    cyc_B4 <= T_426
    cyc_B3 <= T_428
    cyc_B2 <= T_430
    cyc_B1 <= T_432
    cyc_B6_div <= T_436
    cyc_B5_div <= T_440
    cyc_B4_div <= T_444
    cyc_B3_div <= T_447
    cyc_B2_div <= T_450
    cyc_B1_div <= T_453
    cyc_B6_sqrt <= T_455
    cyc_B5_sqrt <= T_457
    cyc_B4_sqrt <= T_459
    cyc_B3_sqrt <= T_460
    cyc_B2_sqrt <= T_461
    cyc_B1_sqrt <= T_462
    cyc_C5 <= T_475
    cyc_C4 <= T_477
    valid_normalCase_leaving_PB <= T_479
    cyc_C2 <= T_481
    cyc_C1 <= T_483
    cyc_E4 <= T_503
    cyc_E3 <= T_505
    cyc_E2 <= T_507
    cyc_E1 <= T_509
    zSigma1_B4 <= T_997
    sigXNU_B3_CX <= T_998
    zComplSigT_C1_sqrt <= T_1020
    zComplSigT_C1 <= T_1016

  module Mul54 :
    input clk : Clock
    input reset : UInt<1>
    input io_val_s0 : UInt<1>
    input io_latch_a_s0 : UInt<1>
    input io_a_s0 : UInt<54>
    input io_latch_b_s0 : UInt<1>
    input io_b_s0 : UInt<54>
    input io_c_s2 : UInt<105>
    output io_result_s3 : UInt<105>
  
    reg val_s1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), val_s1)
    reg val_s2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), val_s2)
    reg reg_a_s1 : UInt<54>, clk with :
      reset => (UInt<1>("h0"), reg_a_s1)
    reg reg_b_s1 : UInt<54>, clk with :
      reset => (UInt<1>("h0"), reg_b_s1)
    reg reg_a_s2 : UInt<54>, clk with :
      reset => (UInt<1>("h0"), reg_a_s2)
    reg reg_b_s2 : UInt<54>, clk with :
      reset => (UInt<1>("h0"), reg_b_s2)
    reg reg_result_s3 : UInt<105>, clk with :
      reset => (UInt<1>("h0"), reg_result_s3)
    node GEN_0 = mux(io_latch_a_s0, io_a_s0, reg_a_s1)
    node GEN_1 = mux(io_latch_b_s0, io_b_s0, reg_b_s1)
    node GEN_2 = mux(io_val_s0, GEN_0, reg_a_s1)
    node GEN_3 = mux(io_val_s0, GEN_1, reg_b_s1)
    node GEN_4 = mux(val_s1, reg_a_s1, reg_a_s2)
    node GEN_5 = mux(val_s1, reg_b_s1, reg_b_s2)
    node T_14 = mul(reg_a_s2, reg_b_s2)
    node T_15 = bits(T_14, 104, 0)
    node T_16 = add(T_15, io_c_s2)
    node T_17 = tail(T_16, 1)
    node GEN_6 = mux(val_s2, T_17, reg_result_s3)
    io_result_s3 <= reg_result_s3
    val_s1 <= io_val_s0
    val_s2 <= val_s1
    reg_a_s1 <= GEN_2
    reg_b_s1 <= GEN_3
    reg_a_s2 <= GEN_4
    reg_b_s2 <= GEN_5
    reg_result_s3 <= GEN_6

  module DivSqrtRecF64 :
    input clk : Clock
    input reset : UInt<1>
    output io_inReady_div : UInt<1>
    output io_inReady_sqrt : UInt<1>
    input io_inValid : UInt<1>
    input io_sqrtOp : UInt<1>
    input io_a : UInt<65>
    input io_b : UInt<65>
    input io_roundingMode : UInt<2>
    output io_outValid_div : UInt<1>
    output io_outValid_sqrt : UInt<1>
    output io_out : UInt<65>
    output io_exceptionFlags : UInt<5>
  
    inst ds of DivSqrtRecF64_mulAddZ31
    inst mul of Mul54
    node T_11 = bits(ds.io_usingMulAdd, 0, 0)
    io_inReady_div <= ds.io_inReady_div
    io_inReady_sqrt <= ds.io_inReady_sqrt
    io_outValid_div <= ds.io_outValid_div
    io_outValid_sqrt <= ds.io_outValid_sqrt
    io_out <= ds.io_out
    io_exceptionFlags <= ds.io_exceptionFlags
    ds.io_inValid <= io_inValid
    ds.io_sqrtOp <= io_sqrtOp
    ds.io_a <= io_a
    ds.io_b <= io_b
    ds.io_roundingMode <= io_roundingMode
    ds.io_mulAddResult_3 <= mul.io_result_s3
    mul.io_val_s0 <= T_11
    mul.io_latch_a_s0 <= ds.io_latchMulAddA_0
    mul.io_a_s0 <= ds.io_mulAddA_0
    mul.io_latch_b_s0 <= ds.io_latchMulAddB_0
    mul.io_b_s0 <= ds.io_mulAddB_0
    mul.io_c_s2 <= ds.io_mulAddC_2

  module RecFNToRecFN_2 :
    input clk : Clock
    input reset : UInt<1>
    input io_in : UInt<65>
    input io_roundingMode : UInt<2>
    output io_out : UInt<33>
    output io_exceptionFlags : UInt<5>
  
    node T_4 = bits(io_in, 63, 52)
    node T_5 = bits(T_4, 11, 9)
    node T_7 = eq(T_5, UInt<3>("h0"))
    node T_8 = bits(T_4, 11, 10)
    node T_10 = eq(T_8, UInt<2>("h3"))
    wire T_18_sign : UInt<1>
    wire T_18_isNaN : UInt<1>
    wire T_18_isInf : UInt<1>
    wire T_18_isZero : UInt<1>
    wire T_18_sExp : SInt<13>
    wire T_18_sig : UInt<56>
    node T_25 = bits(io_in, 64, 64)
    node T_26 = bits(T_4, 9, 9)
    node T_27 = and(T_10, T_26)
    node T_30 = eq(T_26, UInt<1>("h0"))
    node T_31 = and(T_10, T_30)
    node T_32 = cvt(T_4)
    node T_35 = eq(T_7, UInt<1>("h0"))
    node T_36 = bits(io_in, 51, 0)
    node T_38 = cat(T_36, UInt<2>("h0"))
    node T_39 = cat(UInt<1>("h0"), T_35)
    node T_40 = cat(T_39, T_38)
    node T_42 = add(T_18_sExp, SInt<13>("h700"))
    wire outRawFloat_sign : UInt<1>
    wire outRawFloat_isNaN : UInt<1>
    wire outRawFloat_isInf : UInt<1>
    wire outRawFloat_isZero : UInt<1>
    wire outRawFloat_sExp : SInt<10>
    wire outRawFloat_sig : UInt<27>
    node T_57 = lt(T_42, SInt<14>("h0"))
    node T_58 = bits(T_42, 12, 9)
    node T_60 = neq(T_58, UInt<4>("h0"))
    node T_68 = bits(T_42, 8, 0)
    node T_69 = mux(T_60, UInt<9>("h1fc"), T_68)
    node T_70 = cat(T_57, T_69)
    node T_71 = asSInt(T_70)
    node T_72 = bits(T_18_sig, 55, 30)
    node T_73 = bits(T_18_sig, 29, 0)
    node T_75 = neq(T_73, UInt<30>("h0"))
    node T_76 = cat(T_72, T_75)
    node T_77 = bits(outRawFloat_sig, 24, 24)
    node T_79 = eq(T_77, UInt<1>("h0"))
    node invalidExc = and(outRawFloat_isNaN, T_79)
    inst RoundRawFNToRecFN_1_1 of RoundRawFNToRecFN
    io_out <= RoundRawFNToRecFN_1_1.io_out
    io_exceptionFlags <= RoundRawFNToRecFN_1_1.io_exceptionFlags
    T_18_sign <= T_25
    T_18_isNaN <= T_27
    T_18_isInf <= T_31
    T_18_isZero <= T_7
    T_18_sExp <= T_32
    T_18_sig <= T_40
    outRawFloat_sign <= T_18_sign
    outRawFloat_isNaN <= T_18_isNaN
    outRawFloat_isInf <= T_18_isInf
    outRawFloat_isZero <= T_18_isZero
    outRawFloat_sExp <= T_71
    outRawFloat_sig <= T_76
    RoundRawFNToRecFN_1_1.io_invalidExc <= invalidExc
    RoundRawFNToRecFN_1_1.io_infiniteExc <= UInt<1>("h0")
    RoundRawFNToRecFN_1_1.io_in_sign <= outRawFloat_sign
    RoundRawFNToRecFN_1_1.io_in_isNaN <= outRawFloat_isNaN
    RoundRawFNToRecFN_1_1.io_in_isInf <= outRawFloat_isInf
    RoundRawFNToRecFN_1_1.io_in_isZero <= outRawFloat_isZero
    RoundRawFNToRecFN_1_1.io_in_sExp <= outRawFloat_sExp
    RoundRawFNToRecFN_1_1.io_in_sig <= outRawFloat_sig
    RoundRawFNToRecFN_1_1.io_roundingMode <= io_roundingMode

  module FPU :
    input clk : Clock
    input reset : UInt<1>
    input io_inst : UInt<32>
    input io_fromint_data : UInt<64>
    input io_fcsr_rm : UInt<3>
    output io_fcsr_flags_valid : UInt<1>
    output io_fcsr_flags_bits : UInt<5>
    output io_store_data : UInt<64>
    output io_toint_data : UInt<64>
    input io_dmem_resp_val : UInt<1>
    input io_dmem_resp_type : UInt<3>
    input io_dmem_resp_tag : UInt<5>
    input io_dmem_resp_data : UInt<64>
    input io_valid : UInt<1>
    output io_fcsr_rdy : UInt<1>
    output io_nack_mem : UInt<1>
    output io_illegal_rm : UInt<1>
    input io_killx : UInt<1>
    input io_killm : UInt<1>
    output io_dec_cmd : UInt<5>
    output io_dec_ldst : UInt<1>
    output io_dec_wen : UInt<1>
    output io_dec_ren1 : UInt<1>
    output io_dec_ren2 : UInt<1>
    output io_dec_ren3 : UInt<1>
    output io_dec_swap12 : UInt<1>
    output io_dec_swap23 : UInt<1>
    output io_dec_single : UInt<1>
    output io_dec_fromint : UInt<1>
    output io_dec_toint : UInt<1>
    output io_dec_fastpipe : UInt<1>
    output io_dec_fma : UInt<1>
    output io_dec_div : UInt<1>
    output io_dec_sqrt : UInt<1>
    output io_dec_round : UInt<1>
    output io_dec_wflags : UInt<1>
    output io_sboard_set : UInt<1>
    output io_sboard_clr : UInt<1>
    output io_sboard_clra : UInt<5>
    output io_cp_req_ready : UInt<1>
    input io_cp_req_valid : UInt<1>
    input io_cp_req_bits_cmd : UInt<5>
    input io_cp_req_bits_ldst : UInt<1>
    input io_cp_req_bits_wen : UInt<1>
    input io_cp_req_bits_ren1 : UInt<1>
    input io_cp_req_bits_ren2 : UInt<1>
    input io_cp_req_bits_ren3 : UInt<1>
    input io_cp_req_bits_swap12 : UInt<1>
    input io_cp_req_bits_swap23 : UInt<1>
    input io_cp_req_bits_single : UInt<1>
    input io_cp_req_bits_fromint : UInt<1>
    input io_cp_req_bits_toint : UInt<1>
    input io_cp_req_bits_fastpipe : UInt<1>
    input io_cp_req_bits_fma : UInt<1>
    input io_cp_req_bits_div : UInt<1>
    input io_cp_req_bits_sqrt : UInt<1>
    input io_cp_req_bits_round : UInt<1>
    input io_cp_req_bits_wflags : UInt<1>
    input io_cp_req_bits_rm : UInt<3>
    input io_cp_req_bits_typ : UInt<2>
    input io_cp_req_bits_in1 : UInt<65>
    input io_cp_req_bits_in2 : UInt<65>
    input io_cp_req_bits_in3 : UInt<65>
    input io_cp_resp_ready : UInt<1>
    output io_cp_resp_valid : UInt<1>
    output io_cp_resp_bits_data : UInt<65>
    output io_cp_resp_bits_exc : UInt<5>
  
    reg ex_reg_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node req_valid = or(ex_reg_valid, io_cp_req_valid)
    reg ex_reg_inst : UInt<32>, clk with :
      reset => (UInt<1>("h0"), ex_reg_inst)
    node GEN_0 = mux(io_valid, io_inst, ex_reg_inst)
    node ex_cp_valid = and(io_cp_req_ready, io_cp_req_valid)
    node T_194 = eq(io_killx, UInt<1>("h0"))
    node T_195 = and(ex_reg_valid, T_194)
    node T_196 = or(T_195, ex_cp_valid)
    reg mem_reg_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg mem_reg_inst : UInt<32>, clk with :
      reset => (UInt<1>("h0"), mem_reg_inst)
    node GEN_1 = mux(ex_reg_valid, ex_reg_inst, mem_reg_inst)
    reg mem_cp_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_199 = or(io_killm, io_nack_mem)
    node T_201 = eq(mem_cp_valid, UInt<1>("h0"))
    node killm = and(T_199, T_201)
    node T_203 = eq(killm, UInt<1>("h0"))
    node T_204 = or(T_203, mem_cp_valid)
    node T_205 = and(mem_reg_valid, T_204)
    reg wb_reg_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg wb_cp_valid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    inst fp_decoder of FPUDecoder
    wire cp_ctrl_cmd : UInt<5>
    wire cp_ctrl_ldst : UInt<1>
    wire cp_ctrl_wen : UInt<1>
    wire cp_ctrl_ren1 : UInt<1>
    wire cp_ctrl_ren2 : UInt<1>
    wire cp_ctrl_ren3 : UInt<1>
    wire cp_ctrl_swap12 : UInt<1>
    wire cp_ctrl_swap23 : UInt<1>
    wire cp_ctrl_single : UInt<1>
    wire cp_ctrl_fromint : UInt<1>
    wire cp_ctrl_toint : UInt<1>
    wire cp_ctrl_fastpipe : UInt<1>
    wire cp_ctrl_fma : UInt<1>
    wire cp_ctrl_div : UInt<1>
    wire cp_ctrl_sqrt : UInt<1>
    wire cp_ctrl_round : UInt<1>
    wire cp_ctrl_wflags : UInt<1>
    reg T_245_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_245_cmd)
    reg T_245_ldst : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_ldst)
    reg T_245_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_wen)
    reg T_245_ren1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_ren1)
    reg T_245_ren2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_ren2)
    reg T_245_ren3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_ren3)
    reg T_245_swap12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_swap12)
    reg T_245_swap23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_swap23)
    reg T_245_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_single)
    reg T_245_fromint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_fromint)
    reg T_245_toint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_toint)
    reg T_245_fastpipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_fastpipe)
    reg T_245_fma : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_fma)
    reg T_245_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_div)
    reg T_245_sqrt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_sqrt)
    reg T_245_round : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_round)
    reg T_245_wflags : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_245_wflags)
    node GEN_2 = mux(io_valid, fp_decoder.io_sigs_cmd, T_245_cmd)
    node GEN_3 = mux(io_valid, fp_decoder.io_sigs_ldst, T_245_ldst)
    node GEN_4 = mux(io_valid, fp_decoder.io_sigs_wen, T_245_wen)
    node GEN_5 = mux(io_valid, fp_decoder.io_sigs_ren1, T_245_ren1)
    node GEN_6 = mux(io_valid, fp_decoder.io_sigs_ren2, T_245_ren2)
    node GEN_7 = mux(io_valid, fp_decoder.io_sigs_ren3, T_245_ren3)
    node GEN_8 = mux(io_valid, fp_decoder.io_sigs_swap12, T_245_swap12)
    node GEN_9 = mux(io_valid, fp_decoder.io_sigs_swap23, T_245_swap23)
    node GEN_10 = mux(io_valid, fp_decoder.io_sigs_single, T_245_single)
    node GEN_11 = mux(io_valid, fp_decoder.io_sigs_fromint, T_245_fromint)
    node GEN_12 = mux(io_valid, fp_decoder.io_sigs_toint, T_245_toint)
    node GEN_13 = mux(io_valid, fp_decoder.io_sigs_fastpipe, T_245_fastpipe)
    node GEN_14 = mux(io_valid, fp_decoder.io_sigs_fma, T_245_fma)
    node GEN_15 = mux(io_valid, fp_decoder.io_sigs_div, T_245_div)
    node GEN_16 = mux(io_valid, fp_decoder.io_sigs_sqrt, T_245_sqrt)
    node GEN_17 = mux(io_valid, fp_decoder.io_sigs_round, T_245_round)
    node GEN_18 = mux(io_valid, fp_decoder.io_sigs_wflags, T_245_wflags)
    node ex_ctrl_cmd = mux(ex_cp_valid, cp_ctrl_cmd, T_245_cmd)
    node ex_ctrl_ldst = mux(ex_cp_valid, cp_ctrl_ldst, T_245_ldst)
    node ex_ctrl_wen = mux(ex_cp_valid, cp_ctrl_wen, T_245_wen)
    node ex_ctrl_ren1 = mux(ex_cp_valid, cp_ctrl_ren1, T_245_ren1)
    node ex_ctrl_ren2 = mux(ex_cp_valid, cp_ctrl_ren2, T_245_ren2)
    node ex_ctrl_ren3 = mux(ex_cp_valid, cp_ctrl_ren3, T_245_ren3)
    node ex_ctrl_swap12 = mux(ex_cp_valid, cp_ctrl_swap12, T_245_swap12)
    node ex_ctrl_swap23 = mux(ex_cp_valid, cp_ctrl_swap23, T_245_swap23)
    node ex_ctrl_single = mux(ex_cp_valid, cp_ctrl_single, T_245_single)
    node ex_ctrl_fromint = mux(ex_cp_valid, cp_ctrl_fromint, T_245_fromint)
    node ex_ctrl_toint = mux(ex_cp_valid, cp_ctrl_toint, T_245_toint)
    node ex_ctrl_fastpipe = mux(ex_cp_valid, cp_ctrl_fastpipe, T_245_fastpipe)
    node ex_ctrl_fma = mux(ex_cp_valid, cp_ctrl_fma, T_245_fma)
    node ex_ctrl_div = mux(ex_cp_valid, cp_ctrl_div, T_245_div)
    node ex_ctrl_sqrt = mux(ex_cp_valid, cp_ctrl_sqrt, T_245_sqrt)
    node ex_ctrl_round = mux(ex_cp_valid, cp_ctrl_round, T_245_round)
    node ex_ctrl_wflags = mux(ex_cp_valid, cp_ctrl_wflags, T_245_wflags)
    reg mem_ctrl_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_cmd)
    reg mem_ctrl_ldst : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_ldst)
    reg mem_ctrl_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_wen)
    reg mem_ctrl_ren1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_ren1)
    reg mem_ctrl_ren2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_ren2)
    reg mem_ctrl_ren3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_ren3)
    reg mem_ctrl_swap12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_swap12)
    reg mem_ctrl_swap23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_swap23)
    reg mem_ctrl_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_single)
    reg mem_ctrl_fromint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_fromint)
    reg mem_ctrl_toint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_toint)
    reg mem_ctrl_fastpipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_fastpipe)
    reg mem_ctrl_fma : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_fma)
    reg mem_ctrl_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_div)
    reg mem_ctrl_sqrt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_sqrt)
    reg mem_ctrl_round : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_round)
    reg mem_ctrl_wflags : UInt<1>, clk with :
      reset => (UInt<1>("h0"), mem_ctrl_wflags)
    node GEN_19 = mux(req_valid, ex_ctrl_cmd, mem_ctrl_cmd)
    node GEN_20 = mux(req_valid, ex_ctrl_ldst, mem_ctrl_ldst)
    node GEN_21 = mux(req_valid, ex_ctrl_wen, mem_ctrl_wen)
    node GEN_22 = mux(req_valid, ex_ctrl_ren1, mem_ctrl_ren1)
    node GEN_23 = mux(req_valid, ex_ctrl_ren2, mem_ctrl_ren2)
    node GEN_24 = mux(req_valid, ex_ctrl_ren3, mem_ctrl_ren3)
    node GEN_25 = mux(req_valid, ex_ctrl_swap12, mem_ctrl_swap12)
    node GEN_26 = mux(req_valid, ex_ctrl_swap23, mem_ctrl_swap23)
    node GEN_27 = mux(req_valid, ex_ctrl_single, mem_ctrl_single)
    node GEN_28 = mux(req_valid, ex_ctrl_fromint, mem_ctrl_fromint)
    node GEN_29 = mux(req_valid, ex_ctrl_toint, mem_ctrl_toint)
    node GEN_30 = mux(req_valid, ex_ctrl_fastpipe, mem_ctrl_fastpipe)
    node GEN_31 = mux(req_valid, ex_ctrl_fma, mem_ctrl_fma)
    node GEN_32 = mux(req_valid, ex_ctrl_div, mem_ctrl_div)
    node GEN_33 = mux(req_valid, ex_ctrl_sqrt, mem_ctrl_sqrt)
    node GEN_34 = mux(req_valid, ex_ctrl_round, mem_ctrl_round)
    node GEN_35 = mux(req_valid, ex_ctrl_wflags, mem_ctrl_wflags)
    reg wb_ctrl_cmd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_cmd)
    reg wb_ctrl_ldst : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_ldst)
    reg wb_ctrl_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_wen)
    reg wb_ctrl_ren1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_ren1)
    reg wb_ctrl_ren2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_ren2)
    reg wb_ctrl_ren3 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_ren3)
    reg wb_ctrl_swap12 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_swap12)
    reg wb_ctrl_swap23 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_swap23)
    reg wb_ctrl_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_single)
    reg wb_ctrl_fromint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_fromint)
    reg wb_ctrl_toint : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_toint)
    reg wb_ctrl_fastpipe : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_fastpipe)
    reg wb_ctrl_fma : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_fma)
    reg wb_ctrl_div : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_div)
    reg wb_ctrl_sqrt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_sqrt)
    reg wb_ctrl_round : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_round)
    reg wb_ctrl_wflags : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wb_ctrl_wflags)
    node GEN_36 = mux(mem_reg_valid, mem_ctrl_cmd, wb_ctrl_cmd)
    node GEN_37 = mux(mem_reg_valid, mem_ctrl_ldst, wb_ctrl_ldst)
    node GEN_38 = mux(mem_reg_valid, mem_ctrl_wen, wb_ctrl_wen)
    node GEN_39 = mux(mem_reg_valid, mem_ctrl_ren1, wb_ctrl_ren1)
    node GEN_40 = mux(mem_reg_valid, mem_ctrl_ren2, wb_ctrl_ren2)
    node GEN_41 = mux(mem_reg_valid, mem_ctrl_ren3, wb_ctrl_ren3)
    node GEN_42 = mux(mem_reg_valid, mem_ctrl_swap12, wb_ctrl_swap12)
    node GEN_43 = mux(mem_reg_valid, mem_ctrl_swap23, wb_ctrl_swap23)
    node GEN_44 = mux(mem_reg_valid, mem_ctrl_single, wb_ctrl_single)
    node GEN_45 = mux(mem_reg_valid, mem_ctrl_fromint, wb_ctrl_fromint)
    node GEN_46 = mux(mem_reg_valid, mem_ctrl_toint, wb_ctrl_toint)
    node GEN_47 = mux(mem_reg_valid, mem_ctrl_fastpipe, wb_ctrl_fastpipe)
    node GEN_48 = mux(mem_reg_valid, mem_ctrl_fma, wb_ctrl_fma)
    node GEN_49 = mux(mem_reg_valid, mem_ctrl_div, wb_ctrl_div)
    node GEN_50 = mux(mem_reg_valid, mem_ctrl_sqrt, wb_ctrl_sqrt)
    node GEN_51 = mux(mem_reg_valid, mem_ctrl_round, wb_ctrl_round)
    node GEN_52 = mux(mem_reg_valid, mem_ctrl_wflags, wb_ctrl_wflags)
    reg load_wb : UInt<1>, clk with :
      reset => (UInt<1>("h0"), load_wb)
    node T_314 = bits(io_dmem_resp_type, 0, 0)
    node T_316 = eq(T_314, UInt<1>("h0"))
    reg load_wb_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), load_wb_single)
    node GEN_53 = mux(io_dmem_resp_val, T_316, load_wb_single)
    reg load_wb_data : UInt<64>, clk with :
      reset => (UInt<1>("h0"), load_wb_data)
    node GEN_54 = mux(io_dmem_resp_val, io_dmem_resp_data, load_wb_data)
    reg load_wb_tag : UInt<5>, clk with :
      reset => (UInt<1>("h0"), load_wb_tag)
    node GEN_55 = mux(io_dmem_resp_val, io_dmem_resp_tag, load_wb_tag)
    node T_317 = bits(load_wb_data, 31, 31)
    node T_318 = bits(load_wb_data, 30, 23)
    node T_319 = bits(load_wb_data, 22, 0)
    node T_321 = eq(T_318, UInt<8>("h0"))
    node T_323 = eq(T_319, UInt<23>("h0"))
    node T_324 = and(T_321, T_323)
    node GEN_165 = pad(T_319, 32)
    node T_325 = shlw(GEN_165, 9)
    node T_326 = bits(T_325, 31, 16)
    node T_327 = bits(T_325, 15, 0)
    node T_329 = neq(T_326, UInt<16>("h0"))
    node T_330 = bits(T_326, 15, 8)
    node T_331 = bits(T_326, 7, 0)
    node T_333 = neq(T_330, UInt<8>("h0"))
    node T_334 = bits(T_330, 7, 4)
    node T_335 = bits(T_330, 3, 0)
    node T_337 = neq(T_334, UInt<4>("h0"))
    node T_338 = bits(T_334, 3, 3)
    node T_340 = bits(T_334, 2, 2)
    node T_342 = bits(T_334, 1, 1)
    node T_344 = mux(T_340, UInt<2>("h2"), pad(T_342, 2))
    node T_345 = mux(T_338, UInt<2>("h3"), T_344)
    node T_346 = bits(T_335, 3, 3)
    node T_348 = bits(T_335, 2, 2)
    node T_350 = bits(T_335, 1, 1)
    node T_352 = mux(T_348, UInt<2>("h2"), pad(T_350, 2))
    node T_353 = mux(T_346, UInt<2>("h3"), T_352)
    node T_354 = mux(T_337, T_345, T_353)
    node T_355 = cat(T_337, T_354)
    node T_356 = bits(T_331, 7, 4)
    node T_357 = bits(T_331, 3, 0)
    node T_359 = neq(T_356, UInt<4>("h0"))
    node T_360 = bits(T_356, 3, 3)
    node T_362 = bits(T_356, 2, 2)
    node T_364 = bits(T_356, 1, 1)
    node T_366 = mux(T_362, UInt<2>("h2"), pad(T_364, 2))
    node T_367 = mux(T_360, UInt<2>("h3"), T_366)
    node T_368 = bits(T_357, 3, 3)
    node T_370 = bits(T_357, 2, 2)
    node T_372 = bits(T_357, 1, 1)
    node T_374 = mux(T_370, UInt<2>("h2"), pad(T_372, 2))
    node T_375 = mux(T_368, UInt<2>("h3"), T_374)
    node T_376 = mux(T_359, T_367, T_375)
    node T_377 = cat(T_359, T_376)
    node T_378 = mux(T_333, T_355, T_377)
    node T_379 = cat(T_333, T_378)
    node T_380 = bits(T_327, 15, 8)
    node T_381 = bits(T_327, 7, 0)
    node T_383 = neq(T_380, UInt<8>("h0"))
    node T_384 = bits(T_380, 7, 4)
    node T_385 = bits(T_380, 3, 0)
    node T_387 = neq(T_384, UInt<4>("h0"))
    node T_388 = bits(T_384, 3, 3)
    node T_390 = bits(T_384, 2, 2)
    node T_392 = bits(T_384, 1, 1)
    node T_394 = mux(T_390, UInt<2>("h2"), pad(T_392, 2))
    node T_395 = mux(T_388, UInt<2>("h3"), T_394)
    node T_396 = bits(T_385, 3, 3)
    node T_398 = bits(T_385, 2, 2)
    node T_400 = bits(T_385, 1, 1)
    node T_402 = mux(T_398, UInt<2>("h2"), pad(T_400, 2))
    node T_403 = mux(T_396, UInt<2>("h3"), T_402)
    node T_404 = mux(T_387, T_395, T_403)
    node T_405 = cat(T_387, T_404)
    node T_406 = bits(T_381, 7, 4)
    node T_407 = bits(T_381, 3, 0)
    node T_409 = neq(T_406, UInt<4>("h0"))
    node T_410 = bits(T_406, 3, 3)
    node T_412 = bits(T_406, 2, 2)
    node T_414 = bits(T_406, 1, 1)
    node T_416 = mux(T_412, UInt<2>("h2"), pad(T_414, 2))
    node T_417 = mux(T_410, UInt<2>("h3"), T_416)
    node T_418 = bits(T_407, 3, 3)
    node T_420 = bits(T_407, 2, 2)
    node T_422 = bits(T_407, 1, 1)
    node T_424 = mux(T_420, UInt<2>("h2"), pad(T_422, 2))
    node T_425 = mux(T_418, UInt<2>("h3"), T_424)
    node T_426 = mux(T_409, T_417, T_425)
    node T_427 = cat(T_409, T_426)
    node T_428 = mux(T_383, T_405, T_427)
    node T_429 = cat(T_383, T_428)
    node T_430 = mux(T_329, T_379, T_429)
    node T_431 = cat(T_329, T_430)
    node T_432 = not(T_431)
    node GEN_166 = pad(T_319, 54)
    node T_433 = dshlw(GEN_166, T_432)
    node T_434 = bits(T_433, 21, 0)
    node T_436 = cat(T_434, UInt<1>("h0"))
    node GEN_167 = pad(T_432, 9)
    node T_442 = xor(GEN_167, UInt<9>("h1ff"))
    node T_443 = mux(T_321, T_442, pad(T_318, 9))
    node T_447 = mux(T_321, UInt<2>("h2"), UInt<2>("h1"))
    node GEN_168 = pad(T_447, 8)
    node T_448 = or(UInt<8>("h80"), GEN_168)
    node GEN_169 = pad(T_448, 9)
    node T_449 = add(T_443, GEN_169)
    node T_450 = tail(T_449, 1)
    node T_451 = bits(T_450, 8, 7)
    node T_453 = eq(T_451, UInt<2>("h3"))
    node T_455 = eq(T_323, UInt<1>("h0"))
    node T_456 = and(T_453, T_455)
    node T_460 = mux(T_324, UInt<3>("h7"), UInt<3>("h0"))
    node GEN_170 = pad(T_460, 9)
    node T_461 = shlw(GEN_170, 6)
    node T_462 = not(T_461)
    node T_463 = and(T_450, T_462)
    node GEN_171 = pad(T_456, 7)
    node T_464 = shlw(GEN_171, 6)
    node GEN_172 = pad(T_464, 9)
    node T_465 = or(T_463, GEN_172)
    node T_466 = mux(T_321, T_436, T_319)
    node T_467 = cat(T_317, T_465)
    node rec_s = cat(T_467, T_466)
    node T_468 = bits(load_wb_data, 63, 63)
    node T_469 = bits(load_wb_data, 62, 52)
    node T_470 = bits(load_wb_data, 51, 0)
    node T_472 = eq(T_469, UInt<11>("h0"))
    node T_474 = eq(T_470, UInt<52>("h0"))
    node T_475 = and(T_472, T_474)
    node GEN_173 = pad(T_470, 64)
    node T_476 = shlw(GEN_173, 12)
    node T_477 = bits(T_476, 63, 32)
    node T_478 = bits(T_476, 31, 0)
    node T_480 = neq(T_477, UInt<32>("h0"))
    node T_481 = bits(T_477, 31, 16)
    node T_482 = bits(T_477, 15, 0)
    node T_484 = neq(T_481, UInt<16>("h0"))
    node T_485 = bits(T_481, 15, 8)
    node T_486 = bits(T_481, 7, 0)
    node T_488 = neq(T_485, UInt<8>("h0"))
    node T_489 = bits(T_485, 7, 4)
    node T_490 = bits(T_485, 3, 0)
    node T_492 = neq(T_489, UInt<4>("h0"))
    node T_493 = bits(T_489, 3, 3)
    node T_495 = bits(T_489, 2, 2)
    node T_497 = bits(T_489, 1, 1)
    node T_499 = mux(T_495, UInt<2>("h2"), pad(T_497, 2))
    node T_500 = mux(T_493, UInt<2>("h3"), T_499)
    node T_501 = bits(T_490, 3, 3)
    node T_503 = bits(T_490, 2, 2)
    node T_505 = bits(T_490, 1, 1)
    node T_507 = mux(T_503, UInt<2>("h2"), pad(T_505, 2))
    node T_508 = mux(T_501, UInt<2>("h3"), T_507)
    node T_509 = mux(T_492, T_500, T_508)
    node T_510 = cat(T_492, T_509)
    node T_511 = bits(T_486, 7, 4)
    node T_512 = bits(T_486, 3, 0)
    node T_514 = neq(T_511, UInt<4>("h0"))
    node T_515 = bits(T_511, 3, 3)
    node T_517 = bits(T_511, 2, 2)
    node T_519 = bits(T_511, 1, 1)
    node T_521 = mux(T_517, UInt<2>("h2"), pad(T_519, 2))
    node T_522 = mux(T_515, UInt<2>("h3"), T_521)
    node T_523 = bits(T_512, 3, 3)
    node T_525 = bits(T_512, 2, 2)
    node T_527 = bits(T_512, 1, 1)
    node T_529 = mux(T_525, UInt<2>("h2"), pad(T_527, 2))
    node T_530 = mux(T_523, UInt<2>("h3"), T_529)
    node T_531 = mux(T_514, T_522, T_530)
    node T_532 = cat(T_514, T_531)
    node T_533 = mux(T_488, T_510, T_532)
    node T_534 = cat(T_488, T_533)
    node T_535 = bits(T_482, 15, 8)
    node T_536 = bits(T_482, 7, 0)
    node T_538 = neq(T_535, UInt<8>("h0"))
    node T_539 = bits(T_535, 7, 4)
    node T_540 = bits(T_535, 3, 0)
    node T_542 = neq(T_539, UInt<4>("h0"))
    node T_543 = bits(T_539, 3, 3)
    node T_545 = bits(T_539, 2, 2)
    node T_547 = bits(T_539, 1, 1)
    node T_549 = mux(T_545, UInt<2>("h2"), pad(T_547, 2))
    node T_550 = mux(T_543, UInt<2>("h3"), T_549)
    node T_551 = bits(T_540, 3, 3)
    node T_553 = bits(T_540, 2, 2)
    node T_555 = bits(T_540, 1, 1)
    node T_557 = mux(T_553, UInt<2>("h2"), pad(T_555, 2))
    node T_558 = mux(T_551, UInt<2>("h3"), T_557)
    node T_559 = mux(T_542, T_550, T_558)
    node T_560 = cat(T_542, T_559)
    node T_561 = bits(T_536, 7, 4)
    node T_562 = bits(T_536, 3, 0)
    node T_564 = neq(T_561, UInt<4>("h0"))
    node T_565 = bits(T_561, 3, 3)
    node T_567 = bits(T_561, 2, 2)
    node T_569 = bits(T_561, 1, 1)
    node T_571 = mux(T_567, UInt<2>("h2"), pad(T_569, 2))
    node T_572 = mux(T_565, UInt<2>("h3"), T_571)
    node T_573 = bits(T_562, 3, 3)
    node T_575 = bits(T_562, 2, 2)
    node T_577 = bits(T_562, 1, 1)
    node T_579 = mux(T_575, UInt<2>("h2"), pad(T_577, 2))
    node T_580 = mux(T_573, UInt<2>("h3"), T_579)
    node T_581 = mux(T_564, T_572, T_580)
    node T_582 = cat(T_564, T_581)
    node T_583 = mux(T_538, T_560, T_582)
    node T_584 = cat(T_538, T_583)
    node T_585 = mux(T_484, T_534, T_584)
    node T_586 = cat(T_484, T_585)
    node T_587 = bits(T_478, 31, 16)
    node T_588 = bits(T_478, 15, 0)
    node T_590 = neq(T_587, UInt<16>("h0"))
    node T_591 = bits(T_587, 15, 8)
    node T_592 = bits(T_587, 7, 0)
    node T_594 = neq(T_591, UInt<8>("h0"))
    node T_595 = bits(T_591, 7, 4)
    node T_596 = bits(T_591, 3, 0)
    node T_598 = neq(T_595, UInt<4>("h0"))
    node T_599 = bits(T_595, 3, 3)
    node T_601 = bits(T_595, 2, 2)
    node T_603 = bits(T_595, 1, 1)
    node T_605 = mux(T_601, UInt<2>("h2"), pad(T_603, 2))
    node T_606 = mux(T_599, UInt<2>("h3"), T_605)
    node T_607 = bits(T_596, 3, 3)
    node T_609 = bits(T_596, 2, 2)
    node T_611 = bits(T_596, 1, 1)
    node T_613 = mux(T_609, UInt<2>("h2"), pad(T_611, 2))
    node T_614 = mux(T_607, UInt<2>("h3"), T_613)
    node T_615 = mux(T_598, T_606, T_614)
    node T_616 = cat(T_598, T_615)
    node T_617 = bits(T_592, 7, 4)
    node T_618 = bits(T_592, 3, 0)
    node T_620 = neq(T_617, UInt<4>("h0"))
    node T_621 = bits(T_617, 3, 3)
    node T_623 = bits(T_617, 2, 2)
    node T_625 = bits(T_617, 1, 1)
    node T_627 = mux(T_623, UInt<2>("h2"), pad(T_625, 2))
    node T_628 = mux(T_621, UInt<2>("h3"), T_627)
    node T_629 = bits(T_618, 3, 3)
    node T_631 = bits(T_618, 2, 2)
    node T_633 = bits(T_618, 1, 1)
    node T_635 = mux(T_631, UInt<2>("h2"), pad(T_633, 2))
    node T_636 = mux(T_629, UInt<2>("h3"), T_635)
    node T_637 = mux(T_620, T_628, T_636)
    node T_638 = cat(T_620, T_637)
    node T_639 = mux(T_594, T_616, T_638)
    node T_640 = cat(T_594, T_639)
    node T_641 = bits(T_588, 15, 8)
    node T_642 = bits(T_588, 7, 0)
    node T_644 = neq(T_641, UInt<8>("h0"))
    node T_645 = bits(T_641, 7, 4)
    node T_646 = bits(T_641, 3, 0)
    node T_648 = neq(T_645, UInt<4>("h0"))
    node T_649 = bits(T_645, 3, 3)
    node T_651 = bits(T_645, 2, 2)
    node T_653 = bits(T_645, 1, 1)
    node T_655 = mux(T_651, UInt<2>("h2"), pad(T_653, 2))
    node T_656 = mux(T_649, UInt<2>("h3"), T_655)
    node T_657 = bits(T_646, 3, 3)
    node T_659 = bits(T_646, 2, 2)
    node T_661 = bits(T_646, 1, 1)
    node T_663 = mux(T_659, UInt<2>("h2"), pad(T_661, 2))
    node T_664 = mux(T_657, UInt<2>("h3"), T_663)
    node T_665 = mux(T_648, T_656, T_664)
    node T_666 = cat(T_648, T_665)
    node T_667 = bits(T_642, 7, 4)
    node T_668 = bits(T_642, 3, 0)
    node T_670 = neq(T_667, UInt<4>("h0"))
    node T_671 = bits(T_667, 3, 3)
    node T_673 = bits(T_667, 2, 2)
    node T_675 = bits(T_667, 1, 1)
    node T_677 = mux(T_673, UInt<2>("h2"), pad(T_675, 2))
    node T_678 = mux(T_671, UInt<2>("h3"), T_677)
    node T_679 = bits(T_668, 3, 3)
    node T_681 = bits(T_668, 2, 2)
    node T_683 = bits(T_668, 1, 1)
    node T_685 = mux(T_681, UInt<2>("h2"), pad(T_683, 2))
    node T_686 = mux(T_679, UInt<2>("h3"), T_685)
    node T_687 = mux(T_670, T_678, T_686)
    node T_688 = cat(T_670, T_687)
    node T_689 = mux(T_644, T_666, T_688)
    node T_690 = cat(T_644, T_689)
    node T_691 = mux(T_590, T_640, T_690)
    node T_692 = cat(T_590, T_691)
    node T_693 = mux(T_480, T_586, T_692)
    node T_694 = cat(T_480, T_693)
    node T_695 = not(T_694)
    node GEN_174 = pad(T_470, 115)
    node T_696 = dshlw(GEN_174, T_695)
    node T_697 = bits(T_696, 50, 0)
    node T_699 = cat(T_697, UInt<1>("h0"))
    node GEN_175 = pad(T_695, 12)
    node T_705 = xor(GEN_175, UInt<12>("hfff"))
    node T_706 = mux(T_472, T_705, pad(T_469, 12))
    node T_710 = mux(T_472, UInt<2>("h2"), UInt<2>("h1"))
    node GEN_176 = pad(T_710, 11)
    node T_711 = or(UInt<11>("h400"), GEN_176)
    node GEN_177 = pad(T_711, 12)
    node T_712 = add(T_706, GEN_177)
    node T_713 = tail(T_712, 1)
    node T_714 = bits(T_713, 11, 10)
    node T_716 = eq(T_714, UInt<2>("h3"))
    node T_718 = eq(T_474, UInt<1>("h0"))
    node T_719 = and(T_716, T_718)
    node T_723 = mux(T_475, UInt<3>("h7"), UInt<3>("h0"))
    node GEN_178 = pad(T_723, 12)
    node T_724 = shlw(GEN_178, 9)
    node T_725 = not(T_724)
    node T_726 = and(T_713, T_725)
    node GEN_179 = pad(T_719, 10)
    node T_727 = shlw(GEN_179, 9)
    node GEN_180 = pad(T_727, 12)
    node T_728 = or(T_726, GEN_180)
    node T_729 = mux(T_472, T_699, T_470)
    node T_730 = cat(T_468, T_728)
    node T_731 = cat(T_730, T_729)
    node T_733 = cat(UInt<32>("hffffffff"), rec_s)
    node load_wb_data_recoded = mux(load_wb_single, T_733, T_731)
    mem regfile :
      data-type => UInt<65>
      depth => 32
      read-latency => 0
      write-latency => 1
      reader => T_802
      reader => T_803
      reader => T_804
      writer => T_736
      writer => T_1068
      read-under-write => undefined
    regfile.T_802.en <= UInt<1>("h1")
    regfile.T_802.addr <= ex_ra1
    regfile.T_803.en <= UInt<1>("h1")
    regfile.T_803.addr <= ex_ra2
    regfile.T_804.en <= UInt<1>("h1")
    regfile.T_804.addr <= ex_ra3
    regfile.T_736.en <= load_wb
    regfile.T_736.mask <= load_wb
    regfile.T_736.addr <= load_wb_tag
    regfile.T_736.data <= load_wb_data_recoded
    regfile.T_1068.en <= T_1067
    regfile.T_1068.mask <= T_1067
    regfile.T_1068.addr <= waddr
    regfile.T_1068.data <= wdata
    reg ex_ra1 : UInt<5>, clk with :
      reset => (UInt<1>("h0"), ex_ra1)
    reg ex_ra2 : UInt<5>, clk with :
      reset => (UInt<1>("h0"), ex_ra2)
    reg ex_ra3 : UInt<5>, clk with :
      reset => (UInt<1>("h0"), ex_ra3)
    node T_741 = eq(fp_decoder.io_sigs_swap12, UInt<1>("h0"))
    node T_742 = bits(io_inst, 19, 15)
    node GEN_60 = mux(T_741, T_742, ex_ra1)
    node GEN_61 = mux(fp_decoder.io_sigs_swap12, T_742, ex_ra2)
    node GEN_62 = mux(fp_decoder.io_sigs_ren1, GEN_60, ex_ra1)
    node GEN_63 = mux(fp_decoder.io_sigs_ren1, GEN_61, ex_ra2)
    node T_744 = bits(io_inst, 24, 20)
    node GEN_64 = mux(fp_decoder.io_sigs_swap12, T_744, GEN_62)
    node GEN_65 = mux(fp_decoder.io_sigs_swap23, T_744, ex_ra3)
    node T_749 = eq(fp_decoder.io_sigs_swap23, UInt<1>("h0"))
    node T_750 = and(T_741, T_749)
    node GEN_66 = mux(T_750, T_744, GEN_63)
    node GEN_67 = mux(fp_decoder.io_sigs_ren2, GEN_64, GEN_62)
    node GEN_68 = mux(fp_decoder.io_sigs_ren2, GEN_65, ex_ra3)
    node GEN_69 = mux(fp_decoder.io_sigs_ren2, GEN_66, GEN_63)
    node T_752 = bits(io_inst, 31, 27)
    node GEN_70 = mux(fp_decoder.io_sigs_ren3, T_752, GEN_68)
    node GEN_71 = mux(io_valid, GEN_67, ex_ra1)
    node GEN_72 = mux(io_valid, GEN_69, ex_ra2)
    node GEN_73 = mux(io_valid, GEN_70, ex_ra3)
    node T_753 = bits(ex_reg_inst, 14, 12)
    node T_755 = eq(T_753, UInt<3>("h7"))
    node ex_rm = mux(T_755, io_fcsr_rm, T_753)
    wire req_cmd : UInt<5>
    wire req_ldst : UInt<1>
    wire req_wen : UInt<1>
    wire req_ren1 : UInt<1>
    wire req_ren2 : UInt<1>
    wire req_ren3 : UInt<1>
    wire req_swap12 : UInt<1>
    wire req_swap23 : UInt<1>
    wire req_single : UInt<1>
    wire req_fromint : UInt<1>
    wire req_toint : UInt<1>
    wire req_fastpipe : UInt<1>
    wire req_fma : UInt<1>
    wire req_div : UInt<1>
    wire req_sqrt : UInt<1>
    wire req_round : UInt<1>
    wire req_wflags : UInt<1>
    wire req_rm : UInt<3>
    wire req_typ : UInt<2>
    wire req_in1 : UInt<65>
    wire req_in2 : UInt<65>
    wire req_in3 : UInt<65>
    node T_805 = bits(ex_reg_inst, 21, 20)
    node GEN_74 = mux(io_cp_req_bits_swap23, io_cp_req_bits_in3, io_cp_req_bits_in2)
    node GEN_75 = mux(io_cp_req_bits_swap23, io_cp_req_bits_in2, io_cp_req_bits_in3)
    node GEN_76 = mux(ex_cp_valid, io_cp_req_bits_cmd, ex_ctrl_cmd)
    node GEN_77 = mux(ex_cp_valid, io_cp_req_bits_ldst, ex_ctrl_ldst)
    node GEN_78 = mux(ex_cp_valid, io_cp_req_bits_wen, ex_ctrl_wen)
    node GEN_79 = mux(ex_cp_valid, io_cp_req_bits_ren1, ex_ctrl_ren1)
    node GEN_80 = mux(ex_cp_valid, io_cp_req_bits_ren2, ex_ctrl_ren2)
    node GEN_81 = mux(ex_cp_valid, io_cp_req_bits_ren3, ex_ctrl_ren3)
    node GEN_82 = mux(ex_cp_valid, io_cp_req_bits_swap12, ex_ctrl_swap12)
    node GEN_83 = mux(ex_cp_valid, io_cp_req_bits_swap23, ex_ctrl_swap23)
    node GEN_84 = mux(ex_cp_valid, io_cp_req_bits_single, ex_ctrl_single)
    node GEN_85 = mux(ex_cp_valid, io_cp_req_bits_fromint, ex_ctrl_fromint)
    node GEN_86 = mux(ex_cp_valid, io_cp_req_bits_toint, ex_ctrl_toint)
    node GEN_87 = mux(ex_cp_valid, io_cp_req_bits_fastpipe, ex_ctrl_fastpipe)
    node GEN_88 = mux(ex_cp_valid, io_cp_req_bits_fma, ex_ctrl_fma)
    node GEN_89 = mux(ex_cp_valid, io_cp_req_bits_div, ex_ctrl_div)
    node GEN_90 = mux(ex_cp_valid, io_cp_req_bits_sqrt, ex_ctrl_sqrt)
    node GEN_91 = mux(ex_cp_valid, io_cp_req_bits_round, ex_ctrl_round)
    node GEN_92 = mux(ex_cp_valid, io_cp_req_bits_wflags, ex_ctrl_wflags)
    node GEN_93 = mux(ex_cp_valid, io_cp_req_bits_rm, ex_rm)
    node GEN_94 = mux(ex_cp_valid, io_cp_req_bits_typ, T_805)
    node GEN_95 = mux(ex_cp_valid, io_cp_req_bits_in1, regfile.T_802.data)
    node GEN_96 = mux(ex_cp_valid, GEN_74, regfile.T_803.data)
    node GEN_97 = mux(ex_cp_valid, GEN_75, regfile.T_804.data)
    inst sfma of FPUFMAPipe
    node T_806 = and(req_valid, ex_ctrl_fma)
    node T_807 = and(T_806, ex_ctrl_single)
    inst fpiu of FPToInt
    node T_808 = or(ex_ctrl_toint, ex_ctrl_div)
    node T_809 = or(T_808, ex_ctrl_sqrt)
    node T_812 = and(ex_ctrl_cmd, UInt<5>("hd"))
    node T_813 = eq(UInt<5>("h5"), T_812)
    node T_814 = or(T_809, T_813)
    node T_815 = and(req_valid, T_814)
    node T_816 = and(fpiu.io_out_valid, mem_cp_valid)
    node T_817 = and(T_816, mem_ctrl_toint)
    node GEN_98 = mux(T_817, fpiu.io_out_bits_toint, UInt<64>("h0"))
    inst ifpu of IntToFP
    node T_819 = and(req_valid, ex_ctrl_fromint)
    node T_820 = mux(ex_cp_valid, io_cp_req_bits_in1, pad(io_fromint_data, 65))
    inst fpmu of FPToFP
    node T_821 = and(req_valid, ex_ctrl_fastpipe)
    reg divSqrt_wen : UInt<1>, clk with :
      reset => (UInt<1>("h0"), divSqrt_wen)
    wire divSqrt_inReady : UInt<1>
    reg divSqrt_waddr : UInt<5>, clk with :
      reset => (UInt<1>("h0"), divSqrt_waddr)
    wire divSqrt_wdata : UInt<65>
    wire divSqrt_flags : UInt<5>
    reg divSqrt_in_flight : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg divSqrt_killed : UInt<1>, clk with :
      reset => (UInt<1>("h0"), divSqrt_killed)
    inst FPUFMAPipe_1_1 of FPUFMAPipe_1
    node T_831 = eq(ex_ctrl_single, UInt<1>("h0"))
    node T_832 = and(T_806, T_831)
    node T_839 = and(mem_ctrl_fma, mem_ctrl_single)
    node T_842 = mux(T_839, UInt<2>("h2"), UInt<2>("h0"))
    node T_844 = eq(mem_ctrl_single, UInt<1>("h0"))
    node T_845 = and(mem_ctrl_fma, T_844)
    node T_848 = mux(T_845, UInt<3>("h4"), UInt<3>("h0"))
    node T_849 = or(mem_ctrl_fastpipe, mem_ctrl_fromint)
    node GEN_181 = pad(T_849, 2)
    node T_850 = or(GEN_181, T_842)
    node GEN_182 = pad(T_850, 3)
    node memLatencyMask = or(GEN_182, T_848)
    reg wen : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg wbInfo_0_rd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), wbInfo_0_rd)
    reg wbInfo_0_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wbInfo_0_single)
    reg wbInfo_0_cp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wbInfo_0_cp)
    reg wbInfo_0_pipeid : UInt<2>, clk with :
      reset => (UInt<1>("h0"), wbInfo_0_pipeid)
    reg wbInfo_1_rd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), wbInfo_1_rd)
    reg wbInfo_1_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wbInfo_1_single)
    reg wbInfo_1_cp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wbInfo_1_cp)
    reg wbInfo_1_pipeid : UInt<2>, clk with :
      reset => (UInt<1>("h0"), wbInfo_1_pipeid)
    reg wbInfo_2_rd : UInt<5>, clk with :
      reset => (UInt<1>("h0"), wbInfo_2_rd)
    reg wbInfo_2_single : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wbInfo_2_single)
    reg wbInfo_2_cp : UInt<1>, clk with :
      reset => (UInt<1>("h0"), wbInfo_2_cp)
    reg wbInfo_2_pipeid : UInt<2>, clk with :
      reset => (UInt<1>("h0"), wbInfo_2_pipeid)
    node T_907 = or(mem_ctrl_fma, mem_ctrl_fastpipe)
    node T_908 = or(T_907, mem_ctrl_fromint)
    node mem_wen = and(mem_reg_valid, T_908)
    node T_911 = mux(ex_ctrl_fastpipe, UInt<2>("h2"), UInt<2>("h0"))
    node T_914 = mux(ex_ctrl_fromint, UInt<2>("h2"), UInt<2>("h0"))
    node T_915 = and(ex_ctrl_fma, ex_ctrl_single)
    node T_918 = mux(T_915, UInt<3>("h4"), UInt<3>("h0"))
    node T_921 = and(ex_ctrl_fma, T_831)
    node T_924 = mux(T_921, UInt<4>("h8"), UInt<4>("h0"))
    node T_925 = or(T_911, T_914)
    node GEN_183 = pad(T_925, 3)
    node T_926 = or(GEN_183, T_918)
    node GEN_184 = pad(T_926, 4)
    node T_927 = or(GEN_184, T_924)
    node GEN_185 = pad(memLatencyMask, 4)
    node T_928 = and(GEN_185, T_927)
    node T_930 = neq(T_928, UInt<4>("h0"))
    node T_931 = and(mem_wen, T_930)
    node T_934 = mux(ex_ctrl_fastpipe, UInt<3>("h4"), UInt<3>("h0"))
    node T_937 = mux(ex_ctrl_fromint, UInt<3>("h4"), UInt<3>("h0"))
    node T_941 = mux(T_915, UInt<4>("h8"), UInt<4>("h0"))
    node T_947 = mux(T_921, UInt<5>("h10"), UInt<5>("h0"))
    node T_948 = or(T_934, T_937)
    node GEN_186 = pad(T_948, 4)
    node T_949 = or(GEN_186, T_941)
    node GEN_187 = pad(T_949, 5)
    node T_950 = or(GEN_187, T_947)
    node GEN_188 = pad(wen, 5)
    node T_951 = and(GEN_188, T_950)
    node T_953 = neq(T_951, UInt<5>("h0"))
    node T_954 = or(T_931, T_953)
    reg write_port_busy : UInt<1>, clk with :
      reset => (UInt<1>("h0"), write_port_busy)
    node GEN_100 = mux(req_valid, T_954, write_port_busy)
    node T_955 = bits(wen, 1, 1)
    node GEN_101 = mux(T_955, wbInfo_1_rd, wbInfo_0_rd)
    node GEN_102 = mux(T_955, wbInfo_1_single, wbInfo_0_single)
    node GEN_103 = mux(T_955, wbInfo_1_cp, wbInfo_0_cp)
    node GEN_104 = mux(T_955, wbInfo_1_pipeid, wbInfo_0_pipeid)
    node T_956 = bits(wen, 2, 2)
    node GEN_105 = mux(T_956, wbInfo_2_rd, wbInfo_1_rd)
    node GEN_106 = mux(T_956, wbInfo_2_single, wbInfo_1_single)
    node GEN_107 = mux(T_956, wbInfo_2_cp, wbInfo_1_cp)
    node GEN_108 = mux(T_956, wbInfo_2_pipeid, wbInfo_1_pipeid)
    node T_957 = shr(wen, 1)
    node GEN_189 = pad(T_957, 3)
    node T_961 = or(GEN_189, memLatencyMask)
    node GEN_109 = mux(T_203, T_961, pad(T_957, 3))
    node T_963 = eq(write_port_busy, UInt<1>("h0"))
    node T_964 = bits(memLatencyMask, 0, 0)
    node T_965 = and(T_963, T_964)
    node T_981 = mux(T_845, UInt<2>("h3"), UInt<2>("h0"))
    node GEN_190 = pad(mem_ctrl_fromint, 2)
    node T_983 = or(GEN_190, T_842)
    node T_984 = or(T_983, T_981)
    node T_985 = bits(mem_reg_inst, 11, 7)
    node GEN_110 = mux(T_965, mem_cp_valid, GEN_103)
    node GEN_111 = mux(T_965, mem_ctrl_single, GEN_102)
    node GEN_112 = mux(T_965, T_984, GEN_104)
    node GEN_113 = mux(T_965, T_985, GEN_101)
    node T_988 = bits(memLatencyMask, 1, 1)
    node T_989 = and(T_963, T_988)
    node GEN_114 = mux(T_989, mem_cp_valid, GEN_107)
    node GEN_115 = mux(T_989, mem_ctrl_single, GEN_106)
    node GEN_116 = mux(T_989, T_984, GEN_108)
    node GEN_117 = mux(T_989, T_985, GEN_105)
    node T_1012 = bits(memLatencyMask, 2, 2)
    node T_1013 = and(T_963, T_1012)
    node GEN_118 = mux(T_1013, mem_cp_valid, wbInfo_2_cp)
    node GEN_119 = mux(T_1013, mem_ctrl_single, wbInfo_2_single)
    node GEN_120 = mux(T_1013, T_984, wbInfo_2_pipeid)
    node GEN_121 = mux(T_1013, T_985, wbInfo_2_rd)
    node GEN_122 = mux(mem_wen, GEN_109, pad(T_957, 3))
    node GEN_123 = mux(mem_wen, GEN_110, GEN_103)
    node GEN_124 = mux(mem_wen, GEN_111, GEN_102)
    node GEN_125 = mux(mem_wen, GEN_112, GEN_104)
    node GEN_126 = mux(mem_wen, GEN_113, GEN_101)
    node GEN_127 = mux(mem_wen, GEN_114, GEN_107)
    node GEN_128 = mux(mem_wen, GEN_115, GEN_106)
    node GEN_129 = mux(mem_wen, GEN_116, GEN_108)
    node GEN_130 = mux(mem_wen, GEN_117, GEN_105)
    node GEN_131 = mux(mem_wen, GEN_118, wbInfo_2_cp)
    node GEN_132 = mux(mem_wen, GEN_119, wbInfo_2_single)
    node GEN_133 = mux(mem_wen, GEN_120, wbInfo_2_pipeid)
    node GEN_134 = mux(mem_wen, GEN_121, wbInfo_2_rd)
    node waddr = mux(divSqrt_wen, divSqrt_waddr, wbInfo_0_rd)
    node T_1035 = and(wbInfo_0_pipeid, UInt<2>("h1"))
    node T_1037 = geq(wbInfo_0_pipeid, UInt<2>("h2"))
    node T_1041 = geq(T_1035, UInt<2>("h1"))
    node T_1042 = mux(T_1041, FPUFMAPipe_1_1.io_out_bits_data, sfma.io_out_bits_data)
    node T_1047 = mux(T_1041, ifpu.io_out_bits_data, fpmu.io_out_bits_data)
    node T_1048 = mux(T_1037, T_1042, T_1047)
    node wdata = mux(divSqrt_wen, divSqrt_wdata, T_1048)
    node T_1057 = mux(T_1041, FPUFMAPipe_1_1.io_out_bits_exc, sfma.io_out_bits_exc)
    node T_1062 = mux(T_1041, ifpu.io_out_bits_exc, fpmu.io_out_bits_exc)
    node wexc = mux(T_1037, T_1057, T_1062)
    node T_1064 = eq(wbInfo_0_cp, UInt<1>("h0"))
    node T_1065 = bits(wen, 0, 0)
    node T_1066 = and(T_1064, T_1065)
    node T_1067 = or(T_1066, divSqrt_wen)
    node T_1070 = and(wbInfo_0_cp, T_1065)
    node GEN_139 = mux(T_1070, wdata, pad(GEN_98, 65))
    node GEN_140 = mux(T_1070, UInt<1>("h1"), T_817)
    node T_1073 = eq(ex_reg_valid, UInt<1>("h0"))
    node wb_toint_valid = and(wb_reg_valid, wb_ctrl_toint)
    reg wb_toint_exc : UInt<5>, clk with :
      reset => (UInt<1>("h0"), wb_toint_exc)
    node GEN_141 = mux(mem_ctrl_toint, fpiu.io_out_bits_exc, wb_toint_exc)
    node T_1074 = or(wb_toint_valid, divSqrt_wen)
    node T_1076 = or(T_1074, T_1065)
    node T_1078 = mux(wb_toint_valid, wb_toint_exc, UInt<5>("h0"))
    node T_1080 = mux(divSqrt_wen, divSqrt_flags, UInt<5>("h0"))
    node T_1081 = or(T_1078, T_1080)
    node T_1084 = mux(T_1065, wexc, UInt<5>("h0"))
    node T_1085 = or(T_1081, T_1084)
    node T_1086 = or(mem_ctrl_div, mem_ctrl_sqrt)
    node T_1087 = and(mem_reg_valid, T_1086)
    node T_1089 = eq(divSqrt_inReady, UInt<1>("h0"))
    node T_1091 = neq(wen, UInt<3>("h0"))
    node T_1092 = or(T_1089, T_1091)
    node units_busy = and(T_1087, T_1092)
    node T_1093 = and(ex_reg_valid, ex_ctrl_wflags)
    node T_1094 = and(mem_reg_valid, mem_ctrl_wflags)
    node T_1095 = or(T_1093, T_1094)
    node T_1097 = or(T_1095, wb_toint_valid)
    node T_1100 = or(T_1097, T_1091)
    node T_1101 = or(T_1100, divSqrt_in_flight)
    node T_1103 = eq(T_1101, UInt<1>("h0"))
    node T_1104 = or(units_busy, write_port_busy)
    node T_1105 = or(T_1104, divSqrt_in_flight)
    node T_1107 = eq(wb_cp_valid, UInt<1>("h0"))
    node T_1108 = and(wb_reg_valid, T_1107)
    node T_1114 = or(T_845, mem_ctrl_div)
    node T_1115 = or(T_1114, mem_ctrl_sqrt)
    reg T_1116 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_1116)
    node T_1117 = and(T_1108, T_1116)
    node T_1122 = eq(wbInfo_0_pipeid, UInt<2>("h3"))
    node T_1125 = and(T_1065, T_1122)
    node T_1126 = or(divSqrt_wen, T_1125)
    node T_1127 = and(T_1107, T_1126)
    node T_1128 = bits(ex_rm, 2, 2)
    node T_1129 = and(T_1128, ex_ctrl_round)
    reg T_1133 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_1133)
    reg T_1135 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_1135)
    reg T_1137 : UInt<5>, clk with :
      reset => (UInt<1>("h0"), T_1137)
    reg T_1139 : UInt<65>, clk with :
      reset => (UInt<1>("h0"), T_1139)
    inst DivSqrtRecF64_1 of DivSqrtRecF64
    node T_1140 = mux(DivSqrtRecF64_1.io_sqrtOp, DivSqrtRecF64_1.io_inReady_sqrt, DivSqrtRecF64_1.io_inReady_div)
    node T_1141 = or(DivSqrtRecF64_1.io_outValid_div, DivSqrtRecF64_1.io_outValid_sqrt)
    node T_1145 = eq(divSqrt_in_flight, UInt<1>("h0"))
    node T_1146 = and(T_1087, T_1145)
    node T_1147 = and(DivSqrtRecF64_1.io_inValid, divSqrt_inReady)
    node GEN_142 = mux(T_1147, UInt<1>("h1"), divSqrt_in_flight)
    node GEN_143 = mux(T_1147, killm, divSqrt_killed)
    node GEN_144 = mux(T_1147, mem_ctrl_single, T_1133)
    node GEN_145 = mux(T_1147, T_985, divSqrt_waddr)
    node GEN_146 = mux(T_1147, DivSqrtRecF64_1.io_roundingMode, T_1135)
    node T_1151 = eq(divSqrt_killed, UInt<1>("h0"))
    node GEN_147 = mux(T_1141, T_1151, UInt<1>("h0"))
    node GEN_148 = mux(T_1141, DivSqrtRecF64_1.io_out, T_1139)
    node GEN_149 = mux(T_1141, UInt<1>("h0"), GEN_142)
    node GEN_150 = mux(T_1141, DivSqrtRecF64_1.io_exceptionFlags, T_1137)
    inst RecFNToRecFN_2_1 of RecFNToRecFN_2
    node T_1153 = mux(T_1133, pad(RecFNToRecFN_2_1.io_out, 65), T_1139)
    node T_1155 = mux(T_1133, RecFNToRecFN_2_1.io_exceptionFlags, UInt<5>("h0"))
    node T_1156 = or(T_1137, T_1155)
    io_fcsr_flags_valid <= T_1076
    io_fcsr_flags_bits <= T_1085
    io_store_data <= fpiu.io_out_bits_store
    io_toint_data <= fpiu.io_out_bits_toint
    io_fcsr_rdy <= T_1103
    io_nack_mem <= T_1105
    io_illegal_rm <= T_1129
    io_dec_cmd <= fp_decoder.io_sigs_cmd
    io_dec_ldst <= fp_decoder.io_sigs_ldst
    io_dec_wen <= fp_decoder.io_sigs_wen
    io_dec_ren1 <= fp_decoder.io_sigs_ren1
    io_dec_ren2 <= fp_decoder.io_sigs_ren2
    io_dec_ren3 <= fp_decoder.io_sigs_ren3
    io_dec_swap12 <= fp_decoder.io_sigs_swap12
    io_dec_swap23 <= fp_decoder.io_sigs_swap23
    io_dec_single <= fp_decoder.io_sigs_single
    io_dec_fromint <= fp_decoder.io_sigs_fromint
    io_dec_toint <= fp_decoder.io_sigs_toint
    io_dec_fastpipe <= fp_decoder.io_sigs_fastpipe
    io_dec_fma <= fp_decoder.io_sigs_fma
    io_dec_div <= fp_decoder.io_sigs_div
    io_dec_sqrt <= fp_decoder.io_sigs_sqrt
    io_dec_round <= fp_decoder.io_sigs_round
    io_dec_wflags <= fp_decoder.io_sigs_wflags
    io_sboard_set <= T_1117
    io_sboard_clr <= T_1127
    io_sboard_clra <= waddr
    io_cp_req_ready <= T_1073
    io_cp_resp_valid <= GEN_140
    io_cp_resp_bits_data <= GEN_139
    io_cp_resp_bits_exc <= UInt<5>("h1c")
    ex_reg_valid <= io_valid
    ex_reg_inst <= GEN_0
    mem_reg_valid <= T_196
    mem_reg_inst <= GEN_1
    mem_cp_valid <= ex_cp_valid
    wb_reg_valid <= T_205
    wb_cp_valid <= mem_cp_valid
    fp_decoder.io_inst <= io_inst
    cp_ctrl_cmd <= io_cp_req_bits_cmd
    cp_ctrl_ldst <= io_cp_req_bits_ldst
    cp_ctrl_wen <= io_cp_req_bits_wen
    cp_ctrl_ren1 <= io_cp_req_bits_ren1
    cp_ctrl_ren2 <= io_cp_req_bits_ren2
    cp_ctrl_ren3 <= io_cp_req_bits_ren3
    cp_ctrl_swap12 <= io_cp_req_bits_swap12
    cp_ctrl_swap23 <= io_cp_req_bits_swap23
    cp_ctrl_single <= io_cp_req_bits_single
    cp_ctrl_fromint <= io_cp_req_bits_fromint
    cp_ctrl_toint <= io_cp_req_bits_toint
    cp_ctrl_fastpipe <= io_cp_req_bits_fastpipe
    cp_ctrl_fma <= io_cp_req_bits_fma
    cp_ctrl_div <= io_cp_req_bits_div
    cp_ctrl_sqrt <= io_cp_req_bits_sqrt
    cp_ctrl_round <= io_cp_req_bits_round
    cp_ctrl_wflags <= io_cp_req_bits_wflags
    T_245_cmd <= GEN_2
    T_245_ldst <= GEN_3
    T_245_wen <= GEN_4
    T_245_ren1 <= GEN_5
    T_245_ren2 <= GEN_6
    T_245_ren3 <= GEN_7
    T_245_swap12 <= GEN_8
    T_245_swap23 <= GEN_9
    T_245_single <= GEN_10
    T_245_fromint <= GEN_11
    T_245_toint <= GEN_12
    T_245_fastpipe <= GEN_13
    T_245_fma <= GEN_14
    T_245_div <= GEN_15
    T_245_sqrt <= GEN_16
    T_245_round <= GEN_17
    T_245_wflags <= GEN_18
    mem_ctrl_cmd <= GEN_19
    mem_ctrl_ldst <= GEN_20
    mem_ctrl_wen <= GEN_21
    mem_ctrl_ren1 <= GEN_22
    mem_ctrl_ren2 <= GEN_23
    mem_ctrl_ren3 <= GEN_24
    mem_ctrl_swap12 <= GEN_25
    mem_ctrl_swap23 <= GEN_26
    mem_ctrl_single <= GEN_27
    mem_ctrl_fromint <= GEN_28
    mem_ctrl_toint <= GEN_29
    mem_ctrl_fastpipe <= GEN_30
    mem_ctrl_fma <= GEN_31
    mem_ctrl_div <= GEN_32
    mem_ctrl_sqrt <= GEN_33
    mem_ctrl_round <= GEN_34
    mem_ctrl_wflags <= GEN_35
    wb_ctrl_cmd <= GEN_36
    wb_ctrl_ldst <= GEN_37
    wb_ctrl_wen <= GEN_38
    wb_ctrl_ren1 <= GEN_39
    wb_ctrl_ren2 <= GEN_40
    wb_ctrl_ren3 <= GEN_41
    wb_ctrl_swap12 <= GEN_42
    wb_ctrl_swap23 <= GEN_43
    wb_ctrl_single <= GEN_44
    wb_ctrl_fromint <= GEN_45
    wb_ctrl_toint <= GEN_46
    wb_ctrl_fastpipe <= GEN_47
    wb_ctrl_fma <= GEN_48
    wb_ctrl_div <= GEN_49
    wb_ctrl_sqrt <= GEN_50
    wb_ctrl_round <= GEN_51
    wb_ctrl_wflags <= GEN_52
    load_wb <= io_dmem_resp_val
    load_wb_single <= GEN_53
    load_wb_data <= GEN_54
    load_wb_tag <= GEN_55
    ex_ra1 <= GEN_71
    ex_ra2 <= GEN_72
    ex_ra3 <= GEN_73
    req_cmd <= GEN_76
    req_ldst <= GEN_77
    req_wen <= GEN_78
    req_ren1 <= GEN_79
    req_ren2 <= GEN_80
    req_ren3 <= GEN_81
    req_swap12 <= GEN_82
    req_swap23 <= GEN_83
    req_single <= GEN_84
    req_fromint <= GEN_85
    req_toint <= GEN_86
    req_fastpipe <= GEN_87
    req_fma <= GEN_88
    req_div <= GEN_89
    req_sqrt <= GEN_90
    req_round <= GEN_91
    req_wflags <= GEN_92
    req_rm <= GEN_93
    req_typ <= GEN_94
    req_in1 <= GEN_95
    req_in2 <= GEN_96
    req_in3 <= GEN_97
    sfma.io_in_valid <= T_807
    sfma.io_in_bits_cmd <= req_cmd
    sfma.io_in_bits_ldst <= req_ldst
    sfma.io_in_bits_wen <= req_wen
    sfma.io_in_bits_ren1 <= req_ren1
    sfma.io_in_bits_ren2 <= req_ren2
    sfma.io_in_bits_ren3 <= req_ren3
    sfma.io_in_bits_swap12 <= req_swap12
    sfma.io_in_bits_swap23 <= req_swap23
    sfma.io_in_bits_single <= req_single
    sfma.io_in_bits_fromint <= req_fromint
    sfma.io_in_bits_toint <= req_toint
    sfma.io_in_bits_fastpipe <= req_fastpipe
    sfma.io_in_bits_fma <= req_fma
    sfma.io_in_bits_div <= req_div
    sfma.io_in_bits_sqrt <= req_sqrt
    sfma.io_in_bits_round <= req_round
    sfma.io_in_bits_wflags <= req_wflags
    sfma.io_in_bits_rm <= req_rm
    sfma.io_in_bits_typ <= req_typ
    sfma.io_in_bits_in1 <= req_in1
    sfma.io_in_bits_in2 <= req_in2
    sfma.io_in_bits_in3 <= req_in3
    fpiu.io_in_valid <= T_815
    fpiu.io_in_bits_cmd <= req_cmd
    fpiu.io_in_bits_ldst <= req_ldst
    fpiu.io_in_bits_wen <= req_wen
    fpiu.io_in_bits_ren1 <= req_ren1
    fpiu.io_in_bits_ren2 <= req_ren2
    fpiu.io_in_bits_ren3 <= req_ren3
    fpiu.io_in_bits_swap12 <= req_swap12
    fpiu.io_in_bits_swap23 <= req_swap23
    fpiu.io_in_bits_single <= req_single
    fpiu.io_in_bits_fromint <= req_fromint
    fpiu.io_in_bits_toint <= req_toint
    fpiu.io_in_bits_fastpipe <= req_fastpipe
    fpiu.io_in_bits_fma <= req_fma
    fpiu.io_in_bits_div <= req_div
    fpiu.io_in_bits_sqrt <= req_sqrt
    fpiu.io_in_bits_round <= req_round
    fpiu.io_in_bits_wflags <= req_wflags
    fpiu.io_in_bits_rm <= req_rm
    fpiu.io_in_bits_typ <= req_typ
    fpiu.io_in_bits_in1 <= req_in1
    fpiu.io_in_bits_in2 <= req_in2
    fpiu.io_in_bits_in3 <= req_in3
    ifpu.io_in_valid <= T_819
    ifpu.io_in_bits_cmd <= req_cmd
    ifpu.io_in_bits_ldst <= req_ldst
    ifpu.io_in_bits_wen <= req_wen
    ifpu.io_in_bits_ren1 <= req_ren1
    ifpu.io_in_bits_ren2 <= req_ren2
    ifpu.io_in_bits_ren3 <= req_ren3
    ifpu.io_in_bits_swap12 <= req_swap12
    ifpu.io_in_bits_swap23 <= req_swap23
    ifpu.io_in_bits_single <= req_single
    ifpu.io_in_bits_fromint <= req_fromint
    ifpu.io_in_bits_toint <= req_toint
    ifpu.io_in_bits_fastpipe <= req_fastpipe
    ifpu.io_in_bits_fma <= req_fma
    ifpu.io_in_bits_div <= req_div
    ifpu.io_in_bits_sqrt <= req_sqrt
    ifpu.io_in_bits_round <= req_round
    ifpu.io_in_bits_wflags <= req_wflags
    ifpu.io_in_bits_rm <= req_rm
    ifpu.io_in_bits_typ <= req_typ
    ifpu.io_in_bits_in1 <= T_820
    ifpu.io_in_bits_in2 <= req_in2
    ifpu.io_in_bits_in3 <= req_in3
    fpmu.io_in_valid <= T_821
    fpmu.io_in_bits_cmd <= req_cmd
    fpmu.io_in_bits_ldst <= req_ldst
    fpmu.io_in_bits_wen <= req_wen
    fpmu.io_in_bits_ren1 <= req_ren1
    fpmu.io_in_bits_ren2 <= req_ren2
    fpmu.io_in_bits_ren3 <= req_ren3
    fpmu.io_in_bits_swap12 <= req_swap12
    fpmu.io_in_bits_swap23 <= req_swap23
    fpmu.io_in_bits_single <= req_single
    fpmu.io_in_bits_fromint <= req_fromint
    fpmu.io_in_bits_toint <= req_toint
    fpmu.io_in_bits_fastpipe <= req_fastpipe
    fpmu.io_in_bits_fma <= req_fma
    fpmu.io_in_bits_div <= req_div
    fpmu.io_in_bits_sqrt <= req_sqrt
    fpmu.io_in_bits_round <= req_round
    fpmu.io_in_bits_wflags <= req_wflags
    fpmu.io_in_bits_rm <= req_rm
    fpmu.io_in_bits_typ <= req_typ
    fpmu.io_in_bits_in1 <= req_in1
    fpmu.io_in_bits_in2 <= req_in2
    fpmu.io_in_bits_in3 <= req_in3
    fpmu.io_lt <= fpiu.io_out_bits_lt
    divSqrt_wen <= GEN_147
    divSqrt_inReady <= T_1140
    divSqrt_waddr <= GEN_145
    divSqrt_wdata <= T_1153
    divSqrt_flags <= T_1156
    divSqrt_in_flight <= GEN_149
    divSqrt_killed <= GEN_143
    FPUFMAPipe_1_1.io_in_valid <= T_832
    FPUFMAPipe_1_1.io_in_bits_cmd <= req_cmd
    FPUFMAPipe_1_1.io_in_bits_ldst <= req_ldst
    FPUFMAPipe_1_1.io_in_bits_wen <= req_wen
    FPUFMAPipe_1_1.io_in_bits_ren1 <= req_ren1
    FPUFMAPipe_1_1.io_in_bits_ren2 <= req_ren2
    FPUFMAPipe_1_1.io_in_bits_ren3 <= req_ren3
    FPUFMAPipe_1_1.io_in_bits_swap12 <= req_swap12
    FPUFMAPipe_1_1.io_in_bits_swap23 <= req_swap23
    FPUFMAPipe_1_1.io_in_bits_single <= req_single
    FPUFMAPipe_1_1.io_in_bits_fromint <= req_fromint
    FPUFMAPipe_1_1.io_in_bits_toint <= req_toint
    FPUFMAPipe_1_1.io_in_bits_fastpipe <= req_fastpipe
    FPUFMAPipe_1_1.io_in_bits_fma <= req_fma
    FPUFMAPipe_1_1.io_in_bits_div <= req_div
    FPUFMAPipe_1_1.io_in_bits_sqrt <= req_sqrt
    FPUFMAPipe_1_1.io_in_bits_round <= req_round
    FPUFMAPipe_1_1.io_in_bits_wflags <= req_wflags
    FPUFMAPipe_1_1.io_in_bits_rm <= req_rm
    FPUFMAPipe_1_1.io_in_bits_typ <= req_typ
    FPUFMAPipe_1_1.io_in_bits_in1 <= req_in1
    FPUFMAPipe_1_1.io_in_bits_in2 <= req_in2
    FPUFMAPipe_1_1.io_in_bits_in3 <= req_in3
    wen <= GEN_122
    wbInfo_0_rd <= GEN_126
    wbInfo_0_single <= GEN_124
    wbInfo_0_cp <= GEN_123
    wbInfo_0_pipeid <= GEN_125
    wbInfo_1_rd <= GEN_130
    wbInfo_1_single <= GEN_128
    wbInfo_1_cp <= GEN_127
    wbInfo_1_pipeid <= GEN_129
    wbInfo_2_rd <= GEN_134
    wbInfo_2_single <= GEN_132
    wbInfo_2_cp <= GEN_131
    wbInfo_2_pipeid <= GEN_133
    write_port_busy <= GEN_100
    wb_toint_exc <= GEN_141
    T_1116 <= T_1115
    T_1133 <= GEN_144
    T_1135 <= GEN_146
    T_1137 <= GEN_150
    T_1139 <= GEN_148
    DivSqrtRecF64_1.io_inValid <= T_1146
    DivSqrtRecF64_1.io_sqrtOp <= mem_ctrl_sqrt
    DivSqrtRecF64_1.io_a <= fpiu.io_as_double_in1
    DivSqrtRecF64_1.io_b <= fpiu.io_as_double_in2
    DivSqrtRecF64_1.io_roundingMode <= bits(fpiu.io_as_double_rm, 1, 0)
    RecFNToRecFN_2_1.io_in <= T_1139
    RecFNToRecFN_2_1.io_roundingMode <= T_1135

  module ClientUncachedTileLinkIOArbiter :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_acquire_ready : UInt<1>
    input io_in_0_acquire_valid : UInt<1>
    input io_in_0_acquire_bits_addr_block : UInt<26>
    input io_in_0_acquire_bits_client_xact_id : UInt<1>
    input io_in_0_acquire_bits_addr_beat : UInt<3>
    input io_in_0_acquire_bits_is_builtin_type : UInt<1>
    input io_in_0_acquire_bits_a_type : UInt<3>
    input io_in_0_acquire_bits_union : UInt<11>
    input io_in_0_acquire_bits_data : UInt<64>
    input io_in_0_grant_ready : UInt<1>
    output io_in_0_grant_valid : UInt<1>
    output io_in_0_grant_bits_addr_beat : UInt<3>
    output io_in_0_grant_bits_client_xact_id : UInt<1>
    output io_in_0_grant_bits_manager_xact_id : UInt<4>
    output io_in_0_grant_bits_is_builtin_type : UInt<1>
    output io_in_0_grant_bits_g_type : UInt<4>
    output io_in_0_grant_bits_data : UInt<64>
    input io_out_acquire_ready : UInt<1>
    output io_out_acquire_valid : UInt<1>
    output io_out_acquire_bits_addr_block : UInt<26>
    output io_out_acquire_bits_client_xact_id : UInt<1>
    output io_out_acquire_bits_addr_beat : UInt<3>
    output io_out_acquire_bits_is_builtin_type : UInt<1>
    output io_out_acquire_bits_a_type : UInt<3>
    output io_out_acquire_bits_union : UInt<11>
    output io_out_acquire_bits_data : UInt<64>
    output io_out_grant_ready : UInt<1>
    input io_out_grant_valid : UInt<1>
    input io_out_grant_bits_addr_beat : UInt<3>
    input io_out_grant_bits_client_xact_id : UInt<1>
    input io_out_grant_bits_manager_xact_id : UInt<4>
    input io_out_grant_bits_is_builtin_type : UInt<1>
    input io_out_grant_bits_g_type : UInt<4>
    input io_out_grant_bits_data : UInt<64>
  
    io_in_0_acquire_ready <= io_out_acquire_ready
    io_in_0_grant_valid <= io_out_grant_valid
    io_in_0_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_0_grant_bits_client_xact_id <= io_out_grant_bits_client_xact_id
    io_in_0_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_0_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_0_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_0_grant_bits_data <= io_out_grant_bits_data
    io_out_acquire_valid <= io_in_0_acquire_valid
    io_out_acquire_bits_addr_block <= io_in_0_acquire_bits_addr_block
    io_out_acquire_bits_client_xact_id <= io_in_0_acquire_bits_client_xact_id
    io_out_acquire_bits_addr_beat <= io_in_0_acquire_bits_addr_beat
    io_out_acquire_bits_is_builtin_type <= io_in_0_acquire_bits_is_builtin_type
    io_out_acquire_bits_a_type <= io_in_0_acquire_bits_a_type
    io_out_acquire_bits_union <= io_in_0_acquire_bits_union
    io_out_acquire_bits_data <= io_in_0_acquire_bits_data
    io_out_grant_ready <= io_in_0_grant_ready

  module RRArbiter :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_prv : UInt<2>
    input io_in_0_bits_pum : UInt<1>
    input io_in_0_bits_mxr : UInt<1>
    input io_in_0_bits_addr : UInt<27>
    input io_in_0_bits_store : UInt<1>
    input io_in_0_bits_fetch : UInt<1>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_prv : UInt<2>
    input io_in_1_bits_pum : UInt<1>
    input io_in_1_bits_mxr : UInt<1>
    input io_in_1_bits_addr : UInt<27>
    input io_in_1_bits_store : UInt<1>
    input io_in_1_bits_fetch : UInt<1>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_prv : UInt<2>
    output io_out_bits_pum : UInt<1>
    output io_out_bits_mxr : UInt<1>
    output io_out_bits_addr : UInt<27>
    output io_out_bits_store : UInt<1>
    output io_out_bits_fetch : UInt<1>
    output io_chosen : UInt<1>
  
    wire choice : UInt<1>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_prv : UInt<2>
    wire GEN_0_bits_pum : UInt<1>
    wire GEN_0_bits_mxr : UInt<1>
    wire GEN_0_bits_addr : UInt<27>
    wire GEN_0_bits_store : UInt<1>
    wire GEN_0_bits_fetch : UInt<1>
    node GEN_7 = mux(io_chosen, io_in_1_ready, io_in_0_ready)
    node GEN_8 = mux(io_chosen, io_in_1_valid, io_in_0_valid)
    node GEN_9 = mux(io_chosen, io_in_1_bits_prv, io_in_0_bits_prv)
    node GEN_10 = mux(io_chosen, io_in_1_bits_pum, io_in_0_bits_pum)
    node GEN_11 = mux(io_chosen, io_in_1_bits_mxr, io_in_0_bits_mxr)
    node GEN_12 = mux(io_chosen, io_in_1_bits_addr, io_in_0_bits_addr)
    node GEN_13 = mux(io_chosen, io_in_1_bits_store, io_in_0_bits_store)
    node GEN_14 = mux(io_chosen, io_in_1_bits_fetch, io_in_0_bits_fetch)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_prv : UInt<2>
    wire GEN_1_bits_pum : UInt<1>
    wire GEN_1_bits_mxr : UInt<1>
    wire GEN_1_bits_addr : UInt<27>
    wire GEN_1_bits_store : UInt<1>
    wire GEN_1_bits_fetch : UInt<1>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_prv : UInt<2>
    wire GEN_2_bits_pum : UInt<1>
    wire GEN_2_bits_mxr : UInt<1>
    wire GEN_2_bits_addr : UInt<27>
    wire GEN_2_bits_store : UInt<1>
    wire GEN_2_bits_fetch : UInt<1>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_prv : UInt<2>
    wire GEN_3_bits_pum : UInt<1>
    wire GEN_3_bits_mxr : UInt<1>
    wire GEN_3_bits_addr : UInt<27>
    wire GEN_3_bits_store : UInt<1>
    wire GEN_3_bits_fetch : UInt<1>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_prv : UInt<2>
    wire GEN_4_bits_pum : UInt<1>
    wire GEN_4_bits_mxr : UInt<1>
    wire GEN_4_bits_addr : UInt<27>
    wire GEN_4_bits_store : UInt<1>
    wire GEN_4_bits_fetch : UInt<1>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_prv : UInt<2>
    wire GEN_5_bits_pum : UInt<1>
    wire GEN_5_bits_mxr : UInt<1>
    wire GEN_5_bits_addr : UInt<27>
    wire GEN_5_bits_store : UInt<1>
    wire GEN_5_bits_fetch : UInt<1>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_prv : UInt<2>
    wire GEN_6_bits_pum : UInt<1>
    wire GEN_6_bits_mxr : UInt<1>
    wire GEN_6_bits_addr : UInt<27>
    wire GEN_6_bits_store : UInt<1>
    wire GEN_6_bits_fetch : UInt<1>
    node T_220 = and(io_out_ready, io_out_valid)
    reg lastGrant : UInt<1>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_15 = mux(T_220, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node T_224 = or(validMask_1, io_in_0_valid)
    node T_228 = eq(validMask_1, UInt<1>("h0"))
    node T_230 = eq(T_224, UInt<1>("h0"))
    node T_234 = or(grantMask_1, T_230)
    node T_235 = and(T_228, io_out_ready)
    node T_236 = and(T_234, io_out_ready)
    node GEN_16 = mux(io_in_0_valid, UInt<1>("h0"), UInt<1>("h1"))
    node GEN_17 = mux(validMask_1, UInt<1>("h1"), GEN_16)
    io_in_0_ready <= T_235
    io_in_1_ready <= T_236
    io_out_valid <= GEN_0_valid
    io_out_bits_prv <= GEN_1_bits_prv
    io_out_bits_pum <= GEN_2_bits_pum
    io_out_bits_mxr <= GEN_3_bits_mxr
    io_out_bits_addr <= GEN_4_bits_addr
    io_out_bits_store <= GEN_5_bits_store
    io_out_bits_fetch <= GEN_6_bits_fetch
    io_chosen <= choice
    choice <= GEN_17
    GEN_0_ready <= GEN_7
    GEN_0_valid <= GEN_8
    GEN_0_bits_prv <= GEN_9
    GEN_0_bits_pum <= GEN_10
    GEN_0_bits_mxr <= GEN_11
    GEN_0_bits_addr <= GEN_12
    GEN_0_bits_store <= GEN_13
    GEN_0_bits_fetch <= GEN_14
    GEN_1_ready <= GEN_7
    GEN_1_valid <= GEN_8
    GEN_1_bits_prv <= GEN_9
    GEN_1_bits_pum <= GEN_10
    GEN_1_bits_mxr <= GEN_11
    GEN_1_bits_addr <= GEN_12
    GEN_1_bits_store <= GEN_13
    GEN_1_bits_fetch <= GEN_14
    GEN_2_ready <= GEN_7
    GEN_2_valid <= GEN_8
    GEN_2_bits_prv <= GEN_9
    GEN_2_bits_pum <= GEN_10
    GEN_2_bits_mxr <= GEN_11
    GEN_2_bits_addr <= GEN_12
    GEN_2_bits_store <= GEN_13
    GEN_2_bits_fetch <= GEN_14
    GEN_3_ready <= GEN_7
    GEN_3_valid <= GEN_8
    GEN_3_bits_prv <= GEN_9
    GEN_3_bits_pum <= GEN_10
    GEN_3_bits_mxr <= GEN_11
    GEN_3_bits_addr <= GEN_12
    GEN_3_bits_store <= GEN_13
    GEN_3_bits_fetch <= GEN_14
    GEN_4_ready <= GEN_7
    GEN_4_valid <= GEN_8
    GEN_4_bits_prv <= GEN_9
    GEN_4_bits_pum <= GEN_10
    GEN_4_bits_mxr <= GEN_11
    GEN_4_bits_addr <= GEN_12
    GEN_4_bits_store <= GEN_13
    GEN_4_bits_fetch <= GEN_14
    GEN_5_ready <= GEN_7
    GEN_5_valid <= GEN_8
    GEN_5_bits_prv <= GEN_9
    GEN_5_bits_pum <= GEN_10
    GEN_5_bits_mxr <= GEN_11
    GEN_5_bits_addr <= GEN_12
    GEN_5_bits_store <= GEN_13
    GEN_5_bits_fetch <= GEN_14
    GEN_6_ready <= GEN_7
    GEN_6_valid <= GEN_8
    GEN_6_bits_prv <= GEN_9
    GEN_6_bits_pum <= GEN_10
    GEN_6_bits_mxr <= GEN_11
    GEN_6_bits_addr <= GEN_12
    GEN_6_bits_store <= GEN_13
    GEN_6_bits_fetch <= GEN_14
    lastGrant <= GEN_15

  module PTW :
    input clk : Clock
    input reset : UInt<1>
    output io_requestor_0_req_ready : UInt<1>
    input io_requestor_0_req_valid : UInt<1>
    input io_requestor_0_req_bits_prv : UInt<2>
    input io_requestor_0_req_bits_pum : UInt<1>
    input io_requestor_0_req_bits_mxr : UInt<1>
    input io_requestor_0_req_bits_addr : UInt<27>
    input io_requestor_0_req_bits_store : UInt<1>
    input io_requestor_0_req_bits_fetch : UInt<1>
    output io_requestor_0_resp_valid : UInt<1>
    output io_requestor_0_resp_bits_pte_reserved_for_hardware : UInt<16>
    output io_requestor_0_resp_bits_pte_ppn : UInt<38>
    output io_requestor_0_resp_bits_pte_reserved_for_software : UInt<2>
    output io_requestor_0_resp_bits_pte_d : UInt<1>
    output io_requestor_0_resp_bits_pte_a : UInt<1>
    output io_requestor_0_resp_bits_pte_g : UInt<1>
    output io_requestor_0_resp_bits_pte_u : UInt<1>
    output io_requestor_0_resp_bits_pte_x : UInt<1>
    output io_requestor_0_resp_bits_pte_w : UInt<1>
    output io_requestor_0_resp_bits_pte_r : UInt<1>
    output io_requestor_0_resp_bits_pte_v : UInt<1>
    output io_requestor_0_ptbr_asid : UInt<7>
    output io_requestor_0_ptbr_ppn : UInt<38>
    output io_requestor_0_invalidate : UInt<1>
    output io_requestor_0_status_debug : UInt<1>
    output io_requestor_0_status_isa : UInt<32>
    output io_requestor_0_status_prv : UInt<2>
    output io_requestor_0_status_sd : UInt<1>
    output io_requestor_0_status_zero3 : UInt<31>
    output io_requestor_0_status_sd_rv32 : UInt<1>
    output io_requestor_0_status_zero2 : UInt<2>
    output io_requestor_0_status_vm : UInt<5>
    output io_requestor_0_status_zero1 : UInt<4>
    output io_requestor_0_status_mxr : UInt<1>
    output io_requestor_0_status_pum : UInt<1>
    output io_requestor_0_status_mprv : UInt<1>
    output io_requestor_0_status_xs : UInt<2>
    output io_requestor_0_status_fs : UInt<2>
    output io_requestor_0_status_mpp : UInt<2>
    output io_requestor_0_status_hpp : UInt<2>
    output io_requestor_0_status_spp : UInt<1>
    output io_requestor_0_status_mpie : UInt<1>
    output io_requestor_0_status_hpie : UInt<1>
    output io_requestor_0_status_spie : UInt<1>
    output io_requestor_0_status_upie : UInt<1>
    output io_requestor_0_status_mie : UInt<1>
    output io_requestor_0_status_hie : UInt<1>
    output io_requestor_0_status_sie : UInt<1>
    output io_requestor_0_status_uie : UInt<1>
    output io_requestor_1_req_ready : UInt<1>
    input io_requestor_1_req_valid : UInt<1>
    input io_requestor_1_req_bits_prv : UInt<2>
    input io_requestor_1_req_bits_pum : UInt<1>
    input io_requestor_1_req_bits_mxr : UInt<1>
    input io_requestor_1_req_bits_addr : UInt<27>
    input io_requestor_1_req_bits_store : UInt<1>
    input io_requestor_1_req_bits_fetch : UInt<1>
    output io_requestor_1_resp_valid : UInt<1>
    output io_requestor_1_resp_bits_pte_reserved_for_hardware : UInt<16>
    output io_requestor_1_resp_bits_pte_ppn : UInt<38>
    output io_requestor_1_resp_bits_pte_reserved_for_software : UInt<2>
    output io_requestor_1_resp_bits_pte_d : UInt<1>
    output io_requestor_1_resp_bits_pte_a : UInt<1>
    output io_requestor_1_resp_bits_pte_g : UInt<1>
    output io_requestor_1_resp_bits_pte_u : UInt<1>
    output io_requestor_1_resp_bits_pte_x : UInt<1>
    output io_requestor_1_resp_bits_pte_w : UInt<1>
    output io_requestor_1_resp_bits_pte_r : UInt<1>
    output io_requestor_1_resp_bits_pte_v : UInt<1>
    output io_requestor_1_ptbr_asid : UInt<7>
    output io_requestor_1_ptbr_ppn : UInt<38>
    output io_requestor_1_invalidate : UInt<1>
    output io_requestor_1_status_debug : UInt<1>
    output io_requestor_1_status_isa : UInt<32>
    output io_requestor_1_status_prv : UInt<2>
    output io_requestor_1_status_sd : UInt<1>
    output io_requestor_1_status_zero3 : UInt<31>
    output io_requestor_1_status_sd_rv32 : UInt<1>
    output io_requestor_1_status_zero2 : UInt<2>
    output io_requestor_1_status_vm : UInt<5>
    output io_requestor_1_status_zero1 : UInt<4>
    output io_requestor_1_status_mxr : UInt<1>
    output io_requestor_1_status_pum : UInt<1>
    output io_requestor_1_status_mprv : UInt<1>
    output io_requestor_1_status_xs : UInt<2>
    output io_requestor_1_status_fs : UInt<2>
    output io_requestor_1_status_mpp : UInt<2>
    output io_requestor_1_status_hpp : UInt<2>
    output io_requestor_1_status_spp : UInt<1>
    output io_requestor_1_status_mpie : UInt<1>
    output io_requestor_1_status_hpie : UInt<1>
    output io_requestor_1_status_spie : UInt<1>
    output io_requestor_1_status_upie : UInt<1>
    output io_requestor_1_status_mie : UInt<1>
    output io_requestor_1_status_hie : UInt<1>
    output io_requestor_1_status_sie : UInt<1>
    output io_requestor_1_status_uie : UInt<1>
    input io_mem_req_ready : UInt<1>
    output io_mem_req_valid : UInt<1>
    output io_mem_req_bits_addr : UInt<40>
    output io_mem_req_bits_tag : UInt<7>
    output io_mem_req_bits_cmd : UInt<5>
    output io_mem_req_bits_typ : UInt<3>
    output io_mem_req_bits_phys : UInt<1>
    output io_mem_req_bits_data : UInt<64>
    output io_mem_s1_kill : UInt<1>
    output io_mem_s1_data : UInt<64>
    input io_mem_s2_nack : UInt<1>
    input io_mem_resp_valid : UInt<1>
    input io_mem_resp_bits_addr : UInt<40>
    input io_mem_resp_bits_tag : UInt<7>
    input io_mem_resp_bits_cmd : UInt<5>
    input io_mem_resp_bits_typ : UInt<3>
    input io_mem_resp_bits_data : UInt<64>
    input io_mem_resp_bits_replay : UInt<1>
    input io_mem_resp_bits_has_data : UInt<1>
    input io_mem_resp_bits_data_word_bypass : UInt<64>
    input io_mem_resp_bits_store_data : UInt<64>
    input io_mem_replay_next : UInt<1>
    input io_mem_xcpt_ma_ld : UInt<1>
    input io_mem_xcpt_ma_st : UInt<1>
    input io_mem_xcpt_pf_ld : UInt<1>
    input io_mem_xcpt_pf_st : UInt<1>
    output io_mem_invalidate_lr : UInt<1>
    input io_mem_ordered : UInt<1>
    input io_dpath_ptbr_asid : UInt<7>
    input io_dpath_ptbr_ppn : UInt<38>
    input io_dpath_invalidate : UInt<1>
    input io_dpath_status_debug : UInt<1>
    input io_dpath_status_isa : UInt<32>
    input io_dpath_status_prv : UInt<2>
    input io_dpath_status_sd : UInt<1>
    input io_dpath_status_zero3 : UInt<31>
    input io_dpath_status_sd_rv32 : UInt<1>
    input io_dpath_status_zero2 : UInt<2>
    input io_dpath_status_vm : UInt<5>
    input io_dpath_status_zero1 : UInt<4>
    input io_dpath_status_mxr : UInt<1>
    input io_dpath_status_pum : UInt<1>
    input io_dpath_status_mprv : UInt<1>
    input io_dpath_status_xs : UInt<2>
    input io_dpath_status_fs : UInt<2>
    input io_dpath_status_mpp : UInt<2>
    input io_dpath_status_hpp : UInt<2>
    input io_dpath_status_spp : UInt<1>
    input io_dpath_status_mpie : UInt<1>
    input io_dpath_status_hpie : UInt<1>
    input io_dpath_status_spie : UInt<1>
    input io_dpath_status_upie : UInt<1>
    input io_dpath_status_mie : UInt<1>
    input io_dpath_status_hie : UInt<1>
    input io_dpath_status_sie : UInt<1>
    input io_dpath_status_uie : UInt<1>
  
    reg state : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg count : UInt<2>, clk with :
      reset => (UInt<1>("h0"), count)
    reg s1_kill : UInt<1>, clk with :
      reset => (UInt<1>("h0"), s1_kill)
    reg r_req_prv : UInt<2>, clk with :
      reset => (UInt<1>("h0"), r_req_prv)
    reg r_req_pum : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_req_pum)
    reg r_req_mxr : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_req_mxr)
    reg r_req_addr : UInt<27>, clk with :
      reset => (UInt<1>("h0"), r_req_addr)
    reg r_req_store : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_req_store)
    reg r_req_fetch : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_req_fetch)
    reg r_req_dest : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_req_dest)
    reg r_pte_reserved_for_hardware : UInt<16>, clk with :
      reset => (UInt<1>("h0"), r_pte_reserved_for_hardware)
    reg r_pte_ppn : UInt<38>, clk with :
      reset => (UInt<1>("h0"), r_pte_ppn)
    reg r_pte_reserved_for_software : UInt<2>, clk with :
      reset => (UInt<1>("h0"), r_pte_reserved_for_software)
    reg r_pte_d : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_pte_d)
    reg r_pte_a : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_pte_a)
    reg r_pte_g : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_pte_g)
    reg r_pte_u : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_pte_u)
    reg r_pte_x : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_pte_x)
    reg r_pte_w : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_pte_w)
    reg r_pte_r : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_pte_r)
    reg r_pte_v : UInt<1>, clk with :
      reset => (UInt<1>("h0"), r_pte_v)
    node T_2207 = shr(r_req_addr, 18)
    node T_2208 = shr(r_req_addr, 9)
    node vpn_idxs_1 = bits(T_2208, 8, 0)
    node vpn_idxs_2 = bits(r_req_addr, 8, 0)
    node T_2211 = and(count, UInt<2>("h1"))
    node T_2213 = geq(count, UInt<2>("h2"))
    node T_2217 = geq(T_2211, UInt<2>("h1"))
    node T_2218 = mux(T_2217, vpn_idxs_1, T_2207)
    node vpn_idx = mux(T_2213, vpn_idxs_2, T_2218)
    inst arb of RRArbiter
    node T_2226 = eq(state, UInt<3>("h0"))
    wire T_2251_reserved_for_hardware : UInt<16>
    wire T_2251_ppn : UInt<38>
    wire T_2251_reserved_for_software : UInt<2>
    wire T_2251_d : UInt<1>
    wire T_2251_a : UInt<1>
    wire T_2251_g : UInt<1>
    wire T_2251_u : UInt<1>
    wire T_2251_x : UInt<1>
    wire T_2251_w : UInt<1>
    wire T_2251_r : UInt<1>
    wire T_2251_v : UInt<1>
    node T_2263 = bits(io_mem_resp_bits_data, 0, 0)
    node T_2264 = bits(io_mem_resp_bits_data, 1, 1)
    node T_2265 = bits(io_mem_resp_bits_data, 2, 2)
    node T_2266 = bits(io_mem_resp_bits_data, 3, 3)
    node T_2267 = bits(io_mem_resp_bits_data, 4, 4)
    node T_2268 = bits(io_mem_resp_bits_data, 5, 5)
    node T_2269 = bits(io_mem_resp_bits_data, 6, 6)
    node T_2270 = bits(io_mem_resp_bits_data, 7, 7)
    node T_2271 = bits(io_mem_resp_bits_data, 9, 8)
    node T_2272 = bits(io_mem_resp_bits_data, 47, 10)
    node T_2273 = bits(io_mem_resp_bits_data, 63, 48)
    wire T_2298_reserved_for_hardware : UInt<16>
    wire T_2298_ppn : UInt<38>
    wire T_2298_reserved_for_software : UInt<2>
    wire T_2298_d : UInt<1>
    wire T_2298_a : UInt<1>
    wire T_2298_g : UInt<1>
    wire T_2298_u : UInt<1>
    wire T_2298_x : UInt<1>
    wire T_2298_w : UInt<1>
    wire T_2298_r : UInt<1>
    wire T_2298_v : UInt<1>
    wire pte_reserved_for_hardware : UInt<16>
    wire pte_ppn : UInt<38>
    wire pte_reserved_for_software : UInt<2>
    wire pte_d : UInt<1>
    wire pte_a : UInt<1>
    wire pte_g : UInt<1>
    wire pte_u : UInt<1>
    wire pte_x : UInt<1>
    wire pte_w : UInt<1>
    wire pte_r : UInt<1>
    wire pte_v : UInt<1>
    node T_2332 = bits(T_2251_ppn, 19, 0)
    node T_2333 = shr(T_2251_ppn, 20)
    node T_2335 = neq(T_2333, UInt<18>("h0"))
    node GEN_2 = mux(T_2335, UInt<1>("h0"), T_2298_v)
    node T_2337 = cat(r_pte_ppn, vpn_idx)
    node GEN_113 = pad(T_2337, 50)
    node pte_addr = shlw(GEN_113, 3)
    node T_2338 = and(arb.io_out_ready, arb.io_out_valid)
    node GEN_3 = mux(T_2338, arb.io_out_bits_prv, r_req_prv)
    node GEN_4 = mux(T_2338, arb.io_out_bits_pum, r_req_pum)
    node GEN_5 = mux(T_2338, arb.io_out_bits_mxr, r_req_mxr)
    node GEN_6 = mux(T_2338, arb.io_out_bits_addr, r_req_addr)
    node GEN_7 = mux(T_2338, arb.io_out_bits_store, r_req_store)
    node GEN_8 = mux(T_2338, arb.io_out_bits_fetch, r_req_fetch)
    node GEN_9 = mux(T_2338, arb.io_chosen, r_req_dest)
    node GEN_10 = mux(T_2338, io_dpath_ptbr_ppn, r_pte_ppn)
    reg T_2340 : UInt<8>, clk with :
      reset => (UInt<1>("h0"), T_2340)
    reg T_2342 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg T_2349_0 : UInt<32>, clk with :
      reset => (UInt<1>("h0"), T_2349_0)
    reg T_2349_1 : UInt<32>, clk with :
      reset => (UInt<1>("h0"), T_2349_1)
    reg T_2349_2 : UInt<32>, clk with :
      reset => (UInt<1>("h0"), T_2349_2)
    reg T_2349_3 : UInt<32>, clk with :
      reset => (UInt<1>("h0"), T_2349_3)
    reg T_2349_4 : UInt<32>, clk with :
      reset => (UInt<1>("h0"), T_2349_4)
    reg T_2349_5 : UInt<32>, clk with :
      reset => (UInt<1>("h0"), T_2349_5)
    reg T_2349_6 : UInt<32>, clk with :
      reset => (UInt<1>("h0"), T_2349_6)
    reg T_2349_7 : UInt<32>, clk with :
      reset => (UInt<1>("h0"), T_2349_7)
    reg T_2357_0 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), T_2357_0)
    reg T_2357_1 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), T_2357_1)
    reg T_2357_2 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), T_2357_2)
    reg T_2357_3 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), T_2357_3)
    reg T_2357_4 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), T_2357_4)
    reg T_2357_5 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), T_2357_5)
    reg T_2357_6 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), T_2357_6)
    reg T_2357_7 : UInt<20>, clk with :
      reset => (UInt<1>("h0"), T_2357_7)
    node GEN_114 = pad(T_2349_0, 50)
    node T_2359 = eq(GEN_114, pte_addr)
    node GEN_115 = pad(T_2349_1, 50)
    node T_2360 = eq(GEN_115, pte_addr)
    node GEN_116 = pad(T_2349_2, 50)
    node T_2361 = eq(GEN_116, pte_addr)
    node GEN_117 = pad(T_2349_3, 50)
    node T_2362 = eq(GEN_117, pte_addr)
    node GEN_118 = pad(T_2349_4, 50)
    node T_2363 = eq(GEN_118, pte_addr)
    node GEN_119 = pad(T_2349_5, 50)
    node T_2364 = eq(GEN_119, pte_addr)
    node GEN_120 = pad(T_2349_6, 50)
    node T_2365 = eq(GEN_120, pte_addr)
    node GEN_121 = pad(T_2349_7, 50)
    node T_2366 = eq(GEN_121, pte_addr)
    node T_2367 = cat(T_2360, T_2359)
    node T_2368 = cat(T_2362, T_2361)
    node T_2369 = cat(T_2368, T_2367)
    node T_2370 = cat(T_2364, T_2363)
    node T_2371 = cat(T_2366, T_2365)
    node T_2372 = cat(T_2371, T_2370)
    node T_2373 = cat(T_2372, T_2369)
    node T_2374 = and(T_2373, T_2342)
    node T_2376 = neq(T_2374, UInt<8>("h0"))
    node T_2378 = eq(pte_r, UInt<1>("h0"))
    node T_2379 = and(pte_v, T_2378)
    node T_2381 = eq(pte_w, UInt<1>("h0"))
    node T_2382 = and(T_2379, T_2381)
    node T_2384 = eq(pte_x, UInt<1>("h0"))
    node T_2385 = and(T_2382, T_2384)
    node T_2386 = and(io_mem_resp_valid, T_2385)
    node T_2388 = eq(T_2376, UInt<1>("h0"))
    node T_2389 = and(T_2386, T_2388)
    node T_2390 = not(T_2342)
    node T_2392 = eq(T_2390, UInt<8>("h0"))
    node T_2394 = dshr(T_2340, UInt<1>("h1"))
    node T_2395 = bits(T_2394, 0, 0)
    node T_2396 = cat(UInt<1>("h1"), T_2395)
    node T_2397 = dshr(T_2340, T_2396)
    node T_2398 = bits(T_2397, 0, 0)
    node T_2399 = cat(T_2396, T_2398)
    node T_2400 = dshr(T_2340, T_2399)
    node T_2401 = bits(T_2400, 0, 0)
    node T_2402 = cat(T_2399, T_2401)
    node T_2403 = bits(T_2402, 2, 0)
    node T_2405 = bits(T_2390, 0, 0)
    node T_2406 = bits(T_2390, 1, 1)
    node T_2407 = bits(T_2390, 2, 2)
    node T_2408 = bits(T_2390, 3, 3)
    node T_2409 = bits(T_2390, 4, 4)
    node T_2410 = bits(T_2390, 5, 5)
    node T_2411 = bits(T_2390, 6, 6)
    node T_2421 = mux(T_2411, UInt<3>("h6"), UInt<3>("h7"))
    node T_2422 = mux(T_2410, UInt<3>("h5"), T_2421)
    node T_2423 = mux(T_2409, UInt<3>("h4"), T_2422)
    node T_2424 = mux(T_2408, UInt<3>("h3"), T_2423)
    node T_2425 = mux(T_2407, UInt<3>("h2"), T_2424)
    node T_2426 = mux(T_2406, UInt<3>("h1"), T_2425)
    node T_2427 = mux(T_2405, UInt<3>("h0"), T_2426)
    node T_2428 = mux(T_2392, T_2403, T_2427)
    node T_2430 = dshlw(UInt<8>("h1"), T_2428)
    node T_2431 = or(T_2342, T_2430)
    wire GEN_0 : UInt<32>
    node GEN_11 = mux(eq(UInt<3>("h0"), T_2428), GEN_0, T_2349_0)
    node GEN_12 = mux(eq(UInt<3>("h1"), T_2428), GEN_0, T_2349_1)
    node GEN_13 = mux(eq(UInt<3>("h2"), T_2428), GEN_0, T_2349_2)
    node GEN_14 = mux(eq(UInt<3>("h3"), T_2428), GEN_0, T_2349_3)
    node GEN_15 = mux(eq(UInt<3>("h4"), T_2428), GEN_0, T_2349_4)
    node GEN_16 = mux(eq(UInt<3>("h5"), T_2428), GEN_0, T_2349_5)
    node GEN_17 = mux(eq(UInt<3>("h6"), T_2428), GEN_0, T_2349_6)
    node GEN_18 = mux(eq(UInt<3>("h7"), T_2428), GEN_0, T_2349_7)
    wire GEN_1 : UInt<20>
    node GEN_19 = mux(eq(UInt<3>("h0"), T_2428), GEN_1, T_2357_0)
    node GEN_20 = mux(eq(UInt<3>("h1"), T_2428), GEN_1, T_2357_1)
    node GEN_21 = mux(eq(UInt<3>("h2"), T_2428), GEN_1, T_2357_2)
    node GEN_22 = mux(eq(UInt<3>("h3"), T_2428), GEN_1, T_2357_3)
    node GEN_23 = mux(eq(UInt<3>("h4"), T_2428), GEN_1, T_2357_4)
    node GEN_24 = mux(eq(UInt<3>("h5"), T_2428), GEN_1, T_2357_5)
    node GEN_25 = mux(eq(UInt<3>("h6"), T_2428), GEN_1, T_2357_6)
    node GEN_26 = mux(eq(UInt<3>("h7"), T_2428), GEN_1, T_2357_7)
    node GEN_27 = mux(T_2389, T_2431, T_2342)
    node GEN_28 = mux(T_2389, GEN_11, T_2349_0)
    node GEN_29 = mux(T_2389, GEN_12, T_2349_1)
    node GEN_30 = mux(T_2389, GEN_13, T_2349_2)
    node GEN_31 = mux(T_2389, GEN_14, T_2349_3)
    node GEN_32 = mux(T_2389, GEN_15, T_2349_4)
    node GEN_33 = mux(T_2389, GEN_16, T_2349_5)
    node GEN_34 = mux(T_2389, GEN_17, T_2349_6)
    node GEN_35 = mux(T_2389, GEN_18, T_2349_7)
    node GEN_36 = mux(T_2389, GEN_19, T_2357_0)
    node GEN_37 = mux(T_2389, GEN_20, T_2357_1)
    node GEN_38 = mux(T_2389, GEN_21, T_2357_2)
    node GEN_39 = mux(T_2389, GEN_22, T_2357_3)
    node GEN_40 = mux(T_2389, GEN_23, T_2357_4)
    node GEN_41 = mux(T_2389, GEN_24, T_2357_5)
    node GEN_42 = mux(T_2389, GEN_25, T_2357_6)
    node GEN_43 = mux(T_2389, GEN_26, T_2357_7)
    node T_2432 = eq(state, UInt<3>("h1"))
    node T_2433 = and(T_2376, T_2432)
    node T_2434 = bits(T_2374, 7, 4)
    node T_2435 = bits(T_2374, 3, 0)
    node T_2437 = neq(T_2434, UInt<4>("h0"))
    node T_2438 = or(T_2434, T_2435)
    node T_2439 = bits(T_2438, 3, 2)
    node T_2440 = bits(T_2438, 1, 0)
    node T_2442 = neq(T_2439, UInt<2>("h0"))
    node T_2443 = or(T_2439, T_2440)
    node T_2444 = bits(T_2443, 1, 1)
    node T_2445 = cat(T_2442, T_2444)
    node T_2446 = cat(T_2437, T_2445)
    node T_2448 = bits(T_2446, 2, 2)
    node T_2450 = eq(T_2448, UInt<1>("h0"))
    node T_2452 = dshlw(UInt<2>("h1"), UInt<1>("h1"))
    node GEN_122 = pad(T_2452, 8)
    node T_2453 = or(T_2340, GEN_122)
    node T_2454 = not(T_2340)
    node T_2455 = or(T_2454, GEN_122)
    node T_2456 = not(T_2455)
    node T_2457 = mux(T_2450, T_2453, T_2456)
    node T_2458 = cat(UInt<1>("h1"), T_2448)
    node T_2459 = bits(T_2446, 1, 1)
    node T_2461 = eq(T_2459, UInt<1>("h0"))
    node T_2463 = dshlw(UInt<4>("h1"), T_2458)
    node GEN_124 = pad(T_2463, 8)
    node T_2464 = or(T_2457, GEN_124)
    node T_2465 = not(T_2457)
    node T_2466 = or(T_2465, GEN_124)
    node T_2467 = not(T_2466)
    node T_2468 = mux(T_2461, T_2464, T_2467)
    node T_2469 = cat(T_2458, T_2459)
    node T_2470 = bits(T_2446, 0, 0)
    node T_2472 = eq(T_2470, UInt<1>("h0"))
    node T_2474 = dshlw(UInt<8>("h1"), T_2469)
    node T_2475 = or(T_2468, T_2474)
    node T_2476 = not(T_2468)
    node T_2477 = or(T_2476, T_2474)
    node T_2478 = not(T_2477)
    node T_2479 = mux(T_2472, T_2475, T_2478)
    node GEN_44 = mux(T_2433, T_2479, T_2340)
    node GEN_45 = mux(io_dpath_invalidate, UInt<8>("h0"), GEN_27)
    node T_2483 = lt(count, UInt<2>("h2"))
    node pte_cache_hit = and(T_2376, T_2483)
    node T_2484 = bits(T_2374, 0, 0)
    node T_2485 = bits(T_2374, 1, 1)
    node T_2486 = bits(T_2374, 2, 2)
    node T_2487 = bits(T_2374, 3, 3)
    node T_2488 = bits(T_2374, 4, 4)
    node T_2489 = bits(T_2374, 5, 5)
    node T_2490 = bits(T_2374, 6, 6)
    node T_2491 = bits(T_2374, 7, 7)
    node T_2493 = mux(T_2484, T_2357_0, UInt<20>("h0"))
    node T_2495 = mux(T_2485, T_2357_1, UInt<20>("h0"))
    node T_2497 = mux(T_2486, T_2357_2, UInt<20>("h0"))
    node T_2499 = mux(T_2487, T_2357_3, UInt<20>("h0"))
    node T_2501 = mux(T_2488, T_2357_4, UInt<20>("h0"))
    node T_2503 = mux(T_2489, T_2357_5, UInt<20>("h0"))
    node T_2505 = mux(T_2490, T_2357_6, UInt<20>("h0"))
    node T_2507 = mux(T_2491, T_2357_7, UInt<20>("h0"))
    node T_2509 = or(T_2493, T_2495)
    node T_2510 = or(T_2509, T_2497)
    node T_2511 = or(T_2510, T_2499)
    node T_2512 = or(T_2511, T_2501)
    node T_2513 = or(T_2512, T_2503)
    node T_2514 = or(T_2513, T_2505)
    node T_2515 = or(T_2514, T_2507)
    wire pte_cache_data : UInt<20>
    wire T_2541_reserved_for_hardware : UInt<16>
    wire T_2541_ppn : UInt<38>
    wire T_2541_reserved_for_software : UInt<2>
    wire T_2541_d : UInt<1>
    wire T_2541_a : UInt<1>
    wire T_2541_g : UInt<1>
    wire T_2541_u : UInt<1>
    wire T_2541_x : UInt<1>
    wire T_2541_w : UInt<1>
    wire T_2541_r : UInt<1>
    wire T_2541_v : UInt<1>
    wire T_2554 : UInt<64>
    wire pte_wdata_reserved_for_hardware : UInt<16>
    wire pte_wdata_ppn : UInt<38>
    wire pte_wdata_reserved_for_software : UInt<2>
    wire pte_wdata_d : UInt<1>
    wire pte_wdata_a : UInt<1>
    wire pte_wdata_g : UInt<1>
    wire pte_wdata_u : UInt<1>
    wire pte_wdata_x : UInt<1>
    wire pte_wdata_w : UInt<1>
    wire pte_wdata_r : UInt<1>
    wire pte_wdata_v : UInt<1>
    node T_2579 = eq(state, UInt<3>("h4"))
    node T_2580 = or(T_2432, T_2579)
    node T_2583 = mux(T_2579, UInt<5>("ha"), UInt<5>("h0"))
    node T_2585 = cat(UInt<1>("h0"), UInt<1>("h0"))
    node T_2586 = cat(UInt<1>("h0"), UInt<1>("h0"))
    node T_2587 = cat(T_2586, UInt<1>("h0"))
    node T_2588 = cat(T_2587, T_2585)
    node T_2589 = cat(pte_wdata_d, UInt<1>("h1"))
    node T_2590 = cat(T_2589, UInt<1>("h0"))
    node T_2591 = cat(UInt<16>("h0"), UInt<38>("h0"))
    node T_2592 = cat(T_2591, UInt<2>("h0"))
    node T_2593 = cat(T_2592, T_2590)
    node T_2594 = cat(T_2593, T_2588)
    node T_2596 = shr(pte_addr, 30)
    node T_2597 = bits(r_req_addr, 17, 0)
    node resp_ppns_0 = cat(T_2596, T_2597)
    node T_2598 = shr(pte_addr, 21)
    node resp_ppns_1 = cat(T_2598, vpn_idxs_2)
    node resp_ppns_2 = shr(pte_addr, 12)
    node T_2600 = eq(state, UInt<3>("h7"))
    node T_2602 = eq(r_req_dest, UInt<1>("h0"))
    node T_2603 = and(T_2600, T_2602)
    node T_2612 = mux(T_2217, resp_ppns_1, resp_ppns_0)
    node T_2613 = mux(T_2213, resp_ppns_2, T_2612)
    node T_2617 = and(T_2600, r_req_dest)
    node T_2628 = eq(UInt<3>("h0"), state)
    node GEN_46 = mux(arb.io_out_valid, UInt<3>("h1"), state)
    node GEN_47 = mux(T_2628, GEN_46, state)
    node GEN_48 = mux(T_2628, UInt<2>("h0"), count)
    node T_2630 = eq(UInt<3>("h1"), state)
    node T_2633 = add(count, UInt<2>("h1"))
    node T_2634 = tail(T_2633, 1)
    node GEN_50 = mux(pte_cache_hit, UInt<3>("h1"), GEN_47)
    node GEN_51 = mux(pte_cache_hit, T_2634, GEN_48)
    node GEN_52 = mux(pte_cache_hit, pad(pte_cache_data, 38), GEN_10)
    node T_2636 = eq(pte_cache_hit, UInt<1>("h0"))
    node T_2637 = and(T_2636, io_mem_req_ready)
    node GEN_53 = mux(T_2637, UInt<3>("h2"), GEN_50)
    node GEN_54 = mux(T_2630, pte_cache_hit, UInt<1>("h0"))
    node GEN_55 = mux(T_2630, GEN_53, GEN_47)
    node GEN_56 = mux(T_2630, GEN_51, GEN_48)
    node GEN_57 = mux(T_2630, GEN_52, GEN_10)
    node T_2638 = eq(UInt<3>("h2"), state)
    node GEN_58 = mux(io_mem_xcpt_pf_ld, UInt<1>("h0"), r_pte_v)
    node GEN_59 = mux(io_mem_xcpt_pf_ld, UInt<3>("h7"), UInt<3>("h3"))
    node GEN_60 = mux(T_2638, GEN_59, GEN_55)
    node GEN_61 = mux(T_2638, GEN_58, r_pte_v)
    node T_2640 = eq(UInt<3>("h3"), state)
    node GEN_62 = mux(io_mem_s2_nack, UInt<3>("h1"), GEN_60)
    node T_2641 = and(pte_x, r_req_mxr)
    node T_2642 = or(pte_r, T_2641)
    node T_2643 = mux(r_req_store, pte_w, T_2642)
    node T_2644 = mux(r_req_fetch, pte_x, T_2643)
    node T_2646 = eq(r_req_pum, UInt<1>("h0"))
    node T_2647 = bits(r_req_prv, 0, 0)
    node T_2648 = mux(pte_u, T_2646, T_2647)
    node T_2651 = and(pte_x, T_2381)
    node T_2652 = or(pte_r, T_2651)
    node T_2653 = and(pte_v, T_2652)
    node T_2654 = and(T_2653, T_2648)
    node T_2655 = and(T_2654, T_2644)
    node T_2657 = eq(pte_a, UInt<1>("h0"))
    node T_2659 = eq(pte_d, UInt<1>("h0"))
    node T_2660 = and(r_req_store, T_2659)
    node T_2661 = or(T_2657, T_2660)
    node T_2662 = and(T_2655, T_2661)
    node GEN_63 = mux(T_2662, UInt<3>("h4"), UInt<3>("h7"))
    node T_2664 = eq(T_2662, UInt<1>("h0"))
    node GEN_64 = mux(T_2664, pte_reserved_for_hardware, r_pte_reserved_for_hardware)
    node GEN_65 = mux(T_2664, pte_ppn, GEN_57)
    node GEN_66 = mux(T_2664, pte_reserved_for_software, r_pte_reserved_for_software)
    node GEN_67 = mux(T_2664, pte_d, r_pte_d)
    node GEN_68 = mux(T_2664, pte_a, r_pte_a)
    node GEN_69 = mux(T_2664, pte_g, r_pte_g)
    node GEN_70 = mux(T_2664, pte_u, r_pte_u)
    node GEN_71 = mux(T_2664, pte_x, r_pte_x)
    node GEN_72 = mux(T_2664, pte_w, r_pte_w)
    node GEN_73 = mux(T_2664, pte_r, r_pte_r)
    node GEN_74 = mux(T_2664, pte_v, GEN_61)
    node T_2676 = and(T_2385, T_2483)
    node GEN_75 = mux(T_2676, UInt<3>("h1"), GEN_63)
    node GEN_76 = mux(T_2676, T_2634, GEN_56)
    node GEN_77 = mux(io_mem_resp_valid, GEN_75, GEN_62)
    node GEN_78 = mux(io_mem_resp_valid, GEN_64, r_pte_reserved_for_hardware)
    node GEN_79 = mux(io_mem_resp_valid, GEN_65, GEN_57)
    node GEN_80 = mux(io_mem_resp_valid, GEN_66, r_pte_reserved_for_software)
    node GEN_81 = mux(io_mem_resp_valid, GEN_67, r_pte_d)
    node GEN_82 = mux(io_mem_resp_valid, GEN_68, r_pte_a)
    node GEN_83 = mux(io_mem_resp_valid, GEN_69, r_pte_g)
    node GEN_84 = mux(io_mem_resp_valid, GEN_70, r_pte_u)
    node GEN_85 = mux(io_mem_resp_valid, GEN_71, r_pte_x)
    node GEN_86 = mux(io_mem_resp_valid, GEN_72, r_pte_w)
    node GEN_87 = mux(io_mem_resp_valid, GEN_73, r_pte_r)
    node GEN_88 = mux(io_mem_resp_valid, GEN_74, GEN_61)
    node GEN_89 = mux(io_mem_resp_valid, GEN_76, GEN_56)
    node GEN_90 = mux(T_2640, GEN_77, GEN_60)
    node GEN_91 = mux(T_2640, GEN_78, r_pte_reserved_for_hardware)
    node GEN_92 = mux(T_2640, GEN_79, GEN_57)
    node GEN_93 = mux(T_2640, GEN_80, r_pte_reserved_for_software)
    node GEN_94 = mux(T_2640, GEN_81, r_pte_d)
    node GEN_95 = mux(T_2640, GEN_82, r_pte_a)
    node GEN_96 = mux(T_2640, GEN_83, r_pte_g)
    node GEN_97 = mux(T_2640, GEN_84, r_pte_u)
    node GEN_98 = mux(T_2640, GEN_85, r_pte_x)
    node GEN_99 = mux(T_2640, GEN_86, r_pte_w)
    node GEN_100 = mux(T_2640, GEN_87, r_pte_r)
    node GEN_101 = mux(T_2640, GEN_88, GEN_61)
    node GEN_102 = mux(T_2640, GEN_89, GEN_56)
    node T_2680 = eq(UInt<3>("h4"), state)
    node GEN_103 = mux(io_mem_req_ready, UInt<3>("h5"), GEN_90)
    node GEN_104 = mux(T_2680, GEN_103, GEN_90)
    node T_2681 = eq(UInt<3>("h5"), state)
    node GEN_105 = mux(io_mem_xcpt_pf_st, UInt<1>("h0"), GEN_101)
    node GEN_106 = mux(io_mem_xcpt_pf_st, UInt<3>("h7"), UInt<3>("h6"))
    node GEN_107 = mux(T_2681, GEN_106, GEN_104)
    node GEN_108 = mux(T_2681, GEN_105, GEN_101)
    node T_2683 = eq(UInt<3>("h6"), state)
    node GEN_109 = mux(io_mem_s2_nack, UInt<3>("h4"), GEN_107)
    node GEN_110 = mux(io_mem_resp_valid, UInt<3>("h1"), GEN_109)
    node GEN_111 = mux(T_2683, GEN_110, GEN_107)
    node T_2684 = eq(UInt<3>("h7"), state)
    node GEN_112 = mux(T_2684, UInt<3>("h0"), GEN_111)
    io_requestor_0_req_ready <= arb.io_in_0_ready
    io_requestor_0_resp_valid <= T_2603
    io_requestor_0_resp_bits_pte_reserved_for_hardware <= r_pte_reserved_for_hardware
    io_requestor_0_resp_bits_pte_ppn <= T_2613
    io_requestor_0_resp_bits_pte_reserved_for_software <= r_pte_reserved_for_software
    io_requestor_0_resp_bits_pte_d <= r_pte_d
    io_requestor_0_resp_bits_pte_a <= r_pte_a
    io_requestor_0_resp_bits_pte_g <= r_pte_g
    io_requestor_0_resp_bits_pte_u <= r_pte_u
    io_requestor_0_resp_bits_pte_x <= r_pte_x
    io_requestor_0_resp_bits_pte_w <= r_pte_w
    io_requestor_0_resp_bits_pte_r <= r_pte_r
    io_requestor_0_resp_bits_pte_v <= r_pte_v
    io_requestor_0_ptbr_asid <= io_dpath_ptbr_asid
    io_requestor_0_ptbr_ppn <= io_dpath_ptbr_ppn
    io_requestor_0_invalidate <= io_dpath_invalidate
    io_requestor_0_status_debug <= io_dpath_status_debug
    io_requestor_0_status_isa <= io_dpath_status_isa
    io_requestor_0_status_prv <= io_dpath_status_prv
    io_requestor_0_status_sd <= io_dpath_status_sd
    io_requestor_0_status_zero3 <= io_dpath_status_zero3
    io_requestor_0_status_sd_rv32 <= io_dpath_status_sd_rv32
    io_requestor_0_status_zero2 <= io_dpath_status_zero2
    io_requestor_0_status_vm <= io_dpath_status_vm
    io_requestor_0_status_zero1 <= io_dpath_status_zero1
    io_requestor_0_status_mxr <= io_dpath_status_mxr
    io_requestor_0_status_pum <= io_dpath_status_pum
    io_requestor_0_status_mprv <= io_dpath_status_mprv
    io_requestor_0_status_xs <= io_dpath_status_xs
    io_requestor_0_status_fs <= io_dpath_status_fs
    io_requestor_0_status_mpp <= io_dpath_status_mpp
    io_requestor_0_status_hpp <= io_dpath_status_hpp
    io_requestor_0_status_spp <= io_dpath_status_spp
    io_requestor_0_status_mpie <= io_dpath_status_mpie
    io_requestor_0_status_hpie <= io_dpath_status_hpie
    io_requestor_0_status_spie <= io_dpath_status_spie
    io_requestor_0_status_upie <= io_dpath_status_upie
    io_requestor_0_status_mie <= io_dpath_status_mie
    io_requestor_0_status_hie <= io_dpath_status_hie
    io_requestor_0_status_sie <= io_dpath_status_sie
    io_requestor_0_status_uie <= io_dpath_status_uie
    io_requestor_1_req_ready <= arb.io_in_1_ready
    io_requestor_1_resp_valid <= T_2617
    io_requestor_1_resp_bits_pte_reserved_for_hardware <= r_pte_reserved_for_hardware
    io_requestor_1_resp_bits_pte_ppn <= T_2613
    io_requestor_1_resp_bits_pte_reserved_for_software <= r_pte_reserved_for_software
    io_requestor_1_resp_bits_pte_d <= r_pte_d
    io_requestor_1_resp_bits_pte_a <= r_pte_a
    io_requestor_1_resp_bits_pte_g <= r_pte_g
    io_requestor_1_resp_bits_pte_u <= r_pte_u
    io_requestor_1_resp_bits_pte_x <= r_pte_x
    io_requestor_1_resp_bits_pte_w <= r_pte_w
    io_requestor_1_resp_bits_pte_r <= r_pte_r
    io_requestor_1_resp_bits_pte_v <= r_pte_v
    io_requestor_1_ptbr_asid <= io_dpath_ptbr_asid
    io_requestor_1_ptbr_ppn <= io_dpath_ptbr_ppn
    io_requestor_1_invalidate <= io_dpath_invalidate
    io_requestor_1_status_debug <= io_dpath_status_debug
    io_requestor_1_status_isa <= io_dpath_status_isa
    io_requestor_1_status_prv <= io_dpath_status_prv
    io_requestor_1_status_sd <= io_dpath_status_sd
    io_requestor_1_status_zero3 <= io_dpath_status_zero3
    io_requestor_1_status_sd_rv32 <= io_dpath_status_sd_rv32
    io_requestor_1_status_zero2 <= io_dpath_status_zero2
    io_requestor_1_status_vm <= io_dpath_status_vm
    io_requestor_1_status_zero1 <= io_dpath_status_zero1
    io_requestor_1_status_mxr <= io_dpath_status_mxr
    io_requestor_1_status_pum <= io_dpath_status_pum
    io_requestor_1_status_mprv <= io_dpath_status_mprv
    io_requestor_1_status_xs <= io_dpath_status_xs
    io_requestor_1_status_fs <= io_dpath_status_fs
    io_requestor_1_status_mpp <= io_dpath_status_mpp
    io_requestor_1_status_hpp <= io_dpath_status_hpp
    io_requestor_1_status_spp <= io_dpath_status_spp
    io_requestor_1_status_mpie <= io_dpath_status_mpie
    io_requestor_1_status_hpie <= io_dpath_status_hpie
    io_requestor_1_status_spie <= io_dpath_status_spie
    io_requestor_1_status_upie <= io_dpath_status_upie
    io_requestor_1_status_mie <= io_dpath_status_mie
    io_requestor_1_status_hie <= io_dpath_status_hie
    io_requestor_1_status_sie <= io_dpath_status_sie
    io_requestor_1_status_uie <= io_dpath_status_uie
    io_mem_req_valid <= T_2580
    io_mem_req_bits_addr <= bits(pte_addr, 39, 0)
    io_mem_req_bits_tag <= UInt<7>("h12")
    io_mem_req_bits_cmd <= T_2583
    io_mem_req_bits_typ <= UInt<3>("h3")
    io_mem_req_bits_phys <= UInt<1>("h1")
    io_mem_req_bits_data <= UInt<64>("h176dcaf98f319cf")
    io_mem_s1_kill <= s1_kill
    io_mem_s1_data <= T_2594
    io_mem_invalidate_lr <= UInt<1>("h0")
    state <= GEN_112
    count <= GEN_102
    s1_kill <= GEN_54
    r_req_prv <= GEN_3
    r_req_pum <= GEN_4
    r_req_mxr <= GEN_5
    r_req_addr <= GEN_6
    r_req_store <= GEN_7
    r_req_fetch <= GEN_8
    r_req_dest <= GEN_9
    r_pte_reserved_for_hardware <= GEN_91
    r_pte_ppn <= GEN_92
    r_pte_reserved_for_software <= GEN_93
    r_pte_d <= GEN_94
    r_pte_a <= GEN_95
    r_pte_g <= GEN_96
    r_pte_u <= GEN_97
    r_pte_x <= GEN_98
    r_pte_w <= GEN_99
    r_pte_r <= GEN_100
    r_pte_v <= GEN_108
    arb.io_in_0_valid <= io_requestor_0_req_valid
    arb.io_in_0_bits_prv <= io_requestor_0_req_bits_prv
    arb.io_in_0_bits_pum <= io_requestor_0_req_bits_pum
    arb.io_in_0_bits_mxr <= io_requestor_0_req_bits_mxr
    arb.io_in_0_bits_addr <= io_requestor_0_req_bits_addr
    arb.io_in_0_bits_store <= io_requestor_0_req_bits_store
    arb.io_in_0_bits_fetch <= io_requestor_0_req_bits_fetch
    arb.io_in_1_valid <= io_requestor_1_req_valid
    arb.io_in_1_bits_prv <= io_requestor_1_req_bits_prv
    arb.io_in_1_bits_pum <= io_requestor_1_req_bits_pum
    arb.io_in_1_bits_mxr <= io_requestor_1_req_bits_mxr
    arb.io_in_1_bits_addr <= io_requestor_1_req_bits_addr
    arb.io_in_1_bits_store <= io_requestor_1_req_bits_store
    arb.io_in_1_bits_fetch <= io_requestor_1_req_bits_fetch
    arb.io_out_ready <= T_2226
    T_2251_reserved_for_hardware <= T_2273
    T_2251_ppn <= T_2272
    T_2251_reserved_for_software <= T_2271
    T_2251_d <= T_2270
    T_2251_a <= T_2269
    T_2251_g <= T_2268
    T_2251_u <= T_2267
    T_2251_x <= T_2266
    T_2251_w <= T_2265
    T_2251_r <= T_2264
    T_2251_v <= T_2263
    T_2298_reserved_for_hardware <= T_2273
    T_2298_ppn <= T_2272
    T_2298_reserved_for_software <= T_2271
    T_2298_d <= T_2270
    T_2298_a <= T_2269
    T_2298_g <= T_2268
    T_2298_u <= T_2267
    T_2298_x <= T_2266
    T_2298_w <= T_2265
    T_2298_r <= T_2264
    T_2298_v <= T_2263
    pte_reserved_for_hardware <= T_2298_reserved_for_hardware
    pte_ppn <= pad(T_2332, 38)
    pte_reserved_for_software <= T_2298_reserved_for_software
    pte_d <= T_2298_d
    pte_a <= T_2298_a
    pte_g <= T_2298_g
    pte_u <= T_2298_u
    pte_x <= T_2298_x
    pte_w <= T_2298_w
    pte_r <= T_2298_r
    pte_v <= GEN_2
    T_2340 <= GEN_44
    T_2342 <= GEN_45
    T_2349_0 <= GEN_28
    T_2349_1 <= GEN_29
    T_2349_2 <= GEN_30
    T_2349_3 <= GEN_31
    T_2349_4 <= GEN_32
    T_2349_5 <= GEN_33
    T_2349_6 <= GEN_34
    T_2349_7 <= GEN_35
    T_2357_0 <= GEN_36
    T_2357_1 <= GEN_37
    T_2357_2 <= GEN_38
    T_2357_3 <= GEN_39
    T_2357_4 <= GEN_40
    T_2357_5 <= GEN_41
    T_2357_6 <= GEN_42
    T_2357_7 <= GEN_43
    GEN_0 <= bits(pte_addr, 31, 0)
    GEN_1 <= bits(pte_ppn, 19, 0)
    pte_cache_data <= T_2515
    pte_wdata_d <= r_req_store

  module HellaCacheArbiter :
    input clk : Clock
    input reset : UInt<1>
    output io_requestor_0_req_ready : UInt<1>
    input io_requestor_0_req_valid : UInt<1>
    input io_requestor_0_req_bits_addr : UInt<40>
    input io_requestor_0_req_bits_tag : UInt<7>
    input io_requestor_0_req_bits_cmd : UInt<5>
    input io_requestor_0_req_bits_typ : UInt<3>
    input io_requestor_0_req_bits_phys : UInt<1>
    input io_requestor_0_req_bits_data : UInt<64>
    input io_requestor_0_s1_kill : UInt<1>
    input io_requestor_0_s1_data : UInt<64>
    output io_requestor_0_s2_nack : UInt<1>
    output io_requestor_0_resp_valid : UInt<1>
    output io_requestor_0_resp_bits_addr : UInt<40>
    output io_requestor_0_resp_bits_tag : UInt<7>
    output io_requestor_0_resp_bits_cmd : UInt<5>
    output io_requestor_0_resp_bits_typ : UInt<3>
    output io_requestor_0_resp_bits_data : UInt<64>
    output io_requestor_0_resp_bits_replay : UInt<1>
    output io_requestor_0_resp_bits_has_data : UInt<1>
    output io_requestor_0_resp_bits_data_word_bypass : UInt<64>
    output io_requestor_0_resp_bits_store_data : UInt<64>
    output io_requestor_0_replay_next : UInt<1>
    output io_requestor_0_xcpt_ma_ld : UInt<1>
    output io_requestor_0_xcpt_ma_st : UInt<1>
    output io_requestor_0_xcpt_pf_ld : UInt<1>
    output io_requestor_0_xcpt_pf_st : UInt<1>
    input io_requestor_0_invalidate_lr : UInt<1>
    output io_requestor_0_ordered : UInt<1>
    output io_requestor_1_req_ready : UInt<1>
    input io_requestor_1_req_valid : UInt<1>
    input io_requestor_1_req_bits_addr : UInt<40>
    input io_requestor_1_req_bits_tag : UInt<7>
    input io_requestor_1_req_bits_cmd : UInt<5>
    input io_requestor_1_req_bits_typ : UInt<3>
    input io_requestor_1_req_bits_phys : UInt<1>
    input io_requestor_1_req_bits_data : UInt<64>
    input io_requestor_1_s1_kill : UInt<1>
    input io_requestor_1_s1_data : UInt<64>
    output io_requestor_1_s2_nack : UInt<1>
    output io_requestor_1_resp_valid : UInt<1>
    output io_requestor_1_resp_bits_addr : UInt<40>
    output io_requestor_1_resp_bits_tag : UInt<7>
    output io_requestor_1_resp_bits_cmd : UInt<5>
    output io_requestor_1_resp_bits_typ : UInt<3>
    output io_requestor_1_resp_bits_data : UInt<64>
    output io_requestor_1_resp_bits_replay : UInt<1>
    output io_requestor_1_resp_bits_has_data : UInt<1>
    output io_requestor_1_resp_bits_data_word_bypass : UInt<64>
    output io_requestor_1_resp_bits_store_data : UInt<64>
    output io_requestor_1_replay_next : UInt<1>
    output io_requestor_1_xcpt_ma_ld : UInt<1>
    output io_requestor_1_xcpt_ma_st : UInt<1>
    output io_requestor_1_xcpt_pf_ld : UInt<1>
    output io_requestor_1_xcpt_pf_st : UInt<1>
    input io_requestor_1_invalidate_lr : UInt<1>
    output io_requestor_1_ordered : UInt<1>
    input io_mem_req_ready : UInt<1>
    output io_mem_req_valid : UInt<1>
    output io_mem_req_bits_addr : UInt<40>
    output io_mem_req_bits_tag : UInt<7>
    output io_mem_req_bits_cmd : UInt<5>
    output io_mem_req_bits_typ : UInt<3>
    output io_mem_req_bits_phys : UInt<1>
    output io_mem_req_bits_data : UInt<64>
    output io_mem_s1_kill : UInt<1>
    output io_mem_s1_data : UInt<64>
    input io_mem_s2_nack : UInt<1>
    input io_mem_resp_valid : UInt<1>
    input io_mem_resp_bits_addr : UInt<40>
    input io_mem_resp_bits_tag : UInt<7>
    input io_mem_resp_bits_cmd : UInt<5>
    input io_mem_resp_bits_typ : UInt<3>
    input io_mem_resp_bits_data : UInt<64>
    input io_mem_resp_bits_replay : UInt<1>
    input io_mem_resp_bits_has_data : UInt<1>
    input io_mem_resp_bits_data_word_bypass : UInt<64>
    input io_mem_resp_bits_store_data : UInt<64>
    input io_mem_replay_next : UInt<1>
    input io_mem_xcpt_ma_ld : UInt<1>
    input io_mem_xcpt_ma_st : UInt<1>
    input io_mem_xcpt_pf_ld : UInt<1>
    input io_mem_xcpt_pf_st : UInt<1>
    output io_mem_invalidate_lr : UInt<1>
    input io_mem_ordered : UInt<1>
  
    reg T_6368 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_6368)
    reg T_6369 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_6369)
    node T_6370 = or(io_requestor_0_invalidate_lr, io_requestor_1_invalidate_lr)
    node T_6371 = or(io_requestor_0_req_valid, io_requestor_1_req_valid)
    node T_6373 = eq(io_requestor_0_req_valid, UInt<1>("h0"))
    node T_6374 = and(io_requestor_0_req_ready, T_6373)
    node T_6376 = cat(io_requestor_1_req_bits_tag, UInt<1>("h1"))
    node T_6379 = cat(io_requestor_0_req_bits_tag, UInt<1>("h0"))
    node GEN_0 = mux(io_requestor_0_req_valid, io_requestor_0_req_bits_cmd, io_requestor_1_req_bits_cmd)
    node GEN_1 = mux(io_requestor_0_req_valid, io_requestor_0_req_bits_typ, io_requestor_1_req_bits_typ)
    node GEN_2 = mux(io_requestor_0_req_valid, io_requestor_0_req_bits_addr, io_requestor_1_req_bits_addr)
    node GEN_3 = mux(io_requestor_0_req_valid, io_requestor_0_req_bits_phys, io_requestor_1_req_bits_phys)
    node GEN_4 = mux(io_requestor_0_req_valid, T_6379, T_6376)
    node GEN_5 = mux(io_requestor_0_req_valid, UInt<1>("h0"), UInt<1>("h1"))
    node T_6382 = eq(T_6368, UInt<1>("h0"))
    node GEN_6 = mux(T_6382, io_requestor_0_s1_kill, io_requestor_1_s1_kill)
    node GEN_7 = mux(T_6382, io_requestor_0_s1_data, io_requestor_1_s1_data)
    node T_6383 = bits(io_mem_resp_bits_tag, 0, 0)
    node T_6385 = eq(T_6383, UInt<1>("h0"))
    node T_6386 = and(io_mem_resp_valid, T_6385)
    node T_6388 = eq(T_6369, UInt<1>("h0"))
    node T_6389 = and(io_mem_s2_nack, T_6388)
    node T_6390 = shr(io_mem_resp_bits_tag, 1)
    node T_6394 = and(io_mem_resp_valid, T_6383)
    node T_6397 = and(io_mem_s2_nack, T_6369)
    io_requestor_0_req_ready <= io_mem_req_ready
    io_requestor_0_s2_nack <= T_6389
    io_requestor_0_resp_valid <= T_6386
    io_requestor_0_resp_bits_addr <= io_mem_resp_bits_addr
    io_requestor_0_resp_bits_tag <= pad(T_6390, 7)
    io_requestor_0_resp_bits_cmd <= io_mem_resp_bits_cmd
    io_requestor_0_resp_bits_typ <= io_mem_resp_bits_typ
    io_requestor_0_resp_bits_data <= io_mem_resp_bits_data
    io_requestor_0_resp_bits_replay <= io_mem_resp_bits_replay
    io_requestor_0_resp_bits_has_data <= io_mem_resp_bits_has_data
    io_requestor_0_resp_bits_data_word_bypass <= io_mem_resp_bits_data_word_bypass
    io_requestor_0_resp_bits_store_data <= io_mem_resp_bits_store_data
    io_requestor_0_replay_next <= io_mem_replay_next
    io_requestor_0_xcpt_ma_ld <= io_mem_xcpt_ma_ld
    io_requestor_0_xcpt_ma_st <= io_mem_xcpt_ma_st
    io_requestor_0_xcpt_pf_ld <= io_mem_xcpt_pf_ld
    io_requestor_0_xcpt_pf_st <= io_mem_xcpt_pf_st
    io_requestor_0_ordered <= io_mem_ordered
    io_requestor_1_req_ready <= T_6374
    io_requestor_1_s2_nack <= T_6397
    io_requestor_1_resp_valid <= T_6394
    io_requestor_1_resp_bits_addr <= io_mem_resp_bits_addr
    io_requestor_1_resp_bits_tag <= pad(T_6390, 7)
    io_requestor_1_resp_bits_cmd <= io_mem_resp_bits_cmd
    io_requestor_1_resp_bits_typ <= io_mem_resp_bits_typ
    io_requestor_1_resp_bits_data <= io_mem_resp_bits_data
    io_requestor_1_resp_bits_replay <= io_mem_resp_bits_replay
    io_requestor_1_resp_bits_has_data <= io_mem_resp_bits_has_data
    io_requestor_1_resp_bits_data_word_bypass <= io_mem_resp_bits_data_word_bypass
    io_requestor_1_resp_bits_store_data <= io_mem_resp_bits_store_data
    io_requestor_1_replay_next <= io_mem_replay_next
    io_requestor_1_xcpt_ma_ld <= io_mem_xcpt_ma_ld
    io_requestor_1_xcpt_ma_st <= io_mem_xcpt_ma_st
    io_requestor_1_xcpt_pf_ld <= io_mem_xcpt_pf_ld
    io_requestor_1_xcpt_pf_st <= io_mem_xcpt_pf_st
    io_requestor_1_ordered <= io_mem_ordered
    io_mem_req_valid <= T_6371
    io_mem_req_bits_addr <= GEN_2
    io_mem_req_bits_tag <= bits(GEN_4, 6, 0)
    io_mem_req_bits_cmd <= GEN_0
    io_mem_req_bits_typ <= GEN_1
    io_mem_req_bits_phys <= GEN_3
    io_mem_req_bits_data <= UInt<64>("hddcf3a303bf6b00")
    io_mem_s1_kill <= GEN_6
    io_mem_s1_data <= GEN_7
    io_mem_invalidate_lr <= T_6370
    T_6368 <= GEN_5
    T_6369 <= T_6368

  module RocketTile :
    input clk : Clock
    input reset : UInt<1>
    input io_cached_0_acquire_ready : UInt<1>
    output io_cached_0_acquire_valid : UInt<1>
    output io_cached_0_acquire_bits_addr_block : UInt<26>
    output io_cached_0_acquire_bits_client_xact_id : UInt<1>
    output io_cached_0_acquire_bits_addr_beat : UInt<3>
    output io_cached_0_acquire_bits_is_builtin_type : UInt<1>
    output io_cached_0_acquire_bits_a_type : UInt<3>
    output io_cached_0_acquire_bits_union : UInt<11>
    output io_cached_0_acquire_bits_data : UInt<64>
    output io_cached_0_probe_ready : UInt<1>
    input io_cached_0_probe_valid : UInt<1>
    input io_cached_0_probe_bits_addr_block : UInt<26>
    input io_cached_0_probe_bits_p_type : UInt<2>
    input io_cached_0_release_ready : UInt<1>
    output io_cached_0_release_valid : UInt<1>
    output io_cached_0_release_bits_addr_beat : UInt<3>
    output io_cached_0_release_bits_addr_block : UInt<26>
    output io_cached_0_release_bits_client_xact_id : UInt<1>
    output io_cached_0_release_bits_voluntary : UInt<1>
    output io_cached_0_release_bits_r_type : UInt<3>
    output io_cached_0_release_bits_data : UInt<64>
    output io_cached_0_grant_ready : UInt<1>
    input io_cached_0_grant_valid : UInt<1>
    input io_cached_0_grant_bits_addr_beat : UInt<3>
    input io_cached_0_grant_bits_client_xact_id : UInt<1>
    input io_cached_0_grant_bits_manager_xact_id : UInt<4>
    input io_cached_0_grant_bits_is_builtin_type : UInt<1>
    input io_cached_0_grant_bits_g_type : UInt<4>
    input io_cached_0_grant_bits_data : UInt<64>
    input io_cached_0_grant_bits_manager_id : UInt<1>
    input io_cached_0_finish_ready : UInt<1>
    output io_cached_0_finish_valid : UInt<1>
    output io_cached_0_finish_bits_manager_xact_id : UInt<4>
    output io_cached_0_finish_bits_manager_id : UInt<1>
    input io_uncached_0_acquire_ready : UInt<1>
    output io_uncached_0_acquire_valid : UInt<1>
    output io_uncached_0_acquire_bits_addr_block : UInt<26>
    output io_uncached_0_acquire_bits_client_xact_id : UInt<1>
    output io_uncached_0_acquire_bits_addr_beat : UInt<3>
    output io_uncached_0_acquire_bits_is_builtin_type : UInt<1>
    output io_uncached_0_acquire_bits_a_type : UInt<3>
    output io_uncached_0_acquire_bits_union : UInt<11>
    output io_uncached_0_acquire_bits_data : UInt<64>
    output io_uncached_0_grant_ready : UInt<1>
    input io_uncached_0_grant_valid : UInt<1>
    input io_uncached_0_grant_bits_addr_beat : UInt<3>
    input io_uncached_0_grant_bits_client_xact_id : UInt<1>
    input io_uncached_0_grant_bits_manager_xact_id : UInt<4>
    input io_uncached_0_grant_bits_is_builtin_type : UInt<1>
    input io_uncached_0_grant_bits_g_type : UInt<4>
    input io_uncached_0_grant_bits_data : UInt<64>
    input io_prci_reset : UInt<1>
    input io_prci_id : UInt<1>
    input io_prci_interrupts_meip : UInt<1>
    input io_prci_interrupts_seip : UInt<1>
    input io_prci_interrupts_debug : UInt<1>
    input io_prci_interrupts_mtip : UInt<1>
    input io_prci_interrupts_msip : UInt<1>
  
    inst core of Rocket
    inst icache of Frontend
    inst DCache_1 of DCache
    inst fpuOpt of FPU
    inst uncachedArb of ClientUncachedTileLinkIOArbiter
    inst PTW_1 of PTW
    inst dcArb of HellaCacheArbiter
    io_cached_0_acquire_valid <= DCache_1.io_mem_acquire_valid
    io_cached_0_acquire_bits_addr_block <= DCache_1.io_mem_acquire_bits_addr_block
    io_cached_0_acquire_bits_client_xact_id <= DCache_1.io_mem_acquire_bits_client_xact_id
    io_cached_0_acquire_bits_addr_beat <= DCache_1.io_mem_acquire_bits_addr_beat
    io_cached_0_acquire_bits_is_builtin_type <= DCache_1.io_mem_acquire_bits_is_builtin_type
    io_cached_0_acquire_bits_a_type <= DCache_1.io_mem_acquire_bits_a_type
    io_cached_0_acquire_bits_union <= DCache_1.io_mem_acquire_bits_union
    io_cached_0_acquire_bits_data <= DCache_1.io_mem_acquire_bits_data
    io_cached_0_probe_ready <= DCache_1.io_mem_probe_ready
    io_cached_0_release_valid <= DCache_1.io_mem_release_valid
    io_cached_0_release_bits_addr_beat <= DCache_1.io_mem_release_bits_addr_beat
    io_cached_0_release_bits_addr_block <= DCache_1.io_mem_release_bits_addr_block
    io_cached_0_release_bits_client_xact_id <= DCache_1.io_mem_release_bits_client_xact_id
    io_cached_0_release_bits_voluntary <= DCache_1.io_mem_release_bits_voluntary
    io_cached_0_release_bits_r_type <= DCache_1.io_mem_release_bits_r_type
    io_cached_0_release_bits_data <= DCache_1.io_mem_release_bits_data
    io_cached_0_grant_ready <= DCache_1.io_mem_grant_ready
    io_cached_0_finish_valid <= DCache_1.io_mem_finish_valid
    io_cached_0_finish_bits_manager_xact_id <= DCache_1.io_mem_finish_bits_manager_xact_id
    io_cached_0_finish_bits_manager_id <= DCache_1.io_mem_finish_bits_manager_id
    io_uncached_0_acquire_valid <= uncachedArb.io_out_acquire_valid
    io_uncached_0_acquire_bits_addr_block <= uncachedArb.io_out_acquire_bits_addr_block
    io_uncached_0_acquire_bits_client_xact_id <= uncachedArb.io_out_acquire_bits_client_xact_id
    io_uncached_0_acquire_bits_addr_beat <= uncachedArb.io_out_acquire_bits_addr_beat
    io_uncached_0_acquire_bits_is_builtin_type <= uncachedArb.io_out_acquire_bits_is_builtin_type
    io_uncached_0_acquire_bits_a_type <= uncachedArb.io_out_acquire_bits_a_type
    io_uncached_0_acquire_bits_union <= uncachedArb.io_out_acquire_bits_union
    io_uncached_0_acquire_bits_data <= uncachedArb.io_out_acquire_bits_data
    io_uncached_0_grant_ready <= uncachedArb.io_out_grant_ready
    core.io_prci_reset <= io_prci_reset
    core.io_prci_id <= io_prci_id
    core.io_prci_interrupts_meip <= io_prci_interrupts_meip
    core.io_prci_interrupts_seip <= io_prci_interrupts_seip
    core.io_prci_interrupts_debug <= io_prci_interrupts_debug
    core.io_prci_interrupts_mtip <= io_prci_interrupts_mtip
    core.io_prci_interrupts_msip <= io_prci_interrupts_msip
    core.io_imem_resp_valid <= icache.io_cpu_resp_valid
    core.io_imem_resp_bits_btb_valid <= icache.io_cpu_resp_bits_btb_valid
    core.io_imem_resp_bits_btb_bits_taken <= icache.io_cpu_resp_bits_btb_bits_taken
    core.io_imem_resp_bits_btb_bits_mask <= icache.io_cpu_resp_bits_btb_bits_mask
    core.io_imem_resp_bits_btb_bits_bridx <= icache.io_cpu_resp_bits_btb_bits_bridx
    core.io_imem_resp_bits_btb_bits_target <= icache.io_cpu_resp_bits_btb_bits_target
    core.io_imem_resp_bits_btb_bits_entry <= icache.io_cpu_resp_bits_btb_bits_entry
    core.io_imem_resp_bits_btb_bits_bht_history <= icache.io_cpu_resp_bits_btb_bits_bht_history
    core.io_imem_resp_bits_btb_bits_bht_value <= icache.io_cpu_resp_bits_btb_bits_bht_value
    core.io_imem_resp_bits_pc <= icache.io_cpu_resp_bits_pc
    core.io_imem_resp_bits_data <= icache.io_cpu_resp_bits_data
    core.io_imem_resp_bits_mask <= icache.io_cpu_resp_bits_mask
    core.io_imem_resp_bits_xcpt_if <= icache.io_cpu_resp_bits_xcpt_if
    core.io_imem_resp_bits_replay <= icache.io_cpu_resp_bits_replay
    core.io_imem_npc <= icache.io_cpu_npc
    core.io_dmem_req_ready <= dcArb.io_requestor_1_req_ready
    core.io_dmem_s2_nack <= dcArb.io_requestor_1_s2_nack
    core.io_dmem_resp_valid <= dcArb.io_requestor_1_resp_valid
    core.io_dmem_resp_bits_addr <= dcArb.io_requestor_1_resp_bits_addr
    core.io_dmem_resp_bits_tag <= dcArb.io_requestor_1_resp_bits_tag
    core.io_dmem_resp_bits_cmd <= dcArb.io_requestor_1_resp_bits_cmd
    core.io_dmem_resp_bits_typ <= dcArb.io_requestor_1_resp_bits_typ
    core.io_dmem_resp_bits_data <= dcArb.io_requestor_1_resp_bits_data
    core.io_dmem_resp_bits_replay <= dcArb.io_requestor_1_resp_bits_replay
    core.io_dmem_resp_bits_has_data <= dcArb.io_requestor_1_resp_bits_has_data
    core.io_dmem_resp_bits_data_word_bypass <= dcArb.io_requestor_1_resp_bits_data_word_bypass
    core.io_dmem_resp_bits_store_data <= dcArb.io_requestor_1_resp_bits_store_data
    core.io_dmem_replay_next <= dcArb.io_requestor_1_replay_next
    core.io_dmem_xcpt_ma_ld <= dcArb.io_requestor_1_xcpt_ma_ld
    core.io_dmem_xcpt_ma_st <= dcArb.io_requestor_1_xcpt_ma_st
    core.io_dmem_xcpt_pf_ld <= dcArb.io_requestor_1_xcpt_pf_ld
    core.io_dmem_xcpt_pf_st <= dcArb.io_requestor_1_xcpt_pf_st
    core.io_dmem_ordered <= dcArb.io_requestor_1_ordered
    core.io_fpu_fcsr_flags_valid <= fpuOpt.io_fcsr_flags_valid
    core.io_fpu_fcsr_flags_bits <= fpuOpt.io_fcsr_flags_bits
    core.io_fpu_store_data <= fpuOpt.io_store_data
    core.io_fpu_toint_data <= fpuOpt.io_toint_data
    core.io_fpu_fcsr_rdy <= fpuOpt.io_fcsr_rdy
    core.io_fpu_nack_mem <= fpuOpt.io_nack_mem
    core.io_fpu_illegal_rm <= fpuOpt.io_illegal_rm
    core.io_fpu_dec_cmd <= fpuOpt.io_dec_cmd
    core.io_fpu_dec_ldst <= fpuOpt.io_dec_ldst
    core.io_fpu_dec_wen <= fpuOpt.io_dec_wen
    core.io_fpu_dec_ren1 <= fpuOpt.io_dec_ren1
    core.io_fpu_dec_ren2 <= fpuOpt.io_dec_ren2
    core.io_fpu_dec_ren3 <= fpuOpt.io_dec_ren3
    core.io_fpu_dec_swap12 <= fpuOpt.io_dec_swap12
    core.io_fpu_dec_swap23 <= fpuOpt.io_dec_swap23
    core.io_fpu_dec_single <= fpuOpt.io_dec_single
    core.io_fpu_dec_fromint <= fpuOpt.io_dec_fromint
    core.io_fpu_dec_toint <= fpuOpt.io_dec_toint
    core.io_fpu_dec_fastpipe <= fpuOpt.io_dec_fastpipe
    core.io_fpu_dec_fma <= fpuOpt.io_dec_fma
    core.io_fpu_dec_div <= fpuOpt.io_dec_div
    core.io_fpu_dec_sqrt <= fpuOpt.io_dec_sqrt
    core.io_fpu_dec_round <= fpuOpt.io_dec_round
    core.io_fpu_dec_wflags <= fpuOpt.io_dec_wflags
    core.io_fpu_sboard_set <= fpuOpt.io_sboard_set
    core.io_fpu_sboard_clr <= fpuOpt.io_sboard_clr
    core.io_fpu_sboard_clra <= fpuOpt.io_sboard_clra
    core.io_fpu_cp_req_ready <= fpuOpt.io_cp_req_ready
    core.io_fpu_cp_resp_valid <= fpuOpt.io_cp_resp_valid
    core.io_fpu_cp_resp_bits_data <= fpuOpt.io_cp_resp_bits_data
    core.io_fpu_cp_resp_bits_exc <= fpuOpt.io_cp_resp_bits_exc
    core.io_rocc_cmd_ready <= UInt<1>("h0")
    core.io_rocc_resp_valid <= UInt<1>("h1")
    core.io_rocc_resp_bits_rd <= UInt<5>("h8")
    core.io_rocc_resp_bits_data <= UInt<64>("he50bdb3d4c91a850")
    core.io_rocc_mem_req_valid <= UInt<1>("h1")
    core.io_rocc_mem_req_bits_addr <= UInt<40>("he9ef467271")
    core.io_rocc_mem_req_bits_tag <= UInt<7>("h4e")
    core.io_rocc_mem_req_bits_cmd <= UInt<5>("ha")
    core.io_rocc_mem_req_bits_typ <= UInt<3>("h7")
    core.io_rocc_mem_req_bits_phys <= UInt<1>("h1")
    core.io_rocc_mem_req_bits_data <= UInt<64>("hdf718019e0ae5ade")
    core.io_rocc_mem_s1_kill <= UInt<1>("h1")
    core.io_rocc_mem_s1_data <= UInt<64>("h9b05046a63e8a794")
    core.io_rocc_mem_invalidate_lr <= UInt<1>("h0")
    core.io_rocc_busy <= UInt<1>("h1")
    core.io_rocc_interrupt <= UInt<1>("h0")
    core.io_rocc_autl_acquire_valid <= UInt<1>("h0")
    core.io_rocc_autl_acquire_bits_addr_block <= UInt<26>("h723bc")
    core.io_rocc_autl_acquire_bits_client_xact_id <= UInt<1>("h1")
    core.io_rocc_autl_acquire_bits_addr_beat <= UInt<3>("h3")
    core.io_rocc_autl_acquire_bits_is_builtin_type <= UInt<1>("h0")
    core.io_rocc_autl_acquire_bits_a_type <= UInt<3>("h1")
    core.io_rocc_autl_acquire_bits_union <= UInt<11>("h3b9")
    core.io_rocc_autl_acquire_bits_data <= UInt<64>("h83ce0cace4c6fd7c")
    core.io_rocc_autl_grant_ready <= UInt<1>("h1")
    core.io_rocc_fpu_req_valid <= UInt<1>("h1")
    core.io_rocc_fpu_req_bits_cmd <= UInt<5>("h1f")
    core.io_rocc_fpu_req_bits_ldst <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_wen <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_ren1 <= UInt<1>("h1")
    core.io_rocc_fpu_req_bits_ren2 <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_ren3 <= UInt<1>("h1")
    core.io_rocc_fpu_req_bits_swap12 <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_swap23 <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_single <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_fromint <= UInt<1>("h1")
    core.io_rocc_fpu_req_bits_toint <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_fastpipe <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_fma <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_div <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_sqrt <= UInt<1>("h0")
    core.io_rocc_fpu_req_bits_round <= UInt<1>("h1")
    core.io_rocc_fpu_req_bits_wflags <= UInt<1>("h1")
    core.io_rocc_fpu_req_bits_rm <= UInt<3>("h0")
    core.io_rocc_fpu_req_bits_typ <= UInt<2>("h1")
    core.io_rocc_fpu_req_bits_in1 <= UInt<65>("h3f3dbf9dd22f9b2f")
    core.io_rocc_fpu_req_bits_in2 <= UInt<65>("h91c829cda3b996bb")
    core.io_rocc_fpu_req_bits_in3 <= UInt<65>("he82673f36dca67e5")
    core.io_rocc_fpu_resp_ready <= UInt<1>("h1")
    icache.io_cpu_req_valid <= core.io_imem_req_valid
    icache.io_cpu_req_bits_pc <= core.io_imem_req_bits_pc
    icache.io_cpu_req_bits_speculative <= core.io_imem_req_bits_speculative
    icache.io_cpu_resp_ready <= core.io_imem_resp_ready
    icache.io_cpu_btb_update_valid <= core.io_imem_btb_update_valid
    icache.io_cpu_btb_update_bits_prediction_valid <= core.io_imem_btb_update_bits_prediction_valid
    icache.io_cpu_btb_update_bits_prediction_bits_taken <= core.io_imem_btb_update_bits_prediction_bits_taken
    icache.io_cpu_btb_update_bits_prediction_bits_mask <= core.io_imem_btb_update_bits_prediction_bits_mask
    icache.io_cpu_btb_update_bits_prediction_bits_bridx <= core.io_imem_btb_update_bits_prediction_bits_bridx
    icache.io_cpu_btb_update_bits_prediction_bits_target <= core.io_imem_btb_update_bits_prediction_bits_target
    icache.io_cpu_btb_update_bits_prediction_bits_entry <= core.io_imem_btb_update_bits_prediction_bits_entry
    icache.io_cpu_btb_update_bits_prediction_bits_bht_history <= core.io_imem_btb_update_bits_prediction_bits_bht_history
    icache.io_cpu_btb_update_bits_prediction_bits_bht_value <= core.io_imem_btb_update_bits_prediction_bits_bht_value
    icache.io_cpu_btb_update_bits_pc <= core.io_imem_btb_update_bits_pc
    icache.io_cpu_btb_update_bits_target <= core.io_imem_btb_update_bits_target
    icache.io_cpu_btb_update_bits_taken <= core.io_imem_btb_update_bits_taken
    icache.io_cpu_btb_update_bits_isValid <= core.io_imem_btb_update_bits_isValid
    icache.io_cpu_btb_update_bits_isJump <= core.io_imem_btb_update_bits_isJump
    icache.io_cpu_btb_update_bits_isReturn <= core.io_imem_btb_update_bits_isReturn
    icache.io_cpu_btb_update_bits_br_pc <= core.io_imem_btb_update_bits_br_pc
    icache.io_cpu_bht_update_valid <= core.io_imem_bht_update_valid
    icache.io_cpu_bht_update_bits_prediction_valid <= core.io_imem_bht_update_bits_prediction_valid
    icache.io_cpu_bht_update_bits_prediction_bits_taken <= core.io_imem_bht_update_bits_prediction_bits_taken
    icache.io_cpu_bht_update_bits_prediction_bits_mask <= core.io_imem_bht_update_bits_prediction_bits_mask
    icache.io_cpu_bht_update_bits_prediction_bits_bridx <= core.io_imem_bht_update_bits_prediction_bits_bridx
    icache.io_cpu_bht_update_bits_prediction_bits_target <= core.io_imem_bht_update_bits_prediction_bits_target
    icache.io_cpu_bht_update_bits_prediction_bits_entry <= core.io_imem_bht_update_bits_prediction_bits_entry
    icache.io_cpu_bht_update_bits_prediction_bits_bht_history <= core.io_imem_bht_update_bits_prediction_bits_bht_history
    icache.io_cpu_bht_update_bits_prediction_bits_bht_value <= core.io_imem_bht_update_bits_prediction_bits_bht_value
    icache.io_cpu_bht_update_bits_pc <= core.io_imem_bht_update_bits_pc
    icache.io_cpu_bht_update_bits_taken <= core.io_imem_bht_update_bits_taken
    icache.io_cpu_bht_update_bits_mispredict <= core.io_imem_bht_update_bits_mispredict
    icache.io_cpu_ras_update_valid <= core.io_imem_ras_update_valid
    icache.io_cpu_ras_update_bits_isCall <= core.io_imem_ras_update_bits_isCall
    icache.io_cpu_ras_update_bits_isReturn <= core.io_imem_ras_update_bits_isReturn
    icache.io_cpu_ras_update_bits_returnAddr <= core.io_imem_ras_update_bits_returnAddr
    icache.io_cpu_ras_update_bits_prediction_valid <= core.io_imem_ras_update_bits_prediction_valid
    icache.io_cpu_ras_update_bits_prediction_bits_taken <= core.io_imem_ras_update_bits_prediction_bits_taken
    icache.io_cpu_ras_update_bits_prediction_bits_mask <= core.io_imem_ras_update_bits_prediction_bits_mask
    icache.io_cpu_ras_update_bits_prediction_bits_bridx <= core.io_imem_ras_update_bits_prediction_bits_bridx
    icache.io_cpu_ras_update_bits_prediction_bits_target <= core.io_imem_ras_update_bits_prediction_bits_target
    icache.io_cpu_ras_update_bits_prediction_bits_entry <= core.io_imem_ras_update_bits_prediction_bits_entry
    icache.io_cpu_ras_update_bits_prediction_bits_bht_history <= core.io_imem_ras_update_bits_prediction_bits_bht_history
    icache.io_cpu_ras_update_bits_prediction_bits_bht_value <= core.io_imem_ras_update_bits_prediction_bits_bht_value
    icache.io_cpu_flush_icache <= core.io_imem_flush_icache
    icache.io_cpu_flush_tlb <= core.io_imem_flush_tlb
    icache.io_ptw_req_ready <= PTW_1.io_requestor_0_req_ready
    icache.io_ptw_resp_valid <= PTW_1.io_requestor_0_resp_valid
    icache.io_ptw_resp_bits_pte_reserved_for_hardware <= PTW_1.io_requestor_0_resp_bits_pte_reserved_for_hardware
    icache.io_ptw_resp_bits_pte_ppn <= PTW_1.io_requestor_0_resp_bits_pte_ppn
    icache.io_ptw_resp_bits_pte_reserved_for_software <= PTW_1.io_requestor_0_resp_bits_pte_reserved_for_software
    icache.io_ptw_resp_bits_pte_d <= PTW_1.io_requestor_0_resp_bits_pte_d
    icache.io_ptw_resp_bits_pte_a <= PTW_1.io_requestor_0_resp_bits_pte_a
    icache.io_ptw_resp_bits_pte_g <= PTW_1.io_requestor_0_resp_bits_pte_g
    icache.io_ptw_resp_bits_pte_u <= PTW_1.io_requestor_0_resp_bits_pte_u
    icache.io_ptw_resp_bits_pte_x <= PTW_1.io_requestor_0_resp_bits_pte_x
    icache.io_ptw_resp_bits_pte_w <= PTW_1.io_requestor_0_resp_bits_pte_w
    icache.io_ptw_resp_bits_pte_r <= PTW_1.io_requestor_0_resp_bits_pte_r
    icache.io_ptw_resp_bits_pte_v <= PTW_1.io_requestor_0_resp_bits_pte_v
    icache.io_ptw_ptbr_asid <= PTW_1.io_requestor_0_ptbr_asid
    icache.io_ptw_ptbr_ppn <= PTW_1.io_requestor_0_ptbr_ppn
    icache.io_ptw_invalidate <= PTW_1.io_requestor_0_invalidate
    icache.io_ptw_status_debug <= PTW_1.io_requestor_0_status_debug
    icache.io_ptw_status_isa <= PTW_1.io_requestor_0_status_isa
    icache.io_ptw_status_prv <= PTW_1.io_requestor_0_status_prv
    icache.io_ptw_status_sd <= PTW_1.io_requestor_0_status_sd
    icache.io_ptw_status_zero3 <= PTW_1.io_requestor_0_status_zero3
    icache.io_ptw_status_sd_rv32 <= PTW_1.io_requestor_0_status_sd_rv32
    icache.io_ptw_status_zero2 <= PTW_1.io_requestor_0_status_zero2
    icache.io_ptw_status_vm <= PTW_1.io_requestor_0_status_vm
    icache.io_ptw_status_zero1 <= PTW_1.io_requestor_0_status_zero1
    icache.io_ptw_status_mxr <= PTW_1.io_requestor_0_status_mxr
    icache.io_ptw_status_pum <= PTW_1.io_requestor_0_status_pum
    icache.io_ptw_status_mprv <= PTW_1.io_requestor_0_status_mprv
    icache.io_ptw_status_xs <= PTW_1.io_requestor_0_status_xs
    icache.io_ptw_status_fs <= PTW_1.io_requestor_0_status_fs
    icache.io_ptw_status_mpp <= PTW_1.io_requestor_0_status_mpp
    icache.io_ptw_status_hpp <= PTW_1.io_requestor_0_status_hpp
    icache.io_ptw_status_spp <= PTW_1.io_requestor_0_status_spp
    icache.io_ptw_status_mpie <= PTW_1.io_requestor_0_status_mpie
    icache.io_ptw_status_hpie <= PTW_1.io_requestor_0_status_hpie
    icache.io_ptw_status_spie <= PTW_1.io_requestor_0_status_spie
    icache.io_ptw_status_upie <= PTW_1.io_requestor_0_status_upie
    icache.io_ptw_status_mie <= PTW_1.io_requestor_0_status_mie
    icache.io_ptw_status_hie <= PTW_1.io_requestor_0_status_hie
    icache.io_ptw_status_sie <= PTW_1.io_requestor_0_status_sie
    icache.io_ptw_status_uie <= PTW_1.io_requestor_0_status_uie
    icache.io_mem_acquire_ready <= uncachedArb.io_in_0_acquire_ready
    icache.io_mem_grant_valid <= uncachedArb.io_in_0_grant_valid
    icache.io_mem_grant_bits_addr_beat <= uncachedArb.io_in_0_grant_bits_addr_beat
    icache.io_mem_grant_bits_client_xact_id <= uncachedArb.io_in_0_grant_bits_client_xact_id
    icache.io_mem_grant_bits_manager_xact_id <= uncachedArb.io_in_0_grant_bits_manager_xact_id
    icache.io_mem_grant_bits_is_builtin_type <= uncachedArb.io_in_0_grant_bits_is_builtin_type
    icache.io_mem_grant_bits_g_type <= uncachedArb.io_in_0_grant_bits_g_type
    icache.io_mem_grant_bits_data <= uncachedArb.io_in_0_grant_bits_data
    DCache_1.io_cpu_req_valid <= dcArb.io_mem_req_valid
    DCache_1.io_cpu_req_bits_addr <= dcArb.io_mem_req_bits_addr
    DCache_1.io_cpu_req_bits_tag <= dcArb.io_mem_req_bits_tag
    DCache_1.io_cpu_req_bits_cmd <= dcArb.io_mem_req_bits_cmd
    DCache_1.io_cpu_req_bits_typ <= dcArb.io_mem_req_bits_typ
    DCache_1.io_cpu_req_bits_phys <= dcArb.io_mem_req_bits_phys
    DCache_1.io_cpu_req_bits_data <= dcArb.io_mem_req_bits_data
    DCache_1.io_cpu_s1_kill <= dcArb.io_mem_s1_kill
    DCache_1.io_cpu_s1_data <= dcArb.io_mem_s1_data
    DCache_1.io_cpu_invalidate_lr <= dcArb.io_mem_invalidate_lr
    DCache_1.io_ptw_req_ready <= PTW_1.io_requestor_1_req_ready
    DCache_1.io_ptw_resp_valid <= PTW_1.io_requestor_1_resp_valid
    DCache_1.io_ptw_resp_bits_pte_reserved_for_hardware <= PTW_1.io_requestor_1_resp_bits_pte_reserved_for_hardware
    DCache_1.io_ptw_resp_bits_pte_ppn <= PTW_1.io_requestor_1_resp_bits_pte_ppn
    DCache_1.io_ptw_resp_bits_pte_reserved_for_software <= PTW_1.io_requestor_1_resp_bits_pte_reserved_for_software
    DCache_1.io_ptw_resp_bits_pte_d <= PTW_1.io_requestor_1_resp_bits_pte_d
    DCache_1.io_ptw_resp_bits_pte_a <= PTW_1.io_requestor_1_resp_bits_pte_a
    DCache_1.io_ptw_resp_bits_pte_g <= PTW_1.io_requestor_1_resp_bits_pte_g
    DCache_1.io_ptw_resp_bits_pte_u <= PTW_1.io_requestor_1_resp_bits_pte_u
    DCache_1.io_ptw_resp_bits_pte_x <= PTW_1.io_requestor_1_resp_bits_pte_x
    DCache_1.io_ptw_resp_bits_pte_w <= PTW_1.io_requestor_1_resp_bits_pte_w
    DCache_1.io_ptw_resp_bits_pte_r <= PTW_1.io_requestor_1_resp_bits_pte_r
    DCache_1.io_ptw_resp_bits_pte_v <= PTW_1.io_requestor_1_resp_bits_pte_v
    DCache_1.io_ptw_ptbr_asid <= PTW_1.io_requestor_1_ptbr_asid
    DCache_1.io_ptw_ptbr_ppn <= PTW_1.io_requestor_1_ptbr_ppn
    DCache_1.io_ptw_invalidate <= PTW_1.io_requestor_1_invalidate
    DCache_1.io_ptw_status_debug <= PTW_1.io_requestor_1_status_debug
    DCache_1.io_ptw_status_isa <= PTW_1.io_requestor_1_status_isa
    DCache_1.io_ptw_status_prv <= PTW_1.io_requestor_1_status_prv
    DCache_1.io_ptw_status_sd <= PTW_1.io_requestor_1_status_sd
    DCache_1.io_ptw_status_zero3 <= PTW_1.io_requestor_1_status_zero3
    DCache_1.io_ptw_status_sd_rv32 <= PTW_1.io_requestor_1_status_sd_rv32
    DCache_1.io_ptw_status_zero2 <= PTW_1.io_requestor_1_status_zero2
    DCache_1.io_ptw_status_vm <= PTW_1.io_requestor_1_status_vm
    DCache_1.io_ptw_status_zero1 <= PTW_1.io_requestor_1_status_zero1
    DCache_1.io_ptw_status_mxr <= PTW_1.io_requestor_1_status_mxr
    DCache_1.io_ptw_status_pum <= PTW_1.io_requestor_1_status_pum
    DCache_1.io_ptw_status_mprv <= PTW_1.io_requestor_1_status_mprv
    DCache_1.io_ptw_status_xs <= PTW_1.io_requestor_1_status_xs
    DCache_1.io_ptw_status_fs <= PTW_1.io_requestor_1_status_fs
    DCache_1.io_ptw_status_mpp <= PTW_1.io_requestor_1_status_mpp
    DCache_1.io_ptw_status_hpp <= PTW_1.io_requestor_1_status_hpp
    DCache_1.io_ptw_status_spp <= PTW_1.io_requestor_1_status_spp
    DCache_1.io_ptw_status_mpie <= PTW_1.io_requestor_1_status_mpie
    DCache_1.io_ptw_status_hpie <= PTW_1.io_requestor_1_status_hpie
    DCache_1.io_ptw_status_spie <= PTW_1.io_requestor_1_status_spie
    DCache_1.io_ptw_status_upie <= PTW_1.io_requestor_1_status_upie
    DCache_1.io_ptw_status_mie <= PTW_1.io_requestor_1_status_mie
    DCache_1.io_ptw_status_hie <= PTW_1.io_requestor_1_status_hie
    DCache_1.io_ptw_status_sie <= PTW_1.io_requestor_1_status_sie
    DCache_1.io_ptw_status_uie <= PTW_1.io_requestor_1_status_uie
    DCache_1.io_mem_acquire_ready <= io_cached_0_acquire_ready
    DCache_1.io_mem_probe_valid <= io_cached_0_probe_valid
    DCache_1.io_mem_probe_bits_addr_block <= io_cached_0_probe_bits_addr_block
    DCache_1.io_mem_probe_bits_p_type <= io_cached_0_probe_bits_p_type
    DCache_1.io_mem_release_ready <= io_cached_0_release_ready
    DCache_1.io_mem_grant_valid <= io_cached_0_grant_valid
    DCache_1.io_mem_grant_bits_addr_beat <= io_cached_0_grant_bits_addr_beat
    DCache_1.io_mem_grant_bits_client_xact_id <= io_cached_0_grant_bits_client_xact_id
    DCache_1.io_mem_grant_bits_manager_xact_id <= io_cached_0_grant_bits_manager_xact_id
    DCache_1.io_mem_grant_bits_is_builtin_type <= io_cached_0_grant_bits_is_builtin_type
    DCache_1.io_mem_grant_bits_g_type <= io_cached_0_grant_bits_g_type
    DCache_1.io_mem_grant_bits_data <= io_cached_0_grant_bits_data
    DCache_1.io_mem_grant_bits_manager_id <= io_cached_0_grant_bits_manager_id
    DCache_1.io_mem_finish_ready <= io_cached_0_finish_ready
    fpuOpt.io_inst <= core.io_fpu_inst
    fpuOpt.io_fromint_data <= core.io_fpu_fromint_data
    fpuOpt.io_fcsr_rm <= core.io_fpu_fcsr_rm
    fpuOpt.io_dmem_resp_val <= core.io_fpu_dmem_resp_val
    fpuOpt.io_dmem_resp_type <= core.io_fpu_dmem_resp_type
    fpuOpt.io_dmem_resp_tag <= core.io_fpu_dmem_resp_tag
    fpuOpt.io_dmem_resp_data <= core.io_fpu_dmem_resp_data
    fpuOpt.io_valid <= core.io_fpu_valid
    fpuOpt.io_killx <= core.io_fpu_killx
    fpuOpt.io_killm <= core.io_fpu_killm
    fpuOpt.io_cp_req_valid <= UInt<1>("h0")
    fpuOpt.io_cp_req_bits_cmd <= core.io_fpu_cp_req_bits_cmd
    fpuOpt.io_cp_req_bits_ldst <= core.io_fpu_cp_req_bits_ldst
    fpuOpt.io_cp_req_bits_wen <= core.io_fpu_cp_req_bits_wen
    fpuOpt.io_cp_req_bits_ren1 <= core.io_fpu_cp_req_bits_ren1
    fpuOpt.io_cp_req_bits_ren2 <= core.io_fpu_cp_req_bits_ren2
    fpuOpt.io_cp_req_bits_ren3 <= core.io_fpu_cp_req_bits_ren3
    fpuOpt.io_cp_req_bits_swap12 <= core.io_fpu_cp_req_bits_swap12
    fpuOpt.io_cp_req_bits_swap23 <= core.io_fpu_cp_req_bits_swap23
    fpuOpt.io_cp_req_bits_single <= core.io_fpu_cp_req_bits_single
    fpuOpt.io_cp_req_bits_fromint <= core.io_fpu_cp_req_bits_fromint
    fpuOpt.io_cp_req_bits_toint <= core.io_fpu_cp_req_bits_toint
    fpuOpt.io_cp_req_bits_fastpipe <= core.io_fpu_cp_req_bits_fastpipe
    fpuOpt.io_cp_req_bits_fma <= core.io_fpu_cp_req_bits_fma
    fpuOpt.io_cp_req_bits_div <= core.io_fpu_cp_req_bits_div
    fpuOpt.io_cp_req_bits_sqrt <= core.io_fpu_cp_req_bits_sqrt
    fpuOpt.io_cp_req_bits_round <= core.io_fpu_cp_req_bits_round
    fpuOpt.io_cp_req_bits_wflags <= core.io_fpu_cp_req_bits_wflags
    fpuOpt.io_cp_req_bits_rm <= core.io_fpu_cp_req_bits_rm
    fpuOpt.io_cp_req_bits_typ <= core.io_fpu_cp_req_bits_typ
    fpuOpt.io_cp_req_bits_in1 <= core.io_fpu_cp_req_bits_in1
    fpuOpt.io_cp_req_bits_in2 <= core.io_fpu_cp_req_bits_in2
    fpuOpt.io_cp_req_bits_in3 <= core.io_fpu_cp_req_bits_in3
    fpuOpt.io_cp_resp_ready <= UInt<1>("h0")
    uncachedArb.io_in_0_acquire_valid <= icache.io_mem_acquire_valid
    uncachedArb.io_in_0_acquire_bits_addr_block <= icache.io_mem_acquire_bits_addr_block
    uncachedArb.io_in_0_acquire_bits_client_xact_id <= icache.io_mem_acquire_bits_client_xact_id
    uncachedArb.io_in_0_acquire_bits_addr_beat <= icache.io_mem_acquire_bits_addr_beat
    uncachedArb.io_in_0_acquire_bits_is_builtin_type <= icache.io_mem_acquire_bits_is_builtin_type
    uncachedArb.io_in_0_acquire_bits_a_type <= icache.io_mem_acquire_bits_a_type
    uncachedArb.io_in_0_acquire_bits_union <= icache.io_mem_acquire_bits_union
    uncachedArb.io_in_0_acquire_bits_data <= icache.io_mem_acquire_bits_data
    uncachedArb.io_in_0_grant_ready <= icache.io_mem_grant_ready
    uncachedArb.io_out_acquire_ready <= io_uncached_0_acquire_ready
    uncachedArb.io_out_grant_valid <= io_uncached_0_grant_valid
    uncachedArb.io_out_grant_bits_addr_beat <= io_uncached_0_grant_bits_addr_beat
    uncachedArb.io_out_grant_bits_client_xact_id <= io_uncached_0_grant_bits_client_xact_id
    uncachedArb.io_out_grant_bits_manager_xact_id <= io_uncached_0_grant_bits_manager_xact_id
    uncachedArb.io_out_grant_bits_is_builtin_type <= io_uncached_0_grant_bits_is_builtin_type
    uncachedArb.io_out_grant_bits_g_type <= io_uncached_0_grant_bits_g_type
    uncachedArb.io_out_grant_bits_data <= io_uncached_0_grant_bits_data
    PTW_1.io_requestor_0_req_valid <= icache.io_ptw_req_valid
    PTW_1.io_requestor_0_req_bits_prv <= icache.io_ptw_req_bits_prv
    PTW_1.io_requestor_0_req_bits_pum <= icache.io_ptw_req_bits_pum
    PTW_1.io_requestor_0_req_bits_mxr <= icache.io_ptw_req_bits_mxr
    PTW_1.io_requestor_0_req_bits_addr <= icache.io_ptw_req_bits_addr
    PTW_1.io_requestor_0_req_bits_store <= icache.io_ptw_req_bits_store
    PTW_1.io_requestor_0_req_bits_fetch <= icache.io_ptw_req_bits_fetch
    PTW_1.io_requestor_1_req_valid <= DCache_1.io_ptw_req_valid
    PTW_1.io_requestor_1_req_bits_prv <= DCache_1.io_ptw_req_bits_prv
    PTW_1.io_requestor_1_req_bits_pum <= DCache_1.io_ptw_req_bits_pum
    PTW_1.io_requestor_1_req_bits_mxr <= DCache_1.io_ptw_req_bits_mxr
    PTW_1.io_requestor_1_req_bits_addr <= DCache_1.io_ptw_req_bits_addr
    PTW_1.io_requestor_1_req_bits_store <= DCache_1.io_ptw_req_bits_store
    PTW_1.io_requestor_1_req_bits_fetch <= DCache_1.io_ptw_req_bits_fetch
    PTW_1.io_mem_req_ready <= dcArb.io_requestor_0_req_ready
    PTW_1.io_mem_s2_nack <= dcArb.io_requestor_0_s2_nack
    PTW_1.io_mem_resp_valid <= dcArb.io_requestor_0_resp_valid
    PTW_1.io_mem_resp_bits_addr <= dcArb.io_requestor_0_resp_bits_addr
    PTW_1.io_mem_resp_bits_tag <= dcArb.io_requestor_0_resp_bits_tag
    PTW_1.io_mem_resp_bits_cmd <= dcArb.io_requestor_0_resp_bits_cmd
    PTW_1.io_mem_resp_bits_typ <= dcArb.io_requestor_0_resp_bits_typ
    PTW_1.io_mem_resp_bits_data <= dcArb.io_requestor_0_resp_bits_data
    PTW_1.io_mem_resp_bits_replay <= dcArb.io_requestor_0_resp_bits_replay
    PTW_1.io_mem_resp_bits_has_data <= dcArb.io_requestor_0_resp_bits_has_data
    PTW_1.io_mem_resp_bits_data_word_bypass <= dcArb.io_requestor_0_resp_bits_data_word_bypass
    PTW_1.io_mem_resp_bits_store_data <= dcArb.io_requestor_0_resp_bits_store_data
    PTW_1.io_mem_replay_next <= dcArb.io_requestor_0_replay_next
    PTW_1.io_mem_xcpt_ma_ld <= dcArb.io_requestor_0_xcpt_ma_ld
    PTW_1.io_mem_xcpt_ma_st <= dcArb.io_requestor_0_xcpt_ma_st
    PTW_1.io_mem_xcpt_pf_ld <= dcArb.io_requestor_0_xcpt_pf_ld
    PTW_1.io_mem_xcpt_pf_st <= dcArb.io_requestor_0_xcpt_pf_st
    PTW_1.io_mem_ordered <= dcArb.io_requestor_0_ordered
    PTW_1.io_dpath_ptbr_asid <= core.io_ptw_ptbr_asid
    PTW_1.io_dpath_ptbr_ppn <= core.io_ptw_ptbr_ppn
    PTW_1.io_dpath_invalidate <= core.io_ptw_invalidate
    PTW_1.io_dpath_status_debug <= core.io_ptw_status_debug
    PTW_1.io_dpath_status_isa <= core.io_ptw_status_isa
    PTW_1.io_dpath_status_prv <= core.io_ptw_status_prv
    PTW_1.io_dpath_status_sd <= core.io_ptw_status_sd
    PTW_1.io_dpath_status_zero3 <= core.io_ptw_status_zero3
    PTW_1.io_dpath_status_sd_rv32 <= core.io_ptw_status_sd_rv32
    PTW_1.io_dpath_status_zero2 <= core.io_ptw_status_zero2
    PTW_1.io_dpath_status_vm <= core.io_ptw_status_vm
    PTW_1.io_dpath_status_zero1 <= core.io_ptw_status_zero1
    PTW_1.io_dpath_status_mxr <= core.io_ptw_status_mxr
    PTW_1.io_dpath_status_pum <= core.io_ptw_status_pum
    PTW_1.io_dpath_status_mprv <= core.io_ptw_status_mprv
    PTW_1.io_dpath_status_xs <= core.io_ptw_status_xs
    PTW_1.io_dpath_status_fs <= core.io_ptw_status_fs
    PTW_1.io_dpath_status_mpp <= core.io_ptw_status_mpp
    PTW_1.io_dpath_status_hpp <= core.io_ptw_status_hpp
    PTW_1.io_dpath_status_spp <= core.io_ptw_status_spp
    PTW_1.io_dpath_status_mpie <= core.io_ptw_status_mpie
    PTW_1.io_dpath_status_hpie <= core.io_ptw_status_hpie
    PTW_1.io_dpath_status_spie <= core.io_ptw_status_spie
    PTW_1.io_dpath_status_upie <= core.io_ptw_status_upie
    PTW_1.io_dpath_status_mie <= core.io_ptw_status_mie
    PTW_1.io_dpath_status_hie <= core.io_ptw_status_hie
    PTW_1.io_dpath_status_sie <= core.io_ptw_status_sie
    PTW_1.io_dpath_status_uie <= core.io_ptw_status_uie
    dcArb.io_requestor_0_req_valid <= PTW_1.io_mem_req_valid
    dcArb.io_requestor_0_req_bits_addr <= PTW_1.io_mem_req_bits_addr
    dcArb.io_requestor_0_req_bits_tag <= PTW_1.io_mem_req_bits_tag
    dcArb.io_requestor_0_req_bits_cmd <= PTW_1.io_mem_req_bits_cmd
    dcArb.io_requestor_0_req_bits_typ <= PTW_1.io_mem_req_bits_typ
    dcArb.io_requestor_0_req_bits_phys <= PTW_1.io_mem_req_bits_phys
    dcArb.io_requestor_0_req_bits_data <= PTW_1.io_mem_req_bits_data
    dcArb.io_requestor_0_s1_kill <= PTW_1.io_mem_s1_kill
    dcArb.io_requestor_0_s1_data <= PTW_1.io_mem_s1_data
    dcArb.io_requestor_0_invalidate_lr <= PTW_1.io_mem_invalidate_lr
    dcArb.io_requestor_1_req_valid <= core.io_dmem_req_valid
    dcArb.io_requestor_1_req_bits_addr <= core.io_dmem_req_bits_addr
    dcArb.io_requestor_1_req_bits_tag <= core.io_dmem_req_bits_tag
    dcArb.io_requestor_1_req_bits_cmd <= core.io_dmem_req_bits_cmd
    dcArb.io_requestor_1_req_bits_typ <= core.io_dmem_req_bits_typ
    dcArb.io_requestor_1_req_bits_phys <= core.io_dmem_req_bits_phys
    dcArb.io_requestor_1_req_bits_data <= core.io_dmem_req_bits_data
    dcArb.io_requestor_1_s1_kill <= core.io_dmem_s1_kill
    dcArb.io_requestor_1_s1_data <= core.io_dmem_s1_data
    dcArb.io_requestor_1_invalidate_lr <= core.io_dmem_invalidate_lr
    dcArb.io_mem_req_ready <= DCache_1.io_cpu_req_ready
    dcArb.io_mem_s2_nack <= DCache_1.io_cpu_s2_nack
    dcArb.io_mem_resp_valid <= DCache_1.io_cpu_resp_valid
    dcArb.io_mem_resp_bits_addr <= DCache_1.io_cpu_resp_bits_addr
    dcArb.io_mem_resp_bits_tag <= DCache_1.io_cpu_resp_bits_tag
    dcArb.io_mem_resp_bits_cmd <= DCache_1.io_cpu_resp_bits_cmd
    dcArb.io_mem_resp_bits_typ <= DCache_1.io_cpu_resp_bits_typ
    dcArb.io_mem_resp_bits_data <= DCache_1.io_cpu_resp_bits_data
    dcArb.io_mem_resp_bits_replay <= DCache_1.io_cpu_resp_bits_replay
    dcArb.io_mem_resp_bits_has_data <= DCache_1.io_cpu_resp_bits_has_data
    dcArb.io_mem_resp_bits_data_word_bypass <= DCache_1.io_cpu_resp_bits_data_word_bypass
    dcArb.io_mem_resp_bits_store_data <= DCache_1.io_cpu_resp_bits_store_data
    dcArb.io_mem_replay_next <= DCache_1.io_cpu_replay_next
    dcArb.io_mem_xcpt_ma_ld <= DCache_1.io_cpu_xcpt_ma_ld
    dcArb.io_mem_xcpt_ma_st <= DCache_1.io_cpu_xcpt_ma_st
    dcArb.io_mem_xcpt_pf_ld <= DCache_1.io_cpu_xcpt_pf_ld
    dcArb.io_mem_xcpt_pf_st <= DCache_1.io_cpu_xcpt_pf_st
    dcArb.io_mem_ordered <= DCache_1.io_cpu_ordered

  module Queue :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_header_src : UInt<2>
    input io_enq_bits_header_dst : UInt<2>
    input io_enq_bits_payload_addr_block : UInt<26>
    input io_enq_bits_payload_client_xact_id : UInt<1>
    input io_enq_bits_payload_addr_beat : UInt<3>
    input io_enq_bits_payload_is_builtin_type : UInt<1>
    input io_enq_bits_payload_a_type : UInt<3>
    input io_enq_bits_payload_union : UInt<11>
    input io_enq_bits_payload_data : UInt<64>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_header_src : UInt<2>
    output io_deq_bits_header_dst : UInt<2>
    output io_deq_bits_payload_addr_block : UInt<26>
    output io_deq_bits_payload_client_xact_id : UInt<1>
    output io_deq_bits_payload_addr_beat : UInt<3>
    output io_deq_bits_payload_is_builtin_type : UInt<1>
    output io_deq_bits_payload_a_type : UInt<3>
    output io_deq_bits_payload_union : UInt<11>
    output io_deq_bits_payload_data : UInt<64>
    output io_count : UInt<1>
  
    mem ram_header_src :
      data-type => UInt<2>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_header_src.T_1144.en <= UInt<1>("h1")
    ram_header_src.T_1144.addr <= UInt<1>("h0")
    ram_header_src.T_1025.en <= do_enq
    ram_header_src.T_1025.mask <= do_enq
    ram_header_src.T_1025.addr <= UInt<1>("h0")
    ram_header_src.T_1025.data <= io_enq_bits_header_src
    mem ram_header_dst :
      data-type => UInt<2>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_header_dst.T_1144.en <= UInt<1>("h1")
    ram_header_dst.T_1144.addr <= UInt<1>("h0")
    ram_header_dst.T_1025.en <= do_enq
    ram_header_dst.T_1025.mask <= do_enq
    ram_header_dst.T_1025.addr <= UInt<1>("h0")
    ram_header_dst.T_1025.data <= io_enq_bits_header_dst
    mem ram_payload_addr_block :
      data-type => UInt<26>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_payload_addr_block.T_1144.en <= UInt<1>("h1")
    ram_payload_addr_block.T_1144.addr <= UInt<1>("h0")
    ram_payload_addr_block.T_1025.en <= do_enq
    ram_payload_addr_block.T_1025.mask <= do_enq
    ram_payload_addr_block.T_1025.addr <= UInt<1>("h0")
    ram_payload_addr_block.T_1025.data <= io_enq_bits_payload_addr_block
    mem ram_payload_client_xact_id :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_payload_client_xact_id.T_1144.en <= UInt<1>("h1")
    ram_payload_client_xact_id.T_1144.addr <= UInt<1>("h0")
    ram_payload_client_xact_id.T_1025.en <= do_enq
    ram_payload_client_xact_id.T_1025.mask <= do_enq
    ram_payload_client_xact_id.T_1025.addr <= UInt<1>("h0")
    ram_payload_client_xact_id.T_1025.data <= io_enq_bits_payload_client_xact_id
    mem ram_payload_addr_beat :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_payload_addr_beat.T_1144.en <= UInt<1>("h1")
    ram_payload_addr_beat.T_1144.addr <= UInt<1>("h0")
    ram_payload_addr_beat.T_1025.en <= do_enq
    ram_payload_addr_beat.T_1025.mask <= do_enq
    ram_payload_addr_beat.T_1025.addr <= UInt<1>("h0")
    ram_payload_addr_beat.T_1025.data <= io_enq_bits_payload_addr_beat
    mem ram_payload_is_builtin_type :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_payload_is_builtin_type.T_1144.en <= UInt<1>("h1")
    ram_payload_is_builtin_type.T_1144.addr <= UInt<1>("h0")
    ram_payload_is_builtin_type.T_1025.en <= do_enq
    ram_payload_is_builtin_type.T_1025.mask <= do_enq
    ram_payload_is_builtin_type.T_1025.addr <= UInt<1>("h0")
    ram_payload_is_builtin_type.T_1025.data <= io_enq_bits_payload_is_builtin_type
    mem ram_payload_a_type :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_payload_a_type.T_1144.en <= UInt<1>("h1")
    ram_payload_a_type.T_1144.addr <= UInt<1>("h0")
    ram_payload_a_type.T_1025.en <= do_enq
    ram_payload_a_type.T_1025.mask <= do_enq
    ram_payload_a_type.T_1025.addr <= UInt<1>("h0")
    ram_payload_a_type.T_1025.data <= io_enq_bits_payload_a_type
    mem ram_payload_union :
      data-type => UInt<11>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_payload_union.T_1144.en <= UInt<1>("h1")
    ram_payload_union.T_1144.addr <= UInt<1>("h0")
    ram_payload_union.T_1025.en <= do_enq
    ram_payload_union.T_1025.mask <= do_enq
    ram_payload_union.T_1025.addr <= UInt<1>("h0")
    ram_payload_union.T_1025.data <= io_enq_bits_payload_union
    mem ram_payload_data :
      data-type => UInt<64>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1025
      read-under-write => undefined
    ram_payload_data.T_1144.en <= UInt<1>("h1")
    ram_payload_data.T_1144.addr <= UInt<1>("h0")
    ram_payload_data.T_1025.en <= do_enq
    ram_payload_data.T_1025.mask <= do_enq
    ram_payload_data.T_1025.addr <= UInt<1>("h0")
    ram_payload_data.T_1025.data <= io_enq_bits_payload_data
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_1022 = eq(maybe_full, UInt<1>("h0"))
    node T_1023 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_1024 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_1139 = neq(do_enq, do_deq)
    node GEN_12 = mux(T_1139, do_enq, maybe_full)
    node T_1141 = eq(T_1022, UInt<1>("h0"))
    node T_1256 = sub(UInt<1>("h0"), UInt<1>("h0"))
    node ptr_diff = tail(T_1256, 1)
    node T_1258 = cat(maybe_full, ptr_diff)
    io_enq_ready <= T_1022
    io_deq_valid <= T_1141
    io_deq_bits_header_src <= ram_header_src.T_1144.data
    io_deq_bits_header_dst <= ram_header_dst.T_1144.data
    io_deq_bits_payload_addr_block <= ram_payload_addr_block.T_1144.data
    io_deq_bits_payload_client_xact_id <= ram_payload_client_xact_id.T_1144.data
    io_deq_bits_payload_addr_beat <= ram_payload_addr_beat.T_1144.data
    io_deq_bits_payload_is_builtin_type <= ram_payload_is_builtin_type.T_1144.data
    io_deq_bits_payload_a_type <= ram_payload_a_type.T_1144.data
    io_deq_bits_payload_union <= ram_payload_union.T_1144.data
    io_deq_bits_payload_data <= ram_payload_data.T_1144.data
    io_count <= bits(T_1258, 0, 0)
    maybe_full <= GEN_12
    do_enq <= T_1023
    do_deq <= T_1024

  module Queue_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_header_src : UInt<2>
    input io_enq_bits_header_dst : UInt<2>
    input io_enq_bits_payload_addr_block : UInt<26>
    input io_enq_bits_payload_p_type : UInt<2>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_header_src : UInt<2>
    output io_deq_bits_header_dst : UInt<2>
    output io_deq_bits_payload_addr_block : UInt<26>
    output io_deq_bits_payload_p_type : UInt<2>
    output io_count : UInt<1>
  
    mem ram_header_src :
      data-type => UInt<2>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1094
      writer => T_980
      read-under-write => undefined
    ram_header_src.T_1094.en <= UInt<1>("h1")
    ram_header_src.T_1094.addr <= UInt<1>("h0")
    ram_header_src.T_980.en <= do_enq
    ram_header_src.T_980.mask <= do_enq
    ram_header_src.T_980.addr <= UInt<1>("h0")
    ram_header_src.T_980.data <= io_enq_bits_header_src
    mem ram_header_dst :
      data-type => UInt<2>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1094
      writer => T_980
      read-under-write => undefined
    ram_header_dst.T_1094.en <= UInt<1>("h1")
    ram_header_dst.T_1094.addr <= UInt<1>("h0")
    ram_header_dst.T_980.en <= do_enq
    ram_header_dst.T_980.mask <= do_enq
    ram_header_dst.T_980.addr <= UInt<1>("h0")
    ram_header_dst.T_980.data <= io_enq_bits_header_dst
    mem ram_payload_addr_block :
      data-type => UInt<26>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1094
      writer => T_980
      read-under-write => undefined
    ram_payload_addr_block.T_1094.en <= UInt<1>("h1")
    ram_payload_addr_block.T_1094.addr <= UInt<1>("h0")
    ram_payload_addr_block.T_980.en <= do_enq
    ram_payload_addr_block.T_980.mask <= do_enq
    ram_payload_addr_block.T_980.addr <= UInt<1>("h0")
    ram_payload_addr_block.T_980.data <= io_enq_bits_payload_addr_block
    mem ram_payload_p_type :
      data-type => UInt<2>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_1094
      writer => T_980
      read-under-write => undefined
    ram_payload_p_type.T_1094.en <= UInt<1>("h1")
    ram_payload_p_type.T_1094.addr <= UInt<1>("h0")
    ram_payload_p_type.T_980.en <= do_enq
    ram_payload_p_type.T_980.mask <= do_enq
    ram_payload_p_type.T_980.addr <= UInt<1>("h0")
    ram_payload_p_type.T_980.data <= io_enq_bits_payload_p_type
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_977 = eq(maybe_full, UInt<1>("h0"))
    node T_978 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_979 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_1089 = neq(do_enq, do_deq)
    node GEN_7 = mux(T_1089, do_enq, maybe_full)
    node T_1091 = eq(T_977, UInt<1>("h0"))
    node T_1201 = sub(UInt<1>("h0"), UInt<1>("h0"))
    node ptr_diff = tail(T_1201, 1)
    node T_1203 = cat(maybe_full, ptr_diff)
    io_enq_ready <= T_977
    io_deq_valid <= T_1091
    io_deq_bits_header_src <= ram_header_src.T_1094.data
    io_deq_bits_header_dst <= ram_header_dst.T_1094.data
    io_deq_bits_payload_addr_block <= ram_payload_addr_block.T_1094.data
    io_deq_bits_payload_p_type <= ram_payload_p_type.T_1094.data
    io_count <= bits(T_1203, 0, 0)
    maybe_full <= GEN_7
    do_enq <= T_978
    do_deq <= T_979

  module Queue_2 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_header_src : UInt<2>
    input io_enq_bits_header_dst : UInt<2>
    input io_enq_bits_payload_addr_beat : UInt<3>
    input io_enq_bits_payload_addr_block : UInt<26>
    input io_enq_bits_payload_client_xact_id : UInt<1>
    input io_enq_bits_payload_voluntary : UInt<1>
    input io_enq_bits_payload_r_type : UInt<3>
    input io_enq_bits_payload_data : UInt<64>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_header_src : UInt<2>
    output io_deq_bits_header_dst : UInt<2>
    output io_deq_bits_payload_addr_beat : UInt<3>
    output io_deq_bits_payload_addr_block : UInt<26>
    output io_deq_bits_payload_client_xact_id : UInt<1>
    output io_deq_bits_payload_voluntary : UInt<1>
    output io_deq_bits_payload_r_type : UInt<3>
    output io_deq_bits_payload_data : UInt<64>
    output io_count : UInt<2>
  
    mem ram_header_src :
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_header_src.T_1144.en <= UInt<1>("h1")
    ram_header_src.T_1144.addr <= T_1012
    ram_header_src.T_1018.en <= do_enq
    ram_header_src.T_1018.mask <= do_enq
    ram_header_src.T_1018.addr <= T_1010
    ram_header_src.T_1018.data <= io_enq_bits_header_src
    mem ram_header_dst :
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_header_dst.T_1144.en <= UInt<1>("h1")
    ram_header_dst.T_1144.addr <= T_1012
    ram_header_dst.T_1018.en <= do_enq
    ram_header_dst.T_1018.mask <= do_enq
    ram_header_dst.T_1018.addr <= T_1010
    ram_header_dst.T_1018.data <= io_enq_bits_header_dst
    mem ram_payload_addr_beat :
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_addr_beat.T_1144.en <= UInt<1>("h1")
    ram_payload_addr_beat.T_1144.addr <= T_1012
    ram_payload_addr_beat.T_1018.en <= do_enq
    ram_payload_addr_beat.T_1018.mask <= do_enq
    ram_payload_addr_beat.T_1018.addr <= T_1010
    ram_payload_addr_beat.T_1018.data <= io_enq_bits_payload_addr_beat
    mem ram_payload_addr_block :
      data-type => UInt<26>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_addr_block.T_1144.en <= UInt<1>("h1")
    ram_payload_addr_block.T_1144.addr <= T_1012
    ram_payload_addr_block.T_1018.en <= do_enq
    ram_payload_addr_block.T_1018.mask <= do_enq
    ram_payload_addr_block.T_1018.addr <= T_1010
    ram_payload_addr_block.T_1018.data <= io_enq_bits_payload_addr_block
    mem ram_payload_client_xact_id :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_client_xact_id.T_1144.en <= UInt<1>("h1")
    ram_payload_client_xact_id.T_1144.addr <= T_1012
    ram_payload_client_xact_id.T_1018.en <= do_enq
    ram_payload_client_xact_id.T_1018.mask <= do_enq
    ram_payload_client_xact_id.T_1018.addr <= T_1010
    ram_payload_client_xact_id.T_1018.data <= io_enq_bits_payload_client_xact_id
    mem ram_payload_voluntary :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_voluntary.T_1144.en <= UInt<1>("h1")
    ram_payload_voluntary.T_1144.addr <= T_1012
    ram_payload_voluntary.T_1018.en <= do_enq
    ram_payload_voluntary.T_1018.mask <= do_enq
    ram_payload_voluntary.T_1018.addr <= T_1010
    ram_payload_voluntary.T_1018.data <= io_enq_bits_payload_voluntary
    mem ram_payload_r_type :
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_r_type.T_1144.en <= UInt<1>("h1")
    ram_payload_r_type.T_1144.addr <= T_1012
    ram_payload_r_type.T_1018.en <= do_enq
    ram_payload_r_type.T_1018.mask <= do_enq
    ram_payload_r_type.T_1018.addr <= T_1010
    ram_payload_r_type.T_1018.data <= io_enq_bits_payload_r_type
    mem ram_payload_data :
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_data.T_1144.en <= UInt<1>("h1")
    ram_payload_data.T_1144.addr <= T_1012
    ram_payload_data.T_1018.en <= do_enq
    ram_payload_data.T_1018.mask <= do_enq
    ram_payload_data.T_1018.addr <= T_1010
    ram_payload_data.T_1018.data <= io_enq_bits_payload_data
    reg T_1010 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_1012 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node ptr_match = eq(T_1010, T_1012)
    node T_1015 = eq(maybe_full, UInt<1>("h0"))
    node empty = and(ptr_match, T_1015)
    node full = and(ptr_match, maybe_full)
    node T_1016 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_1017 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_1132 = add(T_1010, UInt<1>("h1"))
    node T_1133 = tail(T_1132, 1)
    node GEN_11 = mux(do_enq, T_1133, T_1010)
    node T_1137 = add(T_1012, UInt<1>("h1"))
    node T_1138 = tail(T_1137, 1)
    node GEN_12 = mux(do_deq, T_1138, T_1012)
    node T_1139 = neq(do_enq, do_deq)
    node GEN_13 = mux(T_1139, do_enq, maybe_full)
    node T_1141 = eq(empty, UInt<1>("h0"))
    node T_1143 = eq(full, UInt<1>("h0"))
    node T_1255 = sub(T_1010, T_1012)
    node ptr_diff = tail(T_1255, 1)
    node T_1256 = and(maybe_full, ptr_match)
    node T_1257 = cat(T_1256, ptr_diff)
    io_enq_ready <= T_1143
    io_deq_valid <= T_1141
    io_deq_bits_header_src <= ram_header_src.T_1144.data
    io_deq_bits_header_dst <= ram_header_dst.T_1144.data
    io_deq_bits_payload_addr_beat <= ram_payload_addr_beat.T_1144.data
    io_deq_bits_payload_addr_block <= ram_payload_addr_block.T_1144.data
    io_deq_bits_payload_client_xact_id <= ram_payload_client_xact_id.T_1144.data
    io_deq_bits_payload_voluntary <= ram_payload_voluntary.T_1144.data
    io_deq_bits_payload_r_type <= ram_payload_r_type.T_1144.data
    io_deq_bits_payload_data <= ram_payload_data.T_1144.data
    io_count <= T_1257
    T_1010 <= GEN_11
    T_1012 <= GEN_12
    maybe_full <= GEN_13
    do_enq <= T_1016
    do_deq <= T_1017

  module Queue_3 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_header_src : UInt<2>
    input io_enq_bits_header_dst : UInt<2>
    input io_enq_bits_payload_addr_beat : UInt<3>
    input io_enq_bits_payload_client_xact_id : UInt<1>
    input io_enq_bits_payload_manager_xact_id : UInt<4>
    input io_enq_bits_payload_is_builtin_type : UInt<1>
    input io_enq_bits_payload_g_type : UInt<4>
    input io_enq_bits_payload_data : UInt<64>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_header_src : UInt<2>
    output io_deq_bits_header_dst : UInt<2>
    output io_deq_bits_payload_addr_beat : UInt<3>
    output io_deq_bits_payload_client_xact_id : UInt<1>
    output io_deq_bits_payload_manager_xact_id : UInt<4>
    output io_deq_bits_payload_is_builtin_type : UInt<1>
    output io_deq_bits_payload_g_type : UInt<4>
    output io_deq_bits_payload_data : UInt<64>
    output io_count : UInt<2>
  
    mem ram_header_src :
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_header_src.T_1144.en <= UInt<1>("h1")
    ram_header_src.T_1144.addr <= T_1012
    ram_header_src.T_1018.en <= do_enq
    ram_header_src.T_1018.mask <= do_enq
    ram_header_src.T_1018.addr <= T_1010
    ram_header_src.T_1018.data <= io_enq_bits_header_src
    mem ram_header_dst :
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_header_dst.T_1144.en <= UInt<1>("h1")
    ram_header_dst.T_1144.addr <= T_1012
    ram_header_dst.T_1018.en <= do_enq
    ram_header_dst.T_1018.mask <= do_enq
    ram_header_dst.T_1018.addr <= T_1010
    ram_header_dst.T_1018.data <= io_enq_bits_header_dst
    mem ram_payload_addr_beat :
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_addr_beat.T_1144.en <= UInt<1>("h1")
    ram_payload_addr_beat.T_1144.addr <= T_1012
    ram_payload_addr_beat.T_1018.en <= do_enq
    ram_payload_addr_beat.T_1018.mask <= do_enq
    ram_payload_addr_beat.T_1018.addr <= T_1010
    ram_payload_addr_beat.T_1018.data <= io_enq_bits_payload_addr_beat
    mem ram_payload_client_xact_id :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_client_xact_id.T_1144.en <= UInt<1>("h1")
    ram_payload_client_xact_id.T_1144.addr <= T_1012
    ram_payload_client_xact_id.T_1018.en <= do_enq
    ram_payload_client_xact_id.T_1018.mask <= do_enq
    ram_payload_client_xact_id.T_1018.addr <= T_1010
    ram_payload_client_xact_id.T_1018.data <= io_enq_bits_payload_client_xact_id
    mem ram_payload_manager_xact_id :
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_manager_xact_id.T_1144.en <= UInt<1>("h1")
    ram_payload_manager_xact_id.T_1144.addr <= T_1012
    ram_payload_manager_xact_id.T_1018.en <= do_enq
    ram_payload_manager_xact_id.T_1018.mask <= do_enq
    ram_payload_manager_xact_id.T_1018.addr <= T_1010
    ram_payload_manager_xact_id.T_1018.data <= io_enq_bits_payload_manager_xact_id
    mem ram_payload_is_builtin_type :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_is_builtin_type.T_1144.en <= UInt<1>("h1")
    ram_payload_is_builtin_type.T_1144.addr <= T_1012
    ram_payload_is_builtin_type.T_1018.en <= do_enq
    ram_payload_is_builtin_type.T_1018.mask <= do_enq
    ram_payload_is_builtin_type.T_1018.addr <= T_1010
    ram_payload_is_builtin_type.T_1018.data <= io_enq_bits_payload_is_builtin_type
    mem ram_payload_g_type :
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_g_type.T_1144.en <= UInt<1>("h1")
    ram_payload_g_type.T_1144.addr <= T_1012
    ram_payload_g_type.T_1018.en <= do_enq
    ram_payload_g_type.T_1018.mask <= do_enq
    ram_payload_g_type.T_1018.addr <= T_1010
    ram_payload_g_type.T_1018.data <= io_enq_bits_payload_g_type
    mem ram_payload_data :
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_1144
      writer => T_1018
      read-under-write => undefined
    ram_payload_data.T_1144.en <= UInt<1>("h1")
    ram_payload_data.T_1144.addr <= T_1012
    ram_payload_data.T_1018.en <= do_enq
    ram_payload_data.T_1018.mask <= do_enq
    ram_payload_data.T_1018.addr <= T_1010
    ram_payload_data.T_1018.data <= io_enq_bits_payload_data
    reg T_1010 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_1012 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node ptr_match = eq(T_1010, T_1012)
    node T_1015 = eq(maybe_full, UInt<1>("h0"))
    node empty = and(ptr_match, T_1015)
    node full = and(ptr_match, maybe_full)
    node T_1016 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_1017 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_1132 = add(T_1010, UInt<1>("h1"))
    node T_1133 = tail(T_1132, 1)
    node GEN_11 = mux(do_enq, T_1133, T_1010)
    node T_1137 = add(T_1012, UInt<1>("h1"))
    node T_1138 = tail(T_1137, 1)
    node GEN_12 = mux(do_deq, T_1138, T_1012)
    node T_1139 = neq(do_enq, do_deq)
    node GEN_13 = mux(T_1139, do_enq, maybe_full)
    node T_1141 = eq(empty, UInt<1>("h0"))
    node T_1143 = eq(full, UInt<1>("h0"))
    node T_1255 = sub(T_1010, T_1012)
    node ptr_diff = tail(T_1255, 1)
    node T_1256 = and(maybe_full, ptr_match)
    node T_1257 = cat(T_1256, ptr_diff)
    io_enq_ready <= T_1143
    io_deq_valid <= T_1141
    io_deq_bits_header_src <= ram_header_src.T_1144.data
    io_deq_bits_header_dst <= ram_header_dst.T_1144.data
    io_deq_bits_payload_addr_beat <= ram_payload_addr_beat.T_1144.data
    io_deq_bits_payload_client_xact_id <= ram_payload_client_xact_id.T_1144.data
    io_deq_bits_payload_manager_xact_id <= ram_payload_manager_xact_id.T_1144.data
    io_deq_bits_payload_is_builtin_type <= ram_payload_is_builtin_type.T_1144.data
    io_deq_bits_payload_g_type <= ram_payload_g_type.T_1144.data
    io_deq_bits_payload_data <= ram_payload_data.T_1144.data
    io_count <= T_1257
    T_1010 <= GEN_11
    T_1012 <= GEN_12
    maybe_full <= GEN_13
    do_enq <= T_1016
    do_deq <= T_1017

  module TileLinkEnqueuer :
    input clk : Clock
    input reset : UInt<1>
    output io_client_acquire_ready : UInt<1>
    input io_client_acquire_valid : UInt<1>
    input io_client_acquire_bits_header_src : UInt<2>
    input io_client_acquire_bits_header_dst : UInt<2>
    input io_client_acquire_bits_payload_addr_block : UInt<26>
    input io_client_acquire_bits_payload_client_xact_id : UInt<1>
    input io_client_acquire_bits_payload_addr_beat : UInt<3>
    input io_client_acquire_bits_payload_is_builtin_type : UInt<1>
    input io_client_acquire_bits_payload_a_type : UInt<3>
    input io_client_acquire_bits_payload_union : UInt<11>
    input io_client_acquire_bits_payload_data : UInt<64>
    input io_client_grant_ready : UInt<1>
    output io_client_grant_valid : UInt<1>
    output io_client_grant_bits_header_src : UInt<2>
    output io_client_grant_bits_header_dst : UInt<2>
    output io_client_grant_bits_payload_addr_beat : UInt<3>
    output io_client_grant_bits_payload_client_xact_id : UInt<1>
    output io_client_grant_bits_payload_manager_xact_id : UInt<4>
    output io_client_grant_bits_payload_is_builtin_type : UInt<1>
    output io_client_grant_bits_payload_g_type : UInt<4>
    output io_client_grant_bits_payload_data : UInt<64>
    output io_client_finish_ready : UInt<1>
    input io_client_finish_valid : UInt<1>
    input io_client_finish_bits_header_src : UInt<2>
    input io_client_finish_bits_header_dst : UInt<2>
    input io_client_finish_bits_payload_manager_xact_id : UInt<4>
    input io_client_probe_ready : UInt<1>
    output io_client_probe_valid : UInt<1>
    output io_client_probe_bits_header_src : UInt<2>
    output io_client_probe_bits_header_dst : UInt<2>
    output io_client_probe_bits_payload_addr_block : UInt<26>
    output io_client_probe_bits_payload_p_type : UInt<2>
    output io_client_release_ready : UInt<1>
    input io_client_release_valid : UInt<1>
    input io_client_release_bits_header_src : UInt<2>
    input io_client_release_bits_header_dst : UInt<2>
    input io_client_release_bits_payload_addr_beat : UInt<3>
    input io_client_release_bits_payload_addr_block : UInt<26>
    input io_client_release_bits_payload_client_xact_id : UInt<1>
    input io_client_release_bits_payload_voluntary : UInt<1>
    input io_client_release_bits_payload_r_type : UInt<3>
    input io_client_release_bits_payload_data : UInt<64>
    input io_manager_acquire_ready : UInt<1>
    output io_manager_acquire_valid : UInt<1>
    output io_manager_acquire_bits_header_src : UInt<2>
    output io_manager_acquire_bits_header_dst : UInt<2>
    output io_manager_acquire_bits_payload_addr_block : UInt<26>
    output io_manager_acquire_bits_payload_client_xact_id : UInt<1>
    output io_manager_acquire_bits_payload_addr_beat : UInt<3>
    output io_manager_acquire_bits_payload_is_builtin_type : UInt<1>
    output io_manager_acquire_bits_payload_a_type : UInt<3>
    output io_manager_acquire_bits_payload_union : UInt<11>
    output io_manager_acquire_bits_payload_data : UInt<64>
    output io_manager_grant_ready : UInt<1>
    input io_manager_grant_valid : UInt<1>
    input io_manager_grant_bits_header_src : UInt<2>
    input io_manager_grant_bits_header_dst : UInt<2>
    input io_manager_grant_bits_payload_addr_beat : UInt<3>
    input io_manager_grant_bits_payload_client_xact_id : UInt<1>
    input io_manager_grant_bits_payload_manager_xact_id : UInt<4>
    input io_manager_grant_bits_payload_is_builtin_type : UInt<1>
    input io_manager_grant_bits_payload_g_type : UInt<4>
    input io_manager_grant_bits_payload_data : UInt<64>
    input io_manager_finish_ready : UInt<1>
    output io_manager_finish_valid : UInt<1>
    output io_manager_finish_bits_header_src : UInt<2>
    output io_manager_finish_bits_header_dst : UInt<2>
    output io_manager_finish_bits_payload_manager_xact_id : UInt<4>
    output io_manager_probe_ready : UInt<1>
    input io_manager_probe_valid : UInt<1>
    input io_manager_probe_bits_header_src : UInt<2>
    input io_manager_probe_bits_header_dst : UInt<2>
    input io_manager_probe_bits_payload_addr_block : UInt<26>
    input io_manager_probe_bits_payload_p_type : UInt<2>
    input io_manager_release_ready : UInt<1>
    output io_manager_release_valid : UInt<1>
    output io_manager_release_bits_header_src : UInt<2>
    output io_manager_release_bits_header_dst : UInt<2>
    output io_manager_release_bits_payload_addr_beat : UInt<3>
    output io_manager_release_bits_payload_addr_block : UInt<26>
    output io_manager_release_bits_payload_client_xact_id : UInt<1>
    output io_manager_release_bits_payload_voluntary : UInt<1>
    output io_manager_release_bits_payload_r_type : UInt<3>
    output io_manager_release_bits_payload_data : UInt<64>
  
    inst Queue_4 of Queue
    inst Queue_1_1 of Queue_1
    inst Queue_2_1 of Queue_2
    inst Queue_3_1 of Queue_3
    io_client_acquire_ready <= Queue_4.io_enq_ready
    io_client_grant_valid <= Queue_3_1.io_deq_valid
    io_client_grant_bits_header_src <= Queue_3_1.io_deq_bits_header_src
    io_client_grant_bits_header_dst <= Queue_3_1.io_deq_bits_header_dst
    io_client_grant_bits_payload_addr_beat <= Queue_3_1.io_deq_bits_payload_addr_beat
    io_client_grant_bits_payload_client_xact_id <= Queue_3_1.io_deq_bits_payload_client_xact_id
    io_client_grant_bits_payload_manager_xact_id <= Queue_3_1.io_deq_bits_payload_manager_xact_id
    io_client_grant_bits_payload_is_builtin_type <= Queue_3_1.io_deq_bits_payload_is_builtin_type
    io_client_grant_bits_payload_g_type <= Queue_3_1.io_deq_bits_payload_g_type
    io_client_grant_bits_payload_data <= Queue_3_1.io_deq_bits_payload_data
    io_client_finish_ready <= io_manager_finish_ready
    io_client_probe_valid <= Queue_1_1.io_deq_valid
    io_client_probe_bits_header_src <= Queue_1_1.io_deq_bits_header_src
    io_client_probe_bits_header_dst <= Queue_1_1.io_deq_bits_header_dst
    io_client_probe_bits_payload_addr_block <= Queue_1_1.io_deq_bits_payload_addr_block
    io_client_probe_bits_payload_p_type <= Queue_1_1.io_deq_bits_payload_p_type
    io_client_release_ready <= Queue_2_1.io_enq_ready
    io_manager_acquire_valid <= Queue_4.io_deq_valid
    io_manager_acquire_bits_header_src <= Queue_4.io_deq_bits_header_src
    io_manager_acquire_bits_header_dst <= Queue_4.io_deq_bits_header_dst
    io_manager_acquire_bits_payload_addr_block <= Queue_4.io_deq_bits_payload_addr_block
    io_manager_acquire_bits_payload_client_xact_id <= Queue_4.io_deq_bits_payload_client_xact_id
    io_manager_acquire_bits_payload_addr_beat <= Queue_4.io_deq_bits_payload_addr_beat
    io_manager_acquire_bits_payload_is_builtin_type <= Queue_4.io_deq_bits_payload_is_builtin_type
    io_manager_acquire_bits_payload_a_type <= Queue_4.io_deq_bits_payload_a_type
    io_manager_acquire_bits_payload_union <= Queue_4.io_deq_bits_payload_union
    io_manager_acquire_bits_payload_data <= Queue_4.io_deq_bits_payload_data
    io_manager_grant_ready <= Queue_3_1.io_enq_ready
    io_manager_finish_valid <= io_client_finish_valid
    io_manager_finish_bits_header_src <= io_client_finish_bits_header_src
    io_manager_finish_bits_header_dst <= io_client_finish_bits_header_dst
    io_manager_finish_bits_payload_manager_xact_id <= io_client_finish_bits_payload_manager_xact_id
    io_manager_probe_ready <= Queue_1_1.io_enq_ready
    io_manager_release_valid <= Queue_2_1.io_deq_valid
    io_manager_release_bits_header_src <= Queue_2_1.io_deq_bits_header_src
    io_manager_release_bits_header_dst <= Queue_2_1.io_deq_bits_header_dst
    io_manager_release_bits_payload_addr_beat <= Queue_2_1.io_deq_bits_payload_addr_beat
    io_manager_release_bits_payload_addr_block <= Queue_2_1.io_deq_bits_payload_addr_block
    io_manager_release_bits_payload_client_xact_id <= Queue_2_1.io_deq_bits_payload_client_xact_id
    io_manager_release_bits_payload_voluntary <= Queue_2_1.io_deq_bits_payload_voluntary
    io_manager_release_bits_payload_r_type <= Queue_2_1.io_deq_bits_payload_r_type
    io_manager_release_bits_payload_data <= Queue_2_1.io_deq_bits_payload_data
    Queue_4.io_enq_valid <= io_client_acquire_valid
    Queue_4.io_enq_bits_header_src <= io_client_acquire_bits_header_src
    Queue_4.io_enq_bits_header_dst <= io_client_acquire_bits_header_dst
    Queue_4.io_enq_bits_payload_addr_block <= io_client_acquire_bits_payload_addr_block
    Queue_4.io_enq_bits_payload_client_xact_id <= io_client_acquire_bits_payload_client_xact_id
    Queue_4.io_enq_bits_payload_addr_beat <= io_client_acquire_bits_payload_addr_beat
    Queue_4.io_enq_bits_payload_is_builtin_type <= io_client_acquire_bits_payload_is_builtin_type
    Queue_4.io_enq_bits_payload_a_type <= io_client_acquire_bits_payload_a_type
    Queue_4.io_enq_bits_payload_union <= io_client_acquire_bits_payload_union
    Queue_4.io_enq_bits_payload_data <= io_client_acquire_bits_payload_data
    Queue_4.io_deq_ready <= io_manager_acquire_ready
    Queue_1_1.io_enq_valid <= io_manager_probe_valid
    Queue_1_1.io_enq_bits_header_src <= io_manager_probe_bits_header_src
    Queue_1_1.io_enq_bits_header_dst <= io_manager_probe_bits_header_dst
    Queue_1_1.io_enq_bits_payload_addr_block <= io_manager_probe_bits_payload_addr_block
    Queue_1_1.io_enq_bits_payload_p_type <= io_manager_probe_bits_payload_p_type
    Queue_1_1.io_deq_ready <= io_client_probe_ready
    Queue_2_1.io_enq_valid <= io_client_release_valid
    Queue_2_1.io_enq_bits_header_src <= io_client_release_bits_header_src
    Queue_2_1.io_enq_bits_header_dst <= io_client_release_bits_header_dst
    Queue_2_1.io_enq_bits_payload_addr_beat <= io_client_release_bits_payload_addr_beat
    Queue_2_1.io_enq_bits_payload_addr_block <= io_client_release_bits_payload_addr_block
    Queue_2_1.io_enq_bits_payload_client_xact_id <= io_client_release_bits_payload_client_xact_id
    Queue_2_1.io_enq_bits_payload_voluntary <= io_client_release_bits_payload_voluntary
    Queue_2_1.io_enq_bits_payload_r_type <= io_client_release_bits_payload_r_type
    Queue_2_1.io_enq_bits_payload_data <= io_client_release_bits_payload_data
    Queue_2_1.io_deq_ready <= io_manager_release_ready
    Queue_3_1.io_enq_valid <= io_manager_grant_valid
    Queue_3_1.io_enq_bits_header_src <= io_manager_grant_bits_header_src
    Queue_3_1.io_enq_bits_header_dst <= io_manager_grant_bits_header_dst
    Queue_3_1.io_enq_bits_payload_addr_beat <= io_manager_grant_bits_payload_addr_beat
    Queue_3_1.io_enq_bits_payload_client_xact_id <= io_manager_grant_bits_payload_client_xact_id
    Queue_3_1.io_enq_bits_payload_manager_xact_id <= io_manager_grant_bits_payload_manager_xact_id
    Queue_3_1.io_enq_bits_payload_is_builtin_type <= io_manager_grant_bits_payload_is_builtin_type
    Queue_3_1.io_enq_bits_payload_g_type <= io_manager_grant_bits_payload_g_type
    Queue_3_1.io_enq_bits_payload_data <= io_manager_grant_bits_payload_data
    Queue_3_1.io_deq_ready <= io_client_grant_ready

  module ClientTileLinkNetworkPort :
    input clk : Clock
    input reset : UInt<1>
    output io_client_acquire_ready : UInt<1>
    input io_client_acquire_valid : UInt<1>
    input io_client_acquire_bits_addr_block : UInt<26>
    input io_client_acquire_bits_client_xact_id : UInt<1>
    input io_client_acquire_bits_addr_beat : UInt<3>
    input io_client_acquire_bits_is_builtin_type : UInt<1>
    input io_client_acquire_bits_a_type : UInt<3>
    input io_client_acquire_bits_union : UInt<11>
    input io_client_acquire_bits_data : UInt<64>
    input io_client_probe_ready : UInt<1>
    output io_client_probe_valid : UInt<1>
    output io_client_probe_bits_addr_block : UInt<26>
    output io_client_probe_bits_p_type : UInt<2>
    output io_client_release_ready : UInt<1>
    input io_client_release_valid : UInt<1>
    input io_client_release_bits_addr_beat : UInt<3>
    input io_client_release_bits_addr_block : UInt<26>
    input io_client_release_bits_client_xact_id : UInt<1>
    input io_client_release_bits_voluntary : UInt<1>
    input io_client_release_bits_r_type : UInt<3>
    input io_client_release_bits_data : UInt<64>
    input io_client_grant_ready : UInt<1>
    output io_client_grant_valid : UInt<1>
    output io_client_grant_bits_addr_beat : UInt<3>
    output io_client_grant_bits_client_xact_id : UInt<1>
    output io_client_grant_bits_manager_xact_id : UInt<4>
    output io_client_grant_bits_is_builtin_type : UInt<1>
    output io_client_grant_bits_g_type : UInt<4>
    output io_client_grant_bits_data : UInt<64>
    output io_client_grant_bits_manager_id : UInt<1>
    output io_client_finish_ready : UInt<1>
    input io_client_finish_valid : UInt<1>
    input io_client_finish_bits_manager_xact_id : UInt<4>
    input io_client_finish_bits_manager_id : UInt<1>
    input io_network_acquire_ready : UInt<1>
    output io_network_acquire_valid : UInt<1>
    output io_network_acquire_bits_header_src : UInt<2>
    output io_network_acquire_bits_header_dst : UInt<2>
    output io_network_acquire_bits_payload_addr_block : UInt<26>
    output io_network_acquire_bits_payload_client_xact_id : UInt<1>
    output io_network_acquire_bits_payload_addr_beat : UInt<3>
    output io_network_acquire_bits_payload_is_builtin_type : UInt<1>
    output io_network_acquire_bits_payload_a_type : UInt<3>
    output io_network_acquire_bits_payload_union : UInt<11>
    output io_network_acquire_bits_payload_data : UInt<64>
    output io_network_grant_ready : UInt<1>
    input io_network_grant_valid : UInt<1>
    input io_network_grant_bits_header_src : UInt<2>
    input io_network_grant_bits_header_dst : UInt<2>
    input io_network_grant_bits_payload_addr_beat : UInt<3>
    input io_network_grant_bits_payload_client_xact_id : UInt<1>
    input io_network_grant_bits_payload_manager_xact_id : UInt<4>
    input io_network_grant_bits_payload_is_builtin_type : UInt<1>
    input io_network_grant_bits_payload_g_type : UInt<4>
    input io_network_grant_bits_payload_data : UInt<64>
    input io_network_finish_ready : UInt<1>
    output io_network_finish_valid : UInt<1>
    output io_network_finish_bits_header_src : UInt<2>
    output io_network_finish_bits_header_dst : UInt<2>
    output io_network_finish_bits_payload_manager_xact_id : UInt<4>
    output io_network_probe_ready : UInt<1>
    input io_network_probe_valid : UInt<1>
    input io_network_probe_bits_header_src : UInt<2>
    input io_network_probe_bits_header_dst : UInt<2>
    input io_network_probe_bits_payload_addr_block : UInt<26>
    input io_network_probe_bits_payload_p_type : UInt<2>
    input io_network_release_ready : UInt<1>
    output io_network_release_valid : UInt<1>
    output io_network_release_bits_header_src : UInt<2>
    output io_network_release_bits_header_dst : UInt<2>
    output io_network_release_bits_payload_addr_beat : UInt<3>
    output io_network_release_bits_payload_addr_block : UInt<26>
    output io_network_release_bits_payload_client_xact_id : UInt<1>
    output io_network_release_bits_payload_voluntary : UInt<1>
    output io_network_release_bits_payload_r_type : UInt<3>
    output io_network_release_bits_payload_data : UInt<64>
  
    wire acq_with_header_ready : UInt<1>
    wire acq_with_header_valid : UInt<1>
    wire acq_with_header_bits_header_src : UInt<2>
    wire acq_with_header_bits_header_dst : UInt<2>
    wire acq_with_header_bits_payload_addr_block : UInt<26>
    wire acq_with_header_bits_payload_client_xact_id : UInt<1>
    wire acq_with_header_bits_payload_addr_beat : UInt<3>
    wire acq_with_header_bits_payload_is_builtin_type : UInt<1>
    wire acq_with_header_bits_payload_a_type : UInt<3>
    wire acq_with_header_bits_payload_union : UInt<11>
    wire acq_with_header_bits_payload_data : UInt<64>
    node GEN_0 = pad(io_client_acquire_bits_addr_block, 32)
    node T_3894 = shlw(GEN_0, 6)
    node T_3896 = leq(UInt<32>("h80000000"), T_3894)
    node T_3898 = lt(T_3894, UInt<32>("h90000000"))
    node T_3899 = and(T_3896, T_3898)
    node T_3902 = mux(T_3899, UInt<1>("h0"), UInt<1>("h1"))
    wire rel_with_header_ready : UInt<1>
    wire rel_with_header_valid : UInt<1>
    wire rel_with_header_bits_header_src : UInt<2>
    wire rel_with_header_bits_header_dst : UInt<2>
    wire rel_with_header_bits_payload_addr_beat : UInt<3>
    wire rel_with_header_bits_payload_addr_block : UInt<26>
    wire rel_with_header_bits_payload_client_xact_id : UInt<1>
    wire rel_with_header_bits_payload_voluntary : UInt<1>
    wire rel_with_header_bits_payload_r_type : UInt<3>
    wire rel_with_header_bits_payload_data : UInt<64>
    node GEN_1 = pad(io_client_release_bits_addr_block, 32)
    node T_4464 = shlw(GEN_1, 6)
    node T_4466 = leq(UInt<32>("h80000000"), T_4464)
    node T_4468 = lt(T_4464, UInt<32>("h90000000"))
    node T_4469 = and(T_4466, T_4468)
    node T_4472 = mux(T_4469, UInt<1>("h0"), UInt<1>("h1"))
    wire fin_with_header_ready : UInt<1>
    wire fin_with_header_valid : UInt<1>
    wire fin_with_header_bits_header_src : UInt<2>
    wire fin_with_header_bits_header_dst : UInt<2>
    wire fin_with_header_bits_payload_manager_xact_id : UInt<4>
    wire fin_with_header_bits_payload_manager_id : UInt<1>
    wire prb_without_header_ready : UInt<1>
    wire prb_without_header_valid : UInt<1>
    wire prb_without_header_bits_addr_block : UInt<26>
    wire prb_without_header_bits_p_type : UInt<2>
    wire gnt_without_header_ready : UInt<1>
    wire gnt_without_header_valid : UInt<1>
    wire gnt_without_header_bits_addr_beat : UInt<3>
    wire gnt_without_header_bits_client_xact_id : UInt<1>
    wire gnt_without_header_bits_manager_xact_id : UInt<4>
    wire gnt_without_header_bits_is_builtin_type : UInt<1>
    wire gnt_without_header_bits_g_type : UInt<4>
    wire gnt_without_header_bits_data : UInt<64>
    io_client_acquire_ready <= acq_with_header_ready
    io_client_probe_valid <= prb_without_header_valid
    io_client_probe_bits_addr_block <= prb_without_header_bits_addr_block
    io_client_probe_bits_p_type <= prb_without_header_bits_p_type
    io_client_release_ready <= rel_with_header_ready
    io_client_grant_valid <= gnt_without_header_valid
    io_client_grant_bits_addr_beat <= gnt_without_header_bits_addr_beat
    io_client_grant_bits_client_xact_id <= gnt_without_header_bits_client_xact_id
    io_client_grant_bits_manager_xact_id <= gnt_without_header_bits_manager_xact_id
    io_client_grant_bits_is_builtin_type <= gnt_without_header_bits_is_builtin_type
    io_client_grant_bits_g_type <= gnt_without_header_bits_g_type
    io_client_grant_bits_data <= gnt_without_header_bits_data
    io_client_grant_bits_manager_id <= bits(io_network_grant_bits_header_src, 0, 0)
    io_client_finish_ready <= fin_with_header_ready
    io_network_acquire_valid <= acq_with_header_valid
    io_network_acquire_bits_header_src <= UInt<2>("h0")
    io_network_acquire_bits_header_dst <= acq_with_header_bits_header_dst
    io_network_acquire_bits_payload_addr_block <= acq_with_header_bits_payload_addr_block
    io_network_acquire_bits_payload_client_xact_id <= acq_with_header_bits_payload_client_xact_id
    io_network_acquire_bits_payload_addr_beat <= acq_with_header_bits_payload_addr_beat
    io_network_acquire_bits_payload_is_builtin_type <= acq_with_header_bits_payload_is_builtin_type
    io_network_acquire_bits_payload_a_type <= acq_with_header_bits_payload_a_type
    io_network_acquire_bits_payload_union <= acq_with_header_bits_payload_union
    io_network_acquire_bits_payload_data <= acq_with_header_bits_payload_data
    io_network_grant_ready <= gnt_without_header_ready
    io_network_finish_valid <= fin_with_header_valid
    io_network_finish_bits_header_src <= UInt<2>("h0")
    io_network_finish_bits_header_dst <= fin_with_header_bits_header_dst
    io_network_finish_bits_payload_manager_xact_id <= fin_with_header_bits_payload_manager_xact_id
    io_network_probe_ready <= prb_without_header_ready
    io_network_release_valid <= rel_with_header_valid
    io_network_release_bits_header_src <= UInt<2>("h0")
    io_network_release_bits_header_dst <= rel_with_header_bits_header_dst
    io_network_release_bits_payload_addr_beat <= rel_with_header_bits_payload_addr_beat
    io_network_release_bits_payload_addr_block <= rel_with_header_bits_payload_addr_block
    io_network_release_bits_payload_client_xact_id <= rel_with_header_bits_payload_client_xact_id
    io_network_release_bits_payload_voluntary <= rel_with_header_bits_payload_voluntary
    io_network_release_bits_payload_r_type <= rel_with_header_bits_payload_r_type
    io_network_release_bits_payload_data <= rel_with_header_bits_payload_data
    acq_with_header_ready <= io_network_acquire_ready
    acq_with_header_valid <= io_client_acquire_valid
    acq_with_header_bits_header_dst <= pad(T_3902, 2)
    acq_with_header_bits_payload_addr_block <= io_client_acquire_bits_addr_block
    acq_with_header_bits_payload_client_xact_id <= io_client_acquire_bits_client_xact_id
    acq_with_header_bits_payload_addr_beat <= io_client_acquire_bits_addr_beat
    acq_with_header_bits_payload_is_builtin_type <= io_client_acquire_bits_is_builtin_type
    acq_with_header_bits_payload_a_type <= io_client_acquire_bits_a_type
    acq_with_header_bits_payload_union <= io_client_acquire_bits_union
    acq_with_header_bits_payload_data <= io_client_acquire_bits_data
    rel_with_header_ready <= io_network_release_ready
    rel_with_header_valid <= io_client_release_valid
    rel_with_header_bits_header_dst <= pad(T_4472, 2)
    rel_with_header_bits_payload_addr_beat <= io_client_release_bits_addr_beat
    rel_with_header_bits_payload_addr_block <= io_client_release_bits_addr_block
    rel_with_header_bits_payload_client_xact_id <= io_client_release_bits_client_xact_id
    rel_with_header_bits_payload_voluntary <= io_client_release_bits_voluntary
    rel_with_header_bits_payload_r_type <= io_client_release_bits_r_type
    rel_with_header_bits_payload_data <= io_client_release_bits_data
    fin_with_header_ready <= io_network_finish_ready
    fin_with_header_valid <= io_client_finish_valid
    fin_with_header_bits_header_dst <= pad(io_client_finish_bits_manager_id, 2)
    fin_with_header_bits_payload_manager_xact_id <= io_client_finish_bits_manager_xact_id
    fin_with_header_bits_payload_manager_id <= io_client_finish_bits_manager_id
    prb_without_header_ready <= io_client_probe_ready
    prb_without_header_valid <= io_network_probe_valid
    prb_without_header_bits_addr_block <= io_network_probe_bits_payload_addr_block
    prb_without_header_bits_p_type <= io_network_probe_bits_payload_p_type
    gnt_without_header_ready <= io_client_grant_ready
    gnt_without_header_valid <= io_network_grant_valid
    gnt_without_header_bits_addr_beat <= io_network_grant_bits_payload_addr_beat
    gnt_without_header_bits_client_xact_id <= io_network_grant_bits_payload_client_xact_id
    gnt_without_header_bits_manager_xact_id <= io_network_grant_bits_payload_manager_xact_id
    gnt_without_header_bits_is_builtin_type <= io_network_grant_bits_payload_is_builtin_type
    gnt_without_header_bits_g_type <= io_network_grant_bits_payload_g_type
    gnt_without_header_bits_data <= io_network_grant_bits_payload_data

  module TileLinkEnqueuer_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_client_acquire_ready : UInt<1>
    input io_client_acquire_valid : UInt<1>
    input io_client_acquire_bits_header_src : UInt<2>
    input io_client_acquire_bits_header_dst : UInt<2>
    input io_client_acquire_bits_payload_addr_block : UInt<26>
    input io_client_acquire_bits_payload_client_xact_id : UInt<1>
    input io_client_acquire_bits_payload_addr_beat : UInt<3>
    input io_client_acquire_bits_payload_is_builtin_type : UInt<1>
    input io_client_acquire_bits_payload_a_type : UInt<3>
    input io_client_acquire_bits_payload_union : UInt<11>
    input io_client_acquire_bits_payload_data : UInt<64>
    input io_client_grant_ready : UInt<1>
    output io_client_grant_valid : UInt<1>
    output io_client_grant_bits_header_src : UInt<2>
    output io_client_grant_bits_header_dst : UInt<2>
    output io_client_grant_bits_payload_addr_beat : UInt<3>
    output io_client_grant_bits_payload_client_xact_id : UInt<1>
    output io_client_grant_bits_payload_manager_xact_id : UInt<4>
    output io_client_grant_bits_payload_is_builtin_type : UInt<1>
    output io_client_grant_bits_payload_g_type : UInt<4>
    output io_client_grant_bits_payload_data : UInt<64>
    output io_client_finish_ready : UInt<1>
    input io_client_finish_valid : UInt<1>
    input io_client_finish_bits_header_src : UInt<2>
    input io_client_finish_bits_header_dst : UInt<2>
    input io_client_finish_bits_payload_manager_xact_id : UInt<4>
    input io_client_probe_ready : UInt<1>
    output io_client_probe_valid : UInt<1>
    output io_client_probe_bits_header_src : UInt<2>
    output io_client_probe_bits_header_dst : UInt<2>
    output io_client_probe_bits_payload_addr_block : UInt<26>
    output io_client_probe_bits_payload_p_type : UInt<2>
    output io_client_release_ready : UInt<1>
    input io_client_release_valid : UInt<1>
    input io_client_release_bits_header_src : UInt<2>
    input io_client_release_bits_header_dst : UInt<2>
    input io_client_release_bits_payload_addr_beat : UInt<3>
    input io_client_release_bits_payload_addr_block : UInt<26>
    input io_client_release_bits_payload_client_xact_id : UInt<1>
    input io_client_release_bits_payload_voluntary : UInt<1>
    input io_client_release_bits_payload_r_type : UInt<3>
    input io_client_release_bits_payload_data : UInt<64>
    input io_manager_acquire_ready : UInt<1>
    output io_manager_acquire_valid : UInt<1>
    output io_manager_acquire_bits_header_src : UInt<2>
    output io_manager_acquire_bits_header_dst : UInt<2>
    output io_manager_acquire_bits_payload_addr_block : UInt<26>
    output io_manager_acquire_bits_payload_client_xact_id : UInt<1>
    output io_manager_acquire_bits_payload_addr_beat : UInt<3>
    output io_manager_acquire_bits_payload_is_builtin_type : UInt<1>
    output io_manager_acquire_bits_payload_a_type : UInt<3>
    output io_manager_acquire_bits_payload_union : UInt<11>
    output io_manager_acquire_bits_payload_data : UInt<64>
    output io_manager_grant_ready : UInt<1>
    input io_manager_grant_valid : UInt<1>
    input io_manager_grant_bits_header_src : UInt<2>
    input io_manager_grant_bits_header_dst : UInt<2>
    input io_manager_grant_bits_payload_addr_beat : UInt<3>
    input io_manager_grant_bits_payload_client_xact_id : UInt<1>
    input io_manager_grant_bits_payload_manager_xact_id : UInt<4>
    input io_manager_grant_bits_payload_is_builtin_type : UInt<1>
    input io_manager_grant_bits_payload_g_type : UInt<4>
    input io_manager_grant_bits_payload_data : UInt<64>
    input io_manager_finish_ready : UInt<1>
    output io_manager_finish_valid : UInt<1>
    output io_manager_finish_bits_header_src : UInt<2>
    output io_manager_finish_bits_header_dst : UInt<2>
    output io_manager_finish_bits_payload_manager_xact_id : UInt<4>
    output io_manager_probe_ready : UInt<1>
    input io_manager_probe_valid : UInt<1>
    input io_manager_probe_bits_header_src : UInt<2>
    input io_manager_probe_bits_header_dst : UInt<2>
    input io_manager_probe_bits_payload_addr_block : UInt<26>
    input io_manager_probe_bits_payload_p_type : UInt<2>
    input io_manager_release_ready : UInt<1>
    output io_manager_release_valid : UInt<1>
    output io_manager_release_bits_header_src : UInt<2>
    output io_manager_release_bits_header_dst : UInt<2>
    output io_manager_release_bits_payload_addr_beat : UInt<3>
    output io_manager_release_bits_payload_addr_block : UInt<26>
    output io_manager_release_bits_payload_client_xact_id : UInt<1>
    output io_manager_release_bits_payload_voluntary : UInt<1>
    output io_manager_release_bits_payload_r_type : UInt<3>
    output io_manager_release_bits_payload_data : UInt<64>
  
    inst Queue_4_1 of Queue
    inst Queue_5_1 of Queue_1
    inst Queue_6_1 of Queue_2
    inst Queue_7_1 of Queue_3
    io_client_acquire_ready <= Queue_4_1.io_enq_ready
    io_client_grant_valid <= Queue_7_1.io_deq_valid
    io_client_grant_bits_header_src <= Queue_7_1.io_deq_bits_header_src
    io_client_grant_bits_header_dst <= Queue_7_1.io_deq_bits_header_dst
    io_client_grant_bits_payload_addr_beat <= Queue_7_1.io_deq_bits_payload_addr_beat
    io_client_grant_bits_payload_client_xact_id <= Queue_7_1.io_deq_bits_payload_client_xact_id
    io_client_grant_bits_payload_manager_xact_id <= Queue_7_1.io_deq_bits_payload_manager_xact_id
    io_client_grant_bits_payload_is_builtin_type <= Queue_7_1.io_deq_bits_payload_is_builtin_type
    io_client_grant_bits_payload_g_type <= Queue_7_1.io_deq_bits_payload_g_type
    io_client_grant_bits_payload_data <= Queue_7_1.io_deq_bits_payload_data
    io_client_finish_ready <= io_manager_finish_ready
    io_client_probe_valid <= Queue_5_1.io_deq_valid
    io_client_probe_bits_header_src <= Queue_5_1.io_deq_bits_header_src
    io_client_probe_bits_header_dst <= Queue_5_1.io_deq_bits_header_dst
    io_client_probe_bits_payload_addr_block <= Queue_5_1.io_deq_bits_payload_addr_block
    io_client_probe_bits_payload_p_type <= Queue_5_1.io_deq_bits_payload_p_type
    io_client_release_ready <= Queue_6_1.io_enq_ready
    io_manager_acquire_valid <= Queue_4_1.io_deq_valid
    io_manager_acquire_bits_header_src <= Queue_4_1.io_deq_bits_header_src
    io_manager_acquire_bits_header_dst <= Queue_4_1.io_deq_bits_header_dst
    io_manager_acquire_bits_payload_addr_block <= Queue_4_1.io_deq_bits_payload_addr_block
    io_manager_acquire_bits_payload_client_xact_id <= Queue_4_1.io_deq_bits_payload_client_xact_id
    io_manager_acquire_bits_payload_addr_beat <= Queue_4_1.io_deq_bits_payload_addr_beat
    io_manager_acquire_bits_payload_is_builtin_type <= Queue_4_1.io_deq_bits_payload_is_builtin_type
    io_manager_acquire_bits_payload_a_type <= Queue_4_1.io_deq_bits_payload_a_type
    io_manager_acquire_bits_payload_union <= Queue_4_1.io_deq_bits_payload_union
    io_manager_acquire_bits_payload_data <= Queue_4_1.io_deq_bits_payload_data
    io_manager_grant_ready <= Queue_7_1.io_enq_ready
    io_manager_finish_valid <= io_client_finish_valid
    io_manager_finish_bits_header_src <= io_client_finish_bits_header_src
    io_manager_finish_bits_header_dst <= io_client_finish_bits_header_dst
    io_manager_finish_bits_payload_manager_xact_id <= io_client_finish_bits_payload_manager_xact_id
    io_manager_probe_ready <= Queue_5_1.io_enq_ready
    io_manager_release_valid <= Queue_6_1.io_deq_valid
    io_manager_release_bits_header_src <= Queue_6_1.io_deq_bits_header_src
    io_manager_release_bits_header_dst <= Queue_6_1.io_deq_bits_header_dst
    io_manager_release_bits_payload_addr_beat <= Queue_6_1.io_deq_bits_payload_addr_beat
    io_manager_release_bits_payload_addr_block <= Queue_6_1.io_deq_bits_payload_addr_block
    io_manager_release_bits_payload_client_xact_id <= Queue_6_1.io_deq_bits_payload_client_xact_id
    io_manager_release_bits_payload_voluntary <= Queue_6_1.io_deq_bits_payload_voluntary
    io_manager_release_bits_payload_r_type <= Queue_6_1.io_deq_bits_payload_r_type
    io_manager_release_bits_payload_data <= Queue_6_1.io_deq_bits_payload_data
    Queue_4_1.io_enq_valid <= io_client_acquire_valid
    Queue_4_1.io_enq_bits_header_src <= io_client_acquire_bits_header_src
    Queue_4_1.io_enq_bits_header_dst <= io_client_acquire_bits_header_dst
    Queue_4_1.io_enq_bits_payload_addr_block <= io_client_acquire_bits_payload_addr_block
    Queue_4_1.io_enq_bits_payload_client_xact_id <= io_client_acquire_bits_payload_client_xact_id
    Queue_4_1.io_enq_bits_payload_addr_beat <= io_client_acquire_bits_payload_addr_beat
    Queue_4_1.io_enq_bits_payload_is_builtin_type <= io_client_acquire_bits_payload_is_builtin_type
    Queue_4_1.io_enq_bits_payload_a_type <= io_client_acquire_bits_payload_a_type
    Queue_4_1.io_enq_bits_payload_union <= io_client_acquire_bits_payload_union
    Queue_4_1.io_enq_bits_payload_data <= io_client_acquire_bits_payload_data
    Queue_4_1.io_deq_ready <= io_manager_acquire_ready
    Queue_5_1.io_enq_valid <= io_manager_probe_valid
    Queue_5_1.io_enq_bits_header_src <= io_manager_probe_bits_header_src
    Queue_5_1.io_enq_bits_header_dst <= io_manager_probe_bits_header_dst
    Queue_5_1.io_enq_bits_payload_addr_block <= io_manager_probe_bits_payload_addr_block
    Queue_5_1.io_enq_bits_payload_p_type <= io_manager_probe_bits_payload_p_type
    Queue_5_1.io_deq_ready <= io_client_probe_ready
    Queue_6_1.io_enq_valid <= io_client_release_valid
    Queue_6_1.io_enq_bits_header_src <= io_client_release_bits_header_src
    Queue_6_1.io_enq_bits_header_dst <= io_client_release_bits_header_dst
    Queue_6_1.io_enq_bits_payload_addr_beat <= io_client_release_bits_payload_addr_beat
    Queue_6_1.io_enq_bits_payload_addr_block <= io_client_release_bits_payload_addr_block
    Queue_6_1.io_enq_bits_payload_client_xact_id <= io_client_release_bits_payload_client_xact_id
    Queue_6_1.io_enq_bits_payload_voluntary <= io_client_release_bits_payload_voluntary
    Queue_6_1.io_enq_bits_payload_r_type <= io_client_release_bits_payload_r_type
    Queue_6_1.io_enq_bits_payload_data <= io_client_release_bits_payload_data
    Queue_6_1.io_deq_ready <= io_manager_release_ready
    Queue_7_1.io_enq_valid <= io_manager_grant_valid
    Queue_7_1.io_enq_bits_header_src <= io_manager_grant_bits_header_src
    Queue_7_1.io_enq_bits_header_dst <= io_manager_grant_bits_header_dst
    Queue_7_1.io_enq_bits_payload_addr_beat <= io_manager_grant_bits_payload_addr_beat
    Queue_7_1.io_enq_bits_payload_client_xact_id <= io_manager_grant_bits_payload_client_xact_id
    Queue_7_1.io_enq_bits_payload_manager_xact_id <= io_manager_grant_bits_payload_manager_xact_id
    Queue_7_1.io_enq_bits_payload_is_builtin_type <= io_manager_grant_bits_payload_is_builtin_type
    Queue_7_1.io_enq_bits_payload_g_type <= io_manager_grant_bits_payload_g_type
    Queue_7_1.io_enq_bits_payload_data <= io_manager_grant_bits_payload_data
    Queue_7_1.io_deq_ready <= io_client_grant_ready

  module FinishQueue_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_manager_xact_id : UInt<4>
    input io_enq_bits_manager_id : UInt<1>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_manager_xact_id : UInt<4>
    output io_deq_bits_manager_id : UInt<1>
    output io_count : UInt<2>
  
    mem ram_manager_xact_id :
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_264
      writer => T_226
      read-under-write => undefined
    ram_manager_xact_id.T_264.en <= UInt<1>("h1")
    ram_manager_xact_id.T_264.addr <= T_220
    ram_manager_xact_id.T_226.en <= do_enq
    ram_manager_xact_id.T_226.mask <= do_enq
    ram_manager_xact_id.T_226.addr <= T_218
    ram_manager_xact_id.T_226.data <= io_enq_bits_manager_xact_id
    mem ram_manager_id :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_264
      writer => T_226
      read-under-write => undefined
    ram_manager_id.T_264.en <= UInt<1>("h1")
    ram_manager_id.T_264.addr <= T_220
    ram_manager_id.T_226.en <= do_enq
    ram_manager_id.T_226.mask <= do_enq
    ram_manager_id.T_226.addr <= T_218
    ram_manager_id.T_226.data <= io_enq_bits_manager_id
    reg T_218 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_220 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node ptr_match = eq(T_218, T_220)
    node T_223 = eq(maybe_full, UInt<1>("h0"))
    node empty = and(ptr_match, T_223)
    node full = and(ptr_match, maybe_full)
    node T_224 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_225 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_252 = add(T_218, UInt<1>("h1"))
    node T_253 = tail(T_252, 1)
    node GEN_5 = mux(do_enq, T_253, T_218)
    node T_257 = add(T_220, UInt<1>("h1"))
    node T_258 = tail(T_257, 1)
    node GEN_6 = mux(do_deq, T_258, T_220)
    node T_259 = neq(do_enq, do_deq)
    node GEN_7 = mux(T_259, do_enq, maybe_full)
    node T_261 = eq(empty, UInt<1>("h0"))
    node T_263 = eq(full, UInt<1>("h0"))
    node T_287 = sub(T_218, T_220)
    node ptr_diff = tail(T_287, 1)
    node T_288 = and(maybe_full, ptr_match)
    node T_289 = cat(T_288, ptr_diff)
    io_enq_ready <= T_263
    io_deq_valid <= T_261
    io_deq_bits_manager_xact_id <= ram_manager_xact_id.T_264.data
    io_deq_bits_manager_id <= ram_manager_id.T_264.data
    io_count <= T_289
    T_218 <= GEN_5
    T_220 <= GEN_6
    maybe_full <= GEN_7
    do_enq <= T_224
    do_deq <= T_225

  module FinishUnit :
    input clk : Clock
    input reset : UInt<1>
    output io_grant_ready : UInt<1>
    input io_grant_valid : UInt<1>
    input io_grant_bits_header_src : UInt<2>
    input io_grant_bits_header_dst : UInt<2>
    input io_grant_bits_payload_addr_beat : UInt<3>
    input io_grant_bits_payload_client_xact_id : UInt<1>
    input io_grant_bits_payload_manager_xact_id : UInt<4>
    input io_grant_bits_payload_is_builtin_type : UInt<1>
    input io_grant_bits_payload_g_type : UInt<4>
    input io_grant_bits_payload_data : UInt<64>
    input io_refill_ready : UInt<1>
    output io_refill_valid : UInt<1>
    output io_refill_bits_addr_beat : UInt<3>
    output io_refill_bits_client_xact_id : UInt<1>
    output io_refill_bits_manager_xact_id : UInt<4>
    output io_refill_bits_is_builtin_type : UInt<1>
    output io_refill_bits_g_type : UInt<4>
    output io_refill_bits_data : UInt<64>
    input io_finish_ready : UInt<1>
    output io_finish_valid : UInt<1>
    output io_finish_bits_header_src : UInt<2>
    output io_finish_bits_header_dst : UInt<2>
    output io_finish_bits_payload_manager_xact_id : UInt<4>
    output io_ready : UInt<1>
  
    node T_1035 = and(io_grant_ready, io_grant_valid)
    wire T_1044_0 : UInt<3>
    node GEN_1 = pad(UInt<3>("h5"), 4)
    node T_1046 = eq(io_grant_bits_payload_g_type, GEN_1)
    node T_1047 = eq(io_grant_bits_payload_g_type, UInt<4>("h0"))
    node T_1048 = mux(io_grant_bits_payload_is_builtin_type, T_1046, T_1047)
    node T_1050 = and(T_1035, T_1048)
    reg T_1052 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_1054 = eq(T_1052, UInt<3>("h7"))
    node T_1056 = add(T_1052, UInt<3>("h1"))
    node T_1057 = tail(T_1056, 1)
    node GEN_0 = mux(T_1050, T_1057, T_1052)
    node T_1058 = and(T_1050, T_1054)
    node T_1060 = mux(T_1048, T_1058, T_1035)
    inst FinishQueue_1_1 of FinishQueue_1
    node T_1090 = and(io_grant_bits_payload_is_builtin_type, T_1047)
    node T_1092 = eq(T_1090, UInt<1>("h0"))
    node T_1094 = and(T_1035, T_1092)
    wire T_1102_0 : UInt<3>
    node GEN_2 = pad(UInt<3>("h5"), 4)
    node T_1104 = eq(io_grant_bits_payload_g_type, GEN_2)
    node T_1106 = mux(io_grant_bits_payload_is_builtin_type, T_1104, T_1047)
    node T_1109 = eq(T_1106, UInt<1>("h0"))
    node T_1110 = or(T_1109, T_1060)
    node T_1111 = and(T_1094, T_1110)
    wire T_1134_manager_xact_id : UInt<4>
    node T_1167 = eq(T_1092, UInt<1>("h0"))
    node T_1168 = or(FinishQueue_1_1.io_enq_ready, T_1167)
    node T_1169 = and(T_1168, io_grant_valid)
    node T_1182 = and(T_1168, io_refill_ready)
    io_grant_ready <= T_1182
    io_refill_valid <= T_1169
    io_refill_bits_addr_beat <= io_grant_bits_payload_addr_beat
    io_refill_bits_client_xact_id <= io_grant_bits_payload_client_xact_id
    io_refill_bits_manager_xact_id <= io_grant_bits_payload_manager_xact_id
    io_refill_bits_is_builtin_type <= io_grant_bits_payload_is_builtin_type
    io_refill_bits_g_type <= io_grant_bits_payload_g_type
    io_refill_bits_data <= io_grant_bits_payload_data
    io_finish_valid <= FinishQueue_1_1.io_deq_valid
    io_finish_bits_header_src <= UInt<2>("h1")
    io_finish_bits_header_dst <= pad(FinishQueue_1_1.io_deq_bits_manager_id, 2)
    io_finish_bits_payload_manager_xact_id <= FinishQueue_1_1.io_deq_bits_manager_xact_id
    io_ready <= FinishQueue_1_1.io_enq_ready
    T_1052 <= GEN_0
    FinishQueue_1_1.io_enq_valid <= T_1111
    FinishQueue_1_1.io_enq_bits_manager_xact_id <= T_1134_manager_xact_id
    FinishQueue_1_1.io_enq_bits_manager_id <= bits(io_grant_bits_header_src, 0, 0)
    FinishQueue_1_1.io_deq_ready <= io_finish_ready
    T_1134_manager_xact_id <= io_grant_bits_payload_manager_xact_id

  module ClientUncachedTileLinkNetworkPort :
    input clk : Clock
    input reset : UInt<1>
    output io_client_acquire_ready : UInt<1>
    input io_client_acquire_valid : UInt<1>
    input io_client_acquire_bits_addr_block : UInt<26>
    input io_client_acquire_bits_client_xact_id : UInt<1>
    input io_client_acquire_bits_addr_beat : UInt<3>
    input io_client_acquire_bits_is_builtin_type : UInt<1>
    input io_client_acquire_bits_a_type : UInt<3>
    input io_client_acquire_bits_union : UInt<11>
    input io_client_acquire_bits_data : UInt<64>
    input io_client_grant_ready : UInt<1>
    output io_client_grant_valid : UInt<1>
    output io_client_grant_bits_addr_beat : UInt<3>
    output io_client_grant_bits_client_xact_id : UInt<1>
    output io_client_grant_bits_manager_xact_id : UInt<4>
    output io_client_grant_bits_is_builtin_type : UInt<1>
    output io_client_grant_bits_g_type : UInt<4>
    output io_client_grant_bits_data : UInt<64>
    input io_network_acquire_ready : UInt<1>
    output io_network_acquire_valid : UInt<1>
    output io_network_acquire_bits_header_src : UInt<2>
    output io_network_acquire_bits_header_dst : UInt<2>
    output io_network_acquire_bits_payload_addr_block : UInt<26>
    output io_network_acquire_bits_payload_client_xact_id : UInt<1>
    output io_network_acquire_bits_payload_addr_beat : UInt<3>
    output io_network_acquire_bits_payload_is_builtin_type : UInt<1>
    output io_network_acquire_bits_payload_a_type : UInt<3>
    output io_network_acquire_bits_payload_union : UInt<11>
    output io_network_acquire_bits_payload_data : UInt<64>
    output io_network_grant_ready : UInt<1>
    input io_network_grant_valid : UInt<1>
    input io_network_grant_bits_header_src : UInt<2>
    input io_network_grant_bits_header_dst : UInt<2>
    input io_network_grant_bits_payload_addr_beat : UInt<3>
    input io_network_grant_bits_payload_client_xact_id : UInt<1>
    input io_network_grant_bits_payload_manager_xact_id : UInt<4>
    input io_network_grant_bits_payload_is_builtin_type : UInt<1>
    input io_network_grant_bits_payload_g_type : UInt<4>
    input io_network_grant_bits_payload_data : UInt<64>
    input io_network_finish_ready : UInt<1>
    output io_network_finish_valid : UInt<1>
    output io_network_finish_bits_header_src : UInt<2>
    output io_network_finish_bits_header_dst : UInt<2>
    output io_network_finish_bits_payload_manager_xact_id : UInt<4>
    output io_network_probe_ready : UInt<1>
    input io_network_probe_valid : UInt<1>
    input io_network_probe_bits_header_src : UInt<2>
    input io_network_probe_bits_header_dst : UInt<2>
    input io_network_probe_bits_payload_addr_block : UInt<26>
    input io_network_probe_bits_payload_p_type : UInt<2>
    input io_network_release_ready : UInt<1>
    output io_network_release_valid : UInt<1>
    output io_network_release_bits_header_src : UInt<2>
    output io_network_release_bits_header_dst : UInt<2>
    output io_network_release_bits_payload_addr_beat : UInt<3>
    output io_network_release_bits_payload_addr_block : UInt<26>
    output io_network_release_bits_payload_client_xact_id : UInt<1>
    output io_network_release_bits_payload_voluntary : UInt<1>
    output io_network_release_bits_payload_r_type : UInt<3>
    output io_network_release_bits_payload_data : UInt<64>
  
    inst finisher of FinishUnit
    wire acq_with_header_ready : UInt<1>
    wire acq_with_header_valid : UInt<1>
    wire acq_with_header_bits_header_src : UInt<2>
    wire acq_with_header_bits_header_dst : UInt<2>
    wire acq_with_header_bits_payload_addr_block : UInt<26>
    wire acq_with_header_bits_payload_client_xact_id : UInt<1>
    wire acq_with_header_bits_payload_addr_beat : UInt<3>
    wire acq_with_header_bits_payload_is_builtin_type : UInt<1>
    wire acq_with_header_bits_payload_a_type : UInt<3>
    wire acq_with_header_bits_payload_union : UInt<11>
    wire acq_with_header_bits_payload_data : UInt<64>
    node GEN_0 = pad(io_client_acquire_bits_addr_block, 32)
    node T_3330 = shlw(GEN_0, 6)
    node T_3332 = leq(UInt<32>("h80000000"), T_3330)
    node T_3334 = lt(T_3330, UInt<32>("h90000000"))
    node T_3335 = and(T_3332, T_3334)
    node T_3338 = mux(T_3335, UInt<1>("h0"), UInt<1>("h1"))
    node T_3339 = and(acq_with_header_valid, finisher.io_ready)
    node T_3340 = and(io_network_acquire_ready, finisher.io_ready)
    io_client_acquire_ready <= acq_with_header_ready
    io_client_grant_valid <= finisher.io_refill_valid
    io_client_grant_bits_addr_beat <= finisher.io_refill_bits_addr_beat
    io_client_grant_bits_client_xact_id <= finisher.io_refill_bits_client_xact_id
    io_client_grant_bits_manager_xact_id <= finisher.io_refill_bits_manager_xact_id
    io_client_grant_bits_is_builtin_type <= finisher.io_refill_bits_is_builtin_type
    io_client_grant_bits_g_type <= finisher.io_refill_bits_g_type
    io_client_grant_bits_data <= finisher.io_refill_bits_data
    io_network_acquire_valid <= T_3339
    io_network_acquire_bits_header_src <= UInt<2>("h1")
    io_network_acquire_bits_header_dst <= acq_with_header_bits_header_dst
    io_network_acquire_bits_payload_addr_block <= acq_with_header_bits_payload_addr_block
    io_network_acquire_bits_payload_client_xact_id <= acq_with_header_bits_payload_client_xact_id
    io_network_acquire_bits_payload_addr_beat <= acq_with_header_bits_payload_addr_beat
    io_network_acquire_bits_payload_is_builtin_type <= acq_with_header_bits_payload_is_builtin_type
    io_network_acquire_bits_payload_a_type <= acq_with_header_bits_payload_a_type
    io_network_acquire_bits_payload_union <= acq_with_header_bits_payload_union
    io_network_acquire_bits_payload_data <= acq_with_header_bits_payload_data
    io_network_grant_ready <= finisher.io_grant_ready
    io_network_finish_valid <= finisher.io_finish_valid
    io_network_finish_bits_header_src <= finisher.io_finish_bits_header_src
    io_network_finish_bits_header_dst <= finisher.io_finish_bits_header_dst
    io_network_finish_bits_payload_manager_xact_id <= finisher.io_finish_bits_payload_manager_xact_id
    io_network_probe_ready <= UInt<1>("h0")
    io_network_release_valid <= UInt<1>("h0")
    io_network_release_bits_header_src <= UInt<2>("h1")
    io_network_release_bits_header_dst <= UInt<2>("h0")
    io_network_release_bits_payload_addr_beat <= UInt<3>("h3")
    io_network_release_bits_payload_addr_block <= UInt<26>("h285297")
    io_network_release_bits_payload_client_xact_id <= UInt<1>("h0")
    io_network_release_bits_payload_voluntary <= UInt<1>("h1")
    io_network_release_bits_payload_r_type <= UInt<3>("h7")
    io_network_release_bits_payload_data <= UInt<64>("h416fa30c6383e478")
    finisher.io_grant_valid <= io_network_grant_valid
    finisher.io_grant_bits_header_src <= io_network_grant_bits_header_src
    finisher.io_grant_bits_header_dst <= io_network_grant_bits_header_dst
    finisher.io_grant_bits_payload_addr_beat <= io_network_grant_bits_payload_addr_beat
    finisher.io_grant_bits_payload_client_xact_id <= io_network_grant_bits_payload_client_xact_id
    finisher.io_grant_bits_payload_manager_xact_id <= io_network_grant_bits_payload_manager_xact_id
    finisher.io_grant_bits_payload_is_builtin_type <= io_network_grant_bits_payload_is_builtin_type
    finisher.io_grant_bits_payload_g_type <= io_network_grant_bits_payload_g_type
    finisher.io_grant_bits_payload_data <= io_network_grant_bits_payload_data
    finisher.io_refill_ready <= io_client_grant_ready
    finisher.io_finish_ready <= io_network_finish_ready
    acq_with_header_ready <= T_3340
    acq_with_header_valid <= io_client_acquire_valid
    acq_with_header_bits_header_dst <= pad(T_3338, 2)
    acq_with_header_bits_payload_addr_block <= io_client_acquire_bits_addr_block
    acq_with_header_bits_payload_client_xact_id <= io_client_acquire_bits_client_xact_id
    acq_with_header_bits_payload_addr_beat <= io_client_acquire_bits_addr_beat
    acq_with_header_bits_payload_is_builtin_type <= io_client_acquire_bits_is_builtin_type
    acq_with_header_bits_payload_a_type <= io_client_acquire_bits_a_type
    acq_with_header_bits_payload_union <= io_client_acquire_bits_union
    acq_with_header_bits_payload_data <= io_client_acquire_bits_data

  module ManagerTileLinkNetworkPort :
    input clk : Clock
    input reset : UInt<1>
    input io_manager_acquire_ready : UInt<1>
    output io_manager_acquire_valid : UInt<1>
    output io_manager_acquire_bits_addr_block : UInt<26>
    output io_manager_acquire_bits_client_xact_id : UInt<1>
    output io_manager_acquire_bits_addr_beat : UInt<3>
    output io_manager_acquire_bits_is_builtin_type : UInt<1>
    output io_manager_acquire_bits_a_type : UInt<3>
    output io_manager_acquire_bits_union : UInt<11>
    output io_manager_acquire_bits_data : UInt<64>
    output io_manager_acquire_bits_client_id : UInt<1>
    output io_manager_grant_ready : UInt<1>
    input io_manager_grant_valid : UInt<1>
    input io_manager_grant_bits_addr_beat : UInt<3>
    input io_manager_grant_bits_client_xact_id : UInt<1>
    input io_manager_grant_bits_manager_xact_id : UInt<4>
    input io_manager_grant_bits_is_builtin_type : UInt<1>
    input io_manager_grant_bits_g_type : UInt<4>
    input io_manager_grant_bits_data : UInt<64>
    input io_manager_grant_bits_client_id : UInt<1>
    input io_manager_finish_ready : UInt<1>
    output io_manager_finish_valid : UInt<1>
    output io_manager_finish_bits_manager_xact_id : UInt<4>
    output io_manager_probe_ready : UInt<1>
    input io_manager_probe_valid : UInt<1>
    input io_manager_probe_bits_addr_block : UInt<26>
    input io_manager_probe_bits_p_type : UInt<2>
    input io_manager_probe_bits_client_id : UInt<1>
    input io_manager_release_ready : UInt<1>
    output io_manager_release_valid : UInt<1>
    output io_manager_release_bits_addr_beat : UInt<3>
    output io_manager_release_bits_addr_block : UInt<26>
    output io_manager_release_bits_client_xact_id : UInt<1>
    output io_manager_release_bits_voluntary : UInt<1>
    output io_manager_release_bits_r_type : UInt<3>
    output io_manager_release_bits_data : UInt<64>
    output io_manager_release_bits_client_id : UInt<1>
    output io_network_acquire_ready : UInt<1>
    input io_network_acquire_valid : UInt<1>
    input io_network_acquire_bits_header_src : UInt<2>
    input io_network_acquire_bits_header_dst : UInt<2>
    input io_network_acquire_bits_payload_addr_block : UInt<26>
    input io_network_acquire_bits_payload_client_xact_id : UInt<1>
    input io_network_acquire_bits_payload_addr_beat : UInt<3>
    input io_network_acquire_bits_payload_is_builtin_type : UInt<1>
    input io_network_acquire_bits_payload_a_type : UInt<3>
    input io_network_acquire_bits_payload_union : UInt<11>
    input io_network_acquire_bits_payload_data : UInt<64>
    input io_network_grant_ready : UInt<1>
    output io_network_grant_valid : UInt<1>
    output io_network_grant_bits_header_src : UInt<2>
    output io_network_grant_bits_header_dst : UInt<2>
    output io_network_grant_bits_payload_addr_beat : UInt<3>
    output io_network_grant_bits_payload_client_xact_id : UInt<1>
    output io_network_grant_bits_payload_manager_xact_id : UInt<4>
    output io_network_grant_bits_payload_is_builtin_type : UInt<1>
    output io_network_grant_bits_payload_g_type : UInt<4>
    output io_network_grant_bits_payload_data : UInt<64>
    output io_network_finish_ready : UInt<1>
    input io_network_finish_valid : UInt<1>
    input io_network_finish_bits_header_src : UInt<2>
    input io_network_finish_bits_header_dst : UInt<2>
    input io_network_finish_bits_payload_manager_xact_id : UInt<4>
    input io_network_probe_ready : UInt<1>
    output io_network_probe_valid : UInt<1>
    output io_network_probe_bits_header_src : UInt<2>
    output io_network_probe_bits_header_dst : UInt<2>
    output io_network_probe_bits_payload_addr_block : UInt<26>
    output io_network_probe_bits_payload_p_type : UInt<2>
    output io_network_release_ready : UInt<1>
    input io_network_release_valid : UInt<1>
    input io_network_release_bits_header_src : UInt<2>
    input io_network_release_bits_header_dst : UInt<2>
    input io_network_release_bits_payload_addr_beat : UInt<3>
    input io_network_release_bits_payload_addr_block : UInt<26>
    input io_network_release_bits_payload_client_xact_id : UInt<1>
    input io_network_release_bits_payload_voluntary : UInt<1>
    input io_network_release_bits_payload_r_type : UInt<3>
    input io_network_release_bits_payload_data : UInt<64>
  
    wire T_6043_ready : UInt<1>
    wire T_6043_valid : UInt<1>
    wire T_6043_bits_header_src : UInt<2>
    wire T_6043_bits_header_dst : UInt<2>
    wire T_6043_bits_payload_addr_beat : UInt<3>
    wire T_6043_bits_payload_client_xact_id : UInt<1>
    wire T_6043_bits_payload_manager_xact_id : UInt<4>
    wire T_6043_bits_payload_is_builtin_type : UInt<1>
    wire T_6043_bits_payload_g_type : UInt<4>
    wire T_6043_bits_payload_data : UInt<64>
    wire T_6043_bits_payload_client_id : UInt<1>
    wire T_6598_ready : UInt<1>
    wire T_6598_valid : UInt<1>
    wire T_6598_bits_header_src : UInt<2>
    wire T_6598_bits_header_dst : UInt<2>
    wire T_6598_bits_payload_addr_block : UInt<26>
    wire T_6598_bits_payload_p_type : UInt<2>
    wire T_6598_bits_payload_client_id : UInt<1>
    wire T_6877_ready : UInt<1>
    wire T_6877_valid : UInt<1>
    wire T_6877_bits_addr_block : UInt<26>
    wire T_6877_bits_client_xact_id : UInt<1>
    wire T_6877_bits_addr_beat : UInt<3>
    wire T_6877_bits_is_builtin_type : UInt<1>
    wire T_6877_bits_a_type : UInt<3>
    wire T_6877_bits_union : UInt<11>
    wire T_6877_bits_data : UInt<64>
    wire T_6993_ready : UInt<1>
    wire T_6993_valid : UInt<1>
    wire T_6993_bits_addr_beat : UInt<3>
    wire T_6993_bits_addr_block : UInt<26>
    wire T_6993_bits_client_xact_id : UInt<1>
    wire T_6993_bits_voluntary : UInt<1>
    wire T_6993_bits_r_type : UInt<3>
    wire T_6993_bits_data : UInt<64>
    wire T_7097_ready : UInt<1>
    wire T_7097_valid : UInt<1>
    wire T_7097_bits_manager_xact_id : UInt<4>
    io_manager_acquire_valid <= T_6877_valid
    io_manager_acquire_bits_addr_block <= T_6877_bits_addr_block
    io_manager_acquire_bits_client_xact_id <= T_6877_bits_client_xact_id
    io_manager_acquire_bits_addr_beat <= T_6877_bits_addr_beat
    io_manager_acquire_bits_is_builtin_type <= T_6877_bits_is_builtin_type
    io_manager_acquire_bits_a_type <= T_6877_bits_a_type
    io_manager_acquire_bits_union <= T_6877_bits_union
    io_manager_acquire_bits_data <= T_6877_bits_data
    io_manager_acquire_bits_client_id <= bits(io_network_acquire_bits_header_src, 0, 0)
    io_manager_grant_ready <= T_6043_ready
    io_manager_finish_valid <= T_7097_valid
    io_manager_finish_bits_manager_xact_id <= T_7097_bits_manager_xact_id
    io_manager_probe_ready <= T_6598_ready
    io_manager_release_valid <= T_6993_valid
    io_manager_release_bits_addr_beat <= T_6993_bits_addr_beat
    io_manager_release_bits_addr_block <= T_6993_bits_addr_block
    io_manager_release_bits_client_xact_id <= T_6993_bits_client_xact_id
    io_manager_release_bits_voluntary <= T_6993_bits_voluntary
    io_manager_release_bits_r_type <= T_6993_bits_r_type
    io_manager_release_bits_data <= T_6993_bits_data
    io_manager_release_bits_client_id <= bits(io_network_release_bits_header_src, 0, 0)
    io_network_acquire_ready <= T_6877_ready
    io_network_grant_valid <= T_6043_valid
    io_network_grant_bits_header_src <= UInt<2>("h0")
    io_network_grant_bits_header_dst <= T_6043_bits_header_dst
    io_network_grant_bits_payload_addr_beat <= T_6043_bits_payload_addr_beat
    io_network_grant_bits_payload_client_xact_id <= T_6043_bits_payload_client_xact_id
    io_network_grant_bits_payload_manager_xact_id <= T_6043_bits_payload_manager_xact_id
    io_network_grant_bits_payload_is_builtin_type <= T_6043_bits_payload_is_builtin_type
    io_network_grant_bits_payload_g_type <= T_6043_bits_payload_g_type
    io_network_grant_bits_payload_data <= T_6043_bits_payload_data
    io_network_finish_ready <= T_7097_ready
    io_network_probe_valid <= T_6598_valid
    io_network_probe_bits_header_src <= UInt<2>("h0")
    io_network_probe_bits_header_dst <= T_6598_bits_header_dst
    io_network_probe_bits_payload_addr_block <= T_6598_bits_payload_addr_block
    io_network_probe_bits_payload_p_type <= T_6598_bits_payload_p_type
    io_network_release_ready <= T_6993_ready
    T_6043_ready <= io_network_grant_ready
    T_6043_valid <= io_manager_grant_valid
    T_6043_bits_header_dst <= pad(io_manager_grant_bits_client_id, 2)
    T_6043_bits_payload_addr_beat <= io_manager_grant_bits_addr_beat
    T_6043_bits_payload_client_xact_id <= io_manager_grant_bits_client_xact_id
    T_6043_bits_payload_manager_xact_id <= io_manager_grant_bits_manager_xact_id
    T_6043_bits_payload_is_builtin_type <= io_manager_grant_bits_is_builtin_type
    T_6043_bits_payload_g_type <= io_manager_grant_bits_g_type
    T_6043_bits_payload_data <= io_manager_grant_bits_data
    T_6043_bits_payload_client_id <= io_manager_grant_bits_client_id
    T_6598_ready <= io_network_probe_ready
    T_6598_valid <= io_manager_probe_valid
    T_6598_bits_header_dst <= pad(io_manager_probe_bits_client_id, 2)
    T_6598_bits_payload_addr_block <= io_manager_probe_bits_addr_block
    T_6598_bits_payload_p_type <= io_manager_probe_bits_p_type
    T_6598_bits_payload_client_id <= io_manager_probe_bits_client_id
    T_6877_ready <= io_manager_acquire_ready
    T_6877_valid <= io_network_acquire_valid
    T_6877_bits_addr_block <= io_network_acquire_bits_payload_addr_block
    T_6877_bits_client_xact_id <= io_network_acquire_bits_payload_client_xact_id
    T_6877_bits_addr_beat <= io_network_acquire_bits_payload_addr_beat
    T_6877_bits_is_builtin_type <= io_network_acquire_bits_payload_is_builtin_type
    T_6877_bits_a_type <= io_network_acquire_bits_payload_a_type
    T_6877_bits_union <= io_network_acquire_bits_payload_union
    T_6877_bits_data <= io_network_acquire_bits_payload_data
    T_6993_ready <= io_manager_release_ready
    T_6993_valid <= io_network_release_valid
    T_6993_bits_addr_beat <= io_network_release_bits_payload_addr_beat
    T_6993_bits_addr_block <= io_network_release_bits_payload_addr_block
    T_6993_bits_client_xact_id <= io_network_release_bits_payload_client_xact_id
    T_6993_bits_voluntary <= io_network_release_bits_payload_voluntary
    T_6993_bits_r_type <= io_network_release_bits_payload_r_type
    T_6993_bits_data <= io_network_release_bits_payload_data
    T_7097_ready <= io_manager_finish_ready
    T_7097_valid <= io_network_finish_valid
    T_7097_bits_manager_xact_id <= io_network_finish_bits_payload_manager_xact_id

  module TileLinkEnqueuer_2 :
    input clk : Clock
    input reset : UInt<1>
    output io_client_acquire_ready : UInt<1>
    input io_client_acquire_valid : UInt<1>
    input io_client_acquire_bits_header_src : UInt<2>
    input io_client_acquire_bits_header_dst : UInt<2>
    input io_client_acquire_bits_payload_addr_block : UInt<26>
    input io_client_acquire_bits_payload_client_xact_id : UInt<1>
    input io_client_acquire_bits_payload_addr_beat : UInt<3>
    input io_client_acquire_bits_payload_is_builtin_type : UInt<1>
    input io_client_acquire_bits_payload_a_type : UInt<3>
    input io_client_acquire_bits_payload_union : UInt<11>
    input io_client_acquire_bits_payload_data : UInt<64>
    input io_client_grant_ready : UInt<1>
    output io_client_grant_valid : UInt<1>
    output io_client_grant_bits_header_src : UInt<2>
    output io_client_grant_bits_header_dst : UInt<2>
    output io_client_grant_bits_payload_addr_beat : UInt<3>
    output io_client_grant_bits_payload_client_xact_id : UInt<1>
    output io_client_grant_bits_payload_manager_xact_id : UInt<4>
    output io_client_grant_bits_payload_is_builtin_type : UInt<1>
    output io_client_grant_bits_payload_g_type : UInt<4>
    output io_client_grant_bits_payload_data : UInt<64>
    output io_client_finish_ready : UInt<1>
    input io_client_finish_valid : UInt<1>
    input io_client_finish_bits_header_src : UInt<2>
    input io_client_finish_bits_header_dst : UInt<2>
    input io_client_finish_bits_payload_manager_xact_id : UInt<4>
    input io_client_probe_ready : UInt<1>
    output io_client_probe_valid : UInt<1>
    output io_client_probe_bits_header_src : UInt<2>
    output io_client_probe_bits_header_dst : UInt<2>
    output io_client_probe_bits_payload_addr_block : UInt<26>
    output io_client_probe_bits_payload_p_type : UInt<2>
    output io_client_release_ready : UInt<1>
    input io_client_release_valid : UInt<1>
    input io_client_release_bits_header_src : UInt<2>
    input io_client_release_bits_header_dst : UInt<2>
    input io_client_release_bits_payload_addr_beat : UInt<3>
    input io_client_release_bits_payload_addr_block : UInt<26>
    input io_client_release_bits_payload_client_xact_id : UInt<1>
    input io_client_release_bits_payload_voluntary : UInt<1>
    input io_client_release_bits_payload_r_type : UInt<3>
    input io_client_release_bits_payload_data : UInt<64>
    input io_manager_acquire_ready : UInt<1>
    output io_manager_acquire_valid : UInt<1>
    output io_manager_acquire_bits_header_src : UInt<2>
    output io_manager_acquire_bits_header_dst : UInt<2>
    output io_manager_acquire_bits_payload_addr_block : UInt<26>
    output io_manager_acquire_bits_payload_client_xact_id : UInt<1>
    output io_manager_acquire_bits_payload_addr_beat : UInt<3>
    output io_manager_acquire_bits_payload_is_builtin_type : UInt<1>
    output io_manager_acquire_bits_payload_a_type : UInt<3>
    output io_manager_acquire_bits_payload_union : UInt<11>
    output io_manager_acquire_bits_payload_data : UInt<64>
    output io_manager_grant_ready : UInt<1>
    input io_manager_grant_valid : UInt<1>
    input io_manager_grant_bits_header_src : UInt<2>
    input io_manager_grant_bits_header_dst : UInt<2>
    input io_manager_grant_bits_payload_addr_beat : UInt<3>
    input io_manager_grant_bits_payload_client_xact_id : UInt<1>
    input io_manager_grant_bits_payload_manager_xact_id : UInt<4>
    input io_manager_grant_bits_payload_is_builtin_type : UInt<1>
    input io_manager_grant_bits_payload_g_type : UInt<4>
    input io_manager_grant_bits_payload_data : UInt<64>
    input io_manager_finish_ready : UInt<1>
    output io_manager_finish_valid : UInt<1>
    output io_manager_finish_bits_header_src : UInt<2>
    output io_manager_finish_bits_header_dst : UInt<2>
    output io_manager_finish_bits_payload_manager_xact_id : UInt<4>
    output io_manager_probe_ready : UInt<1>
    input io_manager_probe_valid : UInt<1>
    input io_manager_probe_bits_header_src : UInt<2>
    input io_manager_probe_bits_header_dst : UInt<2>
    input io_manager_probe_bits_payload_addr_block : UInt<26>
    input io_manager_probe_bits_payload_p_type : UInt<2>
    input io_manager_release_ready : UInt<1>
    output io_manager_release_valid : UInt<1>
    output io_manager_release_bits_header_src : UInt<2>
    output io_manager_release_bits_header_dst : UInt<2>
    output io_manager_release_bits_payload_addr_beat : UInt<3>
    output io_manager_release_bits_payload_addr_block : UInt<26>
    output io_manager_release_bits_payload_client_xact_id : UInt<1>
    output io_manager_release_bits_payload_voluntary : UInt<1>
    output io_manager_release_bits_payload_r_type : UInt<3>
    output io_manager_release_bits_payload_data : UInt<64>
  
    io_client_acquire_ready <= io_manager_acquire_ready
    io_client_grant_valid <= io_manager_grant_valid
    io_client_grant_bits_header_src <= io_manager_grant_bits_header_src
    io_client_grant_bits_header_dst <= io_manager_grant_bits_header_dst
    io_client_grant_bits_payload_addr_beat <= io_manager_grant_bits_payload_addr_beat
    io_client_grant_bits_payload_client_xact_id <= io_manager_grant_bits_payload_client_xact_id
    io_client_grant_bits_payload_manager_xact_id <= io_manager_grant_bits_payload_manager_xact_id
    io_client_grant_bits_payload_is_builtin_type <= io_manager_grant_bits_payload_is_builtin_type
    io_client_grant_bits_payload_g_type <= io_manager_grant_bits_payload_g_type
    io_client_grant_bits_payload_data <= io_manager_grant_bits_payload_data
    io_client_finish_ready <= io_manager_finish_ready
    io_client_probe_valid <= io_manager_probe_valid
    io_client_probe_bits_header_src <= io_manager_probe_bits_header_src
    io_client_probe_bits_header_dst <= io_manager_probe_bits_header_dst
    io_client_probe_bits_payload_addr_block <= io_manager_probe_bits_payload_addr_block
    io_client_probe_bits_payload_p_type <= io_manager_probe_bits_payload_p_type
    io_client_release_ready <= io_manager_release_ready
    io_manager_acquire_valid <= io_client_acquire_valid
    io_manager_acquire_bits_header_src <= io_client_acquire_bits_header_src
    io_manager_acquire_bits_header_dst <= io_client_acquire_bits_header_dst
    io_manager_acquire_bits_payload_addr_block <= io_client_acquire_bits_payload_addr_block
    io_manager_acquire_bits_payload_client_xact_id <= io_client_acquire_bits_payload_client_xact_id
    io_manager_acquire_bits_payload_addr_beat <= io_client_acquire_bits_payload_addr_beat
    io_manager_acquire_bits_payload_is_builtin_type <= io_client_acquire_bits_payload_is_builtin_type
    io_manager_acquire_bits_payload_a_type <= io_client_acquire_bits_payload_a_type
    io_manager_acquire_bits_payload_union <= io_client_acquire_bits_payload_union
    io_manager_acquire_bits_payload_data <= io_client_acquire_bits_payload_data
    io_manager_grant_ready <= io_client_grant_ready
    io_manager_finish_valid <= io_client_finish_valid
    io_manager_finish_bits_header_src <= io_client_finish_bits_header_src
    io_manager_finish_bits_header_dst <= io_client_finish_bits_header_dst
    io_manager_finish_bits_payload_manager_xact_id <= io_client_finish_bits_payload_manager_xact_id
    io_manager_probe_ready <= io_client_probe_ready
    io_manager_release_valid <= io_client_release_valid
    io_manager_release_bits_header_src <= io_client_release_bits_header_src
    io_manager_release_bits_header_dst <= io_client_release_bits_header_dst
    io_manager_release_bits_payload_addr_beat <= io_client_release_bits_payload_addr_beat
    io_manager_release_bits_payload_addr_block <= io_client_release_bits_payload_addr_block
    io_manager_release_bits_payload_client_xact_id <= io_client_release_bits_payload_client_xact_id
    io_manager_release_bits_payload_voluntary <= io_client_release_bits_payload_voluntary
    io_manager_release_bits_payload_r_type <= io_client_release_bits_payload_r_type
    io_manager_release_bits_payload_data <= io_client_release_bits_payload_data

  module ManagerTileLinkNetworkPort_1 :
    input clk : Clock
    input reset : UInt<1>
    input io_manager_acquire_ready : UInt<1>
    output io_manager_acquire_valid : UInt<1>
    output io_manager_acquire_bits_addr_block : UInt<26>
    output io_manager_acquire_bits_client_xact_id : UInt<1>
    output io_manager_acquire_bits_addr_beat : UInt<3>
    output io_manager_acquire_bits_is_builtin_type : UInt<1>
    output io_manager_acquire_bits_a_type : UInt<3>
    output io_manager_acquire_bits_union : UInt<11>
    output io_manager_acquire_bits_data : UInt<64>
    output io_manager_acquire_bits_client_id : UInt<1>
    output io_manager_grant_ready : UInt<1>
    input io_manager_grant_valid : UInt<1>
    input io_manager_grant_bits_addr_beat : UInt<3>
    input io_manager_grant_bits_client_xact_id : UInt<1>
    input io_manager_grant_bits_manager_xact_id : UInt<4>
    input io_manager_grant_bits_is_builtin_type : UInt<1>
    input io_manager_grant_bits_g_type : UInt<4>
    input io_manager_grant_bits_data : UInt<64>
    input io_manager_grant_bits_client_id : UInt<1>
    input io_manager_finish_ready : UInt<1>
    output io_manager_finish_valid : UInt<1>
    output io_manager_finish_bits_manager_xact_id : UInt<4>
    output io_manager_probe_ready : UInt<1>
    input io_manager_probe_valid : UInt<1>
    input io_manager_probe_bits_addr_block : UInt<26>
    input io_manager_probe_bits_p_type : UInt<2>
    input io_manager_probe_bits_client_id : UInt<1>
    input io_manager_release_ready : UInt<1>
    output io_manager_release_valid : UInt<1>
    output io_manager_release_bits_addr_beat : UInt<3>
    output io_manager_release_bits_addr_block : UInt<26>
    output io_manager_release_bits_client_xact_id : UInt<1>
    output io_manager_release_bits_voluntary : UInt<1>
    output io_manager_release_bits_r_type : UInt<3>
    output io_manager_release_bits_data : UInt<64>
    output io_manager_release_bits_client_id : UInt<1>
    output io_network_acquire_ready : UInt<1>
    input io_network_acquire_valid : UInt<1>
    input io_network_acquire_bits_header_src : UInt<2>
    input io_network_acquire_bits_header_dst : UInt<2>
    input io_network_acquire_bits_payload_addr_block : UInt<26>
    input io_network_acquire_bits_payload_client_xact_id : UInt<1>
    input io_network_acquire_bits_payload_addr_beat : UInt<3>
    input io_network_acquire_bits_payload_is_builtin_type : UInt<1>
    input io_network_acquire_bits_payload_a_type : UInt<3>
    input io_network_acquire_bits_payload_union : UInt<11>
    input io_network_acquire_bits_payload_data : UInt<64>
    input io_network_grant_ready : UInt<1>
    output io_network_grant_valid : UInt<1>
    output io_network_grant_bits_header_src : UInt<2>
    output io_network_grant_bits_header_dst : UInt<2>
    output io_network_grant_bits_payload_addr_beat : UInt<3>
    output io_network_grant_bits_payload_client_xact_id : UInt<1>
    output io_network_grant_bits_payload_manager_xact_id : UInt<4>
    output io_network_grant_bits_payload_is_builtin_type : UInt<1>
    output io_network_grant_bits_payload_g_type : UInt<4>
    output io_network_grant_bits_payload_data : UInt<64>
    output io_network_finish_ready : UInt<1>
    input io_network_finish_valid : UInt<1>
    input io_network_finish_bits_header_src : UInt<2>
    input io_network_finish_bits_header_dst : UInt<2>
    input io_network_finish_bits_payload_manager_xact_id : UInt<4>
    input io_network_probe_ready : UInt<1>
    output io_network_probe_valid : UInt<1>
    output io_network_probe_bits_header_src : UInt<2>
    output io_network_probe_bits_header_dst : UInt<2>
    output io_network_probe_bits_payload_addr_block : UInt<26>
    output io_network_probe_bits_payload_p_type : UInt<2>
    output io_network_release_ready : UInt<1>
    input io_network_release_valid : UInt<1>
    input io_network_release_bits_header_src : UInt<2>
    input io_network_release_bits_header_dst : UInt<2>
    input io_network_release_bits_payload_addr_beat : UInt<3>
    input io_network_release_bits_payload_addr_block : UInt<26>
    input io_network_release_bits_payload_client_xact_id : UInt<1>
    input io_network_release_bits_payload_voluntary : UInt<1>
    input io_network_release_bits_payload_r_type : UInt<3>
    input io_network_release_bits_payload_data : UInt<64>
  
    wire T_6043_ready : UInt<1>
    wire T_6043_valid : UInt<1>
    wire T_6043_bits_header_src : UInt<2>
    wire T_6043_bits_header_dst : UInt<2>
    wire T_6043_bits_payload_addr_beat : UInt<3>
    wire T_6043_bits_payload_client_xact_id : UInt<1>
    wire T_6043_bits_payload_manager_xact_id : UInt<4>
    wire T_6043_bits_payload_is_builtin_type : UInt<1>
    wire T_6043_bits_payload_g_type : UInt<4>
    wire T_6043_bits_payload_data : UInt<64>
    wire T_6043_bits_payload_client_id : UInt<1>
    wire T_6598_ready : UInt<1>
    wire T_6598_valid : UInt<1>
    wire T_6598_bits_header_src : UInt<2>
    wire T_6598_bits_header_dst : UInt<2>
    wire T_6598_bits_payload_addr_block : UInt<26>
    wire T_6598_bits_payload_p_type : UInt<2>
    wire T_6598_bits_payload_client_id : UInt<1>
    wire T_6877_ready : UInt<1>
    wire T_6877_valid : UInt<1>
    wire T_6877_bits_addr_block : UInt<26>
    wire T_6877_bits_client_xact_id : UInt<1>
    wire T_6877_bits_addr_beat : UInt<3>
    wire T_6877_bits_is_builtin_type : UInt<1>
    wire T_6877_bits_a_type : UInt<3>
    wire T_6877_bits_union : UInt<11>
    wire T_6877_bits_data : UInt<64>
    wire T_6993_ready : UInt<1>
    wire T_6993_valid : UInt<1>
    wire T_6993_bits_addr_beat : UInt<3>
    wire T_6993_bits_addr_block : UInt<26>
    wire T_6993_bits_client_xact_id : UInt<1>
    wire T_6993_bits_voluntary : UInt<1>
    wire T_6993_bits_r_type : UInt<3>
    wire T_6993_bits_data : UInt<64>
    wire T_7097_ready : UInt<1>
    wire T_7097_valid : UInt<1>
    wire T_7097_bits_manager_xact_id : UInt<4>
    io_manager_acquire_valid <= T_6877_valid
    io_manager_acquire_bits_addr_block <= T_6877_bits_addr_block
    io_manager_acquire_bits_client_xact_id <= T_6877_bits_client_xact_id
    io_manager_acquire_bits_addr_beat <= T_6877_bits_addr_beat
    io_manager_acquire_bits_is_builtin_type <= T_6877_bits_is_builtin_type
    io_manager_acquire_bits_a_type <= T_6877_bits_a_type
    io_manager_acquire_bits_union <= T_6877_bits_union
    io_manager_acquire_bits_data <= T_6877_bits_data
    io_manager_acquire_bits_client_id <= bits(io_network_acquire_bits_header_src, 0, 0)
    io_manager_grant_ready <= T_6043_ready
    io_manager_finish_valid <= T_7097_valid
    io_manager_finish_bits_manager_xact_id <= T_7097_bits_manager_xact_id
    io_manager_probe_ready <= T_6598_ready
    io_manager_release_valid <= T_6993_valid
    io_manager_release_bits_addr_beat <= T_6993_bits_addr_beat
    io_manager_release_bits_addr_block <= T_6993_bits_addr_block
    io_manager_release_bits_client_xact_id <= T_6993_bits_client_xact_id
    io_manager_release_bits_voluntary <= T_6993_bits_voluntary
    io_manager_release_bits_r_type <= T_6993_bits_r_type
    io_manager_release_bits_data <= T_6993_bits_data
    io_manager_release_bits_client_id <= bits(io_network_release_bits_header_src, 0, 0)
    io_network_acquire_ready <= T_6877_ready
    io_network_grant_valid <= T_6043_valid
    io_network_grant_bits_header_src <= UInt<2>("h1")
    io_network_grant_bits_header_dst <= T_6043_bits_header_dst
    io_network_grant_bits_payload_addr_beat <= T_6043_bits_payload_addr_beat
    io_network_grant_bits_payload_client_xact_id <= T_6043_bits_payload_client_xact_id
    io_network_grant_bits_payload_manager_xact_id <= T_6043_bits_payload_manager_xact_id
    io_network_grant_bits_payload_is_builtin_type <= T_6043_bits_payload_is_builtin_type
    io_network_grant_bits_payload_g_type <= T_6043_bits_payload_g_type
    io_network_grant_bits_payload_data <= T_6043_bits_payload_data
    io_network_finish_ready <= T_7097_ready
    io_network_probe_valid <= T_6598_valid
    io_network_probe_bits_header_src <= UInt<2>("h1")
    io_network_probe_bits_header_dst <= T_6598_bits_header_dst
    io_network_probe_bits_payload_addr_block <= T_6598_bits_payload_addr_block
    io_network_probe_bits_payload_p_type <= T_6598_bits_payload_p_type
    io_network_release_ready <= T_6993_ready
    T_6043_ready <= io_network_grant_ready
    T_6043_valid <= io_manager_grant_valid
    T_6043_bits_header_dst <= pad(io_manager_grant_bits_client_id, 2)
    T_6043_bits_payload_addr_beat <= io_manager_grant_bits_addr_beat
    T_6043_bits_payload_client_xact_id <= io_manager_grant_bits_client_xact_id
    T_6043_bits_payload_manager_xact_id <= io_manager_grant_bits_manager_xact_id
    T_6043_bits_payload_is_builtin_type <= io_manager_grant_bits_is_builtin_type
    T_6043_bits_payload_g_type <= io_manager_grant_bits_g_type
    T_6043_bits_payload_data <= io_manager_grant_bits_data
    T_6043_bits_payload_client_id <= io_manager_grant_bits_client_id
    T_6598_ready <= io_network_probe_ready
    T_6598_valid <= io_manager_probe_valid
    T_6598_bits_header_dst <= pad(io_manager_probe_bits_client_id, 2)
    T_6598_bits_payload_addr_block <= io_manager_probe_bits_addr_block
    T_6598_bits_payload_p_type <= io_manager_probe_bits_p_type
    T_6598_bits_payload_client_id <= io_manager_probe_bits_client_id
    T_6877_ready <= io_manager_acquire_ready
    T_6877_valid <= io_network_acquire_valid
    T_6877_bits_addr_block <= io_network_acquire_bits_payload_addr_block
    T_6877_bits_client_xact_id <= io_network_acquire_bits_payload_client_xact_id
    T_6877_bits_addr_beat <= io_network_acquire_bits_payload_addr_beat
    T_6877_bits_is_builtin_type <= io_network_acquire_bits_payload_is_builtin_type
    T_6877_bits_a_type <= io_network_acquire_bits_payload_a_type
    T_6877_bits_union <= io_network_acquire_bits_payload_union
    T_6877_bits_data <= io_network_acquire_bits_payload_data
    T_6993_ready <= io_manager_release_ready
    T_6993_valid <= io_network_release_valid
    T_6993_bits_addr_beat <= io_network_release_bits_payload_addr_beat
    T_6993_bits_addr_block <= io_network_release_bits_payload_addr_block
    T_6993_bits_client_xact_id <= io_network_release_bits_payload_client_xact_id
    T_6993_bits_voluntary <= io_network_release_bits_payload_voluntary
    T_6993_bits_r_type <= io_network_release_bits_payload_r_type
    T_6993_bits_data <= io_network_release_bits_payload_data
    T_7097_ready <= io_manager_finish_ready
    T_7097_valid <= io_network_finish_valid
    T_7097_bits_manager_xact_id <= io_network_finish_bits_payload_manager_xact_id

  module LockingRRArbiter :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_addr_block : UInt<26>
    input io_in_0_bits_payload_client_xact_id : UInt<1>
    input io_in_0_bits_payload_addr_beat : UInt<3>
    input io_in_0_bits_payload_is_builtin_type : UInt<1>
    input io_in_0_bits_payload_a_type : UInt<3>
    input io_in_0_bits_payload_union : UInt<11>
    input io_in_0_bits_payload_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_addr_block : UInt<26>
    input io_in_1_bits_payload_client_xact_id : UInt<1>
    input io_in_1_bits_payload_addr_beat : UInt<3>
    input io_in_1_bits_payload_is_builtin_type : UInt<1>
    input io_in_1_bits_payload_a_type : UInt<3>
    input io_in_1_bits_payload_union : UInt<11>
    input io_in_1_bits_payload_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_addr_block : UInt<26>
    input io_in_2_bits_payload_client_xact_id : UInt<1>
    input io_in_2_bits_payload_addr_beat : UInt<3>
    input io_in_2_bits_payload_is_builtin_type : UInt<1>
    input io_in_2_bits_payload_a_type : UInt<3>
    input io_in_2_bits_payload_union : UInt<11>
    input io_in_2_bits_payload_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_addr_block : UInt<26>
    input io_in_3_bits_payload_client_xact_id : UInt<1>
    input io_in_3_bits_payload_addr_beat : UInt<3>
    input io_in_3_bits_payload_is_builtin_type : UInt<1>
    input io_in_3_bits_payload_a_type : UInt<3>
    input io_in_3_bits_payload_union : UInt<11>
    input io_in_3_bits_payload_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_header_src : UInt<2>
    output io_out_bits_header_dst : UInt<2>
    output io_out_bits_payload_addr_block : UInt<26>
    output io_out_bits_payload_client_xact_id : UInt<1>
    output io_out_bits_payload_addr_beat : UInt<3>
    output io_out_bits_payload_is_builtin_type : UInt<1>
    output io_out_bits_payload_a_type : UInt<3>
    output io_out_bits_payload_union : UInt<11>
    output io_out_bits_payload_data : UInt<64>
    output io_chosen : UInt<2>
  
    wire choice : UInt<2>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_addr_block : UInt<26>
    wire GEN_0_bits_payload_client_xact_id : UInt<1>
    wire GEN_0_bits_payload_addr_beat : UInt<3>
    wire GEN_0_bits_payload_is_builtin_type : UInt<1>
    wire GEN_0_bits_payload_a_type : UInt<3>
    wire GEN_0_bits_payload_union : UInt<11>
    wire GEN_0_bits_payload_data : UInt<64>
    node GEN_10 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_11 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_12 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_src, io_in_0_bits_header_src)
    node GEN_13 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_dst, io_in_0_bits_header_dst)
    node GEN_14 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_addr_block, io_in_0_bits_payload_addr_block)
    node GEN_15 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_client_xact_id, io_in_0_bits_payload_client_xact_id)
    node GEN_16 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_addr_beat, io_in_0_bits_payload_addr_beat)
    node GEN_17 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_is_builtin_type, io_in_0_bits_payload_is_builtin_type)
    node GEN_18 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_a_type, io_in_0_bits_payload_a_type)
    node GEN_19 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_union, io_in_0_bits_payload_union)
    node GEN_20 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_data, io_in_0_bits_payload_data)
    node GEN_21 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_ready, GEN_10)
    node GEN_22 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_valid, GEN_11)
    node GEN_23 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_src, GEN_12)
    node GEN_24 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_dst, GEN_13)
    node GEN_25 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_addr_block, GEN_14)
    node GEN_26 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_client_xact_id, GEN_15)
    node GEN_27 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_addr_beat, GEN_16)
    node GEN_28 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_is_builtin_type, GEN_17)
    node GEN_29 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_a_type, GEN_18)
    node GEN_30 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_union, GEN_19)
    node GEN_31 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_data, GEN_20)
    node GEN_32 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_ready, GEN_21)
    node GEN_33 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_valid, GEN_22)
    node GEN_34 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_src, GEN_23)
    node GEN_35 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_dst, GEN_24)
    node GEN_36 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_addr_block, GEN_25)
    node GEN_37 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_client_xact_id, GEN_26)
    node GEN_38 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_addr_beat, GEN_27)
    node GEN_39 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_is_builtin_type, GEN_28)
    node GEN_40 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_a_type, GEN_29)
    node GEN_41 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_union, GEN_30)
    node GEN_42 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_data, GEN_31)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_header_src : UInt<2>
    wire GEN_1_bits_header_dst : UInt<2>
    wire GEN_1_bits_payload_addr_block : UInt<26>
    wire GEN_1_bits_payload_client_xact_id : UInt<1>
    wire GEN_1_bits_payload_addr_beat : UInt<3>
    wire GEN_1_bits_payload_is_builtin_type : UInt<1>
    wire GEN_1_bits_payload_a_type : UInt<3>
    wire GEN_1_bits_payload_union : UInt<11>
    wire GEN_1_bits_payload_data : UInt<64>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_header_src : UInt<2>
    wire GEN_2_bits_header_dst : UInt<2>
    wire GEN_2_bits_payload_addr_block : UInt<26>
    wire GEN_2_bits_payload_client_xact_id : UInt<1>
    wire GEN_2_bits_payload_addr_beat : UInt<3>
    wire GEN_2_bits_payload_is_builtin_type : UInt<1>
    wire GEN_2_bits_payload_a_type : UInt<3>
    wire GEN_2_bits_payload_union : UInt<11>
    wire GEN_2_bits_payload_data : UInt<64>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_header_src : UInt<2>
    wire GEN_3_bits_header_dst : UInt<2>
    wire GEN_3_bits_payload_addr_block : UInt<26>
    wire GEN_3_bits_payload_client_xact_id : UInt<1>
    wire GEN_3_bits_payload_addr_beat : UInt<3>
    wire GEN_3_bits_payload_is_builtin_type : UInt<1>
    wire GEN_3_bits_payload_a_type : UInt<3>
    wire GEN_3_bits_payload_union : UInt<11>
    wire GEN_3_bits_payload_data : UInt<64>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_header_src : UInt<2>
    wire GEN_4_bits_header_dst : UInt<2>
    wire GEN_4_bits_payload_addr_block : UInt<26>
    wire GEN_4_bits_payload_client_xact_id : UInt<1>
    wire GEN_4_bits_payload_addr_beat : UInt<3>
    wire GEN_4_bits_payload_is_builtin_type : UInt<1>
    wire GEN_4_bits_payload_a_type : UInt<3>
    wire GEN_4_bits_payload_union : UInt<11>
    wire GEN_4_bits_payload_data : UInt<64>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_header_src : UInt<2>
    wire GEN_5_bits_header_dst : UInt<2>
    wire GEN_5_bits_payload_addr_block : UInt<26>
    wire GEN_5_bits_payload_client_xact_id : UInt<1>
    wire GEN_5_bits_payload_addr_beat : UInt<3>
    wire GEN_5_bits_payload_is_builtin_type : UInt<1>
    wire GEN_5_bits_payload_a_type : UInt<3>
    wire GEN_5_bits_payload_union : UInt<11>
    wire GEN_5_bits_payload_data : UInt<64>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_header_src : UInt<2>
    wire GEN_6_bits_header_dst : UInt<2>
    wire GEN_6_bits_payload_addr_block : UInt<26>
    wire GEN_6_bits_payload_client_xact_id : UInt<1>
    wire GEN_6_bits_payload_addr_beat : UInt<3>
    wire GEN_6_bits_payload_is_builtin_type : UInt<1>
    wire GEN_6_bits_payload_a_type : UInt<3>
    wire GEN_6_bits_payload_union : UInt<11>
    wire GEN_6_bits_payload_data : UInt<64>
    wire GEN_7_ready : UInt<1>
    wire GEN_7_valid : UInt<1>
    wire GEN_7_bits_header_src : UInt<2>
    wire GEN_7_bits_header_dst : UInt<2>
    wire GEN_7_bits_payload_addr_block : UInt<26>
    wire GEN_7_bits_payload_client_xact_id : UInt<1>
    wire GEN_7_bits_payload_addr_beat : UInt<3>
    wire GEN_7_bits_payload_is_builtin_type : UInt<1>
    wire GEN_7_bits_payload_a_type : UInt<3>
    wire GEN_7_bits_payload_union : UInt<11>
    wire GEN_7_bits_payload_data : UInt<64>
    wire GEN_8_ready : UInt<1>
    wire GEN_8_valid : UInt<1>
    wire GEN_8_bits_header_src : UInt<2>
    wire GEN_8_bits_header_dst : UInt<2>
    wire GEN_8_bits_payload_addr_block : UInt<26>
    wire GEN_8_bits_payload_client_xact_id : UInt<1>
    wire GEN_8_bits_payload_addr_beat : UInt<3>
    wire GEN_8_bits_payload_is_builtin_type : UInt<1>
    wire GEN_8_bits_payload_a_type : UInt<3>
    wire GEN_8_bits_payload_union : UInt<11>
    wire GEN_8_bits_payload_data : UInt<64>
    wire GEN_9_ready : UInt<1>
    wire GEN_9_valid : UInt<1>
    wire GEN_9_bits_header_src : UInt<2>
    wire GEN_9_bits_header_dst : UInt<2>
    wire GEN_9_bits_payload_addr_block : UInt<26>
    wire GEN_9_bits_payload_client_xact_id : UInt<1>
    wire GEN_9_bits_payload_addr_beat : UInt<3>
    wire GEN_9_bits_payload_is_builtin_type : UInt<1>
    wire GEN_9_bits_payload_a_type : UInt<3>
    wire GEN_9_bits_payload_union : UInt<11>
    wire GEN_9_bits_payload_data : UInt<64>
    reg T_1134 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_1136 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_1136)
    node T_1138 = neq(T_1134, UInt<3>("h0"))
    wire T_1147_0 : UInt<3>
    node T_1149 = eq(io_out_bits_payload_a_type, UInt<3>("h3"))
    node T_1150 = and(io_out_bits_payload_is_builtin_type, T_1149)
    node T_1151 = and(io_out_ready, io_out_valid)
    node T_1152 = and(T_1151, T_1150)
    node T_1156 = add(T_1134, UInt<3>("h1"))
    node T_1157 = tail(T_1156, 1)
    node GEN_43 = mux(T_1152, io_chosen, T_1136)
    node GEN_44 = mux(T_1152, T_1157, T_1134)
    node GEN_45 = mux(T_1138, T_1136, choice)
    reg lastGrant : UInt<2>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_46 = mux(T_1151, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<2>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node T_1165 = or(validMask_1, validMask_2)
    node T_1166 = or(T_1165, validMask_3)
    node T_1167 = or(T_1166, io_in_0_valid)
    node T_1168 = or(T_1167, io_in_1_valid)
    node T_1169 = or(T_1168, io_in_2_valid)
    node T_1173 = eq(validMask_1, UInt<1>("h0"))
    node T_1175 = eq(T_1165, UInt<1>("h0"))
    node T_1177 = eq(T_1166, UInt<1>("h0"))
    node T_1179 = eq(T_1167, UInt<1>("h0"))
    node T_1181 = eq(T_1168, UInt<1>("h0"))
    node T_1183 = eq(T_1169, UInt<1>("h0"))
    node T_1187 = or(grantMask_1, T_1179)
    node T_1188 = and(T_1173, grantMask_2)
    node T_1189 = or(T_1188, T_1181)
    node T_1190 = and(T_1175, grantMask_3)
    node T_1191 = or(T_1190, T_1183)
    node T_1193 = eq(T_1136, UInt<2>("h0"))
    node T_1194 = mux(T_1138, T_1193, T_1177)
    node T_1195 = and(T_1194, io_out_ready)
    node T_1197 = eq(T_1136, UInt<2>("h1"))
    node T_1198 = mux(T_1138, T_1197, T_1187)
    node T_1199 = and(T_1198, io_out_ready)
    node T_1201 = eq(T_1136, UInt<2>("h2"))
    node T_1202 = mux(T_1138, T_1201, T_1189)
    node T_1203 = and(T_1202, io_out_ready)
    node T_1205 = eq(T_1136, UInt<2>("h3"))
    node T_1206 = mux(T_1138, T_1205, T_1191)
    node T_1207 = and(T_1206, io_out_ready)
    node GEN_47 = mux(io_in_2_valid, UInt<2>("h2"), UInt<2>("h3"))
    node GEN_48 = mux(io_in_1_valid, UInt<2>("h1"), GEN_47)
    node GEN_49 = mux(io_in_0_valid, UInt<2>("h0"), GEN_48)
    node GEN_50 = mux(validMask_3, UInt<2>("h3"), GEN_49)
    node GEN_51 = mux(validMask_2, UInt<2>("h2"), GEN_50)
    node GEN_52 = mux(validMask_1, UInt<2>("h1"), GEN_51)
    io_in_0_ready <= T_1195
    io_in_1_ready <= T_1199
    io_in_2_ready <= T_1203
    io_in_3_ready <= T_1207
    io_out_valid <= GEN_0_valid
    io_out_bits_header_src <= GEN_1_bits_header_src
    io_out_bits_header_dst <= GEN_2_bits_header_dst
    io_out_bits_payload_addr_block <= GEN_3_bits_payload_addr_block
    io_out_bits_payload_client_xact_id <= GEN_4_bits_payload_client_xact_id
    io_out_bits_payload_addr_beat <= GEN_5_bits_payload_addr_beat
    io_out_bits_payload_is_builtin_type <= GEN_6_bits_payload_is_builtin_type
    io_out_bits_payload_a_type <= GEN_7_bits_payload_a_type
    io_out_bits_payload_union <= GEN_8_bits_payload_union
    io_out_bits_payload_data <= GEN_9_bits_payload_data
    io_chosen <= GEN_45
    choice <= GEN_52
    GEN_0_ready <= GEN_32
    GEN_0_valid <= GEN_33
    GEN_0_bits_header_src <= GEN_34
    GEN_0_bits_header_dst <= GEN_35
    GEN_0_bits_payload_addr_block <= GEN_36
    GEN_0_bits_payload_client_xact_id <= GEN_37
    GEN_0_bits_payload_addr_beat <= GEN_38
    GEN_0_bits_payload_is_builtin_type <= GEN_39
    GEN_0_bits_payload_a_type <= GEN_40
    GEN_0_bits_payload_union <= GEN_41
    GEN_0_bits_payload_data <= GEN_42
    GEN_1_ready <= GEN_32
    GEN_1_valid <= GEN_33
    GEN_1_bits_header_src <= GEN_34
    GEN_1_bits_header_dst <= GEN_35
    GEN_1_bits_payload_addr_block <= GEN_36
    GEN_1_bits_payload_client_xact_id <= GEN_37
    GEN_1_bits_payload_addr_beat <= GEN_38
    GEN_1_bits_payload_is_builtin_type <= GEN_39
    GEN_1_bits_payload_a_type <= GEN_40
    GEN_1_bits_payload_union <= GEN_41
    GEN_1_bits_payload_data <= GEN_42
    GEN_2_ready <= GEN_32
    GEN_2_valid <= GEN_33
    GEN_2_bits_header_src <= GEN_34
    GEN_2_bits_header_dst <= GEN_35
    GEN_2_bits_payload_addr_block <= GEN_36
    GEN_2_bits_payload_client_xact_id <= GEN_37
    GEN_2_bits_payload_addr_beat <= GEN_38
    GEN_2_bits_payload_is_builtin_type <= GEN_39
    GEN_2_bits_payload_a_type <= GEN_40
    GEN_2_bits_payload_union <= GEN_41
    GEN_2_bits_payload_data <= GEN_42
    GEN_3_ready <= GEN_32
    GEN_3_valid <= GEN_33
    GEN_3_bits_header_src <= GEN_34
    GEN_3_bits_header_dst <= GEN_35
    GEN_3_bits_payload_addr_block <= GEN_36
    GEN_3_bits_payload_client_xact_id <= GEN_37
    GEN_3_bits_payload_addr_beat <= GEN_38
    GEN_3_bits_payload_is_builtin_type <= GEN_39
    GEN_3_bits_payload_a_type <= GEN_40
    GEN_3_bits_payload_union <= GEN_41
    GEN_3_bits_payload_data <= GEN_42
    GEN_4_ready <= GEN_32
    GEN_4_valid <= GEN_33
    GEN_4_bits_header_src <= GEN_34
    GEN_4_bits_header_dst <= GEN_35
    GEN_4_bits_payload_addr_block <= GEN_36
    GEN_4_bits_payload_client_xact_id <= GEN_37
    GEN_4_bits_payload_addr_beat <= GEN_38
    GEN_4_bits_payload_is_builtin_type <= GEN_39
    GEN_4_bits_payload_a_type <= GEN_40
    GEN_4_bits_payload_union <= GEN_41
    GEN_4_bits_payload_data <= GEN_42
    GEN_5_ready <= GEN_32
    GEN_5_valid <= GEN_33
    GEN_5_bits_header_src <= GEN_34
    GEN_5_bits_header_dst <= GEN_35
    GEN_5_bits_payload_addr_block <= GEN_36
    GEN_5_bits_payload_client_xact_id <= GEN_37
    GEN_5_bits_payload_addr_beat <= GEN_38
    GEN_5_bits_payload_is_builtin_type <= GEN_39
    GEN_5_bits_payload_a_type <= GEN_40
    GEN_5_bits_payload_union <= GEN_41
    GEN_5_bits_payload_data <= GEN_42
    GEN_6_ready <= GEN_32
    GEN_6_valid <= GEN_33
    GEN_6_bits_header_src <= GEN_34
    GEN_6_bits_header_dst <= GEN_35
    GEN_6_bits_payload_addr_block <= GEN_36
    GEN_6_bits_payload_client_xact_id <= GEN_37
    GEN_6_bits_payload_addr_beat <= GEN_38
    GEN_6_bits_payload_is_builtin_type <= GEN_39
    GEN_6_bits_payload_a_type <= GEN_40
    GEN_6_bits_payload_union <= GEN_41
    GEN_6_bits_payload_data <= GEN_42
    GEN_7_ready <= GEN_32
    GEN_7_valid <= GEN_33
    GEN_7_bits_header_src <= GEN_34
    GEN_7_bits_header_dst <= GEN_35
    GEN_7_bits_payload_addr_block <= GEN_36
    GEN_7_bits_payload_client_xact_id <= GEN_37
    GEN_7_bits_payload_addr_beat <= GEN_38
    GEN_7_bits_payload_is_builtin_type <= GEN_39
    GEN_7_bits_payload_a_type <= GEN_40
    GEN_7_bits_payload_union <= GEN_41
    GEN_7_bits_payload_data <= GEN_42
    GEN_8_ready <= GEN_32
    GEN_8_valid <= GEN_33
    GEN_8_bits_header_src <= GEN_34
    GEN_8_bits_header_dst <= GEN_35
    GEN_8_bits_payload_addr_block <= GEN_36
    GEN_8_bits_payload_client_xact_id <= GEN_37
    GEN_8_bits_payload_addr_beat <= GEN_38
    GEN_8_bits_payload_is_builtin_type <= GEN_39
    GEN_8_bits_payload_a_type <= GEN_40
    GEN_8_bits_payload_union <= GEN_41
    GEN_8_bits_payload_data <= GEN_42
    GEN_9_ready <= GEN_32
    GEN_9_valid <= GEN_33
    GEN_9_bits_header_src <= GEN_34
    GEN_9_bits_header_dst <= GEN_35
    GEN_9_bits_payload_addr_block <= GEN_36
    GEN_9_bits_payload_client_xact_id <= GEN_37
    GEN_9_bits_payload_addr_beat <= GEN_38
    GEN_9_bits_payload_is_builtin_type <= GEN_39
    GEN_9_bits_payload_a_type <= GEN_40
    GEN_9_bits_payload_union <= GEN_41
    GEN_9_bits_payload_data <= GEN_42
    T_1134 <= GEN_44
    T_1136 <= GEN_43
    lastGrant <= GEN_46

  module BasicBus :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_addr_block : UInt<26>
    input io_in_0_bits_payload_client_xact_id : UInt<1>
    input io_in_0_bits_payload_addr_beat : UInt<3>
    input io_in_0_bits_payload_is_builtin_type : UInt<1>
    input io_in_0_bits_payload_a_type : UInt<3>
    input io_in_0_bits_payload_union : UInt<11>
    input io_in_0_bits_payload_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_addr_block : UInt<26>
    input io_in_1_bits_payload_client_xact_id : UInt<1>
    input io_in_1_bits_payload_addr_beat : UInt<3>
    input io_in_1_bits_payload_is_builtin_type : UInt<1>
    input io_in_1_bits_payload_a_type : UInt<3>
    input io_in_1_bits_payload_union : UInt<11>
    input io_in_1_bits_payload_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_addr_block : UInt<26>
    input io_in_2_bits_payload_client_xact_id : UInt<1>
    input io_in_2_bits_payload_addr_beat : UInt<3>
    input io_in_2_bits_payload_is_builtin_type : UInt<1>
    input io_in_2_bits_payload_a_type : UInt<3>
    input io_in_2_bits_payload_union : UInt<11>
    input io_in_2_bits_payload_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_addr_block : UInt<26>
    input io_in_3_bits_payload_client_xact_id : UInt<1>
    input io_in_3_bits_payload_addr_beat : UInt<3>
    input io_in_3_bits_payload_is_builtin_type : UInt<1>
    input io_in_3_bits_payload_a_type : UInt<3>
    input io_in_3_bits_payload_union : UInt<11>
    input io_in_3_bits_payload_data : UInt<64>
    input io_out_0_ready : UInt<1>
    output io_out_0_valid : UInt<1>
    output io_out_0_bits_header_src : UInt<2>
    output io_out_0_bits_header_dst : UInt<2>
    output io_out_0_bits_payload_addr_block : UInt<26>
    output io_out_0_bits_payload_client_xact_id : UInt<1>
    output io_out_0_bits_payload_addr_beat : UInt<3>
    output io_out_0_bits_payload_is_builtin_type : UInt<1>
    output io_out_0_bits_payload_a_type : UInt<3>
    output io_out_0_bits_payload_union : UInt<11>
    output io_out_0_bits_payload_data : UInt<64>
    input io_out_1_ready : UInt<1>
    output io_out_1_valid : UInt<1>
    output io_out_1_bits_header_src : UInt<2>
    output io_out_1_bits_header_dst : UInt<2>
    output io_out_1_bits_payload_addr_block : UInt<26>
    output io_out_1_bits_payload_client_xact_id : UInt<1>
    output io_out_1_bits_payload_addr_beat : UInt<3>
    output io_out_1_bits_payload_is_builtin_type : UInt<1>
    output io_out_1_bits_payload_a_type : UInt<3>
    output io_out_1_bits_payload_union : UInt<11>
    output io_out_1_bits_payload_data : UInt<64>
    input io_out_2_ready : UInt<1>
    output io_out_2_valid : UInt<1>
    output io_out_2_bits_header_src : UInt<2>
    output io_out_2_bits_header_dst : UInt<2>
    output io_out_2_bits_payload_addr_block : UInt<26>
    output io_out_2_bits_payload_client_xact_id : UInt<1>
    output io_out_2_bits_payload_addr_beat : UInt<3>
    output io_out_2_bits_payload_is_builtin_type : UInt<1>
    output io_out_2_bits_payload_a_type : UInt<3>
    output io_out_2_bits_payload_union : UInt<11>
    output io_out_2_bits_payload_data : UInt<64>
    input io_out_3_ready : UInt<1>
    output io_out_3_valid : UInt<1>
    output io_out_3_bits_header_src : UInt<2>
    output io_out_3_bits_header_dst : UInt<2>
    output io_out_3_bits_payload_addr_block : UInt<26>
    output io_out_3_bits_payload_client_xact_id : UInt<1>
    output io_out_3_bits_payload_addr_beat : UInt<3>
    output io_out_3_bits_payload_is_builtin_type : UInt<1>
    output io_out_3_bits_payload_a_type : UInt<3>
    output io_out_3_bits_payload_union : UInt<11>
    output io_out_3_bits_payload_data : UInt<64>
  
    inst arb of LockingRRArbiter
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_addr_block : UInt<26>
    wire GEN_0_bits_payload_client_xact_id : UInt<1>
    wire GEN_0_bits_payload_addr_beat : UInt<3>
    wire GEN_0_bits_payload_is_builtin_type : UInt<1>
    wire GEN_0_bits_payload_a_type : UInt<3>
    wire GEN_0_bits_payload_union : UInt<11>
    wire GEN_0_bits_payload_data : UInt<64>
    node GEN_1 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_ready, io_out_0_ready)
    node GEN_2 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_valid, io_out_0_valid)
    node GEN_3 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_src, io_out_0_bits_header_src)
    node GEN_4 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_dst, io_out_0_bits_header_dst)
    node GEN_5 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_addr_block, io_out_0_bits_payload_addr_block)
    node GEN_6 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_client_xact_id, io_out_0_bits_payload_client_xact_id)
    node GEN_7 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_addr_beat, io_out_0_bits_payload_addr_beat)
    node GEN_8 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_is_builtin_type, io_out_0_bits_payload_is_builtin_type)
    node GEN_9 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_a_type, io_out_0_bits_payload_a_type)
    node GEN_10 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_union, io_out_0_bits_payload_union)
    node GEN_11 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_data, io_out_0_bits_payload_data)
    node GEN_12 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_ready, GEN_1)
    node GEN_13 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_valid, GEN_2)
    node GEN_14 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_src, GEN_3)
    node GEN_15 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_dst, GEN_4)
    node GEN_16 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_addr_block, GEN_5)
    node GEN_17 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_client_xact_id, GEN_6)
    node GEN_18 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_addr_beat, GEN_7)
    node GEN_19 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_is_builtin_type, GEN_8)
    node GEN_20 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_a_type, GEN_9)
    node GEN_21 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_union, GEN_10)
    node GEN_22 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_data, GEN_11)
    node GEN_23 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_ready, GEN_12)
    node GEN_24 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_valid, GEN_13)
    node GEN_25 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_src, GEN_14)
    node GEN_26 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_dst, GEN_15)
    node GEN_27 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_addr_block, GEN_16)
    node GEN_28 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_client_xact_id, GEN_17)
    node GEN_29 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_addr_beat, GEN_18)
    node GEN_30 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_is_builtin_type, GEN_19)
    node GEN_31 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_a_type, GEN_20)
    node GEN_32 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_union, GEN_21)
    node GEN_33 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_data, GEN_22)
    node T_1529 = eq(arb.io_out_bits_header_dst, UInt<2>("h0"))
    node T_1530 = and(arb.io_out_valid, T_1529)
    node T_1532 = eq(arb.io_out_bits_header_dst, UInt<2>("h1"))
    node T_1533 = and(arb.io_out_valid, T_1532)
    node T_1535 = eq(arb.io_out_bits_header_dst, UInt<2>("h2"))
    node T_1536 = and(arb.io_out_valid, T_1535)
    node T_1538 = eq(arb.io_out_bits_header_dst, UInt<2>("h3"))
    node T_1539 = and(arb.io_out_valid, T_1538)
    io_in_0_ready <= arb.io_in_0_ready
    io_in_1_ready <= arb.io_in_1_ready
    io_in_2_ready <= arb.io_in_2_ready
    io_in_3_ready <= arb.io_in_3_ready
    io_out_0_valid <= T_1530
    io_out_0_bits_header_src <= arb.io_out_bits_header_src
    io_out_0_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_0_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_0_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_0_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_0_bits_payload_is_builtin_type <= arb.io_out_bits_payload_is_builtin_type
    io_out_0_bits_payload_a_type <= arb.io_out_bits_payload_a_type
    io_out_0_bits_payload_union <= arb.io_out_bits_payload_union
    io_out_0_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_1_valid <= T_1533
    io_out_1_bits_header_src <= arb.io_out_bits_header_src
    io_out_1_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_1_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_1_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_1_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_1_bits_payload_is_builtin_type <= arb.io_out_bits_payload_is_builtin_type
    io_out_1_bits_payload_a_type <= arb.io_out_bits_payload_a_type
    io_out_1_bits_payload_union <= arb.io_out_bits_payload_union
    io_out_1_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_2_valid <= T_1536
    io_out_2_bits_header_src <= arb.io_out_bits_header_src
    io_out_2_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_2_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_2_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_2_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_2_bits_payload_is_builtin_type <= arb.io_out_bits_payload_is_builtin_type
    io_out_2_bits_payload_a_type <= arb.io_out_bits_payload_a_type
    io_out_2_bits_payload_union <= arb.io_out_bits_payload_union
    io_out_2_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_3_valid <= T_1539
    io_out_3_bits_header_src <= arb.io_out_bits_header_src
    io_out_3_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_3_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_3_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_3_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_3_bits_payload_is_builtin_type <= arb.io_out_bits_payload_is_builtin_type
    io_out_3_bits_payload_a_type <= arb.io_out_bits_payload_a_type
    io_out_3_bits_payload_union <= arb.io_out_bits_payload_union
    io_out_3_bits_payload_data <= arb.io_out_bits_payload_data
    arb.io_in_0_valid <= io_in_0_valid
    arb.io_in_0_bits_header_src <= io_in_0_bits_header_src
    arb.io_in_0_bits_header_dst <= io_in_0_bits_header_dst
    arb.io_in_0_bits_payload_addr_block <= io_in_0_bits_payload_addr_block
    arb.io_in_0_bits_payload_client_xact_id <= io_in_0_bits_payload_client_xact_id
    arb.io_in_0_bits_payload_addr_beat <= io_in_0_bits_payload_addr_beat
    arb.io_in_0_bits_payload_is_builtin_type <= io_in_0_bits_payload_is_builtin_type
    arb.io_in_0_bits_payload_a_type <= io_in_0_bits_payload_a_type
    arb.io_in_0_bits_payload_union <= io_in_0_bits_payload_union
    arb.io_in_0_bits_payload_data <= io_in_0_bits_payload_data
    arb.io_in_1_valid <= io_in_1_valid
    arb.io_in_1_bits_header_src <= io_in_1_bits_header_src
    arb.io_in_1_bits_header_dst <= io_in_1_bits_header_dst
    arb.io_in_1_bits_payload_addr_block <= io_in_1_bits_payload_addr_block
    arb.io_in_1_bits_payload_client_xact_id <= io_in_1_bits_payload_client_xact_id
    arb.io_in_1_bits_payload_addr_beat <= io_in_1_bits_payload_addr_beat
    arb.io_in_1_bits_payload_is_builtin_type <= io_in_1_bits_payload_is_builtin_type
    arb.io_in_1_bits_payload_a_type <= io_in_1_bits_payload_a_type
    arb.io_in_1_bits_payload_union <= io_in_1_bits_payload_union
    arb.io_in_1_bits_payload_data <= io_in_1_bits_payload_data
    arb.io_in_2_valid <= io_in_2_valid
    arb.io_in_2_bits_header_src <= io_in_2_bits_header_src
    arb.io_in_2_bits_header_dst <= io_in_2_bits_header_dst
    arb.io_in_2_bits_payload_addr_block <= io_in_2_bits_payload_addr_block
    arb.io_in_2_bits_payload_client_xact_id <= io_in_2_bits_payload_client_xact_id
    arb.io_in_2_bits_payload_addr_beat <= io_in_2_bits_payload_addr_beat
    arb.io_in_2_bits_payload_is_builtin_type <= io_in_2_bits_payload_is_builtin_type
    arb.io_in_2_bits_payload_a_type <= io_in_2_bits_payload_a_type
    arb.io_in_2_bits_payload_union <= io_in_2_bits_payload_union
    arb.io_in_2_bits_payload_data <= io_in_2_bits_payload_data
    arb.io_in_3_valid <= io_in_3_valid
    arb.io_in_3_bits_header_src <= io_in_3_bits_header_src
    arb.io_in_3_bits_header_dst <= io_in_3_bits_header_dst
    arb.io_in_3_bits_payload_addr_block <= io_in_3_bits_payload_addr_block
    arb.io_in_3_bits_payload_client_xact_id <= io_in_3_bits_payload_client_xact_id
    arb.io_in_3_bits_payload_addr_beat <= io_in_3_bits_payload_addr_beat
    arb.io_in_3_bits_payload_is_builtin_type <= io_in_3_bits_payload_is_builtin_type
    arb.io_in_3_bits_payload_a_type <= io_in_3_bits_payload_a_type
    arb.io_in_3_bits_payload_union <= io_in_3_bits_payload_union
    arb.io_in_3_bits_payload_data <= io_in_3_bits_payload_data
    arb.io_out_ready <= GEN_0_ready
    GEN_0_ready <= GEN_23
    GEN_0_valid <= GEN_24
    GEN_0_bits_header_src <= GEN_25
    GEN_0_bits_header_dst <= GEN_26
    GEN_0_bits_payload_addr_block <= GEN_27
    GEN_0_bits_payload_client_xact_id <= GEN_28
    GEN_0_bits_payload_addr_beat <= GEN_29
    GEN_0_bits_payload_is_builtin_type <= GEN_30
    GEN_0_bits_payload_a_type <= GEN_31
    GEN_0_bits_payload_union <= GEN_32
    GEN_0_bits_payload_data <= GEN_33

  module LockingRRArbiter_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_addr_beat : UInt<3>
    input io_in_0_bits_payload_addr_block : UInt<26>
    input io_in_0_bits_payload_client_xact_id : UInt<1>
    input io_in_0_bits_payload_voluntary : UInt<1>
    input io_in_0_bits_payload_r_type : UInt<3>
    input io_in_0_bits_payload_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_addr_beat : UInt<3>
    input io_in_1_bits_payload_addr_block : UInt<26>
    input io_in_1_bits_payload_client_xact_id : UInt<1>
    input io_in_1_bits_payload_voluntary : UInt<1>
    input io_in_1_bits_payload_r_type : UInt<3>
    input io_in_1_bits_payload_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_addr_beat : UInt<3>
    input io_in_2_bits_payload_addr_block : UInt<26>
    input io_in_2_bits_payload_client_xact_id : UInt<1>
    input io_in_2_bits_payload_voluntary : UInt<1>
    input io_in_2_bits_payload_r_type : UInt<3>
    input io_in_2_bits_payload_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_addr_beat : UInt<3>
    input io_in_3_bits_payload_addr_block : UInt<26>
    input io_in_3_bits_payload_client_xact_id : UInt<1>
    input io_in_3_bits_payload_voluntary : UInt<1>
    input io_in_3_bits_payload_r_type : UInt<3>
    input io_in_3_bits_payload_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_header_src : UInt<2>
    output io_out_bits_header_dst : UInt<2>
    output io_out_bits_payload_addr_beat : UInt<3>
    output io_out_bits_payload_addr_block : UInt<26>
    output io_out_bits_payload_client_xact_id : UInt<1>
    output io_out_bits_payload_voluntary : UInt<1>
    output io_out_bits_payload_r_type : UInt<3>
    output io_out_bits_payload_data : UInt<64>
    output io_chosen : UInt<2>
  
    wire choice : UInt<2>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_addr_beat : UInt<3>
    wire GEN_0_bits_payload_addr_block : UInt<26>
    wire GEN_0_bits_payload_client_xact_id : UInt<1>
    wire GEN_0_bits_payload_voluntary : UInt<1>
    wire GEN_0_bits_payload_r_type : UInt<3>
    wire GEN_0_bits_payload_data : UInt<64>
    node GEN_9 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_10 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_11 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_src, io_in_0_bits_header_src)
    node GEN_12 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_dst, io_in_0_bits_header_dst)
    node GEN_13 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_addr_beat, io_in_0_bits_payload_addr_beat)
    node GEN_14 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_addr_block, io_in_0_bits_payload_addr_block)
    node GEN_15 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_client_xact_id, io_in_0_bits_payload_client_xact_id)
    node GEN_16 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_voluntary, io_in_0_bits_payload_voluntary)
    node GEN_17 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_r_type, io_in_0_bits_payload_r_type)
    node GEN_18 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_data, io_in_0_bits_payload_data)
    node GEN_19 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_ready, GEN_9)
    node GEN_20 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_valid, GEN_10)
    node GEN_21 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_src, GEN_11)
    node GEN_22 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_dst, GEN_12)
    node GEN_23 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_addr_beat, GEN_13)
    node GEN_24 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_addr_block, GEN_14)
    node GEN_25 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_client_xact_id, GEN_15)
    node GEN_26 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_voluntary, GEN_16)
    node GEN_27 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_r_type, GEN_17)
    node GEN_28 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_data, GEN_18)
    node GEN_29 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_ready, GEN_19)
    node GEN_30 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_valid, GEN_20)
    node GEN_31 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_src, GEN_21)
    node GEN_32 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_dst, GEN_22)
    node GEN_33 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_addr_beat, GEN_23)
    node GEN_34 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_addr_block, GEN_24)
    node GEN_35 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_client_xact_id, GEN_25)
    node GEN_36 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_voluntary, GEN_26)
    node GEN_37 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_r_type, GEN_27)
    node GEN_38 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_data, GEN_28)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_header_src : UInt<2>
    wire GEN_1_bits_header_dst : UInt<2>
    wire GEN_1_bits_payload_addr_beat : UInt<3>
    wire GEN_1_bits_payload_addr_block : UInt<26>
    wire GEN_1_bits_payload_client_xact_id : UInt<1>
    wire GEN_1_bits_payload_voluntary : UInt<1>
    wire GEN_1_bits_payload_r_type : UInt<3>
    wire GEN_1_bits_payload_data : UInt<64>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_header_src : UInt<2>
    wire GEN_2_bits_header_dst : UInt<2>
    wire GEN_2_bits_payload_addr_beat : UInt<3>
    wire GEN_2_bits_payload_addr_block : UInt<26>
    wire GEN_2_bits_payload_client_xact_id : UInt<1>
    wire GEN_2_bits_payload_voluntary : UInt<1>
    wire GEN_2_bits_payload_r_type : UInt<3>
    wire GEN_2_bits_payload_data : UInt<64>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_header_src : UInt<2>
    wire GEN_3_bits_header_dst : UInt<2>
    wire GEN_3_bits_payload_addr_beat : UInt<3>
    wire GEN_3_bits_payload_addr_block : UInt<26>
    wire GEN_3_bits_payload_client_xact_id : UInt<1>
    wire GEN_3_bits_payload_voluntary : UInt<1>
    wire GEN_3_bits_payload_r_type : UInt<3>
    wire GEN_3_bits_payload_data : UInt<64>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_header_src : UInt<2>
    wire GEN_4_bits_header_dst : UInt<2>
    wire GEN_4_bits_payload_addr_beat : UInt<3>
    wire GEN_4_bits_payload_addr_block : UInt<26>
    wire GEN_4_bits_payload_client_xact_id : UInt<1>
    wire GEN_4_bits_payload_voluntary : UInt<1>
    wire GEN_4_bits_payload_r_type : UInt<3>
    wire GEN_4_bits_payload_data : UInt<64>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_header_src : UInt<2>
    wire GEN_5_bits_header_dst : UInt<2>
    wire GEN_5_bits_payload_addr_beat : UInt<3>
    wire GEN_5_bits_payload_addr_block : UInt<26>
    wire GEN_5_bits_payload_client_xact_id : UInt<1>
    wire GEN_5_bits_payload_voluntary : UInt<1>
    wire GEN_5_bits_payload_r_type : UInt<3>
    wire GEN_5_bits_payload_data : UInt<64>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_header_src : UInt<2>
    wire GEN_6_bits_header_dst : UInt<2>
    wire GEN_6_bits_payload_addr_beat : UInt<3>
    wire GEN_6_bits_payload_addr_block : UInt<26>
    wire GEN_6_bits_payload_client_xact_id : UInt<1>
    wire GEN_6_bits_payload_voluntary : UInt<1>
    wire GEN_6_bits_payload_r_type : UInt<3>
    wire GEN_6_bits_payload_data : UInt<64>
    wire GEN_7_ready : UInt<1>
    wire GEN_7_valid : UInt<1>
    wire GEN_7_bits_header_src : UInt<2>
    wire GEN_7_bits_header_dst : UInt<2>
    wire GEN_7_bits_payload_addr_beat : UInt<3>
    wire GEN_7_bits_payload_addr_block : UInt<26>
    wire GEN_7_bits_payload_client_xact_id : UInt<1>
    wire GEN_7_bits_payload_voluntary : UInt<1>
    wire GEN_7_bits_payload_r_type : UInt<3>
    wire GEN_7_bits_payload_data : UInt<64>
    wire GEN_8_ready : UInt<1>
    wire GEN_8_valid : UInt<1>
    wire GEN_8_bits_header_src : UInt<2>
    wire GEN_8_bits_header_dst : UInt<2>
    wire GEN_8_bits_payload_addr_beat : UInt<3>
    wire GEN_8_bits_payload_addr_block : UInt<26>
    wire GEN_8_bits_payload_client_xact_id : UInt<1>
    wire GEN_8_bits_payload_voluntary : UInt<1>
    wire GEN_8_bits_payload_r_type : UInt<3>
    wire GEN_8_bits_payload_data : UInt<64>
    reg T_1100 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_1102 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_1102)
    node T_1104 = neq(T_1100, UInt<3>("h0"))
    node T_1106 = eq(io_out_bits_payload_r_type, UInt<3>("h0"))
    node T_1107 = eq(io_out_bits_payload_r_type, UInt<3>("h1"))
    node T_1108 = eq(io_out_bits_payload_r_type, UInt<3>("h2"))
    node T_1109 = or(T_1106, T_1107)
    node T_1110 = or(T_1109, T_1108)
    node T_1112 = and(io_out_ready, io_out_valid)
    node T_1113 = and(T_1112, T_1110)
    node T_1117 = add(T_1100, UInt<3>("h1"))
    node T_1118 = tail(T_1117, 1)
    node GEN_39 = mux(T_1113, io_chosen, T_1102)
    node GEN_40 = mux(T_1113, T_1118, T_1100)
    node GEN_41 = mux(T_1104, T_1102, choice)
    reg lastGrant : UInt<2>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_42 = mux(T_1112, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<2>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node T_1126 = or(validMask_1, validMask_2)
    node T_1127 = or(T_1126, validMask_3)
    node T_1128 = or(T_1127, io_in_0_valid)
    node T_1129 = or(T_1128, io_in_1_valid)
    node T_1130 = or(T_1129, io_in_2_valid)
    node T_1134 = eq(validMask_1, UInt<1>("h0"))
    node T_1136 = eq(T_1126, UInt<1>("h0"))
    node T_1138 = eq(T_1127, UInt<1>("h0"))
    node T_1140 = eq(T_1128, UInt<1>("h0"))
    node T_1142 = eq(T_1129, UInt<1>("h0"))
    node T_1144 = eq(T_1130, UInt<1>("h0"))
    node T_1148 = or(grantMask_1, T_1140)
    node T_1149 = and(T_1134, grantMask_2)
    node T_1150 = or(T_1149, T_1142)
    node T_1151 = and(T_1136, grantMask_3)
    node T_1152 = or(T_1151, T_1144)
    node T_1154 = eq(T_1102, UInt<2>("h0"))
    node T_1155 = mux(T_1104, T_1154, T_1138)
    node T_1156 = and(T_1155, io_out_ready)
    node T_1158 = eq(T_1102, UInt<2>("h1"))
    node T_1159 = mux(T_1104, T_1158, T_1148)
    node T_1160 = and(T_1159, io_out_ready)
    node T_1162 = eq(T_1102, UInt<2>("h2"))
    node T_1163 = mux(T_1104, T_1162, T_1150)
    node T_1164 = and(T_1163, io_out_ready)
    node T_1166 = eq(T_1102, UInt<2>("h3"))
    node T_1167 = mux(T_1104, T_1166, T_1152)
    node T_1168 = and(T_1167, io_out_ready)
    node GEN_43 = mux(io_in_2_valid, UInt<2>("h2"), UInt<2>("h3"))
    node GEN_44 = mux(io_in_1_valid, UInt<2>("h1"), GEN_43)
    node GEN_45 = mux(io_in_0_valid, UInt<2>("h0"), GEN_44)
    node GEN_46 = mux(validMask_3, UInt<2>("h3"), GEN_45)
    node GEN_47 = mux(validMask_2, UInt<2>("h2"), GEN_46)
    node GEN_48 = mux(validMask_1, UInt<2>("h1"), GEN_47)
    io_in_0_ready <= T_1156
    io_in_1_ready <= T_1160
    io_in_2_ready <= T_1164
    io_in_3_ready <= T_1168
    io_out_valid <= GEN_0_valid
    io_out_bits_header_src <= GEN_1_bits_header_src
    io_out_bits_header_dst <= GEN_2_bits_header_dst
    io_out_bits_payload_addr_beat <= GEN_3_bits_payload_addr_beat
    io_out_bits_payload_addr_block <= GEN_4_bits_payload_addr_block
    io_out_bits_payload_client_xact_id <= GEN_5_bits_payload_client_xact_id
    io_out_bits_payload_voluntary <= GEN_6_bits_payload_voluntary
    io_out_bits_payload_r_type <= GEN_7_bits_payload_r_type
    io_out_bits_payload_data <= GEN_8_bits_payload_data
    io_chosen <= GEN_41
    choice <= GEN_48
    GEN_0_ready <= GEN_29
    GEN_0_valid <= GEN_30
    GEN_0_bits_header_src <= GEN_31
    GEN_0_bits_header_dst <= GEN_32
    GEN_0_bits_payload_addr_beat <= GEN_33
    GEN_0_bits_payload_addr_block <= GEN_34
    GEN_0_bits_payload_client_xact_id <= GEN_35
    GEN_0_bits_payload_voluntary <= GEN_36
    GEN_0_bits_payload_r_type <= GEN_37
    GEN_0_bits_payload_data <= GEN_38
    GEN_1_ready <= GEN_29
    GEN_1_valid <= GEN_30
    GEN_1_bits_header_src <= GEN_31
    GEN_1_bits_header_dst <= GEN_32
    GEN_1_bits_payload_addr_beat <= GEN_33
    GEN_1_bits_payload_addr_block <= GEN_34
    GEN_1_bits_payload_client_xact_id <= GEN_35
    GEN_1_bits_payload_voluntary <= GEN_36
    GEN_1_bits_payload_r_type <= GEN_37
    GEN_1_bits_payload_data <= GEN_38
    GEN_2_ready <= GEN_29
    GEN_2_valid <= GEN_30
    GEN_2_bits_header_src <= GEN_31
    GEN_2_bits_header_dst <= GEN_32
    GEN_2_bits_payload_addr_beat <= GEN_33
    GEN_2_bits_payload_addr_block <= GEN_34
    GEN_2_bits_payload_client_xact_id <= GEN_35
    GEN_2_bits_payload_voluntary <= GEN_36
    GEN_2_bits_payload_r_type <= GEN_37
    GEN_2_bits_payload_data <= GEN_38
    GEN_3_ready <= GEN_29
    GEN_3_valid <= GEN_30
    GEN_3_bits_header_src <= GEN_31
    GEN_3_bits_header_dst <= GEN_32
    GEN_3_bits_payload_addr_beat <= GEN_33
    GEN_3_bits_payload_addr_block <= GEN_34
    GEN_3_bits_payload_client_xact_id <= GEN_35
    GEN_3_bits_payload_voluntary <= GEN_36
    GEN_3_bits_payload_r_type <= GEN_37
    GEN_3_bits_payload_data <= GEN_38
    GEN_4_ready <= GEN_29
    GEN_4_valid <= GEN_30
    GEN_4_bits_header_src <= GEN_31
    GEN_4_bits_header_dst <= GEN_32
    GEN_4_bits_payload_addr_beat <= GEN_33
    GEN_4_bits_payload_addr_block <= GEN_34
    GEN_4_bits_payload_client_xact_id <= GEN_35
    GEN_4_bits_payload_voluntary <= GEN_36
    GEN_4_bits_payload_r_type <= GEN_37
    GEN_4_bits_payload_data <= GEN_38
    GEN_5_ready <= GEN_29
    GEN_5_valid <= GEN_30
    GEN_5_bits_header_src <= GEN_31
    GEN_5_bits_header_dst <= GEN_32
    GEN_5_bits_payload_addr_beat <= GEN_33
    GEN_5_bits_payload_addr_block <= GEN_34
    GEN_5_bits_payload_client_xact_id <= GEN_35
    GEN_5_bits_payload_voluntary <= GEN_36
    GEN_5_bits_payload_r_type <= GEN_37
    GEN_5_bits_payload_data <= GEN_38
    GEN_6_ready <= GEN_29
    GEN_6_valid <= GEN_30
    GEN_6_bits_header_src <= GEN_31
    GEN_6_bits_header_dst <= GEN_32
    GEN_6_bits_payload_addr_beat <= GEN_33
    GEN_6_bits_payload_addr_block <= GEN_34
    GEN_6_bits_payload_client_xact_id <= GEN_35
    GEN_6_bits_payload_voluntary <= GEN_36
    GEN_6_bits_payload_r_type <= GEN_37
    GEN_6_bits_payload_data <= GEN_38
    GEN_7_ready <= GEN_29
    GEN_7_valid <= GEN_30
    GEN_7_bits_header_src <= GEN_31
    GEN_7_bits_header_dst <= GEN_32
    GEN_7_bits_payload_addr_beat <= GEN_33
    GEN_7_bits_payload_addr_block <= GEN_34
    GEN_7_bits_payload_client_xact_id <= GEN_35
    GEN_7_bits_payload_voluntary <= GEN_36
    GEN_7_bits_payload_r_type <= GEN_37
    GEN_7_bits_payload_data <= GEN_38
    GEN_8_ready <= GEN_29
    GEN_8_valid <= GEN_30
    GEN_8_bits_header_src <= GEN_31
    GEN_8_bits_header_dst <= GEN_32
    GEN_8_bits_payload_addr_beat <= GEN_33
    GEN_8_bits_payload_addr_block <= GEN_34
    GEN_8_bits_payload_client_xact_id <= GEN_35
    GEN_8_bits_payload_voluntary <= GEN_36
    GEN_8_bits_payload_r_type <= GEN_37
    GEN_8_bits_payload_data <= GEN_38
    T_1100 <= GEN_40
    T_1102 <= GEN_39
    lastGrant <= GEN_42

  module BasicBus_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_addr_beat : UInt<3>
    input io_in_0_bits_payload_addr_block : UInt<26>
    input io_in_0_bits_payload_client_xact_id : UInt<1>
    input io_in_0_bits_payload_voluntary : UInt<1>
    input io_in_0_bits_payload_r_type : UInt<3>
    input io_in_0_bits_payload_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_addr_beat : UInt<3>
    input io_in_1_bits_payload_addr_block : UInt<26>
    input io_in_1_bits_payload_client_xact_id : UInt<1>
    input io_in_1_bits_payload_voluntary : UInt<1>
    input io_in_1_bits_payload_r_type : UInt<3>
    input io_in_1_bits_payload_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_addr_beat : UInt<3>
    input io_in_2_bits_payload_addr_block : UInt<26>
    input io_in_2_bits_payload_client_xact_id : UInt<1>
    input io_in_2_bits_payload_voluntary : UInt<1>
    input io_in_2_bits_payload_r_type : UInt<3>
    input io_in_2_bits_payload_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_addr_beat : UInt<3>
    input io_in_3_bits_payload_addr_block : UInt<26>
    input io_in_3_bits_payload_client_xact_id : UInt<1>
    input io_in_3_bits_payload_voluntary : UInt<1>
    input io_in_3_bits_payload_r_type : UInt<3>
    input io_in_3_bits_payload_data : UInt<64>
    input io_out_0_ready : UInt<1>
    output io_out_0_valid : UInt<1>
    output io_out_0_bits_header_src : UInt<2>
    output io_out_0_bits_header_dst : UInt<2>
    output io_out_0_bits_payload_addr_beat : UInt<3>
    output io_out_0_bits_payload_addr_block : UInt<26>
    output io_out_0_bits_payload_client_xact_id : UInt<1>
    output io_out_0_bits_payload_voluntary : UInt<1>
    output io_out_0_bits_payload_r_type : UInt<3>
    output io_out_0_bits_payload_data : UInt<64>
    input io_out_1_ready : UInt<1>
    output io_out_1_valid : UInt<1>
    output io_out_1_bits_header_src : UInt<2>
    output io_out_1_bits_header_dst : UInt<2>
    output io_out_1_bits_payload_addr_beat : UInt<3>
    output io_out_1_bits_payload_addr_block : UInt<26>
    output io_out_1_bits_payload_client_xact_id : UInt<1>
    output io_out_1_bits_payload_voluntary : UInt<1>
    output io_out_1_bits_payload_r_type : UInt<3>
    output io_out_1_bits_payload_data : UInt<64>
    input io_out_2_ready : UInt<1>
    output io_out_2_valid : UInt<1>
    output io_out_2_bits_header_src : UInt<2>
    output io_out_2_bits_header_dst : UInt<2>
    output io_out_2_bits_payload_addr_beat : UInt<3>
    output io_out_2_bits_payload_addr_block : UInt<26>
    output io_out_2_bits_payload_client_xact_id : UInt<1>
    output io_out_2_bits_payload_voluntary : UInt<1>
    output io_out_2_bits_payload_r_type : UInt<3>
    output io_out_2_bits_payload_data : UInt<64>
    input io_out_3_ready : UInt<1>
    output io_out_3_valid : UInt<1>
    output io_out_3_bits_header_src : UInt<2>
    output io_out_3_bits_header_dst : UInt<2>
    output io_out_3_bits_payload_addr_beat : UInt<3>
    output io_out_3_bits_payload_addr_block : UInt<26>
    output io_out_3_bits_payload_client_xact_id : UInt<1>
    output io_out_3_bits_payload_voluntary : UInt<1>
    output io_out_3_bits_payload_r_type : UInt<3>
    output io_out_3_bits_payload_data : UInt<64>
  
    inst arb of LockingRRArbiter_1
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_addr_beat : UInt<3>
    wire GEN_0_bits_payload_addr_block : UInt<26>
    wire GEN_0_bits_payload_client_xact_id : UInt<1>
    wire GEN_0_bits_payload_voluntary : UInt<1>
    wire GEN_0_bits_payload_r_type : UInt<3>
    wire GEN_0_bits_payload_data : UInt<64>
    node GEN_1 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_ready, io_out_0_ready)
    node GEN_2 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_valid, io_out_0_valid)
    node GEN_3 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_src, io_out_0_bits_header_src)
    node GEN_4 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_dst, io_out_0_bits_header_dst)
    node GEN_5 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_addr_beat, io_out_0_bits_payload_addr_beat)
    node GEN_6 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_addr_block, io_out_0_bits_payload_addr_block)
    node GEN_7 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_client_xact_id, io_out_0_bits_payload_client_xact_id)
    node GEN_8 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_voluntary, io_out_0_bits_payload_voluntary)
    node GEN_9 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_r_type, io_out_0_bits_payload_r_type)
    node GEN_10 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_data, io_out_0_bits_payload_data)
    node GEN_11 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_ready, GEN_1)
    node GEN_12 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_valid, GEN_2)
    node GEN_13 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_src, GEN_3)
    node GEN_14 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_dst, GEN_4)
    node GEN_15 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_addr_beat, GEN_5)
    node GEN_16 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_addr_block, GEN_6)
    node GEN_17 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_client_xact_id, GEN_7)
    node GEN_18 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_voluntary, GEN_8)
    node GEN_19 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_r_type, GEN_9)
    node GEN_20 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_data, GEN_10)
    node GEN_21 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_ready, GEN_11)
    node GEN_22 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_valid, GEN_12)
    node GEN_23 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_src, GEN_13)
    node GEN_24 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_dst, GEN_14)
    node GEN_25 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_addr_beat, GEN_15)
    node GEN_26 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_addr_block, GEN_16)
    node GEN_27 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_client_xact_id, GEN_17)
    node GEN_28 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_voluntary, GEN_18)
    node GEN_29 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_r_type, GEN_19)
    node GEN_30 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_data, GEN_20)
    node T_1483 = eq(arb.io_out_bits_header_dst, UInt<2>("h0"))
    node T_1484 = and(arb.io_out_valid, T_1483)
    node T_1486 = eq(arb.io_out_bits_header_dst, UInt<2>("h1"))
    node T_1487 = and(arb.io_out_valid, T_1486)
    node T_1489 = eq(arb.io_out_bits_header_dst, UInt<2>("h2"))
    node T_1490 = and(arb.io_out_valid, T_1489)
    node T_1492 = eq(arb.io_out_bits_header_dst, UInt<2>("h3"))
    node T_1493 = and(arb.io_out_valid, T_1492)
    io_in_0_ready <= arb.io_in_0_ready
    io_in_1_ready <= arb.io_in_1_ready
    io_in_2_ready <= arb.io_in_2_ready
    io_in_3_ready <= arb.io_in_3_ready
    io_out_0_valid <= T_1484
    io_out_0_bits_header_src <= arb.io_out_bits_header_src
    io_out_0_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_0_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_0_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_0_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_0_bits_payload_voluntary <= arb.io_out_bits_payload_voluntary
    io_out_0_bits_payload_r_type <= arb.io_out_bits_payload_r_type
    io_out_0_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_1_valid <= T_1487
    io_out_1_bits_header_src <= arb.io_out_bits_header_src
    io_out_1_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_1_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_1_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_1_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_1_bits_payload_voluntary <= arb.io_out_bits_payload_voluntary
    io_out_1_bits_payload_r_type <= arb.io_out_bits_payload_r_type
    io_out_1_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_2_valid <= T_1490
    io_out_2_bits_header_src <= arb.io_out_bits_header_src
    io_out_2_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_2_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_2_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_2_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_2_bits_payload_voluntary <= arb.io_out_bits_payload_voluntary
    io_out_2_bits_payload_r_type <= arb.io_out_bits_payload_r_type
    io_out_2_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_3_valid <= T_1493
    io_out_3_bits_header_src <= arb.io_out_bits_header_src
    io_out_3_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_3_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_3_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_3_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_3_bits_payload_voluntary <= arb.io_out_bits_payload_voluntary
    io_out_3_bits_payload_r_type <= arb.io_out_bits_payload_r_type
    io_out_3_bits_payload_data <= arb.io_out_bits_payload_data
    arb.io_in_0_valid <= io_in_0_valid
    arb.io_in_0_bits_header_src <= io_in_0_bits_header_src
    arb.io_in_0_bits_header_dst <= io_in_0_bits_header_dst
    arb.io_in_0_bits_payload_addr_beat <= io_in_0_bits_payload_addr_beat
    arb.io_in_0_bits_payload_addr_block <= io_in_0_bits_payload_addr_block
    arb.io_in_0_bits_payload_client_xact_id <= io_in_0_bits_payload_client_xact_id
    arb.io_in_0_bits_payload_voluntary <= io_in_0_bits_payload_voluntary
    arb.io_in_0_bits_payload_r_type <= io_in_0_bits_payload_r_type
    arb.io_in_0_bits_payload_data <= io_in_0_bits_payload_data
    arb.io_in_1_valid <= io_in_1_valid
    arb.io_in_1_bits_header_src <= io_in_1_bits_header_src
    arb.io_in_1_bits_header_dst <= io_in_1_bits_header_dst
    arb.io_in_1_bits_payload_addr_beat <= io_in_1_bits_payload_addr_beat
    arb.io_in_1_bits_payload_addr_block <= io_in_1_bits_payload_addr_block
    arb.io_in_1_bits_payload_client_xact_id <= io_in_1_bits_payload_client_xact_id
    arb.io_in_1_bits_payload_voluntary <= io_in_1_bits_payload_voluntary
    arb.io_in_1_bits_payload_r_type <= io_in_1_bits_payload_r_type
    arb.io_in_1_bits_payload_data <= io_in_1_bits_payload_data
    arb.io_in_2_valid <= io_in_2_valid
    arb.io_in_2_bits_header_src <= io_in_2_bits_header_src
    arb.io_in_2_bits_header_dst <= io_in_2_bits_header_dst
    arb.io_in_2_bits_payload_addr_beat <= io_in_2_bits_payload_addr_beat
    arb.io_in_2_bits_payload_addr_block <= io_in_2_bits_payload_addr_block
    arb.io_in_2_bits_payload_client_xact_id <= io_in_2_bits_payload_client_xact_id
    arb.io_in_2_bits_payload_voluntary <= io_in_2_bits_payload_voluntary
    arb.io_in_2_bits_payload_r_type <= io_in_2_bits_payload_r_type
    arb.io_in_2_bits_payload_data <= io_in_2_bits_payload_data
    arb.io_in_3_valid <= io_in_3_valid
    arb.io_in_3_bits_header_src <= io_in_3_bits_header_src
    arb.io_in_3_bits_header_dst <= io_in_3_bits_header_dst
    arb.io_in_3_bits_payload_addr_beat <= io_in_3_bits_payload_addr_beat
    arb.io_in_3_bits_payload_addr_block <= io_in_3_bits_payload_addr_block
    arb.io_in_3_bits_payload_client_xact_id <= io_in_3_bits_payload_client_xact_id
    arb.io_in_3_bits_payload_voluntary <= io_in_3_bits_payload_voluntary
    arb.io_in_3_bits_payload_r_type <= io_in_3_bits_payload_r_type
    arb.io_in_3_bits_payload_data <= io_in_3_bits_payload_data
    arb.io_out_ready <= GEN_0_ready
    GEN_0_ready <= GEN_21
    GEN_0_valid <= GEN_22
    GEN_0_bits_header_src <= GEN_23
    GEN_0_bits_header_dst <= GEN_24
    GEN_0_bits_payload_addr_beat <= GEN_25
    GEN_0_bits_payload_addr_block <= GEN_26
    GEN_0_bits_payload_client_xact_id <= GEN_27
    GEN_0_bits_payload_voluntary <= GEN_28
    GEN_0_bits_payload_r_type <= GEN_29
    GEN_0_bits_payload_data <= GEN_30

  module LockingRRArbiter_2 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_addr_block : UInt<26>
    input io_in_0_bits_payload_p_type : UInt<2>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_addr_block : UInt<26>
    input io_in_1_bits_payload_p_type : UInt<2>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_addr_block : UInt<26>
    input io_in_2_bits_payload_p_type : UInt<2>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_addr_block : UInt<26>
    input io_in_3_bits_payload_p_type : UInt<2>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_header_src : UInt<2>
    output io_out_bits_header_dst : UInt<2>
    output io_out_bits_payload_addr_block : UInt<26>
    output io_out_bits_payload_p_type : UInt<2>
    output io_chosen : UInt<2>
  
    wire choice : UInt<2>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_addr_block : UInt<26>
    wire GEN_0_bits_payload_p_type : UInt<2>
    node GEN_5 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_6 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_7 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_src, io_in_0_bits_header_src)
    node GEN_8 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_dst, io_in_0_bits_header_dst)
    node GEN_9 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_addr_block, io_in_0_bits_payload_addr_block)
    node GEN_10 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_p_type, io_in_0_bits_payload_p_type)
    node GEN_11 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_ready, GEN_5)
    node GEN_12 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_valid, GEN_6)
    node GEN_13 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_src, GEN_7)
    node GEN_14 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_dst, GEN_8)
    node GEN_15 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_addr_block, GEN_9)
    node GEN_16 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_p_type, GEN_10)
    node GEN_17 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_ready, GEN_11)
    node GEN_18 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_valid, GEN_12)
    node GEN_19 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_src, GEN_13)
    node GEN_20 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_dst, GEN_14)
    node GEN_21 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_addr_block, GEN_15)
    node GEN_22 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_p_type, GEN_16)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_header_src : UInt<2>
    wire GEN_1_bits_header_dst : UInt<2>
    wire GEN_1_bits_payload_addr_block : UInt<26>
    wire GEN_1_bits_payload_p_type : UInt<2>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_header_src : UInt<2>
    wire GEN_2_bits_header_dst : UInt<2>
    wire GEN_2_bits_payload_addr_block : UInt<26>
    wire GEN_2_bits_payload_p_type : UInt<2>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_header_src : UInt<2>
    wire GEN_3_bits_header_dst : UInt<2>
    wire GEN_3_bits_payload_addr_block : UInt<26>
    wire GEN_3_bits_payload_p_type : UInt<2>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_header_src : UInt<2>
    wire GEN_4_bits_header_dst : UInt<2>
    wire GEN_4_bits_payload_addr_block : UInt<26>
    wire GEN_4_bits_payload_p_type : UInt<2>
    node T_964 = and(io_out_ready, io_out_valid)
    reg lastGrant : UInt<2>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_23 = mux(T_964, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<2>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node T_970 = or(validMask_1, validMask_2)
    node T_971 = or(T_970, validMask_3)
    node T_972 = or(T_971, io_in_0_valid)
    node T_973 = or(T_972, io_in_1_valid)
    node T_974 = or(T_973, io_in_2_valid)
    node T_978 = eq(validMask_1, UInt<1>("h0"))
    node T_980 = eq(T_970, UInt<1>("h0"))
    node T_982 = eq(T_971, UInt<1>("h0"))
    node T_984 = eq(T_972, UInt<1>("h0"))
    node T_986 = eq(T_973, UInt<1>("h0"))
    node T_988 = eq(T_974, UInt<1>("h0"))
    node T_992 = or(grantMask_1, T_984)
    node T_993 = and(T_978, grantMask_2)
    node T_994 = or(T_993, T_986)
    node T_995 = and(T_980, grantMask_3)
    node T_996 = or(T_995, T_988)
    node T_997 = and(T_982, io_out_ready)
    node T_998 = and(T_992, io_out_ready)
    node T_999 = and(T_994, io_out_ready)
    node T_1000 = and(T_996, io_out_ready)
    node GEN_24 = mux(io_in_2_valid, UInt<2>("h2"), UInt<2>("h3"))
    node GEN_25 = mux(io_in_1_valid, UInt<2>("h1"), GEN_24)
    node GEN_26 = mux(io_in_0_valid, UInt<2>("h0"), GEN_25)
    node GEN_27 = mux(validMask_3, UInt<2>("h3"), GEN_26)
    node GEN_28 = mux(validMask_2, UInt<2>("h2"), GEN_27)
    node GEN_29 = mux(validMask_1, UInt<2>("h1"), GEN_28)
    io_in_0_ready <= T_997
    io_in_1_ready <= T_998
    io_in_2_ready <= T_999
    io_in_3_ready <= T_1000
    io_out_valid <= GEN_0_valid
    io_out_bits_header_src <= GEN_1_bits_header_src
    io_out_bits_header_dst <= GEN_2_bits_header_dst
    io_out_bits_payload_addr_block <= GEN_3_bits_payload_addr_block
    io_out_bits_payload_p_type <= GEN_4_bits_payload_p_type
    io_chosen <= choice
    choice <= GEN_29
    GEN_0_ready <= GEN_17
    GEN_0_valid <= GEN_18
    GEN_0_bits_header_src <= GEN_19
    GEN_0_bits_header_dst <= GEN_20
    GEN_0_bits_payload_addr_block <= GEN_21
    GEN_0_bits_payload_p_type <= GEN_22
    GEN_1_ready <= GEN_17
    GEN_1_valid <= GEN_18
    GEN_1_bits_header_src <= GEN_19
    GEN_1_bits_header_dst <= GEN_20
    GEN_1_bits_payload_addr_block <= GEN_21
    GEN_1_bits_payload_p_type <= GEN_22
    GEN_2_ready <= GEN_17
    GEN_2_valid <= GEN_18
    GEN_2_bits_header_src <= GEN_19
    GEN_2_bits_header_dst <= GEN_20
    GEN_2_bits_payload_addr_block <= GEN_21
    GEN_2_bits_payload_p_type <= GEN_22
    GEN_3_ready <= GEN_17
    GEN_3_valid <= GEN_18
    GEN_3_bits_header_src <= GEN_19
    GEN_3_bits_header_dst <= GEN_20
    GEN_3_bits_payload_addr_block <= GEN_21
    GEN_3_bits_payload_p_type <= GEN_22
    GEN_4_ready <= GEN_17
    GEN_4_valid <= GEN_18
    GEN_4_bits_header_src <= GEN_19
    GEN_4_bits_header_dst <= GEN_20
    GEN_4_bits_payload_addr_block <= GEN_21
    GEN_4_bits_payload_p_type <= GEN_22
    lastGrant <= GEN_23

  module BasicBus_2 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_addr_block : UInt<26>
    input io_in_0_bits_payload_p_type : UInt<2>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_addr_block : UInt<26>
    input io_in_1_bits_payload_p_type : UInt<2>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_addr_block : UInt<26>
    input io_in_2_bits_payload_p_type : UInt<2>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_addr_block : UInt<26>
    input io_in_3_bits_payload_p_type : UInt<2>
    input io_out_0_ready : UInt<1>
    output io_out_0_valid : UInt<1>
    output io_out_0_bits_header_src : UInt<2>
    output io_out_0_bits_header_dst : UInt<2>
    output io_out_0_bits_payload_addr_block : UInt<26>
    output io_out_0_bits_payload_p_type : UInt<2>
    input io_out_1_ready : UInt<1>
    output io_out_1_valid : UInt<1>
    output io_out_1_bits_header_src : UInt<2>
    output io_out_1_bits_header_dst : UInt<2>
    output io_out_1_bits_payload_addr_block : UInt<26>
    output io_out_1_bits_payload_p_type : UInt<2>
    input io_out_2_ready : UInt<1>
    output io_out_2_valid : UInt<1>
    output io_out_2_bits_header_src : UInt<2>
    output io_out_2_bits_header_dst : UInt<2>
    output io_out_2_bits_payload_addr_block : UInt<26>
    output io_out_2_bits_payload_p_type : UInt<2>
    input io_out_3_ready : UInt<1>
    output io_out_3_valid : UInt<1>
    output io_out_3_bits_header_src : UInt<2>
    output io_out_3_bits_header_dst : UInt<2>
    output io_out_3_bits_payload_addr_block : UInt<26>
    output io_out_3_bits_payload_p_type : UInt<2>
  
    inst arb of LockingRRArbiter_2
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_addr_block : UInt<26>
    wire GEN_0_bits_payload_p_type : UInt<2>
    node GEN_1 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_ready, io_out_0_ready)
    node GEN_2 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_valid, io_out_0_valid)
    node GEN_3 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_src, io_out_0_bits_header_src)
    node GEN_4 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_dst, io_out_0_bits_header_dst)
    node GEN_5 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_addr_block, io_out_0_bits_payload_addr_block)
    node GEN_6 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_p_type, io_out_0_bits_payload_p_type)
    node GEN_7 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_ready, GEN_1)
    node GEN_8 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_valid, GEN_2)
    node GEN_9 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_src, GEN_3)
    node GEN_10 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_dst, GEN_4)
    node GEN_11 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_addr_block, GEN_5)
    node GEN_12 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_p_type, GEN_6)
    node GEN_13 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_ready, GEN_7)
    node GEN_14 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_valid, GEN_8)
    node GEN_15 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_src, GEN_9)
    node GEN_16 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_dst, GEN_10)
    node GEN_17 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_addr_block, GEN_11)
    node GEN_18 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_p_type, GEN_12)
    node T_1299 = eq(arb.io_out_bits_header_dst, UInt<2>("h0"))
    node T_1300 = and(arb.io_out_valid, T_1299)
    node T_1302 = eq(arb.io_out_bits_header_dst, UInt<2>("h1"))
    node T_1303 = and(arb.io_out_valid, T_1302)
    node T_1305 = eq(arb.io_out_bits_header_dst, UInt<2>("h2"))
    node T_1306 = and(arb.io_out_valid, T_1305)
    node T_1308 = eq(arb.io_out_bits_header_dst, UInt<2>("h3"))
    node T_1309 = and(arb.io_out_valid, T_1308)
    io_in_0_ready <= arb.io_in_0_ready
    io_in_1_ready <= arb.io_in_1_ready
    io_in_2_ready <= arb.io_in_2_ready
    io_in_3_ready <= arb.io_in_3_ready
    io_out_0_valid <= T_1300
    io_out_0_bits_header_src <= arb.io_out_bits_header_src
    io_out_0_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_0_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_0_bits_payload_p_type <= arb.io_out_bits_payload_p_type
    io_out_1_valid <= T_1303
    io_out_1_bits_header_src <= arb.io_out_bits_header_src
    io_out_1_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_1_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_1_bits_payload_p_type <= arb.io_out_bits_payload_p_type
    io_out_2_valid <= T_1306
    io_out_2_bits_header_src <= arb.io_out_bits_header_src
    io_out_2_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_2_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_2_bits_payload_p_type <= arb.io_out_bits_payload_p_type
    io_out_3_valid <= T_1309
    io_out_3_bits_header_src <= arb.io_out_bits_header_src
    io_out_3_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_3_bits_payload_addr_block <= arb.io_out_bits_payload_addr_block
    io_out_3_bits_payload_p_type <= arb.io_out_bits_payload_p_type
    arb.io_in_0_valid <= io_in_0_valid
    arb.io_in_0_bits_header_src <= io_in_0_bits_header_src
    arb.io_in_0_bits_header_dst <= io_in_0_bits_header_dst
    arb.io_in_0_bits_payload_addr_block <= io_in_0_bits_payload_addr_block
    arb.io_in_0_bits_payload_p_type <= io_in_0_bits_payload_p_type
    arb.io_in_1_valid <= io_in_1_valid
    arb.io_in_1_bits_header_src <= io_in_1_bits_header_src
    arb.io_in_1_bits_header_dst <= io_in_1_bits_header_dst
    arb.io_in_1_bits_payload_addr_block <= io_in_1_bits_payload_addr_block
    arb.io_in_1_bits_payload_p_type <= io_in_1_bits_payload_p_type
    arb.io_in_2_valid <= io_in_2_valid
    arb.io_in_2_bits_header_src <= io_in_2_bits_header_src
    arb.io_in_2_bits_header_dst <= io_in_2_bits_header_dst
    arb.io_in_2_bits_payload_addr_block <= io_in_2_bits_payload_addr_block
    arb.io_in_2_bits_payload_p_type <= io_in_2_bits_payload_p_type
    arb.io_in_3_valid <= io_in_3_valid
    arb.io_in_3_bits_header_src <= io_in_3_bits_header_src
    arb.io_in_3_bits_header_dst <= io_in_3_bits_header_dst
    arb.io_in_3_bits_payload_addr_block <= io_in_3_bits_payload_addr_block
    arb.io_in_3_bits_payload_p_type <= io_in_3_bits_payload_p_type
    arb.io_out_ready <= GEN_0_ready
    GEN_0_ready <= GEN_13
    GEN_0_valid <= GEN_14
    GEN_0_bits_header_src <= GEN_15
    GEN_0_bits_header_dst <= GEN_16
    GEN_0_bits_payload_addr_block <= GEN_17
    GEN_0_bits_payload_p_type <= GEN_18

  module LockingRRArbiter_3 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_addr_beat : UInt<3>
    input io_in_0_bits_payload_client_xact_id : UInt<1>
    input io_in_0_bits_payload_manager_xact_id : UInt<4>
    input io_in_0_bits_payload_is_builtin_type : UInt<1>
    input io_in_0_bits_payload_g_type : UInt<4>
    input io_in_0_bits_payload_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_addr_beat : UInt<3>
    input io_in_1_bits_payload_client_xact_id : UInt<1>
    input io_in_1_bits_payload_manager_xact_id : UInt<4>
    input io_in_1_bits_payload_is_builtin_type : UInt<1>
    input io_in_1_bits_payload_g_type : UInt<4>
    input io_in_1_bits_payload_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_addr_beat : UInt<3>
    input io_in_2_bits_payload_client_xact_id : UInt<1>
    input io_in_2_bits_payload_manager_xact_id : UInt<4>
    input io_in_2_bits_payload_is_builtin_type : UInt<1>
    input io_in_2_bits_payload_g_type : UInt<4>
    input io_in_2_bits_payload_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_addr_beat : UInt<3>
    input io_in_3_bits_payload_client_xact_id : UInt<1>
    input io_in_3_bits_payload_manager_xact_id : UInt<4>
    input io_in_3_bits_payload_is_builtin_type : UInt<1>
    input io_in_3_bits_payload_g_type : UInt<4>
    input io_in_3_bits_payload_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_header_src : UInt<2>
    output io_out_bits_header_dst : UInt<2>
    output io_out_bits_payload_addr_beat : UInt<3>
    output io_out_bits_payload_client_xact_id : UInt<1>
    output io_out_bits_payload_manager_xact_id : UInt<4>
    output io_out_bits_payload_is_builtin_type : UInt<1>
    output io_out_bits_payload_g_type : UInt<4>
    output io_out_bits_payload_data : UInt<64>
    output io_chosen : UInt<2>
  
    wire choice : UInt<2>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_addr_beat : UInt<3>
    wire GEN_0_bits_payload_client_xact_id : UInt<1>
    wire GEN_0_bits_payload_manager_xact_id : UInt<4>
    wire GEN_0_bits_payload_is_builtin_type : UInt<1>
    wire GEN_0_bits_payload_g_type : UInt<4>
    wire GEN_0_bits_payload_data : UInt<64>
    node GEN_9 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_10 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_11 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_src, io_in_0_bits_header_src)
    node GEN_12 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_dst, io_in_0_bits_header_dst)
    node GEN_13 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_addr_beat, io_in_0_bits_payload_addr_beat)
    node GEN_14 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_client_xact_id, io_in_0_bits_payload_client_xact_id)
    node GEN_15 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_manager_xact_id, io_in_0_bits_payload_manager_xact_id)
    node GEN_16 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_is_builtin_type, io_in_0_bits_payload_is_builtin_type)
    node GEN_17 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_g_type, io_in_0_bits_payload_g_type)
    node GEN_18 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_data, io_in_0_bits_payload_data)
    node GEN_19 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_ready, GEN_9)
    node GEN_20 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_valid, GEN_10)
    node GEN_21 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_src, GEN_11)
    node GEN_22 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_dst, GEN_12)
    node GEN_23 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_addr_beat, GEN_13)
    node GEN_24 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_client_xact_id, GEN_14)
    node GEN_25 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_manager_xact_id, GEN_15)
    node GEN_26 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_is_builtin_type, GEN_16)
    node GEN_27 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_g_type, GEN_17)
    node GEN_28 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_data, GEN_18)
    node GEN_29 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_ready, GEN_19)
    node GEN_30 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_valid, GEN_20)
    node GEN_31 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_src, GEN_21)
    node GEN_32 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_dst, GEN_22)
    node GEN_33 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_addr_beat, GEN_23)
    node GEN_34 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_client_xact_id, GEN_24)
    node GEN_35 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_manager_xact_id, GEN_25)
    node GEN_36 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_is_builtin_type, GEN_26)
    node GEN_37 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_g_type, GEN_27)
    node GEN_38 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_data, GEN_28)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_header_src : UInt<2>
    wire GEN_1_bits_header_dst : UInt<2>
    wire GEN_1_bits_payload_addr_beat : UInt<3>
    wire GEN_1_bits_payload_client_xact_id : UInt<1>
    wire GEN_1_bits_payload_manager_xact_id : UInt<4>
    wire GEN_1_bits_payload_is_builtin_type : UInt<1>
    wire GEN_1_bits_payload_g_type : UInt<4>
    wire GEN_1_bits_payload_data : UInt<64>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_header_src : UInt<2>
    wire GEN_2_bits_header_dst : UInt<2>
    wire GEN_2_bits_payload_addr_beat : UInt<3>
    wire GEN_2_bits_payload_client_xact_id : UInt<1>
    wire GEN_2_bits_payload_manager_xact_id : UInt<4>
    wire GEN_2_bits_payload_is_builtin_type : UInt<1>
    wire GEN_2_bits_payload_g_type : UInt<4>
    wire GEN_2_bits_payload_data : UInt<64>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_header_src : UInt<2>
    wire GEN_3_bits_header_dst : UInt<2>
    wire GEN_3_bits_payload_addr_beat : UInt<3>
    wire GEN_3_bits_payload_client_xact_id : UInt<1>
    wire GEN_3_bits_payload_manager_xact_id : UInt<4>
    wire GEN_3_bits_payload_is_builtin_type : UInt<1>
    wire GEN_3_bits_payload_g_type : UInt<4>
    wire GEN_3_bits_payload_data : UInt<64>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_header_src : UInt<2>
    wire GEN_4_bits_header_dst : UInt<2>
    wire GEN_4_bits_payload_addr_beat : UInt<3>
    wire GEN_4_bits_payload_client_xact_id : UInt<1>
    wire GEN_4_bits_payload_manager_xact_id : UInt<4>
    wire GEN_4_bits_payload_is_builtin_type : UInt<1>
    wire GEN_4_bits_payload_g_type : UInt<4>
    wire GEN_4_bits_payload_data : UInt<64>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_header_src : UInt<2>
    wire GEN_5_bits_header_dst : UInt<2>
    wire GEN_5_bits_payload_addr_beat : UInt<3>
    wire GEN_5_bits_payload_client_xact_id : UInt<1>
    wire GEN_5_bits_payload_manager_xact_id : UInt<4>
    wire GEN_5_bits_payload_is_builtin_type : UInt<1>
    wire GEN_5_bits_payload_g_type : UInt<4>
    wire GEN_5_bits_payload_data : UInt<64>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_header_src : UInt<2>
    wire GEN_6_bits_header_dst : UInt<2>
    wire GEN_6_bits_payload_addr_beat : UInt<3>
    wire GEN_6_bits_payload_client_xact_id : UInt<1>
    wire GEN_6_bits_payload_manager_xact_id : UInt<4>
    wire GEN_6_bits_payload_is_builtin_type : UInt<1>
    wire GEN_6_bits_payload_g_type : UInt<4>
    wire GEN_6_bits_payload_data : UInt<64>
    wire GEN_7_ready : UInt<1>
    wire GEN_7_valid : UInt<1>
    wire GEN_7_bits_header_src : UInt<2>
    wire GEN_7_bits_header_dst : UInt<2>
    wire GEN_7_bits_payload_addr_beat : UInt<3>
    wire GEN_7_bits_payload_client_xact_id : UInt<1>
    wire GEN_7_bits_payload_manager_xact_id : UInt<4>
    wire GEN_7_bits_payload_is_builtin_type : UInt<1>
    wire GEN_7_bits_payload_g_type : UInt<4>
    wire GEN_7_bits_payload_data : UInt<64>
    wire GEN_8_ready : UInt<1>
    wire GEN_8_valid : UInt<1>
    wire GEN_8_bits_header_src : UInt<2>
    wire GEN_8_bits_header_dst : UInt<2>
    wire GEN_8_bits_payload_addr_beat : UInt<3>
    wire GEN_8_bits_payload_client_xact_id : UInt<1>
    wire GEN_8_bits_payload_manager_xact_id : UInt<4>
    wire GEN_8_bits_payload_is_builtin_type : UInt<1>
    wire GEN_8_bits_payload_g_type : UInt<4>
    wire GEN_8_bits_payload_data : UInt<64>
    reg T_1100 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_1102 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_1102)
    node T_1104 = neq(T_1100, UInt<3>("h0"))
    wire T_1112_0 : UInt<3>
    node GEN_0 = pad(UInt<3>("h5"), 4)
    node T_1114 = eq(io_out_bits_payload_g_type, GEN_0)
    node T_1115 = eq(io_out_bits_payload_g_type, UInt<4>("h0"))
    node T_1116 = mux(io_out_bits_payload_is_builtin_type, T_1114, T_1115)
    node T_1118 = and(io_out_ready, io_out_valid)
    node T_1119 = and(T_1118, T_1116)
    node T_1123 = add(T_1100, UInt<3>("h1"))
    node T_1124 = tail(T_1123, 1)
    node GEN_39 = mux(T_1119, io_chosen, T_1102)
    node GEN_40 = mux(T_1119, T_1124, T_1100)
    node GEN_41 = mux(T_1104, T_1102, choice)
    reg lastGrant : UInt<2>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_42 = mux(T_1118, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<2>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node T_1132 = or(validMask_1, validMask_2)
    node T_1133 = or(T_1132, validMask_3)
    node T_1134 = or(T_1133, io_in_0_valid)
    node T_1135 = or(T_1134, io_in_1_valid)
    node T_1136 = or(T_1135, io_in_2_valid)
    node T_1140 = eq(validMask_1, UInt<1>("h0"))
    node T_1142 = eq(T_1132, UInt<1>("h0"))
    node T_1144 = eq(T_1133, UInt<1>("h0"))
    node T_1146 = eq(T_1134, UInt<1>("h0"))
    node T_1148 = eq(T_1135, UInt<1>("h0"))
    node T_1150 = eq(T_1136, UInt<1>("h0"))
    node T_1154 = or(grantMask_1, T_1146)
    node T_1155 = and(T_1140, grantMask_2)
    node T_1156 = or(T_1155, T_1148)
    node T_1157 = and(T_1142, grantMask_3)
    node T_1158 = or(T_1157, T_1150)
    node T_1160 = eq(T_1102, UInt<2>("h0"))
    node T_1161 = mux(T_1104, T_1160, T_1144)
    node T_1162 = and(T_1161, io_out_ready)
    node T_1164 = eq(T_1102, UInt<2>("h1"))
    node T_1165 = mux(T_1104, T_1164, T_1154)
    node T_1166 = and(T_1165, io_out_ready)
    node T_1168 = eq(T_1102, UInt<2>("h2"))
    node T_1169 = mux(T_1104, T_1168, T_1156)
    node T_1170 = and(T_1169, io_out_ready)
    node T_1172 = eq(T_1102, UInt<2>("h3"))
    node T_1173 = mux(T_1104, T_1172, T_1158)
    node T_1174 = and(T_1173, io_out_ready)
    node GEN_43 = mux(io_in_2_valid, UInt<2>("h2"), UInt<2>("h3"))
    node GEN_44 = mux(io_in_1_valid, UInt<2>("h1"), GEN_43)
    node GEN_45 = mux(io_in_0_valid, UInt<2>("h0"), GEN_44)
    node GEN_46 = mux(validMask_3, UInt<2>("h3"), GEN_45)
    node GEN_47 = mux(validMask_2, UInt<2>("h2"), GEN_46)
    node GEN_48 = mux(validMask_1, UInt<2>("h1"), GEN_47)
    io_in_0_ready <= T_1162
    io_in_1_ready <= T_1166
    io_in_2_ready <= T_1170
    io_in_3_ready <= T_1174
    io_out_valid <= GEN_0_valid
    io_out_bits_header_src <= GEN_1_bits_header_src
    io_out_bits_header_dst <= GEN_2_bits_header_dst
    io_out_bits_payload_addr_beat <= GEN_3_bits_payload_addr_beat
    io_out_bits_payload_client_xact_id <= GEN_4_bits_payload_client_xact_id
    io_out_bits_payload_manager_xact_id <= GEN_5_bits_payload_manager_xact_id
    io_out_bits_payload_is_builtin_type <= GEN_6_bits_payload_is_builtin_type
    io_out_bits_payload_g_type <= GEN_7_bits_payload_g_type
    io_out_bits_payload_data <= GEN_8_bits_payload_data
    io_chosen <= GEN_41
    choice <= GEN_48
    GEN_0_ready <= GEN_29
    GEN_0_valid <= GEN_30
    GEN_0_bits_header_src <= GEN_31
    GEN_0_bits_header_dst <= GEN_32
    GEN_0_bits_payload_addr_beat <= GEN_33
    GEN_0_bits_payload_client_xact_id <= GEN_34
    GEN_0_bits_payload_manager_xact_id <= GEN_35
    GEN_0_bits_payload_is_builtin_type <= GEN_36
    GEN_0_bits_payload_g_type <= GEN_37
    GEN_0_bits_payload_data <= GEN_38
    GEN_1_ready <= GEN_29
    GEN_1_valid <= GEN_30
    GEN_1_bits_header_src <= GEN_31
    GEN_1_bits_header_dst <= GEN_32
    GEN_1_bits_payload_addr_beat <= GEN_33
    GEN_1_bits_payload_client_xact_id <= GEN_34
    GEN_1_bits_payload_manager_xact_id <= GEN_35
    GEN_1_bits_payload_is_builtin_type <= GEN_36
    GEN_1_bits_payload_g_type <= GEN_37
    GEN_1_bits_payload_data <= GEN_38
    GEN_2_ready <= GEN_29
    GEN_2_valid <= GEN_30
    GEN_2_bits_header_src <= GEN_31
    GEN_2_bits_header_dst <= GEN_32
    GEN_2_bits_payload_addr_beat <= GEN_33
    GEN_2_bits_payload_client_xact_id <= GEN_34
    GEN_2_bits_payload_manager_xact_id <= GEN_35
    GEN_2_bits_payload_is_builtin_type <= GEN_36
    GEN_2_bits_payload_g_type <= GEN_37
    GEN_2_bits_payload_data <= GEN_38
    GEN_3_ready <= GEN_29
    GEN_3_valid <= GEN_30
    GEN_3_bits_header_src <= GEN_31
    GEN_3_bits_header_dst <= GEN_32
    GEN_3_bits_payload_addr_beat <= GEN_33
    GEN_3_bits_payload_client_xact_id <= GEN_34
    GEN_3_bits_payload_manager_xact_id <= GEN_35
    GEN_3_bits_payload_is_builtin_type <= GEN_36
    GEN_3_bits_payload_g_type <= GEN_37
    GEN_3_bits_payload_data <= GEN_38
    GEN_4_ready <= GEN_29
    GEN_4_valid <= GEN_30
    GEN_4_bits_header_src <= GEN_31
    GEN_4_bits_header_dst <= GEN_32
    GEN_4_bits_payload_addr_beat <= GEN_33
    GEN_4_bits_payload_client_xact_id <= GEN_34
    GEN_4_bits_payload_manager_xact_id <= GEN_35
    GEN_4_bits_payload_is_builtin_type <= GEN_36
    GEN_4_bits_payload_g_type <= GEN_37
    GEN_4_bits_payload_data <= GEN_38
    GEN_5_ready <= GEN_29
    GEN_5_valid <= GEN_30
    GEN_5_bits_header_src <= GEN_31
    GEN_5_bits_header_dst <= GEN_32
    GEN_5_bits_payload_addr_beat <= GEN_33
    GEN_5_bits_payload_client_xact_id <= GEN_34
    GEN_5_bits_payload_manager_xact_id <= GEN_35
    GEN_5_bits_payload_is_builtin_type <= GEN_36
    GEN_5_bits_payload_g_type <= GEN_37
    GEN_5_bits_payload_data <= GEN_38
    GEN_6_ready <= GEN_29
    GEN_6_valid <= GEN_30
    GEN_6_bits_header_src <= GEN_31
    GEN_6_bits_header_dst <= GEN_32
    GEN_6_bits_payload_addr_beat <= GEN_33
    GEN_6_bits_payload_client_xact_id <= GEN_34
    GEN_6_bits_payload_manager_xact_id <= GEN_35
    GEN_6_bits_payload_is_builtin_type <= GEN_36
    GEN_6_bits_payload_g_type <= GEN_37
    GEN_6_bits_payload_data <= GEN_38
    GEN_7_ready <= GEN_29
    GEN_7_valid <= GEN_30
    GEN_7_bits_header_src <= GEN_31
    GEN_7_bits_header_dst <= GEN_32
    GEN_7_bits_payload_addr_beat <= GEN_33
    GEN_7_bits_payload_client_xact_id <= GEN_34
    GEN_7_bits_payload_manager_xact_id <= GEN_35
    GEN_7_bits_payload_is_builtin_type <= GEN_36
    GEN_7_bits_payload_g_type <= GEN_37
    GEN_7_bits_payload_data <= GEN_38
    GEN_8_ready <= GEN_29
    GEN_8_valid <= GEN_30
    GEN_8_bits_header_src <= GEN_31
    GEN_8_bits_header_dst <= GEN_32
    GEN_8_bits_payload_addr_beat <= GEN_33
    GEN_8_bits_payload_client_xact_id <= GEN_34
    GEN_8_bits_payload_manager_xact_id <= GEN_35
    GEN_8_bits_payload_is_builtin_type <= GEN_36
    GEN_8_bits_payload_g_type <= GEN_37
    GEN_8_bits_payload_data <= GEN_38
    T_1100 <= GEN_40
    T_1102 <= GEN_39
    lastGrant <= GEN_42

  module BasicBus_3 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_addr_beat : UInt<3>
    input io_in_0_bits_payload_client_xact_id : UInt<1>
    input io_in_0_bits_payload_manager_xact_id : UInt<4>
    input io_in_0_bits_payload_is_builtin_type : UInt<1>
    input io_in_0_bits_payload_g_type : UInt<4>
    input io_in_0_bits_payload_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_addr_beat : UInt<3>
    input io_in_1_bits_payload_client_xact_id : UInt<1>
    input io_in_1_bits_payload_manager_xact_id : UInt<4>
    input io_in_1_bits_payload_is_builtin_type : UInt<1>
    input io_in_1_bits_payload_g_type : UInt<4>
    input io_in_1_bits_payload_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_addr_beat : UInt<3>
    input io_in_2_bits_payload_client_xact_id : UInt<1>
    input io_in_2_bits_payload_manager_xact_id : UInt<4>
    input io_in_2_bits_payload_is_builtin_type : UInt<1>
    input io_in_2_bits_payload_g_type : UInt<4>
    input io_in_2_bits_payload_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_addr_beat : UInt<3>
    input io_in_3_bits_payload_client_xact_id : UInt<1>
    input io_in_3_bits_payload_manager_xact_id : UInt<4>
    input io_in_3_bits_payload_is_builtin_type : UInt<1>
    input io_in_3_bits_payload_g_type : UInt<4>
    input io_in_3_bits_payload_data : UInt<64>
    input io_out_0_ready : UInt<1>
    output io_out_0_valid : UInt<1>
    output io_out_0_bits_header_src : UInt<2>
    output io_out_0_bits_header_dst : UInt<2>
    output io_out_0_bits_payload_addr_beat : UInt<3>
    output io_out_0_bits_payload_client_xact_id : UInt<1>
    output io_out_0_bits_payload_manager_xact_id : UInt<4>
    output io_out_0_bits_payload_is_builtin_type : UInt<1>
    output io_out_0_bits_payload_g_type : UInt<4>
    output io_out_0_bits_payload_data : UInt<64>
    input io_out_1_ready : UInt<1>
    output io_out_1_valid : UInt<1>
    output io_out_1_bits_header_src : UInt<2>
    output io_out_1_bits_header_dst : UInt<2>
    output io_out_1_bits_payload_addr_beat : UInt<3>
    output io_out_1_bits_payload_client_xact_id : UInt<1>
    output io_out_1_bits_payload_manager_xact_id : UInt<4>
    output io_out_1_bits_payload_is_builtin_type : UInt<1>
    output io_out_1_bits_payload_g_type : UInt<4>
    output io_out_1_bits_payload_data : UInt<64>
    input io_out_2_ready : UInt<1>
    output io_out_2_valid : UInt<1>
    output io_out_2_bits_header_src : UInt<2>
    output io_out_2_bits_header_dst : UInt<2>
    output io_out_2_bits_payload_addr_beat : UInt<3>
    output io_out_2_bits_payload_client_xact_id : UInt<1>
    output io_out_2_bits_payload_manager_xact_id : UInt<4>
    output io_out_2_bits_payload_is_builtin_type : UInt<1>
    output io_out_2_bits_payload_g_type : UInt<4>
    output io_out_2_bits_payload_data : UInt<64>
    input io_out_3_ready : UInt<1>
    output io_out_3_valid : UInt<1>
    output io_out_3_bits_header_src : UInt<2>
    output io_out_3_bits_header_dst : UInt<2>
    output io_out_3_bits_payload_addr_beat : UInt<3>
    output io_out_3_bits_payload_client_xact_id : UInt<1>
    output io_out_3_bits_payload_manager_xact_id : UInt<4>
    output io_out_3_bits_payload_is_builtin_type : UInt<1>
    output io_out_3_bits_payload_g_type : UInt<4>
    output io_out_3_bits_payload_data : UInt<64>
  
    inst arb of LockingRRArbiter_3
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_addr_beat : UInt<3>
    wire GEN_0_bits_payload_client_xact_id : UInt<1>
    wire GEN_0_bits_payload_manager_xact_id : UInt<4>
    wire GEN_0_bits_payload_is_builtin_type : UInt<1>
    wire GEN_0_bits_payload_g_type : UInt<4>
    wire GEN_0_bits_payload_data : UInt<64>
    node GEN_1 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_ready, io_out_0_ready)
    node GEN_2 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_valid, io_out_0_valid)
    node GEN_3 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_src, io_out_0_bits_header_src)
    node GEN_4 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_dst, io_out_0_bits_header_dst)
    node GEN_5 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_addr_beat, io_out_0_bits_payload_addr_beat)
    node GEN_6 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_client_xact_id, io_out_0_bits_payload_client_xact_id)
    node GEN_7 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_manager_xact_id, io_out_0_bits_payload_manager_xact_id)
    node GEN_8 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_is_builtin_type, io_out_0_bits_payload_is_builtin_type)
    node GEN_9 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_g_type, io_out_0_bits_payload_g_type)
    node GEN_10 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_data, io_out_0_bits_payload_data)
    node GEN_11 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_ready, GEN_1)
    node GEN_12 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_valid, GEN_2)
    node GEN_13 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_src, GEN_3)
    node GEN_14 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_dst, GEN_4)
    node GEN_15 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_addr_beat, GEN_5)
    node GEN_16 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_client_xact_id, GEN_6)
    node GEN_17 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_manager_xact_id, GEN_7)
    node GEN_18 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_is_builtin_type, GEN_8)
    node GEN_19 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_g_type, GEN_9)
    node GEN_20 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_data, GEN_10)
    node GEN_21 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_ready, GEN_11)
    node GEN_22 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_valid, GEN_12)
    node GEN_23 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_src, GEN_13)
    node GEN_24 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_dst, GEN_14)
    node GEN_25 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_addr_beat, GEN_15)
    node GEN_26 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_client_xact_id, GEN_16)
    node GEN_27 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_manager_xact_id, GEN_17)
    node GEN_28 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_is_builtin_type, GEN_18)
    node GEN_29 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_g_type, GEN_19)
    node GEN_30 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_data, GEN_20)
    node T_1483 = eq(arb.io_out_bits_header_dst, UInt<2>("h0"))
    node T_1484 = and(arb.io_out_valid, T_1483)
    node T_1486 = eq(arb.io_out_bits_header_dst, UInt<2>("h1"))
    node T_1487 = and(arb.io_out_valid, T_1486)
    node T_1489 = eq(arb.io_out_bits_header_dst, UInt<2>("h2"))
    node T_1490 = and(arb.io_out_valid, T_1489)
    node T_1492 = eq(arb.io_out_bits_header_dst, UInt<2>("h3"))
    node T_1493 = and(arb.io_out_valid, T_1492)
    io_in_0_ready <= arb.io_in_0_ready
    io_in_1_ready <= arb.io_in_1_ready
    io_in_2_ready <= arb.io_in_2_ready
    io_in_3_ready <= arb.io_in_3_ready
    io_out_0_valid <= T_1484
    io_out_0_bits_header_src <= arb.io_out_bits_header_src
    io_out_0_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_0_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_0_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_0_bits_payload_manager_xact_id <= arb.io_out_bits_payload_manager_xact_id
    io_out_0_bits_payload_is_builtin_type <= arb.io_out_bits_payload_is_builtin_type
    io_out_0_bits_payload_g_type <= arb.io_out_bits_payload_g_type
    io_out_0_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_1_valid <= T_1487
    io_out_1_bits_header_src <= arb.io_out_bits_header_src
    io_out_1_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_1_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_1_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_1_bits_payload_manager_xact_id <= arb.io_out_bits_payload_manager_xact_id
    io_out_1_bits_payload_is_builtin_type <= arb.io_out_bits_payload_is_builtin_type
    io_out_1_bits_payload_g_type <= arb.io_out_bits_payload_g_type
    io_out_1_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_2_valid <= T_1490
    io_out_2_bits_header_src <= arb.io_out_bits_header_src
    io_out_2_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_2_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_2_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_2_bits_payload_manager_xact_id <= arb.io_out_bits_payload_manager_xact_id
    io_out_2_bits_payload_is_builtin_type <= arb.io_out_bits_payload_is_builtin_type
    io_out_2_bits_payload_g_type <= arb.io_out_bits_payload_g_type
    io_out_2_bits_payload_data <= arb.io_out_bits_payload_data
    io_out_3_valid <= T_1493
    io_out_3_bits_header_src <= arb.io_out_bits_header_src
    io_out_3_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_3_bits_payload_addr_beat <= arb.io_out_bits_payload_addr_beat
    io_out_3_bits_payload_client_xact_id <= arb.io_out_bits_payload_client_xact_id
    io_out_3_bits_payload_manager_xact_id <= arb.io_out_bits_payload_manager_xact_id
    io_out_3_bits_payload_is_builtin_type <= arb.io_out_bits_payload_is_builtin_type
    io_out_3_bits_payload_g_type <= arb.io_out_bits_payload_g_type
    io_out_3_bits_payload_data <= arb.io_out_bits_payload_data
    arb.io_in_0_valid <= io_in_0_valid
    arb.io_in_0_bits_header_src <= io_in_0_bits_header_src
    arb.io_in_0_bits_header_dst <= io_in_0_bits_header_dst
    arb.io_in_0_bits_payload_addr_beat <= io_in_0_bits_payload_addr_beat
    arb.io_in_0_bits_payload_client_xact_id <= io_in_0_bits_payload_client_xact_id
    arb.io_in_0_bits_payload_manager_xact_id <= io_in_0_bits_payload_manager_xact_id
    arb.io_in_0_bits_payload_is_builtin_type <= io_in_0_bits_payload_is_builtin_type
    arb.io_in_0_bits_payload_g_type <= io_in_0_bits_payload_g_type
    arb.io_in_0_bits_payload_data <= io_in_0_bits_payload_data
    arb.io_in_1_valid <= io_in_1_valid
    arb.io_in_1_bits_header_src <= io_in_1_bits_header_src
    arb.io_in_1_bits_header_dst <= io_in_1_bits_header_dst
    arb.io_in_1_bits_payload_addr_beat <= io_in_1_bits_payload_addr_beat
    arb.io_in_1_bits_payload_client_xact_id <= io_in_1_bits_payload_client_xact_id
    arb.io_in_1_bits_payload_manager_xact_id <= io_in_1_bits_payload_manager_xact_id
    arb.io_in_1_bits_payload_is_builtin_type <= io_in_1_bits_payload_is_builtin_type
    arb.io_in_1_bits_payload_g_type <= io_in_1_bits_payload_g_type
    arb.io_in_1_bits_payload_data <= io_in_1_bits_payload_data
    arb.io_in_2_valid <= io_in_2_valid
    arb.io_in_2_bits_header_src <= io_in_2_bits_header_src
    arb.io_in_2_bits_header_dst <= io_in_2_bits_header_dst
    arb.io_in_2_bits_payload_addr_beat <= io_in_2_bits_payload_addr_beat
    arb.io_in_2_bits_payload_client_xact_id <= io_in_2_bits_payload_client_xact_id
    arb.io_in_2_bits_payload_manager_xact_id <= io_in_2_bits_payload_manager_xact_id
    arb.io_in_2_bits_payload_is_builtin_type <= io_in_2_bits_payload_is_builtin_type
    arb.io_in_2_bits_payload_g_type <= io_in_2_bits_payload_g_type
    arb.io_in_2_bits_payload_data <= io_in_2_bits_payload_data
    arb.io_in_3_valid <= io_in_3_valid
    arb.io_in_3_bits_header_src <= io_in_3_bits_header_src
    arb.io_in_3_bits_header_dst <= io_in_3_bits_header_dst
    arb.io_in_3_bits_payload_addr_beat <= io_in_3_bits_payload_addr_beat
    arb.io_in_3_bits_payload_client_xact_id <= io_in_3_bits_payload_client_xact_id
    arb.io_in_3_bits_payload_manager_xact_id <= io_in_3_bits_payload_manager_xact_id
    arb.io_in_3_bits_payload_is_builtin_type <= io_in_3_bits_payload_is_builtin_type
    arb.io_in_3_bits_payload_g_type <= io_in_3_bits_payload_g_type
    arb.io_in_3_bits_payload_data <= io_in_3_bits_payload_data
    arb.io_out_ready <= GEN_0_ready
    GEN_0_ready <= GEN_21
    GEN_0_valid <= GEN_22
    GEN_0_bits_header_src <= GEN_23
    GEN_0_bits_header_dst <= GEN_24
    GEN_0_bits_payload_addr_beat <= GEN_25
    GEN_0_bits_payload_client_xact_id <= GEN_26
    GEN_0_bits_payload_manager_xact_id <= GEN_27
    GEN_0_bits_payload_is_builtin_type <= GEN_28
    GEN_0_bits_payload_g_type <= GEN_29
    GEN_0_bits_payload_data <= GEN_30

  module LockingRRArbiter_4 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_manager_xact_id : UInt<4>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_manager_xact_id : UInt<4>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_manager_xact_id : UInt<4>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_manager_xact_id : UInt<4>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_header_src : UInt<2>
    output io_out_bits_header_dst : UInt<2>
    output io_out_bits_payload_manager_xact_id : UInt<4>
    output io_chosen : UInt<2>
  
    wire choice : UInt<2>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_manager_xact_id : UInt<4>
    node GEN_4 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_5 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_6 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_src, io_in_0_bits_header_src)
    node GEN_7 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_header_dst, io_in_0_bits_header_dst)
    node GEN_8 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_payload_manager_xact_id, io_in_0_bits_payload_manager_xact_id)
    node GEN_9 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_ready, GEN_4)
    node GEN_10 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_valid, GEN_5)
    node GEN_11 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_src, GEN_6)
    node GEN_12 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_header_dst, GEN_7)
    node GEN_13 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_payload_manager_xact_id, GEN_8)
    node GEN_14 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_ready, GEN_9)
    node GEN_15 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_valid, GEN_10)
    node GEN_16 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_src, GEN_11)
    node GEN_17 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_header_dst, GEN_12)
    node GEN_18 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_payload_manager_xact_id, GEN_13)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_header_src : UInt<2>
    wire GEN_1_bits_header_dst : UInt<2>
    wire GEN_1_bits_payload_manager_xact_id : UInt<4>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_header_src : UInt<2>
    wire GEN_2_bits_header_dst : UInt<2>
    wire GEN_2_bits_payload_manager_xact_id : UInt<4>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_header_src : UInt<2>
    wire GEN_3_bits_header_dst : UInt<2>
    wire GEN_3_bits_payload_manager_xact_id : UInt<4>
    node T_930 = and(io_out_ready, io_out_valid)
    reg lastGrant : UInt<2>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_19 = mux(T_930, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<2>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node T_936 = or(validMask_1, validMask_2)
    node T_937 = or(T_936, validMask_3)
    node T_938 = or(T_937, io_in_0_valid)
    node T_939 = or(T_938, io_in_1_valid)
    node T_940 = or(T_939, io_in_2_valid)
    node T_944 = eq(validMask_1, UInt<1>("h0"))
    node T_946 = eq(T_936, UInt<1>("h0"))
    node T_948 = eq(T_937, UInt<1>("h0"))
    node T_950 = eq(T_938, UInt<1>("h0"))
    node T_952 = eq(T_939, UInt<1>("h0"))
    node T_954 = eq(T_940, UInt<1>("h0"))
    node T_958 = or(grantMask_1, T_950)
    node T_959 = and(T_944, grantMask_2)
    node T_960 = or(T_959, T_952)
    node T_961 = and(T_946, grantMask_3)
    node T_962 = or(T_961, T_954)
    node T_963 = and(T_948, io_out_ready)
    node T_964 = and(T_958, io_out_ready)
    node T_965 = and(T_960, io_out_ready)
    node T_966 = and(T_962, io_out_ready)
    node GEN_20 = mux(io_in_2_valid, UInt<2>("h2"), UInt<2>("h3"))
    node GEN_21 = mux(io_in_1_valid, UInt<2>("h1"), GEN_20)
    node GEN_22 = mux(io_in_0_valid, UInt<2>("h0"), GEN_21)
    node GEN_23 = mux(validMask_3, UInt<2>("h3"), GEN_22)
    node GEN_24 = mux(validMask_2, UInt<2>("h2"), GEN_23)
    node GEN_25 = mux(validMask_1, UInt<2>("h1"), GEN_24)
    io_in_0_ready <= T_963
    io_in_1_ready <= T_964
    io_in_2_ready <= T_965
    io_in_3_ready <= T_966
    io_out_valid <= GEN_0_valid
    io_out_bits_header_src <= GEN_1_bits_header_src
    io_out_bits_header_dst <= GEN_2_bits_header_dst
    io_out_bits_payload_manager_xact_id <= GEN_3_bits_payload_manager_xact_id
    io_chosen <= choice
    choice <= GEN_25
    GEN_0_ready <= GEN_14
    GEN_0_valid <= GEN_15
    GEN_0_bits_header_src <= GEN_16
    GEN_0_bits_header_dst <= GEN_17
    GEN_0_bits_payload_manager_xact_id <= GEN_18
    GEN_1_ready <= GEN_14
    GEN_1_valid <= GEN_15
    GEN_1_bits_header_src <= GEN_16
    GEN_1_bits_header_dst <= GEN_17
    GEN_1_bits_payload_manager_xact_id <= GEN_18
    GEN_2_ready <= GEN_14
    GEN_2_valid <= GEN_15
    GEN_2_bits_header_src <= GEN_16
    GEN_2_bits_header_dst <= GEN_17
    GEN_2_bits_payload_manager_xact_id <= GEN_18
    GEN_3_ready <= GEN_14
    GEN_3_valid <= GEN_15
    GEN_3_bits_header_src <= GEN_16
    GEN_3_bits_header_dst <= GEN_17
    GEN_3_bits_payload_manager_xact_id <= GEN_18
    lastGrant <= GEN_19

  module BasicBus_4 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_header_src : UInt<2>
    input io_in_0_bits_header_dst : UInt<2>
    input io_in_0_bits_payload_manager_xact_id : UInt<4>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_header_src : UInt<2>
    input io_in_1_bits_header_dst : UInt<2>
    input io_in_1_bits_payload_manager_xact_id : UInt<4>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_header_src : UInt<2>
    input io_in_2_bits_header_dst : UInt<2>
    input io_in_2_bits_payload_manager_xact_id : UInt<4>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_header_src : UInt<2>
    input io_in_3_bits_header_dst : UInt<2>
    input io_in_3_bits_payload_manager_xact_id : UInt<4>
    input io_out_0_ready : UInt<1>
    output io_out_0_valid : UInt<1>
    output io_out_0_bits_header_src : UInt<2>
    output io_out_0_bits_header_dst : UInt<2>
    output io_out_0_bits_payload_manager_xact_id : UInt<4>
    input io_out_1_ready : UInt<1>
    output io_out_1_valid : UInt<1>
    output io_out_1_bits_header_src : UInt<2>
    output io_out_1_bits_header_dst : UInt<2>
    output io_out_1_bits_payload_manager_xact_id : UInt<4>
    input io_out_2_ready : UInt<1>
    output io_out_2_valid : UInt<1>
    output io_out_2_bits_header_src : UInt<2>
    output io_out_2_bits_header_dst : UInt<2>
    output io_out_2_bits_payload_manager_xact_id : UInt<4>
    input io_out_3_ready : UInt<1>
    output io_out_3_valid : UInt<1>
    output io_out_3_bits_header_src : UInt<2>
    output io_out_3_bits_header_dst : UInt<2>
    output io_out_3_bits_payload_manager_xact_id : UInt<4>
  
    inst arb of LockingRRArbiter_4
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_header_src : UInt<2>
    wire GEN_0_bits_header_dst : UInt<2>
    wire GEN_0_bits_payload_manager_xact_id : UInt<4>
    node GEN_1 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_ready, io_out_0_ready)
    node GEN_2 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_valid, io_out_0_valid)
    node GEN_3 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_src, io_out_0_bits_header_src)
    node GEN_4 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_header_dst, io_out_0_bits_header_dst)
    node GEN_5 = mux(eq(UInt<2>("h1"), arb.io_out_bits_header_dst), io_out_1_bits_payload_manager_xact_id, io_out_0_bits_payload_manager_xact_id)
    node GEN_6 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_ready, GEN_1)
    node GEN_7 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_valid, GEN_2)
    node GEN_8 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_src, GEN_3)
    node GEN_9 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_header_dst, GEN_4)
    node GEN_10 = mux(eq(UInt<2>("h2"), arb.io_out_bits_header_dst), io_out_2_bits_payload_manager_xact_id, GEN_5)
    node GEN_11 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_ready, GEN_6)
    node GEN_12 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_valid, GEN_7)
    node GEN_13 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_src, GEN_8)
    node GEN_14 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_header_dst, GEN_9)
    node GEN_15 = mux(eq(UInt<2>("h3"), arb.io_out_bits_header_dst), io_out_3_bits_payload_manager_xact_id, GEN_10)
    node T_1253 = eq(arb.io_out_bits_header_dst, UInt<2>("h0"))
    node T_1254 = and(arb.io_out_valid, T_1253)
    node T_1256 = eq(arb.io_out_bits_header_dst, UInt<2>("h1"))
    node T_1257 = and(arb.io_out_valid, T_1256)
    node T_1259 = eq(arb.io_out_bits_header_dst, UInt<2>("h2"))
    node T_1260 = and(arb.io_out_valid, T_1259)
    node T_1262 = eq(arb.io_out_bits_header_dst, UInt<2>("h3"))
    node T_1263 = and(arb.io_out_valid, T_1262)
    io_in_0_ready <= arb.io_in_0_ready
    io_in_1_ready <= arb.io_in_1_ready
    io_in_2_ready <= arb.io_in_2_ready
    io_in_3_ready <= arb.io_in_3_ready
    io_out_0_valid <= T_1254
    io_out_0_bits_header_src <= arb.io_out_bits_header_src
    io_out_0_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_0_bits_payload_manager_xact_id <= arb.io_out_bits_payload_manager_xact_id
    io_out_1_valid <= T_1257
    io_out_1_bits_header_src <= arb.io_out_bits_header_src
    io_out_1_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_1_bits_payload_manager_xact_id <= arb.io_out_bits_payload_manager_xact_id
    io_out_2_valid <= T_1260
    io_out_2_bits_header_src <= arb.io_out_bits_header_src
    io_out_2_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_2_bits_payload_manager_xact_id <= arb.io_out_bits_payload_manager_xact_id
    io_out_3_valid <= T_1263
    io_out_3_bits_header_src <= arb.io_out_bits_header_src
    io_out_3_bits_header_dst <= arb.io_out_bits_header_dst
    io_out_3_bits_payload_manager_xact_id <= arb.io_out_bits_payload_manager_xact_id
    arb.io_in_0_valid <= io_in_0_valid
    arb.io_in_0_bits_header_src <= io_in_0_bits_header_src
    arb.io_in_0_bits_header_dst <= io_in_0_bits_header_dst
    arb.io_in_0_bits_payload_manager_xact_id <= io_in_0_bits_payload_manager_xact_id
    arb.io_in_1_valid <= io_in_1_valid
    arb.io_in_1_bits_header_src <= io_in_1_bits_header_src
    arb.io_in_1_bits_header_dst <= io_in_1_bits_header_dst
    arb.io_in_1_bits_payload_manager_xact_id <= io_in_1_bits_payload_manager_xact_id
    arb.io_in_2_valid <= io_in_2_valid
    arb.io_in_2_bits_header_src <= io_in_2_bits_header_src
    arb.io_in_2_bits_header_dst <= io_in_2_bits_header_dst
    arb.io_in_2_bits_payload_manager_xact_id <= io_in_2_bits_payload_manager_xact_id
    arb.io_in_3_valid <= io_in_3_valid
    arb.io_in_3_bits_header_src <= io_in_3_bits_header_src
    arb.io_in_3_bits_header_dst <= io_in_3_bits_header_dst
    arb.io_in_3_bits_payload_manager_xact_id <= io_in_3_bits_payload_manager_xact_id
    arb.io_out_ready <= GEN_0_ready
    GEN_0_ready <= GEN_11
    GEN_0_valid <= GEN_12
    GEN_0_bits_header_src <= GEN_13
    GEN_0_bits_header_dst <= GEN_14
    GEN_0_bits_payload_manager_xact_id <= GEN_15

  module PortedTileLinkCrossbar :
    input clk : Clock
    input reset : UInt<1>
    output io_clients_cached_0_acquire_ready : UInt<1>
    input io_clients_cached_0_acquire_valid : UInt<1>
    input io_clients_cached_0_acquire_bits_addr_block : UInt<26>
    input io_clients_cached_0_acquire_bits_client_xact_id : UInt<1>
    input io_clients_cached_0_acquire_bits_addr_beat : UInt<3>
    input io_clients_cached_0_acquire_bits_is_builtin_type : UInt<1>
    input io_clients_cached_0_acquire_bits_a_type : UInt<3>
    input io_clients_cached_0_acquire_bits_union : UInt<11>
    input io_clients_cached_0_acquire_bits_data : UInt<64>
    input io_clients_cached_0_probe_ready : UInt<1>
    output io_clients_cached_0_probe_valid : UInt<1>
    output io_clients_cached_0_probe_bits_addr_block : UInt<26>
    output io_clients_cached_0_probe_bits_p_type : UInt<2>
    output io_clients_cached_0_release_ready : UInt<1>
    input io_clients_cached_0_release_valid : UInt<1>
    input io_clients_cached_0_release_bits_addr_beat : UInt<3>
    input io_clients_cached_0_release_bits_addr_block : UInt<26>
    input io_clients_cached_0_release_bits_client_xact_id : UInt<1>
    input io_clients_cached_0_release_bits_voluntary : UInt<1>
    input io_clients_cached_0_release_bits_r_type : UInt<3>
    input io_clients_cached_0_release_bits_data : UInt<64>
    input io_clients_cached_0_grant_ready : UInt<1>
    output io_clients_cached_0_grant_valid : UInt<1>
    output io_clients_cached_0_grant_bits_addr_beat : UInt<3>
    output io_clients_cached_0_grant_bits_client_xact_id : UInt<1>
    output io_clients_cached_0_grant_bits_manager_xact_id : UInt<4>
    output io_clients_cached_0_grant_bits_is_builtin_type : UInt<1>
    output io_clients_cached_0_grant_bits_g_type : UInt<4>
    output io_clients_cached_0_grant_bits_data : UInt<64>
    output io_clients_cached_0_grant_bits_manager_id : UInt<1>
    output io_clients_cached_0_finish_ready : UInt<1>
    input io_clients_cached_0_finish_valid : UInt<1>
    input io_clients_cached_0_finish_bits_manager_xact_id : UInt<4>
    input io_clients_cached_0_finish_bits_manager_id : UInt<1>
    output io_clients_uncached_0_acquire_ready : UInt<1>
    input io_clients_uncached_0_acquire_valid : UInt<1>
    input io_clients_uncached_0_acquire_bits_addr_block : UInt<26>
    input io_clients_uncached_0_acquire_bits_client_xact_id : UInt<1>
    input io_clients_uncached_0_acquire_bits_addr_beat : UInt<3>
    input io_clients_uncached_0_acquire_bits_is_builtin_type : UInt<1>
    input io_clients_uncached_0_acquire_bits_a_type : UInt<3>
    input io_clients_uncached_0_acquire_bits_union : UInt<11>
    input io_clients_uncached_0_acquire_bits_data : UInt<64>
    input io_clients_uncached_0_grant_ready : UInt<1>
    output io_clients_uncached_0_grant_valid : UInt<1>
    output io_clients_uncached_0_grant_bits_addr_beat : UInt<3>
    output io_clients_uncached_0_grant_bits_client_xact_id : UInt<1>
    output io_clients_uncached_0_grant_bits_manager_xact_id : UInt<4>
    output io_clients_uncached_0_grant_bits_is_builtin_type : UInt<1>
    output io_clients_uncached_0_grant_bits_g_type : UInt<4>
    output io_clients_uncached_0_grant_bits_data : UInt<64>
    input io_managers_0_acquire_ready : UInt<1>
    output io_managers_0_acquire_valid : UInt<1>
    output io_managers_0_acquire_bits_addr_block : UInt<26>
    output io_managers_0_acquire_bits_client_xact_id : UInt<1>
    output io_managers_0_acquire_bits_addr_beat : UInt<3>
    output io_managers_0_acquire_bits_is_builtin_type : UInt<1>
    output io_managers_0_acquire_bits_a_type : UInt<3>
    output io_managers_0_acquire_bits_union : UInt<11>
    output io_managers_0_acquire_bits_data : UInt<64>
    output io_managers_0_acquire_bits_client_id : UInt<1>
    output io_managers_0_grant_ready : UInt<1>
    input io_managers_0_grant_valid : UInt<1>
    input io_managers_0_grant_bits_addr_beat : UInt<3>
    input io_managers_0_grant_bits_client_xact_id : UInt<1>
    input io_managers_0_grant_bits_manager_xact_id : UInt<4>
    input io_managers_0_grant_bits_is_builtin_type : UInt<1>
    input io_managers_0_grant_bits_g_type : UInt<4>
    input io_managers_0_grant_bits_data : UInt<64>
    input io_managers_0_grant_bits_client_id : UInt<1>
    input io_managers_0_finish_ready : UInt<1>
    output io_managers_0_finish_valid : UInt<1>
    output io_managers_0_finish_bits_manager_xact_id : UInt<4>
    output io_managers_0_probe_ready : UInt<1>
    input io_managers_0_probe_valid : UInt<1>
    input io_managers_0_probe_bits_addr_block : UInt<26>
    input io_managers_0_probe_bits_p_type : UInt<2>
    input io_managers_0_probe_bits_client_id : UInt<1>
    input io_managers_0_release_ready : UInt<1>
    output io_managers_0_release_valid : UInt<1>
    output io_managers_0_release_bits_addr_beat : UInt<3>
    output io_managers_0_release_bits_addr_block : UInt<26>
    output io_managers_0_release_bits_client_xact_id : UInt<1>
    output io_managers_0_release_bits_voluntary : UInt<1>
    output io_managers_0_release_bits_r_type : UInt<3>
    output io_managers_0_release_bits_data : UInt<64>
    output io_managers_0_release_bits_client_id : UInt<1>
    input io_managers_1_acquire_ready : UInt<1>
    output io_managers_1_acquire_valid : UInt<1>
    output io_managers_1_acquire_bits_addr_block : UInt<26>
    output io_managers_1_acquire_bits_client_xact_id : UInt<1>
    output io_managers_1_acquire_bits_addr_beat : UInt<3>
    output io_managers_1_acquire_bits_is_builtin_type : UInt<1>
    output io_managers_1_acquire_bits_a_type : UInt<3>
    output io_managers_1_acquire_bits_union : UInt<11>
    output io_managers_1_acquire_bits_data : UInt<64>
    output io_managers_1_acquire_bits_client_id : UInt<1>
    output io_managers_1_grant_ready : UInt<1>
    input io_managers_1_grant_valid : UInt<1>
    input io_managers_1_grant_bits_addr_beat : UInt<3>
    input io_managers_1_grant_bits_client_xact_id : UInt<1>
    input io_managers_1_grant_bits_manager_xact_id : UInt<4>
    input io_managers_1_grant_bits_is_builtin_type : UInt<1>
    input io_managers_1_grant_bits_g_type : UInt<4>
    input io_managers_1_grant_bits_data : UInt<64>
    input io_managers_1_grant_bits_client_id : UInt<1>
    input io_managers_1_finish_ready : UInt<1>
    output io_managers_1_finish_valid : UInt<1>
    output io_managers_1_finish_bits_manager_xact_id : UInt<4>
    output io_managers_1_probe_ready : UInt<1>
    input io_managers_1_probe_valid : UInt<1>
    input io_managers_1_probe_bits_addr_block : UInt<26>
    input io_managers_1_probe_bits_p_type : UInt<2>
    input io_managers_1_probe_bits_client_id : UInt<1>
    input io_managers_1_release_ready : UInt<1>
    output io_managers_1_release_valid : UInt<1>
    output io_managers_1_release_bits_addr_beat : UInt<3>
    output io_managers_1_release_bits_addr_block : UInt<26>
    output io_managers_1_release_bits_client_xact_id : UInt<1>
    output io_managers_1_release_bits_voluntary : UInt<1>
    output io_managers_1_release_bits_r_type : UInt<3>
    output io_managers_1_release_bits_data : UInt<64>
    output io_managers_1_release_bits_client_id : UInt<1>
  
    inst TileLinkEnqueuer_4 of TileLinkEnqueuer
    inst ClientTileLinkNetworkPort_1 of ClientTileLinkNetworkPort
    inst TileLinkEnqueuer_1_1 of TileLinkEnqueuer_1
    inst ClientUncachedTileLinkNetworkPort_1 of ClientUncachedTileLinkNetworkPort
    inst ManagerTileLinkNetworkPort_2 of ManagerTileLinkNetworkPort
    inst TileLinkEnqueuer_2_1 of TileLinkEnqueuer_2
    inst ManagerTileLinkNetworkPort_1_1 of ManagerTileLinkNetworkPort_1
    inst TileLinkEnqueuer_3_1 of TileLinkEnqueuer_2
    inst acqNet of BasicBus
    inst relNet of BasicBus_1
    inst prbNet of BasicBus_2
    inst gntNet of BasicBus_3
    inst ackNet of BasicBus_4
    wire T_12724_ready : UInt<1>
    wire T_12724_valid : UInt<1>
    wire T_12724_bits_header_src : UInt<2>
    wire T_12724_bits_header_dst : UInt<2>
    wire T_12724_bits_payload_addr_block : UInt<26>
    wire T_12724_bits_payload_client_xact_id : UInt<1>
    wire T_12724_bits_payload_addr_beat : UInt<3>
    wire T_12724_bits_payload_is_builtin_type : UInt<1>
    wire T_12724_bits_payload_a_type : UInt<3>
    wire T_12724_bits_payload_union : UInt<11>
    wire T_12724_bits_payload_data : UInt<64>
    node T_12952 = sub(acqNet.io_out_0_bits_header_src, UInt<2>("h2"))
    node T_12953 = tail(T_12952, 1)
    wire T_13294_ready : UInt<1>
    wire T_13294_valid : UInt<1>
    wire T_13294_bits_header_src : UInt<2>
    wire T_13294_bits_header_dst : UInt<2>
    wire T_13294_bits_payload_addr_block : UInt<26>
    wire T_13294_bits_payload_client_xact_id : UInt<1>
    wire T_13294_bits_payload_addr_beat : UInt<3>
    wire T_13294_bits_payload_is_builtin_type : UInt<1>
    wire T_13294_bits_payload_a_type : UInt<3>
    wire T_13294_bits_payload_union : UInt<11>
    wire T_13294_bits_payload_data : UInt<64>
    node T_13522 = sub(acqNet.io_out_1_bits_header_src, UInt<2>("h2"))
    node T_13523 = tail(T_13522, 1)
    wire T_13624_ready : UInt<1>
    wire T_13624_valid : UInt<1>
    wire T_13624_bits_header_src : UInt<2>
    wire T_13624_bits_header_dst : UInt<2>
    wire T_13624_bits_payload_addr_block : UInt<26>
    wire T_13624_bits_payload_client_xact_id : UInt<1>
    wire T_13624_bits_payload_addr_beat : UInt<3>
    wire T_13624_bits_payload_is_builtin_type : UInt<1>
    wire T_13624_bits_payload_a_type : UInt<3>
    wire T_13624_bits_payload_union : UInt<11>
    wire T_13624_bits_payload_data : UInt<64>
    node T_13692 = add(TileLinkEnqueuer_4.io_manager_acquire_bits_header_src, UInt<2>("h2"))
    node T_13693 = tail(T_13692, 1)
    wire T_13794_ready : UInt<1>
    wire T_13794_valid : UInt<1>
    wire T_13794_bits_header_src : UInt<2>
    wire T_13794_bits_header_dst : UInt<2>
    wire T_13794_bits_payload_addr_block : UInt<26>
    wire T_13794_bits_payload_client_xact_id : UInt<1>
    wire T_13794_bits_payload_addr_beat : UInt<3>
    wire T_13794_bits_payload_is_builtin_type : UInt<1>
    wire T_13794_bits_payload_a_type : UInt<3>
    wire T_13794_bits_payload_union : UInt<11>
    wire T_13794_bits_payload_data : UInt<64>
    node T_13862 = add(TileLinkEnqueuer_1_1.io_manager_acquire_bits_header_src, UInt<2>("h2"))
    node T_13863 = tail(T_13862, 1)
    wire T_14201_ready : UInt<1>
    wire T_14201_valid : UInt<1>
    wire T_14201_bits_header_src : UInt<2>
    wire T_14201_bits_header_dst : UInt<2>
    wire T_14201_bits_payload_addr_beat : UInt<3>
    wire T_14201_bits_payload_addr_block : UInt<26>
    wire T_14201_bits_payload_client_xact_id : UInt<1>
    wire T_14201_bits_payload_voluntary : UInt<1>
    wire T_14201_bits_payload_r_type : UInt<3>
    wire T_14201_bits_payload_data : UInt<64>
    node T_14427 = sub(relNet.io_out_0_bits_header_src, UInt<2>("h2"))
    node T_14428 = tail(T_14427, 1)
    wire T_14766_ready : UInt<1>
    wire T_14766_valid : UInt<1>
    wire T_14766_bits_header_src : UInt<2>
    wire T_14766_bits_header_dst : UInt<2>
    wire T_14766_bits_payload_addr_beat : UInt<3>
    wire T_14766_bits_payload_addr_block : UInt<26>
    wire T_14766_bits_payload_client_xact_id : UInt<1>
    wire T_14766_bits_payload_voluntary : UInt<1>
    wire T_14766_bits_payload_r_type : UInt<3>
    wire T_14766_bits_payload_data : UInt<64>
    node T_14992 = sub(relNet.io_out_1_bits_header_src, UInt<2>("h2"))
    node T_14993 = tail(T_14992, 1)
    wire T_15091_ready : UInt<1>
    wire T_15091_valid : UInt<1>
    wire T_15091_bits_header_src : UInt<2>
    wire T_15091_bits_header_dst : UInt<2>
    wire T_15091_bits_payload_addr_beat : UInt<3>
    wire T_15091_bits_payload_addr_block : UInt<26>
    wire T_15091_bits_payload_client_xact_id : UInt<1>
    wire T_15091_bits_payload_voluntary : UInt<1>
    wire T_15091_bits_payload_r_type : UInt<3>
    wire T_15091_bits_payload_data : UInt<64>
    node T_15157 = add(TileLinkEnqueuer_4.io_manager_release_bits_header_src, UInt<2>("h2"))
    node T_15158 = tail(T_15157, 1)
    wire T_15256_ready : UInt<1>
    wire T_15256_valid : UInt<1>
    wire T_15256_bits_header_src : UInt<2>
    wire T_15256_bits_header_dst : UInt<2>
    wire T_15256_bits_payload_addr_beat : UInt<3>
    wire T_15256_bits_payload_addr_block : UInt<26>
    wire T_15256_bits_payload_client_xact_id : UInt<1>
    wire T_15256_bits_payload_voluntary : UInt<1>
    wire T_15256_bits_payload_r_type : UInt<3>
    wire T_15256_bits_payload_data : UInt<64>
    node T_15322 = add(TileLinkEnqueuer_1_1.io_manager_release_bits_header_src, UInt<2>("h2"))
    node T_15323 = tail(T_15322, 1)
    wire T_15409_ready : UInt<1>
    wire T_15409_valid : UInt<1>
    wire T_15409_bits_header_src : UInt<2>
    wire T_15409_bits_header_dst : UInt<2>
    wire T_15409_bits_payload_addr_block : UInt<26>
    wire T_15409_bits_payload_p_type : UInt<2>
    node T_15467 = add(TileLinkEnqueuer_2_1.io_client_probe_bits_header_dst, UInt<2>("h2"))
    node T_15468 = tail(T_15467, 1)
    wire T_15554_ready : UInt<1>
    wire T_15554_valid : UInt<1>
    wire T_15554_bits_header_src : UInt<2>
    wire T_15554_bits_header_dst : UInt<2>
    wire T_15554_bits_payload_addr_block : UInt<26>
    wire T_15554_bits_payload_p_type : UInt<2>
    node T_15612 = add(TileLinkEnqueuer_3_1.io_client_probe_bits_header_dst, UInt<2>("h2"))
    node T_15613 = tail(T_15612, 1)
    wire T_15939_ready : UInt<1>
    wire T_15939_valid : UInt<1>
    wire T_15939_bits_header_src : UInt<2>
    wire T_15939_bits_header_dst : UInt<2>
    wire T_15939_bits_payload_addr_block : UInt<26>
    wire T_15939_bits_payload_p_type : UInt<2>
    node T_16157 = sub(prbNet.io_out_2_bits_header_dst, UInt<2>("h2"))
    node T_16158 = tail(T_16157, 1)
    wire T_16484_ready : UInt<1>
    wire T_16484_valid : UInt<1>
    wire T_16484_bits_header_src : UInt<2>
    wire T_16484_bits_header_dst : UInt<2>
    wire T_16484_bits_payload_addr_block : UInt<26>
    wire T_16484_bits_payload_p_type : UInt<2>
    node T_16702 = sub(prbNet.io_out_3_bits_header_dst, UInt<2>("h2"))
    node T_16703 = tail(T_16702, 1)
    wire T_16801_ready : UInt<1>
    wire T_16801_valid : UInt<1>
    wire T_16801_bits_header_src : UInt<2>
    wire T_16801_bits_header_dst : UInt<2>
    wire T_16801_bits_payload_addr_beat : UInt<3>
    wire T_16801_bits_payload_client_xact_id : UInt<1>
    wire T_16801_bits_payload_manager_xact_id : UInt<4>
    wire T_16801_bits_payload_is_builtin_type : UInt<1>
    wire T_16801_bits_payload_g_type : UInt<4>
    wire T_16801_bits_payload_data : UInt<64>
    node T_16867 = add(TileLinkEnqueuer_2_1.io_client_grant_bits_header_dst, UInt<2>("h2"))
    node T_16868 = tail(T_16867, 1)
    wire T_16966_ready : UInt<1>
    wire T_16966_valid : UInt<1>
    wire T_16966_bits_header_src : UInt<2>
    wire T_16966_bits_header_dst : UInt<2>
    wire T_16966_bits_payload_addr_beat : UInt<3>
    wire T_16966_bits_payload_client_xact_id : UInt<1>
    wire T_16966_bits_payload_manager_xact_id : UInt<4>
    wire T_16966_bits_payload_is_builtin_type : UInt<1>
    wire T_16966_bits_payload_g_type : UInt<4>
    wire T_16966_bits_payload_data : UInt<64>
    node T_17032 = add(TileLinkEnqueuer_3_1.io_client_grant_bits_header_dst, UInt<2>("h2"))
    node T_17033 = tail(T_17032, 1)
    wire T_17371_ready : UInt<1>
    wire T_17371_valid : UInt<1>
    wire T_17371_bits_header_src : UInt<2>
    wire T_17371_bits_header_dst : UInt<2>
    wire T_17371_bits_payload_addr_beat : UInt<3>
    wire T_17371_bits_payload_client_xact_id : UInt<1>
    wire T_17371_bits_payload_manager_xact_id : UInt<4>
    wire T_17371_bits_payload_is_builtin_type : UInt<1>
    wire T_17371_bits_payload_g_type : UInt<4>
    wire T_17371_bits_payload_data : UInt<64>
    node T_17597 = sub(gntNet.io_out_2_bits_header_dst, UInt<2>("h2"))
    node T_17598 = tail(T_17597, 1)
    wire T_17936_ready : UInt<1>
    wire T_17936_valid : UInt<1>
    wire T_17936_bits_header_src : UInt<2>
    wire T_17936_bits_header_dst : UInt<2>
    wire T_17936_bits_payload_addr_beat : UInt<3>
    wire T_17936_bits_payload_client_xact_id : UInt<1>
    wire T_17936_bits_payload_manager_xact_id : UInt<4>
    wire T_17936_bits_payload_is_builtin_type : UInt<1>
    wire T_17936_bits_payload_g_type : UInt<4>
    wire T_17936_bits_payload_data : UInt<64>
    node T_18162 = sub(gntNet.io_out_3_bits_header_dst, UInt<2>("h2"))
    node T_18163 = tail(T_18162, 1)
    wire T_18486_ready : UInt<1>
    wire T_18486_valid : UInt<1>
    wire T_18486_bits_header_src : UInt<2>
    wire T_18486_bits_header_dst : UInt<2>
    wire T_18486_bits_payload_manager_xact_id : UInt<4>
    node T_18702 = sub(ackNet.io_out_0_bits_header_src, UInt<2>("h2"))
    node T_18703 = tail(T_18702, 1)
    wire T_19026_ready : UInt<1>
    wire T_19026_valid : UInt<1>
    wire T_19026_bits_header_src : UInt<2>
    wire T_19026_bits_header_dst : UInt<2>
    wire T_19026_bits_payload_manager_xact_id : UInt<4>
    node T_19242 = sub(ackNet.io_out_1_bits_header_src, UInt<2>("h2"))
    node T_19243 = tail(T_19242, 1)
    wire T_19326_ready : UInt<1>
    wire T_19326_valid : UInt<1>
    wire T_19326_bits_header_src : UInt<2>
    wire T_19326_bits_header_dst : UInt<2>
    wire T_19326_bits_payload_manager_xact_id : UInt<4>
    node T_19382 = add(TileLinkEnqueuer_4.io_manager_finish_bits_header_src, UInt<2>("h2"))
    node T_19383 = tail(T_19382, 1)
    wire T_19466_ready : UInt<1>
    wire T_19466_valid : UInt<1>
    wire T_19466_bits_header_src : UInt<2>
    wire T_19466_bits_header_dst : UInt<2>
    wire T_19466_bits_payload_manager_xact_id : UInt<4>
    node T_19522 = add(TileLinkEnqueuer_1_1.io_manager_finish_bits_header_src, UInt<2>("h2"))
    node T_19523 = tail(T_19522, 1)
    io_clients_cached_0_acquire_ready <= ClientTileLinkNetworkPort_1.io_client_acquire_ready
    io_clients_cached_0_probe_valid <= ClientTileLinkNetworkPort_1.io_client_probe_valid
    io_clients_cached_0_probe_bits_addr_block <= ClientTileLinkNetworkPort_1.io_client_probe_bits_addr_block
    io_clients_cached_0_probe_bits_p_type <= ClientTileLinkNetworkPort_1.io_client_probe_bits_p_type
    io_clients_cached_0_release_ready <= ClientTileLinkNetworkPort_1.io_client_release_ready
    io_clients_cached_0_grant_valid <= ClientTileLinkNetworkPort_1.io_client_grant_valid
    io_clients_cached_0_grant_bits_addr_beat <= ClientTileLinkNetworkPort_1.io_client_grant_bits_addr_beat
    io_clients_cached_0_grant_bits_client_xact_id <= ClientTileLinkNetworkPort_1.io_client_grant_bits_client_xact_id
    io_clients_cached_0_grant_bits_manager_xact_id <= ClientTileLinkNetworkPort_1.io_client_grant_bits_manager_xact_id
    io_clients_cached_0_grant_bits_is_builtin_type <= ClientTileLinkNetworkPort_1.io_client_grant_bits_is_builtin_type
    io_clients_cached_0_grant_bits_g_type <= ClientTileLinkNetworkPort_1.io_client_grant_bits_g_type
    io_clients_cached_0_grant_bits_data <= ClientTileLinkNetworkPort_1.io_client_grant_bits_data
    io_clients_cached_0_grant_bits_manager_id <= ClientTileLinkNetworkPort_1.io_client_grant_bits_manager_id
    io_clients_cached_0_finish_ready <= ClientTileLinkNetworkPort_1.io_client_finish_ready
    io_clients_uncached_0_acquire_ready <= ClientUncachedTileLinkNetworkPort_1.io_client_acquire_ready
    io_clients_uncached_0_grant_valid <= ClientUncachedTileLinkNetworkPort_1.io_client_grant_valid
    io_clients_uncached_0_grant_bits_addr_beat <= ClientUncachedTileLinkNetworkPort_1.io_client_grant_bits_addr_beat
    io_clients_uncached_0_grant_bits_client_xact_id <= ClientUncachedTileLinkNetworkPort_1.io_client_grant_bits_client_xact_id
    io_clients_uncached_0_grant_bits_manager_xact_id <= ClientUncachedTileLinkNetworkPort_1.io_client_grant_bits_manager_xact_id
    io_clients_uncached_0_grant_bits_is_builtin_type <= ClientUncachedTileLinkNetworkPort_1.io_client_grant_bits_is_builtin_type
    io_clients_uncached_0_grant_bits_g_type <= ClientUncachedTileLinkNetworkPort_1.io_client_grant_bits_g_type
    io_clients_uncached_0_grant_bits_data <= ClientUncachedTileLinkNetworkPort_1.io_client_grant_bits_data
    io_managers_0_acquire_valid <= ManagerTileLinkNetworkPort_2.io_manager_acquire_valid
    io_managers_0_acquire_bits_addr_block <= ManagerTileLinkNetworkPort_2.io_manager_acquire_bits_addr_block
    io_managers_0_acquire_bits_client_xact_id <= ManagerTileLinkNetworkPort_2.io_manager_acquire_bits_client_xact_id
    io_managers_0_acquire_bits_addr_beat <= ManagerTileLinkNetworkPort_2.io_manager_acquire_bits_addr_beat
    io_managers_0_acquire_bits_is_builtin_type <= ManagerTileLinkNetworkPort_2.io_manager_acquire_bits_is_builtin_type
    io_managers_0_acquire_bits_a_type <= ManagerTileLinkNetworkPort_2.io_manager_acquire_bits_a_type
    io_managers_0_acquire_bits_union <= ManagerTileLinkNetworkPort_2.io_manager_acquire_bits_union
    io_managers_0_acquire_bits_data <= ManagerTileLinkNetworkPort_2.io_manager_acquire_bits_data
    io_managers_0_acquire_bits_client_id <= ManagerTileLinkNetworkPort_2.io_manager_acquire_bits_client_id
    io_managers_0_grant_ready <= ManagerTileLinkNetworkPort_2.io_manager_grant_ready
    io_managers_0_finish_valid <= ManagerTileLinkNetworkPort_2.io_manager_finish_valid
    io_managers_0_finish_bits_manager_xact_id <= ManagerTileLinkNetworkPort_2.io_manager_finish_bits_manager_xact_id
    io_managers_0_probe_ready <= ManagerTileLinkNetworkPort_2.io_manager_probe_ready
    io_managers_0_release_valid <= ManagerTileLinkNetworkPort_2.io_manager_release_valid
    io_managers_0_release_bits_addr_beat <= ManagerTileLinkNetworkPort_2.io_manager_release_bits_addr_beat
    io_managers_0_release_bits_addr_block <= ManagerTileLinkNetworkPort_2.io_manager_release_bits_addr_block
    io_managers_0_release_bits_client_xact_id <= ManagerTileLinkNetworkPort_2.io_manager_release_bits_client_xact_id
    io_managers_0_release_bits_voluntary <= ManagerTileLinkNetworkPort_2.io_manager_release_bits_voluntary
    io_managers_0_release_bits_r_type <= ManagerTileLinkNetworkPort_2.io_manager_release_bits_r_type
    io_managers_0_release_bits_data <= ManagerTileLinkNetworkPort_2.io_manager_release_bits_data
    io_managers_0_release_bits_client_id <= ManagerTileLinkNetworkPort_2.io_manager_release_bits_client_id
    io_managers_1_acquire_valid <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_valid
    io_managers_1_acquire_bits_addr_block <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_bits_addr_block
    io_managers_1_acquire_bits_client_xact_id <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_bits_client_xact_id
    io_managers_1_acquire_bits_addr_beat <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_bits_addr_beat
    io_managers_1_acquire_bits_is_builtin_type <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_bits_is_builtin_type
    io_managers_1_acquire_bits_a_type <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_bits_a_type
    io_managers_1_acquire_bits_union <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_bits_union
    io_managers_1_acquire_bits_data <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_bits_data
    io_managers_1_acquire_bits_client_id <= ManagerTileLinkNetworkPort_1_1.io_manager_acquire_bits_client_id
    io_managers_1_grant_ready <= ManagerTileLinkNetworkPort_1_1.io_manager_grant_ready
    io_managers_1_finish_valid <= ManagerTileLinkNetworkPort_1_1.io_manager_finish_valid
    io_managers_1_finish_bits_manager_xact_id <= ManagerTileLinkNetworkPort_1_1.io_manager_finish_bits_manager_xact_id
    io_managers_1_probe_ready <= ManagerTileLinkNetworkPort_1_1.io_manager_probe_ready
    io_managers_1_release_valid <= ManagerTileLinkNetworkPort_1_1.io_manager_release_valid
    io_managers_1_release_bits_addr_beat <= ManagerTileLinkNetworkPort_1_1.io_manager_release_bits_addr_beat
    io_managers_1_release_bits_addr_block <= ManagerTileLinkNetworkPort_1_1.io_manager_release_bits_addr_block
    io_managers_1_release_bits_client_xact_id <= ManagerTileLinkNetworkPort_1_1.io_manager_release_bits_client_xact_id
    io_managers_1_release_bits_voluntary <= ManagerTileLinkNetworkPort_1_1.io_manager_release_bits_voluntary
    io_managers_1_release_bits_r_type <= ManagerTileLinkNetworkPort_1_1.io_manager_release_bits_r_type
    io_managers_1_release_bits_data <= ManagerTileLinkNetworkPort_1_1.io_manager_release_bits_data
    io_managers_1_release_bits_client_id <= ManagerTileLinkNetworkPort_1_1.io_manager_release_bits_client_id
    TileLinkEnqueuer_4.io_client_acquire_valid <= ClientTileLinkNetworkPort_1.io_network_acquire_valid
    TileLinkEnqueuer_4.io_client_acquire_bits_header_src <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_header_src
    TileLinkEnqueuer_4.io_client_acquire_bits_header_dst <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_header_dst
    TileLinkEnqueuer_4.io_client_acquire_bits_payload_addr_block <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_payload_addr_block
    TileLinkEnqueuer_4.io_client_acquire_bits_payload_client_xact_id <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_payload_client_xact_id
    TileLinkEnqueuer_4.io_client_acquire_bits_payload_addr_beat <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_payload_addr_beat
    TileLinkEnqueuer_4.io_client_acquire_bits_payload_is_builtin_type <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_payload_is_builtin_type
    TileLinkEnqueuer_4.io_client_acquire_bits_payload_a_type <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_payload_a_type
    TileLinkEnqueuer_4.io_client_acquire_bits_payload_union <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_payload_union
    TileLinkEnqueuer_4.io_client_acquire_bits_payload_data <= ClientTileLinkNetworkPort_1.io_network_acquire_bits_payload_data
    TileLinkEnqueuer_4.io_client_grant_ready <= ClientTileLinkNetworkPort_1.io_network_grant_ready
    TileLinkEnqueuer_4.io_client_finish_valid <= ClientTileLinkNetworkPort_1.io_network_finish_valid
    TileLinkEnqueuer_4.io_client_finish_bits_header_src <= ClientTileLinkNetworkPort_1.io_network_finish_bits_header_src
    TileLinkEnqueuer_4.io_client_finish_bits_header_dst <= ClientTileLinkNetworkPort_1.io_network_finish_bits_header_dst
    TileLinkEnqueuer_4.io_client_finish_bits_payload_manager_xact_id <= ClientTileLinkNetworkPort_1.io_network_finish_bits_payload_manager_xact_id
    TileLinkEnqueuer_4.io_client_probe_ready <= ClientTileLinkNetworkPort_1.io_network_probe_ready
    TileLinkEnqueuer_4.io_client_release_valid <= ClientTileLinkNetworkPort_1.io_network_release_valid
    TileLinkEnqueuer_4.io_client_release_bits_header_src <= ClientTileLinkNetworkPort_1.io_network_release_bits_header_src
    TileLinkEnqueuer_4.io_client_release_bits_header_dst <= ClientTileLinkNetworkPort_1.io_network_release_bits_header_dst
    TileLinkEnqueuer_4.io_client_release_bits_payload_addr_beat <= ClientTileLinkNetworkPort_1.io_network_release_bits_payload_addr_beat
    TileLinkEnqueuer_4.io_client_release_bits_payload_addr_block <= ClientTileLinkNetworkPort_1.io_network_release_bits_payload_addr_block
    TileLinkEnqueuer_4.io_client_release_bits_payload_client_xact_id <= ClientTileLinkNetworkPort_1.io_network_release_bits_payload_client_xact_id
    TileLinkEnqueuer_4.io_client_release_bits_payload_voluntary <= ClientTileLinkNetworkPort_1.io_network_release_bits_payload_voluntary
    TileLinkEnqueuer_4.io_client_release_bits_payload_r_type <= ClientTileLinkNetworkPort_1.io_network_release_bits_payload_r_type
    TileLinkEnqueuer_4.io_client_release_bits_payload_data <= ClientTileLinkNetworkPort_1.io_network_release_bits_payload_data
    TileLinkEnqueuer_4.io_manager_acquire_ready <= T_13624_ready
    TileLinkEnqueuer_4.io_manager_grant_valid <= T_17371_valid
    TileLinkEnqueuer_4.io_manager_grant_bits_header_src <= T_17371_bits_header_src
    TileLinkEnqueuer_4.io_manager_grant_bits_header_dst <= T_17371_bits_header_dst
    TileLinkEnqueuer_4.io_manager_grant_bits_payload_addr_beat <= T_17371_bits_payload_addr_beat
    TileLinkEnqueuer_4.io_manager_grant_bits_payload_client_xact_id <= T_17371_bits_payload_client_xact_id
    TileLinkEnqueuer_4.io_manager_grant_bits_payload_manager_xact_id <= T_17371_bits_payload_manager_xact_id
    TileLinkEnqueuer_4.io_manager_grant_bits_payload_is_builtin_type <= T_17371_bits_payload_is_builtin_type
    TileLinkEnqueuer_4.io_manager_grant_bits_payload_g_type <= T_17371_bits_payload_g_type
    TileLinkEnqueuer_4.io_manager_grant_bits_payload_data <= T_17371_bits_payload_data
    TileLinkEnqueuer_4.io_manager_finish_ready <= T_19326_ready
    TileLinkEnqueuer_4.io_manager_probe_valid <= T_15939_valid
    TileLinkEnqueuer_4.io_manager_probe_bits_header_src <= T_15939_bits_header_src
    TileLinkEnqueuer_4.io_manager_probe_bits_header_dst <= T_15939_bits_header_dst
    TileLinkEnqueuer_4.io_manager_probe_bits_payload_addr_block <= T_15939_bits_payload_addr_block
    TileLinkEnqueuer_4.io_manager_probe_bits_payload_p_type <= T_15939_bits_payload_p_type
    TileLinkEnqueuer_4.io_manager_release_ready <= T_15091_ready
    ClientTileLinkNetworkPort_1.io_client_acquire_valid <= io_clients_cached_0_acquire_valid
    ClientTileLinkNetworkPort_1.io_client_acquire_bits_addr_block <= io_clients_cached_0_acquire_bits_addr_block
    ClientTileLinkNetworkPort_1.io_client_acquire_bits_client_xact_id <= io_clients_cached_0_acquire_bits_client_xact_id
    ClientTileLinkNetworkPort_1.io_client_acquire_bits_addr_beat <= io_clients_cached_0_acquire_bits_addr_beat
    ClientTileLinkNetworkPort_1.io_client_acquire_bits_is_builtin_type <= io_clients_cached_0_acquire_bits_is_builtin_type
    ClientTileLinkNetworkPort_1.io_client_acquire_bits_a_type <= io_clients_cached_0_acquire_bits_a_type
    ClientTileLinkNetworkPort_1.io_client_acquire_bits_union <= io_clients_cached_0_acquire_bits_union
    ClientTileLinkNetworkPort_1.io_client_acquire_bits_data <= io_clients_cached_0_acquire_bits_data
    ClientTileLinkNetworkPort_1.io_client_probe_ready <= io_clients_cached_0_probe_ready
    ClientTileLinkNetworkPort_1.io_client_release_valid <= io_clients_cached_0_release_valid
    ClientTileLinkNetworkPort_1.io_client_release_bits_addr_beat <= io_clients_cached_0_release_bits_addr_beat
    ClientTileLinkNetworkPort_1.io_client_release_bits_addr_block <= io_clients_cached_0_release_bits_addr_block
    ClientTileLinkNetworkPort_1.io_client_release_bits_client_xact_id <= io_clients_cached_0_release_bits_client_xact_id
    ClientTileLinkNetworkPort_1.io_client_release_bits_voluntary <= io_clients_cached_0_release_bits_voluntary
    ClientTileLinkNetworkPort_1.io_client_release_bits_r_type <= io_clients_cached_0_release_bits_r_type
    ClientTileLinkNetworkPort_1.io_client_release_bits_data <= io_clients_cached_0_release_bits_data
    ClientTileLinkNetworkPort_1.io_client_grant_ready <= io_clients_cached_0_grant_ready
    ClientTileLinkNetworkPort_1.io_client_finish_valid <= io_clients_cached_0_finish_valid
    ClientTileLinkNetworkPort_1.io_client_finish_bits_manager_xact_id <= io_clients_cached_0_finish_bits_manager_xact_id
    ClientTileLinkNetworkPort_1.io_client_finish_bits_manager_id <= io_clients_cached_0_finish_bits_manager_id
    ClientTileLinkNetworkPort_1.io_network_acquire_ready <= TileLinkEnqueuer_4.io_client_acquire_ready
    ClientTileLinkNetworkPort_1.io_network_grant_valid <= TileLinkEnqueuer_4.io_client_grant_valid
    ClientTileLinkNetworkPort_1.io_network_grant_bits_header_src <= TileLinkEnqueuer_4.io_client_grant_bits_header_src
    ClientTileLinkNetworkPort_1.io_network_grant_bits_header_dst <= TileLinkEnqueuer_4.io_client_grant_bits_header_dst
    ClientTileLinkNetworkPort_1.io_network_grant_bits_payload_addr_beat <= TileLinkEnqueuer_4.io_client_grant_bits_payload_addr_beat
    ClientTileLinkNetworkPort_1.io_network_grant_bits_payload_client_xact_id <= TileLinkEnqueuer_4.io_client_grant_bits_payload_client_xact_id
    ClientTileLinkNetworkPort_1.io_network_grant_bits_payload_manager_xact_id <= TileLinkEnqueuer_4.io_client_grant_bits_payload_manager_xact_id
    ClientTileLinkNetworkPort_1.io_network_grant_bits_payload_is_builtin_type <= TileLinkEnqueuer_4.io_client_grant_bits_payload_is_builtin_type
    ClientTileLinkNetworkPort_1.io_network_grant_bits_payload_g_type <= TileLinkEnqueuer_4.io_client_grant_bits_payload_g_type
    ClientTileLinkNetworkPort_1.io_network_grant_bits_payload_data <= TileLinkEnqueuer_4.io_client_grant_bits_payload_data
    ClientTileLinkNetworkPort_1.io_network_finish_ready <= TileLinkEnqueuer_4.io_client_finish_ready
    ClientTileLinkNetworkPort_1.io_network_probe_valid <= TileLinkEnqueuer_4.io_client_probe_valid
    ClientTileLinkNetworkPort_1.io_network_probe_bits_header_src <= TileLinkEnqueuer_4.io_client_probe_bits_header_src
    ClientTileLinkNetworkPort_1.io_network_probe_bits_header_dst <= TileLinkEnqueuer_4.io_client_probe_bits_header_dst
    ClientTileLinkNetworkPort_1.io_network_probe_bits_payload_addr_block <= TileLinkEnqueuer_4.io_client_probe_bits_payload_addr_block
    ClientTileLinkNetworkPort_1.io_network_probe_bits_payload_p_type <= TileLinkEnqueuer_4.io_client_probe_bits_payload_p_type
    ClientTileLinkNetworkPort_1.io_network_release_ready <= TileLinkEnqueuer_4.io_client_release_ready
    TileLinkEnqueuer_1_1.io_client_acquire_valid <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_valid
    TileLinkEnqueuer_1_1.io_client_acquire_bits_header_src <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_header_src
    TileLinkEnqueuer_1_1.io_client_acquire_bits_header_dst <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_header_dst
    TileLinkEnqueuer_1_1.io_client_acquire_bits_payload_addr_block <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_payload_addr_block
    TileLinkEnqueuer_1_1.io_client_acquire_bits_payload_client_xact_id <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_payload_client_xact_id
    TileLinkEnqueuer_1_1.io_client_acquire_bits_payload_addr_beat <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_payload_addr_beat
    TileLinkEnqueuer_1_1.io_client_acquire_bits_payload_is_builtin_type <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_payload_is_builtin_type
    TileLinkEnqueuer_1_1.io_client_acquire_bits_payload_a_type <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_payload_a_type
    TileLinkEnqueuer_1_1.io_client_acquire_bits_payload_union <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_payload_union
    TileLinkEnqueuer_1_1.io_client_acquire_bits_payload_data <= ClientUncachedTileLinkNetworkPort_1.io_network_acquire_bits_payload_data
    TileLinkEnqueuer_1_1.io_client_grant_ready <= ClientUncachedTileLinkNetworkPort_1.io_network_grant_ready
    TileLinkEnqueuer_1_1.io_client_finish_valid <= ClientUncachedTileLinkNetworkPort_1.io_network_finish_valid
    TileLinkEnqueuer_1_1.io_client_finish_bits_header_src <= ClientUncachedTileLinkNetworkPort_1.io_network_finish_bits_header_src
    TileLinkEnqueuer_1_1.io_client_finish_bits_header_dst <= ClientUncachedTileLinkNetworkPort_1.io_network_finish_bits_header_dst
    TileLinkEnqueuer_1_1.io_client_finish_bits_payload_manager_xact_id <= ClientUncachedTileLinkNetworkPort_1.io_network_finish_bits_payload_manager_xact_id
    TileLinkEnqueuer_1_1.io_client_probe_ready <= ClientUncachedTileLinkNetworkPort_1.io_network_probe_ready
    TileLinkEnqueuer_1_1.io_client_release_valid <= ClientUncachedTileLinkNetworkPort_1.io_network_release_valid
    TileLinkEnqueuer_1_1.io_client_release_bits_header_src <= ClientUncachedTileLinkNetworkPort_1.io_network_release_bits_header_src
    TileLinkEnqueuer_1_1.io_client_release_bits_header_dst <= ClientUncachedTileLinkNetworkPort_1.io_network_release_bits_header_dst
    TileLinkEnqueuer_1_1.io_client_release_bits_payload_addr_beat <= ClientUncachedTileLinkNetworkPort_1.io_network_release_bits_payload_addr_beat
    TileLinkEnqueuer_1_1.io_client_release_bits_payload_addr_block <= ClientUncachedTileLinkNetworkPort_1.io_network_release_bits_payload_addr_block
    TileLinkEnqueuer_1_1.io_client_release_bits_payload_client_xact_id <= ClientUncachedTileLinkNetworkPort_1.io_network_release_bits_payload_client_xact_id
    TileLinkEnqueuer_1_1.io_client_release_bits_payload_voluntary <= ClientUncachedTileLinkNetworkPort_1.io_network_release_bits_payload_voluntary
    TileLinkEnqueuer_1_1.io_client_release_bits_payload_r_type <= ClientUncachedTileLinkNetworkPort_1.io_network_release_bits_payload_r_type
    TileLinkEnqueuer_1_1.io_client_release_bits_payload_data <= ClientUncachedTileLinkNetworkPort_1.io_network_release_bits_payload_data
    TileLinkEnqueuer_1_1.io_manager_acquire_ready <= T_13794_ready
    TileLinkEnqueuer_1_1.io_manager_grant_valid <= T_17936_valid
    TileLinkEnqueuer_1_1.io_manager_grant_bits_header_src <= T_17936_bits_header_src
    TileLinkEnqueuer_1_1.io_manager_grant_bits_header_dst <= T_17936_bits_header_dst
    TileLinkEnqueuer_1_1.io_manager_grant_bits_payload_addr_beat <= T_17936_bits_payload_addr_beat
    TileLinkEnqueuer_1_1.io_manager_grant_bits_payload_client_xact_id <= T_17936_bits_payload_client_xact_id
    TileLinkEnqueuer_1_1.io_manager_grant_bits_payload_manager_xact_id <= T_17936_bits_payload_manager_xact_id
    TileLinkEnqueuer_1_1.io_manager_grant_bits_payload_is_builtin_type <= T_17936_bits_payload_is_builtin_type
    TileLinkEnqueuer_1_1.io_manager_grant_bits_payload_g_type <= T_17936_bits_payload_g_type
    TileLinkEnqueuer_1_1.io_manager_grant_bits_payload_data <= T_17936_bits_payload_data
    TileLinkEnqueuer_1_1.io_manager_finish_ready <= T_19466_ready
    TileLinkEnqueuer_1_1.io_manager_probe_valid <= T_16484_valid
    TileLinkEnqueuer_1_1.io_manager_probe_bits_header_src <= T_16484_bits_header_src
    TileLinkEnqueuer_1_1.io_manager_probe_bits_header_dst <= T_16484_bits_header_dst
    TileLinkEnqueuer_1_1.io_manager_probe_bits_payload_addr_block <= T_16484_bits_payload_addr_block
    TileLinkEnqueuer_1_1.io_manager_probe_bits_payload_p_type <= T_16484_bits_payload_p_type
    TileLinkEnqueuer_1_1.io_manager_release_ready <= T_15256_ready
    ClientUncachedTileLinkNetworkPort_1.io_client_acquire_valid <= io_clients_uncached_0_acquire_valid
    ClientUncachedTileLinkNetworkPort_1.io_client_acquire_bits_addr_block <= io_clients_uncached_0_acquire_bits_addr_block
    ClientUncachedTileLinkNetworkPort_1.io_client_acquire_bits_client_xact_id <= io_clients_uncached_0_acquire_bits_client_xact_id
    ClientUncachedTileLinkNetworkPort_1.io_client_acquire_bits_addr_beat <= io_clients_uncached_0_acquire_bits_addr_beat
    ClientUncachedTileLinkNetworkPort_1.io_client_acquire_bits_is_builtin_type <= io_clients_uncached_0_acquire_bits_is_builtin_type
    ClientUncachedTileLinkNetworkPort_1.io_client_acquire_bits_a_type <= io_clients_uncached_0_acquire_bits_a_type
    ClientUncachedTileLinkNetworkPort_1.io_client_acquire_bits_union <= io_clients_uncached_0_acquire_bits_union
    ClientUncachedTileLinkNetworkPort_1.io_client_acquire_bits_data <= io_clients_uncached_0_acquire_bits_data
    ClientUncachedTileLinkNetworkPort_1.io_client_grant_ready <= io_clients_uncached_0_grant_ready
    ClientUncachedTileLinkNetworkPort_1.io_network_acquire_ready <= TileLinkEnqueuer_1_1.io_client_acquire_ready
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_valid <= TileLinkEnqueuer_1_1.io_client_grant_valid
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_bits_header_src <= TileLinkEnqueuer_1_1.io_client_grant_bits_header_src
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_bits_header_dst <= TileLinkEnqueuer_1_1.io_client_grant_bits_header_dst
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_bits_payload_addr_beat <= TileLinkEnqueuer_1_1.io_client_grant_bits_payload_addr_beat
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_bits_payload_client_xact_id <= TileLinkEnqueuer_1_1.io_client_grant_bits_payload_client_xact_id
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_bits_payload_manager_xact_id <= TileLinkEnqueuer_1_1.io_client_grant_bits_payload_manager_xact_id
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_bits_payload_is_builtin_type <= TileLinkEnqueuer_1_1.io_client_grant_bits_payload_is_builtin_type
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_bits_payload_g_type <= TileLinkEnqueuer_1_1.io_client_grant_bits_payload_g_type
    ClientUncachedTileLinkNetworkPort_1.io_network_grant_bits_payload_data <= TileLinkEnqueuer_1_1.io_client_grant_bits_payload_data
    ClientUncachedTileLinkNetworkPort_1.io_network_finish_ready <= TileLinkEnqueuer_1_1.io_client_finish_ready
    ClientUncachedTileLinkNetworkPort_1.io_network_probe_valid <= TileLinkEnqueuer_1_1.io_client_probe_valid
    ClientUncachedTileLinkNetworkPort_1.io_network_probe_bits_header_src <= TileLinkEnqueuer_1_1.io_client_probe_bits_header_src
    ClientUncachedTileLinkNetworkPort_1.io_network_probe_bits_header_dst <= TileLinkEnqueuer_1_1.io_client_probe_bits_header_dst
    ClientUncachedTileLinkNetworkPort_1.io_network_probe_bits_payload_addr_block <= TileLinkEnqueuer_1_1.io_client_probe_bits_payload_addr_block
    ClientUncachedTileLinkNetworkPort_1.io_network_probe_bits_payload_p_type <= TileLinkEnqueuer_1_1.io_client_probe_bits_payload_p_type
    ClientUncachedTileLinkNetworkPort_1.io_network_release_ready <= TileLinkEnqueuer_1_1.io_client_release_ready
    ManagerTileLinkNetworkPort_2.io_manager_acquire_ready <= io_managers_0_acquire_ready
    ManagerTileLinkNetworkPort_2.io_manager_grant_valid <= io_managers_0_grant_valid
    ManagerTileLinkNetworkPort_2.io_manager_grant_bits_addr_beat <= io_managers_0_grant_bits_addr_beat
    ManagerTileLinkNetworkPort_2.io_manager_grant_bits_client_xact_id <= io_managers_0_grant_bits_client_xact_id
    ManagerTileLinkNetworkPort_2.io_manager_grant_bits_manager_xact_id <= io_managers_0_grant_bits_manager_xact_id
    ManagerTileLinkNetworkPort_2.io_manager_grant_bits_is_builtin_type <= io_managers_0_grant_bits_is_builtin_type
    ManagerTileLinkNetworkPort_2.io_manager_grant_bits_g_type <= io_managers_0_grant_bits_g_type
    ManagerTileLinkNetworkPort_2.io_manager_grant_bits_data <= io_managers_0_grant_bits_data
    ManagerTileLinkNetworkPort_2.io_manager_grant_bits_client_id <= io_managers_0_grant_bits_client_id
    ManagerTileLinkNetworkPort_2.io_manager_finish_ready <= io_managers_0_finish_ready
    ManagerTileLinkNetworkPort_2.io_manager_probe_valid <= io_managers_0_probe_valid
    ManagerTileLinkNetworkPort_2.io_manager_probe_bits_addr_block <= io_managers_0_probe_bits_addr_block
    ManagerTileLinkNetworkPort_2.io_manager_probe_bits_p_type <= io_managers_0_probe_bits_p_type
    ManagerTileLinkNetworkPort_2.io_manager_probe_bits_client_id <= io_managers_0_probe_bits_client_id
    ManagerTileLinkNetworkPort_2.io_manager_release_ready <= io_managers_0_release_ready
    ManagerTileLinkNetworkPort_2.io_network_acquire_valid <= TileLinkEnqueuer_2_1.io_manager_acquire_valid
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_header_src <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_header_src
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_header_dst <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_header_dst
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_payload_addr_block <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_payload_addr_block
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_payload_client_xact_id <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_payload_client_xact_id
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_payload_addr_beat <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_payload_addr_beat
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_payload_is_builtin_type <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_payload_is_builtin_type
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_payload_a_type <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_payload_a_type
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_payload_union <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_payload_union
    ManagerTileLinkNetworkPort_2.io_network_acquire_bits_payload_data <= TileLinkEnqueuer_2_1.io_manager_acquire_bits_payload_data
    ManagerTileLinkNetworkPort_2.io_network_grant_ready <= TileLinkEnqueuer_2_1.io_manager_grant_ready
    ManagerTileLinkNetworkPort_2.io_network_finish_valid <= TileLinkEnqueuer_2_1.io_manager_finish_valid
    ManagerTileLinkNetworkPort_2.io_network_finish_bits_header_src <= TileLinkEnqueuer_2_1.io_manager_finish_bits_header_src
    ManagerTileLinkNetworkPort_2.io_network_finish_bits_header_dst <= TileLinkEnqueuer_2_1.io_manager_finish_bits_header_dst
    ManagerTileLinkNetworkPort_2.io_network_finish_bits_payload_manager_xact_id <= TileLinkEnqueuer_2_1.io_manager_finish_bits_payload_manager_xact_id
    ManagerTileLinkNetworkPort_2.io_network_probe_ready <= TileLinkEnqueuer_2_1.io_manager_probe_ready
    ManagerTileLinkNetworkPort_2.io_network_release_valid <= TileLinkEnqueuer_2_1.io_manager_release_valid
    ManagerTileLinkNetworkPort_2.io_network_release_bits_header_src <= TileLinkEnqueuer_2_1.io_manager_release_bits_header_src
    ManagerTileLinkNetworkPort_2.io_network_release_bits_header_dst <= TileLinkEnqueuer_2_1.io_manager_release_bits_header_dst
    ManagerTileLinkNetworkPort_2.io_network_release_bits_payload_addr_beat <= TileLinkEnqueuer_2_1.io_manager_release_bits_payload_addr_beat
    ManagerTileLinkNetworkPort_2.io_network_release_bits_payload_addr_block <= TileLinkEnqueuer_2_1.io_manager_release_bits_payload_addr_block
    ManagerTileLinkNetworkPort_2.io_network_release_bits_payload_client_xact_id <= TileLinkEnqueuer_2_1.io_manager_release_bits_payload_client_xact_id
    ManagerTileLinkNetworkPort_2.io_network_release_bits_payload_voluntary <= TileLinkEnqueuer_2_1.io_manager_release_bits_payload_voluntary
    ManagerTileLinkNetworkPort_2.io_network_release_bits_payload_r_type <= TileLinkEnqueuer_2_1.io_manager_release_bits_payload_r_type
    ManagerTileLinkNetworkPort_2.io_network_release_bits_payload_data <= TileLinkEnqueuer_2_1.io_manager_release_bits_payload_data
    TileLinkEnqueuer_2_1.io_client_acquire_valid <= T_12724_valid
    TileLinkEnqueuer_2_1.io_client_acquire_bits_header_src <= T_12724_bits_header_src
    TileLinkEnqueuer_2_1.io_client_acquire_bits_header_dst <= T_12724_bits_header_dst
    TileLinkEnqueuer_2_1.io_client_acquire_bits_payload_addr_block <= T_12724_bits_payload_addr_block
    TileLinkEnqueuer_2_1.io_client_acquire_bits_payload_client_xact_id <= T_12724_bits_payload_client_xact_id
    TileLinkEnqueuer_2_1.io_client_acquire_bits_payload_addr_beat <= T_12724_bits_payload_addr_beat
    TileLinkEnqueuer_2_1.io_client_acquire_bits_payload_is_builtin_type <= T_12724_bits_payload_is_builtin_type
    TileLinkEnqueuer_2_1.io_client_acquire_bits_payload_a_type <= T_12724_bits_payload_a_type
    TileLinkEnqueuer_2_1.io_client_acquire_bits_payload_union <= T_12724_bits_payload_union
    TileLinkEnqueuer_2_1.io_client_acquire_bits_payload_data <= T_12724_bits_payload_data
    TileLinkEnqueuer_2_1.io_client_grant_ready <= T_16801_ready
    TileLinkEnqueuer_2_1.io_client_finish_valid <= T_18486_valid
    TileLinkEnqueuer_2_1.io_client_finish_bits_header_src <= T_18486_bits_header_src
    TileLinkEnqueuer_2_1.io_client_finish_bits_header_dst <= T_18486_bits_header_dst
    TileLinkEnqueuer_2_1.io_client_finish_bits_payload_manager_xact_id <= T_18486_bits_payload_manager_xact_id
    TileLinkEnqueuer_2_1.io_client_probe_ready <= T_15409_ready
    TileLinkEnqueuer_2_1.io_client_release_valid <= T_14201_valid
    TileLinkEnqueuer_2_1.io_client_release_bits_header_src <= T_14201_bits_header_src
    TileLinkEnqueuer_2_1.io_client_release_bits_header_dst <= T_14201_bits_header_dst
    TileLinkEnqueuer_2_1.io_client_release_bits_payload_addr_beat <= T_14201_bits_payload_addr_beat
    TileLinkEnqueuer_2_1.io_client_release_bits_payload_addr_block <= T_14201_bits_payload_addr_block
    TileLinkEnqueuer_2_1.io_client_release_bits_payload_client_xact_id <= T_14201_bits_payload_client_xact_id
    TileLinkEnqueuer_2_1.io_client_release_bits_payload_voluntary <= T_14201_bits_payload_voluntary
    TileLinkEnqueuer_2_1.io_client_release_bits_payload_r_type <= T_14201_bits_payload_r_type
    TileLinkEnqueuer_2_1.io_client_release_bits_payload_data <= T_14201_bits_payload_data
    TileLinkEnqueuer_2_1.io_manager_acquire_ready <= ManagerTileLinkNetworkPort_2.io_network_acquire_ready
    TileLinkEnqueuer_2_1.io_manager_grant_valid <= ManagerTileLinkNetworkPort_2.io_network_grant_valid
    TileLinkEnqueuer_2_1.io_manager_grant_bits_header_src <= ManagerTileLinkNetworkPort_2.io_network_grant_bits_header_src
    TileLinkEnqueuer_2_1.io_manager_grant_bits_header_dst <= ManagerTileLinkNetworkPort_2.io_network_grant_bits_header_dst
    TileLinkEnqueuer_2_1.io_manager_grant_bits_payload_addr_beat <= ManagerTileLinkNetworkPort_2.io_network_grant_bits_payload_addr_beat
    TileLinkEnqueuer_2_1.io_manager_grant_bits_payload_client_xact_id <= ManagerTileLinkNetworkPort_2.io_network_grant_bits_payload_client_xact_id
    TileLinkEnqueuer_2_1.io_manager_grant_bits_payload_manager_xact_id <= ManagerTileLinkNetworkPort_2.io_network_grant_bits_payload_manager_xact_id
    TileLinkEnqueuer_2_1.io_manager_grant_bits_payload_is_builtin_type <= ManagerTileLinkNetworkPort_2.io_network_grant_bits_payload_is_builtin_type
    TileLinkEnqueuer_2_1.io_manager_grant_bits_payload_g_type <= ManagerTileLinkNetworkPort_2.io_network_grant_bits_payload_g_type
    TileLinkEnqueuer_2_1.io_manager_grant_bits_payload_data <= ManagerTileLinkNetworkPort_2.io_network_grant_bits_payload_data
    TileLinkEnqueuer_2_1.io_manager_finish_ready <= ManagerTileLinkNetworkPort_2.io_network_finish_ready
    TileLinkEnqueuer_2_1.io_manager_probe_valid <= ManagerTileLinkNetworkPort_2.io_network_probe_valid
    TileLinkEnqueuer_2_1.io_manager_probe_bits_header_src <= ManagerTileLinkNetworkPort_2.io_network_probe_bits_header_src
    TileLinkEnqueuer_2_1.io_manager_probe_bits_header_dst <= ManagerTileLinkNetworkPort_2.io_network_probe_bits_header_dst
    TileLinkEnqueuer_2_1.io_manager_probe_bits_payload_addr_block <= ManagerTileLinkNetworkPort_2.io_network_probe_bits_payload_addr_block
    TileLinkEnqueuer_2_1.io_manager_probe_bits_payload_p_type <= ManagerTileLinkNetworkPort_2.io_network_probe_bits_payload_p_type
    TileLinkEnqueuer_2_1.io_manager_release_ready <= ManagerTileLinkNetworkPort_2.io_network_release_ready
    ManagerTileLinkNetworkPort_1_1.io_manager_acquire_ready <= io_managers_1_acquire_ready
    ManagerTileLinkNetworkPort_1_1.io_manager_grant_valid <= io_managers_1_grant_valid
    ManagerTileLinkNetworkPort_1_1.io_manager_grant_bits_addr_beat <= io_managers_1_grant_bits_addr_beat
    ManagerTileLinkNetworkPort_1_1.io_manager_grant_bits_client_xact_id <= io_managers_1_grant_bits_client_xact_id
    ManagerTileLinkNetworkPort_1_1.io_manager_grant_bits_manager_xact_id <= io_managers_1_grant_bits_manager_xact_id
    ManagerTileLinkNetworkPort_1_1.io_manager_grant_bits_is_builtin_type <= io_managers_1_grant_bits_is_builtin_type
    ManagerTileLinkNetworkPort_1_1.io_manager_grant_bits_g_type <= io_managers_1_grant_bits_g_type
    ManagerTileLinkNetworkPort_1_1.io_manager_grant_bits_data <= io_managers_1_grant_bits_data
    ManagerTileLinkNetworkPort_1_1.io_manager_grant_bits_client_id <= io_managers_1_grant_bits_client_id
    ManagerTileLinkNetworkPort_1_1.io_manager_finish_ready <= io_managers_1_finish_ready
    ManagerTileLinkNetworkPort_1_1.io_manager_probe_valid <= io_managers_1_probe_valid
    ManagerTileLinkNetworkPort_1_1.io_manager_probe_bits_addr_block <= io_managers_1_probe_bits_addr_block
    ManagerTileLinkNetworkPort_1_1.io_manager_probe_bits_p_type <= io_managers_1_probe_bits_p_type
    ManagerTileLinkNetworkPort_1_1.io_manager_probe_bits_client_id <= io_managers_1_probe_bits_client_id
    ManagerTileLinkNetworkPort_1_1.io_manager_release_ready <= io_managers_1_release_ready
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_valid <= TileLinkEnqueuer_3_1.io_manager_acquire_valid
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_header_src <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_header_src
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_header_dst <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_header_dst
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_payload_addr_block <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_payload_addr_block
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_payload_client_xact_id <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_payload_client_xact_id
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_payload_addr_beat <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_payload_addr_beat
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_payload_is_builtin_type <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_payload_is_builtin_type
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_payload_a_type <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_payload_a_type
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_payload_union <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_payload_union
    ManagerTileLinkNetworkPort_1_1.io_network_acquire_bits_payload_data <= TileLinkEnqueuer_3_1.io_manager_acquire_bits_payload_data
    ManagerTileLinkNetworkPort_1_1.io_network_grant_ready <= TileLinkEnqueuer_3_1.io_manager_grant_ready
    ManagerTileLinkNetworkPort_1_1.io_network_finish_valid <= TileLinkEnqueuer_3_1.io_manager_finish_valid
    ManagerTileLinkNetworkPort_1_1.io_network_finish_bits_header_src <= TileLinkEnqueuer_3_1.io_manager_finish_bits_header_src
    ManagerTileLinkNetworkPort_1_1.io_network_finish_bits_header_dst <= TileLinkEnqueuer_3_1.io_manager_finish_bits_header_dst
    ManagerTileLinkNetworkPort_1_1.io_network_finish_bits_payload_manager_xact_id <= TileLinkEnqueuer_3_1.io_manager_finish_bits_payload_manager_xact_id
    ManagerTileLinkNetworkPort_1_1.io_network_probe_ready <= TileLinkEnqueuer_3_1.io_manager_probe_ready
    ManagerTileLinkNetworkPort_1_1.io_network_release_valid <= TileLinkEnqueuer_3_1.io_manager_release_valid
    ManagerTileLinkNetworkPort_1_1.io_network_release_bits_header_src <= TileLinkEnqueuer_3_1.io_manager_release_bits_header_src
    ManagerTileLinkNetworkPort_1_1.io_network_release_bits_header_dst <= TileLinkEnqueuer_3_1.io_manager_release_bits_header_dst
    ManagerTileLinkNetworkPort_1_1.io_network_release_bits_payload_addr_beat <= TileLinkEnqueuer_3_1.io_manager_release_bits_payload_addr_beat
    ManagerTileLinkNetworkPort_1_1.io_network_release_bits_payload_addr_block <= TileLinkEnqueuer_3_1.io_manager_release_bits_payload_addr_block
    ManagerTileLinkNetworkPort_1_1.io_network_release_bits_payload_client_xact_id <= TileLinkEnqueuer_3_1.io_manager_release_bits_payload_client_xact_id
    ManagerTileLinkNetworkPort_1_1.io_network_release_bits_payload_voluntary <= TileLinkEnqueuer_3_1.io_manager_release_bits_payload_voluntary
    ManagerTileLinkNetworkPort_1_1.io_network_release_bits_payload_r_type <= TileLinkEnqueuer_3_1.io_manager_release_bits_payload_r_type
    ManagerTileLinkNetworkPort_1_1.io_network_release_bits_payload_data <= TileLinkEnqueuer_3_1.io_manager_release_bits_payload_data
    TileLinkEnqueuer_3_1.io_client_acquire_valid <= T_13294_valid
    TileLinkEnqueuer_3_1.io_client_acquire_bits_header_src <= T_13294_bits_header_src
    TileLinkEnqueuer_3_1.io_client_acquire_bits_header_dst <= T_13294_bits_header_dst
    TileLinkEnqueuer_3_1.io_client_acquire_bits_payload_addr_block <= T_13294_bits_payload_addr_block
    TileLinkEnqueuer_3_1.io_client_acquire_bits_payload_client_xact_id <= T_13294_bits_payload_client_xact_id
    TileLinkEnqueuer_3_1.io_client_acquire_bits_payload_addr_beat <= T_13294_bits_payload_addr_beat
    TileLinkEnqueuer_3_1.io_client_acquire_bits_payload_is_builtin_type <= T_13294_bits_payload_is_builtin_type
    TileLinkEnqueuer_3_1.io_client_acquire_bits_payload_a_type <= T_13294_bits_payload_a_type
    TileLinkEnqueuer_3_1.io_client_acquire_bits_payload_union <= T_13294_bits_payload_union
    TileLinkEnqueuer_3_1.io_client_acquire_bits_payload_data <= T_13294_bits_payload_data
    TileLinkEnqueuer_3_1.io_client_grant_ready <= T_16966_ready
    TileLinkEnqueuer_3_1.io_client_finish_valid <= T_19026_valid
    TileLinkEnqueuer_3_1.io_client_finish_bits_header_src <= T_19026_bits_header_src
    TileLinkEnqueuer_3_1.io_client_finish_bits_header_dst <= T_19026_bits_header_dst
    TileLinkEnqueuer_3_1.io_client_finish_bits_payload_manager_xact_id <= T_19026_bits_payload_manager_xact_id
    TileLinkEnqueuer_3_1.io_client_probe_ready <= T_15554_ready
    TileLinkEnqueuer_3_1.io_client_release_valid <= T_14766_valid
    TileLinkEnqueuer_3_1.io_client_release_bits_header_src <= T_14766_bits_header_src
    TileLinkEnqueuer_3_1.io_client_release_bits_header_dst <= T_14766_bits_header_dst
    TileLinkEnqueuer_3_1.io_client_release_bits_payload_addr_beat <= T_14766_bits_payload_addr_beat
    TileLinkEnqueuer_3_1.io_client_release_bits_payload_addr_block <= T_14766_bits_payload_addr_block
    TileLinkEnqueuer_3_1.io_client_release_bits_payload_client_xact_id <= T_14766_bits_payload_client_xact_id
    TileLinkEnqueuer_3_1.io_client_release_bits_payload_voluntary <= T_14766_bits_payload_voluntary
    TileLinkEnqueuer_3_1.io_client_release_bits_payload_r_type <= T_14766_bits_payload_r_type
    TileLinkEnqueuer_3_1.io_client_release_bits_payload_data <= T_14766_bits_payload_data
    TileLinkEnqueuer_3_1.io_manager_acquire_ready <= ManagerTileLinkNetworkPort_1_1.io_network_acquire_ready
    TileLinkEnqueuer_3_1.io_manager_grant_valid <= ManagerTileLinkNetworkPort_1_1.io_network_grant_valid
    TileLinkEnqueuer_3_1.io_manager_grant_bits_header_src <= ManagerTileLinkNetworkPort_1_1.io_network_grant_bits_header_src
    TileLinkEnqueuer_3_1.io_manager_grant_bits_header_dst <= ManagerTileLinkNetworkPort_1_1.io_network_grant_bits_header_dst
    TileLinkEnqueuer_3_1.io_manager_grant_bits_payload_addr_beat <= ManagerTileLinkNetworkPort_1_1.io_network_grant_bits_payload_addr_beat
    TileLinkEnqueuer_3_1.io_manager_grant_bits_payload_client_xact_id <= ManagerTileLinkNetworkPort_1_1.io_network_grant_bits_payload_client_xact_id
    TileLinkEnqueuer_3_1.io_manager_grant_bits_payload_manager_xact_id <= ManagerTileLinkNetworkPort_1_1.io_network_grant_bits_payload_manager_xact_id
    TileLinkEnqueuer_3_1.io_manager_grant_bits_payload_is_builtin_type <= ManagerTileLinkNetworkPort_1_1.io_network_grant_bits_payload_is_builtin_type
    TileLinkEnqueuer_3_1.io_manager_grant_bits_payload_g_type <= ManagerTileLinkNetworkPort_1_1.io_network_grant_bits_payload_g_type
    TileLinkEnqueuer_3_1.io_manager_grant_bits_payload_data <= ManagerTileLinkNetworkPort_1_1.io_network_grant_bits_payload_data
    TileLinkEnqueuer_3_1.io_manager_finish_ready <= ManagerTileLinkNetworkPort_1_1.io_network_finish_ready
    TileLinkEnqueuer_3_1.io_manager_probe_valid <= ManagerTileLinkNetworkPort_1_1.io_network_probe_valid
    TileLinkEnqueuer_3_1.io_manager_probe_bits_header_src <= ManagerTileLinkNetworkPort_1_1.io_network_probe_bits_header_src
    TileLinkEnqueuer_3_1.io_manager_probe_bits_header_dst <= ManagerTileLinkNetworkPort_1_1.io_network_probe_bits_header_dst
    TileLinkEnqueuer_3_1.io_manager_probe_bits_payload_addr_block <= ManagerTileLinkNetworkPort_1_1.io_network_probe_bits_payload_addr_block
    TileLinkEnqueuer_3_1.io_manager_probe_bits_payload_p_type <= ManagerTileLinkNetworkPort_1_1.io_network_probe_bits_payload_p_type
    TileLinkEnqueuer_3_1.io_manager_release_ready <= ManagerTileLinkNetworkPort_1_1.io_network_release_ready
    acqNet.io_in_0_valid <= UInt<1>("h0")
    acqNet.io_in_0_bits_header_src <= UInt<2>("h0")
    acqNet.io_in_0_bits_header_dst <= UInt<2>("h2")
    acqNet.io_in_0_bits_payload_addr_block <= UInt<26>("h2224d00")
    acqNet.io_in_0_bits_payload_client_xact_id <= UInt<1>("h1")
    acqNet.io_in_0_bits_payload_addr_beat <= UInt<3>("h1")
    acqNet.io_in_0_bits_payload_is_builtin_type <= UInt<1>("h1")
    acqNet.io_in_0_bits_payload_a_type <= UInt<3>("h1")
    acqNet.io_in_0_bits_payload_union <= UInt<11>("h35c")
    acqNet.io_in_0_bits_payload_data <= UInt<64>("hc46700418a1d8be0")
    acqNet.io_in_1_valid <= UInt<1>("h0")
    acqNet.io_in_1_bits_header_src <= UInt<2>("h0")
    acqNet.io_in_1_bits_header_dst <= UInt<2>("h3")
    acqNet.io_in_1_bits_payload_addr_block <= UInt<26>("h234773c")
    acqNet.io_in_1_bits_payload_client_xact_id <= UInt<1>("h0")
    acqNet.io_in_1_bits_payload_addr_beat <= UInt<3>("h0")
    acqNet.io_in_1_bits_payload_is_builtin_type <= UInt<1>("h1")
    acqNet.io_in_1_bits_payload_a_type <= UInt<3>("h6")
    acqNet.io_in_1_bits_payload_union <= UInt<11>("h792")
    acqNet.io_in_1_bits_payload_data <= UInt<64>("h32f7dc3f7c90070b")
    acqNet.io_in_2_valid <= T_13624_valid
    acqNet.io_in_2_bits_header_src <= T_13624_bits_header_src
    acqNet.io_in_2_bits_header_dst <= T_13624_bits_header_dst
    acqNet.io_in_2_bits_payload_addr_block <= T_13624_bits_payload_addr_block
    acqNet.io_in_2_bits_payload_client_xact_id <= T_13624_bits_payload_client_xact_id
    acqNet.io_in_2_bits_payload_addr_beat <= T_13624_bits_payload_addr_beat
    acqNet.io_in_2_bits_payload_is_builtin_type <= T_13624_bits_payload_is_builtin_type
    acqNet.io_in_2_bits_payload_a_type <= T_13624_bits_payload_a_type
    acqNet.io_in_2_bits_payload_union <= T_13624_bits_payload_union
    acqNet.io_in_2_bits_payload_data <= T_13624_bits_payload_data
    acqNet.io_in_3_valid <= T_13794_valid
    acqNet.io_in_3_bits_header_src <= T_13794_bits_header_src
    acqNet.io_in_3_bits_header_dst <= T_13794_bits_header_dst
    acqNet.io_in_3_bits_payload_addr_block <= T_13794_bits_payload_addr_block
    acqNet.io_in_3_bits_payload_client_xact_id <= T_13794_bits_payload_client_xact_id
    acqNet.io_in_3_bits_payload_addr_beat <= T_13794_bits_payload_addr_beat
    acqNet.io_in_3_bits_payload_is_builtin_type <= T_13794_bits_payload_is_builtin_type
    acqNet.io_in_3_bits_payload_a_type <= T_13794_bits_payload_a_type
    acqNet.io_in_3_bits_payload_union <= T_13794_bits_payload_union
    acqNet.io_in_3_bits_payload_data <= T_13794_bits_payload_data
    acqNet.io_out_0_ready <= T_12724_ready
    acqNet.io_out_1_ready <= T_13294_ready
    acqNet.io_out_2_ready <= UInt<1>("h0")
    acqNet.io_out_3_ready <= UInt<1>("h0")
    relNet.io_in_0_valid <= UInt<1>("h0")
    relNet.io_in_0_bits_header_src <= UInt<2>("h2")
    relNet.io_in_0_bits_header_dst <= UInt<2>("h3")
    relNet.io_in_0_bits_payload_addr_beat <= UInt<3>("h3")
    relNet.io_in_0_bits_payload_addr_block <= UInt<26>("hc3aebf")
    relNet.io_in_0_bits_payload_client_xact_id <= UInt<1>("h1")
    relNet.io_in_0_bits_payload_voluntary <= UInt<1>("h1")
    relNet.io_in_0_bits_payload_r_type <= UInt<3>("h3")
    relNet.io_in_0_bits_payload_data <= UInt<64>("hc8a963841045e643")
    relNet.io_in_1_valid <= UInt<1>("h0")
    relNet.io_in_1_bits_header_src <= UInt<2>("h3")
    relNet.io_in_1_bits_header_dst <= UInt<2>("h0")
    relNet.io_in_1_bits_payload_addr_beat <= UInt<3>("h7")
    relNet.io_in_1_bits_payload_addr_block <= UInt<26>("h1ac9361")
    relNet.io_in_1_bits_payload_client_xact_id <= UInt<1>("h0")
    relNet.io_in_1_bits_payload_voluntary <= UInt<1>("h1")
    relNet.io_in_1_bits_payload_r_type <= UInt<3>("h6")
    relNet.io_in_1_bits_payload_data <= UInt<64>("h3ff4711808528fda")
    relNet.io_in_2_valid <= T_15091_valid
    relNet.io_in_2_bits_header_src <= T_15091_bits_header_src
    relNet.io_in_2_bits_header_dst <= T_15091_bits_header_dst
    relNet.io_in_2_bits_payload_addr_beat <= T_15091_bits_payload_addr_beat
    relNet.io_in_2_bits_payload_addr_block <= T_15091_bits_payload_addr_block
    relNet.io_in_2_bits_payload_client_xact_id <= T_15091_bits_payload_client_xact_id
    relNet.io_in_2_bits_payload_voluntary <= T_15091_bits_payload_voluntary
    relNet.io_in_2_bits_payload_r_type <= T_15091_bits_payload_r_type
    relNet.io_in_2_bits_payload_data <= T_15091_bits_payload_data
    relNet.io_in_3_valid <= T_15256_valid
    relNet.io_in_3_bits_header_src <= T_15256_bits_header_src
    relNet.io_in_3_bits_header_dst <= T_15256_bits_header_dst
    relNet.io_in_3_bits_payload_addr_beat <= T_15256_bits_payload_addr_beat
    relNet.io_in_3_bits_payload_addr_block <= T_15256_bits_payload_addr_block
    relNet.io_in_3_bits_payload_client_xact_id <= T_15256_bits_payload_client_xact_id
    relNet.io_in_3_bits_payload_voluntary <= T_15256_bits_payload_voluntary
    relNet.io_in_3_bits_payload_r_type <= T_15256_bits_payload_r_type
    relNet.io_in_3_bits_payload_data <= T_15256_bits_payload_data
    relNet.io_out_0_ready <= T_14201_ready
    relNet.io_out_1_ready <= T_14766_ready
    relNet.io_out_2_ready <= UInt<1>("h0")
    relNet.io_out_3_ready <= UInt<1>("h0")
    prbNet.io_in_0_valid <= T_15409_valid
    prbNet.io_in_0_bits_header_src <= T_15409_bits_header_src
    prbNet.io_in_0_bits_header_dst <= T_15409_bits_header_dst
    prbNet.io_in_0_bits_payload_addr_block <= T_15409_bits_payload_addr_block
    prbNet.io_in_0_bits_payload_p_type <= T_15409_bits_payload_p_type
    prbNet.io_in_1_valid <= T_15554_valid
    prbNet.io_in_1_bits_header_src <= T_15554_bits_header_src
    prbNet.io_in_1_bits_header_dst <= T_15554_bits_header_dst
    prbNet.io_in_1_bits_payload_addr_block <= T_15554_bits_payload_addr_block
    prbNet.io_in_1_bits_payload_p_type <= T_15554_bits_payload_p_type
    prbNet.io_in_2_valid <= UInt<1>("h0")
    prbNet.io_in_2_bits_header_src <= UInt<2>("h0")
    prbNet.io_in_2_bits_header_dst <= UInt<2>("h0")
    prbNet.io_in_2_bits_payload_addr_block <= UInt<26>("h2a22910")
    prbNet.io_in_2_bits_payload_p_type <= UInt<2>("h1")
    prbNet.io_in_3_valid <= UInt<1>("h0")
    prbNet.io_in_3_bits_header_src <= UInt<2>("h3")
    prbNet.io_in_3_bits_header_dst <= UInt<2>("h1")
    prbNet.io_in_3_bits_payload_addr_block <= UInt<26>("h11a8ef9")
    prbNet.io_in_3_bits_payload_p_type <= UInt<2>("h0")
    prbNet.io_out_0_ready <= UInt<1>("h0")
    prbNet.io_out_1_ready <= UInt<1>("h0")
    prbNet.io_out_2_ready <= T_15939_ready
    prbNet.io_out_3_ready <= T_16484_ready
    gntNet.io_in_0_valid <= T_16801_valid
    gntNet.io_in_0_bits_header_src <= T_16801_bits_header_src
    gntNet.io_in_0_bits_header_dst <= T_16801_bits_header_dst
    gntNet.io_in_0_bits_payload_addr_beat <= T_16801_bits_payload_addr_beat
    gntNet.io_in_0_bits_payload_client_xact_id <= T_16801_bits_payload_client_xact_id
    gntNet.io_in_0_bits_payload_manager_xact_id <= T_16801_bits_payload_manager_xact_id
    gntNet.io_in_0_bits_payload_is_builtin_type <= T_16801_bits_payload_is_builtin_type
    gntNet.io_in_0_bits_payload_g_type <= T_16801_bits_payload_g_type
    gntNet.io_in_0_bits_payload_data <= T_16801_bits_payload_data
    gntNet.io_in_1_valid <= T_16966_valid
    gntNet.io_in_1_bits_header_src <= T_16966_bits_header_src
    gntNet.io_in_1_bits_header_dst <= T_16966_bits_header_dst
    gntNet.io_in_1_bits_payload_addr_beat <= T_16966_bits_payload_addr_beat
    gntNet.io_in_1_bits_payload_client_xact_id <= T_16966_bits_payload_client_xact_id
    gntNet.io_in_1_bits_payload_manager_xact_id <= T_16966_bits_payload_manager_xact_id
    gntNet.io_in_1_bits_payload_is_builtin_type <= T_16966_bits_payload_is_builtin_type
    gntNet.io_in_1_bits_payload_g_type <= T_16966_bits_payload_g_type
    gntNet.io_in_1_bits_payload_data <= T_16966_bits_payload_data
    gntNet.io_in_2_valid <= UInt<1>("h0")
    gntNet.io_in_2_bits_header_src <= UInt<2>("h2")
    gntNet.io_in_2_bits_header_dst <= UInt<2>("h0")
    gntNet.io_in_2_bits_payload_addr_beat <= UInt<3>("h6")
    gntNet.io_in_2_bits_payload_client_xact_id <= UInt<1>("h1")
    gntNet.io_in_2_bits_payload_manager_xact_id <= UInt<4>("h0")
    gntNet.io_in_2_bits_payload_is_builtin_type <= UInt<1>("h0")
    gntNet.io_in_2_bits_payload_g_type <= UInt<4>("h8")
    gntNet.io_in_2_bits_payload_data <= UInt<64>("h7c3217de01d7b34e")
    gntNet.io_in_3_valid <= UInt<1>("h0")
    gntNet.io_in_3_bits_header_src <= UInt<2>("h1")
    gntNet.io_in_3_bits_header_dst <= UInt<2>("h0")
    gntNet.io_in_3_bits_payload_addr_beat <= UInt<3>("h3")
    gntNet.io_in_3_bits_payload_client_xact_id <= UInt<1>("h1")
    gntNet.io_in_3_bits_payload_manager_xact_id <= UInt<4>("hb")
    gntNet.io_in_3_bits_payload_is_builtin_type <= UInt<1>("h1")
    gntNet.io_in_3_bits_payload_g_type <= UInt<4>("hd")
    gntNet.io_in_3_bits_payload_data <= UInt<64>("hd688cfbb5a7b93a3")
    gntNet.io_out_0_ready <= UInt<1>("h0")
    gntNet.io_out_1_ready <= UInt<1>("h0")
    gntNet.io_out_2_ready <= T_17371_ready
    gntNet.io_out_3_ready <= T_17936_ready
    ackNet.io_in_0_valid <= UInt<1>("h0")
    ackNet.io_in_0_bits_header_src <= UInt<2>("h1")
    ackNet.io_in_0_bits_header_dst <= UInt<2>("h1")
    ackNet.io_in_0_bits_payload_manager_xact_id <= UInt<4>("h0")
    ackNet.io_in_1_valid <= UInt<1>("h0")
    ackNet.io_in_1_bits_header_src <= UInt<2>("h0")
    ackNet.io_in_1_bits_header_dst <= UInt<2>("h0")
    ackNet.io_in_1_bits_payload_manager_xact_id <= UInt<4>("h2")
    ackNet.io_in_2_valid <= T_19326_valid
    ackNet.io_in_2_bits_header_src <= T_19326_bits_header_src
    ackNet.io_in_2_bits_header_dst <= T_19326_bits_header_dst
    ackNet.io_in_2_bits_payload_manager_xact_id <= T_19326_bits_payload_manager_xact_id
    ackNet.io_in_3_valid <= T_19466_valid
    ackNet.io_in_3_bits_header_src <= T_19466_bits_header_src
    ackNet.io_in_3_bits_header_dst <= T_19466_bits_header_dst
    ackNet.io_in_3_bits_payload_manager_xact_id <= T_19466_bits_payload_manager_xact_id
    ackNet.io_out_0_ready <= T_18486_ready
    ackNet.io_out_1_ready <= T_19026_ready
    ackNet.io_out_2_ready <= UInt<1>("h0")
    ackNet.io_out_3_ready <= UInt<1>("h0")
    T_12724_ready <= TileLinkEnqueuer_2_1.io_client_acquire_ready
    T_12724_valid <= acqNet.io_out_0_valid
    T_12724_bits_header_src <= T_12953
    T_12724_bits_header_dst <= acqNet.io_out_0_bits_header_dst
    T_12724_bits_payload_addr_block <= acqNet.io_out_0_bits_payload_addr_block
    T_12724_bits_payload_client_xact_id <= acqNet.io_out_0_bits_payload_client_xact_id
    T_12724_bits_payload_addr_beat <= acqNet.io_out_0_bits_payload_addr_beat
    T_12724_bits_payload_is_builtin_type <= acqNet.io_out_0_bits_payload_is_builtin_type
    T_12724_bits_payload_a_type <= acqNet.io_out_0_bits_payload_a_type
    T_12724_bits_payload_union <= acqNet.io_out_0_bits_payload_union
    T_12724_bits_payload_data <= acqNet.io_out_0_bits_payload_data
    T_13294_ready <= TileLinkEnqueuer_3_1.io_client_acquire_ready
    T_13294_valid <= acqNet.io_out_1_valid
    T_13294_bits_header_src <= T_13523
    T_13294_bits_header_dst <= acqNet.io_out_1_bits_header_dst
    T_13294_bits_payload_addr_block <= acqNet.io_out_1_bits_payload_addr_block
    T_13294_bits_payload_client_xact_id <= acqNet.io_out_1_bits_payload_client_xact_id
    T_13294_bits_payload_addr_beat <= acqNet.io_out_1_bits_payload_addr_beat
    T_13294_bits_payload_is_builtin_type <= acqNet.io_out_1_bits_payload_is_builtin_type
    T_13294_bits_payload_a_type <= acqNet.io_out_1_bits_payload_a_type
    T_13294_bits_payload_union <= acqNet.io_out_1_bits_payload_union
    T_13294_bits_payload_data <= acqNet.io_out_1_bits_payload_data
    T_13624_ready <= acqNet.io_in_2_ready
    T_13624_valid <= TileLinkEnqueuer_4.io_manager_acquire_valid
    T_13624_bits_header_src <= T_13693
    T_13624_bits_header_dst <= TileLinkEnqueuer_4.io_manager_acquire_bits_header_dst
    T_13624_bits_payload_addr_block <= TileLinkEnqueuer_4.io_manager_acquire_bits_payload_addr_block
    T_13624_bits_payload_client_xact_id <= TileLinkEnqueuer_4.io_manager_acquire_bits_payload_client_xact_id
    T_13624_bits_payload_addr_beat <= TileLinkEnqueuer_4.io_manager_acquire_bits_payload_addr_beat
    T_13624_bits_payload_is_builtin_type <= TileLinkEnqueuer_4.io_manager_acquire_bits_payload_is_builtin_type
    T_13624_bits_payload_a_type <= TileLinkEnqueuer_4.io_manager_acquire_bits_payload_a_type
    T_13624_bits_payload_union <= TileLinkEnqueuer_4.io_manager_acquire_bits_payload_union
    T_13624_bits_payload_data <= TileLinkEnqueuer_4.io_manager_acquire_bits_payload_data
    T_13794_ready <= acqNet.io_in_3_ready
    T_13794_valid <= TileLinkEnqueuer_1_1.io_manager_acquire_valid
    T_13794_bits_header_src <= T_13863
    T_13794_bits_header_dst <= TileLinkEnqueuer_1_1.io_manager_acquire_bits_header_dst
    T_13794_bits_payload_addr_block <= TileLinkEnqueuer_1_1.io_manager_acquire_bits_payload_addr_block
    T_13794_bits_payload_client_xact_id <= TileLinkEnqueuer_1_1.io_manager_acquire_bits_payload_client_xact_id
    T_13794_bits_payload_addr_beat <= TileLinkEnqueuer_1_1.io_manager_acquire_bits_payload_addr_beat
    T_13794_bits_payload_is_builtin_type <= TileLinkEnqueuer_1_1.io_manager_acquire_bits_payload_is_builtin_type
    T_13794_bits_payload_a_type <= TileLinkEnqueuer_1_1.io_manager_acquire_bits_payload_a_type
    T_13794_bits_payload_union <= TileLinkEnqueuer_1_1.io_manager_acquire_bits_payload_union
    T_13794_bits_payload_data <= TileLinkEnqueuer_1_1.io_manager_acquire_bits_payload_data
    T_14201_ready <= TileLinkEnqueuer_2_1.io_client_release_ready
    T_14201_valid <= relNet.io_out_0_valid
    T_14201_bits_header_src <= T_14428
    T_14201_bits_header_dst <= relNet.io_out_0_bits_header_dst
    T_14201_bits_payload_addr_beat <= relNet.io_out_0_bits_payload_addr_beat
    T_14201_bits_payload_addr_block <= relNet.io_out_0_bits_payload_addr_block
    T_14201_bits_payload_client_xact_id <= relNet.io_out_0_bits_payload_client_xact_id
    T_14201_bits_payload_voluntary <= relNet.io_out_0_bits_payload_voluntary
    T_14201_bits_payload_r_type <= relNet.io_out_0_bits_payload_r_type
    T_14201_bits_payload_data <= relNet.io_out_0_bits_payload_data
    T_14766_ready <= TileLinkEnqueuer_3_1.io_client_release_ready
    T_14766_valid <= relNet.io_out_1_valid
    T_14766_bits_header_src <= T_14993
    T_14766_bits_header_dst <= relNet.io_out_1_bits_header_dst
    T_14766_bits_payload_addr_beat <= relNet.io_out_1_bits_payload_addr_beat
    T_14766_bits_payload_addr_block <= relNet.io_out_1_bits_payload_addr_block
    T_14766_bits_payload_client_xact_id <= relNet.io_out_1_bits_payload_client_xact_id
    T_14766_bits_payload_voluntary <= relNet.io_out_1_bits_payload_voluntary
    T_14766_bits_payload_r_type <= relNet.io_out_1_bits_payload_r_type
    T_14766_bits_payload_data <= relNet.io_out_1_bits_payload_data
    T_15091_ready <= relNet.io_in_2_ready
    T_15091_valid <= TileLinkEnqueuer_4.io_manager_release_valid
    T_15091_bits_header_src <= T_15158
    T_15091_bits_header_dst <= TileLinkEnqueuer_4.io_manager_release_bits_header_dst
    T_15091_bits_payload_addr_beat <= TileLinkEnqueuer_4.io_manager_release_bits_payload_addr_beat
    T_15091_bits_payload_addr_block <= TileLinkEnqueuer_4.io_manager_release_bits_payload_addr_block
    T_15091_bits_payload_client_xact_id <= TileLinkEnqueuer_4.io_manager_release_bits_payload_client_xact_id
    T_15091_bits_payload_voluntary <= TileLinkEnqueuer_4.io_manager_release_bits_payload_voluntary
    T_15091_bits_payload_r_type <= TileLinkEnqueuer_4.io_manager_release_bits_payload_r_type
    T_15091_bits_payload_data <= TileLinkEnqueuer_4.io_manager_release_bits_payload_data
    T_15256_ready <= relNet.io_in_3_ready
    T_15256_valid <= TileLinkEnqueuer_1_1.io_manager_release_valid
    T_15256_bits_header_src <= T_15323
    T_15256_bits_header_dst <= TileLinkEnqueuer_1_1.io_manager_release_bits_header_dst
    T_15256_bits_payload_addr_beat <= TileLinkEnqueuer_1_1.io_manager_release_bits_payload_addr_beat
    T_15256_bits_payload_addr_block <= TileLinkEnqueuer_1_1.io_manager_release_bits_payload_addr_block
    T_15256_bits_payload_client_xact_id <= TileLinkEnqueuer_1_1.io_manager_release_bits_payload_client_xact_id
    T_15256_bits_payload_voluntary <= TileLinkEnqueuer_1_1.io_manager_release_bits_payload_voluntary
    T_15256_bits_payload_r_type <= TileLinkEnqueuer_1_1.io_manager_release_bits_payload_r_type
    T_15256_bits_payload_data <= TileLinkEnqueuer_1_1.io_manager_release_bits_payload_data
    T_15409_ready <= prbNet.io_in_0_ready
    T_15409_valid <= TileLinkEnqueuer_2_1.io_client_probe_valid
    T_15409_bits_header_src <= TileLinkEnqueuer_2_1.io_client_probe_bits_header_src
    T_15409_bits_header_dst <= T_15468
    T_15409_bits_payload_addr_block <= TileLinkEnqueuer_2_1.io_client_probe_bits_payload_addr_block
    T_15409_bits_payload_p_type <= TileLinkEnqueuer_2_1.io_client_probe_bits_payload_p_type
    T_15554_ready <= prbNet.io_in_1_ready
    T_15554_valid <= TileLinkEnqueuer_3_1.io_client_probe_valid
    T_15554_bits_header_src <= TileLinkEnqueuer_3_1.io_client_probe_bits_header_src
    T_15554_bits_header_dst <= T_15613
    T_15554_bits_payload_addr_block <= TileLinkEnqueuer_3_1.io_client_probe_bits_payload_addr_block
    T_15554_bits_payload_p_type <= TileLinkEnqueuer_3_1.io_client_probe_bits_payload_p_type
    T_15939_ready <= TileLinkEnqueuer_4.io_manager_probe_ready
    T_15939_valid <= prbNet.io_out_2_valid
    T_15939_bits_header_src <= prbNet.io_out_2_bits_header_src
    T_15939_bits_header_dst <= T_16158
    T_15939_bits_payload_addr_block <= prbNet.io_out_2_bits_payload_addr_block
    T_15939_bits_payload_p_type <= prbNet.io_out_2_bits_payload_p_type
    T_16484_ready <= TileLinkEnqueuer_1_1.io_manager_probe_ready
    T_16484_valid <= prbNet.io_out_3_valid
    T_16484_bits_header_src <= prbNet.io_out_3_bits_header_src
    T_16484_bits_header_dst <= T_16703
    T_16484_bits_payload_addr_block <= prbNet.io_out_3_bits_payload_addr_block
    T_16484_bits_payload_p_type <= prbNet.io_out_3_bits_payload_p_type
    T_16801_ready <= gntNet.io_in_0_ready
    T_16801_valid <= TileLinkEnqueuer_2_1.io_client_grant_valid
    T_16801_bits_header_src <= TileLinkEnqueuer_2_1.io_client_grant_bits_header_src
    T_16801_bits_header_dst <= T_16868
    T_16801_bits_payload_addr_beat <= TileLinkEnqueuer_2_1.io_client_grant_bits_payload_addr_beat
    T_16801_bits_payload_client_xact_id <= TileLinkEnqueuer_2_1.io_client_grant_bits_payload_client_xact_id
    T_16801_bits_payload_manager_xact_id <= TileLinkEnqueuer_2_1.io_client_grant_bits_payload_manager_xact_id
    T_16801_bits_payload_is_builtin_type <= TileLinkEnqueuer_2_1.io_client_grant_bits_payload_is_builtin_type
    T_16801_bits_payload_g_type <= TileLinkEnqueuer_2_1.io_client_grant_bits_payload_g_type
    T_16801_bits_payload_data <= TileLinkEnqueuer_2_1.io_client_grant_bits_payload_data
    T_16966_ready <= gntNet.io_in_1_ready
    T_16966_valid <= TileLinkEnqueuer_3_1.io_client_grant_valid
    T_16966_bits_header_src <= TileLinkEnqueuer_3_1.io_client_grant_bits_header_src
    T_16966_bits_header_dst <= T_17033
    T_16966_bits_payload_addr_beat <= TileLinkEnqueuer_3_1.io_client_grant_bits_payload_addr_beat
    T_16966_bits_payload_client_xact_id <= TileLinkEnqueuer_3_1.io_client_grant_bits_payload_client_xact_id
    T_16966_bits_payload_manager_xact_id <= TileLinkEnqueuer_3_1.io_client_grant_bits_payload_manager_xact_id
    T_16966_bits_payload_is_builtin_type <= TileLinkEnqueuer_3_1.io_client_grant_bits_payload_is_builtin_type
    T_16966_bits_payload_g_type <= TileLinkEnqueuer_3_1.io_client_grant_bits_payload_g_type
    T_16966_bits_payload_data <= TileLinkEnqueuer_3_1.io_client_grant_bits_payload_data
    T_17371_ready <= TileLinkEnqueuer_4.io_manager_grant_ready
    T_17371_valid <= gntNet.io_out_2_valid
    T_17371_bits_header_src <= gntNet.io_out_2_bits_header_src
    T_17371_bits_header_dst <= T_17598
    T_17371_bits_payload_addr_beat <= gntNet.io_out_2_bits_payload_addr_beat
    T_17371_bits_payload_client_xact_id <= gntNet.io_out_2_bits_payload_client_xact_id
    T_17371_bits_payload_manager_xact_id <= gntNet.io_out_2_bits_payload_manager_xact_id
    T_17371_bits_payload_is_builtin_type <= gntNet.io_out_2_bits_payload_is_builtin_type
    T_17371_bits_payload_g_type <= gntNet.io_out_2_bits_payload_g_type
    T_17371_bits_payload_data <= gntNet.io_out_2_bits_payload_data
    T_17936_ready <= TileLinkEnqueuer_1_1.io_manager_grant_ready
    T_17936_valid <= gntNet.io_out_3_valid
    T_17936_bits_header_src <= gntNet.io_out_3_bits_header_src
    T_17936_bits_header_dst <= T_18163
    T_17936_bits_payload_addr_beat <= gntNet.io_out_3_bits_payload_addr_beat
    T_17936_bits_payload_client_xact_id <= gntNet.io_out_3_bits_payload_client_xact_id
    T_17936_bits_payload_manager_xact_id <= gntNet.io_out_3_bits_payload_manager_xact_id
    T_17936_bits_payload_is_builtin_type <= gntNet.io_out_3_bits_payload_is_builtin_type
    T_17936_bits_payload_g_type <= gntNet.io_out_3_bits_payload_g_type
    T_17936_bits_payload_data <= gntNet.io_out_3_bits_payload_data
    T_18486_ready <= TileLinkEnqueuer_2_1.io_client_finish_ready
    T_18486_valid <= ackNet.io_out_0_valid
    T_18486_bits_header_src <= T_18703
    T_18486_bits_header_dst <= ackNet.io_out_0_bits_header_dst
    T_18486_bits_payload_manager_xact_id <= ackNet.io_out_0_bits_payload_manager_xact_id
    T_19026_ready <= TileLinkEnqueuer_3_1.io_client_finish_ready
    T_19026_valid <= ackNet.io_out_1_valid
    T_19026_bits_header_src <= T_19243
    T_19026_bits_header_dst <= ackNet.io_out_1_bits_header_dst
    T_19026_bits_payload_manager_xact_id <= ackNet.io_out_1_bits_payload_manager_xact_id
    T_19326_ready <= ackNet.io_in_2_ready
    T_19326_valid <= TileLinkEnqueuer_4.io_manager_finish_valid
    T_19326_bits_header_src <= T_19383
    T_19326_bits_header_dst <= TileLinkEnqueuer_4.io_manager_finish_bits_header_dst
    T_19326_bits_payload_manager_xact_id <= TileLinkEnqueuer_4.io_manager_finish_bits_payload_manager_xact_id
    T_19466_ready <= ackNet.io_in_3_ready
    T_19466_valid <= TileLinkEnqueuer_1_1.io_manager_finish_valid
    T_19466_bits_header_src <= T_19523
    T_19466_bits_header_dst <= TileLinkEnqueuer_1_1.io_manager_finish_bits_header_dst
    T_19466_bits_payload_manager_xact_id <= TileLinkEnqueuer_1_1.io_manager_finish_bits_payload_manager_xact_id

  module BufferedBroadcastVoluntaryReleaseTracker :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
    output io_alloc_iacq_matches : UInt<1>
    output io_alloc_iacq_can : UInt<1>
    input io_alloc_iacq_should : UInt<1>
    output io_alloc_irel_matches : UInt<1>
    output io_alloc_irel_can : UInt<1>
    input io_alloc_irel_should : UInt<1>
    output io_alloc_oprb_matches : UInt<1>
    output io_alloc_oprb_can : UInt<1>
    input io_alloc_oprb_should : UInt<1>
    output io_alloc_idle : UInt<1>
    output io_alloc_addr_block : UInt<26>
  
    wire all_pending_done : UInt<1>
    reg state : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg xact_addr_block : UInt<26>, clk with :
      reset => (reset, UInt<26>("h0"))
    reg xact_vol_ir_r_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_r_type)
    reg xact_vol_ir_src : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_src)
    reg xact_vol_ir_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_client_xact_id)
    reg pending_irel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ignt_counter_pending : UInt<1>
    wire vol_ignt_counter_up_idx : UInt<3>
    wire vol_ignt_counter_up_done : UInt<1>
    wire vol_ignt_counter_down_idx : UInt<3>
    wire vol_ignt_counter_down_done : UInt<1>
    reg pending_orel_send : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_orel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ognt_counter_pending : UInt<1>
    wire vol_ognt_counter_up_idx : UInt<3>
    wire vol_ognt_counter_up_done : UInt<1>
    wire vol_ognt_counter_down_idx : UInt<3>
    wire vol_ognt_counter_down_done : UInt<1>
    node T_78 = neq(pending_orel_data, UInt<8>("h0"))
    node T_79 = or(pending_orel_send, T_78)
    node scoreboard_2 = or(T_79, vol_ognt_counter_pending)
    reg sending_orel : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_103_sharers : UInt<1>
    wire T_149_state : UInt<2>
    wire coh_inner_sharers : UInt<1>
    wire coh_outer_state : UInt<2>
    node T_1519 = eq(state, UInt<4>("h0"))
    node T_1520 = and(io_inner_release_ready, io_inner_release_valid)
    node T_1521 = and(T_1519, T_1520)
    node T_1522 = and(T_1521, io_alloc_irel_should)
    node T_1524 = eq(io_inner_release_bits_voluntary, UInt<1>("h0"))
    node T_1525 = and(T_1522, T_1524)
    node T_1527 = eq(T_1525, UInt<1>("h0"))
    node T_1528 = or(T_1527, reset)
    node T_1530 = eq(T_1528, UInt<1>("h0"))
    wire T_1544_0 : UInt<64>
    wire T_1544_1 : UInt<64>
    wire T_1544_2 : UInt<64>
    wire T_1544_3 : UInt<64>
    wire T_1544_4 : UInt<64>
    wire T_1544_5 : UInt<64>
    wire T_1544_6 : UInt<64>
    wire T_1544_7 : UInt<64>
    reg data_buffer_0 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_1 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_2 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_3 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_4 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_5 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_6 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_7 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    node T_1552 = neq(state, UInt<4>("h0"))
    node T_1553 = eq(io_inner_acquire_bits_addr_block, xact_addr_block)
    node T_1554 = and(T_1552, T_1553)
    node T_1556 = eq(io_inner_release_bits_addr_block, xact_addr_block)
    node T_1557 = and(T_1552, T_1556)
    node T_1559 = eq(io_outer_probe_bits_addr_block, xact_addr_block)
    node T_1560 = and(T_1552, T_1559)
    node T_1568 = or(scoreboard_2, vol_ognt_counter_pending)
    node T_1572 = mux(T_1519, io_alloc_irel_should, io_alloc_irel_matches)
    node T_1573 = and(T_1572, io_inner_release_bits_voluntary)
    node T_1578 = and(T_1520, T_1573)
    node T_1580 = eq(io_inner_release_bits_r_type, UInt<3>("h0"))
    node T_1581 = eq(io_inner_release_bits_r_type, UInt<3>("h1"))
    node T_1582 = eq(io_inner_release_bits_r_type, UInt<3>("h2"))
    node T_1583 = or(T_1580, T_1581)
    node T_1584 = or(T_1583, T_1582)
    node T_1586 = and(T_1578, T_1584)
    reg T_1588 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_1590 = eq(T_1588, UInt<3>("h7"))
    node T_1592 = add(T_1588, UInt<3>("h1"))
    node T_1593 = tail(T_1592, 1)
    node GEN_2 = mux(T_1586, T_1593, T_1588)
    node T_1594 = and(T_1586, T_1590)
    node T_1595 = mux(T_1584, T_1588, UInt<3>("h0"))
    node T_1596 = mux(T_1584, T_1594, T_1578)
    node T_1597 = and(io_inner_grant_ready, io_inner_grant_valid)
    node T_1600 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_1601 = and(io_inner_grant_bits_is_builtin_type, T_1600)
    node T_1602 = and(T_1552, T_1601)
    node T_1603 = and(T_1597, T_1602)
    wire T_1611_0 : UInt<3>
    node GEN_56 = pad(UInt<3>("h5"), 4)
    node T_1613 = eq(io_inner_grant_bits_g_type, GEN_56)
    node T_1615 = mux(io_inner_grant_bits_is_builtin_type, T_1613, T_1600)
    node T_1617 = and(T_1603, T_1615)
    reg T_1619 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_1621 = eq(T_1619, UInt<3>("h7"))
    node T_1623 = add(T_1619, UInt<3>("h1"))
    node T_1624 = tail(T_1623, 1)
    node GEN_3 = mux(T_1617, T_1624, T_1619)
    node T_1625 = and(T_1617, T_1621)
    node T_1626 = mux(T_1615, T_1619, UInt<3>("h0"))
    node T_1627 = mux(T_1615, T_1625, T_1603)
    reg T_1629 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_1631 = eq(T_1627, UInt<1>("h0"))
    node T_1632 = and(T_1596, T_1631)
    node T_1634 = add(T_1629, UInt<1>("h1"))
    node T_1635 = tail(T_1634, 1)
    node GEN_4 = mux(T_1632, T_1635, T_1629)
    node T_1637 = eq(T_1596, UInt<1>("h0"))
    node T_1638 = and(T_1627, T_1637)
    node T_1640 = sub(T_1629, UInt<1>("h1"))
    node T_1641 = tail(T_1640, 1)
    node GEN_5 = mux(T_1638, T_1641, GEN_4)
    node T_1643 = gt(T_1629, UInt<1>("h0"))
    node T_1645 = and(T_1519, io_alloc_irel_should)
    node T_1646 = and(T_1645, io_inner_release_valid)
    node GEN_6 = mux(T_1646, io_inner_release_bits_addr_block, xact_addr_block)
    node GEN_7 = mux(T_1646, UInt<8>("hff"), pending_irel_data)
    node GEN_8 = mux(T_1646, UInt<4>("h7"), state)
    node T_1654 = and(T_1556, io_inner_release_bits_voluntary)
    node T_1656 = neq(pending_irel_data, UInt<8>("h0"))
    node T_1657 = and(T_1654, T_1656)
    node T_1659 = and(T_1657, io_inner_release_valid)
    node T_1660 = or(T_1646, T_1659)
    node T_1661 = and(T_1660, io_inner_release_ready)
    node T_1670 = eq(T_1584, UInt<1>("h0"))
    node T_1672 = eq(io_inner_release_bits_addr_beat, UInt<3>("h0"))
    node T_1673 = or(T_1670, T_1672)
    node GEN_9 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_r_type, xact_vol_ir_r_type)
    node GEN_10 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_id, xact_vol_ir_src)
    node GEN_11 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_xact_id, xact_vol_ir_client_xact_id)
    node T_1687 = and(T_1520, T_1584)
    node T_1691 = mux(T_1687, UInt<8>("hff"), UInt<8>("h0"))
    node T_1692 = not(T_1691)
    node T_1694 = dshlw(UInt<8>("h1"), io_inner_release_bits_addr_beat)
    node T_1695 = not(T_1694)
    node T_1696 = or(T_1692, T_1695)
    node T_1698 = mux(T_1584, T_1696, UInt<8>("h0"))
    node GEN_12 = mux(T_1673, GEN_9, xact_vol_ir_r_type)
    node GEN_13 = mux(T_1673, GEN_10, xact_vol_ir_src)
    node GEN_14 = mux(T_1673, GEN_11, xact_vol_ir_client_xact_id)
    node GEN_15 = mux(T_1673, T_1698, GEN_7)
    node T_1700 = eq(T_1673, UInt<1>("h0"))
    node T_1717 = and(pending_irel_data, T_1696)
    node GEN_16 = mux(T_1700, T_1717, GEN_15)
    node GEN_17 = mux(T_1661, GEN_12, xact_vol_ir_r_type)
    node GEN_18 = mux(T_1661, GEN_13, xact_vol_ir_src)
    node GEN_19 = mux(T_1661, GEN_14, xact_vol_ir_client_xact_id)
    node GEN_20 = mux(T_1661, GEN_16, GEN_7)
    node T_1718 = eq(state, UInt<4>("h3"))
    node T_1719 = eq(state, UInt<4>("h4"))
    node T_1720 = eq(state, UInt<4>("h5"))
    node T_1721 = eq(state, UInt<4>("h7"))
    node T_1722 = or(T_1718, T_1719)
    node T_1723 = or(T_1722, T_1720)
    node T_1724 = or(T_1723, T_1721)
    node T_1725 = and(T_1724, vol_ignt_counter_pending)
    node T_1728 = or(T_1656, T_1568)
    node T_1730 = eq(T_1728, UInt<1>("h0"))
    node T_1731 = and(T_1725, T_1730)
    wire T_1763_addr_beat : UInt<3>
    wire T_1763_addr_block : UInt<26>
    wire T_1763_client_xact_id : UInt<1>
    wire T_1763_voluntary : UInt<1>
    wire T_1763_r_type : UInt<3>
    wire T_1763_data : UInt<64>
    wire T_1763_client_id : UInt<1>
    wire T_1824_addr_beat : UInt<3>
    wire T_1824_client_xact_id : UInt<1>
    wire T_1824_manager_xact_id : UInt<4>
    wire T_1824_is_builtin_type : UInt<1>
    wire T_1824_g_type : UInt<4>
    wire T_1824_data : UInt<64>
    wire T_1824_client_id : UInt<1>
    node T_1861 = or(T_1519, T_1657)
    wire GEN_0 : UInt<64>
    node GEN_21 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), GEN_0, data_buffer_0)
    node GEN_22 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), GEN_0, data_buffer_1)
    node GEN_23 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), GEN_0, data_buffer_2)
    node GEN_24 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), GEN_0, data_buffer_3)
    node GEN_25 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), GEN_0, data_buffer_4)
    node GEN_26 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), GEN_0, data_buffer_5)
    node GEN_27 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), GEN_0, data_buffer_6)
    node GEN_28 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), GEN_0, data_buffer_7)
    node GEN_29 = mux(T_1520, GEN_21, data_buffer_0)
    node GEN_30 = mux(T_1520, GEN_22, data_buffer_1)
    node GEN_31 = mux(T_1520, GEN_23, data_buffer_2)
    node GEN_32 = mux(T_1520, GEN_24, data_buffer_3)
    node GEN_33 = mux(T_1520, GEN_25, data_buffer_4)
    node GEN_34 = mux(T_1520, GEN_26, data_buffer_5)
    node GEN_35 = mux(T_1520, GEN_27, data_buffer_6)
    node GEN_36 = mux(T_1520, GEN_28, data_buffer_7)
    wire T_1893_state : UInt<2>
    node T_1922 = or(T_1552, io_alloc_irel_should)
    node T_1938 = and(T_1691, T_1694)
    node T_1939 = or(pending_orel_data, T_1938)
    node T_1941 = and(io_outer_release_ready, io_outer_release_valid)
    node T_1942 = eq(io_outer_release_bits_r_type, UInt<3>("h0"))
    node T_1943 = eq(io_outer_release_bits_r_type, UInt<3>("h1"))
    node T_1944 = eq(io_outer_release_bits_r_type, UInt<3>("h2"))
    node T_1945 = or(T_1942, T_1943)
    node T_1946 = or(T_1945, T_1944)
    node T_1947 = and(T_1941, T_1946)
    node T_1951 = mux(T_1947, UInt<8>("hff"), UInt<8>("h0"))
    node T_1952 = not(T_1951)
    node T_1954 = dshlw(UInt<8>("h1"), io_outer_release_bits_addr_beat)
    node T_1955 = not(T_1954)
    node T_1956 = or(T_1952, T_1955)
    node T_1957 = and(T_1939, T_1956)
    node GEN_37 = mux(T_1922, T_1957, pending_orel_data)
    node GEN_38 = mux(T_1646, UInt<1>("h1"), pending_orel_send)
    node T_1968 = eq(T_1946, UInt<1>("h0"))
    node T_1970 = eq(io_outer_release_bits_addr_beat, UInt<3>("h0"))
    node T_1971 = or(T_1968, T_1970)
    node GEN_39 = mux(T_1971, UInt<1>("h1"), sending_orel)
    node T_1983 = eq(io_outer_release_bits_addr_beat, UInt<3>("h7"))
    node T_1984 = or(T_1968, T_1983)
    node GEN_40 = mux(T_1984, UInt<1>("h0"), GEN_39)
    node GEN_41 = mux(T_1941, GEN_40, sending_orel)
    node GEN_42 = mux(T_1941, UInt<1>("h0"), GEN_38)
    node T_1993 = and(T_1941, io_outer_release_bits_voluntary)
    node T_2001 = and(T_1993, T_1946)
    reg T_2003 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2005 = eq(T_2003, UInt<3>("h7"))
    node T_2007 = add(T_2003, UInt<3>("h1"))
    node T_2008 = tail(T_2007, 1)
    node GEN_43 = mux(T_2001, T_2008, T_2003)
    node T_2009 = and(T_2001, T_2005)
    node T_2010 = mux(T_1946, T_2003, UInt<3>("h0"))
    node T_2011 = mux(T_1946, T_2009, T_1993)
    node T_2012 = and(io_outer_grant_ready, io_outer_grant_valid)
    node T_2014 = eq(io_outer_grant_bits_g_type, UInt<4>("h0"))
    node T_2015 = and(io_outer_grant_bits_is_builtin_type, T_2014)
    node T_2016 = and(T_2012, T_2015)
    wire T_2024_0 : UInt<3>
    node GEN_57 = pad(UInt<3>("h5"), 4)
    node T_2026 = eq(io_outer_grant_bits_g_type, GEN_57)
    node T_2028 = mux(io_outer_grant_bits_is_builtin_type, T_2026, T_2014)
    node T_2030 = and(T_2016, T_2028)
    reg T_2032 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2034 = eq(T_2032, UInt<3>("h7"))
    node T_2036 = add(T_2032, UInt<3>("h1"))
    node T_2037 = tail(T_2036, 1)
    node GEN_44 = mux(T_2030, T_2037, T_2032)
    node T_2038 = and(T_2030, T_2034)
    node T_2039 = mux(T_2028, T_2032, UInt<3>("h0"))
    node T_2040 = mux(T_2028, T_2038, T_2016)
    reg T_2042 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2044 = eq(T_2040, UInt<1>("h0"))
    node T_2045 = and(T_2011, T_2044)
    node T_2047 = add(T_2042, UInt<1>("h1"))
    node T_2048 = tail(T_2047, 1)
    node GEN_45 = mux(T_2045, T_2048, T_2042)
    node T_2050 = eq(T_2011, UInt<1>("h0"))
    node T_2051 = and(T_2040, T_2050)
    node T_2053 = sub(T_2042, UInt<1>("h1"))
    node T_2054 = tail(T_2053, 1)
    node GEN_46 = mux(T_2051, T_2054, GEN_45)
    node T_2056 = gt(T_2042, UInt<1>("h0"))
    node T_2065 = dshr(pending_orel_data, vol_ognt_counter_up_idx)
    node T_2066 = bits(T_2065, 0, 0)
    node T_2067 = mux(T_1946, T_2066, pending_orel_send)
    node T_2068 = and(T_1721, T_2067)
    node T_2082 = eq(UInt<2>("h2"), UInt<2>("h2"))
    node T_2083 = mux(T_2082, UInt<3>("h0"), UInt<3>("h3"))
    wire T_2119_addr_beat : UInt<3>
    wire T_2119_addr_block : UInt<26>
    wire T_2119_client_xact_id : UInt<4>
    wire T_2119_voluntary : UInt<1>
    wire T_2119_r_type : UInt<3>
    wire T_2119_data : UInt<64>
    wire GEN_1 : UInt<64>
    node GEN_47 = mux(eq(UInt<3>("h1"), vol_ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_48 = mux(eq(UInt<3>("h2"), vol_ognt_counter_up_idx), data_buffer_2, GEN_47)
    node GEN_49 = mux(eq(UInt<3>("h3"), vol_ognt_counter_up_idx), data_buffer_3, GEN_48)
    node GEN_50 = mux(eq(UInt<3>("h4"), vol_ognt_counter_up_idx), data_buffer_4, GEN_49)
    node GEN_51 = mux(eq(UInt<3>("h5"), vol_ognt_counter_up_idx), data_buffer_5, GEN_50)
    node GEN_52 = mux(eq(UInt<3>("h6"), vol_ognt_counter_up_idx), data_buffer_6, GEN_51)
    node GEN_53 = mux(eq(UInt<3>("h7"), vol_ognt_counter_up_idx), data_buffer_7, GEN_52)
    node T_2149 = or(T_1656, vol_ignt_counter_pending)
    node T_2150 = or(T_2149, scoreboard_2)
    node T_2151 = or(T_2150, vol_ognt_counter_pending)
    node T_2153 = eq(T_2151, UInt<1>("h0"))
    node T_2155 = and(T_1721, all_pending_done)
    node GEN_55 = mux(T_2155, UInt<4>("h0"), GEN_8)
    io_inner_acquire_ready <= UInt<1>("h0")
    io_inner_grant_valid <= T_1731
    io_inner_grant_bits_addr_beat <= UInt<3>("h0")
    io_inner_grant_bits_client_xact_id <= T_1824_client_xact_id
    io_inner_grant_bits_manager_xact_id <= UInt<4>("h0")
    io_inner_grant_bits_is_builtin_type <= UInt<1>("h1")
    io_inner_grant_bits_g_type <= UInt<4>("h0")
    io_inner_grant_bits_data <= UInt<64>("h0")
    io_inner_grant_bits_client_id <= T_1824_client_id
    io_inner_finish_ready <= UInt<1>("h0")
    io_inner_probe_valid <= UInt<1>("h0")
    io_inner_probe_bits_addr_block <= UInt<26>("h3f1a083")
    io_inner_probe_bits_p_type <= UInt<2>("h3")
    io_inner_probe_bits_client_id <= UInt<1>("h0")
    io_inner_release_ready <= T_1861
    io_outer_acquire_valid <= UInt<1>("h0")
    io_outer_acquire_bits_addr_block <= UInt<26>("h1d5a015")
    io_outer_acquire_bits_client_xact_id <= UInt<4>("hb")
    io_outer_acquire_bits_addr_beat <= UInt<3>("h7")
    io_outer_acquire_bits_is_builtin_type <= UInt<1>("h1")
    io_outer_acquire_bits_a_type <= UInt<3>("h7")
    io_outer_acquire_bits_union <= UInt<11>("h598")
    io_outer_acquire_bits_data <= UInt<64>("hafc21012e860c368")
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= T_2068
    io_outer_release_bits_addr_beat <= T_2119_addr_beat
    io_outer_release_bits_addr_block <= T_2119_addr_block
    io_outer_release_bits_client_xact_id <= UInt<4>("h0")
    io_outer_release_bits_voluntary <= UInt<1>("h1")
    io_outer_release_bits_r_type <= T_2119_r_type
    io_outer_release_bits_data <= T_2119_data
    io_outer_grant_ready <= vol_ognt_counter_pending
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= UInt<1>("h0")
    io_outer_finish_bits_manager_id <= UInt<1>("h1")
    io_alloc_iacq_matches <= T_1554
    io_alloc_iacq_can <= UInt<1>("h0")
    io_alloc_irel_matches <= T_1557
    io_alloc_irel_can <= T_1519
    io_alloc_oprb_matches <= T_1560
    io_alloc_oprb_can <= UInt<1>("h0")
    io_alloc_idle <= T_1519
    io_alloc_addr_block <= xact_addr_block
    all_pending_done <= T_2153
    state <= GEN_55
    xact_addr_block <= GEN_6
    xact_vol_ir_r_type <= GEN_17
    xact_vol_ir_src <= GEN_18
    xact_vol_ir_client_xact_id <= GEN_19
    pending_irel_data <= GEN_20
    vol_ignt_counter_pending <= T_1643
    vol_ignt_counter_up_idx <= T_1595
    vol_ignt_counter_up_done <= T_1596
    vol_ignt_counter_down_idx <= T_1626
    vol_ignt_counter_down_done <= T_1627
    pending_orel_send <= GEN_42
    pending_orel_data <= GEN_37
    vol_ognt_counter_pending <= T_2056
    vol_ognt_counter_up_idx <= T_2010
    vol_ognt_counter_up_done <= T_2011
    vol_ognt_counter_down_idx <= T_2039
    vol_ognt_counter_down_done <= T_2040
    sending_orel <= GEN_41
    data_buffer_0 <= GEN_29
    data_buffer_1 <= GEN_30
    data_buffer_2 <= GEN_31
    data_buffer_3 <= GEN_32
    data_buffer_4 <= GEN_33
    data_buffer_5 <= GEN_34
    data_buffer_6 <= GEN_35
    data_buffer_7 <= GEN_36
    T_1588 <= GEN_2
    T_1619 <= GEN_3
    T_1629 <= GEN_5
    T_1763_addr_block <= xact_addr_block
    T_1763_client_xact_id <= xact_vol_ir_client_xact_id
    T_1763_r_type <= xact_vol_ir_r_type
    T_1763_client_id <= xact_vol_ir_src
    T_1824_client_xact_id <= T_1763_client_xact_id
    T_1824_client_id <= T_1763_client_id
    GEN_0 <= io_inner_release_bits_data
    T_2003 <= GEN_43
    T_2032 <= GEN_44
    T_2042 <= GEN_46
    T_2119_addr_beat <= vol_ognt_counter_up_idx
    T_2119_addr_block <= xact_addr_block
    T_2119_r_type <= T_2083
    T_2119_data <= GEN_1
    GEN_1 <= GEN_53
    printf(clk, T_1530, "Assertion failed: VoluntaryReleaseTracker accepted Release that wasn't voluntary!\n    at Broadcast.scala:81 assert(!(state === s_idle && io.inner.release.fire() && io.alloc.irel.should && !io.irel().isVoluntary()),\n")
    stop(clk, T_1530, 1)

  module Queue_8 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_client_xact_id : UInt<1>
    input io_enq_bits_addr_beat : UInt<3>
    input io_enq_bits_client_id : UInt<1>
    input io_enq_bits_is_builtin_type : UInt<1>
    input io_enq_bits_a_type : UInt<3>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_client_xact_id : UInt<1>
    output io_deq_bits_addr_beat : UInt<3>
    output io_deq_bits_client_id : UInt<1>
    output io_deq_bits_is_builtin_type : UInt<1>
    output io_deq_bits_a_type : UInt<3>
    output io_count : UInt<2>
  
    mem ram_client_xact_id :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_253
      read-under-write => undefined
    ram_client_xact_id.T_294.en <= UInt<1>("h1")
    ram_client_xact_id.T_294.addr <= T_247
    ram_client_xact_id.T_253.en <= do_enq
    ram_client_xact_id.T_253.mask <= do_enq
    ram_client_xact_id.T_253.addr <= T_245
    ram_client_xact_id.T_253.data <= io_enq_bits_client_xact_id
    mem ram_addr_beat :
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_253
      read-under-write => undefined
    ram_addr_beat.T_294.en <= UInt<1>("h1")
    ram_addr_beat.T_294.addr <= T_247
    ram_addr_beat.T_253.en <= do_enq
    ram_addr_beat.T_253.mask <= do_enq
    ram_addr_beat.T_253.addr <= T_245
    ram_addr_beat.T_253.data <= io_enq_bits_addr_beat
    mem ram_client_id :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_253
      read-under-write => undefined
    ram_client_id.T_294.en <= UInt<1>("h1")
    ram_client_id.T_294.addr <= T_247
    ram_client_id.T_253.en <= do_enq
    ram_client_id.T_253.mask <= do_enq
    ram_client_id.T_253.addr <= T_245
    ram_client_id.T_253.data <= io_enq_bits_client_id
    mem ram_is_builtin_type :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_253
      read-under-write => undefined
    ram_is_builtin_type.T_294.en <= UInt<1>("h1")
    ram_is_builtin_type.T_294.addr <= T_247
    ram_is_builtin_type.T_253.en <= do_enq
    ram_is_builtin_type.T_253.mask <= do_enq
    ram_is_builtin_type.T_253.addr <= T_245
    ram_is_builtin_type.T_253.data <= io_enq_bits_is_builtin_type
    mem ram_a_type :
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_253
      read-under-write => undefined
    ram_a_type.T_294.en <= UInt<1>("h1")
    ram_a_type.T_294.addr <= T_247
    ram_a_type.T_253.en <= do_enq
    ram_a_type.T_253.mask <= do_enq
    ram_a_type.T_253.addr <= T_245
    ram_a_type.T_253.data <= io_enq_bits_a_type
    reg T_245 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_247 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node ptr_match = eq(T_245, T_247)
    node T_250 = eq(maybe_full, UInt<1>("h0"))
    node empty = and(ptr_match, T_250)
    node full = and(ptr_match, maybe_full)
    node T_251 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_252 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_282 = add(T_245, UInt<1>("h1"))
    node T_283 = tail(T_282, 1)
    node GEN_8 = mux(do_enq, T_283, T_245)
    node T_287 = add(T_247, UInt<1>("h1"))
    node T_288 = tail(T_287, 1)
    node GEN_9 = mux(do_deq, T_288, T_247)
    node T_289 = neq(do_enq, do_deq)
    node GEN_10 = mux(T_289, do_enq, maybe_full)
    node T_291 = eq(empty, UInt<1>("h0"))
    node T_293 = eq(full, UInt<1>("h0"))
    node T_320 = sub(T_245, T_247)
    node ptr_diff = tail(T_320, 1)
    node T_321 = and(maybe_full, ptr_match)
    node T_322 = cat(T_321, ptr_diff)
    io_enq_ready <= T_293
    io_deq_valid <= T_291
    io_deq_bits_client_xact_id <= ram_client_xact_id.T_294.data
    io_deq_bits_addr_beat <= ram_addr_beat.T_294.data
    io_deq_bits_client_id <= ram_client_id.T_294.data
    io_deq_bits_is_builtin_type <= ram_is_builtin_type.T_294.data
    io_deq_bits_a_type <= ram_a_type.T_294.data
    io_count <= T_322
    T_245 <= GEN_8
    T_247 <= GEN_9
    maybe_full <= GEN_10
    do_enq <= T_251
    do_deq <= T_252

  module BufferedBroadcastAcquireTracker :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
    output io_alloc_iacq_matches : UInt<1>
    output io_alloc_iacq_can : UInt<1>
    input io_alloc_iacq_should : UInt<1>
    output io_alloc_irel_matches : UInt<1>
    output io_alloc_irel_can : UInt<1>
    input io_alloc_irel_should : UInt<1>
    output io_alloc_oprb_matches : UInt<1>
    output io_alloc_oprb_can : UInt<1>
    input io_alloc_oprb_should : UInt<1>
    output io_alloc_idle : UInt<1>
    output io_alloc_addr_block : UInt<26>
  
    wire all_pending_done : UInt<1>
    reg state : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg xact_addr_block : UInt<26>, clk with :
      reset => (reset, UInt<26>("h0"))
    reg xact_allocate : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_allocate)
    reg xact_amo_shift_bytes : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_amo_shift_bytes)
    reg xact_op_code : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_op_code)
    reg xact_addr_byte : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_addr_byte)
    reg xact_op_size : UInt<2>, clk with :
      reset => (UInt<1>("h0"), xact_op_size)
    wire xact_addr_beat : UInt<3>
    wire xact_iacq_client_xact_id : UInt<1>
    wire xact_iacq_addr_beat : UInt<3>
    wire xact_iacq_client_id : UInt<1>
    wire xact_iacq_is_builtin_type : UInt<1>
    wire xact_iacq_a_type : UInt<3>
    reg xact_vol_ir_r_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_r_type)
    reg xact_vol_ir_src : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_src)
    reg xact_vol_ir_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_client_xact_id)
    reg pending_irel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ignt_counter_pending : UInt<1>
    wire vol_ignt_counter_up_idx : UInt<3>
    wire vol_ignt_counter_up_done : UInt<1>
    wire vol_ignt_counter_down_idx : UInt<3>
    wire vol_ignt_counter_down_done : UInt<1>
    wire scoreboard_6 : UInt<1>
    wire ignt_data_idx : UInt<3>
    wire ignt_data_done : UInt<1>
    wire ifin_counter_pending : UInt<1>
    wire ifin_counter_up_idx : UInt<3>
    wire ifin_counter_up_done : UInt<1>
    wire ifin_counter_down_idx : UInt<3>
    wire ifin_counter_down_done : UInt<1>
    reg pending_put_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg pending_ignt_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire ognt_counter_pending : UInt<1>
    wire ognt_counter_up_idx : UInt<3>
    wire ognt_counter_up_done : UInt<1>
    wire ognt_counter_down_idx : UInt<3>
    wire ognt_counter_down_done : UInt<1>
    reg pending_iprbs : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pending_iprbs)
    reg pending_orel_send : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_orel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ognt_counter_pending : UInt<1>
    wire vol_ognt_counter_up_idx : UInt<3>
    wire vol_ognt_counter_up_done : UInt<1>
    wire vol_ognt_counter_down_idx : UInt<3>
    wire vol_ognt_counter_down_done : UInt<1>
    node T_170 = neq(pending_orel_data, UInt<8>("h0"))
    node T_171 = or(pending_orel_send, T_170)
    node scoreboard_3 = or(T_171, vol_ognt_counter_pending)
    reg sending_orel : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_195_sharers : UInt<1>
    wire T_241_state : UInt<2>
    wire coh_inner_sharers : UInt<1>
    wire coh_outer_state : UInt<2>
    node T_1611 = eq(state, UInt<4>("h0"))
    node T_1612 = and(io_inner_acquire_ready, io_inner_acquire_valid)
    node T_1613 = and(T_1611, T_1612)
    node T_1614 = and(T_1613, io_alloc_iacq_should)
    wire T_1623_0 : UInt<3>
    node T_1625 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1626 = and(io_inner_acquire_bits_is_builtin_type, T_1625)
    node T_1627 = and(T_1614, T_1626)
    wire T_1636_0 : UInt<3>
    node T_1638 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1639 = and(io_inner_acquire_bits_is_builtin_type, T_1638)
    node T_1641 = eq(T_1639, UInt<1>("h0"))
    node T_1643 = eq(io_inner_acquire_bits_addr_beat, UInt<3>("h0"))
    node T_1644 = or(T_1641, T_1643)
    node T_1646 = eq(T_1644, UInt<1>("h0"))
    node T_1647 = and(T_1627, T_1646)
    node T_1649 = eq(T_1647, UInt<1>("h0"))
    node T_1650 = or(T_1649, reset)
    node T_1652 = eq(T_1650, UInt<1>("h0"))
    node T_1653 = neq(state, UInt<4>("h0"))
    node T_1654 = and(T_1653, scoreboard_6)
    node T_1656 = eq(xact_iacq_a_type, UInt<3>("h5"))
    node T_1658 = eq(xact_iacq_a_type, UInt<3>("h6"))
    node T_1659 = or(T_1656, T_1658)
    node T_1660 = and(xact_iacq_is_builtin_type, T_1659)
    node T_1661 = and(T_1654, T_1660)
    node T_1663 = eq(T_1661, UInt<1>("h0"))
    node T_1664 = or(T_1663, reset)
    node T_1666 = eq(T_1664, UInt<1>("h0"))
    node T_1670 = eq(xact_iacq_a_type, UInt<3>("h4"))
    node T_1671 = and(xact_iacq_is_builtin_type, T_1670)
    node T_1672 = and(T_1654, T_1671)
    node T_1674 = eq(T_1672, UInt<1>("h0"))
    node T_1675 = or(T_1674, reset)
    node T_1677 = eq(T_1675, UInt<1>("h0"))
    wire T_1691_0 : UInt<64>
    wire T_1691_1 : UInt<64>
    wire T_1691_2 : UInt<64>
    wire T_1691_3 : UInt<64>
    wire T_1691_4 : UInt<64>
    wire T_1691_5 : UInt<64>
    wire T_1691_6 : UInt<64>
    wire T_1691_7 : UInt<64>
    reg data_buffer_0 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_1 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_2 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_3 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_4 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_5 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_6 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_7 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    wire T_1709_0 : UInt<8>
    wire T_1709_1 : UInt<8>
    wire T_1709_2 : UInt<8>
    wire T_1709_3 : UInt<8>
    wire T_1709_4 : UInt<8>
    wire T_1709_5 : UInt<8>
    wire T_1709_6 : UInt<8>
    wire T_1709_7 : UInt<8>
    reg wmask_buffer_0 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_1 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_2 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_3 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_4 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_5 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_6 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_7 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    node T_1714 = not(wmask_buffer_0)
    node T_1716 = eq(T_1714, UInt<8>("h0"))
    node T_1717 = not(wmask_buffer_1)
    node T_1719 = eq(T_1717, UInt<8>("h0"))
    node T_1720 = not(wmask_buffer_2)
    node T_1722 = eq(T_1720, UInt<8>("h0"))
    node T_1723 = not(wmask_buffer_3)
    node T_1725 = eq(T_1723, UInt<8>("h0"))
    node T_1726 = not(wmask_buffer_4)
    node T_1728 = eq(T_1726, UInt<8>("h0"))
    node T_1729 = not(wmask_buffer_5)
    node T_1731 = eq(T_1729, UInt<8>("h0"))
    node T_1732 = not(wmask_buffer_6)
    node T_1734 = eq(T_1732, UInt<8>("h0"))
    node T_1735 = not(wmask_buffer_7)
    node T_1737 = eq(T_1735, UInt<8>("h0"))
    wire data_valid_0 : UInt<1>
    wire data_valid_1 : UInt<1>
    wire data_valid_2 : UInt<1>
    wire data_valid_3 : UInt<1>
    wire data_valid_4 : UInt<1>
    wire data_valid_5 : UInt<1>
    wire data_valid_6 : UInt<1>
    wire data_valid_7 : UInt<1>
    node T_1748 = eq(io_inner_acquire_bits_addr_block, xact_addr_block)
    node T_1749 = and(T_1653, T_1748)
    node T_1751 = eq(io_inner_release_bits_addr_block, xact_addr_block)
    node T_1752 = and(T_1653, T_1751)
    node T_1754 = eq(io_outer_probe_bits_addr_block, xact_addr_block)
    node T_1755 = and(T_1653, T_1754)
    node T_1764 = eq(xact_iacq_client_xact_id, io_inner_acquire_bits_client_xact_id)
    node T_1765 = eq(xact_iacq_client_id, io_inner_acquire_bits_client_id)
    node T_1766 = and(T_1764, T_1765)
    node T_1767 = and(T_1766, scoreboard_6)
    node T_1768 = eq(xact_iacq_addr_beat, io_inner_acquire_bits_addr_beat)
    node T_1769 = and(T_1767, T_1768)
    inst ignt_q of Queue_8
    node T_1797 = and(T_1611, io_alloc_iacq_should)
    node T_1798 = and(T_1797, io_inner_acquire_valid)
    node T_1800 = eq(T_1769, UInt<1>("h0"))
    node T_1801 = and(T_1800, scoreboard_6)
    node T_1803 = and(T_1801, T_1612)
    wire T_1812_0 : UInt<3>
    node T_1814 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1815 = and(io_inner_acquire_bits_is_builtin_type, T_1814)
    node T_1817 = eq(T_1815, UInt<1>("h0"))
    node T_1820 = or(T_1817, T_1643)
    node T_1821 = and(T_1803, T_1820)
    node T_1822 = or(T_1798, T_1821)
    node T_1823_client_xact_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_xact_id, ignt_q.io_enq_bits_client_xact_id)
    node T_1823_addr_beat = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_addr_beat, ignt_q.io_enq_bits_addr_beat)
    node T_1823_client_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_id, ignt_q.io_enq_bits_client_id)
    node T_1823_is_builtin_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_is_builtin_type, ignt_q.io_enq_bits_is_builtin_type)
    node T_1823_a_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_a_type, ignt_q.io_enq_bits_a_type)
    node T_1850 = gt(ignt_q.io_count, UInt<2>("h0"))
    node T_1852 = or(T_1653, io_alloc_iacq_should)
    wire T_1862_0 : UInt<3>
    wire T_1862_1 : UInt<3>
    wire T_1862_2 : UInt<3>
    node T_1864 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1865 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1866 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1867 = or(T_1864, T_1865)
    node T_1868 = or(T_1867, T_1866)
    node T_1869 = and(io_inner_acquire_bits_is_builtin_type, T_1868)
    node T_1870 = and(T_1612, T_1869)
    node T_1874 = mux(T_1870, UInt<8>("hff"), UInt<8>("h0"))
    node T_1875 = not(T_1874)
    node T_1877 = dshlw(UInt<8>("h1"), io_inner_acquire_bits_addr_beat)
    node T_1878 = not(T_1877)
    node T_1879 = or(T_1875, T_1878)
    node T_1880 = and(pending_put_data, T_1879)
    wire T_1890_0 : UInt<3>
    node T_1892 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1893 = and(io_inner_acquire_bits_is_builtin_type, T_1892)
    node T_1894 = and(T_1612, T_1893)
    node T_1897 = and(T_1894, T_1643)
    node T_1906 = mux(T_1897, UInt<8>("hfe"), UInt<8>("h0"))
    node T_1907 = or(T_1880, T_1906)
    node GEN_30 = mux(T_1852, T_1907, pending_put_data)
    node T_1915 = mul(UInt<4>("h8"), UInt<4>("h0"))
    node T_1917 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1918 = and(io_inner_acquire_bits_is_builtin_type, T_1917)
    node T_1920 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1921 = and(io_inner_acquire_bits_is_builtin_type, T_1920)
    node T_1922 = or(T_1918, T_1921)
    node T_1923 = bits(io_inner_acquire_bits_union, 5, 1)
    node T_1924 = mux(T_1922, UInt<5>("h1"), T_1923)
    node T_1925 = bits(io_inner_acquire_bits_union, 10, 8)
    node T_1926 = bits(io_inner_acquire_bits_union, 7, 6)
    wire T_1939_0 : UInt<3>
    wire T_1939_1 : UInt<3>
    wire T_1939_2 : UInt<3>
    node T_1941 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1942 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1943 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1944 = or(T_1941, T_1942)
    node T_1945 = or(T_1944, T_1943)
    node T_1946 = and(io_inner_acquire_bits_is_builtin_type, T_1945)
    node T_1947 = and(T_1612, T_1946)
    node T_1951 = mux(T_1947, UInt<8>("hff"), UInt<8>("h0"))
    node T_1952 = not(T_1951)
    node T_1956 = or(T_1952, T_1878)
    node T_1958 = mux(T_1921, T_1956, UInt<8>("h0"))
    node GEN_31 = mux(T_1798, io_inner_acquire_bits_addr_block, xact_addr_block)
    node GEN_32 = mux(T_1798, UInt<1>("h0"), xact_allocate)
    node GEN_33 = mux(T_1798, T_1915, xact_amo_shift_bytes)
    node GEN_34 = mux(T_1798, T_1924, xact_op_code)
    node GEN_35 = mux(T_1798, T_1925, xact_addr_byte)
    node GEN_36 = mux(T_1798, T_1926, xact_op_size)
    node GEN_37 = mux(T_1798, T_1958, GEN_30)
    node GEN_38 = mux(T_1798, UInt<8>("h0"), pending_ignt_data)
    node GEN_39 = mux(T_1798, UInt<4>("h5"), state)
    node scoreboard_0 = neq(pending_put_data, UInt<8>("h0"))
    wire T_1976_0 : UInt<3>
    node T_1978 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1979 = and(io_inner_acquire_bits_is_builtin_type, T_1978)
    node T_1980 = and(T_1767, T_1979)
    node T_1981 = or(T_1611, T_1980)
    node T_1982 = not(pending_ignt_data)
    node skip_outer_acquire = eq(T_1982, UInt<8>("h0"))
    node T_1991 = eq(UInt<3>("h4"), xact_iacq_a_type)
    node T_1992 = mux(T_1991, UInt<2>("h0"), UInt<2>("h2"))
    node T_1993 = eq(UInt<3>("h6"), xact_iacq_a_type)
    node T_1994 = mux(T_1993, UInt<2>("h0"), T_1992)
    node T_1995 = eq(UInt<3>("h5"), xact_iacq_a_type)
    node T_1996 = mux(T_1995, UInt<2>("h2"), T_1994)
    node T_1997 = eq(UInt<3>("h2"), xact_iacq_a_type)
    node T_1998 = mux(T_1997, UInt<2>("h0"), T_1996)
    node T_1999 = eq(UInt<3>("h0"), xact_iacq_a_type)
    node T_2000 = mux(T_1999, UInt<2>("h2"), T_1998)
    node T_2001 = eq(UInt<3>("h3"), xact_iacq_a_type)
    node T_2002 = mux(T_2001, UInt<2>("h0"), T_2000)
    node T_2003 = eq(UInt<3>("h1"), xact_iacq_a_type)
    node T_2004 = mux(T_2003, UInt<2>("h2"), T_2002)
    node T_2005 = mux(xact_iacq_is_builtin_type, T_2004, UInt<2>("h0"))
    wire T_2030_addr_block : UInt<26>
    wire T_2030_p_type : UInt<2>
    wire T_2030_client_id : UInt<1>
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h0"))
    node T_2056 = mux(T_2055, UInt<4>("h6"), UInt<4>("h7"))
    wire T_2065_pending : UInt<1>
    wire T_2065_up_idx : UInt<3>
    wire T_2065_up_done : UInt<1>
    wire T_2065_down_idx : UInt<3>
    wire T_2065_down_done : UInt<1>
    node T_2073 = and(io_inner_probe_ready, io_inner_probe_valid)
    node T_2074 = not(T_2073)
    node T_2076 = dshlw(UInt<2>("h1"), io_inner_probe_bits_client_id)
    node T_2077 = not(T_2076)
    node GEN_273 = pad(T_2074, 2)
    node T_2078 = or(GEN_273, T_2077)
    node GEN_274 = pad(pending_iprbs, 2)
    node T_2079 = and(GEN_274, T_2078)
    node T_2080 = eq(state, UInt<4>("h5"))
    node T_2083 = and(T_2080, pending_iprbs)
    reg T_2091 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2100 = and(io_inner_release_ready, io_inner_release_valid)
    node T_2103 = eq(io_inner_release_bits_voluntary, UInt<1>("h0"))
    node T_2104 = and(T_1653, T_2103)
    node T_2105 = and(T_2100, T_2104)
    node T_2107 = eq(io_inner_release_bits_r_type, UInt<3>("h0"))
    node T_2108 = eq(io_inner_release_bits_r_type, UInt<3>("h1"))
    node T_2109 = eq(io_inner_release_bits_r_type, UInt<3>("h2"))
    node T_2110 = or(T_2107, T_2108)
    node T_2111 = or(T_2110, T_2109)
    node T_2113 = and(T_2105, T_2111)
    reg T_2115 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2117 = eq(T_2115, UInt<3>("h7"))
    node T_2119 = add(T_2115, UInt<3>("h1"))
    node T_2120 = tail(T_2119, 1)
    node GEN_41 = mux(T_2113, T_2120, T_2115)
    node T_2121 = and(T_2113, T_2117)
    node T_2122 = mux(T_2111, T_2115, UInt<3>("h0"))
    node T_2123 = mux(T_2111, T_2121, T_2105)
    reg T_2125 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2127 = eq(T_2123, UInt<1>("h0"))
    node T_2128 = and(T_2073, T_2127)
    node T_2130 = add(T_2125, UInt<1>("h1"))
    node T_2131 = tail(T_2130, 1)
    node GEN_42 = mux(T_2128, T_2131, T_2125)
    node T_2133 = eq(T_2073, UInt<1>("h0"))
    node T_2134 = and(T_2123, T_2133)
    node T_2136 = sub(T_2125, UInt<1>("h1"))
    node T_2137 = tail(T_2136, 1)
    node GEN_43 = mux(T_2134, T_2137, GEN_42)
    node T_2139 = gt(T_2125, UInt<1>("h0"))
    node T_2143 = or(pending_iprbs, T_2065_pending)
    node T_2145 = eq(T_2143, UInt<1>("h0"))
    node T_2146 = and(T_2080, T_2145)
    node GEN_44 = mux(T_2146, T_2056, GEN_39)
    node T_2150 = mux(T_1611, io_alloc_irel_should, io_alloc_irel_matches)
    node T_2151 = and(T_2150, io_inner_release_bits_voluntary)
    node T_2156 = and(T_2100, T_2151)
    node T_2164 = and(T_2156, T_2111)
    reg T_2166 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2168 = eq(T_2166, UInt<3>("h7"))
    node T_2170 = add(T_2166, UInt<3>("h1"))
    node T_2171 = tail(T_2170, 1)
    node GEN_45 = mux(T_2164, T_2171, T_2166)
    node T_2172 = and(T_2164, T_2168)
    node T_2173 = mux(T_2111, T_2166, UInt<3>("h0"))
    node T_2174 = mux(T_2111, T_2172, T_2156)
    node T_2175 = and(io_inner_grant_ready, io_inner_grant_valid)
    node T_2178 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_2179 = and(io_inner_grant_bits_is_builtin_type, T_2178)
    node T_2180 = and(T_1653, T_2179)
    node T_2181 = and(T_2175, T_2180)
    wire T_2189_0 : UInt<3>
    node GEN_275 = pad(UInt<3>("h5"), 4)
    node T_2191 = eq(io_inner_grant_bits_g_type, GEN_275)
    node T_2193 = mux(io_inner_grant_bits_is_builtin_type, T_2191, T_2178)
    node T_2195 = and(T_2181, T_2193)
    reg T_2197 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2199 = eq(T_2197, UInt<3>("h7"))
    node T_2201 = add(T_2197, UInt<3>("h1"))
    node T_2202 = tail(T_2201, 1)
    node GEN_46 = mux(T_2195, T_2202, T_2197)
    node T_2203 = and(T_2195, T_2199)
    node T_2204 = mux(T_2193, T_2197, UInt<3>("h0"))
    node T_2205 = mux(T_2193, T_2203, T_2181)
    reg T_2207 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2209 = eq(T_2205, UInt<1>("h0"))
    node T_2210 = and(T_2174, T_2209)
    node T_2212 = add(T_2207, UInt<1>("h1"))
    node T_2213 = tail(T_2212, 1)
    node GEN_47 = mux(T_2210, T_2213, T_2207)
    node T_2215 = eq(T_2174, UInt<1>("h0"))
    node T_2216 = and(T_2205, T_2215)
    node T_2218 = sub(T_2207, UInt<1>("h1"))
    node T_2219 = tail(T_2218, 1)
    node GEN_48 = mux(T_2216, T_2219, GEN_47)
    node T_2221 = gt(T_2207, UInt<1>("h0"))
    node T_2223 = and(T_1611, io_alloc_irel_should)
    node T_2224 = and(T_2223, io_inner_release_valid)
    node GEN_49 = mux(T_2224, io_inner_release_bits_addr_block, GEN_31)
    node GEN_50 = mux(T_2224, UInt<8>("hff"), pending_irel_data)
    node GEN_51 = mux(T_2224, UInt<4>("h7"), GEN_44)
    node T_2231 = and(T_1751, io_inner_release_bits_voluntary)
    node T_2233 = eq(state, UInt<4>("h8"))
    node T_2234 = or(T_1611, T_2233)
    node T_2236 = eq(T_2234, UInt<1>("h0"))
    node T_2237 = and(T_2231, T_2236)
    node T_2239 = eq(all_pending_done, UInt<1>("h0"))
    node T_2240 = and(T_2237, T_2239)
    node T_2241 = and(io_outer_grant_ready, io_outer_grant_valid)
    node T_2243 = eq(T_2241, UInt<1>("h0"))
    node T_2244 = and(T_2240, T_2243)
    node T_2247 = eq(T_2175, UInt<1>("h0"))
    node T_2248 = and(T_2244, T_2247)
    node T_2250 = eq(vol_ignt_counter_pending, UInt<1>("h0"))
    node T_2251 = and(T_2248, T_2250)
    node T_2252 = dshr(pending_orel_data, io_inner_release_bits_addr_beat)
    node T_2253 = bits(T_2252, 0, 0)
    node T_2254 = and(sending_orel, T_2253)
    node T_2255 = and(io_outer_release_ready, io_outer_release_valid)
    node T_2256 = eq(io_inner_release_bits_addr_beat, io_outer_release_bits_addr_beat)
    node T_2257 = and(T_2255, T_2256)
    node T_2263 = or(T_2254, T_2257)
    node T_2264 = and(T_2111, T_2263)
    node T_2266 = eq(T_2264, UInt<1>("h0"))
    node T_2267 = and(T_2251, T_2266)
    node T_2271 = and(T_1751, T_2103)
    node T_2273 = and(T_2271, T_2080)
    node T_2274 = or(T_2267, T_2273)
    node T_2275 = and(T_2274, io_inner_release_valid)
    node T_2276 = or(T_2224, T_2275)
    node T_2277 = and(T_2276, io_inner_release_ready)
    node T_2286 = eq(T_2111, UInt<1>("h0"))
    node T_2288 = eq(io_inner_release_bits_addr_beat, UInt<3>("h0"))
    node T_2289 = or(T_2286, T_2288)
    node GEN_52 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_r_type, xact_vol_ir_r_type)
    node GEN_53 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_id, xact_vol_ir_src)
    node GEN_54 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_xact_id, xact_vol_ir_client_xact_id)
    node T_2303 = and(T_2100, T_2111)
    node T_2307 = mux(T_2303, UInt<8>("hff"), UInt<8>("h0"))
    node T_2308 = not(T_2307)
    node T_2310 = dshlw(UInt<8>("h1"), io_inner_release_bits_addr_beat)
    node T_2311 = not(T_2310)
    node T_2312 = or(T_2308, T_2311)
    node T_2314 = mux(T_2111, T_2312, UInt<8>("h0"))
    node GEN_55 = mux(T_2289, GEN_52, xact_vol_ir_r_type)
    node GEN_56 = mux(T_2289, GEN_53, xact_vol_ir_src)
    node GEN_57 = mux(T_2289, GEN_54, xact_vol_ir_client_xact_id)
    node GEN_58 = mux(T_2289, T_2314, GEN_50)
    node T_2316 = eq(T_2289, UInt<1>("h0"))
    node T_2333 = and(pending_irel_data, T_2312)
    node GEN_59 = mux(T_2316, T_2333, GEN_58)
    node GEN_60 = mux(T_2277, GEN_55, xact_vol_ir_r_type)
    node GEN_61 = mux(T_2277, GEN_56, xact_vol_ir_src)
    node GEN_62 = mux(T_2277, GEN_57, xact_vol_ir_client_xact_id)
    node GEN_63 = mux(T_2277, GEN_59, GEN_50)
    node T_2334 = eq(state, UInt<4>("h3"))
    node T_2335 = eq(state, UInt<4>("h4"))
    node T_2337 = eq(state, UInt<4>("h7"))
    node T_2338 = or(T_2334, T_2335)
    node T_2339 = or(T_2338, T_2080)
    node T_2340 = or(T_2339, T_2337)
    node T_2341 = and(T_2340, vol_ignt_counter_pending)
    node T_2343 = neq(pending_irel_data, UInt<8>("h0"))
    node T_2344 = or(T_2343, vol_ognt_counter_pending)
    node T_2346 = eq(T_2344, UInt<1>("h0"))
    node T_2347 = and(T_2341, T_2346)
    wire T_2379_addr_beat : UInt<3>
    wire T_2379_addr_block : UInt<26>
    wire T_2379_client_xact_id : UInt<1>
    wire T_2379_voluntary : UInt<1>
    wire T_2379_r_type : UInt<3>
    wire T_2379_data : UInt<64>
    wire T_2379_client_id : UInt<1>
    wire T_2440_addr_beat : UInt<3>
    wire T_2440_client_xact_id : UInt<1>
    wire T_2440_manager_xact_id : UInt<4>
    wire T_2440_is_builtin_type : UInt<1>
    wire T_2440_g_type : UInt<4>
    wire T_2440_data : UInt<64>
    wire T_2440_client_id : UInt<1>
    wire GEN_0 : UInt<8>
    node GEN_64 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_65 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), wmask_buffer_2, GEN_64)
    node GEN_66 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), wmask_buffer_3, GEN_65)
    node GEN_67 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), wmask_buffer_4, GEN_66)
    node GEN_68 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), wmask_buffer_5, GEN_67)
    node GEN_69 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), wmask_buffer_6, GEN_68)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), wmask_buffer_7, GEN_69)
    node T_2521 = bits(GEN_0, 0, 0)
    wire GEN_1 : UInt<8>
    node T_2522 = bits(GEN_1, 1, 1)
    wire GEN_2 : UInt<8>
    node T_2523 = bits(GEN_2, 2, 2)
    wire GEN_3 : UInt<8>
    node T_2524 = bits(GEN_3, 3, 3)
    wire GEN_4 : UInt<8>
    node T_2525 = bits(GEN_4, 4, 4)
    wire GEN_5 : UInt<8>
    node T_2526 = bits(GEN_5, 5, 5)
    wire GEN_6 : UInt<8>
    node T_2527 = bits(GEN_6, 6, 6)
    wire GEN_7 : UInt<8>
    node T_2528 = bits(GEN_7, 7, 7)
    node T_2532 = mux(T_2521, UInt<8>("hff"), UInt<8>("h0"))
    node T_2536 = mux(T_2522, UInt<8>("hff"), UInt<8>("h0"))
    node T_2540 = mux(T_2523, UInt<8>("hff"), UInt<8>("h0"))
    node T_2544 = mux(T_2524, UInt<8>("hff"), UInt<8>("h0"))
    node T_2548 = mux(T_2525, UInt<8>("hff"), UInt<8>("h0"))
    node T_2552 = mux(T_2526, UInt<8>("hff"), UInt<8>("h0"))
    node T_2556 = mux(T_2527, UInt<8>("hff"), UInt<8>("h0"))
    node T_2560 = mux(T_2528, UInt<8>("hff"), UInt<8>("h0"))
    node T_2561 = cat(T_2536, T_2532)
    node T_2562 = cat(T_2544, T_2540)
    node T_2563 = cat(T_2562, T_2561)
    node T_2564 = cat(T_2552, T_2548)
    node T_2565 = cat(T_2560, T_2556)
    node T_2566 = cat(T_2565, T_2564)
    node T_2567 = cat(T_2566, T_2563)
    node T_2568 = not(T_2567)
    node T_2569 = and(T_2568, io_inner_release_bits_data)
    wire GEN_8 : UInt<64>
    node GEN_71 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_72 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), data_buffer_2, GEN_71)
    node GEN_73 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), data_buffer_3, GEN_72)
    node GEN_74 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), data_buffer_4, GEN_73)
    node GEN_75 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), data_buffer_5, GEN_74)
    node GEN_76 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), data_buffer_6, GEN_75)
    node GEN_77 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), data_buffer_7, GEN_76)
    node T_2570 = and(T_2567, GEN_8)
    node T_2571 = or(T_2569, T_2570)
    wire GEN_9 : UInt<64>
    node GEN_78 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_0)
    node GEN_79 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_1)
    node GEN_80 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_2)
    node GEN_81 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_3)
    node GEN_82 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_4)
    node GEN_83 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_5)
    node GEN_84 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_6)
    node GEN_85 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_7)
    wire GEN_10 : UInt<8>
    node GEN_86 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_0)
    node GEN_87 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_1)
    node GEN_88 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_2)
    node GEN_89 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_3)
    node GEN_90 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_4)
    node GEN_91 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_5)
    node GEN_92 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_6)
    node GEN_93 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_7)
    node GEN_94 = mux(T_2303, GEN_78, data_buffer_0)
    node GEN_95 = mux(T_2303, GEN_79, data_buffer_1)
    node GEN_96 = mux(T_2303, GEN_80, data_buffer_2)
    node GEN_97 = mux(T_2303, GEN_81, data_buffer_3)
    node GEN_98 = mux(T_2303, GEN_82, data_buffer_4)
    node GEN_99 = mux(T_2303, GEN_83, data_buffer_5)
    node GEN_100 = mux(T_2303, GEN_84, data_buffer_6)
    node GEN_101 = mux(T_2303, GEN_85, data_buffer_7)
    node GEN_102 = mux(T_2303, GEN_86, wmask_buffer_0)
    node GEN_103 = mux(T_2303, GEN_87, wmask_buffer_1)
    node GEN_104 = mux(T_2303, GEN_88, wmask_buffer_2)
    node GEN_105 = mux(T_2303, GEN_89, wmask_buffer_3)
    node GEN_106 = mux(T_2303, GEN_90, wmask_buffer_4)
    node GEN_107 = mux(T_2303, GEN_91, wmask_buffer_5)
    node GEN_108 = mux(T_2303, GEN_92, wmask_buffer_6)
    node GEN_109 = mux(T_2303, GEN_93, wmask_buffer_7)
    wire T_2604_state : UInt<2>
    node T_2631 = or(T_1653, io_alloc_irel_should)
    node T_2647 = and(T_2307, T_2310)
    node T_2648 = or(pending_orel_data, T_2647)
    node T_2651 = eq(io_outer_release_bits_r_type, UInt<3>("h0"))
    node T_2652 = eq(io_outer_release_bits_r_type, UInt<3>("h1"))
    node T_2653 = eq(io_outer_release_bits_r_type, UInt<3>("h2"))
    node T_2654 = or(T_2651, T_2652)
    node T_2655 = or(T_2654, T_2653)
    node T_2656 = and(T_2255, T_2655)
    node T_2660 = mux(T_2656, UInt<8>("hff"), UInt<8>("h0"))
    node T_2661 = not(T_2660)
    node T_2663 = dshlw(UInt<8>("h1"), io_outer_release_bits_addr_beat)
    node T_2664 = not(T_2663)
    node T_2665 = or(T_2661, T_2664)
    node T_2666 = and(T_2648, T_2665)
    node GEN_110 = mux(T_2631, T_2666, pending_orel_data)
    node T_2677 = eq(T_2655, UInt<1>("h0"))
    node T_2679 = eq(io_outer_release_bits_addr_beat, UInt<3>("h0"))
    node T_2680 = or(T_2677, T_2679)
    node GEN_112 = mux(T_2680, UInt<1>("h1"), sending_orel)
    node T_2692 = eq(io_outer_release_bits_addr_beat, UInt<3>("h7"))
    node T_2693 = or(T_2677, T_2692)
    node GEN_113 = mux(T_2693, UInt<1>("h0"), GEN_112)
    node GEN_114 = mux(T_2255, GEN_113, sending_orel)
    node GEN_115 = mux(T_2255, UInt<1>("h0"), pending_orel_send)
    node T_2702 = and(T_2255, io_outer_release_bits_voluntary)
    node T_2710 = and(T_2702, T_2655)
    reg T_2712 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2714 = eq(T_2712, UInt<3>("h7"))
    node T_2716 = add(T_2712, UInt<3>("h1"))
    node T_2717 = tail(T_2716, 1)
    node GEN_116 = mux(T_2710, T_2717, T_2712)
    node T_2718 = and(T_2710, T_2714)
    node T_2719 = mux(T_2655, T_2712, UInt<3>("h0"))
    node T_2720 = mux(T_2655, T_2718, T_2702)
    node T_2723 = eq(io_outer_grant_bits_g_type, UInt<4>("h0"))
    node T_2724 = and(io_outer_grant_bits_is_builtin_type, T_2723)
    node T_2725 = and(T_2241, T_2724)
    wire T_2733_0 : UInt<3>
    node GEN_276 = pad(UInt<3>("h5"), 4)
    node T_2735 = eq(io_outer_grant_bits_g_type, GEN_276)
    node T_2737 = mux(io_outer_grant_bits_is_builtin_type, T_2735, T_2723)
    node T_2739 = and(T_2725, T_2737)
    reg T_2741 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2743 = eq(T_2741, UInt<3>("h7"))
    node T_2745 = add(T_2741, UInt<3>("h1"))
    node T_2746 = tail(T_2745, 1)
    node GEN_117 = mux(T_2739, T_2746, T_2741)
    node T_2747 = and(T_2739, T_2743)
    node T_2748 = mux(T_2737, T_2741, UInt<3>("h0"))
    node T_2749 = mux(T_2737, T_2747, T_2725)
    reg T_2751 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2753 = eq(T_2749, UInt<1>("h0"))
    node T_2754 = and(T_2720, T_2753)
    node T_2756 = add(T_2751, UInt<1>("h1"))
    node T_2757 = tail(T_2756, 1)
    node GEN_118 = mux(T_2754, T_2757, T_2751)
    node T_2759 = eq(T_2720, UInt<1>("h0"))
    node T_2760 = and(T_2749, T_2759)
    node T_2762 = sub(T_2751, UInt<1>("h1"))
    node T_2763 = tail(T_2762, 1)
    node GEN_119 = mux(T_2760, T_2763, GEN_118)
    node T_2765 = gt(T_2751, UInt<1>("h0"))
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter_up_idx)
    node T_2775 = bits(T_2774, 0, 0)
    node T_2776 = mux(T_2655, T_2775, pending_orel_send)
    node T_2777 = and(T_2337, T_2776)
    node T_2791 = eq(UInt<2>("h2"), UInt<2>("h2"))
    node T_2792 = mux(T_2791, UInt<3>("h0"), UInt<3>("h3"))
    wire T_2828_addr_beat : UInt<3>
    wire T_2828_addr_block : UInt<26>
    wire T_2828_client_xact_id : UInt<4>
    wire T_2828_voluntary : UInt<1>
    wire T_2828_r_type : UInt<3>
    wire T_2828_data : UInt<64>
    wire GEN_11 : UInt<64>
    node GEN_120 = mux(eq(UInt<3>("h1"), vol_ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_121 = mux(eq(UInt<3>("h2"), vol_ognt_counter_up_idx), data_buffer_2, GEN_120)
    node GEN_122 = mux(eq(UInt<3>("h3"), vol_ognt_counter_up_idx), data_buffer_3, GEN_121)
    node GEN_123 = mux(eq(UInt<3>("h4"), vol_ognt_counter_up_idx), data_buffer_4, GEN_122)
    node GEN_124 = mux(eq(UInt<3>("h5"), vol_ognt_counter_up_idx), data_buffer_5, GEN_123)
    node GEN_125 = mux(eq(UInt<3>("h6"), vol_ognt_counter_up_idx), data_buffer_6, GEN_124)
    node GEN_126 = mux(eq(UInt<3>("h7"), vol_ognt_counter_up_idx), data_buffer_7, GEN_125)
    node T_2857 = eq(xact_iacq_is_builtin_type, UInt<1>("h0"))
    node T_2860 = and(io_outer_acquire_ready, io_outer_acquire_valid)
    wire T_2871_0 : UInt<3>
    node T_2873 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_2874 = and(io_outer_acquire_bits_is_builtin_type, T_2873)
    node T_2875 = and(T_2860, T_2874)
    reg T_2877 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2879 = eq(T_2877, UInt<3>("h7"))
    node T_2881 = add(T_2877, UInt<3>("h1"))
    node T_2882 = tail(T_2881, 1)
    node GEN_128 = mux(T_2875, T_2882, T_2877)
    node T_2883 = and(T_2875, T_2879)
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat)
    node T_2885 = mux(T_2874, T_2883, T_2860)
    node T_2891 = eq(T_2724, UInt<1>("h0"))
    node T_2892 = and(T_2241, T_2891)
    wire T_2900_0 : UInt<3>
    node GEN_277 = pad(UInt<3>("h5"), 4)
    node T_2902 = eq(io_outer_grant_bits_g_type, GEN_277)
    node T_2904 = mux(io_outer_grant_bits_is_builtin_type, T_2902, T_2723)
    node T_2906 = and(T_2892, T_2904)
    reg T_2908 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2910 = eq(T_2908, UInt<3>("h7"))
    node T_2912 = add(T_2908, UInt<3>("h1"))
    node T_2913 = tail(T_2912, 1)
    node GEN_129 = mux(T_2906, T_2913, T_2908)
    node T_2914 = and(T_2906, T_2910)
    node T_2915 = mux(T_2904, T_2908, xact_addr_beat)
    node T_2916 = mux(T_2904, T_2914, T_2892)
    reg T_2918 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2920 = eq(T_2916, UInt<1>("h0"))
    node T_2921 = and(T_2885, T_2920)
    node T_2923 = add(T_2918, UInt<1>("h1"))
    node T_2924 = tail(T_2923, 1)
    node GEN_130 = mux(T_2921, T_2924, T_2918)
    node T_2926 = eq(T_2885, UInt<1>("h0"))
    node T_2927 = and(T_2916, T_2926)
    node T_2929 = sub(T_2918, UInt<1>("h1"))
    node T_2930 = tail(T_2929, 1)
    node GEN_131 = mux(T_2927, T_2930, GEN_130)
    node T_2932 = gt(T_2918, UInt<1>("h0"))
    node T_2933 = eq(state, UInt<4>("h6"))
    node T_2937 = dshr(pending_put_data, ognt_counter_up_idx)
    node T_2938 = bits(T_2937, 0, 0)
    node T_2940 = eq(T_2938, UInt<1>("h0"))
    wire T_2949_0 : UInt<3>
    wire T_2949_1 : UInt<3>
    wire T_2949_2 : UInt<3>
    node T_2967 = or(xact_allocate, T_2940)
    node T_2968 = and(T_2933, T_2967)
    node T_2971 = eq(xact_op_code, UInt<5>("h1"))
    node T_2972 = eq(xact_op_code, UInt<5>("h7"))
    node T_2973 = or(T_2971, T_2972)
    node T_2974 = bits(xact_op_code, 3, 3)
    node T_2975 = eq(xact_op_code, UInt<5>("h4"))
    node T_2976 = or(T_2974, T_2975)
    node T_2977 = or(T_2973, T_2976)
    node T_2978 = eq(xact_op_code, UInt<5>("h3"))
    node T_2979 = or(T_2977, T_2978)
    node T_2980 = eq(xact_op_code, UInt<5>("h6"))
    node T_2981 = or(T_2979, T_2980)
    node T_2984 = cat(xact_op_code, UInt<1>("h1"))
    wire T_3015_addr_block : UInt<26>
    wire T_3015_client_xact_id : UInt<4>
    wire T_3015_addr_beat : UInt<3>
    wire T_3015_is_builtin_type : UInt<1>
    wire T_3015_a_type : UInt<3>
    wire T_3015_union : UInt<11>
    wire T_3015_data : UInt<64>
    wire GEN_12 : UInt<8>
    node GEN_132 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), wmask_buffer_1, wmask_buffer_0)
    node GEN_133 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), wmask_buffer_2, GEN_132)
    node GEN_134 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), wmask_buffer_3, GEN_133)
    node GEN_135 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), wmask_buffer_4, GEN_134)
    node GEN_136 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), wmask_buffer_5, GEN_135)
    node GEN_137 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), wmask_buffer_6, GEN_136)
    node GEN_138 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), wmask_buffer_7, GEN_137)
    node T_3080 = cat(xact_op_code, UInt<1>("h0"))
    node T_3081 = cat(xact_addr_byte, xact_op_size)
    node T_3082 = cat(T_3081, T_3080)
    node T_3084 = cat(xact_op_size, xact_op_code)
    node T_3085 = cat(T_3084, UInt<1>("h0"))
    node T_3087 = cat(GEN_12, UInt<1>("h0"))
    node T_3099 = mux(T_1993, UInt<6>("h2"), UInt<6>("h0"))
    node T_3101 = mux(T_1995, UInt<6>("h0"), T_3099)
    node T_3103 = mux(T_1991, T_3082, pad(T_3101, 11))
    node T_3105 = mux(T_2001, pad(T_3087, 11), T_3103)
    node T_3107 = mux(T_1997, pad(T_3087, 11), T_3105)
    node T_3109 = mux(T_2003, pad(T_3085, 11), T_3107)
    node T_3111 = mux(T_1999, T_3082, T_3109)
    wire T_3140_addr_block : UInt<26>
    wire T_3140_client_xact_id : UInt<4>
    wire T_3140_addr_beat : UInt<3>
    wire T_3140_is_builtin_type : UInt<1>
    wire T_3140_a_type : UInt<3>
    wire T_3140_union : UInt<11>
    wire T_3140_data : UInt<64>
    wire GEN_13 : UInt<64>
    node GEN_139 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_140 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), data_buffer_2, GEN_139)
    node GEN_141 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), data_buffer_3, GEN_140)
    node GEN_142 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), data_buffer_4, GEN_141)
    node GEN_143 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), data_buffer_5, GEN_142)
    node GEN_144 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), data_buffer_6, GEN_143)
    node GEN_145 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), data_buffer_7, GEN_144)
    node T_3168_addr_block = mux(T_2857, T_3015_addr_block, T_3140_addr_block)
    node T_3168_client_xact_id = mux(T_2857, UInt<4>("h0"), UInt<4>("h0"))
    node T_3168_addr_beat = mux(T_2857, UInt<3>("h0"), T_3140_addr_beat)
    node T_3168_is_builtin_type = mux(T_2857, UInt<1>("h0"), UInt<1>("h1"))
    node T_3168_a_type = mux(T_2857, T_3015_a_type, T_3140_a_type)
    node T_3168_union = mux(T_2857, T_3015_union, T_3140_union)
    node T_3168_data = mux(T_2857, UInt<64>("h0"), T_3140_data)
    node T_3197 = and(T_2933, ognt_counter_up_done)
    node GEN_146 = mux(T_3197, UInt<4>("h7"), GEN_51)
    node GEN_147 = mux(ognt_counter_pending, UInt<1>("h1"), vol_ognt_counter_pending)
    wire T_3207_0 : UInt<3>
    wire T_3207_1 : UInt<3>
    node GEN_278 = pad(UInt<3>("h5"), 4)
    node T_3209 = eq(io_outer_grant_bits_g_type, GEN_278)
    node GEN_279 = pad(UInt<3>("h4"), 4)
    node T_3210 = eq(io_outer_grant_bits_g_type, GEN_279)
    node T_3211 = or(T_3209, T_3210)
    node T_3213 = mux(io_outer_grant_bits_is_builtin_type, T_3211, T_2723)
    node T_3214 = and(T_2241, T_3213)
    wire GEN_14 : UInt<8>
    node GEN_148 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_149 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), wmask_buffer_2, GEN_148)
    node GEN_150 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), wmask_buffer_3, GEN_149)
    node GEN_151 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), wmask_buffer_4, GEN_150)
    node GEN_152 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), wmask_buffer_5, GEN_151)
    node GEN_153 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), wmask_buffer_6, GEN_152)
    node GEN_154 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), wmask_buffer_7, GEN_153)
    node T_3215 = bits(GEN_14, 0, 0)
    wire GEN_15 : UInt<8>
    node T_3216 = bits(GEN_15, 1, 1)
    wire GEN_16 : UInt<8>
    node T_3217 = bits(GEN_16, 2, 2)
    wire GEN_17 : UInt<8>
    node T_3218 = bits(GEN_17, 3, 3)
    wire GEN_18 : UInt<8>
    node T_3219 = bits(GEN_18, 4, 4)
    wire GEN_19 : UInt<8>
    node T_3220 = bits(GEN_19, 5, 5)
    wire GEN_20 : UInt<8>
    node T_3221 = bits(GEN_20, 6, 6)
    wire GEN_21 : UInt<8>
    node T_3222 = bits(GEN_21, 7, 7)
    node T_3226 = mux(T_3215, UInt<8>("hff"), UInt<8>("h0"))
    node T_3230 = mux(T_3216, UInt<8>("hff"), UInt<8>("h0"))
    node T_3234 = mux(T_3217, UInt<8>("hff"), UInt<8>("h0"))
    node T_3238 = mux(T_3218, UInt<8>("hff"), UInt<8>("h0"))
    node T_3242 = mux(T_3219, UInt<8>("hff"), UInt<8>("h0"))
    node T_3246 = mux(T_3220, UInt<8>("hff"), UInt<8>("h0"))
    node T_3250 = mux(T_3221, UInt<8>("hff"), UInt<8>("h0"))
    node T_3254 = mux(T_3222, UInt<8>("hff"), UInt<8>("h0"))
    node T_3255 = cat(T_3230, T_3226)
    node T_3256 = cat(T_3238, T_3234)
    node T_3257 = cat(T_3256, T_3255)
    node T_3258 = cat(T_3246, T_3242)
    node T_3259 = cat(T_3254, T_3250)
    node T_3260 = cat(T_3259, T_3258)
    node T_3261 = cat(T_3260, T_3257)
    node T_3262 = not(T_3261)
    node T_3263 = and(T_3262, io_outer_grant_bits_data)
    wire GEN_22 : UInt<64>
    node GEN_155 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_156 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), data_buffer_2, GEN_155)
    node GEN_157 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), data_buffer_3, GEN_156)
    node GEN_158 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), data_buffer_4, GEN_157)
    node GEN_159 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), data_buffer_5, GEN_158)
    node GEN_160 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), data_buffer_6, GEN_159)
    node GEN_161 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), data_buffer_7, GEN_160)
    node T_3264 = and(T_3261, GEN_22)
    node T_3265 = or(T_3263, T_3264)
    wire GEN_23 : UInt<64>
    node GEN_162 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), GEN_23, GEN_94)
    node GEN_163 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), GEN_23, GEN_95)
    node GEN_164 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), GEN_23, GEN_96)
    node GEN_165 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), GEN_23, GEN_97)
    node GEN_166 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), GEN_23, GEN_98)
    node GEN_167 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), GEN_23, GEN_99)
    node GEN_168 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), GEN_23, GEN_100)
    node GEN_169 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), GEN_23, GEN_101)
    wire GEN_24 : UInt<8>
    node GEN_170 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_102)
    node GEN_171 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_103)
    node GEN_172 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_104)
    node GEN_173 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_105)
    node GEN_174 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_106)
    node GEN_175 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_107)
    node GEN_176 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_108)
    node GEN_177 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_109)
    node GEN_178 = mux(T_3214, GEN_162, GEN_94)
    node GEN_179 = mux(T_3214, GEN_163, GEN_95)
    node GEN_180 = mux(T_3214, GEN_164, GEN_96)
    node GEN_181 = mux(T_3214, GEN_165, GEN_97)
    node GEN_182 = mux(T_3214, GEN_166, GEN_98)
    node GEN_183 = mux(T_3214, GEN_167, GEN_99)
    node GEN_184 = mux(T_3214, GEN_168, GEN_100)
    node GEN_185 = mux(T_3214, GEN_169, GEN_101)
    node GEN_186 = mux(T_3214, GEN_170, GEN_102)
    node GEN_187 = mux(T_3214, GEN_171, GEN_103)
    node GEN_188 = mux(T_3214, GEN_172, GEN_104)
    node GEN_189 = mux(T_3214, GEN_173, GEN_105)
    node GEN_190 = mux(T_3214, GEN_174, GEN_106)
    node GEN_191 = mux(T_3214, GEN_175, GEN_107)
    node GEN_192 = mux(T_3214, GEN_176, GEN_108)
    node GEN_193 = mux(T_3214, GEN_177, GEN_109)
    node T_3268 = or(scoreboard_3, ognt_counter_pending)
    node T_3269 = or(T_3268, vol_ognt_counter_pending)
    node T_3281 = eq(T_2179, UInt<1>("h0"))
    node T_3283 = and(T_2175, T_3281)
    wire T_3291_0 : UInt<3>
    node GEN_280 = pad(UInt<3>("h5"), 4)
    node T_3293 = eq(io_inner_grant_bits_g_type, GEN_280)
    node T_3295 = mux(io_inner_grant_bits_is_builtin_type, T_3293, T_2178)
    node T_3297 = and(T_3283, T_3295)
    reg T_3299 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3301 = eq(T_3299, UInt<3>("h7"))
    node T_3303 = add(T_3299, UInt<3>("h1"))
    node T_3304 = tail(T_3303, 1)
    node GEN_194 = mux(T_3297, T_3304, T_3299)
    node T_3305 = and(T_3297, T_3301)
    node T_3306 = mux(T_3295, T_3299, UInt<3>("h0"))
    node T_3307 = mux(T_3295, T_3305, T_3283)
    node T_3308 = and(io_inner_finish_ready, io_inner_finish_valid)
    reg T_3314 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_3324 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_3326 = eq(T_3308, UInt<1>("h0"))
    node T_3327 = and(T_3307, T_3326)
    node T_3329 = add(T_3324, UInt<1>("h1"))
    node T_3330 = tail(T_3329, 1)
    node GEN_196 = mux(T_3327, T_3330, T_3324)
    node T_3332 = eq(T_3307, UInt<1>("h0"))
    node T_3333 = and(T_3308, T_3332)
    node T_3335 = sub(T_3324, UInt<1>("h1"))
    node T_3336 = tail(T_3335, 1)
    node GEN_197 = mux(T_3333, T_3336, GEN_196)
    node T_3338 = gt(T_3324, UInt<1>("h0"))
    node T_3343 = eq(T_1798, UInt<1>("h0"))
    node T_3360 = or(pending_ignt_data, T_2647)
    wire T_3370_0 : UInt<3>
    wire T_3370_1 : UInt<3>
    node GEN_281 = pad(UInt<3>("h5"), 4)
    node T_3372 = eq(io_outer_grant_bits_g_type, GEN_281)
    node GEN_282 = pad(UInt<3>("h4"), 4)
    node T_3373 = eq(io_outer_grant_bits_g_type, GEN_282)
    node T_3374 = or(T_3372, T_3373)
    node T_3376 = mux(io_outer_grant_bits_is_builtin_type, T_3374, T_2723)
    node T_3377 = and(T_2241, T_3376)
    node T_3382 = mux(T_3377, UInt<8>("hff"), UInt<8>("h0"))
    node T_3384 = dshlw(UInt<8>("h1"), io_outer_grant_bits_addr_beat)
    node T_3385 = and(T_3382, T_3384)
    node T_3386 = or(T_3360, T_3385)
    node GEN_198 = mux(T_3343, T_3386, GEN_38)
    node T_3389 = eq(state, UInt<4>("h1"))
    node T_3390 = or(T_1611, T_3389)
    node T_3393 = or(T_3390, scoreboard_0)
    node T_3395 = eq(T_3393, UInt<1>("h0"))
    node T_3412 = eq(UInt<3>("h6"), ignt_q.io_deq_bits_a_type)
    node T_3413 = mux(T_3412, UInt<3>("h1"), UInt<3>("h3"))
    node T_3414 = eq(UInt<3>("h5"), ignt_q.io_deq_bits_a_type)
    node T_3415 = mux(T_3414, UInt<3>("h1"), T_3413)
    node T_3416 = eq(UInt<3>("h4"), ignt_q.io_deq_bits_a_type)
    node T_3417 = mux(T_3416, UInt<3>("h4"), T_3415)
    node T_3418 = eq(UInt<3>("h3"), ignt_q.io_deq_bits_a_type)
    node T_3419 = mux(T_3418, UInt<3>("h3"), T_3417)
    node T_3420 = eq(UInt<3>("h2"), ignt_q.io_deq_bits_a_type)
    node T_3421 = mux(T_3420, UInt<3>("h3"), T_3419)
    node T_3422 = eq(UInt<3>("h1"), ignt_q.io_deq_bits_a_type)
    node T_3423 = mux(T_3422, UInt<3>("h5"), T_3421)
    node T_3424 = eq(UInt<3>("h0"), ignt_q.io_deq_bits_a_type)
    node T_3425 = mux(T_3424, UInt<3>("h4"), T_3423)
    node T_3426 = mux(ignt_q.io_deq_bits_is_builtin_type, T_3425, UInt<3>("h0"))
    wire T_3455_addr_beat : UInt<3>
    wire T_3455_client_xact_id : UInt<1>
    wire T_3455_manager_xact_id : UInt<4>
    wire T_3455_is_builtin_type : UInt<1>
    wire T_3455_g_type : UInt<4>
    wire T_3455_data : UInt<64>
    wire T_3455_client_id : UInt<1>
    wire GEN_25 : UInt<64>
    node GEN_199 = mux(eq(UInt<3>("h1"), ignt_data_idx), data_buffer_1, data_buffer_0)
    node GEN_200 = mux(eq(UInt<3>("h2"), ignt_data_idx), data_buffer_2, GEN_199)
    node GEN_201 = mux(eq(UInt<3>("h3"), ignt_data_idx), data_buffer_3, GEN_200)
    node GEN_202 = mux(eq(UInt<3>("h4"), ignt_data_idx), data_buffer_4, GEN_201)
    node GEN_203 = mux(eq(UInt<3>("h5"), ignt_data_idx), data_buffer_5, GEN_202)
    node GEN_204 = mux(eq(UInt<3>("h6"), ignt_data_idx), data_buffer_6, GEN_203)
    node GEN_205 = mux(eq(UInt<3>("h7"), ignt_data_idx), data_buffer_7, GEN_204)
    wire T_3491_0 : UInt<3>
    node GEN_283 = pad(UInt<3>("h5"), 4)
    node T_3493 = eq(io_inner_grant_bits_g_type, GEN_283)
    node T_3495 = mux(io_inner_grant_bits_is_builtin_type, T_3493, T_2178)
    node T_3497 = and(T_2175, T_3495)
    reg T_3499 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3501 = eq(T_3499, UInt<3>("h7"))
    node T_3503 = add(T_3499, UInt<3>("h1"))
    node T_3504 = tail(T_3503, 1)
    node GEN_206 = mux(T_3497, T_3504, T_3499)
    node T_3505 = and(T_3497, T_3501)
    node T_3506 = mux(T_3495, T_3499, ignt_q.io_deq_bits_addr_beat)
    node T_3507 = mux(T_3495, T_3505, T_2175)
    node T_3512 = and(T_2337, scoreboard_6)
    node T_3514 = eq(T_3269, UInt<1>("h0"))
    wire T_3522_0 : UInt<3>
    wire T_3522_1 : UInt<3>
    node GEN_284 = pad(UInt<3>("h5"), 4)
    node T_3524 = eq(io_inner_grant_bits_g_type, GEN_284)
    node GEN_285 = pad(UInt<3>("h4"), 4)
    node T_3525 = eq(io_inner_grant_bits_g_type, GEN_285)
    node T_3526 = or(T_3524, T_3525)
    node T_3528 = mux(io_inner_grant_bits_is_builtin_type, T_3526, T_2178)
    node T_3529 = dshr(pending_ignt_data, ignt_data_idx)
    node T_3530 = bits(T_3529, 0, 0)
    node T_3532 = mux(T_3528, T_3530, T_3395)
    node T_3533 = and(T_3514, T_3532)
    node GEN_207 = mux(T_3512, T_3533, T_2347)
    node GEN_208 = mux(T_2250, ignt_data_done, UInt<1>("h0"))
    node GEN_209 = mux(T_2250, ignt_data_idx, UInt<3>("h0"))
    node GEN_210 = mux(T_2250, T_3455_client_xact_id, T_2440_client_xact_id)
    node GEN_211 = mux(T_2250, UInt<4>("h1"), UInt<4>("h0"))
    node GEN_212 = mux(T_2250, T_3455_is_builtin_type, UInt<1>("h1"))
    node GEN_213 = mux(T_2250, T_3455_g_type, UInt<4>("h0"))
    node GEN_214 = mux(T_2250, T_3455_data, UInt<64>("h0"))
    node GEN_215 = mux(T_2250, T_3455_client_id, T_2440_client_id)
    node GEN_216 = mux(T_2250, GEN_207, T_2347)
    node T_3540 = not(io_incoherent_0)
    node GEN_217 = mux(T_1798, pad(T_3540, 2), T_2079)
    node T_3551 = and(T_1767, io_inner_acquire_valid)
    node T_3552 = or(T_1798, T_3551)
    wire T_3562_0 : UInt<3>
    wire T_3562_1 : UInt<3>
    wire T_3562_2 : UInt<3>
    node T_3564 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_3565 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_3566 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3567 = or(T_3564, T_3565)
    node T_3568 = or(T_3567, T_3566)
    node T_3569 = and(io_inner_acquire_bits_is_builtin_type, T_3568)
    node T_3570 = and(T_1612, T_3569)
    node T_3571 = and(T_3570, T_3552)
    node T_3573 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3574 = and(io_inner_acquire_bits_is_builtin_type, T_3573)
    node T_3603 = or(T_1921, T_1918)
    node T_3604 = bits(io_inner_acquire_bits_union, 8, 1)
    node T_3606 = mux(T_3603, T_3604, UInt<8>("h0"))
    node T_3607 = mux(T_3574, UInt<8>("hff"), T_3606)
    node T_3608 = bits(T_3607, 0, 0)
    node T_3609 = bits(T_3607, 1, 1)
    node T_3610 = bits(T_3607, 2, 2)
    node T_3611 = bits(T_3607, 3, 3)
    node T_3612 = bits(T_3607, 4, 4)
    node T_3613 = bits(T_3607, 5, 5)
    node T_3614 = bits(T_3607, 6, 6)
    node T_3615 = bits(T_3607, 7, 7)
    node T_3619 = mux(T_3608, UInt<8>("hff"), UInt<8>("h0"))
    node T_3623 = mux(T_3609, UInt<8>("hff"), UInt<8>("h0"))
    node T_3627 = mux(T_3610, UInt<8>("hff"), UInt<8>("h0"))
    node T_3631 = mux(T_3611, UInt<8>("hff"), UInt<8>("h0"))
    node T_3635 = mux(T_3612, UInt<8>("hff"), UInt<8>("h0"))
    node T_3639 = mux(T_3613, UInt<8>("hff"), UInt<8>("h0"))
    node T_3643 = mux(T_3614, UInt<8>("hff"), UInt<8>("h0"))
    node T_3647 = mux(T_3615, UInt<8>("hff"), UInt<8>("h0"))
    node T_3648 = cat(T_3623, T_3619)
    node T_3649 = cat(T_3631, T_3627)
    node T_3650 = cat(T_3649, T_3648)
    node T_3651 = cat(T_3639, T_3635)
    node T_3652 = cat(T_3647, T_3643)
    node T_3653 = cat(T_3652, T_3651)
    node T_3654 = cat(T_3653, T_3650)
    node T_3655 = not(T_3654)
    wire GEN_26 : UInt<64>
    node GEN_218 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_219 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), data_buffer_2, GEN_218)
    node GEN_220 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), data_buffer_3, GEN_219)
    node GEN_221 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), data_buffer_4, GEN_220)
    node GEN_222 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), data_buffer_5, GEN_221)
    node GEN_223 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), data_buffer_6, GEN_222)
    node GEN_224 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), data_buffer_7, GEN_223)
    node T_3656 = and(T_3655, GEN_26)
    node T_3657 = and(T_3654, io_inner_acquire_bits_data)
    node T_3658 = or(T_3656, T_3657)
    wire GEN_27 : UInt<64>
    node GEN_225 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_178)
    node GEN_226 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_179)
    node GEN_227 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_180)
    node GEN_228 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_181)
    node GEN_229 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_182)
    node GEN_230 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_183)
    node GEN_231 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_184)
    node GEN_232 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_185)
    wire GEN_28 : UInt<8>
    node GEN_233 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_234 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), wmask_buffer_2, GEN_233)
    node GEN_235 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), wmask_buffer_3, GEN_234)
    node GEN_236 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), wmask_buffer_4, GEN_235)
    node GEN_237 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), wmask_buffer_5, GEN_236)
    node GEN_238 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), wmask_buffer_6, GEN_237)
    node GEN_239 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), wmask_buffer_7, GEN_238)
    node T_3695 = or(T_3607, GEN_28)
    wire GEN_29 : UInt<8>
    node GEN_240 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_186)
    node GEN_241 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_187)
    node GEN_242 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_188)
    node GEN_243 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_189)
    node GEN_244 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_190)
    node GEN_245 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_191)
    node GEN_246 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_192)
    node GEN_247 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_193)
    node GEN_248 = mux(T_3571, GEN_225, GEN_178)
    node GEN_249 = mux(T_3571, GEN_226, GEN_179)
    node GEN_250 = mux(T_3571, GEN_227, GEN_180)
    node GEN_251 = mux(T_3571, GEN_228, GEN_181)
    node GEN_252 = mux(T_3571, GEN_229, GEN_182)
    node GEN_253 = mux(T_3571, GEN_230, GEN_183)
    node GEN_254 = mux(T_3571, GEN_231, GEN_184)
    node GEN_255 = mux(T_3571, GEN_232, GEN_185)
    node GEN_256 = mux(T_3571, GEN_240, GEN_186)
    node GEN_257 = mux(T_3571, GEN_241, GEN_187)
    node GEN_258 = mux(T_3571, GEN_242, GEN_188)
    node GEN_259 = mux(T_3571, GEN_243, GEN_189)
    node GEN_260 = mux(T_3571, GEN_244, GEN_190)
    node GEN_261 = mux(T_3571, GEN_245, GEN_191)
    node GEN_262 = mux(T_3571, GEN_246, GEN_192)
    node GEN_263 = mux(T_3571, GEN_247, GEN_193)
    node T_3698 = or(scoreboard_0, T_2343)
    node T_3699 = or(T_3698, vol_ignt_counter_pending)
    node T_3700 = or(T_3699, scoreboard_3)
    node T_3701 = or(T_3700, vol_ognt_counter_pending)
    node T_3702 = or(T_3701, ognt_counter_pending)
    node T_3703 = or(T_3702, scoreboard_6)
    node T_3704 = or(T_3703, ifin_counter_pending)
    node T_3706 = eq(T_3704, UInt<1>("h0"))
    node T_3708 = and(T_2337, all_pending_done)
    node GEN_264 = mux(T_3708, UInt<4>("h0"), GEN_146)
    node GEN_265 = mux(T_3708, UInt<8>("h0"), GEN_256)
    node GEN_266 = mux(T_3708, UInt<8>("h0"), GEN_257)
    node GEN_267 = mux(T_3708, UInt<8>("h0"), GEN_258)
    node GEN_268 = mux(T_3708, UInt<8>("h0"), GEN_259)
    node GEN_269 = mux(T_3708, UInt<8>("h0"), GEN_260)
    node GEN_270 = mux(T_3708, UInt<8>("h0"), GEN_261)
    node GEN_271 = mux(T_3708, UInt<8>("h0"), GEN_262)
    node GEN_272 = mux(T_3708, UInt<8>("h0"), GEN_263)
    io_inner_acquire_ready <= T_1981
    io_inner_grant_valid <= GEN_216
    io_inner_grant_bits_addr_beat <= GEN_209
    io_inner_grant_bits_client_xact_id <= GEN_210
    io_inner_grant_bits_manager_xact_id <= GEN_211
    io_inner_grant_bits_is_builtin_type <= GEN_212
    io_inner_grant_bits_g_type <= GEN_213
    io_inner_grant_bits_data <= GEN_214
    io_inner_grant_bits_client_id <= GEN_215
    io_inner_finish_ready <= T_2337
    io_inner_probe_valid <= T_2083
    io_inner_probe_bits_addr_block <= T_2030_addr_block
    io_inner_probe_bits_p_type <= T_2030_p_type
    io_inner_probe_bits_client_id <= UInt<1>("h0")
    io_inner_release_ready <= T_2274
    io_outer_acquire_valid <= T_2968
    io_outer_acquire_bits_addr_block <= T_3168_addr_block
    io_outer_acquire_bits_client_xact_id <= T_3168_client_xact_id
    io_outer_acquire_bits_addr_beat <= T_3168_addr_beat
    io_outer_acquire_bits_is_builtin_type <= T_3168_is_builtin_type
    io_outer_acquire_bits_a_type <= T_3168_a_type
    io_outer_acquire_bits_union <= T_3168_union
    io_outer_acquire_bits_data <= T_3168_data
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= T_2777
    io_outer_release_bits_addr_beat <= T_2828_addr_beat
    io_outer_release_bits_addr_block <= T_2828_addr_block
    io_outer_release_bits_client_xact_id <= UInt<4>("h0")
    io_outer_release_bits_voluntary <= UInt<1>("h1")
    io_outer_release_bits_r_type <= T_2828_r_type
    io_outer_release_bits_data <= T_2828_data
    io_outer_grant_ready <= GEN_147
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= UInt<1>("h1")
    io_outer_finish_bits_manager_id <= UInt<1>("h1")
    io_alloc_iacq_matches <= T_1749
    io_alloc_iacq_can <= T_1611
    io_alloc_irel_matches <= T_1752
    io_alloc_irel_can <= UInt<1>("h0")
    io_alloc_oprb_matches <= T_1755
    io_alloc_oprb_can <= UInt<1>("h0")
    io_alloc_idle <= T_1611
    io_alloc_addr_block <= xact_addr_block
    all_pending_done <= T_3706
    state <= GEN_264
    xact_addr_block <= GEN_49
    xact_allocate <= GEN_32
    xact_amo_shift_bytes <= GEN_33
    xact_op_code <= GEN_34
    xact_addr_byte <= GEN_35
    xact_op_size <= GEN_36
    xact_addr_beat <= xact_iacq_addr_beat
    xact_iacq_client_xact_id <= T_1823_client_xact_id
    xact_iacq_addr_beat <= T_1823_addr_beat
    xact_iacq_client_id <= T_1823_client_id
    xact_iacq_is_builtin_type <= T_1823_is_builtin_type
    xact_iacq_a_type <= T_1823_a_type
    xact_vol_ir_r_type <= GEN_60
    xact_vol_ir_src <= GEN_61
    xact_vol_ir_client_xact_id <= GEN_62
    pending_irel_data <= GEN_63
    vol_ignt_counter_pending <= T_2221
    vol_ignt_counter_up_idx <= T_2173
    vol_ignt_counter_up_done <= T_2174
    vol_ignt_counter_down_idx <= T_2204
    vol_ignt_counter_down_done <= T_2205
    scoreboard_6 <= T_1850
    ignt_data_idx <= T_3506
    ignt_data_done <= T_3507
    ifin_counter_pending <= T_3338
    ifin_counter_up_idx <= T_3306
    ifin_counter_up_done <= T_3307
    ifin_counter_down_done <= T_3308
    pending_put_data <= GEN_37
    pending_ignt_data <= GEN_198
    ognt_counter_pending <= T_2932
    ognt_counter_up_idx <= T_2884
    ognt_counter_up_done <= T_2885
    ognt_counter_down_idx <= T_2915
    ognt_counter_down_done <= T_2916
    pending_iprbs <= bits(GEN_217, 0, 0)
    pending_orel_send <= GEN_115
    pending_orel_data <= GEN_110
    vol_ognt_counter_pending <= T_2765
    vol_ognt_counter_up_idx <= T_2719
    vol_ognt_counter_up_done <= T_2720
    vol_ognt_counter_down_idx <= T_2748
    vol_ognt_counter_down_done <= T_2749
    sending_orel <= GEN_114
    data_buffer_0 <= GEN_248
    data_buffer_1 <= GEN_249
    data_buffer_2 <= GEN_250
    data_buffer_3 <= GEN_251
    data_buffer_4 <= GEN_252
    data_buffer_5 <= GEN_253
    data_buffer_6 <= GEN_254
    data_buffer_7 <= GEN_255
    wmask_buffer_0 <= GEN_265
    wmask_buffer_1 <= GEN_266
    wmask_buffer_2 <= GEN_267
    wmask_buffer_3 <= GEN_268
    wmask_buffer_4 <= GEN_269
    wmask_buffer_5 <= GEN_270
    wmask_buffer_6 <= GEN_271
    wmask_buffer_7 <= GEN_272
    data_valid_0 <= T_1716
    data_valid_1 <= T_1719
    data_valid_2 <= T_1722
    data_valid_3 <= T_1725
    data_valid_4 <= T_1728
    data_valid_5 <= T_1731
    data_valid_6 <= T_1734
    data_valid_7 <= T_1737
    ignt_q.io_enq_valid <= T_1822
    ignt_q.io_enq_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    ignt_q.io_enq_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    ignt_q.io_enq_bits_client_id <= io_inner_acquire_bits_client_id
    ignt_q.io_enq_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    ignt_q.io_enq_bits_a_type <= io_inner_acquire_bits_a_type
    ignt_q.io_deq_ready <= GEN_208
    T_2030_addr_block <= xact_addr_block
    T_2030_p_type <= T_2005
    T_2065_pending <= T_2139
    T_2065_up_done <= T_2073
    T_2065_down_idx <= T_2122
    T_2065_down_done <= T_2123
    T_2091 <= T_2091
    T_2115 <= GEN_41
    T_2125 <= GEN_43
    T_2166 <= GEN_45
    T_2197 <= GEN_46
    T_2207 <= GEN_48
    T_2379_addr_block <= xact_addr_block
    T_2379_client_xact_id <= xact_vol_ir_client_xact_id
    T_2379_r_type <= xact_vol_ir_r_type
    T_2379_client_id <= xact_vol_ir_src
    T_2440_client_xact_id <= T_2379_client_xact_id
    T_2440_client_id <= T_2379_client_id
    GEN_0 <= GEN_70
    GEN_1 <= GEN_70
    GEN_2 <= GEN_70
    GEN_3 <= GEN_70
    GEN_4 <= GEN_70
    GEN_5 <= GEN_70
    GEN_6 <= GEN_70
    GEN_7 <= GEN_70
    GEN_8 <= GEN_77
    GEN_9 <= T_2571
    T_2712 <= GEN_116
    T_2741 <= GEN_117
    T_2751 <= GEN_119
    T_2828_addr_beat <= vol_ognt_counter_up_idx
    T_2828_addr_block <= xact_addr_block
    T_2828_r_type <= T_2792
    T_2828_data <= GEN_11
    GEN_11 <= GEN_126
    T_2877 <= GEN_128
    T_2908 <= GEN_129
    T_2918 <= GEN_131
    T_3015_addr_block <= xact_addr_block
    T_3015_a_type <= pad(T_2981, 3)
    T_3015_union <= pad(T_2984, 11)
    GEN_12 <= GEN_138
    T_3140_addr_block <= xact_addr_block
    T_3140_addr_beat <= ognt_counter_up_idx
    T_3140_a_type <= xact_iacq_a_type
    T_3140_union <= T_3111
    T_3140_data <= GEN_13
    GEN_13 <= GEN_145
    GEN_14 <= GEN_154
    GEN_15 <= GEN_154
    GEN_16 <= GEN_154
    GEN_17 <= GEN_154
    GEN_18 <= GEN_154
    GEN_19 <= GEN_154
    GEN_20 <= GEN_154
    GEN_21 <= GEN_154
    GEN_22 <= GEN_161
    GEN_23 <= T_3265
    T_3299 <= GEN_194
    T_3314 <= T_3314
    T_3324 <= GEN_197
    T_3455_addr_beat <= ignt_q.io_deq_bits_addr_beat
    T_3455_client_xact_id <= ignt_q.io_deq_bits_client_xact_id
    T_3455_is_builtin_type <= ignt_q.io_deq_bits_is_builtin_type
    T_3455_g_type <= pad(T_3426, 4)
    T_3455_data <= GEN_25
    T_3455_client_id <= ignt_q.io_deq_bits_client_id
    GEN_25 <= GEN_205
    T_3499 <= GEN_206
    GEN_26 <= GEN_224
    GEN_27 <= T_3658
    GEN_28 <= GEN_239
    GEN_29 <= T_3695
    printf(clk, T_1652, "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n")
    stop(clk, T_1652, 1)
    printf(clk, T_1666, "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n")
    stop(clk, T_1666, 1)
    printf(clk, T_1677, "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n")
    stop(clk, T_1677, 1)

  module BufferedBroadcastAcquireTracker_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
    output io_alloc_iacq_matches : UInt<1>
    output io_alloc_iacq_can : UInt<1>
    input io_alloc_iacq_should : UInt<1>
    output io_alloc_irel_matches : UInt<1>
    output io_alloc_irel_can : UInt<1>
    input io_alloc_irel_should : UInt<1>
    output io_alloc_oprb_matches : UInt<1>
    output io_alloc_oprb_can : UInt<1>
    input io_alloc_oprb_should : UInt<1>
    output io_alloc_idle : UInt<1>
    output io_alloc_addr_block : UInt<26>
  
    wire all_pending_done : UInt<1>
    reg state : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg xact_addr_block : UInt<26>, clk with :
      reset => (reset, UInt<26>("h0"))
    reg xact_allocate : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_allocate)
    reg xact_amo_shift_bytes : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_amo_shift_bytes)
    reg xact_op_code : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_op_code)
    reg xact_addr_byte : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_addr_byte)
    reg xact_op_size : UInt<2>, clk with :
      reset => (UInt<1>("h0"), xact_op_size)
    wire xact_addr_beat : UInt<3>
    wire xact_iacq_client_xact_id : UInt<1>
    wire xact_iacq_addr_beat : UInt<3>
    wire xact_iacq_client_id : UInt<1>
    wire xact_iacq_is_builtin_type : UInt<1>
    wire xact_iacq_a_type : UInt<3>
    reg xact_vol_ir_r_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_r_type)
    reg xact_vol_ir_src : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_src)
    reg xact_vol_ir_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_client_xact_id)
    reg pending_irel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ignt_counter_pending : UInt<1>
    wire vol_ignt_counter_up_idx : UInt<3>
    wire vol_ignt_counter_up_done : UInt<1>
    wire vol_ignt_counter_down_idx : UInt<3>
    wire vol_ignt_counter_down_done : UInt<1>
    wire scoreboard_6 : UInt<1>
    wire ignt_data_idx : UInt<3>
    wire ignt_data_done : UInt<1>
    wire ifin_counter_pending : UInt<1>
    wire ifin_counter_up_idx : UInt<3>
    wire ifin_counter_up_done : UInt<1>
    wire ifin_counter_down_idx : UInt<3>
    wire ifin_counter_down_done : UInt<1>
    reg pending_put_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg pending_ignt_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire ognt_counter_pending : UInt<1>
    wire ognt_counter_up_idx : UInt<3>
    wire ognt_counter_up_done : UInt<1>
    wire ognt_counter_down_idx : UInt<3>
    wire ognt_counter_down_done : UInt<1>
    reg pending_iprbs : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pending_iprbs)
    reg pending_orel_send : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_orel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ognt_counter_pending : UInt<1>
    wire vol_ognt_counter_up_idx : UInt<3>
    wire vol_ognt_counter_up_done : UInt<1>
    wire vol_ognt_counter_down_idx : UInt<3>
    wire vol_ognt_counter_down_done : UInt<1>
    node T_170 = neq(pending_orel_data, UInt<8>("h0"))
    node T_171 = or(pending_orel_send, T_170)
    node scoreboard_3 = or(T_171, vol_ognt_counter_pending)
    reg sending_orel : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_195_sharers : UInt<1>
    wire T_241_state : UInt<2>
    wire coh_inner_sharers : UInt<1>
    wire coh_outer_state : UInt<2>
    node T_1611 = eq(state, UInt<4>("h0"))
    node T_1612 = and(io_inner_acquire_ready, io_inner_acquire_valid)
    node T_1613 = and(T_1611, T_1612)
    node T_1614 = and(T_1613, io_alloc_iacq_should)
    wire T_1623_0 : UInt<3>
    node T_1625 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1626 = and(io_inner_acquire_bits_is_builtin_type, T_1625)
    node T_1627 = and(T_1614, T_1626)
    wire T_1636_0 : UInt<3>
    node T_1638 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1639 = and(io_inner_acquire_bits_is_builtin_type, T_1638)
    node T_1641 = eq(T_1639, UInt<1>("h0"))
    node T_1643 = eq(io_inner_acquire_bits_addr_beat, UInt<3>("h0"))
    node T_1644 = or(T_1641, T_1643)
    node T_1646 = eq(T_1644, UInt<1>("h0"))
    node T_1647 = and(T_1627, T_1646)
    node T_1649 = eq(T_1647, UInt<1>("h0"))
    node T_1650 = or(T_1649, reset)
    node T_1652 = eq(T_1650, UInt<1>("h0"))
    node T_1653 = neq(state, UInt<4>("h0"))
    node T_1654 = and(T_1653, scoreboard_6)
    node T_1656 = eq(xact_iacq_a_type, UInt<3>("h5"))
    node T_1658 = eq(xact_iacq_a_type, UInt<3>("h6"))
    node T_1659 = or(T_1656, T_1658)
    node T_1660 = and(xact_iacq_is_builtin_type, T_1659)
    node T_1661 = and(T_1654, T_1660)
    node T_1663 = eq(T_1661, UInt<1>("h0"))
    node T_1664 = or(T_1663, reset)
    node T_1666 = eq(T_1664, UInt<1>("h0"))
    node T_1670 = eq(xact_iacq_a_type, UInt<3>("h4"))
    node T_1671 = and(xact_iacq_is_builtin_type, T_1670)
    node T_1672 = and(T_1654, T_1671)
    node T_1674 = eq(T_1672, UInt<1>("h0"))
    node T_1675 = or(T_1674, reset)
    node T_1677 = eq(T_1675, UInt<1>("h0"))
    wire T_1691_0 : UInt<64>
    wire T_1691_1 : UInt<64>
    wire T_1691_2 : UInt<64>
    wire T_1691_3 : UInt<64>
    wire T_1691_4 : UInt<64>
    wire T_1691_5 : UInt<64>
    wire T_1691_6 : UInt<64>
    wire T_1691_7 : UInt<64>
    reg data_buffer_0 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_1 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_2 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_3 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_4 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_5 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_6 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_7 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    wire T_1709_0 : UInt<8>
    wire T_1709_1 : UInt<8>
    wire T_1709_2 : UInt<8>
    wire T_1709_3 : UInt<8>
    wire T_1709_4 : UInt<8>
    wire T_1709_5 : UInt<8>
    wire T_1709_6 : UInt<8>
    wire T_1709_7 : UInt<8>
    reg wmask_buffer_0 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_1 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_2 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_3 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_4 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_5 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_6 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_7 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    node T_1714 = not(wmask_buffer_0)
    node T_1716 = eq(T_1714, UInt<8>("h0"))
    node T_1717 = not(wmask_buffer_1)
    node T_1719 = eq(T_1717, UInt<8>("h0"))
    node T_1720 = not(wmask_buffer_2)
    node T_1722 = eq(T_1720, UInt<8>("h0"))
    node T_1723 = not(wmask_buffer_3)
    node T_1725 = eq(T_1723, UInt<8>("h0"))
    node T_1726 = not(wmask_buffer_4)
    node T_1728 = eq(T_1726, UInt<8>("h0"))
    node T_1729 = not(wmask_buffer_5)
    node T_1731 = eq(T_1729, UInt<8>("h0"))
    node T_1732 = not(wmask_buffer_6)
    node T_1734 = eq(T_1732, UInt<8>("h0"))
    node T_1735 = not(wmask_buffer_7)
    node T_1737 = eq(T_1735, UInt<8>("h0"))
    wire data_valid_0 : UInt<1>
    wire data_valid_1 : UInt<1>
    wire data_valid_2 : UInt<1>
    wire data_valid_3 : UInt<1>
    wire data_valid_4 : UInt<1>
    wire data_valid_5 : UInt<1>
    wire data_valid_6 : UInt<1>
    wire data_valid_7 : UInt<1>
    node T_1748 = eq(io_inner_acquire_bits_addr_block, xact_addr_block)
    node T_1749 = and(T_1653, T_1748)
    node T_1751 = eq(io_inner_release_bits_addr_block, xact_addr_block)
    node T_1752 = and(T_1653, T_1751)
    node T_1754 = eq(io_outer_probe_bits_addr_block, xact_addr_block)
    node T_1755 = and(T_1653, T_1754)
    node T_1764 = eq(xact_iacq_client_xact_id, io_inner_acquire_bits_client_xact_id)
    node T_1765 = eq(xact_iacq_client_id, io_inner_acquire_bits_client_id)
    node T_1766 = and(T_1764, T_1765)
    node T_1767 = and(T_1766, scoreboard_6)
    node T_1768 = eq(xact_iacq_addr_beat, io_inner_acquire_bits_addr_beat)
    node T_1769 = and(T_1767, T_1768)
    inst ignt_q of Queue_8
    node T_1797 = and(T_1611, io_alloc_iacq_should)
    node T_1798 = and(T_1797, io_inner_acquire_valid)
    node T_1800 = eq(T_1769, UInt<1>("h0"))
    node T_1801 = and(T_1800, scoreboard_6)
    node T_1803 = and(T_1801, T_1612)
    wire T_1812_0 : UInt<3>
    node T_1814 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1815 = and(io_inner_acquire_bits_is_builtin_type, T_1814)
    node T_1817 = eq(T_1815, UInt<1>("h0"))
    node T_1820 = or(T_1817, T_1643)
    node T_1821 = and(T_1803, T_1820)
    node T_1822 = or(T_1798, T_1821)
    node T_1823_client_xact_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_xact_id, ignt_q.io_enq_bits_client_xact_id)
    node T_1823_addr_beat = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_addr_beat, ignt_q.io_enq_bits_addr_beat)
    node T_1823_client_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_id, ignt_q.io_enq_bits_client_id)
    node T_1823_is_builtin_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_is_builtin_type, ignt_q.io_enq_bits_is_builtin_type)
    node T_1823_a_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_a_type, ignt_q.io_enq_bits_a_type)
    node T_1850 = gt(ignt_q.io_count, UInt<2>("h0"))
    node T_1852 = or(T_1653, io_alloc_iacq_should)
    wire T_1862_0 : UInt<3>
    wire T_1862_1 : UInt<3>
    wire T_1862_2 : UInt<3>
    node T_1864 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1865 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1866 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1867 = or(T_1864, T_1865)
    node T_1868 = or(T_1867, T_1866)
    node T_1869 = and(io_inner_acquire_bits_is_builtin_type, T_1868)
    node T_1870 = and(T_1612, T_1869)
    node T_1874 = mux(T_1870, UInt<8>("hff"), UInt<8>("h0"))
    node T_1875 = not(T_1874)
    node T_1877 = dshlw(UInt<8>("h1"), io_inner_acquire_bits_addr_beat)
    node T_1878 = not(T_1877)
    node T_1879 = or(T_1875, T_1878)
    node T_1880 = and(pending_put_data, T_1879)
    wire T_1890_0 : UInt<3>
    node T_1892 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1893 = and(io_inner_acquire_bits_is_builtin_type, T_1892)
    node T_1894 = and(T_1612, T_1893)
    node T_1897 = and(T_1894, T_1643)
    node T_1906 = mux(T_1897, UInt<8>("hfe"), UInt<8>("h0"))
    node T_1907 = or(T_1880, T_1906)
    node GEN_30 = mux(T_1852, T_1907, pending_put_data)
    node T_1915 = mul(UInt<4>("h8"), UInt<4>("h0"))
    node T_1917 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1918 = and(io_inner_acquire_bits_is_builtin_type, T_1917)
    node T_1920 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1921 = and(io_inner_acquire_bits_is_builtin_type, T_1920)
    node T_1922 = or(T_1918, T_1921)
    node T_1923 = bits(io_inner_acquire_bits_union, 5, 1)
    node T_1924 = mux(T_1922, UInt<5>("h1"), T_1923)
    node T_1925 = bits(io_inner_acquire_bits_union, 10, 8)
    node T_1926 = bits(io_inner_acquire_bits_union, 7, 6)
    wire T_1939_0 : UInt<3>
    wire T_1939_1 : UInt<3>
    wire T_1939_2 : UInt<3>
    node T_1941 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1942 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1943 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1944 = or(T_1941, T_1942)
    node T_1945 = or(T_1944, T_1943)
    node T_1946 = and(io_inner_acquire_bits_is_builtin_type, T_1945)
    node T_1947 = and(T_1612, T_1946)
    node T_1951 = mux(T_1947, UInt<8>("hff"), UInt<8>("h0"))
    node T_1952 = not(T_1951)
    node T_1956 = or(T_1952, T_1878)
    node T_1958 = mux(T_1921, T_1956, UInt<8>("h0"))
    node GEN_31 = mux(T_1798, io_inner_acquire_bits_addr_block, xact_addr_block)
    node GEN_32 = mux(T_1798, UInt<1>("h0"), xact_allocate)
    node GEN_33 = mux(T_1798, T_1915, xact_amo_shift_bytes)
    node GEN_34 = mux(T_1798, T_1924, xact_op_code)
    node GEN_35 = mux(T_1798, T_1925, xact_addr_byte)
    node GEN_36 = mux(T_1798, T_1926, xact_op_size)
    node GEN_37 = mux(T_1798, T_1958, GEN_30)
    node GEN_38 = mux(T_1798, UInt<8>("h0"), pending_ignt_data)
    node GEN_39 = mux(T_1798, UInt<4>("h5"), state)
    node scoreboard_0 = neq(pending_put_data, UInt<8>("h0"))
    wire T_1976_0 : UInt<3>
    node T_1978 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1979 = and(io_inner_acquire_bits_is_builtin_type, T_1978)
    node T_1980 = and(T_1767, T_1979)
    node T_1981 = or(T_1611, T_1980)
    node T_1982 = not(pending_ignt_data)
    node skip_outer_acquire = eq(T_1982, UInt<8>("h0"))
    node T_1991 = eq(UInt<3>("h4"), xact_iacq_a_type)
    node T_1992 = mux(T_1991, UInt<2>("h0"), UInt<2>("h2"))
    node T_1993 = eq(UInt<3>("h6"), xact_iacq_a_type)
    node T_1994 = mux(T_1993, UInt<2>("h0"), T_1992)
    node T_1995 = eq(UInt<3>("h5"), xact_iacq_a_type)
    node T_1996 = mux(T_1995, UInt<2>("h2"), T_1994)
    node T_1997 = eq(UInt<3>("h2"), xact_iacq_a_type)
    node T_1998 = mux(T_1997, UInt<2>("h0"), T_1996)
    node T_1999 = eq(UInt<3>("h0"), xact_iacq_a_type)
    node T_2000 = mux(T_1999, UInt<2>("h2"), T_1998)
    node T_2001 = eq(UInt<3>("h3"), xact_iacq_a_type)
    node T_2002 = mux(T_2001, UInt<2>("h0"), T_2000)
    node T_2003 = eq(UInt<3>("h1"), xact_iacq_a_type)
    node T_2004 = mux(T_2003, UInt<2>("h2"), T_2002)
    node T_2005 = mux(xact_iacq_is_builtin_type, T_2004, UInt<2>("h0"))
    wire T_2030_addr_block : UInt<26>
    wire T_2030_p_type : UInt<2>
    wire T_2030_client_id : UInt<1>
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h0"))
    node T_2056 = mux(T_2055, UInt<4>("h6"), UInt<4>("h7"))
    wire T_2065_pending : UInt<1>
    wire T_2065_up_idx : UInt<3>
    wire T_2065_up_done : UInt<1>
    wire T_2065_down_idx : UInt<3>
    wire T_2065_down_done : UInt<1>
    node T_2073 = and(io_inner_probe_ready, io_inner_probe_valid)
    node T_2074 = not(T_2073)
    node T_2076 = dshlw(UInt<2>("h1"), io_inner_probe_bits_client_id)
    node T_2077 = not(T_2076)
    node GEN_273 = pad(T_2074, 2)
    node T_2078 = or(GEN_273, T_2077)
    node GEN_274 = pad(pending_iprbs, 2)
    node T_2079 = and(GEN_274, T_2078)
    node T_2080 = eq(state, UInt<4>("h5"))
    node T_2083 = and(T_2080, pending_iprbs)
    reg T_2091 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2100 = and(io_inner_release_ready, io_inner_release_valid)
    node T_2103 = eq(io_inner_release_bits_voluntary, UInt<1>("h0"))
    node T_2104 = and(T_1653, T_2103)
    node T_2105 = and(T_2100, T_2104)
    node T_2107 = eq(io_inner_release_bits_r_type, UInt<3>("h0"))
    node T_2108 = eq(io_inner_release_bits_r_type, UInt<3>("h1"))
    node T_2109 = eq(io_inner_release_bits_r_type, UInt<3>("h2"))
    node T_2110 = or(T_2107, T_2108)
    node T_2111 = or(T_2110, T_2109)
    node T_2113 = and(T_2105, T_2111)
    reg T_2115 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2117 = eq(T_2115, UInt<3>("h7"))
    node T_2119 = add(T_2115, UInt<3>("h1"))
    node T_2120 = tail(T_2119, 1)
    node GEN_41 = mux(T_2113, T_2120, T_2115)
    node T_2121 = and(T_2113, T_2117)
    node T_2122 = mux(T_2111, T_2115, UInt<3>("h0"))
    node T_2123 = mux(T_2111, T_2121, T_2105)
    reg T_2125 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2127 = eq(T_2123, UInt<1>("h0"))
    node T_2128 = and(T_2073, T_2127)
    node T_2130 = add(T_2125, UInt<1>("h1"))
    node T_2131 = tail(T_2130, 1)
    node GEN_42 = mux(T_2128, T_2131, T_2125)
    node T_2133 = eq(T_2073, UInt<1>("h0"))
    node T_2134 = and(T_2123, T_2133)
    node T_2136 = sub(T_2125, UInt<1>("h1"))
    node T_2137 = tail(T_2136, 1)
    node GEN_43 = mux(T_2134, T_2137, GEN_42)
    node T_2139 = gt(T_2125, UInt<1>("h0"))
    node T_2143 = or(pending_iprbs, T_2065_pending)
    node T_2145 = eq(T_2143, UInt<1>("h0"))
    node T_2146 = and(T_2080, T_2145)
    node GEN_44 = mux(T_2146, T_2056, GEN_39)
    node T_2150 = mux(T_1611, io_alloc_irel_should, io_alloc_irel_matches)
    node T_2151 = and(T_2150, io_inner_release_bits_voluntary)
    node T_2156 = and(T_2100, T_2151)
    node T_2164 = and(T_2156, T_2111)
    reg T_2166 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2168 = eq(T_2166, UInt<3>("h7"))
    node T_2170 = add(T_2166, UInt<3>("h1"))
    node T_2171 = tail(T_2170, 1)
    node GEN_45 = mux(T_2164, T_2171, T_2166)
    node T_2172 = and(T_2164, T_2168)
    node T_2173 = mux(T_2111, T_2166, UInt<3>("h0"))
    node T_2174 = mux(T_2111, T_2172, T_2156)
    node T_2175 = and(io_inner_grant_ready, io_inner_grant_valid)
    node T_2178 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_2179 = and(io_inner_grant_bits_is_builtin_type, T_2178)
    node T_2180 = and(T_1653, T_2179)
    node T_2181 = and(T_2175, T_2180)
    wire T_2189_0 : UInt<3>
    node GEN_275 = pad(UInt<3>("h5"), 4)
    node T_2191 = eq(io_inner_grant_bits_g_type, GEN_275)
    node T_2193 = mux(io_inner_grant_bits_is_builtin_type, T_2191, T_2178)
    node T_2195 = and(T_2181, T_2193)
    reg T_2197 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2199 = eq(T_2197, UInt<3>("h7"))
    node T_2201 = add(T_2197, UInt<3>("h1"))
    node T_2202 = tail(T_2201, 1)
    node GEN_46 = mux(T_2195, T_2202, T_2197)
    node T_2203 = and(T_2195, T_2199)
    node T_2204 = mux(T_2193, T_2197, UInt<3>("h0"))
    node T_2205 = mux(T_2193, T_2203, T_2181)
    reg T_2207 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2209 = eq(T_2205, UInt<1>("h0"))
    node T_2210 = and(T_2174, T_2209)
    node T_2212 = add(T_2207, UInt<1>("h1"))
    node T_2213 = tail(T_2212, 1)
    node GEN_47 = mux(T_2210, T_2213, T_2207)
    node T_2215 = eq(T_2174, UInt<1>("h0"))
    node T_2216 = and(T_2205, T_2215)
    node T_2218 = sub(T_2207, UInt<1>("h1"))
    node T_2219 = tail(T_2218, 1)
    node GEN_48 = mux(T_2216, T_2219, GEN_47)
    node T_2221 = gt(T_2207, UInt<1>("h0"))
    node T_2223 = and(T_1611, io_alloc_irel_should)
    node T_2224 = and(T_2223, io_inner_release_valid)
    node GEN_49 = mux(T_2224, io_inner_release_bits_addr_block, GEN_31)
    node GEN_50 = mux(T_2224, UInt<8>("hff"), pending_irel_data)
    node GEN_51 = mux(T_2224, UInt<4>("h7"), GEN_44)
    node T_2231 = and(T_1751, io_inner_release_bits_voluntary)
    node T_2233 = eq(state, UInt<4>("h8"))
    node T_2234 = or(T_1611, T_2233)
    node T_2236 = eq(T_2234, UInt<1>("h0"))
    node T_2237 = and(T_2231, T_2236)
    node T_2239 = eq(all_pending_done, UInt<1>("h0"))
    node T_2240 = and(T_2237, T_2239)
    node T_2241 = and(io_outer_grant_ready, io_outer_grant_valid)
    node T_2243 = eq(T_2241, UInt<1>("h0"))
    node T_2244 = and(T_2240, T_2243)
    node T_2247 = eq(T_2175, UInt<1>("h0"))
    node T_2248 = and(T_2244, T_2247)
    node T_2250 = eq(vol_ignt_counter_pending, UInt<1>("h0"))
    node T_2251 = and(T_2248, T_2250)
    node T_2252 = dshr(pending_orel_data, io_inner_release_bits_addr_beat)
    node T_2253 = bits(T_2252, 0, 0)
    node T_2254 = and(sending_orel, T_2253)
    node T_2255 = and(io_outer_release_ready, io_outer_release_valid)
    node T_2256 = eq(io_inner_release_bits_addr_beat, io_outer_release_bits_addr_beat)
    node T_2257 = and(T_2255, T_2256)
    node T_2263 = or(T_2254, T_2257)
    node T_2264 = and(T_2111, T_2263)
    node T_2266 = eq(T_2264, UInt<1>("h0"))
    node T_2267 = and(T_2251, T_2266)
    node T_2271 = and(T_1751, T_2103)
    node T_2273 = and(T_2271, T_2080)
    node T_2274 = or(T_2267, T_2273)
    node T_2275 = and(T_2274, io_inner_release_valid)
    node T_2276 = or(T_2224, T_2275)
    node T_2277 = and(T_2276, io_inner_release_ready)
    node T_2286 = eq(T_2111, UInt<1>("h0"))
    node T_2288 = eq(io_inner_release_bits_addr_beat, UInt<3>("h0"))
    node T_2289 = or(T_2286, T_2288)
    node GEN_52 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_r_type, xact_vol_ir_r_type)
    node GEN_53 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_id, xact_vol_ir_src)
    node GEN_54 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_xact_id, xact_vol_ir_client_xact_id)
    node T_2303 = and(T_2100, T_2111)
    node T_2307 = mux(T_2303, UInt<8>("hff"), UInt<8>("h0"))
    node T_2308 = not(T_2307)
    node T_2310 = dshlw(UInt<8>("h1"), io_inner_release_bits_addr_beat)
    node T_2311 = not(T_2310)
    node T_2312 = or(T_2308, T_2311)
    node T_2314 = mux(T_2111, T_2312, UInt<8>("h0"))
    node GEN_55 = mux(T_2289, GEN_52, xact_vol_ir_r_type)
    node GEN_56 = mux(T_2289, GEN_53, xact_vol_ir_src)
    node GEN_57 = mux(T_2289, GEN_54, xact_vol_ir_client_xact_id)
    node GEN_58 = mux(T_2289, T_2314, GEN_50)
    node T_2316 = eq(T_2289, UInt<1>("h0"))
    node T_2333 = and(pending_irel_data, T_2312)
    node GEN_59 = mux(T_2316, T_2333, GEN_58)
    node GEN_60 = mux(T_2277, GEN_55, xact_vol_ir_r_type)
    node GEN_61 = mux(T_2277, GEN_56, xact_vol_ir_src)
    node GEN_62 = mux(T_2277, GEN_57, xact_vol_ir_client_xact_id)
    node GEN_63 = mux(T_2277, GEN_59, GEN_50)
    node T_2334 = eq(state, UInt<4>("h3"))
    node T_2335 = eq(state, UInt<4>("h4"))
    node T_2337 = eq(state, UInt<4>("h7"))
    node T_2338 = or(T_2334, T_2335)
    node T_2339 = or(T_2338, T_2080)
    node T_2340 = or(T_2339, T_2337)
    node T_2341 = and(T_2340, vol_ignt_counter_pending)
    node T_2343 = neq(pending_irel_data, UInt<8>("h0"))
    node T_2344 = or(T_2343, vol_ognt_counter_pending)
    node T_2346 = eq(T_2344, UInt<1>("h0"))
    node T_2347 = and(T_2341, T_2346)
    wire T_2379_addr_beat : UInt<3>
    wire T_2379_addr_block : UInt<26>
    wire T_2379_client_xact_id : UInt<1>
    wire T_2379_voluntary : UInt<1>
    wire T_2379_r_type : UInt<3>
    wire T_2379_data : UInt<64>
    wire T_2379_client_id : UInt<1>
    wire T_2440_addr_beat : UInt<3>
    wire T_2440_client_xact_id : UInt<1>
    wire T_2440_manager_xact_id : UInt<4>
    wire T_2440_is_builtin_type : UInt<1>
    wire T_2440_g_type : UInt<4>
    wire T_2440_data : UInt<64>
    wire T_2440_client_id : UInt<1>
    wire GEN_0 : UInt<8>
    node GEN_64 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_65 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), wmask_buffer_2, GEN_64)
    node GEN_66 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), wmask_buffer_3, GEN_65)
    node GEN_67 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), wmask_buffer_4, GEN_66)
    node GEN_68 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), wmask_buffer_5, GEN_67)
    node GEN_69 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), wmask_buffer_6, GEN_68)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), wmask_buffer_7, GEN_69)
    node T_2521 = bits(GEN_0, 0, 0)
    wire GEN_1 : UInt<8>
    node T_2522 = bits(GEN_1, 1, 1)
    wire GEN_2 : UInt<8>
    node T_2523 = bits(GEN_2, 2, 2)
    wire GEN_3 : UInt<8>
    node T_2524 = bits(GEN_3, 3, 3)
    wire GEN_4 : UInt<8>
    node T_2525 = bits(GEN_4, 4, 4)
    wire GEN_5 : UInt<8>
    node T_2526 = bits(GEN_5, 5, 5)
    wire GEN_6 : UInt<8>
    node T_2527 = bits(GEN_6, 6, 6)
    wire GEN_7 : UInt<8>
    node T_2528 = bits(GEN_7, 7, 7)
    node T_2532 = mux(T_2521, UInt<8>("hff"), UInt<8>("h0"))
    node T_2536 = mux(T_2522, UInt<8>("hff"), UInt<8>("h0"))
    node T_2540 = mux(T_2523, UInt<8>("hff"), UInt<8>("h0"))
    node T_2544 = mux(T_2524, UInt<8>("hff"), UInt<8>("h0"))
    node T_2548 = mux(T_2525, UInt<8>("hff"), UInt<8>("h0"))
    node T_2552 = mux(T_2526, UInt<8>("hff"), UInt<8>("h0"))
    node T_2556 = mux(T_2527, UInt<8>("hff"), UInt<8>("h0"))
    node T_2560 = mux(T_2528, UInt<8>("hff"), UInt<8>("h0"))
    node T_2561 = cat(T_2536, T_2532)
    node T_2562 = cat(T_2544, T_2540)
    node T_2563 = cat(T_2562, T_2561)
    node T_2564 = cat(T_2552, T_2548)
    node T_2565 = cat(T_2560, T_2556)
    node T_2566 = cat(T_2565, T_2564)
    node T_2567 = cat(T_2566, T_2563)
    node T_2568 = not(T_2567)
    node T_2569 = and(T_2568, io_inner_release_bits_data)
    wire GEN_8 : UInt<64>
    node GEN_71 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_72 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), data_buffer_2, GEN_71)
    node GEN_73 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), data_buffer_3, GEN_72)
    node GEN_74 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), data_buffer_4, GEN_73)
    node GEN_75 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), data_buffer_5, GEN_74)
    node GEN_76 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), data_buffer_6, GEN_75)
    node GEN_77 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), data_buffer_7, GEN_76)
    node T_2570 = and(T_2567, GEN_8)
    node T_2571 = or(T_2569, T_2570)
    wire GEN_9 : UInt<64>
    node GEN_78 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_0)
    node GEN_79 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_1)
    node GEN_80 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_2)
    node GEN_81 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_3)
    node GEN_82 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_4)
    node GEN_83 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_5)
    node GEN_84 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_6)
    node GEN_85 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_7)
    wire GEN_10 : UInt<8>
    node GEN_86 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_0)
    node GEN_87 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_1)
    node GEN_88 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_2)
    node GEN_89 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_3)
    node GEN_90 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_4)
    node GEN_91 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_5)
    node GEN_92 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_6)
    node GEN_93 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_7)
    node GEN_94 = mux(T_2303, GEN_78, data_buffer_0)
    node GEN_95 = mux(T_2303, GEN_79, data_buffer_1)
    node GEN_96 = mux(T_2303, GEN_80, data_buffer_2)
    node GEN_97 = mux(T_2303, GEN_81, data_buffer_3)
    node GEN_98 = mux(T_2303, GEN_82, data_buffer_4)
    node GEN_99 = mux(T_2303, GEN_83, data_buffer_5)
    node GEN_100 = mux(T_2303, GEN_84, data_buffer_6)
    node GEN_101 = mux(T_2303, GEN_85, data_buffer_7)
    node GEN_102 = mux(T_2303, GEN_86, wmask_buffer_0)
    node GEN_103 = mux(T_2303, GEN_87, wmask_buffer_1)
    node GEN_104 = mux(T_2303, GEN_88, wmask_buffer_2)
    node GEN_105 = mux(T_2303, GEN_89, wmask_buffer_3)
    node GEN_106 = mux(T_2303, GEN_90, wmask_buffer_4)
    node GEN_107 = mux(T_2303, GEN_91, wmask_buffer_5)
    node GEN_108 = mux(T_2303, GEN_92, wmask_buffer_6)
    node GEN_109 = mux(T_2303, GEN_93, wmask_buffer_7)
    wire T_2604_state : UInt<2>
    node T_2631 = or(T_1653, io_alloc_irel_should)
    node T_2647 = and(T_2307, T_2310)
    node T_2648 = or(pending_orel_data, T_2647)
    node T_2651 = eq(io_outer_release_bits_r_type, UInt<3>("h0"))
    node T_2652 = eq(io_outer_release_bits_r_type, UInt<3>("h1"))
    node T_2653 = eq(io_outer_release_bits_r_type, UInt<3>("h2"))
    node T_2654 = or(T_2651, T_2652)
    node T_2655 = or(T_2654, T_2653)
    node T_2656 = and(T_2255, T_2655)
    node T_2660 = mux(T_2656, UInt<8>("hff"), UInt<8>("h0"))
    node T_2661 = not(T_2660)
    node T_2663 = dshlw(UInt<8>("h1"), io_outer_release_bits_addr_beat)
    node T_2664 = not(T_2663)
    node T_2665 = or(T_2661, T_2664)
    node T_2666 = and(T_2648, T_2665)
    node GEN_110 = mux(T_2631, T_2666, pending_orel_data)
    node T_2677 = eq(T_2655, UInt<1>("h0"))
    node T_2679 = eq(io_outer_release_bits_addr_beat, UInt<3>("h0"))
    node T_2680 = or(T_2677, T_2679)
    node GEN_112 = mux(T_2680, UInt<1>("h1"), sending_orel)
    node T_2692 = eq(io_outer_release_bits_addr_beat, UInt<3>("h7"))
    node T_2693 = or(T_2677, T_2692)
    node GEN_113 = mux(T_2693, UInt<1>("h0"), GEN_112)
    node GEN_114 = mux(T_2255, GEN_113, sending_orel)
    node GEN_115 = mux(T_2255, UInt<1>("h0"), pending_orel_send)
    node T_2702 = and(T_2255, io_outer_release_bits_voluntary)
    node T_2710 = and(T_2702, T_2655)
    reg T_2712 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2714 = eq(T_2712, UInt<3>("h7"))
    node T_2716 = add(T_2712, UInt<3>("h1"))
    node T_2717 = tail(T_2716, 1)
    node GEN_116 = mux(T_2710, T_2717, T_2712)
    node T_2718 = and(T_2710, T_2714)
    node T_2719 = mux(T_2655, T_2712, UInt<3>("h0"))
    node T_2720 = mux(T_2655, T_2718, T_2702)
    node T_2723 = eq(io_outer_grant_bits_g_type, UInt<4>("h0"))
    node T_2724 = and(io_outer_grant_bits_is_builtin_type, T_2723)
    node T_2725 = and(T_2241, T_2724)
    wire T_2733_0 : UInt<3>
    node GEN_276 = pad(UInt<3>("h5"), 4)
    node T_2735 = eq(io_outer_grant_bits_g_type, GEN_276)
    node T_2737 = mux(io_outer_grant_bits_is_builtin_type, T_2735, T_2723)
    node T_2739 = and(T_2725, T_2737)
    reg T_2741 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2743 = eq(T_2741, UInt<3>("h7"))
    node T_2745 = add(T_2741, UInt<3>("h1"))
    node T_2746 = tail(T_2745, 1)
    node GEN_117 = mux(T_2739, T_2746, T_2741)
    node T_2747 = and(T_2739, T_2743)
    node T_2748 = mux(T_2737, T_2741, UInt<3>("h0"))
    node T_2749 = mux(T_2737, T_2747, T_2725)
    reg T_2751 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2753 = eq(T_2749, UInt<1>("h0"))
    node T_2754 = and(T_2720, T_2753)
    node T_2756 = add(T_2751, UInt<1>("h1"))
    node T_2757 = tail(T_2756, 1)
    node GEN_118 = mux(T_2754, T_2757, T_2751)
    node T_2759 = eq(T_2720, UInt<1>("h0"))
    node T_2760 = and(T_2749, T_2759)
    node T_2762 = sub(T_2751, UInt<1>("h1"))
    node T_2763 = tail(T_2762, 1)
    node GEN_119 = mux(T_2760, T_2763, GEN_118)
    node T_2765 = gt(T_2751, UInt<1>("h0"))
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter_up_idx)
    node T_2775 = bits(T_2774, 0, 0)
    node T_2776 = mux(T_2655, T_2775, pending_orel_send)
    node T_2777 = and(T_2337, T_2776)
    node T_2791 = eq(UInt<2>("h2"), UInt<2>("h2"))
    node T_2792 = mux(T_2791, UInt<3>("h0"), UInt<3>("h3"))
    wire T_2828_addr_beat : UInt<3>
    wire T_2828_addr_block : UInt<26>
    wire T_2828_client_xact_id : UInt<4>
    wire T_2828_voluntary : UInt<1>
    wire T_2828_r_type : UInt<3>
    wire T_2828_data : UInt<64>
    wire GEN_11 : UInt<64>
    node GEN_120 = mux(eq(UInt<3>("h1"), vol_ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_121 = mux(eq(UInt<3>("h2"), vol_ognt_counter_up_idx), data_buffer_2, GEN_120)
    node GEN_122 = mux(eq(UInt<3>("h3"), vol_ognt_counter_up_idx), data_buffer_3, GEN_121)
    node GEN_123 = mux(eq(UInt<3>("h4"), vol_ognt_counter_up_idx), data_buffer_4, GEN_122)
    node GEN_124 = mux(eq(UInt<3>("h5"), vol_ognt_counter_up_idx), data_buffer_5, GEN_123)
    node GEN_125 = mux(eq(UInt<3>("h6"), vol_ognt_counter_up_idx), data_buffer_6, GEN_124)
    node GEN_126 = mux(eq(UInt<3>("h7"), vol_ognt_counter_up_idx), data_buffer_7, GEN_125)
    node T_2857 = eq(xact_iacq_is_builtin_type, UInt<1>("h0"))
    node T_2860 = and(io_outer_acquire_ready, io_outer_acquire_valid)
    wire T_2871_0 : UInt<3>
    node T_2873 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_2874 = and(io_outer_acquire_bits_is_builtin_type, T_2873)
    node T_2875 = and(T_2860, T_2874)
    reg T_2877 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2879 = eq(T_2877, UInt<3>("h7"))
    node T_2881 = add(T_2877, UInt<3>("h1"))
    node T_2882 = tail(T_2881, 1)
    node GEN_128 = mux(T_2875, T_2882, T_2877)
    node T_2883 = and(T_2875, T_2879)
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat)
    node T_2885 = mux(T_2874, T_2883, T_2860)
    node T_2891 = eq(T_2724, UInt<1>("h0"))
    node T_2892 = and(T_2241, T_2891)
    wire T_2900_0 : UInt<3>
    node GEN_277 = pad(UInt<3>("h5"), 4)
    node T_2902 = eq(io_outer_grant_bits_g_type, GEN_277)
    node T_2904 = mux(io_outer_grant_bits_is_builtin_type, T_2902, T_2723)
    node T_2906 = and(T_2892, T_2904)
    reg T_2908 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2910 = eq(T_2908, UInt<3>("h7"))
    node T_2912 = add(T_2908, UInt<3>("h1"))
    node T_2913 = tail(T_2912, 1)
    node GEN_129 = mux(T_2906, T_2913, T_2908)
    node T_2914 = and(T_2906, T_2910)
    node T_2915 = mux(T_2904, T_2908, xact_addr_beat)
    node T_2916 = mux(T_2904, T_2914, T_2892)
    reg T_2918 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2920 = eq(T_2916, UInt<1>("h0"))
    node T_2921 = and(T_2885, T_2920)
    node T_2923 = add(T_2918, UInt<1>("h1"))
    node T_2924 = tail(T_2923, 1)
    node GEN_130 = mux(T_2921, T_2924, T_2918)
    node T_2926 = eq(T_2885, UInt<1>("h0"))
    node T_2927 = and(T_2916, T_2926)
    node T_2929 = sub(T_2918, UInt<1>("h1"))
    node T_2930 = tail(T_2929, 1)
    node GEN_131 = mux(T_2927, T_2930, GEN_130)
    node T_2932 = gt(T_2918, UInt<1>("h0"))
    node T_2933 = eq(state, UInt<4>("h6"))
    node T_2937 = dshr(pending_put_data, ognt_counter_up_idx)
    node T_2938 = bits(T_2937, 0, 0)
    node T_2940 = eq(T_2938, UInt<1>("h0"))
    wire T_2949_0 : UInt<3>
    wire T_2949_1 : UInt<3>
    wire T_2949_2 : UInt<3>
    node T_2967 = or(xact_allocate, T_2940)
    node T_2968 = and(T_2933, T_2967)
    node T_2971 = eq(xact_op_code, UInt<5>("h1"))
    node T_2972 = eq(xact_op_code, UInt<5>("h7"))
    node T_2973 = or(T_2971, T_2972)
    node T_2974 = bits(xact_op_code, 3, 3)
    node T_2975 = eq(xact_op_code, UInt<5>("h4"))
    node T_2976 = or(T_2974, T_2975)
    node T_2977 = or(T_2973, T_2976)
    node T_2978 = eq(xact_op_code, UInt<5>("h3"))
    node T_2979 = or(T_2977, T_2978)
    node T_2980 = eq(xact_op_code, UInt<5>("h6"))
    node T_2981 = or(T_2979, T_2980)
    node T_2984 = cat(xact_op_code, UInt<1>("h1"))
    wire T_3015_addr_block : UInt<26>
    wire T_3015_client_xact_id : UInt<4>
    wire T_3015_addr_beat : UInt<3>
    wire T_3015_is_builtin_type : UInt<1>
    wire T_3015_a_type : UInt<3>
    wire T_3015_union : UInt<11>
    wire T_3015_data : UInt<64>
    wire GEN_12 : UInt<8>
    node GEN_132 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), wmask_buffer_1, wmask_buffer_0)
    node GEN_133 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), wmask_buffer_2, GEN_132)
    node GEN_134 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), wmask_buffer_3, GEN_133)
    node GEN_135 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), wmask_buffer_4, GEN_134)
    node GEN_136 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), wmask_buffer_5, GEN_135)
    node GEN_137 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), wmask_buffer_6, GEN_136)
    node GEN_138 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), wmask_buffer_7, GEN_137)
    node T_3080 = cat(xact_op_code, UInt<1>("h0"))
    node T_3081 = cat(xact_addr_byte, xact_op_size)
    node T_3082 = cat(T_3081, T_3080)
    node T_3084 = cat(xact_op_size, xact_op_code)
    node T_3085 = cat(T_3084, UInt<1>("h0"))
    node T_3087 = cat(GEN_12, UInt<1>("h0"))
    node T_3099 = mux(T_1993, UInt<6>("h2"), UInt<6>("h0"))
    node T_3101 = mux(T_1995, UInt<6>("h0"), T_3099)
    node T_3103 = mux(T_1991, T_3082, pad(T_3101, 11))
    node T_3105 = mux(T_2001, pad(T_3087, 11), T_3103)
    node T_3107 = mux(T_1997, pad(T_3087, 11), T_3105)
    node T_3109 = mux(T_2003, pad(T_3085, 11), T_3107)
    node T_3111 = mux(T_1999, T_3082, T_3109)
    wire T_3140_addr_block : UInt<26>
    wire T_3140_client_xact_id : UInt<4>
    wire T_3140_addr_beat : UInt<3>
    wire T_3140_is_builtin_type : UInt<1>
    wire T_3140_a_type : UInt<3>
    wire T_3140_union : UInt<11>
    wire T_3140_data : UInt<64>
    wire GEN_13 : UInt<64>
    node GEN_139 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_140 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), data_buffer_2, GEN_139)
    node GEN_141 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), data_buffer_3, GEN_140)
    node GEN_142 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), data_buffer_4, GEN_141)
    node GEN_143 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), data_buffer_5, GEN_142)
    node GEN_144 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), data_buffer_6, GEN_143)
    node GEN_145 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), data_buffer_7, GEN_144)
    node T_3168_addr_block = mux(T_2857, T_3015_addr_block, T_3140_addr_block)
    node T_3168_client_xact_id = mux(T_2857, UInt<4>("h0"), UInt<4>("h0"))
    node T_3168_addr_beat = mux(T_2857, UInt<3>("h0"), T_3140_addr_beat)
    node T_3168_is_builtin_type = mux(T_2857, UInt<1>("h0"), UInt<1>("h1"))
    node T_3168_a_type = mux(T_2857, T_3015_a_type, T_3140_a_type)
    node T_3168_union = mux(T_2857, T_3015_union, T_3140_union)
    node T_3168_data = mux(T_2857, UInt<64>("h0"), T_3140_data)
    node T_3197 = and(T_2933, ognt_counter_up_done)
    node GEN_146 = mux(T_3197, UInt<4>("h7"), GEN_51)
    node GEN_147 = mux(ognt_counter_pending, UInt<1>("h1"), vol_ognt_counter_pending)
    wire T_3207_0 : UInt<3>
    wire T_3207_1 : UInt<3>
    node GEN_278 = pad(UInt<3>("h5"), 4)
    node T_3209 = eq(io_outer_grant_bits_g_type, GEN_278)
    node GEN_279 = pad(UInt<3>("h4"), 4)
    node T_3210 = eq(io_outer_grant_bits_g_type, GEN_279)
    node T_3211 = or(T_3209, T_3210)
    node T_3213 = mux(io_outer_grant_bits_is_builtin_type, T_3211, T_2723)
    node T_3214 = and(T_2241, T_3213)
    wire GEN_14 : UInt<8>
    node GEN_148 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_149 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), wmask_buffer_2, GEN_148)
    node GEN_150 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), wmask_buffer_3, GEN_149)
    node GEN_151 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), wmask_buffer_4, GEN_150)
    node GEN_152 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), wmask_buffer_5, GEN_151)
    node GEN_153 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), wmask_buffer_6, GEN_152)
    node GEN_154 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), wmask_buffer_7, GEN_153)
    node T_3215 = bits(GEN_14, 0, 0)
    wire GEN_15 : UInt<8>
    node T_3216 = bits(GEN_15, 1, 1)
    wire GEN_16 : UInt<8>
    node T_3217 = bits(GEN_16, 2, 2)
    wire GEN_17 : UInt<8>
    node T_3218 = bits(GEN_17, 3, 3)
    wire GEN_18 : UInt<8>
    node T_3219 = bits(GEN_18, 4, 4)
    wire GEN_19 : UInt<8>
    node T_3220 = bits(GEN_19, 5, 5)
    wire GEN_20 : UInt<8>
    node T_3221 = bits(GEN_20, 6, 6)
    wire GEN_21 : UInt<8>
    node T_3222 = bits(GEN_21, 7, 7)
    node T_3226 = mux(T_3215, UInt<8>("hff"), UInt<8>("h0"))
    node T_3230 = mux(T_3216, UInt<8>("hff"), UInt<8>("h0"))
    node T_3234 = mux(T_3217, UInt<8>("hff"), UInt<8>("h0"))
    node T_3238 = mux(T_3218, UInt<8>("hff"), UInt<8>("h0"))
    node T_3242 = mux(T_3219, UInt<8>("hff"), UInt<8>("h0"))
    node T_3246 = mux(T_3220, UInt<8>("hff"), UInt<8>("h0"))
    node T_3250 = mux(T_3221, UInt<8>("hff"), UInt<8>("h0"))
    node T_3254 = mux(T_3222, UInt<8>("hff"), UInt<8>("h0"))
    node T_3255 = cat(T_3230, T_3226)
    node T_3256 = cat(T_3238, T_3234)
    node T_3257 = cat(T_3256, T_3255)
    node T_3258 = cat(T_3246, T_3242)
    node T_3259 = cat(T_3254, T_3250)
    node T_3260 = cat(T_3259, T_3258)
    node T_3261 = cat(T_3260, T_3257)
    node T_3262 = not(T_3261)
    node T_3263 = and(T_3262, io_outer_grant_bits_data)
    wire GEN_22 : UInt<64>
    node GEN_155 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_156 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), data_buffer_2, GEN_155)
    node GEN_157 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), data_buffer_3, GEN_156)
    node GEN_158 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), data_buffer_4, GEN_157)
    node GEN_159 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), data_buffer_5, GEN_158)
    node GEN_160 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), data_buffer_6, GEN_159)
    node GEN_161 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), data_buffer_7, GEN_160)
    node T_3264 = and(T_3261, GEN_22)
    node T_3265 = or(T_3263, T_3264)
    wire GEN_23 : UInt<64>
    node GEN_162 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), GEN_23, GEN_94)
    node GEN_163 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), GEN_23, GEN_95)
    node GEN_164 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), GEN_23, GEN_96)
    node GEN_165 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), GEN_23, GEN_97)
    node GEN_166 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), GEN_23, GEN_98)
    node GEN_167 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), GEN_23, GEN_99)
    node GEN_168 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), GEN_23, GEN_100)
    node GEN_169 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), GEN_23, GEN_101)
    wire GEN_24 : UInt<8>
    node GEN_170 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_102)
    node GEN_171 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_103)
    node GEN_172 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_104)
    node GEN_173 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_105)
    node GEN_174 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_106)
    node GEN_175 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_107)
    node GEN_176 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_108)
    node GEN_177 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_109)
    node GEN_178 = mux(T_3214, GEN_162, GEN_94)
    node GEN_179 = mux(T_3214, GEN_163, GEN_95)
    node GEN_180 = mux(T_3214, GEN_164, GEN_96)
    node GEN_181 = mux(T_3214, GEN_165, GEN_97)
    node GEN_182 = mux(T_3214, GEN_166, GEN_98)
    node GEN_183 = mux(T_3214, GEN_167, GEN_99)
    node GEN_184 = mux(T_3214, GEN_168, GEN_100)
    node GEN_185 = mux(T_3214, GEN_169, GEN_101)
    node GEN_186 = mux(T_3214, GEN_170, GEN_102)
    node GEN_187 = mux(T_3214, GEN_171, GEN_103)
    node GEN_188 = mux(T_3214, GEN_172, GEN_104)
    node GEN_189 = mux(T_3214, GEN_173, GEN_105)
    node GEN_190 = mux(T_3214, GEN_174, GEN_106)
    node GEN_191 = mux(T_3214, GEN_175, GEN_107)
    node GEN_192 = mux(T_3214, GEN_176, GEN_108)
    node GEN_193 = mux(T_3214, GEN_177, GEN_109)
    node T_3268 = or(scoreboard_3, ognt_counter_pending)
    node T_3269 = or(T_3268, vol_ognt_counter_pending)
    node T_3281 = eq(T_2179, UInt<1>("h0"))
    node T_3283 = and(T_2175, T_3281)
    wire T_3291_0 : UInt<3>
    node GEN_280 = pad(UInt<3>("h5"), 4)
    node T_3293 = eq(io_inner_grant_bits_g_type, GEN_280)
    node T_3295 = mux(io_inner_grant_bits_is_builtin_type, T_3293, T_2178)
    node T_3297 = and(T_3283, T_3295)
    reg T_3299 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3301 = eq(T_3299, UInt<3>("h7"))
    node T_3303 = add(T_3299, UInt<3>("h1"))
    node T_3304 = tail(T_3303, 1)
    node GEN_194 = mux(T_3297, T_3304, T_3299)
    node T_3305 = and(T_3297, T_3301)
    node T_3306 = mux(T_3295, T_3299, UInt<3>("h0"))
    node T_3307 = mux(T_3295, T_3305, T_3283)
    node T_3308 = and(io_inner_finish_ready, io_inner_finish_valid)
    reg T_3314 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_3324 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_3326 = eq(T_3308, UInt<1>("h0"))
    node T_3327 = and(T_3307, T_3326)
    node T_3329 = add(T_3324, UInt<1>("h1"))
    node T_3330 = tail(T_3329, 1)
    node GEN_196 = mux(T_3327, T_3330, T_3324)
    node T_3332 = eq(T_3307, UInt<1>("h0"))
    node T_3333 = and(T_3308, T_3332)
    node T_3335 = sub(T_3324, UInt<1>("h1"))
    node T_3336 = tail(T_3335, 1)
    node GEN_197 = mux(T_3333, T_3336, GEN_196)
    node T_3338 = gt(T_3324, UInt<1>("h0"))
    node T_3343 = eq(T_1798, UInt<1>("h0"))
    node T_3360 = or(pending_ignt_data, T_2647)
    wire T_3370_0 : UInt<3>
    wire T_3370_1 : UInt<3>
    node GEN_281 = pad(UInt<3>("h5"), 4)
    node T_3372 = eq(io_outer_grant_bits_g_type, GEN_281)
    node GEN_282 = pad(UInt<3>("h4"), 4)
    node T_3373 = eq(io_outer_grant_bits_g_type, GEN_282)
    node T_3374 = or(T_3372, T_3373)
    node T_3376 = mux(io_outer_grant_bits_is_builtin_type, T_3374, T_2723)
    node T_3377 = and(T_2241, T_3376)
    node T_3382 = mux(T_3377, UInt<8>("hff"), UInt<8>("h0"))
    node T_3384 = dshlw(UInt<8>("h1"), io_outer_grant_bits_addr_beat)
    node T_3385 = and(T_3382, T_3384)
    node T_3386 = or(T_3360, T_3385)
    node GEN_198 = mux(T_3343, T_3386, GEN_38)
    node T_3389 = eq(state, UInt<4>("h1"))
    node T_3390 = or(T_1611, T_3389)
    node T_3393 = or(T_3390, scoreboard_0)
    node T_3395 = eq(T_3393, UInt<1>("h0"))
    node T_3412 = eq(UInt<3>("h6"), ignt_q.io_deq_bits_a_type)
    node T_3413 = mux(T_3412, UInt<3>("h1"), UInt<3>("h3"))
    node T_3414 = eq(UInt<3>("h5"), ignt_q.io_deq_bits_a_type)
    node T_3415 = mux(T_3414, UInt<3>("h1"), T_3413)
    node T_3416 = eq(UInt<3>("h4"), ignt_q.io_deq_bits_a_type)
    node T_3417 = mux(T_3416, UInt<3>("h4"), T_3415)
    node T_3418 = eq(UInt<3>("h3"), ignt_q.io_deq_bits_a_type)
    node T_3419 = mux(T_3418, UInt<3>("h3"), T_3417)
    node T_3420 = eq(UInt<3>("h2"), ignt_q.io_deq_bits_a_type)
    node T_3421 = mux(T_3420, UInt<3>("h3"), T_3419)
    node T_3422 = eq(UInt<3>("h1"), ignt_q.io_deq_bits_a_type)
    node T_3423 = mux(T_3422, UInt<3>("h5"), T_3421)
    node T_3424 = eq(UInt<3>("h0"), ignt_q.io_deq_bits_a_type)
    node T_3425 = mux(T_3424, UInt<3>("h4"), T_3423)
    node T_3426 = mux(ignt_q.io_deq_bits_is_builtin_type, T_3425, UInt<3>("h0"))
    wire T_3455_addr_beat : UInt<3>
    wire T_3455_client_xact_id : UInt<1>
    wire T_3455_manager_xact_id : UInt<4>
    wire T_3455_is_builtin_type : UInt<1>
    wire T_3455_g_type : UInt<4>
    wire T_3455_data : UInt<64>
    wire T_3455_client_id : UInt<1>
    wire GEN_25 : UInt<64>
    node GEN_199 = mux(eq(UInt<3>("h1"), ignt_data_idx), data_buffer_1, data_buffer_0)
    node GEN_200 = mux(eq(UInt<3>("h2"), ignt_data_idx), data_buffer_2, GEN_199)
    node GEN_201 = mux(eq(UInt<3>("h3"), ignt_data_idx), data_buffer_3, GEN_200)
    node GEN_202 = mux(eq(UInt<3>("h4"), ignt_data_idx), data_buffer_4, GEN_201)
    node GEN_203 = mux(eq(UInt<3>("h5"), ignt_data_idx), data_buffer_5, GEN_202)
    node GEN_204 = mux(eq(UInt<3>("h6"), ignt_data_idx), data_buffer_6, GEN_203)
    node GEN_205 = mux(eq(UInt<3>("h7"), ignt_data_idx), data_buffer_7, GEN_204)
    wire T_3491_0 : UInt<3>
    node GEN_283 = pad(UInt<3>("h5"), 4)
    node T_3493 = eq(io_inner_grant_bits_g_type, GEN_283)
    node T_3495 = mux(io_inner_grant_bits_is_builtin_type, T_3493, T_2178)
    node T_3497 = and(T_2175, T_3495)
    reg T_3499 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3501 = eq(T_3499, UInt<3>("h7"))
    node T_3503 = add(T_3499, UInt<3>("h1"))
    node T_3504 = tail(T_3503, 1)
    node GEN_206 = mux(T_3497, T_3504, T_3499)
    node T_3505 = and(T_3497, T_3501)
    node T_3506 = mux(T_3495, T_3499, ignt_q.io_deq_bits_addr_beat)
    node T_3507 = mux(T_3495, T_3505, T_2175)
    node T_3512 = and(T_2337, scoreboard_6)
    node T_3514 = eq(T_3269, UInt<1>("h0"))
    wire T_3522_0 : UInt<3>
    wire T_3522_1 : UInt<3>
    node GEN_284 = pad(UInt<3>("h5"), 4)
    node T_3524 = eq(io_inner_grant_bits_g_type, GEN_284)
    node GEN_285 = pad(UInt<3>("h4"), 4)
    node T_3525 = eq(io_inner_grant_bits_g_type, GEN_285)
    node T_3526 = or(T_3524, T_3525)
    node T_3528 = mux(io_inner_grant_bits_is_builtin_type, T_3526, T_2178)
    node T_3529 = dshr(pending_ignt_data, ignt_data_idx)
    node T_3530 = bits(T_3529, 0, 0)
    node T_3532 = mux(T_3528, T_3530, T_3395)
    node T_3533 = and(T_3514, T_3532)
    node GEN_207 = mux(T_3512, T_3533, T_2347)
    node GEN_208 = mux(T_2250, ignt_data_done, UInt<1>("h0"))
    node GEN_209 = mux(T_2250, ignt_data_idx, UInt<3>("h0"))
    node GEN_210 = mux(T_2250, T_3455_client_xact_id, T_2440_client_xact_id)
    node GEN_211 = mux(T_2250, UInt<4>("h2"), UInt<4>("h0"))
    node GEN_212 = mux(T_2250, T_3455_is_builtin_type, UInt<1>("h1"))
    node GEN_213 = mux(T_2250, T_3455_g_type, UInt<4>("h0"))
    node GEN_214 = mux(T_2250, T_3455_data, UInt<64>("h0"))
    node GEN_215 = mux(T_2250, T_3455_client_id, T_2440_client_id)
    node GEN_216 = mux(T_2250, GEN_207, T_2347)
    node T_3540 = not(io_incoherent_0)
    node GEN_217 = mux(T_1798, pad(T_3540, 2), T_2079)
    node T_3551 = and(T_1767, io_inner_acquire_valid)
    node T_3552 = or(T_1798, T_3551)
    wire T_3562_0 : UInt<3>
    wire T_3562_1 : UInt<3>
    wire T_3562_2 : UInt<3>
    node T_3564 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_3565 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_3566 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3567 = or(T_3564, T_3565)
    node T_3568 = or(T_3567, T_3566)
    node T_3569 = and(io_inner_acquire_bits_is_builtin_type, T_3568)
    node T_3570 = and(T_1612, T_3569)
    node T_3571 = and(T_3570, T_3552)
    node T_3573 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3574 = and(io_inner_acquire_bits_is_builtin_type, T_3573)
    node T_3603 = or(T_1921, T_1918)
    node T_3604 = bits(io_inner_acquire_bits_union, 8, 1)
    node T_3606 = mux(T_3603, T_3604, UInt<8>("h0"))
    node T_3607 = mux(T_3574, UInt<8>("hff"), T_3606)
    node T_3608 = bits(T_3607, 0, 0)
    node T_3609 = bits(T_3607, 1, 1)
    node T_3610 = bits(T_3607, 2, 2)
    node T_3611 = bits(T_3607, 3, 3)
    node T_3612 = bits(T_3607, 4, 4)
    node T_3613 = bits(T_3607, 5, 5)
    node T_3614 = bits(T_3607, 6, 6)
    node T_3615 = bits(T_3607, 7, 7)
    node T_3619 = mux(T_3608, UInt<8>("hff"), UInt<8>("h0"))
    node T_3623 = mux(T_3609, UInt<8>("hff"), UInt<8>("h0"))
    node T_3627 = mux(T_3610, UInt<8>("hff"), UInt<8>("h0"))
    node T_3631 = mux(T_3611, UInt<8>("hff"), UInt<8>("h0"))
    node T_3635 = mux(T_3612, UInt<8>("hff"), UInt<8>("h0"))
    node T_3639 = mux(T_3613, UInt<8>("hff"), UInt<8>("h0"))
    node T_3643 = mux(T_3614, UInt<8>("hff"), UInt<8>("h0"))
    node T_3647 = mux(T_3615, UInt<8>("hff"), UInt<8>("h0"))
    node T_3648 = cat(T_3623, T_3619)
    node T_3649 = cat(T_3631, T_3627)
    node T_3650 = cat(T_3649, T_3648)
    node T_3651 = cat(T_3639, T_3635)
    node T_3652 = cat(T_3647, T_3643)
    node T_3653 = cat(T_3652, T_3651)
    node T_3654 = cat(T_3653, T_3650)
    node T_3655 = not(T_3654)
    wire GEN_26 : UInt<64>
    node GEN_218 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_219 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), data_buffer_2, GEN_218)
    node GEN_220 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), data_buffer_3, GEN_219)
    node GEN_221 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), data_buffer_4, GEN_220)
    node GEN_222 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), data_buffer_5, GEN_221)
    node GEN_223 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), data_buffer_6, GEN_222)
    node GEN_224 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), data_buffer_7, GEN_223)
    node T_3656 = and(T_3655, GEN_26)
    node T_3657 = and(T_3654, io_inner_acquire_bits_data)
    node T_3658 = or(T_3656, T_3657)
    wire GEN_27 : UInt<64>
    node GEN_225 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_178)
    node GEN_226 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_179)
    node GEN_227 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_180)
    node GEN_228 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_181)
    node GEN_229 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_182)
    node GEN_230 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_183)
    node GEN_231 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_184)
    node GEN_232 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_185)
    wire GEN_28 : UInt<8>
    node GEN_233 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_234 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), wmask_buffer_2, GEN_233)
    node GEN_235 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), wmask_buffer_3, GEN_234)
    node GEN_236 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), wmask_buffer_4, GEN_235)
    node GEN_237 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), wmask_buffer_5, GEN_236)
    node GEN_238 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), wmask_buffer_6, GEN_237)
    node GEN_239 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), wmask_buffer_7, GEN_238)
    node T_3695 = or(T_3607, GEN_28)
    wire GEN_29 : UInt<8>
    node GEN_240 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_186)
    node GEN_241 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_187)
    node GEN_242 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_188)
    node GEN_243 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_189)
    node GEN_244 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_190)
    node GEN_245 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_191)
    node GEN_246 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_192)
    node GEN_247 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_193)
    node GEN_248 = mux(T_3571, GEN_225, GEN_178)
    node GEN_249 = mux(T_3571, GEN_226, GEN_179)
    node GEN_250 = mux(T_3571, GEN_227, GEN_180)
    node GEN_251 = mux(T_3571, GEN_228, GEN_181)
    node GEN_252 = mux(T_3571, GEN_229, GEN_182)
    node GEN_253 = mux(T_3571, GEN_230, GEN_183)
    node GEN_254 = mux(T_3571, GEN_231, GEN_184)
    node GEN_255 = mux(T_3571, GEN_232, GEN_185)
    node GEN_256 = mux(T_3571, GEN_240, GEN_186)
    node GEN_257 = mux(T_3571, GEN_241, GEN_187)
    node GEN_258 = mux(T_3571, GEN_242, GEN_188)
    node GEN_259 = mux(T_3571, GEN_243, GEN_189)
    node GEN_260 = mux(T_3571, GEN_244, GEN_190)
    node GEN_261 = mux(T_3571, GEN_245, GEN_191)
    node GEN_262 = mux(T_3571, GEN_246, GEN_192)
    node GEN_263 = mux(T_3571, GEN_247, GEN_193)
    node T_3698 = or(scoreboard_0, T_2343)
    node T_3699 = or(T_3698, vol_ignt_counter_pending)
    node T_3700 = or(T_3699, scoreboard_3)
    node T_3701 = or(T_3700, vol_ognt_counter_pending)
    node T_3702 = or(T_3701, ognt_counter_pending)
    node T_3703 = or(T_3702, scoreboard_6)
    node T_3704 = or(T_3703, ifin_counter_pending)
    node T_3706 = eq(T_3704, UInt<1>("h0"))
    node T_3708 = and(T_2337, all_pending_done)
    node GEN_264 = mux(T_3708, UInt<4>("h0"), GEN_146)
    node GEN_265 = mux(T_3708, UInt<8>("h0"), GEN_256)
    node GEN_266 = mux(T_3708, UInt<8>("h0"), GEN_257)
    node GEN_267 = mux(T_3708, UInt<8>("h0"), GEN_258)
    node GEN_268 = mux(T_3708, UInt<8>("h0"), GEN_259)
    node GEN_269 = mux(T_3708, UInt<8>("h0"), GEN_260)
    node GEN_270 = mux(T_3708, UInt<8>("h0"), GEN_261)
    node GEN_271 = mux(T_3708, UInt<8>("h0"), GEN_262)
    node GEN_272 = mux(T_3708, UInt<8>("h0"), GEN_263)
    io_inner_acquire_ready <= T_1981
    io_inner_grant_valid <= GEN_216
    io_inner_grant_bits_addr_beat <= GEN_209
    io_inner_grant_bits_client_xact_id <= GEN_210
    io_inner_grant_bits_manager_xact_id <= GEN_211
    io_inner_grant_bits_is_builtin_type <= GEN_212
    io_inner_grant_bits_g_type <= GEN_213
    io_inner_grant_bits_data <= GEN_214
    io_inner_grant_bits_client_id <= GEN_215
    io_inner_finish_ready <= T_2337
    io_inner_probe_valid <= T_2083
    io_inner_probe_bits_addr_block <= T_2030_addr_block
    io_inner_probe_bits_p_type <= T_2030_p_type
    io_inner_probe_bits_client_id <= UInt<1>("h0")
    io_inner_release_ready <= T_2274
    io_outer_acquire_valid <= T_2968
    io_outer_acquire_bits_addr_block <= T_3168_addr_block
    io_outer_acquire_bits_client_xact_id <= T_3168_client_xact_id
    io_outer_acquire_bits_addr_beat <= T_3168_addr_beat
    io_outer_acquire_bits_is_builtin_type <= T_3168_is_builtin_type
    io_outer_acquire_bits_a_type <= T_3168_a_type
    io_outer_acquire_bits_union <= T_3168_union
    io_outer_acquire_bits_data <= T_3168_data
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= T_2777
    io_outer_release_bits_addr_beat <= T_2828_addr_beat
    io_outer_release_bits_addr_block <= T_2828_addr_block
    io_outer_release_bits_client_xact_id <= UInt<4>("h0")
    io_outer_release_bits_voluntary <= UInt<1>("h1")
    io_outer_release_bits_r_type <= T_2828_r_type
    io_outer_release_bits_data <= T_2828_data
    io_outer_grant_ready <= GEN_147
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= UInt<1>("h0")
    io_outer_finish_bits_manager_id <= UInt<1>("h0")
    io_alloc_iacq_matches <= T_1749
    io_alloc_iacq_can <= T_1611
    io_alloc_irel_matches <= T_1752
    io_alloc_irel_can <= UInt<1>("h0")
    io_alloc_oprb_matches <= T_1755
    io_alloc_oprb_can <= UInt<1>("h0")
    io_alloc_idle <= T_1611
    io_alloc_addr_block <= xact_addr_block
    all_pending_done <= T_3706
    state <= GEN_264
    xact_addr_block <= GEN_49
    xact_allocate <= GEN_32
    xact_amo_shift_bytes <= GEN_33
    xact_op_code <= GEN_34
    xact_addr_byte <= GEN_35
    xact_op_size <= GEN_36
    xact_addr_beat <= xact_iacq_addr_beat
    xact_iacq_client_xact_id <= T_1823_client_xact_id
    xact_iacq_addr_beat <= T_1823_addr_beat
    xact_iacq_client_id <= T_1823_client_id
    xact_iacq_is_builtin_type <= T_1823_is_builtin_type
    xact_iacq_a_type <= T_1823_a_type
    xact_vol_ir_r_type <= GEN_60
    xact_vol_ir_src <= GEN_61
    xact_vol_ir_client_xact_id <= GEN_62
    pending_irel_data <= GEN_63
    vol_ignt_counter_pending <= T_2221
    vol_ignt_counter_up_idx <= T_2173
    vol_ignt_counter_up_done <= T_2174
    vol_ignt_counter_down_idx <= T_2204
    vol_ignt_counter_down_done <= T_2205
    scoreboard_6 <= T_1850
    ignt_data_idx <= T_3506
    ignt_data_done <= T_3507
    ifin_counter_pending <= T_3338
    ifin_counter_up_idx <= T_3306
    ifin_counter_up_done <= T_3307
    ifin_counter_down_done <= T_3308
    pending_put_data <= GEN_37
    pending_ignt_data <= GEN_198
    ognt_counter_pending <= T_2932
    ognt_counter_up_idx <= T_2884
    ognt_counter_up_done <= T_2885
    ognt_counter_down_idx <= T_2915
    ognt_counter_down_done <= T_2916
    pending_iprbs <= bits(GEN_217, 0, 0)
    pending_orel_send <= GEN_115
    pending_orel_data <= GEN_110
    vol_ognt_counter_pending <= T_2765
    vol_ognt_counter_up_idx <= T_2719
    vol_ognt_counter_up_done <= T_2720
    vol_ognt_counter_down_idx <= T_2748
    vol_ognt_counter_down_done <= T_2749
    sending_orel <= GEN_114
    data_buffer_0 <= GEN_248
    data_buffer_1 <= GEN_249
    data_buffer_2 <= GEN_250
    data_buffer_3 <= GEN_251
    data_buffer_4 <= GEN_252
    data_buffer_5 <= GEN_253
    data_buffer_6 <= GEN_254
    data_buffer_7 <= GEN_255
    wmask_buffer_0 <= GEN_265
    wmask_buffer_1 <= GEN_266
    wmask_buffer_2 <= GEN_267
    wmask_buffer_3 <= GEN_268
    wmask_buffer_4 <= GEN_269
    wmask_buffer_5 <= GEN_270
    wmask_buffer_6 <= GEN_271
    wmask_buffer_7 <= GEN_272
    data_valid_0 <= T_1716
    data_valid_1 <= T_1719
    data_valid_2 <= T_1722
    data_valid_3 <= T_1725
    data_valid_4 <= T_1728
    data_valid_5 <= T_1731
    data_valid_6 <= T_1734
    data_valid_7 <= T_1737
    ignt_q.io_enq_valid <= T_1822
    ignt_q.io_enq_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    ignt_q.io_enq_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    ignt_q.io_enq_bits_client_id <= io_inner_acquire_bits_client_id
    ignt_q.io_enq_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    ignt_q.io_enq_bits_a_type <= io_inner_acquire_bits_a_type
    ignt_q.io_deq_ready <= GEN_208
    T_2030_addr_block <= xact_addr_block
    T_2030_p_type <= T_2005
    T_2065_pending <= T_2139
    T_2065_up_done <= T_2073
    T_2065_down_idx <= T_2122
    T_2065_down_done <= T_2123
    T_2091 <= T_2091
    T_2115 <= GEN_41
    T_2125 <= GEN_43
    T_2166 <= GEN_45
    T_2197 <= GEN_46
    T_2207 <= GEN_48
    T_2379_addr_block <= xact_addr_block
    T_2379_client_xact_id <= xact_vol_ir_client_xact_id
    T_2379_r_type <= xact_vol_ir_r_type
    T_2379_client_id <= xact_vol_ir_src
    T_2440_client_xact_id <= T_2379_client_xact_id
    T_2440_client_id <= T_2379_client_id
    GEN_0 <= GEN_70
    GEN_1 <= GEN_70
    GEN_2 <= GEN_70
    GEN_3 <= GEN_70
    GEN_4 <= GEN_70
    GEN_5 <= GEN_70
    GEN_6 <= GEN_70
    GEN_7 <= GEN_70
    GEN_8 <= GEN_77
    GEN_9 <= T_2571
    T_2712 <= GEN_116
    T_2741 <= GEN_117
    T_2751 <= GEN_119
    T_2828_addr_beat <= vol_ognt_counter_up_idx
    T_2828_addr_block <= xact_addr_block
    T_2828_r_type <= T_2792
    T_2828_data <= GEN_11
    GEN_11 <= GEN_126
    T_2877 <= GEN_128
    T_2908 <= GEN_129
    T_2918 <= GEN_131
    T_3015_addr_block <= xact_addr_block
    T_3015_a_type <= pad(T_2981, 3)
    T_3015_union <= pad(T_2984, 11)
    GEN_12 <= GEN_138
    T_3140_addr_block <= xact_addr_block
    T_3140_addr_beat <= ognt_counter_up_idx
    T_3140_a_type <= xact_iacq_a_type
    T_3140_union <= T_3111
    T_3140_data <= GEN_13
    GEN_13 <= GEN_145
    GEN_14 <= GEN_154
    GEN_15 <= GEN_154
    GEN_16 <= GEN_154
    GEN_17 <= GEN_154
    GEN_18 <= GEN_154
    GEN_19 <= GEN_154
    GEN_20 <= GEN_154
    GEN_21 <= GEN_154
    GEN_22 <= GEN_161
    GEN_23 <= T_3265
    T_3299 <= GEN_194
    T_3314 <= T_3314
    T_3324 <= GEN_197
    T_3455_addr_beat <= ignt_q.io_deq_bits_addr_beat
    T_3455_client_xact_id <= ignt_q.io_deq_bits_client_xact_id
    T_3455_is_builtin_type <= ignt_q.io_deq_bits_is_builtin_type
    T_3455_g_type <= pad(T_3426, 4)
    T_3455_data <= GEN_25
    T_3455_client_id <= ignt_q.io_deq_bits_client_id
    GEN_25 <= GEN_205
    T_3499 <= GEN_206
    GEN_26 <= GEN_224
    GEN_27 <= T_3658
    GEN_28 <= GEN_239
    GEN_29 <= T_3695
    printf(clk, T_1652, "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n")
    stop(clk, T_1652, 1)
    printf(clk, T_1666, "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n")
    stop(clk, T_1666, 1)
    printf(clk, T_1677, "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n")
    stop(clk, T_1677, 1)

  module BufferedBroadcastAcquireTracker_2 :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
    output io_alloc_iacq_matches : UInt<1>
    output io_alloc_iacq_can : UInt<1>
    input io_alloc_iacq_should : UInt<1>
    output io_alloc_irel_matches : UInt<1>
    output io_alloc_irel_can : UInt<1>
    input io_alloc_irel_should : UInt<1>
    output io_alloc_oprb_matches : UInt<1>
    output io_alloc_oprb_can : UInt<1>
    input io_alloc_oprb_should : UInt<1>
    output io_alloc_idle : UInt<1>
    output io_alloc_addr_block : UInt<26>
  
    wire all_pending_done : UInt<1>
    reg state : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg xact_addr_block : UInt<26>, clk with :
      reset => (reset, UInt<26>("h0"))
    reg xact_allocate : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_allocate)
    reg xact_amo_shift_bytes : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_amo_shift_bytes)
    reg xact_op_code : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_op_code)
    reg xact_addr_byte : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_addr_byte)
    reg xact_op_size : UInt<2>, clk with :
      reset => (UInt<1>("h0"), xact_op_size)
    wire xact_addr_beat : UInt<3>
    wire xact_iacq_client_xact_id : UInt<1>
    wire xact_iacq_addr_beat : UInt<3>
    wire xact_iacq_client_id : UInt<1>
    wire xact_iacq_is_builtin_type : UInt<1>
    wire xact_iacq_a_type : UInt<3>
    reg xact_vol_ir_r_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_r_type)
    reg xact_vol_ir_src : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_src)
    reg xact_vol_ir_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_client_xact_id)
    reg pending_irel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ignt_counter_pending : UInt<1>
    wire vol_ignt_counter_up_idx : UInt<3>
    wire vol_ignt_counter_up_done : UInt<1>
    wire vol_ignt_counter_down_idx : UInt<3>
    wire vol_ignt_counter_down_done : UInt<1>
    wire scoreboard_6 : UInt<1>
    wire ignt_data_idx : UInt<3>
    wire ignt_data_done : UInt<1>
    wire ifin_counter_pending : UInt<1>
    wire ifin_counter_up_idx : UInt<3>
    wire ifin_counter_up_done : UInt<1>
    wire ifin_counter_down_idx : UInt<3>
    wire ifin_counter_down_done : UInt<1>
    reg pending_put_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg pending_ignt_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire ognt_counter_pending : UInt<1>
    wire ognt_counter_up_idx : UInt<3>
    wire ognt_counter_up_done : UInt<1>
    wire ognt_counter_down_idx : UInt<3>
    wire ognt_counter_down_done : UInt<1>
    reg pending_iprbs : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pending_iprbs)
    reg pending_orel_send : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_orel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ognt_counter_pending : UInt<1>
    wire vol_ognt_counter_up_idx : UInt<3>
    wire vol_ognt_counter_up_done : UInt<1>
    wire vol_ognt_counter_down_idx : UInt<3>
    wire vol_ognt_counter_down_done : UInt<1>
    node T_170 = neq(pending_orel_data, UInt<8>("h0"))
    node T_171 = or(pending_orel_send, T_170)
    node scoreboard_3 = or(T_171, vol_ognt_counter_pending)
    reg sending_orel : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_195_sharers : UInt<1>
    wire T_241_state : UInt<2>
    wire coh_inner_sharers : UInt<1>
    wire coh_outer_state : UInt<2>
    node T_1611 = eq(state, UInt<4>("h0"))
    node T_1612 = and(io_inner_acquire_ready, io_inner_acquire_valid)
    node T_1613 = and(T_1611, T_1612)
    node T_1614 = and(T_1613, io_alloc_iacq_should)
    wire T_1623_0 : UInt<3>
    node T_1625 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1626 = and(io_inner_acquire_bits_is_builtin_type, T_1625)
    node T_1627 = and(T_1614, T_1626)
    wire T_1636_0 : UInt<3>
    node T_1638 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1639 = and(io_inner_acquire_bits_is_builtin_type, T_1638)
    node T_1641 = eq(T_1639, UInt<1>("h0"))
    node T_1643 = eq(io_inner_acquire_bits_addr_beat, UInt<3>("h0"))
    node T_1644 = or(T_1641, T_1643)
    node T_1646 = eq(T_1644, UInt<1>("h0"))
    node T_1647 = and(T_1627, T_1646)
    node T_1649 = eq(T_1647, UInt<1>("h0"))
    node T_1650 = or(T_1649, reset)
    node T_1652 = eq(T_1650, UInt<1>("h0"))
    node T_1653 = neq(state, UInt<4>("h0"))
    node T_1654 = and(T_1653, scoreboard_6)
    node T_1656 = eq(xact_iacq_a_type, UInt<3>("h5"))
    node T_1658 = eq(xact_iacq_a_type, UInt<3>("h6"))
    node T_1659 = or(T_1656, T_1658)
    node T_1660 = and(xact_iacq_is_builtin_type, T_1659)
    node T_1661 = and(T_1654, T_1660)
    node T_1663 = eq(T_1661, UInt<1>("h0"))
    node T_1664 = or(T_1663, reset)
    node T_1666 = eq(T_1664, UInt<1>("h0"))
    node T_1670 = eq(xact_iacq_a_type, UInt<3>("h4"))
    node T_1671 = and(xact_iacq_is_builtin_type, T_1670)
    node T_1672 = and(T_1654, T_1671)
    node T_1674 = eq(T_1672, UInt<1>("h0"))
    node T_1675 = or(T_1674, reset)
    node T_1677 = eq(T_1675, UInt<1>("h0"))
    wire T_1691_0 : UInt<64>
    wire T_1691_1 : UInt<64>
    wire T_1691_2 : UInt<64>
    wire T_1691_3 : UInt<64>
    wire T_1691_4 : UInt<64>
    wire T_1691_5 : UInt<64>
    wire T_1691_6 : UInt<64>
    wire T_1691_7 : UInt<64>
    reg data_buffer_0 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_1 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_2 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_3 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_4 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_5 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_6 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_7 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    wire T_1709_0 : UInt<8>
    wire T_1709_1 : UInt<8>
    wire T_1709_2 : UInt<8>
    wire T_1709_3 : UInt<8>
    wire T_1709_4 : UInt<8>
    wire T_1709_5 : UInt<8>
    wire T_1709_6 : UInt<8>
    wire T_1709_7 : UInt<8>
    reg wmask_buffer_0 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_1 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_2 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_3 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_4 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_5 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_6 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_7 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    node T_1714 = not(wmask_buffer_0)
    node T_1716 = eq(T_1714, UInt<8>("h0"))
    node T_1717 = not(wmask_buffer_1)
    node T_1719 = eq(T_1717, UInt<8>("h0"))
    node T_1720 = not(wmask_buffer_2)
    node T_1722 = eq(T_1720, UInt<8>("h0"))
    node T_1723 = not(wmask_buffer_3)
    node T_1725 = eq(T_1723, UInt<8>("h0"))
    node T_1726 = not(wmask_buffer_4)
    node T_1728 = eq(T_1726, UInt<8>("h0"))
    node T_1729 = not(wmask_buffer_5)
    node T_1731 = eq(T_1729, UInt<8>("h0"))
    node T_1732 = not(wmask_buffer_6)
    node T_1734 = eq(T_1732, UInt<8>("h0"))
    node T_1735 = not(wmask_buffer_7)
    node T_1737 = eq(T_1735, UInt<8>("h0"))
    wire data_valid_0 : UInt<1>
    wire data_valid_1 : UInt<1>
    wire data_valid_2 : UInt<1>
    wire data_valid_3 : UInt<1>
    wire data_valid_4 : UInt<1>
    wire data_valid_5 : UInt<1>
    wire data_valid_6 : UInt<1>
    wire data_valid_7 : UInt<1>
    node T_1748 = eq(io_inner_acquire_bits_addr_block, xact_addr_block)
    node T_1749 = and(T_1653, T_1748)
    node T_1751 = eq(io_inner_release_bits_addr_block, xact_addr_block)
    node T_1752 = and(T_1653, T_1751)
    node T_1754 = eq(io_outer_probe_bits_addr_block, xact_addr_block)
    node T_1755 = and(T_1653, T_1754)
    node T_1764 = eq(xact_iacq_client_xact_id, io_inner_acquire_bits_client_xact_id)
    node T_1765 = eq(xact_iacq_client_id, io_inner_acquire_bits_client_id)
    node T_1766 = and(T_1764, T_1765)
    node T_1767 = and(T_1766, scoreboard_6)
    node T_1768 = eq(xact_iacq_addr_beat, io_inner_acquire_bits_addr_beat)
    node T_1769 = and(T_1767, T_1768)
    inst ignt_q of Queue_8
    node T_1797 = and(T_1611, io_alloc_iacq_should)
    node T_1798 = and(T_1797, io_inner_acquire_valid)
    node T_1800 = eq(T_1769, UInt<1>("h0"))
    node T_1801 = and(T_1800, scoreboard_6)
    node T_1803 = and(T_1801, T_1612)
    wire T_1812_0 : UInt<3>
    node T_1814 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1815 = and(io_inner_acquire_bits_is_builtin_type, T_1814)
    node T_1817 = eq(T_1815, UInt<1>("h0"))
    node T_1820 = or(T_1817, T_1643)
    node T_1821 = and(T_1803, T_1820)
    node T_1822 = or(T_1798, T_1821)
    node T_1823_client_xact_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_xact_id, ignt_q.io_enq_bits_client_xact_id)
    node T_1823_addr_beat = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_addr_beat, ignt_q.io_enq_bits_addr_beat)
    node T_1823_client_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_id, ignt_q.io_enq_bits_client_id)
    node T_1823_is_builtin_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_is_builtin_type, ignt_q.io_enq_bits_is_builtin_type)
    node T_1823_a_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_a_type, ignt_q.io_enq_bits_a_type)
    node T_1850 = gt(ignt_q.io_count, UInt<2>("h0"))
    node T_1852 = or(T_1653, io_alloc_iacq_should)
    wire T_1862_0 : UInt<3>
    wire T_1862_1 : UInt<3>
    wire T_1862_2 : UInt<3>
    node T_1864 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1865 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1866 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1867 = or(T_1864, T_1865)
    node T_1868 = or(T_1867, T_1866)
    node T_1869 = and(io_inner_acquire_bits_is_builtin_type, T_1868)
    node T_1870 = and(T_1612, T_1869)
    node T_1874 = mux(T_1870, UInt<8>("hff"), UInt<8>("h0"))
    node T_1875 = not(T_1874)
    node T_1877 = dshlw(UInt<8>("h1"), io_inner_acquire_bits_addr_beat)
    node T_1878 = not(T_1877)
    node T_1879 = or(T_1875, T_1878)
    node T_1880 = and(pending_put_data, T_1879)
    wire T_1890_0 : UInt<3>
    node T_1892 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1893 = and(io_inner_acquire_bits_is_builtin_type, T_1892)
    node T_1894 = and(T_1612, T_1893)
    node T_1897 = and(T_1894, T_1643)
    node T_1906 = mux(T_1897, UInt<8>("hfe"), UInt<8>("h0"))
    node T_1907 = or(T_1880, T_1906)
    node GEN_30 = mux(T_1852, T_1907, pending_put_data)
    node T_1915 = mul(UInt<4>("h8"), UInt<4>("h0"))
    node T_1917 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1918 = and(io_inner_acquire_bits_is_builtin_type, T_1917)
    node T_1920 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1921 = and(io_inner_acquire_bits_is_builtin_type, T_1920)
    node T_1922 = or(T_1918, T_1921)
    node T_1923 = bits(io_inner_acquire_bits_union, 5, 1)
    node T_1924 = mux(T_1922, UInt<5>("h1"), T_1923)
    node T_1925 = bits(io_inner_acquire_bits_union, 10, 8)
    node T_1926 = bits(io_inner_acquire_bits_union, 7, 6)
    wire T_1939_0 : UInt<3>
    wire T_1939_1 : UInt<3>
    wire T_1939_2 : UInt<3>
    node T_1941 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1942 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1943 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1944 = or(T_1941, T_1942)
    node T_1945 = or(T_1944, T_1943)
    node T_1946 = and(io_inner_acquire_bits_is_builtin_type, T_1945)
    node T_1947 = and(T_1612, T_1946)
    node T_1951 = mux(T_1947, UInt<8>("hff"), UInt<8>("h0"))
    node T_1952 = not(T_1951)
    node T_1956 = or(T_1952, T_1878)
    node T_1958 = mux(T_1921, T_1956, UInt<8>("h0"))
    node GEN_31 = mux(T_1798, io_inner_acquire_bits_addr_block, xact_addr_block)
    node GEN_32 = mux(T_1798, UInt<1>("h0"), xact_allocate)
    node GEN_33 = mux(T_1798, T_1915, xact_amo_shift_bytes)
    node GEN_34 = mux(T_1798, T_1924, xact_op_code)
    node GEN_35 = mux(T_1798, T_1925, xact_addr_byte)
    node GEN_36 = mux(T_1798, T_1926, xact_op_size)
    node GEN_37 = mux(T_1798, T_1958, GEN_30)
    node GEN_38 = mux(T_1798, UInt<8>("h0"), pending_ignt_data)
    node GEN_39 = mux(T_1798, UInt<4>("h5"), state)
    node scoreboard_0 = neq(pending_put_data, UInt<8>("h0"))
    wire T_1976_0 : UInt<3>
    node T_1978 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1979 = and(io_inner_acquire_bits_is_builtin_type, T_1978)
    node T_1980 = and(T_1767, T_1979)
    node T_1981 = or(T_1611, T_1980)
    node T_1982 = not(pending_ignt_data)
    node skip_outer_acquire = eq(T_1982, UInt<8>("h0"))
    node T_1991 = eq(UInt<3>("h4"), xact_iacq_a_type)
    node T_1992 = mux(T_1991, UInt<2>("h0"), UInt<2>("h2"))
    node T_1993 = eq(UInt<3>("h6"), xact_iacq_a_type)
    node T_1994 = mux(T_1993, UInt<2>("h0"), T_1992)
    node T_1995 = eq(UInt<3>("h5"), xact_iacq_a_type)
    node T_1996 = mux(T_1995, UInt<2>("h2"), T_1994)
    node T_1997 = eq(UInt<3>("h2"), xact_iacq_a_type)
    node T_1998 = mux(T_1997, UInt<2>("h0"), T_1996)
    node T_1999 = eq(UInt<3>("h0"), xact_iacq_a_type)
    node T_2000 = mux(T_1999, UInt<2>("h2"), T_1998)
    node T_2001 = eq(UInt<3>("h3"), xact_iacq_a_type)
    node T_2002 = mux(T_2001, UInt<2>("h0"), T_2000)
    node T_2003 = eq(UInt<3>("h1"), xact_iacq_a_type)
    node T_2004 = mux(T_2003, UInt<2>("h2"), T_2002)
    node T_2005 = mux(xact_iacq_is_builtin_type, T_2004, UInt<2>("h0"))
    wire T_2030_addr_block : UInt<26>
    wire T_2030_p_type : UInt<2>
    wire T_2030_client_id : UInt<1>
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h0"))
    node T_2056 = mux(T_2055, UInt<4>("h6"), UInt<4>("h7"))
    wire T_2065_pending : UInt<1>
    wire T_2065_up_idx : UInt<3>
    wire T_2065_up_done : UInt<1>
    wire T_2065_down_idx : UInt<3>
    wire T_2065_down_done : UInt<1>
    node T_2073 = and(io_inner_probe_ready, io_inner_probe_valid)
    node T_2074 = not(T_2073)
    node T_2076 = dshlw(UInt<2>("h1"), io_inner_probe_bits_client_id)
    node T_2077 = not(T_2076)
    node GEN_273 = pad(T_2074, 2)
    node T_2078 = or(GEN_273, T_2077)
    node GEN_274 = pad(pending_iprbs, 2)
    node T_2079 = and(GEN_274, T_2078)
    node T_2080 = eq(state, UInt<4>("h5"))
    node T_2083 = and(T_2080, pending_iprbs)
    reg T_2091 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2100 = and(io_inner_release_ready, io_inner_release_valid)
    node T_2103 = eq(io_inner_release_bits_voluntary, UInt<1>("h0"))
    node T_2104 = and(T_1653, T_2103)
    node T_2105 = and(T_2100, T_2104)
    node T_2107 = eq(io_inner_release_bits_r_type, UInt<3>("h0"))
    node T_2108 = eq(io_inner_release_bits_r_type, UInt<3>("h1"))
    node T_2109 = eq(io_inner_release_bits_r_type, UInt<3>("h2"))
    node T_2110 = or(T_2107, T_2108)
    node T_2111 = or(T_2110, T_2109)
    node T_2113 = and(T_2105, T_2111)
    reg T_2115 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2117 = eq(T_2115, UInt<3>("h7"))
    node T_2119 = add(T_2115, UInt<3>("h1"))
    node T_2120 = tail(T_2119, 1)
    node GEN_41 = mux(T_2113, T_2120, T_2115)
    node T_2121 = and(T_2113, T_2117)
    node T_2122 = mux(T_2111, T_2115, UInt<3>("h0"))
    node T_2123 = mux(T_2111, T_2121, T_2105)
    reg T_2125 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2127 = eq(T_2123, UInt<1>("h0"))
    node T_2128 = and(T_2073, T_2127)
    node T_2130 = add(T_2125, UInt<1>("h1"))
    node T_2131 = tail(T_2130, 1)
    node GEN_42 = mux(T_2128, T_2131, T_2125)
    node T_2133 = eq(T_2073, UInt<1>("h0"))
    node T_2134 = and(T_2123, T_2133)
    node T_2136 = sub(T_2125, UInt<1>("h1"))
    node T_2137 = tail(T_2136, 1)
    node GEN_43 = mux(T_2134, T_2137, GEN_42)
    node T_2139 = gt(T_2125, UInt<1>("h0"))
    node T_2143 = or(pending_iprbs, T_2065_pending)
    node T_2145 = eq(T_2143, UInt<1>("h0"))
    node T_2146 = and(T_2080, T_2145)
    node GEN_44 = mux(T_2146, T_2056, GEN_39)
    node T_2150 = mux(T_1611, io_alloc_irel_should, io_alloc_irel_matches)
    node T_2151 = and(T_2150, io_inner_release_bits_voluntary)
    node T_2156 = and(T_2100, T_2151)
    node T_2164 = and(T_2156, T_2111)
    reg T_2166 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2168 = eq(T_2166, UInt<3>("h7"))
    node T_2170 = add(T_2166, UInt<3>("h1"))
    node T_2171 = tail(T_2170, 1)
    node GEN_45 = mux(T_2164, T_2171, T_2166)
    node T_2172 = and(T_2164, T_2168)
    node T_2173 = mux(T_2111, T_2166, UInt<3>("h0"))
    node T_2174 = mux(T_2111, T_2172, T_2156)
    node T_2175 = and(io_inner_grant_ready, io_inner_grant_valid)
    node T_2178 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_2179 = and(io_inner_grant_bits_is_builtin_type, T_2178)
    node T_2180 = and(T_1653, T_2179)
    node T_2181 = and(T_2175, T_2180)
    wire T_2189_0 : UInt<3>
    node GEN_275 = pad(UInt<3>("h5"), 4)
    node T_2191 = eq(io_inner_grant_bits_g_type, GEN_275)
    node T_2193 = mux(io_inner_grant_bits_is_builtin_type, T_2191, T_2178)
    node T_2195 = and(T_2181, T_2193)
    reg T_2197 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2199 = eq(T_2197, UInt<3>("h7"))
    node T_2201 = add(T_2197, UInt<3>("h1"))
    node T_2202 = tail(T_2201, 1)
    node GEN_46 = mux(T_2195, T_2202, T_2197)
    node T_2203 = and(T_2195, T_2199)
    node T_2204 = mux(T_2193, T_2197, UInt<3>("h0"))
    node T_2205 = mux(T_2193, T_2203, T_2181)
    reg T_2207 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2209 = eq(T_2205, UInt<1>("h0"))
    node T_2210 = and(T_2174, T_2209)
    node T_2212 = add(T_2207, UInt<1>("h1"))
    node T_2213 = tail(T_2212, 1)
    node GEN_47 = mux(T_2210, T_2213, T_2207)
    node T_2215 = eq(T_2174, UInt<1>("h0"))
    node T_2216 = and(T_2205, T_2215)
    node T_2218 = sub(T_2207, UInt<1>("h1"))
    node T_2219 = tail(T_2218, 1)
    node GEN_48 = mux(T_2216, T_2219, GEN_47)
    node T_2221 = gt(T_2207, UInt<1>("h0"))
    node T_2223 = and(T_1611, io_alloc_irel_should)
    node T_2224 = and(T_2223, io_inner_release_valid)
    node GEN_49 = mux(T_2224, io_inner_release_bits_addr_block, GEN_31)
    node GEN_50 = mux(T_2224, UInt<8>("hff"), pending_irel_data)
    node GEN_51 = mux(T_2224, UInt<4>("h7"), GEN_44)
    node T_2231 = and(T_1751, io_inner_release_bits_voluntary)
    node T_2233 = eq(state, UInt<4>("h8"))
    node T_2234 = or(T_1611, T_2233)
    node T_2236 = eq(T_2234, UInt<1>("h0"))
    node T_2237 = and(T_2231, T_2236)
    node T_2239 = eq(all_pending_done, UInt<1>("h0"))
    node T_2240 = and(T_2237, T_2239)
    node T_2241 = and(io_outer_grant_ready, io_outer_grant_valid)
    node T_2243 = eq(T_2241, UInt<1>("h0"))
    node T_2244 = and(T_2240, T_2243)
    node T_2247 = eq(T_2175, UInt<1>("h0"))
    node T_2248 = and(T_2244, T_2247)
    node T_2250 = eq(vol_ignt_counter_pending, UInt<1>("h0"))
    node T_2251 = and(T_2248, T_2250)
    node T_2252 = dshr(pending_orel_data, io_inner_release_bits_addr_beat)
    node T_2253 = bits(T_2252, 0, 0)
    node T_2254 = and(sending_orel, T_2253)
    node T_2255 = and(io_outer_release_ready, io_outer_release_valid)
    node T_2256 = eq(io_inner_release_bits_addr_beat, io_outer_release_bits_addr_beat)
    node T_2257 = and(T_2255, T_2256)
    node T_2263 = or(T_2254, T_2257)
    node T_2264 = and(T_2111, T_2263)
    node T_2266 = eq(T_2264, UInt<1>("h0"))
    node T_2267 = and(T_2251, T_2266)
    node T_2271 = and(T_1751, T_2103)
    node T_2273 = and(T_2271, T_2080)
    node T_2274 = or(T_2267, T_2273)
    node T_2275 = and(T_2274, io_inner_release_valid)
    node T_2276 = or(T_2224, T_2275)
    node T_2277 = and(T_2276, io_inner_release_ready)
    node T_2286 = eq(T_2111, UInt<1>("h0"))
    node T_2288 = eq(io_inner_release_bits_addr_beat, UInt<3>("h0"))
    node T_2289 = or(T_2286, T_2288)
    node GEN_52 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_r_type, xact_vol_ir_r_type)
    node GEN_53 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_id, xact_vol_ir_src)
    node GEN_54 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_xact_id, xact_vol_ir_client_xact_id)
    node T_2303 = and(T_2100, T_2111)
    node T_2307 = mux(T_2303, UInt<8>("hff"), UInt<8>("h0"))
    node T_2308 = not(T_2307)
    node T_2310 = dshlw(UInt<8>("h1"), io_inner_release_bits_addr_beat)
    node T_2311 = not(T_2310)
    node T_2312 = or(T_2308, T_2311)
    node T_2314 = mux(T_2111, T_2312, UInt<8>("h0"))
    node GEN_55 = mux(T_2289, GEN_52, xact_vol_ir_r_type)
    node GEN_56 = mux(T_2289, GEN_53, xact_vol_ir_src)
    node GEN_57 = mux(T_2289, GEN_54, xact_vol_ir_client_xact_id)
    node GEN_58 = mux(T_2289, T_2314, GEN_50)
    node T_2316 = eq(T_2289, UInt<1>("h0"))
    node T_2333 = and(pending_irel_data, T_2312)
    node GEN_59 = mux(T_2316, T_2333, GEN_58)
    node GEN_60 = mux(T_2277, GEN_55, xact_vol_ir_r_type)
    node GEN_61 = mux(T_2277, GEN_56, xact_vol_ir_src)
    node GEN_62 = mux(T_2277, GEN_57, xact_vol_ir_client_xact_id)
    node GEN_63 = mux(T_2277, GEN_59, GEN_50)
    node T_2334 = eq(state, UInt<4>("h3"))
    node T_2335 = eq(state, UInt<4>("h4"))
    node T_2337 = eq(state, UInt<4>("h7"))
    node T_2338 = or(T_2334, T_2335)
    node T_2339 = or(T_2338, T_2080)
    node T_2340 = or(T_2339, T_2337)
    node T_2341 = and(T_2340, vol_ignt_counter_pending)
    node T_2343 = neq(pending_irel_data, UInt<8>("h0"))
    node T_2344 = or(T_2343, vol_ognt_counter_pending)
    node T_2346 = eq(T_2344, UInt<1>("h0"))
    node T_2347 = and(T_2341, T_2346)
    wire T_2379_addr_beat : UInt<3>
    wire T_2379_addr_block : UInt<26>
    wire T_2379_client_xact_id : UInt<1>
    wire T_2379_voluntary : UInt<1>
    wire T_2379_r_type : UInt<3>
    wire T_2379_data : UInt<64>
    wire T_2379_client_id : UInt<1>
    wire T_2440_addr_beat : UInt<3>
    wire T_2440_client_xact_id : UInt<1>
    wire T_2440_manager_xact_id : UInt<4>
    wire T_2440_is_builtin_type : UInt<1>
    wire T_2440_g_type : UInt<4>
    wire T_2440_data : UInt<64>
    wire T_2440_client_id : UInt<1>
    wire GEN_0 : UInt<8>
    node GEN_64 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_65 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), wmask_buffer_2, GEN_64)
    node GEN_66 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), wmask_buffer_3, GEN_65)
    node GEN_67 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), wmask_buffer_4, GEN_66)
    node GEN_68 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), wmask_buffer_5, GEN_67)
    node GEN_69 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), wmask_buffer_6, GEN_68)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), wmask_buffer_7, GEN_69)
    node T_2521 = bits(GEN_0, 0, 0)
    wire GEN_1 : UInt<8>
    node T_2522 = bits(GEN_1, 1, 1)
    wire GEN_2 : UInt<8>
    node T_2523 = bits(GEN_2, 2, 2)
    wire GEN_3 : UInt<8>
    node T_2524 = bits(GEN_3, 3, 3)
    wire GEN_4 : UInt<8>
    node T_2525 = bits(GEN_4, 4, 4)
    wire GEN_5 : UInt<8>
    node T_2526 = bits(GEN_5, 5, 5)
    wire GEN_6 : UInt<8>
    node T_2527 = bits(GEN_6, 6, 6)
    wire GEN_7 : UInt<8>
    node T_2528 = bits(GEN_7, 7, 7)
    node T_2532 = mux(T_2521, UInt<8>("hff"), UInt<8>("h0"))
    node T_2536 = mux(T_2522, UInt<8>("hff"), UInt<8>("h0"))
    node T_2540 = mux(T_2523, UInt<8>("hff"), UInt<8>("h0"))
    node T_2544 = mux(T_2524, UInt<8>("hff"), UInt<8>("h0"))
    node T_2548 = mux(T_2525, UInt<8>("hff"), UInt<8>("h0"))
    node T_2552 = mux(T_2526, UInt<8>("hff"), UInt<8>("h0"))
    node T_2556 = mux(T_2527, UInt<8>("hff"), UInt<8>("h0"))
    node T_2560 = mux(T_2528, UInt<8>("hff"), UInt<8>("h0"))
    node T_2561 = cat(T_2536, T_2532)
    node T_2562 = cat(T_2544, T_2540)
    node T_2563 = cat(T_2562, T_2561)
    node T_2564 = cat(T_2552, T_2548)
    node T_2565 = cat(T_2560, T_2556)
    node T_2566 = cat(T_2565, T_2564)
    node T_2567 = cat(T_2566, T_2563)
    node T_2568 = not(T_2567)
    node T_2569 = and(T_2568, io_inner_release_bits_data)
    wire GEN_8 : UInt<64>
    node GEN_71 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_72 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), data_buffer_2, GEN_71)
    node GEN_73 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), data_buffer_3, GEN_72)
    node GEN_74 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), data_buffer_4, GEN_73)
    node GEN_75 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), data_buffer_5, GEN_74)
    node GEN_76 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), data_buffer_6, GEN_75)
    node GEN_77 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), data_buffer_7, GEN_76)
    node T_2570 = and(T_2567, GEN_8)
    node T_2571 = or(T_2569, T_2570)
    wire GEN_9 : UInt<64>
    node GEN_78 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_0)
    node GEN_79 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_1)
    node GEN_80 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_2)
    node GEN_81 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_3)
    node GEN_82 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_4)
    node GEN_83 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_5)
    node GEN_84 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_6)
    node GEN_85 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_7)
    wire GEN_10 : UInt<8>
    node GEN_86 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_0)
    node GEN_87 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_1)
    node GEN_88 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_2)
    node GEN_89 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_3)
    node GEN_90 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_4)
    node GEN_91 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_5)
    node GEN_92 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_6)
    node GEN_93 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_7)
    node GEN_94 = mux(T_2303, GEN_78, data_buffer_0)
    node GEN_95 = mux(T_2303, GEN_79, data_buffer_1)
    node GEN_96 = mux(T_2303, GEN_80, data_buffer_2)
    node GEN_97 = mux(T_2303, GEN_81, data_buffer_3)
    node GEN_98 = mux(T_2303, GEN_82, data_buffer_4)
    node GEN_99 = mux(T_2303, GEN_83, data_buffer_5)
    node GEN_100 = mux(T_2303, GEN_84, data_buffer_6)
    node GEN_101 = mux(T_2303, GEN_85, data_buffer_7)
    node GEN_102 = mux(T_2303, GEN_86, wmask_buffer_0)
    node GEN_103 = mux(T_2303, GEN_87, wmask_buffer_1)
    node GEN_104 = mux(T_2303, GEN_88, wmask_buffer_2)
    node GEN_105 = mux(T_2303, GEN_89, wmask_buffer_3)
    node GEN_106 = mux(T_2303, GEN_90, wmask_buffer_4)
    node GEN_107 = mux(T_2303, GEN_91, wmask_buffer_5)
    node GEN_108 = mux(T_2303, GEN_92, wmask_buffer_6)
    node GEN_109 = mux(T_2303, GEN_93, wmask_buffer_7)
    wire T_2604_state : UInt<2>
    node T_2631 = or(T_1653, io_alloc_irel_should)
    node T_2647 = and(T_2307, T_2310)
    node T_2648 = or(pending_orel_data, T_2647)
    node T_2651 = eq(io_outer_release_bits_r_type, UInt<3>("h0"))
    node T_2652 = eq(io_outer_release_bits_r_type, UInt<3>("h1"))
    node T_2653 = eq(io_outer_release_bits_r_type, UInt<3>("h2"))
    node T_2654 = or(T_2651, T_2652)
    node T_2655 = or(T_2654, T_2653)
    node T_2656 = and(T_2255, T_2655)
    node T_2660 = mux(T_2656, UInt<8>("hff"), UInt<8>("h0"))
    node T_2661 = not(T_2660)
    node T_2663 = dshlw(UInt<8>("h1"), io_outer_release_bits_addr_beat)
    node T_2664 = not(T_2663)
    node T_2665 = or(T_2661, T_2664)
    node T_2666 = and(T_2648, T_2665)
    node GEN_110 = mux(T_2631, T_2666, pending_orel_data)
    node T_2677 = eq(T_2655, UInt<1>("h0"))
    node T_2679 = eq(io_outer_release_bits_addr_beat, UInt<3>("h0"))
    node T_2680 = or(T_2677, T_2679)
    node GEN_112 = mux(T_2680, UInt<1>("h1"), sending_orel)
    node T_2692 = eq(io_outer_release_bits_addr_beat, UInt<3>("h7"))
    node T_2693 = or(T_2677, T_2692)
    node GEN_113 = mux(T_2693, UInt<1>("h0"), GEN_112)
    node GEN_114 = mux(T_2255, GEN_113, sending_orel)
    node GEN_115 = mux(T_2255, UInt<1>("h0"), pending_orel_send)
    node T_2702 = and(T_2255, io_outer_release_bits_voluntary)
    node T_2710 = and(T_2702, T_2655)
    reg T_2712 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2714 = eq(T_2712, UInt<3>("h7"))
    node T_2716 = add(T_2712, UInt<3>("h1"))
    node T_2717 = tail(T_2716, 1)
    node GEN_116 = mux(T_2710, T_2717, T_2712)
    node T_2718 = and(T_2710, T_2714)
    node T_2719 = mux(T_2655, T_2712, UInt<3>("h0"))
    node T_2720 = mux(T_2655, T_2718, T_2702)
    node T_2723 = eq(io_outer_grant_bits_g_type, UInt<4>("h0"))
    node T_2724 = and(io_outer_grant_bits_is_builtin_type, T_2723)
    node T_2725 = and(T_2241, T_2724)
    wire T_2733_0 : UInt<3>
    node GEN_276 = pad(UInt<3>("h5"), 4)
    node T_2735 = eq(io_outer_grant_bits_g_type, GEN_276)
    node T_2737 = mux(io_outer_grant_bits_is_builtin_type, T_2735, T_2723)
    node T_2739 = and(T_2725, T_2737)
    reg T_2741 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2743 = eq(T_2741, UInt<3>("h7"))
    node T_2745 = add(T_2741, UInt<3>("h1"))
    node T_2746 = tail(T_2745, 1)
    node GEN_117 = mux(T_2739, T_2746, T_2741)
    node T_2747 = and(T_2739, T_2743)
    node T_2748 = mux(T_2737, T_2741, UInt<3>("h0"))
    node T_2749 = mux(T_2737, T_2747, T_2725)
    reg T_2751 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2753 = eq(T_2749, UInt<1>("h0"))
    node T_2754 = and(T_2720, T_2753)
    node T_2756 = add(T_2751, UInt<1>("h1"))
    node T_2757 = tail(T_2756, 1)
    node GEN_118 = mux(T_2754, T_2757, T_2751)
    node T_2759 = eq(T_2720, UInt<1>("h0"))
    node T_2760 = and(T_2749, T_2759)
    node T_2762 = sub(T_2751, UInt<1>("h1"))
    node T_2763 = tail(T_2762, 1)
    node GEN_119 = mux(T_2760, T_2763, GEN_118)
    node T_2765 = gt(T_2751, UInt<1>("h0"))
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter_up_idx)
    node T_2775 = bits(T_2774, 0, 0)
    node T_2776 = mux(T_2655, T_2775, pending_orel_send)
    node T_2777 = and(T_2337, T_2776)
    node T_2791 = eq(UInt<2>("h2"), UInt<2>("h2"))
    node T_2792 = mux(T_2791, UInt<3>("h0"), UInt<3>("h3"))
    wire T_2828_addr_beat : UInt<3>
    wire T_2828_addr_block : UInt<26>
    wire T_2828_client_xact_id : UInt<4>
    wire T_2828_voluntary : UInt<1>
    wire T_2828_r_type : UInt<3>
    wire T_2828_data : UInt<64>
    wire GEN_11 : UInt<64>
    node GEN_120 = mux(eq(UInt<3>("h1"), vol_ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_121 = mux(eq(UInt<3>("h2"), vol_ognt_counter_up_idx), data_buffer_2, GEN_120)
    node GEN_122 = mux(eq(UInt<3>("h3"), vol_ognt_counter_up_idx), data_buffer_3, GEN_121)
    node GEN_123 = mux(eq(UInt<3>("h4"), vol_ognt_counter_up_idx), data_buffer_4, GEN_122)
    node GEN_124 = mux(eq(UInt<3>("h5"), vol_ognt_counter_up_idx), data_buffer_5, GEN_123)
    node GEN_125 = mux(eq(UInt<3>("h6"), vol_ognt_counter_up_idx), data_buffer_6, GEN_124)
    node GEN_126 = mux(eq(UInt<3>("h7"), vol_ognt_counter_up_idx), data_buffer_7, GEN_125)
    node T_2857 = eq(xact_iacq_is_builtin_type, UInt<1>("h0"))
    node T_2860 = and(io_outer_acquire_ready, io_outer_acquire_valid)
    wire T_2871_0 : UInt<3>
    node T_2873 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_2874 = and(io_outer_acquire_bits_is_builtin_type, T_2873)
    node T_2875 = and(T_2860, T_2874)
    reg T_2877 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2879 = eq(T_2877, UInt<3>("h7"))
    node T_2881 = add(T_2877, UInt<3>("h1"))
    node T_2882 = tail(T_2881, 1)
    node GEN_128 = mux(T_2875, T_2882, T_2877)
    node T_2883 = and(T_2875, T_2879)
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat)
    node T_2885 = mux(T_2874, T_2883, T_2860)
    node T_2891 = eq(T_2724, UInt<1>("h0"))
    node T_2892 = and(T_2241, T_2891)
    wire T_2900_0 : UInt<3>
    node GEN_277 = pad(UInt<3>("h5"), 4)
    node T_2902 = eq(io_outer_grant_bits_g_type, GEN_277)
    node T_2904 = mux(io_outer_grant_bits_is_builtin_type, T_2902, T_2723)
    node T_2906 = and(T_2892, T_2904)
    reg T_2908 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2910 = eq(T_2908, UInt<3>("h7"))
    node T_2912 = add(T_2908, UInt<3>("h1"))
    node T_2913 = tail(T_2912, 1)
    node GEN_129 = mux(T_2906, T_2913, T_2908)
    node T_2914 = and(T_2906, T_2910)
    node T_2915 = mux(T_2904, T_2908, xact_addr_beat)
    node T_2916 = mux(T_2904, T_2914, T_2892)
    reg T_2918 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2920 = eq(T_2916, UInt<1>("h0"))
    node T_2921 = and(T_2885, T_2920)
    node T_2923 = add(T_2918, UInt<1>("h1"))
    node T_2924 = tail(T_2923, 1)
    node GEN_130 = mux(T_2921, T_2924, T_2918)
    node T_2926 = eq(T_2885, UInt<1>("h0"))
    node T_2927 = and(T_2916, T_2926)
    node T_2929 = sub(T_2918, UInt<1>("h1"))
    node T_2930 = tail(T_2929, 1)
    node GEN_131 = mux(T_2927, T_2930, GEN_130)
    node T_2932 = gt(T_2918, UInt<1>("h0"))
    node T_2933 = eq(state, UInt<4>("h6"))
    node T_2937 = dshr(pending_put_data, ognt_counter_up_idx)
    node T_2938 = bits(T_2937, 0, 0)
    node T_2940 = eq(T_2938, UInt<1>("h0"))
    wire T_2949_0 : UInt<3>
    wire T_2949_1 : UInt<3>
    wire T_2949_2 : UInt<3>
    node T_2967 = or(xact_allocate, T_2940)
    node T_2968 = and(T_2933, T_2967)
    node T_2971 = eq(xact_op_code, UInt<5>("h1"))
    node T_2972 = eq(xact_op_code, UInt<5>("h7"))
    node T_2973 = or(T_2971, T_2972)
    node T_2974 = bits(xact_op_code, 3, 3)
    node T_2975 = eq(xact_op_code, UInt<5>("h4"))
    node T_2976 = or(T_2974, T_2975)
    node T_2977 = or(T_2973, T_2976)
    node T_2978 = eq(xact_op_code, UInt<5>("h3"))
    node T_2979 = or(T_2977, T_2978)
    node T_2980 = eq(xact_op_code, UInt<5>("h6"))
    node T_2981 = or(T_2979, T_2980)
    node T_2984 = cat(xact_op_code, UInt<1>("h1"))
    wire T_3015_addr_block : UInt<26>
    wire T_3015_client_xact_id : UInt<4>
    wire T_3015_addr_beat : UInt<3>
    wire T_3015_is_builtin_type : UInt<1>
    wire T_3015_a_type : UInt<3>
    wire T_3015_union : UInt<11>
    wire T_3015_data : UInt<64>
    wire GEN_12 : UInt<8>
    node GEN_132 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), wmask_buffer_1, wmask_buffer_0)
    node GEN_133 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), wmask_buffer_2, GEN_132)
    node GEN_134 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), wmask_buffer_3, GEN_133)
    node GEN_135 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), wmask_buffer_4, GEN_134)
    node GEN_136 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), wmask_buffer_5, GEN_135)
    node GEN_137 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), wmask_buffer_6, GEN_136)
    node GEN_138 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), wmask_buffer_7, GEN_137)
    node T_3080 = cat(xact_op_code, UInt<1>("h0"))
    node T_3081 = cat(xact_addr_byte, xact_op_size)
    node T_3082 = cat(T_3081, T_3080)
    node T_3084 = cat(xact_op_size, xact_op_code)
    node T_3085 = cat(T_3084, UInt<1>("h0"))
    node T_3087 = cat(GEN_12, UInt<1>("h0"))
    node T_3099 = mux(T_1993, UInt<6>("h2"), UInt<6>("h0"))
    node T_3101 = mux(T_1995, UInt<6>("h0"), T_3099)
    node T_3103 = mux(T_1991, T_3082, pad(T_3101, 11))
    node T_3105 = mux(T_2001, pad(T_3087, 11), T_3103)
    node T_3107 = mux(T_1997, pad(T_3087, 11), T_3105)
    node T_3109 = mux(T_2003, pad(T_3085, 11), T_3107)
    node T_3111 = mux(T_1999, T_3082, T_3109)
    wire T_3140_addr_block : UInt<26>
    wire T_3140_client_xact_id : UInt<4>
    wire T_3140_addr_beat : UInt<3>
    wire T_3140_is_builtin_type : UInt<1>
    wire T_3140_a_type : UInt<3>
    wire T_3140_union : UInt<11>
    wire T_3140_data : UInt<64>
    wire GEN_13 : UInt<64>
    node GEN_139 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_140 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), data_buffer_2, GEN_139)
    node GEN_141 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), data_buffer_3, GEN_140)
    node GEN_142 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), data_buffer_4, GEN_141)
    node GEN_143 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), data_buffer_5, GEN_142)
    node GEN_144 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), data_buffer_6, GEN_143)
    node GEN_145 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), data_buffer_7, GEN_144)
    node T_3168_addr_block = mux(T_2857, T_3015_addr_block, T_3140_addr_block)
    node T_3168_client_xact_id = mux(T_2857, UInt<4>("h0"), UInt<4>("h0"))
    node T_3168_addr_beat = mux(T_2857, UInt<3>("h0"), T_3140_addr_beat)
    node T_3168_is_builtin_type = mux(T_2857, UInt<1>("h0"), UInt<1>("h1"))
    node T_3168_a_type = mux(T_2857, T_3015_a_type, T_3140_a_type)
    node T_3168_union = mux(T_2857, T_3015_union, T_3140_union)
    node T_3168_data = mux(T_2857, UInt<64>("h0"), T_3140_data)
    node T_3197 = and(T_2933, ognt_counter_up_done)
    node GEN_146 = mux(T_3197, UInt<4>("h7"), GEN_51)
    node GEN_147 = mux(ognt_counter_pending, UInt<1>("h1"), vol_ognt_counter_pending)
    wire T_3207_0 : UInt<3>
    wire T_3207_1 : UInt<3>
    node GEN_278 = pad(UInt<3>("h5"), 4)
    node T_3209 = eq(io_outer_grant_bits_g_type, GEN_278)
    node GEN_279 = pad(UInt<3>("h4"), 4)
    node T_3210 = eq(io_outer_grant_bits_g_type, GEN_279)
    node T_3211 = or(T_3209, T_3210)
    node T_3213 = mux(io_outer_grant_bits_is_builtin_type, T_3211, T_2723)
    node T_3214 = and(T_2241, T_3213)
    wire GEN_14 : UInt<8>
    node GEN_148 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_149 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), wmask_buffer_2, GEN_148)
    node GEN_150 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), wmask_buffer_3, GEN_149)
    node GEN_151 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), wmask_buffer_4, GEN_150)
    node GEN_152 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), wmask_buffer_5, GEN_151)
    node GEN_153 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), wmask_buffer_6, GEN_152)
    node GEN_154 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), wmask_buffer_7, GEN_153)
    node T_3215 = bits(GEN_14, 0, 0)
    wire GEN_15 : UInt<8>
    node T_3216 = bits(GEN_15, 1, 1)
    wire GEN_16 : UInt<8>
    node T_3217 = bits(GEN_16, 2, 2)
    wire GEN_17 : UInt<8>
    node T_3218 = bits(GEN_17, 3, 3)
    wire GEN_18 : UInt<8>
    node T_3219 = bits(GEN_18, 4, 4)
    wire GEN_19 : UInt<8>
    node T_3220 = bits(GEN_19, 5, 5)
    wire GEN_20 : UInt<8>
    node T_3221 = bits(GEN_20, 6, 6)
    wire GEN_21 : UInt<8>
    node T_3222 = bits(GEN_21, 7, 7)
    node T_3226 = mux(T_3215, UInt<8>("hff"), UInt<8>("h0"))
    node T_3230 = mux(T_3216, UInt<8>("hff"), UInt<8>("h0"))
    node T_3234 = mux(T_3217, UInt<8>("hff"), UInt<8>("h0"))
    node T_3238 = mux(T_3218, UInt<8>("hff"), UInt<8>("h0"))
    node T_3242 = mux(T_3219, UInt<8>("hff"), UInt<8>("h0"))
    node T_3246 = mux(T_3220, UInt<8>("hff"), UInt<8>("h0"))
    node T_3250 = mux(T_3221, UInt<8>("hff"), UInt<8>("h0"))
    node T_3254 = mux(T_3222, UInt<8>("hff"), UInt<8>("h0"))
    node T_3255 = cat(T_3230, T_3226)
    node T_3256 = cat(T_3238, T_3234)
    node T_3257 = cat(T_3256, T_3255)
    node T_3258 = cat(T_3246, T_3242)
    node T_3259 = cat(T_3254, T_3250)
    node T_3260 = cat(T_3259, T_3258)
    node T_3261 = cat(T_3260, T_3257)
    node T_3262 = not(T_3261)
    node T_3263 = and(T_3262, io_outer_grant_bits_data)
    wire GEN_22 : UInt<64>
    node GEN_155 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_156 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), data_buffer_2, GEN_155)
    node GEN_157 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), data_buffer_3, GEN_156)
    node GEN_158 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), data_buffer_4, GEN_157)
    node GEN_159 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), data_buffer_5, GEN_158)
    node GEN_160 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), data_buffer_6, GEN_159)
    node GEN_161 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), data_buffer_7, GEN_160)
    node T_3264 = and(T_3261, GEN_22)
    node T_3265 = or(T_3263, T_3264)
    wire GEN_23 : UInt<64>
    node GEN_162 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), GEN_23, GEN_94)
    node GEN_163 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), GEN_23, GEN_95)
    node GEN_164 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), GEN_23, GEN_96)
    node GEN_165 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), GEN_23, GEN_97)
    node GEN_166 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), GEN_23, GEN_98)
    node GEN_167 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), GEN_23, GEN_99)
    node GEN_168 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), GEN_23, GEN_100)
    node GEN_169 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), GEN_23, GEN_101)
    wire GEN_24 : UInt<8>
    node GEN_170 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_102)
    node GEN_171 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_103)
    node GEN_172 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_104)
    node GEN_173 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_105)
    node GEN_174 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_106)
    node GEN_175 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_107)
    node GEN_176 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_108)
    node GEN_177 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_109)
    node GEN_178 = mux(T_3214, GEN_162, GEN_94)
    node GEN_179 = mux(T_3214, GEN_163, GEN_95)
    node GEN_180 = mux(T_3214, GEN_164, GEN_96)
    node GEN_181 = mux(T_3214, GEN_165, GEN_97)
    node GEN_182 = mux(T_3214, GEN_166, GEN_98)
    node GEN_183 = mux(T_3214, GEN_167, GEN_99)
    node GEN_184 = mux(T_3214, GEN_168, GEN_100)
    node GEN_185 = mux(T_3214, GEN_169, GEN_101)
    node GEN_186 = mux(T_3214, GEN_170, GEN_102)
    node GEN_187 = mux(T_3214, GEN_171, GEN_103)
    node GEN_188 = mux(T_3214, GEN_172, GEN_104)
    node GEN_189 = mux(T_3214, GEN_173, GEN_105)
    node GEN_190 = mux(T_3214, GEN_174, GEN_106)
    node GEN_191 = mux(T_3214, GEN_175, GEN_107)
    node GEN_192 = mux(T_3214, GEN_176, GEN_108)
    node GEN_193 = mux(T_3214, GEN_177, GEN_109)
    node T_3268 = or(scoreboard_3, ognt_counter_pending)
    node T_3269 = or(T_3268, vol_ognt_counter_pending)
    node T_3281 = eq(T_2179, UInt<1>("h0"))
    node T_3283 = and(T_2175, T_3281)
    wire T_3291_0 : UInt<3>
    node GEN_280 = pad(UInt<3>("h5"), 4)
    node T_3293 = eq(io_inner_grant_bits_g_type, GEN_280)
    node T_3295 = mux(io_inner_grant_bits_is_builtin_type, T_3293, T_2178)
    node T_3297 = and(T_3283, T_3295)
    reg T_3299 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3301 = eq(T_3299, UInt<3>("h7"))
    node T_3303 = add(T_3299, UInt<3>("h1"))
    node T_3304 = tail(T_3303, 1)
    node GEN_194 = mux(T_3297, T_3304, T_3299)
    node T_3305 = and(T_3297, T_3301)
    node T_3306 = mux(T_3295, T_3299, UInt<3>("h0"))
    node T_3307 = mux(T_3295, T_3305, T_3283)
    node T_3308 = and(io_inner_finish_ready, io_inner_finish_valid)
    reg T_3314 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_3324 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_3326 = eq(T_3308, UInt<1>("h0"))
    node T_3327 = and(T_3307, T_3326)
    node T_3329 = add(T_3324, UInt<1>("h1"))
    node T_3330 = tail(T_3329, 1)
    node GEN_196 = mux(T_3327, T_3330, T_3324)
    node T_3332 = eq(T_3307, UInt<1>("h0"))
    node T_3333 = and(T_3308, T_3332)
    node T_3335 = sub(T_3324, UInt<1>("h1"))
    node T_3336 = tail(T_3335, 1)
    node GEN_197 = mux(T_3333, T_3336, GEN_196)
    node T_3338 = gt(T_3324, UInt<1>("h0"))
    node T_3343 = eq(T_1798, UInt<1>("h0"))
    node T_3360 = or(pending_ignt_data, T_2647)
    wire T_3370_0 : UInt<3>
    wire T_3370_1 : UInt<3>
    node GEN_281 = pad(UInt<3>("h5"), 4)
    node T_3372 = eq(io_outer_grant_bits_g_type, GEN_281)
    node GEN_282 = pad(UInt<3>("h4"), 4)
    node T_3373 = eq(io_outer_grant_bits_g_type, GEN_282)
    node T_3374 = or(T_3372, T_3373)
    node T_3376 = mux(io_outer_grant_bits_is_builtin_type, T_3374, T_2723)
    node T_3377 = and(T_2241, T_3376)
    node T_3382 = mux(T_3377, UInt<8>("hff"), UInt<8>("h0"))
    node T_3384 = dshlw(UInt<8>("h1"), io_outer_grant_bits_addr_beat)
    node T_3385 = and(T_3382, T_3384)
    node T_3386 = or(T_3360, T_3385)
    node GEN_198 = mux(T_3343, T_3386, GEN_38)
    node T_3389 = eq(state, UInt<4>("h1"))
    node T_3390 = or(T_1611, T_3389)
    node T_3393 = or(T_3390, scoreboard_0)
    node T_3395 = eq(T_3393, UInt<1>("h0"))
    node T_3412 = eq(UInt<3>("h6"), ignt_q.io_deq_bits_a_type)
    node T_3413 = mux(T_3412, UInt<3>("h1"), UInt<3>("h3"))
    node T_3414 = eq(UInt<3>("h5"), ignt_q.io_deq_bits_a_type)
    node T_3415 = mux(T_3414, UInt<3>("h1"), T_3413)
    node T_3416 = eq(UInt<3>("h4"), ignt_q.io_deq_bits_a_type)
    node T_3417 = mux(T_3416, UInt<3>("h4"), T_3415)
    node T_3418 = eq(UInt<3>("h3"), ignt_q.io_deq_bits_a_type)
    node T_3419 = mux(T_3418, UInt<3>("h3"), T_3417)
    node T_3420 = eq(UInt<3>("h2"), ignt_q.io_deq_bits_a_type)
    node T_3421 = mux(T_3420, UInt<3>("h3"), T_3419)
    node T_3422 = eq(UInt<3>("h1"), ignt_q.io_deq_bits_a_type)
    node T_3423 = mux(T_3422, UInt<3>("h5"), T_3421)
    node T_3424 = eq(UInt<3>("h0"), ignt_q.io_deq_bits_a_type)
    node T_3425 = mux(T_3424, UInt<3>("h4"), T_3423)
    node T_3426 = mux(ignt_q.io_deq_bits_is_builtin_type, T_3425, UInt<3>("h0"))
    wire T_3455_addr_beat : UInt<3>
    wire T_3455_client_xact_id : UInt<1>
    wire T_3455_manager_xact_id : UInt<4>
    wire T_3455_is_builtin_type : UInt<1>
    wire T_3455_g_type : UInt<4>
    wire T_3455_data : UInt<64>
    wire T_3455_client_id : UInt<1>
    wire GEN_25 : UInt<64>
    node GEN_199 = mux(eq(UInt<3>("h1"), ignt_data_idx), data_buffer_1, data_buffer_0)
    node GEN_200 = mux(eq(UInt<3>("h2"), ignt_data_idx), data_buffer_2, GEN_199)
    node GEN_201 = mux(eq(UInt<3>("h3"), ignt_data_idx), data_buffer_3, GEN_200)
    node GEN_202 = mux(eq(UInt<3>("h4"), ignt_data_idx), data_buffer_4, GEN_201)
    node GEN_203 = mux(eq(UInt<3>("h5"), ignt_data_idx), data_buffer_5, GEN_202)
    node GEN_204 = mux(eq(UInt<3>("h6"), ignt_data_idx), data_buffer_6, GEN_203)
    node GEN_205 = mux(eq(UInt<3>("h7"), ignt_data_idx), data_buffer_7, GEN_204)
    wire T_3491_0 : UInt<3>
    node GEN_283 = pad(UInt<3>("h5"), 4)
    node T_3493 = eq(io_inner_grant_bits_g_type, GEN_283)
    node T_3495 = mux(io_inner_grant_bits_is_builtin_type, T_3493, T_2178)
    node T_3497 = and(T_2175, T_3495)
    reg T_3499 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3501 = eq(T_3499, UInt<3>("h7"))
    node T_3503 = add(T_3499, UInt<3>("h1"))
    node T_3504 = tail(T_3503, 1)
    node GEN_206 = mux(T_3497, T_3504, T_3499)
    node T_3505 = and(T_3497, T_3501)
    node T_3506 = mux(T_3495, T_3499, ignt_q.io_deq_bits_addr_beat)
    node T_3507 = mux(T_3495, T_3505, T_2175)
    node T_3512 = and(T_2337, scoreboard_6)
    node T_3514 = eq(T_3269, UInt<1>("h0"))
    wire T_3522_0 : UInt<3>
    wire T_3522_1 : UInt<3>
    node GEN_284 = pad(UInt<3>("h5"), 4)
    node T_3524 = eq(io_inner_grant_bits_g_type, GEN_284)
    node GEN_285 = pad(UInt<3>("h4"), 4)
    node T_3525 = eq(io_inner_grant_bits_g_type, GEN_285)
    node T_3526 = or(T_3524, T_3525)
    node T_3528 = mux(io_inner_grant_bits_is_builtin_type, T_3526, T_2178)
    node T_3529 = dshr(pending_ignt_data, ignt_data_idx)
    node T_3530 = bits(T_3529, 0, 0)
    node T_3532 = mux(T_3528, T_3530, T_3395)
    node T_3533 = and(T_3514, T_3532)
    node GEN_207 = mux(T_3512, T_3533, T_2347)
    node GEN_208 = mux(T_2250, ignt_data_done, UInt<1>("h0"))
    node GEN_209 = mux(T_2250, ignt_data_idx, UInt<3>("h0"))
    node GEN_210 = mux(T_2250, T_3455_client_xact_id, T_2440_client_xact_id)
    node GEN_211 = mux(T_2250, UInt<4>("h3"), UInt<4>("h0"))
    node GEN_212 = mux(T_2250, T_3455_is_builtin_type, UInt<1>("h1"))
    node GEN_213 = mux(T_2250, T_3455_g_type, UInt<4>("h0"))
    node GEN_214 = mux(T_2250, T_3455_data, UInt<64>("h0"))
    node GEN_215 = mux(T_2250, T_3455_client_id, T_2440_client_id)
    node GEN_216 = mux(T_2250, GEN_207, T_2347)
    node T_3540 = not(io_incoherent_0)
    node GEN_217 = mux(T_1798, pad(T_3540, 2), T_2079)
    node T_3551 = and(T_1767, io_inner_acquire_valid)
    node T_3552 = or(T_1798, T_3551)
    wire T_3562_0 : UInt<3>
    wire T_3562_1 : UInt<3>
    wire T_3562_2 : UInt<3>
    node T_3564 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_3565 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_3566 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3567 = or(T_3564, T_3565)
    node T_3568 = or(T_3567, T_3566)
    node T_3569 = and(io_inner_acquire_bits_is_builtin_type, T_3568)
    node T_3570 = and(T_1612, T_3569)
    node T_3571 = and(T_3570, T_3552)
    node T_3573 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3574 = and(io_inner_acquire_bits_is_builtin_type, T_3573)
    node T_3603 = or(T_1921, T_1918)
    node T_3604 = bits(io_inner_acquire_bits_union, 8, 1)
    node T_3606 = mux(T_3603, T_3604, UInt<8>("h0"))
    node T_3607 = mux(T_3574, UInt<8>("hff"), T_3606)
    node T_3608 = bits(T_3607, 0, 0)
    node T_3609 = bits(T_3607, 1, 1)
    node T_3610 = bits(T_3607, 2, 2)
    node T_3611 = bits(T_3607, 3, 3)
    node T_3612 = bits(T_3607, 4, 4)
    node T_3613 = bits(T_3607, 5, 5)
    node T_3614 = bits(T_3607, 6, 6)
    node T_3615 = bits(T_3607, 7, 7)
    node T_3619 = mux(T_3608, UInt<8>("hff"), UInt<8>("h0"))
    node T_3623 = mux(T_3609, UInt<8>("hff"), UInt<8>("h0"))
    node T_3627 = mux(T_3610, UInt<8>("hff"), UInt<8>("h0"))
    node T_3631 = mux(T_3611, UInt<8>("hff"), UInt<8>("h0"))
    node T_3635 = mux(T_3612, UInt<8>("hff"), UInt<8>("h0"))
    node T_3639 = mux(T_3613, UInt<8>("hff"), UInt<8>("h0"))
    node T_3643 = mux(T_3614, UInt<8>("hff"), UInt<8>("h0"))
    node T_3647 = mux(T_3615, UInt<8>("hff"), UInt<8>("h0"))
    node T_3648 = cat(T_3623, T_3619)
    node T_3649 = cat(T_3631, T_3627)
    node T_3650 = cat(T_3649, T_3648)
    node T_3651 = cat(T_3639, T_3635)
    node T_3652 = cat(T_3647, T_3643)
    node T_3653 = cat(T_3652, T_3651)
    node T_3654 = cat(T_3653, T_3650)
    node T_3655 = not(T_3654)
    wire GEN_26 : UInt<64>
    node GEN_218 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_219 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), data_buffer_2, GEN_218)
    node GEN_220 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), data_buffer_3, GEN_219)
    node GEN_221 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), data_buffer_4, GEN_220)
    node GEN_222 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), data_buffer_5, GEN_221)
    node GEN_223 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), data_buffer_6, GEN_222)
    node GEN_224 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), data_buffer_7, GEN_223)
    node T_3656 = and(T_3655, GEN_26)
    node T_3657 = and(T_3654, io_inner_acquire_bits_data)
    node T_3658 = or(T_3656, T_3657)
    wire GEN_27 : UInt<64>
    node GEN_225 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_178)
    node GEN_226 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_179)
    node GEN_227 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_180)
    node GEN_228 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_181)
    node GEN_229 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_182)
    node GEN_230 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_183)
    node GEN_231 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_184)
    node GEN_232 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_185)
    wire GEN_28 : UInt<8>
    node GEN_233 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_234 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), wmask_buffer_2, GEN_233)
    node GEN_235 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), wmask_buffer_3, GEN_234)
    node GEN_236 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), wmask_buffer_4, GEN_235)
    node GEN_237 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), wmask_buffer_5, GEN_236)
    node GEN_238 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), wmask_buffer_6, GEN_237)
    node GEN_239 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), wmask_buffer_7, GEN_238)
    node T_3695 = or(T_3607, GEN_28)
    wire GEN_29 : UInt<8>
    node GEN_240 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_186)
    node GEN_241 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_187)
    node GEN_242 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_188)
    node GEN_243 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_189)
    node GEN_244 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_190)
    node GEN_245 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_191)
    node GEN_246 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_192)
    node GEN_247 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_193)
    node GEN_248 = mux(T_3571, GEN_225, GEN_178)
    node GEN_249 = mux(T_3571, GEN_226, GEN_179)
    node GEN_250 = mux(T_3571, GEN_227, GEN_180)
    node GEN_251 = mux(T_3571, GEN_228, GEN_181)
    node GEN_252 = mux(T_3571, GEN_229, GEN_182)
    node GEN_253 = mux(T_3571, GEN_230, GEN_183)
    node GEN_254 = mux(T_3571, GEN_231, GEN_184)
    node GEN_255 = mux(T_3571, GEN_232, GEN_185)
    node GEN_256 = mux(T_3571, GEN_240, GEN_186)
    node GEN_257 = mux(T_3571, GEN_241, GEN_187)
    node GEN_258 = mux(T_3571, GEN_242, GEN_188)
    node GEN_259 = mux(T_3571, GEN_243, GEN_189)
    node GEN_260 = mux(T_3571, GEN_244, GEN_190)
    node GEN_261 = mux(T_3571, GEN_245, GEN_191)
    node GEN_262 = mux(T_3571, GEN_246, GEN_192)
    node GEN_263 = mux(T_3571, GEN_247, GEN_193)
    node T_3698 = or(scoreboard_0, T_2343)
    node T_3699 = or(T_3698, vol_ignt_counter_pending)
    node T_3700 = or(T_3699, scoreboard_3)
    node T_3701 = or(T_3700, vol_ognt_counter_pending)
    node T_3702 = or(T_3701, ognt_counter_pending)
    node T_3703 = or(T_3702, scoreboard_6)
    node T_3704 = or(T_3703, ifin_counter_pending)
    node T_3706 = eq(T_3704, UInt<1>("h0"))
    node T_3708 = and(T_2337, all_pending_done)
    node GEN_264 = mux(T_3708, UInt<4>("h0"), GEN_146)
    node GEN_265 = mux(T_3708, UInt<8>("h0"), GEN_256)
    node GEN_266 = mux(T_3708, UInt<8>("h0"), GEN_257)
    node GEN_267 = mux(T_3708, UInt<8>("h0"), GEN_258)
    node GEN_268 = mux(T_3708, UInt<8>("h0"), GEN_259)
    node GEN_269 = mux(T_3708, UInt<8>("h0"), GEN_260)
    node GEN_270 = mux(T_3708, UInt<8>("h0"), GEN_261)
    node GEN_271 = mux(T_3708, UInt<8>("h0"), GEN_262)
    node GEN_272 = mux(T_3708, UInt<8>("h0"), GEN_263)
    io_inner_acquire_ready <= T_1981
    io_inner_grant_valid <= GEN_216
    io_inner_grant_bits_addr_beat <= GEN_209
    io_inner_grant_bits_client_xact_id <= GEN_210
    io_inner_grant_bits_manager_xact_id <= GEN_211
    io_inner_grant_bits_is_builtin_type <= GEN_212
    io_inner_grant_bits_g_type <= GEN_213
    io_inner_grant_bits_data <= GEN_214
    io_inner_grant_bits_client_id <= GEN_215
    io_inner_finish_ready <= T_2337
    io_inner_probe_valid <= T_2083
    io_inner_probe_bits_addr_block <= T_2030_addr_block
    io_inner_probe_bits_p_type <= T_2030_p_type
    io_inner_probe_bits_client_id <= UInt<1>("h0")
    io_inner_release_ready <= T_2274
    io_outer_acquire_valid <= T_2968
    io_outer_acquire_bits_addr_block <= T_3168_addr_block
    io_outer_acquire_bits_client_xact_id <= T_3168_client_xact_id
    io_outer_acquire_bits_addr_beat <= T_3168_addr_beat
    io_outer_acquire_bits_is_builtin_type <= T_3168_is_builtin_type
    io_outer_acquire_bits_a_type <= T_3168_a_type
    io_outer_acquire_bits_union <= T_3168_union
    io_outer_acquire_bits_data <= T_3168_data
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= T_2777
    io_outer_release_bits_addr_beat <= T_2828_addr_beat
    io_outer_release_bits_addr_block <= T_2828_addr_block
    io_outer_release_bits_client_xact_id <= UInt<4>("h0")
    io_outer_release_bits_voluntary <= UInt<1>("h1")
    io_outer_release_bits_r_type <= T_2828_r_type
    io_outer_release_bits_data <= T_2828_data
    io_outer_grant_ready <= GEN_147
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= UInt<1>("h0")
    io_outer_finish_bits_manager_id <= UInt<1>("h1")
    io_alloc_iacq_matches <= T_1749
    io_alloc_iacq_can <= T_1611
    io_alloc_irel_matches <= T_1752
    io_alloc_irel_can <= UInt<1>("h0")
    io_alloc_oprb_matches <= T_1755
    io_alloc_oprb_can <= UInt<1>("h0")
    io_alloc_idle <= T_1611
    io_alloc_addr_block <= xact_addr_block
    all_pending_done <= T_3706
    state <= GEN_264
    xact_addr_block <= GEN_49
    xact_allocate <= GEN_32
    xact_amo_shift_bytes <= GEN_33
    xact_op_code <= GEN_34
    xact_addr_byte <= GEN_35
    xact_op_size <= GEN_36
    xact_addr_beat <= xact_iacq_addr_beat
    xact_iacq_client_xact_id <= T_1823_client_xact_id
    xact_iacq_addr_beat <= T_1823_addr_beat
    xact_iacq_client_id <= T_1823_client_id
    xact_iacq_is_builtin_type <= T_1823_is_builtin_type
    xact_iacq_a_type <= T_1823_a_type
    xact_vol_ir_r_type <= GEN_60
    xact_vol_ir_src <= GEN_61
    xact_vol_ir_client_xact_id <= GEN_62
    pending_irel_data <= GEN_63
    vol_ignt_counter_pending <= T_2221
    vol_ignt_counter_up_idx <= T_2173
    vol_ignt_counter_up_done <= T_2174
    vol_ignt_counter_down_idx <= T_2204
    vol_ignt_counter_down_done <= T_2205
    scoreboard_6 <= T_1850
    ignt_data_idx <= T_3506
    ignt_data_done <= T_3507
    ifin_counter_pending <= T_3338
    ifin_counter_up_idx <= T_3306
    ifin_counter_up_done <= T_3307
    ifin_counter_down_done <= T_3308
    pending_put_data <= GEN_37
    pending_ignt_data <= GEN_198
    ognt_counter_pending <= T_2932
    ognt_counter_up_idx <= T_2884
    ognt_counter_up_done <= T_2885
    ognt_counter_down_idx <= T_2915
    ognt_counter_down_done <= T_2916
    pending_iprbs <= bits(GEN_217, 0, 0)
    pending_orel_send <= GEN_115
    pending_orel_data <= GEN_110
    vol_ognt_counter_pending <= T_2765
    vol_ognt_counter_up_idx <= T_2719
    vol_ognt_counter_up_done <= T_2720
    vol_ognt_counter_down_idx <= T_2748
    vol_ognt_counter_down_done <= T_2749
    sending_orel <= GEN_114
    data_buffer_0 <= GEN_248
    data_buffer_1 <= GEN_249
    data_buffer_2 <= GEN_250
    data_buffer_3 <= GEN_251
    data_buffer_4 <= GEN_252
    data_buffer_5 <= GEN_253
    data_buffer_6 <= GEN_254
    data_buffer_7 <= GEN_255
    wmask_buffer_0 <= GEN_265
    wmask_buffer_1 <= GEN_266
    wmask_buffer_2 <= GEN_267
    wmask_buffer_3 <= GEN_268
    wmask_buffer_4 <= GEN_269
    wmask_buffer_5 <= GEN_270
    wmask_buffer_6 <= GEN_271
    wmask_buffer_7 <= GEN_272
    data_valid_0 <= T_1716
    data_valid_1 <= T_1719
    data_valid_2 <= T_1722
    data_valid_3 <= T_1725
    data_valid_4 <= T_1728
    data_valid_5 <= T_1731
    data_valid_6 <= T_1734
    data_valid_7 <= T_1737
    ignt_q.io_enq_valid <= T_1822
    ignt_q.io_enq_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    ignt_q.io_enq_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    ignt_q.io_enq_bits_client_id <= io_inner_acquire_bits_client_id
    ignt_q.io_enq_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    ignt_q.io_enq_bits_a_type <= io_inner_acquire_bits_a_type
    ignt_q.io_deq_ready <= GEN_208
    T_2030_addr_block <= xact_addr_block
    T_2030_p_type <= T_2005
    T_2065_pending <= T_2139
    T_2065_up_done <= T_2073
    T_2065_down_idx <= T_2122
    T_2065_down_done <= T_2123
    T_2091 <= T_2091
    T_2115 <= GEN_41
    T_2125 <= GEN_43
    T_2166 <= GEN_45
    T_2197 <= GEN_46
    T_2207 <= GEN_48
    T_2379_addr_block <= xact_addr_block
    T_2379_client_xact_id <= xact_vol_ir_client_xact_id
    T_2379_r_type <= xact_vol_ir_r_type
    T_2379_client_id <= xact_vol_ir_src
    T_2440_client_xact_id <= T_2379_client_xact_id
    T_2440_client_id <= T_2379_client_id
    GEN_0 <= GEN_70
    GEN_1 <= GEN_70
    GEN_2 <= GEN_70
    GEN_3 <= GEN_70
    GEN_4 <= GEN_70
    GEN_5 <= GEN_70
    GEN_6 <= GEN_70
    GEN_7 <= GEN_70
    GEN_8 <= GEN_77
    GEN_9 <= T_2571
    T_2712 <= GEN_116
    T_2741 <= GEN_117
    T_2751 <= GEN_119
    T_2828_addr_beat <= vol_ognt_counter_up_idx
    T_2828_addr_block <= xact_addr_block
    T_2828_r_type <= T_2792
    T_2828_data <= GEN_11
    GEN_11 <= GEN_126
    T_2877 <= GEN_128
    T_2908 <= GEN_129
    T_2918 <= GEN_131
    T_3015_addr_block <= xact_addr_block
    T_3015_a_type <= pad(T_2981, 3)
    T_3015_union <= pad(T_2984, 11)
    GEN_12 <= GEN_138
    T_3140_addr_block <= xact_addr_block
    T_3140_addr_beat <= ognt_counter_up_idx
    T_3140_a_type <= xact_iacq_a_type
    T_3140_union <= T_3111
    T_3140_data <= GEN_13
    GEN_13 <= GEN_145
    GEN_14 <= GEN_154
    GEN_15 <= GEN_154
    GEN_16 <= GEN_154
    GEN_17 <= GEN_154
    GEN_18 <= GEN_154
    GEN_19 <= GEN_154
    GEN_20 <= GEN_154
    GEN_21 <= GEN_154
    GEN_22 <= GEN_161
    GEN_23 <= T_3265
    T_3299 <= GEN_194
    T_3314 <= T_3314
    T_3324 <= GEN_197
    T_3455_addr_beat <= ignt_q.io_deq_bits_addr_beat
    T_3455_client_xact_id <= ignt_q.io_deq_bits_client_xact_id
    T_3455_is_builtin_type <= ignt_q.io_deq_bits_is_builtin_type
    T_3455_g_type <= pad(T_3426, 4)
    T_3455_data <= GEN_25
    T_3455_client_id <= ignt_q.io_deq_bits_client_id
    GEN_25 <= GEN_205
    T_3499 <= GEN_206
    GEN_26 <= GEN_224
    GEN_27 <= T_3658
    GEN_28 <= GEN_239
    GEN_29 <= T_3695
    printf(clk, T_1652, "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n")
    stop(clk, T_1652, 1)
    printf(clk, T_1666, "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n")
    stop(clk, T_1666, 1)
    printf(clk, T_1677, "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n")
    stop(clk, T_1677, 1)

  module BufferedBroadcastAcquireTracker_3 :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
    output io_alloc_iacq_matches : UInt<1>
    output io_alloc_iacq_can : UInt<1>
    input io_alloc_iacq_should : UInt<1>
    output io_alloc_irel_matches : UInt<1>
    output io_alloc_irel_can : UInt<1>
    input io_alloc_irel_should : UInt<1>
    output io_alloc_oprb_matches : UInt<1>
    output io_alloc_oprb_can : UInt<1>
    input io_alloc_oprb_should : UInt<1>
    output io_alloc_idle : UInt<1>
    output io_alloc_addr_block : UInt<26>
  
    wire all_pending_done : UInt<1>
    reg state : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg xact_addr_block : UInt<26>, clk with :
      reset => (reset, UInt<26>("h0"))
    reg xact_allocate : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_allocate)
    reg xact_amo_shift_bytes : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_amo_shift_bytes)
    reg xact_op_code : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_op_code)
    reg xact_addr_byte : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_addr_byte)
    reg xact_op_size : UInt<2>, clk with :
      reset => (UInt<1>("h0"), xact_op_size)
    wire xact_addr_beat : UInt<3>
    wire xact_iacq_client_xact_id : UInt<1>
    wire xact_iacq_addr_beat : UInt<3>
    wire xact_iacq_client_id : UInt<1>
    wire xact_iacq_is_builtin_type : UInt<1>
    wire xact_iacq_a_type : UInt<3>
    reg xact_vol_ir_r_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_r_type)
    reg xact_vol_ir_src : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_src)
    reg xact_vol_ir_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_client_xact_id)
    reg pending_irel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ignt_counter_pending : UInt<1>
    wire vol_ignt_counter_up_idx : UInt<3>
    wire vol_ignt_counter_up_done : UInt<1>
    wire vol_ignt_counter_down_idx : UInt<3>
    wire vol_ignt_counter_down_done : UInt<1>
    wire scoreboard_6 : UInt<1>
    wire ignt_data_idx : UInt<3>
    wire ignt_data_done : UInt<1>
    wire ifin_counter_pending : UInt<1>
    wire ifin_counter_up_idx : UInt<3>
    wire ifin_counter_up_done : UInt<1>
    wire ifin_counter_down_idx : UInt<3>
    wire ifin_counter_down_done : UInt<1>
    reg pending_put_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg pending_ignt_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire ognt_counter_pending : UInt<1>
    wire ognt_counter_up_idx : UInt<3>
    wire ognt_counter_up_done : UInt<1>
    wire ognt_counter_down_idx : UInt<3>
    wire ognt_counter_down_done : UInt<1>
    reg pending_iprbs : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pending_iprbs)
    reg pending_orel_send : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_orel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ognt_counter_pending : UInt<1>
    wire vol_ognt_counter_up_idx : UInt<3>
    wire vol_ognt_counter_up_done : UInt<1>
    wire vol_ognt_counter_down_idx : UInt<3>
    wire vol_ognt_counter_down_done : UInt<1>
    node T_170 = neq(pending_orel_data, UInt<8>("h0"))
    node T_171 = or(pending_orel_send, T_170)
    node scoreboard_3 = or(T_171, vol_ognt_counter_pending)
    reg sending_orel : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_195_sharers : UInt<1>
    wire T_241_state : UInt<2>
    wire coh_inner_sharers : UInt<1>
    wire coh_outer_state : UInt<2>
    node T_1611 = eq(state, UInt<4>("h0"))
    node T_1612 = and(io_inner_acquire_ready, io_inner_acquire_valid)
    node T_1613 = and(T_1611, T_1612)
    node T_1614 = and(T_1613, io_alloc_iacq_should)
    wire T_1623_0 : UInt<3>
    node T_1625 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1626 = and(io_inner_acquire_bits_is_builtin_type, T_1625)
    node T_1627 = and(T_1614, T_1626)
    wire T_1636_0 : UInt<3>
    node T_1638 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1639 = and(io_inner_acquire_bits_is_builtin_type, T_1638)
    node T_1641 = eq(T_1639, UInt<1>("h0"))
    node T_1643 = eq(io_inner_acquire_bits_addr_beat, UInt<3>("h0"))
    node T_1644 = or(T_1641, T_1643)
    node T_1646 = eq(T_1644, UInt<1>("h0"))
    node T_1647 = and(T_1627, T_1646)
    node T_1649 = eq(T_1647, UInt<1>("h0"))
    node T_1650 = or(T_1649, reset)
    node T_1652 = eq(T_1650, UInt<1>("h0"))
    node T_1653 = neq(state, UInt<4>("h0"))
    node T_1654 = and(T_1653, scoreboard_6)
    node T_1656 = eq(xact_iacq_a_type, UInt<3>("h5"))
    node T_1658 = eq(xact_iacq_a_type, UInt<3>("h6"))
    node T_1659 = or(T_1656, T_1658)
    node T_1660 = and(xact_iacq_is_builtin_type, T_1659)
    node T_1661 = and(T_1654, T_1660)
    node T_1663 = eq(T_1661, UInt<1>("h0"))
    node T_1664 = or(T_1663, reset)
    node T_1666 = eq(T_1664, UInt<1>("h0"))
    node T_1670 = eq(xact_iacq_a_type, UInt<3>("h4"))
    node T_1671 = and(xact_iacq_is_builtin_type, T_1670)
    node T_1672 = and(T_1654, T_1671)
    node T_1674 = eq(T_1672, UInt<1>("h0"))
    node T_1675 = or(T_1674, reset)
    node T_1677 = eq(T_1675, UInt<1>("h0"))
    wire T_1691_0 : UInt<64>
    wire T_1691_1 : UInt<64>
    wire T_1691_2 : UInt<64>
    wire T_1691_3 : UInt<64>
    wire T_1691_4 : UInt<64>
    wire T_1691_5 : UInt<64>
    wire T_1691_6 : UInt<64>
    wire T_1691_7 : UInt<64>
    reg data_buffer_0 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_1 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_2 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_3 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_4 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_5 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_6 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_7 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    wire T_1709_0 : UInt<8>
    wire T_1709_1 : UInt<8>
    wire T_1709_2 : UInt<8>
    wire T_1709_3 : UInt<8>
    wire T_1709_4 : UInt<8>
    wire T_1709_5 : UInt<8>
    wire T_1709_6 : UInt<8>
    wire T_1709_7 : UInt<8>
    reg wmask_buffer_0 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_1 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_2 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_3 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_4 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_5 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_6 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_7 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    node T_1714 = not(wmask_buffer_0)
    node T_1716 = eq(T_1714, UInt<8>("h0"))
    node T_1717 = not(wmask_buffer_1)
    node T_1719 = eq(T_1717, UInt<8>("h0"))
    node T_1720 = not(wmask_buffer_2)
    node T_1722 = eq(T_1720, UInt<8>("h0"))
    node T_1723 = not(wmask_buffer_3)
    node T_1725 = eq(T_1723, UInt<8>("h0"))
    node T_1726 = not(wmask_buffer_4)
    node T_1728 = eq(T_1726, UInt<8>("h0"))
    node T_1729 = not(wmask_buffer_5)
    node T_1731 = eq(T_1729, UInt<8>("h0"))
    node T_1732 = not(wmask_buffer_6)
    node T_1734 = eq(T_1732, UInt<8>("h0"))
    node T_1735 = not(wmask_buffer_7)
    node T_1737 = eq(T_1735, UInt<8>("h0"))
    wire data_valid_0 : UInt<1>
    wire data_valid_1 : UInt<1>
    wire data_valid_2 : UInt<1>
    wire data_valid_3 : UInt<1>
    wire data_valid_4 : UInt<1>
    wire data_valid_5 : UInt<1>
    wire data_valid_6 : UInt<1>
    wire data_valid_7 : UInt<1>
    node T_1748 = eq(io_inner_acquire_bits_addr_block, xact_addr_block)
    node T_1749 = and(T_1653, T_1748)
    node T_1751 = eq(io_inner_release_bits_addr_block, xact_addr_block)
    node T_1752 = and(T_1653, T_1751)
    node T_1754 = eq(io_outer_probe_bits_addr_block, xact_addr_block)
    node T_1755 = and(T_1653, T_1754)
    node T_1764 = eq(xact_iacq_client_xact_id, io_inner_acquire_bits_client_xact_id)
    node T_1765 = eq(xact_iacq_client_id, io_inner_acquire_bits_client_id)
    node T_1766 = and(T_1764, T_1765)
    node T_1767 = and(T_1766, scoreboard_6)
    node T_1768 = eq(xact_iacq_addr_beat, io_inner_acquire_bits_addr_beat)
    node T_1769 = and(T_1767, T_1768)
    inst ignt_q of Queue_8
    node T_1797 = and(T_1611, io_alloc_iacq_should)
    node T_1798 = and(T_1797, io_inner_acquire_valid)
    node T_1800 = eq(T_1769, UInt<1>("h0"))
    node T_1801 = and(T_1800, scoreboard_6)
    node T_1803 = and(T_1801, T_1612)
    wire T_1812_0 : UInt<3>
    node T_1814 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1815 = and(io_inner_acquire_bits_is_builtin_type, T_1814)
    node T_1817 = eq(T_1815, UInt<1>("h0"))
    node T_1820 = or(T_1817, T_1643)
    node T_1821 = and(T_1803, T_1820)
    node T_1822 = or(T_1798, T_1821)
    node T_1823_client_xact_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_xact_id, ignt_q.io_enq_bits_client_xact_id)
    node T_1823_addr_beat = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_addr_beat, ignt_q.io_enq_bits_addr_beat)
    node T_1823_client_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_id, ignt_q.io_enq_bits_client_id)
    node T_1823_is_builtin_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_is_builtin_type, ignt_q.io_enq_bits_is_builtin_type)
    node T_1823_a_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_a_type, ignt_q.io_enq_bits_a_type)
    node T_1850 = gt(ignt_q.io_count, UInt<2>("h0"))
    node T_1852 = or(T_1653, io_alloc_iacq_should)
    wire T_1862_0 : UInt<3>
    wire T_1862_1 : UInt<3>
    wire T_1862_2 : UInt<3>
    node T_1864 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1865 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1866 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1867 = or(T_1864, T_1865)
    node T_1868 = or(T_1867, T_1866)
    node T_1869 = and(io_inner_acquire_bits_is_builtin_type, T_1868)
    node T_1870 = and(T_1612, T_1869)
    node T_1874 = mux(T_1870, UInt<8>("hff"), UInt<8>("h0"))
    node T_1875 = not(T_1874)
    node T_1877 = dshlw(UInt<8>("h1"), io_inner_acquire_bits_addr_beat)
    node T_1878 = not(T_1877)
    node T_1879 = or(T_1875, T_1878)
    node T_1880 = and(pending_put_data, T_1879)
    wire T_1890_0 : UInt<3>
    node T_1892 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1893 = and(io_inner_acquire_bits_is_builtin_type, T_1892)
    node T_1894 = and(T_1612, T_1893)
    node T_1897 = and(T_1894, T_1643)
    node T_1906 = mux(T_1897, UInt<8>("hfe"), UInt<8>("h0"))
    node T_1907 = or(T_1880, T_1906)
    node GEN_30 = mux(T_1852, T_1907, pending_put_data)
    node T_1915 = mul(UInt<4>("h8"), UInt<4>("h0"))
    node T_1917 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1918 = and(io_inner_acquire_bits_is_builtin_type, T_1917)
    node T_1920 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1921 = and(io_inner_acquire_bits_is_builtin_type, T_1920)
    node T_1922 = or(T_1918, T_1921)
    node T_1923 = bits(io_inner_acquire_bits_union, 5, 1)
    node T_1924 = mux(T_1922, UInt<5>("h1"), T_1923)
    node T_1925 = bits(io_inner_acquire_bits_union, 10, 8)
    node T_1926 = bits(io_inner_acquire_bits_union, 7, 6)
    wire T_1939_0 : UInt<3>
    wire T_1939_1 : UInt<3>
    wire T_1939_2 : UInt<3>
    node T_1941 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1942 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1943 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1944 = or(T_1941, T_1942)
    node T_1945 = or(T_1944, T_1943)
    node T_1946 = and(io_inner_acquire_bits_is_builtin_type, T_1945)
    node T_1947 = and(T_1612, T_1946)
    node T_1951 = mux(T_1947, UInt<8>("hff"), UInt<8>("h0"))
    node T_1952 = not(T_1951)
    node T_1956 = or(T_1952, T_1878)
    node T_1958 = mux(T_1921, T_1956, UInt<8>("h0"))
    node GEN_31 = mux(T_1798, io_inner_acquire_bits_addr_block, xact_addr_block)
    node GEN_32 = mux(T_1798, UInt<1>("h0"), xact_allocate)
    node GEN_33 = mux(T_1798, T_1915, xact_amo_shift_bytes)
    node GEN_34 = mux(T_1798, T_1924, xact_op_code)
    node GEN_35 = mux(T_1798, T_1925, xact_addr_byte)
    node GEN_36 = mux(T_1798, T_1926, xact_op_size)
    node GEN_37 = mux(T_1798, T_1958, GEN_30)
    node GEN_38 = mux(T_1798, UInt<8>("h0"), pending_ignt_data)
    node GEN_39 = mux(T_1798, UInt<4>("h5"), state)
    node scoreboard_0 = neq(pending_put_data, UInt<8>("h0"))
    wire T_1976_0 : UInt<3>
    node T_1978 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1979 = and(io_inner_acquire_bits_is_builtin_type, T_1978)
    node T_1980 = and(T_1767, T_1979)
    node T_1981 = or(T_1611, T_1980)
    node T_1982 = not(pending_ignt_data)
    node skip_outer_acquire = eq(T_1982, UInt<8>("h0"))
    node T_1991 = eq(UInt<3>("h4"), xact_iacq_a_type)
    node T_1992 = mux(T_1991, UInt<2>("h0"), UInt<2>("h2"))
    node T_1993 = eq(UInt<3>("h6"), xact_iacq_a_type)
    node T_1994 = mux(T_1993, UInt<2>("h0"), T_1992)
    node T_1995 = eq(UInt<3>("h5"), xact_iacq_a_type)
    node T_1996 = mux(T_1995, UInt<2>("h2"), T_1994)
    node T_1997 = eq(UInt<3>("h2"), xact_iacq_a_type)
    node T_1998 = mux(T_1997, UInt<2>("h0"), T_1996)
    node T_1999 = eq(UInt<3>("h0"), xact_iacq_a_type)
    node T_2000 = mux(T_1999, UInt<2>("h2"), T_1998)
    node T_2001 = eq(UInt<3>("h3"), xact_iacq_a_type)
    node T_2002 = mux(T_2001, UInt<2>("h0"), T_2000)
    node T_2003 = eq(UInt<3>("h1"), xact_iacq_a_type)
    node T_2004 = mux(T_2003, UInt<2>("h2"), T_2002)
    node T_2005 = mux(xact_iacq_is_builtin_type, T_2004, UInt<2>("h0"))
    wire T_2030_addr_block : UInt<26>
    wire T_2030_p_type : UInt<2>
    wire T_2030_client_id : UInt<1>
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h0"))
    node T_2056 = mux(T_2055, UInt<4>("h6"), UInt<4>("h7"))
    wire T_2065_pending : UInt<1>
    wire T_2065_up_idx : UInt<3>
    wire T_2065_up_done : UInt<1>
    wire T_2065_down_idx : UInt<3>
    wire T_2065_down_done : UInt<1>
    node T_2073 = and(io_inner_probe_ready, io_inner_probe_valid)
    node T_2074 = not(T_2073)
    node T_2076 = dshlw(UInt<2>("h1"), io_inner_probe_bits_client_id)
    node T_2077 = not(T_2076)
    node GEN_273 = pad(T_2074, 2)
    node T_2078 = or(GEN_273, T_2077)
    node GEN_274 = pad(pending_iprbs, 2)
    node T_2079 = and(GEN_274, T_2078)
    node T_2080 = eq(state, UInt<4>("h5"))
    node T_2083 = and(T_2080, pending_iprbs)
    reg T_2091 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2100 = and(io_inner_release_ready, io_inner_release_valid)
    node T_2103 = eq(io_inner_release_bits_voluntary, UInt<1>("h0"))
    node T_2104 = and(T_1653, T_2103)
    node T_2105 = and(T_2100, T_2104)
    node T_2107 = eq(io_inner_release_bits_r_type, UInt<3>("h0"))
    node T_2108 = eq(io_inner_release_bits_r_type, UInt<3>("h1"))
    node T_2109 = eq(io_inner_release_bits_r_type, UInt<3>("h2"))
    node T_2110 = or(T_2107, T_2108)
    node T_2111 = or(T_2110, T_2109)
    node T_2113 = and(T_2105, T_2111)
    reg T_2115 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2117 = eq(T_2115, UInt<3>("h7"))
    node T_2119 = add(T_2115, UInt<3>("h1"))
    node T_2120 = tail(T_2119, 1)
    node GEN_41 = mux(T_2113, T_2120, T_2115)
    node T_2121 = and(T_2113, T_2117)
    node T_2122 = mux(T_2111, T_2115, UInt<3>("h0"))
    node T_2123 = mux(T_2111, T_2121, T_2105)
    reg T_2125 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2127 = eq(T_2123, UInt<1>("h0"))
    node T_2128 = and(T_2073, T_2127)
    node T_2130 = add(T_2125, UInt<1>("h1"))
    node T_2131 = tail(T_2130, 1)
    node GEN_42 = mux(T_2128, T_2131, T_2125)
    node T_2133 = eq(T_2073, UInt<1>("h0"))
    node T_2134 = and(T_2123, T_2133)
    node T_2136 = sub(T_2125, UInt<1>("h1"))
    node T_2137 = tail(T_2136, 1)
    node GEN_43 = mux(T_2134, T_2137, GEN_42)
    node T_2139 = gt(T_2125, UInt<1>("h0"))
    node T_2143 = or(pending_iprbs, T_2065_pending)
    node T_2145 = eq(T_2143, UInt<1>("h0"))
    node T_2146 = and(T_2080, T_2145)
    node GEN_44 = mux(T_2146, T_2056, GEN_39)
    node T_2150 = mux(T_1611, io_alloc_irel_should, io_alloc_irel_matches)
    node T_2151 = and(T_2150, io_inner_release_bits_voluntary)
    node T_2156 = and(T_2100, T_2151)
    node T_2164 = and(T_2156, T_2111)
    reg T_2166 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2168 = eq(T_2166, UInt<3>("h7"))
    node T_2170 = add(T_2166, UInt<3>("h1"))
    node T_2171 = tail(T_2170, 1)
    node GEN_45 = mux(T_2164, T_2171, T_2166)
    node T_2172 = and(T_2164, T_2168)
    node T_2173 = mux(T_2111, T_2166, UInt<3>("h0"))
    node T_2174 = mux(T_2111, T_2172, T_2156)
    node T_2175 = and(io_inner_grant_ready, io_inner_grant_valid)
    node T_2178 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_2179 = and(io_inner_grant_bits_is_builtin_type, T_2178)
    node T_2180 = and(T_1653, T_2179)
    node T_2181 = and(T_2175, T_2180)
    wire T_2189_0 : UInt<3>
    node GEN_275 = pad(UInt<3>("h5"), 4)
    node T_2191 = eq(io_inner_grant_bits_g_type, GEN_275)
    node T_2193 = mux(io_inner_grant_bits_is_builtin_type, T_2191, T_2178)
    node T_2195 = and(T_2181, T_2193)
    reg T_2197 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2199 = eq(T_2197, UInt<3>("h7"))
    node T_2201 = add(T_2197, UInt<3>("h1"))
    node T_2202 = tail(T_2201, 1)
    node GEN_46 = mux(T_2195, T_2202, T_2197)
    node T_2203 = and(T_2195, T_2199)
    node T_2204 = mux(T_2193, T_2197, UInt<3>("h0"))
    node T_2205 = mux(T_2193, T_2203, T_2181)
    reg T_2207 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2209 = eq(T_2205, UInt<1>("h0"))
    node T_2210 = and(T_2174, T_2209)
    node T_2212 = add(T_2207, UInt<1>("h1"))
    node T_2213 = tail(T_2212, 1)
    node GEN_47 = mux(T_2210, T_2213, T_2207)
    node T_2215 = eq(T_2174, UInt<1>("h0"))
    node T_2216 = and(T_2205, T_2215)
    node T_2218 = sub(T_2207, UInt<1>("h1"))
    node T_2219 = tail(T_2218, 1)
    node GEN_48 = mux(T_2216, T_2219, GEN_47)
    node T_2221 = gt(T_2207, UInt<1>("h0"))
    node T_2223 = and(T_1611, io_alloc_irel_should)
    node T_2224 = and(T_2223, io_inner_release_valid)
    node GEN_49 = mux(T_2224, io_inner_release_bits_addr_block, GEN_31)
    node GEN_50 = mux(T_2224, UInt<8>("hff"), pending_irel_data)
    node GEN_51 = mux(T_2224, UInt<4>("h7"), GEN_44)
    node T_2231 = and(T_1751, io_inner_release_bits_voluntary)
    node T_2233 = eq(state, UInt<4>("h8"))
    node T_2234 = or(T_1611, T_2233)
    node T_2236 = eq(T_2234, UInt<1>("h0"))
    node T_2237 = and(T_2231, T_2236)
    node T_2239 = eq(all_pending_done, UInt<1>("h0"))
    node T_2240 = and(T_2237, T_2239)
    node T_2241 = and(io_outer_grant_ready, io_outer_grant_valid)
    node T_2243 = eq(T_2241, UInt<1>("h0"))
    node T_2244 = and(T_2240, T_2243)
    node T_2247 = eq(T_2175, UInt<1>("h0"))
    node T_2248 = and(T_2244, T_2247)
    node T_2250 = eq(vol_ignt_counter_pending, UInt<1>("h0"))
    node T_2251 = and(T_2248, T_2250)
    node T_2252 = dshr(pending_orel_data, io_inner_release_bits_addr_beat)
    node T_2253 = bits(T_2252, 0, 0)
    node T_2254 = and(sending_orel, T_2253)
    node T_2255 = and(io_outer_release_ready, io_outer_release_valid)
    node T_2256 = eq(io_inner_release_bits_addr_beat, io_outer_release_bits_addr_beat)
    node T_2257 = and(T_2255, T_2256)
    node T_2263 = or(T_2254, T_2257)
    node T_2264 = and(T_2111, T_2263)
    node T_2266 = eq(T_2264, UInt<1>("h0"))
    node T_2267 = and(T_2251, T_2266)
    node T_2271 = and(T_1751, T_2103)
    node T_2273 = and(T_2271, T_2080)
    node T_2274 = or(T_2267, T_2273)
    node T_2275 = and(T_2274, io_inner_release_valid)
    node T_2276 = or(T_2224, T_2275)
    node T_2277 = and(T_2276, io_inner_release_ready)
    node T_2286 = eq(T_2111, UInt<1>("h0"))
    node T_2288 = eq(io_inner_release_bits_addr_beat, UInt<3>("h0"))
    node T_2289 = or(T_2286, T_2288)
    node GEN_52 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_r_type, xact_vol_ir_r_type)
    node GEN_53 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_id, xact_vol_ir_src)
    node GEN_54 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_xact_id, xact_vol_ir_client_xact_id)
    node T_2303 = and(T_2100, T_2111)
    node T_2307 = mux(T_2303, UInt<8>("hff"), UInt<8>("h0"))
    node T_2308 = not(T_2307)
    node T_2310 = dshlw(UInt<8>("h1"), io_inner_release_bits_addr_beat)
    node T_2311 = not(T_2310)
    node T_2312 = or(T_2308, T_2311)
    node T_2314 = mux(T_2111, T_2312, UInt<8>("h0"))
    node GEN_55 = mux(T_2289, GEN_52, xact_vol_ir_r_type)
    node GEN_56 = mux(T_2289, GEN_53, xact_vol_ir_src)
    node GEN_57 = mux(T_2289, GEN_54, xact_vol_ir_client_xact_id)
    node GEN_58 = mux(T_2289, T_2314, GEN_50)
    node T_2316 = eq(T_2289, UInt<1>("h0"))
    node T_2333 = and(pending_irel_data, T_2312)
    node GEN_59 = mux(T_2316, T_2333, GEN_58)
    node GEN_60 = mux(T_2277, GEN_55, xact_vol_ir_r_type)
    node GEN_61 = mux(T_2277, GEN_56, xact_vol_ir_src)
    node GEN_62 = mux(T_2277, GEN_57, xact_vol_ir_client_xact_id)
    node GEN_63 = mux(T_2277, GEN_59, GEN_50)
    node T_2334 = eq(state, UInt<4>("h3"))
    node T_2335 = eq(state, UInt<4>("h4"))
    node T_2337 = eq(state, UInt<4>("h7"))
    node T_2338 = or(T_2334, T_2335)
    node T_2339 = or(T_2338, T_2080)
    node T_2340 = or(T_2339, T_2337)
    node T_2341 = and(T_2340, vol_ignt_counter_pending)
    node T_2343 = neq(pending_irel_data, UInt<8>("h0"))
    node T_2344 = or(T_2343, vol_ognt_counter_pending)
    node T_2346 = eq(T_2344, UInt<1>("h0"))
    node T_2347 = and(T_2341, T_2346)
    wire T_2379_addr_beat : UInt<3>
    wire T_2379_addr_block : UInt<26>
    wire T_2379_client_xact_id : UInt<1>
    wire T_2379_voluntary : UInt<1>
    wire T_2379_r_type : UInt<3>
    wire T_2379_data : UInt<64>
    wire T_2379_client_id : UInt<1>
    wire T_2440_addr_beat : UInt<3>
    wire T_2440_client_xact_id : UInt<1>
    wire T_2440_manager_xact_id : UInt<4>
    wire T_2440_is_builtin_type : UInt<1>
    wire T_2440_g_type : UInt<4>
    wire T_2440_data : UInt<64>
    wire T_2440_client_id : UInt<1>
    wire GEN_0 : UInt<8>
    node GEN_64 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_65 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), wmask_buffer_2, GEN_64)
    node GEN_66 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), wmask_buffer_3, GEN_65)
    node GEN_67 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), wmask_buffer_4, GEN_66)
    node GEN_68 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), wmask_buffer_5, GEN_67)
    node GEN_69 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), wmask_buffer_6, GEN_68)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), wmask_buffer_7, GEN_69)
    node T_2521 = bits(GEN_0, 0, 0)
    wire GEN_1 : UInt<8>
    node T_2522 = bits(GEN_1, 1, 1)
    wire GEN_2 : UInt<8>
    node T_2523 = bits(GEN_2, 2, 2)
    wire GEN_3 : UInt<8>
    node T_2524 = bits(GEN_3, 3, 3)
    wire GEN_4 : UInt<8>
    node T_2525 = bits(GEN_4, 4, 4)
    wire GEN_5 : UInt<8>
    node T_2526 = bits(GEN_5, 5, 5)
    wire GEN_6 : UInt<8>
    node T_2527 = bits(GEN_6, 6, 6)
    wire GEN_7 : UInt<8>
    node T_2528 = bits(GEN_7, 7, 7)
    node T_2532 = mux(T_2521, UInt<8>("hff"), UInt<8>("h0"))
    node T_2536 = mux(T_2522, UInt<8>("hff"), UInt<8>("h0"))
    node T_2540 = mux(T_2523, UInt<8>("hff"), UInt<8>("h0"))
    node T_2544 = mux(T_2524, UInt<8>("hff"), UInt<8>("h0"))
    node T_2548 = mux(T_2525, UInt<8>("hff"), UInt<8>("h0"))
    node T_2552 = mux(T_2526, UInt<8>("hff"), UInt<8>("h0"))
    node T_2556 = mux(T_2527, UInt<8>("hff"), UInt<8>("h0"))
    node T_2560 = mux(T_2528, UInt<8>("hff"), UInt<8>("h0"))
    node T_2561 = cat(T_2536, T_2532)
    node T_2562 = cat(T_2544, T_2540)
    node T_2563 = cat(T_2562, T_2561)
    node T_2564 = cat(T_2552, T_2548)
    node T_2565 = cat(T_2560, T_2556)
    node T_2566 = cat(T_2565, T_2564)
    node T_2567 = cat(T_2566, T_2563)
    node T_2568 = not(T_2567)
    node T_2569 = and(T_2568, io_inner_release_bits_data)
    wire GEN_8 : UInt<64>
    node GEN_71 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_72 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), data_buffer_2, GEN_71)
    node GEN_73 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), data_buffer_3, GEN_72)
    node GEN_74 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), data_buffer_4, GEN_73)
    node GEN_75 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), data_buffer_5, GEN_74)
    node GEN_76 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), data_buffer_6, GEN_75)
    node GEN_77 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), data_buffer_7, GEN_76)
    node T_2570 = and(T_2567, GEN_8)
    node T_2571 = or(T_2569, T_2570)
    wire GEN_9 : UInt<64>
    node GEN_78 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_0)
    node GEN_79 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_1)
    node GEN_80 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_2)
    node GEN_81 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_3)
    node GEN_82 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_4)
    node GEN_83 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_5)
    node GEN_84 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_6)
    node GEN_85 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_7)
    wire GEN_10 : UInt<8>
    node GEN_86 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_0)
    node GEN_87 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_1)
    node GEN_88 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_2)
    node GEN_89 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_3)
    node GEN_90 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_4)
    node GEN_91 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_5)
    node GEN_92 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_6)
    node GEN_93 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_7)
    node GEN_94 = mux(T_2303, GEN_78, data_buffer_0)
    node GEN_95 = mux(T_2303, GEN_79, data_buffer_1)
    node GEN_96 = mux(T_2303, GEN_80, data_buffer_2)
    node GEN_97 = mux(T_2303, GEN_81, data_buffer_3)
    node GEN_98 = mux(T_2303, GEN_82, data_buffer_4)
    node GEN_99 = mux(T_2303, GEN_83, data_buffer_5)
    node GEN_100 = mux(T_2303, GEN_84, data_buffer_6)
    node GEN_101 = mux(T_2303, GEN_85, data_buffer_7)
    node GEN_102 = mux(T_2303, GEN_86, wmask_buffer_0)
    node GEN_103 = mux(T_2303, GEN_87, wmask_buffer_1)
    node GEN_104 = mux(T_2303, GEN_88, wmask_buffer_2)
    node GEN_105 = mux(T_2303, GEN_89, wmask_buffer_3)
    node GEN_106 = mux(T_2303, GEN_90, wmask_buffer_4)
    node GEN_107 = mux(T_2303, GEN_91, wmask_buffer_5)
    node GEN_108 = mux(T_2303, GEN_92, wmask_buffer_6)
    node GEN_109 = mux(T_2303, GEN_93, wmask_buffer_7)
    wire T_2604_state : UInt<2>
    node T_2631 = or(T_1653, io_alloc_irel_should)
    node T_2647 = and(T_2307, T_2310)
    node T_2648 = or(pending_orel_data, T_2647)
    node T_2651 = eq(io_outer_release_bits_r_type, UInt<3>("h0"))
    node T_2652 = eq(io_outer_release_bits_r_type, UInt<3>("h1"))
    node T_2653 = eq(io_outer_release_bits_r_type, UInt<3>("h2"))
    node T_2654 = or(T_2651, T_2652)
    node T_2655 = or(T_2654, T_2653)
    node T_2656 = and(T_2255, T_2655)
    node T_2660 = mux(T_2656, UInt<8>("hff"), UInt<8>("h0"))
    node T_2661 = not(T_2660)
    node T_2663 = dshlw(UInt<8>("h1"), io_outer_release_bits_addr_beat)
    node T_2664 = not(T_2663)
    node T_2665 = or(T_2661, T_2664)
    node T_2666 = and(T_2648, T_2665)
    node GEN_110 = mux(T_2631, T_2666, pending_orel_data)
    node T_2677 = eq(T_2655, UInt<1>("h0"))
    node T_2679 = eq(io_outer_release_bits_addr_beat, UInt<3>("h0"))
    node T_2680 = or(T_2677, T_2679)
    node GEN_112 = mux(T_2680, UInt<1>("h1"), sending_orel)
    node T_2692 = eq(io_outer_release_bits_addr_beat, UInt<3>("h7"))
    node T_2693 = or(T_2677, T_2692)
    node GEN_113 = mux(T_2693, UInt<1>("h0"), GEN_112)
    node GEN_114 = mux(T_2255, GEN_113, sending_orel)
    node GEN_115 = mux(T_2255, UInt<1>("h0"), pending_orel_send)
    node T_2702 = and(T_2255, io_outer_release_bits_voluntary)
    node T_2710 = and(T_2702, T_2655)
    reg T_2712 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2714 = eq(T_2712, UInt<3>("h7"))
    node T_2716 = add(T_2712, UInt<3>("h1"))
    node T_2717 = tail(T_2716, 1)
    node GEN_116 = mux(T_2710, T_2717, T_2712)
    node T_2718 = and(T_2710, T_2714)
    node T_2719 = mux(T_2655, T_2712, UInt<3>("h0"))
    node T_2720 = mux(T_2655, T_2718, T_2702)
    node T_2723 = eq(io_outer_grant_bits_g_type, UInt<4>("h0"))
    node T_2724 = and(io_outer_grant_bits_is_builtin_type, T_2723)
    node T_2725 = and(T_2241, T_2724)
    wire T_2733_0 : UInt<3>
    node GEN_276 = pad(UInt<3>("h5"), 4)
    node T_2735 = eq(io_outer_grant_bits_g_type, GEN_276)
    node T_2737 = mux(io_outer_grant_bits_is_builtin_type, T_2735, T_2723)
    node T_2739 = and(T_2725, T_2737)
    reg T_2741 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2743 = eq(T_2741, UInt<3>("h7"))
    node T_2745 = add(T_2741, UInt<3>("h1"))
    node T_2746 = tail(T_2745, 1)
    node GEN_117 = mux(T_2739, T_2746, T_2741)
    node T_2747 = and(T_2739, T_2743)
    node T_2748 = mux(T_2737, T_2741, UInt<3>("h0"))
    node T_2749 = mux(T_2737, T_2747, T_2725)
    reg T_2751 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2753 = eq(T_2749, UInt<1>("h0"))
    node T_2754 = and(T_2720, T_2753)
    node T_2756 = add(T_2751, UInt<1>("h1"))
    node T_2757 = tail(T_2756, 1)
    node GEN_118 = mux(T_2754, T_2757, T_2751)
    node T_2759 = eq(T_2720, UInt<1>("h0"))
    node T_2760 = and(T_2749, T_2759)
    node T_2762 = sub(T_2751, UInt<1>("h1"))
    node T_2763 = tail(T_2762, 1)
    node GEN_119 = mux(T_2760, T_2763, GEN_118)
    node T_2765 = gt(T_2751, UInt<1>("h0"))
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter_up_idx)
    node T_2775 = bits(T_2774, 0, 0)
    node T_2776 = mux(T_2655, T_2775, pending_orel_send)
    node T_2777 = and(T_2337, T_2776)
    node T_2791 = eq(UInt<2>("h2"), UInt<2>("h2"))
    node T_2792 = mux(T_2791, UInt<3>("h0"), UInt<3>("h3"))
    wire T_2828_addr_beat : UInt<3>
    wire T_2828_addr_block : UInt<26>
    wire T_2828_client_xact_id : UInt<4>
    wire T_2828_voluntary : UInt<1>
    wire T_2828_r_type : UInt<3>
    wire T_2828_data : UInt<64>
    wire GEN_11 : UInt<64>
    node GEN_120 = mux(eq(UInt<3>("h1"), vol_ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_121 = mux(eq(UInt<3>("h2"), vol_ognt_counter_up_idx), data_buffer_2, GEN_120)
    node GEN_122 = mux(eq(UInt<3>("h3"), vol_ognt_counter_up_idx), data_buffer_3, GEN_121)
    node GEN_123 = mux(eq(UInt<3>("h4"), vol_ognt_counter_up_idx), data_buffer_4, GEN_122)
    node GEN_124 = mux(eq(UInt<3>("h5"), vol_ognt_counter_up_idx), data_buffer_5, GEN_123)
    node GEN_125 = mux(eq(UInt<3>("h6"), vol_ognt_counter_up_idx), data_buffer_6, GEN_124)
    node GEN_126 = mux(eq(UInt<3>("h7"), vol_ognt_counter_up_idx), data_buffer_7, GEN_125)
    node T_2857 = eq(xact_iacq_is_builtin_type, UInt<1>("h0"))
    node T_2860 = and(io_outer_acquire_ready, io_outer_acquire_valid)
    wire T_2871_0 : UInt<3>
    node T_2873 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_2874 = and(io_outer_acquire_bits_is_builtin_type, T_2873)
    node T_2875 = and(T_2860, T_2874)
    reg T_2877 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2879 = eq(T_2877, UInt<3>("h7"))
    node T_2881 = add(T_2877, UInt<3>("h1"))
    node T_2882 = tail(T_2881, 1)
    node GEN_128 = mux(T_2875, T_2882, T_2877)
    node T_2883 = and(T_2875, T_2879)
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat)
    node T_2885 = mux(T_2874, T_2883, T_2860)
    node T_2891 = eq(T_2724, UInt<1>("h0"))
    node T_2892 = and(T_2241, T_2891)
    wire T_2900_0 : UInt<3>
    node GEN_277 = pad(UInt<3>("h5"), 4)
    node T_2902 = eq(io_outer_grant_bits_g_type, GEN_277)
    node T_2904 = mux(io_outer_grant_bits_is_builtin_type, T_2902, T_2723)
    node T_2906 = and(T_2892, T_2904)
    reg T_2908 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2910 = eq(T_2908, UInt<3>("h7"))
    node T_2912 = add(T_2908, UInt<3>("h1"))
    node T_2913 = tail(T_2912, 1)
    node GEN_129 = mux(T_2906, T_2913, T_2908)
    node T_2914 = and(T_2906, T_2910)
    node T_2915 = mux(T_2904, T_2908, xact_addr_beat)
    node T_2916 = mux(T_2904, T_2914, T_2892)
    reg T_2918 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2920 = eq(T_2916, UInt<1>("h0"))
    node T_2921 = and(T_2885, T_2920)
    node T_2923 = add(T_2918, UInt<1>("h1"))
    node T_2924 = tail(T_2923, 1)
    node GEN_130 = mux(T_2921, T_2924, T_2918)
    node T_2926 = eq(T_2885, UInt<1>("h0"))
    node T_2927 = and(T_2916, T_2926)
    node T_2929 = sub(T_2918, UInt<1>("h1"))
    node T_2930 = tail(T_2929, 1)
    node GEN_131 = mux(T_2927, T_2930, GEN_130)
    node T_2932 = gt(T_2918, UInt<1>("h0"))
    node T_2933 = eq(state, UInt<4>("h6"))
    node T_2937 = dshr(pending_put_data, ognt_counter_up_idx)
    node T_2938 = bits(T_2937, 0, 0)
    node T_2940 = eq(T_2938, UInt<1>("h0"))
    wire T_2949_0 : UInt<3>
    wire T_2949_1 : UInt<3>
    wire T_2949_2 : UInt<3>
    node T_2967 = or(xact_allocate, T_2940)
    node T_2968 = and(T_2933, T_2967)
    node T_2971 = eq(xact_op_code, UInt<5>("h1"))
    node T_2972 = eq(xact_op_code, UInt<5>("h7"))
    node T_2973 = or(T_2971, T_2972)
    node T_2974 = bits(xact_op_code, 3, 3)
    node T_2975 = eq(xact_op_code, UInt<5>("h4"))
    node T_2976 = or(T_2974, T_2975)
    node T_2977 = or(T_2973, T_2976)
    node T_2978 = eq(xact_op_code, UInt<5>("h3"))
    node T_2979 = or(T_2977, T_2978)
    node T_2980 = eq(xact_op_code, UInt<5>("h6"))
    node T_2981 = or(T_2979, T_2980)
    node T_2984 = cat(xact_op_code, UInt<1>("h1"))
    wire T_3015_addr_block : UInt<26>
    wire T_3015_client_xact_id : UInt<4>
    wire T_3015_addr_beat : UInt<3>
    wire T_3015_is_builtin_type : UInt<1>
    wire T_3015_a_type : UInt<3>
    wire T_3015_union : UInt<11>
    wire T_3015_data : UInt<64>
    wire GEN_12 : UInt<8>
    node GEN_132 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), wmask_buffer_1, wmask_buffer_0)
    node GEN_133 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), wmask_buffer_2, GEN_132)
    node GEN_134 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), wmask_buffer_3, GEN_133)
    node GEN_135 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), wmask_buffer_4, GEN_134)
    node GEN_136 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), wmask_buffer_5, GEN_135)
    node GEN_137 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), wmask_buffer_6, GEN_136)
    node GEN_138 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), wmask_buffer_7, GEN_137)
    node T_3080 = cat(xact_op_code, UInt<1>("h0"))
    node T_3081 = cat(xact_addr_byte, xact_op_size)
    node T_3082 = cat(T_3081, T_3080)
    node T_3084 = cat(xact_op_size, xact_op_code)
    node T_3085 = cat(T_3084, UInt<1>("h0"))
    node T_3087 = cat(GEN_12, UInt<1>("h0"))
    node T_3099 = mux(T_1993, UInt<6>("h2"), UInt<6>("h0"))
    node T_3101 = mux(T_1995, UInt<6>("h0"), T_3099)
    node T_3103 = mux(T_1991, T_3082, pad(T_3101, 11))
    node T_3105 = mux(T_2001, pad(T_3087, 11), T_3103)
    node T_3107 = mux(T_1997, pad(T_3087, 11), T_3105)
    node T_3109 = mux(T_2003, pad(T_3085, 11), T_3107)
    node T_3111 = mux(T_1999, T_3082, T_3109)
    wire T_3140_addr_block : UInt<26>
    wire T_3140_client_xact_id : UInt<4>
    wire T_3140_addr_beat : UInt<3>
    wire T_3140_is_builtin_type : UInt<1>
    wire T_3140_a_type : UInt<3>
    wire T_3140_union : UInt<11>
    wire T_3140_data : UInt<64>
    wire GEN_13 : UInt<64>
    node GEN_139 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_140 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), data_buffer_2, GEN_139)
    node GEN_141 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), data_buffer_3, GEN_140)
    node GEN_142 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), data_buffer_4, GEN_141)
    node GEN_143 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), data_buffer_5, GEN_142)
    node GEN_144 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), data_buffer_6, GEN_143)
    node GEN_145 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), data_buffer_7, GEN_144)
    node T_3168_addr_block = mux(T_2857, T_3015_addr_block, T_3140_addr_block)
    node T_3168_client_xact_id = mux(T_2857, UInt<4>("h0"), UInt<4>("h0"))
    node T_3168_addr_beat = mux(T_2857, UInt<3>("h0"), T_3140_addr_beat)
    node T_3168_is_builtin_type = mux(T_2857, UInt<1>("h0"), UInt<1>("h1"))
    node T_3168_a_type = mux(T_2857, T_3015_a_type, T_3140_a_type)
    node T_3168_union = mux(T_2857, T_3015_union, T_3140_union)
    node T_3168_data = mux(T_2857, UInt<64>("h0"), T_3140_data)
    node T_3197 = and(T_2933, ognt_counter_up_done)
    node GEN_146 = mux(T_3197, UInt<4>("h7"), GEN_51)
    node GEN_147 = mux(ognt_counter_pending, UInt<1>("h1"), vol_ognt_counter_pending)
    wire T_3207_0 : UInt<3>
    wire T_3207_1 : UInt<3>
    node GEN_278 = pad(UInt<3>("h5"), 4)
    node T_3209 = eq(io_outer_grant_bits_g_type, GEN_278)
    node GEN_279 = pad(UInt<3>("h4"), 4)
    node T_3210 = eq(io_outer_grant_bits_g_type, GEN_279)
    node T_3211 = or(T_3209, T_3210)
    node T_3213 = mux(io_outer_grant_bits_is_builtin_type, T_3211, T_2723)
    node T_3214 = and(T_2241, T_3213)
    wire GEN_14 : UInt<8>
    node GEN_148 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_149 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), wmask_buffer_2, GEN_148)
    node GEN_150 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), wmask_buffer_3, GEN_149)
    node GEN_151 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), wmask_buffer_4, GEN_150)
    node GEN_152 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), wmask_buffer_5, GEN_151)
    node GEN_153 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), wmask_buffer_6, GEN_152)
    node GEN_154 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), wmask_buffer_7, GEN_153)
    node T_3215 = bits(GEN_14, 0, 0)
    wire GEN_15 : UInt<8>
    node T_3216 = bits(GEN_15, 1, 1)
    wire GEN_16 : UInt<8>
    node T_3217 = bits(GEN_16, 2, 2)
    wire GEN_17 : UInt<8>
    node T_3218 = bits(GEN_17, 3, 3)
    wire GEN_18 : UInt<8>
    node T_3219 = bits(GEN_18, 4, 4)
    wire GEN_19 : UInt<8>
    node T_3220 = bits(GEN_19, 5, 5)
    wire GEN_20 : UInt<8>
    node T_3221 = bits(GEN_20, 6, 6)
    wire GEN_21 : UInt<8>
    node T_3222 = bits(GEN_21, 7, 7)
    node T_3226 = mux(T_3215, UInt<8>("hff"), UInt<8>("h0"))
    node T_3230 = mux(T_3216, UInt<8>("hff"), UInt<8>("h0"))
    node T_3234 = mux(T_3217, UInt<8>("hff"), UInt<8>("h0"))
    node T_3238 = mux(T_3218, UInt<8>("hff"), UInt<8>("h0"))
    node T_3242 = mux(T_3219, UInt<8>("hff"), UInt<8>("h0"))
    node T_3246 = mux(T_3220, UInt<8>("hff"), UInt<8>("h0"))
    node T_3250 = mux(T_3221, UInt<8>("hff"), UInt<8>("h0"))
    node T_3254 = mux(T_3222, UInt<8>("hff"), UInt<8>("h0"))
    node T_3255 = cat(T_3230, T_3226)
    node T_3256 = cat(T_3238, T_3234)
    node T_3257 = cat(T_3256, T_3255)
    node T_3258 = cat(T_3246, T_3242)
    node T_3259 = cat(T_3254, T_3250)
    node T_3260 = cat(T_3259, T_3258)
    node T_3261 = cat(T_3260, T_3257)
    node T_3262 = not(T_3261)
    node T_3263 = and(T_3262, io_outer_grant_bits_data)
    wire GEN_22 : UInt<64>
    node GEN_155 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_156 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), data_buffer_2, GEN_155)
    node GEN_157 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), data_buffer_3, GEN_156)
    node GEN_158 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), data_buffer_4, GEN_157)
    node GEN_159 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), data_buffer_5, GEN_158)
    node GEN_160 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), data_buffer_6, GEN_159)
    node GEN_161 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), data_buffer_7, GEN_160)
    node T_3264 = and(T_3261, GEN_22)
    node T_3265 = or(T_3263, T_3264)
    wire GEN_23 : UInt<64>
    node GEN_162 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), GEN_23, GEN_94)
    node GEN_163 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), GEN_23, GEN_95)
    node GEN_164 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), GEN_23, GEN_96)
    node GEN_165 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), GEN_23, GEN_97)
    node GEN_166 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), GEN_23, GEN_98)
    node GEN_167 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), GEN_23, GEN_99)
    node GEN_168 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), GEN_23, GEN_100)
    node GEN_169 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), GEN_23, GEN_101)
    wire GEN_24 : UInt<8>
    node GEN_170 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_102)
    node GEN_171 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_103)
    node GEN_172 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_104)
    node GEN_173 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_105)
    node GEN_174 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_106)
    node GEN_175 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_107)
    node GEN_176 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_108)
    node GEN_177 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_109)
    node GEN_178 = mux(T_3214, GEN_162, GEN_94)
    node GEN_179 = mux(T_3214, GEN_163, GEN_95)
    node GEN_180 = mux(T_3214, GEN_164, GEN_96)
    node GEN_181 = mux(T_3214, GEN_165, GEN_97)
    node GEN_182 = mux(T_3214, GEN_166, GEN_98)
    node GEN_183 = mux(T_3214, GEN_167, GEN_99)
    node GEN_184 = mux(T_3214, GEN_168, GEN_100)
    node GEN_185 = mux(T_3214, GEN_169, GEN_101)
    node GEN_186 = mux(T_3214, GEN_170, GEN_102)
    node GEN_187 = mux(T_3214, GEN_171, GEN_103)
    node GEN_188 = mux(T_3214, GEN_172, GEN_104)
    node GEN_189 = mux(T_3214, GEN_173, GEN_105)
    node GEN_190 = mux(T_3214, GEN_174, GEN_106)
    node GEN_191 = mux(T_3214, GEN_175, GEN_107)
    node GEN_192 = mux(T_3214, GEN_176, GEN_108)
    node GEN_193 = mux(T_3214, GEN_177, GEN_109)
    node T_3268 = or(scoreboard_3, ognt_counter_pending)
    node T_3269 = or(T_3268, vol_ognt_counter_pending)
    node T_3281 = eq(T_2179, UInt<1>("h0"))
    node T_3283 = and(T_2175, T_3281)
    wire T_3291_0 : UInt<3>
    node GEN_280 = pad(UInt<3>("h5"), 4)
    node T_3293 = eq(io_inner_grant_bits_g_type, GEN_280)
    node T_3295 = mux(io_inner_grant_bits_is_builtin_type, T_3293, T_2178)
    node T_3297 = and(T_3283, T_3295)
    reg T_3299 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3301 = eq(T_3299, UInt<3>("h7"))
    node T_3303 = add(T_3299, UInt<3>("h1"))
    node T_3304 = tail(T_3303, 1)
    node GEN_194 = mux(T_3297, T_3304, T_3299)
    node T_3305 = and(T_3297, T_3301)
    node T_3306 = mux(T_3295, T_3299, UInt<3>("h0"))
    node T_3307 = mux(T_3295, T_3305, T_3283)
    node T_3308 = and(io_inner_finish_ready, io_inner_finish_valid)
    reg T_3314 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_3324 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_3326 = eq(T_3308, UInt<1>("h0"))
    node T_3327 = and(T_3307, T_3326)
    node T_3329 = add(T_3324, UInt<1>("h1"))
    node T_3330 = tail(T_3329, 1)
    node GEN_196 = mux(T_3327, T_3330, T_3324)
    node T_3332 = eq(T_3307, UInt<1>("h0"))
    node T_3333 = and(T_3308, T_3332)
    node T_3335 = sub(T_3324, UInt<1>("h1"))
    node T_3336 = tail(T_3335, 1)
    node GEN_197 = mux(T_3333, T_3336, GEN_196)
    node T_3338 = gt(T_3324, UInt<1>("h0"))
    node T_3343 = eq(T_1798, UInt<1>("h0"))
    node T_3360 = or(pending_ignt_data, T_2647)
    wire T_3370_0 : UInt<3>
    wire T_3370_1 : UInt<3>
    node GEN_281 = pad(UInt<3>("h5"), 4)
    node T_3372 = eq(io_outer_grant_bits_g_type, GEN_281)
    node GEN_282 = pad(UInt<3>("h4"), 4)
    node T_3373 = eq(io_outer_grant_bits_g_type, GEN_282)
    node T_3374 = or(T_3372, T_3373)
    node T_3376 = mux(io_outer_grant_bits_is_builtin_type, T_3374, T_2723)
    node T_3377 = and(T_2241, T_3376)
    node T_3382 = mux(T_3377, UInt<8>("hff"), UInt<8>("h0"))
    node T_3384 = dshlw(UInt<8>("h1"), io_outer_grant_bits_addr_beat)
    node T_3385 = and(T_3382, T_3384)
    node T_3386 = or(T_3360, T_3385)
    node GEN_198 = mux(T_3343, T_3386, GEN_38)
    node T_3389 = eq(state, UInt<4>("h1"))
    node T_3390 = or(T_1611, T_3389)
    node T_3393 = or(T_3390, scoreboard_0)
    node T_3395 = eq(T_3393, UInt<1>("h0"))
    node T_3412 = eq(UInt<3>("h6"), ignt_q.io_deq_bits_a_type)
    node T_3413 = mux(T_3412, UInt<3>("h1"), UInt<3>("h3"))
    node T_3414 = eq(UInt<3>("h5"), ignt_q.io_deq_bits_a_type)
    node T_3415 = mux(T_3414, UInt<3>("h1"), T_3413)
    node T_3416 = eq(UInt<3>("h4"), ignt_q.io_deq_bits_a_type)
    node T_3417 = mux(T_3416, UInt<3>("h4"), T_3415)
    node T_3418 = eq(UInt<3>("h3"), ignt_q.io_deq_bits_a_type)
    node T_3419 = mux(T_3418, UInt<3>("h3"), T_3417)
    node T_3420 = eq(UInt<3>("h2"), ignt_q.io_deq_bits_a_type)
    node T_3421 = mux(T_3420, UInt<3>("h3"), T_3419)
    node T_3422 = eq(UInt<3>("h1"), ignt_q.io_deq_bits_a_type)
    node T_3423 = mux(T_3422, UInt<3>("h5"), T_3421)
    node T_3424 = eq(UInt<3>("h0"), ignt_q.io_deq_bits_a_type)
    node T_3425 = mux(T_3424, UInt<3>("h4"), T_3423)
    node T_3426 = mux(ignt_q.io_deq_bits_is_builtin_type, T_3425, UInt<3>("h0"))
    wire T_3455_addr_beat : UInt<3>
    wire T_3455_client_xact_id : UInt<1>
    wire T_3455_manager_xact_id : UInt<4>
    wire T_3455_is_builtin_type : UInt<1>
    wire T_3455_g_type : UInt<4>
    wire T_3455_data : UInt<64>
    wire T_3455_client_id : UInt<1>
    wire GEN_25 : UInt<64>
    node GEN_199 = mux(eq(UInt<3>("h1"), ignt_data_idx), data_buffer_1, data_buffer_0)
    node GEN_200 = mux(eq(UInt<3>("h2"), ignt_data_idx), data_buffer_2, GEN_199)
    node GEN_201 = mux(eq(UInt<3>("h3"), ignt_data_idx), data_buffer_3, GEN_200)
    node GEN_202 = mux(eq(UInt<3>("h4"), ignt_data_idx), data_buffer_4, GEN_201)
    node GEN_203 = mux(eq(UInt<3>("h5"), ignt_data_idx), data_buffer_5, GEN_202)
    node GEN_204 = mux(eq(UInt<3>("h6"), ignt_data_idx), data_buffer_6, GEN_203)
    node GEN_205 = mux(eq(UInt<3>("h7"), ignt_data_idx), data_buffer_7, GEN_204)
    wire T_3491_0 : UInt<3>
    node GEN_283 = pad(UInt<3>("h5"), 4)
    node T_3493 = eq(io_inner_grant_bits_g_type, GEN_283)
    node T_3495 = mux(io_inner_grant_bits_is_builtin_type, T_3493, T_2178)
    node T_3497 = and(T_2175, T_3495)
    reg T_3499 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3501 = eq(T_3499, UInt<3>("h7"))
    node T_3503 = add(T_3499, UInt<3>("h1"))
    node T_3504 = tail(T_3503, 1)
    node GEN_206 = mux(T_3497, T_3504, T_3499)
    node T_3505 = and(T_3497, T_3501)
    node T_3506 = mux(T_3495, T_3499, ignt_q.io_deq_bits_addr_beat)
    node T_3507 = mux(T_3495, T_3505, T_2175)
    node T_3512 = and(T_2337, scoreboard_6)
    node T_3514 = eq(T_3269, UInt<1>("h0"))
    wire T_3522_0 : UInt<3>
    wire T_3522_1 : UInt<3>
    node GEN_284 = pad(UInt<3>("h5"), 4)
    node T_3524 = eq(io_inner_grant_bits_g_type, GEN_284)
    node GEN_285 = pad(UInt<3>("h4"), 4)
    node T_3525 = eq(io_inner_grant_bits_g_type, GEN_285)
    node T_3526 = or(T_3524, T_3525)
    node T_3528 = mux(io_inner_grant_bits_is_builtin_type, T_3526, T_2178)
    node T_3529 = dshr(pending_ignt_data, ignt_data_idx)
    node T_3530 = bits(T_3529, 0, 0)
    node T_3532 = mux(T_3528, T_3530, T_3395)
    node T_3533 = and(T_3514, T_3532)
    node GEN_207 = mux(T_3512, T_3533, T_2347)
    node GEN_208 = mux(T_2250, ignt_data_done, UInt<1>("h0"))
    node GEN_209 = mux(T_2250, ignt_data_idx, UInt<3>("h0"))
    node GEN_210 = mux(T_2250, T_3455_client_xact_id, T_2440_client_xact_id)
    node GEN_211 = mux(T_2250, UInt<4>("h4"), UInt<4>("h0"))
    node GEN_212 = mux(T_2250, T_3455_is_builtin_type, UInt<1>("h1"))
    node GEN_213 = mux(T_2250, T_3455_g_type, UInt<4>("h0"))
    node GEN_214 = mux(T_2250, T_3455_data, UInt<64>("h0"))
    node GEN_215 = mux(T_2250, T_3455_client_id, T_2440_client_id)
    node GEN_216 = mux(T_2250, GEN_207, T_2347)
    node T_3540 = not(io_incoherent_0)
    node GEN_217 = mux(T_1798, pad(T_3540, 2), T_2079)
    node T_3551 = and(T_1767, io_inner_acquire_valid)
    node T_3552 = or(T_1798, T_3551)
    wire T_3562_0 : UInt<3>
    wire T_3562_1 : UInt<3>
    wire T_3562_2 : UInt<3>
    node T_3564 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_3565 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_3566 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3567 = or(T_3564, T_3565)
    node T_3568 = or(T_3567, T_3566)
    node T_3569 = and(io_inner_acquire_bits_is_builtin_type, T_3568)
    node T_3570 = and(T_1612, T_3569)
    node T_3571 = and(T_3570, T_3552)
    node T_3573 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3574 = and(io_inner_acquire_bits_is_builtin_type, T_3573)
    node T_3603 = or(T_1921, T_1918)
    node T_3604 = bits(io_inner_acquire_bits_union, 8, 1)
    node T_3606 = mux(T_3603, T_3604, UInt<8>("h0"))
    node T_3607 = mux(T_3574, UInt<8>("hff"), T_3606)
    node T_3608 = bits(T_3607, 0, 0)
    node T_3609 = bits(T_3607, 1, 1)
    node T_3610 = bits(T_3607, 2, 2)
    node T_3611 = bits(T_3607, 3, 3)
    node T_3612 = bits(T_3607, 4, 4)
    node T_3613 = bits(T_3607, 5, 5)
    node T_3614 = bits(T_3607, 6, 6)
    node T_3615 = bits(T_3607, 7, 7)
    node T_3619 = mux(T_3608, UInt<8>("hff"), UInt<8>("h0"))
    node T_3623 = mux(T_3609, UInt<8>("hff"), UInt<8>("h0"))
    node T_3627 = mux(T_3610, UInt<8>("hff"), UInt<8>("h0"))
    node T_3631 = mux(T_3611, UInt<8>("hff"), UInt<8>("h0"))
    node T_3635 = mux(T_3612, UInt<8>("hff"), UInt<8>("h0"))
    node T_3639 = mux(T_3613, UInt<8>("hff"), UInt<8>("h0"))
    node T_3643 = mux(T_3614, UInt<8>("hff"), UInt<8>("h0"))
    node T_3647 = mux(T_3615, UInt<8>("hff"), UInt<8>("h0"))
    node T_3648 = cat(T_3623, T_3619)
    node T_3649 = cat(T_3631, T_3627)
    node T_3650 = cat(T_3649, T_3648)
    node T_3651 = cat(T_3639, T_3635)
    node T_3652 = cat(T_3647, T_3643)
    node T_3653 = cat(T_3652, T_3651)
    node T_3654 = cat(T_3653, T_3650)
    node T_3655 = not(T_3654)
    wire GEN_26 : UInt<64>
    node GEN_218 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_219 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), data_buffer_2, GEN_218)
    node GEN_220 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), data_buffer_3, GEN_219)
    node GEN_221 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), data_buffer_4, GEN_220)
    node GEN_222 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), data_buffer_5, GEN_221)
    node GEN_223 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), data_buffer_6, GEN_222)
    node GEN_224 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), data_buffer_7, GEN_223)
    node T_3656 = and(T_3655, GEN_26)
    node T_3657 = and(T_3654, io_inner_acquire_bits_data)
    node T_3658 = or(T_3656, T_3657)
    wire GEN_27 : UInt<64>
    node GEN_225 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_178)
    node GEN_226 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_179)
    node GEN_227 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_180)
    node GEN_228 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_181)
    node GEN_229 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_182)
    node GEN_230 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_183)
    node GEN_231 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_184)
    node GEN_232 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_185)
    wire GEN_28 : UInt<8>
    node GEN_233 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_234 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), wmask_buffer_2, GEN_233)
    node GEN_235 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), wmask_buffer_3, GEN_234)
    node GEN_236 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), wmask_buffer_4, GEN_235)
    node GEN_237 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), wmask_buffer_5, GEN_236)
    node GEN_238 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), wmask_buffer_6, GEN_237)
    node GEN_239 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), wmask_buffer_7, GEN_238)
    node T_3695 = or(T_3607, GEN_28)
    wire GEN_29 : UInt<8>
    node GEN_240 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_186)
    node GEN_241 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_187)
    node GEN_242 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_188)
    node GEN_243 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_189)
    node GEN_244 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_190)
    node GEN_245 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_191)
    node GEN_246 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_192)
    node GEN_247 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_193)
    node GEN_248 = mux(T_3571, GEN_225, GEN_178)
    node GEN_249 = mux(T_3571, GEN_226, GEN_179)
    node GEN_250 = mux(T_3571, GEN_227, GEN_180)
    node GEN_251 = mux(T_3571, GEN_228, GEN_181)
    node GEN_252 = mux(T_3571, GEN_229, GEN_182)
    node GEN_253 = mux(T_3571, GEN_230, GEN_183)
    node GEN_254 = mux(T_3571, GEN_231, GEN_184)
    node GEN_255 = mux(T_3571, GEN_232, GEN_185)
    node GEN_256 = mux(T_3571, GEN_240, GEN_186)
    node GEN_257 = mux(T_3571, GEN_241, GEN_187)
    node GEN_258 = mux(T_3571, GEN_242, GEN_188)
    node GEN_259 = mux(T_3571, GEN_243, GEN_189)
    node GEN_260 = mux(T_3571, GEN_244, GEN_190)
    node GEN_261 = mux(T_3571, GEN_245, GEN_191)
    node GEN_262 = mux(T_3571, GEN_246, GEN_192)
    node GEN_263 = mux(T_3571, GEN_247, GEN_193)
    node T_3698 = or(scoreboard_0, T_2343)
    node T_3699 = or(T_3698, vol_ignt_counter_pending)
    node T_3700 = or(T_3699, scoreboard_3)
    node T_3701 = or(T_3700, vol_ognt_counter_pending)
    node T_3702 = or(T_3701, ognt_counter_pending)
    node T_3703 = or(T_3702, scoreboard_6)
    node T_3704 = or(T_3703, ifin_counter_pending)
    node T_3706 = eq(T_3704, UInt<1>("h0"))
    node T_3708 = and(T_2337, all_pending_done)
    node GEN_264 = mux(T_3708, UInt<4>("h0"), GEN_146)
    node GEN_265 = mux(T_3708, UInt<8>("h0"), GEN_256)
    node GEN_266 = mux(T_3708, UInt<8>("h0"), GEN_257)
    node GEN_267 = mux(T_3708, UInt<8>("h0"), GEN_258)
    node GEN_268 = mux(T_3708, UInt<8>("h0"), GEN_259)
    node GEN_269 = mux(T_3708, UInt<8>("h0"), GEN_260)
    node GEN_270 = mux(T_3708, UInt<8>("h0"), GEN_261)
    node GEN_271 = mux(T_3708, UInt<8>("h0"), GEN_262)
    node GEN_272 = mux(T_3708, UInt<8>("h0"), GEN_263)
    io_inner_acquire_ready <= T_1981
    io_inner_grant_valid <= GEN_216
    io_inner_grant_bits_addr_beat <= GEN_209
    io_inner_grant_bits_client_xact_id <= GEN_210
    io_inner_grant_bits_manager_xact_id <= GEN_211
    io_inner_grant_bits_is_builtin_type <= GEN_212
    io_inner_grant_bits_g_type <= GEN_213
    io_inner_grant_bits_data <= GEN_214
    io_inner_grant_bits_client_id <= GEN_215
    io_inner_finish_ready <= T_2337
    io_inner_probe_valid <= T_2083
    io_inner_probe_bits_addr_block <= T_2030_addr_block
    io_inner_probe_bits_p_type <= T_2030_p_type
    io_inner_probe_bits_client_id <= UInt<1>("h0")
    io_inner_release_ready <= T_2274
    io_outer_acquire_valid <= T_2968
    io_outer_acquire_bits_addr_block <= T_3168_addr_block
    io_outer_acquire_bits_client_xact_id <= T_3168_client_xact_id
    io_outer_acquire_bits_addr_beat <= T_3168_addr_beat
    io_outer_acquire_bits_is_builtin_type <= T_3168_is_builtin_type
    io_outer_acquire_bits_a_type <= T_3168_a_type
    io_outer_acquire_bits_union <= T_3168_union
    io_outer_acquire_bits_data <= T_3168_data
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= T_2777
    io_outer_release_bits_addr_beat <= T_2828_addr_beat
    io_outer_release_bits_addr_block <= T_2828_addr_block
    io_outer_release_bits_client_xact_id <= UInt<4>("h0")
    io_outer_release_bits_voluntary <= UInt<1>("h1")
    io_outer_release_bits_r_type <= T_2828_r_type
    io_outer_release_bits_data <= T_2828_data
    io_outer_grant_ready <= GEN_147
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= UInt<1>("h0")
    io_outer_finish_bits_manager_id <= UInt<1>("h1")
    io_alloc_iacq_matches <= T_1749
    io_alloc_iacq_can <= T_1611
    io_alloc_irel_matches <= T_1752
    io_alloc_irel_can <= UInt<1>("h0")
    io_alloc_oprb_matches <= T_1755
    io_alloc_oprb_can <= UInt<1>("h0")
    io_alloc_idle <= T_1611
    io_alloc_addr_block <= xact_addr_block
    all_pending_done <= T_3706
    state <= GEN_264
    xact_addr_block <= GEN_49
    xact_allocate <= GEN_32
    xact_amo_shift_bytes <= GEN_33
    xact_op_code <= GEN_34
    xact_addr_byte <= GEN_35
    xact_op_size <= GEN_36
    xact_addr_beat <= xact_iacq_addr_beat
    xact_iacq_client_xact_id <= T_1823_client_xact_id
    xact_iacq_addr_beat <= T_1823_addr_beat
    xact_iacq_client_id <= T_1823_client_id
    xact_iacq_is_builtin_type <= T_1823_is_builtin_type
    xact_iacq_a_type <= T_1823_a_type
    xact_vol_ir_r_type <= GEN_60
    xact_vol_ir_src <= GEN_61
    xact_vol_ir_client_xact_id <= GEN_62
    pending_irel_data <= GEN_63
    vol_ignt_counter_pending <= T_2221
    vol_ignt_counter_up_idx <= T_2173
    vol_ignt_counter_up_done <= T_2174
    vol_ignt_counter_down_idx <= T_2204
    vol_ignt_counter_down_done <= T_2205
    scoreboard_6 <= T_1850
    ignt_data_idx <= T_3506
    ignt_data_done <= T_3507
    ifin_counter_pending <= T_3338
    ifin_counter_up_idx <= T_3306
    ifin_counter_up_done <= T_3307
    ifin_counter_down_done <= T_3308
    pending_put_data <= GEN_37
    pending_ignt_data <= GEN_198
    ognt_counter_pending <= T_2932
    ognt_counter_up_idx <= T_2884
    ognt_counter_up_done <= T_2885
    ognt_counter_down_idx <= T_2915
    ognt_counter_down_done <= T_2916
    pending_iprbs <= bits(GEN_217, 0, 0)
    pending_orel_send <= GEN_115
    pending_orel_data <= GEN_110
    vol_ognt_counter_pending <= T_2765
    vol_ognt_counter_up_idx <= T_2719
    vol_ognt_counter_up_done <= T_2720
    vol_ognt_counter_down_idx <= T_2748
    vol_ognt_counter_down_done <= T_2749
    sending_orel <= GEN_114
    data_buffer_0 <= GEN_248
    data_buffer_1 <= GEN_249
    data_buffer_2 <= GEN_250
    data_buffer_3 <= GEN_251
    data_buffer_4 <= GEN_252
    data_buffer_5 <= GEN_253
    data_buffer_6 <= GEN_254
    data_buffer_7 <= GEN_255
    wmask_buffer_0 <= GEN_265
    wmask_buffer_1 <= GEN_266
    wmask_buffer_2 <= GEN_267
    wmask_buffer_3 <= GEN_268
    wmask_buffer_4 <= GEN_269
    wmask_buffer_5 <= GEN_270
    wmask_buffer_6 <= GEN_271
    wmask_buffer_7 <= GEN_272
    data_valid_0 <= T_1716
    data_valid_1 <= T_1719
    data_valid_2 <= T_1722
    data_valid_3 <= T_1725
    data_valid_4 <= T_1728
    data_valid_5 <= T_1731
    data_valid_6 <= T_1734
    data_valid_7 <= T_1737
    ignt_q.io_enq_valid <= T_1822
    ignt_q.io_enq_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    ignt_q.io_enq_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    ignt_q.io_enq_bits_client_id <= io_inner_acquire_bits_client_id
    ignt_q.io_enq_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    ignt_q.io_enq_bits_a_type <= io_inner_acquire_bits_a_type
    ignt_q.io_deq_ready <= GEN_208
    T_2030_addr_block <= xact_addr_block
    T_2030_p_type <= T_2005
    T_2065_pending <= T_2139
    T_2065_up_done <= T_2073
    T_2065_down_idx <= T_2122
    T_2065_down_done <= T_2123
    T_2091 <= T_2091
    T_2115 <= GEN_41
    T_2125 <= GEN_43
    T_2166 <= GEN_45
    T_2197 <= GEN_46
    T_2207 <= GEN_48
    T_2379_addr_block <= xact_addr_block
    T_2379_client_xact_id <= xact_vol_ir_client_xact_id
    T_2379_r_type <= xact_vol_ir_r_type
    T_2379_client_id <= xact_vol_ir_src
    T_2440_client_xact_id <= T_2379_client_xact_id
    T_2440_client_id <= T_2379_client_id
    GEN_0 <= GEN_70
    GEN_1 <= GEN_70
    GEN_2 <= GEN_70
    GEN_3 <= GEN_70
    GEN_4 <= GEN_70
    GEN_5 <= GEN_70
    GEN_6 <= GEN_70
    GEN_7 <= GEN_70
    GEN_8 <= GEN_77
    GEN_9 <= T_2571
    T_2712 <= GEN_116
    T_2741 <= GEN_117
    T_2751 <= GEN_119
    T_2828_addr_beat <= vol_ognt_counter_up_idx
    T_2828_addr_block <= xact_addr_block
    T_2828_r_type <= T_2792
    T_2828_data <= GEN_11
    GEN_11 <= GEN_126
    T_2877 <= GEN_128
    T_2908 <= GEN_129
    T_2918 <= GEN_131
    T_3015_addr_block <= xact_addr_block
    T_3015_a_type <= pad(T_2981, 3)
    T_3015_union <= pad(T_2984, 11)
    GEN_12 <= GEN_138
    T_3140_addr_block <= xact_addr_block
    T_3140_addr_beat <= ognt_counter_up_idx
    T_3140_a_type <= xact_iacq_a_type
    T_3140_union <= T_3111
    T_3140_data <= GEN_13
    GEN_13 <= GEN_145
    GEN_14 <= GEN_154
    GEN_15 <= GEN_154
    GEN_16 <= GEN_154
    GEN_17 <= GEN_154
    GEN_18 <= GEN_154
    GEN_19 <= GEN_154
    GEN_20 <= GEN_154
    GEN_21 <= GEN_154
    GEN_22 <= GEN_161
    GEN_23 <= T_3265
    T_3299 <= GEN_194
    T_3314 <= T_3314
    T_3324 <= GEN_197
    T_3455_addr_beat <= ignt_q.io_deq_bits_addr_beat
    T_3455_client_xact_id <= ignt_q.io_deq_bits_client_xact_id
    T_3455_is_builtin_type <= ignt_q.io_deq_bits_is_builtin_type
    T_3455_g_type <= pad(T_3426, 4)
    T_3455_data <= GEN_25
    T_3455_client_id <= ignt_q.io_deq_bits_client_id
    GEN_25 <= GEN_205
    T_3499 <= GEN_206
    GEN_26 <= GEN_224
    GEN_27 <= T_3658
    GEN_28 <= GEN_239
    GEN_29 <= T_3695
    printf(clk, T_1652, "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n")
    stop(clk, T_1652, 1)
    printf(clk, T_1666, "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n")
    stop(clk, T_1666, 1)
    printf(clk, T_1677, "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n")
    stop(clk, T_1677, 1)

  module BufferedBroadcastAcquireTracker_4 :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
    output io_alloc_iacq_matches : UInt<1>
    output io_alloc_iacq_can : UInt<1>
    input io_alloc_iacq_should : UInt<1>
    output io_alloc_irel_matches : UInt<1>
    output io_alloc_irel_can : UInt<1>
    input io_alloc_irel_should : UInt<1>
    output io_alloc_oprb_matches : UInt<1>
    output io_alloc_oprb_can : UInt<1>
    input io_alloc_oprb_should : UInt<1>
    output io_alloc_idle : UInt<1>
    output io_alloc_addr_block : UInt<26>
  
    wire all_pending_done : UInt<1>
    reg state : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg xact_addr_block : UInt<26>, clk with :
      reset => (reset, UInt<26>("h0"))
    reg xact_allocate : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_allocate)
    reg xact_amo_shift_bytes : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_amo_shift_bytes)
    reg xact_op_code : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_op_code)
    reg xact_addr_byte : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_addr_byte)
    reg xact_op_size : UInt<2>, clk with :
      reset => (UInt<1>("h0"), xact_op_size)
    wire xact_addr_beat : UInt<3>
    wire xact_iacq_client_xact_id : UInt<1>
    wire xact_iacq_addr_beat : UInt<3>
    wire xact_iacq_client_id : UInt<1>
    wire xact_iacq_is_builtin_type : UInt<1>
    wire xact_iacq_a_type : UInt<3>
    reg xact_vol_ir_r_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_r_type)
    reg xact_vol_ir_src : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_src)
    reg xact_vol_ir_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_client_xact_id)
    reg pending_irel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ignt_counter_pending : UInt<1>
    wire vol_ignt_counter_up_idx : UInt<3>
    wire vol_ignt_counter_up_done : UInt<1>
    wire vol_ignt_counter_down_idx : UInt<3>
    wire vol_ignt_counter_down_done : UInt<1>
    wire scoreboard_6 : UInt<1>
    wire ignt_data_idx : UInt<3>
    wire ignt_data_done : UInt<1>
    wire ifin_counter_pending : UInt<1>
    wire ifin_counter_up_idx : UInt<3>
    wire ifin_counter_up_done : UInt<1>
    wire ifin_counter_down_idx : UInt<3>
    wire ifin_counter_down_done : UInt<1>
    reg pending_put_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg pending_ignt_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire ognt_counter_pending : UInt<1>
    wire ognt_counter_up_idx : UInt<3>
    wire ognt_counter_up_done : UInt<1>
    wire ognt_counter_down_idx : UInt<3>
    wire ognt_counter_down_done : UInt<1>
    reg pending_iprbs : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pending_iprbs)
    reg pending_orel_send : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_orel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ognt_counter_pending : UInt<1>
    wire vol_ognt_counter_up_idx : UInt<3>
    wire vol_ognt_counter_up_done : UInt<1>
    wire vol_ognt_counter_down_idx : UInt<3>
    wire vol_ognt_counter_down_done : UInt<1>
    node T_170 = neq(pending_orel_data, UInt<8>("h0"))
    node T_171 = or(pending_orel_send, T_170)
    node scoreboard_3 = or(T_171, vol_ognt_counter_pending)
    reg sending_orel : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_195_sharers : UInt<1>
    wire T_241_state : UInt<2>
    wire coh_inner_sharers : UInt<1>
    wire coh_outer_state : UInt<2>
    node T_1611 = eq(state, UInt<4>("h0"))
    node T_1612 = and(io_inner_acquire_ready, io_inner_acquire_valid)
    node T_1613 = and(T_1611, T_1612)
    node T_1614 = and(T_1613, io_alloc_iacq_should)
    wire T_1623_0 : UInt<3>
    node T_1625 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1626 = and(io_inner_acquire_bits_is_builtin_type, T_1625)
    node T_1627 = and(T_1614, T_1626)
    wire T_1636_0 : UInt<3>
    node T_1638 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1639 = and(io_inner_acquire_bits_is_builtin_type, T_1638)
    node T_1641 = eq(T_1639, UInt<1>("h0"))
    node T_1643 = eq(io_inner_acquire_bits_addr_beat, UInt<3>("h0"))
    node T_1644 = or(T_1641, T_1643)
    node T_1646 = eq(T_1644, UInt<1>("h0"))
    node T_1647 = and(T_1627, T_1646)
    node T_1649 = eq(T_1647, UInt<1>("h0"))
    node T_1650 = or(T_1649, reset)
    node T_1652 = eq(T_1650, UInt<1>("h0"))
    node T_1653 = neq(state, UInt<4>("h0"))
    node T_1654 = and(T_1653, scoreboard_6)
    node T_1656 = eq(xact_iacq_a_type, UInt<3>("h5"))
    node T_1658 = eq(xact_iacq_a_type, UInt<3>("h6"))
    node T_1659 = or(T_1656, T_1658)
    node T_1660 = and(xact_iacq_is_builtin_type, T_1659)
    node T_1661 = and(T_1654, T_1660)
    node T_1663 = eq(T_1661, UInt<1>("h0"))
    node T_1664 = or(T_1663, reset)
    node T_1666 = eq(T_1664, UInt<1>("h0"))
    node T_1670 = eq(xact_iacq_a_type, UInt<3>("h4"))
    node T_1671 = and(xact_iacq_is_builtin_type, T_1670)
    node T_1672 = and(T_1654, T_1671)
    node T_1674 = eq(T_1672, UInt<1>("h0"))
    node T_1675 = or(T_1674, reset)
    node T_1677 = eq(T_1675, UInt<1>("h0"))
    wire T_1691_0 : UInt<64>
    wire T_1691_1 : UInt<64>
    wire T_1691_2 : UInt<64>
    wire T_1691_3 : UInt<64>
    wire T_1691_4 : UInt<64>
    wire T_1691_5 : UInt<64>
    wire T_1691_6 : UInt<64>
    wire T_1691_7 : UInt<64>
    reg data_buffer_0 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_1 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_2 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_3 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_4 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_5 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_6 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_7 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    wire T_1709_0 : UInt<8>
    wire T_1709_1 : UInt<8>
    wire T_1709_2 : UInt<8>
    wire T_1709_3 : UInt<8>
    wire T_1709_4 : UInt<8>
    wire T_1709_5 : UInt<8>
    wire T_1709_6 : UInt<8>
    wire T_1709_7 : UInt<8>
    reg wmask_buffer_0 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_1 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_2 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_3 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_4 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_5 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_6 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_7 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    node T_1714 = not(wmask_buffer_0)
    node T_1716 = eq(T_1714, UInt<8>("h0"))
    node T_1717 = not(wmask_buffer_1)
    node T_1719 = eq(T_1717, UInt<8>("h0"))
    node T_1720 = not(wmask_buffer_2)
    node T_1722 = eq(T_1720, UInt<8>("h0"))
    node T_1723 = not(wmask_buffer_3)
    node T_1725 = eq(T_1723, UInt<8>("h0"))
    node T_1726 = not(wmask_buffer_4)
    node T_1728 = eq(T_1726, UInt<8>("h0"))
    node T_1729 = not(wmask_buffer_5)
    node T_1731 = eq(T_1729, UInt<8>("h0"))
    node T_1732 = not(wmask_buffer_6)
    node T_1734 = eq(T_1732, UInt<8>("h0"))
    node T_1735 = not(wmask_buffer_7)
    node T_1737 = eq(T_1735, UInt<8>("h0"))
    wire data_valid_0 : UInt<1>
    wire data_valid_1 : UInt<1>
    wire data_valid_2 : UInt<1>
    wire data_valid_3 : UInt<1>
    wire data_valid_4 : UInt<1>
    wire data_valid_5 : UInt<1>
    wire data_valid_6 : UInt<1>
    wire data_valid_7 : UInt<1>
    node T_1748 = eq(io_inner_acquire_bits_addr_block, xact_addr_block)
    node T_1749 = and(T_1653, T_1748)
    node T_1751 = eq(io_inner_release_bits_addr_block, xact_addr_block)
    node T_1752 = and(T_1653, T_1751)
    node T_1754 = eq(io_outer_probe_bits_addr_block, xact_addr_block)
    node T_1755 = and(T_1653, T_1754)
    node T_1764 = eq(xact_iacq_client_xact_id, io_inner_acquire_bits_client_xact_id)
    node T_1765 = eq(xact_iacq_client_id, io_inner_acquire_bits_client_id)
    node T_1766 = and(T_1764, T_1765)
    node T_1767 = and(T_1766, scoreboard_6)
    node T_1768 = eq(xact_iacq_addr_beat, io_inner_acquire_bits_addr_beat)
    node T_1769 = and(T_1767, T_1768)
    inst ignt_q of Queue_8
    node T_1797 = and(T_1611, io_alloc_iacq_should)
    node T_1798 = and(T_1797, io_inner_acquire_valid)
    node T_1800 = eq(T_1769, UInt<1>("h0"))
    node T_1801 = and(T_1800, scoreboard_6)
    node T_1803 = and(T_1801, T_1612)
    wire T_1812_0 : UInt<3>
    node T_1814 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1815 = and(io_inner_acquire_bits_is_builtin_type, T_1814)
    node T_1817 = eq(T_1815, UInt<1>("h0"))
    node T_1820 = or(T_1817, T_1643)
    node T_1821 = and(T_1803, T_1820)
    node T_1822 = or(T_1798, T_1821)
    node T_1823_client_xact_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_xact_id, ignt_q.io_enq_bits_client_xact_id)
    node T_1823_addr_beat = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_addr_beat, ignt_q.io_enq_bits_addr_beat)
    node T_1823_client_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_id, ignt_q.io_enq_bits_client_id)
    node T_1823_is_builtin_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_is_builtin_type, ignt_q.io_enq_bits_is_builtin_type)
    node T_1823_a_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_a_type, ignt_q.io_enq_bits_a_type)
    node T_1850 = gt(ignt_q.io_count, UInt<2>("h0"))
    node T_1852 = or(T_1653, io_alloc_iacq_should)
    wire T_1862_0 : UInt<3>
    wire T_1862_1 : UInt<3>
    wire T_1862_2 : UInt<3>
    node T_1864 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1865 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1866 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1867 = or(T_1864, T_1865)
    node T_1868 = or(T_1867, T_1866)
    node T_1869 = and(io_inner_acquire_bits_is_builtin_type, T_1868)
    node T_1870 = and(T_1612, T_1869)
    node T_1874 = mux(T_1870, UInt<8>("hff"), UInt<8>("h0"))
    node T_1875 = not(T_1874)
    node T_1877 = dshlw(UInt<8>("h1"), io_inner_acquire_bits_addr_beat)
    node T_1878 = not(T_1877)
    node T_1879 = or(T_1875, T_1878)
    node T_1880 = and(pending_put_data, T_1879)
    wire T_1890_0 : UInt<3>
    node T_1892 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1893 = and(io_inner_acquire_bits_is_builtin_type, T_1892)
    node T_1894 = and(T_1612, T_1893)
    node T_1897 = and(T_1894, T_1643)
    node T_1906 = mux(T_1897, UInt<8>("hfe"), UInt<8>("h0"))
    node T_1907 = or(T_1880, T_1906)
    node GEN_30 = mux(T_1852, T_1907, pending_put_data)
    node T_1915 = mul(UInt<4>("h8"), UInt<4>("h0"))
    node T_1917 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1918 = and(io_inner_acquire_bits_is_builtin_type, T_1917)
    node T_1920 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1921 = and(io_inner_acquire_bits_is_builtin_type, T_1920)
    node T_1922 = or(T_1918, T_1921)
    node T_1923 = bits(io_inner_acquire_bits_union, 5, 1)
    node T_1924 = mux(T_1922, UInt<5>("h1"), T_1923)
    node T_1925 = bits(io_inner_acquire_bits_union, 10, 8)
    node T_1926 = bits(io_inner_acquire_bits_union, 7, 6)
    wire T_1939_0 : UInt<3>
    wire T_1939_1 : UInt<3>
    wire T_1939_2 : UInt<3>
    node T_1941 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1942 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1943 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1944 = or(T_1941, T_1942)
    node T_1945 = or(T_1944, T_1943)
    node T_1946 = and(io_inner_acquire_bits_is_builtin_type, T_1945)
    node T_1947 = and(T_1612, T_1946)
    node T_1951 = mux(T_1947, UInt<8>("hff"), UInt<8>("h0"))
    node T_1952 = not(T_1951)
    node T_1956 = or(T_1952, T_1878)
    node T_1958 = mux(T_1921, T_1956, UInt<8>("h0"))
    node GEN_31 = mux(T_1798, io_inner_acquire_bits_addr_block, xact_addr_block)
    node GEN_32 = mux(T_1798, UInt<1>("h0"), xact_allocate)
    node GEN_33 = mux(T_1798, T_1915, xact_amo_shift_bytes)
    node GEN_34 = mux(T_1798, T_1924, xact_op_code)
    node GEN_35 = mux(T_1798, T_1925, xact_addr_byte)
    node GEN_36 = mux(T_1798, T_1926, xact_op_size)
    node GEN_37 = mux(T_1798, T_1958, GEN_30)
    node GEN_38 = mux(T_1798, UInt<8>("h0"), pending_ignt_data)
    node GEN_39 = mux(T_1798, UInt<4>("h5"), state)
    node scoreboard_0 = neq(pending_put_data, UInt<8>("h0"))
    wire T_1976_0 : UInt<3>
    node T_1978 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1979 = and(io_inner_acquire_bits_is_builtin_type, T_1978)
    node T_1980 = and(T_1767, T_1979)
    node T_1981 = or(T_1611, T_1980)
    node T_1982 = not(pending_ignt_data)
    node skip_outer_acquire = eq(T_1982, UInt<8>("h0"))
    node T_1991 = eq(UInt<3>("h4"), xact_iacq_a_type)
    node T_1992 = mux(T_1991, UInt<2>("h0"), UInt<2>("h2"))
    node T_1993 = eq(UInt<3>("h6"), xact_iacq_a_type)
    node T_1994 = mux(T_1993, UInt<2>("h0"), T_1992)
    node T_1995 = eq(UInt<3>("h5"), xact_iacq_a_type)
    node T_1996 = mux(T_1995, UInt<2>("h2"), T_1994)
    node T_1997 = eq(UInt<3>("h2"), xact_iacq_a_type)
    node T_1998 = mux(T_1997, UInt<2>("h0"), T_1996)
    node T_1999 = eq(UInt<3>("h0"), xact_iacq_a_type)
    node T_2000 = mux(T_1999, UInt<2>("h2"), T_1998)
    node T_2001 = eq(UInt<3>("h3"), xact_iacq_a_type)
    node T_2002 = mux(T_2001, UInt<2>("h0"), T_2000)
    node T_2003 = eq(UInt<3>("h1"), xact_iacq_a_type)
    node T_2004 = mux(T_2003, UInt<2>("h2"), T_2002)
    node T_2005 = mux(xact_iacq_is_builtin_type, T_2004, UInt<2>("h0"))
    wire T_2030_addr_block : UInt<26>
    wire T_2030_p_type : UInt<2>
    wire T_2030_client_id : UInt<1>
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h0"))
    node T_2056 = mux(T_2055, UInt<4>("h6"), UInt<4>("h7"))
    wire T_2065_pending : UInt<1>
    wire T_2065_up_idx : UInt<3>
    wire T_2065_up_done : UInt<1>
    wire T_2065_down_idx : UInt<3>
    wire T_2065_down_done : UInt<1>
    node T_2073 = and(io_inner_probe_ready, io_inner_probe_valid)
    node T_2074 = not(T_2073)
    node T_2076 = dshlw(UInt<2>("h1"), io_inner_probe_bits_client_id)
    node T_2077 = not(T_2076)
    node GEN_273 = pad(T_2074, 2)
    node T_2078 = or(GEN_273, T_2077)
    node GEN_274 = pad(pending_iprbs, 2)
    node T_2079 = and(GEN_274, T_2078)
    node T_2080 = eq(state, UInt<4>("h5"))
    node T_2083 = and(T_2080, pending_iprbs)
    reg T_2091 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2100 = and(io_inner_release_ready, io_inner_release_valid)
    node T_2103 = eq(io_inner_release_bits_voluntary, UInt<1>("h0"))
    node T_2104 = and(T_1653, T_2103)
    node T_2105 = and(T_2100, T_2104)
    node T_2107 = eq(io_inner_release_bits_r_type, UInt<3>("h0"))
    node T_2108 = eq(io_inner_release_bits_r_type, UInt<3>("h1"))
    node T_2109 = eq(io_inner_release_bits_r_type, UInt<3>("h2"))
    node T_2110 = or(T_2107, T_2108)
    node T_2111 = or(T_2110, T_2109)
    node T_2113 = and(T_2105, T_2111)
    reg T_2115 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2117 = eq(T_2115, UInt<3>("h7"))
    node T_2119 = add(T_2115, UInt<3>("h1"))
    node T_2120 = tail(T_2119, 1)
    node GEN_41 = mux(T_2113, T_2120, T_2115)
    node T_2121 = and(T_2113, T_2117)
    node T_2122 = mux(T_2111, T_2115, UInt<3>("h0"))
    node T_2123 = mux(T_2111, T_2121, T_2105)
    reg T_2125 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2127 = eq(T_2123, UInt<1>("h0"))
    node T_2128 = and(T_2073, T_2127)
    node T_2130 = add(T_2125, UInt<1>("h1"))
    node T_2131 = tail(T_2130, 1)
    node GEN_42 = mux(T_2128, T_2131, T_2125)
    node T_2133 = eq(T_2073, UInt<1>("h0"))
    node T_2134 = and(T_2123, T_2133)
    node T_2136 = sub(T_2125, UInt<1>("h1"))
    node T_2137 = tail(T_2136, 1)
    node GEN_43 = mux(T_2134, T_2137, GEN_42)
    node T_2139 = gt(T_2125, UInt<1>("h0"))
    node T_2143 = or(pending_iprbs, T_2065_pending)
    node T_2145 = eq(T_2143, UInt<1>("h0"))
    node T_2146 = and(T_2080, T_2145)
    node GEN_44 = mux(T_2146, T_2056, GEN_39)
    node T_2150 = mux(T_1611, io_alloc_irel_should, io_alloc_irel_matches)
    node T_2151 = and(T_2150, io_inner_release_bits_voluntary)
    node T_2156 = and(T_2100, T_2151)
    node T_2164 = and(T_2156, T_2111)
    reg T_2166 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2168 = eq(T_2166, UInt<3>("h7"))
    node T_2170 = add(T_2166, UInt<3>("h1"))
    node T_2171 = tail(T_2170, 1)
    node GEN_45 = mux(T_2164, T_2171, T_2166)
    node T_2172 = and(T_2164, T_2168)
    node T_2173 = mux(T_2111, T_2166, UInt<3>("h0"))
    node T_2174 = mux(T_2111, T_2172, T_2156)
    node T_2175 = and(io_inner_grant_ready, io_inner_grant_valid)
    node T_2178 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_2179 = and(io_inner_grant_bits_is_builtin_type, T_2178)
    node T_2180 = and(T_1653, T_2179)
    node T_2181 = and(T_2175, T_2180)
    wire T_2189_0 : UInt<3>
    node GEN_275 = pad(UInt<3>("h5"), 4)
    node T_2191 = eq(io_inner_grant_bits_g_type, GEN_275)
    node T_2193 = mux(io_inner_grant_bits_is_builtin_type, T_2191, T_2178)
    node T_2195 = and(T_2181, T_2193)
    reg T_2197 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2199 = eq(T_2197, UInt<3>("h7"))
    node T_2201 = add(T_2197, UInt<3>("h1"))
    node T_2202 = tail(T_2201, 1)
    node GEN_46 = mux(T_2195, T_2202, T_2197)
    node T_2203 = and(T_2195, T_2199)
    node T_2204 = mux(T_2193, T_2197, UInt<3>("h0"))
    node T_2205 = mux(T_2193, T_2203, T_2181)
    reg T_2207 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2209 = eq(T_2205, UInt<1>("h0"))
    node T_2210 = and(T_2174, T_2209)
    node T_2212 = add(T_2207, UInt<1>("h1"))
    node T_2213 = tail(T_2212, 1)
    node GEN_47 = mux(T_2210, T_2213, T_2207)
    node T_2215 = eq(T_2174, UInt<1>("h0"))
    node T_2216 = and(T_2205, T_2215)
    node T_2218 = sub(T_2207, UInt<1>("h1"))
    node T_2219 = tail(T_2218, 1)
    node GEN_48 = mux(T_2216, T_2219, GEN_47)
    node T_2221 = gt(T_2207, UInt<1>("h0"))
    node T_2223 = and(T_1611, io_alloc_irel_should)
    node T_2224 = and(T_2223, io_inner_release_valid)
    node GEN_49 = mux(T_2224, io_inner_release_bits_addr_block, GEN_31)
    node GEN_50 = mux(T_2224, UInt<8>("hff"), pending_irel_data)
    node GEN_51 = mux(T_2224, UInt<4>("h7"), GEN_44)
    node T_2231 = and(T_1751, io_inner_release_bits_voluntary)
    node T_2233 = eq(state, UInt<4>("h8"))
    node T_2234 = or(T_1611, T_2233)
    node T_2236 = eq(T_2234, UInt<1>("h0"))
    node T_2237 = and(T_2231, T_2236)
    node T_2239 = eq(all_pending_done, UInt<1>("h0"))
    node T_2240 = and(T_2237, T_2239)
    node T_2241 = and(io_outer_grant_ready, io_outer_grant_valid)
    node T_2243 = eq(T_2241, UInt<1>("h0"))
    node T_2244 = and(T_2240, T_2243)
    node T_2247 = eq(T_2175, UInt<1>("h0"))
    node T_2248 = and(T_2244, T_2247)
    node T_2250 = eq(vol_ignt_counter_pending, UInt<1>("h0"))
    node T_2251 = and(T_2248, T_2250)
    node T_2252 = dshr(pending_orel_data, io_inner_release_bits_addr_beat)
    node T_2253 = bits(T_2252, 0, 0)
    node T_2254 = and(sending_orel, T_2253)
    node T_2255 = and(io_outer_release_ready, io_outer_release_valid)
    node T_2256 = eq(io_inner_release_bits_addr_beat, io_outer_release_bits_addr_beat)
    node T_2257 = and(T_2255, T_2256)
    node T_2263 = or(T_2254, T_2257)
    node T_2264 = and(T_2111, T_2263)
    node T_2266 = eq(T_2264, UInt<1>("h0"))
    node T_2267 = and(T_2251, T_2266)
    node T_2271 = and(T_1751, T_2103)
    node T_2273 = and(T_2271, T_2080)
    node T_2274 = or(T_2267, T_2273)
    node T_2275 = and(T_2274, io_inner_release_valid)
    node T_2276 = or(T_2224, T_2275)
    node T_2277 = and(T_2276, io_inner_release_ready)
    node T_2286 = eq(T_2111, UInt<1>("h0"))
    node T_2288 = eq(io_inner_release_bits_addr_beat, UInt<3>("h0"))
    node T_2289 = or(T_2286, T_2288)
    node GEN_52 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_r_type, xact_vol_ir_r_type)
    node GEN_53 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_id, xact_vol_ir_src)
    node GEN_54 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_xact_id, xact_vol_ir_client_xact_id)
    node T_2303 = and(T_2100, T_2111)
    node T_2307 = mux(T_2303, UInt<8>("hff"), UInt<8>("h0"))
    node T_2308 = not(T_2307)
    node T_2310 = dshlw(UInt<8>("h1"), io_inner_release_bits_addr_beat)
    node T_2311 = not(T_2310)
    node T_2312 = or(T_2308, T_2311)
    node T_2314 = mux(T_2111, T_2312, UInt<8>("h0"))
    node GEN_55 = mux(T_2289, GEN_52, xact_vol_ir_r_type)
    node GEN_56 = mux(T_2289, GEN_53, xact_vol_ir_src)
    node GEN_57 = mux(T_2289, GEN_54, xact_vol_ir_client_xact_id)
    node GEN_58 = mux(T_2289, T_2314, GEN_50)
    node T_2316 = eq(T_2289, UInt<1>("h0"))
    node T_2333 = and(pending_irel_data, T_2312)
    node GEN_59 = mux(T_2316, T_2333, GEN_58)
    node GEN_60 = mux(T_2277, GEN_55, xact_vol_ir_r_type)
    node GEN_61 = mux(T_2277, GEN_56, xact_vol_ir_src)
    node GEN_62 = mux(T_2277, GEN_57, xact_vol_ir_client_xact_id)
    node GEN_63 = mux(T_2277, GEN_59, GEN_50)
    node T_2334 = eq(state, UInt<4>("h3"))
    node T_2335 = eq(state, UInt<4>("h4"))
    node T_2337 = eq(state, UInt<4>("h7"))
    node T_2338 = or(T_2334, T_2335)
    node T_2339 = or(T_2338, T_2080)
    node T_2340 = or(T_2339, T_2337)
    node T_2341 = and(T_2340, vol_ignt_counter_pending)
    node T_2343 = neq(pending_irel_data, UInt<8>("h0"))
    node T_2344 = or(T_2343, vol_ognt_counter_pending)
    node T_2346 = eq(T_2344, UInt<1>("h0"))
    node T_2347 = and(T_2341, T_2346)
    wire T_2379_addr_beat : UInt<3>
    wire T_2379_addr_block : UInt<26>
    wire T_2379_client_xact_id : UInt<1>
    wire T_2379_voluntary : UInt<1>
    wire T_2379_r_type : UInt<3>
    wire T_2379_data : UInt<64>
    wire T_2379_client_id : UInt<1>
    wire T_2440_addr_beat : UInt<3>
    wire T_2440_client_xact_id : UInt<1>
    wire T_2440_manager_xact_id : UInt<4>
    wire T_2440_is_builtin_type : UInt<1>
    wire T_2440_g_type : UInt<4>
    wire T_2440_data : UInt<64>
    wire T_2440_client_id : UInt<1>
    wire GEN_0 : UInt<8>
    node GEN_64 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_65 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), wmask_buffer_2, GEN_64)
    node GEN_66 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), wmask_buffer_3, GEN_65)
    node GEN_67 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), wmask_buffer_4, GEN_66)
    node GEN_68 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), wmask_buffer_5, GEN_67)
    node GEN_69 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), wmask_buffer_6, GEN_68)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), wmask_buffer_7, GEN_69)
    node T_2521 = bits(GEN_0, 0, 0)
    wire GEN_1 : UInt<8>
    node T_2522 = bits(GEN_1, 1, 1)
    wire GEN_2 : UInt<8>
    node T_2523 = bits(GEN_2, 2, 2)
    wire GEN_3 : UInt<8>
    node T_2524 = bits(GEN_3, 3, 3)
    wire GEN_4 : UInt<8>
    node T_2525 = bits(GEN_4, 4, 4)
    wire GEN_5 : UInt<8>
    node T_2526 = bits(GEN_5, 5, 5)
    wire GEN_6 : UInt<8>
    node T_2527 = bits(GEN_6, 6, 6)
    wire GEN_7 : UInt<8>
    node T_2528 = bits(GEN_7, 7, 7)
    node T_2532 = mux(T_2521, UInt<8>("hff"), UInt<8>("h0"))
    node T_2536 = mux(T_2522, UInt<8>("hff"), UInt<8>("h0"))
    node T_2540 = mux(T_2523, UInt<8>("hff"), UInt<8>("h0"))
    node T_2544 = mux(T_2524, UInt<8>("hff"), UInt<8>("h0"))
    node T_2548 = mux(T_2525, UInt<8>("hff"), UInt<8>("h0"))
    node T_2552 = mux(T_2526, UInt<8>("hff"), UInt<8>("h0"))
    node T_2556 = mux(T_2527, UInt<8>("hff"), UInt<8>("h0"))
    node T_2560 = mux(T_2528, UInt<8>("hff"), UInt<8>("h0"))
    node T_2561 = cat(T_2536, T_2532)
    node T_2562 = cat(T_2544, T_2540)
    node T_2563 = cat(T_2562, T_2561)
    node T_2564 = cat(T_2552, T_2548)
    node T_2565 = cat(T_2560, T_2556)
    node T_2566 = cat(T_2565, T_2564)
    node T_2567 = cat(T_2566, T_2563)
    node T_2568 = not(T_2567)
    node T_2569 = and(T_2568, io_inner_release_bits_data)
    wire GEN_8 : UInt<64>
    node GEN_71 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_72 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), data_buffer_2, GEN_71)
    node GEN_73 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), data_buffer_3, GEN_72)
    node GEN_74 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), data_buffer_4, GEN_73)
    node GEN_75 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), data_buffer_5, GEN_74)
    node GEN_76 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), data_buffer_6, GEN_75)
    node GEN_77 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), data_buffer_7, GEN_76)
    node T_2570 = and(T_2567, GEN_8)
    node T_2571 = or(T_2569, T_2570)
    wire GEN_9 : UInt<64>
    node GEN_78 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_0)
    node GEN_79 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_1)
    node GEN_80 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_2)
    node GEN_81 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_3)
    node GEN_82 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_4)
    node GEN_83 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_5)
    node GEN_84 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_6)
    node GEN_85 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_7)
    wire GEN_10 : UInt<8>
    node GEN_86 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_0)
    node GEN_87 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_1)
    node GEN_88 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_2)
    node GEN_89 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_3)
    node GEN_90 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_4)
    node GEN_91 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_5)
    node GEN_92 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_6)
    node GEN_93 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_7)
    node GEN_94 = mux(T_2303, GEN_78, data_buffer_0)
    node GEN_95 = mux(T_2303, GEN_79, data_buffer_1)
    node GEN_96 = mux(T_2303, GEN_80, data_buffer_2)
    node GEN_97 = mux(T_2303, GEN_81, data_buffer_3)
    node GEN_98 = mux(T_2303, GEN_82, data_buffer_4)
    node GEN_99 = mux(T_2303, GEN_83, data_buffer_5)
    node GEN_100 = mux(T_2303, GEN_84, data_buffer_6)
    node GEN_101 = mux(T_2303, GEN_85, data_buffer_7)
    node GEN_102 = mux(T_2303, GEN_86, wmask_buffer_0)
    node GEN_103 = mux(T_2303, GEN_87, wmask_buffer_1)
    node GEN_104 = mux(T_2303, GEN_88, wmask_buffer_2)
    node GEN_105 = mux(T_2303, GEN_89, wmask_buffer_3)
    node GEN_106 = mux(T_2303, GEN_90, wmask_buffer_4)
    node GEN_107 = mux(T_2303, GEN_91, wmask_buffer_5)
    node GEN_108 = mux(T_2303, GEN_92, wmask_buffer_6)
    node GEN_109 = mux(T_2303, GEN_93, wmask_buffer_7)
    wire T_2604_state : UInt<2>
    node T_2631 = or(T_1653, io_alloc_irel_should)
    node T_2647 = and(T_2307, T_2310)
    node T_2648 = or(pending_orel_data, T_2647)
    node T_2651 = eq(io_outer_release_bits_r_type, UInt<3>("h0"))
    node T_2652 = eq(io_outer_release_bits_r_type, UInt<3>("h1"))
    node T_2653 = eq(io_outer_release_bits_r_type, UInt<3>("h2"))
    node T_2654 = or(T_2651, T_2652)
    node T_2655 = or(T_2654, T_2653)
    node T_2656 = and(T_2255, T_2655)
    node T_2660 = mux(T_2656, UInt<8>("hff"), UInt<8>("h0"))
    node T_2661 = not(T_2660)
    node T_2663 = dshlw(UInt<8>("h1"), io_outer_release_bits_addr_beat)
    node T_2664 = not(T_2663)
    node T_2665 = or(T_2661, T_2664)
    node T_2666 = and(T_2648, T_2665)
    node GEN_110 = mux(T_2631, T_2666, pending_orel_data)
    node T_2677 = eq(T_2655, UInt<1>("h0"))
    node T_2679 = eq(io_outer_release_bits_addr_beat, UInt<3>("h0"))
    node T_2680 = or(T_2677, T_2679)
    node GEN_112 = mux(T_2680, UInt<1>("h1"), sending_orel)
    node T_2692 = eq(io_outer_release_bits_addr_beat, UInt<3>("h7"))
    node T_2693 = or(T_2677, T_2692)
    node GEN_113 = mux(T_2693, UInt<1>("h0"), GEN_112)
    node GEN_114 = mux(T_2255, GEN_113, sending_orel)
    node GEN_115 = mux(T_2255, UInt<1>("h0"), pending_orel_send)
    node T_2702 = and(T_2255, io_outer_release_bits_voluntary)
    node T_2710 = and(T_2702, T_2655)
    reg T_2712 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2714 = eq(T_2712, UInt<3>("h7"))
    node T_2716 = add(T_2712, UInt<3>("h1"))
    node T_2717 = tail(T_2716, 1)
    node GEN_116 = mux(T_2710, T_2717, T_2712)
    node T_2718 = and(T_2710, T_2714)
    node T_2719 = mux(T_2655, T_2712, UInt<3>("h0"))
    node T_2720 = mux(T_2655, T_2718, T_2702)
    node T_2723 = eq(io_outer_grant_bits_g_type, UInt<4>("h0"))
    node T_2724 = and(io_outer_grant_bits_is_builtin_type, T_2723)
    node T_2725 = and(T_2241, T_2724)
    wire T_2733_0 : UInt<3>
    node GEN_276 = pad(UInt<3>("h5"), 4)
    node T_2735 = eq(io_outer_grant_bits_g_type, GEN_276)
    node T_2737 = mux(io_outer_grant_bits_is_builtin_type, T_2735, T_2723)
    node T_2739 = and(T_2725, T_2737)
    reg T_2741 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2743 = eq(T_2741, UInt<3>("h7"))
    node T_2745 = add(T_2741, UInt<3>("h1"))
    node T_2746 = tail(T_2745, 1)
    node GEN_117 = mux(T_2739, T_2746, T_2741)
    node T_2747 = and(T_2739, T_2743)
    node T_2748 = mux(T_2737, T_2741, UInt<3>("h0"))
    node T_2749 = mux(T_2737, T_2747, T_2725)
    reg T_2751 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2753 = eq(T_2749, UInt<1>("h0"))
    node T_2754 = and(T_2720, T_2753)
    node T_2756 = add(T_2751, UInt<1>("h1"))
    node T_2757 = tail(T_2756, 1)
    node GEN_118 = mux(T_2754, T_2757, T_2751)
    node T_2759 = eq(T_2720, UInt<1>("h0"))
    node T_2760 = and(T_2749, T_2759)
    node T_2762 = sub(T_2751, UInt<1>("h1"))
    node T_2763 = tail(T_2762, 1)
    node GEN_119 = mux(T_2760, T_2763, GEN_118)
    node T_2765 = gt(T_2751, UInt<1>("h0"))
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter_up_idx)
    node T_2775 = bits(T_2774, 0, 0)
    node T_2776 = mux(T_2655, T_2775, pending_orel_send)
    node T_2777 = and(T_2337, T_2776)
    node T_2791 = eq(UInt<2>("h2"), UInt<2>("h2"))
    node T_2792 = mux(T_2791, UInt<3>("h0"), UInt<3>("h3"))
    wire T_2828_addr_beat : UInt<3>
    wire T_2828_addr_block : UInt<26>
    wire T_2828_client_xact_id : UInt<4>
    wire T_2828_voluntary : UInt<1>
    wire T_2828_r_type : UInt<3>
    wire T_2828_data : UInt<64>
    wire GEN_11 : UInt<64>
    node GEN_120 = mux(eq(UInt<3>("h1"), vol_ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_121 = mux(eq(UInt<3>("h2"), vol_ognt_counter_up_idx), data_buffer_2, GEN_120)
    node GEN_122 = mux(eq(UInt<3>("h3"), vol_ognt_counter_up_idx), data_buffer_3, GEN_121)
    node GEN_123 = mux(eq(UInt<3>("h4"), vol_ognt_counter_up_idx), data_buffer_4, GEN_122)
    node GEN_124 = mux(eq(UInt<3>("h5"), vol_ognt_counter_up_idx), data_buffer_5, GEN_123)
    node GEN_125 = mux(eq(UInt<3>("h6"), vol_ognt_counter_up_idx), data_buffer_6, GEN_124)
    node GEN_126 = mux(eq(UInt<3>("h7"), vol_ognt_counter_up_idx), data_buffer_7, GEN_125)
    node T_2857 = eq(xact_iacq_is_builtin_type, UInt<1>("h0"))
    node T_2860 = and(io_outer_acquire_ready, io_outer_acquire_valid)
    wire T_2871_0 : UInt<3>
    node T_2873 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_2874 = and(io_outer_acquire_bits_is_builtin_type, T_2873)
    node T_2875 = and(T_2860, T_2874)
    reg T_2877 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2879 = eq(T_2877, UInt<3>("h7"))
    node T_2881 = add(T_2877, UInt<3>("h1"))
    node T_2882 = tail(T_2881, 1)
    node GEN_128 = mux(T_2875, T_2882, T_2877)
    node T_2883 = and(T_2875, T_2879)
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat)
    node T_2885 = mux(T_2874, T_2883, T_2860)
    node T_2891 = eq(T_2724, UInt<1>("h0"))
    node T_2892 = and(T_2241, T_2891)
    wire T_2900_0 : UInt<3>
    node GEN_277 = pad(UInt<3>("h5"), 4)
    node T_2902 = eq(io_outer_grant_bits_g_type, GEN_277)
    node T_2904 = mux(io_outer_grant_bits_is_builtin_type, T_2902, T_2723)
    node T_2906 = and(T_2892, T_2904)
    reg T_2908 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2910 = eq(T_2908, UInt<3>("h7"))
    node T_2912 = add(T_2908, UInt<3>("h1"))
    node T_2913 = tail(T_2912, 1)
    node GEN_129 = mux(T_2906, T_2913, T_2908)
    node T_2914 = and(T_2906, T_2910)
    node T_2915 = mux(T_2904, T_2908, xact_addr_beat)
    node T_2916 = mux(T_2904, T_2914, T_2892)
    reg T_2918 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2920 = eq(T_2916, UInt<1>("h0"))
    node T_2921 = and(T_2885, T_2920)
    node T_2923 = add(T_2918, UInt<1>("h1"))
    node T_2924 = tail(T_2923, 1)
    node GEN_130 = mux(T_2921, T_2924, T_2918)
    node T_2926 = eq(T_2885, UInt<1>("h0"))
    node T_2927 = and(T_2916, T_2926)
    node T_2929 = sub(T_2918, UInt<1>("h1"))
    node T_2930 = tail(T_2929, 1)
    node GEN_131 = mux(T_2927, T_2930, GEN_130)
    node T_2932 = gt(T_2918, UInt<1>("h0"))
    node T_2933 = eq(state, UInt<4>("h6"))
    node T_2937 = dshr(pending_put_data, ognt_counter_up_idx)
    node T_2938 = bits(T_2937, 0, 0)
    node T_2940 = eq(T_2938, UInt<1>("h0"))
    wire T_2949_0 : UInt<3>
    wire T_2949_1 : UInt<3>
    wire T_2949_2 : UInt<3>
    node T_2967 = or(xact_allocate, T_2940)
    node T_2968 = and(T_2933, T_2967)
    node T_2971 = eq(xact_op_code, UInt<5>("h1"))
    node T_2972 = eq(xact_op_code, UInt<5>("h7"))
    node T_2973 = or(T_2971, T_2972)
    node T_2974 = bits(xact_op_code, 3, 3)
    node T_2975 = eq(xact_op_code, UInt<5>("h4"))
    node T_2976 = or(T_2974, T_2975)
    node T_2977 = or(T_2973, T_2976)
    node T_2978 = eq(xact_op_code, UInt<5>("h3"))
    node T_2979 = or(T_2977, T_2978)
    node T_2980 = eq(xact_op_code, UInt<5>("h6"))
    node T_2981 = or(T_2979, T_2980)
    node T_2984 = cat(xact_op_code, UInt<1>("h1"))
    wire T_3015_addr_block : UInt<26>
    wire T_3015_client_xact_id : UInt<4>
    wire T_3015_addr_beat : UInt<3>
    wire T_3015_is_builtin_type : UInt<1>
    wire T_3015_a_type : UInt<3>
    wire T_3015_union : UInt<11>
    wire T_3015_data : UInt<64>
    wire GEN_12 : UInt<8>
    node GEN_132 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), wmask_buffer_1, wmask_buffer_0)
    node GEN_133 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), wmask_buffer_2, GEN_132)
    node GEN_134 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), wmask_buffer_3, GEN_133)
    node GEN_135 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), wmask_buffer_4, GEN_134)
    node GEN_136 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), wmask_buffer_5, GEN_135)
    node GEN_137 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), wmask_buffer_6, GEN_136)
    node GEN_138 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), wmask_buffer_7, GEN_137)
    node T_3080 = cat(xact_op_code, UInt<1>("h0"))
    node T_3081 = cat(xact_addr_byte, xact_op_size)
    node T_3082 = cat(T_3081, T_3080)
    node T_3084 = cat(xact_op_size, xact_op_code)
    node T_3085 = cat(T_3084, UInt<1>("h0"))
    node T_3087 = cat(GEN_12, UInt<1>("h0"))
    node T_3099 = mux(T_1993, UInt<6>("h2"), UInt<6>("h0"))
    node T_3101 = mux(T_1995, UInt<6>("h0"), T_3099)
    node T_3103 = mux(T_1991, T_3082, pad(T_3101, 11))
    node T_3105 = mux(T_2001, pad(T_3087, 11), T_3103)
    node T_3107 = mux(T_1997, pad(T_3087, 11), T_3105)
    node T_3109 = mux(T_2003, pad(T_3085, 11), T_3107)
    node T_3111 = mux(T_1999, T_3082, T_3109)
    wire T_3140_addr_block : UInt<26>
    wire T_3140_client_xact_id : UInt<4>
    wire T_3140_addr_beat : UInt<3>
    wire T_3140_is_builtin_type : UInt<1>
    wire T_3140_a_type : UInt<3>
    wire T_3140_union : UInt<11>
    wire T_3140_data : UInt<64>
    wire GEN_13 : UInt<64>
    node GEN_139 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_140 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), data_buffer_2, GEN_139)
    node GEN_141 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), data_buffer_3, GEN_140)
    node GEN_142 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), data_buffer_4, GEN_141)
    node GEN_143 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), data_buffer_5, GEN_142)
    node GEN_144 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), data_buffer_6, GEN_143)
    node GEN_145 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), data_buffer_7, GEN_144)
    node T_3168_addr_block = mux(T_2857, T_3015_addr_block, T_3140_addr_block)
    node T_3168_client_xact_id = mux(T_2857, UInt<4>("h0"), UInt<4>("h0"))
    node T_3168_addr_beat = mux(T_2857, UInt<3>("h0"), T_3140_addr_beat)
    node T_3168_is_builtin_type = mux(T_2857, UInt<1>("h0"), UInt<1>("h1"))
    node T_3168_a_type = mux(T_2857, T_3015_a_type, T_3140_a_type)
    node T_3168_union = mux(T_2857, T_3015_union, T_3140_union)
    node T_3168_data = mux(T_2857, UInt<64>("h0"), T_3140_data)
    node T_3197 = and(T_2933, ognt_counter_up_done)
    node GEN_146 = mux(T_3197, UInt<4>("h7"), GEN_51)
    node GEN_147 = mux(ognt_counter_pending, UInt<1>("h1"), vol_ognt_counter_pending)
    wire T_3207_0 : UInt<3>
    wire T_3207_1 : UInt<3>
    node GEN_278 = pad(UInt<3>("h5"), 4)
    node T_3209 = eq(io_outer_grant_bits_g_type, GEN_278)
    node GEN_279 = pad(UInt<3>("h4"), 4)
    node T_3210 = eq(io_outer_grant_bits_g_type, GEN_279)
    node T_3211 = or(T_3209, T_3210)
    node T_3213 = mux(io_outer_grant_bits_is_builtin_type, T_3211, T_2723)
    node T_3214 = and(T_2241, T_3213)
    wire GEN_14 : UInt<8>
    node GEN_148 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_149 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), wmask_buffer_2, GEN_148)
    node GEN_150 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), wmask_buffer_3, GEN_149)
    node GEN_151 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), wmask_buffer_4, GEN_150)
    node GEN_152 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), wmask_buffer_5, GEN_151)
    node GEN_153 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), wmask_buffer_6, GEN_152)
    node GEN_154 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), wmask_buffer_7, GEN_153)
    node T_3215 = bits(GEN_14, 0, 0)
    wire GEN_15 : UInt<8>
    node T_3216 = bits(GEN_15, 1, 1)
    wire GEN_16 : UInt<8>
    node T_3217 = bits(GEN_16, 2, 2)
    wire GEN_17 : UInt<8>
    node T_3218 = bits(GEN_17, 3, 3)
    wire GEN_18 : UInt<8>
    node T_3219 = bits(GEN_18, 4, 4)
    wire GEN_19 : UInt<8>
    node T_3220 = bits(GEN_19, 5, 5)
    wire GEN_20 : UInt<8>
    node T_3221 = bits(GEN_20, 6, 6)
    wire GEN_21 : UInt<8>
    node T_3222 = bits(GEN_21, 7, 7)
    node T_3226 = mux(T_3215, UInt<8>("hff"), UInt<8>("h0"))
    node T_3230 = mux(T_3216, UInt<8>("hff"), UInt<8>("h0"))
    node T_3234 = mux(T_3217, UInt<8>("hff"), UInt<8>("h0"))
    node T_3238 = mux(T_3218, UInt<8>("hff"), UInt<8>("h0"))
    node T_3242 = mux(T_3219, UInt<8>("hff"), UInt<8>("h0"))
    node T_3246 = mux(T_3220, UInt<8>("hff"), UInt<8>("h0"))
    node T_3250 = mux(T_3221, UInt<8>("hff"), UInt<8>("h0"))
    node T_3254 = mux(T_3222, UInt<8>("hff"), UInt<8>("h0"))
    node T_3255 = cat(T_3230, T_3226)
    node T_3256 = cat(T_3238, T_3234)
    node T_3257 = cat(T_3256, T_3255)
    node T_3258 = cat(T_3246, T_3242)
    node T_3259 = cat(T_3254, T_3250)
    node T_3260 = cat(T_3259, T_3258)
    node T_3261 = cat(T_3260, T_3257)
    node T_3262 = not(T_3261)
    node T_3263 = and(T_3262, io_outer_grant_bits_data)
    wire GEN_22 : UInt<64>
    node GEN_155 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_156 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), data_buffer_2, GEN_155)
    node GEN_157 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), data_buffer_3, GEN_156)
    node GEN_158 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), data_buffer_4, GEN_157)
    node GEN_159 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), data_buffer_5, GEN_158)
    node GEN_160 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), data_buffer_6, GEN_159)
    node GEN_161 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), data_buffer_7, GEN_160)
    node T_3264 = and(T_3261, GEN_22)
    node T_3265 = or(T_3263, T_3264)
    wire GEN_23 : UInt<64>
    node GEN_162 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), GEN_23, GEN_94)
    node GEN_163 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), GEN_23, GEN_95)
    node GEN_164 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), GEN_23, GEN_96)
    node GEN_165 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), GEN_23, GEN_97)
    node GEN_166 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), GEN_23, GEN_98)
    node GEN_167 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), GEN_23, GEN_99)
    node GEN_168 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), GEN_23, GEN_100)
    node GEN_169 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), GEN_23, GEN_101)
    wire GEN_24 : UInt<8>
    node GEN_170 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_102)
    node GEN_171 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_103)
    node GEN_172 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_104)
    node GEN_173 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_105)
    node GEN_174 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_106)
    node GEN_175 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_107)
    node GEN_176 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_108)
    node GEN_177 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_109)
    node GEN_178 = mux(T_3214, GEN_162, GEN_94)
    node GEN_179 = mux(T_3214, GEN_163, GEN_95)
    node GEN_180 = mux(T_3214, GEN_164, GEN_96)
    node GEN_181 = mux(T_3214, GEN_165, GEN_97)
    node GEN_182 = mux(T_3214, GEN_166, GEN_98)
    node GEN_183 = mux(T_3214, GEN_167, GEN_99)
    node GEN_184 = mux(T_3214, GEN_168, GEN_100)
    node GEN_185 = mux(T_3214, GEN_169, GEN_101)
    node GEN_186 = mux(T_3214, GEN_170, GEN_102)
    node GEN_187 = mux(T_3214, GEN_171, GEN_103)
    node GEN_188 = mux(T_3214, GEN_172, GEN_104)
    node GEN_189 = mux(T_3214, GEN_173, GEN_105)
    node GEN_190 = mux(T_3214, GEN_174, GEN_106)
    node GEN_191 = mux(T_3214, GEN_175, GEN_107)
    node GEN_192 = mux(T_3214, GEN_176, GEN_108)
    node GEN_193 = mux(T_3214, GEN_177, GEN_109)
    node T_3268 = or(scoreboard_3, ognt_counter_pending)
    node T_3269 = or(T_3268, vol_ognt_counter_pending)
    node T_3281 = eq(T_2179, UInt<1>("h0"))
    node T_3283 = and(T_2175, T_3281)
    wire T_3291_0 : UInt<3>
    node GEN_280 = pad(UInt<3>("h5"), 4)
    node T_3293 = eq(io_inner_grant_bits_g_type, GEN_280)
    node T_3295 = mux(io_inner_grant_bits_is_builtin_type, T_3293, T_2178)
    node T_3297 = and(T_3283, T_3295)
    reg T_3299 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3301 = eq(T_3299, UInt<3>("h7"))
    node T_3303 = add(T_3299, UInt<3>("h1"))
    node T_3304 = tail(T_3303, 1)
    node GEN_194 = mux(T_3297, T_3304, T_3299)
    node T_3305 = and(T_3297, T_3301)
    node T_3306 = mux(T_3295, T_3299, UInt<3>("h0"))
    node T_3307 = mux(T_3295, T_3305, T_3283)
    node T_3308 = and(io_inner_finish_ready, io_inner_finish_valid)
    reg T_3314 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_3324 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_3326 = eq(T_3308, UInt<1>("h0"))
    node T_3327 = and(T_3307, T_3326)
    node T_3329 = add(T_3324, UInt<1>("h1"))
    node T_3330 = tail(T_3329, 1)
    node GEN_196 = mux(T_3327, T_3330, T_3324)
    node T_3332 = eq(T_3307, UInt<1>("h0"))
    node T_3333 = and(T_3308, T_3332)
    node T_3335 = sub(T_3324, UInt<1>("h1"))
    node T_3336 = tail(T_3335, 1)
    node GEN_197 = mux(T_3333, T_3336, GEN_196)
    node T_3338 = gt(T_3324, UInt<1>("h0"))
    node T_3343 = eq(T_1798, UInt<1>("h0"))
    node T_3360 = or(pending_ignt_data, T_2647)
    wire T_3370_0 : UInt<3>
    wire T_3370_1 : UInt<3>
    node GEN_281 = pad(UInt<3>("h5"), 4)
    node T_3372 = eq(io_outer_grant_bits_g_type, GEN_281)
    node GEN_282 = pad(UInt<3>("h4"), 4)
    node T_3373 = eq(io_outer_grant_bits_g_type, GEN_282)
    node T_3374 = or(T_3372, T_3373)
    node T_3376 = mux(io_outer_grant_bits_is_builtin_type, T_3374, T_2723)
    node T_3377 = and(T_2241, T_3376)
    node T_3382 = mux(T_3377, UInt<8>("hff"), UInt<8>("h0"))
    node T_3384 = dshlw(UInt<8>("h1"), io_outer_grant_bits_addr_beat)
    node T_3385 = and(T_3382, T_3384)
    node T_3386 = or(T_3360, T_3385)
    node GEN_198 = mux(T_3343, T_3386, GEN_38)
    node T_3389 = eq(state, UInt<4>("h1"))
    node T_3390 = or(T_1611, T_3389)
    node T_3393 = or(T_3390, scoreboard_0)
    node T_3395 = eq(T_3393, UInt<1>("h0"))
    node T_3412 = eq(UInt<3>("h6"), ignt_q.io_deq_bits_a_type)
    node T_3413 = mux(T_3412, UInt<3>("h1"), UInt<3>("h3"))
    node T_3414 = eq(UInt<3>("h5"), ignt_q.io_deq_bits_a_type)
    node T_3415 = mux(T_3414, UInt<3>("h1"), T_3413)
    node T_3416 = eq(UInt<3>("h4"), ignt_q.io_deq_bits_a_type)
    node T_3417 = mux(T_3416, UInt<3>("h4"), T_3415)
    node T_3418 = eq(UInt<3>("h3"), ignt_q.io_deq_bits_a_type)
    node T_3419 = mux(T_3418, UInt<3>("h3"), T_3417)
    node T_3420 = eq(UInt<3>("h2"), ignt_q.io_deq_bits_a_type)
    node T_3421 = mux(T_3420, UInt<3>("h3"), T_3419)
    node T_3422 = eq(UInt<3>("h1"), ignt_q.io_deq_bits_a_type)
    node T_3423 = mux(T_3422, UInt<3>("h5"), T_3421)
    node T_3424 = eq(UInt<3>("h0"), ignt_q.io_deq_bits_a_type)
    node T_3425 = mux(T_3424, UInt<3>("h4"), T_3423)
    node T_3426 = mux(ignt_q.io_deq_bits_is_builtin_type, T_3425, UInt<3>("h0"))
    wire T_3455_addr_beat : UInt<3>
    wire T_3455_client_xact_id : UInt<1>
    wire T_3455_manager_xact_id : UInt<4>
    wire T_3455_is_builtin_type : UInt<1>
    wire T_3455_g_type : UInt<4>
    wire T_3455_data : UInt<64>
    wire T_3455_client_id : UInt<1>
    wire GEN_25 : UInt<64>
    node GEN_199 = mux(eq(UInt<3>("h1"), ignt_data_idx), data_buffer_1, data_buffer_0)
    node GEN_200 = mux(eq(UInt<3>("h2"), ignt_data_idx), data_buffer_2, GEN_199)
    node GEN_201 = mux(eq(UInt<3>("h3"), ignt_data_idx), data_buffer_3, GEN_200)
    node GEN_202 = mux(eq(UInt<3>("h4"), ignt_data_idx), data_buffer_4, GEN_201)
    node GEN_203 = mux(eq(UInt<3>("h5"), ignt_data_idx), data_buffer_5, GEN_202)
    node GEN_204 = mux(eq(UInt<3>("h6"), ignt_data_idx), data_buffer_6, GEN_203)
    node GEN_205 = mux(eq(UInt<3>("h7"), ignt_data_idx), data_buffer_7, GEN_204)
    wire T_3491_0 : UInt<3>
    node GEN_283 = pad(UInt<3>("h5"), 4)
    node T_3493 = eq(io_inner_grant_bits_g_type, GEN_283)
    node T_3495 = mux(io_inner_grant_bits_is_builtin_type, T_3493, T_2178)
    node T_3497 = and(T_2175, T_3495)
    reg T_3499 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3501 = eq(T_3499, UInt<3>("h7"))
    node T_3503 = add(T_3499, UInt<3>("h1"))
    node T_3504 = tail(T_3503, 1)
    node GEN_206 = mux(T_3497, T_3504, T_3499)
    node T_3505 = and(T_3497, T_3501)
    node T_3506 = mux(T_3495, T_3499, ignt_q.io_deq_bits_addr_beat)
    node T_3507 = mux(T_3495, T_3505, T_2175)
    node T_3512 = and(T_2337, scoreboard_6)
    node T_3514 = eq(T_3269, UInt<1>("h0"))
    wire T_3522_0 : UInt<3>
    wire T_3522_1 : UInt<3>
    node GEN_284 = pad(UInt<3>("h5"), 4)
    node T_3524 = eq(io_inner_grant_bits_g_type, GEN_284)
    node GEN_285 = pad(UInt<3>("h4"), 4)
    node T_3525 = eq(io_inner_grant_bits_g_type, GEN_285)
    node T_3526 = or(T_3524, T_3525)
    node T_3528 = mux(io_inner_grant_bits_is_builtin_type, T_3526, T_2178)
    node T_3529 = dshr(pending_ignt_data, ignt_data_idx)
    node T_3530 = bits(T_3529, 0, 0)
    node T_3532 = mux(T_3528, T_3530, T_3395)
    node T_3533 = and(T_3514, T_3532)
    node GEN_207 = mux(T_3512, T_3533, T_2347)
    node GEN_208 = mux(T_2250, ignt_data_done, UInt<1>("h0"))
    node GEN_209 = mux(T_2250, ignt_data_idx, UInt<3>("h0"))
    node GEN_210 = mux(T_2250, T_3455_client_xact_id, T_2440_client_xact_id)
    node GEN_211 = mux(T_2250, UInt<4>("h5"), UInt<4>("h0"))
    node GEN_212 = mux(T_2250, T_3455_is_builtin_type, UInt<1>("h1"))
    node GEN_213 = mux(T_2250, T_3455_g_type, UInt<4>("h0"))
    node GEN_214 = mux(T_2250, T_3455_data, UInt<64>("h0"))
    node GEN_215 = mux(T_2250, T_3455_client_id, T_2440_client_id)
    node GEN_216 = mux(T_2250, GEN_207, T_2347)
    node T_3540 = not(io_incoherent_0)
    node GEN_217 = mux(T_1798, pad(T_3540, 2), T_2079)
    node T_3551 = and(T_1767, io_inner_acquire_valid)
    node T_3552 = or(T_1798, T_3551)
    wire T_3562_0 : UInt<3>
    wire T_3562_1 : UInt<3>
    wire T_3562_2 : UInt<3>
    node T_3564 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_3565 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_3566 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3567 = or(T_3564, T_3565)
    node T_3568 = or(T_3567, T_3566)
    node T_3569 = and(io_inner_acquire_bits_is_builtin_type, T_3568)
    node T_3570 = and(T_1612, T_3569)
    node T_3571 = and(T_3570, T_3552)
    node T_3573 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3574 = and(io_inner_acquire_bits_is_builtin_type, T_3573)
    node T_3603 = or(T_1921, T_1918)
    node T_3604 = bits(io_inner_acquire_bits_union, 8, 1)
    node T_3606 = mux(T_3603, T_3604, UInt<8>("h0"))
    node T_3607 = mux(T_3574, UInt<8>("hff"), T_3606)
    node T_3608 = bits(T_3607, 0, 0)
    node T_3609 = bits(T_3607, 1, 1)
    node T_3610 = bits(T_3607, 2, 2)
    node T_3611 = bits(T_3607, 3, 3)
    node T_3612 = bits(T_3607, 4, 4)
    node T_3613 = bits(T_3607, 5, 5)
    node T_3614 = bits(T_3607, 6, 6)
    node T_3615 = bits(T_3607, 7, 7)
    node T_3619 = mux(T_3608, UInt<8>("hff"), UInt<8>("h0"))
    node T_3623 = mux(T_3609, UInt<8>("hff"), UInt<8>("h0"))
    node T_3627 = mux(T_3610, UInt<8>("hff"), UInt<8>("h0"))
    node T_3631 = mux(T_3611, UInt<8>("hff"), UInt<8>("h0"))
    node T_3635 = mux(T_3612, UInt<8>("hff"), UInt<8>("h0"))
    node T_3639 = mux(T_3613, UInt<8>("hff"), UInt<8>("h0"))
    node T_3643 = mux(T_3614, UInt<8>("hff"), UInt<8>("h0"))
    node T_3647 = mux(T_3615, UInt<8>("hff"), UInt<8>("h0"))
    node T_3648 = cat(T_3623, T_3619)
    node T_3649 = cat(T_3631, T_3627)
    node T_3650 = cat(T_3649, T_3648)
    node T_3651 = cat(T_3639, T_3635)
    node T_3652 = cat(T_3647, T_3643)
    node T_3653 = cat(T_3652, T_3651)
    node T_3654 = cat(T_3653, T_3650)
    node T_3655 = not(T_3654)
    wire GEN_26 : UInt<64>
    node GEN_218 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_219 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), data_buffer_2, GEN_218)
    node GEN_220 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), data_buffer_3, GEN_219)
    node GEN_221 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), data_buffer_4, GEN_220)
    node GEN_222 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), data_buffer_5, GEN_221)
    node GEN_223 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), data_buffer_6, GEN_222)
    node GEN_224 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), data_buffer_7, GEN_223)
    node T_3656 = and(T_3655, GEN_26)
    node T_3657 = and(T_3654, io_inner_acquire_bits_data)
    node T_3658 = or(T_3656, T_3657)
    wire GEN_27 : UInt<64>
    node GEN_225 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_178)
    node GEN_226 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_179)
    node GEN_227 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_180)
    node GEN_228 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_181)
    node GEN_229 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_182)
    node GEN_230 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_183)
    node GEN_231 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_184)
    node GEN_232 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_185)
    wire GEN_28 : UInt<8>
    node GEN_233 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_234 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), wmask_buffer_2, GEN_233)
    node GEN_235 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), wmask_buffer_3, GEN_234)
    node GEN_236 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), wmask_buffer_4, GEN_235)
    node GEN_237 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), wmask_buffer_5, GEN_236)
    node GEN_238 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), wmask_buffer_6, GEN_237)
    node GEN_239 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), wmask_buffer_7, GEN_238)
    node T_3695 = or(T_3607, GEN_28)
    wire GEN_29 : UInt<8>
    node GEN_240 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_186)
    node GEN_241 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_187)
    node GEN_242 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_188)
    node GEN_243 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_189)
    node GEN_244 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_190)
    node GEN_245 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_191)
    node GEN_246 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_192)
    node GEN_247 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_193)
    node GEN_248 = mux(T_3571, GEN_225, GEN_178)
    node GEN_249 = mux(T_3571, GEN_226, GEN_179)
    node GEN_250 = mux(T_3571, GEN_227, GEN_180)
    node GEN_251 = mux(T_3571, GEN_228, GEN_181)
    node GEN_252 = mux(T_3571, GEN_229, GEN_182)
    node GEN_253 = mux(T_3571, GEN_230, GEN_183)
    node GEN_254 = mux(T_3571, GEN_231, GEN_184)
    node GEN_255 = mux(T_3571, GEN_232, GEN_185)
    node GEN_256 = mux(T_3571, GEN_240, GEN_186)
    node GEN_257 = mux(T_3571, GEN_241, GEN_187)
    node GEN_258 = mux(T_3571, GEN_242, GEN_188)
    node GEN_259 = mux(T_3571, GEN_243, GEN_189)
    node GEN_260 = mux(T_3571, GEN_244, GEN_190)
    node GEN_261 = mux(T_3571, GEN_245, GEN_191)
    node GEN_262 = mux(T_3571, GEN_246, GEN_192)
    node GEN_263 = mux(T_3571, GEN_247, GEN_193)
    node T_3698 = or(scoreboard_0, T_2343)
    node T_3699 = or(T_3698, vol_ignt_counter_pending)
    node T_3700 = or(T_3699, scoreboard_3)
    node T_3701 = or(T_3700, vol_ognt_counter_pending)
    node T_3702 = or(T_3701, ognt_counter_pending)
    node T_3703 = or(T_3702, scoreboard_6)
    node T_3704 = or(T_3703, ifin_counter_pending)
    node T_3706 = eq(T_3704, UInt<1>("h0"))
    node T_3708 = and(T_2337, all_pending_done)
    node GEN_264 = mux(T_3708, UInt<4>("h0"), GEN_146)
    node GEN_265 = mux(T_3708, UInt<8>("h0"), GEN_256)
    node GEN_266 = mux(T_3708, UInt<8>("h0"), GEN_257)
    node GEN_267 = mux(T_3708, UInt<8>("h0"), GEN_258)
    node GEN_268 = mux(T_3708, UInt<8>("h0"), GEN_259)
    node GEN_269 = mux(T_3708, UInt<8>("h0"), GEN_260)
    node GEN_270 = mux(T_3708, UInt<8>("h0"), GEN_261)
    node GEN_271 = mux(T_3708, UInt<8>("h0"), GEN_262)
    node GEN_272 = mux(T_3708, UInt<8>("h0"), GEN_263)
    io_inner_acquire_ready <= T_1981
    io_inner_grant_valid <= GEN_216
    io_inner_grant_bits_addr_beat <= GEN_209
    io_inner_grant_bits_client_xact_id <= GEN_210
    io_inner_grant_bits_manager_xact_id <= GEN_211
    io_inner_grant_bits_is_builtin_type <= GEN_212
    io_inner_grant_bits_g_type <= GEN_213
    io_inner_grant_bits_data <= GEN_214
    io_inner_grant_bits_client_id <= GEN_215
    io_inner_finish_ready <= T_2337
    io_inner_probe_valid <= T_2083
    io_inner_probe_bits_addr_block <= T_2030_addr_block
    io_inner_probe_bits_p_type <= T_2030_p_type
    io_inner_probe_bits_client_id <= UInt<1>("h0")
    io_inner_release_ready <= T_2274
    io_outer_acquire_valid <= T_2968
    io_outer_acquire_bits_addr_block <= T_3168_addr_block
    io_outer_acquire_bits_client_xact_id <= T_3168_client_xact_id
    io_outer_acquire_bits_addr_beat <= T_3168_addr_beat
    io_outer_acquire_bits_is_builtin_type <= T_3168_is_builtin_type
    io_outer_acquire_bits_a_type <= T_3168_a_type
    io_outer_acquire_bits_union <= T_3168_union
    io_outer_acquire_bits_data <= T_3168_data
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= T_2777
    io_outer_release_bits_addr_beat <= T_2828_addr_beat
    io_outer_release_bits_addr_block <= T_2828_addr_block
    io_outer_release_bits_client_xact_id <= UInt<4>("h0")
    io_outer_release_bits_voluntary <= UInt<1>("h1")
    io_outer_release_bits_r_type <= T_2828_r_type
    io_outer_release_bits_data <= T_2828_data
    io_outer_grant_ready <= GEN_147
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= UInt<1>("h1")
    io_outer_finish_bits_manager_id <= UInt<1>("h1")
    io_alloc_iacq_matches <= T_1749
    io_alloc_iacq_can <= T_1611
    io_alloc_irel_matches <= T_1752
    io_alloc_irel_can <= UInt<1>("h0")
    io_alloc_oprb_matches <= T_1755
    io_alloc_oprb_can <= UInt<1>("h0")
    io_alloc_idle <= T_1611
    io_alloc_addr_block <= xact_addr_block
    all_pending_done <= T_3706
    state <= GEN_264
    xact_addr_block <= GEN_49
    xact_allocate <= GEN_32
    xact_amo_shift_bytes <= GEN_33
    xact_op_code <= GEN_34
    xact_addr_byte <= GEN_35
    xact_op_size <= GEN_36
    xact_addr_beat <= xact_iacq_addr_beat
    xact_iacq_client_xact_id <= T_1823_client_xact_id
    xact_iacq_addr_beat <= T_1823_addr_beat
    xact_iacq_client_id <= T_1823_client_id
    xact_iacq_is_builtin_type <= T_1823_is_builtin_type
    xact_iacq_a_type <= T_1823_a_type
    xact_vol_ir_r_type <= GEN_60
    xact_vol_ir_src <= GEN_61
    xact_vol_ir_client_xact_id <= GEN_62
    pending_irel_data <= GEN_63
    vol_ignt_counter_pending <= T_2221
    vol_ignt_counter_up_idx <= T_2173
    vol_ignt_counter_up_done <= T_2174
    vol_ignt_counter_down_idx <= T_2204
    vol_ignt_counter_down_done <= T_2205
    scoreboard_6 <= T_1850
    ignt_data_idx <= T_3506
    ignt_data_done <= T_3507
    ifin_counter_pending <= T_3338
    ifin_counter_up_idx <= T_3306
    ifin_counter_up_done <= T_3307
    ifin_counter_down_done <= T_3308
    pending_put_data <= GEN_37
    pending_ignt_data <= GEN_198
    ognt_counter_pending <= T_2932
    ognt_counter_up_idx <= T_2884
    ognt_counter_up_done <= T_2885
    ognt_counter_down_idx <= T_2915
    ognt_counter_down_done <= T_2916
    pending_iprbs <= bits(GEN_217, 0, 0)
    pending_orel_send <= GEN_115
    pending_orel_data <= GEN_110
    vol_ognt_counter_pending <= T_2765
    vol_ognt_counter_up_idx <= T_2719
    vol_ognt_counter_up_done <= T_2720
    vol_ognt_counter_down_idx <= T_2748
    vol_ognt_counter_down_done <= T_2749
    sending_orel <= GEN_114
    data_buffer_0 <= GEN_248
    data_buffer_1 <= GEN_249
    data_buffer_2 <= GEN_250
    data_buffer_3 <= GEN_251
    data_buffer_4 <= GEN_252
    data_buffer_5 <= GEN_253
    data_buffer_6 <= GEN_254
    data_buffer_7 <= GEN_255
    wmask_buffer_0 <= GEN_265
    wmask_buffer_1 <= GEN_266
    wmask_buffer_2 <= GEN_267
    wmask_buffer_3 <= GEN_268
    wmask_buffer_4 <= GEN_269
    wmask_buffer_5 <= GEN_270
    wmask_buffer_6 <= GEN_271
    wmask_buffer_7 <= GEN_272
    data_valid_0 <= T_1716
    data_valid_1 <= T_1719
    data_valid_2 <= T_1722
    data_valid_3 <= T_1725
    data_valid_4 <= T_1728
    data_valid_5 <= T_1731
    data_valid_6 <= T_1734
    data_valid_7 <= T_1737
    ignt_q.io_enq_valid <= T_1822
    ignt_q.io_enq_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    ignt_q.io_enq_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    ignt_q.io_enq_bits_client_id <= io_inner_acquire_bits_client_id
    ignt_q.io_enq_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    ignt_q.io_enq_bits_a_type <= io_inner_acquire_bits_a_type
    ignt_q.io_deq_ready <= GEN_208
    T_2030_addr_block <= xact_addr_block
    T_2030_p_type <= T_2005
    T_2065_pending <= T_2139
    T_2065_up_done <= T_2073
    T_2065_down_idx <= T_2122
    T_2065_down_done <= T_2123
    T_2091 <= T_2091
    T_2115 <= GEN_41
    T_2125 <= GEN_43
    T_2166 <= GEN_45
    T_2197 <= GEN_46
    T_2207 <= GEN_48
    T_2379_addr_block <= xact_addr_block
    T_2379_client_xact_id <= xact_vol_ir_client_xact_id
    T_2379_r_type <= xact_vol_ir_r_type
    T_2379_client_id <= xact_vol_ir_src
    T_2440_client_xact_id <= T_2379_client_xact_id
    T_2440_client_id <= T_2379_client_id
    GEN_0 <= GEN_70
    GEN_1 <= GEN_70
    GEN_2 <= GEN_70
    GEN_3 <= GEN_70
    GEN_4 <= GEN_70
    GEN_5 <= GEN_70
    GEN_6 <= GEN_70
    GEN_7 <= GEN_70
    GEN_8 <= GEN_77
    GEN_9 <= T_2571
    T_2712 <= GEN_116
    T_2741 <= GEN_117
    T_2751 <= GEN_119
    T_2828_addr_beat <= vol_ognt_counter_up_idx
    T_2828_addr_block <= xact_addr_block
    T_2828_r_type <= T_2792
    T_2828_data <= GEN_11
    GEN_11 <= GEN_126
    T_2877 <= GEN_128
    T_2908 <= GEN_129
    T_2918 <= GEN_131
    T_3015_addr_block <= xact_addr_block
    T_3015_a_type <= pad(T_2981, 3)
    T_3015_union <= pad(T_2984, 11)
    GEN_12 <= GEN_138
    T_3140_addr_block <= xact_addr_block
    T_3140_addr_beat <= ognt_counter_up_idx
    T_3140_a_type <= xact_iacq_a_type
    T_3140_union <= T_3111
    T_3140_data <= GEN_13
    GEN_13 <= GEN_145
    GEN_14 <= GEN_154
    GEN_15 <= GEN_154
    GEN_16 <= GEN_154
    GEN_17 <= GEN_154
    GEN_18 <= GEN_154
    GEN_19 <= GEN_154
    GEN_20 <= GEN_154
    GEN_21 <= GEN_154
    GEN_22 <= GEN_161
    GEN_23 <= T_3265
    T_3299 <= GEN_194
    T_3314 <= T_3314
    T_3324 <= GEN_197
    T_3455_addr_beat <= ignt_q.io_deq_bits_addr_beat
    T_3455_client_xact_id <= ignt_q.io_deq_bits_client_xact_id
    T_3455_is_builtin_type <= ignt_q.io_deq_bits_is_builtin_type
    T_3455_g_type <= pad(T_3426, 4)
    T_3455_data <= GEN_25
    T_3455_client_id <= ignt_q.io_deq_bits_client_id
    GEN_25 <= GEN_205
    T_3499 <= GEN_206
    GEN_26 <= GEN_224
    GEN_27 <= T_3658
    GEN_28 <= GEN_239
    GEN_29 <= T_3695
    printf(clk, T_1652, "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n")
    stop(clk, T_1652, 1)
    printf(clk, T_1666, "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n")
    stop(clk, T_1666, 1)
    printf(clk, T_1677, "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n")
    stop(clk, T_1677, 1)

  module BufferedBroadcastAcquireTracker_5 :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
    output io_alloc_iacq_matches : UInt<1>
    output io_alloc_iacq_can : UInt<1>
    input io_alloc_iacq_should : UInt<1>
    output io_alloc_irel_matches : UInt<1>
    output io_alloc_irel_can : UInt<1>
    input io_alloc_irel_should : UInt<1>
    output io_alloc_oprb_matches : UInt<1>
    output io_alloc_oprb_can : UInt<1>
    input io_alloc_oprb_should : UInt<1>
    output io_alloc_idle : UInt<1>
    output io_alloc_addr_block : UInt<26>
  
    wire all_pending_done : UInt<1>
    reg state : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg xact_addr_block : UInt<26>, clk with :
      reset => (reset, UInt<26>("h0"))
    reg xact_allocate : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_allocate)
    reg xact_amo_shift_bytes : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_amo_shift_bytes)
    reg xact_op_code : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_op_code)
    reg xact_addr_byte : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_addr_byte)
    reg xact_op_size : UInt<2>, clk with :
      reset => (UInt<1>("h0"), xact_op_size)
    wire xact_addr_beat : UInt<3>
    wire xact_iacq_client_xact_id : UInt<1>
    wire xact_iacq_addr_beat : UInt<3>
    wire xact_iacq_client_id : UInt<1>
    wire xact_iacq_is_builtin_type : UInt<1>
    wire xact_iacq_a_type : UInt<3>
    reg xact_vol_ir_r_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_r_type)
    reg xact_vol_ir_src : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_src)
    reg xact_vol_ir_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_client_xact_id)
    reg pending_irel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ignt_counter_pending : UInt<1>
    wire vol_ignt_counter_up_idx : UInt<3>
    wire vol_ignt_counter_up_done : UInt<1>
    wire vol_ignt_counter_down_idx : UInt<3>
    wire vol_ignt_counter_down_done : UInt<1>
    wire scoreboard_6 : UInt<1>
    wire ignt_data_idx : UInt<3>
    wire ignt_data_done : UInt<1>
    wire ifin_counter_pending : UInt<1>
    wire ifin_counter_up_idx : UInt<3>
    wire ifin_counter_up_done : UInt<1>
    wire ifin_counter_down_idx : UInt<3>
    wire ifin_counter_down_done : UInt<1>
    reg pending_put_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg pending_ignt_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire ognt_counter_pending : UInt<1>
    wire ognt_counter_up_idx : UInt<3>
    wire ognt_counter_up_done : UInt<1>
    wire ognt_counter_down_idx : UInt<3>
    wire ognt_counter_down_done : UInt<1>
    reg pending_iprbs : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pending_iprbs)
    reg pending_orel_send : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_orel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ognt_counter_pending : UInt<1>
    wire vol_ognt_counter_up_idx : UInt<3>
    wire vol_ognt_counter_up_done : UInt<1>
    wire vol_ognt_counter_down_idx : UInt<3>
    wire vol_ognt_counter_down_done : UInt<1>
    node T_170 = neq(pending_orel_data, UInt<8>("h0"))
    node T_171 = or(pending_orel_send, T_170)
    node scoreboard_3 = or(T_171, vol_ognt_counter_pending)
    reg sending_orel : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_195_sharers : UInt<1>
    wire T_241_state : UInt<2>
    wire coh_inner_sharers : UInt<1>
    wire coh_outer_state : UInt<2>
    node T_1611 = eq(state, UInt<4>("h0"))
    node T_1612 = and(io_inner_acquire_ready, io_inner_acquire_valid)
    node T_1613 = and(T_1611, T_1612)
    node T_1614 = and(T_1613, io_alloc_iacq_should)
    wire T_1623_0 : UInt<3>
    node T_1625 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1626 = and(io_inner_acquire_bits_is_builtin_type, T_1625)
    node T_1627 = and(T_1614, T_1626)
    wire T_1636_0 : UInt<3>
    node T_1638 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1639 = and(io_inner_acquire_bits_is_builtin_type, T_1638)
    node T_1641 = eq(T_1639, UInt<1>("h0"))
    node T_1643 = eq(io_inner_acquire_bits_addr_beat, UInt<3>("h0"))
    node T_1644 = or(T_1641, T_1643)
    node T_1646 = eq(T_1644, UInt<1>("h0"))
    node T_1647 = and(T_1627, T_1646)
    node T_1649 = eq(T_1647, UInt<1>("h0"))
    node T_1650 = or(T_1649, reset)
    node T_1652 = eq(T_1650, UInt<1>("h0"))
    node T_1653 = neq(state, UInt<4>("h0"))
    node T_1654 = and(T_1653, scoreboard_6)
    node T_1656 = eq(xact_iacq_a_type, UInt<3>("h5"))
    node T_1658 = eq(xact_iacq_a_type, UInt<3>("h6"))
    node T_1659 = or(T_1656, T_1658)
    node T_1660 = and(xact_iacq_is_builtin_type, T_1659)
    node T_1661 = and(T_1654, T_1660)
    node T_1663 = eq(T_1661, UInt<1>("h0"))
    node T_1664 = or(T_1663, reset)
    node T_1666 = eq(T_1664, UInt<1>("h0"))
    node T_1670 = eq(xact_iacq_a_type, UInt<3>("h4"))
    node T_1671 = and(xact_iacq_is_builtin_type, T_1670)
    node T_1672 = and(T_1654, T_1671)
    node T_1674 = eq(T_1672, UInt<1>("h0"))
    node T_1675 = or(T_1674, reset)
    node T_1677 = eq(T_1675, UInt<1>("h0"))
    wire T_1691_0 : UInt<64>
    wire T_1691_1 : UInt<64>
    wire T_1691_2 : UInt<64>
    wire T_1691_3 : UInt<64>
    wire T_1691_4 : UInt<64>
    wire T_1691_5 : UInt<64>
    wire T_1691_6 : UInt<64>
    wire T_1691_7 : UInt<64>
    reg data_buffer_0 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_1 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_2 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_3 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_4 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_5 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_6 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_7 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    wire T_1709_0 : UInt<8>
    wire T_1709_1 : UInt<8>
    wire T_1709_2 : UInt<8>
    wire T_1709_3 : UInt<8>
    wire T_1709_4 : UInt<8>
    wire T_1709_5 : UInt<8>
    wire T_1709_6 : UInt<8>
    wire T_1709_7 : UInt<8>
    reg wmask_buffer_0 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_1 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_2 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_3 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_4 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_5 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_6 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_7 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    node T_1714 = not(wmask_buffer_0)
    node T_1716 = eq(T_1714, UInt<8>("h0"))
    node T_1717 = not(wmask_buffer_1)
    node T_1719 = eq(T_1717, UInt<8>("h0"))
    node T_1720 = not(wmask_buffer_2)
    node T_1722 = eq(T_1720, UInt<8>("h0"))
    node T_1723 = not(wmask_buffer_3)
    node T_1725 = eq(T_1723, UInt<8>("h0"))
    node T_1726 = not(wmask_buffer_4)
    node T_1728 = eq(T_1726, UInt<8>("h0"))
    node T_1729 = not(wmask_buffer_5)
    node T_1731 = eq(T_1729, UInt<8>("h0"))
    node T_1732 = not(wmask_buffer_6)
    node T_1734 = eq(T_1732, UInt<8>("h0"))
    node T_1735 = not(wmask_buffer_7)
    node T_1737 = eq(T_1735, UInt<8>("h0"))
    wire data_valid_0 : UInt<1>
    wire data_valid_1 : UInt<1>
    wire data_valid_2 : UInt<1>
    wire data_valid_3 : UInt<1>
    wire data_valid_4 : UInt<1>
    wire data_valid_5 : UInt<1>
    wire data_valid_6 : UInt<1>
    wire data_valid_7 : UInt<1>
    node T_1748 = eq(io_inner_acquire_bits_addr_block, xact_addr_block)
    node T_1749 = and(T_1653, T_1748)
    node T_1751 = eq(io_inner_release_bits_addr_block, xact_addr_block)
    node T_1752 = and(T_1653, T_1751)
    node T_1754 = eq(io_outer_probe_bits_addr_block, xact_addr_block)
    node T_1755 = and(T_1653, T_1754)
    node T_1764 = eq(xact_iacq_client_xact_id, io_inner_acquire_bits_client_xact_id)
    node T_1765 = eq(xact_iacq_client_id, io_inner_acquire_bits_client_id)
    node T_1766 = and(T_1764, T_1765)
    node T_1767 = and(T_1766, scoreboard_6)
    node T_1768 = eq(xact_iacq_addr_beat, io_inner_acquire_bits_addr_beat)
    node T_1769 = and(T_1767, T_1768)
    inst ignt_q of Queue_8
    node T_1797 = and(T_1611, io_alloc_iacq_should)
    node T_1798 = and(T_1797, io_inner_acquire_valid)
    node T_1800 = eq(T_1769, UInt<1>("h0"))
    node T_1801 = and(T_1800, scoreboard_6)
    node T_1803 = and(T_1801, T_1612)
    wire T_1812_0 : UInt<3>
    node T_1814 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1815 = and(io_inner_acquire_bits_is_builtin_type, T_1814)
    node T_1817 = eq(T_1815, UInt<1>("h0"))
    node T_1820 = or(T_1817, T_1643)
    node T_1821 = and(T_1803, T_1820)
    node T_1822 = or(T_1798, T_1821)
    node T_1823_client_xact_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_xact_id, ignt_q.io_enq_bits_client_xact_id)
    node T_1823_addr_beat = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_addr_beat, ignt_q.io_enq_bits_addr_beat)
    node T_1823_client_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_id, ignt_q.io_enq_bits_client_id)
    node T_1823_is_builtin_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_is_builtin_type, ignt_q.io_enq_bits_is_builtin_type)
    node T_1823_a_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_a_type, ignt_q.io_enq_bits_a_type)
    node T_1850 = gt(ignt_q.io_count, UInt<2>("h0"))
    node T_1852 = or(T_1653, io_alloc_iacq_should)
    wire T_1862_0 : UInt<3>
    wire T_1862_1 : UInt<3>
    wire T_1862_2 : UInt<3>
    node T_1864 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1865 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1866 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1867 = or(T_1864, T_1865)
    node T_1868 = or(T_1867, T_1866)
    node T_1869 = and(io_inner_acquire_bits_is_builtin_type, T_1868)
    node T_1870 = and(T_1612, T_1869)
    node T_1874 = mux(T_1870, UInt<8>("hff"), UInt<8>("h0"))
    node T_1875 = not(T_1874)
    node T_1877 = dshlw(UInt<8>("h1"), io_inner_acquire_bits_addr_beat)
    node T_1878 = not(T_1877)
    node T_1879 = or(T_1875, T_1878)
    node T_1880 = and(pending_put_data, T_1879)
    wire T_1890_0 : UInt<3>
    node T_1892 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1893 = and(io_inner_acquire_bits_is_builtin_type, T_1892)
    node T_1894 = and(T_1612, T_1893)
    node T_1897 = and(T_1894, T_1643)
    node T_1906 = mux(T_1897, UInt<8>("hfe"), UInt<8>("h0"))
    node T_1907 = or(T_1880, T_1906)
    node GEN_30 = mux(T_1852, T_1907, pending_put_data)
    node T_1915 = mul(UInt<4>("h8"), UInt<4>("h0"))
    node T_1917 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1918 = and(io_inner_acquire_bits_is_builtin_type, T_1917)
    node T_1920 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1921 = and(io_inner_acquire_bits_is_builtin_type, T_1920)
    node T_1922 = or(T_1918, T_1921)
    node T_1923 = bits(io_inner_acquire_bits_union, 5, 1)
    node T_1924 = mux(T_1922, UInt<5>("h1"), T_1923)
    node T_1925 = bits(io_inner_acquire_bits_union, 10, 8)
    node T_1926 = bits(io_inner_acquire_bits_union, 7, 6)
    wire T_1939_0 : UInt<3>
    wire T_1939_1 : UInt<3>
    wire T_1939_2 : UInt<3>
    node T_1941 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1942 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1943 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1944 = or(T_1941, T_1942)
    node T_1945 = or(T_1944, T_1943)
    node T_1946 = and(io_inner_acquire_bits_is_builtin_type, T_1945)
    node T_1947 = and(T_1612, T_1946)
    node T_1951 = mux(T_1947, UInt<8>("hff"), UInt<8>("h0"))
    node T_1952 = not(T_1951)
    node T_1956 = or(T_1952, T_1878)
    node T_1958 = mux(T_1921, T_1956, UInt<8>("h0"))
    node GEN_31 = mux(T_1798, io_inner_acquire_bits_addr_block, xact_addr_block)
    node GEN_32 = mux(T_1798, UInt<1>("h0"), xact_allocate)
    node GEN_33 = mux(T_1798, T_1915, xact_amo_shift_bytes)
    node GEN_34 = mux(T_1798, T_1924, xact_op_code)
    node GEN_35 = mux(T_1798, T_1925, xact_addr_byte)
    node GEN_36 = mux(T_1798, T_1926, xact_op_size)
    node GEN_37 = mux(T_1798, T_1958, GEN_30)
    node GEN_38 = mux(T_1798, UInt<8>("h0"), pending_ignt_data)
    node GEN_39 = mux(T_1798, UInt<4>("h5"), state)
    node scoreboard_0 = neq(pending_put_data, UInt<8>("h0"))
    wire T_1976_0 : UInt<3>
    node T_1978 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1979 = and(io_inner_acquire_bits_is_builtin_type, T_1978)
    node T_1980 = and(T_1767, T_1979)
    node T_1981 = or(T_1611, T_1980)
    node T_1982 = not(pending_ignt_data)
    node skip_outer_acquire = eq(T_1982, UInt<8>("h0"))
    node T_1991 = eq(UInt<3>("h4"), xact_iacq_a_type)
    node T_1992 = mux(T_1991, UInt<2>("h0"), UInt<2>("h2"))
    node T_1993 = eq(UInt<3>("h6"), xact_iacq_a_type)
    node T_1994 = mux(T_1993, UInt<2>("h0"), T_1992)
    node T_1995 = eq(UInt<3>("h5"), xact_iacq_a_type)
    node T_1996 = mux(T_1995, UInt<2>("h2"), T_1994)
    node T_1997 = eq(UInt<3>("h2"), xact_iacq_a_type)
    node T_1998 = mux(T_1997, UInt<2>("h0"), T_1996)
    node T_1999 = eq(UInt<3>("h0"), xact_iacq_a_type)
    node T_2000 = mux(T_1999, UInt<2>("h2"), T_1998)
    node T_2001 = eq(UInt<3>("h3"), xact_iacq_a_type)
    node T_2002 = mux(T_2001, UInt<2>("h0"), T_2000)
    node T_2003 = eq(UInt<3>("h1"), xact_iacq_a_type)
    node T_2004 = mux(T_2003, UInt<2>("h2"), T_2002)
    node T_2005 = mux(xact_iacq_is_builtin_type, T_2004, UInt<2>("h0"))
    wire T_2030_addr_block : UInt<26>
    wire T_2030_p_type : UInt<2>
    wire T_2030_client_id : UInt<1>
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h0"))
    node T_2056 = mux(T_2055, UInt<4>("h6"), UInt<4>("h7"))
    wire T_2065_pending : UInt<1>
    wire T_2065_up_idx : UInt<3>
    wire T_2065_up_done : UInt<1>
    wire T_2065_down_idx : UInt<3>
    wire T_2065_down_done : UInt<1>
    node T_2073 = and(io_inner_probe_ready, io_inner_probe_valid)
    node T_2074 = not(T_2073)
    node T_2076 = dshlw(UInt<2>("h1"), io_inner_probe_bits_client_id)
    node T_2077 = not(T_2076)
    node GEN_273 = pad(T_2074, 2)
    node T_2078 = or(GEN_273, T_2077)
    node GEN_274 = pad(pending_iprbs, 2)
    node T_2079 = and(GEN_274, T_2078)
    node T_2080 = eq(state, UInt<4>("h5"))
    node T_2083 = and(T_2080, pending_iprbs)
    reg T_2091 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2100 = and(io_inner_release_ready, io_inner_release_valid)
    node T_2103 = eq(io_inner_release_bits_voluntary, UInt<1>("h0"))
    node T_2104 = and(T_1653, T_2103)
    node T_2105 = and(T_2100, T_2104)
    node T_2107 = eq(io_inner_release_bits_r_type, UInt<3>("h0"))
    node T_2108 = eq(io_inner_release_bits_r_type, UInt<3>("h1"))
    node T_2109 = eq(io_inner_release_bits_r_type, UInt<3>("h2"))
    node T_2110 = or(T_2107, T_2108)
    node T_2111 = or(T_2110, T_2109)
    node T_2113 = and(T_2105, T_2111)
    reg T_2115 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2117 = eq(T_2115, UInt<3>("h7"))
    node T_2119 = add(T_2115, UInt<3>("h1"))
    node T_2120 = tail(T_2119, 1)
    node GEN_41 = mux(T_2113, T_2120, T_2115)
    node T_2121 = and(T_2113, T_2117)
    node T_2122 = mux(T_2111, T_2115, UInt<3>("h0"))
    node T_2123 = mux(T_2111, T_2121, T_2105)
    reg T_2125 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2127 = eq(T_2123, UInt<1>("h0"))
    node T_2128 = and(T_2073, T_2127)
    node T_2130 = add(T_2125, UInt<1>("h1"))
    node T_2131 = tail(T_2130, 1)
    node GEN_42 = mux(T_2128, T_2131, T_2125)
    node T_2133 = eq(T_2073, UInt<1>("h0"))
    node T_2134 = and(T_2123, T_2133)
    node T_2136 = sub(T_2125, UInt<1>("h1"))
    node T_2137 = tail(T_2136, 1)
    node GEN_43 = mux(T_2134, T_2137, GEN_42)
    node T_2139 = gt(T_2125, UInt<1>("h0"))
    node T_2143 = or(pending_iprbs, T_2065_pending)
    node T_2145 = eq(T_2143, UInt<1>("h0"))
    node T_2146 = and(T_2080, T_2145)
    node GEN_44 = mux(T_2146, T_2056, GEN_39)
    node T_2150 = mux(T_1611, io_alloc_irel_should, io_alloc_irel_matches)
    node T_2151 = and(T_2150, io_inner_release_bits_voluntary)
    node T_2156 = and(T_2100, T_2151)
    node T_2164 = and(T_2156, T_2111)
    reg T_2166 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2168 = eq(T_2166, UInt<3>("h7"))
    node T_2170 = add(T_2166, UInt<3>("h1"))
    node T_2171 = tail(T_2170, 1)
    node GEN_45 = mux(T_2164, T_2171, T_2166)
    node T_2172 = and(T_2164, T_2168)
    node T_2173 = mux(T_2111, T_2166, UInt<3>("h0"))
    node T_2174 = mux(T_2111, T_2172, T_2156)
    node T_2175 = and(io_inner_grant_ready, io_inner_grant_valid)
    node T_2178 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_2179 = and(io_inner_grant_bits_is_builtin_type, T_2178)
    node T_2180 = and(T_1653, T_2179)
    node T_2181 = and(T_2175, T_2180)
    wire T_2189_0 : UInt<3>
    node GEN_275 = pad(UInt<3>("h5"), 4)
    node T_2191 = eq(io_inner_grant_bits_g_type, GEN_275)
    node T_2193 = mux(io_inner_grant_bits_is_builtin_type, T_2191, T_2178)
    node T_2195 = and(T_2181, T_2193)
    reg T_2197 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2199 = eq(T_2197, UInt<3>("h7"))
    node T_2201 = add(T_2197, UInt<3>("h1"))
    node T_2202 = tail(T_2201, 1)
    node GEN_46 = mux(T_2195, T_2202, T_2197)
    node T_2203 = and(T_2195, T_2199)
    node T_2204 = mux(T_2193, T_2197, UInt<3>("h0"))
    node T_2205 = mux(T_2193, T_2203, T_2181)
    reg T_2207 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2209 = eq(T_2205, UInt<1>("h0"))
    node T_2210 = and(T_2174, T_2209)
    node T_2212 = add(T_2207, UInt<1>("h1"))
    node T_2213 = tail(T_2212, 1)
    node GEN_47 = mux(T_2210, T_2213, T_2207)
    node T_2215 = eq(T_2174, UInt<1>("h0"))
    node T_2216 = and(T_2205, T_2215)
    node T_2218 = sub(T_2207, UInt<1>("h1"))
    node T_2219 = tail(T_2218, 1)
    node GEN_48 = mux(T_2216, T_2219, GEN_47)
    node T_2221 = gt(T_2207, UInt<1>("h0"))
    node T_2223 = and(T_1611, io_alloc_irel_should)
    node T_2224 = and(T_2223, io_inner_release_valid)
    node GEN_49 = mux(T_2224, io_inner_release_bits_addr_block, GEN_31)
    node GEN_50 = mux(T_2224, UInt<8>("hff"), pending_irel_data)
    node GEN_51 = mux(T_2224, UInt<4>("h7"), GEN_44)
    node T_2231 = and(T_1751, io_inner_release_bits_voluntary)
    node T_2233 = eq(state, UInt<4>("h8"))
    node T_2234 = or(T_1611, T_2233)
    node T_2236 = eq(T_2234, UInt<1>("h0"))
    node T_2237 = and(T_2231, T_2236)
    node T_2239 = eq(all_pending_done, UInt<1>("h0"))
    node T_2240 = and(T_2237, T_2239)
    node T_2241 = and(io_outer_grant_ready, io_outer_grant_valid)
    node T_2243 = eq(T_2241, UInt<1>("h0"))
    node T_2244 = and(T_2240, T_2243)
    node T_2247 = eq(T_2175, UInt<1>("h0"))
    node T_2248 = and(T_2244, T_2247)
    node T_2250 = eq(vol_ignt_counter_pending, UInt<1>("h0"))
    node T_2251 = and(T_2248, T_2250)
    node T_2252 = dshr(pending_orel_data, io_inner_release_bits_addr_beat)
    node T_2253 = bits(T_2252, 0, 0)
    node T_2254 = and(sending_orel, T_2253)
    node T_2255 = and(io_outer_release_ready, io_outer_release_valid)
    node T_2256 = eq(io_inner_release_bits_addr_beat, io_outer_release_bits_addr_beat)
    node T_2257 = and(T_2255, T_2256)
    node T_2263 = or(T_2254, T_2257)
    node T_2264 = and(T_2111, T_2263)
    node T_2266 = eq(T_2264, UInt<1>("h0"))
    node T_2267 = and(T_2251, T_2266)
    node T_2271 = and(T_1751, T_2103)
    node T_2273 = and(T_2271, T_2080)
    node T_2274 = or(T_2267, T_2273)
    node T_2275 = and(T_2274, io_inner_release_valid)
    node T_2276 = or(T_2224, T_2275)
    node T_2277 = and(T_2276, io_inner_release_ready)
    node T_2286 = eq(T_2111, UInt<1>("h0"))
    node T_2288 = eq(io_inner_release_bits_addr_beat, UInt<3>("h0"))
    node T_2289 = or(T_2286, T_2288)
    node GEN_52 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_r_type, xact_vol_ir_r_type)
    node GEN_53 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_id, xact_vol_ir_src)
    node GEN_54 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_xact_id, xact_vol_ir_client_xact_id)
    node T_2303 = and(T_2100, T_2111)
    node T_2307 = mux(T_2303, UInt<8>("hff"), UInt<8>("h0"))
    node T_2308 = not(T_2307)
    node T_2310 = dshlw(UInt<8>("h1"), io_inner_release_bits_addr_beat)
    node T_2311 = not(T_2310)
    node T_2312 = or(T_2308, T_2311)
    node T_2314 = mux(T_2111, T_2312, UInt<8>("h0"))
    node GEN_55 = mux(T_2289, GEN_52, xact_vol_ir_r_type)
    node GEN_56 = mux(T_2289, GEN_53, xact_vol_ir_src)
    node GEN_57 = mux(T_2289, GEN_54, xact_vol_ir_client_xact_id)
    node GEN_58 = mux(T_2289, T_2314, GEN_50)
    node T_2316 = eq(T_2289, UInt<1>("h0"))
    node T_2333 = and(pending_irel_data, T_2312)
    node GEN_59 = mux(T_2316, T_2333, GEN_58)
    node GEN_60 = mux(T_2277, GEN_55, xact_vol_ir_r_type)
    node GEN_61 = mux(T_2277, GEN_56, xact_vol_ir_src)
    node GEN_62 = mux(T_2277, GEN_57, xact_vol_ir_client_xact_id)
    node GEN_63 = mux(T_2277, GEN_59, GEN_50)
    node T_2334 = eq(state, UInt<4>("h3"))
    node T_2335 = eq(state, UInt<4>("h4"))
    node T_2337 = eq(state, UInt<4>("h7"))
    node T_2338 = or(T_2334, T_2335)
    node T_2339 = or(T_2338, T_2080)
    node T_2340 = or(T_2339, T_2337)
    node T_2341 = and(T_2340, vol_ignt_counter_pending)
    node T_2343 = neq(pending_irel_data, UInt<8>("h0"))
    node T_2344 = or(T_2343, vol_ognt_counter_pending)
    node T_2346 = eq(T_2344, UInt<1>("h0"))
    node T_2347 = and(T_2341, T_2346)
    wire T_2379_addr_beat : UInt<3>
    wire T_2379_addr_block : UInt<26>
    wire T_2379_client_xact_id : UInt<1>
    wire T_2379_voluntary : UInt<1>
    wire T_2379_r_type : UInt<3>
    wire T_2379_data : UInt<64>
    wire T_2379_client_id : UInt<1>
    wire T_2440_addr_beat : UInt<3>
    wire T_2440_client_xact_id : UInt<1>
    wire T_2440_manager_xact_id : UInt<4>
    wire T_2440_is_builtin_type : UInt<1>
    wire T_2440_g_type : UInt<4>
    wire T_2440_data : UInt<64>
    wire T_2440_client_id : UInt<1>
    wire GEN_0 : UInt<8>
    node GEN_64 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_65 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), wmask_buffer_2, GEN_64)
    node GEN_66 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), wmask_buffer_3, GEN_65)
    node GEN_67 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), wmask_buffer_4, GEN_66)
    node GEN_68 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), wmask_buffer_5, GEN_67)
    node GEN_69 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), wmask_buffer_6, GEN_68)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), wmask_buffer_7, GEN_69)
    node T_2521 = bits(GEN_0, 0, 0)
    wire GEN_1 : UInt<8>
    node T_2522 = bits(GEN_1, 1, 1)
    wire GEN_2 : UInt<8>
    node T_2523 = bits(GEN_2, 2, 2)
    wire GEN_3 : UInt<8>
    node T_2524 = bits(GEN_3, 3, 3)
    wire GEN_4 : UInt<8>
    node T_2525 = bits(GEN_4, 4, 4)
    wire GEN_5 : UInt<8>
    node T_2526 = bits(GEN_5, 5, 5)
    wire GEN_6 : UInt<8>
    node T_2527 = bits(GEN_6, 6, 6)
    wire GEN_7 : UInt<8>
    node T_2528 = bits(GEN_7, 7, 7)
    node T_2532 = mux(T_2521, UInt<8>("hff"), UInt<8>("h0"))
    node T_2536 = mux(T_2522, UInt<8>("hff"), UInt<8>("h0"))
    node T_2540 = mux(T_2523, UInt<8>("hff"), UInt<8>("h0"))
    node T_2544 = mux(T_2524, UInt<8>("hff"), UInt<8>("h0"))
    node T_2548 = mux(T_2525, UInt<8>("hff"), UInt<8>("h0"))
    node T_2552 = mux(T_2526, UInt<8>("hff"), UInt<8>("h0"))
    node T_2556 = mux(T_2527, UInt<8>("hff"), UInt<8>("h0"))
    node T_2560 = mux(T_2528, UInt<8>("hff"), UInt<8>("h0"))
    node T_2561 = cat(T_2536, T_2532)
    node T_2562 = cat(T_2544, T_2540)
    node T_2563 = cat(T_2562, T_2561)
    node T_2564 = cat(T_2552, T_2548)
    node T_2565 = cat(T_2560, T_2556)
    node T_2566 = cat(T_2565, T_2564)
    node T_2567 = cat(T_2566, T_2563)
    node T_2568 = not(T_2567)
    node T_2569 = and(T_2568, io_inner_release_bits_data)
    wire GEN_8 : UInt<64>
    node GEN_71 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_72 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), data_buffer_2, GEN_71)
    node GEN_73 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), data_buffer_3, GEN_72)
    node GEN_74 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), data_buffer_4, GEN_73)
    node GEN_75 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), data_buffer_5, GEN_74)
    node GEN_76 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), data_buffer_6, GEN_75)
    node GEN_77 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), data_buffer_7, GEN_76)
    node T_2570 = and(T_2567, GEN_8)
    node T_2571 = or(T_2569, T_2570)
    wire GEN_9 : UInt<64>
    node GEN_78 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_0)
    node GEN_79 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_1)
    node GEN_80 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_2)
    node GEN_81 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_3)
    node GEN_82 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_4)
    node GEN_83 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_5)
    node GEN_84 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_6)
    node GEN_85 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_7)
    wire GEN_10 : UInt<8>
    node GEN_86 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_0)
    node GEN_87 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_1)
    node GEN_88 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_2)
    node GEN_89 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_3)
    node GEN_90 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_4)
    node GEN_91 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_5)
    node GEN_92 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_6)
    node GEN_93 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_7)
    node GEN_94 = mux(T_2303, GEN_78, data_buffer_0)
    node GEN_95 = mux(T_2303, GEN_79, data_buffer_1)
    node GEN_96 = mux(T_2303, GEN_80, data_buffer_2)
    node GEN_97 = mux(T_2303, GEN_81, data_buffer_3)
    node GEN_98 = mux(T_2303, GEN_82, data_buffer_4)
    node GEN_99 = mux(T_2303, GEN_83, data_buffer_5)
    node GEN_100 = mux(T_2303, GEN_84, data_buffer_6)
    node GEN_101 = mux(T_2303, GEN_85, data_buffer_7)
    node GEN_102 = mux(T_2303, GEN_86, wmask_buffer_0)
    node GEN_103 = mux(T_2303, GEN_87, wmask_buffer_1)
    node GEN_104 = mux(T_2303, GEN_88, wmask_buffer_2)
    node GEN_105 = mux(T_2303, GEN_89, wmask_buffer_3)
    node GEN_106 = mux(T_2303, GEN_90, wmask_buffer_4)
    node GEN_107 = mux(T_2303, GEN_91, wmask_buffer_5)
    node GEN_108 = mux(T_2303, GEN_92, wmask_buffer_6)
    node GEN_109 = mux(T_2303, GEN_93, wmask_buffer_7)
    wire T_2604_state : UInt<2>
    node T_2631 = or(T_1653, io_alloc_irel_should)
    node T_2647 = and(T_2307, T_2310)
    node T_2648 = or(pending_orel_data, T_2647)
    node T_2651 = eq(io_outer_release_bits_r_type, UInt<3>("h0"))
    node T_2652 = eq(io_outer_release_bits_r_type, UInt<3>("h1"))
    node T_2653 = eq(io_outer_release_bits_r_type, UInt<3>("h2"))
    node T_2654 = or(T_2651, T_2652)
    node T_2655 = or(T_2654, T_2653)
    node T_2656 = and(T_2255, T_2655)
    node T_2660 = mux(T_2656, UInt<8>("hff"), UInt<8>("h0"))
    node T_2661 = not(T_2660)
    node T_2663 = dshlw(UInt<8>("h1"), io_outer_release_bits_addr_beat)
    node T_2664 = not(T_2663)
    node T_2665 = or(T_2661, T_2664)
    node T_2666 = and(T_2648, T_2665)
    node GEN_110 = mux(T_2631, T_2666, pending_orel_data)
    node T_2677 = eq(T_2655, UInt<1>("h0"))
    node T_2679 = eq(io_outer_release_bits_addr_beat, UInt<3>("h0"))
    node T_2680 = or(T_2677, T_2679)
    node GEN_112 = mux(T_2680, UInt<1>("h1"), sending_orel)
    node T_2692 = eq(io_outer_release_bits_addr_beat, UInt<3>("h7"))
    node T_2693 = or(T_2677, T_2692)
    node GEN_113 = mux(T_2693, UInt<1>("h0"), GEN_112)
    node GEN_114 = mux(T_2255, GEN_113, sending_orel)
    node GEN_115 = mux(T_2255, UInt<1>("h0"), pending_orel_send)
    node T_2702 = and(T_2255, io_outer_release_bits_voluntary)
    node T_2710 = and(T_2702, T_2655)
    reg T_2712 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2714 = eq(T_2712, UInt<3>("h7"))
    node T_2716 = add(T_2712, UInt<3>("h1"))
    node T_2717 = tail(T_2716, 1)
    node GEN_116 = mux(T_2710, T_2717, T_2712)
    node T_2718 = and(T_2710, T_2714)
    node T_2719 = mux(T_2655, T_2712, UInt<3>("h0"))
    node T_2720 = mux(T_2655, T_2718, T_2702)
    node T_2723 = eq(io_outer_grant_bits_g_type, UInt<4>("h0"))
    node T_2724 = and(io_outer_grant_bits_is_builtin_type, T_2723)
    node T_2725 = and(T_2241, T_2724)
    wire T_2733_0 : UInt<3>
    node GEN_276 = pad(UInt<3>("h5"), 4)
    node T_2735 = eq(io_outer_grant_bits_g_type, GEN_276)
    node T_2737 = mux(io_outer_grant_bits_is_builtin_type, T_2735, T_2723)
    node T_2739 = and(T_2725, T_2737)
    reg T_2741 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2743 = eq(T_2741, UInt<3>("h7"))
    node T_2745 = add(T_2741, UInt<3>("h1"))
    node T_2746 = tail(T_2745, 1)
    node GEN_117 = mux(T_2739, T_2746, T_2741)
    node T_2747 = and(T_2739, T_2743)
    node T_2748 = mux(T_2737, T_2741, UInt<3>("h0"))
    node T_2749 = mux(T_2737, T_2747, T_2725)
    reg T_2751 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2753 = eq(T_2749, UInt<1>("h0"))
    node T_2754 = and(T_2720, T_2753)
    node T_2756 = add(T_2751, UInt<1>("h1"))
    node T_2757 = tail(T_2756, 1)
    node GEN_118 = mux(T_2754, T_2757, T_2751)
    node T_2759 = eq(T_2720, UInt<1>("h0"))
    node T_2760 = and(T_2749, T_2759)
    node T_2762 = sub(T_2751, UInt<1>("h1"))
    node T_2763 = tail(T_2762, 1)
    node GEN_119 = mux(T_2760, T_2763, GEN_118)
    node T_2765 = gt(T_2751, UInt<1>("h0"))
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter_up_idx)
    node T_2775 = bits(T_2774, 0, 0)
    node T_2776 = mux(T_2655, T_2775, pending_orel_send)
    node T_2777 = and(T_2337, T_2776)
    node T_2791 = eq(UInt<2>("h2"), UInt<2>("h2"))
    node T_2792 = mux(T_2791, UInt<3>("h0"), UInt<3>("h3"))
    wire T_2828_addr_beat : UInt<3>
    wire T_2828_addr_block : UInt<26>
    wire T_2828_client_xact_id : UInt<4>
    wire T_2828_voluntary : UInt<1>
    wire T_2828_r_type : UInt<3>
    wire T_2828_data : UInt<64>
    wire GEN_11 : UInt<64>
    node GEN_120 = mux(eq(UInt<3>("h1"), vol_ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_121 = mux(eq(UInt<3>("h2"), vol_ognt_counter_up_idx), data_buffer_2, GEN_120)
    node GEN_122 = mux(eq(UInt<3>("h3"), vol_ognt_counter_up_idx), data_buffer_3, GEN_121)
    node GEN_123 = mux(eq(UInt<3>("h4"), vol_ognt_counter_up_idx), data_buffer_4, GEN_122)
    node GEN_124 = mux(eq(UInt<3>("h5"), vol_ognt_counter_up_idx), data_buffer_5, GEN_123)
    node GEN_125 = mux(eq(UInt<3>("h6"), vol_ognt_counter_up_idx), data_buffer_6, GEN_124)
    node GEN_126 = mux(eq(UInt<3>("h7"), vol_ognt_counter_up_idx), data_buffer_7, GEN_125)
    node T_2857 = eq(xact_iacq_is_builtin_type, UInt<1>("h0"))
    node T_2860 = and(io_outer_acquire_ready, io_outer_acquire_valid)
    wire T_2871_0 : UInt<3>
    node T_2873 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_2874 = and(io_outer_acquire_bits_is_builtin_type, T_2873)
    node T_2875 = and(T_2860, T_2874)
    reg T_2877 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2879 = eq(T_2877, UInt<3>("h7"))
    node T_2881 = add(T_2877, UInt<3>("h1"))
    node T_2882 = tail(T_2881, 1)
    node GEN_128 = mux(T_2875, T_2882, T_2877)
    node T_2883 = and(T_2875, T_2879)
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat)
    node T_2885 = mux(T_2874, T_2883, T_2860)
    node T_2891 = eq(T_2724, UInt<1>("h0"))
    node T_2892 = and(T_2241, T_2891)
    wire T_2900_0 : UInt<3>
    node GEN_277 = pad(UInt<3>("h5"), 4)
    node T_2902 = eq(io_outer_grant_bits_g_type, GEN_277)
    node T_2904 = mux(io_outer_grant_bits_is_builtin_type, T_2902, T_2723)
    node T_2906 = and(T_2892, T_2904)
    reg T_2908 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2910 = eq(T_2908, UInt<3>("h7"))
    node T_2912 = add(T_2908, UInt<3>("h1"))
    node T_2913 = tail(T_2912, 1)
    node GEN_129 = mux(T_2906, T_2913, T_2908)
    node T_2914 = and(T_2906, T_2910)
    node T_2915 = mux(T_2904, T_2908, xact_addr_beat)
    node T_2916 = mux(T_2904, T_2914, T_2892)
    reg T_2918 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2920 = eq(T_2916, UInt<1>("h0"))
    node T_2921 = and(T_2885, T_2920)
    node T_2923 = add(T_2918, UInt<1>("h1"))
    node T_2924 = tail(T_2923, 1)
    node GEN_130 = mux(T_2921, T_2924, T_2918)
    node T_2926 = eq(T_2885, UInt<1>("h0"))
    node T_2927 = and(T_2916, T_2926)
    node T_2929 = sub(T_2918, UInt<1>("h1"))
    node T_2930 = tail(T_2929, 1)
    node GEN_131 = mux(T_2927, T_2930, GEN_130)
    node T_2932 = gt(T_2918, UInt<1>("h0"))
    node T_2933 = eq(state, UInt<4>("h6"))
    node T_2937 = dshr(pending_put_data, ognt_counter_up_idx)
    node T_2938 = bits(T_2937, 0, 0)
    node T_2940 = eq(T_2938, UInt<1>("h0"))
    wire T_2949_0 : UInt<3>
    wire T_2949_1 : UInt<3>
    wire T_2949_2 : UInt<3>
    node T_2967 = or(xact_allocate, T_2940)
    node T_2968 = and(T_2933, T_2967)
    node T_2971 = eq(xact_op_code, UInt<5>("h1"))
    node T_2972 = eq(xact_op_code, UInt<5>("h7"))
    node T_2973 = or(T_2971, T_2972)
    node T_2974 = bits(xact_op_code, 3, 3)
    node T_2975 = eq(xact_op_code, UInt<5>("h4"))
    node T_2976 = or(T_2974, T_2975)
    node T_2977 = or(T_2973, T_2976)
    node T_2978 = eq(xact_op_code, UInt<5>("h3"))
    node T_2979 = or(T_2977, T_2978)
    node T_2980 = eq(xact_op_code, UInt<5>("h6"))
    node T_2981 = or(T_2979, T_2980)
    node T_2984 = cat(xact_op_code, UInt<1>("h1"))
    wire T_3015_addr_block : UInt<26>
    wire T_3015_client_xact_id : UInt<4>
    wire T_3015_addr_beat : UInt<3>
    wire T_3015_is_builtin_type : UInt<1>
    wire T_3015_a_type : UInt<3>
    wire T_3015_union : UInt<11>
    wire T_3015_data : UInt<64>
    wire GEN_12 : UInt<8>
    node GEN_132 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), wmask_buffer_1, wmask_buffer_0)
    node GEN_133 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), wmask_buffer_2, GEN_132)
    node GEN_134 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), wmask_buffer_3, GEN_133)
    node GEN_135 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), wmask_buffer_4, GEN_134)
    node GEN_136 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), wmask_buffer_5, GEN_135)
    node GEN_137 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), wmask_buffer_6, GEN_136)
    node GEN_138 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), wmask_buffer_7, GEN_137)
    node T_3080 = cat(xact_op_code, UInt<1>("h0"))
    node T_3081 = cat(xact_addr_byte, xact_op_size)
    node T_3082 = cat(T_3081, T_3080)
    node T_3084 = cat(xact_op_size, xact_op_code)
    node T_3085 = cat(T_3084, UInt<1>("h0"))
    node T_3087 = cat(GEN_12, UInt<1>("h0"))
    node T_3099 = mux(T_1993, UInt<6>("h2"), UInt<6>("h0"))
    node T_3101 = mux(T_1995, UInt<6>("h0"), T_3099)
    node T_3103 = mux(T_1991, T_3082, pad(T_3101, 11))
    node T_3105 = mux(T_2001, pad(T_3087, 11), T_3103)
    node T_3107 = mux(T_1997, pad(T_3087, 11), T_3105)
    node T_3109 = mux(T_2003, pad(T_3085, 11), T_3107)
    node T_3111 = mux(T_1999, T_3082, T_3109)
    wire T_3140_addr_block : UInt<26>
    wire T_3140_client_xact_id : UInt<4>
    wire T_3140_addr_beat : UInt<3>
    wire T_3140_is_builtin_type : UInt<1>
    wire T_3140_a_type : UInt<3>
    wire T_3140_union : UInt<11>
    wire T_3140_data : UInt<64>
    wire GEN_13 : UInt<64>
    node GEN_139 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_140 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), data_buffer_2, GEN_139)
    node GEN_141 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), data_buffer_3, GEN_140)
    node GEN_142 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), data_buffer_4, GEN_141)
    node GEN_143 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), data_buffer_5, GEN_142)
    node GEN_144 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), data_buffer_6, GEN_143)
    node GEN_145 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), data_buffer_7, GEN_144)
    node T_3168_addr_block = mux(T_2857, T_3015_addr_block, T_3140_addr_block)
    node T_3168_client_xact_id = mux(T_2857, UInt<4>("h0"), UInt<4>("h0"))
    node T_3168_addr_beat = mux(T_2857, UInt<3>("h0"), T_3140_addr_beat)
    node T_3168_is_builtin_type = mux(T_2857, UInt<1>("h0"), UInt<1>("h1"))
    node T_3168_a_type = mux(T_2857, T_3015_a_type, T_3140_a_type)
    node T_3168_union = mux(T_2857, T_3015_union, T_3140_union)
    node T_3168_data = mux(T_2857, UInt<64>("h0"), T_3140_data)
    node T_3197 = and(T_2933, ognt_counter_up_done)
    node GEN_146 = mux(T_3197, UInt<4>("h7"), GEN_51)
    node GEN_147 = mux(ognt_counter_pending, UInt<1>("h1"), vol_ognt_counter_pending)
    wire T_3207_0 : UInt<3>
    wire T_3207_1 : UInt<3>
    node GEN_278 = pad(UInt<3>("h5"), 4)
    node T_3209 = eq(io_outer_grant_bits_g_type, GEN_278)
    node GEN_279 = pad(UInt<3>("h4"), 4)
    node T_3210 = eq(io_outer_grant_bits_g_type, GEN_279)
    node T_3211 = or(T_3209, T_3210)
    node T_3213 = mux(io_outer_grant_bits_is_builtin_type, T_3211, T_2723)
    node T_3214 = and(T_2241, T_3213)
    wire GEN_14 : UInt<8>
    node GEN_148 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_149 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), wmask_buffer_2, GEN_148)
    node GEN_150 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), wmask_buffer_3, GEN_149)
    node GEN_151 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), wmask_buffer_4, GEN_150)
    node GEN_152 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), wmask_buffer_5, GEN_151)
    node GEN_153 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), wmask_buffer_6, GEN_152)
    node GEN_154 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), wmask_buffer_7, GEN_153)
    node T_3215 = bits(GEN_14, 0, 0)
    wire GEN_15 : UInt<8>
    node T_3216 = bits(GEN_15, 1, 1)
    wire GEN_16 : UInt<8>
    node T_3217 = bits(GEN_16, 2, 2)
    wire GEN_17 : UInt<8>
    node T_3218 = bits(GEN_17, 3, 3)
    wire GEN_18 : UInt<8>
    node T_3219 = bits(GEN_18, 4, 4)
    wire GEN_19 : UInt<8>
    node T_3220 = bits(GEN_19, 5, 5)
    wire GEN_20 : UInt<8>
    node T_3221 = bits(GEN_20, 6, 6)
    wire GEN_21 : UInt<8>
    node T_3222 = bits(GEN_21, 7, 7)
    node T_3226 = mux(T_3215, UInt<8>("hff"), UInt<8>("h0"))
    node T_3230 = mux(T_3216, UInt<8>("hff"), UInt<8>("h0"))
    node T_3234 = mux(T_3217, UInt<8>("hff"), UInt<8>("h0"))
    node T_3238 = mux(T_3218, UInt<8>("hff"), UInt<8>("h0"))
    node T_3242 = mux(T_3219, UInt<8>("hff"), UInt<8>("h0"))
    node T_3246 = mux(T_3220, UInt<8>("hff"), UInt<8>("h0"))
    node T_3250 = mux(T_3221, UInt<8>("hff"), UInt<8>("h0"))
    node T_3254 = mux(T_3222, UInt<8>("hff"), UInt<8>("h0"))
    node T_3255 = cat(T_3230, T_3226)
    node T_3256 = cat(T_3238, T_3234)
    node T_3257 = cat(T_3256, T_3255)
    node T_3258 = cat(T_3246, T_3242)
    node T_3259 = cat(T_3254, T_3250)
    node T_3260 = cat(T_3259, T_3258)
    node T_3261 = cat(T_3260, T_3257)
    node T_3262 = not(T_3261)
    node T_3263 = and(T_3262, io_outer_grant_bits_data)
    wire GEN_22 : UInt<64>
    node GEN_155 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_156 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), data_buffer_2, GEN_155)
    node GEN_157 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), data_buffer_3, GEN_156)
    node GEN_158 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), data_buffer_4, GEN_157)
    node GEN_159 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), data_buffer_5, GEN_158)
    node GEN_160 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), data_buffer_6, GEN_159)
    node GEN_161 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), data_buffer_7, GEN_160)
    node T_3264 = and(T_3261, GEN_22)
    node T_3265 = or(T_3263, T_3264)
    wire GEN_23 : UInt<64>
    node GEN_162 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), GEN_23, GEN_94)
    node GEN_163 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), GEN_23, GEN_95)
    node GEN_164 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), GEN_23, GEN_96)
    node GEN_165 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), GEN_23, GEN_97)
    node GEN_166 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), GEN_23, GEN_98)
    node GEN_167 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), GEN_23, GEN_99)
    node GEN_168 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), GEN_23, GEN_100)
    node GEN_169 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), GEN_23, GEN_101)
    wire GEN_24 : UInt<8>
    node GEN_170 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_102)
    node GEN_171 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_103)
    node GEN_172 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_104)
    node GEN_173 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_105)
    node GEN_174 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_106)
    node GEN_175 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_107)
    node GEN_176 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_108)
    node GEN_177 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_109)
    node GEN_178 = mux(T_3214, GEN_162, GEN_94)
    node GEN_179 = mux(T_3214, GEN_163, GEN_95)
    node GEN_180 = mux(T_3214, GEN_164, GEN_96)
    node GEN_181 = mux(T_3214, GEN_165, GEN_97)
    node GEN_182 = mux(T_3214, GEN_166, GEN_98)
    node GEN_183 = mux(T_3214, GEN_167, GEN_99)
    node GEN_184 = mux(T_3214, GEN_168, GEN_100)
    node GEN_185 = mux(T_3214, GEN_169, GEN_101)
    node GEN_186 = mux(T_3214, GEN_170, GEN_102)
    node GEN_187 = mux(T_3214, GEN_171, GEN_103)
    node GEN_188 = mux(T_3214, GEN_172, GEN_104)
    node GEN_189 = mux(T_3214, GEN_173, GEN_105)
    node GEN_190 = mux(T_3214, GEN_174, GEN_106)
    node GEN_191 = mux(T_3214, GEN_175, GEN_107)
    node GEN_192 = mux(T_3214, GEN_176, GEN_108)
    node GEN_193 = mux(T_3214, GEN_177, GEN_109)
    node T_3268 = or(scoreboard_3, ognt_counter_pending)
    node T_3269 = or(T_3268, vol_ognt_counter_pending)
    node T_3281 = eq(T_2179, UInt<1>("h0"))
    node T_3283 = and(T_2175, T_3281)
    wire T_3291_0 : UInt<3>
    node GEN_280 = pad(UInt<3>("h5"), 4)
    node T_3293 = eq(io_inner_grant_bits_g_type, GEN_280)
    node T_3295 = mux(io_inner_grant_bits_is_builtin_type, T_3293, T_2178)
    node T_3297 = and(T_3283, T_3295)
    reg T_3299 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3301 = eq(T_3299, UInt<3>("h7"))
    node T_3303 = add(T_3299, UInt<3>("h1"))
    node T_3304 = tail(T_3303, 1)
    node GEN_194 = mux(T_3297, T_3304, T_3299)
    node T_3305 = and(T_3297, T_3301)
    node T_3306 = mux(T_3295, T_3299, UInt<3>("h0"))
    node T_3307 = mux(T_3295, T_3305, T_3283)
    node T_3308 = and(io_inner_finish_ready, io_inner_finish_valid)
    reg T_3314 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_3324 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_3326 = eq(T_3308, UInt<1>("h0"))
    node T_3327 = and(T_3307, T_3326)
    node T_3329 = add(T_3324, UInt<1>("h1"))
    node T_3330 = tail(T_3329, 1)
    node GEN_196 = mux(T_3327, T_3330, T_3324)
    node T_3332 = eq(T_3307, UInt<1>("h0"))
    node T_3333 = and(T_3308, T_3332)
    node T_3335 = sub(T_3324, UInt<1>("h1"))
    node T_3336 = tail(T_3335, 1)
    node GEN_197 = mux(T_3333, T_3336, GEN_196)
    node T_3338 = gt(T_3324, UInt<1>("h0"))
    node T_3343 = eq(T_1798, UInt<1>("h0"))
    node T_3360 = or(pending_ignt_data, T_2647)
    wire T_3370_0 : UInt<3>
    wire T_3370_1 : UInt<3>
    node GEN_281 = pad(UInt<3>("h5"), 4)
    node T_3372 = eq(io_outer_grant_bits_g_type, GEN_281)
    node GEN_282 = pad(UInt<3>("h4"), 4)
    node T_3373 = eq(io_outer_grant_bits_g_type, GEN_282)
    node T_3374 = or(T_3372, T_3373)
    node T_3376 = mux(io_outer_grant_bits_is_builtin_type, T_3374, T_2723)
    node T_3377 = and(T_2241, T_3376)
    node T_3382 = mux(T_3377, UInt<8>("hff"), UInt<8>("h0"))
    node T_3384 = dshlw(UInt<8>("h1"), io_outer_grant_bits_addr_beat)
    node T_3385 = and(T_3382, T_3384)
    node T_3386 = or(T_3360, T_3385)
    node GEN_198 = mux(T_3343, T_3386, GEN_38)
    node T_3389 = eq(state, UInt<4>("h1"))
    node T_3390 = or(T_1611, T_3389)
    node T_3393 = or(T_3390, scoreboard_0)
    node T_3395 = eq(T_3393, UInt<1>("h0"))
    node T_3412 = eq(UInt<3>("h6"), ignt_q.io_deq_bits_a_type)
    node T_3413 = mux(T_3412, UInt<3>("h1"), UInt<3>("h3"))
    node T_3414 = eq(UInt<3>("h5"), ignt_q.io_deq_bits_a_type)
    node T_3415 = mux(T_3414, UInt<3>("h1"), T_3413)
    node T_3416 = eq(UInt<3>("h4"), ignt_q.io_deq_bits_a_type)
    node T_3417 = mux(T_3416, UInt<3>("h4"), T_3415)
    node T_3418 = eq(UInt<3>("h3"), ignt_q.io_deq_bits_a_type)
    node T_3419 = mux(T_3418, UInt<3>("h3"), T_3417)
    node T_3420 = eq(UInt<3>("h2"), ignt_q.io_deq_bits_a_type)
    node T_3421 = mux(T_3420, UInt<3>("h3"), T_3419)
    node T_3422 = eq(UInt<3>("h1"), ignt_q.io_deq_bits_a_type)
    node T_3423 = mux(T_3422, UInt<3>("h5"), T_3421)
    node T_3424 = eq(UInt<3>("h0"), ignt_q.io_deq_bits_a_type)
    node T_3425 = mux(T_3424, UInt<3>("h4"), T_3423)
    node T_3426 = mux(ignt_q.io_deq_bits_is_builtin_type, T_3425, UInt<3>("h0"))
    wire T_3455_addr_beat : UInt<3>
    wire T_3455_client_xact_id : UInt<1>
    wire T_3455_manager_xact_id : UInt<4>
    wire T_3455_is_builtin_type : UInt<1>
    wire T_3455_g_type : UInt<4>
    wire T_3455_data : UInt<64>
    wire T_3455_client_id : UInt<1>
    wire GEN_25 : UInt<64>
    node GEN_199 = mux(eq(UInt<3>("h1"), ignt_data_idx), data_buffer_1, data_buffer_0)
    node GEN_200 = mux(eq(UInt<3>("h2"), ignt_data_idx), data_buffer_2, GEN_199)
    node GEN_201 = mux(eq(UInt<3>("h3"), ignt_data_idx), data_buffer_3, GEN_200)
    node GEN_202 = mux(eq(UInt<3>("h4"), ignt_data_idx), data_buffer_4, GEN_201)
    node GEN_203 = mux(eq(UInt<3>("h5"), ignt_data_idx), data_buffer_5, GEN_202)
    node GEN_204 = mux(eq(UInt<3>("h6"), ignt_data_idx), data_buffer_6, GEN_203)
    node GEN_205 = mux(eq(UInt<3>("h7"), ignt_data_idx), data_buffer_7, GEN_204)
    wire T_3491_0 : UInt<3>
    node GEN_283 = pad(UInt<3>("h5"), 4)
    node T_3493 = eq(io_inner_grant_bits_g_type, GEN_283)
    node T_3495 = mux(io_inner_grant_bits_is_builtin_type, T_3493, T_2178)
    node T_3497 = and(T_2175, T_3495)
    reg T_3499 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3501 = eq(T_3499, UInt<3>("h7"))
    node T_3503 = add(T_3499, UInt<3>("h1"))
    node T_3504 = tail(T_3503, 1)
    node GEN_206 = mux(T_3497, T_3504, T_3499)
    node T_3505 = and(T_3497, T_3501)
    node T_3506 = mux(T_3495, T_3499, ignt_q.io_deq_bits_addr_beat)
    node T_3507 = mux(T_3495, T_3505, T_2175)
    node T_3512 = and(T_2337, scoreboard_6)
    node T_3514 = eq(T_3269, UInt<1>("h0"))
    wire T_3522_0 : UInt<3>
    wire T_3522_1 : UInt<3>
    node GEN_284 = pad(UInt<3>("h5"), 4)
    node T_3524 = eq(io_inner_grant_bits_g_type, GEN_284)
    node GEN_285 = pad(UInt<3>("h4"), 4)
    node T_3525 = eq(io_inner_grant_bits_g_type, GEN_285)
    node T_3526 = or(T_3524, T_3525)
    node T_3528 = mux(io_inner_grant_bits_is_builtin_type, T_3526, T_2178)
    node T_3529 = dshr(pending_ignt_data, ignt_data_idx)
    node T_3530 = bits(T_3529, 0, 0)
    node T_3532 = mux(T_3528, T_3530, T_3395)
    node T_3533 = and(T_3514, T_3532)
    node GEN_207 = mux(T_3512, T_3533, T_2347)
    node GEN_208 = mux(T_2250, ignt_data_done, UInt<1>("h0"))
    node GEN_209 = mux(T_2250, ignt_data_idx, UInt<3>("h0"))
    node GEN_210 = mux(T_2250, T_3455_client_xact_id, T_2440_client_xact_id)
    node GEN_211 = mux(T_2250, UInt<4>("h6"), UInt<4>("h0"))
    node GEN_212 = mux(T_2250, T_3455_is_builtin_type, UInt<1>("h1"))
    node GEN_213 = mux(T_2250, T_3455_g_type, UInt<4>("h0"))
    node GEN_214 = mux(T_2250, T_3455_data, UInt<64>("h0"))
    node GEN_215 = mux(T_2250, T_3455_client_id, T_2440_client_id)
    node GEN_216 = mux(T_2250, GEN_207, T_2347)
    node T_3540 = not(io_incoherent_0)
    node GEN_217 = mux(T_1798, pad(T_3540, 2), T_2079)
    node T_3551 = and(T_1767, io_inner_acquire_valid)
    node T_3552 = or(T_1798, T_3551)
    wire T_3562_0 : UInt<3>
    wire T_3562_1 : UInt<3>
    wire T_3562_2 : UInt<3>
    node T_3564 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_3565 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_3566 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3567 = or(T_3564, T_3565)
    node T_3568 = or(T_3567, T_3566)
    node T_3569 = and(io_inner_acquire_bits_is_builtin_type, T_3568)
    node T_3570 = and(T_1612, T_3569)
    node T_3571 = and(T_3570, T_3552)
    node T_3573 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3574 = and(io_inner_acquire_bits_is_builtin_type, T_3573)
    node T_3603 = or(T_1921, T_1918)
    node T_3604 = bits(io_inner_acquire_bits_union, 8, 1)
    node T_3606 = mux(T_3603, T_3604, UInt<8>("h0"))
    node T_3607 = mux(T_3574, UInt<8>("hff"), T_3606)
    node T_3608 = bits(T_3607, 0, 0)
    node T_3609 = bits(T_3607, 1, 1)
    node T_3610 = bits(T_3607, 2, 2)
    node T_3611 = bits(T_3607, 3, 3)
    node T_3612 = bits(T_3607, 4, 4)
    node T_3613 = bits(T_3607, 5, 5)
    node T_3614 = bits(T_3607, 6, 6)
    node T_3615 = bits(T_3607, 7, 7)
    node T_3619 = mux(T_3608, UInt<8>("hff"), UInt<8>("h0"))
    node T_3623 = mux(T_3609, UInt<8>("hff"), UInt<8>("h0"))
    node T_3627 = mux(T_3610, UInt<8>("hff"), UInt<8>("h0"))
    node T_3631 = mux(T_3611, UInt<8>("hff"), UInt<8>("h0"))
    node T_3635 = mux(T_3612, UInt<8>("hff"), UInt<8>("h0"))
    node T_3639 = mux(T_3613, UInt<8>("hff"), UInt<8>("h0"))
    node T_3643 = mux(T_3614, UInt<8>("hff"), UInt<8>("h0"))
    node T_3647 = mux(T_3615, UInt<8>("hff"), UInt<8>("h0"))
    node T_3648 = cat(T_3623, T_3619)
    node T_3649 = cat(T_3631, T_3627)
    node T_3650 = cat(T_3649, T_3648)
    node T_3651 = cat(T_3639, T_3635)
    node T_3652 = cat(T_3647, T_3643)
    node T_3653 = cat(T_3652, T_3651)
    node T_3654 = cat(T_3653, T_3650)
    node T_3655 = not(T_3654)
    wire GEN_26 : UInt<64>
    node GEN_218 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_219 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), data_buffer_2, GEN_218)
    node GEN_220 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), data_buffer_3, GEN_219)
    node GEN_221 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), data_buffer_4, GEN_220)
    node GEN_222 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), data_buffer_5, GEN_221)
    node GEN_223 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), data_buffer_6, GEN_222)
    node GEN_224 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), data_buffer_7, GEN_223)
    node T_3656 = and(T_3655, GEN_26)
    node T_3657 = and(T_3654, io_inner_acquire_bits_data)
    node T_3658 = or(T_3656, T_3657)
    wire GEN_27 : UInt<64>
    node GEN_225 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_178)
    node GEN_226 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_179)
    node GEN_227 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_180)
    node GEN_228 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_181)
    node GEN_229 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_182)
    node GEN_230 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_183)
    node GEN_231 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_184)
    node GEN_232 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_185)
    wire GEN_28 : UInt<8>
    node GEN_233 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_234 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), wmask_buffer_2, GEN_233)
    node GEN_235 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), wmask_buffer_3, GEN_234)
    node GEN_236 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), wmask_buffer_4, GEN_235)
    node GEN_237 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), wmask_buffer_5, GEN_236)
    node GEN_238 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), wmask_buffer_6, GEN_237)
    node GEN_239 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), wmask_buffer_7, GEN_238)
    node T_3695 = or(T_3607, GEN_28)
    wire GEN_29 : UInt<8>
    node GEN_240 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_186)
    node GEN_241 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_187)
    node GEN_242 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_188)
    node GEN_243 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_189)
    node GEN_244 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_190)
    node GEN_245 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_191)
    node GEN_246 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_192)
    node GEN_247 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_193)
    node GEN_248 = mux(T_3571, GEN_225, GEN_178)
    node GEN_249 = mux(T_3571, GEN_226, GEN_179)
    node GEN_250 = mux(T_3571, GEN_227, GEN_180)
    node GEN_251 = mux(T_3571, GEN_228, GEN_181)
    node GEN_252 = mux(T_3571, GEN_229, GEN_182)
    node GEN_253 = mux(T_3571, GEN_230, GEN_183)
    node GEN_254 = mux(T_3571, GEN_231, GEN_184)
    node GEN_255 = mux(T_3571, GEN_232, GEN_185)
    node GEN_256 = mux(T_3571, GEN_240, GEN_186)
    node GEN_257 = mux(T_3571, GEN_241, GEN_187)
    node GEN_258 = mux(T_3571, GEN_242, GEN_188)
    node GEN_259 = mux(T_3571, GEN_243, GEN_189)
    node GEN_260 = mux(T_3571, GEN_244, GEN_190)
    node GEN_261 = mux(T_3571, GEN_245, GEN_191)
    node GEN_262 = mux(T_3571, GEN_246, GEN_192)
    node GEN_263 = mux(T_3571, GEN_247, GEN_193)
    node T_3698 = or(scoreboard_0, T_2343)
    node T_3699 = or(T_3698, vol_ignt_counter_pending)
    node T_3700 = or(T_3699, scoreboard_3)
    node T_3701 = or(T_3700, vol_ognt_counter_pending)
    node T_3702 = or(T_3701, ognt_counter_pending)
    node T_3703 = or(T_3702, scoreboard_6)
    node T_3704 = or(T_3703, ifin_counter_pending)
    node T_3706 = eq(T_3704, UInt<1>("h0"))
    node T_3708 = and(T_2337, all_pending_done)
    node GEN_264 = mux(T_3708, UInt<4>("h0"), GEN_146)
    node GEN_265 = mux(T_3708, UInt<8>("h0"), GEN_256)
    node GEN_266 = mux(T_3708, UInt<8>("h0"), GEN_257)
    node GEN_267 = mux(T_3708, UInt<8>("h0"), GEN_258)
    node GEN_268 = mux(T_3708, UInt<8>("h0"), GEN_259)
    node GEN_269 = mux(T_3708, UInt<8>("h0"), GEN_260)
    node GEN_270 = mux(T_3708, UInt<8>("h0"), GEN_261)
    node GEN_271 = mux(T_3708, UInt<8>("h0"), GEN_262)
    node GEN_272 = mux(T_3708, UInt<8>("h0"), GEN_263)
    io_inner_acquire_ready <= T_1981
    io_inner_grant_valid <= GEN_216
    io_inner_grant_bits_addr_beat <= GEN_209
    io_inner_grant_bits_client_xact_id <= GEN_210
    io_inner_grant_bits_manager_xact_id <= GEN_211
    io_inner_grant_bits_is_builtin_type <= GEN_212
    io_inner_grant_bits_g_type <= GEN_213
    io_inner_grant_bits_data <= GEN_214
    io_inner_grant_bits_client_id <= GEN_215
    io_inner_finish_ready <= T_2337
    io_inner_probe_valid <= T_2083
    io_inner_probe_bits_addr_block <= T_2030_addr_block
    io_inner_probe_bits_p_type <= T_2030_p_type
    io_inner_probe_bits_client_id <= UInt<1>("h0")
    io_inner_release_ready <= T_2274
    io_outer_acquire_valid <= T_2968
    io_outer_acquire_bits_addr_block <= T_3168_addr_block
    io_outer_acquire_bits_client_xact_id <= T_3168_client_xact_id
    io_outer_acquire_bits_addr_beat <= T_3168_addr_beat
    io_outer_acquire_bits_is_builtin_type <= T_3168_is_builtin_type
    io_outer_acquire_bits_a_type <= T_3168_a_type
    io_outer_acquire_bits_union <= T_3168_union
    io_outer_acquire_bits_data <= T_3168_data
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= T_2777
    io_outer_release_bits_addr_beat <= T_2828_addr_beat
    io_outer_release_bits_addr_block <= T_2828_addr_block
    io_outer_release_bits_client_xact_id <= UInt<4>("h0")
    io_outer_release_bits_voluntary <= UInt<1>("h1")
    io_outer_release_bits_r_type <= T_2828_r_type
    io_outer_release_bits_data <= T_2828_data
    io_outer_grant_ready <= GEN_147
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= UInt<1>("h0")
    io_outer_finish_bits_manager_id <= UInt<1>("h0")
    io_alloc_iacq_matches <= T_1749
    io_alloc_iacq_can <= T_1611
    io_alloc_irel_matches <= T_1752
    io_alloc_irel_can <= UInt<1>("h0")
    io_alloc_oprb_matches <= T_1755
    io_alloc_oprb_can <= UInt<1>("h0")
    io_alloc_idle <= T_1611
    io_alloc_addr_block <= xact_addr_block
    all_pending_done <= T_3706
    state <= GEN_264
    xact_addr_block <= GEN_49
    xact_allocate <= GEN_32
    xact_amo_shift_bytes <= GEN_33
    xact_op_code <= GEN_34
    xact_addr_byte <= GEN_35
    xact_op_size <= GEN_36
    xact_addr_beat <= xact_iacq_addr_beat
    xact_iacq_client_xact_id <= T_1823_client_xact_id
    xact_iacq_addr_beat <= T_1823_addr_beat
    xact_iacq_client_id <= T_1823_client_id
    xact_iacq_is_builtin_type <= T_1823_is_builtin_type
    xact_iacq_a_type <= T_1823_a_type
    xact_vol_ir_r_type <= GEN_60
    xact_vol_ir_src <= GEN_61
    xact_vol_ir_client_xact_id <= GEN_62
    pending_irel_data <= GEN_63
    vol_ignt_counter_pending <= T_2221
    vol_ignt_counter_up_idx <= T_2173
    vol_ignt_counter_up_done <= T_2174
    vol_ignt_counter_down_idx <= T_2204
    vol_ignt_counter_down_done <= T_2205
    scoreboard_6 <= T_1850
    ignt_data_idx <= T_3506
    ignt_data_done <= T_3507
    ifin_counter_pending <= T_3338
    ifin_counter_up_idx <= T_3306
    ifin_counter_up_done <= T_3307
    ifin_counter_down_done <= T_3308
    pending_put_data <= GEN_37
    pending_ignt_data <= GEN_198
    ognt_counter_pending <= T_2932
    ognt_counter_up_idx <= T_2884
    ognt_counter_up_done <= T_2885
    ognt_counter_down_idx <= T_2915
    ognt_counter_down_done <= T_2916
    pending_iprbs <= bits(GEN_217, 0, 0)
    pending_orel_send <= GEN_115
    pending_orel_data <= GEN_110
    vol_ognt_counter_pending <= T_2765
    vol_ognt_counter_up_idx <= T_2719
    vol_ognt_counter_up_done <= T_2720
    vol_ognt_counter_down_idx <= T_2748
    vol_ognt_counter_down_done <= T_2749
    sending_orel <= GEN_114
    data_buffer_0 <= GEN_248
    data_buffer_1 <= GEN_249
    data_buffer_2 <= GEN_250
    data_buffer_3 <= GEN_251
    data_buffer_4 <= GEN_252
    data_buffer_5 <= GEN_253
    data_buffer_6 <= GEN_254
    data_buffer_7 <= GEN_255
    wmask_buffer_0 <= GEN_265
    wmask_buffer_1 <= GEN_266
    wmask_buffer_2 <= GEN_267
    wmask_buffer_3 <= GEN_268
    wmask_buffer_4 <= GEN_269
    wmask_buffer_5 <= GEN_270
    wmask_buffer_6 <= GEN_271
    wmask_buffer_7 <= GEN_272
    data_valid_0 <= T_1716
    data_valid_1 <= T_1719
    data_valid_2 <= T_1722
    data_valid_3 <= T_1725
    data_valid_4 <= T_1728
    data_valid_5 <= T_1731
    data_valid_6 <= T_1734
    data_valid_7 <= T_1737
    ignt_q.io_enq_valid <= T_1822
    ignt_q.io_enq_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    ignt_q.io_enq_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    ignt_q.io_enq_bits_client_id <= io_inner_acquire_bits_client_id
    ignt_q.io_enq_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    ignt_q.io_enq_bits_a_type <= io_inner_acquire_bits_a_type
    ignt_q.io_deq_ready <= GEN_208
    T_2030_addr_block <= xact_addr_block
    T_2030_p_type <= T_2005
    T_2065_pending <= T_2139
    T_2065_up_done <= T_2073
    T_2065_down_idx <= T_2122
    T_2065_down_done <= T_2123
    T_2091 <= T_2091
    T_2115 <= GEN_41
    T_2125 <= GEN_43
    T_2166 <= GEN_45
    T_2197 <= GEN_46
    T_2207 <= GEN_48
    T_2379_addr_block <= xact_addr_block
    T_2379_client_xact_id <= xact_vol_ir_client_xact_id
    T_2379_r_type <= xact_vol_ir_r_type
    T_2379_client_id <= xact_vol_ir_src
    T_2440_client_xact_id <= T_2379_client_xact_id
    T_2440_client_id <= T_2379_client_id
    GEN_0 <= GEN_70
    GEN_1 <= GEN_70
    GEN_2 <= GEN_70
    GEN_3 <= GEN_70
    GEN_4 <= GEN_70
    GEN_5 <= GEN_70
    GEN_6 <= GEN_70
    GEN_7 <= GEN_70
    GEN_8 <= GEN_77
    GEN_9 <= T_2571
    T_2712 <= GEN_116
    T_2741 <= GEN_117
    T_2751 <= GEN_119
    T_2828_addr_beat <= vol_ognt_counter_up_idx
    T_2828_addr_block <= xact_addr_block
    T_2828_r_type <= T_2792
    T_2828_data <= GEN_11
    GEN_11 <= GEN_126
    T_2877 <= GEN_128
    T_2908 <= GEN_129
    T_2918 <= GEN_131
    T_3015_addr_block <= xact_addr_block
    T_3015_a_type <= pad(T_2981, 3)
    T_3015_union <= pad(T_2984, 11)
    GEN_12 <= GEN_138
    T_3140_addr_block <= xact_addr_block
    T_3140_addr_beat <= ognt_counter_up_idx
    T_3140_a_type <= xact_iacq_a_type
    T_3140_union <= T_3111
    T_3140_data <= GEN_13
    GEN_13 <= GEN_145
    GEN_14 <= GEN_154
    GEN_15 <= GEN_154
    GEN_16 <= GEN_154
    GEN_17 <= GEN_154
    GEN_18 <= GEN_154
    GEN_19 <= GEN_154
    GEN_20 <= GEN_154
    GEN_21 <= GEN_154
    GEN_22 <= GEN_161
    GEN_23 <= T_3265
    T_3299 <= GEN_194
    T_3314 <= T_3314
    T_3324 <= GEN_197
    T_3455_addr_beat <= ignt_q.io_deq_bits_addr_beat
    T_3455_client_xact_id <= ignt_q.io_deq_bits_client_xact_id
    T_3455_is_builtin_type <= ignt_q.io_deq_bits_is_builtin_type
    T_3455_g_type <= pad(T_3426, 4)
    T_3455_data <= GEN_25
    T_3455_client_id <= ignt_q.io_deq_bits_client_id
    GEN_25 <= GEN_205
    T_3499 <= GEN_206
    GEN_26 <= GEN_224
    GEN_27 <= T_3658
    GEN_28 <= GEN_239
    GEN_29 <= T_3695
    printf(clk, T_1652, "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n")
    stop(clk, T_1652, 1)
    printf(clk, T_1666, "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n")
    stop(clk, T_1666, 1)
    printf(clk, T_1677, "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n")
    stop(clk, T_1677, 1)

  module BufferedBroadcastAcquireTracker_6 :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
    output io_alloc_iacq_matches : UInt<1>
    output io_alloc_iacq_can : UInt<1>
    input io_alloc_iacq_should : UInt<1>
    output io_alloc_irel_matches : UInt<1>
    output io_alloc_irel_can : UInt<1>
    input io_alloc_irel_should : UInt<1>
    output io_alloc_oprb_matches : UInt<1>
    output io_alloc_oprb_can : UInt<1>
    input io_alloc_oprb_should : UInt<1>
    output io_alloc_idle : UInt<1>
    output io_alloc_addr_block : UInt<26>
  
    wire all_pending_done : UInt<1>
    reg state : UInt<4>, clk with :
      reset => (reset, UInt<4>("h0"))
    reg xact_addr_block : UInt<26>, clk with :
      reset => (reset, UInt<26>("h0"))
    reg xact_allocate : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_allocate)
    reg xact_amo_shift_bytes : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_amo_shift_bytes)
    reg xact_op_code : UInt<5>, clk with :
      reset => (UInt<1>("h0"), xact_op_code)
    reg xact_addr_byte : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_addr_byte)
    reg xact_op_size : UInt<2>, clk with :
      reset => (UInt<1>("h0"), xact_op_size)
    wire xact_addr_beat : UInt<3>
    wire xact_iacq_client_xact_id : UInt<1>
    wire xact_iacq_addr_beat : UInt<3>
    wire xact_iacq_client_id : UInt<1>
    wire xact_iacq_is_builtin_type : UInt<1>
    wire xact_iacq_a_type : UInt<3>
    reg xact_vol_ir_r_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_r_type)
    reg xact_vol_ir_src : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_src)
    reg xact_vol_ir_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_vol_ir_client_xact_id)
    reg pending_irel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ignt_counter_pending : UInt<1>
    wire vol_ignt_counter_up_idx : UInt<3>
    wire vol_ignt_counter_up_done : UInt<1>
    wire vol_ignt_counter_down_idx : UInt<3>
    wire vol_ignt_counter_down_done : UInt<1>
    wire scoreboard_6 : UInt<1>
    wire ignt_data_idx : UInt<3>
    wire ignt_data_done : UInt<1>
    wire ifin_counter_pending : UInt<1>
    wire ifin_counter_up_idx : UInt<3>
    wire ifin_counter_up_done : UInt<1>
    wire ifin_counter_down_idx : UInt<3>
    wire ifin_counter_down_done : UInt<1>
    reg pending_put_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg pending_ignt_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire ognt_counter_pending : UInt<1>
    wire ognt_counter_up_idx : UInt<3>
    wire ognt_counter_up_done : UInt<1>
    wire ognt_counter_down_idx : UInt<3>
    wire ognt_counter_down_done : UInt<1>
    reg pending_iprbs : UInt<1>, clk with :
      reset => (UInt<1>("h0"), pending_iprbs)
    reg pending_orel_send : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_orel_data : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    wire vol_ognt_counter_pending : UInt<1>
    wire vol_ognt_counter_up_idx : UInt<3>
    wire vol_ognt_counter_up_done : UInt<1>
    wire vol_ognt_counter_down_idx : UInt<3>
    wire vol_ognt_counter_down_done : UInt<1>
    node T_170 = neq(pending_orel_data, UInt<8>("h0"))
    node T_171 = or(pending_orel_send, T_170)
    node scoreboard_3 = or(T_171, vol_ognt_counter_pending)
    reg sending_orel : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_195_sharers : UInt<1>
    wire T_241_state : UInt<2>
    wire coh_inner_sharers : UInt<1>
    wire coh_outer_state : UInt<2>
    node T_1611 = eq(state, UInt<4>("h0"))
    node T_1612 = and(io_inner_acquire_ready, io_inner_acquire_valid)
    node T_1613 = and(T_1611, T_1612)
    node T_1614 = and(T_1613, io_alloc_iacq_should)
    wire T_1623_0 : UInt<3>
    node T_1625 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1626 = and(io_inner_acquire_bits_is_builtin_type, T_1625)
    node T_1627 = and(T_1614, T_1626)
    wire T_1636_0 : UInt<3>
    node T_1638 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1639 = and(io_inner_acquire_bits_is_builtin_type, T_1638)
    node T_1641 = eq(T_1639, UInt<1>("h0"))
    node T_1643 = eq(io_inner_acquire_bits_addr_beat, UInt<3>("h0"))
    node T_1644 = or(T_1641, T_1643)
    node T_1646 = eq(T_1644, UInt<1>("h0"))
    node T_1647 = and(T_1627, T_1646)
    node T_1649 = eq(T_1647, UInt<1>("h0"))
    node T_1650 = or(T_1649, reset)
    node T_1652 = eq(T_1650, UInt<1>("h0"))
    node T_1653 = neq(state, UInt<4>("h0"))
    node T_1654 = and(T_1653, scoreboard_6)
    node T_1656 = eq(xact_iacq_a_type, UInt<3>("h5"))
    node T_1658 = eq(xact_iacq_a_type, UInt<3>("h6"))
    node T_1659 = or(T_1656, T_1658)
    node T_1660 = and(xact_iacq_is_builtin_type, T_1659)
    node T_1661 = and(T_1654, T_1660)
    node T_1663 = eq(T_1661, UInt<1>("h0"))
    node T_1664 = or(T_1663, reset)
    node T_1666 = eq(T_1664, UInt<1>("h0"))
    node T_1670 = eq(xact_iacq_a_type, UInt<3>("h4"))
    node T_1671 = and(xact_iacq_is_builtin_type, T_1670)
    node T_1672 = and(T_1654, T_1671)
    node T_1674 = eq(T_1672, UInt<1>("h0"))
    node T_1675 = or(T_1674, reset)
    node T_1677 = eq(T_1675, UInt<1>("h0"))
    wire T_1691_0 : UInt<64>
    wire T_1691_1 : UInt<64>
    wire T_1691_2 : UInt<64>
    wire T_1691_3 : UInt<64>
    wire T_1691_4 : UInt<64>
    wire T_1691_5 : UInt<64>
    wire T_1691_6 : UInt<64>
    wire T_1691_7 : UInt<64>
    reg data_buffer_0 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_1 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_2 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_3 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_4 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_5 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_6 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    reg data_buffer_7 : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    wire T_1709_0 : UInt<8>
    wire T_1709_1 : UInt<8>
    wire T_1709_2 : UInt<8>
    wire T_1709_3 : UInt<8>
    wire T_1709_4 : UInt<8>
    wire T_1709_5 : UInt<8>
    wire T_1709_6 : UInt<8>
    wire T_1709_7 : UInt<8>
    reg wmask_buffer_0 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_1 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_2 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_3 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_4 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_5 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_6 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    reg wmask_buffer_7 : UInt<8>, clk with :
      reset => (reset, UInt<8>("h0"))
    node T_1714 = not(wmask_buffer_0)
    node T_1716 = eq(T_1714, UInt<8>("h0"))
    node T_1717 = not(wmask_buffer_1)
    node T_1719 = eq(T_1717, UInt<8>("h0"))
    node T_1720 = not(wmask_buffer_2)
    node T_1722 = eq(T_1720, UInt<8>("h0"))
    node T_1723 = not(wmask_buffer_3)
    node T_1725 = eq(T_1723, UInt<8>("h0"))
    node T_1726 = not(wmask_buffer_4)
    node T_1728 = eq(T_1726, UInt<8>("h0"))
    node T_1729 = not(wmask_buffer_5)
    node T_1731 = eq(T_1729, UInt<8>("h0"))
    node T_1732 = not(wmask_buffer_6)
    node T_1734 = eq(T_1732, UInt<8>("h0"))
    node T_1735 = not(wmask_buffer_7)
    node T_1737 = eq(T_1735, UInt<8>("h0"))
    wire data_valid_0 : UInt<1>
    wire data_valid_1 : UInt<1>
    wire data_valid_2 : UInt<1>
    wire data_valid_3 : UInt<1>
    wire data_valid_4 : UInt<1>
    wire data_valid_5 : UInt<1>
    wire data_valid_6 : UInt<1>
    wire data_valid_7 : UInt<1>
    node T_1748 = eq(io_inner_acquire_bits_addr_block, xact_addr_block)
    node T_1749 = and(T_1653, T_1748)
    node T_1751 = eq(io_inner_release_bits_addr_block, xact_addr_block)
    node T_1752 = and(T_1653, T_1751)
    node T_1754 = eq(io_outer_probe_bits_addr_block, xact_addr_block)
    node T_1755 = and(T_1653, T_1754)
    node T_1764 = eq(xact_iacq_client_xact_id, io_inner_acquire_bits_client_xact_id)
    node T_1765 = eq(xact_iacq_client_id, io_inner_acquire_bits_client_id)
    node T_1766 = and(T_1764, T_1765)
    node T_1767 = and(T_1766, scoreboard_6)
    node T_1768 = eq(xact_iacq_addr_beat, io_inner_acquire_bits_addr_beat)
    node T_1769 = and(T_1767, T_1768)
    inst ignt_q of Queue_8
    node T_1797 = and(T_1611, io_alloc_iacq_should)
    node T_1798 = and(T_1797, io_inner_acquire_valid)
    node T_1800 = eq(T_1769, UInt<1>("h0"))
    node T_1801 = and(T_1800, scoreboard_6)
    node T_1803 = and(T_1801, T_1612)
    wire T_1812_0 : UInt<3>
    node T_1814 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1815 = and(io_inner_acquire_bits_is_builtin_type, T_1814)
    node T_1817 = eq(T_1815, UInt<1>("h0"))
    node T_1820 = or(T_1817, T_1643)
    node T_1821 = and(T_1803, T_1820)
    node T_1822 = or(T_1798, T_1821)
    node T_1823_client_xact_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_xact_id, ignt_q.io_enq_bits_client_xact_id)
    node T_1823_addr_beat = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_addr_beat, ignt_q.io_enq_bits_addr_beat)
    node T_1823_client_id = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_client_id, ignt_q.io_enq_bits_client_id)
    node T_1823_is_builtin_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_is_builtin_type, ignt_q.io_enq_bits_is_builtin_type)
    node T_1823_a_type = mux(ignt_q.io_deq_valid, ignt_q.io_deq_bits_a_type, ignt_q.io_enq_bits_a_type)
    node T_1850 = gt(ignt_q.io_count, UInt<2>("h0"))
    node T_1852 = or(T_1653, io_alloc_iacq_should)
    wire T_1862_0 : UInt<3>
    wire T_1862_1 : UInt<3>
    wire T_1862_2 : UInt<3>
    node T_1864 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1865 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1866 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1867 = or(T_1864, T_1865)
    node T_1868 = or(T_1867, T_1866)
    node T_1869 = and(io_inner_acquire_bits_is_builtin_type, T_1868)
    node T_1870 = and(T_1612, T_1869)
    node T_1874 = mux(T_1870, UInt<8>("hff"), UInt<8>("h0"))
    node T_1875 = not(T_1874)
    node T_1877 = dshlw(UInt<8>("h1"), io_inner_acquire_bits_addr_beat)
    node T_1878 = not(T_1877)
    node T_1879 = or(T_1875, T_1878)
    node T_1880 = and(pending_put_data, T_1879)
    wire T_1890_0 : UInt<3>
    node T_1892 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1893 = and(io_inner_acquire_bits_is_builtin_type, T_1892)
    node T_1894 = and(T_1612, T_1893)
    node T_1897 = and(T_1894, T_1643)
    node T_1906 = mux(T_1897, UInt<8>("hfe"), UInt<8>("h0"))
    node T_1907 = or(T_1880, T_1906)
    node GEN_30 = mux(T_1852, T_1907, pending_put_data)
    node T_1915 = mul(UInt<4>("h8"), UInt<4>("h0"))
    node T_1917 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1918 = and(io_inner_acquire_bits_is_builtin_type, T_1917)
    node T_1920 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1921 = and(io_inner_acquire_bits_is_builtin_type, T_1920)
    node T_1922 = or(T_1918, T_1921)
    node T_1923 = bits(io_inner_acquire_bits_union, 5, 1)
    node T_1924 = mux(T_1922, UInt<5>("h1"), T_1923)
    node T_1925 = bits(io_inner_acquire_bits_union, 10, 8)
    node T_1926 = bits(io_inner_acquire_bits_union, 7, 6)
    wire T_1939_0 : UInt<3>
    wire T_1939_1 : UInt<3>
    wire T_1939_2 : UInt<3>
    node T_1941 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_1942 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1943 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_1944 = or(T_1941, T_1942)
    node T_1945 = or(T_1944, T_1943)
    node T_1946 = and(io_inner_acquire_bits_is_builtin_type, T_1945)
    node T_1947 = and(T_1612, T_1946)
    node T_1951 = mux(T_1947, UInt<8>("hff"), UInt<8>("h0"))
    node T_1952 = not(T_1951)
    node T_1956 = or(T_1952, T_1878)
    node T_1958 = mux(T_1921, T_1956, UInt<8>("h0"))
    node GEN_31 = mux(T_1798, io_inner_acquire_bits_addr_block, xact_addr_block)
    node GEN_32 = mux(T_1798, UInt<1>("h0"), xact_allocate)
    node GEN_33 = mux(T_1798, T_1915, xact_amo_shift_bytes)
    node GEN_34 = mux(T_1798, T_1924, xact_op_code)
    node GEN_35 = mux(T_1798, T_1925, xact_addr_byte)
    node GEN_36 = mux(T_1798, T_1926, xact_op_size)
    node GEN_37 = mux(T_1798, T_1958, GEN_30)
    node GEN_38 = mux(T_1798, UInt<8>("h0"), pending_ignt_data)
    node GEN_39 = mux(T_1798, UInt<4>("h5"), state)
    node scoreboard_0 = neq(pending_put_data, UInt<8>("h0"))
    wire T_1976_0 : UInt<3>
    node T_1978 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_1979 = and(io_inner_acquire_bits_is_builtin_type, T_1978)
    node T_1980 = and(T_1767, T_1979)
    node T_1981 = or(T_1611, T_1980)
    node T_1982 = not(pending_ignt_data)
    node skip_outer_acquire = eq(T_1982, UInt<8>("h0"))
    node T_1991 = eq(UInt<3>("h4"), xact_iacq_a_type)
    node T_1992 = mux(T_1991, UInt<2>("h0"), UInt<2>("h2"))
    node T_1993 = eq(UInt<3>("h6"), xact_iacq_a_type)
    node T_1994 = mux(T_1993, UInt<2>("h0"), T_1992)
    node T_1995 = eq(UInt<3>("h5"), xact_iacq_a_type)
    node T_1996 = mux(T_1995, UInt<2>("h2"), T_1994)
    node T_1997 = eq(UInt<3>("h2"), xact_iacq_a_type)
    node T_1998 = mux(T_1997, UInt<2>("h0"), T_1996)
    node T_1999 = eq(UInt<3>("h0"), xact_iacq_a_type)
    node T_2000 = mux(T_1999, UInt<2>("h2"), T_1998)
    node T_2001 = eq(UInt<3>("h3"), xact_iacq_a_type)
    node T_2002 = mux(T_2001, UInt<2>("h0"), T_2000)
    node T_2003 = eq(UInt<3>("h1"), xact_iacq_a_type)
    node T_2004 = mux(T_2003, UInt<2>("h2"), T_2002)
    node T_2005 = mux(xact_iacq_is_builtin_type, T_2004, UInt<2>("h0"))
    wire T_2030_addr_block : UInt<26>
    wire T_2030_p_type : UInt<2>
    wire T_2030_client_id : UInt<1>
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h0"))
    node T_2056 = mux(T_2055, UInt<4>("h6"), UInt<4>("h7"))
    wire T_2065_pending : UInt<1>
    wire T_2065_up_idx : UInt<3>
    wire T_2065_up_done : UInt<1>
    wire T_2065_down_idx : UInt<3>
    wire T_2065_down_done : UInt<1>
    node T_2073 = and(io_inner_probe_ready, io_inner_probe_valid)
    node T_2074 = not(T_2073)
    node T_2076 = dshlw(UInt<2>("h1"), io_inner_probe_bits_client_id)
    node T_2077 = not(T_2076)
    node GEN_273 = pad(T_2074, 2)
    node T_2078 = or(GEN_273, T_2077)
    node GEN_274 = pad(pending_iprbs, 2)
    node T_2079 = and(GEN_274, T_2078)
    node T_2080 = eq(state, UInt<4>("h5"))
    node T_2083 = and(T_2080, pending_iprbs)
    reg T_2091 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2100 = and(io_inner_release_ready, io_inner_release_valid)
    node T_2103 = eq(io_inner_release_bits_voluntary, UInt<1>("h0"))
    node T_2104 = and(T_1653, T_2103)
    node T_2105 = and(T_2100, T_2104)
    node T_2107 = eq(io_inner_release_bits_r_type, UInt<3>("h0"))
    node T_2108 = eq(io_inner_release_bits_r_type, UInt<3>("h1"))
    node T_2109 = eq(io_inner_release_bits_r_type, UInt<3>("h2"))
    node T_2110 = or(T_2107, T_2108)
    node T_2111 = or(T_2110, T_2109)
    node T_2113 = and(T_2105, T_2111)
    reg T_2115 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2117 = eq(T_2115, UInt<3>("h7"))
    node T_2119 = add(T_2115, UInt<3>("h1"))
    node T_2120 = tail(T_2119, 1)
    node GEN_41 = mux(T_2113, T_2120, T_2115)
    node T_2121 = and(T_2113, T_2117)
    node T_2122 = mux(T_2111, T_2115, UInt<3>("h0"))
    node T_2123 = mux(T_2111, T_2121, T_2105)
    reg T_2125 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2127 = eq(T_2123, UInt<1>("h0"))
    node T_2128 = and(T_2073, T_2127)
    node T_2130 = add(T_2125, UInt<1>("h1"))
    node T_2131 = tail(T_2130, 1)
    node GEN_42 = mux(T_2128, T_2131, T_2125)
    node T_2133 = eq(T_2073, UInt<1>("h0"))
    node T_2134 = and(T_2123, T_2133)
    node T_2136 = sub(T_2125, UInt<1>("h1"))
    node T_2137 = tail(T_2136, 1)
    node GEN_43 = mux(T_2134, T_2137, GEN_42)
    node T_2139 = gt(T_2125, UInt<1>("h0"))
    node T_2143 = or(pending_iprbs, T_2065_pending)
    node T_2145 = eq(T_2143, UInt<1>("h0"))
    node T_2146 = and(T_2080, T_2145)
    node GEN_44 = mux(T_2146, T_2056, GEN_39)
    node T_2150 = mux(T_1611, io_alloc_irel_should, io_alloc_irel_matches)
    node T_2151 = and(T_2150, io_inner_release_bits_voluntary)
    node T_2156 = and(T_2100, T_2151)
    node T_2164 = and(T_2156, T_2111)
    reg T_2166 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2168 = eq(T_2166, UInt<3>("h7"))
    node T_2170 = add(T_2166, UInt<3>("h1"))
    node T_2171 = tail(T_2170, 1)
    node GEN_45 = mux(T_2164, T_2171, T_2166)
    node T_2172 = and(T_2164, T_2168)
    node T_2173 = mux(T_2111, T_2166, UInt<3>("h0"))
    node T_2174 = mux(T_2111, T_2172, T_2156)
    node T_2175 = and(io_inner_grant_ready, io_inner_grant_valid)
    node T_2178 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_2179 = and(io_inner_grant_bits_is_builtin_type, T_2178)
    node T_2180 = and(T_1653, T_2179)
    node T_2181 = and(T_2175, T_2180)
    wire T_2189_0 : UInt<3>
    node GEN_275 = pad(UInt<3>("h5"), 4)
    node T_2191 = eq(io_inner_grant_bits_g_type, GEN_275)
    node T_2193 = mux(io_inner_grant_bits_is_builtin_type, T_2191, T_2178)
    node T_2195 = and(T_2181, T_2193)
    reg T_2197 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2199 = eq(T_2197, UInt<3>("h7"))
    node T_2201 = add(T_2197, UInt<3>("h1"))
    node T_2202 = tail(T_2201, 1)
    node GEN_46 = mux(T_2195, T_2202, T_2197)
    node T_2203 = and(T_2195, T_2199)
    node T_2204 = mux(T_2193, T_2197, UInt<3>("h0"))
    node T_2205 = mux(T_2193, T_2203, T_2181)
    reg T_2207 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2209 = eq(T_2205, UInt<1>("h0"))
    node T_2210 = and(T_2174, T_2209)
    node T_2212 = add(T_2207, UInt<1>("h1"))
    node T_2213 = tail(T_2212, 1)
    node GEN_47 = mux(T_2210, T_2213, T_2207)
    node T_2215 = eq(T_2174, UInt<1>("h0"))
    node T_2216 = and(T_2205, T_2215)
    node T_2218 = sub(T_2207, UInt<1>("h1"))
    node T_2219 = tail(T_2218, 1)
    node GEN_48 = mux(T_2216, T_2219, GEN_47)
    node T_2221 = gt(T_2207, UInt<1>("h0"))
    node T_2223 = and(T_1611, io_alloc_irel_should)
    node T_2224 = and(T_2223, io_inner_release_valid)
    node GEN_49 = mux(T_2224, io_inner_release_bits_addr_block, GEN_31)
    node GEN_50 = mux(T_2224, UInt<8>("hff"), pending_irel_data)
    node GEN_51 = mux(T_2224, UInt<4>("h7"), GEN_44)
    node T_2231 = and(T_1751, io_inner_release_bits_voluntary)
    node T_2233 = eq(state, UInt<4>("h8"))
    node T_2234 = or(T_1611, T_2233)
    node T_2236 = eq(T_2234, UInt<1>("h0"))
    node T_2237 = and(T_2231, T_2236)
    node T_2239 = eq(all_pending_done, UInt<1>("h0"))
    node T_2240 = and(T_2237, T_2239)
    node T_2241 = and(io_outer_grant_ready, io_outer_grant_valid)
    node T_2243 = eq(T_2241, UInt<1>("h0"))
    node T_2244 = and(T_2240, T_2243)
    node T_2247 = eq(T_2175, UInt<1>("h0"))
    node T_2248 = and(T_2244, T_2247)
    node T_2250 = eq(vol_ignt_counter_pending, UInt<1>("h0"))
    node T_2251 = and(T_2248, T_2250)
    node T_2252 = dshr(pending_orel_data, io_inner_release_bits_addr_beat)
    node T_2253 = bits(T_2252, 0, 0)
    node T_2254 = and(sending_orel, T_2253)
    node T_2255 = and(io_outer_release_ready, io_outer_release_valid)
    node T_2256 = eq(io_inner_release_bits_addr_beat, io_outer_release_bits_addr_beat)
    node T_2257 = and(T_2255, T_2256)
    node T_2263 = or(T_2254, T_2257)
    node T_2264 = and(T_2111, T_2263)
    node T_2266 = eq(T_2264, UInt<1>("h0"))
    node T_2267 = and(T_2251, T_2266)
    node T_2271 = and(T_1751, T_2103)
    node T_2273 = and(T_2271, T_2080)
    node T_2274 = or(T_2267, T_2273)
    node T_2275 = and(T_2274, io_inner_release_valid)
    node T_2276 = or(T_2224, T_2275)
    node T_2277 = and(T_2276, io_inner_release_ready)
    node T_2286 = eq(T_2111, UInt<1>("h0"))
    node T_2288 = eq(io_inner_release_bits_addr_beat, UInt<3>("h0"))
    node T_2289 = or(T_2286, T_2288)
    node GEN_52 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_r_type, xact_vol_ir_r_type)
    node GEN_53 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_id, xact_vol_ir_src)
    node GEN_54 = mux(io_inner_release_bits_voluntary, io_inner_release_bits_client_xact_id, xact_vol_ir_client_xact_id)
    node T_2303 = and(T_2100, T_2111)
    node T_2307 = mux(T_2303, UInt<8>("hff"), UInt<8>("h0"))
    node T_2308 = not(T_2307)
    node T_2310 = dshlw(UInt<8>("h1"), io_inner_release_bits_addr_beat)
    node T_2311 = not(T_2310)
    node T_2312 = or(T_2308, T_2311)
    node T_2314 = mux(T_2111, T_2312, UInt<8>("h0"))
    node GEN_55 = mux(T_2289, GEN_52, xact_vol_ir_r_type)
    node GEN_56 = mux(T_2289, GEN_53, xact_vol_ir_src)
    node GEN_57 = mux(T_2289, GEN_54, xact_vol_ir_client_xact_id)
    node GEN_58 = mux(T_2289, T_2314, GEN_50)
    node T_2316 = eq(T_2289, UInt<1>("h0"))
    node T_2333 = and(pending_irel_data, T_2312)
    node GEN_59 = mux(T_2316, T_2333, GEN_58)
    node GEN_60 = mux(T_2277, GEN_55, xact_vol_ir_r_type)
    node GEN_61 = mux(T_2277, GEN_56, xact_vol_ir_src)
    node GEN_62 = mux(T_2277, GEN_57, xact_vol_ir_client_xact_id)
    node GEN_63 = mux(T_2277, GEN_59, GEN_50)
    node T_2334 = eq(state, UInt<4>("h3"))
    node T_2335 = eq(state, UInt<4>("h4"))
    node T_2337 = eq(state, UInt<4>("h7"))
    node T_2338 = or(T_2334, T_2335)
    node T_2339 = or(T_2338, T_2080)
    node T_2340 = or(T_2339, T_2337)
    node T_2341 = and(T_2340, vol_ignt_counter_pending)
    node T_2343 = neq(pending_irel_data, UInt<8>("h0"))
    node T_2344 = or(T_2343, vol_ognt_counter_pending)
    node T_2346 = eq(T_2344, UInt<1>("h0"))
    node T_2347 = and(T_2341, T_2346)
    wire T_2379_addr_beat : UInt<3>
    wire T_2379_addr_block : UInt<26>
    wire T_2379_client_xact_id : UInt<1>
    wire T_2379_voluntary : UInt<1>
    wire T_2379_r_type : UInt<3>
    wire T_2379_data : UInt<64>
    wire T_2379_client_id : UInt<1>
    wire T_2440_addr_beat : UInt<3>
    wire T_2440_client_xact_id : UInt<1>
    wire T_2440_manager_xact_id : UInt<4>
    wire T_2440_is_builtin_type : UInt<1>
    wire T_2440_g_type : UInt<4>
    wire T_2440_data : UInt<64>
    wire T_2440_client_id : UInt<1>
    wire GEN_0 : UInt<8>
    node GEN_64 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_65 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), wmask_buffer_2, GEN_64)
    node GEN_66 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), wmask_buffer_3, GEN_65)
    node GEN_67 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), wmask_buffer_4, GEN_66)
    node GEN_68 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), wmask_buffer_5, GEN_67)
    node GEN_69 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), wmask_buffer_6, GEN_68)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), wmask_buffer_7, GEN_69)
    node T_2521 = bits(GEN_0, 0, 0)
    wire GEN_1 : UInt<8>
    node T_2522 = bits(GEN_1, 1, 1)
    wire GEN_2 : UInt<8>
    node T_2523 = bits(GEN_2, 2, 2)
    wire GEN_3 : UInt<8>
    node T_2524 = bits(GEN_3, 3, 3)
    wire GEN_4 : UInt<8>
    node T_2525 = bits(GEN_4, 4, 4)
    wire GEN_5 : UInt<8>
    node T_2526 = bits(GEN_5, 5, 5)
    wire GEN_6 : UInt<8>
    node T_2527 = bits(GEN_6, 6, 6)
    wire GEN_7 : UInt<8>
    node T_2528 = bits(GEN_7, 7, 7)
    node T_2532 = mux(T_2521, UInt<8>("hff"), UInt<8>("h0"))
    node T_2536 = mux(T_2522, UInt<8>("hff"), UInt<8>("h0"))
    node T_2540 = mux(T_2523, UInt<8>("hff"), UInt<8>("h0"))
    node T_2544 = mux(T_2524, UInt<8>("hff"), UInt<8>("h0"))
    node T_2548 = mux(T_2525, UInt<8>("hff"), UInt<8>("h0"))
    node T_2552 = mux(T_2526, UInt<8>("hff"), UInt<8>("h0"))
    node T_2556 = mux(T_2527, UInt<8>("hff"), UInt<8>("h0"))
    node T_2560 = mux(T_2528, UInt<8>("hff"), UInt<8>("h0"))
    node T_2561 = cat(T_2536, T_2532)
    node T_2562 = cat(T_2544, T_2540)
    node T_2563 = cat(T_2562, T_2561)
    node T_2564 = cat(T_2552, T_2548)
    node T_2565 = cat(T_2560, T_2556)
    node T_2566 = cat(T_2565, T_2564)
    node T_2567 = cat(T_2566, T_2563)
    node T_2568 = not(T_2567)
    node T_2569 = and(T_2568, io_inner_release_bits_data)
    wire GEN_8 : UInt<64>
    node GEN_71 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_72 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), data_buffer_2, GEN_71)
    node GEN_73 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), data_buffer_3, GEN_72)
    node GEN_74 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), data_buffer_4, GEN_73)
    node GEN_75 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), data_buffer_5, GEN_74)
    node GEN_76 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), data_buffer_6, GEN_75)
    node GEN_77 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), data_buffer_7, GEN_76)
    node T_2570 = and(T_2567, GEN_8)
    node T_2571 = or(T_2569, T_2570)
    wire GEN_9 : UInt<64>
    node GEN_78 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_0)
    node GEN_79 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_1)
    node GEN_80 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_2)
    node GEN_81 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_3)
    node GEN_82 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_4)
    node GEN_83 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_5)
    node GEN_84 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_6)
    node GEN_85 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), GEN_9, data_buffer_7)
    wire GEN_10 : UInt<8>
    node GEN_86 = mux(eq(UInt<3>("h0"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_0)
    node GEN_87 = mux(eq(UInt<3>("h1"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_1)
    node GEN_88 = mux(eq(UInt<3>("h2"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_2)
    node GEN_89 = mux(eq(UInt<3>("h3"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_3)
    node GEN_90 = mux(eq(UInt<3>("h4"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_4)
    node GEN_91 = mux(eq(UInt<3>("h5"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_5)
    node GEN_92 = mux(eq(UInt<3>("h6"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_6)
    node GEN_93 = mux(eq(UInt<3>("h7"), io_inner_release_bits_addr_beat), UInt<8>("hff"), wmask_buffer_7)
    node GEN_94 = mux(T_2303, GEN_78, data_buffer_0)
    node GEN_95 = mux(T_2303, GEN_79, data_buffer_1)
    node GEN_96 = mux(T_2303, GEN_80, data_buffer_2)
    node GEN_97 = mux(T_2303, GEN_81, data_buffer_3)
    node GEN_98 = mux(T_2303, GEN_82, data_buffer_4)
    node GEN_99 = mux(T_2303, GEN_83, data_buffer_5)
    node GEN_100 = mux(T_2303, GEN_84, data_buffer_6)
    node GEN_101 = mux(T_2303, GEN_85, data_buffer_7)
    node GEN_102 = mux(T_2303, GEN_86, wmask_buffer_0)
    node GEN_103 = mux(T_2303, GEN_87, wmask_buffer_1)
    node GEN_104 = mux(T_2303, GEN_88, wmask_buffer_2)
    node GEN_105 = mux(T_2303, GEN_89, wmask_buffer_3)
    node GEN_106 = mux(T_2303, GEN_90, wmask_buffer_4)
    node GEN_107 = mux(T_2303, GEN_91, wmask_buffer_5)
    node GEN_108 = mux(T_2303, GEN_92, wmask_buffer_6)
    node GEN_109 = mux(T_2303, GEN_93, wmask_buffer_7)
    wire T_2604_state : UInt<2>
    node T_2631 = or(T_1653, io_alloc_irel_should)
    node T_2647 = and(T_2307, T_2310)
    node T_2648 = or(pending_orel_data, T_2647)
    node T_2651 = eq(io_outer_release_bits_r_type, UInt<3>("h0"))
    node T_2652 = eq(io_outer_release_bits_r_type, UInt<3>("h1"))
    node T_2653 = eq(io_outer_release_bits_r_type, UInt<3>("h2"))
    node T_2654 = or(T_2651, T_2652)
    node T_2655 = or(T_2654, T_2653)
    node T_2656 = and(T_2255, T_2655)
    node T_2660 = mux(T_2656, UInt<8>("hff"), UInt<8>("h0"))
    node T_2661 = not(T_2660)
    node T_2663 = dshlw(UInt<8>("h1"), io_outer_release_bits_addr_beat)
    node T_2664 = not(T_2663)
    node T_2665 = or(T_2661, T_2664)
    node T_2666 = and(T_2648, T_2665)
    node GEN_110 = mux(T_2631, T_2666, pending_orel_data)
    node T_2677 = eq(T_2655, UInt<1>("h0"))
    node T_2679 = eq(io_outer_release_bits_addr_beat, UInt<3>("h0"))
    node T_2680 = or(T_2677, T_2679)
    node GEN_112 = mux(T_2680, UInt<1>("h1"), sending_orel)
    node T_2692 = eq(io_outer_release_bits_addr_beat, UInt<3>("h7"))
    node T_2693 = or(T_2677, T_2692)
    node GEN_113 = mux(T_2693, UInt<1>("h0"), GEN_112)
    node GEN_114 = mux(T_2255, GEN_113, sending_orel)
    node GEN_115 = mux(T_2255, UInt<1>("h0"), pending_orel_send)
    node T_2702 = and(T_2255, io_outer_release_bits_voluntary)
    node T_2710 = and(T_2702, T_2655)
    reg T_2712 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2714 = eq(T_2712, UInt<3>("h7"))
    node T_2716 = add(T_2712, UInt<3>("h1"))
    node T_2717 = tail(T_2716, 1)
    node GEN_116 = mux(T_2710, T_2717, T_2712)
    node T_2718 = and(T_2710, T_2714)
    node T_2719 = mux(T_2655, T_2712, UInt<3>("h0"))
    node T_2720 = mux(T_2655, T_2718, T_2702)
    node T_2723 = eq(io_outer_grant_bits_g_type, UInt<4>("h0"))
    node T_2724 = and(io_outer_grant_bits_is_builtin_type, T_2723)
    node T_2725 = and(T_2241, T_2724)
    wire T_2733_0 : UInt<3>
    node GEN_276 = pad(UInt<3>("h5"), 4)
    node T_2735 = eq(io_outer_grant_bits_g_type, GEN_276)
    node T_2737 = mux(io_outer_grant_bits_is_builtin_type, T_2735, T_2723)
    node T_2739 = and(T_2725, T_2737)
    reg T_2741 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2743 = eq(T_2741, UInt<3>("h7"))
    node T_2745 = add(T_2741, UInt<3>("h1"))
    node T_2746 = tail(T_2745, 1)
    node GEN_117 = mux(T_2739, T_2746, T_2741)
    node T_2747 = and(T_2739, T_2743)
    node T_2748 = mux(T_2737, T_2741, UInt<3>("h0"))
    node T_2749 = mux(T_2737, T_2747, T_2725)
    reg T_2751 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2753 = eq(T_2749, UInt<1>("h0"))
    node T_2754 = and(T_2720, T_2753)
    node T_2756 = add(T_2751, UInt<1>("h1"))
    node T_2757 = tail(T_2756, 1)
    node GEN_118 = mux(T_2754, T_2757, T_2751)
    node T_2759 = eq(T_2720, UInt<1>("h0"))
    node T_2760 = and(T_2749, T_2759)
    node T_2762 = sub(T_2751, UInt<1>("h1"))
    node T_2763 = tail(T_2762, 1)
    node GEN_119 = mux(T_2760, T_2763, GEN_118)
    node T_2765 = gt(T_2751, UInt<1>("h0"))
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter_up_idx)
    node T_2775 = bits(T_2774, 0, 0)
    node T_2776 = mux(T_2655, T_2775, pending_orel_send)
    node T_2777 = and(T_2337, T_2776)
    node T_2791 = eq(UInt<2>("h2"), UInt<2>("h2"))
    node T_2792 = mux(T_2791, UInt<3>("h0"), UInt<3>("h3"))
    wire T_2828_addr_beat : UInt<3>
    wire T_2828_addr_block : UInt<26>
    wire T_2828_client_xact_id : UInt<4>
    wire T_2828_voluntary : UInt<1>
    wire T_2828_r_type : UInt<3>
    wire T_2828_data : UInt<64>
    wire GEN_11 : UInt<64>
    node GEN_120 = mux(eq(UInt<3>("h1"), vol_ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_121 = mux(eq(UInt<3>("h2"), vol_ognt_counter_up_idx), data_buffer_2, GEN_120)
    node GEN_122 = mux(eq(UInt<3>("h3"), vol_ognt_counter_up_idx), data_buffer_3, GEN_121)
    node GEN_123 = mux(eq(UInt<3>("h4"), vol_ognt_counter_up_idx), data_buffer_4, GEN_122)
    node GEN_124 = mux(eq(UInt<3>("h5"), vol_ognt_counter_up_idx), data_buffer_5, GEN_123)
    node GEN_125 = mux(eq(UInt<3>("h6"), vol_ognt_counter_up_idx), data_buffer_6, GEN_124)
    node GEN_126 = mux(eq(UInt<3>("h7"), vol_ognt_counter_up_idx), data_buffer_7, GEN_125)
    node T_2857 = eq(xact_iacq_is_builtin_type, UInt<1>("h0"))
    node T_2860 = and(io_outer_acquire_ready, io_outer_acquire_valid)
    wire T_2871_0 : UInt<3>
    node T_2873 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_2874 = and(io_outer_acquire_bits_is_builtin_type, T_2873)
    node T_2875 = and(T_2860, T_2874)
    reg T_2877 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2879 = eq(T_2877, UInt<3>("h7"))
    node T_2881 = add(T_2877, UInt<3>("h1"))
    node T_2882 = tail(T_2881, 1)
    node GEN_128 = mux(T_2875, T_2882, T_2877)
    node T_2883 = and(T_2875, T_2879)
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat)
    node T_2885 = mux(T_2874, T_2883, T_2860)
    node T_2891 = eq(T_2724, UInt<1>("h0"))
    node T_2892 = and(T_2241, T_2891)
    wire T_2900_0 : UInt<3>
    node GEN_277 = pad(UInt<3>("h5"), 4)
    node T_2902 = eq(io_outer_grant_bits_g_type, GEN_277)
    node T_2904 = mux(io_outer_grant_bits_is_builtin_type, T_2902, T_2723)
    node T_2906 = and(T_2892, T_2904)
    reg T_2908 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_2910 = eq(T_2908, UInt<3>("h7"))
    node T_2912 = add(T_2908, UInt<3>("h1"))
    node T_2913 = tail(T_2912, 1)
    node GEN_129 = mux(T_2906, T_2913, T_2908)
    node T_2914 = and(T_2906, T_2910)
    node T_2915 = mux(T_2904, T_2908, xact_addr_beat)
    node T_2916 = mux(T_2904, T_2914, T_2892)
    reg T_2918 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_2920 = eq(T_2916, UInt<1>("h0"))
    node T_2921 = and(T_2885, T_2920)
    node T_2923 = add(T_2918, UInt<1>("h1"))
    node T_2924 = tail(T_2923, 1)
    node GEN_130 = mux(T_2921, T_2924, T_2918)
    node T_2926 = eq(T_2885, UInt<1>("h0"))
    node T_2927 = and(T_2916, T_2926)
    node T_2929 = sub(T_2918, UInt<1>("h1"))
    node T_2930 = tail(T_2929, 1)
    node GEN_131 = mux(T_2927, T_2930, GEN_130)
    node T_2932 = gt(T_2918, UInt<1>("h0"))
    node T_2933 = eq(state, UInt<4>("h6"))
    node T_2937 = dshr(pending_put_data, ognt_counter_up_idx)
    node T_2938 = bits(T_2937, 0, 0)
    node T_2940 = eq(T_2938, UInt<1>("h0"))
    wire T_2949_0 : UInt<3>
    wire T_2949_1 : UInt<3>
    wire T_2949_2 : UInt<3>
    node T_2967 = or(xact_allocate, T_2940)
    node T_2968 = and(T_2933, T_2967)
    node T_2971 = eq(xact_op_code, UInt<5>("h1"))
    node T_2972 = eq(xact_op_code, UInt<5>("h7"))
    node T_2973 = or(T_2971, T_2972)
    node T_2974 = bits(xact_op_code, 3, 3)
    node T_2975 = eq(xact_op_code, UInt<5>("h4"))
    node T_2976 = or(T_2974, T_2975)
    node T_2977 = or(T_2973, T_2976)
    node T_2978 = eq(xact_op_code, UInt<5>("h3"))
    node T_2979 = or(T_2977, T_2978)
    node T_2980 = eq(xact_op_code, UInt<5>("h6"))
    node T_2981 = or(T_2979, T_2980)
    node T_2984 = cat(xact_op_code, UInt<1>("h1"))
    wire T_3015_addr_block : UInt<26>
    wire T_3015_client_xact_id : UInt<4>
    wire T_3015_addr_beat : UInt<3>
    wire T_3015_is_builtin_type : UInt<1>
    wire T_3015_a_type : UInt<3>
    wire T_3015_union : UInt<11>
    wire T_3015_data : UInt<64>
    wire GEN_12 : UInt<8>
    node GEN_132 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), wmask_buffer_1, wmask_buffer_0)
    node GEN_133 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), wmask_buffer_2, GEN_132)
    node GEN_134 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), wmask_buffer_3, GEN_133)
    node GEN_135 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), wmask_buffer_4, GEN_134)
    node GEN_136 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), wmask_buffer_5, GEN_135)
    node GEN_137 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), wmask_buffer_6, GEN_136)
    node GEN_138 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), wmask_buffer_7, GEN_137)
    node T_3080 = cat(xact_op_code, UInt<1>("h0"))
    node T_3081 = cat(xact_addr_byte, xact_op_size)
    node T_3082 = cat(T_3081, T_3080)
    node T_3084 = cat(xact_op_size, xact_op_code)
    node T_3085 = cat(T_3084, UInt<1>("h0"))
    node T_3087 = cat(GEN_12, UInt<1>("h0"))
    node T_3099 = mux(T_1993, UInt<6>("h2"), UInt<6>("h0"))
    node T_3101 = mux(T_1995, UInt<6>("h0"), T_3099)
    node T_3103 = mux(T_1991, T_3082, pad(T_3101, 11))
    node T_3105 = mux(T_2001, pad(T_3087, 11), T_3103)
    node T_3107 = mux(T_1997, pad(T_3087, 11), T_3105)
    node T_3109 = mux(T_2003, pad(T_3085, 11), T_3107)
    node T_3111 = mux(T_1999, T_3082, T_3109)
    wire T_3140_addr_block : UInt<26>
    wire T_3140_client_xact_id : UInt<4>
    wire T_3140_addr_beat : UInt<3>
    wire T_3140_is_builtin_type : UInt<1>
    wire T_3140_a_type : UInt<3>
    wire T_3140_union : UInt<11>
    wire T_3140_data : UInt<64>
    wire GEN_13 : UInt<64>
    node GEN_139 = mux(eq(UInt<3>("h1"), ognt_counter_up_idx), data_buffer_1, data_buffer_0)
    node GEN_140 = mux(eq(UInt<3>("h2"), ognt_counter_up_idx), data_buffer_2, GEN_139)
    node GEN_141 = mux(eq(UInt<3>("h3"), ognt_counter_up_idx), data_buffer_3, GEN_140)
    node GEN_142 = mux(eq(UInt<3>("h4"), ognt_counter_up_idx), data_buffer_4, GEN_141)
    node GEN_143 = mux(eq(UInt<3>("h5"), ognt_counter_up_idx), data_buffer_5, GEN_142)
    node GEN_144 = mux(eq(UInt<3>("h6"), ognt_counter_up_idx), data_buffer_6, GEN_143)
    node GEN_145 = mux(eq(UInt<3>("h7"), ognt_counter_up_idx), data_buffer_7, GEN_144)
    node T_3168_addr_block = mux(T_2857, T_3015_addr_block, T_3140_addr_block)
    node T_3168_client_xact_id = mux(T_2857, UInt<4>("h0"), UInt<4>("h0"))
    node T_3168_addr_beat = mux(T_2857, UInt<3>("h0"), T_3140_addr_beat)
    node T_3168_is_builtin_type = mux(T_2857, UInt<1>("h0"), UInt<1>("h1"))
    node T_3168_a_type = mux(T_2857, T_3015_a_type, T_3140_a_type)
    node T_3168_union = mux(T_2857, T_3015_union, T_3140_union)
    node T_3168_data = mux(T_2857, UInt<64>("h0"), T_3140_data)
    node T_3197 = and(T_2933, ognt_counter_up_done)
    node GEN_146 = mux(T_3197, UInt<4>("h7"), GEN_51)
    node GEN_147 = mux(ognt_counter_pending, UInt<1>("h1"), vol_ognt_counter_pending)
    wire T_3207_0 : UInt<3>
    wire T_3207_1 : UInt<3>
    node GEN_278 = pad(UInt<3>("h5"), 4)
    node T_3209 = eq(io_outer_grant_bits_g_type, GEN_278)
    node GEN_279 = pad(UInt<3>("h4"), 4)
    node T_3210 = eq(io_outer_grant_bits_g_type, GEN_279)
    node T_3211 = or(T_3209, T_3210)
    node T_3213 = mux(io_outer_grant_bits_is_builtin_type, T_3211, T_2723)
    node T_3214 = and(T_2241, T_3213)
    wire GEN_14 : UInt<8>
    node GEN_148 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_149 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), wmask_buffer_2, GEN_148)
    node GEN_150 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), wmask_buffer_3, GEN_149)
    node GEN_151 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), wmask_buffer_4, GEN_150)
    node GEN_152 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), wmask_buffer_5, GEN_151)
    node GEN_153 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), wmask_buffer_6, GEN_152)
    node GEN_154 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), wmask_buffer_7, GEN_153)
    node T_3215 = bits(GEN_14, 0, 0)
    wire GEN_15 : UInt<8>
    node T_3216 = bits(GEN_15, 1, 1)
    wire GEN_16 : UInt<8>
    node T_3217 = bits(GEN_16, 2, 2)
    wire GEN_17 : UInt<8>
    node T_3218 = bits(GEN_17, 3, 3)
    wire GEN_18 : UInt<8>
    node T_3219 = bits(GEN_18, 4, 4)
    wire GEN_19 : UInt<8>
    node T_3220 = bits(GEN_19, 5, 5)
    wire GEN_20 : UInt<8>
    node T_3221 = bits(GEN_20, 6, 6)
    wire GEN_21 : UInt<8>
    node T_3222 = bits(GEN_21, 7, 7)
    node T_3226 = mux(T_3215, UInt<8>("hff"), UInt<8>("h0"))
    node T_3230 = mux(T_3216, UInt<8>("hff"), UInt<8>("h0"))
    node T_3234 = mux(T_3217, UInt<8>("hff"), UInt<8>("h0"))
    node T_3238 = mux(T_3218, UInt<8>("hff"), UInt<8>("h0"))
    node T_3242 = mux(T_3219, UInt<8>("hff"), UInt<8>("h0"))
    node T_3246 = mux(T_3220, UInt<8>("hff"), UInt<8>("h0"))
    node T_3250 = mux(T_3221, UInt<8>("hff"), UInt<8>("h0"))
    node T_3254 = mux(T_3222, UInt<8>("hff"), UInt<8>("h0"))
    node T_3255 = cat(T_3230, T_3226)
    node T_3256 = cat(T_3238, T_3234)
    node T_3257 = cat(T_3256, T_3255)
    node T_3258 = cat(T_3246, T_3242)
    node T_3259 = cat(T_3254, T_3250)
    node T_3260 = cat(T_3259, T_3258)
    node T_3261 = cat(T_3260, T_3257)
    node T_3262 = not(T_3261)
    node T_3263 = and(T_3262, io_outer_grant_bits_data)
    wire GEN_22 : UInt<64>
    node GEN_155 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_156 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), data_buffer_2, GEN_155)
    node GEN_157 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), data_buffer_3, GEN_156)
    node GEN_158 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), data_buffer_4, GEN_157)
    node GEN_159 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), data_buffer_5, GEN_158)
    node GEN_160 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), data_buffer_6, GEN_159)
    node GEN_161 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), data_buffer_7, GEN_160)
    node T_3264 = and(T_3261, GEN_22)
    node T_3265 = or(T_3263, T_3264)
    wire GEN_23 : UInt<64>
    node GEN_162 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), GEN_23, GEN_94)
    node GEN_163 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), GEN_23, GEN_95)
    node GEN_164 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), GEN_23, GEN_96)
    node GEN_165 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), GEN_23, GEN_97)
    node GEN_166 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), GEN_23, GEN_98)
    node GEN_167 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), GEN_23, GEN_99)
    node GEN_168 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), GEN_23, GEN_100)
    node GEN_169 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), GEN_23, GEN_101)
    wire GEN_24 : UInt<8>
    node GEN_170 = mux(eq(UInt<3>("h0"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_102)
    node GEN_171 = mux(eq(UInt<3>("h1"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_103)
    node GEN_172 = mux(eq(UInt<3>("h2"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_104)
    node GEN_173 = mux(eq(UInt<3>("h3"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_105)
    node GEN_174 = mux(eq(UInt<3>("h4"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_106)
    node GEN_175 = mux(eq(UInt<3>("h5"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_107)
    node GEN_176 = mux(eq(UInt<3>("h6"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_108)
    node GEN_177 = mux(eq(UInt<3>("h7"), io_outer_grant_bits_addr_beat), UInt<8>("hff"), GEN_109)
    node GEN_178 = mux(T_3214, GEN_162, GEN_94)
    node GEN_179 = mux(T_3214, GEN_163, GEN_95)
    node GEN_180 = mux(T_3214, GEN_164, GEN_96)
    node GEN_181 = mux(T_3214, GEN_165, GEN_97)
    node GEN_182 = mux(T_3214, GEN_166, GEN_98)
    node GEN_183 = mux(T_3214, GEN_167, GEN_99)
    node GEN_184 = mux(T_3214, GEN_168, GEN_100)
    node GEN_185 = mux(T_3214, GEN_169, GEN_101)
    node GEN_186 = mux(T_3214, GEN_170, GEN_102)
    node GEN_187 = mux(T_3214, GEN_171, GEN_103)
    node GEN_188 = mux(T_3214, GEN_172, GEN_104)
    node GEN_189 = mux(T_3214, GEN_173, GEN_105)
    node GEN_190 = mux(T_3214, GEN_174, GEN_106)
    node GEN_191 = mux(T_3214, GEN_175, GEN_107)
    node GEN_192 = mux(T_3214, GEN_176, GEN_108)
    node GEN_193 = mux(T_3214, GEN_177, GEN_109)
    node T_3268 = or(scoreboard_3, ognt_counter_pending)
    node T_3269 = or(T_3268, vol_ognt_counter_pending)
    node T_3281 = eq(T_2179, UInt<1>("h0"))
    node T_3283 = and(T_2175, T_3281)
    wire T_3291_0 : UInt<3>
    node GEN_280 = pad(UInt<3>("h5"), 4)
    node T_3293 = eq(io_inner_grant_bits_g_type, GEN_280)
    node T_3295 = mux(io_inner_grant_bits_is_builtin_type, T_3293, T_2178)
    node T_3297 = and(T_3283, T_3295)
    reg T_3299 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3301 = eq(T_3299, UInt<3>("h7"))
    node T_3303 = add(T_3299, UInt<3>("h1"))
    node T_3304 = tail(T_3303, 1)
    node GEN_194 = mux(T_3297, T_3304, T_3299)
    node T_3305 = and(T_3297, T_3301)
    node T_3306 = mux(T_3295, T_3299, UInt<3>("h0"))
    node T_3307 = mux(T_3295, T_3305, T_3283)
    node T_3308 = and(io_inner_finish_ready, io_inner_finish_valid)
    reg T_3314 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_3324 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_3326 = eq(T_3308, UInt<1>("h0"))
    node T_3327 = and(T_3307, T_3326)
    node T_3329 = add(T_3324, UInt<1>("h1"))
    node T_3330 = tail(T_3329, 1)
    node GEN_196 = mux(T_3327, T_3330, T_3324)
    node T_3332 = eq(T_3307, UInt<1>("h0"))
    node T_3333 = and(T_3308, T_3332)
    node T_3335 = sub(T_3324, UInt<1>("h1"))
    node T_3336 = tail(T_3335, 1)
    node GEN_197 = mux(T_3333, T_3336, GEN_196)
    node T_3338 = gt(T_3324, UInt<1>("h0"))
    node T_3343 = eq(T_1798, UInt<1>("h0"))
    node T_3360 = or(pending_ignt_data, T_2647)
    wire T_3370_0 : UInt<3>
    wire T_3370_1 : UInt<3>
    node GEN_281 = pad(UInt<3>("h5"), 4)
    node T_3372 = eq(io_outer_grant_bits_g_type, GEN_281)
    node GEN_282 = pad(UInt<3>("h4"), 4)
    node T_3373 = eq(io_outer_grant_bits_g_type, GEN_282)
    node T_3374 = or(T_3372, T_3373)
    node T_3376 = mux(io_outer_grant_bits_is_builtin_type, T_3374, T_2723)
    node T_3377 = and(T_2241, T_3376)
    node T_3382 = mux(T_3377, UInt<8>("hff"), UInt<8>("h0"))
    node T_3384 = dshlw(UInt<8>("h1"), io_outer_grant_bits_addr_beat)
    node T_3385 = and(T_3382, T_3384)
    node T_3386 = or(T_3360, T_3385)
    node GEN_198 = mux(T_3343, T_3386, GEN_38)
    node T_3389 = eq(state, UInt<4>("h1"))
    node T_3390 = or(T_1611, T_3389)
    node T_3393 = or(T_3390, scoreboard_0)
    node T_3395 = eq(T_3393, UInt<1>("h0"))
    node T_3412 = eq(UInt<3>("h6"), ignt_q.io_deq_bits_a_type)
    node T_3413 = mux(T_3412, UInt<3>("h1"), UInt<3>("h3"))
    node T_3414 = eq(UInt<3>("h5"), ignt_q.io_deq_bits_a_type)
    node T_3415 = mux(T_3414, UInt<3>("h1"), T_3413)
    node T_3416 = eq(UInt<3>("h4"), ignt_q.io_deq_bits_a_type)
    node T_3417 = mux(T_3416, UInt<3>("h4"), T_3415)
    node T_3418 = eq(UInt<3>("h3"), ignt_q.io_deq_bits_a_type)
    node T_3419 = mux(T_3418, UInt<3>("h3"), T_3417)
    node T_3420 = eq(UInt<3>("h2"), ignt_q.io_deq_bits_a_type)
    node T_3421 = mux(T_3420, UInt<3>("h3"), T_3419)
    node T_3422 = eq(UInt<3>("h1"), ignt_q.io_deq_bits_a_type)
    node T_3423 = mux(T_3422, UInt<3>("h5"), T_3421)
    node T_3424 = eq(UInt<3>("h0"), ignt_q.io_deq_bits_a_type)
    node T_3425 = mux(T_3424, UInt<3>("h4"), T_3423)
    node T_3426 = mux(ignt_q.io_deq_bits_is_builtin_type, T_3425, UInt<3>("h0"))
    wire T_3455_addr_beat : UInt<3>
    wire T_3455_client_xact_id : UInt<1>
    wire T_3455_manager_xact_id : UInt<4>
    wire T_3455_is_builtin_type : UInt<1>
    wire T_3455_g_type : UInt<4>
    wire T_3455_data : UInt<64>
    wire T_3455_client_id : UInt<1>
    wire GEN_25 : UInt<64>
    node GEN_199 = mux(eq(UInt<3>("h1"), ignt_data_idx), data_buffer_1, data_buffer_0)
    node GEN_200 = mux(eq(UInt<3>("h2"), ignt_data_idx), data_buffer_2, GEN_199)
    node GEN_201 = mux(eq(UInt<3>("h3"), ignt_data_idx), data_buffer_3, GEN_200)
    node GEN_202 = mux(eq(UInt<3>("h4"), ignt_data_idx), data_buffer_4, GEN_201)
    node GEN_203 = mux(eq(UInt<3>("h5"), ignt_data_idx), data_buffer_5, GEN_202)
    node GEN_204 = mux(eq(UInt<3>("h6"), ignt_data_idx), data_buffer_6, GEN_203)
    node GEN_205 = mux(eq(UInt<3>("h7"), ignt_data_idx), data_buffer_7, GEN_204)
    wire T_3491_0 : UInt<3>
    node GEN_283 = pad(UInt<3>("h5"), 4)
    node T_3493 = eq(io_inner_grant_bits_g_type, GEN_283)
    node T_3495 = mux(io_inner_grant_bits_is_builtin_type, T_3493, T_2178)
    node T_3497 = and(T_2175, T_3495)
    reg T_3499 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_3501 = eq(T_3499, UInt<3>("h7"))
    node T_3503 = add(T_3499, UInt<3>("h1"))
    node T_3504 = tail(T_3503, 1)
    node GEN_206 = mux(T_3497, T_3504, T_3499)
    node T_3505 = and(T_3497, T_3501)
    node T_3506 = mux(T_3495, T_3499, ignt_q.io_deq_bits_addr_beat)
    node T_3507 = mux(T_3495, T_3505, T_2175)
    node T_3512 = and(T_2337, scoreboard_6)
    node T_3514 = eq(T_3269, UInt<1>("h0"))
    wire T_3522_0 : UInt<3>
    wire T_3522_1 : UInt<3>
    node GEN_284 = pad(UInt<3>("h5"), 4)
    node T_3524 = eq(io_inner_grant_bits_g_type, GEN_284)
    node GEN_285 = pad(UInt<3>("h4"), 4)
    node T_3525 = eq(io_inner_grant_bits_g_type, GEN_285)
    node T_3526 = or(T_3524, T_3525)
    node T_3528 = mux(io_inner_grant_bits_is_builtin_type, T_3526, T_2178)
    node T_3529 = dshr(pending_ignt_data, ignt_data_idx)
    node T_3530 = bits(T_3529, 0, 0)
    node T_3532 = mux(T_3528, T_3530, T_3395)
    node T_3533 = and(T_3514, T_3532)
    node GEN_207 = mux(T_3512, T_3533, T_2347)
    node GEN_208 = mux(T_2250, ignt_data_done, UInt<1>("h0"))
    node GEN_209 = mux(T_2250, ignt_data_idx, UInt<3>("h0"))
    node GEN_210 = mux(T_2250, T_3455_client_xact_id, T_2440_client_xact_id)
    node GEN_211 = mux(T_2250, UInt<4>("h7"), UInt<4>("h0"))
    node GEN_212 = mux(T_2250, T_3455_is_builtin_type, UInt<1>("h1"))
    node GEN_213 = mux(T_2250, T_3455_g_type, UInt<4>("h0"))
    node GEN_214 = mux(T_2250, T_3455_data, UInt<64>("h0"))
    node GEN_215 = mux(T_2250, T_3455_client_id, T_2440_client_id)
    node GEN_216 = mux(T_2250, GEN_207, T_2347)
    node T_3540 = not(io_incoherent_0)
    node GEN_217 = mux(T_1798, pad(T_3540, 2), T_2079)
    node T_3551 = and(T_1767, io_inner_acquire_valid)
    node T_3552 = or(T_1798, T_3551)
    wire T_3562_0 : UInt<3>
    wire T_3562_1 : UInt<3>
    wire T_3562_2 : UInt<3>
    node T_3564 = eq(io_inner_acquire_bits_a_type, UInt<3>("h2"))
    node T_3565 = eq(io_inner_acquire_bits_a_type, UInt<3>("h3"))
    node T_3566 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3567 = or(T_3564, T_3565)
    node T_3568 = or(T_3567, T_3566)
    node T_3569 = and(io_inner_acquire_bits_is_builtin_type, T_3568)
    node T_3570 = and(T_1612, T_3569)
    node T_3571 = and(T_3570, T_3552)
    node T_3573 = eq(io_inner_acquire_bits_a_type, UInt<3>("h4"))
    node T_3574 = and(io_inner_acquire_bits_is_builtin_type, T_3573)
    node T_3603 = or(T_1921, T_1918)
    node T_3604 = bits(io_inner_acquire_bits_union, 8, 1)
    node T_3606 = mux(T_3603, T_3604, UInt<8>("h0"))
    node T_3607 = mux(T_3574, UInt<8>("hff"), T_3606)
    node T_3608 = bits(T_3607, 0, 0)
    node T_3609 = bits(T_3607, 1, 1)
    node T_3610 = bits(T_3607, 2, 2)
    node T_3611 = bits(T_3607, 3, 3)
    node T_3612 = bits(T_3607, 4, 4)
    node T_3613 = bits(T_3607, 5, 5)
    node T_3614 = bits(T_3607, 6, 6)
    node T_3615 = bits(T_3607, 7, 7)
    node T_3619 = mux(T_3608, UInt<8>("hff"), UInt<8>("h0"))
    node T_3623 = mux(T_3609, UInt<8>("hff"), UInt<8>("h0"))
    node T_3627 = mux(T_3610, UInt<8>("hff"), UInt<8>("h0"))
    node T_3631 = mux(T_3611, UInt<8>("hff"), UInt<8>("h0"))
    node T_3635 = mux(T_3612, UInt<8>("hff"), UInt<8>("h0"))
    node T_3639 = mux(T_3613, UInt<8>("hff"), UInt<8>("h0"))
    node T_3643 = mux(T_3614, UInt<8>("hff"), UInt<8>("h0"))
    node T_3647 = mux(T_3615, UInt<8>("hff"), UInt<8>("h0"))
    node T_3648 = cat(T_3623, T_3619)
    node T_3649 = cat(T_3631, T_3627)
    node T_3650 = cat(T_3649, T_3648)
    node T_3651 = cat(T_3639, T_3635)
    node T_3652 = cat(T_3647, T_3643)
    node T_3653 = cat(T_3652, T_3651)
    node T_3654 = cat(T_3653, T_3650)
    node T_3655 = not(T_3654)
    wire GEN_26 : UInt<64>
    node GEN_218 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), data_buffer_1, data_buffer_0)
    node GEN_219 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), data_buffer_2, GEN_218)
    node GEN_220 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), data_buffer_3, GEN_219)
    node GEN_221 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), data_buffer_4, GEN_220)
    node GEN_222 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), data_buffer_5, GEN_221)
    node GEN_223 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), data_buffer_6, GEN_222)
    node GEN_224 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), data_buffer_7, GEN_223)
    node T_3656 = and(T_3655, GEN_26)
    node T_3657 = and(T_3654, io_inner_acquire_bits_data)
    node T_3658 = or(T_3656, T_3657)
    wire GEN_27 : UInt<64>
    node GEN_225 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_178)
    node GEN_226 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_179)
    node GEN_227 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_180)
    node GEN_228 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_181)
    node GEN_229 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_182)
    node GEN_230 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_183)
    node GEN_231 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_184)
    node GEN_232 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_27, GEN_185)
    wire GEN_28 : UInt<8>
    node GEN_233 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), wmask_buffer_1, wmask_buffer_0)
    node GEN_234 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), wmask_buffer_2, GEN_233)
    node GEN_235 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), wmask_buffer_3, GEN_234)
    node GEN_236 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), wmask_buffer_4, GEN_235)
    node GEN_237 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), wmask_buffer_5, GEN_236)
    node GEN_238 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), wmask_buffer_6, GEN_237)
    node GEN_239 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), wmask_buffer_7, GEN_238)
    node T_3695 = or(T_3607, GEN_28)
    wire GEN_29 : UInt<8>
    node GEN_240 = mux(eq(UInt<3>("h0"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_186)
    node GEN_241 = mux(eq(UInt<3>("h1"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_187)
    node GEN_242 = mux(eq(UInt<3>("h2"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_188)
    node GEN_243 = mux(eq(UInt<3>("h3"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_189)
    node GEN_244 = mux(eq(UInt<3>("h4"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_190)
    node GEN_245 = mux(eq(UInt<3>("h5"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_191)
    node GEN_246 = mux(eq(UInt<3>("h6"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_192)
    node GEN_247 = mux(eq(UInt<3>("h7"), io_inner_acquire_bits_addr_beat), GEN_29, GEN_193)
    node GEN_248 = mux(T_3571, GEN_225, GEN_178)
    node GEN_249 = mux(T_3571, GEN_226, GEN_179)
    node GEN_250 = mux(T_3571, GEN_227, GEN_180)
    node GEN_251 = mux(T_3571, GEN_228, GEN_181)
    node GEN_252 = mux(T_3571, GEN_229, GEN_182)
    node GEN_253 = mux(T_3571, GEN_230, GEN_183)
    node GEN_254 = mux(T_3571, GEN_231, GEN_184)
    node GEN_255 = mux(T_3571, GEN_232, GEN_185)
    node GEN_256 = mux(T_3571, GEN_240, GEN_186)
    node GEN_257 = mux(T_3571, GEN_241, GEN_187)
    node GEN_258 = mux(T_3571, GEN_242, GEN_188)
    node GEN_259 = mux(T_3571, GEN_243, GEN_189)
    node GEN_260 = mux(T_3571, GEN_244, GEN_190)
    node GEN_261 = mux(T_3571, GEN_245, GEN_191)
    node GEN_262 = mux(T_3571, GEN_246, GEN_192)
    node GEN_263 = mux(T_3571, GEN_247, GEN_193)
    node T_3698 = or(scoreboard_0, T_2343)
    node T_3699 = or(T_3698, vol_ignt_counter_pending)
    node T_3700 = or(T_3699, scoreboard_3)
    node T_3701 = or(T_3700, vol_ognt_counter_pending)
    node T_3702 = or(T_3701, ognt_counter_pending)
    node T_3703 = or(T_3702, scoreboard_6)
    node T_3704 = or(T_3703, ifin_counter_pending)
    node T_3706 = eq(T_3704, UInt<1>("h0"))
    node T_3708 = and(T_2337, all_pending_done)
    node GEN_264 = mux(T_3708, UInt<4>("h0"), GEN_146)
    node GEN_265 = mux(T_3708, UInt<8>("h0"), GEN_256)
    node GEN_266 = mux(T_3708, UInt<8>("h0"), GEN_257)
    node GEN_267 = mux(T_3708, UInt<8>("h0"), GEN_258)
    node GEN_268 = mux(T_3708, UInt<8>("h0"), GEN_259)
    node GEN_269 = mux(T_3708, UInt<8>("h0"), GEN_260)
    node GEN_270 = mux(T_3708, UInt<8>("h0"), GEN_261)
    node GEN_271 = mux(T_3708, UInt<8>("h0"), GEN_262)
    node GEN_272 = mux(T_3708, UInt<8>("h0"), GEN_263)
    io_inner_acquire_ready <= T_1981
    io_inner_grant_valid <= GEN_216
    io_inner_grant_bits_addr_beat <= GEN_209
    io_inner_grant_bits_client_xact_id <= GEN_210
    io_inner_grant_bits_manager_xact_id <= GEN_211
    io_inner_grant_bits_is_builtin_type <= GEN_212
    io_inner_grant_bits_g_type <= GEN_213
    io_inner_grant_bits_data <= GEN_214
    io_inner_grant_bits_client_id <= GEN_215
    io_inner_finish_ready <= T_2337
    io_inner_probe_valid <= T_2083
    io_inner_probe_bits_addr_block <= T_2030_addr_block
    io_inner_probe_bits_p_type <= T_2030_p_type
    io_inner_probe_bits_client_id <= UInt<1>("h0")
    io_inner_release_ready <= T_2274
    io_outer_acquire_valid <= T_2968
    io_outer_acquire_bits_addr_block <= T_3168_addr_block
    io_outer_acquire_bits_client_xact_id <= T_3168_client_xact_id
    io_outer_acquire_bits_addr_beat <= T_3168_addr_beat
    io_outer_acquire_bits_is_builtin_type <= T_3168_is_builtin_type
    io_outer_acquire_bits_a_type <= T_3168_a_type
    io_outer_acquire_bits_union <= T_3168_union
    io_outer_acquire_bits_data <= T_3168_data
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= T_2777
    io_outer_release_bits_addr_beat <= T_2828_addr_beat
    io_outer_release_bits_addr_block <= T_2828_addr_block
    io_outer_release_bits_client_xact_id <= UInt<4>("h0")
    io_outer_release_bits_voluntary <= UInt<1>("h1")
    io_outer_release_bits_r_type <= T_2828_r_type
    io_outer_release_bits_data <= T_2828_data
    io_outer_grant_ready <= GEN_147
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= UInt<1>("h0")
    io_outer_finish_bits_manager_id <= UInt<1>("h1")
    io_alloc_iacq_matches <= T_1749
    io_alloc_iacq_can <= T_1611
    io_alloc_irel_matches <= T_1752
    io_alloc_irel_can <= UInt<1>("h0")
    io_alloc_oprb_matches <= T_1755
    io_alloc_oprb_can <= UInt<1>("h0")
    io_alloc_idle <= T_1611
    io_alloc_addr_block <= xact_addr_block
    all_pending_done <= T_3706
    state <= GEN_264
    xact_addr_block <= GEN_49
    xact_allocate <= GEN_32
    xact_amo_shift_bytes <= GEN_33
    xact_op_code <= GEN_34
    xact_addr_byte <= GEN_35
    xact_op_size <= GEN_36
    xact_addr_beat <= xact_iacq_addr_beat
    xact_iacq_client_xact_id <= T_1823_client_xact_id
    xact_iacq_addr_beat <= T_1823_addr_beat
    xact_iacq_client_id <= T_1823_client_id
    xact_iacq_is_builtin_type <= T_1823_is_builtin_type
    xact_iacq_a_type <= T_1823_a_type
    xact_vol_ir_r_type <= GEN_60
    xact_vol_ir_src <= GEN_61
    xact_vol_ir_client_xact_id <= GEN_62
    pending_irel_data <= GEN_63
    vol_ignt_counter_pending <= T_2221
    vol_ignt_counter_up_idx <= T_2173
    vol_ignt_counter_up_done <= T_2174
    vol_ignt_counter_down_idx <= T_2204
    vol_ignt_counter_down_done <= T_2205
    scoreboard_6 <= T_1850
    ignt_data_idx <= T_3506
    ignt_data_done <= T_3507
    ifin_counter_pending <= T_3338
    ifin_counter_up_idx <= T_3306
    ifin_counter_up_done <= T_3307
    ifin_counter_down_done <= T_3308
    pending_put_data <= GEN_37
    pending_ignt_data <= GEN_198
    ognt_counter_pending <= T_2932
    ognt_counter_up_idx <= T_2884
    ognt_counter_up_done <= T_2885
    ognt_counter_down_idx <= T_2915
    ognt_counter_down_done <= T_2916
    pending_iprbs <= bits(GEN_217, 0, 0)
    pending_orel_send <= GEN_115
    pending_orel_data <= GEN_110
    vol_ognt_counter_pending <= T_2765
    vol_ognt_counter_up_idx <= T_2719
    vol_ognt_counter_up_done <= T_2720
    vol_ognt_counter_down_idx <= T_2748
    vol_ognt_counter_down_done <= T_2749
    sending_orel <= GEN_114
    data_buffer_0 <= GEN_248
    data_buffer_1 <= GEN_249
    data_buffer_2 <= GEN_250
    data_buffer_3 <= GEN_251
    data_buffer_4 <= GEN_252
    data_buffer_5 <= GEN_253
    data_buffer_6 <= GEN_254
    data_buffer_7 <= GEN_255
    wmask_buffer_0 <= GEN_265
    wmask_buffer_1 <= GEN_266
    wmask_buffer_2 <= GEN_267
    wmask_buffer_3 <= GEN_268
    wmask_buffer_4 <= GEN_269
    wmask_buffer_5 <= GEN_270
    wmask_buffer_6 <= GEN_271
    wmask_buffer_7 <= GEN_272
    data_valid_0 <= T_1716
    data_valid_1 <= T_1719
    data_valid_2 <= T_1722
    data_valid_3 <= T_1725
    data_valid_4 <= T_1728
    data_valid_5 <= T_1731
    data_valid_6 <= T_1734
    data_valid_7 <= T_1737
    ignt_q.io_enq_valid <= T_1822
    ignt_q.io_enq_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    ignt_q.io_enq_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    ignt_q.io_enq_bits_client_id <= io_inner_acquire_bits_client_id
    ignt_q.io_enq_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    ignt_q.io_enq_bits_a_type <= io_inner_acquire_bits_a_type
    ignt_q.io_deq_ready <= GEN_208
    T_2030_addr_block <= xact_addr_block
    T_2030_p_type <= T_2005
    T_2065_pending <= T_2139
    T_2065_up_done <= T_2073
    T_2065_down_idx <= T_2122
    T_2065_down_done <= T_2123
    T_2091 <= T_2091
    T_2115 <= GEN_41
    T_2125 <= GEN_43
    T_2166 <= GEN_45
    T_2197 <= GEN_46
    T_2207 <= GEN_48
    T_2379_addr_block <= xact_addr_block
    T_2379_client_xact_id <= xact_vol_ir_client_xact_id
    T_2379_r_type <= xact_vol_ir_r_type
    T_2379_client_id <= xact_vol_ir_src
    T_2440_client_xact_id <= T_2379_client_xact_id
    T_2440_client_id <= T_2379_client_id
    GEN_0 <= GEN_70
    GEN_1 <= GEN_70
    GEN_2 <= GEN_70
    GEN_3 <= GEN_70
    GEN_4 <= GEN_70
    GEN_5 <= GEN_70
    GEN_6 <= GEN_70
    GEN_7 <= GEN_70
    GEN_8 <= GEN_77
    GEN_9 <= T_2571
    T_2712 <= GEN_116
    T_2741 <= GEN_117
    T_2751 <= GEN_119
    T_2828_addr_beat <= vol_ognt_counter_up_idx
    T_2828_addr_block <= xact_addr_block
    T_2828_r_type <= T_2792
    T_2828_data <= GEN_11
    GEN_11 <= GEN_126
    T_2877 <= GEN_128
    T_2908 <= GEN_129
    T_2918 <= GEN_131
    T_3015_addr_block <= xact_addr_block
    T_3015_a_type <= pad(T_2981, 3)
    T_3015_union <= pad(T_2984, 11)
    GEN_12 <= GEN_138
    T_3140_addr_block <= xact_addr_block
    T_3140_addr_beat <= ognt_counter_up_idx
    T_3140_a_type <= xact_iacq_a_type
    T_3140_union <= T_3111
    T_3140_data <= GEN_13
    GEN_13 <= GEN_145
    GEN_14 <= GEN_154
    GEN_15 <= GEN_154
    GEN_16 <= GEN_154
    GEN_17 <= GEN_154
    GEN_18 <= GEN_154
    GEN_19 <= GEN_154
    GEN_20 <= GEN_154
    GEN_21 <= GEN_154
    GEN_22 <= GEN_161
    GEN_23 <= T_3265
    T_3299 <= GEN_194
    T_3314 <= T_3314
    T_3324 <= GEN_197
    T_3455_addr_beat <= ignt_q.io_deq_bits_addr_beat
    T_3455_client_xact_id <= ignt_q.io_deq_bits_client_xact_id
    T_3455_is_builtin_type <= ignt_q.io_deq_bits_is_builtin_type
    T_3455_g_type <= pad(T_3426, 4)
    T_3455_data <= GEN_25
    T_3455_client_id <= ignt_q.io_deq_bits_client_id
    GEN_25 <= GEN_205
    T_3499 <= GEN_206
    GEN_26 <= GEN_224
    GEN_27 <= T_3658
    GEN_28 <= GEN_239
    GEN_29 <= T_3695
    printf(clk, T_1652, "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n")
    stop(clk, T_1652, 1)
    printf(clk, T_1666, "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n")
    stop(clk, T_1666, 1)
    printf(clk, T_1677, "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n")
    stop(clk, T_1677, 1)

  module LockingRRArbiter_5 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr_block : UInt<26>
    input io_in_0_bits_client_xact_id : UInt<4>
    input io_in_0_bits_addr_beat : UInt<3>
    input io_in_0_bits_is_builtin_type : UInt<1>
    input io_in_0_bits_a_type : UInt<3>
    input io_in_0_bits_union : UInt<11>
    input io_in_0_bits_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_addr_block : UInt<26>
    input io_in_1_bits_client_xact_id : UInt<4>
    input io_in_1_bits_addr_beat : UInt<3>
    input io_in_1_bits_is_builtin_type : UInt<1>
    input io_in_1_bits_a_type : UInt<3>
    input io_in_1_bits_union : UInt<11>
    input io_in_1_bits_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_addr_block : UInt<26>
    input io_in_2_bits_client_xact_id : UInt<4>
    input io_in_2_bits_addr_beat : UInt<3>
    input io_in_2_bits_is_builtin_type : UInt<1>
    input io_in_2_bits_a_type : UInt<3>
    input io_in_2_bits_union : UInt<11>
    input io_in_2_bits_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_addr_block : UInt<26>
    input io_in_3_bits_client_xact_id : UInt<4>
    input io_in_3_bits_addr_beat : UInt<3>
    input io_in_3_bits_is_builtin_type : UInt<1>
    input io_in_3_bits_a_type : UInt<3>
    input io_in_3_bits_union : UInt<11>
    input io_in_3_bits_data : UInt<64>
    output io_in_4_ready : UInt<1>
    input io_in_4_valid : UInt<1>
    input io_in_4_bits_addr_block : UInt<26>
    input io_in_4_bits_client_xact_id : UInt<4>
    input io_in_4_bits_addr_beat : UInt<3>
    input io_in_4_bits_is_builtin_type : UInt<1>
    input io_in_4_bits_a_type : UInt<3>
    input io_in_4_bits_union : UInt<11>
    input io_in_4_bits_data : UInt<64>
    output io_in_5_ready : UInt<1>
    input io_in_5_valid : UInt<1>
    input io_in_5_bits_addr_block : UInt<26>
    input io_in_5_bits_client_xact_id : UInt<4>
    input io_in_5_bits_addr_beat : UInt<3>
    input io_in_5_bits_is_builtin_type : UInt<1>
    input io_in_5_bits_a_type : UInt<3>
    input io_in_5_bits_union : UInt<11>
    input io_in_5_bits_data : UInt<64>
    output io_in_6_ready : UInt<1>
    input io_in_6_valid : UInt<1>
    input io_in_6_bits_addr_block : UInt<26>
    input io_in_6_bits_client_xact_id : UInt<4>
    input io_in_6_bits_addr_beat : UInt<3>
    input io_in_6_bits_is_builtin_type : UInt<1>
    input io_in_6_bits_a_type : UInt<3>
    input io_in_6_bits_union : UInt<11>
    input io_in_6_bits_data : UInt<64>
    output io_in_7_ready : UInt<1>
    input io_in_7_valid : UInt<1>
    input io_in_7_bits_addr_block : UInt<26>
    input io_in_7_bits_client_xact_id : UInt<4>
    input io_in_7_bits_addr_beat : UInt<3>
    input io_in_7_bits_is_builtin_type : UInt<1>
    input io_in_7_bits_a_type : UInt<3>
    input io_in_7_bits_union : UInt<11>
    input io_in_7_bits_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_block : UInt<26>
    output io_out_bits_client_xact_id : UInt<4>
    output io_out_bits_addr_beat : UInt<3>
    output io_out_bits_is_builtin_type : UInt<1>
    output io_out_bits_a_type : UInt<3>
    output io_out_bits_union : UInt<11>
    output io_out_bits_data : UInt<64>
    output io_chosen : UInt<3>
  
    wire choice : UInt<3>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_addr_block : UInt<26>
    wire GEN_0_bits_client_xact_id : UInt<4>
    wire GEN_0_bits_addr_beat : UInt<3>
    wire GEN_0_bits_is_builtin_type : UInt<1>
    wire GEN_0_bits_a_type : UInt<3>
    wire GEN_0_bits_union : UInt<11>
    wire GEN_0_bits_data : UInt<64>
    node GEN_8 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_9 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_10 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_addr_block, io_in_0_bits_addr_block)
    node GEN_11 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_client_xact_id, io_in_0_bits_client_xact_id)
    node GEN_12 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_addr_beat, io_in_0_bits_addr_beat)
    node GEN_13 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_is_builtin_type, io_in_0_bits_is_builtin_type)
    node GEN_14 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_a_type, io_in_0_bits_a_type)
    node GEN_15 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_union, io_in_0_bits_union)
    node GEN_16 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_data, io_in_0_bits_data)
    node GEN_17 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_ready, GEN_8)
    node GEN_18 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_valid, GEN_9)
    node GEN_19 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_addr_block, GEN_10)
    node GEN_20 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_client_xact_id, GEN_11)
    node GEN_21 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_addr_beat, GEN_12)
    node GEN_22 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_is_builtin_type, GEN_13)
    node GEN_23 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_a_type, GEN_14)
    node GEN_24 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_union, GEN_15)
    node GEN_25 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_data, GEN_16)
    node GEN_26 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_ready, GEN_17)
    node GEN_27 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_valid, GEN_18)
    node GEN_28 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_addr_block, GEN_19)
    node GEN_29 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_client_xact_id, GEN_20)
    node GEN_30 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_addr_beat, GEN_21)
    node GEN_31 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_is_builtin_type, GEN_22)
    node GEN_32 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_a_type, GEN_23)
    node GEN_33 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_union, GEN_24)
    node GEN_34 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_data, GEN_25)
    node GEN_35 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_ready, GEN_26)
    node GEN_36 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_valid, GEN_27)
    node GEN_37 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_addr_block, GEN_28)
    node GEN_38 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_client_xact_id, GEN_29)
    node GEN_39 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_addr_beat, GEN_30)
    node GEN_40 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_is_builtin_type, GEN_31)
    node GEN_41 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_a_type, GEN_32)
    node GEN_42 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_union, GEN_33)
    node GEN_43 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_data, GEN_34)
    node GEN_44 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_ready, GEN_35)
    node GEN_45 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_valid, GEN_36)
    node GEN_46 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_addr_block, GEN_37)
    node GEN_47 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_client_xact_id, GEN_38)
    node GEN_48 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_addr_beat, GEN_39)
    node GEN_49 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_is_builtin_type, GEN_40)
    node GEN_50 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_a_type, GEN_41)
    node GEN_51 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_union, GEN_42)
    node GEN_52 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_data, GEN_43)
    node GEN_53 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_ready, GEN_44)
    node GEN_54 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_valid, GEN_45)
    node GEN_55 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_addr_block, GEN_46)
    node GEN_56 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_client_xact_id, GEN_47)
    node GEN_57 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_addr_beat, GEN_48)
    node GEN_58 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_is_builtin_type, GEN_49)
    node GEN_59 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_a_type, GEN_50)
    node GEN_60 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_union, GEN_51)
    node GEN_61 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_data, GEN_52)
    node GEN_62 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_ready, GEN_53)
    node GEN_63 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_valid, GEN_54)
    node GEN_64 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_addr_block, GEN_55)
    node GEN_65 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_client_xact_id, GEN_56)
    node GEN_66 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_addr_beat, GEN_57)
    node GEN_67 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_is_builtin_type, GEN_58)
    node GEN_68 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_a_type, GEN_59)
    node GEN_69 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_union, GEN_60)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_data, GEN_61)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_addr_block : UInt<26>
    wire GEN_1_bits_client_xact_id : UInt<4>
    wire GEN_1_bits_addr_beat : UInt<3>
    wire GEN_1_bits_is_builtin_type : UInt<1>
    wire GEN_1_bits_a_type : UInt<3>
    wire GEN_1_bits_union : UInt<11>
    wire GEN_1_bits_data : UInt<64>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_addr_block : UInt<26>
    wire GEN_2_bits_client_xact_id : UInt<4>
    wire GEN_2_bits_addr_beat : UInt<3>
    wire GEN_2_bits_is_builtin_type : UInt<1>
    wire GEN_2_bits_a_type : UInt<3>
    wire GEN_2_bits_union : UInt<11>
    wire GEN_2_bits_data : UInt<64>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_addr_block : UInt<26>
    wire GEN_3_bits_client_xact_id : UInt<4>
    wire GEN_3_bits_addr_beat : UInt<3>
    wire GEN_3_bits_is_builtin_type : UInt<1>
    wire GEN_3_bits_a_type : UInt<3>
    wire GEN_3_bits_union : UInt<11>
    wire GEN_3_bits_data : UInt<64>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_addr_block : UInt<26>
    wire GEN_4_bits_client_xact_id : UInt<4>
    wire GEN_4_bits_addr_beat : UInt<3>
    wire GEN_4_bits_is_builtin_type : UInt<1>
    wire GEN_4_bits_a_type : UInt<3>
    wire GEN_4_bits_union : UInt<11>
    wire GEN_4_bits_data : UInt<64>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_addr_block : UInt<26>
    wire GEN_5_bits_client_xact_id : UInt<4>
    wire GEN_5_bits_addr_beat : UInt<3>
    wire GEN_5_bits_is_builtin_type : UInt<1>
    wire GEN_5_bits_a_type : UInt<3>
    wire GEN_5_bits_union : UInt<11>
    wire GEN_5_bits_data : UInt<64>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_addr_block : UInt<26>
    wire GEN_6_bits_client_xact_id : UInt<4>
    wire GEN_6_bits_addr_beat : UInt<3>
    wire GEN_6_bits_is_builtin_type : UInt<1>
    wire GEN_6_bits_a_type : UInt<3>
    wire GEN_6_bits_union : UInt<11>
    wire GEN_6_bits_data : UInt<64>
    wire GEN_7_ready : UInt<1>
    wire GEN_7_valid : UInt<1>
    wire GEN_7_bits_addr_block : UInt<26>
    wire GEN_7_bits_client_xact_id : UInt<4>
    wire GEN_7_bits_addr_beat : UInt<3>
    wire GEN_7_bits_is_builtin_type : UInt<1>
    wire GEN_7_bits_a_type : UInt<3>
    wire GEN_7_bits_union : UInt<11>
    wire GEN_7_bits_data : UInt<64>
    reg T_1462 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_1464 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), T_1464)
    node T_1466 = neq(T_1462, UInt<3>("h0"))
    wire T_1475_0 : UInt<3>
    node T_1477 = eq(io_out_bits_a_type, UInt<3>("h3"))
    node T_1478 = and(io_out_bits_is_builtin_type, T_1477)
    node T_1479 = and(io_out_ready, io_out_valid)
    node T_1480 = and(T_1479, T_1478)
    node T_1484 = add(T_1462, UInt<3>("h1"))
    node T_1485 = tail(T_1484, 1)
    node GEN_71 = mux(T_1480, io_chosen, T_1464)
    node GEN_72 = mux(T_1480, T_1485, T_1462)
    node GEN_73 = mux(T_1466, T_1464, choice)
    reg lastGrant : UInt<3>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_74 = mux(T_1479, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<3>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<3>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<3>("h3"), lastGrant)
    node grantMask_4 = gt(UInt<3>("h4"), lastGrant)
    node grantMask_5 = gt(UInt<3>("h5"), lastGrant)
    node grantMask_6 = gt(UInt<3>("h6"), lastGrant)
    node grantMask_7 = gt(UInt<3>("h7"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node validMask_4 = and(io_in_4_valid, grantMask_4)
    node validMask_5 = and(io_in_5_valid, grantMask_5)
    node validMask_6 = and(io_in_6_valid, grantMask_6)
    node validMask_7 = and(io_in_7_valid, grantMask_7)
    node T_1497 = or(validMask_1, validMask_2)
    node T_1498 = or(T_1497, validMask_3)
    node T_1499 = or(T_1498, validMask_4)
    node T_1500 = or(T_1499, validMask_5)
    node T_1501 = or(T_1500, validMask_6)
    node T_1502 = or(T_1501, validMask_7)
    node T_1503 = or(T_1502, io_in_0_valid)
    node T_1504 = or(T_1503, io_in_1_valid)
    node T_1505 = or(T_1504, io_in_2_valid)
    node T_1506 = or(T_1505, io_in_3_valid)
    node T_1507 = or(T_1506, io_in_4_valid)
    node T_1508 = or(T_1507, io_in_5_valid)
    node T_1509 = or(T_1508, io_in_6_valid)
    node T_1513 = eq(validMask_1, UInt<1>("h0"))
    node T_1515 = eq(T_1497, UInt<1>("h0"))
    node T_1517 = eq(T_1498, UInt<1>("h0"))
    node T_1519 = eq(T_1499, UInt<1>("h0"))
    node T_1521 = eq(T_1500, UInt<1>("h0"))
    node T_1523 = eq(T_1501, UInt<1>("h0"))
    node T_1525 = eq(T_1502, UInt<1>("h0"))
    node T_1527 = eq(T_1503, UInt<1>("h0"))
    node T_1529 = eq(T_1504, UInt<1>("h0"))
    node T_1531 = eq(T_1505, UInt<1>("h0"))
    node T_1533 = eq(T_1506, UInt<1>("h0"))
    node T_1535 = eq(T_1507, UInt<1>("h0"))
    node T_1537 = eq(T_1508, UInt<1>("h0"))
    node T_1539 = eq(T_1509, UInt<1>("h0"))
    node T_1543 = or(grantMask_1, T_1527)
    node T_1544 = and(T_1513, grantMask_2)
    node T_1545 = or(T_1544, T_1529)
    node T_1546 = and(T_1515, grantMask_3)
    node T_1547 = or(T_1546, T_1531)
    node T_1548 = and(T_1517, grantMask_4)
    node T_1549 = or(T_1548, T_1533)
    node T_1550 = and(T_1519, grantMask_5)
    node T_1551 = or(T_1550, T_1535)
    node T_1552 = and(T_1521, grantMask_6)
    node T_1553 = or(T_1552, T_1537)
    node T_1554 = and(T_1523, grantMask_7)
    node T_1555 = or(T_1554, T_1539)
    node T_1557 = eq(T_1464, UInt<3>("h0"))
    node T_1558 = mux(T_1466, T_1557, T_1525)
    node T_1559 = and(T_1558, io_out_ready)
    node T_1561 = eq(T_1464, UInt<3>("h1"))
    node T_1562 = mux(T_1466, T_1561, T_1543)
    node T_1563 = and(T_1562, io_out_ready)
    node T_1565 = eq(T_1464, UInt<3>("h2"))
    node T_1566 = mux(T_1466, T_1565, T_1545)
    node T_1567 = and(T_1566, io_out_ready)
    node T_1569 = eq(T_1464, UInt<3>("h3"))
    node T_1570 = mux(T_1466, T_1569, T_1547)
    node T_1571 = and(T_1570, io_out_ready)
    node T_1573 = eq(T_1464, UInt<3>("h4"))
    node T_1574 = mux(T_1466, T_1573, T_1549)
    node T_1575 = and(T_1574, io_out_ready)
    node T_1577 = eq(T_1464, UInt<3>("h5"))
    node T_1578 = mux(T_1466, T_1577, T_1551)
    node T_1579 = and(T_1578, io_out_ready)
    node T_1581 = eq(T_1464, UInt<3>("h6"))
    node T_1582 = mux(T_1466, T_1581, T_1553)
    node T_1583 = and(T_1582, io_out_ready)
    node T_1585 = eq(T_1464, UInt<3>("h7"))
    node T_1586 = mux(T_1466, T_1585, T_1555)
    node T_1587 = and(T_1586, io_out_ready)
    node GEN_75 = mux(io_in_6_valid, UInt<3>("h6"), UInt<3>("h7"))
    node GEN_76 = mux(io_in_5_valid, UInt<3>("h5"), GEN_75)
    node GEN_77 = mux(io_in_4_valid, UInt<3>("h4"), GEN_76)
    node GEN_78 = mux(io_in_3_valid, UInt<3>("h3"), GEN_77)
    node GEN_79 = mux(io_in_2_valid, UInt<3>("h2"), GEN_78)
    node GEN_80 = mux(io_in_1_valid, UInt<3>("h1"), GEN_79)
    node GEN_81 = mux(io_in_0_valid, UInt<3>("h0"), GEN_80)
    node GEN_82 = mux(validMask_7, UInt<3>("h7"), GEN_81)
    node GEN_83 = mux(validMask_6, UInt<3>("h6"), GEN_82)
    node GEN_84 = mux(validMask_5, UInt<3>("h5"), GEN_83)
    node GEN_85 = mux(validMask_4, UInt<3>("h4"), GEN_84)
    node GEN_86 = mux(validMask_3, UInt<3>("h3"), GEN_85)
    node GEN_87 = mux(validMask_2, UInt<3>("h2"), GEN_86)
    node GEN_88 = mux(validMask_1, UInt<3>("h1"), GEN_87)
    io_in_0_ready <= T_1559
    io_in_1_ready <= T_1563
    io_in_2_ready <= T_1567
    io_in_3_ready <= T_1571
    io_in_4_ready <= T_1575
    io_in_5_ready <= T_1579
    io_in_6_ready <= T_1583
    io_in_7_ready <= T_1587
    io_out_valid <= GEN_0_valid
    io_out_bits_addr_block <= GEN_1_bits_addr_block
    io_out_bits_client_xact_id <= GEN_2_bits_client_xact_id
    io_out_bits_addr_beat <= GEN_3_bits_addr_beat
    io_out_bits_is_builtin_type <= GEN_4_bits_is_builtin_type
    io_out_bits_a_type <= GEN_5_bits_a_type
    io_out_bits_union <= GEN_6_bits_union
    io_out_bits_data <= GEN_7_bits_data
    io_chosen <= GEN_73
    choice <= GEN_88
    GEN_0_ready <= GEN_62
    GEN_0_valid <= GEN_63
    GEN_0_bits_addr_block <= GEN_64
    GEN_0_bits_client_xact_id <= GEN_65
    GEN_0_bits_addr_beat <= GEN_66
    GEN_0_bits_is_builtin_type <= GEN_67
    GEN_0_bits_a_type <= GEN_68
    GEN_0_bits_union <= GEN_69
    GEN_0_bits_data <= GEN_70
    GEN_1_ready <= GEN_62
    GEN_1_valid <= GEN_63
    GEN_1_bits_addr_block <= GEN_64
    GEN_1_bits_client_xact_id <= GEN_65
    GEN_1_bits_addr_beat <= GEN_66
    GEN_1_bits_is_builtin_type <= GEN_67
    GEN_1_bits_a_type <= GEN_68
    GEN_1_bits_union <= GEN_69
    GEN_1_bits_data <= GEN_70
    GEN_2_ready <= GEN_62
    GEN_2_valid <= GEN_63
    GEN_2_bits_addr_block <= GEN_64
    GEN_2_bits_client_xact_id <= GEN_65
    GEN_2_bits_addr_beat <= GEN_66
    GEN_2_bits_is_builtin_type <= GEN_67
    GEN_2_bits_a_type <= GEN_68
    GEN_2_bits_union <= GEN_69
    GEN_2_bits_data <= GEN_70
    GEN_3_ready <= GEN_62
    GEN_3_valid <= GEN_63
    GEN_3_bits_addr_block <= GEN_64
    GEN_3_bits_client_xact_id <= GEN_65
    GEN_3_bits_addr_beat <= GEN_66
    GEN_3_bits_is_builtin_type <= GEN_67
    GEN_3_bits_a_type <= GEN_68
    GEN_3_bits_union <= GEN_69
    GEN_3_bits_data <= GEN_70
    GEN_4_ready <= GEN_62
    GEN_4_valid <= GEN_63
    GEN_4_bits_addr_block <= GEN_64
    GEN_4_bits_client_xact_id <= GEN_65
    GEN_4_bits_addr_beat <= GEN_66
    GEN_4_bits_is_builtin_type <= GEN_67
    GEN_4_bits_a_type <= GEN_68
    GEN_4_bits_union <= GEN_69
    GEN_4_bits_data <= GEN_70
    GEN_5_ready <= GEN_62
    GEN_5_valid <= GEN_63
    GEN_5_bits_addr_block <= GEN_64
    GEN_5_bits_client_xact_id <= GEN_65
    GEN_5_bits_addr_beat <= GEN_66
    GEN_5_bits_is_builtin_type <= GEN_67
    GEN_5_bits_a_type <= GEN_68
    GEN_5_bits_union <= GEN_69
    GEN_5_bits_data <= GEN_70
    GEN_6_ready <= GEN_62
    GEN_6_valid <= GEN_63
    GEN_6_bits_addr_block <= GEN_64
    GEN_6_bits_client_xact_id <= GEN_65
    GEN_6_bits_addr_beat <= GEN_66
    GEN_6_bits_is_builtin_type <= GEN_67
    GEN_6_bits_a_type <= GEN_68
    GEN_6_bits_union <= GEN_69
    GEN_6_bits_data <= GEN_70
    GEN_7_ready <= GEN_62
    GEN_7_valid <= GEN_63
    GEN_7_bits_addr_block <= GEN_64
    GEN_7_bits_client_xact_id <= GEN_65
    GEN_7_bits_addr_beat <= GEN_66
    GEN_7_bits_is_builtin_type <= GEN_67
    GEN_7_bits_a_type <= GEN_68
    GEN_7_bits_union <= GEN_69
    GEN_7_bits_data <= GEN_70
    T_1462 <= GEN_72
    T_1464 <= GEN_71
    lastGrant <= GEN_74

  module LockingRRArbiter_6 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr_beat : UInt<3>
    input io_in_0_bits_addr_block : UInt<26>
    input io_in_0_bits_client_xact_id : UInt<4>
    input io_in_0_bits_voluntary : UInt<1>
    input io_in_0_bits_r_type : UInt<3>
    input io_in_0_bits_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_addr_beat : UInt<3>
    input io_in_1_bits_addr_block : UInt<26>
    input io_in_1_bits_client_xact_id : UInt<4>
    input io_in_1_bits_voluntary : UInt<1>
    input io_in_1_bits_r_type : UInt<3>
    input io_in_1_bits_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_addr_beat : UInt<3>
    input io_in_2_bits_addr_block : UInt<26>
    input io_in_2_bits_client_xact_id : UInt<4>
    input io_in_2_bits_voluntary : UInt<1>
    input io_in_2_bits_r_type : UInt<3>
    input io_in_2_bits_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_addr_beat : UInt<3>
    input io_in_3_bits_addr_block : UInt<26>
    input io_in_3_bits_client_xact_id : UInt<4>
    input io_in_3_bits_voluntary : UInt<1>
    input io_in_3_bits_r_type : UInt<3>
    input io_in_3_bits_data : UInt<64>
    output io_in_4_ready : UInt<1>
    input io_in_4_valid : UInt<1>
    input io_in_4_bits_addr_beat : UInt<3>
    input io_in_4_bits_addr_block : UInt<26>
    input io_in_4_bits_client_xact_id : UInt<4>
    input io_in_4_bits_voluntary : UInt<1>
    input io_in_4_bits_r_type : UInt<3>
    input io_in_4_bits_data : UInt<64>
    output io_in_5_ready : UInt<1>
    input io_in_5_valid : UInt<1>
    input io_in_5_bits_addr_beat : UInt<3>
    input io_in_5_bits_addr_block : UInt<26>
    input io_in_5_bits_client_xact_id : UInt<4>
    input io_in_5_bits_voluntary : UInt<1>
    input io_in_5_bits_r_type : UInt<3>
    input io_in_5_bits_data : UInt<64>
    output io_in_6_ready : UInt<1>
    input io_in_6_valid : UInt<1>
    input io_in_6_bits_addr_beat : UInt<3>
    input io_in_6_bits_addr_block : UInt<26>
    input io_in_6_bits_client_xact_id : UInt<4>
    input io_in_6_bits_voluntary : UInt<1>
    input io_in_6_bits_r_type : UInt<3>
    input io_in_6_bits_data : UInt<64>
    output io_in_7_ready : UInt<1>
    input io_in_7_valid : UInt<1>
    input io_in_7_bits_addr_beat : UInt<3>
    input io_in_7_bits_addr_block : UInt<26>
    input io_in_7_bits_client_xact_id : UInt<4>
    input io_in_7_bits_voluntary : UInt<1>
    input io_in_7_bits_r_type : UInt<3>
    input io_in_7_bits_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_beat : UInt<3>
    output io_out_bits_addr_block : UInt<26>
    output io_out_bits_client_xact_id : UInt<4>
    output io_out_bits_voluntary : UInt<1>
    output io_out_bits_r_type : UInt<3>
    output io_out_bits_data : UInt<64>
    output io_chosen : UInt<3>
  
    wire choice : UInt<3>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_addr_beat : UInt<3>
    wire GEN_0_bits_addr_block : UInt<26>
    wire GEN_0_bits_client_xact_id : UInt<4>
    wire GEN_0_bits_voluntary : UInt<1>
    wire GEN_0_bits_r_type : UInt<3>
    wire GEN_0_bits_data : UInt<64>
    node GEN_7 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_8 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_9 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_addr_beat, io_in_0_bits_addr_beat)
    node GEN_10 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_addr_block, io_in_0_bits_addr_block)
    node GEN_11 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_client_xact_id, io_in_0_bits_client_xact_id)
    node GEN_12 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_voluntary, io_in_0_bits_voluntary)
    node GEN_13 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_r_type, io_in_0_bits_r_type)
    node GEN_14 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_data, io_in_0_bits_data)
    node GEN_15 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_ready, GEN_7)
    node GEN_16 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_valid, GEN_8)
    node GEN_17 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_addr_beat, GEN_9)
    node GEN_18 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_addr_block, GEN_10)
    node GEN_19 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_client_xact_id, GEN_11)
    node GEN_20 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_voluntary, GEN_12)
    node GEN_21 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_r_type, GEN_13)
    node GEN_22 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_data, GEN_14)
    node GEN_23 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_ready, GEN_15)
    node GEN_24 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_valid, GEN_16)
    node GEN_25 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_addr_beat, GEN_17)
    node GEN_26 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_addr_block, GEN_18)
    node GEN_27 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_client_xact_id, GEN_19)
    node GEN_28 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_voluntary, GEN_20)
    node GEN_29 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_r_type, GEN_21)
    node GEN_30 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_data, GEN_22)
    node GEN_31 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_ready, GEN_23)
    node GEN_32 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_valid, GEN_24)
    node GEN_33 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_addr_beat, GEN_25)
    node GEN_34 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_addr_block, GEN_26)
    node GEN_35 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_client_xact_id, GEN_27)
    node GEN_36 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_voluntary, GEN_28)
    node GEN_37 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_r_type, GEN_29)
    node GEN_38 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_data, GEN_30)
    node GEN_39 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_ready, GEN_31)
    node GEN_40 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_valid, GEN_32)
    node GEN_41 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_addr_beat, GEN_33)
    node GEN_42 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_addr_block, GEN_34)
    node GEN_43 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_client_xact_id, GEN_35)
    node GEN_44 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_voluntary, GEN_36)
    node GEN_45 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_r_type, GEN_37)
    node GEN_46 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_data, GEN_38)
    node GEN_47 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_ready, GEN_39)
    node GEN_48 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_valid, GEN_40)
    node GEN_49 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_addr_beat, GEN_41)
    node GEN_50 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_addr_block, GEN_42)
    node GEN_51 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_client_xact_id, GEN_43)
    node GEN_52 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_voluntary, GEN_44)
    node GEN_53 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_r_type, GEN_45)
    node GEN_54 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_data, GEN_46)
    node GEN_55 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_ready, GEN_47)
    node GEN_56 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_valid, GEN_48)
    node GEN_57 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_addr_beat, GEN_49)
    node GEN_58 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_addr_block, GEN_50)
    node GEN_59 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_client_xact_id, GEN_51)
    node GEN_60 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_voluntary, GEN_52)
    node GEN_61 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_r_type, GEN_53)
    node GEN_62 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_data, GEN_54)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_addr_beat : UInt<3>
    wire GEN_1_bits_addr_block : UInt<26>
    wire GEN_1_bits_client_xact_id : UInt<4>
    wire GEN_1_bits_voluntary : UInt<1>
    wire GEN_1_bits_r_type : UInt<3>
    wire GEN_1_bits_data : UInt<64>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_addr_beat : UInt<3>
    wire GEN_2_bits_addr_block : UInt<26>
    wire GEN_2_bits_client_xact_id : UInt<4>
    wire GEN_2_bits_voluntary : UInt<1>
    wire GEN_2_bits_r_type : UInt<3>
    wire GEN_2_bits_data : UInt<64>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_addr_beat : UInt<3>
    wire GEN_3_bits_addr_block : UInt<26>
    wire GEN_3_bits_client_xact_id : UInt<4>
    wire GEN_3_bits_voluntary : UInt<1>
    wire GEN_3_bits_r_type : UInt<3>
    wire GEN_3_bits_data : UInt<64>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_addr_beat : UInt<3>
    wire GEN_4_bits_addr_block : UInt<26>
    wire GEN_4_bits_client_xact_id : UInt<4>
    wire GEN_4_bits_voluntary : UInt<1>
    wire GEN_4_bits_r_type : UInt<3>
    wire GEN_4_bits_data : UInt<64>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_addr_beat : UInt<3>
    wire GEN_5_bits_addr_block : UInt<26>
    wire GEN_5_bits_client_xact_id : UInt<4>
    wire GEN_5_bits_voluntary : UInt<1>
    wire GEN_5_bits_r_type : UInt<3>
    wire GEN_5_bits_data : UInt<64>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_addr_beat : UInt<3>
    wire GEN_6_bits_addr_block : UInt<26>
    wire GEN_6_bits_client_xact_id : UInt<4>
    wire GEN_6_bits_voluntary : UInt<1>
    wire GEN_6_bits_r_type : UInt<3>
    wire GEN_6_bits_data : UInt<64>
    reg T_1412 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_1414 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), T_1414)
    node T_1416 = neq(T_1412, UInt<3>("h0"))
    node T_1418 = eq(io_out_bits_r_type, UInt<3>("h0"))
    node T_1419 = eq(io_out_bits_r_type, UInt<3>("h1"))
    node T_1420 = eq(io_out_bits_r_type, UInt<3>("h2"))
    node T_1421 = or(T_1418, T_1419)
    node T_1422 = or(T_1421, T_1420)
    node T_1424 = and(io_out_ready, io_out_valid)
    node T_1425 = and(T_1424, T_1422)
    node T_1429 = add(T_1412, UInt<3>("h1"))
    node T_1430 = tail(T_1429, 1)
    node GEN_63 = mux(T_1425, io_chosen, T_1414)
    node GEN_64 = mux(T_1425, T_1430, T_1412)
    node GEN_65 = mux(T_1416, T_1414, choice)
    reg lastGrant : UInt<3>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_66 = mux(T_1424, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<3>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<3>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<3>("h3"), lastGrant)
    node grantMask_4 = gt(UInt<3>("h4"), lastGrant)
    node grantMask_5 = gt(UInt<3>("h5"), lastGrant)
    node grantMask_6 = gt(UInt<3>("h6"), lastGrant)
    node grantMask_7 = gt(UInt<3>("h7"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node validMask_4 = and(io_in_4_valid, grantMask_4)
    node validMask_5 = and(io_in_5_valid, grantMask_5)
    node validMask_6 = and(io_in_6_valid, grantMask_6)
    node validMask_7 = and(io_in_7_valid, grantMask_7)
    node T_1442 = or(validMask_1, validMask_2)
    node T_1443 = or(T_1442, validMask_3)
    node T_1444 = or(T_1443, validMask_4)
    node T_1445 = or(T_1444, validMask_5)
    node T_1446 = or(T_1445, validMask_6)
    node T_1447 = or(T_1446, validMask_7)
    node T_1448 = or(T_1447, io_in_0_valid)
    node T_1449 = or(T_1448, io_in_1_valid)
    node T_1450 = or(T_1449, io_in_2_valid)
    node T_1451 = or(T_1450, io_in_3_valid)
    node T_1452 = or(T_1451, io_in_4_valid)
    node T_1453 = or(T_1452, io_in_5_valid)
    node T_1454 = or(T_1453, io_in_6_valid)
    node T_1458 = eq(validMask_1, UInt<1>("h0"))
    node T_1460 = eq(T_1442, UInt<1>("h0"))
    node T_1462 = eq(T_1443, UInt<1>("h0"))
    node T_1464 = eq(T_1444, UInt<1>("h0"))
    node T_1466 = eq(T_1445, UInt<1>("h0"))
    node T_1468 = eq(T_1446, UInt<1>("h0"))
    node T_1470 = eq(T_1447, UInt<1>("h0"))
    node T_1472 = eq(T_1448, UInt<1>("h0"))
    node T_1474 = eq(T_1449, UInt<1>("h0"))
    node T_1476 = eq(T_1450, UInt<1>("h0"))
    node T_1478 = eq(T_1451, UInt<1>("h0"))
    node T_1480 = eq(T_1452, UInt<1>("h0"))
    node T_1482 = eq(T_1453, UInt<1>("h0"))
    node T_1484 = eq(T_1454, UInt<1>("h0"))
    node T_1488 = or(grantMask_1, T_1472)
    node T_1489 = and(T_1458, grantMask_2)
    node T_1490 = or(T_1489, T_1474)
    node T_1491 = and(T_1460, grantMask_3)
    node T_1492 = or(T_1491, T_1476)
    node T_1493 = and(T_1462, grantMask_4)
    node T_1494 = or(T_1493, T_1478)
    node T_1495 = and(T_1464, grantMask_5)
    node T_1496 = or(T_1495, T_1480)
    node T_1497 = and(T_1466, grantMask_6)
    node T_1498 = or(T_1497, T_1482)
    node T_1499 = and(T_1468, grantMask_7)
    node T_1500 = or(T_1499, T_1484)
    node T_1502 = eq(T_1414, UInt<3>("h0"))
    node T_1503 = mux(T_1416, T_1502, T_1470)
    node T_1504 = and(T_1503, io_out_ready)
    node T_1506 = eq(T_1414, UInt<3>("h1"))
    node T_1507 = mux(T_1416, T_1506, T_1488)
    node T_1508 = and(T_1507, io_out_ready)
    node T_1510 = eq(T_1414, UInt<3>("h2"))
    node T_1511 = mux(T_1416, T_1510, T_1490)
    node T_1512 = and(T_1511, io_out_ready)
    node T_1514 = eq(T_1414, UInt<3>("h3"))
    node T_1515 = mux(T_1416, T_1514, T_1492)
    node T_1516 = and(T_1515, io_out_ready)
    node T_1518 = eq(T_1414, UInt<3>("h4"))
    node T_1519 = mux(T_1416, T_1518, T_1494)
    node T_1520 = and(T_1519, io_out_ready)
    node T_1522 = eq(T_1414, UInt<3>("h5"))
    node T_1523 = mux(T_1416, T_1522, T_1496)
    node T_1524 = and(T_1523, io_out_ready)
    node T_1526 = eq(T_1414, UInt<3>("h6"))
    node T_1527 = mux(T_1416, T_1526, T_1498)
    node T_1528 = and(T_1527, io_out_ready)
    node T_1530 = eq(T_1414, UInt<3>("h7"))
    node T_1531 = mux(T_1416, T_1530, T_1500)
    node T_1532 = and(T_1531, io_out_ready)
    node GEN_67 = mux(io_in_6_valid, UInt<3>("h6"), UInt<3>("h7"))
    node GEN_68 = mux(io_in_5_valid, UInt<3>("h5"), GEN_67)
    node GEN_69 = mux(io_in_4_valid, UInt<3>("h4"), GEN_68)
    node GEN_70 = mux(io_in_3_valid, UInt<3>("h3"), GEN_69)
    node GEN_71 = mux(io_in_2_valid, UInt<3>("h2"), GEN_70)
    node GEN_72 = mux(io_in_1_valid, UInt<3>("h1"), GEN_71)
    node GEN_73 = mux(io_in_0_valid, UInt<3>("h0"), GEN_72)
    node GEN_74 = mux(validMask_7, UInt<3>("h7"), GEN_73)
    node GEN_75 = mux(validMask_6, UInt<3>("h6"), GEN_74)
    node GEN_76 = mux(validMask_5, UInt<3>("h5"), GEN_75)
    node GEN_77 = mux(validMask_4, UInt<3>("h4"), GEN_76)
    node GEN_78 = mux(validMask_3, UInt<3>("h3"), GEN_77)
    node GEN_79 = mux(validMask_2, UInt<3>("h2"), GEN_78)
    node GEN_80 = mux(validMask_1, UInt<3>("h1"), GEN_79)
    io_in_0_ready <= T_1504
    io_in_1_ready <= T_1508
    io_in_2_ready <= T_1512
    io_in_3_ready <= T_1516
    io_in_4_ready <= T_1520
    io_in_5_ready <= T_1524
    io_in_6_ready <= T_1528
    io_in_7_ready <= T_1532
    io_out_valid <= GEN_0_valid
    io_out_bits_addr_beat <= GEN_1_bits_addr_beat
    io_out_bits_addr_block <= GEN_2_bits_addr_block
    io_out_bits_client_xact_id <= GEN_3_bits_client_xact_id
    io_out_bits_voluntary <= GEN_4_bits_voluntary
    io_out_bits_r_type <= GEN_5_bits_r_type
    io_out_bits_data <= GEN_6_bits_data
    io_chosen <= GEN_65
    choice <= GEN_80
    GEN_0_ready <= GEN_55
    GEN_0_valid <= GEN_56
    GEN_0_bits_addr_beat <= GEN_57
    GEN_0_bits_addr_block <= GEN_58
    GEN_0_bits_client_xact_id <= GEN_59
    GEN_0_bits_voluntary <= GEN_60
    GEN_0_bits_r_type <= GEN_61
    GEN_0_bits_data <= GEN_62
    GEN_1_ready <= GEN_55
    GEN_1_valid <= GEN_56
    GEN_1_bits_addr_beat <= GEN_57
    GEN_1_bits_addr_block <= GEN_58
    GEN_1_bits_client_xact_id <= GEN_59
    GEN_1_bits_voluntary <= GEN_60
    GEN_1_bits_r_type <= GEN_61
    GEN_1_bits_data <= GEN_62
    GEN_2_ready <= GEN_55
    GEN_2_valid <= GEN_56
    GEN_2_bits_addr_beat <= GEN_57
    GEN_2_bits_addr_block <= GEN_58
    GEN_2_bits_client_xact_id <= GEN_59
    GEN_2_bits_voluntary <= GEN_60
    GEN_2_bits_r_type <= GEN_61
    GEN_2_bits_data <= GEN_62
    GEN_3_ready <= GEN_55
    GEN_3_valid <= GEN_56
    GEN_3_bits_addr_beat <= GEN_57
    GEN_3_bits_addr_block <= GEN_58
    GEN_3_bits_client_xact_id <= GEN_59
    GEN_3_bits_voluntary <= GEN_60
    GEN_3_bits_r_type <= GEN_61
    GEN_3_bits_data <= GEN_62
    GEN_4_ready <= GEN_55
    GEN_4_valid <= GEN_56
    GEN_4_bits_addr_beat <= GEN_57
    GEN_4_bits_addr_block <= GEN_58
    GEN_4_bits_client_xact_id <= GEN_59
    GEN_4_bits_voluntary <= GEN_60
    GEN_4_bits_r_type <= GEN_61
    GEN_4_bits_data <= GEN_62
    GEN_5_ready <= GEN_55
    GEN_5_valid <= GEN_56
    GEN_5_bits_addr_beat <= GEN_57
    GEN_5_bits_addr_block <= GEN_58
    GEN_5_bits_client_xact_id <= GEN_59
    GEN_5_bits_voluntary <= GEN_60
    GEN_5_bits_r_type <= GEN_61
    GEN_5_bits_data <= GEN_62
    GEN_6_ready <= GEN_55
    GEN_6_valid <= GEN_56
    GEN_6_bits_addr_beat <= GEN_57
    GEN_6_bits_addr_block <= GEN_58
    GEN_6_bits_client_xact_id <= GEN_59
    GEN_6_bits_voluntary <= GEN_60
    GEN_6_bits_r_type <= GEN_61
    GEN_6_bits_data <= GEN_62
    T_1412 <= GEN_64
    T_1414 <= GEN_63
    lastGrant <= GEN_66

  module ClientTileLinkIOArbiter :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_acquire_ready : UInt<1>
    input io_in_0_acquire_valid : UInt<1>
    input io_in_0_acquire_bits_addr_block : UInt<26>
    input io_in_0_acquire_bits_client_xact_id : UInt<4>
    input io_in_0_acquire_bits_addr_beat : UInt<3>
    input io_in_0_acquire_bits_is_builtin_type : UInt<1>
    input io_in_0_acquire_bits_a_type : UInt<3>
    input io_in_0_acquire_bits_union : UInt<11>
    input io_in_0_acquire_bits_data : UInt<64>
    input io_in_0_probe_ready : UInt<1>
    output io_in_0_probe_valid : UInt<1>
    output io_in_0_probe_bits_addr_block : UInt<26>
    output io_in_0_probe_bits_p_type : UInt<2>
    output io_in_0_release_ready : UInt<1>
    input io_in_0_release_valid : UInt<1>
    input io_in_0_release_bits_addr_beat : UInt<3>
    input io_in_0_release_bits_addr_block : UInt<26>
    input io_in_0_release_bits_client_xact_id : UInt<4>
    input io_in_0_release_bits_voluntary : UInt<1>
    input io_in_0_release_bits_r_type : UInt<3>
    input io_in_0_release_bits_data : UInt<64>
    input io_in_0_grant_ready : UInt<1>
    output io_in_0_grant_valid : UInt<1>
    output io_in_0_grant_bits_addr_beat : UInt<3>
    output io_in_0_grant_bits_client_xact_id : UInt<4>
    output io_in_0_grant_bits_manager_xact_id : UInt<1>
    output io_in_0_grant_bits_is_builtin_type : UInt<1>
    output io_in_0_grant_bits_g_type : UInt<4>
    output io_in_0_grant_bits_data : UInt<64>
    output io_in_0_grant_bits_manager_id : UInt<1>
    output io_in_0_finish_ready : UInt<1>
    input io_in_0_finish_valid : UInt<1>
    input io_in_0_finish_bits_manager_xact_id : UInt<1>
    input io_in_0_finish_bits_manager_id : UInt<1>
    output io_in_1_acquire_ready : UInt<1>
    input io_in_1_acquire_valid : UInt<1>
    input io_in_1_acquire_bits_addr_block : UInt<26>
    input io_in_1_acquire_bits_client_xact_id : UInt<4>
    input io_in_1_acquire_bits_addr_beat : UInt<3>
    input io_in_1_acquire_bits_is_builtin_type : UInt<1>
    input io_in_1_acquire_bits_a_type : UInt<3>
    input io_in_1_acquire_bits_union : UInt<11>
    input io_in_1_acquire_bits_data : UInt<64>
    input io_in_1_probe_ready : UInt<1>
    output io_in_1_probe_valid : UInt<1>
    output io_in_1_probe_bits_addr_block : UInt<26>
    output io_in_1_probe_bits_p_type : UInt<2>
    output io_in_1_release_ready : UInt<1>
    input io_in_1_release_valid : UInt<1>
    input io_in_1_release_bits_addr_beat : UInt<3>
    input io_in_1_release_bits_addr_block : UInt<26>
    input io_in_1_release_bits_client_xact_id : UInt<4>
    input io_in_1_release_bits_voluntary : UInt<1>
    input io_in_1_release_bits_r_type : UInt<3>
    input io_in_1_release_bits_data : UInt<64>
    input io_in_1_grant_ready : UInt<1>
    output io_in_1_grant_valid : UInt<1>
    output io_in_1_grant_bits_addr_beat : UInt<3>
    output io_in_1_grant_bits_client_xact_id : UInt<4>
    output io_in_1_grant_bits_manager_xact_id : UInt<1>
    output io_in_1_grant_bits_is_builtin_type : UInt<1>
    output io_in_1_grant_bits_g_type : UInt<4>
    output io_in_1_grant_bits_data : UInt<64>
    output io_in_1_grant_bits_manager_id : UInt<1>
    output io_in_1_finish_ready : UInt<1>
    input io_in_1_finish_valid : UInt<1>
    input io_in_1_finish_bits_manager_xact_id : UInt<1>
    input io_in_1_finish_bits_manager_id : UInt<1>
    output io_in_2_acquire_ready : UInt<1>
    input io_in_2_acquire_valid : UInt<1>
    input io_in_2_acquire_bits_addr_block : UInt<26>
    input io_in_2_acquire_bits_client_xact_id : UInt<4>
    input io_in_2_acquire_bits_addr_beat : UInt<3>
    input io_in_2_acquire_bits_is_builtin_type : UInt<1>
    input io_in_2_acquire_bits_a_type : UInt<3>
    input io_in_2_acquire_bits_union : UInt<11>
    input io_in_2_acquire_bits_data : UInt<64>
    input io_in_2_probe_ready : UInt<1>
    output io_in_2_probe_valid : UInt<1>
    output io_in_2_probe_bits_addr_block : UInt<26>
    output io_in_2_probe_bits_p_type : UInt<2>
    output io_in_2_release_ready : UInt<1>
    input io_in_2_release_valid : UInt<1>
    input io_in_2_release_bits_addr_beat : UInt<3>
    input io_in_2_release_bits_addr_block : UInt<26>
    input io_in_2_release_bits_client_xact_id : UInt<4>
    input io_in_2_release_bits_voluntary : UInt<1>
    input io_in_2_release_bits_r_type : UInt<3>
    input io_in_2_release_bits_data : UInt<64>
    input io_in_2_grant_ready : UInt<1>
    output io_in_2_grant_valid : UInt<1>
    output io_in_2_grant_bits_addr_beat : UInt<3>
    output io_in_2_grant_bits_client_xact_id : UInt<4>
    output io_in_2_grant_bits_manager_xact_id : UInt<1>
    output io_in_2_grant_bits_is_builtin_type : UInt<1>
    output io_in_2_grant_bits_g_type : UInt<4>
    output io_in_2_grant_bits_data : UInt<64>
    output io_in_2_grant_bits_manager_id : UInt<1>
    output io_in_2_finish_ready : UInt<1>
    input io_in_2_finish_valid : UInt<1>
    input io_in_2_finish_bits_manager_xact_id : UInt<1>
    input io_in_2_finish_bits_manager_id : UInt<1>
    output io_in_3_acquire_ready : UInt<1>
    input io_in_3_acquire_valid : UInt<1>
    input io_in_3_acquire_bits_addr_block : UInt<26>
    input io_in_3_acquire_bits_client_xact_id : UInt<4>
    input io_in_3_acquire_bits_addr_beat : UInt<3>
    input io_in_3_acquire_bits_is_builtin_type : UInt<1>
    input io_in_3_acquire_bits_a_type : UInt<3>
    input io_in_3_acquire_bits_union : UInt<11>
    input io_in_3_acquire_bits_data : UInt<64>
    input io_in_3_probe_ready : UInt<1>
    output io_in_3_probe_valid : UInt<1>
    output io_in_3_probe_bits_addr_block : UInt<26>
    output io_in_3_probe_bits_p_type : UInt<2>
    output io_in_3_release_ready : UInt<1>
    input io_in_3_release_valid : UInt<1>
    input io_in_3_release_bits_addr_beat : UInt<3>
    input io_in_3_release_bits_addr_block : UInt<26>
    input io_in_3_release_bits_client_xact_id : UInt<4>
    input io_in_3_release_bits_voluntary : UInt<1>
    input io_in_3_release_bits_r_type : UInt<3>
    input io_in_3_release_bits_data : UInt<64>
    input io_in_3_grant_ready : UInt<1>
    output io_in_3_grant_valid : UInt<1>
    output io_in_3_grant_bits_addr_beat : UInt<3>
    output io_in_3_grant_bits_client_xact_id : UInt<4>
    output io_in_3_grant_bits_manager_xact_id : UInt<1>
    output io_in_3_grant_bits_is_builtin_type : UInt<1>
    output io_in_3_grant_bits_g_type : UInt<4>
    output io_in_3_grant_bits_data : UInt<64>
    output io_in_3_grant_bits_manager_id : UInt<1>
    output io_in_3_finish_ready : UInt<1>
    input io_in_3_finish_valid : UInt<1>
    input io_in_3_finish_bits_manager_xact_id : UInt<1>
    input io_in_3_finish_bits_manager_id : UInt<1>
    output io_in_4_acquire_ready : UInt<1>
    input io_in_4_acquire_valid : UInt<1>
    input io_in_4_acquire_bits_addr_block : UInt<26>
    input io_in_4_acquire_bits_client_xact_id : UInt<4>
    input io_in_4_acquire_bits_addr_beat : UInt<3>
    input io_in_4_acquire_bits_is_builtin_type : UInt<1>
    input io_in_4_acquire_bits_a_type : UInt<3>
    input io_in_4_acquire_bits_union : UInt<11>
    input io_in_4_acquire_bits_data : UInt<64>
    input io_in_4_probe_ready : UInt<1>
    output io_in_4_probe_valid : UInt<1>
    output io_in_4_probe_bits_addr_block : UInt<26>
    output io_in_4_probe_bits_p_type : UInt<2>
    output io_in_4_release_ready : UInt<1>
    input io_in_4_release_valid : UInt<1>
    input io_in_4_release_bits_addr_beat : UInt<3>
    input io_in_4_release_bits_addr_block : UInt<26>
    input io_in_4_release_bits_client_xact_id : UInt<4>
    input io_in_4_release_bits_voluntary : UInt<1>
    input io_in_4_release_bits_r_type : UInt<3>
    input io_in_4_release_bits_data : UInt<64>
    input io_in_4_grant_ready : UInt<1>
    output io_in_4_grant_valid : UInt<1>
    output io_in_4_grant_bits_addr_beat : UInt<3>
    output io_in_4_grant_bits_client_xact_id : UInt<4>
    output io_in_4_grant_bits_manager_xact_id : UInt<1>
    output io_in_4_grant_bits_is_builtin_type : UInt<1>
    output io_in_4_grant_bits_g_type : UInt<4>
    output io_in_4_grant_bits_data : UInt<64>
    output io_in_4_grant_bits_manager_id : UInt<1>
    output io_in_4_finish_ready : UInt<1>
    input io_in_4_finish_valid : UInt<1>
    input io_in_4_finish_bits_manager_xact_id : UInt<1>
    input io_in_4_finish_bits_manager_id : UInt<1>
    output io_in_5_acquire_ready : UInt<1>
    input io_in_5_acquire_valid : UInt<1>
    input io_in_5_acquire_bits_addr_block : UInt<26>
    input io_in_5_acquire_bits_client_xact_id : UInt<4>
    input io_in_5_acquire_bits_addr_beat : UInt<3>
    input io_in_5_acquire_bits_is_builtin_type : UInt<1>
    input io_in_5_acquire_bits_a_type : UInt<3>
    input io_in_5_acquire_bits_union : UInt<11>
    input io_in_5_acquire_bits_data : UInt<64>
    input io_in_5_probe_ready : UInt<1>
    output io_in_5_probe_valid : UInt<1>
    output io_in_5_probe_bits_addr_block : UInt<26>
    output io_in_5_probe_bits_p_type : UInt<2>
    output io_in_5_release_ready : UInt<1>
    input io_in_5_release_valid : UInt<1>
    input io_in_5_release_bits_addr_beat : UInt<3>
    input io_in_5_release_bits_addr_block : UInt<26>
    input io_in_5_release_bits_client_xact_id : UInt<4>
    input io_in_5_release_bits_voluntary : UInt<1>
    input io_in_5_release_bits_r_type : UInt<3>
    input io_in_5_release_bits_data : UInt<64>
    input io_in_5_grant_ready : UInt<1>
    output io_in_5_grant_valid : UInt<1>
    output io_in_5_grant_bits_addr_beat : UInt<3>
    output io_in_5_grant_bits_client_xact_id : UInt<4>
    output io_in_5_grant_bits_manager_xact_id : UInt<1>
    output io_in_5_grant_bits_is_builtin_type : UInt<1>
    output io_in_5_grant_bits_g_type : UInt<4>
    output io_in_5_grant_bits_data : UInt<64>
    output io_in_5_grant_bits_manager_id : UInt<1>
    output io_in_5_finish_ready : UInt<1>
    input io_in_5_finish_valid : UInt<1>
    input io_in_5_finish_bits_manager_xact_id : UInt<1>
    input io_in_5_finish_bits_manager_id : UInt<1>
    output io_in_6_acquire_ready : UInt<1>
    input io_in_6_acquire_valid : UInt<1>
    input io_in_6_acquire_bits_addr_block : UInt<26>
    input io_in_6_acquire_bits_client_xact_id : UInt<4>
    input io_in_6_acquire_bits_addr_beat : UInt<3>
    input io_in_6_acquire_bits_is_builtin_type : UInt<1>
    input io_in_6_acquire_bits_a_type : UInt<3>
    input io_in_6_acquire_bits_union : UInt<11>
    input io_in_6_acquire_bits_data : UInt<64>
    input io_in_6_probe_ready : UInt<1>
    output io_in_6_probe_valid : UInt<1>
    output io_in_6_probe_bits_addr_block : UInt<26>
    output io_in_6_probe_bits_p_type : UInt<2>
    output io_in_6_release_ready : UInt<1>
    input io_in_6_release_valid : UInt<1>
    input io_in_6_release_bits_addr_beat : UInt<3>
    input io_in_6_release_bits_addr_block : UInt<26>
    input io_in_6_release_bits_client_xact_id : UInt<4>
    input io_in_6_release_bits_voluntary : UInt<1>
    input io_in_6_release_bits_r_type : UInt<3>
    input io_in_6_release_bits_data : UInt<64>
    input io_in_6_grant_ready : UInt<1>
    output io_in_6_grant_valid : UInt<1>
    output io_in_6_grant_bits_addr_beat : UInt<3>
    output io_in_6_grant_bits_client_xact_id : UInt<4>
    output io_in_6_grant_bits_manager_xact_id : UInt<1>
    output io_in_6_grant_bits_is_builtin_type : UInt<1>
    output io_in_6_grant_bits_g_type : UInt<4>
    output io_in_6_grant_bits_data : UInt<64>
    output io_in_6_grant_bits_manager_id : UInt<1>
    output io_in_6_finish_ready : UInt<1>
    input io_in_6_finish_valid : UInt<1>
    input io_in_6_finish_bits_manager_xact_id : UInt<1>
    input io_in_6_finish_bits_manager_id : UInt<1>
    output io_in_7_acquire_ready : UInt<1>
    input io_in_7_acquire_valid : UInt<1>
    input io_in_7_acquire_bits_addr_block : UInt<26>
    input io_in_7_acquire_bits_client_xact_id : UInt<4>
    input io_in_7_acquire_bits_addr_beat : UInt<3>
    input io_in_7_acquire_bits_is_builtin_type : UInt<1>
    input io_in_7_acquire_bits_a_type : UInt<3>
    input io_in_7_acquire_bits_union : UInt<11>
    input io_in_7_acquire_bits_data : UInt<64>
    input io_in_7_probe_ready : UInt<1>
    output io_in_7_probe_valid : UInt<1>
    output io_in_7_probe_bits_addr_block : UInt<26>
    output io_in_7_probe_bits_p_type : UInt<2>
    output io_in_7_release_ready : UInt<1>
    input io_in_7_release_valid : UInt<1>
    input io_in_7_release_bits_addr_beat : UInt<3>
    input io_in_7_release_bits_addr_block : UInt<26>
    input io_in_7_release_bits_client_xact_id : UInt<4>
    input io_in_7_release_bits_voluntary : UInt<1>
    input io_in_7_release_bits_r_type : UInt<3>
    input io_in_7_release_bits_data : UInt<64>
    input io_in_7_grant_ready : UInt<1>
    output io_in_7_grant_valid : UInt<1>
    output io_in_7_grant_bits_addr_beat : UInt<3>
    output io_in_7_grant_bits_client_xact_id : UInt<4>
    output io_in_7_grant_bits_manager_xact_id : UInt<1>
    output io_in_7_grant_bits_is_builtin_type : UInt<1>
    output io_in_7_grant_bits_g_type : UInt<4>
    output io_in_7_grant_bits_data : UInt<64>
    output io_in_7_grant_bits_manager_id : UInt<1>
    output io_in_7_finish_ready : UInt<1>
    input io_in_7_finish_valid : UInt<1>
    input io_in_7_finish_bits_manager_xact_id : UInt<1>
    input io_in_7_finish_bits_manager_id : UInt<1>
    input io_out_acquire_ready : UInt<1>
    output io_out_acquire_valid : UInt<1>
    output io_out_acquire_bits_addr_block : UInt<26>
    output io_out_acquire_bits_client_xact_id : UInt<4>
    output io_out_acquire_bits_addr_beat : UInt<3>
    output io_out_acquire_bits_is_builtin_type : UInt<1>
    output io_out_acquire_bits_a_type : UInt<3>
    output io_out_acquire_bits_union : UInt<11>
    output io_out_acquire_bits_data : UInt<64>
    output io_out_probe_ready : UInt<1>
    input io_out_probe_valid : UInt<1>
    input io_out_probe_bits_addr_block : UInt<26>
    input io_out_probe_bits_p_type : UInt<2>
    input io_out_release_ready : UInt<1>
    output io_out_release_valid : UInt<1>
    output io_out_release_bits_addr_beat : UInt<3>
    output io_out_release_bits_addr_block : UInt<26>
    output io_out_release_bits_client_xact_id : UInt<4>
    output io_out_release_bits_voluntary : UInt<1>
    output io_out_release_bits_r_type : UInt<3>
    output io_out_release_bits_data : UInt<64>
    output io_out_grant_ready : UInt<1>
    input io_out_grant_valid : UInt<1>
    input io_out_grant_bits_addr_beat : UInt<3>
    input io_out_grant_bits_client_xact_id : UInt<4>
    input io_out_grant_bits_manager_xact_id : UInt<1>
    input io_out_grant_bits_is_builtin_type : UInt<1>
    input io_out_grant_bits_g_type : UInt<4>
    input io_out_grant_bits_data : UInt<64>
    input io_out_grant_bits_manager_id : UInt<1>
    input io_out_finish_ready : UInt<1>
    output io_out_finish_valid : UInt<1>
    output io_out_finish_bits_manager_xact_id : UInt<1>
    output io_out_finish_bits_manager_id : UInt<1>
  
    inst LockingRRArbiter_5_1 of LockingRRArbiter_5
    node T_12220 = cat(io_in_0_acquire_bits_client_xact_id, UInt<3>("h0"))
    node T_12222 = cat(io_in_1_acquire_bits_client_xact_id, UInt<3>("h1"))
    node T_12224 = cat(io_in_2_acquire_bits_client_xact_id, UInt<3>("h2"))
    node T_12226 = cat(io_in_3_acquire_bits_client_xact_id, UInt<3>("h3"))
    node T_12228 = cat(io_in_4_acquire_bits_client_xact_id, UInt<3>("h4"))
    node T_12230 = cat(io_in_5_acquire_bits_client_xact_id, UInt<3>("h5"))
    node T_12232 = cat(io_in_6_acquire_bits_client_xact_id, UInt<3>("h6"))
    node T_12234 = cat(io_in_7_acquire_bits_client_xact_id, UInt<3>("h7"))
    inst LockingRRArbiter_6_1 of LockingRRArbiter_6
    node T_12236 = cat(io_in_0_release_bits_client_xact_id, UInt<3>("h0"))
    node T_12238 = cat(io_in_1_release_bits_client_xact_id, UInt<3>("h1"))
    node T_12240 = cat(io_in_2_release_bits_client_xact_id, UInt<3>("h2"))
    node T_12242 = cat(io_in_3_release_bits_client_xact_id, UInt<3>("h3"))
    node T_12244 = cat(io_in_4_release_bits_client_xact_id, UInt<3>("h4"))
    node T_12246 = cat(io_in_5_release_bits_client_xact_id, UInt<3>("h5"))
    node T_12248 = cat(io_in_6_release_bits_client_xact_id, UInt<3>("h6"))
    node T_12250 = cat(io_in_7_release_bits_client_xact_id, UInt<3>("h7"))
    node T_12251 = and(io_in_0_probe_ready, io_in_1_probe_ready)
    node T_12252 = and(T_12251, io_in_2_probe_ready)
    node T_12253 = and(T_12252, io_in_3_probe_ready)
    node T_12254 = and(T_12253, io_in_4_probe_ready)
    node T_12255 = and(T_12254, io_in_5_probe_ready)
    node T_12256 = and(T_12255, io_in_6_probe_ready)
    node T_12257 = and(T_12256, io_in_7_probe_ready)
    node T_12260 = bits(io_out_grant_bits_client_xact_id, 2, 0)
    node T_12262 = eq(T_12260, UInt<3>("h0"))
    node GEN_0 = mux(T_12262, io_out_grant_valid, UInt<1>("h0"))
    node GEN_1 = mux(T_12262, io_in_0_grant_ready, UInt<1>("h0"))
    node T_12263 = shr(io_out_grant_bits_client_xact_id, 3)
    node T_12267 = eq(T_12260, UInt<3>("h1"))
    node GEN_2 = mux(T_12267, io_out_grant_valid, UInt<1>("h0"))
    node GEN_3 = mux(T_12267, io_in_1_grant_ready, GEN_1)
    node T_12272 = eq(T_12260, UInt<3>("h2"))
    node GEN_4 = mux(T_12272, io_out_grant_valid, UInt<1>("h0"))
    node GEN_5 = mux(T_12272, io_in_2_grant_ready, GEN_3)
    node T_12277 = eq(T_12260, UInt<3>("h3"))
    node GEN_6 = mux(T_12277, io_out_grant_valid, UInt<1>("h0"))
    node GEN_7 = mux(T_12277, io_in_3_grant_ready, GEN_5)
    node T_12282 = eq(T_12260, UInt<3>("h4"))
    node GEN_8 = mux(T_12282, io_out_grant_valid, UInt<1>("h0"))
    node GEN_9 = mux(T_12282, io_in_4_grant_ready, GEN_7)
    node T_12287 = eq(T_12260, UInt<3>("h5"))
    node GEN_10 = mux(T_12287, io_out_grant_valid, UInt<1>("h0"))
    node GEN_11 = mux(T_12287, io_in_5_grant_ready, GEN_9)
    node T_12292 = eq(T_12260, UInt<3>("h6"))
    node GEN_12 = mux(T_12292, io_out_grant_valid, UInt<1>("h0"))
    node GEN_13 = mux(T_12292, io_in_6_grant_ready, GEN_11)
    node T_12297 = eq(T_12260, UInt<3>("h7"))
    node GEN_14 = mux(T_12297, io_out_grant_valid, UInt<1>("h0"))
    node GEN_15 = mux(T_12297, io_in_7_grant_ready, GEN_13)
    io_in_0_acquire_ready <= LockingRRArbiter_5_1.io_in_0_ready
    io_in_0_probe_valid <= io_out_probe_valid
    io_in_0_probe_bits_addr_block <= io_out_probe_bits_addr_block
    io_in_0_probe_bits_p_type <= io_out_probe_bits_p_type
    io_in_0_release_ready <= LockingRRArbiter_6_1.io_in_0_ready
    io_in_0_grant_valid <= GEN_0
    io_in_0_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_0_grant_bits_client_xact_id <= pad(T_12263, 4)
    io_in_0_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_0_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_0_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_0_grant_bits_data <= io_out_grant_bits_data
    io_in_0_grant_bits_manager_id <= io_out_grant_bits_manager_id
    io_in_0_finish_ready <= UInt<1>("h0")
    io_in_1_acquire_ready <= LockingRRArbiter_5_1.io_in_1_ready
    io_in_1_probe_valid <= io_out_probe_valid
    io_in_1_probe_bits_addr_block <= io_out_probe_bits_addr_block
    io_in_1_probe_bits_p_type <= io_out_probe_bits_p_type
    io_in_1_release_ready <= LockingRRArbiter_6_1.io_in_1_ready
    io_in_1_grant_valid <= GEN_2
    io_in_1_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_1_grant_bits_client_xact_id <= pad(T_12263, 4)
    io_in_1_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_1_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_1_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_1_grant_bits_data <= io_out_grant_bits_data
    io_in_1_grant_bits_manager_id <= io_out_grant_bits_manager_id
    io_in_1_finish_ready <= UInt<1>("h0")
    io_in_2_acquire_ready <= LockingRRArbiter_5_1.io_in_2_ready
    io_in_2_probe_valid <= io_out_probe_valid
    io_in_2_probe_bits_addr_block <= io_out_probe_bits_addr_block
    io_in_2_probe_bits_p_type <= io_out_probe_bits_p_type
    io_in_2_release_ready <= LockingRRArbiter_6_1.io_in_2_ready
    io_in_2_grant_valid <= GEN_4
    io_in_2_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_2_grant_bits_client_xact_id <= pad(T_12263, 4)
    io_in_2_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_2_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_2_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_2_grant_bits_data <= io_out_grant_bits_data
    io_in_2_grant_bits_manager_id <= io_out_grant_bits_manager_id
    io_in_2_finish_ready <= UInt<1>("h1")
    io_in_3_acquire_ready <= LockingRRArbiter_5_1.io_in_3_ready
    io_in_3_probe_valid <= io_out_probe_valid
    io_in_3_probe_bits_addr_block <= io_out_probe_bits_addr_block
    io_in_3_probe_bits_p_type <= io_out_probe_bits_p_type
    io_in_3_release_ready <= LockingRRArbiter_6_1.io_in_3_ready
    io_in_3_grant_valid <= GEN_6
    io_in_3_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_3_grant_bits_client_xact_id <= pad(T_12263, 4)
    io_in_3_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_3_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_3_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_3_grant_bits_data <= io_out_grant_bits_data
    io_in_3_grant_bits_manager_id <= io_out_grant_bits_manager_id
    io_in_3_finish_ready <= UInt<1>("h1")
    io_in_4_acquire_ready <= LockingRRArbiter_5_1.io_in_4_ready
    io_in_4_probe_valid <= io_out_probe_valid
    io_in_4_probe_bits_addr_block <= io_out_probe_bits_addr_block
    io_in_4_probe_bits_p_type <= io_out_probe_bits_p_type
    io_in_4_release_ready <= LockingRRArbiter_6_1.io_in_4_ready
    io_in_4_grant_valid <= GEN_8
    io_in_4_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_4_grant_bits_client_xact_id <= pad(T_12263, 4)
    io_in_4_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_4_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_4_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_4_grant_bits_data <= io_out_grant_bits_data
    io_in_4_grant_bits_manager_id <= io_out_grant_bits_manager_id
    io_in_4_finish_ready <= UInt<1>("h0")
    io_in_5_acquire_ready <= LockingRRArbiter_5_1.io_in_5_ready
    io_in_5_probe_valid <= io_out_probe_valid
    io_in_5_probe_bits_addr_block <= io_out_probe_bits_addr_block
    io_in_5_probe_bits_p_type <= io_out_probe_bits_p_type
    io_in_5_release_ready <= LockingRRArbiter_6_1.io_in_5_ready
    io_in_5_grant_valid <= GEN_10
    io_in_5_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_5_grant_bits_client_xact_id <= pad(T_12263, 4)
    io_in_5_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_5_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_5_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_5_grant_bits_data <= io_out_grant_bits_data
    io_in_5_grant_bits_manager_id <= io_out_grant_bits_manager_id
    io_in_5_finish_ready <= UInt<1>("h1")
    io_in_6_acquire_ready <= LockingRRArbiter_5_1.io_in_6_ready
    io_in_6_probe_valid <= io_out_probe_valid
    io_in_6_probe_bits_addr_block <= io_out_probe_bits_addr_block
    io_in_6_probe_bits_p_type <= io_out_probe_bits_p_type
    io_in_6_release_ready <= LockingRRArbiter_6_1.io_in_6_ready
    io_in_6_grant_valid <= GEN_12
    io_in_6_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_6_grant_bits_client_xact_id <= pad(T_12263, 4)
    io_in_6_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_6_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_6_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_6_grant_bits_data <= io_out_grant_bits_data
    io_in_6_grant_bits_manager_id <= io_out_grant_bits_manager_id
    io_in_6_finish_ready <= UInt<1>("h1")
    io_in_7_acquire_ready <= LockingRRArbiter_5_1.io_in_7_ready
    io_in_7_probe_valid <= io_out_probe_valid
    io_in_7_probe_bits_addr_block <= io_out_probe_bits_addr_block
    io_in_7_probe_bits_p_type <= io_out_probe_bits_p_type
    io_in_7_release_ready <= LockingRRArbiter_6_1.io_in_7_ready
    io_in_7_grant_valid <= GEN_14
    io_in_7_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_7_grant_bits_client_xact_id <= pad(T_12263, 4)
    io_in_7_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_7_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_7_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_7_grant_bits_data <= io_out_grant_bits_data
    io_in_7_grant_bits_manager_id <= io_out_grant_bits_manager_id
    io_in_7_finish_ready <= UInt<1>("h0")
    io_out_acquire_valid <= LockingRRArbiter_5_1.io_out_valid
    io_out_acquire_bits_addr_block <= LockingRRArbiter_5_1.io_out_bits_addr_block
    io_out_acquire_bits_client_xact_id <= LockingRRArbiter_5_1.io_out_bits_client_xact_id
    io_out_acquire_bits_addr_beat <= LockingRRArbiter_5_1.io_out_bits_addr_beat
    io_out_acquire_bits_is_builtin_type <= LockingRRArbiter_5_1.io_out_bits_is_builtin_type
    io_out_acquire_bits_a_type <= LockingRRArbiter_5_1.io_out_bits_a_type
    io_out_acquire_bits_union <= LockingRRArbiter_5_1.io_out_bits_union
    io_out_acquire_bits_data <= LockingRRArbiter_5_1.io_out_bits_data
    io_out_probe_ready <= T_12257
    io_out_release_valid <= LockingRRArbiter_6_1.io_out_valid
    io_out_release_bits_addr_beat <= LockingRRArbiter_6_1.io_out_bits_addr_beat
    io_out_release_bits_addr_block <= LockingRRArbiter_6_1.io_out_bits_addr_block
    io_out_release_bits_client_xact_id <= LockingRRArbiter_6_1.io_out_bits_client_xact_id
    io_out_release_bits_voluntary <= LockingRRArbiter_6_1.io_out_bits_voluntary
    io_out_release_bits_r_type <= LockingRRArbiter_6_1.io_out_bits_r_type
    io_out_release_bits_data <= LockingRRArbiter_6_1.io_out_bits_data
    io_out_grant_ready <= GEN_15
    io_out_finish_valid <= UInt<1>("h1")
    io_out_finish_bits_manager_xact_id <= UInt<1>("h0")
    io_out_finish_bits_manager_id <= UInt<1>("h1")
    LockingRRArbiter_5_1.io_in_0_valid <= io_in_0_acquire_valid
    LockingRRArbiter_5_1.io_in_0_bits_addr_block <= io_in_0_acquire_bits_addr_block
    LockingRRArbiter_5_1.io_in_0_bits_client_xact_id <= bits(T_12220, 3, 0)
    LockingRRArbiter_5_1.io_in_0_bits_addr_beat <= io_in_0_acquire_bits_addr_beat
    LockingRRArbiter_5_1.io_in_0_bits_is_builtin_type <= io_in_0_acquire_bits_is_builtin_type
    LockingRRArbiter_5_1.io_in_0_bits_a_type <= io_in_0_acquire_bits_a_type
    LockingRRArbiter_5_1.io_in_0_bits_union <= io_in_0_acquire_bits_union
    LockingRRArbiter_5_1.io_in_0_bits_data <= io_in_0_acquire_bits_data
    LockingRRArbiter_5_1.io_in_1_valid <= io_in_1_acquire_valid
    LockingRRArbiter_5_1.io_in_1_bits_addr_block <= io_in_1_acquire_bits_addr_block
    LockingRRArbiter_5_1.io_in_1_bits_client_xact_id <= bits(T_12222, 3, 0)
    LockingRRArbiter_5_1.io_in_1_bits_addr_beat <= io_in_1_acquire_bits_addr_beat
    LockingRRArbiter_5_1.io_in_1_bits_is_builtin_type <= io_in_1_acquire_bits_is_builtin_type
    LockingRRArbiter_5_1.io_in_1_bits_a_type <= io_in_1_acquire_bits_a_type
    LockingRRArbiter_5_1.io_in_1_bits_union <= io_in_1_acquire_bits_union
    LockingRRArbiter_5_1.io_in_1_bits_data <= io_in_1_acquire_bits_data
    LockingRRArbiter_5_1.io_in_2_valid <= io_in_2_acquire_valid
    LockingRRArbiter_5_1.io_in_2_bits_addr_block <= io_in_2_acquire_bits_addr_block
    LockingRRArbiter_5_1.io_in_2_bits_client_xact_id <= bits(T_12224, 3, 0)
    LockingRRArbiter_5_1.io_in_2_bits_addr_beat <= io_in_2_acquire_bits_addr_beat
    LockingRRArbiter_5_1.io_in_2_bits_is_builtin_type <= io_in_2_acquire_bits_is_builtin_type
    LockingRRArbiter_5_1.io_in_2_bits_a_type <= io_in_2_acquire_bits_a_type
    LockingRRArbiter_5_1.io_in_2_bits_union <= io_in_2_acquire_bits_union
    LockingRRArbiter_5_1.io_in_2_bits_data <= io_in_2_acquire_bits_data
    LockingRRArbiter_5_1.io_in_3_valid <= io_in_3_acquire_valid
    LockingRRArbiter_5_1.io_in_3_bits_addr_block <= io_in_3_acquire_bits_addr_block
    LockingRRArbiter_5_1.io_in_3_bits_client_xact_id <= bits(T_12226, 3, 0)
    LockingRRArbiter_5_1.io_in_3_bits_addr_beat <= io_in_3_acquire_bits_addr_beat
    LockingRRArbiter_5_1.io_in_3_bits_is_builtin_type <= io_in_3_acquire_bits_is_builtin_type
    LockingRRArbiter_5_1.io_in_3_bits_a_type <= io_in_3_acquire_bits_a_type
    LockingRRArbiter_5_1.io_in_3_bits_union <= io_in_3_acquire_bits_union
    LockingRRArbiter_5_1.io_in_3_bits_data <= io_in_3_acquire_bits_data
    LockingRRArbiter_5_1.io_in_4_valid <= io_in_4_acquire_valid
    LockingRRArbiter_5_1.io_in_4_bits_addr_block <= io_in_4_acquire_bits_addr_block
    LockingRRArbiter_5_1.io_in_4_bits_client_xact_id <= bits(T_12228, 3, 0)
    LockingRRArbiter_5_1.io_in_4_bits_addr_beat <= io_in_4_acquire_bits_addr_beat
    LockingRRArbiter_5_1.io_in_4_bits_is_builtin_type <= io_in_4_acquire_bits_is_builtin_type
    LockingRRArbiter_5_1.io_in_4_bits_a_type <= io_in_4_acquire_bits_a_type
    LockingRRArbiter_5_1.io_in_4_bits_union <= io_in_4_acquire_bits_union
    LockingRRArbiter_5_1.io_in_4_bits_data <= io_in_4_acquire_bits_data
    LockingRRArbiter_5_1.io_in_5_valid <= io_in_5_acquire_valid
    LockingRRArbiter_5_1.io_in_5_bits_addr_block <= io_in_5_acquire_bits_addr_block
    LockingRRArbiter_5_1.io_in_5_bits_client_xact_id <= bits(T_12230, 3, 0)
    LockingRRArbiter_5_1.io_in_5_bits_addr_beat <= io_in_5_acquire_bits_addr_beat
    LockingRRArbiter_5_1.io_in_5_bits_is_builtin_type <= io_in_5_acquire_bits_is_builtin_type
    LockingRRArbiter_5_1.io_in_5_bits_a_type <= io_in_5_acquire_bits_a_type
    LockingRRArbiter_5_1.io_in_5_bits_union <= io_in_5_acquire_bits_union
    LockingRRArbiter_5_1.io_in_5_bits_data <= io_in_5_acquire_bits_data
    LockingRRArbiter_5_1.io_in_6_valid <= io_in_6_acquire_valid
    LockingRRArbiter_5_1.io_in_6_bits_addr_block <= io_in_6_acquire_bits_addr_block
    LockingRRArbiter_5_1.io_in_6_bits_client_xact_id <= bits(T_12232, 3, 0)
    LockingRRArbiter_5_1.io_in_6_bits_addr_beat <= io_in_6_acquire_bits_addr_beat
    LockingRRArbiter_5_1.io_in_6_bits_is_builtin_type <= io_in_6_acquire_bits_is_builtin_type
    LockingRRArbiter_5_1.io_in_6_bits_a_type <= io_in_6_acquire_bits_a_type
    LockingRRArbiter_5_1.io_in_6_bits_union <= io_in_6_acquire_bits_union
    LockingRRArbiter_5_1.io_in_6_bits_data <= io_in_6_acquire_bits_data
    LockingRRArbiter_5_1.io_in_7_valid <= io_in_7_acquire_valid
    LockingRRArbiter_5_1.io_in_7_bits_addr_block <= io_in_7_acquire_bits_addr_block
    LockingRRArbiter_5_1.io_in_7_bits_client_xact_id <= bits(T_12234, 3, 0)
    LockingRRArbiter_5_1.io_in_7_bits_addr_beat <= io_in_7_acquire_bits_addr_beat
    LockingRRArbiter_5_1.io_in_7_bits_is_builtin_type <= io_in_7_acquire_bits_is_builtin_type
    LockingRRArbiter_5_1.io_in_7_bits_a_type <= io_in_7_acquire_bits_a_type
    LockingRRArbiter_5_1.io_in_7_bits_union <= io_in_7_acquire_bits_union
    LockingRRArbiter_5_1.io_in_7_bits_data <= io_in_7_acquire_bits_data
    LockingRRArbiter_5_1.io_out_ready <= io_out_acquire_ready
    LockingRRArbiter_6_1.io_in_0_valid <= io_in_0_release_valid
    LockingRRArbiter_6_1.io_in_0_bits_addr_beat <= io_in_0_release_bits_addr_beat
    LockingRRArbiter_6_1.io_in_0_bits_addr_block <= io_in_0_release_bits_addr_block
    LockingRRArbiter_6_1.io_in_0_bits_client_xact_id <= bits(T_12236, 3, 0)
    LockingRRArbiter_6_1.io_in_0_bits_voluntary <= io_in_0_release_bits_voluntary
    LockingRRArbiter_6_1.io_in_0_bits_r_type <= io_in_0_release_bits_r_type
    LockingRRArbiter_6_1.io_in_0_bits_data <= io_in_0_release_bits_data
    LockingRRArbiter_6_1.io_in_1_valid <= io_in_1_release_valid
    LockingRRArbiter_6_1.io_in_1_bits_addr_beat <= io_in_1_release_bits_addr_beat
    LockingRRArbiter_6_1.io_in_1_bits_addr_block <= io_in_1_release_bits_addr_block
    LockingRRArbiter_6_1.io_in_1_bits_client_xact_id <= bits(T_12238, 3, 0)
    LockingRRArbiter_6_1.io_in_1_bits_voluntary <= io_in_1_release_bits_voluntary
    LockingRRArbiter_6_1.io_in_1_bits_r_type <= io_in_1_release_bits_r_type
    LockingRRArbiter_6_1.io_in_1_bits_data <= io_in_1_release_bits_data
    LockingRRArbiter_6_1.io_in_2_valid <= io_in_2_release_valid
    LockingRRArbiter_6_1.io_in_2_bits_addr_beat <= io_in_2_release_bits_addr_beat
    LockingRRArbiter_6_1.io_in_2_bits_addr_block <= io_in_2_release_bits_addr_block
    LockingRRArbiter_6_1.io_in_2_bits_client_xact_id <= bits(T_12240, 3, 0)
    LockingRRArbiter_6_1.io_in_2_bits_voluntary <= io_in_2_release_bits_voluntary
    LockingRRArbiter_6_1.io_in_2_bits_r_type <= io_in_2_release_bits_r_type
    LockingRRArbiter_6_1.io_in_2_bits_data <= io_in_2_release_bits_data
    LockingRRArbiter_6_1.io_in_3_valid <= io_in_3_release_valid
    LockingRRArbiter_6_1.io_in_3_bits_addr_beat <= io_in_3_release_bits_addr_beat
    LockingRRArbiter_6_1.io_in_3_bits_addr_block <= io_in_3_release_bits_addr_block
    LockingRRArbiter_6_1.io_in_3_bits_client_xact_id <= bits(T_12242, 3, 0)
    LockingRRArbiter_6_1.io_in_3_bits_voluntary <= io_in_3_release_bits_voluntary
    LockingRRArbiter_6_1.io_in_3_bits_r_type <= io_in_3_release_bits_r_type
    LockingRRArbiter_6_1.io_in_3_bits_data <= io_in_3_release_bits_data
    LockingRRArbiter_6_1.io_in_4_valid <= io_in_4_release_valid
    LockingRRArbiter_6_1.io_in_4_bits_addr_beat <= io_in_4_release_bits_addr_beat
    LockingRRArbiter_6_1.io_in_4_bits_addr_block <= io_in_4_release_bits_addr_block
    LockingRRArbiter_6_1.io_in_4_bits_client_xact_id <= bits(T_12244, 3, 0)
    LockingRRArbiter_6_1.io_in_4_bits_voluntary <= io_in_4_release_bits_voluntary
    LockingRRArbiter_6_1.io_in_4_bits_r_type <= io_in_4_release_bits_r_type
    LockingRRArbiter_6_1.io_in_4_bits_data <= io_in_4_release_bits_data
    LockingRRArbiter_6_1.io_in_5_valid <= io_in_5_release_valid
    LockingRRArbiter_6_1.io_in_5_bits_addr_beat <= io_in_5_release_bits_addr_beat
    LockingRRArbiter_6_1.io_in_5_bits_addr_block <= io_in_5_release_bits_addr_block
    LockingRRArbiter_6_1.io_in_5_bits_client_xact_id <= bits(T_12246, 3, 0)
    LockingRRArbiter_6_1.io_in_5_bits_voluntary <= io_in_5_release_bits_voluntary
    LockingRRArbiter_6_1.io_in_5_bits_r_type <= io_in_5_release_bits_r_type
    LockingRRArbiter_6_1.io_in_5_bits_data <= io_in_5_release_bits_data
    LockingRRArbiter_6_1.io_in_6_valid <= io_in_6_release_valid
    LockingRRArbiter_6_1.io_in_6_bits_addr_beat <= io_in_6_release_bits_addr_beat
    LockingRRArbiter_6_1.io_in_6_bits_addr_block <= io_in_6_release_bits_addr_block
    LockingRRArbiter_6_1.io_in_6_bits_client_xact_id <= bits(T_12248, 3, 0)
    LockingRRArbiter_6_1.io_in_6_bits_voluntary <= io_in_6_release_bits_voluntary
    LockingRRArbiter_6_1.io_in_6_bits_r_type <= io_in_6_release_bits_r_type
    LockingRRArbiter_6_1.io_in_6_bits_data <= io_in_6_release_bits_data
    LockingRRArbiter_6_1.io_in_7_valid <= io_in_7_release_valid
    LockingRRArbiter_6_1.io_in_7_bits_addr_beat <= io_in_7_release_bits_addr_beat
    LockingRRArbiter_6_1.io_in_7_bits_addr_block <= io_in_7_release_bits_addr_block
    LockingRRArbiter_6_1.io_in_7_bits_client_xact_id <= bits(T_12250, 3, 0)
    LockingRRArbiter_6_1.io_in_7_bits_voluntary <= io_in_7_release_bits_voluntary
    LockingRRArbiter_6_1.io_in_7_bits_r_type <= io_in_7_release_bits_r_type
    LockingRRArbiter_6_1.io_in_7_bits_data <= io_in_7_release_bits_data
    LockingRRArbiter_6_1.io_out_ready <= io_out_release_ready

  module LockingRRArbiter_7 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr_block : UInt<26>
    input io_in_0_bits_p_type : UInt<2>
    input io_in_0_bits_client_id : UInt<1>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_addr_block : UInt<26>
    input io_in_1_bits_p_type : UInt<2>
    input io_in_1_bits_client_id : UInt<1>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_addr_block : UInt<26>
    input io_in_2_bits_p_type : UInt<2>
    input io_in_2_bits_client_id : UInt<1>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_addr_block : UInt<26>
    input io_in_3_bits_p_type : UInt<2>
    input io_in_3_bits_client_id : UInt<1>
    output io_in_4_ready : UInt<1>
    input io_in_4_valid : UInt<1>
    input io_in_4_bits_addr_block : UInt<26>
    input io_in_4_bits_p_type : UInt<2>
    input io_in_4_bits_client_id : UInt<1>
    output io_in_5_ready : UInt<1>
    input io_in_5_valid : UInt<1>
    input io_in_5_bits_addr_block : UInt<26>
    input io_in_5_bits_p_type : UInt<2>
    input io_in_5_bits_client_id : UInt<1>
    output io_in_6_ready : UInt<1>
    input io_in_6_valid : UInt<1>
    input io_in_6_bits_addr_block : UInt<26>
    input io_in_6_bits_p_type : UInt<2>
    input io_in_6_bits_client_id : UInt<1>
    output io_in_7_ready : UInt<1>
    input io_in_7_valid : UInt<1>
    input io_in_7_bits_addr_block : UInt<26>
    input io_in_7_bits_p_type : UInt<2>
    input io_in_7_bits_client_id : UInt<1>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_block : UInt<26>
    output io_out_bits_p_type : UInt<2>
    output io_out_bits_client_id : UInt<1>
    output io_chosen : UInt<3>
  
    wire choice : UInt<3>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_addr_block : UInt<26>
    wire GEN_0_bits_p_type : UInt<2>
    wire GEN_0_bits_client_id : UInt<1>
    node GEN_4 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_5 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_6 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_addr_block, io_in_0_bits_addr_block)
    node GEN_7 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_p_type, io_in_0_bits_p_type)
    node GEN_8 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_client_id, io_in_0_bits_client_id)
    node GEN_9 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_ready, GEN_4)
    node GEN_10 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_valid, GEN_5)
    node GEN_11 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_addr_block, GEN_6)
    node GEN_12 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_p_type, GEN_7)
    node GEN_13 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_client_id, GEN_8)
    node GEN_14 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_ready, GEN_9)
    node GEN_15 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_valid, GEN_10)
    node GEN_16 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_addr_block, GEN_11)
    node GEN_17 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_p_type, GEN_12)
    node GEN_18 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_client_id, GEN_13)
    node GEN_19 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_ready, GEN_14)
    node GEN_20 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_valid, GEN_15)
    node GEN_21 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_addr_block, GEN_16)
    node GEN_22 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_p_type, GEN_17)
    node GEN_23 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_client_id, GEN_18)
    node GEN_24 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_ready, GEN_19)
    node GEN_25 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_valid, GEN_20)
    node GEN_26 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_addr_block, GEN_21)
    node GEN_27 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_p_type, GEN_22)
    node GEN_28 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_client_id, GEN_23)
    node GEN_29 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_ready, GEN_24)
    node GEN_30 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_valid, GEN_25)
    node GEN_31 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_addr_block, GEN_26)
    node GEN_32 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_p_type, GEN_27)
    node GEN_33 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_client_id, GEN_28)
    node GEN_34 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_ready, GEN_29)
    node GEN_35 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_valid, GEN_30)
    node GEN_36 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_addr_block, GEN_31)
    node GEN_37 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_p_type, GEN_32)
    node GEN_38 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_client_id, GEN_33)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_addr_block : UInt<26>
    wire GEN_1_bits_p_type : UInt<2>
    wire GEN_1_bits_client_id : UInt<1>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_addr_block : UInt<26>
    wire GEN_2_bits_p_type : UInt<2>
    wire GEN_2_bits_client_id : UInt<1>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_addr_block : UInt<26>
    wire GEN_3_bits_p_type : UInt<2>
    wire GEN_3_bits_client_id : UInt<1>
    reg T_1262 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_1264 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), T_1264)
    node T_1266 = neq(T_1262, UInt<3>("h0"))
    node T_1268 = and(io_out_ready, io_out_valid)
    node GEN_41 = mux(T_1266, T_1264, choice)
    reg lastGrant : UInt<3>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_42 = mux(T_1268, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<3>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<3>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<3>("h3"), lastGrant)
    node grantMask_4 = gt(UInt<3>("h4"), lastGrant)
    node grantMask_5 = gt(UInt<3>("h5"), lastGrant)
    node grantMask_6 = gt(UInt<3>("h6"), lastGrant)
    node grantMask_7 = gt(UInt<3>("h7"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node validMask_4 = and(io_in_4_valid, grantMask_4)
    node validMask_5 = and(io_in_5_valid, grantMask_5)
    node validMask_6 = and(io_in_6_valid, grantMask_6)
    node validMask_7 = and(io_in_7_valid, grantMask_7)
    node T_1286 = or(validMask_1, validMask_2)
    node T_1287 = or(T_1286, validMask_3)
    node T_1288 = or(T_1287, validMask_4)
    node T_1289 = or(T_1288, validMask_5)
    node T_1290 = or(T_1289, validMask_6)
    node T_1291 = or(T_1290, validMask_7)
    node T_1292 = or(T_1291, io_in_0_valid)
    node T_1293 = or(T_1292, io_in_1_valid)
    node T_1294 = or(T_1293, io_in_2_valid)
    node T_1295 = or(T_1294, io_in_3_valid)
    node T_1296 = or(T_1295, io_in_4_valid)
    node T_1297 = or(T_1296, io_in_5_valid)
    node T_1298 = or(T_1297, io_in_6_valid)
    node T_1302 = eq(validMask_1, UInt<1>("h0"))
    node T_1304 = eq(T_1286, UInt<1>("h0"))
    node T_1306 = eq(T_1287, UInt<1>("h0"))
    node T_1308 = eq(T_1288, UInt<1>("h0"))
    node T_1310 = eq(T_1289, UInt<1>("h0"))
    node T_1312 = eq(T_1290, UInt<1>("h0"))
    node T_1314 = eq(T_1291, UInt<1>("h0"))
    node T_1316 = eq(T_1292, UInt<1>("h0"))
    node T_1318 = eq(T_1293, UInt<1>("h0"))
    node T_1320 = eq(T_1294, UInt<1>("h0"))
    node T_1322 = eq(T_1295, UInt<1>("h0"))
    node T_1324 = eq(T_1296, UInt<1>("h0"))
    node T_1326 = eq(T_1297, UInt<1>("h0"))
    node T_1328 = eq(T_1298, UInt<1>("h0"))
    node T_1332 = or(grantMask_1, T_1316)
    node T_1333 = and(T_1302, grantMask_2)
    node T_1334 = or(T_1333, T_1318)
    node T_1335 = and(T_1304, grantMask_3)
    node T_1336 = or(T_1335, T_1320)
    node T_1337 = and(T_1306, grantMask_4)
    node T_1338 = or(T_1337, T_1322)
    node T_1339 = and(T_1308, grantMask_5)
    node T_1340 = or(T_1339, T_1324)
    node T_1341 = and(T_1310, grantMask_6)
    node T_1342 = or(T_1341, T_1326)
    node T_1343 = and(T_1312, grantMask_7)
    node T_1344 = or(T_1343, T_1328)
    node T_1346 = eq(T_1264, UInt<3>("h0"))
    node T_1347 = mux(T_1266, T_1346, T_1314)
    node T_1348 = and(T_1347, io_out_ready)
    node T_1350 = eq(T_1264, UInt<3>("h1"))
    node T_1351 = mux(T_1266, T_1350, T_1332)
    node T_1352 = and(T_1351, io_out_ready)
    node T_1354 = eq(T_1264, UInt<3>("h2"))
    node T_1355 = mux(T_1266, T_1354, T_1334)
    node T_1356 = and(T_1355, io_out_ready)
    node T_1358 = eq(T_1264, UInt<3>("h3"))
    node T_1359 = mux(T_1266, T_1358, T_1336)
    node T_1360 = and(T_1359, io_out_ready)
    node T_1362 = eq(T_1264, UInt<3>("h4"))
    node T_1363 = mux(T_1266, T_1362, T_1338)
    node T_1364 = and(T_1363, io_out_ready)
    node T_1366 = eq(T_1264, UInt<3>("h5"))
    node T_1367 = mux(T_1266, T_1366, T_1340)
    node T_1368 = and(T_1367, io_out_ready)
    node T_1370 = eq(T_1264, UInt<3>("h6"))
    node T_1371 = mux(T_1266, T_1370, T_1342)
    node T_1372 = and(T_1371, io_out_ready)
    node T_1374 = eq(T_1264, UInt<3>("h7"))
    node T_1375 = mux(T_1266, T_1374, T_1344)
    node T_1376 = and(T_1375, io_out_ready)
    node GEN_43 = mux(io_in_6_valid, UInt<3>("h6"), UInt<3>("h7"))
    node GEN_44 = mux(io_in_5_valid, UInt<3>("h5"), GEN_43)
    node GEN_45 = mux(io_in_4_valid, UInt<3>("h4"), GEN_44)
    node GEN_46 = mux(io_in_3_valid, UInt<3>("h3"), GEN_45)
    node GEN_47 = mux(io_in_2_valid, UInt<3>("h2"), GEN_46)
    node GEN_48 = mux(io_in_1_valid, UInt<3>("h1"), GEN_47)
    node GEN_49 = mux(io_in_0_valid, UInt<3>("h0"), GEN_48)
    node GEN_50 = mux(validMask_7, UInt<3>("h7"), GEN_49)
    node GEN_51 = mux(validMask_6, UInt<3>("h6"), GEN_50)
    node GEN_52 = mux(validMask_5, UInt<3>("h5"), GEN_51)
    node GEN_53 = mux(validMask_4, UInt<3>("h4"), GEN_52)
    node GEN_54 = mux(validMask_3, UInt<3>("h3"), GEN_53)
    node GEN_55 = mux(validMask_2, UInt<3>("h2"), GEN_54)
    node GEN_56 = mux(validMask_1, UInt<3>("h1"), GEN_55)
    io_in_0_ready <= T_1348
    io_in_1_ready <= T_1352
    io_in_2_ready <= T_1356
    io_in_3_ready <= T_1360
    io_in_4_ready <= T_1364
    io_in_5_ready <= T_1368
    io_in_6_ready <= T_1372
    io_in_7_ready <= T_1376
    io_out_valid <= GEN_0_valid
    io_out_bits_addr_block <= GEN_1_bits_addr_block
    io_out_bits_p_type <= GEN_2_bits_p_type
    io_out_bits_client_id <= GEN_3_bits_client_id
    io_chosen <= GEN_41
    choice <= GEN_56
    GEN_0_ready <= GEN_34
    GEN_0_valid <= GEN_35
    GEN_0_bits_addr_block <= GEN_36
    GEN_0_bits_p_type <= GEN_37
    GEN_0_bits_client_id <= GEN_38
    GEN_1_ready <= GEN_34
    GEN_1_valid <= GEN_35
    GEN_1_bits_addr_block <= GEN_36
    GEN_1_bits_p_type <= GEN_37
    GEN_1_bits_client_id <= GEN_38
    GEN_2_ready <= GEN_34
    GEN_2_valid <= GEN_35
    GEN_2_bits_addr_block <= GEN_36
    GEN_2_bits_p_type <= GEN_37
    GEN_2_bits_client_id <= GEN_38
    GEN_3_ready <= GEN_34
    GEN_3_valid <= GEN_35
    GEN_3_bits_addr_block <= GEN_36
    GEN_3_bits_p_type <= GEN_37
    GEN_3_bits_client_id <= GEN_38
    T_1262 <= T_1262
    T_1264 <= T_1264
    lastGrant <= GEN_42

  module LockingRRArbiter_8 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr_beat : UInt<3>
    input io_in_0_bits_client_xact_id : UInt<1>
    input io_in_0_bits_manager_xact_id : UInt<4>
    input io_in_0_bits_is_builtin_type : UInt<1>
    input io_in_0_bits_g_type : UInt<4>
    input io_in_0_bits_data : UInt<64>
    input io_in_0_bits_client_id : UInt<1>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_addr_beat : UInt<3>
    input io_in_1_bits_client_xact_id : UInt<1>
    input io_in_1_bits_manager_xact_id : UInt<4>
    input io_in_1_bits_is_builtin_type : UInt<1>
    input io_in_1_bits_g_type : UInt<4>
    input io_in_1_bits_data : UInt<64>
    input io_in_1_bits_client_id : UInt<1>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_addr_beat : UInt<3>
    input io_in_2_bits_client_xact_id : UInt<1>
    input io_in_2_bits_manager_xact_id : UInt<4>
    input io_in_2_bits_is_builtin_type : UInt<1>
    input io_in_2_bits_g_type : UInt<4>
    input io_in_2_bits_data : UInt<64>
    input io_in_2_bits_client_id : UInt<1>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_addr_beat : UInt<3>
    input io_in_3_bits_client_xact_id : UInt<1>
    input io_in_3_bits_manager_xact_id : UInt<4>
    input io_in_3_bits_is_builtin_type : UInt<1>
    input io_in_3_bits_g_type : UInt<4>
    input io_in_3_bits_data : UInt<64>
    input io_in_3_bits_client_id : UInt<1>
    output io_in_4_ready : UInt<1>
    input io_in_4_valid : UInt<1>
    input io_in_4_bits_addr_beat : UInt<3>
    input io_in_4_bits_client_xact_id : UInt<1>
    input io_in_4_bits_manager_xact_id : UInt<4>
    input io_in_4_bits_is_builtin_type : UInt<1>
    input io_in_4_bits_g_type : UInt<4>
    input io_in_4_bits_data : UInt<64>
    input io_in_4_bits_client_id : UInt<1>
    output io_in_5_ready : UInt<1>
    input io_in_5_valid : UInt<1>
    input io_in_5_bits_addr_beat : UInt<3>
    input io_in_5_bits_client_xact_id : UInt<1>
    input io_in_5_bits_manager_xact_id : UInt<4>
    input io_in_5_bits_is_builtin_type : UInt<1>
    input io_in_5_bits_g_type : UInt<4>
    input io_in_5_bits_data : UInt<64>
    input io_in_5_bits_client_id : UInt<1>
    output io_in_6_ready : UInt<1>
    input io_in_6_valid : UInt<1>
    input io_in_6_bits_addr_beat : UInt<3>
    input io_in_6_bits_client_xact_id : UInt<1>
    input io_in_6_bits_manager_xact_id : UInt<4>
    input io_in_6_bits_is_builtin_type : UInt<1>
    input io_in_6_bits_g_type : UInt<4>
    input io_in_6_bits_data : UInt<64>
    input io_in_6_bits_client_id : UInt<1>
    output io_in_7_ready : UInt<1>
    input io_in_7_valid : UInt<1>
    input io_in_7_bits_addr_beat : UInt<3>
    input io_in_7_bits_client_xact_id : UInt<1>
    input io_in_7_bits_manager_xact_id : UInt<4>
    input io_in_7_bits_is_builtin_type : UInt<1>
    input io_in_7_bits_g_type : UInt<4>
    input io_in_7_bits_data : UInt<64>
    input io_in_7_bits_client_id : UInt<1>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_beat : UInt<3>
    output io_out_bits_client_xact_id : UInt<1>
    output io_out_bits_manager_xact_id : UInt<4>
    output io_out_bits_is_builtin_type : UInt<1>
    output io_out_bits_g_type : UInt<4>
    output io_out_bits_data : UInt<64>
    output io_out_bits_client_id : UInt<1>
    output io_chosen : UInt<3>
  
    wire choice : UInt<3>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_addr_beat : UInt<3>
    wire GEN_0_bits_client_xact_id : UInt<1>
    wire GEN_0_bits_manager_xact_id : UInt<4>
    wire GEN_0_bits_is_builtin_type : UInt<1>
    wire GEN_0_bits_g_type : UInt<4>
    wire GEN_0_bits_data : UInt<64>
    wire GEN_0_bits_client_id : UInt<1>
    node GEN_8 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_9 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_10 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_addr_beat, io_in_0_bits_addr_beat)
    node GEN_11 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_client_xact_id, io_in_0_bits_client_xact_id)
    node GEN_12 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_manager_xact_id, io_in_0_bits_manager_xact_id)
    node GEN_13 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_is_builtin_type, io_in_0_bits_is_builtin_type)
    node GEN_14 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_g_type, io_in_0_bits_g_type)
    node GEN_15 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_data, io_in_0_bits_data)
    node GEN_16 = mux(eq(UInt<3>("h1"), io_chosen), io_in_1_bits_client_id, io_in_0_bits_client_id)
    node GEN_17 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_ready, GEN_8)
    node GEN_18 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_valid, GEN_9)
    node GEN_19 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_addr_beat, GEN_10)
    node GEN_20 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_client_xact_id, GEN_11)
    node GEN_21 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_manager_xact_id, GEN_12)
    node GEN_22 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_is_builtin_type, GEN_13)
    node GEN_23 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_g_type, GEN_14)
    node GEN_24 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_data, GEN_15)
    node GEN_25 = mux(eq(UInt<3>("h2"), io_chosen), io_in_2_bits_client_id, GEN_16)
    node GEN_26 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_ready, GEN_17)
    node GEN_27 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_valid, GEN_18)
    node GEN_28 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_addr_beat, GEN_19)
    node GEN_29 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_client_xact_id, GEN_20)
    node GEN_30 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_manager_xact_id, GEN_21)
    node GEN_31 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_is_builtin_type, GEN_22)
    node GEN_32 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_g_type, GEN_23)
    node GEN_33 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_data, GEN_24)
    node GEN_34 = mux(eq(UInt<3>("h3"), io_chosen), io_in_3_bits_client_id, GEN_25)
    node GEN_35 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_ready, GEN_26)
    node GEN_36 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_valid, GEN_27)
    node GEN_37 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_addr_beat, GEN_28)
    node GEN_38 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_client_xact_id, GEN_29)
    node GEN_39 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_manager_xact_id, GEN_30)
    node GEN_40 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_is_builtin_type, GEN_31)
    node GEN_41 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_g_type, GEN_32)
    node GEN_42 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_data, GEN_33)
    node GEN_43 = mux(eq(UInt<3>("h4"), io_chosen), io_in_4_bits_client_id, GEN_34)
    node GEN_44 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_ready, GEN_35)
    node GEN_45 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_valid, GEN_36)
    node GEN_46 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_addr_beat, GEN_37)
    node GEN_47 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_client_xact_id, GEN_38)
    node GEN_48 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_manager_xact_id, GEN_39)
    node GEN_49 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_is_builtin_type, GEN_40)
    node GEN_50 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_g_type, GEN_41)
    node GEN_51 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_data, GEN_42)
    node GEN_52 = mux(eq(UInt<3>("h5"), io_chosen), io_in_5_bits_client_id, GEN_43)
    node GEN_53 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_ready, GEN_44)
    node GEN_54 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_valid, GEN_45)
    node GEN_55 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_addr_beat, GEN_46)
    node GEN_56 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_client_xact_id, GEN_47)
    node GEN_57 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_manager_xact_id, GEN_48)
    node GEN_58 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_is_builtin_type, GEN_49)
    node GEN_59 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_g_type, GEN_50)
    node GEN_60 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_data, GEN_51)
    node GEN_61 = mux(eq(UInt<3>("h6"), io_chosen), io_in_6_bits_client_id, GEN_52)
    node GEN_62 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_ready, GEN_53)
    node GEN_63 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_valid, GEN_54)
    node GEN_64 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_addr_beat, GEN_55)
    node GEN_65 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_client_xact_id, GEN_56)
    node GEN_66 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_manager_xact_id, GEN_57)
    node GEN_67 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_is_builtin_type, GEN_58)
    node GEN_68 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_g_type, GEN_59)
    node GEN_69 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_data, GEN_60)
    node GEN_70 = mux(eq(UInt<3>("h7"), io_chosen), io_in_7_bits_client_id, GEN_61)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_addr_beat : UInt<3>
    wire GEN_1_bits_client_xact_id : UInt<1>
    wire GEN_1_bits_manager_xact_id : UInt<4>
    wire GEN_1_bits_is_builtin_type : UInt<1>
    wire GEN_1_bits_g_type : UInt<4>
    wire GEN_1_bits_data : UInt<64>
    wire GEN_1_bits_client_id : UInt<1>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_addr_beat : UInt<3>
    wire GEN_2_bits_client_xact_id : UInt<1>
    wire GEN_2_bits_manager_xact_id : UInt<4>
    wire GEN_2_bits_is_builtin_type : UInt<1>
    wire GEN_2_bits_g_type : UInt<4>
    wire GEN_2_bits_data : UInt<64>
    wire GEN_2_bits_client_id : UInt<1>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_addr_beat : UInt<3>
    wire GEN_3_bits_client_xact_id : UInt<1>
    wire GEN_3_bits_manager_xact_id : UInt<4>
    wire GEN_3_bits_is_builtin_type : UInt<1>
    wire GEN_3_bits_g_type : UInt<4>
    wire GEN_3_bits_data : UInt<64>
    wire GEN_3_bits_client_id : UInt<1>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_addr_beat : UInt<3>
    wire GEN_4_bits_client_xact_id : UInt<1>
    wire GEN_4_bits_manager_xact_id : UInt<4>
    wire GEN_4_bits_is_builtin_type : UInt<1>
    wire GEN_4_bits_g_type : UInt<4>
    wire GEN_4_bits_data : UInt<64>
    wire GEN_4_bits_client_id : UInt<1>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_addr_beat : UInt<3>
    wire GEN_5_bits_client_xact_id : UInt<1>
    wire GEN_5_bits_manager_xact_id : UInt<4>
    wire GEN_5_bits_is_builtin_type : UInt<1>
    wire GEN_5_bits_g_type : UInt<4>
    wire GEN_5_bits_data : UInt<64>
    wire GEN_5_bits_client_id : UInt<1>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_addr_beat : UInt<3>
    wire GEN_6_bits_client_xact_id : UInt<1>
    wire GEN_6_bits_manager_xact_id : UInt<4>
    wire GEN_6_bits_is_builtin_type : UInt<1>
    wire GEN_6_bits_g_type : UInt<4>
    wire GEN_6_bits_data : UInt<64>
    wire GEN_6_bits_client_id : UInt<1>
    wire GEN_7_ready : UInt<1>
    wire GEN_7_valid : UInt<1>
    wire GEN_7_bits_addr_beat : UInt<3>
    wire GEN_7_bits_client_xact_id : UInt<1>
    wire GEN_7_bits_manager_xact_id : UInt<4>
    wire GEN_7_bits_is_builtin_type : UInt<1>
    wire GEN_7_bits_g_type : UInt<4>
    wire GEN_7_bits_data : UInt<64>
    wire GEN_7_bits_client_id : UInt<1>
    reg T_1462 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_1464 : UInt<3>, clk with :
      reset => (UInt<1>("h0"), T_1464)
    node T_1466 = neq(T_1462, UInt<3>("h0"))
    wire T_1474_0 : UInt<3>
    node GEN_0 = pad(UInt<3>("h5"), 4)
    node T_1476 = eq(io_out_bits_g_type, GEN_0)
    node T_1477 = eq(io_out_bits_g_type, UInt<4>("h0"))
    node T_1478 = mux(io_out_bits_is_builtin_type, T_1476, T_1477)
    node T_1480 = and(io_out_ready, io_out_valid)
    node T_1481 = and(T_1480, T_1478)
    node T_1485 = add(T_1462, UInt<3>("h1"))
    node T_1486 = tail(T_1485, 1)
    node GEN_71 = mux(T_1481, io_chosen, T_1464)
    node GEN_72 = mux(T_1481, T_1486, T_1462)
    node GEN_73 = mux(T_1466, T_1464, choice)
    reg lastGrant : UInt<3>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_74 = mux(T_1480, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<3>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<3>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<3>("h3"), lastGrant)
    node grantMask_4 = gt(UInt<3>("h4"), lastGrant)
    node grantMask_5 = gt(UInt<3>("h5"), lastGrant)
    node grantMask_6 = gt(UInt<3>("h6"), lastGrant)
    node grantMask_7 = gt(UInt<3>("h7"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node validMask_4 = and(io_in_4_valid, grantMask_4)
    node validMask_5 = and(io_in_5_valid, grantMask_5)
    node validMask_6 = and(io_in_6_valid, grantMask_6)
    node validMask_7 = and(io_in_7_valid, grantMask_7)
    node T_1498 = or(validMask_1, validMask_2)
    node T_1499 = or(T_1498, validMask_3)
    node T_1500 = or(T_1499, validMask_4)
    node T_1501 = or(T_1500, validMask_5)
    node T_1502 = or(T_1501, validMask_6)
    node T_1503 = or(T_1502, validMask_7)
    node T_1504 = or(T_1503, io_in_0_valid)
    node T_1505 = or(T_1504, io_in_1_valid)
    node T_1506 = or(T_1505, io_in_2_valid)
    node T_1507 = or(T_1506, io_in_3_valid)
    node T_1508 = or(T_1507, io_in_4_valid)
    node T_1509 = or(T_1508, io_in_5_valid)
    node T_1510 = or(T_1509, io_in_6_valid)
    node T_1514 = eq(validMask_1, UInt<1>("h0"))
    node T_1516 = eq(T_1498, UInt<1>("h0"))
    node T_1518 = eq(T_1499, UInt<1>("h0"))
    node T_1520 = eq(T_1500, UInt<1>("h0"))
    node T_1522 = eq(T_1501, UInt<1>("h0"))
    node T_1524 = eq(T_1502, UInt<1>("h0"))
    node T_1526 = eq(T_1503, UInt<1>("h0"))
    node T_1528 = eq(T_1504, UInt<1>("h0"))
    node T_1530 = eq(T_1505, UInt<1>("h0"))
    node T_1532 = eq(T_1506, UInt<1>("h0"))
    node T_1534 = eq(T_1507, UInt<1>("h0"))
    node T_1536 = eq(T_1508, UInt<1>("h0"))
    node T_1538 = eq(T_1509, UInt<1>("h0"))
    node T_1540 = eq(T_1510, UInt<1>("h0"))
    node T_1544 = or(grantMask_1, T_1528)
    node T_1545 = and(T_1514, grantMask_2)
    node T_1546 = or(T_1545, T_1530)
    node T_1547 = and(T_1516, grantMask_3)
    node T_1548 = or(T_1547, T_1532)
    node T_1549 = and(T_1518, grantMask_4)
    node T_1550 = or(T_1549, T_1534)
    node T_1551 = and(T_1520, grantMask_5)
    node T_1552 = or(T_1551, T_1536)
    node T_1553 = and(T_1522, grantMask_6)
    node T_1554 = or(T_1553, T_1538)
    node T_1555 = and(T_1524, grantMask_7)
    node T_1556 = or(T_1555, T_1540)
    node T_1558 = eq(T_1464, UInt<3>("h0"))
    node T_1559 = mux(T_1466, T_1558, T_1526)
    node T_1560 = and(T_1559, io_out_ready)
    node T_1562 = eq(T_1464, UInt<3>("h1"))
    node T_1563 = mux(T_1466, T_1562, T_1544)
    node T_1564 = and(T_1563, io_out_ready)
    node T_1566 = eq(T_1464, UInt<3>("h2"))
    node T_1567 = mux(T_1466, T_1566, T_1546)
    node T_1568 = and(T_1567, io_out_ready)
    node T_1570 = eq(T_1464, UInt<3>("h3"))
    node T_1571 = mux(T_1466, T_1570, T_1548)
    node T_1572 = and(T_1571, io_out_ready)
    node T_1574 = eq(T_1464, UInt<3>("h4"))
    node T_1575 = mux(T_1466, T_1574, T_1550)
    node T_1576 = and(T_1575, io_out_ready)
    node T_1578 = eq(T_1464, UInt<3>("h5"))
    node T_1579 = mux(T_1466, T_1578, T_1552)
    node T_1580 = and(T_1579, io_out_ready)
    node T_1582 = eq(T_1464, UInt<3>("h6"))
    node T_1583 = mux(T_1466, T_1582, T_1554)
    node T_1584 = and(T_1583, io_out_ready)
    node T_1586 = eq(T_1464, UInt<3>("h7"))
    node T_1587 = mux(T_1466, T_1586, T_1556)
    node T_1588 = and(T_1587, io_out_ready)
    node GEN_75 = mux(io_in_6_valid, UInt<3>("h6"), UInt<3>("h7"))
    node GEN_76 = mux(io_in_5_valid, UInt<3>("h5"), GEN_75)
    node GEN_77 = mux(io_in_4_valid, UInt<3>("h4"), GEN_76)
    node GEN_78 = mux(io_in_3_valid, UInt<3>("h3"), GEN_77)
    node GEN_79 = mux(io_in_2_valid, UInt<3>("h2"), GEN_78)
    node GEN_80 = mux(io_in_1_valid, UInt<3>("h1"), GEN_79)
    node GEN_81 = mux(io_in_0_valid, UInt<3>("h0"), GEN_80)
    node GEN_82 = mux(validMask_7, UInt<3>("h7"), GEN_81)
    node GEN_83 = mux(validMask_6, UInt<3>("h6"), GEN_82)
    node GEN_84 = mux(validMask_5, UInt<3>("h5"), GEN_83)
    node GEN_85 = mux(validMask_4, UInt<3>("h4"), GEN_84)
    node GEN_86 = mux(validMask_3, UInt<3>("h3"), GEN_85)
    node GEN_87 = mux(validMask_2, UInt<3>("h2"), GEN_86)
    node GEN_88 = mux(validMask_1, UInt<3>("h1"), GEN_87)
    io_in_0_ready <= T_1560
    io_in_1_ready <= T_1564
    io_in_2_ready <= T_1568
    io_in_3_ready <= T_1572
    io_in_4_ready <= T_1576
    io_in_5_ready <= T_1580
    io_in_6_ready <= T_1584
    io_in_7_ready <= T_1588
    io_out_valid <= GEN_0_valid
    io_out_bits_addr_beat <= GEN_1_bits_addr_beat
    io_out_bits_client_xact_id <= GEN_2_bits_client_xact_id
    io_out_bits_manager_xact_id <= GEN_3_bits_manager_xact_id
    io_out_bits_is_builtin_type <= GEN_4_bits_is_builtin_type
    io_out_bits_g_type <= GEN_5_bits_g_type
    io_out_bits_data <= GEN_6_bits_data
    io_out_bits_client_id <= GEN_7_bits_client_id
    io_chosen <= GEN_73
    choice <= GEN_88
    GEN_0_ready <= GEN_62
    GEN_0_valid <= GEN_63
    GEN_0_bits_addr_beat <= GEN_64
    GEN_0_bits_client_xact_id <= GEN_65
    GEN_0_bits_manager_xact_id <= GEN_66
    GEN_0_bits_is_builtin_type <= GEN_67
    GEN_0_bits_g_type <= GEN_68
    GEN_0_bits_data <= GEN_69
    GEN_0_bits_client_id <= GEN_70
    GEN_1_ready <= GEN_62
    GEN_1_valid <= GEN_63
    GEN_1_bits_addr_beat <= GEN_64
    GEN_1_bits_client_xact_id <= GEN_65
    GEN_1_bits_manager_xact_id <= GEN_66
    GEN_1_bits_is_builtin_type <= GEN_67
    GEN_1_bits_g_type <= GEN_68
    GEN_1_bits_data <= GEN_69
    GEN_1_bits_client_id <= GEN_70
    GEN_2_ready <= GEN_62
    GEN_2_valid <= GEN_63
    GEN_2_bits_addr_beat <= GEN_64
    GEN_2_bits_client_xact_id <= GEN_65
    GEN_2_bits_manager_xact_id <= GEN_66
    GEN_2_bits_is_builtin_type <= GEN_67
    GEN_2_bits_g_type <= GEN_68
    GEN_2_bits_data <= GEN_69
    GEN_2_bits_client_id <= GEN_70
    GEN_3_ready <= GEN_62
    GEN_3_valid <= GEN_63
    GEN_3_bits_addr_beat <= GEN_64
    GEN_3_bits_client_xact_id <= GEN_65
    GEN_3_bits_manager_xact_id <= GEN_66
    GEN_3_bits_is_builtin_type <= GEN_67
    GEN_3_bits_g_type <= GEN_68
    GEN_3_bits_data <= GEN_69
    GEN_3_bits_client_id <= GEN_70
    GEN_4_ready <= GEN_62
    GEN_4_valid <= GEN_63
    GEN_4_bits_addr_beat <= GEN_64
    GEN_4_bits_client_xact_id <= GEN_65
    GEN_4_bits_manager_xact_id <= GEN_66
    GEN_4_bits_is_builtin_type <= GEN_67
    GEN_4_bits_g_type <= GEN_68
    GEN_4_bits_data <= GEN_69
    GEN_4_bits_client_id <= GEN_70
    GEN_5_ready <= GEN_62
    GEN_5_valid <= GEN_63
    GEN_5_bits_addr_beat <= GEN_64
    GEN_5_bits_client_xact_id <= GEN_65
    GEN_5_bits_manager_xact_id <= GEN_66
    GEN_5_bits_is_builtin_type <= GEN_67
    GEN_5_bits_g_type <= GEN_68
    GEN_5_bits_data <= GEN_69
    GEN_5_bits_client_id <= GEN_70
    GEN_6_ready <= GEN_62
    GEN_6_valid <= GEN_63
    GEN_6_bits_addr_beat <= GEN_64
    GEN_6_bits_client_xact_id <= GEN_65
    GEN_6_bits_manager_xact_id <= GEN_66
    GEN_6_bits_is_builtin_type <= GEN_67
    GEN_6_bits_g_type <= GEN_68
    GEN_6_bits_data <= GEN_69
    GEN_6_bits_client_id <= GEN_70
    GEN_7_ready <= GEN_62
    GEN_7_valid <= GEN_63
    GEN_7_bits_addr_beat <= GEN_64
    GEN_7_bits_client_xact_id <= GEN_65
    GEN_7_bits_manager_xact_id <= GEN_66
    GEN_7_bits_is_builtin_type <= GEN_67
    GEN_7_bits_g_type <= GEN_68
    GEN_7_bits_data <= GEN_69
    GEN_7_bits_client_id <= GEN_70
    T_1462 <= GEN_72
    T_1464 <= GEN_71
    lastGrant <= GEN_74

  module L2BroadcastHub :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
  
    inst trackerList_0 of BufferedBroadcastVoluntaryReleaseTracker
    inst trackerList_1 of BufferedBroadcastAcquireTracker
    inst trackerList_2 of BufferedBroadcastAcquireTracker_1
    inst trackerList_3 of BufferedBroadcastAcquireTracker_2
    inst trackerList_4 of BufferedBroadcastAcquireTracker_3
    inst trackerList_5 of BufferedBroadcastAcquireTracker_4
    inst trackerList_6 of BufferedBroadcastAcquireTracker_5
    inst trackerList_7 of BufferedBroadcastAcquireTracker_6
    inst outer_arb of ClientTileLinkIOArbiter
    node T_1215 = and(io_inner_acquire_valid, io_inner_release_valid)
    node T_1216 = eq(io_inner_release_bits_addr_block, io_inner_acquire_bits_addr_block)
    node irel_vs_iacq_conflict = and(T_1215, T_1216)
    node T_1218 = eq(irel_vs_iacq_conflict, UInt<1>("h0"))
    node T_1219 = cat(trackerList_1.io_inner_acquire_ready, trackerList_0.io_inner_acquire_ready)
    node T_1220 = cat(trackerList_3.io_inner_acquire_ready, trackerList_2.io_inner_acquire_ready)
    node T_1221 = cat(T_1220, T_1219)
    node T_1222 = cat(trackerList_5.io_inner_acquire_ready, trackerList_4.io_inner_acquire_ready)
    node T_1223 = cat(trackerList_7.io_inner_acquire_ready, trackerList_6.io_inner_acquire_ready)
    node T_1224 = cat(T_1223, T_1222)
    node T_1225 = cat(T_1224, T_1221)
    node T_1226 = cat(trackerList_1.io_alloc_iacq_can, trackerList_0.io_alloc_iacq_can)
    node T_1227 = cat(trackerList_3.io_alloc_iacq_can, trackerList_2.io_alloc_iacq_can)
    node T_1228 = cat(T_1227, T_1226)
    node T_1229 = cat(trackerList_5.io_alloc_iacq_can, trackerList_4.io_alloc_iacq_can)
    node T_1230 = cat(trackerList_7.io_alloc_iacq_can, trackerList_6.io_alloc_iacq_can)
    node T_1231 = cat(T_1230, T_1229)
    node T_1232 = cat(T_1231, T_1228)
    node T_1233 = bits(T_1232, 0, 0)
    node T_1234 = bits(T_1232, 1, 1)
    node T_1235 = bits(T_1232, 2, 2)
    node T_1236 = bits(T_1232, 3, 3)
    node T_1237 = bits(T_1232, 4, 4)
    node T_1238 = bits(T_1232, 5, 5)
    node T_1239 = bits(T_1232, 6, 6)
    node T_1240 = bits(T_1232, 7, 7)
    node T_1251 = mux(T_1240, UInt<8>("h80"), UInt<8>("h0"))
    node T_1252 = mux(T_1239, UInt<8>("h40"), T_1251)
    node T_1253 = mux(T_1238, UInt<8>("h20"), T_1252)
    node T_1254 = mux(T_1237, UInt<8>("h10"), T_1253)
    node T_1255 = mux(T_1236, UInt<8>("h8"), T_1254)
    node T_1256 = mux(T_1235, UInt<8>("h4"), T_1255)
    node T_1257 = mux(T_1234, UInt<8>("h2"), T_1256)
    node T_1258 = mux(T_1233, UInt<8>("h1"), T_1257)
    node T_1259 = cat(trackerList_1.io_alloc_iacq_matches, trackerList_0.io_alloc_iacq_matches)
    node T_1260 = cat(trackerList_3.io_alloc_iacq_matches, trackerList_2.io_alloc_iacq_matches)
    node T_1261 = cat(T_1260, T_1259)
    node T_1262 = cat(trackerList_5.io_alloc_iacq_matches, trackerList_4.io_alloc_iacq_matches)
    node T_1263 = cat(trackerList_7.io_alloc_iacq_matches, trackerList_6.io_alloc_iacq_matches)
    node T_1264 = cat(T_1263, T_1262)
    node T_1265 = cat(T_1264, T_1261)
    node T_1267 = neq(T_1265, UInt<8>("h0"))
    node T_1269 = eq(T_1267, UInt<1>("h0"))
    node T_1271 = mux(T_1269, T_1232, T_1265)
    node T_1272 = and(T_1271, T_1225)
    node T_1274 = neq(T_1272, UInt<8>("h0"))
    node T_1275 = and(T_1274, T_1218)
    node T_1278 = and(io_inner_acquire_valid, T_1218)
    node T_1279 = bits(T_1258, 0, 0)
    node T_1280 = and(T_1279, T_1269)
    node T_1281 = and(T_1280, T_1218)
    node T_1284 = bits(T_1258, 1, 1)
    node T_1285 = and(T_1284, T_1269)
    node T_1286 = and(T_1285, T_1218)
    node T_1289 = bits(T_1258, 2, 2)
    node T_1290 = and(T_1289, T_1269)
    node T_1291 = and(T_1290, T_1218)
    node T_1294 = bits(T_1258, 3, 3)
    node T_1295 = and(T_1294, T_1269)
    node T_1296 = and(T_1295, T_1218)
    node T_1299 = bits(T_1258, 4, 4)
    node T_1300 = and(T_1299, T_1269)
    node T_1301 = and(T_1300, T_1218)
    node T_1304 = bits(T_1258, 5, 5)
    node T_1305 = and(T_1304, T_1269)
    node T_1306 = and(T_1305, T_1218)
    node T_1309 = bits(T_1258, 6, 6)
    node T_1310 = and(T_1309, T_1269)
    node T_1311 = and(T_1310, T_1218)
    node T_1314 = bits(T_1258, 7, 7)
    node T_1315 = and(T_1314, T_1269)
    node T_1316 = and(T_1315, T_1218)
    node T_1317 = cat(trackerList_1.io_inner_release_ready, trackerList_0.io_inner_release_ready)
    node T_1318 = cat(trackerList_3.io_inner_release_ready, trackerList_2.io_inner_release_ready)
    node T_1319 = cat(T_1318, T_1317)
    node T_1320 = cat(trackerList_5.io_inner_release_ready, trackerList_4.io_inner_release_ready)
    node T_1321 = cat(trackerList_7.io_inner_release_ready, trackerList_6.io_inner_release_ready)
    node T_1322 = cat(T_1321, T_1320)
    node T_1323 = cat(T_1322, T_1319)
    node T_1324 = cat(trackerList_1.io_alloc_irel_can, trackerList_0.io_alloc_irel_can)
    node T_1325 = cat(trackerList_3.io_alloc_irel_can, trackerList_2.io_alloc_irel_can)
    node T_1326 = cat(T_1325, T_1324)
    node T_1327 = cat(trackerList_5.io_alloc_irel_can, trackerList_4.io_alloc_irel_can)
    node T_1328 = cat(trackerList_7.io_alloc_irel_can, trackerList_6.io_alloc_irel_can)
    node T_1329 = cat(T_1328, T_1327)
    node T_1330 = cat(T_1329, T_1326)
    node T_1331 = bits(T_1330, 0, 0)
    node T_1332 = bits(T_1330, 1, 1)
    node T_1333 = bits(T_1330, 2, 2)
    node T_1334 = bits(T_1330, 3, 3)
    node T_1335 = bits(T_1330, 4, 4)
    node T_1336 = bits(T_1330, 5, 5)
    node T_1337 = bits(T_1330, 6, 6)
    node T_1338 = bits(T_1330, 7, 7)
    node T_1349 = mux(T_1338, UInt<8>("h80"), UInt<8>("h0"))
    node T_1350 = mux(T_1337, UInt<8>("h40"), T_1349)
    node T_1351 = mux(T_1336, UInt<8>("h20"), T_1350)
    node T_1352 = mux(T_1335, UInt<8>("h10"), T_1351)
    node T_1353 = mux(T_1334, UInt<8>("h8"), T_1352)
    node T_1354 = mux(T_1333, UInt<8>("h4"), T_1353)
    node T_1355 = mux(T_1332, UInt<8>("h2"), T_1354)
    node T_1356 = mux(T_1331, UInt<8>("h1"), T_1355)
    node T_1357 = cat(trackerList_1.io_alloc_irel_matches, trackerList_0.io_alloc_irel_matches)
    node T_1358 = cat(trackerList_3.io_alloc_irel_matches, trackerList_2.io_alloc_irel_matches)
    node T_1359 = cat(T_1358, T_1357)
    node T_1360 = cat(trackerList_5.io_alloc_irel_matches, trackerList_4.io_alloc_irel_matches)
    node T_1361 = cat(trackerList_7.io_alloc_irel_matches, trackerList_6.io_alloc_irel_matches)
    node T_1362 = cat(T_1361, T_1360)
    node T_1363 = cat(T_1362, T_1359)
    node T_1365 = neq(T_1363, UInt<8>("h0"))
    node T_1367 = eq(T_1365, UInt<1>("h0"))
    node T_1370 = mux(T_1367, T_1330, T_1363)
    node T_1371 = and(T_1370, T_1323)
    node T_1373 = neq(T_1371, UInt<8>("h0"))
    node T_1378 = bits(T_1356, 0, 0)
    node T_1379 = and(T_1378, T_1367)
    node T_1383 = bits(T_1356, 1, 1)
    node T_1384 = and(T_1383, T_1367)
    node T_1388 = bits(T_1356, 2, 2)
    node T_1389 = and(T_1388, T_1367)
    node T_1393 = bits(T_1356, 3, 3)
    node T_1394 = and(T_1393, T_1367)
    node T_1398 = bits(T_1356, 4, 4)
    node T_1399 = and(T_1398, T_1367)
    node T_1403 = bits(T_1356, 5, 5)
    node T_1404 = and(T_1403, T_1367)
    node T_1408 = bits(T_1356, 6, 6)
    node T_1409 = and(T_1408, T_1367)
    node T_1413 = bits(T_1356, 7, 7)
    node T_1414 = and(T_1413, T_1367)
    inst LockingRRArbiter_7_1 of LockingRRArbiter_7
    inst LockingRRArbiter_8_1 of LockingRRArbiter_8
    node T_1417 = eq(io_inner_finish_bits_manager_xact_id, UInt<4>("h0"))
    node T_1418 = and(io_inner_finish_valid, T_1417)
    node T_1420 = eq(io_inner_finish_bits_manager_xact_id, UInt<4>("h1"))
    node T_1421 = and(io_inner_finish_valid, T_1420)
    node T_1423 = eq(io_inner_finish_bits_manager_xact_id, UInt<4>("h2"))
    node T_1424 = and(io_inner_finish_valid, T_1423)
    node T_1426 = eq(io_inner_finish_bits_manager_xact_id, UInt<4>("h3"))
    node T_1427 = and(io_inner_finish_valid, T_1426)
    node T_1429 = eq(io_inner_finish_bits_manager_xact_id, UInt<4>("h4"))
    node T_1430 = and(io_inner_finish_valid, T_1429)
    node T_1432 = eq(io_inner_finish_bits_manager_xact_id, UInt<4>("h5"))
    node T_1433 = and(io_inner_finish_valid, T_1432)
    node T_1435 = eq(io_inner_finish_bits_manager_xact_id, UInt<4>("h6"))
    node T_1436 = and(io_inner_finish_valid, T_1435)
    node T_1438 = eq(io_inner_finish_bits_manager_xact_id, UInt<4>("h7"))
    node T_1439 = and(io_inner_finish_valid, T_1438)
    node T_1441 = and(io_inner_finish_bits_manager_xact_id, UInt<4>("h3"))
    node T_1443 = geq(io_inner_finish_bits_manager_xact_id, UInt<4>("h4"))
    node T_1445 = and(T_1441, UInt<4>("h1"))
    node T_1447 = geq(T_1441, UInt<4>("h2"))
    node T_1451 = geq(T_1445, UInt<4>("h1"))
    node T_1452 = mux(T_1451, trackerList_7.io_inner_finish_ready, trackerList_6.io_inner_finish_ready)
    node T_1457 = mux(T_1451, trackerList_5.io_inner_finish_ready, trackerList_4.io_inner_finish_ready)
    node T_1458 = mux(T_1447, T_1452, T_1457)
    node T_1467 = mux(T_1451, trackerList_3.io_inner_finish_ready, trackerList_2.io_inner_finish_ready)
    node T_1472 = mux(T_1451, trackerList_1.io_inner_finish_ready, trackerList_0.io_inner_finish_ready)
    node T_1473 = mux(T_1447, T_1467, T_1472)
    node T_1474 = mux(T_1443, T_1458, T_1473)
    node T_1478 = eq(io_outer_probe_valid, UInt<1>("h0"))
    node T_1479 = or(T_1478, reset)
    node T_1481 = eq(T_1479, UInt<1>("h0"))
    io_inner_acquire_ready <= T_1275
    io_inner_grant_valid <= LockingRRArbiter_8_1.io_out_valid
    io_inner_grant_bits_addr_beat <= LockingRRArbiter_8_1.io_out_bits_addr_beat
    io_inner_grant_bits_client_xact_id <= LockingRRArbiter_8_1.io_out_bits_client_xact_id
    io_inner_grant_bits_manager_xact_id <= LockingRRArbiter_8_1.io_out_bits_manager_xact_id
    io_inner_grant_bits_is_builtin_type <= LockingRRArbiter_8_1.io_out_bits_is_builtin_type
    io_inner_grant_bits_g_type <= LockingRRArbiter_8_1.io_out_bits_g_type
    io_inner_grant_bits_data <= LockingRRArbiter_8_1.io_out_bits_data
    io_inner_grant_bits_client_id <= LockingRRArbiter_8_1.io_out_bits_client_id
    io_inner_finish_ready <= T_1474
    io_inner_probe_valid <= LockingRRArbiter_7_1.io_out_valid
    io_inner_probe_bits_addr_block <= LockingRRArbiter_7_1.io_out_bits_addr_block
    io_inner_probe_bits_p_type <= LockingRRArbiter_7_1.io_out_bits_p_type
    io_inner_probe_bits_client_id <= LockingRRArbiter_7_1.io_out_bits_client_id
    io_inner_release_ready <= T_1373
    io_outer_acquire_valid <= outer_arb.io_out_acquire_valid
    io_outer_acquire_bits_addr_block <= outer_arb.io_out_acquire_bits_addr_block
    io_outer_acquire_bits_client_xact_id <= outer_arb.io_out_acquire_bits_client_xact_id
    io_outer_acquire_bits_addr_beat <= outer_arb.io_out_acquire_bits_addr_beat
    io_outer_acquire_bits_is_builtin_type <= outer_arb.io_out_acquire_bits_is_builtin_type
    io_outer_acquire_bits_a_type <= outer_arb.io_out_acquire_bits_a_type
    io_outer_acquire_bits_union <= outer_arb.io_out_acquire_bits_union
    io_outer_acquire_bits_data <= outer_arb.io_out_acquire_bits_data
    io_outer_probe_ready <= UInt<1>("h0")
    io_outer_release_valid <= outer_arb.io_out_release_valid
    io_outer_release_bits_addr_beat <= outer_arb.io_out_release_bits_addr_beat
    io_outer_release_bits_addr_block <= outer_arb.io_out_release_bits_addr_block
    io_outer_release_bits_client_xact_id <= outer_arb.io_out_release_bits_client_xact_id
    io_outer_release_bits_voluntary <= outer_arb.io_out_release_bits_voluntary
    io_outer_release_bits_r_type <= outer_arb.io_out_release_bits_r_type
    io_outer_release_bits_data <= outer_arb.io_out_release_bits_data
    io_outer_grant_ready <= outer_arb.io_out_grant_ready
    io_outer_finish_valid <= UInt<1>("h0")
    io_outer_finish_bits_manager_xact_id <= outer_arb.io_out_finish_bits_manager_xact_id
    io_outer_finish_bits_manager_id <= outer_arb.io_out_finish_bits_manager_id
    trackerList_0.io_inner_acquire_valid <= T_1278
    trackerList_0.io_inner_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    trackerList_0.io_inner_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    trackerList_0.io_inner_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    trackerList_0.io_inner_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    trackerList_0.io_inner_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    trackerList_0.io_inner_acquire_bits_union <= io_inner_acquire_bits_union
    trackerList_0.io_inner_acquire_bits_data <= io_inner_acquire_bits_data
    trackerList_0.io_inner_acquire_bits_client_id <= io_inner_acquire_bits_client_id
    trackerList_0.io_inner_grant_ready <= LockingRRArbiter_8_1.io_in_0_ready
    trackerList_0.io_inner_finish_valid <= T_1418
    trackerList_0.io_inner_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    trackerList_0.io_inner_probe_ready <= LockingRRArbiter_7_1.io_in_0_ready
    trackerList_0.io_inner_release_valid <= io_inner_release_valid
    trackerList_0.io_inner_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    trackerList_0.io_inner_release_bits_addr_block <= io_inner_release_bits_addr_block
    trackerList_0.io_inner_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    trackerList_0.io_inner_release_bits_voluntary <= io_inner_release_bits_voluntary
    trackerList_0.io_inner_release_bits_r_type <= io_inner_release_bits_r_type
    trackerList_0.io_inner_release_bits_data <= io_inner_release_bits_data
    trackerList_0.io_inner_release_bits_client_id <= io_inner_release_bits_client_id
    trackerList_0.io_incoherent_0 <= io_incoherent_0
    trackerList_0.io_outer_acquire_ready <= outer_arb.io_in_0_acquire_ready
    trackerList_0.io_outer_probe_valid <= outer_arb.io_in_0_probe_valid
    trackerList_0.io_outer_probe_bits_addr_block <= outer_arb.io_in_0_probe_bits_addr_block
    trackerList_0.io_outer_probe_bits_p_type <= outer_arb.io_in_0_probe_bits_p_type
    trackerList_0.io_outer_release_ready <= outer_arb.io_in_0_release_ready
    trackerList_0.io_outer_grant_valid <= outer_arb.io_in_0_grant_valid
    trackerList_0.io_outer_grant_bits_addr_beat <= outer_arb.io_in_0_grant_bits_addr_beat
    trackerList_0.io_outer_grant_bits_client_xact_id <= outer_arb.io_in_0_grant_bits_client_xact_id
    trackerList_0.io_outer_grant_bits_manager_xact_id <= outer_arb.io_in_0_grant_bits_manager_xact_id
    trackerList_0.io_outer_grant_bits_is_builtin_type <= outer_arb.io_in_0_grant_bits_is_builtin_type
    trackerList_0.io_outer_grant_bits_g_type <= outer_arb.io_in_0_grant_bits_g_type
    trackerList_0.io_outer_grant_bits_data <= outer_arb.io_in_0_grant_bits_data
    trackerList_0.io_outer_grant_bits_manager_id <= outer_arb.io_in_0_grant_bits_manager_id
    trackerList_0.io_outer_finish_ready <= outer_arb.io_in_0_finish_ready
    trackerList_0.io_alloc_iacq_should <= T_1281
    trackerList_0.io_alloc_irel_should <= T_1379
    trackerList_0.io_alloc_oprb_should <= UInt<1>("h1")
    trackerList_1.io_inner_acquire_valid <= T_1278
    trackerList_1.io_inner_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    trackerList_1.io_inner_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    trackerList_1.io_inner_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    trackerList_1.io_inner_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    trackerList_1.io_inner_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    trackerList_1.io_inner_acquire_bits_union <= io_inner_acquire_bits_union
    trackerList_1.io_inner_acquire_bits_data <= io_inner_acquire_bits_data
    trackerList_1.io_inner_acquire_bits_client_id <= io_inner_acquire_bits_client_id
    trackerList_1.io_inner_grant_ready <= LockingRRArbiter_8_1.io_in_1_ready
    trackerList_1.io_inner_finish_valid <= T_1421
    trackerList_1.io_inner_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    trackerList_1.io_inner_probe_ready <= LockingRRArbiter_7_1.io_in_1_ready
    trackerList_1.io_inner_release_valid <= io_inner_release_valid
    trackerList_1.io_inner_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    trackerList_1.io_inner_release_bits_addr_block <= io_inner_release_bits_addr_block
    trackerList_1.io_inner_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    trackerList_1.io_inner_release_bits_voluntary <= io_inner_release_bits_voluntary
    trackerList_1.io_inner_release_bits_r_type <= io_inner_release_bits_r_type
    trackerList_1.io_inner_release_bits_data <= io_inner_release_bits_data
    trackerList_1.io_inner_release_bits_client_id <= io_inner_release_bits_client_id
    trackerList_1.io_incoherent_0 <= io_incoherent_0
    trackerList_1.io_outer_acquire_ready <= outer_arb.io_in_1_acquire_ready
    trackerList_1.io_outer_probe_valid <= outer_arb.io_in_1_probe_valid
    trackerList_1.io_outer_probe_bits_addr_block <= outer_arb.io_in_1_probe_bits_addr_block
    trackerList_1.io_outer_probe_bits_p_type <= outer_arb.io_in_1_probe_bits_p_type
    trackerList_1.io_outer_release_ready <= outer_arb.io_in_1_release_ready
    trackerList_1.io_outer_grant_valid <= outer_arb.io_in_1_grant_valid
    trackerList_1.io_outer_grant_bits_addr_beat <= outer_arb.io_in_1_grant_bits_addr_beat
    trackerList_1.io_outer_grant_bits_client_xact_id <= outer_arb.io_in_1_grant_bits_client_xact_id
    trackerList_1.io_outer_grant_bits_manager_xact_id <= outer_arb.io_in_1_grant_bits_manager_xact_id
    trackerList_1.io_outer_grant_bits_is_builtin_type <= outer_arb.io_in_1_grant_bits_is_builtin_type
    trackerList_1.io_outer_grant_bits_g_type <= outer_arb.io_in_1_grant_bits_g_type
    trackerList_1.io_outer_grant_bits_data <= outer_arb.io_in_1_grant_bits_data
    trackerList_1.io_outer_grant_bits_manager_id <= outer_arb.io_in_1_grant_bits_manager_id
    trackerList_1.io_outer_finish_ready <= outer_arb.io_in_1_finish_ready
    trackerList_1.io_alloc_iacq_should <= T_1286
    trackerList_1.io_alloc_irel_should <= T_1384
    trackerList_1.io_alloc_oprb_should <= UInt<1>("h0")
    trackerList_2.io_inner_acquire_valid <= T_1278
    trackerList_2.io_inner_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    trackerList_2.io_inner_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    trackerList_2.io_inner_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    trackerList_2.io_inner_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    trackerList_2.io_inner_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    trackerList_2.io_inner_acquire_bits_union <= io_inner_acquire_bits_union
    trackerList_2.io_inner_acquire_bits_data <= io_inner_acquire_bits_data
    trackerList_2.io_inner_acquire_bits_client_id <= io_inner_acquire_bits_client_id
    trackerList_2.io_inner_grant_ready <= LockingRRArbiter_8_1.io_in_2_ready
    trackerList_2.io_inner_finish_valid <= T_1424
    trackerList_2.io_inner_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    trackerList_2.io_inner_probe_ready <= LockingRRArbiter_7_1.io_in_2_ready
    trackerList_2.io_inner_release_valid <= io_inner_release_valid
    trackerList_2.io_inner_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    trackerList_2.io_inner_release_bits_addr_block <= io_inner_release_bits_addr_block
    trackerList_2.io_inner_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    trackerList_2.io_inner_release_bits_voluntary <= io_inner_release_bits_voluntary
    trackerList_2.io_inner_release_bits_r_type <= io_inner_release_bits_r_type
    trackerList_2.io_inner_release_bits_data <= io_inner_release_bits_data
    trackerList_2.io_inner_release_bits_client_id <= io_inner_release_bits_client_id
    trackerList_2.io_incoherent_0 <= io_incoherent_0
    trackerList_2.io_outer_acquire_ready <= outer_arb.io_in_2_acquire_ready
    trackerList_2.io_outer_probe_valid <= outer_arb.io_in_2_probe_valid
    trackerList_2.io_outer_probe_bits_addr_block <= outer_arb.io_in_2_probe_bits_addr_block
    trackerList_2.io_outer_probe_bits_p_type <= outer_arb.io_in_2_probe_bits_p_type
    trackerList_2.io_outer_release_ready <= outer_arb.io_in_2_release_ready
    trackerList_2.io_outer_grant_valid <= outer_arb.io_in_2_grant_valid
    trackerList_2.io_outer_grant_bits_addr_beat <= outer_arb.io_in_2_grant_bits_addr_beat
    trackerList_2.io_outer_grant_bits_client_xact_id <= outer_arb.io_in_2_grant_bits_client_xact_id
    trackerList_2.io_outer_grant_bits_manager_xact_id <= outer_arb.io_in_2_grant_bits_manager_xact_id
    trackerList_2.io_outer_grant_bits_is_builtin_type <= outer_arb.io_in_2_grant_bits_is_builtin_type
    trackerList_2.io_outer_grant_bits_g_type <= outer_arb.io_in_2_grant_bits_g_type
    trackerList_2.io_outer_grant_bits_data <= outer_arb.io_in_2_grant_bits_data
    trackerList_2.io_outer_grant_bits_manager_id <= outer_arb.io_in_2_grant_bits_manager_id
    trackerList_2.io_outer_finish_ready <= outer_arb.io_in_2_finish_ready
    trackerList_2.io_alloc_iacq_should <= T_1291
    trackerList_2.io_alloc_irel_should <= T_1389
    trackerList_2.io_alloc_oprb_should <= UInt<1>("h0")
    trackerList_3.io_inner_acquire_valid <= T_1278
    trackerList_3.io_inner_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    trackerList_3.io_inner_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    trackerList_3.io_inner_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    trackerList_3.io_inner_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    trackerList_3.io_inner_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    trackerList_3.io_inner_acquire_bits_union <= io_inner_acquire_bits_union
    trackerList_3.io_inner_acquire_bits_data <= io_inner_acquire_bits_data
    trackerList_3.io_inner_acquire_bits_client_id <= io_inner_acquire_bits_client_id
    trackerList_3.io_inner_grant_ready <= LockingRRArbiter_8_1.io_in_3_ready
    trackerList_3.io_inner_finish_valid <= T_1427
    trackerList_3.io_inner_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    trackerList_3.io_inner_probe_ready <= LockingRRArbiter_7_1.io_in_3_ready
    trackerList_3.io_inner_release_valid <= io_inner_release_valid
    trackerList_3.io_inner_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    trackerList_3.io_inner_release_bits_addr_block <= io_inner_release_bits_addr_block
    trackerList_3.io_inner_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    trackerList_3.io_inner_release_bits_voluntary <= io_inner_release_bits_voluntary
    trackerList_3.io_inner_release_bits_r_type <= io_inner_release_bits_r_type
    trackerList_3.io_inner_release_bits_data <= io_inner_release_bits_data
    trackerList_3.io_inner_release_bits_client_id <= io_inner_release_bits_client_id
    trackerList_3.io_incoherent_0 <= io_incoherent_0
    trackerList_3.io_outer_acquire_ready <= outer_arb.io_in_3_acquire_ready
    trackerList_3.io_outer_probe_valid <= outer_arb.io_in_3_probe_valid
    trackerList_3.io_outer_probe_bits_addr_block <= outer_arb.io_in_3_probe_bits_addr_block
    trackerList_3.io_outer_probe_bits_p_type <= outer_arb.io_in_3_probe_bits_p_type
    trackerList_3.io_outer_release_ready <= outer_arb.io_in_3_release_ready
    trackerList_3.io_outer_grant_valid <= outer_arb.io_in_3_grant_valid
    trackerList_3.io_outer_grant_bits_addr_beat <= outer_arb.io_in_3_grant_bits_addr_beat
    trackerList_3.io_outer_grant_bits_client_xact_id <= outer_arb.io_in_3_grant_bits_client_xact_id
    trackerList_3.io_outer_grant_bits_manager_xact_id <= outer_arb.io_in_3_grant_bits_manager_xact_id
    trackerList_3.io_outer_grant_bits_is_builtin_type <= outer_arb.io_in_3_grant_bits_is_builtin_type
    trackerList_3.io_outer_grant_bits_g_type <= outer_arb.io_in_3_grant_bits_g_type
    trackerList_3.io_outer_grant_bits_data <= outer_arb.io_in_3_grant_bits_data
    trackerList_3.io_outer_grant_bits_manager_id <= outer_arb.io_in_3_grant_bits_manager_id
    trackerList_3.io_outer_finish_ready <= outer_arb.io_in_3_finish_ready
    trackerList_3.io_alloc_iacq_should <= T_1296
    trackerList_3.io_alloc_irel_should <= T_1394
    trackerList_3.io_alloc_oprb_should <= UInt<1>("h0")
    trackerList_4.io_inner_acquire_valid <= T_1278
    trackerList_4.io_inner_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    trackerList_4.io_inner_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    trackerList_4.io_inner_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    trackerList_4.io_inner_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    trackerList_4.io_inner_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    trackerList_4.io_inner_acquire_bits_union <= io_inner_acquire_bits_union
    trackerList_4.io_inner_acquire_bits_data <= io_inner_acquire_bits_data
    trackerList_4.io_inner_acquire_bits_client_id <= io_inner_acquire_bits_client_id
    trackerList_4.io_inner_grant_ready <= LockingRRArbiter_8_1.io_in_4_ready
    trackerList_4.io_inner_finish_valid <= T_1430
    trackerList_4.io_inner_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    trackerList_4.io_inner_probe_ready <= LockingRRArbiter_7_1.io_in_4_ready
    trackerList_4.io_inner_release_valid <= io_inner_release_valid
    trackerList_4.io_inner_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    trackerList_4.io_inner_release_bits_addr_block <= io_inner_release_bits_addr_block
    trackerList_4.io_inner_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    trackerList_4.io_inner_release_bits_voluntary <= io_inner_release_bits_voluntary
    trackerList_4.io_inner_release_bits_r_type <= io_inner_release_bits_r_type
    trackerList_4.io_inner_release_bits_data <= io_inner_release_bits_data
    trackerList_4.io_inner_release_bits_client_id <= io_inner_release_bits_client_id
    trackerList_4.io_incoherent_0 <= io_incoherent_0
    trackerList_4.io_outer_acquire_ready <= outer_arb.io_in_4_acquire_ready
    trackerList_4.io_outer_probe_valid <= outer_arb.io_in_4_probe_valid
    trackerList_4.io_outer_probe_bits_addr_block <= outer_arb.io_in_4_probe_bits_addr_block
    trackerList_4.io_outer_probe_bits_p_type <= outer_arb.io_in_4_probe_bits_p_type
    trackerList_4.io_outer_release_ready <= outer_arb.io_in_4_release_ready
    trackerList_4.io_outer_grant_valid <= outer_arb.io_in_4_grant_valid
    trackerList_4.io_outer_grant_bits_addr_beat <= outer_arb.io_in_4_grant_bits_addr_beat
    trackerList_4.io_outer_grant_bits_client_xact_id <= outer_arb.io_in_4_grant_bits_client_xact_id
    trackerList_4.io_outer_grant_bits_manager_xact_id <= outer_arb.io_in_4_grant_bits_manager_xact_id
    trackerList_4.io_outer_grant_bits_is_builtin_type <= outer_arb.io_in_4_grant_bits_is_builtin_type
    trackerList_4.io_outer_grant_bits_g_type <= outer_arb.io_in_4_grant_bits_g_type
    trackerList_4.io_outer_grant_bits_data <= outer_arb.io_in_4_grant_bits_data
    trackerList_4.io_outer_grant_bits_manager_id <= outer_arb.io_in_4_grant_bits_manager_id
    trackerList_4.io_outer_finish_ready <= outer_arb.io_in_4_finish_ready
    trackerList_4.io_alloc_iacq_should <= T_1301
    trackerList_4.io_alloc_irel_should <= T_1399
    trackerList_4.io_alloc_oprb_should <= UInt<1>("h0")
    trackerList_5.io_inner_acquire_valid <= T_1278
    trackerList_5.io_inner_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    trackerList_5.io_inner_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    trackerList_5.io_inner_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    trackerList_5.io_inner_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    trackerList_5.io_inner_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    trackerList_5.io_inner_acquire_bits_union <= io_inner_acquire_bits_union
    trackerList_5.io_inner_acquire_bits_data <= io_inner_acquire_bits_data
    trackerList_5.io_inner_acquire_bits_client_id <= io_inner_acquire_bits_client_id
    trackerList_5.io_inner_grant_ready <= LockingRRArbiter_8_1.io_in_5_ready
    trackerList_5.io_inner_finish_valid <= T_1433
    trackerList_5.io_inner_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    trackerList_5.io_inner_probe_ready <= LockingRRArbiter_7_1.io_in_5_ready
    trackerList_5.io_inner_release_valid <= io_inner_release_valid
    trackerList_5.io_inner_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    trackerList_5.io_inner_release_bits_addr_block <= io_inner_release_bits_addr_block
    trackerList_5.io_inner_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    trackerList_5.io_inner_release_bits_voluntary <= io_inner_release_bits_voluntary
    trackerList_5.io_inner_release_bits_r_type <= io_inner_release_bits_r_type
    trackerList_5.io_inner_release_bits_data <= io_inner_release_bits_data
    trackerList_5.io_inner_release_bits_client_id <= io_inner_release_bits_client_id
    trackerList_5.io_incoherent_0 <= io_incoherent_0
    trackerList_5.io_outer_acquire_ready <= outer_arb.io_in_5_acquire_ready
    trackerList_5.io_outer_probe_valid <= outer_arb.io_in_5_probe_valid
    trackerList_5.io_outer_probe_bits_addr_block <= outer_arb.io_in_5_probe_bits_addr_block
    trackerList_5.io_outer_probe_bits_p_type <= outer_arb.io_in_5_probe_bits_p_type
    trackerList_5.io_outer_release_ready <= outer_arb.io_in_5_release_ready
    trackerList_5.io_outer_grant_valid <= outer_arb.io_in_5_grant_valid
    trackerList_5.io_outer_grant_bits_addr_beat <= outer_arb.io_in_5_grant_bits_addr_beat
    trackerList_5.io_outer_grant_bits_client_xact_id <= outer_arb.io_in_5_grant_bits_client_xact_id
    trackerList_5.io_outer_grant_bits_manager_xact_id <= outer_arb.io_in_5_grant_bits_manager_xact_id
    trackerList_5.io_outer_grant_bits_is_builtin_type <= outer_arb.io_in_5_grant_bits_is_builtin_type
    trackerList_5.io_outer_grant_bits_g_type <= outer_arb.io_in_5_grant_bits_g_type
    trackerList_5.io_outer_grant_bits_data <= outer_arb.io_in_5_grant_bits_data
    trackerList_5.io_outer_grant_bits_manager_id <= outer_arb.io_in_5_grant_bits_manager_id
    trackerList_5.io_outer_finish_ready <= outer_arb.io_in_5_finish_ready
    trackerList_5.io_alloc_iacq_should <= T_1306
    trackerList_5.io_alloc_irel_should <= T_1404
    trackerList_5.io_alloc_oprb_should <= UInt<1>("h0")
    trackerList_6.io_inner_acquire_valid <= T_1278
    trackerList_6.io_inner_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    trackerList_6.io_inner_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    trackerList_6.io_inner_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    trackerList_6.io_inner_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    trackerList_6.io_inner_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    trackerList_6.io_inner_acquire_bits_union <= io_inner_acquire_bits_union
    trackerList_6.io_inner_acquire_bits_data <= io_inner_acquire_bits_data
    trackerList_6.io_inner_acquire_bits_client_id <= io_inner_acquire_bits_client_id
    trackerList_6.io_inner_grant_ready <= LockingRRArbiter_8_1.io_in_6_ready
    trackerList_6.io_inner_finish_valid <= T_1436
    trackerList_6.io_inner_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    trackerList_6.io_inner_probe_ready <= LockingRRArbiter_7_1.io_in_6_ready
    trackerList_6.io_inner_release_valid <= io_inner_release_valid
    trackerList_6.io_inner_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    trackerList_6.io_inner_release_bits_addr_block <= io_inner_release_bits_addr_block
    trackerList_6.io_inner_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    trackerList_6.io_inner_release_bits_voluntary <= io_inner_release_bits_voluntary
    trackerList_6.io_inner_release_bits_r_type <= io_inner_release_bits_r_type
    trackerList_6.io_inner_release_bits_data <= io_inner_release_bits_data
    trackerList_6.io_inner_release_bits_client_id <= io_inner_release_bits_client_id
    trackerList_6.io_incoherent_0 <= io_incoherent_0
    trackerList_6.io_outer_acquire_ready <= outer_arb.io_in_6_acquire_ready
    trackerList_6.io_outer_probe_valid <= outer_arb.io_in_6_probe_valid
    trackerList_6.io_outer_probe_bits_addr_block <= outer_arb.io_in_6_probe_bits_addr_block
    trackerList_6.io_outer_probe_bits_p_type <= outer_arb.io_in_6_probe_bits_p_type
    trackerList_6.io_outer_release_ready <= outer_arb.io_in_6_release_ready
    trackerList_6.io_outer_grant_valid <= outer_arb.io_in_6_grant_valid
    trackerList_6.io_outer_grant_bits_addr_beat <= outer_arb.io_in_6_grant_bits_addr_beat
    trackerList_6.io_outer_grant_bits_client_xact_id <= outer_arb.io_in_6_grant_bits_client_xact_id
    trackerList_6.io_outer_grant_bits_manager_xact_id <= outer_arb.io_in_6_grant_bits_manager_xact_id
    trackerList_6.io_outer_grant_bits_is_builtin_type <= outer_arb.io_in_6_grant_bits_is_builtin_type
    trackerList_6.io_outer_grant_bits_g_type <= outer_arb.io_in_6_grant_bits_g_type
    trackerList_6.io_outer_grant_bits_data <= outer_arb.io_in_6_grant_bits_data
    trackerList_6.io_outer_grant_bits_manager_id <= outer_arb.io_in_6_grant_bits_manager_id
    trackerList_6.io_outer_finish_ready <= outer_arb.io_in_6_finish_ready
    trackerList_6.io_alloc_iacq_should <= T_1311
    trackerList_6.io_alloc_irel_should <= T_1409
    trackerList_6.io_alloc_oprb_should <= UInt<1>("h0")
    trackerList_7.io_inner_acquire_valid <= T_1278
    trackerList_7.io_inner_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    trackerList_7.io_inner_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    trackerList_7.io_inner_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    trackerList_7.io_inner_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    trackerList_7.io_inner_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    trackerList_7.io_inner_acquire_bits_union <= io_inner_acquire_bits_union
    trackerList_7.io_inner_acquire_bits_data <= io_inner_acquire_bits_data
    trackerList_7.io_inner_acquire_bits_client_id <= io_inner_acquire_bits_client_id
    trackerList_7.io_inner_grant_ready <= LockingRRArbiter_8_1.io_in_7_ready
    trackerList_7.io_inner_finish_valid <= T_1439
    trackerList_7.io_inner_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    trackerList_7.io_inner_probe_ready <= LockingRRArbiter_7_1.io_in_7_ready
    trackerList_7.io_inner_release_valid <= io_inner_release_valid
    trackerList_7.io_inner_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    trackerList_7.io_inner_release_bits_addr_block <= io_inner_release_bits_addr_block
    trackerList_7.io_inner_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    trackerList_7.io_inner_release_bits_voluntary <= io_inner_release_bits_voluntary
    trackerList_7.io_inner_release_bits_r_type <= io_inner_release_bits_r_type
    trackerList_7.io_inner_release_bits_data <= io_inner_release_bits_data
    trackerList_7.io_inner_release_bits_client_id <= io_inner_release_bits_client_id
    trackerList_7.io_incoherent_0 <= io_incoherent_0
    trackerList_7.io_outer_acquire_ready <= outer_arb.io_in_7_acquire_ready
    trackerList_7.io_outer_probe_valid <= outer_arb.io_in_7_probe_valid
    trackerList_7.io_outer_probe_bits_addr_block <= outer_arb.io_in_7_probe_bits_addr_block
    trackerList_7.io_outer_probe_bits_p_type <= outer_arb.io_in_7_probe_bits_p_type
    trackerList_7.io_outer_release_ready <= outer_arb.io_in_7_release_ready
    trackerList_7.io_outer_grant_valid <= outer_arb.io_in_7_grant_valid
    trackerList_7.io_outer_grant_bits_addr_beat <= outer_arb.io_in_7_grant_bits_addr_beat
    trackerList_7.io_outer_grant_bits_client_xact_id <= outer_arb.io_in_7_grant_bits_client_xact_id
    trackerList_7.io_outer_grant_bits_manager_xact_id <= outer_arb.io_in_7_grant_bits_manager_xact_id
    trackerList_7.io_outer_grant_bits_is_builtin_type <= outer_arb.io_in_7_grant_bits_is_builtin_type
    trackerList_7.io_outer_grant_bits_g_type <= outer_arb.io_in_7_grant_bits_g_type
    trackerList_7.io_outer_grant_bits_data <= outer_arb.io_in_7_grant_bits_data
    trackerList_7.io_outer_grant_bits_manager_id <= outer_arb.io_in_7_grant_bits_manager_id
    trackerList_7.io_outer_finish_ready <= outer_arb.io_in_7_finish_ready
    trackerList_7.io_alloc_iacq_should <= T_1316
    trackerList_7.io_alloc_irel_should <= T_1414
    trackerList_7.io_alloc_oprb_should <= UInt<1>("h0")
    outer_arb.io_in_0_acquire_valid <= trackerList_0.io_outer_acquire_valid
    outer_arb.io_in_0_acquire_bits_addr_block <= trackerList_0.io_outer_acquire_bits_addr_block
    outer_arb.io_in_0_acquire_bits_client_xact_id <= trackerList_0.io_outer_acquire_bits_client_xact_id
    outer_arb.io_in_0_acquire_bits_addr_beat <= trackerList_0.io_outer_acquire_bits_addr_beat
    outer_arb.io_in_0_acquire_bits_is_builtin_type <= trackerList_0.io_outer_acquire_bits_is_builtin_type
    outer_arb.io_in_0_acquire_bits_a_type <= trackerList_0.io_outer_acquire_bits_a_type
    outer_arb.io_in_0_acquire_bits_union <= trackerList_0.io_outer_acquire_bits_union
    outer_arb.io_in_0_acquire_bits_data <= trackerList_0.io_outer_acquire_bits_data
    outer_arb.io_in_0_probe_ready <= trackerList_0.io_outer_probe_ready
    outer_arb.io_in_0_release_valid <= trackerList_0.io_outer_release_valid
    outer_arb.io_in_0_release_bits_addr_beat <= trackerList_0.io_outer_release_bits_addr_beat
    outer_arb.io_in_0_release_bits_addr_block <= trackerList_0.io_outer_release_bits_addr_block
    outer_arb.io_in_0_release_bits_client_xact_id <= trackerList_0.io_outer_release_bits_client_xact_id
    outer_arb.io_in_0_release_bits_voluntary <= trackerList_0.io_outer_release_bits_voluntary
    outer_arb.io_in_0_release_bits_r_type <= trackerList_0.io_outer_release_bits_r_type
    outer_arb.io_in_0_release_bits_data <= trackerList_0.io_outer_release_bits_data
    outer_arb.io_in_0_grant_ready <= trackerList_0.io_outer_grant_ready
    outer_arb.io_in_0_finish_valid <= trackerList_0.io_outer_finish_valid
    outer_arb.io_in_0_finish_bits_manager_xact_id <= trackerList_0.io_outer_finish_bits_manager_xact_id
    outer_arb.io_in_0_finish_bits_manager_id <= trackerList_0.io_outer_finish_bits_manager_id
    outer_arb.io_in_1_acquire_valid <= trackerList_1.io_outer_acquire_valid
    outer_arb.io_in_1_acquire_bits_addr_block <= trackerList_1.io_outer_acquire_bits_addr_block
    outer_arb.io_in_1_acquire_bits_client_xact_id <= trackerList_1.io_outer_acquire_bits_client_xact_id
    outer_arb.io_in_1_acquire_bits_addr_beat <= trackerList_1.io_outer_acquire_bits_addr_beat
    outer_arb.io_in_1_acquire_bits_is_builtin_type <= trackerList_1.io_outer_acquire_bits_is_builtin_type
    outer_arb.io_in_1_acquire_bits_a_type <= trackerList_1.io_outer_acquire_bits_a_type
    outer_arb.io_in_1_acquire_bits_union <= trackerList_1.io_outer_acquire_bits_union
    outer_arb.io_in_1_acquire_bits_data <= trackerList_1.io_outer_acquire_bits_data
    outer_arb.io_in_1_probe_ready <= trackerList_1.io_outer_probe_ready
    outer_arb.io_in_1_release_valid <= trackerList_1.io_outer_release_valid
    outer_arb.io_in_1_release_bits_addr_beat <= trackerList_1.io_outer_release_bits_addr_beat
    outer_arb.io_in_1_release_bits_addr_block <= trackerList_1.io_outer_release_bits_addr_block
    outer_arb.io_in_1_release_bits_client_xact_id <= trackerList_1.io_outer_release_bits_client_xact_id
    outer_arb.io_in_1_release_bits_voluntary <= trackerList_1.io_outer_release_bits_voluntary
    outer_arb.io_in_1_release_bits_r_type <= trackerList_1.io_outer_release_bits_r_type
    outer_arb.io_in_1_release_bits_data <= trackerList_1.io_outer_release_bits_data
    outer_arb.io_in_1_grant_ready <= trackerList_1.io_outer_grant_ready
    outer_arb.io_in_1_finish_valid <= trackerList_1.io_outer_finish_valid
    outer_arb.io_in_1_finish_bits_manager_xact_id <= trackerList_1.io_outer_finish_bits_manager_xact_id
    outer_arb.io_in_1_finish_bits_manager_id <= trackerList_1.io_outer_finish_bits_manager_id
    outer_arb.io_in_2_acquire_valid <= trackerList_2.io_outer_acquire_valid
    outer_arb.io_in_2_acquire_bits_addr_block <= trackerList_2.io_outer_acquire_bits_addr_block
    outer_arb.io_in_2_acquire_bits_client_xact_id <= trackerList_2.io_outer_acquire_bits_client_xact_id
    outer_arb.io_in_2_acquire_bits_addr_beat <= trackerList_2.io_outer_acquire_bits_addr_beat
    outer_arb.io_in_2_acquire_bits_is_builtin_type <= trackerList_2.io_outer_acquire_bits_is_builtin_type
    outer_arb.io_in_2_acquire_bits_a_type <= trackerList_2.io_outer_acquire_bits_a_type
    outer_arb.io_in_2_acquire_bits_union <= trackerList_2.io_outer_acquire_bits_union
    outer_arb.io_in_2_acquire_bits_data <= trackerList_2.io_outer_acquire_bits_data
    outer_arb.io_in_2_probe_ready <= trackerList_2.io_outer_probe_ready
    outer_arb.io_in_2_release_valid <= trackerList_2.io_outer_release_valid
    outer_arb.io_in_2_release_bits_addr_beat <= trackerList_2.io_outer_release_bits_addr_beat
    outer_arb.io_in_2_release_bits_addr_block <= trackerList_2.io_outer_release_bits_addr_block
    outer_arb.io_in_2_release_bits_client_xact_id <= trackerList_2.io_outer_release_bits_client_xact_id
    outer_arb.io_in_2_release_bits_voluntary <= trackerList_2.io_outer_release_bits_voluntary
    outer_arb.io_in_2_release_bits_r_type <= trackerList_2.io_outer_release_bits_r_type
    outer_arb.io_in_2_release_bits_data <= trackerList_2.io_outer_release_bits_data
    outer_arb.io_in_2_grant_ready <= trackerList_2.io_outer_grant_ready
    outer_arb.io_in_2_finish_valid <= trackerList_2.io_outer_finish_valid
    outer_arb.io_in_2_finish_bits_manager_xact_id <= trackerList_2.io_outer_finish_bits_manager_xact_id
    outer_arb.io_in_2_finish_bits_manager_id <= trackerList_2.io_outer_finish_bits_manager_id
    outer_arb.io_in_3_acquire_valid <= trackerList_3.io_outer_acquire_valid
    outer_arb.io_in_3_acquire_bits_addr_block <= trackerList_3.io_outer_acquire_bits_addr_block
    outer_arb.io_in_3_acquire_bits_client_xact_id <= trackerList_3.io_outer_acquire_bits_client_xact_id
    outer_arb.io_in_3_acquire_bits_addr_beat <= trackerList_3.io_outer_acquire_bits_addr_beat
    outer_arb.io_in_3_acquire_bits_is_builtin_type <= trackerList_3.io_outer_acquire_bits_is_builtin_type
    outer_arb.io_in_3_acquire_bits_a_type <= trackerList_3.io_outer_acquire_bits_a_type
    outer_arb.io_in_3_acquire_bits_union <= trackerList_3.io_outer_acquire_bits_union
    outer_arb.io_in_3_acquire_bits_data <= trackerList_3.io_outer_acquire_bits_data
    outer_arb.io_in_3_probe_ready <= trackerList_3.io_outer_probe_ready
    outer_arb.io_in_3_release_valid <= trackerList_3.io_outer_release_valid
    outer_arb.io_in_3_release_bits_addr_beat <= trackerList_3.io_outer_release_bits_addr_beat
    outer_arb.io_in_3_release_bits_addr_block <= trackerList_3.io_outer_release_bits_addr_block
    outer_arb.io_in_3_release_bits_client_xact_id <= trackerList_3.io_outer_release_bits_client_xact_id
    outer_arb.io_in_3_release_bits_voluntary <= trackerList_3.io_outer_release_bits_voluntary
    outer_arb.io_in_3_release_bits_r_type <= trackerList_3.io_outer_release_bits_r_type
    outer_arb.io_in_3_release_bits_data <= trackerList_3.io_outer_release_bits_data
    outer_arb.io_in_3_grant_ready <= trackerList_3.io_outer_grant_ready
    outer_arb.io_in_3_finish_valid <= trackerList_3.io_outer_finish_valid
    outer_arb.io_in_3_finish_bits_manager_xact_id <= trackerList_3.io_outer_finish_bits_manager_xact_id
    outer_arb.io_in_3_finish_bits_manager_id <= trackerList_3.io_outer_finish_bits_manager_id
    outer_arb.io_in_4_acquire_valid <= trackerList_4.io_outer_acquire_valid
    outer_arb.io_in_4_acquire_bits_addr_block <= trackerList_4.io_outer_acquire_bits_addr_block
    outer_arb.io_in_4_acquire_bits_client_xact_id <= trackerList_4.io_outer_acquire_bits_client_xact_id
    outer_arb.io_in_4_acquire_bits_addr_beat <= trackerList_4.io_outer_acquire_bits_addr_beat
    outer_arb.io_in_4_acquire_bits_is_builtin_type <= trackerList_4.io_outer_acquire_bits_is_builtin_type
    outer_arb.io_in_4_acquire_bits_a_type <= trackerList_4.io_outer_acquire_bits_a_type
    outer_arb.io_in_4_acquire_bits_union <= trackerList_4.io_outer_acquire_bits_union
    outer_arb.io_in_4_acquire_bits_data <= trackerList_4.io_outer_acquire_bits_data
    outer_arb.io_in_4_probe_ready <= trackerList_4.io_outer_probe_ready
    outer_arb.io_in_4_release_valid <= trackerList_4.io_outer_release_valid
    outer_arb.io_in_4_release_bits_addr_beat <= trackerList_4.io_outer_release_bits_addr_beat
    outer_arb.io_in_4_release_bits_addr_block <= trackerList_4.io_outer_release_bits_addr_block
    outer_arb.io_in_4_release_bits_client_xact_id <= trackerList_4.io_outer_release_bits_client_xact_id
    outer_arb.io_in_4_release_bits_voluntary <= trackerList_4.io_outer_release_bits_voluntary
    outer_arb.io_in_4_release_bits_r_type <= trackerList_4.io_outer_release_bits_r_type
    outer_arb.io_in_4_release_bits_data <= trackerList_4.io_outer_release_bits_data
    outer_arb.io_in_4_grant_ready <= trackerList_4.io_outer_grant_ready
    outer_arb.io_in_4_finish_valid <= trackerList_4.io_outer_finish_valid
    outer_arb.io_in_4_finish_bits_manager_xact_id <= trackerList_4.io_outer_finish_bits_manager_xact_id
    outer_arb.io_in_4_finish_bits_manager_id <= trackerList_4.io_outer_finish_bits_manager_id
    outer_arb.io_in_5_acquire_valid <= trackerList_5.io_outer_acquire_valid
    outer_arb.io_in_5_acquire_bits_addr_block <= trackerList_5.io_outer_acquire_bits_addr_block
    outer_arb.io_in_5_acquire_bits_client_xact_id <= trackerList_5.io_outer_acquire_bits_client_xact_id
    outer_arb.io_in_5_acquire_bits_addr_beat <= trackerList_5.io_outer_acquire_bits_addr_beat
    outer_arb.io_in_5_acquire_bits_is_builtin_type <= trackerList_5.io_outer_acquire_bits_is_builtin_type
    outer_arb.io_in_5_acquire_bits_a_type <= trackerList_5.io_outer_acquire_bits_a_type
    outer_arb.io_in_5_acquire_bits_union <= trackerList_5.io_outer_acquire_bits_union
    outer_arb.io_in_5_acquire_bits_data <= trackerList_5.io_outer_acquire_bits_data
    outer_arb.io_in_5_probe_ready <= trackerList_5.io_outer_probe_ready
    outer_arb.io_in_5_release_valid <= trackerList_5.io_outer_release_valid
    outer_arb.io_in_5_release_bits_addr_beat <= trackerList_5.io_outer_release_bits_addr_beat
    outer_arb.io_in_5_release_bits_addr_block <= trackerList_5.io_outer_release_bits_addr_block
    outer_arb.io_in_5_release_bits_client_xact_id <= trackerList_5.io_outer_release_bits_client_xact_id
    outer_arb.io_in_5_release_bits_voluntary <= trackerList_5.io_outer_release_bits_voluntary
    outer_arb.io_in_5_release_bits_r_type <= trackerList_5.io_outer_release_bits_r_type
    outer_arb.io_in_5_release_bits_data <= trackerList_5.io_outer_release_bits_data
    outer_arb.io_in_5_grant_ready <= trackerList_5.io_outer_grant_ready
    outer_arb.io_in_5_finish_valid <= trackerList_5.io_outer_finish_valid
    outer_arb.io_in_5_finish_bits_manager_xact_id <= trackerList_5.io_outer_finish_bits_manager_xact_id
    outer_arb.io_in_5_finish_bits_manager_id <= trackerList_5.io_outer_finish_bits_manager_id
    outer_arb.io_in_6_acquire_valid <= trackerList_6.io_outer_acquire_valid
    outer_arb.io_in_6_acquire_bits_addr_block <= trackerList_6.io_outer_acquire_bits_addr_block
    outer_arb.io_in_6_acquire_bits_client_xact_id <= trackerList_6.io_outer_acquire_bits_client_xact_id
    outer_arb.io_in_6_acquire_bits_addr_beat <= trackerList_6.io_outer_acquire_bits_addr_beat
    outer_arb.io_in_6_acquire_bits_is_builtin_type <= trackerList_6.io_outer_acquire_bits_is_builtin_type
    outer_arb.io_in_6_acquire_bits_a_type <= trackerList_6.io_outer_acquire_bits_a_type
    outer_arb.io_in_6_acquire_bits_union <= trackerList_6.io_outer_acquire_bits_union
    outer_arb.io_in_6_acquire_bits_data <= trackerList_6.io_outer_acquire_bits_data
    outer_arb.io_in_6_probe_ready <= trackerList_6.io_outer_probe_ready
    outer_arb.io_in_6_release_valid <= trackerList_6.io_outer_release_valid
    outer_arb.io_in_6_release_bits_addr_beat <= trackerList_6.io_outer_release_bits_addr_beat
    outer_arb.io_in_6_release_bits_addr_block <= trackerList_6.io_outer_release_bits_addr_block
    outer_arb.io_in_6_release_bits_client_xact_id <= trackerList_6.io_outer_release_bits_client_xact_id
    outer_arb.io_in_6_release_bits_voluntary <= trackerList_6.io_outer_release_bits_voluntary
    outer_arb.io_in_6_release_bits_r_type <= trackerList_6.io_outer_release_bits_r_type
    outer_arb.io_in_6_release_bits_data <= trackerList_6.io_outer_release_bits_data
    outer_arb.io_in_6_grant_ready <= trackerList_6.io_outer_grant_ready
    outer_arb.io_in_6_finish_valid <= trackerList_6.io_outer_finish_valid
    outer_arb.io_in_6_finish_bits_manager_xact_id <= trackerList_6.io_outer_finish_bits_manager_xact_id
    outer_arb.io_in_6_finish_bits_manager_id <= trackerList_6.io_outer_finish_bits_manager_id
    outer_arb.io_in_7_acquire_valid <= trackerList_7.io_outer_acquire_valid
    outer_arb.io_in_7_acquire_bits_addr_block <= trackerList_7.io_outer_acquire_bits_addr_block
    outer_arb.io_in_7_acquire_bits_client_xact_id <= trackerList_7.io_outer_acquire_bits_client_xact_id
    outer_arb.io_in_7_acquire_bits_addr_beat <= trackerList_7.io_outer_acquire_bits_addr_beat
    outer_arb.io_in_7_acquire_bits_is_builtin_type <= trackerList_7.io_outer_acquire_bits_is_builtin_type
    outer_arb.io_in_7_acquire_bits_a_type <= trackerList_7.io_outer_acquire_bits_a_type
    outer_arb.io_in_7_acquire_bits_union <= trackerList_7.io_outer_acquire_bits_union
    outer_arb.io_in_7_acquire_bits_data <= trackerList_7.io_outer_acquire_bits_data
    outer_arb.io_in_7_probe_ready <= trackerList_7.io_outer_probe_ready
    outer_arb.io_in_7_release_valid <= trackerList_7.io_outer_release_valid
    outer_arb.io_in_7_release_bits_addr_beat <= trackerList_7.io_outer_release_bits_addr_beat
    outer_arb.io_in_7_release_bits_addr_block <= trackerList_7.io_outer_release_bits_addr_block
    outer_arb.io_in_7_release_bits_client_xact_id <= trackerList_7.io_outer_release_bits_client_xact_id
    outer_arb.io_in_7_release_bits_voluntary <= trackerList_7.io_outer_release_bits_voluntary
    outer_arb.io_in_7_release_bits_r_type <= trackerList_7.io_outer_release_bits_r_type
    outer_arb.io_in_7_release_bits_data <= trackerList_7.io_outer_release_bits_data
    outer_arb.io_in_7_grant_ready <= trackerList_7.io_outer_grant_ready
    outer_arb.io_in_7_finish_valid <= trackerList_7.io_outer_finish_valid
    outer_arb.io_in_7_finish_bits_manager_xact_id <= trackerList_7.io_outer_finish_bits_manager_xact_id
    outer_arb.io_in_7_finish_bits_manager_id <= trackerList_7.io_outer_finish_bits_manager_id
    outer_arb.io_out_acquire_ready <= io_outer_acquire_ready
    outer_arb.io_out_probe_valid <= io_outer_probe_valid
    outer_arb.io_out_probe_bits_addr_block <= io_outer_probe_bits_addr_block
    outer_arb.io_out_probe_bits_p_type <= io_outer_probe_bits_p_type
    outer_arb.io_out_release_ready <= io_outer_release_ready
    outer_arb.io_out_grant_valid <= io_outer_grant_valid
    outer_arb.io_out_grant_bits_addr_beat <= io_outer_grant_bits_addr_beat
    outer_arb.io_out_grant_bits_client_xact_id <= io_outer_grant_bits_client_xact_id
    outer_arb.io_out_grant_bits_manager_xact_id <= io_outer_grant_bits_manager_xact_id
    outer_arb.io_out_grant_bits_is_builtin_type <= io_outer_grant_bits_is_builtin_type
    outer_arb.io_out_grant_bits_g_type <= io_outer_grant_bits_g_type
    outer_arb.io_out_grant_bits_data <= io_outer_grant_bits_data
    outer_arb.io_out_grant_bits_manager_id <= io_outer_grant_bits_manager_id
    outer_arb.io_out_finish_ready <= io_outer_finish_ready
    LockingRRArbiter_7_1.io_in_0_valid <= trackerList_0.io_inner_probe_valid
    LockingRRArbiter_7_1.io_in_0_bits_addr_block <= trackerList_0.io_inner_probe_bits_addr_block
    LockingRRArbiter_7_1.io_in_0_bits_p_type <= trackerList_0.io_inner_probe_bits_p_type
    LockingRRArbiter_7_1.io_in_0_bits_client_id <= trackerList_0.io_inner_probe_bits_client_id
    LockingRRArbiter_7_1.io_in_1_valid <= trackerList_1.io_inner_probe_valid
    LockingRRArbiter_7_1.io_in_1_bits_addr_block <= trackerList_1.io_inner_probe_bits_addr_block
    LockingRRArbiter_7_1.io_in_1_bits_p_type <= trackerList_1.io_inner_probe_bits_p_type
    LockingRRArbiter_7_1.io_in_1_bits_client_id <= trackerList_1.io_inner_probe_bits_client_id
    LockingRRArbiter_7_1.io_in_2_valid <= trackerList_2.io_inner_probe_valid
    LockingRRArbiter_7_1.io_in_2_bits_addr_block <= trackerList_2.io_inner_probe_bits_addr_block
    LockingRRArbiter_7_1.io_in_2_bits_p_type <= trackerList_2.io_inner_probe_bits_p_type
    LockingRRArbiter_7_1.io_in_2_bits_client_id <= trackerList_2.io_inner_probe_bits_client_id
    LockingRRArbiter_7_1.io_in_3_valid <= trackerList_3.io_inner_probe_valid
    LockingRRArbiter_7_1.io_in_3_bits_addr_block <= trackerList_3.io_inner_probe_bits_addr_block
    LockingRRArbiter_7_1.io_in_3_bits_p_type <= trackerList_3.io_inner_probe_bits_p_type
    LockingRRArbiter_7_1.io_in_3_bits_client_id <= trackerList_3.io_inner_probe_bits_client_id
    LockingRRArbiter_7_1.io_in_4_valid <= trackerList_4.io_inner_probe_valid
    LockingRRArbiter_7_1.io_in_4_bits_addr_block <= trackerList_4.io_inner_probe_bits_addr_block
    LockingRRArbiter_7_1.io_in_4_bits_p_type <= trackerList_4.io_inner_probe_bits_p_type
    LockingRRArbiter_7_1.io_in_4_bits_client_id <= trackerList_4.io_inner_probe_bits_client_id
    LockingRRArbiter_7_1.io_in_5_valid <= trackerList_5.io_inner_probe_valid
    LockingRRArbiter_7_1.io_in_5_bits_addr_block <= trackerList_5.io_inner_probe_bits_addr_block
    LockingRRArbiter_7_1.io_in_5_bits_p_type <= trackerList_5.io_inner_probe_bits_p_type
    LockingRRArbiter_7_1.io_in_5_bits_client_id <= trackerList_5.io_inner_probe_bits_client_id
    LockingRRArbiter_7_1.io_in_6_valid <= trackerList_6.io_inner_probe_valid
    LockingRRArbiter_7_1.io_in_6_bits_addr_block <= trackerList_6.io_inner_probe_bits_addr_block
    LockingRRArbiter_7_1.io_in_6_bits_p_type <= trackerList_6.io_inner_probe_bits_p_type
    LockingRRArbiter_7_1.io_in_6_bits_client_id <= trackerList_6.io_inner_probe_bits_client_id
    LockingRRArbiter_7_1.io_in_7_valid <= trackerList_7.io_inner_probe_valid
    LockingRRArbiter_7_1.io_in_7_bits_addr_block <= trackerList_7.io_inner_probe_bits_addr_block
    LockingRRArbiter_7_1.io_in_7_bits_p_type <= trackerList_7.io_inner_probe_bits_p_type
    LockingRRArbiter_7_1.io_in_7_bits_client_id <= trackerList_7.io_inner_probe_bits_client_id
    LockingRRArbiter_7_1.io_out_ready <= io_inner_probe_ready
    LockingRRArbiter_8_1.io_in_0_valid <= trackerList_0.io_inner_grant_valid
    LockingRRArbiter_8_1.io_in_0_bits_addr_beat <= trackerList_0.io_inner_grant_bits_addr_beat
    LockingRRArbiter_8_1.io_in_0_bits_client_xact_id <= trackerList_0.io_inner_grant_bits_client_xact_id
    LockingRRArbiter_8_1.io_in_0_bits_manager_xact_id <= trackerList_0.io_inner_grant_bits_manager_xact_id
    LockingRRArbiter_8_1.io_in_0_bits_is_builtin_type <= trackerList_0.io_inner_grant_bits_is_builtin_type
    LockingRRArbiter_8_1.io_in_0_bits_g_type <= trackerList_0.io_inner_grant_bits_g_type
    LockingRRArbiter_8_1.io_in_0_bits_data <= trackerList_0.io_inner_grant_bits_data
    LockingRRArbiter_8_1.io_in_0_bits_client_id <= trackerList_0.io_inner_grant_bits_client_id
    LockingRRArbiter_8_1.io_in_1_valid <= trackerList_1.io_inner_grant_valid
    LockingRRArbiter_8_1.io_in_1_bits_addr_beat <= trackerList_1.io_inner_grant_bits_addr_beat
    LockingRRArbiter_8_1.io_in_1_bits_client_xact_id <= trackerList_1.io_inner_grant_bits_client_xact_id
    LockingRRArbiter_8_1.io_in_1_bits_manager_xact_id <= trackerList_1.io_inner_grant_bits_manager_xact_id
    LockingRRArbiter_8_1.io_in_1_bits_is_builtin_type <= trackerList_1.io_inner_grant_bits_is_builtin_type
    LockingRRArbiter_8_1.io_in_1_bits_g_type <= trackerList_1.io_inner_grant_bits_g_type
    LockingRRArbiter_8_1.io_in_1_bits_data <= trackerList_1.io_inner_grant_bits_data
    LockingRRArbiter_8_1.io_in_1_bits_client_id <= trackerList_1.io_inner_grant_bits_client_id
    LockingRRArbiter_8_1.io_in_2_valid <= trackerList_2.io_inner_grant_valid
    LockingRRArbiter_8_1.io_in_2_bits_addr_beat <= trackerList_2.io_inner_grant_bits_addr_beat
    LockingRRArbiter_8_1.io_in_2_bits_client_xact_id <= trackerList_2.io_inner_grant_bits_client_xact_id
    LockingRRArbiter_8_1.io_in_2_bits_manager_xact_id <= trackerList_2.io_inner_grant_bits_manager_xact_id
    LockingRRArbiter_8_1.io_in_2_bits_is_builtin_type <= trackerList_2.io_inner_grant_bits_is_builtin_type
    LockingRRArbiter_8_1.io_in_2_bits_g_type <= trackerList_2.io_inner_grant_bits_g_type
    LockingRRArbiter_8_1.io_in_2_bits_data <= trackerList_2.io_inner_grant_bits_data
    LockingRRArbiter_8_1.io_in_2_bits_client_id <= trackerList_2.io_inner_grant_bits_client_id
    LockingRRArbiter_8_1.io_in_3_valid <= trackerList_3.io_inner_grant_valid
    LockingRRArbiter_8_1.io_in_3_bits_addr_beat <= trackerList_3.io_inner_grant_bits_addr_beat
    LockingRRArbiter_8_1.io_in_3_bits_client_xact_id <= trackerList_3.io_inner_grant_bits_client_xact_id
    LockingRRArbiter_8_1.io_in_3_bits_manager_xact_id <= trackerList_3.io_inner_grant_bits_manager_xact_id
    LockingRRArbiter_8_1.io_in_3_bits_is_builtin_type <= trackerList_3.io_inner_grant_bits_is_builtin_type
    LockingRRArbiter_8_1.io_in_3_bits_g_type <= trackerList_3.io_inner_grant_bits_g_type
    LockingRRArbiter_8_1.io_in_3_bits_data <= trackerList_3.io_inner_grant_bits_data
    LockingRRArbiter_8_1.io_in_3_bits_client_id <= trackerList_3.io_inner_grant_bits_client_id
    LockingRRArbiter_8_1.io_in_4_valid <= trackerList_4.io_inner_grant_valid
    LockingRRArbiter_8_1.io_in_4_bits_addr_beat <= trackerList_4.io_inner_grant_bits_addr_beat
    LockingRRArbiter_8_1.io_in_4_bits_client_xact_id <= trackerList_4.io_inner_grant_bits_client_xact_id
    LockingRRArbiter_8_1.io_in_4_bits_manager_xact_id <= trackerList_4.io_inner_grant_bits_manager_xact_id
    LockingRRArbiter_8_1.io_in_4_bits_is_builtin_type <= trackerList_4.io_inner_grant_bits_is_builtin_type
    LockingRRArbiter_8_1.io_in_4_bits_g_type <= trackerList_4.io_inner_grant_bits_g_type
    LockingRRArbiter_8_1.io_in_4_bits_data <= trackerList_4.io_inner_grant_bits_data
    LockingRRArbiter_8_1.io_in_4_bits_client_id <= trackerList_4.io_inner_grant_bits_client_id
    LockingRRArbiter_8_1.io_in_5_valid <= trackerList_5.io_inner_grant_valid
    LockingRRArbiter_8_1.io_in_5_bits_addr_beat <= trackerList_5.io_inner_grant_bits_addr_beat
    LockingRRArbiter_8_1.io_in_5_bits_client_xact_id <= trackerList_5.io_inner_grant_bits_client_xact_id
    LockingRRArbiter_8_1.io_in_5_bits_manager_xact_id <= trackerList_5.io_inner_grant_bits_manager_xact_id
    LockingRRArbiter_8_1.io_in_5_bits_is_builtin_type <= trackerList_5.io_inner_grant_bits_is_builtin_type
    LockingRRArbiter_8_1.io_in_5_bits_g_type <= trackerList_5.io_inner_grant_bits_g_type
    LockingRRArbiter_8_1.io_in_5_bits_data <= trackerList_5.io_inner_grant_bits_data
    LockingRRArbiter_8_1.io_in_5_bits_client_id <= trackerList_5.io_inner_grant_bits_client_id
    LockingRRArbiter_8_1.io_in_6_valid <= trackerList_6.io_inner_grant_valid
    LockingRRArbiter_8_1.io_in_6_bits_addr_beat <= trackerList_6.io_inner_grant_bits_addr_beat
    LockingRRArbiter_8_1.io_in_6_bits_client_xact_id <= trackerList_6.io_inner_grant_bits_client_xact_id
    LockingRRArbiter_8_1.io_in_6_bits_manager_xact_id <= trackerList_6.io_inner_grant_bits_manager_xact_id
    LockingRRArbiter_8_1.io_in_6_bits_is_builtin_type <= trackerList_6.io_inner_grant_bits_is_builtin_type
    LockingRRArbiter_8_1.io_in_6_bits_g_type <= trackerList_6.io_inner_grant_bits_g_type
    LockingRRArbiter_8_1.io_in_6_bits_data <= trackerList_6.io_inner_grant_bits_data
    LockingRRArbiter_8_1.io_in_6_bits_client_id <= trackerList_6.io_inner_grant_bits_client_id
    LockingRRArbiter_8_1.io_in_7_valid <= trackerList_7.io_inner_grant_valid
    LockingRRArbiter_8_1.io_in_7_bits_addr_beat <= trackerList_7.io_inner_grant_bits_addr_beat
    LockingRRArbiter_8_1.io_in_7_bits_client_xact_id <= trackerList_7.io_inner_grant_bits_client_xact_id
    LockingRRArbiter_8_1.io_in_7_bits_manager_xact_id <= trackerList_7.io_inner_grant_bits_manager_xact_id
    LockingRRArbiter_8_1.io_in_7_bits_is_builtin_type <= trackerList_7.io_inner_grant_bits_is_builtin_type
    LockingRRArbiter_8_1.io_in_7_bits_g_type <= trackerList_7.io_inner_grant_bits_g_type
    LockingRRArbiter_8_1.io_in_7_bits_data <= trackerList_7.io_inner_grant_bits_data
    LockingRRArbiter_8_1.io_in_7_bits_client_id <= trackerList_7.io_inner_grant_bits_client_id
    LockingRRArbiter_8_1.io_out_ready <= io_inner_grant_ready
    printf(clk, T_1481, "Assertion failed: L2 agent got illegal probe\n    at Agents.scala:160 assert(!io.outer.probe.valid, \"L2 agent got illegal probe\")\n")
    stop(clk, T_1481, 1)

  module MMIOTileLinkManager :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_acquire_bits_client_id : UInt<1>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_client_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<4>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_probe_bits_client_id : UInt<1>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<1>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_release_bits_client_id : UInt<1>
    input io_incoherent_0 : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<2>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<2>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
  
    node T_880 = and(io_outer_acquire_ready, io_outer_acquire_valid)
    wire T_889_0 : UInt<3>
    node T_891 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_892 = and(io_outer_acquire_bits_is_builtin_type, T_891)
    node multibeat_fire = and(T_880, T_892)
    node T_894 = eq(io_outer_acquire_bits_addr_beat, UInt<3>("h0"))
    node multibeat_start = and(multibeat_fire, T_894)
    node T_896 = eq(io_outer_acquire_bits_addr_beat, UInt<3>("h7"))
    node multibeat_end = and(multibeat_fire, T_896)
    reg xact_pending : UInt<9>, clk with :
      reset => (reset, UInt<9>("h0"))
    node T_898 = not(xact_pending)
    node T_899 = bits(T_898, 0, 0)
    node T_900 = bits(T_898, 1, 1)
    node T_901 = bits(T_898, 2, 2)
    node T_902 = bits(T_898, 3, 3)
    node T_903 = bits(T_898, 4, 4)
    node T_904 = bits(T_898, 5, 5)
    node T_905 = bits(T_898, 6, 6)
    node T_906 = bits(T_898, 7, 7)
    node T_917 = mux(T_906, UInt<4>("h7"), UInt<4>("h8"))
    node T_918 = mux(T_905, UInt<4>("h6"), T_917)
    node T_919 = mux(T_904, UInt<4>("h5"), T_918)
    node T_920 = mux(T_903, UInt<4>("h4"), T_919)
    node T_921 = mux(T_902, UInt<4>("h3"), T_920)
    node T_922 = mux(T_901, UInt<4>("h2"), T_921)
    node T_923 = mux(T_900, UInt<4>("h1"), T_922)
    node xact_id_sel = mux(T_899, UInt<4>("h0"), T_923)
    reg xact_id_reg : UInt<4>, clk with :
      reset => (UInt<1>("h0"), xact_id_reg)
    node GEN_4 = mux(multibeat_start, xact_id_sel, xact_id_reg)
    reg xact_multibeat : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node outer_xact_id = mux(xact_multibeat, xact_id_reg, xact_id_sel)
    node T_927 = eq(T_898, UInt<9>("h0"))
    node xact_free = eq(T_927, UInt<1>("h0"))
    reg xact_buffer_0_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_0_client_id)
    reg xact_buffer_0_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_0_client_xact_id)
    reg xact_buffer_1_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_1_client_id)
    reg xact_buffer_1_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_1_client_xact_id)
    reg xact_buffer_2_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_2_client_id)
    reg xact_buffer_2_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_2_client_xact_id)
    reg xact_buffer_3_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_3_client_id)
    reg xact_buffer_3_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_3_client_xact_id)
    reg xact_buffer_4_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_4_client_id)
    reg xact_buffer_4_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_4_client_xact_id)
    reg xact_buffer_5_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_5_client_id)
    reg xact_buffer_5_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_5_client_xact_id)
    reg xact_buffer_6_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_6_client_id)
    reg xact_buffer_6_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_6_client_xact_id)
    reg xact_buffer_7_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_7_client_id)
    reg xact_buffer_7_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_7_client_xact_id)
    reg xact_buffer_8_client_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_8_client_id)
    reg xact_buffer_8_client_xact_id : UInt<1>, clk with :
      reset => (UInt<1>("h0"), xact_buffer_8_client_xact_id)
    node T_1464 = and(io_outer_acquire_ready, xact_free)
    node T_1465 = and(io_inner_acquire_valid, xact_free)
    wire T_1475_0 : UInt<3>
    node T_1477 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_1478 = and(io_outer_acquire_bits_is_builtin_type, T_1477)
    node T_1480 = eq(T_1478, UInt<1>("h0"))
    node T_1483 = or(T_1480, T_896)
    node T_1484 = and(T_880, T_1483)
    node T_1486 = dshlw(UInt<4>("h1"), io_outer_acquire_bits_client_xact_id)
    node T_1488 = mux(T_1484, T_1486, UInt<4>("h0"))
    node GEN_2 = pad(T_1488, 9)
    node T_1489 = or(xact_pending, GEN_2)
    node T_1490 = and(io_inner_finish_ready, io_inner_finish_valid)
    node T_1492 = dshlw(UInt<16>("h1"), io_inner_finish_bits_manager_xact_id)
    node T_1494 = mux(T_1490, T_1492, UInt<16>("h0"))
    node T_1495 = not(T_1494)
    node GEN_3 = pad(T_1489, 16)
    node T_1496 = and(GEN_3, T_1495)
    node T_1497 = and(io_inner_grant_ready, io_inner_grant_valid)
    wire T_1505_0 : UInt<3>
    node GEN_59 = pad(UInt<3>("h5"), 4)
    node T_1507 = eq(io_inner_grant_bits_g_type, GEN_59)
    node T_1508 = eq(io_inner_grant_bits_g_type, UInt<4>("h0"))
    node T_1509 = mux(io_inner_grant_bits_is_builtin_type, T_1507, T_1508)
    node T_1512 = eq(T_1509, UInt<1>("h0"))
    node T_1514 = eq(io_inner_grant_bits_addr_beat, UInt<3>("h7"))
    node T_1515 = or(T_1512, T_1514)
    node T_1516 = and(T_1497, T_1515)
    node T_1522 = and(io_inner_grant_bits_is_builtin_type, T_1508)
    node T_1524 = eq(T_1522, UInt<1>("h0"))
    node T_1527 = eq(T_1524, UInt<1>("h0"))
    node T_1528 = and(T_1516, T_1527)
    node T_1530 = dshlw(UInt<16>("h1"), io_inner_grant_bits_manager_xact_id)
    node T_1532 = mux(T_1528, T_1530, UInt<16>("h0"))
    node T_1533 = not(T_1532)
    node T_1534 = and(T_1496, T_1533)
    wire T_1544_0 : UInt<3>
    node T_1546 = eq(io_outer_acquire_bits_a_type, UInt<3>("h3"))
    node T_1547 = and(io_outer_acquire_bits_is_builtin_type, T_1546)
    node T_1549 = eq(T_1547, UInt<1>("h0"))
    node T_1552 = or(T_1549, T_896)
    node T_1553 = and(T_880, T_1552)
    wire GEN_0 : UInt<1>
    node GEN_5 = mux(eq(UInt<4>("h0"), outer_xact_id), GEN_0, xact_buffer_0_client_xact_id)
    node GEN_6 = mux(eq(UInt<4>("h1"), outer_xact_id), GEN_0, xact_buffer_1_client_xact_id)
    node GEN_7 = mux(eq(UInt<4>("h2"), outer_xact_id), GEN_0, xact_buffer_2_client_xact_id)
    node GEN_8 = mux(eq(UInt<4>("h3"), outer_xact_id), GEN_0, xact_buffer_3_client_xact_id)
    node GEN_9 = mux(eq(UInt<4>("h4"), outer_xact_id), GEN_0, xact_buffer_4_client_xact_id)
    node GEN_10 = mux(eq(UInt<4>("h5"), outer_xact_id), GEN_0, xact_buffer_5_client_xact_id)
    node GEN_11 = mux(eq(UInt<4>("h6"), outer_xact_id), GEN_0, xact_buffer_6_client_xact_id)
    node GEN_12 = mux(eq(UInt<4>("h7"), outer_xact_id), GEN_0, xact_buffer_7_client_xact_id)
    node GEN_13 = mux(eq(UInt<4>("h8"), outer_xact_id), GEN_0, xact_buffer_8_client_xact_id)
    wire GEN_1 : UInt<1>
    node GEN_14 = mux(eq(UInt<4>("h0"), outer_xact_id), GEN_1, xact_buffer_0_client_id)
    node GEN_15 = mux(eq(UInt<4>("h1"), outer_xact_id), GEN_1, xact_buffer_1_client_id)
    node GEN_16 = mux(eq(UInt<4>("h2"), outer_xact_id), GEN_1, xact_buffer_2_client_id)
    node GEN_17 = mux(eq(UInt<4>("h3"), outer_xact_id), GEN_1, xact_buffer_3_client_id)
    node GEN_18 = mux(eq(UInt<4>("h4"), outer_xact_id), GEN_1, xact_buffer_4_client_id)
    node GEN_19 = mux(eq(UInt<4>("h5"), outer_xact_id), GEN_1, xact_buffer_5_client_id)
    node GEN_20 = mux(eq(UInt<4>("h6"), outer_xact_id), GEN_1, xact_buffer_6_client_id)
    node GEN_21 = mux(eq(UInt<4>("h7"), outer_xact_id), GEN_1, xact_buffer_7_client_id)
    node GEN_22 = mux(eq(UInt<4>("h8"), outer_xact_id), GEN_1, xact_buffer_8_client_id)
    node GEN_23 = mux(T_1553, GEN_5, xact_buffer_0_client_xact_id)
    node GEN_24 = mux(T_1553, GEN_6, xact_buffer_1_client_xact_id)
    node GEN_25 = mux(T_1553, GEN_7, xact_buffer_2_client_xact_id)
    node GEN_26 = mux(T_1553, GEN_8, xact_buffer_3_client_xact_id)
    node GEN_27 = mux(T_1553, GEN_9, xact_buffer_4_client_xact_id)
    node GEN_28 = mux(T_1553, GEN_10, xact_buffer_5_client_xact_id)
    node GEN_29 = mux(T_1553, GEN_11, xact_buffer_6_client_xact_id)
    node GEN_30 = mux(T_1553, GEN_12, xact_buffer_7_client_xact_id)
    node GEN_31 = mux(T_1553, GEN_13, xact_buffer_8_client_xact_id)
    node GEN_32 = mux(T_1553, GEN_14, xact_buffer_0_client_id)
    node GEN_33 = mux(T_1553, GEN_15, xact_buffer_1_client_id)
    node GEN_34 = mux(T_1553, GEN_16, xact_buffer_2_client_id)
    node GEN_35 = mux(T_1553, GEN_17, xact_buffer_3_client_id)
    node GEN_36 = mux(T_1553, GEN_18, xact_buffer_4_client_id)
    node GEN_37 = mux(T_1553, GEN_19, xact_buffer_5_client_id)
    node GEN_38 = mux(T_1553, GEN_20, xact_buffer_6_client_id)
    node GEN_39 = mux(T_1553, GEN_21, xact_buffer_7_client_id)
    node GEN_40 = mux(T_1553, GEN_22, xact_buffer_8_client_id)
    node GEN_41 = mux(multibeat_start, UInt<1>("h1"), xact_multibeat)
    node GEN_42 = mux(multibeat_end, UInt<1>("h0"), GEN_41)
    wire GEN_2_client_id : UInt<1>
    wire GEN_2_client_xact_id : UInt<1>
    node GEN_43 = mux(eq(UInt<2>("h1"), io_outer_grant_bits_client_xact_id), xact_buffer_1_client_id, xact_buffer_0_client_id)
    node GEN_44 = mux(eq(UInt<2>("h1"), io_outer_grant_bits_client_xact_id), xact_buffer_1_client_xact_id, xact_buffer_0_client_xact_id)
    node GEN_45 = mux(eq(UInt<2>("h2"), io_outer_grant_bits_client_xact_id), xact_buffer_2_client_id, GEN_43)
    node GEN_46 = mux(eq(UInt<2>("h2"), io_outer_grant_bits_client_xact_id), xact_buffer_2_client_xact_id, GEN_44)
    node GEN_47 = mux(eq(UInt<2>("h3"), io_outer_grant_bits_client_xact_id), xact_buffer_3_client_id, GEN_45)
    node GEN_48 = mux(eq(UInt<2>("h3"), io_outer_grant_bits_client_xact_id), xact_buffer_3_client_xact_id, GEN_46)
    node GEN_60 = pad(io_outer_grant_bits_client_xact_id, 3)
    node GEN_49 = mux(eq(UInt<3>("h4"), GEN_60), xact_buffer_4_client_id, GEN_47)
    node GEN_50 = mux(eq(UInt<3>("h4"), GEN_60), xact_buffer_4_client_xact_id, GEN_48)
    node GEN_51 = mux(eq(UInt<3>("h5"), GEN_60), xact_buffer_5_client_id, GEN_49)
    node GEN_52 = mux(eq(UInt<3>("h5"), GEN_60), xact_buffer_5_client_xact_id, GEN_50)
    node GEN_53 = mux(eq(UInt<3>("h6"), GEN_60), xact_buffer_6_client_id, GEN_51)
    node GEN_54 = mux(eq(UInt<3>("h6"), GEN_60), xact_buffer_6_client_xact_id, GEN_52)
    node GEN_55 = mux(eq(UInt<3>("h7"), GEN_60), xact_buffer_7_client_id, GEN_53)
    node GEN_56 = mux(eq(UInt<3>("h7"), GEN_60), xact_buffer_7_client_xact_id, GEN_54)
    node GEN_68 = pad(io_outer_grant_bits_client_xact_id, 4)
    node GEN_57 = mux(eq(UInt<4>("h8"), GEN_68), xact_buffer_8_client_id, GEN_55)
    node GEN_58 = mux(eq(UInt<4>("h8"), GEN_68), xact_buffer_8_client_xact_id, GEN_56)
    wire GEN_3_client_id : UInt<1>
    wire GEN_3_client_xact_id : UInt<1>
    io_inner_acquire_ready <= T_1464
    io_inner_grant_valid <= io_outer_grant_valid
    io_inner_grant_bits_addr_beat <= io_outer_grant_bits_addr_beat
    io_inner_grant_bits_client_xact_id <= GEN_3_client_xact_id
    io_inner_grant_bits_manager_xact_id <= pad(io_outer_grant_bits_client_xact_id, 4)
    io_inner_grant_bits_is_builtin_type <= io_outer_grant_bits_is_builtin_type
    io_inner_grant_bits_g_type <= io_outer_grant_bits_g_type
    io_inner_grant_bits_data <= io_outer_grant_bits_data
    io_inner_grant_bits_client_id <= GEN_2_client_id
    io_inner_finish_ready <= UInt<1>("h1")
    io_inner_probe_valid <= UInt<1>("h0")
    io_inner_probe_bits_addr_block <= UInt<26>("h1740605")
    io_inner_probe_bits_p_type <= UInt<2>("h2")
    io_inner_probe_bits_client_id <= UInt<1>("h1")
    io_inner_release_ready <= UInt<1>("h0")
    io_outer_acquire_valid <= T_1465
    io_outer_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    io_outer_acquire_bits_client_xact_id <= bits(outer_xact_id, 1, 0)
    io_outer_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    io_outer_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    io_outer_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    io_outer_acquire_bits_union <= io_inner_acquire_bits_union
    io_outer_acquire_bits_data <= io_inner_acquire_bits_data
    io_outer_grant_ready <= io_inner_grant_ready
    xact_pending <= bits(T_1534, 8, 0)
    xact_id_reg <= GEN_4
    xact_multibeat <= GEN_42
    xact_buffer_0_client_id <= GEN_32
    xact_buffer_0_client_xact_id <= GEN_23
    xact_buffer_1_client_id <= GEN_33
    xact_buffer_1_client_xact_id <= GEN_24
    xact_buffer_2_client_id <= GEN_34
    xact_buffer_2_client_xact_id <= GEN_25
    xact_buffer_3_client_id <= GEN_35
    xact_buffer_3_client_xact_id <= GEN_26
    xact_buffer_4_client_id <= GEN_36
    xact_buffer_4_client_xact_id <= GEN_27
    xact_buffer_5_client_id <= GEN_37
    xact_buffer_5_client_xact_id <= GEN_28
    xact_buffer_6_client_id <= GEN_38
    xact_buffer_6_client_xact_id <= GEN_29
    xact_buffer_7_client_id <= GEN_39
    xact_buffer_7_client_xact_id <= GEN_30
    xact_buffer_8_client_id <= GEN_40
    xact_buffer_8_client_xact_id <= GEN_31
    GEN_0 <= io_inner_acquire_bits_client_xact_id
    GEN_1 <= io_inner_acquire_bits_client_id
    GEN_2_client_id <= GEN_57
    GEN_2_client_xact_id <= GEN_58
    GEN_3_client_id <= GEN_57
    GEN_3_client_xact_id <= GEN_58

  module ClientUncachedTileLinkIOArbiter_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_acquire_ready : UInt<1>
    input io_in_0_acquire_valid : UInt<1>
    input io_in_0_acquire_bits_addr_block : UInt<26>
    input io_in_0_acquire_bits_client_xact_id : UInt<4>
    input io_in_0_acquire_bits_addr_beat : UInt<3>
    input io_in_0_acquire_bits_is_builtin_type : UInt<1>
    input io_in_0_acquire_bits_a_type : UInt<3>
    input io_in_0_acquire_bits_union : UInt<11>
    input io_in_0_acquire_bits_data : UInt<64>
    input io_in_0_grant_ready : UInt<1>
    output io_in_0_grant_valid : UInt<1>
    output io_in_0_grant_bits_addr_beat : UInt<3>
    output io_in_0_grant_bits_client_xact_id : UInt<4>
    output io_in_0_grant_bits_manager_xact_id : UInt<1>
    output io_in_0_grant_bits_is_builtin_type : UInt<1>
    output io_in_0_grant_bits_g_type : UInt<4>
    output io_in_0_grant_bits_data : UInt<64>
    input io_out_acquire_ready : UInt<1>
    output io_out_acquire_valid : UInt<1>
    output io_out_acquire_bits_addr_block : UInt<26>
    output io_out_acquire_bits_client_xact_id : UInt<4>
    output io_out_acquire_bits_addr_beat : UInt<3>
    output io_out_acquire_bits_is_builtin_type : UInt<1>
    output io_out_acquire_bits_a_type : UInt<3>
    output io_out_acquire_bits_union : UInt<11>
    output io_out_acquire_bits_data : UInt<64>
    output io_out_grant_ready : UInt<1>
    input io_out_grant_valid : UInt<1>
    input io_out_grant_bits_addr_beat : UInt<3>
    input io_out_grant_bits_client_xact_id : UInt<4>
    input io_out_grant_bits_manager_xact_id : UInt<1>
    input io_out_grant_bits_is_builtin_type : UInt<1>
    input io_out_grant_bits_g_type : UInt<4>
    input io_out_grant_bits_data : UInt<64>
  
    io_in_0_acquire_ready <= io_out_acquire_ready
    io_in_0_grant_valid <= io_out_grant_valid
    io_in_0_grant_bits_addr_beat <= io_out_grant_bits_addr_beat
    io_in_0_grant_bits_client_xact_id <= io_out_grant_bits_client_xact_id
    io_in_0_grant_bits_manager_xact_id <= io_out_grant_bits_manager_xact_id
    io_in_0_grant_bits_is_builtin_type <= io_out_grant_bits_is_builtin_type
    io_in_0_grant_bits_g_type <= io_out_grant_bits_g_type
    io_in_0_grant_bits_data <= io_out_grant_bits_data
    io_out_acquire_valid <= io_in_0_acquire_valid
    io_out_acquire_bits_addr_block <= io_in_0_acquire_bits_addr_block
    io_out_acquire_bits_client_xact_id <= io_in_0_acquire_bits_client_xact_id
    io_out_acquire_bits_addr_beat <= io_in_0_acquire_bits_addr_beat
    io_out_acquire_bits_is_builtin_type <= io_in_0_acquire_bits_is_builtin_type
    io_out_acquire_bits_a_type <= io_in_0_acquire_bits_a_type
    io_out_acquire_bits_union <= io_in_0_acquire_bits_union
    io_out_acquire_bits_data <= io_in_0_acquire_bits_data
    io_out_grant_ready <= io_in_0_grant_ready

  module TileLinkMemoryInterconnect :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_acquire_ready : UInt<1>
    input io_in_0_acquire_valid : UInt<1>
    input io_in_0_acquire_bits_addr_block : UInt<26>
    input io_in_0_acquire_bits_client_xact_id : UInt<4>
    input io_in_0_acquire_bits_addr_beat : UInt<3>
    input io_in_0_acquire_bits_is_builtin_type : UInt<1>
    input io_in_0_acquire_bits_a_type : UInt<3>
    input io_in_0_acquire_bits_union : UInt<11>
    input io_in_0_acquire_bits_data : UInt<64>
    input io_in_0_grant_ready : UInt<1>
    output io_in_0_grant_valid : UInt<1>
    output io_in_0_grant_bits_addr_beat : UInt<3>
    output io_in_0_grant_bits_client_xact_id : UInt<4>
    output io_in_0_grant_bits_manager_xact_id : UInt<1>
    output io_in_0_grant_bits_is_builtin_type : UInt<1>
    output io_in_0_grant_bits_g_type : UInt<4>
    output io_in_0_grant_bits_data : UInt<64>
    input io_out_0_acquire_ready : UInt<1>
    output io_out_0_acquire_valid : UInt<1>
    output io_out_0_acquire_bits_addr_block : UInt<26>
    output io_out_0_acquire_bits_client_xact_id : UInt<4>
    output io_out_0_acquire_bits_addr_beat : UInt<3>
    output io_out_0_acquire_bits_is_builtin_type : UInt<1>
    output io_out_0_acquire_bits_a_type : UInt<3>
    output io_out_0_acquire_bits_union : UInt<11>
    output io_out_0_acquire_bits_data : UInt<64>
    output io_out_0_grant_ready : UInt<1>
    input io_out_0_grant_valid : UInt<1>
    input io_out_0_grant_bits_addr_beat : UInt<3>
    input io_out_0_grant_bits_client_xact_id : UInt<4>
    input io_out_0_grant_bits_manager_xact_id : UInt<1>
    input io_out_0_grant_bits_is_builtin_type : UInt<1>
    input io_out_0_grant_bits_g_type : UInt<4>
    input io_out_0_grant_bits_data : UInt<64>
  
    inst ClientUncachedTileLinkIOArbiter_1_1 of ClientUncachedTileLinkIOArbiter_1
    node T_3009 = dshr(ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_bits_addr_block, UInt<1>("h0"))
    io_in_0_acquire_ready <= ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_ready
    io_in_0_grant_valid <= ClientUncachedTileLinkIOArbiter_1_1.io_in_0_grant_valid
    io_in_0_grant_bits_addr_beat <= ClientUncachedTileLinkIOArbiter_1_1.io_in_0_grant_bits_addr_beat
    io_in_0_grant_bits_client_xact_id <= ClientUncachedTileLinkIOArbiter_1_1.io_in_0_grant_bits_client_xact_id
    io_in_0_grant_bits_manager_xact_id <= ClientUncachedTileLinkIOArbiter_1_1.io_in_0_grant_bits_manager_xact_id
    io_in_0_grant_bits_is_builtin_type <= ClientUncachedTileLinkIOArbiter_1_1.io_in_0_grant_bits_is_builtin_type
    io_in_0_grant_bits_g_type <= ClientUncachedTileLinkIOArbiter_1_1.io_in_0_grant_bits_g_type
    io_in_0_grant_bits_data <= ClientUncachedTileLinkIOArbiter_1_1.io_in_0_grant_bits_data
    io_out_0_acquire_valid <= ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_valid
    io_out_0_acquire_bits_addr_block <= T_3009
    io_out_0_acquire_bits_client_xact_id <= ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_bits_client_xact_id
    io_out_0_acquire_bits_addr_beat <= ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_bits_addr_beat
    io_out_0_acquire_bits_is_builtin_type <= ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_bits_is_builtin_type
    io_out_0_acquire_bits_a_type <= ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_bits_a_type
    io_out_0_acquire_bits_union <= ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_bits_union
    io_out_0_acquire_bits_data <= ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_bits_data
    io_out_0_grant_ready <= ClientUncachedTileLinkIOArbiter_1_1.io_out_grant_ready
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_valid <= io_in_0_acquire_valid
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_bits_addr_block <= io_in_0_acquire_bits_addr_block
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_bits_client_xact_id <= io_in_0_acquire_bits_client_xact_id
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_bits_addr_beat <= io_in_0_acquire_bits_addr_beat
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_bits_is_builtin_type <= io_in_0_acquire_bits_is_builtin_type
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_bits_a_type <= io_in_0_acquire_bits_a_type
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_bits_union <= io_in_0_acquire_bits_union
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_acquire_bits_data <= io_in_0_acquire_bits_data
    ClientUncachedTileLinkIOArbiter_1_1.io_in_0_grant_ready <= io_in_0_grant_ready
    ClientUncachedTileLinkIOArbiter_1_1.io_out_acquire_ready <= io_out_0_acquire_ready
    ClientUncachedTileLinkIOArbiter_1_1.io_out_grant_valid <= io_out_0_grant_valid
    ClientUncachedTileLinkIOArbiter_1_1.io_out_grant_bits_addr_beat <= io_out_0_grant_bits_addr_beat
    ClientUncachedTileLinkIOArbiter_1_1.io_out_grant_bits_client_xact_id <= io_out_0_grant_bits_client_xact_id
    ClientUncachedTileLinkIOArbiter_1_1.io_out_grant_bits_manager_xact_id <= io_out_0_grant_bits_manager_xact_id
    ClientUncachedTileLinkIOArbiter_1_1.io_out_grant_bits_is_builtin_type <= io_out_0_grant_bits_is_builtin_type
    ClientUncachedTileLinkIOArbiter_1_1.io_out_grant_bits_g_type <= io_out_0_grant_bits_g_type
    ClientUncachedTileLinkIOArbiter_1_1.io_out_grant_bits_data <= io_out_0_grant_bits_data

  module LockingRRArbiter_9 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr_block : UInt<26>
    input io_in_0_bits_client_xact_id : UInt<4>
    input io_in_0_bits_addr_beat : UInt<3>
    input io_in_0_bits_is_builtin_type : UInt<1>
    input io_in_0_bits_a_type : UInt<3>
    input io_in_0_bits_union : UInt<11>
    input io_in_0_bits_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_addr_block : UInt<26>
    input io_in_1_bits_client_xact_id : UInt<4>
    input io_in_1_bits_addr_beat : UInt<3>
    input io_in_1_bits_is_builtin_type : UInt<1>
    input io_in_1_bits_a_type : UInt<3>
    input io_in_1_bits_union : UInt<11>
    input io_in_1_bits_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_block : UInt<26>
    output io_out_bits_client_xact_id : UInt<4>
    output io_out_bits_addr_beat : UInt<3>
    output io_out_bits_is_builtin_type : UInt<1>
    output io_out_bits_a_type : UInt<3>
    output io_out_bits_union : UInt<11>
    output io_out_bits_data : UInt<64>
    output io_chosen : UInt<1>
  
    wire choice : UInt<1>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_addr_block : UInt<26>
    wire GEN_0_bits_client_xact_id : UInt<4>
    wire GEN_0_bits_addr_beat : UInt<3>
    wire GEN_0_bits_is_builtin_type : UInt<1>
    wire GEN_0_bits_a_type : UInt<3>
    wire GEN_0_bits_union : UInt<11>
    wire GEN_0_bits_data : UInt<64>
    node GEN_8 = mux(io_chosen, io_in_1_ready, io_in_0_ready)
    node GEN_9 = mux(io_chosen, io_in_1_valid, io_in_0_valid)
    node GEN_10 = mux(io_chosen, io_in_1_bits_addr_block, io_in_0_bits_addr_block)
    node GEN_11 = mux(io_chosen, io_in_1_bits_client_xact_id, io_in_0_bits_client_xact_id)
    node GEN_12 = mux(io_chosen, io_in_1_bits_addr_beat, io_in_0_bits_addr_beat)
    node GEN_13 = mux(io_chosen, io_in_1_bits_is_builtin_type, io_in_0_bits_is_builtin_type)
    node GEN_14 = mux(io_chosen, io_in_1_bits_a_type, io_in_0_bits_a_type)
    node GEN_15 = mux(io_chosen, io_in_1_bits_union, io_in_0_bits_union)
    node GEN_16 = mux(io_chosen, io_in_1_bits_data, io_in_0_bits_data)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_addr_block : UInt<26>
    wire GEN_1_bits_client_xact_id : UInt<4>
    wire GEN_1_bits_addr_beat : UInt<3>
    wire GEN_1_bits_is_builtin_type : UInt<1>
    wire GEN_1_bits_a_type : UInt<3>
    wire GEN_1_bits_union : UInt<11>
    wire GEN_1_bits_data : UInt<64>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_addr_block : UInt<26>
    wire GEN_2_bits_client_xact_id : UInt<4>
    wire GEN_2_bits_addr_beat : UInt<3>
    wire GEN_2_bits_is_builtin_type : UInt<1>
    wire GEN_2_bits_a_type : UInt<3>
    wire GEN_2_bits_union : UInt<11>
    wire GEN_2_bits_data : UInt<64>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_addr_block : UInt<26>
    wire GEN_3_bits_client_xact_id : UInt<4>
    wire GEN_3_bits_addr_beat : UInt<3>
    wire GEN_3_bits_is_builtin_type : UInt<1>
    wire GEN_3_bits_a_type : UInt<3>
    wire GEN_3_bits_union : UInt<11>
    wire GEN_3_bits_data : UInt<64>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_addr_block : UInt<26>
    wire GEN_4_bits_client_xact_id : UInt<4>
    wire GEN_4_bits_addr_beat : UInt<3>
    wire GEN_4_bits_is_builtin_type : UInt<1>
    wire GEN_4_bits_a_type : UInt<3>
    wire GEN_4_bits_union : UInt<11>
    wire GEN_4_bits_data : UInt<64>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_addr_block : UInt<26>
    wire GEN_5_bits_client_xact_id : UInt<4>
    wire GEN_5_bits_addr_beat : UInt<3>
    wire GEN_5_bits_is_builtin_type : UInt<1>
    wire GEN_5_bits_a_type : UInt<3>
    wire GEN_5_bits_union : UInt<11>
    wire GEN_5_bits_data : UInt<64>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_addr_block : UInt<26>
    wire GEN_6_bits_client_xact_id : UInt<4>
    wire GEN_6_bits_addr_beat : UInt<3>
    wire GEN_6_bits_is_builtin_type : UInt<1>
    wire GEN_6_bits_a_type : UInt<3>
    wire GEN_6_bits_union : UInt<11>
    wire GEN_6_bits_data : UInt<64>
    wire GEN_7_ready : UInt<1>
    wire GEN_7_valid : UInt<1>
    wire GEN_7_bits_addr_block : UInt<26>
    wire GEN_7_bits_client_xact_id : UInt<4>
    wire GEN_7_bits_addr_beat : UInt<3>
    wire GEN_7_bits_is_builtin_type : UInt<1>
    wire GEN_7_bits_a_type : UInt<3>
    wire GEN_7_bits_union : UInt<11>
    wire GEN_7_bits_data : UInt<64>
    reg T_766 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_768 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_768)
    node T_770 = neq(T_766, UInt<3>("h0"))
    wire T_779_0 : UInt<3>
    node T_781 = eq(io_out_bits_a_type, UInt<3>("h3"))
    node T_782 = and(io_out_bits_is_builtin_type, T_781)
    node T_783 = and(io_out_ready, io_out_valid)
    node T_784 = and(T_783, T_782)
    node T_788 = add(T_766, UInt<3>("h1"))
    node T_789 = tail(T_788, 1)
    node GEN_17 = mux(T_784, io_chosen, T_768)
    node GEN_18 = mux(T_784, T_789, T_766)
    node GEN_19 = mux(T_770, T_768, choice)
    reg lastGrant : UInt<1>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_20 = mux(T_783, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node T_795 = or(validMask_1, io_in_0_valid)
    node T_799 = eq(validMask_1, UInt<1>("h0"))
    node T_801 = eq(T_795, UInt<1>("h0"))
    node T_805 = or(grantMask_1, T_801)
    node T_807 = eq(T_768, UInt<1>("h0"))
    node T_808 = mux(T_770, T_807, T_799)
    node T_809 = and(T_808, io_out_ready)
    node T_812 = mux(T_770, T_768, T_805)
    node T_813 = and(T_812, io_out_ready)
    node GEN_21 = mux(io_in_0_valid, UInt<1>("h0"), UInt<1>("h1"))
    node GEN_22 = mux(validMask_1, UInt<1>("h1"), GEN_21)
    io_in_0_ready <= T_809
    io_in_1_ready <= T_813
    io_out_valid <= GEN_0_valid
    io_out_bits_addr_block <= GEN_1_bits_addr_block
    io_out_bits_client_xact_id <= GEN_2_bits_client_xact_id
    io_out_bits_addr_beat <= GEN_3_bits_addr_beat
    io_out_bits_is_builtin_type <= GEN_4_bits_is_builtin_type
    io_out_bits_a_type <= GEN_5_bits_a_type
    io_out_bits_union <= GEN_6_bits_union
    io_out_bits_data <= GEN_7_bits_data
    io_chosen <= GEN_19
    choice <= GEN_22
    GEN_0_ready <= GEN_8
    GEN_0_valid <= GEN_9
    GEN_0_bits_addr_block <= GEN_10
    GEN_0_bits_client_xact_id <= GEN_11
    GEN_0_bits_addr_beat <= GEN_12
    GEN_0_bits_is_builtin_type <= GEN_13
    GEN_0_bits_a_type <= GEN_14
    GEN_0_bits_union <= GEN_15
    GEN_0_bits_data <= GEN_16
    GEN_1_ready <= GEN_8
    GEN_1_valid <= GEN_9
    GEN_1_bits_addr_block <= GEN_10
    GEN_1_bits_client_xact_id <= GEN_11
    GEN_1_bits_addr_beat <= GEN_12
    GEN_1_bits_is_builtin_type <= GEN_13
    GEN_1_bits_a_type <= GEN_14
    GEN_1_bits_union <= GEN_15
    GEN_1_bits_data <= GEN_16
    GEN_2_ready <= GEN_8
    GEN_2_valid <= GEN_9
    GEN_2_bits_addr_block <= GEN_10
    GEN_2_bits_client_xact_id <= GEN_11
    GEN_2_bits_addr_beat <= GEN_12
    GEN_2_bits_is_builtin_type <= GEN_13
    GEN_2_bits_a_type <= GEN_14
    GEN_2_bits_union <= GEN_15
    GEN_2_bits_data <= GEN_16
    GEN_3_ready <= GEN_8
    GEN_3_valid <= GEN_9
    GEN_3_bits_addr_block <= GEN_10
    GEN_3_bits_client_xact_id <= GEN_11
    GEN_3_bits_addr_beat <= GEN_12
    GEN_3_bits_is_builtin_type <= GEN_13
    GEN_3_bits_a_type <= GEN_14
    GEN_3_bits_union <= GEN_15
    GEN_3_bits_data <= GEN_16
    GEN_4_ready <= GEN_8
    GEN_4_valid <= GEN_9
    GEN_4_bits_addr_block <= GEN_10
    GEN_4_bits_client_xact_id <= GEN_11
    GEN_4_bits_addr_beat <= GEN_12
    GEN_4_bits_is_builtin_type <= GEN_13
    GEN_4_bits_a_type <= GEN_14
    GEN_4_bits_union <= GEN_15
    GEN_4_bits_data <= GEN_16
    GEN_5_ready <= GEN_8
    GEN_5_valid <= GEN_9
    GEN_5_bits_addr_block <= GEN_10
    GEN_5_bits_client_xact_id <= GEN_11
    GEN_5_bits_addr_beat <= GEN_12
    GEN_5_bits_is_builtin_type <= GEN_13
    GEN_5_bits_a_type <= GEN_14
    GEN_5_bits_union <= GEN_15
    GEN_5_bits_data <= GEN_16
    GEN_6_ready <= GEN_8
    GEN_6_valid <= GEN_9
    GEN_6_bits_addr_block <= GEN_10
    GEN_6_bits_client_xact_id <= GEN_11
    GEN_6_bits_addr_beat <= GEN_12
    GEN_6_bits_is_builtin_type <= GEN_13
    GEN_6_bits_a_type <= GEN_14
    GEN_6_bits_union <= GEN_15
    GEN_6_bits_data <= GEN_16
    GEN_7_ready <= GEN_8
    GEN_7_valid <= GEN_9
    GEN_7_bits_addr_block <= GEN_10
    GEN_7_bits_client_xact_id <= GEN_11
    GEN_7_bits_addr_beat <= GEN_12
    GEN_7_bits_is_builtin_type <= GEN_13
    GEN_7_bits_a_type <= GEN_14
    GEN_7_bits_union <= GEN_15
    GEN_7_bits_data <= GEN_16
    T_766 <= GEN_18
    T_768 <= GEN_17
    lastGrant <= GEN_20

  module ReorderQueue :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_data : UInt<1>
    input io_enq_bits_tag : UInt<4>
    input io_deq_valid : UInt<1>
    input io_deq_tag : UInt<4>
    output io_deq_data : UInt<1>
    output io_deq_matches : UInt<1>
  
    mem T_31 :
      data-type => UInt<1>
      depth => 16
      read-latency => 0
      write-latency => 1
      reader => T_59
      writer => T_63
      read-under-write => undefined
    T_31.T_59.en <= UInt<1>("h1")
    T_31.T_59.addr <= io_deq_tag
    T_31.T_63.en <= T_62
    T_31.T_63.mask <= T_62
    T_31.T_63.addr <= io_enq_bits_tag
    T_31.T_63.data <= io_enq_bits_data
    wire T_53_0 : UInt<1>
    wire T_53_1 : UInt<1>
    wire T_53_2 : UInt<1>
    wire T_53_3 : UInt<1>
    wire T_53_4 : UInt<1>
    wire T_53_5 : UInt<1>
    wire T_53_6 : UInt<1>
    wire T_53_7 : UInt<1>
    wire T_53_8 : UInt<1>
    wire T_53_9 : UInt<1>
    wire T_53_10 : UInt<1>
    wire T_53_11 : UInt<1>
    wire T_53_12 : UInt<1>
    wire T_53_13 : UInt<1>
    wire T_53_14 : UInt<1>
    wire T_53_15 : UInt<1>
    reg T_57_0 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_1 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_2 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_3 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_4 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_5 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_6 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_7 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_8 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_9 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_10 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_11 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_12 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_13 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_14 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_57_15 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    wire GEN_0 : UInt<1>
    node GEN_4 = mux(eq(UInt<4>("h1"), io_enq_bits_tag), T_57_1, T_57_0)
    node GEN_5 = mux(eq(UInt<4>("h2"), io_enq_bits_tag), T_57_2, GEN_4)
    node GEN_6 = mux(eq(UInt<4>("h3"), io_enq_bits_tag), T_57_3, GEN_5)
    node GEN_7 = mux(eq(UInt<4>("h4"), io_enq_bits_tag), T_57_4, GEN_6)
    node GEN_8 = mux(eq(UInt<4>("h5"), io_enq_bits_tag), T_57_5, GEN_7)
    node GEN_9 = mux(eq(UInt<4>("h6"), io_enq_bits_tag), T_57_6, GEN_8)
    node GEN_10 = mux(eq(UInt<4>("h7"), io_enq_bits_tag), T_57_7, GEN_9)
    node GEN_11 = mux(eq(UInt<4>("h8"), io_enq_bits_tag), T_57_8, GEN_10)
    node GEN_12 = mux(eq(UInt<4>("h9"), io_enq_bits_tag), T_57_9, GEN_11)
    node GEN_13 = mux(eq(UInt<4>("ha"), io_enq_bits_tag), T_57_10, GEN_12)
    node GEN_14 = mux(eq(UInt<4>("hb"), io_enq_bits_tag), T_57_11, GEN_13)
    node GEN_15 = mux(eq(UInt<4>("hc"), io_enq_bits_tag), T_57_12, GEN_14)
    node GEN_16 = mux(eq(UInt<4>("hd"), io_enq_bits_tag), T_57_13, GEN_15)
    node GEN_17 = mux(eq(UInt<4>("he"), io_enq_bits_tag), T_57_14, GEN_16)
    node GEN_18 = mux(eq(UInt<4>("hf"), io_enq_bits_tag), T_57_15, GEN_17)
    wire GEN_1 : UInt<1>
    node GEN_19 = mux(eq(UInt<4>("h1"), io_deq_tag), T_57_1, T_57_0)
    node GEN_20 = mux(eq(UInt<4>("h2"), io_deq_tag), T_57_2, GEN_19)
    node GEN_21 = mux(eq(UInt<4>("h3"), io_deq_tag), T_57_3, GEN_20)
    node GEN_22 = mux(eq(UInt<4>("h4"), io_deq_tag), T_57_4, GEN_21)
    node GEN_23 = mux(eq(UInt<4>("h5"), io_deq_tag), T_57_5, GEN_22)
    node GEN_24 = mux(eq(UInt<4>("h6"), io_deq_tag), T_57_6, GEN_23)
    node GEN_25 = mux(eq(UInt<4>("h7"), io_deq_tag), T_57_7, GEN_24)
    node GEN_26 = mux(eq(UInt<4>("h8"), io_deq_tag), T_57_8, GEN_25)
    node GEN_27 = mux(eq(UInt<4>("h9"), io_deq_tag), T_57_9, GEN_26)
    node GEN_28 = mux(eq(UInt<4>("ha"), io_deq_tag), T_57_10, GEN_27)
    node GEN_29 = mux(eq(UInt<4>("hb"), io_deq_tag), T_57_11, GEN_28)
    node GEN_30 = mux(eq(UInt<4>("hc"), io_deq_tag), T_57_12, GEN_29)
    node GEN_31 = mux(eq(UInt<4>("hd"), io_deq_tag), T_57_13, GEN_30)
    node GEN_32 = mux(eq(UInt<4>("he"), io_deq_tag), T_57_14, GEN_31)
    node GEN_33 = mux(eq(UInt<4>("hf"), io_deq_tag), T_57_15, GEN_32)
    node T_61 = eq(GEN_1, UInt<1>("h0"))
    node T_62 = and(io_enq_valid, io_enq_ready)
    wire GEN_2 : UInt<1>
    node GEN_34 = mux(eq(UInt<4>("h0"), io_enq_bits_tag), UInt<1>("h0"), T_57_0)
    node GEN_35 = mux(eq(UInt<4>("h1"), io_enq_bits_tag), UInt<1>("h0"), T_57_1)
    node GEN_36 = mux(eq(UInt<4>("h2"), io_enq_bits_tag), UInt<1>("h0"), T_57_2)
    node GEN_37 = mux(eq(UInt<4>("h3"), io_enq_bits_tag), UInt<1>("h0"), T_57_3)
    node GEN_38 = mux(eq(UInt<4>("h4"), io_enq_bits_tag), UInt<1>("h0"), T_57_4)
    node GEN_39 = mux(eq(UInt<4>("h5"), io_enq_bits_tag), UInt<1>("h0"), T_57_5)
    node GEN_40 = mux(eq(UInt<4>("h6"), io_enq_bits_tag), UInt<1>("h0"), T_57_6)
    node GEN_41 = mux(eq(UInt<4>("h7"), io_enq_bits_tag), UInt<1>("h0"), T_57_7)
    node GEN_42 = mux(eq(UInt<4>("h8"), io_enq_bits_tag), UInt<1>("h0"), T_57_8)
    node GEN_43 = mux(eq(UInt<4>("h9"), io_enq_bits_tag), UInt<1>("h0"), T_57_9)
    node GEN_44 = mux(eq(UInt<4>("ha"), io_enq_bits_tag), UInt<1>("h0"), T_57_10)
    node GEN_45 = mux(eq(UInt<4>("hb"), io_enq_bits_tag), UInt<1>("h0"), T_57_11)
    node GEN_46 = mux(eq(UInt<4>("hc"), io_enq_bits_tag), UInt<1>("h0"), T_57_12)
    node GEN_47 = mux(eq(UInt<4>("hd"), io_enq_bits_tag), UInt<1>("h0"), T_57_13)
    node GEN_48 = mux(eq(UInt<4>("he"), io_enq_bits_tag), UInt<1>("h0"), T_57_14)
    node GEN_49 = mux(eq(UInt<4>("hf"), io_enq_bits_tag), UInt<1>("h0"), T_57_15)
    node GEN_54 = mux(T_62, GEN_34, T_57_0)
    node GEN_55 = mux(T_62, GEN_35, T_57_1)
    node GEN_56 = mux(T_62, GEN_36, T_57_2)
    node GEN_57 = mux(T_62, GEN_37, T_57_3)
    node GEN_58 = mux(T_62, GEN_38, T_57_4)
    node GEN_59 = mux(T_62, GEN_39, T_57_5)
    node GEN_60 = mux(T_62, GEN_40, T_57_6)
    node GEN_61 = mux(T_62, GEN_41, T_57_7)
    node GEN_62 = mux(T_62, GEN_42, T_57_8)
    node GEN_63 = mux(T_62, GEN_43, T_57_9)
    node GEN_64 = mux(T_62, GEN_44, T_57_10)
    node GEN_65 = mux(T_62, GEN_45, T_57_11)
    node GEN_66 = mux(T_62, GEN_46, T_57_12)
    node GEN_67 = mux(T_62, GEN_47, T_57_13)
    node GEN_68 = mux(T_62, GEN_48, T_57_14)
    node GEN_69 = mux(T_62, GEN_49, T_57_15)
    wire GEN_3 : UInt<1>
    node GEN_70 = mux(eq(UInt<4>("h0"), io_deq_tag), UInt<1>("h1"), GEN_54)
    node GEN_71 = mux(eq(UInt<4>("h1"), io_deq_tag), UInt<1>("h1"), GEN_55)
    node GEN_72 = mux(eq(UInt<4>("h2"), io_deq_tag), UInt<1>("h1"), GEN_56)
    node GEN_73 = mux(eq(UInt<4>("h3"), io_deq_tag), UInt<1>("h1"), GEN_57)
    node GEN_74 = mux(eq(UInt<4>("h4"), io_deq_tag), UInt<1>("h1"), GEN_58)
    node GEN_75 = mux(eq(UInt<4>("h5"), io_deq_tag), UInt<1>("h1"), GEN_59)
    node GEN_76 = mux(eq(UInt<4>("h6"), io_deq_tag), UInt<1>("h1"), GEN_60)
    node GEN_77 = mux(eq(UInt<4>("h7"), io_deq_tag), UInt<1>("h1"), GEN_61)
    node GEN_78 = mux(eq(UInt<4>("h8"), io_deq_tag), UInt<1>("h1"), GEN_62)
    node GEN_79 = mux(eq(UInt<4>("h9"), io_deq_tag), UInt<1>("h1"), GEN_63)
    node GEN_80 = mux(eq(UInt<4>("ha"), io_deq_tag), UInt<1>("h1"), GEN_64)
    node GEN_81 = mux(eq(UInt<4>("hb"), io_deq_tag), UInt<1>("h1"), GEN_65)
    node GEN_82 = mux(eq(UInt<4>("hc"), io_deq_tag), UInt<1>("h1"), GEN_66)
    node GEN_83 = mux(eq(UInt<4>("hd"), io_deq_tag), UInt<1>("h1"), GEN_67)
    node GEN_84 = mux(eq(UInt<4>("he"), io_deq_tag), UInt<1>("h1"), GEN_68)
    node GEN_85 = mux(eq(UInt<4>("hf"), io_deq_tag), UInt<1>("h1"), GEN_69)
    node GEN_86 = mux(io_deq_valid, GEN_70, GEN_54)
    node GEN_87 = mux(io_deq_valid, GEN_71, GEN_55)
    node GEN_88 = mux(io_deq_valid, GEN_72, GEN_56)
    node GEN_89 = mux(io_deq_valid, GEN_73, GEN_57)
    node GEN_90 = mux(io_deq_valid, GEN_74, GEN_58)
    node GEN_91 = mux(io_deq_valid, GEN_75, GEN_59)
    node GEN_92 = mux(io_deq_valid, GEN_76, GEN_60)
    node GEN_93 = mux(io_deq_valid, GEN_77, GEN_61)
    node GEN_94 = mux(io_deq_valid, GEN_78, GEN_62)
    node GEN_95 = mux(io_deq_valid, GEN_79, GEN_63)
    node GEN_96 = mux(io_deq_valid, GEN_80, GEN_64)
    node GEN_97 = mux(io_deq_valid, GEN_81, GEN_65)
    node GEN_98 = mux(io_deq_valid, GEN_82, GEN_66)
    node GEN_99 = mux(io_deq_valid, GEN_83, GEN_67)
    node GEN_100 = mux(io_deq_valid, GEN_84, GEN_68)
    node GEN_101 = mux(io_deq_valid, GEN_85, GEN_69)
    io_enq_ready <= GEN_0
    io_deq_data <= T_31.T_59.data
    io_deq_matches <= T_61
    T_57_0 <= GEN_86
    T_57_1 <= GEN_87
    T_57_2 <= GEN_88
    T_57_3 <= GEN_89
    T_57_4 <= GEN_90
    T_57_5 <= GEN_91
    T_57_6 <= GEN_92
    T_57_7 <= GEN_93
    T_57_8 <= GEN_94
    T_57_9 <= GEN_95
    T_57_10 <= GEN_96
    T_57_11 <= GEN_97
    T_57_12 <= GEN_98
    T_57_13 <= GEN_99
    T_57_14 <= GEN_100
    T_57_15 <= GEN_101
    GEN_0 <= GEN_18
    GEN_1 <= GEN_33

  module ClientTileLinkIOUnwrapper :
    input clk : Clock
    input reset : UInt<1>
    output io_in_acquire_ready : UInt<1>
    input io_in_acquire_valid : UInt<1>
    input io_in_acquire_bits_addr_block : UInt<26>
    input io_in_acquire_bits_client_xact_id : UInt<4>
    input io_in_acquire_bits_addr_beat : UInt<3>
    input io_in_acquire_bits_is_builtin_type : UInt<1>
    input io_in_acquire_bits_a_type : UInt<3>
    input io_in_acquire_bits_union : UInt<11>
    input io_in_acquire_bits_data : UInt<64>
    input io_in_probe_ready : UInt<1>
    output io_in_probe_valid : UInt<1>
    output io_in_probe_bits_addr_block : UInt<26>
    output io_in_probe_bits_p_type : UInt<2>
    output io_in_release_ready : UInt<1>
    input io_in_release_valid : UInt<1>
    input io_in_release_bits_addr_beat : UInt<3>
    input io_in_release_bits_addr_block : UInt<26>
    input io_in_release_bits_client_xact_id : UInt<4>
    input io_in_release_bits_voluntary : UInt<1>
    input io_in_release_bits_r_type : UInt<3>
    input io_in_release_bits_data : UInt<64>
    input io_in_grant_ready : UInt<1>
    output io_in_grant_valid : UInt<1>
    output io_in_grant_bits_addr_beat : UInt<3>
    output io_in_grant_bits_client_xact_id : UInt<4>
    output io_in_grant_bits_manager_xact_id : UInt<1>
    output io_in_grant_bits_is_builtin_type : UInt<1>
    output io_in_grant_bits_g_type : UInt<4>
    output io_in_grant_bits_data : UInt<64>
    output io_in_grant_bits_manager_id : UInt<1>
    output io_in_finish_ready : UInt<1>
    input io_in_finish_valid : UInt<1>
    input io_in_finish_bits_manager_xact_id : UInt<1>
    input io_in_finish_bits_manager_id : UInt<1>
    input io_out_acquire_ready : UInt<1>
    output io_out_acquire_valid : UInt<1>
    output io_out_acquire_bits_addr_block : UInt<26>
    output io_out_acquire_bits_client_xact_id : UInt<4>
    output io_out_acquire_bits_addr_beat : UInt<3>
    output io_out_acquire_bits_is_builtin_type : UInt<1>
    output io_out_acquire_bits_a_type : UInt<3>
    output io_out_acquire_bits_union : UInt<11>
    output io_out_acquire_bits_data : UInt<64>
    output io_out_grant_ready : UInt<1>
    input io_out_grant_valid : UInt<1>
    input io_out_grant_bits_addr_beat : UInt<3>
    input io_out_grant_bits_client_xact_id : UInt<4>
    input io_out_grant_bits_manager_xact_id : UInt<1>
    input io_out_grant_bits_is_builtin_type : UInt<1>
    input io_out_grant_bits_g_type : UInt<4>
    input io_out_grant_bits_data : UInt<64>
  
    inst acqArb of LockingRRArbiter_9
    inst acqRoq of ReorderQueue
    inst relRoq of ReorderQueue
    wire T_1366_0 : UInt<3>
    node T_1368 = eq(io_in_acquire_bits_a_type, UInt<3>("h3"))
    node T_1369 = and(io_in_acquire_bits_is_builtin_type, T_1368)
    node T_1371 = eq(T_1369, UInt<1>("h0"))
    node T_1373 = eq(io_in_acquire_bits_addr_beat, UInt<3>("h0"))
    node acq_roq_enq = or(T_1371, T_1373)
    node T_1375 = eq(io_in_release_bits_r_type, UInt<3>("h0"))
    node T_1376 = eq(io_in_release_bits_r_type, UInt<3>("h1"))
    node T_1377 = eq(io_in_release_bits_r_type, UInt<3>("h2"))
    node T_1378 = or(T_1375, T_1376)
    node T_1379 = or(T_1378, T_1377)
    node T_1382 = eq(T_1379, UInt<1>("h0"))
    node T_1384 = eq(io_in_release_bits_addr_beat, UInt<3>("h0"))
    node rel_roq_enq = or(T_1382, T_1384)
    node T_1386 = eq(acq_roq_enq, UInt<1>("h0"))
    node acq_roq_ready = or(T_1386, acqRoq.io_enq_ready)
    node T_1388 = eq(rel_roq_enq, UInt<1>("h0"))
    node rel_roq_ready = or(T_1388, relRoq.io_enq_ready)
    node T_1389 = and(io_in_acquire_valid, acqArb.io_in_0_ready)
    node T_1390 = and(T_1389, acq_roq_enq)
    node T_1391 = and(io_in_acquire_valid, acq_roq_ready)
    node T_1394 = mux(io_in_acquire_bits_is_builtin_type, io_in_acquire_bits_a_type, UInt<3>("h1"))
    wire T_1423_addr_block : UInt<26>
    wire T_1423_client_xact_id : UInt<4>
    wire T_1423_addr_beat : UInt<3>
    wire T_1423_is_builtin_type : UInt<1>
    wire T_1423_a_type : UInt<3>
    wire T_1423_union : UInt<11>
    wire T_1423_data : UInt<64>
    node T_1451 = and(acq_roq_ready, acqArb.io_in_0_ready)
    node T_1452 = and(io_in_release_valid, acqArb.io_in_1_ready)
    node T_1453 = and(T_1452, rel_roq_enq)
    node T_1454 = and(io_in_release_valid, rel_roq_ready)
    wire T_1577_addr_block : UInt<26>
    wire T_1577_client_xact_id : UInt<4>
    wire T_1577_addr_beat : UInt<3>
    wire T_1577_is_builtin_type : UInt<1>
    wire T_1577_a_type : UInt<3>
    wire T_1577_union : UInt<11>
    wire T_1577_data : UInt<64>
    node T_1605 = and(rel_roq_ready, acqArb.io_in_1_ready)
    node T_1606 = and(io_out_grant_ready, io_out_grant_valid)
    wire T_1614_0 : UInt<3>
    node GEN_0 = pad(UInt<3>("h5"), 4)
    node T_1616 = eq(io_out_grant_bits_g_type, GEN_0)
    node T_1617 = eq(io_out_grant_bits_g_type, UInt<4>("h0"))
    node T_1618 = mux(io_out_grant_bits_is_builtin_type, T_1616, T_1617)
    node T_1621 = eq(T_1618, UInt<1>("h0"))
    node T_1623 = eq(io_out_grant_bits_addr_beat, UInt<3>("h7"))
    node T_1624 = or(T_1621, T_1623)
    node grant_deq_roq = and(T_1606, T_1624)
    node T_1625 = and(acqRoq.io_deq_matches, grant_deq_roq)
    node T_1627 = eq(acqRoq.io_deq_matches, UInt<1>("h0"))
    node T_1628 = and(T_1627, grant_deq_roq)
    node T_1630 = eq(grant_deq_roq, UInt<1>("h0"))
    node T_1631 = or(T_1630, acqRoq.io_deq_matches)
    node T_1632 = or(T_1631, relRoq.io_deq_matches)
    node T_1633 = or(T_1632, reset)
    node T_1635 = eq(T_1633, UInt<1>("h0"))
    node T_1636 = mux(acqRoq.io_deq_data, io_out_grant_bits_g_type, UInt<4>("h0"))
    wire acq_grant_addr_beat : UInt<3>
    wire acq_grant_client_xact_id : UInt<4>
    wire acq_grant_manager_xact_id : UInt<1>
    wire acq_grant_is_builtin_type : UInt<1>
    wire acq_grant_g_type : UInt<4>
    wire acq_grant_data : UInt<64>
    node T_1691 = eq(io_in_release_valid, UInt<1>("h0"))
    node T_1692 = or(T_1691, io_in_release_bits_voluntary)
    node T_1693 = or(T_1692, reset)
    node T_1695 = eq(T_1693, UInt<1>("h0"))
    wire rel_grant_addr_beat : UInt<3>
    wire rel_grant_client_xact_id : UInt<4>
    wire rel_grant_manager_xact_id : UInt<1>
    wire rel_grant_is_builtin_type : UInt<1>
    wire rel_grant_g_type : UInt<4>
    wire rel_grant_data : UInt<64>
    node T_1751_addr_beat = mux(acqRoq.io_deq_matches, acq_grant_addr_beat, rel_grant_addr_beat)
    node T_1751_client_xact_id = mux(acqRoq.io_deq_matches, acq_grant_client_xact_id, rel_grant_client_xact_id)
    node T_1751_manager_xact_id = mux(acqRoq.io_deq_matches, acq_grant_manager_xact_id, rel_grant_manager_xact_id)
    node T_1751_is_builtin_type = mux(acqRoq.io_deq_matches, acq_grant_is_builtin_type, UInt<1>("h1"))
    node T_1751_g_type = mux(acqRoq.io_deq_matches, acq_grant_g_type, UInt<4>("h0"))
    node T_1751_data = mux(acqRoq.io_deq_matches, acq_grant_data, rel_grant_data)
    io_in_acquire_ready <= T_1451
    io_in_probe_valid <= UInt<1>("h0")
    io_in_probe_bits_addr_block <= UInt<26>("h1b9a0de")
    io_in_probe_bits_p_type <= UInt<2>("h2")
    io_in_release_ready <= T_1605
    io_in_grant_valid <= io_out_grant_valid
    io_in_grant_bits_addr_beat <= T_1751_addr_beat
    io_in_grant_bits_client_xact_id <= T_1751_client_xact_id
    io_in_grant_bits_manager_xact_id <= T_1751_manager_xact_id
    io_in_grant_bits_is_builtin_type <= T_1751_is_builtin_type
    io_in_grant_bits_g_type <= T_1751_g_type
    io_in_grant_bits_data <= T_1751_data
    io_in_grant_bits_manager_id <= UInt<1>("h0")
    io_in_finish_ready <= UInt<1>("h0")
    io_out_acquire_valid <= acqArb.io_out_valid
    io_out_acquire_bits_addr_block <= acqArb.io_out_bits_addr_block
    io_out_acquire_bits_client_xact_id <= acqArb.io_out_bits_client_xact_id
    io_out_acquire_bits_addr_beat <= acqArb.io_out_bits_addr_beat
    io_out_acquire_bits_is_builtin_type <= acqArb.io_out_bits_is_builtin_type
    io_out_acquire_bits_a_type <= acqArb.io_out_bits_a_type
    io_out_acquire_bits_union <= acqArb.io_out_bits_union
    io_out_acquire_bits_data <= acqArb.io_out_bits_data
    io_out_grant_ready <= io_in_grant_ready
    acqArb.io_in_0_valid <= T_1391
    acqArb.io_in_0_bits_addr_block <= T_1423_addr_block
    acqArb.io_in_0_bits_client_xact_id <= T_1423_client_xact_id
    acqArb.io_in_0_bits_addr_beat <= T_1423_addr_beat
    acqArb.io_in_0_bits_is_builtin_type <= UInt<1>("h1")
    acqArb.io_in_0_bits_a_type <= T_1423_a_type
    acqArb.io_in_0_bits_union <= T_1423_union
    acqArb.io_in_0_bits_data <= T_1423_data
    acqArb.io_in_1_valid <= T_1454
    acqArb.io_in_1_bits_addr_block <= T_1577_addr_block
    acqArb.io_in_1_bits_client_xact_id <= T_1577_client_xact_id
    acqArb.io_in_1_bits_addr_beat <= T_1577_addr_beat
    acqArb.io_in_1_bits_is_builtin_type <= UInt<1>("h1")
    acqArb.io_in_1_bits_a_type <= UInt<3>("h3")
    acqArb.io_in_1_bits_union <= UInt<11>("h1ff")
    acqArb.io_in_1_bits_data <= T_1577_data
    acqArb.io_out_ready <= io_out_acquire_ready
    acqRoq.io_enq_valid <= T_1390
    acqRoq.io_enq_bits_data <= io_in_acquire_bits_is_builtin_type
    acqRoq.io_enq_bits_tag <= io_in_acquire_bits_client_xact_id
    acqRoq.io_deq_valid <= T_1625
    acqRoq.io_deq_tag <= io_out_grant_bits_client_xact_id
    relRoq.io_enq_valid <= T_1453
    relRoq.io_enq_bits_data <= io_in_release_bits_voluntary
    relRoq.io_enq_bits_tag <= io_in_release_bits_client_xact_id
    relRoq.io_deq_valid <= T_1628
    relRoq.io_deq_tag <= io_out_grant_bits_client_xact_id
    T_1423_addr_block <= io_in_acquire_bits_addr_block
    T_1423_client_xact_id <= io_in_acquire_bits_client_xact_id
    T_1423_addr_beat <= io_in_acquire_bits_addr_beat
    T_1423_a_type <= T_1394
    T_1423_union <= io_in_acquire_bits_union
    T_1423_data <= io_in_acquire_bits_data
    T_1577_addr_block <= io_in_release_bits_addr_block
    T_1577_client_xact_id <= io_in_release_bits_client_xact_id
    T_1577_addr_beat <= io_in_release_bits_addr_beat
    T_1577_data <= io_in_release_bits_data
    acq_grant_addr_beat <= io_out_grant_bits_addr_beat
    acq_grant_client_xact_id <= io_out_grant_bits_client_xact_id
    acq_grant_manager_xact_id <= io_out_grant_bits_manager_xact_id
    acq_grant_is_builtin_type <= acqRoq.io_deq_data
    acq_grant_g_type <= T_1636
    acq_grant_data <= io_out_grant_bits_data
    rel_grant_addr_beat <= io_out_grant_bits_addr_beat
    rel_grant_client_xact_id <= io_out_grant_bits_client_xact_id
    rel_grant_manager_xact_id <= io_out_grant_bits_manager_xact_id
    rel_grant_data <= io_out_grant_bits_data
    printf(clk, T_1635, "Assertion failed: TileLink Unwrapper: client_xact_id mismatch\n    at Tilelink.scala:120 assert(!grant_deq_roq || acqRoq.io.deq.matches || relRoq.io.deq.matches,\n")
    stop(clk, T_1635, 1)
    printf(clk, T_1695, "Assertion failed: Unwrapper can only process voluntary releases.\n    at Tilelink.scala:134 assert(!io.in.release.valid || io.in.release.bits.isVoluntary(), \"Unwrapper can only process voluntary releases.\")\n")
    stop(clk, T_1695, 1)

  module ClientTileLinkEnqueuer :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<4>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_probe_ready : UInt<1>
    output io_inner_probe_valid : UInt<1>
    output io_inner_probe_bits_addr_block : UInt<26>
    output io_inner_probe_bits_p_type : UInt<2>
    output io_inner_release_ready : UInt<1>
    input io_inner_release_valid : UInt<1>
    input io_inner_release_bits_addr_beat : UInt<3>
    input io_inner_release_bits_addr_block : UInt<26>
    input io_inner_release_bits_client_xact_id : UInt<4>
    input io_inner_release_bits_voluntary : UInt<1>
    input io_inner_release_bits_r_type : UInt<3>
    input io_inner_release_bits_data : UInt<64>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<4>
    output io_inner_grant_bits_manager_xact_id : UInt<1>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    output io_inner_grant_bits_manager_id : UInt<1>
    output io_inner_finish_ready : UInt<1>
    input io_inner_finish_valid : UInt<1>
    input io_inner_finish_bits_manager_xact_id : UInt<1>
    input io_inner_finish_bits_manager_id : UInt<1>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<4>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_probe_ready : UInt<1>
    input io_outer_probe_valid : UInt<1>
    input io_outer_probe_bits_addr_block : UInt<26>
    input io_outer_probe_bits_p_type : UInt<2>
    input io_outer_release_ready : UInt<1>
    output io_outer_release_valid : UInt<1>
    output io_outer_release_bits_addr_beat : UInt<3>
    output io_outer_release_bits_addr_block : UInt<26>
    output io_outer_release_bits_client_xact_id : UInt<4>
    output io_outer_release_bits_voluntary : UInt<1>
    output io_outer_release_bits_r_type : UInt<3>
    output io_outer_release_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<4>
    input io_outer_grant_bits_manager_xact_id : UInt<1>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
    input io_outer_grant_bits_manager_id : UInt<1>
    input io_outer_finish_ready : UInt<1>
    output io_outer_finish_valid : UInt<1>
    output io_outer_finish_bits_manager_xact_id : UInt<1>
    output io_outer_finish_bits_manager_id : UInt<1>
  
    io_inner_acquire_ready <= io_outer_acquire_ready
    io_inner_probe_valid <= io_outer_probe_valid
    io_inner_probe_bits_addr_block <= io_outer_probe_bits_addr_block
    io_inner_probe_bits_p_type <= io_outer_probe_bits_p_type
    io_inner_release_ready <= io_outer_release_ready
    io_inner_grant_valid <= io_outer_grant_valid
    io_inner_grant_bits_addr_beat <= io_outer_grant_bits_addr_beat
    io_inner_grant_bits_client_xact_id <= io_outer_grant_bits_client_xact_id
    io_inner_grant_bits_manager_xact_id <= io_outer_grant_bits_manager_xact_id
    io_inner_grant_bits_is_builtin_type <= io_outer_grant_bits_is_builtin_type
    io_inner_grant_bits_g_type <= io_outer_grant_bits_g_type
    io_inner_grant_bits_data <= io_outer_grant_bits_data
    io_inner_grant_bits_manager_id <= io_outer_grant_bits_manager_id
    io_inner_finish_ready <= io_outer_finish_ready
    io_outer_acquire_valid <= io_inner_acquire_valid
    io_outer_acquire_bits_addr_block <= io_inner_acquire_bits_addr_block
    io_outer_acquire_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    io_outer_acquire_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    io_outer_acquire_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    io_outer_acquire_bits_a_type <= io_inner_acquire_bits_a_type
    io_outer_acquire_bits_union <= io_inner_acquire_bits_union
    io_outer_acquire_bits_data <= io_inner_acquire_bits_data
    io_outer_probe_ready <= io_inner_probe_ready
    io_outer_release_valid <= io_inner_release_valid
    io_outer_release_bits_addr_beat <= io_inner_release_bits_addr_beat
    io_outer_release_bits_addr_block <= io_inner_release_bits_addr_block
    io_outer_release_bits_client_xact_id <= io_inner_release_bits_client_xact_id
    io_outer_release_bits_voluntary <= io_inner_release_bits_voluntary
    io_outer_release_bits_r_type <= io_inner_release_bits_r_type
    io_outer_release_bits_data <= io_inner_release_bits_data
    io_outer_grant_ready <= io_inner_grant_ready
    io_outer_finish_valid <= io_inner_finish_valid
    io_outer_finish_bits_manager_xact_id <= io_inner_finish_bits_manager_xact_id
    io_outer_finish_bits_manager_id <= io_inner_finish_bits_manager_id

  module Queue_15 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_addr_block : UInt<26>
    input io_enq_bits_client_xact_id : UInt<1>
    input io_enq_bits_addr_beat : UInt<3>
    input io_enq_bits_is_builtin_type : UInt<1>
    input io_enq_bits_a_type : UInt<3>
    input io_enq_bits_union : UInt<11>
    input io_enq_bits_data : UInt<64>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_addr_block : UInt<26>
    output io_deq_bits_client_xact_id : UInt<1>
    output io_deq_bits_addr_beat : UInt<3>
    output io_deq_bits_is_builtin_type : UInt<1>
    output io_deq_bits_a_type : UInt<3>
    output io_deq_bits_union : UInt<11>
    output io_deq_bits_data : UInt<64>
    output io_count : UInt<1>
  
    mem ram_addr_block :
      data-type => UInt<26>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_304
      writer => T_269
      read-under-write => undefined
    ram_addr_block.T_304.en <= UInt<1>("h1")
    ram_addr_block.T_304.addr <= UInt<1>("h0")
    ram_addr_block.T_269.en <= do_enq
    ram_addr_block.T_269.mask <= do_enq
    ram_addr_block.T_269.addr <= UInt<1>("h0")
    ram_addr_block.T_269.data <= io_enq_bits_addr_block
    mem ram_client_xact_id :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_304
      writer => T_269
      read-under-write => undefined
    ram_client_xact_id.T_304.en <= UInt<1>("h1")
    ram_client_xact_id.T_304.addr <= UInt<1>("h0")
    ram_client_xact_id.T_269.en <= do_enq
    ram_client_xact_id.T_269.mask <= do_enq
    ram_client_xact_id.T_269.addr <= UInt<1>("h0")
    ram_client_xact_id.T_269.data <= io_enq_bits_client_xact_id
    mem ram_addr_beat :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_304
      writer => T_269
      read-under-write => undefined
    ram_addr_beat.T_304.en <= UInt<1>("h1")
    ram_addr_beat.T_304.addr <= UInt<1>("h0")
    ram_addr_beat.T_269.en <= do_enq
    ram_addr_beat.T_269.mask <= do_enq
    ram_addr_beat.T_269.addr <= UInt<1>("h0")
    ram_addr_beat.T_269.data <= io_enq_bits_addr_beat
    mem ram_is_builtin_type :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_304
      writer => T_269
      read-under-write => undefined
    ram_is_builtin_type.T_304.en <= UInt<1>("h1")
    ram_is_builtin_type.T_304.addr <= UInt<1>("h0")
    ram_is_builtin_type.T_269.en <= do_enq
    ram_is_builtin_type.T_269.mask <= do_enq
    ram_is_builtin_type.T_269.addr <= UInt<1>("h0")
    ram_is_builtin_type.T_269.data <= io_enq_bits_is_builtin_type
    mem ram_a_type :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_304
      writer => T_269
      read-under-write => undefined
    ram_a_type.T_304.en <= UInt<1>("h1")
    ram_a_type.T_304.addr <= UInt<1>("h0")
    ram_a_type.T_269.en <= do_enq
    ram_a_type.T_269.mask <= do_enq
    ram_a_type.T_269.addr <= UInt<1>("h0")
    ram_a_type.T_269.data <= io_enq_bits_a_type
    mem ram_union :
      data-type => UInt<11>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_304
      writer => T_269
      read-under-write => undefined
    ram_union.T_304.en <= UInt<1>("h1")
    ram_union.T_304.addr <= UInt<1>("h0")
    ram_union.T_269.en <= do_enq
    ram_union.T_269.mask <= do_enq
    ram_union.T_269.addr <= UInt<1>("h0")
    ram_union.T_269.data <= io_enq_bits_union
    mem ram_data :
      data-type => UInt<64>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_304
      writer => T_269
      read-under-write => undefined
    ram_data.T_304.en <= UInt<1>("h1")
    ram_data.T_304.addr <= UInt<1>("h0")
    ram_data.T_269.en <= do_enq
    ram_data.T_269.mask <= do_enq
    ram_data.T_269.addr <= UInt<1>("h0")
    ram_data.T_269.data <= io_enq_bits_data
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_266 = eq(maybe_full, UInt<1>("h0"))
    node T_267 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_268 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_299 = neq(do_enq, do_deq)
    node GEN_10 = mux(T_299, do_enq, maybe_full)
    node T_301 = eq(T_266, UInt<1>("h0"))
    node T_332 = sub(UInt<1>("h0"), UInt<1>("h0"))
    node ptr_diff = tail(T_332, 1)
    node T_334 = cat(maybe_full, ptr_diff)
    io_enq_ready <= T_266
    io_deq_valid <= T_301
    io_deq_bits_addr_block <= ram_addr_block.T_304.data
    io_deq_bits_client_xact_id <= ram_client_xact_id.T_304.data
    io_deq_bits_addr_beat <= ram_addr_beat.T_304.data
    io_deq_bits_is_builtin_type <= ram_is_builtin_type.T_304.data
    io_deq_bits_a_type <= ram_a_type.T_304.data
    io_deq_bits_union <= ram_union.T_304.data
    io_deq_bits_data <= ram_data.T_304.data
    io_count <= bits(T_334, 0, 0)
    maybe_full <= GEN_10
    do_enq <= T_267
    do_deq <= T_268

  module Queue_16 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_addr_beat : UInt<3>
    input io_enq_bits_client_xact_id : UInt<1>
    input io_enq_bits_manager_xact_id : UInt<4>
    input io_enq_bits_is_builtin_type : UInt<1>
    input io_enq_bits_g_type : UInt<4>
    input io_enq_bits_data : UInt<64>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_addr_beat : UInt<3>
    output io_deq_bits_client_xact_id : UInt<1>
    output io_deq_bits_manager_xact_id : UInt<4>
    output io_deq_bits_is_builtin_type : UInt<1>
    output io_deq_bits_g_type : UInt<4>
    output io_deq_bits_data : UInt<64>
    output io_count : UInt<1>
  
    mem ram_addr_beat :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_260
      read-under-write => undefined
    ram_addr_beat.T_294.en <= UInt<1>("h1")
    ram_addr_beat.T_294.addr <= UInt<1>("h0")
    ram_addr_beat.T_260.en <= do_enq
    ram_addr_beat.T_260.mask <= do_enq
    ram_addr_beat.T_260.addr <= UInt<1>("h0")
    ram_addr_beat.T_260.data <= io_enq_bits_addr_beat
    mem ram_client_xact_id :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_260
      read-under-write => undefined
    ram_client_xact_id.T_294.en <= UInt<1>("h1")
    ram_client_xact_id.T_294.addr <= UInt<1>("h0")
    ram_client_xact_id.T_260.en <= do_enq
    ram_client_xact_id.T_260.mask <= do_enq
    ram_client_xact_id.T_260.addr <= UInt<1>("h0")
    ram_client_xact_id.T_260.data <= io_enq_bits_client_xact_id
    mem ram_manager_xact_id :
      data-type => UInt<4>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_260
      read-under-write => undefined
    ram_manager_xact_id.T_294.en <= UInt<1>("h1")
    ram_manager_xact_id.T_294.addr <= UInt<1>("h0")
    ram_manager_xact_id.T_260.en <= do_enq
    ram_manager_xact_id.T_260.mask <= do_enq
    ram_manager_xact_id.T_260.addr <= UInt<1>("h0")
    ram_manager_xact_id.T_260.data <= io_enq_bits_manager_xact_id
    mem ram_is_builtin_type :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_260
      read-under-write => undefined
    ram_is_builtin_type.T_294.en <= UInt<1>("h1")
    ram_is_builtin_type.T_294.addr <= UInt<1>("h0")
    ram_is_builtin_type.T_260.en <= do_enq
    ram_is_builtin_type.T_260.mask <= do_enq
    ram_is_builtin_type.T_260.addr <= UInt<1>("h0")
    ram_is_builtin_type.T_260.data <= io_enq_bits_is_builtin_type
    mem ram_g_type :
      data-type => UInt<4>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_260
      read-under-write => undefined
    ram_g_type.T_294.en <= UInt<1>("h1")
    ram_g_type.T_294.addr <= UInt<1>("h0")
    ram_g_type.T_260.en <= do_enq
    ram_g_type.T_260.mask <= do_enq
    ram_g_type.T_260.addr <= UInt<1>("h0")
    ram_g_type.T_260.data <= io_enq_bits_g_type
    mem ram_data :
      data-type => UInt<64>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_294
      writer => T_260
      read-under-write => undefined
    ram_data.T_294.en <= UInt<1>("h1")
    ram_data.T_294.addr <= UInt<1>("h0")
    ram_data.T_260.en <= do_enq
    ram_data.T_260.mask <= do_enq
    ram_data.T_260.addr <= UInt<1>("h0")
    ram_data.T_260.data <= io_enq_bits_data
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_257 = eq(maybe_full, UInt<1>("h0"))
    node T_258 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_259 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_289 = neq(do_enq, do_deq)
    node GEN_9 = mux(T_289, do_enq, maybe_full)
    node T_291 = eq(T_257, UInt<1>("h0"))
    node T_321 = sub(UInt<1>("h0"), UInt<1>("h0"))
    node ptr_diff = tail(T_321, 1)
    node T_323 = cat(maybe_full, ptr_diff)
    io_enq_ready <= T_257
    io_deq_valid <= T_291
    io_deq_bits_addr_beat <= ram_addr_beat.T_294.data
    io_deq_bits_client_xact_id <= ram_client_xact_id.T_294.data
    io_deq_bits_manager_xact_id <= ram_manager_xact_id.T_294.data
    io_deq_bits_is_builtin_type <= ram_is_builtin_type.T_294.data
    io_deq_bits_g_type <= ram_g_type.T_294.data
    io_deq_bits_data <= ram_data.T_294.data
    io_count <= bits(T_323, 0, 0)
    maybe_full <= GEN_9
    do_enq <= T_258
    do_deq <= T_259

  module ClientUncachedTileLinkEnqueuer :
    input clk : Clock
    input reset : UInt<1>
    output io_inner_acquire_ready : UInt<1>
    input io_inner_acquire_valid : UInt<1>
    input io_inner_acquire_bits_addr_block : UInt<26>
    input io_inner_acquire_bits_client_xact_id : UInt<1>
    input io_inner_acquire_bits_addr_beat : UInt<3>
    input io_inner_acquire_bits_is_builtin_type : UInt<1>
    input io_inner_acquire_bits_a_type : UInt<3>
    input io_inner_acquire_bits_union : UInt<11>
    input io_inner_acquire_bits_data : UInt<64>
    input io_inner_grant_ready : UInt<1>
    output io_inner_grant_valid : UInt<1>
    output io_inner_grant_bits_addr_beat : UInt<3>
    output io_inner_grant_bits_client_xact_id : UInt<1>
    output io_inner_grant_bits_manager_xact_id : UInt<4>
    output io_inner_grant_bits_is_builtin_type : UInt<1>
    output io_inner_grant_bits_g_type : UInt<4>
    output io_inner_grant_bits_data : UInt<64>
    input io_outer_acquire_ready : UInt<1>
    output io_outer_acquire_valid : UInt<1>
    output io_outer_acquire_bits_addr_block : UInt<26>
    output io_outer_acquire_bits_client_xact_id : UInt<1>
    output io_outer_acquire_bits_addr_beat : UInt<3>
    output io_outer_acquire_bits_is_builtin_type : UInt<1>
    output io_outer_acquire_bits_a_type : UInt<3>
    output io_outer_acquire_bits_union : UInt<11>
    output io_outer_acquire_bits_data : UInt<64>
    output io_outer_grant_ready : UInt<1>
    input io_outer_grant_valid : UInt<1>
    input io_outer_grant_bits_addr_beat : UInt<3>
    input io_outer_grant_bits_client_xact_id : UInt<1>
    input io_outer_grant_bits_manager_xact_id : UInt<4>
    input io_outer_grant_bits_is_builtin_type : UInt<1>
    input io_outer_grant_bits_g_type : UInt<4>
    input io_outer_grant_bits_data : UInt<64>
  
    inst Queue_15_1 of Queue_15
    inst Queue_16_1 of Queue_16
    io_inner_acquire_ready <= Queue_15_1.io_enq_ready
    io_inner_grant_valid <= Queue_16_1.io_deq_valid
    io_inner_grant_bits_addr_beat <= Queue_16_1.io_deq_bits_addr_beat
    io_inner_grant_bits_client_xact_id <= Queue_16_1.io_deq_bits_client_xact_id
    io_inner_grant_bits_manager_xact_id <= Queue_16_1.io_deq_bits_manager_xact_id
    io_inner_grant_bits_is_builtin_type <= Queue_16_1.io_deq_bits_is_builtin_type
    io_inner_grant_bits_g_type <= Queue_16_1.io_deq_bits_g_type
    io_inner_grant_bits_data <= Queue_16_1.io_deq_bits_data
    io_outer_acquire_valid <= Queue_15_1.io_deq_valid
    io_outer_acquire_bits_addr_block <= Queue_15_1.io_deq_bits_addr_block
    io_outer_acquire_bits_client_xact_id <= Queue_15_1.io_deq_bits_client_xact_id
    io_outer_acquire_bits_addr_beat <= Queue_15_1.io_deq_bits_addr_beat
    io_outer_acquire_bits_is_builtin_type <= Queue_15_1.io_deq_bits_is_builtin_type
    io_outer_acquire_bits_a_type <= Queue_15_1.io_deq_bits_a_type
    io_outer_acquire_bits_union <= Queue_15_1.io_deq_bits_union
    io_outer_acquire_bits_data <= Queue_15_1.io_deq_bits_data
    io_outer_grant_ready <= Queue_16_1.io_enq_ready
    Queue_15_1.io_enq_valid <= io_inner_acquire_valid
    Queue_15_1.io_enq_bits_addr_block <= io_inner_acquire_bits_addr_block
    Queue_15_1.io_enq_bits_client_xact_id <= io_inner_acquire_bits_client_xact_id
    Queue_15_1.io_enq_bits_addr_beat <= io_inner_acquire_bits_addr_beat
    Queue_15_1.io_enq_bits_is_builtin_type <= io_inner_acquire_bits_is_builtin_type
    Queue_15_1.io_enq_bits_a_type <= io_inner_acquire_bits_a_type
    Queue_15_1.io_enq_bits_union <= io_inner_acquire_bits_union
    Queue_15_1.io_enq_bits_data <= io_inner_acquire_bits_data
    Queue_15_1.io_deq_ready <= io_outer_acquire_ready
    Queue_16_1.io_enq_valid <= io_outer_grant_valid
    Queue_16_1.io_enq_bits_addr_beat <= io_outer_grant_bits_addr_beat
    Queue_16_1.io_enq_bits_client_xact_id <= io_outer_grant_bits_client_xact_id
    Queue_16_1.io_enq_bits_manager_xact_id <= io_outer_grant_bits_manager_xact_id
    Queue_16_1.io_enq_bits_is_builtin_type <= io_outer_grant_bits_is_builtin_type
    Queue_16_1.io_enq_bits_g_type <= io_outer_grant_bits_g_type
    Queue_16_1.io_enq_bits_data <= io_outer_grant_bits_data
    Queue_16_1.io_deq_ready <= io_inner_grant_ready

  module LockingRRArbiter_10 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr_beat : UInt<3>
    input io_in_0_bits_client_xact_id : UInt<2>
    input io_in_0_bits_manager_xact_id : UInt<1>
    input io_in_0_bits_is_builtin_type : UInt<1>
    input io_in_0_bits_g_type : UInt<4>
    input io_in_0_bits_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_beat : UInt<3>
    output io_out_bits_client_xact_id : UInt<2>
    output io_out_bits_manager_xact_id : UInt<1>
    output io_out_bits_is_builtin_type : UInt<1>
    output io_out_bits_g_type : UInt<4>
    output io_out_bits_data : UInt<64>
    output io_chosen : UInt<1>
  
    wire choice : UInt<1>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_addr_beat : UInt<3>
    wire GEN_0_bits_client_xact_id : UInt<2>
    wire GEN_0_bits_manager_xact_id : UInt<1>
    wire GEN_0_bits_is_builtin_type : UInt<1>
    wire GEN_0_bits_g_type : UInt<4>
    wire GEN_0_bits_data : UInt<64>
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_addr_beat : UInt<3>
    wire GEN_1_bits_client_xact_id : UInt<2>
    wire GEN_1_bits_manager_xact_id : UInt<1>
    wire GEN_1_bits_is_builtin_type : UInt<1>
    wire GEN_1_bits_g_type : UInt<4>
    wire GEN_1_bits_data : UInt<64>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_addr_beat : UInt<3>
    wire GEN_2_bits_client_xact_id : UInt<2>
    wire GEN_2_bits_manager_xact_id : UInt<1>
    wire GEN_2_bits_is_builtin_type : UInt<1>
    wire GEN_2_bits_g_type : UInt<4>
    wire GEN_2_bits_data : UInt<64>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_addr_beat : UInt<3>
    wire GEN_3_bits_client_xact_id : UInt<2>
    wire GEN_3_bits_manager_xact_id : UInt<1>
    wire GEN_3_bits_is_builtin_type : UInt<1>
    wire GEN_3_bits_g_type : UInt<4>
    wire GEN_3_bits_data : UInt<64>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_addr_beat : UInt<3>
    wire GEN_4_bits_client_xact_id : UInt<2>
    wire GEN_4_bits_manager_xact_id : UInt<1>
    wire GEN_4_bits_is_builtin_type : UInt<1>
    wire GEN_4_bits_g_type : UInt<4>
    wire GEN_4_bits_data : UInt<64>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_addr_beat : UInt<3>
    wire GEN_5_bits_client_xact_id : UInt<2>
    wire GEN_5_bits_manager_xact_id : UInt<1>
    wire GEN_5_bits_is_builtin_type : UInt<1>
    wire GEN_5_bits_g_type : UInt<4>
    wire GEN_5_bits_data : UInt<64>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_addr_beat : UInt<3>
    wire GEN_6_bits_client_xact_id : UInt<2>
    wire GEN_6_bits_manager_xact_id : UInt<1>
    wire GEN_6_bits_is_builtin_type : UInt<1>
    wire GEN_6_bits_g_type : UInt<4>
    wire GEN_6_bits_data : UInt<64>
    reg T_518 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_520 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_520)
    node T_522 = neq(T_518, UInt<3>("h0"))
    wire T_530_0 : UInt<3>
    node GEN_0 = pad(UInt<3>("h5"), 4)
    node T_532 = eq(io_out_bits_g_type, GEN_0)
    node T_533 = eq(io_out_bits_g_type, UInt<4>("h0"))
    node T_534 = mux(io_out_bits_is_builtin_type, T_532, T_533)
    node T_536 = and(io_out_ready, io_out_valid)
    node T_537 = and(T_536, T_534)
    node T_541 = add(T_518, UInt<3>("h1"))
    node T_542 = tail(T_541, 1)
    node GEN_7 = mux(T_537, io_chosen, T_520)
    node GEN_8 = mux(T_537, T_542, T_518)
    node GEN_9 = mux(T_522, T_520, UInt<1>("h0"))
    reg lastGrant : UInt<1>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_10 = mux(T_536, io_chosen, lastGrant)
    node T_551 = eq(T_520, UInt<1>("h0"))
    node T_552 = mux(T_522, T_551, UInt<1>("h1"))
    node T_553 = and(T_552, io_out_ready)
    io_in_0_ready <= T_553
    io_out_valid <= GEN_0_valid
    io_out_bits_addr_beat <= GEN_1_bits_addr_beat
    io_out_bits_client_xact_id <= GEN_2_bits_client_xact_id
    io_out_bits_manager_xact_id <= GEN_3_bits_manager_xact_id
    io_out_bits_is_builtin_type <= GEN_4_bits_is_builtin_type
    io_out_bits_g_type <= GEN_5_bits_g_type
    io_out_bits_data <= GEN_6_bits_data
    io_chosen <= GEN_9
    GEN_0_ready <= io_in_0_ready
    GEN_0_valid <= io_in_0_valid
    GEN_0_bits_addr_beat <= io_in_0_bits_addr_beat
    GEN_0_bits_client_xact_id <= io_in_0_bits_client_xact_id
    GEN_0_bits_manager_xact_id <= io_in_0_bits_manager_xact_id
    GEN_0_bits_is_builtin_type <= io_in_0_bits_is_builtin_type
    GEN_0_bits_g_type <= io_in_0_bits_g_type
    GEN_0_bits_data <= io_in_0_bits_data
    GEN_1_ready <= io_in_0_ready
    GEN_1_valid <= io_in_0_valid
    GEN_1_bits_addr_beat <= io_in_0_bits_addr_beat
    GEN_1_bits_client_xact_id <= io_in_0_bits_client_xact_id
    GEN_1_bits_manager_xact_id <= io_in_0_bits_manager_xact_id
    GEN_1_bits_is_builtin_type <= io_in_0_bits_is_builtin_type
    GEN_1_bits_g_type <= io_in_0_bits_g_type
    GEN_1_bits_data <= io_in_0_bits_data
    GEN_2_ready <= io_in_0_ready
    GEN_2_valid <= io_in_0_valid
    GEN_2_bits_addr_beat <= io_in_0_bits_addr_beat
    GEN_2_bits_client_xact_id <= io_in_0_bits_client_xact_id
    GEN_2_bits_manager_xact_id <= io_in_0_bits_manager_xact_id
    GEN_2_bits_is_builtin_type <= io_in_0_bits_is_builtin_type
    GEN_2_bits_g_type <= io_in_0_bits_g_type
    GEN_2_bits_data <= io_in_0_bits_data
    GEN_3_ready <= io_in_0_ready
    GEN_3_valid <= io_in_0_valid
    GEN_3_bits_addr_beat <= io_in_0_bits_addr_beat
    GEN_3_bits_client_xact_id <= io_in_0_bits_client_xact_id
    GEN_3_bits_manager_xact_id <= io_in_0_bits_manager_xact_id
    GEN_3_bits_is_builtin_type <= io_in_0_bits_is_builtin_type
    GEN_3_bits_g_type <= io_in_0_bits_g_type
    GEN_3_bits_data <= io_in_0_bits_data
    GEN_4_ready <= io_in_0_ready
    GEN_4_valid <= io_in_0_valid
    GEN_4_bits_addr_beat <= io_in_0_bits_addr_beat
    GEN_4_bits_client_xact_id <= io_in_0_bits_client_xact_id
    GEN_4_bits_manager_xact_id <= io_in_0_bits_manager_xact_id
    GEN_4_bits_is_builtin_type <= io_in_0_bits_is_builtin_type
    GEN_4_bits_g_type <= io_in_0_bits_g_type
    GEN_4_bits_data <= io_in_0_bits_data
    GEN_5_ready <= io_in_0_ready
    GEN_5_valid <= io_in_0_valid
    GEN_5_bits_addr_beat <= io_in_0_bits_addr_beat
    GEN_5_bits_client_xact_id <= io_in_0_bits_client_xact_id
    GEN_5_bits_manager_xact_id <= io_in_0_bits_manager_xact_id
    GEN_5_bits_is_builtin_type <= io_in_0_bits_is_builtin_type
    GEN_5_bits_g_type <= io_in_0_bits_g_type
    GEN_5_bits_data <= io_in_0_bits_data
    GEN_6_ready <= io_in_0_ready
    GEN_6_valid <= io_in_0_valid
    GEN_6_bits_addr_beat <= io_in_0_bits_addr_beat
    GEN_6_bits_client_xact_id <= io_in_0_bits_client_xact_id
    GEN_6_bits_manager_xact_id <= io_in_0_bits_manager_xact_id
    GEN_6_bits_is_builtin_type <= io_in_0_bits_is_builtin_type
    GEN_6_bits_g_type <= io_in_0_bits_g_type
    GEN_6_bits_data <= io_in_0_bits_data
    T_518 <= GEN_8
    T_520 <= GEN_7
    lastGrant <= GEN_10

  module ClientUncachedTileLinkIORouter :
    input clk : Clock
    input reset : UInt<1>
    output io_in_acquire_ready : UInt<1>
    input io_in_acquire_valid : UInt<1>
    input io_in_acquire_bits_addr_block : UInt<26>
    input io_in_acquire_bits_client_xact_id : UInt<2>
    input io_in_acquire_bits_addr_beat : UInt<3>
    input io_in_acquire_bits_is_builtin_type : UInt<1>
    input io_in_acquire_bits_a_type : UInt<3>
    input io_in_acquire_bits_union : UInt<11>
    input io_in_acquire_bits_data : UInt<64>
    input io_in_grant_ready : UInt<1>
    output io_in_grant_valid : UInt<1>
    output io_in_grant_bits_addr_beat : UInt<3>
    output io_in_grant_bits_client_xact_id : UInt<2>
    output io_in_grant_bits_manager_xact_id : UInt<1>
    output io_in_grant_bits_is_builtin_type : UInt<1>
    output io_in_grant_bits_g_type : UInt<4>
    output io_in_grant_bits_data : UInt<64>
    input io_out_0_acquire_ready : UInt<1>
    output io_out_0_acquire_valid : UInt<1>
    output io_out_0_acquire_bits_addr_block : UInt<26>
    output io_out_0_acquire_bits_client_xact_id : UInt<2>
    output io_out_0_acquire_bits_addr_beat : UInt<3>
    output io_out_0_acquire_bits_is_builtin_type : UInt<1>
    output io_out_0_acquire_bits_a_type : UInt<3>
    output io_out_0_acquire_bits_union : UInt<11>
    output io_out_0_acquire_bits_data : UInt<64>
    output io_out_0_grant_ready : UInt<1>
    input io_out_0_grant_valid : UInt<1>
    input io_out_0_grant_bits_addr_beat : UInt<3>
    input io_out_0_grant_bits_client_xact_id : UInt<2>
    input io_out_0_grant_bits_manager_xact_id : UInt<1>
    input io_out_0_grant_bits_is_builtin_type : UInt<1>
    input io_out_0_grant_bits_g_type : UInt<4>
    input io_out_0_grant_bits_data : UInt<64>
  
    wire T_1246_0 : UInt<3>
    wire T_1246_1 : UInt<3>
    node T_1248 = eq(io_in_acquire_bits_a_type, UInt<3>("h0"))
    node T_1249 = eq(io_in_acquire_bits_a_type, UInt<3>("h4"))
    node T_1250 = or(T_1248, T_1249)
    node T_1251 = and(io_in_acquire_bits_is_builtin_type, T_1250)
    node T_1252 = bits(io_in_acquire_bits_union, 10, 8)
    node T_1254 = mux(T_1251, T_1252, UInt<3>("h0"))
    node T_1255 = cat(io_in_acquire_bits_addr_block, io_in_acquire_bits_addr_beat)
    node T_1256 = cat(T_1255, T_1254)
    node T_1260 = lt(T_1256, UInt<32>("h1000"))
    node T_1263 = leq(UInt<32>("h1000"), T_1256)
    node T_1265 = lt(T_1256, UInt<32>("h2000"))
    node T_1266 = and(T_1263, T_1265)
    node T_1268 = leq(UInt<32>("h40000000"), T_1256)
    node T_1270 = lt(T_1256, UInt<32>("h44000000"))
    node T_1271 = and(T_1268, T_1270)
    node T_1273 = leq(UInt<32>("h44000000"), T_1256)
    node T_1275 = lt(T_1256, UInt<32>("h48000000"))
    node T_1276 = and(T_1273, T_1275)
    node T_1277 = or(T_1260, T_1266)
    node T_1278 = or(T_1277, T_1271)
    node acq_route = or(T_1278, T_1276)
    node T_1281 = and(io_in_acquire_valid, acq_route)
    node GEN_0 = mux(acq_route, io_out_0_acquire_ready, UInt<1>("h0"))
    inst gnt_arb of LockingRRArbiter_10
    node T_1306 = eq(io_in_acquire_valid, UInt<1>("h0"))
    node T_1309 = or(T_1306, acq_route)
    node T_1310 = or(T_1309, reset)
    node T_1312 = eq(T_1310, UInt<1>("h0"))
    io_in_acquire_ready <= GEN_0
    io_in_grant_valid <= gnt_arb.io_out_valid
    io_in_grant_bits_addr_beat <= gnt_arb.io_out_bits_addr_beat
    io_in_grant_bits_client_xact_id <= gnt_arb.io_out_bits_client_xact_id
    io_in_grant_bits_manager_xact_id <= gnt_arb.io_out_bits_manager_xact_id
    io_in_grant_bits_is_builtin_type <= gnt_arb.io_out_bits_is_builtin_type
    io_in_grant_bits_g_type <= gnt_arb.io_out_bits_g_type
    io_in_grant_bits_data <= gnt_arb.io_out_bits_data
    io_out_0_acquire_valid <= T_1281
    io_out_0_acquire_bits_addr_block <= io_in_acquire_bits_addr_block
    io_out_0_acquire_bits_client_xact_id <= io_in_acquire_bits_client_xact_id
    io_out_0_acquire_bits_addr_beat <= io_in_acquire_bits_addr_beat
    io_out_0_acquire_bits_is_builtin_type <= io_in_acquire_bits_is_builtin_type
    io_out_0_acquire_bits_a_type <= io_in_acquire_bits_a_type
    io_out_0_acquire_bits_union <= io_in_acquire_bits_union
    io_out_0_acquire_bits_data <= io_in_acquire_bits_data
    io_out_0_grant_ready <= gnt_arb.io_in_0_ready
    gnt_arb.io_in_0_valid <= io_out_0_grant_valid
    gnt_arb.io_in_0_bits_addr_beat <= io_out_0_grant_bits_addr_beat
    gnt_arb.io_in_0_bits_client_xact_id <= io_out_0_grant_bits_client_xact_id
    gnt_arb.io_in_0_bits_manager_xact_id <= io_out_0_grant_bits_manager_xact_id
    gnt_arb.io_in_0_bits_is_builtin_type <= io_out_0_grant_bits_is_builtin_type
    gnt_arb.io_in_0_bits_g_type <= io_out_0_grant_bits_g_type
    gnt_arb.io_in_0_bits_data <= io_out_0_grant_bits_data
    gnt_arb.io_out_ready <= io_in_grant_ready
    printf(clk, T_1312, "Assertion failed: No valid route\n    at Interconnect.scala:219 assert(!io.in.acquire.valid || acq_route.orR, \"No valid route\")\n")
    stop(clk, T_1312, 1)

  module ClientUncachedTileLinkIOCrossbar :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_acquire_ready : UInt<1>
    input io_in_0_acquire_valid : UInt<1>
    input io_in_0_acquire_bits_addr_block : UInt<26>
    input io_in_0_acquire_bits_client_xact_id : UInt<2>
    input io_in_0_acquire_bits_addr_beat : UInt<3>
    input io_in_0_acquire_bits_is_builtin_type : UInt<1>
    input io_in_0_acquire_bits_a_type : UInt<3>
    input io_in_0_acquire_bits_union : UInt<11>
    input io_in_0_acquire_bits_data : UInt<64>
    input io_in_0_grant_ready : UInt<1>
    output io_in_0_grant_valid : UInt<1>
    output io_in_0_grant_bits_addr_beat : UInt<3>
    output io_in_0_grant_bits_client_xact_id : UInt<2>
    output io_in_0_grant_bits_manager_xact_id : UInt<1>
    output io_in_0_grant_bits_is_builtin_type : UInt<1>
    output io_in_0_grant_bits_g_type : UInt<4>
    output io_in_0_grant_bits_data : UInt<64>
    input io_out_0_acquire_ready : UInt<1>
    output io_out_0_acquire_valid : UInt<1>
    output io_out_0_acquire_bits_addr_block : UInt<26>
    output io_out_0_acquire_bits_client_xact_id : UInt<2>
    output io_out_0_acquire_bits_addr_beat : UInt<3>
    output io_out_0_acquire_bits_is_builtin_type : UInt<1>
    output io_out_0_acquire_bits_a_type : UInt<3>
    output io_out_0_acquire_bits_union : UInt<11>
    output io_out_0_acquire_bits_data : UInt<64>
    output io_out_0_grant_ready : UInt<1>
    input io_out_0_grant_valid : UInt<1>
    input io_out_0_grant_bits_addr_beat : UInt<3>
    input io_out_0_grant_bits_client_xact_id : UInt<2>
    input io_out_0_grant_bits_manager_xact_id : UInt<1>
    input io_out_0_grant_bits_is_builtin_type : UInt<1>
    input io_out_0_grant_bits_g_type : UInt<4>
    input io_out_0_grant_bits_data : UInt<64>
  
    inst ClientUncachedTileLinkIORouter_1 of ClientUncachedTileLinkIORouter
    io_in_0_acquire_ready <= ClientUncachedTileLinkIORouter_1.io_in_acquire_ready
    io_in_0_grant_valid <= ClientUncachedTileLinkIORouter_1.io_in_grant_valid
    io_in_0_grant_bits_addr_beat <= ClientUncachedTileLinkIORouter_1.io_in_grant_bits_addr_beat
    io_in_0_grant_bits_client_xact_id <= ClientUncachedTileLinkIORouter_1.io_in_grant_bits_client_xact_id
    io_in_0_grant_bits_manager_xact_id <= ClientUncachedTileLinkIORouter_1.io_in_grant_bits_manager_xact_id
    io_in_0_grant_bits_is_builtin_type <= ClientUncachedTileLinkIORouter_1.io_in_grant_bits_is_builtin_type
    io_in_0_grant_bits_g_type <= ClientUncachedTileLinkIORouter_1.io_in_grant_bits_g_type
    io_in_0_grant_bits_data <= ClientUncachedTileLinkIORouter_1.io_in_grant_bits_data
    io_out_0_acquire_valid <= ClientUncachedTileLinkIORouter_1.io_out_0_acquire_valid
    io_out_0_acquire_bits_addr_block <= ClientUncachedTileLinkIORouter_1.io_out_0_acquire_bits_addr_block
    io_out_0_acquire_bits_client_xact_id <= ClientUncachedTileLinkIORouter_1.io_out_0_acquire_bits_client_xact_id
    io_out_0_acquire_bits_addr_beat <= ClientUncachedTileLinkIORouter_1.io_out_0_acquire_bits_addr_beat
    io_out_0_acquire_bits_is_builtin_type <= ClientUncachedTileLinkIORouter_1.io_out_0_acquire_bits_is_builtin_type
    io_out_0_acquire_bits_a_type <= ClientUncachedTileLinkIORouter_1.io_out_0_acquire_bits_a_type
    io_out_0_acquire_bits_union <= ClientUncachedTileLinkIORouter_1.io_out_0_acquire_bits_union
    io_out_0_acquire_bits_data <= ClientUncachedTileLinkIORouter_1.io_out_0_acquire_bits_data
    io_out_0_grant_ready <= ClientUncachedTileLinkIORouter_1.io_out_0_grant_ready
    ClientUncachedTileLinkIORouter_1.io_in_acquire_valid <= io_in_0_acquire_valid
    ClientUncachedTileLinkIORouter_1.io_in_acquire_bits_addr_block <= io_in_0_acquire_bits_addr_block
    ClientUncachedTileLinkIORouter_1.io_in_acquire_bits_client_xact_id <= io_in_0_acquire_bits_client_xact_id
    ClientUncachedTileLinkIORouter_1.io_in_acquire_bits_addr_beat <= io_in_0_acquire_bits_addr_beat
    ClientUncachedTileLinkIORouter_1.io_in_acquire_bits_is_builtin_type <= io_in_0_acquire_bits_is_builtin_type
    ClientUncachedTileLinkIORouter_1.io_in_acquire_bits_a_type <= io_in_0_acquire_bits_a_type
    ClientUncachedTileLinkIORouter_1.io_in_acquire_bits_union <= io_in_0_acquire_bits_union
    ClientUncachedTileLinkIORouter_1.io_in_acquire_bits_data <= io_in_0_acquire_bits_data
    ClientUncachedTileLinkIORouter_1.io_in_grant_ready <= io_in_0_grant_ready
    ClientUncachedTileLinkIORouter_1.io_out_0_acquire_ready <= io_out_0_acquire_ready
    ClientUncachedTileLinkIORouter_1.io_out_0_grant_valid <= io_out_0_grant_valid
    ClientUncachedTileLinkIORouter_1.io_out_0_grant_bits_addr_beat <= io_out_0_grant_bits_addr_beat
    ClientUncachedTileLinkIORouter_1.io_out_0_grant_bits_client_xact_id <= io_out_0_grant_bits_client_xact_id
    ClientUncachedTileLinkIORouter_1.io_out_0_grant_bits_manager_xact_id <= io_out_0_grant_bits_manager_xact_id
    ClientUncachedTileLinkIORouter_1.io_out_0_grant_bits_is_builtin_type <= io_out_0_grant_bits_is_builtin_type
    ClientUncachedTileLinkIORouter_1.io_out_0_grant_bits_g_type <= io_out_0_grant_bits_g_type
    ClientUncachedTileLinkIORouter_1.io_out_0_grant_bits_data <= io_out_0_grant_bits_data

  module LockingRRArbiter_11 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr_beat : UInt<3>
    input io_in_0_bits_client_xact_id : UInt<2>
    input io_in_0_bits_manager_xact_id : UInt<1>
    input io_in_0_bits_is_builtin_type : UInt<1>
    input io_in_0_bits_g_type : UInt<4>
    input io_in_0_bits_data : UInt<64>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_addr_beat : UInt<3>
    input io_in_1_bits_client_xact_id : UInt<2>
    input io_in_1_bits_manager_xact_id : UInt<1>
    input io_in_1_bits_is_builtin_type : UInt<1>
    input io_in_1_bits_g_type : UInt<4>
    input io_in_1_bits_data : UInt<64>
    output io_in_2_ready : UInt<1>
    input io_in_2_valid : UInt<1>
    input io_in_2_bits_addr_beat : UInt<3>
    input io_in_2_bits_client_xact_id : UInt<2>
    input io_in_2_bits_manager_xact_id : UInt<1>
    input io_in_2_bits_is_builtin_type : UInt<1>
    input io_in_2_bits_g_type : UInt<4>
    input io_in_2_bits_data : UInt<64>
    output io_in_3_ready : UInt<1>
    input io_in_3_valid : UInt<1>
    input io_in_3_bits_addr_beat : UInt<3>
    input io_in_3_bits_client_xact_id : UInt<2>
    input io_in_3_bits_manager_xact_id : UInt<1>
    input io_in_3_bits_is_builtin_type : UInt<1>
    input io_in_3_bits_g_type : UInt<4>
    input io_in_3_bits_data : UInt<64>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_beat : UInt<3>
    output io_out_bits_client_xact_id : UInt<2>
    output io_out_bits_manager_xact_id : UInt<1>
    output io_out_bits_is_builtin_type : UInt<1>
    output io_out_bits_g_type : UInt<4>
    output io_out_bits_data : UInt<64>
    output io_chosen : UInt<2>
  
    wire choice : UInt<2>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_addr_beat : UInt<3>
    wire GEN_0_bits_client_xact_id : UInt<2>
    wire GEN_0_bits_manager_xact_id : UInt<1>
    wire GEN_0_bits_is_builtin_type : UInt<1>
    wire GEN_0_bits_g_type : UInt<4>
    wire GEN_0_bits_data : UInt<64>
    node GEN_7 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_ready, io_in_0_ready)
    node GEN_8 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_valid, io_in_0_valid)
    node GEN_9 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_addr_beat, io_in_0_bits_addr_beat)
    node GEN_10 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_client_xact_id, io_in_0_bits_client_xact_id)
    node GEN_11 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_manager_xact_id, io_in_0_bits_manager_xact_id)
    node GEN_12 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_is_builtin_type, io_in_0_bits_is_builtin_type)
    node GEN_13 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_g_type, io_in_0_bits_g_type)
    node GEN_14 = mux(eq(UInt<2>("h1"), io_chosen), io_in_1_bits_data, io_in_0_bits_data)
    node GEN_15 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_ready, GEN_7)
    node GEN_16 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_valid, GEN_8)
    node GEN_17 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_addr_beat, GEN_9)
    node GEN_18 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_client_xact_id, GEN_10)
    node GEN_19 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_manager_xact_id, GEN_11)
    node GEN_20 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_is_builtin_type, GEN_12)
    node GEN_21 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_g_type, GEN_13)
    node GEN_22 = mux(eq(UInt<2>("h2"), io_chosen), io_in_2_bits_data, GEN_14)
    node GEN_23 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_ready, GEN_15)
    node GEN_24 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_valid, GEN_16)
    node GEN_25 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_addr_beat, GEN_17)
    node GEN_26 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_client_xact_id, GEN_18)
    node GEN_27 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_manager_xact_id, GEN_19)
    node GEN_28 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_is_builtin_type, GEN_20)
    node GEN_29 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_g_type, GEN_21)
    node GEN_30 = mux(eq(UInt<2>("h3"), io_chosen), io_in_3_bits_data, GEN_22)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_addr_beat : UInt<3>
    wire GEN_1_bits_client_xact_id : UInt<2>
    wire GEN_1_bits_manager_xact_id : UInt<1>
    wire GEN_1_bits_is_builtin_type : UInt<1>
    wire GEN_1_bits_g_type : UInt<4>
    wire GEN_1_bits_data : UInt<64>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_addr_beat : UInt<3>
    wire GEN_2_bits_client_xact_id : UInt<2>
    wire GEN_2_bits_manager_xact_id : UInt<1>
    wire GEN_2_bits_is_builtin_type : UInt<1>
    wire GEN_2_bits_g_type : UInt<4>
    wire GEN_2_bits_data : UInt<64>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_addr_beat : UInt<3>
    wire GEN_3_bits_client_xact_id : UInt<2>
    wire GEN_3_bits_manager_xact_id : UInt<1>
    wire GEN_3_bits_is_builtin_type : UInt<1>
    wire GEN_3_bits_g_type : UInt<4>
    wire GEN_3_bits_data : UInt<64>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_addr_beat : UInt<3>
    wire GEN_4_bits_client_xact_id : UInt<2>
    wire GEN_4_bits_manager_xact_id : UInt<1>
    wire GEN_4_bits_is_builtin_type : UInt<1>
    wire GEN_4_bits_g_type : UInt<4>
    wire GEN_4_bits_data : UInt<64>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_addr_beat : UInt<3>
    wire GEN_5_bits_client_xact_id : UInt<2>
    wire GEN_5_bits_manager_xact_id : UInt<1>
    wire GEN_5_bits_is_builtin_type : UInt<1>
    wire GEN_5_bits_g_type : UInt<4>
    wire GEN_5_bits_data : UInt<64>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_addr_beat : UInt<3>
    wire GEN_6_bits_client_xact_id : UInt<2>
    wire GEN_6_bits_manager_xact_id : UInt<1>
    wire GEN_6_bits_is_builtin_type : UInt<1>
    wire GEN_6_bits_g_type : UInt<4>
    wire GEN_6_bits_data : UInt<64>
    reg T_794 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_796 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_796)
    node T_798 = neq(T_794, UInt<3>("h0"))
    wire T_806_0 : UInt<3>
    node GEN_0 = pad(UInt<3>("h5"), 4)
    node T_808 = eq(io_out_bits_g_type, GEN_0)
    node T_809 = eq(io_out_bits_g_type, UInt<4>("h0"))
    node T_810 = mux(io_out_bits_is_builtin_type, T_808, T_809)
    node T_812 = and(io_out_ready, io_out_valid)
    node T_813 = and(T_812, T_810)
    node T_817 = add(T_794, UInt<3>("h1"))
    node T_818 = tail(T_817, 1)
    node GEN_31 = mux(T_813, io_chosen, T_796)
    node GEN_32 = mux(T_813, T_818, T_794)
    node GEN_33 = mux(T_798, T_796, choice)
    reg lastGrant : UInt<2>, clk with :
      reset => (UInt<1>("h0"), lastGrant)
    node GEN_34 = mux(T_812, io_chosen, lastGrant)
    node grantMask_1 = gt(UInt<2>("h1"), lastGrant)
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant)
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant)
    node validMask_1 = and(io_in_1_valid, grantMask_1)
    node validMask_2 = and(io_in_2_valid, grantMask_2)
    node validMask_3 = and(io_in_3_valid, grantMask_3)
    node T_826 = or(validMask_1, validMask_2)
    node T_827 = or(T_826, validMask_3)
    node T_828 = or(T_827, io_in_0_valid)
    node T_829 = or(T_828, io_in_1_valid)
    node T_830 = or(T_829, io_in_2_valid)
    node T_834 = eq(validMask_1, UInt<1>("h0"))
    node T_836 = eq(T_826, UInt<1>("h0"))
    node T_838 = eq(T_827, UInt<1>("h0"))
    node T_840 = eq(T_828, UInt<1>("h0"))
    node T_842 = eq(T_829, UInt<1>("h0"))
    node T_844 = eq(T_830, UInt<1>("h0"))
    node T_848 = or(grantMask_1, T_840)
    node T_849 = and(T_834, grantMask_2)
    node T_850 = or(T_849, T_842)
    node T_851 = and(T_836, grantMask_3)
    node T_852 = or(T_851, T_844)
    node T_854 = eq(T_796, UInt<2>("h0"))
    node T_855 = mux(T_798, T_854, T_838)
    node T_856 = and(T_855, io_out_ready)
    node T_858 = eq(T_796, UInt<2>("h1"))
    node T_859 = mux(T_798, T_858, T_848)
    node T_860 = and(T_859, io_out_ready)
    node T_862 = eq(T_796, UInt<2>("h2"))
    node T_863 = mux(T_798, T_862, T_850)
    node T_864 = and(T_863, io_out_ready)
    node T_866 = eq(T_796, UInt<2>("h3"))
    node T_867 = mux(T_798, T_866, T_852)
    node T_868 = and(T_867, io_out_ready)
    node GEN_35 = mux(io_in_2_valid, UInt<2>("h2"), UInt<2>("h3"))
    node GEN_36 = mux(io_in_1_valid, UInt<2>("h1"), GEN_35)
    node GEN_37 = mux(io_in_0_valid, UInt<2>("h0"), GEN_36)
    node GEN_38 = mux(validMask_3, UInt<2>("h3"), GEN_37)
    node GEN_39 = mux(validMask_2, UInt<2>("h2"), GEN_38)
    node GEN_40 = mux(validMask_1, UInt<2>("h1"), GEN_39)
    io_in_0_ready <= T_856
    io_in_1_ready <= T_860
    io_in_2_ready <= T_864
    io_in_3_ready <= T_868
    io_out_valid <= GEN_0_valid
    io_out_bits_addr_beat <= GEN_1_bits_addr_beat
    io_out_bits_client_xact_id <= GEN_2_bits_client_xact_id
    io_out_bits_manager_xact_id <= GEN_3_bits_manager_xact_id
    io_out_bits_is_builtin_type <= GEN_4_bits_is_builtin_type
    io_out_bits_g_type <= GEN_5_bits_g_type
    io_out_bits_data <= GEN_6_bits_data
    io_chosen <= GEN_33
    choice <= GEN_40
    GEN_0_ready <= GEN_23
    GEN_0_valid <= GEN_24
    GEN_0_bits_addr_beat <= GEN_25
    GEN_0_bits_client_xact_id <= GEN_26
    GEN_0_bits_manager_xact_id <= GEN_27
    GEN_0_bits_is_builtin_type <= GEN_28
    GEN_0_bits_g_type <= GEN_29
    GEN_0_bits_data <= GEN_30
    GEN_1_ready <= GEN_23
    GEN_1_valid <= GEN_24
    GEN_1_bits_addr_beat <= GEN_25
    GEN_1_bits_client_xact_id <= GEN_26
    GEN_1_bits_manager_xact_id <= GEN_27
    GEN_1_bits_is_builtin_type <= GEN_28
    GEN_1_bits_g_type <= GEN_29
    GEN_1_bits_data <= GEN_30
    GEN_2_ready <= GEN_23
    GEN_2_valid <= GEN_24
    GEN_2_bits_addr_beat <= GEN_25
    GEN_2_bits_client_xact_id <= GEN_26
    GEN_2_bits_manager_xact_id <= GEN_27
    GEN_2_bits_is_builtin_type <= GEN_28
    GEN_2_bits_g_type <= GEN_29
    GEN_2_bits_data <= GEN_30
    GEN_3_ready <= GEN_23
    GEN_3_valid <= GEN_24
    GEN_3_bits_addr_beat <= GEN_25
    GEN_3_bits_client_xact_id <= GEN_26
    GEN_3_bits_manager_xact_id <= GEN_27
    GEN_3_bits_is_builtin_type <= GEN_28
    GEN_3_bits_g_type <= GEN_29
    GEN_3_bits_data <= GEN_30
    GEN_4_ready <= GEN_23
    GEN_4_valid <= GEN_24
    GEN_4_bits_addr_beat <= GEN_25
    GEN_4_bits_client_xact_id <= GEN_26
    GEN_4_bits_manager_xact_id <= GEN_27
    GEN_4_bits_is_builtin_type <= GEN_28
    GEN_4_bits_g_type <= GEN_29
    GEN_4_bits_data <= GEN_30
    GEN_5_ready <= GEN_23
    GEN_5_valid <= GEN_24
    GEN_5_bits_addr_beat <= GEN_25
    GEN_5_bits_client_xact_id <= GEN_26
    GEN_5_bits_manager_xact_id <= GEN_27
    GEN_5_bits_is_builtin_type <= GEN_28
    GEN_5_bits_g_type <= GEN_29
    GEN_5_bits_data <= GEN_30
    GEN_6_ready <= GEN_23
    GEN_6_valid <= GEN_24
    GEN_6_bits_addr_beat <= GEN_25
    GEN_6_bits_client_xact_id <= GEN_26
    GEN_6_bits_manager_xact_id <= GEN_27
    GEN_6_bits_is_builtin_type <= GEN_28
    GEN_6_bits_g_type <= GEN_29
    GEN_6_bits_data <= GEN_30
    T_794 <= GEN_32
    T_796 <= GEN_31
    lastGrant <= GEN_34

  module ClientUncachedTileLinkIORouter_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_acquire_ready : UInt<1>
    input io_in_acquire_valid : UInt<1>
    input io_in_acquire_bits_addr_block : UInt<26>
    input io_in_acquire_bits_client_xact_id : UInt<2>
    input io_in_acquire_bits_addr_beat : UInt<3>
    input io_in_acquire_bits_is_builtin_type : UInt<1>
    input io_in_acquire_bits_a_type : UInt<3>
    input io_in_acquire_bits_union : UInt<11>
    input io_in_acquire_bits_data : UInt<64>
    input io_in_grant_ready : UInt<1>
    output io_in_grant_valid : UInt<1>
    output io_in_grant_bits_addr_beat : UInt<3>
    output io_in_grant_bits_client_xact_id : UInt<2>
    output io_in_grant_bits_manager_xact_id : UInt<1>
    output io_in_grant_bits_is_builtin_type : UInt<1>
    output io_in_grant_bits_g_type : UInt<4>
    output io_in_grant_bits_data : UInt<64>
    input io_out_0_acquire_ready : UInt<1>
    output io_out_0_acquire_valid : UInt<1>
    output io_out_0_acquire_bits_addr_block : UInt<26>
    output io_out_0_acquire_bits_client_xact_id : UInt<2>
    output io_out_0_acquire_bits_addr_beat : UInt<3>
    output io_out_0_acquire_bits_is_builtin_type : UInt<1>
    output io_out_0_acquire_bits_a_type : UInt<3>
    output io_out_0_acquire_bits_union : UInt<11>
    output io_out_0_acquire_bits_data : UInt<64>
    output io_out_0_grant_ready : UInt<1>
    input io_out_0_grant_valid : UInt<1>
    input io_out_0_grant_bits_addr_beat : UInt<3>
    input io_out_0_grant_bits_client_xact_id : UInt<2>
    input io_out_0_grant_bits_manager_xact_id : UInt<1>
    input io_out_0_grant_bits_is_builtin_type : UInt<1>
    input io_out_0_grant_bits_g_type : UInt<4>
    input io_out_0_grant_bits_data : UInt<64>
    input io_out_1_acquire_ready : UInt<1>
    output io_out_1_acquire_valid : UInt<1>
    output io_out_1_acquire_bits_addr_block : UInt<26>
    output io_out_1_acquire_bits_client_xact_id : UInt<2>
    output io_out_1_acquire_bits_addr_beat : UInt<3>
    output io_out_1_acquire_bits_is_builtin_type : UInt<1>
    output io_out_1_acquire_bits_a_type : UInt<3>
    output io_out_1_acquire_bits_union : UInt<11>
    output io_out_1_acquire_bits_data : UInt<64>
    output io_out_1_grant_ready : UInt<1>
    input io_out_1_grant_valid : UInt<1>
    input io_out_1_grant_bits_addr_beat : UInt<3>
    input io_out_1_grant_bits_client_xact_id : UInt<2>
    input io_out_1_grant_bits_manager_xact_id : UInt<1>
    input io_out_1_grant_bits_is_builtin_type : UInt<1>
    input io_out_1_grant_bits_g_type : UInt<4>
    input io_out_1_grant_bits_data : UInt<64>
    input io_out_2_acquire_ready : UInt<1>
    output io_out_2_acquire_valid : UInt<1>
    output io_out_2_acquire_bits_addr_block : UInt<26>
    output io_out_2_acquire_bits_client_xact_id : UInt<2>
    output io_out_2_acquire_bits_addr_beat : UInt<3>
    output io_out_2_acquire_bits_is_builtin_type : UInt<1>
    output io_out_2_acquire_bits_a_type : UInt<3>
    output io_out_2_acquire_bits_union : UInt<11>
    output io_out_2_acquire_bits_data : UInt<64>
    output io_out_2_grant_ready : UInt<1>
    input io_out_2_grant_valid : UInt<1>
    input io_out_2_grant_bits_addr_beat : UInt<3>
    input io_out_2_grant_bits_client_xact_id : UInt<2>
    input io_out_2_grant_bits_manager_xact_id : UInt<1>
    input io_out_2_grant_bits_is_builtin_type : UInt<1>
    input io_out_2_grant_bits_g_type : UInt<4>
    input io_out_2_grant_bits_data : UInt<64>
    input io_out_3_acquire_ready : UInt<1>
    output io_out_3_acquire_valid : UInt<1>
    output io_out_3_acquire_bits_addr_block : UInt<26>
    output io_out_3_acquire_bits_client_xact_id : UInt<2>
    output io_out_3_acquire_bits_addr_beat : UInt<3>
    output io_out_3_acquire_bits_is_builtin_type : UInt<1>
    output io_out_3_acquire_bits_a_type : UInt<3>
    output io_out_3_acquire_bits_union : UInt<11>
    output io_out_3_acquire_bits_data : UInt<64>
    output io_out_3_grant_ready : UInt<1>
    input io_out_3_grant_valid : UInt<1>
    input io_out_3_grant_bits_addr_beat : UInt<3>
    input io_out_3_grant_bits_client_xact_id : UInt<2>
    input io_out_3_grant_bits_manager_xact_id : UInt<1>
    input io_out_3_grant_bits_is_builtin_type : UInt<1>
    input io_out_3_grant_bits_g_type : UInt<4>
    input io_out_3_grant_bits_data : UInt<64>
  
    wire T_1855_0 : UInt<3>
    wire T_1855_1 : UInt<3>
    node T_1857 = eq(io_in_acquire_bits_a_type, UInt<3>("h0"))
    node T_1858 = eq(io_in_acquire_bits_a_type, UInt<3>("h4"))
    node T_1859 = or(T_1857, T_1858)
    node T_1860 = and(io_in_acquire_bits_is_builtin_type, T_1859)
    node T_1861 = bits(io_in_acquire_bits_union, 10, 8)
    node T_1863 = mux(T_1860, T_1861, UInt<3>("h0"))
    node T_1864 = cat(io_in_acquire_bits_addr_block, io_in_acquire_bits_addr_beat)
    node T_1865 = cat(T_1864, T_1863)
    node T_1869 = lt(T_1865, UInt<32>("h1000"))
    node T_1872 = leq(UInt<32>("h1000"), T_1865)
    node T_1874 = lt(T_1865, UInt<32>("h2000"))
    node T_1875 = and(T_1872, T_1874)
    node T_1877 = leq(UInt<32>("h40000000"), T_1865)
    node T_1879 = lt(T_1865, UInt<32>("h44000000"))
    node T_1880 = and(T_1877, T_1879)
    node T_1882 = leq(UInt<32>("h44000000"), T_1865)
    node T_1884 = lt(T_1865, UInt<32>("h48000000"))
    node T_1885 = and(T_1882, T_1884)
    node T_1886 = cat(T_1875, T_1869)
    node T_1887 = cat(T_1885, T_1880)
    node acq_route = cat(T_1887, T_1886)
    node T_1889 = bits(acq_route, 0, 0)
    node T_1890 = and(io_in_acquire_valid, T_1889)
    node GEN_0 = mux(T_1889, io_out_0_acquire_ready, UInt<1>("h0"))
    node T_1892 = bits(acq_route, 1, 1)
    node T_1893 = and(io_in_acquire_valid, T_1892)
    node GEN_1 = mux(T_1892, io_out_1_acquire_ready, GEN_0)
    node T_1895 = bits(acq_route, 2, 2)
    node T_1896 = and(io_in_acquire_valid, T_1895)
    node GEN_2 = mux(T_1895, io_out_2_acquire_ready, GEN_1)
    node T_1898 = bits(acq_route, 3, 3)
    node T_1899 = and(io_in_acquire_valid, T_1898)
    node GEN_3 = mux(T_1898, io_out_3_acquire_ready, GEN_2)
    inst gnt_arb of LockingRRArbiter_11
    node T_1924 = eq(io_in_acquire_valid, UInt<1>("h0"))
    node T_1926 = neq(acq_route, UInt<4>("h0"))
    node T_1927 = or(T_1924, T_1926)
    node T_1928 = or(T_1927, reset)
    node T_1930 = eq(T_1928, UInt<1>("h0"))
    io_in_acquire_ready <= GEN_3
    io_in_grant_valid <= gnt_arb.io_out_valid
    io_in_grant_bits_addr_beat <= gnt_arb.io_out_bits_addr_beat
    io_in_grant_bits_client_xact_id <= gnt_arb.io_out_bits_client_xact_id
    io_in_grant_bits_manager_xact_id <= gnt_arb.io_out_bits_manager_xact_id
    io_in_grant_bits_is_builtin_type <= gnt_arb.io_out_bits_is_builtin_type
    io_in_grant_bits_g_type <= gnt_arb.io_out_bits_g_type
    io_in_grant_bits_data <= gnt_arb.io_out_bits_data
    io_out_0_acquire_valid <= T_1890
    io_out_0_acquire_bits_addr_block <= io_in_acquire_bits_addr_block
    io_out_0_acquire_bits_client_xact_id <= io_in_acquire_bits_client_xact_id
    io_out_0_acquire_bits_addr_beat <= io_in_acquire_bits_addr_beat
    io_out_0_acquire_bits_is_builtin_type <= io_in_acquire_bits_is_builtin_type
    io_out_0_acquire_bits_a_type <= io_in_acquire_bits_a_type
    io_out_0_acquire_bits_union <= io_in_acquire_bits_union
    io_out_0_acquire_bits_data <= io_in_acquire_bits_data
    io_out_0_grant_ready <= gnt_arb.io_in_0_ready
    io_out_1_acquire_valid <= T_1893
    io_out_1_acquire_bits_addr_block <= io_in_acquire_bits_addr_block
    io_out_1_acquire_bits_client_xact_id <= io_in_acquire_bits_client_xact_id
    io_out_1_acquire_bits_addr_beat <= io_in_acquire_bits_addr_beat
    io_out_1_acquire_bits_is_builtin_type <= io_in_acquire_bits_is_builtin_type
    io_out_1_acquire_bits_a_type <= io_in_acquire_bits_a_type
    io_out_1_acquire_bits_union <= io_in_acquire_bits_union
    io_out_1_acquire_bits_data <= io_in_acquire_bits_data
    io_out_1_grant_ready <= gnt_arb.io_in_1_ready
    io_out_2_acquire_valid <= T_1896
    io_out_2_acquire_bits_addr_block <= io_in_acquire_bits_addr_block
    io_out_2_acquire_bits_client_xact_id <= io_in_acquire_bits_client_xact_id
    io_out_2_acquire_bits_addr_beat <= io_in_acquire_bits_addr_beat
    io_out_2_acquire_bits_is_builtin_type <= io_in_acquire_bits_is_builtin_type
    io_out_2_acquire_bits_a_type <= io_in_acquire_bits_a_type
    io_out_2_acquire_bits_union <= io_in_acquire_bits_union
    io_out_2_acquire_bits_data <= io_in_acquire_bits_data
    io_out_2_grant_ready <= gnt_arb.io_in_2_ready
    io_out_3_acquire_valid <= T_1899
    io_out_3_acquire_bits_addr_block <= io_in_acquire_bits_addr_block
    io_out_3_acquire_bits_client_xact_id <= io_in_acquire_bits_client_xact_id
    io_out_3_acquire_bits_addr_beat <= io_in_acquire_bits_addr_beat
    io_out_3_acquire_bits_is_builtin_type <= io_in_acquire_bits_is_builtin_type
    io_out_3_acquire_bits_a_type <= io_in_acquire_bits_a_type
    io_out_3_acquire_bits_union <= io_in_acquire_bits_union
    io_out_3_acquire_bits_data <= io_in_acquire_bits_data
    io_out_3_grant_ready <= gnt_arb.io_in_3_ready
    gnt_arb.io_in_0_valid <= io_out_0_grant_valid
    gnt_arb.io_in_0_bits_addr_beat <= io_out_0_grant_bits_addr_beat
    gnt_arb.io_in_0_bits_client_xact_id <= io_out_0_grant_bits_client_xact_id
    gnt_arb.io_in_0_bits_manager_xact_id <= io_out_0_grant_bits_manager_xact_id
    gnt_arb.io_in_0_bits_is_builtin_type <= io_out_0_grant_bits_is_builtin_type
    gnt_arb.io_in_0_bits_g_type <= io_out_0_grant_bits_g_type
    gnt_arb.io_in_0_bits_data <= io_out_0_grant_bits_data
    gnt_arb.io_in_1_valid <= io_out_1_grant_valid
    gnt_arb.io_in_1_bits_addr_beat <= io_out_1_grant_bits_addr_beat
    gnt_arb.io_in_1_bits_client_xact_id <= io_out_1_grant_bits_client_xact_id
    gnt_arb.io_in_1_bits_manager_xact_id <= io_out_1_grant_bits_manager_xact_id
    gnt_arb.io_in_1_bits_is_builtin_type <= io_out_1_grant_bits_is_builtin_type
    gnt_arb.io_in_1_bits_g_type <= io_out_1_grant_bits_g_type
    gnt_arb.io_in_1_bits_data <= io_out_1_grant_bits_data
    gnt_arb.io_in_2_valid <= io_out_2_grant_valid
    gnt_arb.io_in_2_bits_addr_beat <= io_out_2_grant_bits_addr_beat
    gnt_arb.io_in_2_bits_client_xact_id <= io_out_2_grant_bits_client_xact_id
    gnt_arb.io_in_2_bits_manager_xact_id <= io_out_2_grant_bits_manager_xact_id
    gnt_arb.io_in_2_bits_is_builtin_type <= io_out_2_grant_bits_is_builtin_type
    gnt_arb.io_in_2_bits_g_type <= io_out_2_grant_bits_g_type
    gnt_arb.io_in_2_bits_data <= io_out_2_grant_bits_data
    gnt_arb.io_in_3_valid <= io_out_3_grant_valid
    gnt_arb.io_in_3_bits_addr_beat <= io_out_3_grant_bits_addr_beat
    gnt_arb.io_in_3_bits_client_xact_id <= io_out_3_grant_bits_client_xact_id
    gnt_arb.io_in_3_bits_manager_xact_id <= io_out_3_grant_bits_manager_xact_id
    gnt_arb.io_in_3_bits_is_builtin_type <= io_out_3_grant_bits_is_builtin_type
    gnt_arb.io_in_3_bits_g_type <= io_out_3_grant_bits_g_type
    gnt_arb.io_in_3_bits_data <= io_out_3_grant_bits_data
    gnt_arb.io_out_ready <= io_in_grant_ready
    printf(clk, T_1930, "Assertion failed: No valid route\n    at Interconnect.scala:219 assert(!io.in.acquire.valid || acq_route.orR, \"No valid route\")\n")
    stop(clk, T_1930, 1)

  module ClientUncachedTileLinkIOCrossbar_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_acquire_ready : UInt<1>
    input io_in_0_acquire_valid : UInt<1>
    input io_in_0_acquire_bits_addr_block : UInt<26>
    input io_in_0_acquire_bits_client_xact_id : UInt<2>
    input io_in_0_acquire_bits_addr_beat : UInt<3>
    input io_in_0_acquire_bits_is_builtin_type : UInt<1>
    input io_in_0_acquire_bits_a_type : UInt<3>
    input io_in_0_acquire_bits_union : UInt<11>
    input io_in_0_acquire_bits_data : UInt<64>
    input io_in_0_grant_ready : UInt<1>
    output io_in_0_grant_valid : UInt<1>
    output io_in_0_grant_bits_addr_beat : UInt<3>
    output io_in_0_grant_bits_client_xact_id : UInt<2>
    output io_in_0_grant_bits_manager_xact_id : UInt<1>
    output io_in_0_grant_bits_is_builtin_type : UInt<1>
    output io_in_0_grant_bits_g_type : UInt<4>
    output io_in_0_grant_bits_data : UInt<64>
    input io_out_0_acquire_ready : UInt<1>
    output io_out_0_acquire_valid : UInt<1>
    output io_out_0_acquire_bits_addr_block : UInt<26>
    output io_out_0_acquire_bits_client_xact_id : UInt<2>
    output io_out_0_acquire_bits_addr_beat : UInt<3>
    output io_out_0_acquire_bits_is_builtin_type : UInt<1>
    output io_out_0_acquire_bits_a_type : UInt<3>
    output io_out_0_acquire_bits_union : UInt<11>
    output io_out_0_acquire_bits_data : UInt<64>
    output io_out_0_grant_ready : UInt<1>
    input io_out_0_grant_valid : UInt<1>
    input io_out_0_grant_bits_addr_beat : UInt<3>
    input io_out_0_grant_bits_client_xact_id : UInt<2>
    input io_out_0_grant_bits_manager_xact_id : UInt<1>
    input io_out_0_grant_bits_is_builtin_type : UInt<1>
    input io_out_0_grant_bits_g_type : UInt<4>
    input io_out_0_grant_bits_data : UInt<64>
    input io_out_1_acquire_ready : UInt<1>
    output io_out_1_acquire_valid : UInt<1>
    output io_out_1_acquire_bits_addr_block : UInt<26>
    output io_out_1_acquire_bits_client_xact_id : UInt<2>
    output io_out_1_acquire_bits_addr_beat : UInt<3>
    output io_out_1_acquire_bits_is_builtin_type : UInt<1>
    output io_out_1_acquire_bits_a_type : UInt<3>
    output io_out_1_acquire_bits_union : UInt<11>
    output io_out_1_acquire_bits_data : UInt<64>
    output io_out_1_grant_ready : UInt<1>
    input io_out_1_grant_valid : UInt<1>
    input io_out_1_grant_bits_addr_beat : UInt<3>
    input io_out_1_grant_bits_client_xact_id : UInt<2>
    input io_out_1_grant_bits_manager_xact_id : UInt<1>
    input io_out_1_grant_bits_is_builtin_type : UInt<1>
    input io_out_1_grant_bits_g_type : UInt<4>
    input io_out_1_grant_bits_data : UInt<64>
    input io_out_2_acquire_ready : UInt<1>
    output io_out_2_acquire_valid : UInt<1>
    output io_out_2_acquire_bits_addr_block : UInt<26>
    output io_out_2_acquire_bits_client_xact_id : UInt<2>
    output io_out_2_acquire_bits_addr_beat : UInt<3>
    output io_out_2_acquire_bits_is_builtin_type : UInt<1>
    output io_out_2_acquire_bits_a_type : UInt<3>
    output io_out_2_acquire_bits_union : UInt<11>
    output io_out_2_acquire_bits_data : UInt<64>
    output io_out_2_grant_ready : UInt<1>
    input io_out_2_grant_valid : UInt<1>
    input io_out_2_grant_bits_addr_beat : UInt<3>
    input io_out_2_grant_bits_client_xact_id : UInt<2>
    input io_out_2_grant_bits_manager_xact_id : UInt<1>
    input io_out_2_grant_bits_is_builtin_type : UInt<1>
    input io_out_2_grant_bits_g_type : UInt<4>
    input io_out_2_grant_bits_data : UInt<64>
    input io_out_3_acquire_ready : UInt<1>
    output io_out_3_acquire_valid : UInt<1>
    output io_out_3_acquire_bits_addr_block : UInt<26>
    output io_out_3_acquire_bits_client_xact_id : UInt<2>
    output io_out_3_acquire_bits_addr_beat : UInt<3>
    output io_out_3_acquire_bits_is_builtin_type : UInt<1>
    output io_out_3_acquire_bits_a_type : UInt<3>
    output io_out_3_acquire_bits_union : UInt<11>
    output io_out_3_acquire_bits_data : UInt<64>
    output io_out_3_grant_ready : UInt<1>
    input io_out_3_grant_valid : UInt<1>
    input io_out_3_grant_bits_addr_beat : UInt<3>
    input io_out_3_grant_bits_client_xact_id : UInt<2>
    input io_out_3_grant_bits_manager_xact_id : UInt<1>
    input io_out_3_grant_bits_is_builtin_type : UInt<1>
    input io_out_3_grant_bits_g_type : UInt<4>
    input io_out_3_grant_bits_data : UInt<64>
  
    inst ClientUncachedTileLinkIORouter_1_1 of ClientUncachedTileLinkIORouter_1
    io_in_0_acquire_ready <= ClientUncachedTileLinkIORouter_1_1.io_in_acquire_ready
    io_in_0_grant_valid <= ClientUncachedTileLinkIORouter_1_1.io_in_grant_valid
    io_in_0_grant_bits_addr_beat <= ClientUncachedTileLinkIORouter_1_1.io_in_grant_bits_addr_beat
    io_in_0_grant_bits_client_xact_id <= ClientUncachedTileLinkIORouter_1_1.io_in_grant_bits_client_xact_id
    io_in_0_grant_bits_manager_xact_id <= ClientUncachedTileLinkIORouter_1_1.io_in_grant_bits_manager_xact_id
    io_in_0_grant_bits_is_builtin_type <= ClientUncachedTileLinkIORouter_1_1.io_in_grant_bits_is_builtin_type
    io_in_0_grant_bits_g_type <= ClientUncachedTileLinkIORouter_1_1.io_in_grant_bits_g_type
    io_in_0_grant_bits_data <= ClientUncachedTileLinkIORouter_1_1.io_in_grant_bits_data
    io_out_0_acquire_valid <= ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_valid
    io_out_0_acquire_bits_addr_block <= ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_bits_addr_block
    io_out_0_acquire_bits_client_xact_id <= ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_bits_client_xact_id
    io_out_0_acquire_bits_addr_beat <= ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_bits_addr_beat
    io_out_0_acquire_bits_is_builtin_type <= ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_bits_is_builtin_type
    io_out_0_acquire_bits_a_type <= ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_bits_a_type
    io_out_0_acquire_bits_union <= ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_bits_union
    io_out_0_acquire_bits_data <= ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_bits_data
    io_out_0_grant_ready <= ClientUncachedTileLinkIORouter_1_1.io_out_0_grant_ready
    io_out_1_acquire_valid <= ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_valid
    io_out_1_acquire_bits_addr_block <= ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_bits_addr_block
    io_out_1_acquire_bits_client_xact_id <= ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_bits_client_xact_id
    io_out_1_acquire_bits_addr_beat <= ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_bits_addr_beat
    io_out_1_acquire_bits_is_builtin_type <= ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_bits_is_builtin_type
    io_out_1_acquire_bits_a_type <= ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_bits_a_type
    io_out_1_acquire_bits_union <= ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_bits_union
    io_out_1_acquire_bits_data <= ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_bits_data
    io_out_1_grant_ready <= ClientUncachedTileLinkIORouter_1_1.io_out_1_grant_ready
    io_out_2_acquire_valid <= ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_valid
    io_out_2_acquire_bits_addr_block <= ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_bits_addr_block
    io_out_2_acquire_bits_client_xact_id <= ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_bits_client_xact_id
    io_out_2_acquire_bits_addr_beat <= ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_bits_addr_beat
    io_out_2_acquire_bits_is_builtin_type <= ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_bits_is_builtin_type
    io_out_2_acquire_bits_a_type <= ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_bits_a_type
    io_out_2_acquire_bits_union <= ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_bits_union
    io_out_2_acquire_bits_data <= ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_bits_data
    io_out_2_grant_ready <= ClientUncachedTileLinkIORouter_1_1.io_out_2_grant_ready
    io_out_3_acquire_valid <= ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_valid
    io_out_3_acquire_bits_addr_block <= ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_bits_addr_block
    io_out_3_acquire_bits_client_xact_id <= ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_bits_client_xact_id
    io_out_3_acquire_bits_addr_beat <= ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_bits_addr_beat
    io_out_3_acquire_bits_is_builtin_type <= ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_bits_is_builtin_type
    io_out_3_acquire_bits_a_type <= ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_bits_a_type
    io_out_3_acquire_bits_union <= ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_bits_union
    io_out_3_acquire_bits_data <= ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_bits_data
    io_out_3_grant_ready <= ClientUncachedTileLinkIORouter_1_1.io_out_3_grant_ready
    ClientUncachedTileLinkIORouter_1_1.io_in_acquire_valid <= io_in_0_acquire_valid
    ClientUncachedTileLinkIORouter_1_1.io_in_acquire_bits_addr_block <= io_in_0_acquire_bits_addr_block
    ClientUncachedTileLinkIORouter_1_1.io_in_acquire_bits_client_xact_id <= io_in_0_acquire_bits_client_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_in_acquire_bits_addr_beat <= io_in_0_acquire_bits_addr_beat
    ClientUncachedTileLinkIORouter_1_1.io_in_acquire_bits_is_builtin_type <= io_in_0_acquire_bits_is_builtin_type
    ClientUncachedTileLinkIORouter_1_1.io_in_acquire_bits_a_type <= io_in_0_acquire_bits_a_type
    ClientUncachedTileLinkIORouter_1_1.io_in_acquire_bits_union <= io_in_0_acquire_bits_union
    ClientUncachedTileLinkIORouter_1_1.io_in_acquire_bits_data <= io_in_0_acquire_bits_data
    ClientUncachedTileLinkIORouter_1_1.io_in_grant_ready <= io_in_0_grant_ready
    ClientUncachedTileLinkIORouter_1_1.io_out_0_acquire_ready <= io_out_0_acquire_ready
    ClientUncachedTileLinkIORouter_1_1.io_out_0_grant_valid <= io_out_0_grant_valid
    ClientUncachedTileLinkIORouter_1_1.io_out_0_grant_bits_addr_beat <= io_out_0_grant_bits_addr_beat
    ClientUncachedTileLinkIORouter_1_1.io_out_0_grant_bits_client_xact_id <= io_out_0_grant_bits_client_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_out_0_grant_bits_manager_xact_id <= io_out_0_grant_bits_manager_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_out_0_grant_bits_is_builtin_type <= io_out_0_grant_bits_is_builtin_type
    ClientUncachedTileLinkIORouter_1_1.io_out_0_grant_bits_g_type <= io_out_0_grant_bits_g_type
    ClientUncachedTileLinkIORouter_1_1.io_out_0_grant_bits_data <= io_out_0_grant_bits_data
    ClientUncachedTileLinkIORouter_1_1.io_out_1_acquire_ready <= io_out_1_acquire_ready
    ClientUncachedTileLinkIORouter_1_1.io_out_1_grant_valid <= io_out_1_grant_valid
    ClientUncachedTileLinkIORouter_1_1.io_out_1_grant_bits_addr_beat <= io_out_1_grant_bits_addr_beat
    ClientUncachedTileLinkIORouter_1_1.io_out_1_grant_bits_client_xact_id <= io_out_1_grant_bits_client_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_out_1_grant_bits_manager_xact_id <= io_out_1_grant_bits_manager_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_out_1_grant_bits_is_builtin_type <= io_out_1_grant_bits_is_builtin_type
    ClientUncachedTileLinkIORouter_1_1.io_out_1_grant_bits_g_type <= io_out_1_grant_bits_g_type
    ClientUncachedTileLinkIORouter_1_1.io_out_1_grant_bits_data <= io_out_1_grant_bits_data
    ClientUncachedTileLinkIORouter_1_1.io_out_2_acquire_ready <= io_out_2_acquire_ready
    ClientUncachedTileLinkIORouter_1_1.io_out_2_grant_valid <= io_out_2_grant_valid
    ClientUncachedTileLinkIORouter_1_1.io_out_2_grant_bits_addr_beat <= io_out_2_grant_bits_addr_beat
    ClientUncachedTileLinkIORouter_1_1.io_out_2_grant_bits_client_xact_id <= io_out_2_grant_bits_client_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_out_2_grant_bits_manager_xact_id <= io_out_2_grant_bits_manager_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_out_2_grant_bits_is_builtin_type <= io_out_2_grant_bits_is_builtin_type
    ClientUncachedTileLinkIORouter_1_1.io_out_2_grant_bits_g_type <= io_out_2_grant_bits_g_type
    ClientUncachedTileLinkIORouter_1_1.io_out_2_grant_bits_data <= io_out_2_grant_bits_data
    ClientUncachedTileLinkIORouter_1_1.io_out_3_acquire_ready <= io_out_3_acquire_ready
    ClientUncachedTileLinkIORouter_1_1.io_out_3_grant_valid <= io_out_3_grant_valid
    ClientUncachedTileLinkIORouter_1_1.io_out_3_grant_bits_addr_beat <= io_out_3_grant_bits_addr_beat
    ClientUncachedTileLinkIORouter_1_1.io_out_3_grant_bits_client_xact_id <= io_out_3_grant_bits_client_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_out_3_grant_bits_manager_xact_id <= io_out_3_grant_bits_manager_xact_id
    ClientUncachedTileLinkIORouter_1_1.io_out_3_grant_bits_is_builtin_type <= io_out_3_grant_bits_is_builtin_type
    ClientUncachedTileLinkIORouter_1_1.io_out_3_grant_bits_g_type <= io_out_3_grant_bits_g_type
    ClientUncachedTileLinkIORouter_1_1.io_out_3_grant_bits_data <= io_out_3_grant_bits_data

  module TileLinkRecursiveInterconnect_1 :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_acquire_ready : UInt<1>
    input io_in_0_acquire_valid : UInt<1>
    input io_in_0_acquire_bits_addr_block : UInt<26>
    input io_in_0_acquire_bits_client_xact_id : UInt<2>
    input io_in_0_acquire_bits_addr_beat : UInt<3>
    input io_in_0_acquire_bits_is_builtin_type : UInt<1>
    input io_in_0_acquire_bits_a_type : UInt<3>
    input io_in_0_acquire_bits_union : UInt<11>
    input io_in_0_acquire_bits_data : UInt<64>
    input io_in_0_grant_ready : UInt<1>
    output io_in_0_grant_valid : UInt<1>
    output io_in_0_grant_bits_addr_beat : UInt<3>
    output io_in_0_grant_bits_client_xact_id : UInt<2>
    output io_in_0_grant_bits_manager_xact_id : UInt<1>
    output io_in_0_grant_bits_is_builtin_type : UInt<1>
    output io_in_0_grant_bits_g_type : UInt<4>
    output io_in_0_grant_bits_data : UInt<64>
    input io_out_0_acquire_ready : UInt<1>
    output io_out_0_acquire_valid : UInt<1>
    output io_out_0_acquire_bits_addr_block : UInt<26>
    output io_out_0_acquire_bits_client_xact_id : UInt<2>
    output io_out_0_acquire_bits_addr_beat : UInt<3>
    output io_out_0_acquire_bits_is_builtin_type : UInt<1>
    output io_out_0_acquire_bits_a_type : UInt<3>
    output io_out_0_acquire_bits_union : UInt<11>
    output io_out_0_acquire_bits_data : UInt<64>
    output io_out_0_grant_ready : UInt<1>
    input io_out_0_grant_valid : UInt<1>
    input io_out_0_grant_bits_addr_beat : UInt<3>
    input io_out_0_grant_bits_client_xact_id : UInt<2>
    input io_out_0_grant_bits_manager_xact_id : UInt<1>
    input io_out_0_grant_bits_is_builtin_type : UInt<1>
    input io_out_0_grant_bits_g_type : UInt<4>
    input io_out_0_grant_bits_data : UInt<64>
    input io_out_1_acquire_ready : UInt<1>
    output io_out_1_acquire_valid : UInt<1>
    output io_out_1_acquire_bits_addr_block : UInt<26>
    output io_out_1_acquire_bits_client_xact_id : UInt<2>
    output io_out_1_acquire_bits_addr_beat : UInt<3>
    output io_out_1_acquire_bits_is_builtin_type : UInt<1>
    output io_out_1_acquire_bits_a_type : UInt<3>
    output io_out_1_acquire_bits_union : UInt<11>
    output io_out_1_acquire_bits_data : UInt<64>
    output io_out_1_grant_ready : UInt<1>
    input io_out_1_grant_valid : UInt<1>
    input io_out_1_grant_bits_addr_beat : UInt<3>
    input io_out_1_grant_bits_client_xact_id : UInt<2>
    input io_out_1_grant_bits_manager_xact_id : UInt<1>
    input io_out_1_grant_bits_is_builtin_type : UInt<1>
    input io_out_1_grant_bits_g_type : UInt<4>
    input io_out_1_grant_bits_data : UInt<64>
    input io_out_2_acquire_ready : UInt<1>
    output io_out_2_acquire_valid : UInt<1>
    output io_out_2_acquire_bits_addr_block : UInt<26>
    output io_out_2_acquire_bits_client_xact_id : UInt<2>
    output io_out_2_acquire_bits_addr_beat : UInt<3>
    output io_out_2_acquire_bits_is_builtin_type : UInt<1>
    output io_out_2_acquire_bits_a_type : UInt<3>
    output io_out_2_acquire_bits_union : UInt<11>
    output io_out_2_acquire_bits_data : UInt<64>
    output io_out_2_grant_ready : UInt<1>
    input io_out_2_grant_valid : UInt<1>
    input io_out_2_grant_bits_addr_beat : UInt<3>
    input io_out_2_grant_bits_client_xact_id : UInt<2>
    input io_out_2_grant_bits_manager_xact_id : UInt<1>
    input io_out_2_grant_bits_is_builtin_type : UInt<1>
    input io_out_2_grant_bits_g_type : UInt<4>
    input io_out_2_grant_bits_data : UInt<64>
    input io_out_3_acquire_ready : UInt<1>
    output io_out_3_acquire_valid : UInt<1>
    output io_out_3_acquire_bits_addr_block : UInt<26>
    output io_out_3_acquire_bits_client_xact_id : UInt<2>
    output io_out_3_acquire_bits_addr_beat : UInt<3>
    output io_out_3_acquire_bits_is_builtin_type : UInt<1>
    output io_out_3_acquire_bits_a_type : UInt<3>
    output io_out_3_acquire_bits_union : UInt<11>
    output io_out_3_acquire_bits_data : UInt<64>
    output io_out_3_grant_ready : UInt<1>
    input io_out_3_grant_valid : UInt<1>
    input io_out_3_grant_bits_addr_beat : UInt<3>
    input io_out_3_grant_bits_client_xact_id : UInt<2>
    input io_out_3_grant_bits_manager_xact_id : UInt<1>
    input io_out_3_grant_bits_is_builtin_type : UInt<1>
    input io_out_3_grant_bits_g_type : UInt<4>
    input io_out_3_grant_bits_data : UInt<64>
  
    inst xbar of ClientUncachedTileLinkIOCrossbar_1
    io_in_0_acquire_ready <= xbar.io_in_0_acquire_ready
    io_in_0_grant_valid <= xbar.io_in_0_grant_valid
    io_in_0_grant_bits_addr_beat <= xbar.io_in_0_grant_bits_addr_beat
    io_in_0_grant_bits_client_xact_id <= xbar.io_in_0_grant_bits_client_xact_id
    io_in_0_grant_bits_manager_xact_id <= xbar.io_in_0_grant_bits_manager_xact_id
    io_in_0_grant_bits_is_builtin_type <= xbar.io_in_0_grant_bits_is_builtin_type
    io_in_0_grant_bits_g_type <= xbar.io_in_0_grant_bits_g_type
    io_in_0_grant_bits_data <= xbar.io_in_0_grant_bits_data
    io_out_0_acquire_valid <= xbar.io_out_0_acquire_valid
    io_out_0_acquire_bits_addr_block <= xbar.io_out_0_acquire_bits_addr_block
    io_out_0_acquire_bits_client_xact_id <= xbar.io_out_0_acquire_bits_client_xact_id
    io_out_0_acquire_bits_addr_beat <= xbar.io_out_0_acquire_bits_addr_beat
    io_out_0_acquire_bits_is_builtin_type <= xbar.io_out_0_acquire_bits_is_builtin_type
    io_out_0_acquire_bits_a_type <= xbar.io_out_0_acquire_bits_a_type
    io_out_0_acquire_bits_union <= xbar.io_out_0_acquire_bits_union
    io_out_0_acquire_bits_data <= xbar.io_out_0_acquire_bits_data
    io_out_0_grant_ready <= xbar.io_out_0_grant_ready
    io_out_1_acquire_valid <= xbar.io_out_1_acquire_valid
    io_out_1_acquire_bits_addr_block <= xbar.io_out_1_acquire_bits_addr_block
    io_out_1_acquire_bits_client_xact_id <= xbar.io_out_1_acquire_bits_client_xact_id
    io_out_1_acquire_bits_addr_beat <= xbar.io_out_1_acquire_bits_addr_beat
    io_out_1_acquire_bits_is_builtin_type <= xbar.io_out_1_acquire_bits_is_builtin_type
    io_out_1_acquire_bits_a_type <= xbar.io_out_1_acquire_bits_a_type
    io_out_1_acquire_bits_union <= xbar.io_out_1_acquire_bits_union
    io_out_1_acquire_bits_data <= xbar.io_out_1_acquire_bits_data
    io_out_1_grant_ready <= xbar.io_out_1_grant_ready
    io_out_2_acquire_valid <= xbar.io_out_2_acquire_valid
    io_out_2_acquire_bits_addr_block <= xbar.io_out_2_acquire_bits_addr_block
    io_out_2_acquire_bits_client_xact_id <= xbar.io_out_2_acquire_bits_client_xact_id
    io_out_2_acquire_bits_addr_beat <= xbar.io_out_2_acquire_bits_addr_beat
    io_out_2_acquire_bits_is_builtin_type <= xbar.io_out_2_acquire_bits_is_builtin_type
    io_out_2_acquire_bits_a_type <= xbar.io_out_2_acquire_bits_a_type
    io_out_2_acquire_bits_union <= xbar.io_out_2_acquire_bits_union
    io_out_2_acquire_bits_data <= xbar.io_out_2_acquire_bits_data
    io_out_2_grant_ready <= xbar.io_out_2_grant_ready
    io_out_3_acquire_valid <= xbar.io_out_3_acquire_valid
    io_out_3_acquire_bits_addr_block <= xbar.io_out_3_acquire_bits_addr_block
    io_out_3_acquire_bits_client_xact_id <= xbar.io_out_3_acquire_bits_client_xact_id
    io_out_3_acquire_bits_addr_beat <= xbar.io_out_3_acquire_bits_addr_beat
    io_out_3_acquire_bits_is_builtin_type <= xbar.io_out_3_acquire_bits_is_builtin_type
    io_out_3_acquire_bits_a_type <= xbar.io_out_3_acquire_bits_a_type
    io_out_3_acquire_bits_union <= xbar.io_out_3_acquire_bits_union
    io_out_3_acquire_bits_data <= xbar.io_out_3_acquire_bits_data
    io_out_3_grant_ready <= xbar.io_out_3_grant_ready
    xbar.io_in_0_acquire_valid <= io_in_0_acquire_valid
    xbar.io_in_0_acquire_bits_addr_block <= io_in_0_acquire_bits_addr_block
    xbar.io_in_0_acquire_bits_client_xact_id <= io_in_0_acquire_bits_client_xact_id
    xbar.io_in_0_acquire_bits_addr_beat <= io_in_0_acquire_bits_addr_beat
    xbar.io_in_0_acquire_bits_is_builtin_type <= io_in_0_acquire_bits_is_builtin_type
    xbar.io_in_0_acquire_bits_a_type <= io_in_0_acquire_bits_a_type
    xbar.io_in_0_acquire_bits_union <= io_in_0_acquire_bits_union
    xbar.io_in_0_acquire_bits_data <= io_in_0_acquire_bits_data
    xbar.io_in_0_grant_ready <= io_in_0_grant_ready
    xbar.io_out_0_acquire_ready <= io_out_0_acquire_ready
    xbar.io_out_0_grant_valid <= io_out_0_grant_valid
    xbar.io_out_0_grant_bits_addr_beat <= io_out_0_grant_bits_addr_beat
    xbar.io_out_0_grant_bits_client_xact_id <= io_out_0_grant_bits_client_xact_id
    xbar.io_out_0_grant_bits_manager_xact_id <= io_out_0_grant_bits_manager_xact_id
    xbar.io_out_0_grant_bits_is_builtin_type <= io_out_0_grant_bits_is_builtin_type
    xbar.io_out_0_grant_bits_g_type <= io_out_0_grant_bits_g_type
    xbar.io_out_0_grant_bits_data <= io_out_0_grant_bits_data
    xbar.io_out_1_acquire_ready <= io_out_1_acquire_ready
    xbar.io_out_1_grant_valid <= io_out_1_grant_valid
    xbar.io_out_1_grant_bits_addr_beat <= io_out_1_grant_bits_addr_beat
    xbar.io_out_1_grant_bits_client_xact_id <= io_out_1_grant_bits_client_xact_id
    xbar.io_out_1_grant_bits_manager_xact_id <= io_out_1_grant_bits_manager_xact_id
    xbar.io_out_1_grant_bits_is_builtin_type <= io_out_1_grant_bits_is_builtin_type
    xbar.io_out_1_grant_bits_g_type <= io_out_1_grant_bits_g_type
    xbar.io_out_1_grant_bits_data <= io_out_1_grant_bits_data
    xbar.io_out_2_acquire_ready <= io_out_2_acquire_ready
    xbar.io_out_2_grant_valid <= io_out_2_grant_valid
    xbar.io_out_2_grant_bits_addr_beat <= io_out_2_grant_bits_addr_beat
    xbar.io_out_2_grant_bits_client_xact_id <= io_out_2_grant_bits_client_xact_id
    xbar.io_out_2_grant_bits_manager_xact_id <= io_out_2_grant_bits_manager_xact_id
    xbar.io_out_2_grant_bits_is_builtin_type <= io_out_2_grant_bits_is_builtin_type
    xbar.io_out_2_grant_bits_g_type <= io_out_2_grant_bits_g_type
    xbar.io_out_2_grant_bits_data <= io_out_2_grant_bits_data
    xbar.io_out_3_acquire_ready <= io_out_3_acquire_ready
    xbar.io_out_3_grant_valid <= io_out_3_grant_valid
    xbar.io_out_3_grant_bits_addr_beat <= io_out_3_grant_bits_addr_beat
    xbar.io_out_3_grant_bits_client_xact_id <= io_out_3_grant_bits_client_xact_id
    xbar.io_out_3_grant_bits_manager_xact_id <= io_out_3_grant_bits_manager_xact_id
    xbar.io_out_3_grant_bits_is_builtin_type <= io_out_3_grant_bits_is_builtin_type
    xbar.io_out_3_grant_bits_g_type <= io_out_3_grant_bits_g_type
    xbar.io_out_3_grant_bits_data <= io_out_3_grant_bits_data

  module TileLinkRecursiveInterconnect :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_acquire_ready : UInt<1>
    input io_in_0_acquire_valid : UInt<1>
    input io_in_0_acquire_bits_addr_block : UInt<26>
    input io_in_0_acquire_bits_client_xact_id : UInt<2>
    input io_in_0_acquire_bits_addr_beat : UInt<3>
    input io_in_0_acquire_bits_is_builtin_type : UInt<1>
    input io_in_0_acquire_bits_a_type : UInt<3>
    input io_in_0_acquire_bits_union : UInt<11>
    input io_in_0_acquire_bits_data : UInt<64>
    input io_in_0_grant_ready : UInt<1>
    output io_in_0_grant_valid : UInt<1>
    output io_in_0_grant_bits_addr_beat : UInt<3>
    output io_in_0_grant_bits_client_xact_id : UInt<2>
    output io_in_0_grant_bits_manager_xact_id : UInt<1>
    output io_in_0_grant_bits_is_builtin_type : UInt<1>
    output io_in_0_grant_bits_g_type : UInt<4>
    output io_in_0_grant_bits_data : UInt<64>
    input io_out_0_acquire_ready : UInt<1>
    output io_out_0_acquire_valid : UInt<1>
    output io_out_0_acquire_bits_addr_block : UInt<26>
    output io_out_0_acquire_bits_client_xact_id : UInt<2>
    output io_out_0_acquire_bits_addr_beat : UInt<3>
    output io_out_0_acquire_bits_is_builtin_type : UInt<1>
    output io_out_0_acquire_bits_a_type : UInt<3>
    output io_out_0_acquire_bits_union : UInt<11>
    output io_out_0_acquire_bits_data : UInt<64>
    output io_out_0_grant_ready : UInt<1>
    input io_out_0_grant_valid : UInt<1>
    input io_out_0_grant_bits_addr_beat : UInt<3>
    input io_out_0_grant_bits_client_xact_id : UInt<2>
    input io_out_0_grant_bits_manager_xact_id : UInt<1>
    input io_out_0_grant_bits_is_builtin_type : UInt<1>
    input io_out_0_grant_bits_g_type : UInt<4>
    input io_out_0_grant_bits_data : UInt<64>
    input io_out_1_acquire_ready : UInt<1>
    output io_out_1_acquire_valid : UInt<1>
    output io_out_1_acquire_bits_addr_block : UInt<26>
    output io_out_1_acquire_bits_client_xact_id : UInt<2>
    output io_out_1_acquire_bits_addr_beat : UInt<3>
    output io_out_1_acquire_bits_is_builtin_type : UInt<1>
    output io_out_1_acquire_bits_a_type : UInt<3>
    output io_out_1_acquire_bits_union : UInt<11>
    output io_out_1_acquire_bits_data : UInt<64>
    output io_out_1_grant_ready : UInt<1>
    input io_out_1_grant_valid : UInt<1>
    input io_out_1_grant_bits_addr_beat : UInt<3>
    input io_out_1_grant_bits_client_xact_id : UInt<2>
    input io_out_1_grant_bits_manager_xact_id : UInt<1>
    input io_out_1_grant_bits_is_builtin_type : UInt<1>
    input io_out_1_grant_bits_g_type : UInt<4>
    input io_out_1_grant_bits_data : UInt<64>
    input io_out_2_acquire_ready : UInt<1>
    output io_out_2_acquire_valid : UInt<1>
    output io_out_2_acquire_bits_addr_block : UInt<26>
    output io_out_2_acquire_bits_client_xact_id : UInt<2>
    output io_out_2_acquire_bits_addr_beat : UInt<3>
    output io_out_2_acquire_bits_is_builtin_type : UInt<1>
    output io_out_2_acquire_bits_a_type : UInt<3>
    output io_out_2_acquire_bits_union : UInt<11>
    output io_out_2_acquire_bits_data : UInt<64>
    output io_out_2_grant_ready : UInt<1>
    input io_out_2_grant_valid : UInt<1>
    input io_out_2_grant_bits_addr_beat : UInt<3>
    input io_out_2_grant_bits_client_xact_id : UInt<2>
    input io_out_2_grant_bits_manager_xact_id : UInt<1>
    input io_out_2_grant_bits_is_builtin_type : UInt<1>
    input io_out_2_grant_bits_g_type : UInt<4>
    input io_out_2_grant_bits_data : UInt<64>
    input io_out_3_acquire_ready : UInt<1>
    output io_out_3_acquire_valid : UInt<1>
    output io_out_3_acquire_bits_addr_block : UInt<26>
    output io_out_3_acquire_bits_client_xact_id : UInt<2>
    output io_out_3_acquire_bits_addr_beat : UInt<3>
    output io_out_3_acquire_bits_is_builtin_type : UInt<1>
    output io_out_3_acquire_bits_a_type : UInt<3>
    output io_out_3_acquire_bits_union : UInt<11>
    output io_out_3_acquire_bits_data : UInt<64>
    output io_out_3_grant_ready : UInt<1>
    input io_out_3_grant_valid : UInt<1>
    input io_out_3_grant_bits_addr_beat : UInt<3>
    input io_out_3_grant_bits_client_xact_id : UInt<2>
    input io_out_3_grant_bits_manager_xact_id : UInt<1>
    input io_out_3_grant_bits_is_builtin_type : UInt<1>
    input io_out_3_grant_bits_g_type : UInt<4>
    input io_out_3_grant_bits_data : UInt<64>
  
    inst xbar of ClientUncachedTileLinkIOCrossbar
    inst TileLinkRecursiveInterconnect_1_1 of TileLinkRecursiveInterconnect_1
    io_in_0_acquire_ready <= xbar.io_in_0_acquire_ready
    io_in_0_grant_valid <= xbar.io_in_0_grant_valid
    io_in_0_grant_bits_addr_beat <= xbar.io_in_0_grant_bits_addr_beat
    io_in_0_grant_bits_client_xact_id <= xbar.io_in_0_grant_bits_client_xact_id
    io_in_0_grant_bits_manager_xact_id <= xbar.io_in_0_grant_bits_manager_xact_id
    io_in_0_grant_bits_is_builtin_type <= xbar.io_in_0_grant_bits_is_builtin_type
    io_in_0_grant_bits_g_type <= xbar.io_in_0_grant_bits_g_type
    io_in_0_grant_bits_data <= xbar.io_in_0_grant_bits_data
    io_out_0_acquire_valid <= TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_valid
    io_out_0_acquire_bits_addr_block <= TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_bits_addr_block
    io_out_0_acquire_bits_client_xact_id <= TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_bits_client_xact_id
    io_out_0_acquire_bits_addr_beat <= TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_bits_addr_beat
    io_out_0_acquire_bits_is_builtin_type <= TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_bits_is_builtin_type
    io_out_0_acquire_bits_a_type <= TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_bits_a_type
    io_out_0_acquire_bits_union <= TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_bits_union
    io_out_0_acquire_bits_data <= TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_bits_data
    io_out_0_grant_ready <= TileLinkRecursiveInterconnect_1_1.io_out_0_grant_ready
    io_out_1_acquire_valid <= TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_valid
    io_out_1_acquire_bits_addr_block <= TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_bits_addr_block
    io_out_1_acquire_bits_client_xact_id <= TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_bits_client_xact_id
    io_out_1_acquire_bits_addr_beat <= TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_bits_addr_beat
    io_out_1_acquire_bits_is_builtin_type <= TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_bits_is_builtin_type
    io_out_1_acquire_bits_a_type <= TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_bits_a_type
    io_out_1_acquire_bits_union <= TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_bits_union
    io_out_1_acquire_bits_data <= TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_bits_data
    io_out_1_grant_ready <= TileLinkRecursiveInterconnect_1_1.io_out_1_grant_ready
    io_out_2_acquire_valid <= TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_valid
    io_out_2_acquire_bits_addr_block <= TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_bits_addr_block
    io_out_2_acquire_bits_client_xact_id <= TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_bits_client_xact_id
    io_out_2_acquire_bits_addr_beat <= TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_bits_addr_beat
    io_out_2_acquire_bits_is_builtin_type <= TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_bits_is_builtin_type
    io_out_2_acquire_bits_a_type <= TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_bits_a_type
    io_out_2_acquire_bits_union <= TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_bits_union
    io_out_2_acquire_bits_data <= TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_bits_data
    io_out_2_grant_ready <= TileLinkRecursiveInterconnect_1_1.io_out_2_grant_ready
    io_out_3_acquire_valid <= TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_valid
    io_out_3_acquire_bits_addr_block <= TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_bits_addr_block
    io_out_3_acquire_bits_client_xact_id <= TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_bits_client_xact_id
    io_out_3_acquire_bits_addr_beat <= TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_bits_addr_beat
    io_out_3_acquire_bits_is_builtin_type <= TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_bits_is_builtin_type
    io_out_3_acquire_bits_a_type <= TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_bits_a_type
    io_out_3_acquire_bits_union <= TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_bits_union
    io_out_3_acquire_bits_data <= TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_bits_data
    io_out_3_grant_ready <= TileLinkRecursiveInterconnect_1_1.io_out_3_grant_ready
    xbar.io_in_0_acquire_valid <= io_in_0_acquire_valid
    xbar.io_in_0_acquire_bits_addr_block <= io_in_0_acquire_bits_addr_block
    xbar.io_in_0_acquire_bits_client_xact_id <= io_in_0_acquire_bits_client_xact_id
    xbar.io_in_0_acquire_bits_addr_beat <= io_in_0_acquire_bits_addr_beat
    xbar.io_in_0_acquire_bits_is_builtin_type <= io_in_0_acquire_bits_is_builtin_type
    xbar.io_in_0_acquire_bits_a_type <= io_in_0_acquire_bits_a_type
    xbar.io_in_0_acquire_bits_union <= io_in_0_acquire_bits_union
    xbar.io_in_0_acquire_bits_data <= io_in_0_acquire_bits_data
    xbar.io_in_0_grant_ready <= io_in_0_grant_ready
    xbar.io_out_0_acquire_ready <= TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_ready
    xbar.io_out_0_grant_valid <= TileLinkRecursiveInterconnect_1_1.io_in_0_grant_valid
    xbar.io_out_0_grant_bits_addr_beat <= TileLinkRecursiveInterconnect_1_1.io_in_0_grant_bits_addr_beat
    xbar.io_out_0_grant_bits_client_xact_id <= TileLinkRecursiveInterconnect_1_1.io_in_0_grant_bits_client_xact_id
    xbar.io_out_0_grant_bits_manager_xact_id <= TileLinkRecursiveInterconnect_1_1.io_in_0_grant_bits_manager_xact_id
    xbar.io_out_0_grant_bits_is_builtin_type <= TileLinkRecursiveInterconnect_1_1.io_in_0_grant_bits_is_builtin_type
    xbar.io_out_0_grant_bits_g_type <= TileLinkRecursiveInterconnect_1_1.io_in_0_grant_bits_g_type
    xbar.io_out_0_grant_bits_data <= TileLinkRecursiveInterconnect_1_1.io_in_0_grant_bits_data
    TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_valid <= xbar.io_out_0_acquire_valid
    TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_bits_addr_block <= xbar.io_out_0_acquire_bits_addr_block
    TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_bits_client_xact_id <= xbar.io_out_0_acquire_bits_client_xact_id
    TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_bits_addr_beat <= xbar.io_out_0_acquire_bits_addr_beat
    TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_bits_is_builtin_type <= xbar.io_out_0_acquire_bits_is_builtin_type
    TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_bits_a_type <= xbar.io_out_0_acquire_bits_a_type
    TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_bits_union <= xbar.io_out_0_acquire_bits_union
    TileLinkRecursiveInterconnect_1_1.io_in_0_acquire_bits_data <= xbar.io_out_0_acquire_bits_data
    TileLinkRecursiveInterconnect_1_1.io_in_0_grant_ready <= xbar.io_out_0_grant_ready
    TileLinkRecursiveInterconnect_1_1.io_out_0_acquire_ready <= io_out_0_acquire_ready
    TileLinkRecursiveInterconnect_1_1.io_out_0_grant_valid <= io_out_0_grant_valid
    TileLinkRecursiveInterconnect_1_1.io_out_0_grant_bits_addr_beat <= io_out_0_grant_bits_addr_beat
    TileLinkRecursiveInterconnect_1_1.io_out_0_grant_bits_client_xact_id <= io_out_0_grant_bits_client_xact_id
    TileLinkRecursiveInterconnect_1_1.io_out_0_grant_bits_manager_xact_id <= io_out_0_grant_bits_manager_xact_id
    TileLinkRecursiveInterconnect_1_1.io_out_0_grant_bits_is_builtin_type <= io_out_0_grant_bits_is_builtin_type
    TileLinkRecursiveInterconnect_1_1.io_out_0_grant_bits_g_type <= io_out_0_grant_bits_g_type
    TileLinkRecursiveInterconnect_1_1.io_out_0_grant_bits_data <= io_out_0_grant_bits_data
    TileLinkRecursiveInterconnect_1_1.io_out_1_acquire_ready <= io_out_1_acquire_ready
    TileLinkRecursiveInterconnect_1_1.io_out_1_grant_valid <= io_out_1_grant_valid
    TileLinkRecursiveInterconnect_1_1.io_out_1_grant_bits_addr_beat <= io_out_1_grant_bits_addr_beat
    TileLinkRecursiveInterconnect_1_1.io_out_1_grant_bits_client_xact_id <= io_out_1_grant_bits_client_xact_id
    TileLinkRecursiveInterconnect_1_1.io_out_1_grant_bits_manager_xact_id <= io_out_1_grant_bits_manager_xact_id
    TileLinkRecursiveInterconnect_1_1.io_out_1_grant_bits_is_builtin_type <= io_out_1_grant_bits_is_builtin_type
    TileLinkRecursiveInterconnect_1_1.io_out_1_grant_bits_g_type <= io_out_1_grant_bits_g_type
    TileLinkRecursiveInterconnect_1_1.io_out_1_grant_bits_data <= io_out_1_grant_bits_data
    TileLinkRecursiveInterconnect_1_1.io_out_2_acquire_ready <= io_out_2_acquire_ready
    TileLinkRecursiveInterconnect_1_1.io_out_2_grant_valid <= io_out_2_grant_valid
    TileLinkRecursiveInterconnect_1_1.io_out_2_grant_bits_addr_beat <= io_out_2_grant_bits_addr_beat
    TileLinkRecursiveInterconnect_1_1.io_out_2_grant_bits_client_xact_id <= io_out_2_grant_bits_client_xact_id
    TileLinkRecursiveInterconnect_1_1.io_out_2_grant_bits_manager_xact_id <= io_out_2_grant_bits_manager_xact_id
    TileLinkRecursiveInterconnect_1_1.io_out_2_grant_bits_is_builtin_type <= io_out_2_grant_bits_is_builtin_type
    TileLinkRecursiveInterconnect_1_1.io_out_2_grant_bits_g_type <= io_out_2_grant_bits_g_type
    TileLinkRecursiveInterconnect_1_1.io_out_2_grant_bits_data <= io_out_2_grant_bits_data
    TileLinkRecursiveInterconnect_1_1.io_out_3_acquire_ready <= io_out_3_acquire_ready
    TileLinkRecursiveInterconnect_1_1.io_out_3_grant_valid <= io_out_3_grant_valid
    TileLinkRecursiveInterconnect_1_1.io_out_3_grant_bits_addr_beat <= io_out_3_grant_bits_addr_beat
    TileLinkRecursiveInterconnect_1_1.io_out_3_grant_bits_client_xact_id <= io_out_3_grant_bits_client_xact_id
    TileLinkRecursiveInterconnect_1_1.io_out_3_grant_bits_manager_xact_id <= io_out_3_grant_bits_manager_xact_id
    TileLinkRecursiveInterconnect_1_1.io_out_3_grant_bits_is_builtin_type <= io_out_3_grant_bits_is_builtin_type
    TileLinkRecursiveInterconnect_1_1.io_out_3_grant_bits_g_type <= io_out_3_grant_bits_g_type
    TileLinkRecursiveInterconnect_1_1.io_out_3_grant_bits_data <= io_out_3_grant_bits_data

  module Queue_17 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_addr_block : UInt<26>
    input io_enq_bits_client_xact_id : UInt<2>
    input io_enq_bits_addr_beat : UInt<3>
    input io_enq_bits_is_builtin_type : UInt<1>
    input io_enq_bits_a_type : UInt<3>
    input io_enq_bits_union : UInt<11>
    input io_enq_bits_data : UInt<64>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_addr_block : UInt<26>
    output io_deq_bits_client_xact_id : UInt<2>
    output io_deq_bits_addr_beat : UInt<3>
    output io_deq_bits_is_builtin_type : UInt<1>
    output io_deq_bits_a_type : UInt<3>
    output io_deq_bits_union : UInt<11>
    output io_deq_bits_data : UInt<64>
    output io_count : UInt<1>
  
    mem ram_addr_block :
      data-type => UInt<26>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_addr_block.T_254.en <= UInt<1>("h1")
    ram_addr_block.T_254.addr <= UInt<1>("h0")
    ram_addr_block.T_224.en <= do_enq
    ram_addr_block.T_224.mask <= do_enq
    ram_addr_block.T_224.addr <= UInt<1>("h0")
    ram_addr_block.T_224.data <= io_enq_bits_addr_block
    mem ram_client_xact_id :
      data-type => UInt<2>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_client_xact_id.T_254.en <= UInt<1>("h1")
    ram_client_xact_id.T_254.addr <= UInt<1>("h0")
    ram_client_xact_id.T_224.en <= do_enq
    ram_client_xact_id.T_224.mask <= do_enq
    ram_client_xact_id.T_224.addr <= UInt<1>("h0")
    ram_client_xact_id.T_224.data <= io_enq_bits_client_xact_id
    mem ram_addr_beat :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_addr_beat.T_254.en <= UInt<1>("h1")
    ram_addr_beat.T_254.addr <= UInt<1>("h0")
    ram_addr_beat.T_224.en <= do_enq
    ram_addr_beat.T_224.mask <= do_enq
    ram_addr_beat.T_224.addr <= UInt<1>("h0")
    ram_addr_beat.T_224.data <= io_enq_bits_addr_beat
    mem ram_is_builtin_type :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_is_builtin_type.T_254.en <= UInt<1>("h1")
    ram_is_builtin_type.T_254.addr <= UInt<1>("h0")
    ram_is_builtin_type.T_224.en <= do_enq
    ram_is_builtin_type.T_224.mask <= do_enq
    ram_is_builtin_type.T_224.addr <= UInt<1>("h0")
    ram_is_builtin_type.T_224.data <= io_enq_bits_is_builtin_type
    mem ram_a_type :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_a_type.T_254.en <= UInt<1>("h1")
    ram_a_type.T_254.addr <= UInt<1>("h0")
    ram_a_type.T_224.en <= do_enq
    ram_a_type.T_224.mask <= do_enq
    ram_a_type.T_224.addr <= UInt<1>("h0")
    ram_a_type.T_224.data <= io_enq_bits_a_type
    mem ram_union :
      data-type => UInt<11>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_union.T_254.en <= UInt<1>("h1")
    ram_union.T_254.addr <= UInt<1>("h0")
    ram_union.T_224.en <= do_enq
    ram_union.T_224.mask <= do_enq
    ram_union.T_224.addr <= UInt<1>("h0")
    ram_union.T_224.data <= io_enq_bits_union
    mem ram_data :
      data-type => UInt<64>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_254
      writer => T_224
      read-under-write => undefined
    ram_data.T_254.en <= UInt<1>("h1")
    ram_data.T_254.addr <= UInt<1>("h0")
    ram_data.T_224.en <= do_enq
    ram_data.T_224.mask <= do_enq
    ram_data.T_224.addr <= UInt<1>("h0")
    ram_data.T_224.data <= io_enq_bits_data
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_221 = eq(maybe_full, UInt<1>("h0"))
    node T_222 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_223 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_249 = neq(do_enq, do_deq)
    node GEN_10 = mux(T_249, do_enq, maybe_full)
    node T_251 = eq(T_221, UInt<1>("h0"))
    node T_277 = sub(UInt<1>("h0"), UInt<1>("h0"))
    node ptr_diff = tail(T_277, 1)
    node T_279 = cat(maybe_full, ptr_diff)
    io_enq_ready <= T_221
    io_deq_valid <= T_251
    io_deq_bits_addr_block <= ram_addr_block.T_254.data
    io_deq_bits_client_xact_id <= ram_client_xact_id.T_254.data
    io_deq_bits_addr_beat <= ram_addr_beat.T_254.data
    io_deq_bits_is_builtin_type <= ram_is_builtin_type.T_254.data
    io_deq_bits_a_type <= ram_a_type.T_254.data
    io_deq_bits_union <= ram_union.T_254.data
    io_deq_bits_data <= ram_data.T_254.data
    io_count <= bits(T_279, 0, 0)
    maybe_full <= GEN_10
    do_enq <= T_222
    do_deq <= T_223

  module PLIC :
    input clk : Clock
    input reset : UInt<1>
    input io_devices_0_valid : UInt<1>
    output io_devices_0_ready : UInt<1>
    output io_devices_0_complete : UInt<1>
    input io_devices_1_valid : UInt<1>
    output io_devices_1_ready : UInt<1>
    output io_devices_1_complete : UInt<1>
    output io_harts_0 : UInt<1>
    output io_harts_1 : UInt<1>
    output io_tl_acquire_ready : UInt<1>
    input io_tl_acquire_valid : UInt<1>
    input io_tl_acquire_bits_addr_block : UInt<26>
    input io_tl_acquire_bits_client_xact_id : UInt<2>
    input io_tl_acquire_bits_addr_beat : UInt<3>
    input io_tl_acquire_bits_is_builtin_type : UInt<1>
    input io_tl_acquire_bits_a_type : UInt<3>
    input io_tl_acquire_bits_union : UInt<11>
    input io_tl_acquire_bits_data : UInt<64>
    input io_tl_grant_ready : UInt<1>
    output io_tl_grant_valid : UInt<1>
    output io_tl_grant_bits_addr_beat : UInt<3>
    output io_tl_grant_bits_client_xact_id : UInt<2>
    output io_tl_grant_bits_manager_xact_id : UInt<1>
    output io_tl_grant_bits_is_builtin_type : UInt<1>
    output io_tl_grant_bits_g_type : UInt<4>
    output io_tl_grant_bits_data : UInt<64>
  
    wire T_477_0 : UInt<1>
    wire T_477_1 : UInt<1>
    wire T_477_2 : UInt<1>
    wire priority_0 : UInt<1>
    wire priority_1 : UInt<1>
    wire priority_2 : UInt<1>
    wire T_489_0 : UInt<1>
    wire T_489_1 : UInt<1>
    wire threshold_0 : UInt<1>
    wire threshold_1 : UInt<1>
    wire T_502_0 : UInt<1>
    wire T_502_1 : UInt<1>
    wire T_502_2 : UInt<1>
    reg pending_0 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_1 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg pending_2 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg enables_0_0 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg enables_0_1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), enables_0_1)
    reg enables_0_2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), enables_0_2)
    reg enables_1_0 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), UInt<1>("h0"))
    reg enables_1_1 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), enables_1_1)
    reg enables_1_2 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), enables_1_2)
    node T_545 = eq(pending_1, UInt<1>("h0"))
    node GEN_12 = mux(io_devices_0_valid, UInt<1>("h1"), pending_1)
    node T_549 = eq(pending_2, UInt<1>("h0"))
    node GEN_13 = mux(io_devices_1_valid, UInt<1>("h1"), pending_2)
    wire maxDevs_0 : UInt<2>
    wire maxDevs_1 : UInt<2>
    node T_559 = and(pending_1, enables_0_1)
    node T_560 = cat(T_559, UInt<1>("h1"))
    node T_561 = and(pending_2, enables_0_2)
    node T_562 = cat(T_561, UInt<1>("h1"))
    node T_567 = geq(UInt<2>("h2"), T_560)
    node T_568 = mux(T_567, UInt<2>("h2"), T_560)
    node T_570 = add(UInt<1>("h1"), UInt<1>("h0"))
    node T_571 = tail(T_570, 1)
    node T_572 = mux(T_567, UInt<1>("h0"), T_571)
    node T_574 = geq(T_568, T_562)
    node T_575 = mux(T_574, T_568, T_562)
    node T_577 = add(UInt<2>("h2"), UInt<2>("h0"))
    node T_578 = tail(T_577, 1)
    node T_579 = mux(T_574, pad(T_572, 2), T_578)
    reg T_580 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_580)
    reg T_581 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_581)
    node T_583 = cat(UInt<1>("h1"), UInt<1>("h0"))
    node T_584 = gt(T_581, T_583)
    node T_585 = and(pending_1, enables_1_1)
    node T_586 = cat(T_585, UInt<1>("h1"))
    node T_587 = and(pending_2, enables_1_2)
    node T_588 = cat(T_587, UInt<1>("h1"))
    node T_593 = geq(UInt<2>("h2"), T_586)
    node T_594 = mux(T_593, UInt<2>("h2"), T_586)
    node T_598 = mux(T_593, UInt<1>("h0"), T_571)
    node T_600 = geq(T_594, T_588)
    node T_601 = mux(T_600, T_594, T_588)
    node T_605 = mux(T_600, pad(T_598, 2), T_578)
    reg T_606 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_606)
    reg T_607 : UInt<2>, clk with :
      reset => (UInt<1>("h0"), T_607)
    node T_609 = cat(UInt<1>("h1"), UInt<1>("h0"))
    node T_610 = gt(T_607, T_609)
    inst acq of Queue_17
    node T_634 = and(acq.io_deq_ready, acq.io_deq_valid)
    node T_636 = eq(acq.io_deq_bits_a_type, UInt<3>("h0"))
    node T_637 = and(acq.io_deq_bits_is_builtin_type, T_636)
    node read = and(T_634, T_637)
    node T_640 = eq(acq.io_deq_bits_a_type, UInt<3>("h2"))
    node T_641 = and(acq.io_deq_bits_is_builtin_type, T_640)
    node write = and(T_634, T_641)
    node T_644 = eq(T_634, UInt<1>("h0"))
    node T_645 = or(T_644, read)
    node T_646 = or(T_645, write)
    node T_647 = or(T_646, reset)
    node T_649 = eq(T_647, UInt<1>("h0"))
    wire T_657_0 : UInt<3>
    wire T_657_1 : UInt<3>
    node T_659 = eq(acq.io_deq_bits_a_type, UInt<3>("h0"))
    node T_660 = eq(acq.io_deq_bits_a_type, UInt<3>("h4"))
    node T_661 = or(T_659, T_660)
    node T_662 = and(acq.io_deq_bits_is_builtin_type, T_661)
    node T_663 = bits(acq.io_deq_bits_union, 10, 8)
    node T_665 = mux(T_662, T_663, UInt<3>("h0"))
    node T_666 = cat(acq.io_deq_bits_addr_block, acq.io_deq_bits_addr_beat)
    node T_667 = cat(T_666, T_665)
    node addr = bits(T_667, 25, 0)
    node T_669 = sub(addr, UInt<26>("h200000"))
    node T_670 = tail(T_669, 1)
    node claimant = bits(T_670, 12, 12)
    wire hart : UInt<1>
    wire rdata : UInt<64>
    node T_676 = eq(acq.io_deq_bits_a_type, UInt<3>("h4"))
    node T_677 = and(acq.io_deq_bits_is_builtin_type, T_676)
    node T_696 = eq(acq.io_deq_bits_a_type, UInt<3>("h3"))
    node T_697 = and(acq.io_deq_bits_is_builtin_type, T_696)
    node T_701 = or(T_697, T_641)
    node T_702 = bits(acq.io_deq_bits_union, 8, 1)
    node T_704 = mux(T_701, T_702, UInt<8>("h0"))
    node T_705 = mux(T_677, UInt<8>("hff"), T_704)
    node T_706 = bits(T_705, 0, 0)
    node T_707 = bits(T_705, 1, 1)
    node T_708 = bits(T_705, 2, 2)
    node T_709 = bits(T_705, 3, 3)
    node T_710 = bits(T_705, 4, 4)
    node T_711 = bits(T_705, 5, 5)
    node T_712 = bits(T_705, 6, 6)
    node T_713 = bits(T_705, 7, 7)
    node T_717 = mux(T_706, UInt<8>("hff"), UInt<8>("h0"))
    node T_721 = mux(T_707, UInt<8>("hff"), UInt<8>("h0"))
    node T_725 = mux(T_708, UInt<8>("hff"), UInt<8>("h0"))
    node T_729 = mux(T_709, UInt<8>("hff"), UInt<8>("h0"))
    node T_733 = mux(T_710, UInt<8>("hff"), UInt<8>("h0"))
    node T_737 = mux(T_711, UInt<8>("hff"), UInt<8>("h0"))
    node T_741 = mux(T_712, UInt<8>("hff"), UInt<8>("h0"))
    node T_745 = mux(T_713, UInt<8>("hff"), UInt<8>("h0"))
    node T_746 = cat(T_721, T_717)
    node T_747 = cat(T_729, T_725)
    node T_748 = cat(T_747, T_746)
    node T_749 = cat(T_737, T_733)
    node T_750 = cat(T_745, T_741)
    node T_751 = cat(T_750, T_749)
    node T_752 = cat(T_751, T_748)
    node T_753 = and(acq.io_deq_bits_data, T_752)
    node T_832 = not(T_752)
    node T_833 = and(rdata, T_832)
    node masked_wdata = or(T_753, T_833)
    node T_835 = geq(addr, UInt<26>("h200000"))
    wire GEN_0 : UInt<2>
    node GEN_14 = mux(claimant, maxDevs_1, maxDevs_0)
    node T_838 = cat(GEN_0, UInt<31>("h0"))
    wire GEN_1 : UInt<1>
    node GEN_15 = mux(claimant, UInt<1>("h0"), UInt<1>("h0"))
    node T_839 = cat(T_838, GEN_1)
    node T_841 = mul(UInt<7>("h0"), UInt<7>("h40"))
    node T_842 = dshr(T_839, T_841)
    node T_843 = bits(addr, 2, 2)
    node T_844 = and(read, T_843)
    wire GEN_2 : UInt<2>
    wire GEN_3 : UInt<1>
    node GEN_17 = mux(eq(UInt<2>("h1"), GEN_2), UInt<1>("h0"), GEN_12)
    node GEN_18 = mux(eq(UInt<2>("h2"), GEN_2), UInt<1>("h0"), GEN_13)
    node GEN_20 = mux(T_844, GEN_17, GEN_12)
    node GEN_21 = mux(T_844, GEN_18, GEN_13)
    node T_878 = shr(acq.io_deq_bits_data, 32)
    node T_879 = bits(T_878, 1, 0)
    wire GEN_4 : UInt<1>
    node GEN_6 = eq(UInt<1>("h0"), hart)
    node GEN_7 = eq(UInt<2>("h1"), T_879)
    node GEN_22 = mux(and(GEN_6, GEN_7), enables_0_1, UInt<1>("h0"))
    node GEN_75 = eq(UInt<2>("h2"), T_879)
    node GEN_23 = mux(and(GEN_6, GEN_75), enables_0_2, GEN_22)
    node GEN_76 = eq(UInt<2>("h0"), T_879)
    node GEN_24 = mux(and(hart, GEN_76), UInt<1>("h0"), GEN_23)
    node GEN_25 = mux(and(hart, GEN_7), enables_1_1, GEN_24)
    node GEN_26 = mux(and(hart, GEN_75), enables_1_2, GEN_25)
    node T_881 = sub(T_879, UInt<2>("h1"))
    node T_882 = tail(T_881, 1)
    wire GEN_5 : UInt<1>
    node GEN_27 = mux(eq(UInt<2>("h0"), T_882), UInt<1>("h1"), UInt<1>("h0"))
    node GEN_28 = mux(eq(UInt<2>("h1"), T_882), UInt<1>("h1"), UInt<1>("h0"))
    node GEN_29 = mux(GEN_4, GEN_27, UInt<1>("h0"))
    node GEN_30 = mux(GEN_4, GEN_28, UInt<1>("h0"))
    node GEN_31 = mux(T_710, GEN_29, UInt<1>("h0"))
    node GEN_32 = mux(T_710, GEN_30, UInt<1>("h0"))
    node GEN_33 = mux(write, GEN_31, UInt<1>("h0"))
    node GEN_34 = mux(write, GEN_32, UInt<1>("h0"))
    node GEN_35 = mux(T_835, pad(T_842, 64), UInt<64>("h0"))
    node GEN_37 = mux(T_835, GEN_20, GEN_12)
    node GEN_38 = mux(T_835, GEN_21, GEN_13)
    node GEN_39 = mux(T_835, GEN_33, UInt<1>("h0"))
    node GEN_40 = mux(T_835, GEN_34, UInt<1>("h0"))
    node T_890 = geq(addr, UInt<26>("h2000"))
    node T_892 = eq(T_835, UInt<1>("h0"))
    node T_893 = and(T_892, T_890)
    node T_895 = sub(addr, UInt<26>("h2000"))
    node T_896 = tail(T_895, 1)
    node T_897 = bits(T_896, 7, 7)
    wire GEN_6_0 : UInt<1>
    wire GEN_6_1 : UInt<1>
    wire GEN_6_2 : UInt<1>
    node GEN_41 = mux(hart, UInt<1>("h0"), UInt<1>("h0"))
    node GEN_42 = mux(hart, enables_1_1, enables_0_1)
    node GEN_43 = mux(hart, enables_1_2, enables_0_2)
    wire GEN_7_0 : UInt<1>
    wire GEN_7_1 : UInt<1>
    wire GEN_7_2 : UInt<1>
    node T_901 = cat(GEN_6_2, GEN_7_1)
    wire GEN_8_0 : UInt<1>
    wire GEN_8_1 : UInt<1>
    wire GEN_8_2 : UInt<1>
    node T_902 = cat(T_901, GEN_8_0)
    node T_906 = bits(masked_wdata, 0, 0)
    wire GEN_9 : UInt<1>
    node T_910 = bits(masked_wdata, 1, 1)
    wire GEN_10 : UInt<1>
    node GEN_48 = mux(eq(UInt<1>("h0"), T_897), GEN_10, enables_0_1)
    node GEN_49 = mux(T_897, GEN_10, enables_1_1)
    node GEN_50 = mux(write, GEN_48, enables_0_1)
    node GEN_51 = mux(write, GEN_49, enables_1_1)
    node T_914 = bits(masked_wdata, 2, 2)
    wire GEN_11 : UInt<1>
    node GEN_52 = mux(eq(UInt<1>("h0"), T_897), GEN_11, enables_0_2)
    node GEN_53 = mux(T_897, GEN_11, enables_1_2)
    node GEN_54 = mux(write, GEN_52, enables_0_2)
    node GEN_55 = mux(write, GEN_53, enables_1_2)
    node GEN_56 = pad(T_902, 64)
    node GEN_63 = mux(T_893, T_897, claimant)
    node GEN_64 = mux(T_893, GEN_56, GEN_35)
    node GEN_67 = mux(T_893, GEN_50, enables_0_1)
    node GEN_68 = mux(T_893, GEN_51, enables_1_1)
    node GEN_69 = mux(T_893, GEN_54, enables_0_2)
    node GEN_70 = mux(T_893, GEN_55, enables_1_2)
    node T_916 = geq(addr, UInt<26>("h1000"))
    node T_920 = eq(T_890, UInt<1>("h0"))
    node T_921 = and(T_892, T_920)
    node T_922 = and(T_921, T_916)
    node T_924 = cat(pending_2, pending_1)
    node T_925 = cat(T_924, UInt<1>("h0"))
    node T_928 = dshr(T_925, T_841)
    node GEN_71 = mux(T_922, pad(T_928, 64), GEN_64)
    node T_935 = eq(T_916, UInt<1>("h0"))
    node T_936 = and(T_921, T_935)
    node T_937 = bits(addr, 3, 3)
    node T_939 = eq(T_937, UInt<1>("h0"))
    node T_941 = cat(UInt<31>("h0"), UInt<1>("h0"))
    node T_943 = cat(UInt<31>("h0"), UInt<1>("h1"))
    node T_944 = cat(T_943, T_941)
    node GEN_72 = mux(T_939, T_944, GEN_71)
    node T_948 = cat(UInt<31>("h0"), UInt<1>("h1"))
    node GEN_73 = mux(T_937, pad(T_948, 64), GEN_72)
    node GEN_74 = mux(T_936, GEN_73, GEN_71)
    node T_969 = eq(UInt<3>("h6"), acq.io_deq_bits_a_type)
    node T_970 = mux(T_969, UInt<3>("h1"), UInt<3>("h3"))
    node T_971 = eq(UInt<3>("h5"), acq.io_deq_bits_a_type)
    node T_972 = mux(T_971, UInt<3>("h1"), T_970)
    node T_973 = eq(UInt<3>("h4"), acq.io_deq_bits_a_type)
    node T_974 = mux(T_973, UInt<3>("h4"), T_972)
    node T_975 = eq(UInt<3>("h3"), acq.io_deq_bits_a_type)
    node T_976 = mux(T_975, UInt<3>("h3"), T_974)
    node T_977 = eq(UInt<3>("h2"), acq.io_deq_bits_a_type)
    node T_978 = mux(T_977, UInt<3>("h3"), T_976)
    node T_979 = eq(UInt<3>("h1"), acq.io_deq_bits_a_type)
    node T_980 = mux(T_979, UInt<3>("h5"), T_978)
    node T_981 = eq(UInt<3>("h0"), acq.io_deq_bits_a_type)
    node T_982 = mux(T_981, UInt<3>("h4"), T_980)
    wire T_1007_addr_beat : UInt<3>
    wire T_1007_client_xact_id : UInt<2>
    wire T_1007_manager_xact_id : UInt<1>
    wire T_1007_is_builtin_type : UInt<1>
    wire T_1007_g_type : UInt<4>
    wire T_1007_data : UInt<64>
    io_devices_0_ready <= T_545
    io_devices_0_complete <= GEN_39
    io_devices_1_ready <= T_549
    io_devices_1_complete <= GEN_40
    io_harts_0 <= T_584
    io_harts_1 <= T_610
    io_tl_acquire_ready <= acq.io_enq_ready
    io_tl_grant_valid <= acq.io_deq_valid
    io_tl_grant_bits_addr_beat <= UInt<3>("h0")
    io_tl_grant_bits_client_xact_id <= T_1007_client_xact_id
    io_tl_grant_bits_manager_xact_id <= UInt<1>("h0")
    io_tl_grant_bits_is_builtin_type <= UInt<1>("h1")
    io_tl_grant_bits_g_type <= T_1007_g_type
    io_tl_grant_bits_data <= T_1007_data
    pending_1 <= GEN_37
    pending_2 <= GEN_38
    enables_0_1 <= GEN_67
    enables_0_2 <= GEN_69
    enables_1_1 <= GEN_68
    enables_1_2 <= GEN_70
    maxDevs_0 <= T_580
    maxDevs_1 <= T_606
    T_580 <= T_579
    T_581 <= T_575
    T_606 <= T_605
    T_607 <= T_601
    acq.io_enq_valid <= io_tl_acquire_valid
    acq.io_enq_bits_addr_block <= io_tl_acquire_bits_addr_block
    acq.io_enq_bits_client_xact_id <= io_tl_acquire_bits_client_xact_id
    acq.io_enq_bits_addr_beat <= io_tl_acquire_bits_addr_beat
    acq.io_enq_bits_is_builtin_type <= io_tl_acquire_bits_is_builtin_type
    acq.io_enq_bits_a_type <= io_tl_acquire_bits_a_type
    acq.io_enq_bits_union <= io_tl_acquire_bits_union
    acq.io_enq_bits_data <= io_tl_acquire_bits_data
    acq.io_deq_ready <= io_tl_grant_ready
    hart <= GEN_63
    rdata <= GEN_74
    GEN_0 <= GEN_14
    GEN_1 <= GEN_15
    GEN_2 <= GEN_14
    GEN_4 <= GEN_26
    GEN_6_0 <= GEN_41
    GEN_6_1 <= GEN_42
    GEN_6_2 <= GEN_43
    GEN_7_0 <= GEN_41
    GEN_7_1 <= GEN_42
    GEN_7_2 <= GEN_43
    GEN_8_0 <= GEN_41
    GEN_8_1 <= GEN_42
    GEN_8_2 <= GEN_43
    GEN_9 <= T_906
    GEN_10 <= T_910
    GEN_11 <= T_914
    T_1007_client_xact_id <= acq.io_deq_bits_client_xact_id
    T_1007_g_type <= pad(T_982, 4)
    T_1007_data <= rdata
    printf(clk, T_649, "Assertion failed: unsupported PLIC operation\n    at Plic.scala:108 assert(!acq.fire() || read || write, \"unsupported PLIC operation\")\n")
    stop(clk, T_649, 1)

  module LevelGateway :
    input clk : Clock
    input reset : UInt<1>
    input io_interrupt : UInt<1>
    output io_plic_valid : UInt<1>
    input io_plic_ready : UInt<1>
    input io_plic_complete : UInt<1>
  
    reg inFlight : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_6 = and(io_interrupt, io_plic_ready)
    node GEN_0 = mux(T_6, UInt<1>("h1"), inFlight)
    node GEN_1 = mux(io_plic_complete, UInt<1>("h0"), GEN_0)
    node T_10 = eq(inFlight, UInt<1>("h0"))
    node T_11 = and(io_interrupt, T_10)
    io_plic_valid <= T_11
    inFlight <= GEN_1

  module DebugModule :
    input clk : Clock
    input reset : UInt<1>
    output io_db_req_ready : UInt<1>
    input io_db_req_valid : UInt<1>
    input io_db_req_bits_addr : UInt<5>
    input io_db_req_bits_data : UInt<34>
    input io_db_req_bits_op : UInt<2>
    input io_db_resp_ready : UInt<1>
    output io_db_resp_valid : UInt<1>
    output io_db_resp_bits_data : UInt<34>
    output io_db_resp_bits_resp : UInt<2>
    output io_debugInterrupts_0 : UInt<1>
    output io_tl_acquire_ready : UInt<1>
    input io_tl_acquire_valid : UInt<1>
    input io_tl_acquire_bits_addr_block : UInt<26>
    input io_tl_acquire_bits_client_xact_id : UInt<2>
    input io_tl_acquire_bits_addr_beat : UInt<3>
    input io_tl_acquire_bits_is_builtin_type : UInt<1>
    input io_tl_acquire_bits_a_type : UInt<3>
    input io_tl_acquire_bits_union : UInt<11>
    input io_tl_acquire_bits_data : UInt<64>
    input io_tl_grant_ready : UInt<1>
    output io_tl_grant_valid : UInt<1>
    output io_tl_grant_bits_addr_beat : UInt<3>
    output io_tl_grant_bits_client_xact_id : UInt<2>
    output io_tl_grant_bits_manager_xact_id : UInt<1>
    output io_tl_grant_bits_is_builtin_type : UInt<1>
    output io_tl_grant_bits_g_type : UInt<4>
    output io_tl_grant_bits_data : UInt<64>
    output io_ndreset : UInt<1>
    output io_fullreset : UInt<1>
  
    wire CONTROLReset_interrupt : UInt<1>
    wire CONTROLReset_haltnot : UInt<1>
    wire CONTROLReset_reserved0 : UInt<10>
    wire CONTROLReset_buserror : UInt<3>
    wire CONTROLReset_serial : UInt<3>
    wire CONTROLReset_autoincrement : UInt<1>
    wire CONTROLReset_access : UInt<3>
    wire CONTROLReset_hartid : UInt<10>
    wire CONTROLReset_ndreset : UInt<1>
    wire CONTROLReset_fullreset : UInt<1>
    wire CONTROLWrEn : UInt<1>
    reg CONTROLReg_interrupt : UInt<1>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_interrupt)
    reg CONTROLReg_haltnot : UInt<1>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_haltnot)
    reg CONTROLReg_reserved0 : UInt<10>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_reserved0)
    reg CONTROLReg_buserror : UInt<3>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_buserror)
    reg CONTROLReg_serial : UInt<3>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_serial)
    reg CONTROLReg_autoincrement : UInt<1>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_autoincrement)
    reg CONTROLReg_access : UInt<3>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_access)
    reg CONTROLReg_hartid : UInt<10>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_hartid)
    reg CONTROLReg_ndreset : UInt<1>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_ndreset)
    reg CONTROLReg_fullreset : UInt<1>, clk with :
      reset => (UInt<1>("h0"), CONTROLReg_fullreset)
    wire CONTROLWrData_interrupt : UInt<1>
    wire CONTROLWrData_haltnot : UInt<1>
    wire CONTROLWrData_reserved0 : UInt<10>
    wire CONTROLWrData_buserror : UInt<3>
    wire CONTROLWrData_serial : UInt<3>
    wire CONTROLWrData_autoincrement : UInt<1>
    wire CONTROLWrData_access : UInt<3>
    wire CONTROLWrData_hartid : UInt<10>
    wire CONTROLWrData_ndreset : UInt<1>
    wire CONTROLWrData_fullreset : UInt<1>
    wire CONTROLRdData_interrupt : UInt<1>
    wire CONTROLRdData_haltnot : UInt<1>
    wire CONTROLRdData_reserved0 : UInt<10>
    wire CONTROLRdData_buserror : UInt<3>
    wire CONTROLRdData_serial : UInt<3>
    wire CONTROLRdData_autoincrement : UInt<1>
    wire CONTROLRdData_access : UInt<3>
    wire CONTROLRdData_hartid : UInt<10>
    wire CONTROLRdData_ndreset : UInt<1>
    wire CONTROLRdData_fullreset : UInt<1>
    reg ndresetCtrReg : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ndresetCtrReg)
    wire DMINFORdData_reserved0 : UInt<2>
    wire DMINFORdData_abussize : UInt<7>
    wire DMINFORdData_serialcount : UInt<4>
    wire DMINFORdData_access128 : UInt<1>
    wire DMINFORdData_access64 : UInt<1>
    wire DMINFORdData_access32 : UInt<1>
    wire DMINFORdData_access16 : UInt<1>
    wire DMINFORdData_accesss8 : UInt<1>
    wire DMINFORdData_dramsize : UInt<6>
    wire DMINFORdData_haltsum : UInt<1>
    wire DMINFORdData_reserved1 : UInt<3>
    wire DMINFORdData_authenticated : UInt<1>
    wire DMINFORdData_authbusy : UInt<1>
    wire DMINFORdData_authtype : UInt<2>
    wire DMINFORdData_version : UInt<2>
    wire HALTSUMRdData_serialfull : UInt<1>
    wire HALTSUMRdData_serialvalid : UInt<1>
    wire HALTSUMRdData_acks : UInt<32>
    wire RAMWrData_interrupt : UInt<1>
    wire RAMWrData_haltnot : UInt<1>
    wire RAMWrData_data : UInt<32>
    wire RAMRdData_interrupt : UInt<1>
    wire RAMRdData_haltnot : UInt<1>
    wire RAMRdData_data : UInt<32>
    wire SETHALTNOTWrEn : UInt<1>
    wire SETHALTNOTWrData : UInt<10>
    wire CLEARDEBINTWrEn : UInt<1>
    wire CLEARDEBINTWrData : UInt<10>
    wire T_655_0 : UInt<1>
    reg interruptRegs_0 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire T_666_0 : UInt<1>
    reg haltnotRegs_0 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire haltnotStatus_0 : UInt<32>
    wire rdHaltnotStatus : UInt<32>
    node haltnotSummary = neq(haltnotStatus_0, UInt<32>("h0"))
    mem ramMem :
      data-type => UInt<64>
      depth => 8
      read-latency => 0
      write-latency => 1
      reader => T_850
      writer => T_851
      read-under-write => undefined
    ramMem.T_850.en <= UInt<1>("h1")
    ramMem.T_850.addr <= ramAddr
    ramMem.T_851.en <= ramWrEn
    ramMem.T_851.mask <= ramWrEn
    ramMem.T_851.addr <= ramAddr
    ramMem.T_851.data <= ramWrData
    wire ramAddr : UInt<3>
    wire ramRdData : UInt<64>
    wire ramWrData : UInt<64>
    wire ramWrMask : UInt<64>
    wire ramWrEn : UInt<1>
    wire dbRamAddr : UInt<4>
    wire dbRamRdData : UInt<32>
    wire dbRamWrData : UInt<32>
    wire dbRamWrEn : UInt<1>
    wire dbRamRdEn : UInt<1>
    wire sbRamAddr : UInt<3>
    wire sbRamRdData : UInt<64>
    wire sbRamWrData : UInt<64>
    wire sbRamWrEn : UInt<1>
    wire sbRamRdEn : UInt<1>
    wire sbRomRdData : UInt<64>
    wire dbRdEn : UInt<1>
    wire dbWrEn : UInt<1>
    wire dbRdData : UInt<34>
    reg dbStateReg : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    wire dbResult_data : UInt<34>
    wire dbResult_resp : UInt<2>
    wire dbReq_addr : UInt<5>
    wire dbReq_data : UInt<34>
    wire dbReq_op : UInt<2>
    reg dbRespReg_data : UInt<34>, clk with :
      reset => (UInt<1>("h0"), dbRespReg_data)
    reg dbRespReg_resp : UInt<2>, clk with :
      reset => (UInt<1>("h0"), dbRespReg_resp)
    wire rdCondWrFailure : UInt<1>
    wire dbWrNeeded : UInt<1>
    wire sbAddr : UInt<12>
    wire sbRdData : UInt<64>
    wire sbWrData : UInt<64>
    wire sbWrMask : UInt<64>
    wire sbWrEn : UInt<1>
    wire sbRdEn : UInt<1>
    wire stallFromDb : UInt<1>
    wire stallFromSb : UInt<1>
    node T_720 = eq(CONTROLWrData_hartid, UInt<10>("h0"))
    node T_721 = or(interruptRegs_0, CONTROLWrData_interrupt)
    node GEN_7 = mux(T_720, T_721, interruptRegs_0)
    node GEN_8 = mux(CONTROLWrEn, GEN_7, interruptRegs_0)
    node T_723 = eq(CONTROLWrEn, UInt<1>("h0"))
    node T_724 = and(T_723, dbRamWrEn)
    node T_726 = eq(CONTROLReg_hartid, UInt<10>("h0"))
    node T_727 = or(interruptRegs_0, RAMWrData_interrupt)
    node GEN_9 = mux(T_726, T_727, GEN_8)
    node GEN_10 = mux(T_724, GEN_9, GEN_8)
    node T_731 = eq(dbRamWrEn, UInt<1>("h0"))
    node T_732 = and(T_723, T_731)
    node T_733 = and(T_732, CLEARDEBINTWrEn)
    node T_735 = eq(CLEARDEBINTWrData, UInt<10>("h0"))
    node GEN_11 = mux(T_735, UInt<1>("h0"), GEN_10)
    node GEN_12 = mux(T_733, GEN_11, GEN_10)
    node T_738 = eq(SETHALTNOTWrData, UInt<10>("h0"))
    node GEN_13 = mux(T_738, UInt<1>("h1"), haltnotRegs_0)
    node GEN_14 = mux(SETHALTNOTWrEn, GEN_13, haltnotRegs_0)
    node T_741 = eq(SETHALTNOTWrEn, UInt<1>("h0"))
    node T_742 = and(T_741, CONTROLWrEn)
    node T_745 = and(haltnotRegs_0, CONTROLWrData_haltnot)
    node GEN_15 = mux(T_720, T_745, GEN_14)
    node GEN_16 = mux(T_742, GEN_15, GEN_14)
    node T_750 = and(T_741, T_723)
    node T_751 = and(T_750, dbRamWrEn)
    node T_754 = and(haltnotRegs_0, RAMWrData_haltnot)
    node GEN_17 = mux(T_726, T_754, GEN_16)
    node GEN_18 = mux(T_751, GEN_17, GEN_16)
    node T_782 = bits(dbReq_addr, 3, 0)
    node T_783 = bits(sbAddr, 5, 3)
    wire T_799_0 : UInt<32>
    wire T_799_1 : UInt<32>
    wire dbRamWrMask_0 : UInt<32>
    wire dbRamWrMask_1 : UInt<32>
    node T_804 = bits(dbRamAddr, 0, 0)
    node T_805 = bits(ramRdData, 31, 0)
    node T_806 = bits(ramRdData, 63, 32)
    wire T_812_0 : UInt<32>
    wire T_812_1 : UInt<32>
    wire T_821_0 : UInt<32>
    wire T_821_1 : UInt<32>
    wire GEN_0 : UInt<32>
    node GEN_19 = mux(eq(UInt<1>("h0"), T_804), UInt<32>("hffffffff"), UInt<32>("h0"))
    node GEN_20 = mux(T_804, UInt<32>("hffffffff"), UInt<32>("h0"))
    wire GEN_1 : UInt<32>
    node GEN_21 = mux(T_804, T_812_1, T_812_0)
    node T_828 = cat(dbRamWrMask_1, dbRamWrMask_0)
    node T_829 = mux(sbRamWrEn, sbWrMask, T_828)
    node T_830 = or(dbRamWrEn, UInt<1>("h0"))
    node T_831 = or(sbRamRdEn, sbRamWrEn)
    node T_832 = and(T_830, T_831)
    node T_834 = eq(T_832, UInt<1>("h0"))
    node T_835 = or(T_834, reset)
    node T_837 = eq(T_835, UInt<1>("h0"))
    node dbRamWrDataVec = cat(dbRamWrData, dbRamWrData)
    node T_838 = and(ramWrMask, sbRamWrData)
    node T_839 = not(ramWrMask)
    node T_840 = and(T_839, ramRdData)
    node T_841 = or(T_838, T_840)
    node T_842 = and(ramWrMask, dbRamWrDataVec)
    node T_845 = or(T_842, T_840)
    node T_846 = mux(sbRamWrEn, T_841, T_845)
    node T_847 = or(sbRamWrEn, sbRamRdEn)
    node T_848 = shr(dbRamAddr, 1)
    node T_849 = mux(T_847, sbRamAddr, T_848)
    node T_852 = or(sbRamWrEn, dbRamWrEn)
    wire T_875_interrupt : UInt<1>
    wire T_875_haltnot : UInt<1>
    wire T_875_reserved0 : UInt<10>
    wire T_875_buserror : UInt<3>
    wire T_875_serial : UInt<3>
    wire T_875_autoincrement : UInt<1>
    wire T_875_access : UInt<3>
    wire T_875_hartid : UInt<10>
    wire T_875_ndreset : UInt<1>
    wire T_875_fullreset : UInt<1>
    node T_886 = bits(dbReq_data, 0, 0)
    node T_887 = bits(dbReq_data, 1, 1)
    node T_888 = bits(dbReq_data, 11, 2)
    node T_889 = bits(dbReq_data, 14, 12)
    node T_890 = bits(dbReq_data, 15, 15)
    node T_891 = bits(dbReq_data, 18, 16)
    node T_892 = bits(dbReq_data, 21, 19)
    node T_893 = bits(dbReq_data, 31, 22)
    node T_894 = bits(dbReq_data, 32, 32)
    node T_895 = bits(dbReq_data, 33, 33)
    wire T_904_interrupt : UInt<1>
    wire T_904_haltnot : UInt<1>
    wire T_904_data : UInt<32>
    node T_908 = bits(dbReq_data, 31, 0)
    node T_913 = shr(dbReq_addr, 4)
    node T_915 = eq(T_913, UInt<1>("h0"))
    node GEN_26 = mux(T_915, dbWrEn, UInt<1>("h0"))
    node T_917 = eq(dbReq_addr, UInt<5>("h10"))
    node T_919 = eq(T_915, UInt<1>("h0"))
    node T_920 = and(T_919, T_917)
    node GEN_27 = mux(T_920, dbWrEn, UInt<1>("h0"))
    node T_924 = eq(T_917, UInt<1>("h0"))
    node T_925 = and(T_919, T_924)
    node GEN_28 = mux(reset, UInt<1>("h0"), CONTROLReg_interrupt)
    node GEN_29 = mux(reset, UInt<1>("h0"), CONTROLReg_haltnot)
    node GEN_30 = mux(reset, UInt<10>("h0"), CONTROLReg_reserved0)
    node GEN_31 = mux(reset, UInt<3>("h0"), CONTROLReg_buserror)
    node GEN_32 = mux(reset, UInt<3>("h0"), CONTROLReg_serial)
    node GEN_33 = mux(reset, UInt<1>("h0"), CONTROLReg_autoincrement)
    node GEN_34 = mux(reset, UInt<3>("h2"), CONTROLReg_access)
    node GEN_35 = mux(reset, UInt<10>("h0"), CONTROLReg_hartid)
    node GEN_36 = mux(reset, UInt<1>("h0"), CONTROLReg_ndreset)
    node GEN_37 = mux(reset, UInt<1>("h0"), CONTROLReg_fullreset)
    node GEN_38 = mux(reset, UInt<1>("h0"), ndresetCtrReg)
    node T_928 = eq(reset, UInt<1>("h0"))
    node T_929 = and(T_928, CONTROLWrEn)
    node T_930 = or(CONTROLReg_fullreset, CONTROLWrData_fullreset)
    node GEN_39 = mux(CONTROLWrData_ndreset, UInt<1>("h1"), GEN_38)
    node T_933 = eq(CONTROLWrData_ndreset, UInt<1>("h0"))
    node T_935 = eq(ndresetCtrReg, UInt<1>("h0"))
    node T_938 = sub(ndresetCtrReg, UInt<1>("h1"))
    node T_939 = tail(T_938, 1)
    node T_940 = mux(T_935, UInt<1>("h0"), T_939)
    node GEN_40 = mux(T_933, T_940, GEN_39)
    node GEN_41 = mux(T_929, CONTROLWrData_hartid, GEN_35)
    node GEN_42 = mux(T_929, T_930, GEN_37)
    node GEN_43 = mux(T_929, GEN_40, GEN_38)
    node T_945 = and(T_928, T_723)
    node GEN_44 = mux(T_945, T_940, GEN_43)
    wire GEN_2 : UInt<1>
    wire GEN_3 : UInt<1>
    wire GEN_4 : UInt<1>
    wire GEN_5 : UInt<1>
    node T_958 = eq(dbReq_addr, UInt<5>("h0"))
    node GEN_45 = mux(T_958, haltnotStatus_0, UInt<32>("h0"))
    node T_963 = cat(RAMRdData_interrupt, RAMRdData_haltnot)
    node T_964 = cat(T_963, RAMRdData_data)
    node GEN_46 = mux(T_915, T_964, UInt<34>("h0"))
    node T_970 = cat(CONTROLRdData_ndreset, CONTROLRdData_fullreset)
    node T_971 = cat(CONTROLRdData_autoincrement, CONTROLRdData_access)
    node T_972 = cat(T_971, CONTROLRdData_hartid)
    node T_973 = cat(T_972, T_970)
    node T_974 = cat(CONTROLRdData_buserror, CONTROLRdData_serial)
    node T_975 = cat(CONTROLRdData_interrupt, CONTROLRdData_haltnot)
    node T_976 = cat(T_975, CONTROLRdData_reserved0)
    node T_977 = cat(T_976, T_974)
    node T_978 = cat(T_977, T_973)
    node GEN_48 = mux(T_920, T_978, GEN_46)
    node T_980 = eq(dbReq_addr, UInt<5>("h11"))
    node T_986 = and(T_925, T_980)
    node T_987 = cat(UInt<1>("h0"), UInt<2>("h0"))
    node T_988 = cat(T_987, UInt<2>("h1"))
    node T_989 = cat(UInt<3>("h0"), UInt<1>("h1"))
    node T_990 = cat(UInt<6>("hf"), UInt<1>("h0"))
    node T_991 = cat(T_990, T_989)
    node T_992 = cat(T_991, T_988)
    node T_993 = cat(UInt<1>("h0"), UInt<1>("h0"))
    node T_994 = cat(UInt<1>("h0"), UInt<1>("h0"))
    node T_995 = cat(T_994, T_993)
    node T_996 = cat(UInt<4>("h0"), UInt<1>("h0"))
    node T_997 = cat(UInt<2>("h0"), UInt<7>("h0"))
    node T_998 = cat(T_997, T_996)
    node T_999 = cat(T_998, T_995)
    node T_1000 = cat(T_999, T_992)
    node GEN_49 = mux(T_986, T_1000, GEN_48)
    node T_1002 = eq(dbReq_addr, UInt<5>("h1b"))
    node T_1009 = eq(T_980, UInt<1>("h0"))
    node T_1010 = and(T_925, T_1009)
    node T_1011 = and(T_1010, T_1002)
    node GEN_50 = mux(T_1011, UInt<34>("h0"), GEN_49)
    node T_1013 = shr(dbReq_addr, 2)
    node T_1015 = eq(T_1013, UInt<3>("h7"))
    node T_1025 = eq(T_1002, UInt<1>("h0"))
    node T_1026 = and(T_1010, T_1025)
    node T_1027 = and(T_1026, T_1015)
    node GEN_51 = mux(T_1027, pad(rdHaltnotStatus, 34), GEN_50)
    node T_1040 = eq(T_1015, UInt<1>("h0"))
    node T_1041 = and(T_1026, T_1040)
    node GEN_52 = mux(T_1041, UInt<34>("h0"), GEN_51)
    node T_1043 = bits(dbRdData, 33, 33)
    node T_1045 = eq(dbReq_op, UInt<2>("h3"))
    node T_1046 = and(T_1043, T_1045)
    node T_1048 = eq(dbReq_op, UInt<2>("h2"))
    node T_1051 = not(rdCondWrFailure)
    node T_1052 = and(T_1045, T_1051)
    node T_1053 = or(T_1048, T_1052)
    node T_1056 = mux(rdCondWrFailure, UInt<2>("h1"), UInt<2>("h0"))
    node T_1058 = eq(stallFromSb, UInt<1>("h0"))
    node T_1059 = eq(dbStateReg, UInt<1>("h0"))
    node T_1061 = and(io_db_resp_ready, io_db_resp_valid)
    node T_1062 = and(dbStateReg, T_1061)
    node T_1063 = or(T_1059, T_1062)
    node T_1064 = and(T_1058, T_1063)
    node T_1066 = and(io_db_req_ready, io_db_req_valid)
    node T_1068 = and(dbWrNeeded, T_1066)
    node GEN_53 = mux(T_1066, UInt<1>("h1"), dbStateReg)
    node GEN_54 = mux(T_1066, dbResult_data, dbRespReg_data)
    node GEN_55 = mux(T_1066, dbResult_resp, dbRespReg_resp)
    node GEN_56 = mux(T_1059, GEN_53, dbStateReg)
    node GEN_57 = mux(T_1059, GEN_54, dbRespReg_data)
    node GEN_58 = mux(T_1059, GEN_55, dbRespReg_resp)
    node T_1073 = eq(T_1059, UInt<1>("h0"))
    node T_1074 = and(T_1073, dbStateReg)
    node GEN_59 = mux(T_1066, UInt<1>("h1"), GEN_56)
    node GEN_60 = mux(T_1066, dbResult_data, GEN_57)
    node GEN_61 = mux(T_1066, dbResult_resp, GEN_58)
    node T_1078 = eq(T_1066, UInt<1>("h0"))
    node T_1079 = and(T_1078, T_1061)
    node GEN_62 = mux(T_1079, UInt<1>("h0"), GEN_59)
    node GEN_63 = mux(T_1074, GEN_62, GEN_56)
    node GEN_64 = mux(T_1074, GEN_60, GEN_57)
    node GEN_65 = mux(T_1074, GEN_61, GEN_58)
    wire T_1101_0 : UInt<64>
    wire T_1101_1 : UInt<64>
    wire T_1101_2 : UInt<64>
    wire T_1101_3 : UInt<64>
    wire T_1101_4 : UInt<64>
    wire T_1101_5 : UInt<64>
    wire T_1101_6 : UInt<64>
    wire T_1101_7 : UInt<64>
    wire T_1101_8 : UInt<64>
    wire T_1101_9 : UInt<64>
    wire T_1101_10 : UInt<64>
    wire T_1101_11 : UInt<64>
    wire T_1101_12 : UInt<64>
    wire T_1101_13 : UInt<64>
    wire T_1101_14 : UInt<64>
    wire T_1104 : UInt<4>
    node T_1105 = bits(sbAddr, 6, 3)
    wire GEN_6 : UInt<64>
    node GEN_66 = mux(eq(UInt<4>("h1"), T_1104), UInt<64>("h80006ffff00413"), UInt<64>("hc0006f03c0006f"))
    node GEN_67 = mux(eq(UInt<4>("h2"), T_1104), UInt<64>("hff0000f00000413"), GEN_66)
    node GEN_68 = mux(eq(UInt<4>("h3"), T_1104), UInt<64>("h42802e2343803483"), GEN_67)
    node GEN_69 = mux(eq(UInt<4>("h4"), T_1104), UInt<64>("h10802023f1402473"), GEN_68)
    node GEN_70 = mux(eq(UInt<4>("h5"), T_1104), UInt<64>("h8474137b002473"), GEN_69)
    node GEN_71 = mux(eq(UInt<4>("h6"), T_1104), UInt<64>("h7b20247302041a63"), GEN_70)
    node GEN_72 = mux(eq(UInt<4>("h7"), T_1104), UInt<64>("h7b2410737b200073"), GEN_71)
    node GEN_73 = mux(eq(UInt<4>("h8"), T_1104), UInt<64>("h1c0474137b002473"), GEN_72)
    node GEN_74 = mux(eq(UInt<4>("h9"), T_1104), UInt<64>("h41663f4040413"), GEN_73)
    node GEN_75 = mux(eq(UInt<4>("ha"), T_1104), UInt<64>("h4000006742903c23"), GEN_74)
    node GEN_76 = mux(eq(UInt<4>("hb"), T_1104), UInt<64>("h10802623f1402473"), GEN_75)
    node GEN_77 = mux(eq(UInt<4>("hc"), T_1104), UInt<64>("h7b0024737b046073"), GEN_76)
    node GEN_78 = mux(eq(UInt<4>("hd"), T_1104), UInt<64>("hfe040ce302047413"), GEN_77)
    node GEN_79 = mux(eq(UInt<4>("he"), T_1104), UInt<64>("hfe1ff06f"), GEN_78)
    node T_1109 = bits(sbWrData, 31, 0)
    node T_1110 = bits(sbWrData, 63, 32)
    wire T_1116_0 : UInt<32>
    wire T_1116_1 : UInt<32>
    node T_1118 = bits(sbWrMask, 31, 0)
    node T_1119 = bits(sbWrMask, 63, 32)
    wire T_1125_0 : UInt<32>
    wire T_1125_1 : UInt<32>
    node T_1131 = bits(sbAddr, 11, 8)
    node T_1133 = eq(T_1131, UInt<4>("h4"))
    node GEN_80 = mux(T_1133, sbWrEn, UInt<1>("h0"))
    node T_1134 = bits(sbAddr, 11, 3)
    node T_1137 = eq(T_1134, UInt<9>("h21"))
    node T_1141 = neq(T_1125_1, UInt<32>("h0"))
    node T_1142 = and(T_1137, T_1141)
    node T_1143 = and(T_1142, sbWrEn)
    node T_1147 = eq(T_1134, UInt<9>("h20"))
    node T_1151 = neq(T_1125_0, UInt<32>("h0"))
    node T_1152 = and(T_1147, T_1151)
    node T_1153 = and(T_1152, sbWrEn)
    node GEN_82 = mux(T_1133, sbRamRdData, UInt<64>("h0"))
    node GEN_83 = mux(T_1133, sbRdEn, UInt<1>("h0"))
    node T_1163 = eq(T_1131, UInt<4>("h8"))
    node T_1164 = eq(T_1131, UInt<4>("h9"))
    node T_1165 = or(T_1163, T_1164)
    node T_1167 = eq(T_1133, UInt<1>("h0"))
    node T_1168 = and(T_1167, T_1165)
    node GEN_84 = mux(T_1168, sbRomRdData, GEN_82)
    node T_1172 = eq(T_1165, UInt<1>("h0"))
    node T_1173 = and(T_1167, T_1172)
    node GEN_85 = mux(T_1173, UInt<64>("h0"), GEN_84)
    reg sbAcqReg_addr_block : UInt<26>, clk with :
      reset => (UInt<1>("h0"), sbAcqReg_addr_block)
    reg sbAcqReg_client_xact_id : UInt<2>, clk with :
      reset => (UInt<1>("h0"), sbAcqReg_client_xact_id)
    reg sbAcqReg_addr_beat : UInt<3>, clk with :
      reset => (UInt<1>("h0"), sbAcqReg_addr_beat)
    reg sbAcqReg_is_builtin_type : UInt<1>, clk with :
      reset => (UInt<1>("h0"), sbAcqReg_is_builtin_type)
    reg sbAcqReg_a_type : UInt<3>, clk with :
      reset => (UInt<1>("h0"), sbAcqReg_a_type)
    reg sbAcqReg_union : UInt<11>, clk with :
      reset => (UInt<1>("h0"), sbAcqReg_union)
    reg sbAcqReg_data : UInt<64>, clk with :
      reset => (UInt<1>("h0"), sbAcqReg_data)
    reg sbAcqValidReg : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_1202 = eq(sbAcqReg_a_type, UInt<3>("h0"))
    node sbReg_get = and(sbAcqReg_is_builtin_type, T_1202)
    node T_1203 = eq(sbAcqReg_a_type, UInt<3>("h1"))
    node sbReg_getblk = and(sbAcqReg_is_builtin_type, T_1203)
    node T_1204 = eq(sbAcqReg_a_type, UInt<3>("h2"))
    node sbReg_put = and(sbAcqReg_is_builtin_type, T_1204)
    node T_1205 = eq(sbAcqReg_a_type, UInt<3>("h3"))
    node sbReg_putblk = and(sbAcqReg_is_builtin_type, T_1205)
    node sbMultibeat = and(sbReg_getblk, sbAcqValidReg)
    node T_1207 = add(sbAcqReg_addr_beat, UInt<3>("h1"))
    node sbBeatInc1 = tail(T_1207, 1)
    node sbLast = eq(sbAcqReg_addr_beat, UInt<3>("h7"))
    wire T_1216_0 : UInt<3>
    wire T_1216_1 : UInt<3>
    node T_1218 = eq(sbAcqReg_a_type, UInt<3>("h0"))
    node T_1219 = eq(sbAcqReg_a_type, UInt<3>("h4"))
    node T_1220 = or(T_1218, T_1219)
    node T_1221 = and(sbAcqReg_is_builtin_type, T_1220)
    node T_1222 = bits(sbAcqReg_union, 10, 8)
    node T_1224 = mux(T_1221, T_1222, UInt<3>("h0"))
    node T_1225 = cat(sbAcqReg_addr_block, sbAcqReg_addr_beat)
    node T_1226 = cat(T_1225, T_1224)
    node T_1227 = or(sbReg_get, sbReg_getblk)
    node T_1228 = and(sbAcqValidReg, T_1227)
    node T_1229 = or(sbReg_put, sbReg_putblk)
    node T_1230 = and(sbAcqValidReg, T_1229)
    node T_1232 = eq(sbAcqReg_a_type, UInt<3>("h4"))
    node T_1233 = and(sbAcqReg_is_builtin_type, T_1232)
    node T_1257 = or(sbReg_putblk, sbReg_put)
    node T_1258 = bits(sbAcqReg_union, 8, 1)
    node T_1260 = mux(T_1257, T_1258, UInt<8>("h0"))
    node T_1261 = mux(T_1233, UInt<8>("hff"), T_1260)
    node T_1262 = bits(T_1261, 0, 0)
    node T_1263 = bits(T_1261, 1, 1)
    node T_1264 = bits(T_1261, 2, 2)
    node T_1265 = bits(T_1261, 3, 3)
    node T_1266 = bits(T_1261, 4, 4)
    node T_1267 = bits(T_1261, 5, 5)
    node T_1268 = bits(T_1261, 6, 6)
    node T_1269 = bits(T_1261, 7, 7)
    node T_1273 = mux(T_1262, UInt<8>("hff"), UInt<8>("h0"))
    node T_1277 = mux(T_1263, UInt<8>("hff"), UInt<8>("h0"))
    node T_1281 = mux(T_1264, UInt<8>("hff"), UInt<8>("h0"))
    node T_1285 = mux(T_1265, UInt<8>("hff"), UInt<8>("h0"))
    node T_1289 = mux(T_1266, UInt<8>("hff"), UInt<8>("h0"))
    node T_1293 = mux(T_1267, UInt<8>("hff"), UInt<8>("h0"))
    node T_1297 = mux(T_1268, UInt<8>("hff"), UInt<8>("h0"))
    node T_1301 = mux(T_1269, UInt<8>("hff"), UInt<8>("h0"))
    node T_1302 = cat(T_1277, T_1273)
    node T_1303 = cat(T_1285, T_1281)
    node T_1304 = cat(T_1303, T_1302)
    node T_1305 = cat(T_1293, T_1289)
    node T_1306 = cat(T_1301, T_1297)
    node T_1307 = cat(T_1306, T_1305)
    node T_1308 = cat(T_1307, T_1304)
    node T_1309 = and(io_tl_acquire_ready, io_tl_acquire_valid)
    node GEN_86 = mux(T_1309, io_tl_acquire_bits_addr_block, sbAcqReg_addr_block)
    node GEN_87 = mux(T_1309, io_tl_acquire_bits_client_xact_id, sbAcqReg_client_xact_id)
    node GEN_88 = mux(T_1309, io_tl_acquire_bits_addr_beat, sbAcqReg_addr_beat)
    node GEN_89 = mux(T_1309, io_tl_acquire_bits_is_builtin_type, sbAcqReg_is_builtin_type)
    node GEN_90 = mux(T_1309, io_tl_acquire_bits_a_type, sbAcqReg_a_type)
    node GEN_91 = mux(T_1309, io_tl_acquire_bits_union, sbAcqReg_union)
    node GEN_92 = mux(T_1309, io_tl_acquire_bits_data, sbAcqReg_data)
    node GEN_93 = mux(T_1309, UInt<1>("h1"), sbAcqValidReg)
    node T_1311 = and(io_tl_grant_ready, io_tl_grant_valid)
    node T_1313 = eq(T_1309, UInt<1>("h0"))
    node T_1314 = and(T_1313, T_1311)
    node GEN_94 = mux(sbLast, UInt<1>("h0"), GEN_93)
    node GEN_95 = mux(sbMultibeat, sbBeatInc1, GEN_88)
    node GEN_96 = mux(sbMultibeat, GEN_94, GEN_93)
    node T_1317 = eq(sbMultibeat, UInt<1>("h0"))
    node GEN_97 = mux(T_1317, UInt<1>("h0"), GEN_96)
    node GEN_98 = mux(T_1314, GEN_95, GEN_88)
    node GEN_99 = mux(T_1314, GEN_97, GEN_93)
    node T_1335 = eq(UInt<3>("h6"), sbAcqReg_a_type)
    node T_1336 = mux(T_1335, UInt<3>("h1"), UInt<3>("h3"))
    node T_1337 = eq(UInt<3>("h5"), sbAcqReg_a_type)
    node T_1338 = mux(T_1337, UInt<3>("h1"), T_1336)
    node T_1339 = eq(UInt<3>("h4"), sbAcqReg_a_type)
    node T_1340 = mux(T_1339, UInt<3>("h4"), T_1338)
    node T_1341 = eq(UInt<3>("h3"), sbAcqReg_a_type)
    node T_1342 = mux(T_1341, UInt<3>("h3"), T_1340)
    node T_1343 = eq(UInt<3>("h2"), sbAcqReg_a_type)
    node T_1344 = mux(T_1343, UInt<3>("h3"), T_1342)
    node T_1345 = eq(UInt<3>("h1"), sbAcqReg_a_type)
    node T_1346 = mux(T_1345, UInt<3>("h5"), T_1344)
    node T_1347 = eq(UInt<3>("h0"), sbAcqReg_a_type)
    node T_1348 = mux(T_1347, UInt<3>("h4"), T_1346)
    wire T_1372_addr_beat : UInt<3>
    wire T_1372_client_xact_id : UInt<2>
    wire T_1372_manager_xact_id : UInt<1>
    wire T_1372_is_builtin_type : UInt<1>
    wire T_1372_g_type : UInt<4>
    wire T_1372_data : UInt<64>
    node T_1397 = eq(sbLast, UInt<1>("h0"))
    node T_1398 = and(sbMultibeat, T_1397)
    node T_1400 = eq(io_tl_grant_ready, UInt<1>("h0"))
    node T_1401 = and(io_tl_grant_valid, T_1400)
    node T_1402 = or(T_1398, T_1401)
    node sbStall = or(T_1402, UInt<1>("h0"))
    node T_1404 = eq(sbStall, UInt<1>("h0"))
    io_db_req_ready <= T_1064
    io_db_resp_valid <= dbStateReg
    io_db_resp_bits_data <= dbRespReg_data
    io_db_resp_bits_resp <= dbRespReg_resp
    io_debugInterrupts_0 <= interruptRegs_0
    io_tl_acquire_ready <= T_1404
    io_tl_grant_valid <= sbAcqValidReg
    io_tl_grant_bits_addr_beat <= T_1372_addr_beat
    io_tl_grant_bits_client_xact_id <= T_1372_client_xact_id
    io_tl_grant_bits_manager_xact_id <= UInt<1>("h0")
    io_tl_grant_bits_is_builtin_type <= UInt<1>("h1")
    io_tl_grant_bits_g_type <= T_1372_g_type
    io_tl_grant_bits_data <= T_1372_data
    io_ndreset <= ndresetCtrReg
    io_fullreset <= CONTROLReg_fullreset
    CONTROLWrEn <= GEN_27
    CONTROLReg_interrupt <= GEN_28
    CONTROLReg_haltnot <= GEN_29
    CONTROLReg_reserved0 <= GEN_30
    CONTROLReg_buserror <= GEN_31
    CONTROLReg_serial <= GEN_32
    CONTROLReg_autoincrement <= GEN_33
    CONTROLReg_access <= GEN_34
    CONTROLReg_hartid <= GEN_41
    CONTROLReg_ndreset <= GEN_36
    CONTROLReg_fullreset <= GEN_42
    CONTROLWrData_interrupt <= T_875_interrupt
    CONTROLWrData_haltnot <= T_875_haltnot
    CONTROLWrData_reserved0 <= T_875_reserved0
    CONTROLWrData_buserror <= T_875_buserror
    CONTROLWrData_serial <= T_875_serial
    CONTROLWrData_autoincrement <= T_875_autoincrement
    CONTROLWrData_access <= T_875_access
    CONTROLWrData_hartid <= T_875_hartid
    CONTROLWrData_ndreset <= T_875_ndreset
    CONTROLWrData_fullreset <= T_875_fullreset
    CONTROLRdData_interrupt <= GEN_2
    CONTROLRdData_haltnot <= GEN_3
    CONTROLRdData_reserved0 <= CONTROLReg_reserved0
    CONTROLRdData_buserror <= CONTROLReg_buserror
    CONTROLRdData_serial <= CONTROLReg_serial
    CONTROLRdData_autoincrement <= CONTROLReg_autoincrement
    CONTROLRdData_access <= CONTROLReg_access
    CONTROLRdData_hartid <= CONTROLReg_hartid
    CONTROLRdData_ndreset <= ndresetCtrReg
    CONTROLRdData_fullreset <= CONTROLReg_fullreset
    ndresetCtrReg <= GEN_44
    HALTSUMRdData_acks <= pad(haltnotSummary, 32)
    RAMWrData_interrupt <= T_904_interrupt
    RAMWrData_haltnot <= T_904_haltnot
    RAMWrData_data <= T_904_data
    RAMRdData_interrupt <= GEN_4
    RAMRdData_haltnot <= GEN_5
    RAMRdData_data <= dbRamRdData
    SETHALTNOTWrEn <= T_1143
    SETHALTNOTWrData <= bits(T_1116_1, 9, 0)
    CLEARDEBINTWrEn <= T_1153
    CLEARDEBINTWrData <= bits(T_1116_0, 9, 0)
    interruptRegs_0 <= GEN_12
    haltnotRegs_0 <= GEN_18
    haltnotStatus_0 <= pad(haltnotRegs_0, 32)
    rdHaltnotStatus <= GEN_45
    ramAddr <= T_849
    ramRdData <= ramMem.T_850.data
    ramWrData <= T_846
    ramWrMask <= T_829
    ramWrEn <= T_852
    dbRamAddr <= T_782
    dbRamRdData <= GEN_1
    dbRamWrData <= bits(dbReq_data, 31, 0)
    dbRamWrEn <= GEN_26
    sbRamAddr <= T_783
    sbRamRdData <= ramRdData
    sbRamWrData <= sbWrData
    sbRamWrEn <= GEN_80
    sbRamRdEn <= GEN_83
    sbRomRdData <= GEN_6
    dbRdEn <= T_1066
    dbWrEn <= T_1068
    dbRdData <= GEN_52
    dbStateReg <= GEN_63
    dbResult_data <= dbRdData
    dbResult_resp <= T_1056
    dbReq_addr <= io_db_req_bits_addr
    dbReq_data <= io_db_req_bits_data
    dbReq_op <= io_db_req_bits_op
    dbRespReg_data <= GEN_64
    dbRespReg_resp <= GEN_65
    rdCondWrFailure <= T_1046
    dbWrNeeded <= T_1053
    sbAddr <= bits(T_1226, 11, 0)
    sbRdData <= GEN_85
    sbWrData <= sbAcqReg_data
    sbWrMask <= T_1308
    sbWrEn <= T_1230
    sbRdEn <= T_1228
    stallFromSb <= T_831
    dbRamWrMask_0 <= GEN_19
    dbRamWrMask_1 <= GEN_20
    T_812_0 <= T_805
    T_812_1 <= T_806
    GEN_1 <= GEN_21
    T_875_interrupt <= T_895
    T_875_haltnot <= T_894
    T_875_reserved0 <= T_893
    T_875_buserror <= T_892
    T_875_serial <= T_891
    T_875_autoincrement <= T_890
    T_875_access <= T_889
    T_875_hartid <= T_888
    T_875_ndreset <= T_887
    T_875_fullreset <= T_886
    T_904_interrupt <= T_895
    T_904_haltnot <= T_894
    T_904_data <= T_908
    GEN_2 <= interruptRegs_0
    GEN_3 <= haltnotRegs_0
    GEN_4 <= interruptRegs_0
    GEN_5 <= haltnotRegs_0
    T_1104 <= T_1105
    GEN_6 <= GEN_79
    T_1116_0 <= T_1109
    T_1116_1 <= T_1110
    T_1125_0 <= T_1118
    T_1125_1 <= T_1119
    sbAcqReg_addr_block <= GEN_86
    sbAcqReg_client_xact_id <= GEN_87
    sbAcqReg_addr_beat <= GEN_98
    sbAcqReg_is_builtin_type <= GEN_89
    sbAcqReg_a_type <= GEN_90
    sbAcqReg_union <= GEN_91
    sbAcqReg_data <= GEN_92
    sbAcqValidReg <= GEN_99
    T_1372_addr_beat <= sbAcqReg_addr_beat
    T_1372_client_xact_id <= sbAcqReg_client_xact_id
    T_1372_g_type <= pad(T_1348, 4)
    T_1372_data <= sbRdData
    printf(clk, T_837, "Assertion failed: Stall logic should have prevented concurrent SB/DB RAM Access\n    at Debug.scala:650 assert (!((dbRamWrEn | dbRamRdEn) & (sbRamRdEn | sbRamWrEn)), \"Stall logic should have prevented concurrent SB/DB RAM Access\")\n")
    stop(clk, T_837, 1)

  module PRCI :
    input clk : Clock
    input reset : UInt<1>
    input io_interrupts_0_meip : UInt<1>
    input io_interrupts_0_seip : UInt<1>
    input io_interrupts_0_debug : UInt<1>
    output io_tl_acquire_ready : UInt<1>
    input io_tl_acquire_valid : UInt<1>
    input io_tl_acquire_bits_addr_block : UInt<26>
    input io_tl_acquire_bits_client_xact_id : UInt<2>
    input io_tl_acquire_bits_addr_beat : UInt<3>
    input io_tl_acquire_bits_is_builtin_type : UInt<1>
    input io_tl_acquire_bits_a_type : UInt<3>
    input io_tl_acquire_bits_union : UInt<11>
    input io_tl_acquire_bits_data : UInt<64>
    input io_tl_grant_ready : UInt<1>
    output io_tl_grant_valid : UInt<1>
    output io_tl_grant_bits_addr_beat : UInt<3>
    output io_tl_grant_bits_client_xact_id : UInt<2>
    output io_tl_grant_bits_manager_xact_id : UInt<1>
    output io_tl_grant_bits_is_builtin_type : UInt<1>
    output io_tl_grant_bits_g_type : UInt<4>
    output io_tl_grant_bits_data : UInt<64>
    output io_tiles_0_reset : UInt<1>
    output io_tiles_0_id : UInt<1>
    output io_tiles_0_interrupts_meip : UInt<1>
    output io_tiles_0_interrupts_seip : UInt<1>
    output io_tiles_0_interrupts_debug : UInt<1>
    output io_tiles_0_interrupts_mtip : UInt<1>
    output io_tiles_0_interrupts_msip : UInt<1>
    input io_rtcTick : UInt<1>
  
    reg timecmp_0 : UInt<64>, clk with :
      reset => (UInt<1>("h0"), timecmp_0)
    reg time : UInt<64>, clk with :
      reset => (reset, UInt<64>("h0"))
    node T_526 = addw(time, UInt<64>("h1"))
    node GEN_0 = mux(io_rtcTick, T_526, time)
    wire T_533_0 : UInt<32>
    reg ipi_0 : UInt<32>, clk with :
      reset => (reset, UInt<32>("h0"))
    inst acq of Queue_17
    wire T_568_0 : UInt<3>
    wire T_568_1 : UInt<3>
    node T_570 = eq(acq.io_deq_bits_a_type, UInt<3>("h0"))
    node T_571 = eq(acq.io_deq_bits_a_type, UInt<3>("h4"))
    node T_572 = or(T_570, T_571)
    node T_573 = and(acq.io_deq_bits_is_builtin_type, T_572)
    node T_574 = bits(acq.io_deq_bits_union, 10, 8)
    node T_576 = mux(T_573, T_574, UInt<3>("h0"))
    node T_577 = cat(acq.io_deq_bits_addr_block, acq.io_deq_bits_addr_beat)
    node T_578 = cat(T_577, T_576)
    node addr = bits(T_578, 15, 0)
    wire rdata : UInt<64>
    node T_598 = eq(UInt<3>("h6"), acq.io_deq_bits_a_type)
    node T_599 = mux(T_598, UInt<3>("h1"), UInt<3>("h3"))
    node T_600 = eq(UInt<3>("h5"), acq.io_deq_bits_a_type)
    node T_601 = mux(T_600, UInt<3>("h1"), T_599)
    node T_602 = eq(UInt<3>("h4"), acq.io_deq_bits_a_type)
    node T_603 = mux(T_602, UInt<3>("h4"), T_601)
    node T_604 = eq(UInt<3>("h3"), acq.io_deq_bits_a_type)
    node T_605 = mux(T_604, UInt<3>("h3"), T_603)
    node T_606 = eq(UInt<3>("h2"), acq.io_deq_bits_a_type)
    node T_607 = mux(T_606, UInt<3>("h3"), T_605)
    node T_608 = eq(UInt<3>("h1"), acq.io_deq_bits_a_type)
    node T_609 = mux(T_608, UInt<3>("h5"), T_607)
    node T_610 = eq(UInt<3>("h0"), acq.io_deq_bits_a_type)
    node T_611 = mux(T_610, UInt<3>("h4"), T_609)
    wire T_636_addr_beat : UInt<3>
    wire T_636_client_xact_id : UInt<2>
    wire T_636_manager_xact_id : UInt<1>
    wire T_636_is_builtin_type : UInt<1>
    wire T_636_g_type : UInt<4>
    wire T_636_data : UInt<64>
    node T_658 = bits(addr, 15, 15)
    node T_659 = and(io_tl_grant_ready, io_tl_grant_valid)
    wire T_667_0 : UInt<3>
    wire T_667_1 : UInt<3>
    wire T_685_0 : UInt<3>
    wire T_685_1 : UInt<3>
    node T_697 = eq(acq.io_deq_bits_a_type, UInt<3>("h4"))
    node T_698 = and(acq.io_deq_bits_is_builtin_type, T_697)
    node T_717 = eq(acq.io_deq_bits_a_type, UInt<3>("h3"))
    node T_718 = and(acq.io_deq_bits_is_builtin_type, T_717)
    node T_720 = eq(acq.io_deq_bits_a_type, UInt<3>("h2"))
    node T_721 = and(acq.io_deq_bits_is_builtin_type, T_720)
    node T_722 = or(T_718, T_721)
    node T_723 = bits(acq.io_deq_bits_union, 8, 1)
    node T_725 = mux(T_722, T_723, UInt<8>("h0"))
    node T_726 = mux(T_698, UInt<8>("hff"), T_725)
    node T_727 = bits(T_726, 0, 0)
    node T_728 = bits(T_726, 1, 1)
    node T_729 = bits(T_726, 2, 2)
    node T_730 = bits(T_726, 3, 3)
    node T_731 = bits(T_726, 4, 4)
    node T_732 = bits(T_726, 5, 5)
    node T_733 = bits(T_726, 6, 6)
    node T_734 = bits(T_726, 7, 7)
    node T_738 = mux(T_727, UInt<8>("hff"), UInt<8>("h0"))
    node T_742 = mux(T_728, UInt<8>("hff"), UInt<8>("h0"))
    node T_746 = mux(T_729, UInt<8>("hff"), UInt<8>("h0"))
    node T_750 = mux(T_730, UInt<8>("hff"), UInt<8>("h0"))
    node T_754 = mux(T_731, UInt<8>("hff"), UInt<8>("h0"))
    node T_758 = mux(T_732, UInt<8>("hff"), UInt<8>("h0"))
    node T_762 = mux(T_733, UInt<8>("hff"), UInt<8>("h0"))
    node T_766 = mux(T_734, UInt<8>("hff"), UInt<8>("h0"))
    node T_767 = cat(T_742, T_738)
    node T_768 = cat(T_750, T_746)
    node T_769 = cat(T_768, T_767)
    node T_770 = cat(T_758, T_754)
    node T_771 = cat(T_766, T_762)
    node T_772 = cat(T_771, T_770)
    node T_773 = cat(T_772, T_769)
    node T_774 = and(acq.io_deq_bits_data, T_773)
    node T_853 = not(T_773)
    node T_854 = and(time, T_853)
    node T_855 = or(T_774, T_854)
    node T_859 = and(T_659, T_721)
    node GEN_2 = mux(T_859, T_855, GEN_0)
    node GEN_3 = mux(T_658, GEN_2, GEN_0)
    node GEN_4 = mux(T_658, time, UInt<64>("h0"))
    node T_865 = geq(addr, UInt<16>("h4000"))
    node T_867 = eq(T_658, UInt<1>("h0"))
    node T_868 = and(T_867, T_865)
    wire T_877_0 : UInt<3>
    wire T_877_1 : UInt<3>
    wire T_895_0 : UInt<3>
    wire T_895_1 : UInt<3>
    node T_1064 = and(timecmp_0, T_853)
    node T_1065 = or(T_774, T_1064)
    node GEN_6 = mux(T_859, T_1065, timecmp_0)
    node GEN_7 = mux(T_868, GEN_6, timecmp_0)
    node GEN_8 = mux(T_868, timecmp_0, GEN_4)
    node T_1077 = eq(T_865, UInt<1>("h0"))
    node T_1078 = and(T_867, T_1077)
    wire T_1087_0 : UInt<3>
    wire T_1087_1 : UInt<3>
    wire T_1105_0 : UInt<3>
    wire T_1105_1 : UInt<3>
    node GEN_13 = pad(ipi_0, 64)
    node T_1274 = and(GEN_13, T_853)
    node T_1275 = or(T_774, T_1274)
    node GEN_10 = mux(T_859, T_1275, pad(ipi_0, 64))
    node T_1286 = and(GEN_13, UInt<64>("h100000001"))
    node GEN_11 = mux(T_1078, GEN_10, pad(ipi_0, 64))
    node GEN_12 = mux(T_1078, T_1286, GEN_8)
    node T_1287 = bits(ipi_0, 0, 0)
    node T_1288 = geq(time, timecmp_0)
    io_tl_acquire_ready <= acq.io_enq_ready
    io_tl_grant_valid <= acq.io_deq_valid
    io_tl_grant_bits_addr_beat <= UInt<3>("h0")
    io_tl_grant_bits_client_xact_id <= T_636_client_xact_id
    io_tl_grant_bits_manager_xact_id <= UInt<1>("h0")
    io_tl_grant_bits_is_builtin_type <= UInt<1>("h1")
    io_tl_grant_bits_g_type <= T_636_g_type
    io_tl_grant_bits_data <= T_636_data
    io_tiles_0_reset <= UInt<1>("h0")
    io_tiles_0_id <= UInt<1>("h0")
    io_tiles_0_interrupts_meip <= io_interrupts_0_meip
    io_tiles_0_interrupts_seip <= io_interrupts_0_seip
    io_tiles_0_interrupts_debug <= io_interrupts_0_debug
    io_tiles_0_interrupts_mtip <= T_1288
    io_tiles_0_interrupts_msip <= T_1287
    timecmp_0 <= GEN_7
    time <= GEN_3
    ipi_0 <= bits(GEN_11, 31, 0)
    acq.io_enq_valid <= io_tl_acquire_valid
    acq.io_enq_bits_addr_block <= io_tl_acquire_bits_addr_block
    acq.io_enq_bits_client_xact_id <= io_tl_acquire_bits_client_xact_id
    acq.io_enq_bits_addr_beat <= io_tl_acquire_bits_addr_beat
    acq.io_enq_bits_is_builtin_type <= io_tl_acquire_bits_is_builtin_type
    acq.io_enq_bits_a_type <= io_tl_acquire_bits_a_type
    acq.io_enq_bits_union <= io_tl_acquire_bits_union
    acq.io_enq_bits_data <= io_tl_acquire_bits_data
    acq.io_deq_ready <= io_tl_grant_ready
    rdata <= GEN_12
    T_636_client_xact_id <= acq.io_deq_bits_client_xact_id
    T_636_g_type <= pad(T_611, 4)
    T_636_data <= rdata

  module ROMSlave :
    input clk : Clock
    input reset : UInt<1>
    output io_acquire_ready : UInt<1>
    input io_acquire_valid : UInt<1>
    input io_acquire_bits_addr_block : UInt<26>
    input io_acquire_bits_client_xact_id : UInt<2>
    input io_acquire_bits_addr_beat : UInt<3>
    input io_acquire_bits_is_builtin_type : UInt<1>
    input io_acquire_bits_a_type : UInt<3>
    input io_acquire_bits_union : UInt<11>
    input io_acquire_bits_data : UInt<64>
    input io_grant_ready : UInt<1>
    output io_grant_valid : UInt<1>
    output io_grant_bits_addr_beat : UInt<3>
    output io_grant_bits_client_xact_id : UInt<2>
    output io_grant_bits_manager_xact_id : UInt<1>
    output io_grant_bits_is_builtin_type : UInt<1>
    output io_grant_bits_g_type : UInt<4>
    output io_grant_bits_data : UInt<64>
  
    inst acq of Queue_17
    node T_446 = eq(acq.io_deq_bits_a_type, UInt<3>("h0"))
    node single_beat = and(acq.io_deq_bits_is_builtin_type, T_446)
    node T_448 = eq(acq.io_deq_bits_a_type, UInt<3>("h1"))
    node multi_beat = and(acq.io_deq_bits_is_builtin_type, T_448)
    node T_450 = eq(acq.io_deq_valid, UInt<1>("h0"))
    node T_451 = or(T_450, single_beat)
    node T_452 = or(T_451, multi_beat)
    node T_453 = or(T_452, reset)
    node T_455 = eq(T_453, UInt<1>("h0"))
    reg addr_beat : UInt<3>, clk with :
      reset => (UInt<1>("h0"), addr_beat)
    node T_457 = and(io_grant_ready, io_grant_valid)
    node T_459 = add(addr_beat, UInt<3>("h1"))
    node T_460 = tail(T_459, 1)
    node GEN_1 = mux(T_457, T_460, addr_beat)
    node T_461 = and(io_acquire_ready, io_acquire_valid)
    node GEN_2 = mux(T_461, io_acquire_bits_addr_beat, GEN_1)
    wire rom_0 : UInt<64>
    wire rom_1 : UInt<64>
    wire rom_2 : UInt<64>
    wire rom_3 : UInt<64>
    wire rom_4 : UInt<64>
    wire rom_5 : UInt<64>
    wire rom_6 : UInt<64>
    wire rom_7 : UInt<64>
    wire rom_8 : UInt<64>
    wire rom_9 : UInt<64>
    wire rom_10 : UInt<64>
    wire rom_11 : UInt<64>
    wire rom_12 : UInt<64>
    wire rom_13 : UInt<64>
    wire rom_14 : UInt<64>
    wire rom_15 : UInt<64>
    wire rom_16 : UInt<64>
    wire rom_17 : UInt<64>
    wire rom_18 : UInt<64>
    wire rom_19 : UInt<64>
    wire rom_20 : UInt<64>
    wire rom_21 : UInt<64>
    wire rom_22 : UInt<64>
    wire rom_23 : UInt<64>
    wire rom_24 : UInt<64>
    wire rom_25 : UInt<64>
    wire rom_26 : UInt<64>
    wire rom_27 : UInt<64>
    wire rom_28 : UInt<64>
    wire rom_29 : UInt<64>
    wire rom_30 : UInt<64>
    wire rom_31 : UInt<64>
    wire rom_32 : UInt<64>
    wire rom_33 : UInt<64>
    wire rom_34 : UInt<64>
    wire rom_35 : UInt<64>
    wire rom_36 : UInt<64>
    wire rom_37 : UInt<64>
    wire rom_38 : UInt<64>
    wire rom_39 : UInt<64>
    wire rom_40 : UInt<64>
    wire rom_41 : UInt<64>
    wire rom_42 : UInt<64>
    wire rom_43 : UInt<64>
    wire rom_44 : UInt<64>
    wire rom_45 : UInt<64>
    wire rom_46 : UInt<64>
    wire rom_47 : UInt<64>
    wire rom_48 : UInt<64>
    wire rom_49 : UInt<64>
    wire rom_50 : UInt<64>
    wire rom_51 : UInt<64>
    wire rom_52 : UInt<64>
    wire rom_53 : UInt<64>
    wire rom_54 : UInt<64>
    wire rom_55 : UInt<64>
    wire rom_56 : UInt<64>
    wire rom_57 : UInt<64>
    wire rom_58 : UInt<64>
    wire rom_59 : UInt<64>
    wire rom_60 : UInt<64>
    wire rom_61 : UInt<64>
    wire rom_62 : UInt<64>
    wire rom_63 : UInt<64>
    wire rom_64 : UInt<64>
    wire rom_65 : UInt<64>
    node raddr = cat(acq.io_deq_bits_addr_block, addr_beat)
    node T_534 = bits(raddr, 6, 0)
    node T_536 = eq(multi_beat, UInt<1>("h0"))
    node T_538 = eq(addr_beat, UInt<3>("h7"))
    node last = or(T_536, T_538)
    node T_539 = and(io_grant_ready, last)
    node T_556 = eq(UInt<3>("h6"), acq.io_deq_bits_a_type)
    node T_557 = mux(T_556, UInt<3>("h1"), UInt<3>("h3"))
    node T_558 = eq(UInt<3>("h5"), acq.io_deq_bits_a_type)
    node T_559 = mux(T_558, UInt<3>("h1"), T_557)
    node T_560 = eq(UInt<3>("h4"), acq.io_deq_bits_a_type)
    node T_561 = mux(T_560, UInt<3>("h4"), T_559)
    node T_562 = eq(UInt<3>("h3"), acq.io_deq_bits_a_type)
    node T_563 = mux(T_562, UInt<3>("h3"), T_561)
    node T_564 = eq(UInt<3>("h2"), acq.io_deq_bits_a_type)
    node T_565 = mux(T_564, UInt<3>("h3"), T_563)
    node T_566 = eq(UInt<3>("h1"), acq.io_deq_bits_a_type)
    node T_567 = mux(T_566, UInt<3>("h5"), T_565)
    node T_568 = eq(UInt<3>("h0"), acq.io_deq_bits_a_type)
    node T_569 = mux(T_568, UInt<3>("h4"), T_567)
    wire T_593_addr_beat : UInt<3>
    wire T_593_client_xact_id : UInt<2>
    wire T_593_manager_xact_id : UInt<1>
    wire T_593_is_builtin_type : UInt<1>
    wire T_593_g_type : UInt<4>
    wire T_593_data : UInt<64>
    wire GEN_0 : UInt<64>
    node GEN_3 = mux(eq(UInt<7>("h1"), T_534), UInt<64>("h102000000000"), UInt<64>("h6f"))
    node GEN_4 = mux(eq(UInt<7>("h2"), T_534), UInt<64>("h0"), GEN_3)
    node GEN_5 = mux(eq(UInt<7>("h3"), T_534), UInt<64>("h0"), GEN_4)
    node GEN_6 = mux(eq(UInt<7>("h4"), T_534), UInt<64>("h200a7b2063696c70"), GEN_5)
    node GEN_7 = mux(eq(UInt<7>("h5"), T_534), UInt<64>("h7469726f69727020"), GEN_6)
    node GEN_8 = mux(eq(UInt<7>("h6"), T_534), UInt<64>("h3030303478302079"), GEN_7)
    node GEN_9 = mux(eq(UInt<7>("h7"), T_534), UInt<64>("h20200a3b30303030"), GEN_8)
    node GEN_10 = mux(eq(UInt<7>("h8"), T_534), UInt<64>("h20676e69646e6570"), GEN_9)
    node GEN_11 = mux(eq(UInt<7>("h9"), T_534), UInt<64>("h3031303030347830"), GEN_10)
    node GEN_12 = mux(eq(UInt<7>("ha"), T_534), UInt<64>("h646e20200a3b3030"), GEN_11)
    node GEN_13 = mux(eq(UInt<7>("hb"), T_534), UInt<64>("h7d0a3b3220737665"), GEN_12)
    node GEN_14 = mux(eq(UInt<7>("hc"), T_534), UInt<64>("ha7b206374720a3b"), GEN_13)
    node GEN_15 = mux(eq(UInt<7>("hd"), T_534), UInt<64>("h3020726464612020"), GEN_14)
    node GEN_16 = mux(eq(UInt<7>("he"), T_534), UInt<64>("h6666623030343478"), GEN_15)
    node GEN_17 = mux(eq(UInt<7>("hf"), T_534), UInt<64>("h61720a3b7d0a3b38"), GEN_16)
    node GEN_18 = mux(eq(UInt<7>("h10"), T_534), UInt<64>("h203020200a7b206d"), GEN_17)
    node GEN_19 = mux(eq(UInt<7>("h11"), T_534), UInt<64>("h6461202020200a7b"), GEN_18)
    node GEN_20 = mux(eq(UInt<7>("h12"), T_534), UInt<64>("h3030387830207264"), GEN_19)
    node GEN_21 = mux(eq(UInt<7>("h13"), T_534), UInt<64>("h200a3b3030303030"), GEN_20)
    node GEN_22 = mux(eq(UInt<7>("h14"), T_534), UInt<64>("h20657a6973202020"), GEN_21)
    node GEN_23 = mux(eq(UInt<7>("h15"), T_534), UInt<64>("h3030303030317830"), GEN_22)
    node GEN_24 = mux(eq(UInt<7>("h16"), T_534), UInt<64>("h3b7d20200a3b3030"), GEN_23)
    node GEN_25 = mux(eq(UInt<7>("h17"), T_534), UInt<64>("h65726f630a3b7d0a"), GEN_24)
    node GEN_26 = mux(eq(UInt<7>("h18"), T_534), UInt<64>("h7b203020200a7b20"), GEN_25)
    node GEN_27 = mux(eq(UInt<7>("h19"), T_534), UInt<64>("h7b2030202020200a"), GEN_26)
    node GEN_28 = mux(eq(UInt<7>("h1a"), T_534), UInt<64>("h692020202020200a"), GEN_27)
    node GEN_29 = mux(eq(UInt<7>("h1b"), T_534), UInt<64>("h6934367672206173"), GEN_28)
    node GEN_30 = mux(eq(UInt<7>("h1c"), T_534), UInt<64>("h200a3b736466616d"), GEN_29)
    node GEN_31 = mux(eq(UInt<7>("h1d"), T_534), UInt<64>("h6d69742020202020"), GEN_30)
    node GEN_32 = mux(eq(UInt<7>("h1e"), T_534), UInt<64>("h34783020706d6365"), GEN_31)
    node GEN_33 = mux(eq(UInt<7>("h1f"), T_534), UInt<64>("h3b30303034303034"), GEN_32)
    node GEN_34 = mux(eq(UInt<7>("h20"), T_534), UInt<64>("h692020202020200a"), GEN_33)
    node GEN_35 = mux(eq(UInt<7>("h21"), T_534), UInt<64>("h3034347830206970"), GEN_34)
    node GEN_36 = mux(eq(UInt<7>("h22"), T_534), UInt<64>("h200a3b3030303030"), GEN_35)
    node GEN_37 = mux(eq(UInt<7>("h23"), T_534), UInt<64>("h696c702020202020"), GEN_36)
    node GEN_38 = mux(eq(UInt<7>("h24"), T_534), UInt<64>("h202020200a7b2063"), GEN_37)
    node GEN_39 = mux(eq(UInt<7>("h25"), T_534), UInt<64>("ha7b206d20202020"), GEN_38)
    node GEN_40 = mux(eq(UInt<7>("h26"), T_534), UInt<64>("h2020202020202020"), GEN_39)
    node GEN_41 = mux(eq(UInt<7>("h27"), T_534), UInt<64>("h3034783020656920"), GEN_40)
    node GEN_42 = mux(eq(UInt<7>("h28"), T_534), UInt<64>("ha3b303030323030"), GEN_41)
    node GEN_43 = mux(eq(UInt<7>("h29"), T_534), UInt<64>("h2020202020202020"), GEN_42)
    node GEN_44 = mux(eq(UInt<7>("h2a"), T_534), UInt<64>("h2068736572687420"), GEN_43)
    node GEN_45 = mux(eq(UInt<7>("h2b"), T_534), UInt<64>("h3030303230347830"), GEN_44)
    node GEN_46 = mux(eq(UInt<7>("h2c"), T_534), UInt<64>("h202020200a3b3030"), GEN_45)
    node GEN_47 = mux(eq(UInt<7>("h2d"), T_534), UInt<64>("h616c632020202020"), GEN_46)
    node GEN_48 = mux(eq(UInt<7>("h2e"), T_534), UInt<64>("h3230347830206d69"), GEN_47)
    node GEN_49 = mux(eq(UInt<7>("h2f"), T_534), UInt<64>("h200a3b3430303030"), GEN_48)
    node GEN_50 = mux(eq(UInt<7>("h30"), T_534), UInt<64>("h7d20202020202020"), GEN_49)
    node GEN_51 = mux(eq(UInt<7>("h31"), T_534), UInt<64>("h2020202020200a3b"), GEN_50)
    node GEN_52 = mux(eq(UInt<7>("h32"), T_534), UInt<64>("h20200a7b20732020"), GEN_51)
    node GEN_53 = mux(eq(UInt<7>("h33"), T_534), UInt<64>("h6920202020202020"), GEN_52)
    node GEN_54 = mux(eq(UInt<7>("h34"), T_534), UInt<64>("h3030303478302065"), GEN_53)
    node GEN_55 = mux(eq(UInt<7>("h35"), T_534), UInt<64>("h20200a3b30383032"), GEN_54)
    node GEN_56 = mux(eq(UInt<7>("h36"), T_534), UInt<64>("h7420202020202020"), GEN_55)
    node GEN_57 = mux(eq(UInt<7>("h37"), T_534), UInt<64>("h7830206873657268"), GEN_56)
    node GEN_58 = mux(eq(UInt<7>("h38"), T_534), UInt<64>("h3030303130323034"), GEN_57)
    node GEN_59 = mux(eq(UInt<7>("h39"), T_534), UInt<64>("h2020202020200a3b"), GEN_58)
    node GEN_60 = mux(eq(UInt<7>("h3a"), T_534), UInt<64>("h6d69616c63202020"), GEN_59)
    node GEN_61 = mux(eq(UInt<7>("h3b"), T_534), UInt<64>("h3130323034783020"), GEN_60)
    node GEN_62 = mux(eq(UInt<7>("h3c"), T_534), UInt<64>("h2020200a3b343030"), GEN_61)
    node GEN_63 = mux(eq(UInt<7>("h3d"), T_534), UInt<64>("ha3b7d2020202020"), GEN_62)
    node GEN_64 = mux(eq(UInt<7>("h3e"), T_534), UInt<64>("h3b7d202020202020"), GEN_63)
    node GEN_65 = mux(eq(UInt<7>("h3f"), T_534), UInt<64>("ha3b7d202020200a"), GEN_64)
    node GEN_66 = mux(eq(UInt<7>("h40"), T_534), UInt<64>("ha3b7d0a3b7d2020"), GEN_65)
    node GEN_67 = mux(eq(UInt<7>("h41"), T_534), UInt<64>("h0"), GEN_66)
    io_acquire_ready <= acq.io_enq_ready
    io_grant_valid <= acq.io_deq_valid
    io_grant_bits_addr_beat <= T_593_addr_beat
    io_grant_bits_client_xact_id <= T_593_client_xact_id
    io_grant_bits_manager_xact_id <= UInt<1>("h0")
    io_grant_bits_is_builtin_type <= UInt<1>("h1")
    io_grant_bits_g_type <= T_593_g_type
    io_grant_bits_data <= T_593_data
    acq.io_enq_valid <= io_acquire_valid
    acq.io_enq_bits_addr_block <= io_acquire_bits_addr_block
    acq.io_enq_bits_client_xact_id <= io_acquire_bits_client_xact_id
    acq.io_enq_bits_addr_beat <= io_acquire_bits_addr_beat
    acq.io_enq_bits_is_builtin_type <= io_acquire_bits_is_builtin_type
    acq.io_enq_bits_a_type <= io_acquire_bits_a_type
    acq.io_enq_bits_union <= io_acquire_bits_union
    acq.io_enq_bits_data <= io_acquire_bits_data
    acq.io_deq_ready <= T_539
    addr_beat <= GEN_2
    T_593_addr_beat <= addr_beat
    T_593_client_xact_id <= acq.io_deq_bits_client_xact_id
    T_593_g_type <= pad(T_569, 4)
    T_593_data <= GEN_0
    GEN_0 <= GEN_67
    printf(clk, T_455, "Assertion failed: unsupported ROMSlave operation\n    at Rom.scala:17 assert(!acq.valid || single_beat || multi_beat, \"unsupported ROMSlave operation\")\n")
    stop(clk, T_455, 1)

  module DefaultCoreplex :
    input clk : Clock
    input reset : UInt<1>
    input io_master_mem_0_acquire_ready : UInt<1>
    output io_master_mem_0_acquire_valid : UInt<1>
    output io_master_mem_0_acquire_bits_addr_block : UInt<26>
    output io_master_mem_0_acquire_bits_client_xact_id : UInt<4>
    output io_master_mem_0_acquire_bits_addr_beat : UInt<3>
    output io_master_mem_0_acquire_bits_is_builtin_type : UInt<1>
    output io_master_mem_0_acquire_bits_a_type : UInt<3>
    output io_master_mem_0_acquire_bits_union : UInt<11>
    output io_master_mem_0_acquire_bits_data : UInt<64>
    output io_master_mem_0_grant_ready : UInt<1>
    input io_master_mem_0_grant_valid : UInt<1>
    input io_master_mem_0_grant_bits_addr_beat : UInt<3>
    input io_master_mem_0_grant_bits_client_xact_id : UInt<4>
    input io_master_mem_0_grant_bits_manager_xact_id : UInt<1>
    input io_master_mem_0_grant_bits_is_builtin_type : UInt<1>
    input io_master_mem_0_grant_bits_g_type : UInt<4>
    input io_master_mem_0_grant_bits_data : UInt<64>
    input io_interrupts_0 : UInt<1>
    input io_interrupts_1 : UInt<1>
    output io_debug_req_ready : UInt<1>
    input io_debug_req_valid : UInt<1>
    input io_debug_req_bits_addr : UInt<5>
    input io_debug_req_bits_data : UInt<34>
    input io_debug_req_bits_op : UInt<2>
    input io_debug_resp_ready : UInt<1>
    output io_debug_resp_valid : UInt<1>
    output io_debug_resp_bits_data : UInt<34>
    output io_debug_resp_bits_resp : UInt<2>
    input io_rtcTick : UInt<1>
  
    wire tileResets_0 : UInt<1>
    inst tileList_0 of RocketTile
    inst PortedTileLinkCrossbar_1 of PortedTileLinkCrossbar
    inst L2BroadcastHub_1 of L2BroadcastHub
    inst MMIOTileLinkManager_1 of MMIOTileLinkManager
    inst TileLinkMemoryInterconnect_1 of TileLinkMemoryInterconnect
    inst ClientTileLinkIOUnwrapper_1 of ClientTileLinkIOUnwrapper
    inst ClientTileLinkEnqueuer_1 of ClientTileLinkEnqueuer
    inst ClientUncachedTileLinkEnqueuer_1 of ClientUncachedTileLinkEnqueuer
    inst TileLinkRecursiveInterconnect_2 of TileLinkRecursiveInterconnect
    inst PLIC_1 of PLIC
    inst LevelGateway_2 of LevelGateway
    inst LevelGateway_1_1 of LevelGateway
    inst DebugModule_1 of DebugModule
    inst PRCI_1 of PRCI
    inst ROMSlave_1 of ROMSlave
    io_master_mem_0_acquire_valid <= TileLinkMemoryInterconnect_1.io_out_0_acquire_valid
    io_master_mem_0_acquire_bits_addr_block <= TileLinkMemoryInterconnect_1.io_out_0_acquire_bits_addr_block
    io_master_mem_0_acquire_bits_client_xact_id <= TileLinkMemoryInterconnect_1.io_out_0_acquire_bits_client_xact_id
    io_master_mem_0_acquire_bits_addr_beat <= TileLinkMemoryInterconnect_1.io_out_0_acquire_bits_addr_beat
    io_master_mem_0_acquire_bits_is_builtin_type <= TileLinkMemoryInterconnect_1.io_out_0_acquire_bits_is_builtin_type
    io_master_mem_0_acquire_bits_a_type <= TileLinkMemoryInterconnect_1.io_out_0_acquire_bits_a_type
    io_master_mem_0_acquire_bits_union <= TileLinkMemoryInterconnect_1.io_out_0_acquire_bits_union
    io_master_mem_0_acquire_bits_data <= TileLinkMemoryInterconnect_1.io_out_0_acquire_bits_data
    io_master_mem_0_grant_ready <= TileLinkMemoryInterconnect_1.io_out_0_grant_ready
    io_debug_req_ready <= DebugModule_1.io_db_req_ready
    io_debug_resp_valid <= DebugModule_1.io_db_resp_valid
    io_debug_resp_bits_data <= DebugModule_1.io_db_resp_bits_data
    io_debug_resp_bits_resp <= DebugModule_1.io_db_resp_bits_resp
    tileResets_0 <= reset
    tileList_0.io_cached_0_acquire_ready <= PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_ready
    tileList_0.io_cached_0_probe_valid <= PortedTileLinkCrossbar_1.io_clients_cached_0_probe_valid
    tileList_0.io_cached_0_probe_bits_addr_block <= PortedTileLinkCrossbar_1.io_clients_cached_0_probe_bits_addr_block
    tileList_0.io_cached_0_probe_bits_p_type <= PortedTileLinkCrossbar_1.io_clients_cached_0_probe_bits_p_type
    tileList_0.io_cached_0_release_ready <= PortedTileLinkCrossbar_1.io_clients_cached_0_release_ready
    tileList_0.io_cached_0_grant_valid <= PortedTileLinkCrossbar_1.io_clients_cached_0_grant_valid
    tileList_0.io_cached_0_grant_bits_addr_beat <= PortedTileLinkCrossbar_1.io_clients_cached_0_grant_bits_addr_beat
    tileList_0.io_cached_0_grant_bits_client_xact_id <= PortedTileLinkCrossbar_1.io_clients_cached_0_grant_bits_client_xact_id
    tileList_0.io_cached_0_grant_bits_manager_xact_id <= PortedTileLinkCrossbar_1.io_clients_cached_0_grant_bits_manager_xact_id
    tileList_0.io_cached_0_grant_bits_is_builtin_type <= PortedTileLinkCrossbar_1.io_clients_cached_0_grant_bits_is_builtin_type
    tileList_0.io_cached_0_grant_bits_g_type <= PortedTileLinkCrossbar_1.io_clients_cached_0_grant_bits_g_type
    tileList_0.io_cached_0_grant_bits_data <= PortedTileLinkCrossbar_1.io_clients_cached_0_grant_bits_data
    tileList_0.io_cached_0_grant_bits_manager_id <= PortedTileLinkCrossbar_1.io_clients_cached_0_grant_bits_manager_id
    tileList_0.io_cached_0_finish_ready <= PortedTileLinkCrossbar_1.io_clients_cached_0_finish_ready
    tileList_0.io_uncached_0_acquire_ready <= PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_ready
    tileList_0.io_uncached_0_grant_valid <= PortedTileLinkCrossbar_1.io_clients_uncached_0_grant_valid
    tileList_0.io_uncached_0_grant_bits_addr_beat <= PortedTileLinkCrossbar_1.io_clients_uncached_0_grant_bits_addr_beat
    tileList_0.io_uncached_0_grant_bits_client_xact_id <= PortedTileLinkCrossbar_1.io_clients_uncached_0_grant_bits_client_xact_id
    tileList_0.io_uncached_0_grant_bits_manager_xact_id <= PortedTileLinkCrossbar_1.io_clients_uncached_0_grant_bits_manager_xact_id
    tileList_0.io_uncached_0_grant_bits_is_builtin_type <= PortedTileLinkCrossbar_1.io_clients_uncached_0_grant_bits_is_builtin_type
    tileList_0.io_uncached_0_grant_bits_g_type <= PortedTileLinkCrossbar_1.io_clients_uncached_0_grant_bits_g_type
    tileList_0.io_uncached_0_grant_bits_data <= PortedTileLinkCrossbar_1.io_clients_uncached_0_grant_bits_data
    tileList_0.io_prci_reset <= PRCI_1.io_tiles_0_reset
    tileList_0.io_prci_id <= PRCI_1.io_tiles_0_id
    tileList_0.io_prci_interrupts_meip <= PRCI_1.io_tiles_0_interrupts_meip
    tileList_0.io_prci_interrupts_seip <= PRCI_1.io_tiles_0_interrupts_seip
    tileList_0.io_prci_interrupts_debug <= PRCI_1.io_tiles_0_interrupts_debug
    tileList_0.io_prci_interrupts_mtip <= PRCI_1.io_tiles_0_interrupts_mtip
    tileList_0.io_prci_interrupts_msip <= PRCI_1.io_tiles_0_interrupts_msip
    PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_valid <= tileList_0.io_cached_0_acquire_valid
    PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_bits_addr_block <= tileList_0.io_cached_0_acquire_bits_addr_block
    PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_bits_client_xact_id <= tileList_0.io_cached_0_acquire_bits_client_xact_id
    PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_bits_addr_beat <= tileList_0.io_cached_0_acquire_bits_addr_beat
    PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_bits_is_builtin_type <= tileList_0.io_cached_0_acquire_bits_is_builtin_type
    PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_bits_a_type <= tileList_0.io_cached_0_acquire_bits_a_type
    PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_bits_union <= tileList_0.io_cached_0_acquire_bits_union
    PortedTileLinkCrossbar_1.io_clients_cached_0_acquire_bits_data <= tileList_0.io_cached_0_acquire_bits_data
    PortedTileLinkCrossbar_1.io_clients_cached_0_probe_ready <= tileList_0.io_cached_0_probe_ready
    PortedTileLinkCrossbar_1.io_clients_cached_0_release_valid <= tileList_0.io_cached_0_release_valid
    PortedTileLinkCrossbar_1.io_clients_cached_0_release_bits_addr_beat <= tileList_0.io_cached_0_release_bits_addr_beat
    PortedTileLinkCrossbar_1.io_clients_cached_0_release_bits_addr_block <= tileList_0.io_cached_0_release_bits_addr_block
    PortedTileLinkCrossbar_1.io_clients_cached_0_release_bits_client_xact_id <= tileList_0.io_cached_0_release_bits_client_xact_id
    PortedTileLinkCrossbar_1.io_clients_cached_0_release_bits_voluntary <= tileList_0.io_cached_0_release_bits_voluntary
    PortedTileLinkCrossbar_1.io_clients_cached_0_release_bits_r_type <= tileList_0.io_cached_0_release_bits_r_type
    PortedTileLinkCrossbar_1.io_clients_cached_0_release_bits_data <= tileList_0.io_cached_0_release_bits_data
    PortedTileLinkCrossbar_1.io_clients_cached_0_grant_ready <= tileList_0.io_cached_0_grant_ready
    PortedTileLinkCrossbar_1.io_clients_cached_0_finish_valid <= tileList_0.io_cached_0_finish_valid
    PortedTileLinkCrossbar_1.io_clients_cached_0_finish_bits_manager_xact_id <= tileList_0.io_cached_0_finish_bits_manager_xact_id
    PortedTileLinkCrossbar_1.io_clients_cached_0_finish_bits_manager_id <= tileList_0.io_cached_0_finish_bits_manager_id
    PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_valid <= tileList_0.io_uncached_0_acquire_valid
    PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_bits_addr_block <= tileList_0.io_uncached_0_acquire_bits_addr_block
    PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_bits_client_xact_id <= tileList_0.io_uncached_0_acquire_bits_client_xact_id
    PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_bits_addr_beat <= tileList_0.io_uncached_0_acquire_bits_addr_beat
    PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_bits_is_builtin_type <= tileList_0.io_uncached_0_acquire_bits_is_builtin_type
    PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_bits_a_type <= tileList_0.io_uncached_0_acquire_bits_a_type
    PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_bits_union <= tileList_0.io_uncached_0_acquire_bits_union
    PortedTileLinkCrossbar_1.io_clients_uncached_0_acquire_bits_data <= tileList_0.io_uncached_0_acquire_bits_data
    PortedTileLinkCrossbar_1.io_clients_uncached_0_grant_ready <= tileList_0.io_uncached_0_grant_ready
    PortedTileLinkCrossbar_1.io_managers_0_acquire_ready <= L2BroadcastHub_1.io_inner_acquire_ready
    PortedTileLinkCrossbar_1.io_managers_0_grant_valid <= L2BroadcastHub_1.io_inner_grant_valid
    PortedTileLinkCrossbar_1.io_managers_0_grant_bits_addr_beat <= L2BroadcastHub_1.io_inner_grant_bits_addr_beat
    PortedTileLinkCrossbar_1.io_managers_0_grant_bits_client_xact_id <= L2BroadcastHub_1.io_inner_grant_bits_client_xact_id
    PortedTileLinkCrossbar_1.io_managers_0_grant_bits_manager_xact_id <= L2BroadcastHub_1.io_inner_grant_bits_manager_xact_id
    PortedTileLinkCrossbar_1.io_managers_0_grant_bits_is_builtin_type <= L2BroadcastHub_1.io_inner_grant_bits_is_builtin_type
    PortedTileLinkCrossbar_1.io_managers_0_grant_bits_g_type <= L2BroadcastHub_1.io_inner_grant_bits_g_type
    PortedTileLinkCrossbar_1.io_managers_0_grant_bits_data <= L2BroadcastHub_1.io_inner_grant_bits_data
    PortedTileLinkCrossbar_1.io_managers_0_grant_bits_client_id <= L2BroadcastHub_1.io_inner_grant_bits_client_id
    PortedTileLinkCrossbar_1.io_managers_0_finish_ready <= L2BroadcastHub_1.io_inner_finish_ready
    PortedTileLinkCrossbar_1.io_managers_0_probe_valid <= L2BroadcastHub_1.io_inner_probe_valid
    PortedTileLinkCrossbar_1.io_managers_0_probe_bits_addr_block <= L2BroadcastHub_1.io_inner_probe_bits_addr_block
    PortedTileLinkCrossbar_1.io_managers_0_probe_bits_p_type <= L2BroadcastHub_1.io_inner_probe_bits_p_type
    PortedTileLinkCrossbar_1.io_managers_0_probe_bits_client_id <= L2BroadcastHub_1.io_inner_probe_bits_client_id
    PortedTileLinkCrossbar_1.io_managers_0_release_ready <= L2BroadcastHub_1.io_inner_release_ready
    PortedTileLinkCrossbar_1.io_managers_1_acquire_ready <= MMIOTileLinkManager_1.io_inner_acquire_ready
    PortedTileLinkCrossbar_1.io_managers_1_grant_valid <= MMIOTileLinkManager_1.io_inner_grant_valid
    PortedTileLinkCrossbar_1.io_managers_1_grant_bits_addr_beat <= MMIOTileLinkManager_1.io_inner_grant_bits_addr_beat
    PortedTileLinkCrossbar_1.io_managers_1_grant_bits_client_xact_id <= MMIOTileLinkManager_1.io_inner_grant_bits_client_xact_id
    PortedTileLinkCrossbar_1.io_managers_1_grant_bits_manager_xact_id <= MMIOTileLinkManager_1.io_inner_grant_bits_manager_xact_id
    PortedTileLinkCrossbar_1.io_managers_1_grant_bits_is_builtin_type <= MMIOTileLinkManager_1.io_inner_grant_bits_is_builtin_type
    PortedTileLinkCrossbar_1.io_managers_1_grant_bits_g_type <= MMIOTileLinkManager_1.io_inner_grant_bits_g_type
    PortedTileLinkCrossbar_1.io_managers_1_grant_bits_data <= MMIOTileLinkManager_1.io_inner_grant_bits_data
    PortedTileLinkCrossbar_1.io_managers_1_grant_bits_client_id <= MMIOTileLinkManager_1.io_inner_grant_bits_client_id
    PortedTileLinkCrossbar_1.io_managers_1_finish_ready <= MMIOTileLinkManager_1.io_inner_finish_ready
    PortedTileLinkCrossbar_1.io_managers_1_probe_valid <= MMIOTileLinkManager_1.io_inner_probe_valid
    PortedTileLinkCrossbar_1.io_managers_1_probe_bits_addr_block <= MMIOTileLinkManager_1.io_inner_probe_bits_addr_block
    PortedTileLinkCrossbar_1.io_managers_1_probe_bits_p_type <= MMIOTileLinkManager_1.io_inner_probe_bits_p_type
    PortedTileLinkCrossbar_1.io_managers_1_probe_bits_client_id <= MMIOTileLinkManager_1.io_inner_probe_bits_client_id
    PortedTileLinkCrossbar_1.io_managers_1_release_ready <= MMIOTileLinkManager_1.io_inner_release_ready
    L2BroadcastHub_1.io_inner_acquire_valid <= PortedTileLinkCrossbar_1.io_managers_0_acquire_valid
    L2BroadcastHub_1.io_inner_acquire_bits_addr_block <= PortedTileLinkCrossbar_1.io_managers_0_acquire_bits_addr_block
    L2BroadcastHub_1.io_inner_acquire_bits_client_xact_id <= PortedTileLinkCrossbar_1.io_managers_0_acquire_bits_client_xact_id
    L2BroadcastHub_1.io_inner_acquire_bits_addr_beat <= PortedTileLinkCrossbar_1.io_managers_0_acquire_bits_addr_beat
    L2BroadcastHub_1.io_inner_acquire_bits_is_builtin_type <= PortedTileLinkCrossbar_1.io_managers_0_acquire_bits_is_builtin_type
    L2BroadcastHub_1.io_inner_acquire_bits_a_type <= PortedTileLinkCrossbar_1.io_managers_0_acquire_bits_a_type
    L2BroadcastHub_1.io_inner_acquire_bits_union <= PortedTileLinkCrossbar_1.io_managers_0_acquire_bits_union
    L2BroadcastHub_1.io_inner_acquire_bits_data <= PortedTileLinkCrossbar_1.io_managers_0_acquire_bits_data
    L2BroadcastHub_1.io_inner_acquire_bits_client_id <= PortedTileLinkCrossbar_1.io_managers_0_acquire_bits_client_id
    L2BroadcastHub_1.io_inner_grant_ready <= PortedTileLinkCrossbar_1.io_managers_0_grant_ready
    L2BroadcastHub_1.io_inner_finish_valid <= PortedTileLinkCrossbar_1.io_managers_0_finish_valid
    L2BroadcastHub_1.io_inner_finish_bits_manager_xact_id <= PortedTileLinkCrossbar_1.io_managers_0_finish_bits_manager_xact_id
    L2BroadcastHub_1.io_inner_probe_ready <= PortedTileLinkCrossbar_1.io_managers_0_probe_ready
    L2BroadcastHub_1.io_inner_release_valid <= PortedTileLinkCrossbar_1.io_managers_0_release_valid
    L2BroadcastHub_1.io_inner_release_bits_addr_beat <= PortedTileLinkCrossbar_1.io_managers_0_release_bits_addr_beat
    L2BroadcastHub_1.io_inner_release_bits_addr_block <= PortedTileLinkCrossbar_1.io_managers_0_release_bits_addr_block
    L2BroadcastHub_1.io_inner_release_bits_client_xact_id <= PortedTileLinkCrossbar_1.io_managers_0_release_bits_client_xact_id
    L2BroadcastHub_1.io_inner_release_bits_voluntary <= PortedTileLinkCrossbar_1.io_managers_0_release_bits_voluntary
    L2BroadcastHub_1.io_inner_release_bits_r_type <= PortedTileLinkCrossbar_1.io_managers_0_release_bits_r_type
    L2BroadcastHub_1.io_inner_release_bits_data <= PortedTileLinkCrossbar_1.io_managers_0_release_bits_data
    L2BroadcastHub_1.io_inner_release_bits_client_id <= PortedTileLinkCrossbar_1.io_managers_0_release_bits_client_id
    L2BroadcastHub_1.io_incoherent_0 <= UInt<1>("h0")
    L2BroadcastHub_1.io_outer_acquire_ready <= ClientTileLinkEnqueuer_1.io_inner_acquire_ready
    L2BroadcastHub_1.io_outer_probe_valid <= ClientTileLinkEnqueuer_1.io_inner_probe_valid
    L2BroadcastHub_1.io_outer_probe_bits_addr_block <= ClientTileLinkEnqueuer_1.io_inner_probe_bits_addr_block
    L2BroadcastHub_1.io_outer_probe_bits_p_type <= ClientTileLinkEnqueuer_1.io_inner_probe_bits_p_type
    L2BroadcastHub_1.io_outer_release_ready <= ClientTileLinkEnqueuer_1.io_inner_release_ready
    L2BroadcastHub_1.io_outer_grant_valid <= ClientTileLinkEnqueuer_1.io_inner_grant_valid
    L2BroadcastHub_1.io_outer_grant_bits_addr_beat <= ClientTileLinkEnqueuer_1.io_inner_grant_bits_addr_beat
    L2BroadcastHub_1.io_outer_grant_bits_client_xact_id <= ClientTileLinkEnqueuer_1.io_inner_grant_bits_client_xact_id
    L2BroadcastHub_1.io_outer_grant_bits_manager_xact_id <= ClientTileLinkEnqueuer_1.io_inner_grant_bits_manager_xact_id
    L2BroadcastHub_1.io_outer_grant_bits_is_builtin_type <= ClientTileLinkEnqueuer_1.io_inner_grant_bits_is_builtin_type
    L2BroadcastHub_1.io_outer_grant_bits_g_type <= ClientTileLinkEnqueuer_1.io_inner_grant_bits_g_type
    L2BroadcastHub_1.io_outer_grant_bits_data <= ClientTileLinkEnqueuer_1.io_inner_grant_bits_data
    L2BroadcastHub_1.io_outer_grant_bits_manager_id <= ClientTileLinkEnqueuer_1.io_inner_grant_bits_manager_id
    L2BroadcastHub_1.io_outer_finish_ready <= ClientTileLinkEnqueuer_1.io_inner_finish_ready
    MMIOTileLinkManager_1.io_inner_acquire_valid <= PortedTileLinkCrossbar_1.io_managers_1_acquire_valid
    MMIOTileLinkManager_1.io_inner_acquire_bits_addr_block <= PortedTileLinkCrossbar_1.io_managers_1_acquire_bits_addr_block
    MMIOTileLinkManager_1.io_inner_acquire_bits_client_xact_id <= PortedTileLinkCrossbar_1.io_managers_1_acquire_bits_client_xact_id
    MMIOTileLinkManager_1.io_inner_acquire_bits_addr_beat <= PortedTileLinkCrossbar_1.io_managers_1_acquire_bits_addr_beat
    MMIOTileLinkManager_1.io_inner_acquire_bits_is_builtin_type <= PortedTileLinkCrossbar_1.io_managers_1_acquire_bits_is_builtin_type
    MMIOTileLinkManager_1.io_inner_acquire_bits_a_type <= PortedTileLinkCrossbar_1.io_managers_1_acquire_bits_a_type
    MMIOTileLinkManager_1.io_inner_acquire_bits_union <= PortedTileLinkCrossbar_1.io_managers_1_acquire_bits_union
    MMIOTileLinkManager_1.io_inner_acquire_bits_data <= PortedTileLinkCrossbar_1.io_managers_1_acquire_bits_data
    MMIOTileLinkManager_1.io_inner_acquire_bits_client_id <= PortedTileLinkCrossbar_1.io_managers_1_acquire_bits_client_id
    MMIOTileLinkManager_1.io_inner_grant_ready <= PortedTileLinkCrossbar_1.io_managers_1_grant_ready
    MMIOTileLinkManager_1.io_inner_finish_valid <= PortedTileLinkCrossbar_1.io_managers_1_finish_valid
    MMIOTileLinkManager_1.io_inner_finish_bits_manager_xact_id <= PortedTileLinkCrossbar_1.io_managers_1_finish_bits_manager_xact_id
    MMIOTileLinkManager_1.io_inner_probe_ready <= PortedTileLinkCrossbar_1.io_managers_1_probe_ready
    MMIOTileLinkManager_1.io_inner_release_valid <= PortedTileLinkCrossbar_1.io_managers_1_release_valid
    MMIOTileLinkManager_1.io_inner_release_bits_addr_beat <= PortedTileLinkCrossbar_1.io_managers_1_release_bits_addr_beat
    MMIOTileLinkManager_1.io_inner_release_bits_addr_block <= PortedTileLinkCrossbar_1.io_managers_1_release_bits_addr_block
    MMIOTileLinkManager_1.io_inner_release_bits_client_xact_id <= PortedTileLinkCrossbar_1.io_managers_1_release_bits_client_xact_id
    MMIOTileLinkManager_1.io_inner_release_bits_voluntary <= PortedTileLinkCrossbar_1.io_managers_1_release_bits_voluntary
    MMIOTileLinkManager_1.io_inner_release_bits_r_type <= PortedTileLinkCrossbar_1.io_managers_1_release_bits_r_type
    MMIOTileLinkManager_1.io_inner_release_bits_data <= PortedTileLinkCrossbar_1.io_managers_1_release_bits_data
    MMIOTileLinkManager_1.io_inner_release_bits_client_id <= PortedTileLinkCrossbar_1.io_managers_1_release_bits_client_id
    MMIOTileLinkManager_1.io_incoherent_0 <= UInt<1>("h0")
    MMIOTileLinkManager_1.io_outer_acquire_ready <= ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_ready
    MMIOTileLinkManager_1.io_outer_grant_valid <= ClientUncachedTileLinkEnqueuer_1.io_inner_grant_valid
    MMIOTileLinkManager_1.io_outer_grant_bits_addr_beat <= ClientUncachedTileLinkEnqueuer_1.io_inner_grant_bits_addr_beat
    MMIOTileLinkManager_1.io_outer_grant_bits_client_xact_id <= pad(ClientUncachedTileLinkEnqueuer_1.io_inner_grant_bits_client_xact_id, 2)
    MMIOTileLinkManager_1.io_outer_grant_bits_manager_xact_id <= bits(ClientUncachedTileLinkEnqueuer_1.io_inner_grant_bits_manager_xact_id, 0, 0)
    MMIOTileLinkManager_1.io_outer_grant_bits_is_builtin_type <= ClientUncachedTileLinkEnqueuer_1.io_inner_grant_bits_is_builtin_type
    MMIOTileLinkManager_1.io_outer_grant_bits_g_type <= ClientUncachedTileLinkEnqueuer_1.io_inner_grant_bits_g_type
    MMIOTileLinkManager_1.io_outer_grant_bits_data <= ClientUncachedTileLinkEnqueuer_1.io_inner_grant_bits_data
    TileLinkMemoryInterconnect_1.io_in_0_acquire_valid <= ClientTileLinkIOUnwrapper_1.io_out_acquire_valid
    TileLinkMemoryInterconnect_1.io_in_0_acquire_bits_addr_block <= ClientTileLinkIOUnwrapper_1.io_out_acquire_bits_addr_block
    TileLinkMemoryInterconnect_1.io_in_0_acquire_bits_client_xact_id <= ClientTileLinkIOUnwrapper_1.io_out_acquire_bits_client_xact_id
    TileLinkMemoryInterconnect_1.io_in_0_acquire_bits_addr_beat <= ClientTileLinkIOUnwrapper_1.io_out_acquire_bits_addr_beat
    TileLinkMemoryInterconnect_1.io_in_0_acquire_bits_is_builtin_type <= ClientTileLinkIOUnwrapper_1.io_out_acquire_bits_is_builtin_type
    TileLinkMemoryInterconnect_1.io_in_0_acquire_bits_a_type <= ClientTileLinkIOUnwrapper_1.io_out_acquire_bits_a_type
    TileLinkMemoryInterconnect_1.io_in_0_acquire_bits_union <= ClientTileLinkIOUnwrapper_1.io_out_acquire_bits_union
    TileLinkMemoryInterconnect_1.io_in_0_acquire_bits_data <= ClientTileLinkIOUnwrapper_1.io_out_acquire_bits_data
    TileLinkMemoryInterconnect_1.io_in_0_grant_ready <= ClientTileLinkIOUnwrapper_1.io_out_grant_ready
    TileLinkMemoryInterconnect_1.io_out_0_acquire_ready <= io_master_mem_0_acquire_ready
    TileLinkMemoryInterconnect_1.io_out_0_grant_valid <= io_master_mem_0_grant_valid
    TileLinkMemoryInterconnect_1.io_out_0_grant_bits_addr_beat <= io_master_mem_0_grant_bits_addr_beat
    TileLinkMemoryInterconnect_1.io_out_0_grant_bits_client_xact_id <= io_master_mem_0_grant_bits_client_xact_id
    TileLinkMemoryInterconnect_1.io_out_0_grant_bits_manager_xact_id <= io_master_mem_0_grant_bits_manager_xact_id
    TileLinkMemoryInterconnect_1.io_out_0_grant_bits_is_builtin_type <= io_master_mem_0_grant_bits_is_builtin_type
    TileLinkMemoryInterconnect_1.io_out_0_grant_bits_g_type <= io_master_mem_0_grant_bits_g_type
    TileLinkMemoryInterconnect_1.io_out_0_grant_bits_data <= io_master_mem_0_grant_bits_data
    ClientTileLinkIOUnwrapper_1.io_in_acquire_valid <= ClientTileLinkEnqueuer_1.io_outer_acquire_valid
    ClientTileLinkIOUnwrapper_1.io_in_acquire_bits_addr_block <= ClientTileLinkEnqueuer_1.io_outer_acquire_bits_addr_block
    ClientTileLinkIOUnwrapper_1.io_in_acquire_bits_client_xact_id <= ClientTileLinkEnqueuer_1.io_outer_acquire_bits_client_xact_id
    ClientTileLinkIOUnwrapper_1.io_in_acquire_bits_addr_beat <= ClientTileLinkEnqueuer_1.io_outer_acquire_bits_addr_beat
    ClientTileLinkIOUnwrapper_1.io_in_acquire_bits_is_builtin_type <= ClientTileLinkEnqueuer_1.io_outer_acquire_bits_is_builtin_type
    ClientTileLinkIOUnwrapper_1.io_in_acquire_bits_a_type <= ClientTileLinkEnqueuer_1.io_outer_acquire_bits_a_type
    ClientTileLinkIOUnwrapper_1.io_in_acquire_bits_union <= ClientTileLinkEnqueuer_1.io_outer_acquire_bits_union
    ClientTileLinkIOUnwrapper_1.io_in_acquire_bits_data <= ClientTileLinkEnqueuer_1.io_outer_acquire_bits_data
    ClientTileLinkIOUnwrapper_1.io_in_probe_ready <= ClientTileLinkEnqueuer_1.io_outer_probe_ready
    ClientTileLinkIOUnwrapper_1.io_in_release_valid <= ClientTileLinkEnqueuer_1.io_outer_release_valid
    ClientTileLinkIOUnwrapper_1.io_in_release_bits_addr_beat <= ClientTileLinkEnqueuer_1.io_outer_release_bits_addr_beat
    ClientTileLinkIOUnwrapper_1.io_in_release_bits_addr_block <= ClientTileLinkEnqueuer_1.io_outer_release_bits_addr_block
    ClientTileLinkIOUnwrapper_1.io_in_release_bits_client_xact_id <= ClientTileLinkEnqueuer_1.io_outer_release_bits_client_xact_id
    ClientTileLinkIOUnwrapper_1.io_in_release_bits_voluntary <= ClientTileLinkEnqueuer_1.io_outer_release_bits_voluntary
    ClientTileLinkIOUnwrapper_1.io_in_release_bits_r_type <= ClientTileLinkEnqueuer_1.io_outer_release_bits_r_type
    ClientTileLinkIOUnwrapper_1.io_in_release_bits_data <= ClientTileLinkEnqueuer_1.io_outer_release_bits_data
    ClientTileLinkIOUnwrapper_1.io_in_grant_ready <= ClientTileLinkEnqueuer_1.io_outer_grant_ready
    ClientTileLinkIOUnwrapper_1.io_in_finish_valid <= ClientTileLinkEnqueuer_1.io_outer_finish_valid
    ClientTileLinkIOUnwrapper_1.io_in_finish_bits_manager_xact_id <= ClientTileLinkEnqueuer_1.io_outer_finish_bits_manager_xact_id
    ClientTileLinkIOUnwrapper_1.io_in_finish_bits_manager_id <= ClientTileLinkEnqueuer_1.io_outer_finish_bits_manager_id
    ClientTileLinkIOUnwrapper_1.io_out_acquire_ready <= TileLinkMemoryInterconnect_1.io_in_0_acquire_ready
    ClientTileLinkIOUnwrapper_1.io_out_grant_valid <= TileLinkMemoryInterconnect_1.io_in_0_grant_valid
    ClientTileLinkIOUnwrapper_1.io_out_grant_bits_addr_beat <= TileLinkMemoryInterconnect_1.io_in_0_grant_bits_addr_beat
    ClientTileLinkIOUnwrapper_1.io_out_grant_bits_client_xact_id <= TileLinkMemoryInterconnect_1.io_in_0_grant_bits_client_xact_id
    ClientTileLinkIOUnwrapper_1.io_out_grant_bits_manager_xact_id <= TileLinkMemoryInterconnect_1.io_in_0_grant_bits_manager_xact_id
    ClientTileLinkIOUnwrapper_1.io_out_grant_bits_is_builtin_type <= TileLinkMemoryInterconnect_1.io_in_0_grant_bits_is_builtin_type
    ClientTileLinkIOUnwrapper_1.io_out_grant_bits_g_type <= TileLinkMemoryInterconnect_1.io_in_0_grant_bits_g_type
    ClientTileLinkIOUnwrapper_1.io_out_grant_bits_data <= TileLinkMemoryInterconnect_1.io_in_0_grant_bits_data
    ClientTileLinkEnqueuer_1.io_inner_acquire_valid <= L2BroadcastHub_1.io_outer_acquire_valid
    ClientTileLinkEnqueuer_1.io_inner_acquire_bits_addr_block <= L2BroadcastHub_1.io_outer_acquire_bits_addr_block
    ClientTileLinkEnqueuer_1.io_inner_acquire_bits_client_xact_id <= L2BroadcastHub_1.io_outer_acquire_bits_client_xact_id
    ClientTileLinkEnqueuer_1.io_inner_acquire_bits_addr_beat <= L2BroadcastHub_1.io_outer_acquire_bits_addr_beat
    ClientTileLinkEnqueuer_1.io_inner_acquire_bits_is_builtin_type <= L2BroadcastHub_1.io_outer_acquire_bits_is_builtin_type
    ClientTileLinkEnqueuer_1.io_inner_acquire_bits_a_type <= L2BroadcastHub_1.io_outer_acquire_bits_a_type
    ClientTileLinkEnqueuer_1.io_inner_acquire_bits_union <= L2BroadcastHub_1.io_outer_acquire_bits_union
    ClientTileLinkEnqueuer_1.io_inner_acquire_bits_data <= L2BroadcastHub_1.io_outer_acquire_bits_data
    ClientTileLinkEnqueuer_1.io_inner_probe_ready <= L2BroadcastHub_1.io_outer_probe_ready
    ClientTileLinkEnqueuer_1.io_inner_release_valid <= L2BroadcastHub_1.io_outer_release_valid
    ClientTileLinkEnqueuer_1.io_inner_release_bits_addr_beat <= L2BroadcastHub_1.io_outer_release_bits_addr_beat
    ClientTileLinkEnqueuer_1.io_inner_release_bits_addr_block <= L2BroadcastHub_1.io_outer_release_bits_addr_block
    ClientTileLinkEnqueuer_1.io_inner_release_bits_client_xact_id <= L2BroadcastHub_1.io_outer_release_bits_client_xact_id
    ClientTileLinkEnqueuer_1.io_inner_release_bits_voluntary <= L2BroadcastHub_1.io_outer_release_bits_voluntary
    ClientTileLinkEnqueuer_1.io_inner_release_bits_r_type <= L2BroadcastHub_1.io_outer_release_bits_r_type
    ClientTileLinkEnqueuer_1.io_inner_release_bits_data <= L2BroadcastHub_1.io_outer_release_bits_data
    ClientTileLinkEnqueuer_1.io_inner_grant_ready <= L2BroadcastHub_1.io_outer_grant_ready
    ClientTileLinkEnqueuer_1.io_inner_finish_valid <= L2BroadcastHub_1.io_outer_finish_valid
    ClientTileLinkEnqueuer_1.io_inner_finish_bits_manager_xact_id <= L2BroadcastHub_1.io_outer_finish_bits_manager_xact_id
    ClientTileLinkEnqueuer_1.io_inner_finish_bits_manager_id <= L2BroadcastHub_1.io_outer_finish_bits_manager_id
    ClientTileLinkEnqueuer_1.io_outer_acquire_ready <= ClientTileLinkIOUnwrapper_1.io_in_acquire_ready
    ClientTileLinkEnqueuer_1.io_outer_probe_valid <= ClientTileLinkIOUnwrapper_1.io_in_probe_valid
    ClientTileLinkEnqueuer_1.io_outer_probe_bits_addr_block <= ClientTileLinkIOUnwrapper_1.io_in_probe_bits_addr_block
    ClientTileLinkEnqueuer_1.io_outer_probe_bits_p_type <= ClientTileLinkIOUnwrapper_1.io_in_probe_bits_p_type
    ClientTileLinkEnqueuer_1.io_outer_release_ready <= ClientTileLinkIOUnwrapper_1.io_in_release_ready
    ClientTileLinkEnqueuer_1.io_outer_grant_valid <= ClientTileLinkIOUnwrapper_1.io_in_grant_valid
    ClientTileLinkEnqueuer_1.io_outer_grant_bits_addr_beat <= ClientTileLinkIOUnwrapper_1.io_in_grant_bits_addr_beat
    ClientTileLinkEnqueuer_1.io_outer_grant_bits_client_xact_id <= ClientTileLinkIOUnwrapper_1.io_in_grant_bits_client_xact_id
    ClientTileLinkEnqueuer_1.io_outer_grant_bits_manager_xact_id <= ClientTileLinkIOUnwrapper_1.io_in_grant_bits_manager_xact_id
    ClientTileLinkEnqueuer_1.io_outer_grant_bits_is_builtin_type <= ClientTileLinkIOUnwrapper_1.io_in_grant_bits_is_builtin_type
    ClientTileLinkEnqueuer_1.io_outer_grant_bits_g_type <= ClientTileLinkIOUnwrapper_1.io_in_grant_bits_g_type
    ClientTileLinkEnqueuer_1.io_outer_grant_bits_data <= ClientTileLinkIOUnwrapper_1.io_in_grant_bits_data
    ClientTileLinkEnqueuer_1.io_outer_grant_bits_manager_id <= ClientTileLinkIOUnwrapper_1.io_in_grant_bits_manager_id
    ClientTileLinkEnqueuer_1.io_outer_finish_ready <= ClientTileLinkIOUnwrapper_1.io_in_finish_ready
    ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_valid <= MMIOTileLinkManager_1.io_outer_acquire_valid
    ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_bits_addr_block <= MMIOTileLinkManager_1.io_outer_acquire_bits_addr_block
    ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_bits_client_xact_id <= bits(MMIOTileLinkManager_1.io_outer_acquire_bits_client_xact_id, 0, 0)
    ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_bits_addr_beat <= MMIOTileLinkManager_1.io_outer_acquire_bits_addr_beat
    ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_bits_is_builtin_type <= MMIOTileLinkManager_1.io_outer_acquire_bits_is_builtin_type
    ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_bits_a_type <= MMIOTileLinkManager_1.io_outer_acquire_bits_a_type
    ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_bits_union <= MMIOTileLinkManager_1.io_outer_acquire_bits_union
    ClientUncachedTileLinkEnqueuer_1.io_inner_acquire_bits_data <= MMIOTileLinkManager_1.io_outer_acquire_bits_data
    ClientUncachedTileLinkEnqueuer_1.io_inner_grant_ready <= MMIOTileLinkManager_1.io_outer_grant_ready
    ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_ready <= TileLinkRecursiveInterconnect_2.io_in_0_acquire_ready
    ClientUncachedTileLinkEnqueuer_1.io_outer_grant_valid <= TileLinkRecursiveInterconnect_2.io_in_0_grant_valid
    ClientUncachedTileLinkEnqueuer_1.io_outer_grant_bits_addr_beat <= TileLinkRecursiveInterconnect_2.io_in_0_grant_bits_addr_beat
    ClientUncachedTileLinkEnqueuer_1.io_outer_grant_bits_client_xact_id <= bits(TileLinkRecursiveInterconnect_2.io_in_0_grant_bits_client_xact_id, 0, 0)
    ClientUncachedTileLinkEnqueuer_1.io_outer_grant_bits_manager_xact_id <= pad(TileLinkRecursiveInterconnect_2.io_in_0_grant_bits_manager_xact_id, 4)
    ClientUncachedTileLinkEnqueuer_1.io_outer_grant_bits_is_builtin_type <= TileLinkRecursiveInterconnect_2.io_in_0_grant_bits_is_builtin_type
    ClientUncachedTileLinkEnqueuer_1.io_outer_grant_bits_g_type <= TileLinkRecursiveInterconnect_2.io_in_0_grant_bits_g_type
    ClientUncachedTileLinkEnqueuer_1.io_outer_grant_bits_data <= TileLinkRecursiveInterconnect_2.io_in_0_grant_bits_data
    TileLinkRecursiveInterconnect_2.io_in_0_acquire_valid <= ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_valid
    TileLinkRecursiveInterconnect_2.io_in_0_acquire_bits_addr_block <= ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_bits_addr_block
    TileLinkRecursiveInterconnect_2.io_in_0_acquire_bits_client_xact_id <= pad(ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_bits_client_xact_id, 2)
    TileLinkRecursiveInterconnect_2.io_in_0_acquire_bits_addr_beat <= ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_bits_addr_beat
    TileLinkRecursiveInterconnect_2.io_in_0_acquire_bits_is_builtin_type <= ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_bits_is_builtin_type
    TileLinkRecursiveInterconnect_2.io_in_0_acquire_bits_a_type <= ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_bits_a_type
    TileLinkRecursiveInterconnect_2.io_in_0_acquire_bits_union <= ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_bits_union
    TileLinkRecursiveInterconnect_2.io_in_0_acquire_bits_data <= ClientUncachedTileLinkEnqueuer_1.io_outer_acquire_bits_data
    TileLinkRecursiveInterconnect_2.io_in_0_grant_ready <= ClientUncachedTileLinkEnqueuer_1.io_outer_grant_ready
    TileLinkRecursiveInterconnect_2.io_out_0_acquire_ready <= DebugModule_1.io_tl_acquire_ready
    TileLinkRecursiveInterconnect_2.io_out_0_grant_valid <= DebugModule_1.io_tl_grant_valid
    TileLinkRecursiveInterconnect_2.io_out_0_grant_bits_addr_beat <= DebugModule_1.io_tl_grant_bits_addr_beat
    TileLinkRecursiveInterconnect_2.io_out_0_grant_bits_client_xact_id <= DebugModule_1.io_tl_grant_bits_client_xact_id
    TileLinkRecursiveInterconnect_2.io_out_0_grant_bits_manager_xact_id <= DebugModule_1.io_tl_grant_bits_manager_xact_id
    TileLinkRecursiveInterconnect_2.io_out_0_grant_bits_is_builtin_type <= DebugModule_1.io_tl_grant_bits_is_builtin_type
    TileLinkRecursiveInterconnect_2.io_out_0_grant_bits_g_type <= DebugModule_1.io_tl_grant_bits_g_type
    TileLinkRecursiveInterconnect_2.io_out_0_grant_bits_data <= DebugModule_1.io_tl_grant_bits_data
    TileLinkRecursiveInterconnect_2.io_out_1_acquire_ready <= ROMSlave_1.io_acquire_ready
    TileLinkRecursiveInterconnect_2.io_out_1_grant_valid <= ROMSlave_1.io_grant_valid
    TileLinkRecursiveInterconnect_2.io_out_1_grant_bits_addr_beat <= ROMSlave_1.io_grant_bits_addr_beat
    TileLinkRecursiveInterconnect_2.io_out_1_grant_bits_client_xact_id <= ROMSlave_1.io_grant_bits_client_xact_id
    TileLinkRecursiveInterconnect_2.io_out_1_grant_bits_manager_xact_id <= ROMSlave_1.io_grant_bits_manager_xact_id
    TileLinkRecursiveInterconnect_2.io_out_1_grant_bits_is_builtin_type <= ROMSlave_1.io_grant_bits_is_builtin_type
    TileLinkRecursiveInterconnect_2.io_out_1_grant_bits_g_type <= ROMSlave_1.io_grant_bits_g_type
    TileLinkRecursiveInterconnect_2.io_out_1_grant_bits_data <= ROMSlave_1.io_grant_bits_data
    TileLinkRecursiveInterconnect_2.io_out_2_acquire_ready <= PLIC_1.io_tl_acquire_ready
    TileLinkRecursiveInterconnect_2.io_out_2_grant_valid <= PLIC_1.io_tl_grant_valid
    TileLinkRecursiveInterconnect_2.io_out_2_grant_bits_addr_beat <= PLIC_1.io_tl_grant_bits_addr_beat
    TileLinkRecursiveInterconnect_2.io_out_2_grant_bits_client_xact_id <= PLIC_1.io_tl_grant_bits_client_xact_id
    TileLinkRecursiveInterconnect_2.io_out_2_grant_bits_manager_xact_id <= PLIC_1.io_tl_grant_bits_manager_xact_id
    TileLinkRecursiveInterconnect_2.io_out_2_grant_bits_is_builtin_type <= PLIC_1.io_tl_grant_bits_is_builtin_type
    TileLinkRecursiveInterconnect_2.io_out_2_grant_bits_g_type <= PLIC_1.io_tl_grant_bits_g_type
    TileLinkRecursiveInterconnect_2.io_out_2_grant_bits_data <= PLIC_1.io_tl_grant_bits_data
    TileLinkRecursiveInterconnect_2.io_out_3_acquire_ready <= PRCI_1.io_tl_acquire_ready
    TileLinkRecursiveInterconnect_2.io_out_3_grant_valid <= PRCI_1.io_tl_grant_valid
    TileLinkRecursiveInterconnect_2.io_out_3_grant_bits_addr_beat <= PRCI_1.io_tl_grant_bits_addr_beat
    TileLinkRecursiveInterconnect_2.io_out_3_grant_bits_client_xact_id <= PRCI_1.io_tl_grant_bits_client_xact_id
    TileLinkRecursiveInterconnect_2.io_out_3_grant_bits_manager_xact_id <= PRCI_1.io_tl_grant_bits_manager_xact_id
    TileLinkRecursiveInterconnect_2.io_out_3_grant_bits_is_builtin_type <= PRCI_1.io_tl_grant_bits_is_builtin_type
    TileLinkRecursiveInterconnect_2.io_out_3_grant_bits_g_type <= PRCI_1.io_tl_grant_bits_g_type
    TileLinkRecursiveInterconnect_2.io_out_3_grant_bits_data <= PRCI_1.io_tl_grant_bits_data
    PLIC_1.io_devices_0_valid <= LevelGateway_2.io_plic_valid
    PLIC_1.io_devices_1_valid <= LevelGateway_1_1.io_plic_valid
    PLIC_1.io_tl_acquire_valid <= TileLinkRecursiveInterconnect_2.io_out_2_acquire_valid
    PLIC_1.io_tl_acquire_bits_addr_block <= TileLinkRecursiveInterconnect_2.io_out_2_acquire_bits_addr_block
    PLIC_1.io_tl_acquire_bits_client_xact_id <= TileLinkRecursiveInterconnect_2.io_out_2_acquire_bits_client_xact_id
    PLIC_1.io_tl_acquire_bits_addr_beat <= TileLinkRecursiveInterconnect_2.io_out_2_acquire_bits_addr_beat
    PLIC_1.io_tl_acquire_bits_is_builtin_type <= TileLinkRecursiveInterconnect_2.io_out_2_acquire_bits_is_builtin_type
    PLIC_1.io_tl_acquire_bits_a_type <= TileLinkRecursiveInterconnect_2.io_out_2_acquire_bits_a_type
    PLIC_1.io_tl_acquire_bits_union <= TileLinkRecursiveInterconnect_2.io_out_2_acquire_bits_union
    PLIC_1.io_tl_acquire_bits_data <= TileLinkRecursiveInterconnect_2.io_out_2_acquire_bits_data
    PLIC_1.io_tl_grant_ready <= TileLinkRecursiveInterconnect_2.io_out_2_grant_ready
    LevelGateway_2.io_interrupt <= io_interrupts_0
    LevelGateway_2.io_plic_ready <= PLIC_1.io_devices_0_ready
    LevelGateway_2.io_plic_complete <= PLIC_1.io_devices_0_complete
    LevelGateway_1_1.io_interrupt <= io_interrupts_1
    LevelGateway_1_1.io_plic_ready <= PLIC_1.io_devices_1_ready
    LevelGateway_1_1.io_plic_complete <= PLIC_1.io_devices_1_complete
    DebugModule_1.io_db_req_valid <= io_debug_req_valid
    DebugModule_1.io_db_req_bits_addr <= io_debug_req_bits_addr
    DebugModule_1.io_db_req_bits_data <= io_debug_req_bits_data
    DebugModule_1.io_db_req_bits_op <= io_debug_req_bits_op
    DebugModule_1.io_db_resp_ready <= io_debug_resp_ready
    DebugModule_1.io_tl_acquire_valid <= TileLinkRecursiveInterconnect_2.io_out_0_acquire_valid
    DebugModule_1.io_tl_acquire_bits_addr_block <= TileLinkRecursiveInterconnect_2.io_out_0_acquire_bits_addr_block
    DebugModule_1.io_tl_acquire_bits_client_xact_id <= TileLinkRecursiveInterconnect_2.io_out_0_acquire_bits_client_xact_id
    DebugModule_1.io_tl_acquire_bits_addr_beat <= TileLinkRecursiveInterconnect_2.io_out_0_acquire_bits_addr_beat
    DebugModule_1.io_tl_acquire_bits_is_builtin_type <= TileLinkRecursiveInterconnect_2.io_out_0_acquire_bits_is_builtin_type
    DebugModule_1.io_tl_acquire_bits_a_type <= TileLinkRecursiveInterconnect_2.io_out_0_acquire_bits_a_type
    DebugModule_1.io_tl_acquire_bits_union <= TileLinkRecursiveInterconnect_2.io_out_0_acquire_bits_union
    DebugModule_1.io_tl_acquire_bits_data <= TileLinkRecursiveInterconnect_2.io_out_0_acquire_bits_data
    DebugModule_1.io_tl_grant_ready <= TileLinkRecursiveInterconnect_2.io_out_0_grant_ready
    PRCI_1.io_interrupts_0_meip <= PLIC_1.io_harts_0
    PRCI_1.io_interrupts_0_seip <= PLIC_1.io_harts_1
    PRCI_1.io_interrupts_0_debug <= DebugModule_1.io_debugInterrupts_0
    PRCI_1.io_tl_acquire_valid <= TileLinkRecursiveInterconnect_2.io_out_3_acquire_valid
    PRCI_1.io_tl_acquire_bits_addr_block <= TileLinkRecursiveInterconnect_2.io_out_3_acquire_bits_addr_block
    PRCI_1.io_tl_acquire_bits_client_xact_id <= TileLinkRecursiveInterconnect_2.io_out_3_acquire_bits_client_xact_id
    PRCI_1.io_tl_acquire_bits_addr_beat <= TileLinkRecursiveInterconnect_2.io_out_3_acquire_bits_addr_beat
    PRCI_1.io_tl_acquire_bits_is_builtin_type <= TileLinkRecursiveInterconnect_2.io_out_3_acquire_bits_is_builtin_type
    PRCI_1.io_tl_acquire_bits_a_type <= TileLinkRecursiveInterconnect_2.io_out_3_acquire_bits_a_type
    PRCI_1.io_tl_acquire_bits_union <= TileLinkRecursiveInterconnect_2.io_out_3_acquire_bits_union
    PRCI_1.io_tl_acquire_bits_data <= TileLinkRecursiveInterconnect_2.io_out_3_acquire_bits_data
    PRCI_1.io_tl_grant_ready <= TileLinkRecursiveInterconnect_2.io_out_3_grant_ready
    PRCI_1.io_rtcTick <= io_rtcTick
    ROMSlave_1.io_acquire_valid <= TileLinkRecursiveInterconnect_2.io_out_1_acquire_valid
    ROMSlave_1.io_acquire_bits_addr_block <= TileLinkRecursiveInterconnect_2.io_out_1_acquire_bits_addr_block
    ROMSlave_1.io_acquire_bits_client_xact_id <= TileLinkRecursiveInterconnect_2.io_out_1_acquire_bits_client_xact_id
    ROMSlave_1.io_acquire_bits_addr_beat <= TileLinkRecursiveInterconnect_2.io_out_1_acquire_bits_addr_beat
    ROMSlave_1.io_acquire_bits_is_builtin_type <= TileLinkRecursiveInterconnect_2.io_out_1_acquire_bits_is_builtin_type
    ROMSlave_1.io_acquire_bits_a_type <= TileLinkRecursiveInterconnect_2.io_out_1_acquire_bits_a_type
    ROMSlave_1.io_acquire_bits_union <= TileLinkRecursiveInterconnect_2.io_out_1_acquire_bits_union
    ROMSlave_1.io_acquire_bits_data <= TileLinkRecursiveInterconnect_2.io_out_1_acquire_bits_data
    ROMSlave_1.io_grant_ready <= TileLinkRecursiveInterconnect_2.io_out_1_grant_ready

  module ReorderQueue_2 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_data_addr_beat : UInt<3>
    input io_enq_bits_data_subblock : UInt<1>
    input io_enq_bits_tag : UInt<4>
    input io_deq_valid : UInt<1>
    input io_deq_tag : UInt<4>
    output io_deq_data_addr_beat : UInt<3>
    output io_deq_data_subblock : UInt<1>
    output io_deq_matches : UInt<1>
  
    mem T_229_addr_beat :
      data-type => UInt<3>
      depth => 16
      read-latency => 0
      write-latency => 1
      reader => T_257
      writer => T_283
      read-under-write => undefined
    T_229_addr_beat.T_257.en <= UInt<1>("h1")
    T_229_addr_beat.T_257.addr <= io_deq_tag
    T_229_addr_beat.T_283.en <= T_282
    T_229_addr_beat.T_283.mask <= T_282
    T_229_addr_beat.T_283.addr <= io_enq_bits_tag
    T_229_addr_beat.T_283.data <= io_enq_bits_data_addr_beat
    mem T_229_subblock :
      data-type => UInt<1>
      depth => 16
      read-latency => 0
      write-latency => 1
      reader => T_257
      writer => T_283
      read-under-write => undefined
    T_229_subblock.T_257.en <= UInt<1>("h1")
    T_229_subblock.T_257.addr <= io_deq_tag
    T_229_subblock.T_283.en <= T_282
    T_229_subblock.T_283.mask <= T_282
    T_229_subblock.T_283.addr <= io_enq_bits_tag
    T_229_subblock.T_283.data <= io_enq_bits_data_subblock
    wire T_251_0 : UInt<1>
    wire T_251_1 : UInt<1>
    wire T_251_2 : UInt<1>
    wire T_251_3 : UInt<1>
    wire T_251_4 : UInt<1>
    wire T_251_5 : UInt<1>
    wire T_251_6 : UInt<1>
    wire T_251_7 : UInt<1>
    wire T_251_8 : UInt<1>
    wire T_251_9 : UInt<1>
    wire T_251_10 : UInt<1>
    wire T_251_11 : UInt<1>
    wire T_251_12 : UInt<1>
    wire T_251_13 : UInt<1>
    wire T_251_14 : UInt<1>
    wire T_251_15 : UInt<1>
    reg T_255_0 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_1 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_2 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_3 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_4 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_5 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_6 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_7 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_8 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_9 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_10 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_11 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_12 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_13 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_14 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    reg T_255_15 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h1"))
    wire GEN_0 : UInt<1>
    node GEN_4 = mux(eq(UInt<4>("h1"), io_enq_bits_tag), T_255_1, T_255_0)
    node GEN_5 = mux(eq(UInt<4>("h2"), io_enq_bits_tag), T_255_2, GEN_4)
    node GEN_6 = mux(eq(UInt<4>("h3"), io_enq_bits_tag), T_255_3, GEN_5)
    node GEN_7 = mux(eq(UInt<4>("h4"), io_enq_bits_tag), T_255_4, GEN_6)
    node GEN_8 = mux(eq(UInt<4>("h5"), io_enq_bits_tag), T_255_5, GEN_7)
    node GEN_9 = mux(eq(UInt<4>("h6"), io_enq_bits_tag), T_255_6, GEN_8)
    node GEN_10 = mux(eq(UInt<4>("h7"), io_enq_bits_tag), T_255_7, GEN_9)
    node GEN_11 = mux(eq(UInt<4>("h8"), io_enq_bits_tag), T_255_8, GEN_10)
    node GEN_12 = mux(eq(UInt<4>("h9"), io_enq_bits_tag), T_255_9, GEN_11)
    node GEN_13 = mux(eq(UInt<4>("ha"), io_enq_bits_tag), T_255_10, GEN_12)
    node GEN_14 = mux(eq(UInt<4>("hb"), io_enq_bits_tag), T_255_11, GEN_13)
    node GEN_15 = mux(eq(UInt<4>("hc"), io_enq_bits_tag), T_255_12, GEN_14)
    node GEN_16 = mux(eq(UInt<4>("hd"), io_enq_bits_tag), T_255_13, GEN_15)
    node GEN_17 = mux(eq(UInt<4>("he"), io_enq_bits_tag), T_255_14, GEN_16)
    node GEN_18 = mux(eq(UInt<4>("hf"), io_enq_bits_tag), T_255_15, GEN_17)
    wire GEN_1 : UInt<1>
    node GEN_19 = mux(eq(UInt<4>("h1"), io_deq_tag), T_255_1, T_255_0)
    node GEN_20 = mux(eq(UInt<4>("h2"), io_deq_tag), T_255_2, GEN_19)
    node GEN_21 = mux(eq(UInt<4>("h3"), io_deq_tag), T_255_3, GEN_20)
    node GEN_22 = mux(eq(UInt<4>("h4"), io_deq_tag), T_255_4, GEN_21)
    node GEN_23 = mux(eq(UInt<4>("h5"), io_deq_tag), T_255_5, GEN_22)
    node GEN_24 = mux(eq(UInt<4>("h6"), io_deq_tag), T_255_6, GEN_23)
    node GEN_25 = mux(eq(UInt<4>("h7"), io_deq_tag), T_255_7, GEN_24)
    node GEN_26 = mux(eq(UInt<4>("h8"), io_deq_tag), T_255_8, GEN_25)
    node GEN_27 = mux(eq(UInt<4>("h9"), io_deq_tag), T_255_9, GEN_26)
    node GEN_28 = mux(eq(UInt<4>("ha"), io_deq_tag), T_255_10, GEN_27)
    node GEN_29 = mux(eq(UInt<4>("hb"), io_deq_tag), T_255_11, GEN_28)
    node GEN_30 = mux(eq(UInt<4>("hc"), io_deq_tag), T_255_12, GEN_29)
    node GEN_31 = mux(eq(UInt<4>("hd"), io_deq_tag), T_255_13, GEN_30)
    node GEN_32 = mux(eq(UInt<4>("he"), io_deq_tag), T_255_14, GEN_31)
    node GEN_33 = mux(eq(UInt<4>("hf"), io_deq_tag), T_255_15, GEN_32)
    node T_281 = eq(GEN_1, UInt<1>("h0"))
    node T_282 = and(io_enq_valid, io_enq_ready)
    wire GEN_2 : UInt<1>
    node GEN_34 = mux(eq(UInt<4>("h0"), io_enq_bits_tag), UInt<1>("h0"), T_255_0)
    node GEN_35 = mux(eq(UInt<4>("h1"), io_enq_bits_tag), UInt<1>("h0"), T_255_1)
    node GEN_36 = mux(eq(UInt<4>("h2"), io_enq_bits_tag), UInt<1>("h0"), T_255_2)
    node GEN_37 = mux(eq(UInt<4>("h3"), io_enq_bits_tag), UInt<1>("h0"), T_255_3)
    node GEN_38 = mux(eq(UInt<4>("h4"), io_enq_bits_tag), UInt<1>("h0"), T_255_4)
    node GEN_39 = mux(eq(UInt<4>("h5"), io_enq_bits_tag), UInt<1>("h0"), T_255_5)
    node GEN_40 = mux(eq(UInt<4>("h6"), io_enq_bits_tag), UInt<1>("h0"), T_255_6)
    node GEN_41 = mux(eq(UInt<4>("h7"), io_enq_bits_tag), UInt<1>("h0"), T_255_7)
    node GEN_42 = mux(eq(UInt<4>("h8"), io_enq_bits_tag), UInt<1>("h0"), T_255_8)
    node GEN_43 = mux(eq(UInt<4>("h9"), io_enq_bits_tag), UInt<1>("h0"), T_255_9)
    node GEN_44 = mux(eq(UInt<4>("ha"), io_enq_bits_tag), UInt<1>("h0"), T_255_10)
    node GEN_45 = mux(eq(UInt<4>("hb"), io_enq_bits_tag), UInt<1>("h0"), T_255_11)
    node GEN_46 = mux(eq(UInt<4>("hc"), io_enq_bits_tag), UInt<1>("h0"), T_255_12)
    node GEN_47 = mux(eq(UInt<4>("hd"), io_enq_bits_tag), UInt<1>("h0"), T_255_13)
    node GEN_48 = mux(eq(UInt<4>("he"), io_enq_bits_tag), UInt<1>("h0"), T_255_14)
    node GEN_49 = mux(eq(UInt<4>("hf"), io_enq_bits_tag), UInt<1>("h0"), T_255_15)
    node GEN_55 = mux(T_282, GEN_34, T_255_0)
    node GEN_56 = mux(T_282, GEN_35, T_255_1)
    node GEN_57 = mux(T_282, GEN_36, T_255_2)
    node GEN_58 = mux(T_282, GEN_37, T_255_3)
    node GEN_59 = mux(T_282, GEN_38, T_255_4)
    node GEN_60 = mux(T_282, GEN_39, T_255_5)
    node GEN_61 = mux(T_282, GEN_40, T_255_6)
    node GEN_62 = mux(T_282, GEN_41, T_255_7)
    node GEN_63 = mux(T_282, GEN_42, T_255_8)
    node GEN_64 = mux(T_282, GEN_43, T_255_9)
    node GEN_65 = mux(T_282, GEN_44, T_255_10)
    node GEN_66 = mux(T_282, GEN_45, T_255_11)
    node GEN_67 = mux(T_282, GEN_46, T_255_12)
    node GEN_68 = mux(T_282, GEN_47, T_255_13)
    node GEN_69 = mux(T_282, GEN_48, T_255_14)
    node GEN_70 = mux(T_282, GEN_49, T_255_15)
    wire GEN_3 : UInt<1>
    node GEN_71 = mux(eq(UInt<4>("h0"), io_deq_tag), UInt<1>("h1"), GEN_55)
    node GEN_72 = mux(eq(UInt<4>("h1"), io_deq_tag), UInt<1>("h1"), GEN_56)
    node GEN_73 = mux(eq(UInt<4>("h2"), io_deq_tag), UInt<1>("h1"), GEN_57)
    node GEN_74 = mux(eq(UInt<4>("h3"), io_deq_tag), UInt<1>("h1"), GEN_58)
    node GEN_75 = mux(eq(UInt<4>("h4"), io_deq_tag), UInt<1>("h1"), GEN_59)
    node GEN_76 = mux(eq(UInt<4>("h5"), io_deq_tag), UInt<1>("h1"), GEN_60)
    node GEN_77 = mux(eq(UInt<4>("h6"), io_deq_tag), UInt<1>("h1"), GEN_61)
    node GEN_78 = mux(eq(UInt<4>("h7"), io_deq_tag), UInt<1>("h1"), GEN_62)
    node GEN_79 = mux(eq(UInt<4>("h8"), io_deq_tag), UInt<1>("h1"), GEN_63)
    node GEN_80 = mux(eq(UInt<4>("h9"), io_deq_tag), UInt<1>("h1"), GEN_64)
    node GEN_81 = mux(eq(UInt<4>("ha"), io_deq_tag), UInt<1>("h1"), GEN_65)
    node GEN_82 = mux(eq(UInt<4>("hb"), io_deq_tag), UInt<1>("h1"), GEN_66)
    node GEN_83 = mux(eq(UInt<4>("hc"), io_deq_tag), UInt<1>("h1"), GEN_67)
    node GEN_84 = mux(eq(UInt<4>("hd"), io_deq_tag), UInt<1>("h1"), GEN_68)
    node GEN_85 = mux(eq(UInt<4>("he"), io_deq_tag), UInt<1>("h1"), GEN_69)
    node GEN_86 = mux(eq(UInt<4>("hf"), io_deq_tag), UInt<1>("h1"), GEN_70)
    node GEN_87 = mux(io_deq_valid, GEN_71, GEN_55)
    node GEN_88 = mux(io_deq_valid, GEN_72, GEN_56)
    node GEN_89 = mux(io_deq_valid, GEN_73, GEN_57)
    node GEN_90 = mux(io_deq_valid, GEN_74, GEN_58)
    node GEN_91 = mux(io_deq_valid, GEN_75, GEN_59)
    node GEN_92 = mux(io_deq_valid, GEN_76, GEN_60)
    node GEN_93 = mux(io_deq_valid, GEN_77, GEN_61)
    node GEN_94 = mux(io_deq_valid, GEN_78, GEN_62)
    node GEN_95 = mux(io_deq_valid, GEN_79, GEN_63)
    node GEN_96 = mux(io_deq_valid, GEN_80, GEN_64)
    node GEN_97 = mux(io_deq_valid, GEN_81, GEN_65)
    node GEN_98 = mux(io_deq_valid, GEN_82, GEN_66)
    node GEN_99 = mux(io_deq_valid, GEN_83, GEN_67)
    node GEN_100 = mux(io_deq_valid, GEN_84, GEN_68)
    node GEN_101 = mux(io_deq_valid, GEN_85, GEN_69)
    node GEN_102 = mux(io_deq_valid, GEN_86, GEN_70)
    io_enq_ready <= GEN_0
    io_deq_data_addr_beat <= T_229_addr_beat.T_257.data
    io_deq_data_subblock <= T_229_subblock.T_257.data
    io_deq_matches <= T_281
    T_255_0 <= GEN_87
    T_255_1 <= GEN_88
    T_255_2 <= GEN_89
    T_255_3 <= GEN_90
    T_255_4 <= GEN_91
    T_255_5 <= GEN_92
    T_255_6 <= GEN_93
    T_255_7 <= GEN_94
    T_255_8 <= GEN_95
    T_255_9 <= GEN_96
    T_255_10 <= GEN_97
    T_255_11 <= GEN_98
    T_255_12 <= GEN_99
    T_255_13 <= GEN_100
    T_255_14 <= GEN_101
    T_255_15 <= GEN_102
    GEN_0 <= GEN_18
    GEN_1 <= GEN_33

  module IdMapper :
    input clk : Clock
    input reset : UInt<1>
    input io_req_valid : UInt<1>
    output io_req_ready : UInt<1>
    input io_req_in_id : UInt<4>
    output io_req_out_id : UInt<5>
    input io_resp_valid : UInt<1>
    output io_resp_matches : UInt<1>
    input io_resp_out_id : UInt<5>
    output io_resp_in_id : UInt<4>
  
    io_req_ready <= UInt<1>("h1")
    io_req_out_id <= pad(io_req_in_id, 5)
    io_resp_matches <= UInt<1>("h1")
    io_resp_in_id <= bits(io_resp_out_id, 3, 0)

  module LockingArbiter :
    input clk : Clock
    input reset : UInt<1>
    output io_in_0_ready : UInt<1>
    input io_in_0_valid : UInt<1>
    input io_in_0_bits_addr_beat : UInt<3>
    input io_in_0_bits_client_xact_id : UInt<4>
    input io_in_0_bits_manager_xact_id : UInt<1>
    input io_in_0_bits_is_builtin_type : UInt<1>
    input io_in_0_bits_g_type : UInt<4>
    input io_in_0_bits_data : UInt<64>
    input io_in_0_bits_client_id : UInt<1>
    output io_in_1_ready : UInt<1>
    input io_in_1_valid : UInt<1>
    input io_in_1_bits_addr_beat : UInt<3>
    input io_in_1_bits_client_xact_id : UInt<4>
    input io_in_1_bits_manager_xact_id : UInt<1>
    input io_in_1_bits_is_builtin_type : UInt<1>
    input io_in_1_bits_g_type : UInt<4>
    input io_in_1_bits_data : UInt<64>
    input io_in_1_bits_client_id : UInt<1>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits_addr_beat : UInt<3>
    output io_out_bits_client_xact_id : UInt<4>
    output io_out_bits_manager_xact_id : UInt<1>
    output io_out_bits_is_builtin_type : UInt<1>
    output io_out_bits_g_type : UInt<4>
    output io_out_bits_data : UInt<64>
    output io_out_bits_client_id : UInt<1>
    output io_chosen : UInt<1>
  
    wire choice : UInt<1>
    wire GEN_0_ready : UInt<1>
    wire GEN_0_valid : UInt<1>
    wire GEN_0_bits_addr_beat : UInt<3>
    wire GEN_0_bits_client_xact_id : UInt<4>
    wire GEN_0_bits_manager_xact_id : UInt<1>
    wire GEN_0_bits_is_builtin_type : UInt<1>
    wire GEN_0_bits_g_type : UInt<4>
    wire GEN_0_bits_data : UInt<64>
    wire GEN_0_bits_client_id : UInt<1>
    node GEN_8 = mux(io_chosen, io_in_1_ready, io_in_0_ready)
    node GEN_9 = mux(io_chosen, io_in_1_valid, io_in_0_valid)
    node GEN_10 = mux(io_chosen, io_in_1_bits_addr_beat, io_in_0_bits_addr_beat)
    node GEN_11 = mux(io_chosen, io_in_1_bits_client_xact_id, io_in_0_bits_client_xact_id)
    node GEN_12 = mux(io_chosen, io_in_1_bits_manager_xact_id, io_in_0_bits_manager_xact_id)
    node GEN_13 = mux(io_chosen, io_in_1_bits_is_builtin_type, io_in_0_bits_is_builtin_type)
    node GEN_14 = mux(io_chosen, io_in_1_bits_g_type, io_in_0_bits_g_type)
    node GEN_15 = mux(io_chosen, io_in_1_bits_data, io_in_0_bits_data)
    node GEN_16 = mux(io_chosen, io_in_1_bits_client_id, io_in_0_bits_client_id)
    wire GEN_1_ready : UInt<1>
    wire GEN_1_valid : UInt<1>
    wire GEN_1_bits_addr_beat : UInt<3>
    wire GEN_1_bits_client_xact_id : UInt<4>
    wire GEN_1_bits_manager_xact_id : UInt<1>
    wire GEN_1_bits_is_builtin_type : UInt<1>
    wire GEN_1_bits_g_type : UInt<4>
    wire GEN_1_bits_data : UInt<64>
    wire GEN_1_bits_client_id : UInt<1>
    wire GEN_2_ready : UInt<1>
    wire GEN_2_valid : UInt<1>
    wire GEN_2_bits_addr_beat : UInt<3>
    wire GEN_2_bits_client_xact_id : UInt<4>
    wire GEN_2_bits_manager_xact_id : UInt<1>
    wire GEN_2_bits_is_builtin_type : UInt<1>
    wire GEN_2_bits_g_type : UInt<4>
    wire GEN_2_bits_data : UInt<64>
    wire GEN_2_bits_client_id : UInt<1>
    wire GEN_3_ready : UInt<1>
    wire GEN_3_valid : UInt<1>
    wire GEN_3_bits_addr_beat : UInt<3>
    wire GEN_3_bits_client_xact_id : UInt<4>
    wire GEN_3_bits_manager_xact_id : UInt<1>
    wire GEN_3_bits_is_builtin_type : UInt<1>
    wire GEN_3_bits_g_type : UInt<4>
    wire GEN_3_bits_data : UInt<64>
    wire GEN_3_bits_client_id : UInt<1>
    wire GEN_4_ready : UInt<1>
    wire GEN_4_valid : UInt<1>
    wire GEN_4_bits_addr_beat : UInt<3>
    wire GEN_4_bits_client_xact_id : UInt<4>
    wire GEN_4_bits_manager_xact_id : UInt<1>
    wire GEN_4_bits_is_builtin_type : UInt<1>
    wire GEN_4_bits_g_type : UInt<4>
    wire GEN_4_bits_data : UInt<64>
    wire GEN_4_bits_client_id : UInt<1>
    wire GEN_5_ready : UInt<1>
    wire GEN_5_valid : UInt<1>
    wire GEN_5_bits_addr_beat : UInt<3>
    wire GEN_5_bits_client_xact_id : UInt<4>
    wire GEN_5_bits_manager_xact_id : UInt<1>
    wire GEN_5_bits_is_builtin_type : UInt<1>
    wire GEN_5_bits_g_type : UInt<4>
    wire GEN_5_bits_data : UInt<64>
    wire GEN_5_bits_client_id : UInt<1>
    wire GEN_6_ready : UInt<1>
    wire GEN_6_valid : UInt<1>
    wire GEN_6_bits_addr_beat : UInt<3>
    wire GEN_6_bits_client_xact_id : UInt<4>
    wire GEN_6_bits_manager_xact_id : UInt<1>
    wire GEN_6_bits_is_builtin_type : UInt<1>
    wire GEN_6_bits_g_type : UInt<4>
    wire GEN_6_bits_data : UInt<64>
    wire GEN_6_bits_client_id : UInt<1>
    wire GEN_7_ready : UInt<1>
    wire GEN_7_valid : UInt<1>
    wire GEN_7_bits_addr_beat : UInt<3>
    wire GEN_7_bits_client_xact_id : UInt<4>
    wire GEN_7_bits_manager_xact_id : UInt<1>
    wire GEN_7_bits_is_builtin_type : UInt<1>
    wire GEN_7_bits_g_type : UInt<4>
    wire GEN_7_bits_data : UInt<64>
    wire GEN_7_bits_client_id : UInt<1>
    reg T_766 : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    reg T_768 : UInt<1>, clk with :
      reset => (UInt<1>("h0"), T_768)
    node T_770 = neq(T_766, UInt<3>("h0"))
    wire T_778_0 : UInt<3>
    node GEN_0 = pad(UInt<3>("h5"), 4)
    node T_780 = eq(io_out_bits_g_type, GEN_0)
    node T_781 = eq(io_out_bits_g_type, UInt<4>("h0"))
    node T_782 = mux(io_out_bits_is_builtin_type, T_780, T_781)
    node T_784 = and(io_out_ready, io_out_valid)
    node T_785 = and(T_784, T_782)
    node T_789 = add(T_766, UInt<3>("h1"))
    node T_790 = tail(T_789, 1)
    node GEN_17 = mux(T_785, io_chosen, T_768)
    node GEN_18 = mux(T_785, T_790, T_766)
    node GEN_19 = mux(T_770, T_768, choice)
    node T_793 = eq(io_in_0_valid, UInt<1>("h0"))
    node T_795 = eq(T_768, UInt<1>("h0"))
    node T_796 = mux(T_770, T_795, UInt<1>("h1"))
    node T_797 = and(T_796, io_out_ready)
    node T_800 = mux(T_770, T_768, T_793)
    node T_801 = and(T_800, io_out_ready)
    node GEN_20 = mux(io_in_0_valid, UInt<1>("h0"), UInt<1>("h1"))
    io_in_0_ready <= T_797
    io_in_1_ready <= T_801
    io_out_valid <= GEN_0_valid
    io_out_bits_addr_beat <= GEN_1_bits_addr_beat
    io_out_bits_client_xact_id <= GEN_2_bits_client_xact_id
    io_out_bits_manager_xact_id <= GEN_3_bits_manager_xact_id
    io_out_bits_is_builtin_type <= GEN_4_bits_is_builtin_type
    io_out_bits_g_type <= GEN_5_bits_g_type
    io_out_bits_data <= GEN_6_bits_data
    io_out_bits_client_id <= GEN_7_bits_client_id
    io_chosen <= GEN_19
    choice <= GEN_20
    GEN_0_ready <= GEN_8
    GEN_0_valid <= GEN_9
    GEN_0_bits_addr_beat <= GEN_10
    GEN_0_bits_client_xact_id <= GEN_11
    GEN_0_bits_manager_xact_id <= GEN_12
    GEN_0_bits_is_builtin_type <= GEN_13
    GEN_0_bits_g_type <= GEN_14
    GEN_0_bits_data <= GEN_15
    GEN_0_bits_client_id <= GEN_16
    GEN_1_ready <= GEN_8
    GEN_1_valid <= GEN_9
    GEN_1_bits_addr_beat <= GEN_10
    GEN_1_bits_client_xact_id <= GEN_11
    GEN_1_bits_manager_xact_id <= GEN_12
    GEN_1_bits_is_builtin_type <= GEN_13
    GEN_1_bits_g_type <= GEN_14
    GEN_1_bits_data <= GEN_15
    GEN_1_bits_client_id <= GEN_16
    GEN_2_ready <= GEN_8
    GEN_2_valid <= GEN_9
    GEN_2_bits_addr_beat <= GEN_10
    GEN_2_bits_client_xact_id <= GEN_11
    GEN_2_bits_manager_xact_id <= GEN_12
    GEN_2_bits_is_builtin_type <= GEN_13
    GEN_2_bits_g_type <= GEN_14
    GEN_2_bits_data <= GEN_15
    GEN_2_bits_client_id <= GEN_16
    GEN_3_ready <= GEN_8
    GEN_3_valid <= GEN_9
    GEN_3_bits_addr_beat <= GEN_10
    GEN_3_bits_client_xact_id <= GEN_11
    GEN_3_bits_manager_xact_id <= GEN_12
    GEN_3_bits_is_builtin_type <= GEN_13
    GEN_3_bits_g_type <= GEN_14
    GEN_3_bits_data <= GEN_15
    GEN_3_bits_client_id <= GEN_16
    GEN_4_ready <= GEN_8
    GEN_4_valid <= GEN_9
    GEN_4_bits_addr_beat <= GEN_10
    GEN_4_bits_client_xact_id <= GEN_11
    GEN_4_bits_manager_xact_id <= GEN_12
    GEN_4_bits_is_builtin_type <= GEN_13
    GEN_4_bits_g_type <= GEN_14
    GEN_4_bits_data <= GEN_15
    GEN_4_bits_client_id <= GEN_16
    GEN_5_ready <= GEN_8
    GEN_5_valid <= GEN_9
    GEN_5_bits_addr_beat <= GEN_10
    GEN_5_bits_client_xact_id <= GEN_11
    GEN_5_bits_manager_xact_id <= GEN_12
    GEN_5_bits_is_builtin_type <= GEN_13
    GEN_5_bits_g_type <= GEN_14
    GEN_5_bits_data <= GEN_15
    GEN_5_bits_client_id <= GEN_16
    GEN_6_ready <= GEN_8
    GEN_6_valid <= GEN_9
    GEN_6_bits_addr_beat <= GEN_10
    GEN_6_bits_client_xact_id <= GEN_11
    GEN_6_bits_manager_xact_id <= GEN_12
    GEN_6_bits_is_builtin_type <= GEN_13
    GEN_6_bits_g_type <= GEN_14
    GEN_6_bits_data <= GEN_15
    GEN_6_bits_client_id <= GEN_16
    GEN_7_ready <= GEN_8
    GEN_7_valid <= GEN_9
    GEN_7_bits_addr_beat <= GEN_10
    GEN_7_bits_client_xact_id <= GEN_11
    GEN_7_bits_manager_xact_id <= GEN_12
    GEN_7_bits_is_builtin_type <= GEN_13
    GEN_7_bits_g_type <= GEN_14
    GEN_7_bits_data <= GEN_15
    GEN_7_bits_client_id <= GEN_16
    T_766 <= GEN_18
    T_768 <= GEN_17

  module NastiIOTileLinkIOConverter :
    input clk : Clock
    input reset : UInt<1>
    output io_tl_acquire_ready : UInt<1>
    input io_tl_acquire_valid : UInt<1>
    input io_tl_acquire_bits_addr_block : UInt<26>
    input io_tl_acquire_bits_client_xact_id : UInt<4>
    input io_tl_acquire_bits_addr_beat : UInt<3>
    input io_tl_acquire_bits_is_builtin_type : UInt<1>
    input io_tl_acquire_bits_a_type : UInt<3>
    input io_tl_acquire_bits_union : UInt<11>
    input io_tl_acquire_bits_data : UInt<64>
    input io_tl_grant_ready : UInt<1>
    output io_tl_grant_valid : UInt<1>
    output io_tl_grant_bits_addr_beat : UInt<3>
    output io_tl_grant_bits_client_xact_id : UInt<4>
    output io_tl_grant_bits_manager_xact_id : UInt<1>
    output io_tl_grant_bits_is_builtin_type : UInt<1>
    output io_tl_grant_bits_g_type : UInt<4>
    output io_tl_grant_bits_data : UInt<64>
    input io_nasti_aw_ready : UInt<1>
    output io_nasti_aw_valid : UInt<1>
    output io_nasti_aw_bits_addr : UInt<32>
    output io_nasti_aw_bits_len : UInt<8>
    output io_nasti_aw_bits_size : UInt<3>
    output io_nasti_aw_bits_burst : UInt<2>
    output io_nasti_aw_bits_lock : UInt<1>
    output io_nasti_aw_bits_cache : UInt<4>
    output io_nasti_aw_bits_prot : UInt<3>
    output io_nasti_aw_bits_qos : UInt<4>
    output io_nasti_aw_bits_region : UInt<4>
    output io_nasti_aw_bits_id : UInt<5>
    output io_nasti_aw_bits_user : UInt<1>
    input io_nasti_w_ready : UInt<1>
    output io_nasti_w_valid : UInt<1>
    output io_nasti_w_bits_data : UInt<64>
    output io_nasti_w_bits_last : UInt<1>
    output io_nasti_w_bits_id : UInt<5>
    output io_nasti_w_bits_strb : UInt<8>
    output io_nasti_w_bits_user : UInt<1>
    output io_nasti_b_ready : UInt<1>
    input io_nasti_b_valid : UInt<1>
    input io_nasti_b_bits_resp : UInt<2>
    input io_nasti_b_bits_id : UInt<5>
    input io_nasti_b_bits_user : UInt<1>
    input io_nasti_ar_ready : UInt<1>
    output io_nasti_ar_valid : UInt<1>
    output io_nasti_ar_bits_addr : UInt<32>
    output io_nasti_ar_bits_len : UInt<8>
    output io_nasti_ar_bits_size : UInt<3>
    output io_nasti_ar_bits_burst : UInt<2>
    output io_nasti_ar_bits_lock : UInt<1>
    output io_nasti_ar_bits_cache : UInt<4>
    output io_nasti_ar_bits_prot : UInt<3>
    output io_nasti_ar_bits_qos : UInt<4>
    output io_nasti_ar_bits_region : UInt<4>
    output io_nasti_ar_bits_id : UInt<5>
    output io_nasti_ar_bits_user : UInt<1>
    output io_nasti_r_ready : UInt<1>
    input io_nasti_r_valid : UInt<1>
    input io_nasti_r_bits_resp : UInt<2>
    input io_nasti_r_bits_data : UInt<64>
    input io_nasti_r_bits_last : UInt<1>
    input io_nasti_r_bits_id : UInt<5>
    input io_nasti_r_bits_user : UInt<1>
  
    wire T_688_0 : UInt<3>
    wire T_688_1 : UInt<3>
    wire T_688_2 : UInt<3>
    node T_690 = eq(io_tl_acquire_bits_a_type, UInt<3>("h2"))
    node T_691 = eq(io_tl_acquire_bits_a_type, UInt<3>("h3"))
    node T_692 = eq(io_tl_acquire_bits_a_type, UInt<3>("h4"))
    node T_693 = or(T_690, T_691)
    node T_694 = or(T_693, T_692)
    node has_data = and(io_tl_acquire_bits_is_builtin_type, T_694)
    wire T_703_0 : UInt<3>
    wire T_703_1 : UInt<3>
    wire T_703_2 : UInt<3>
    node T_705 = eq(io_tl_acquire_bits_a_type, UInt<3>("h2"))
    node T_706 = eq(io_tl_acquire_bits_a_type, UInt<3>("h0"))
    node T_707 = eq(io_tl_acquire_bits_a_type, UInt<3>("h4"))
    node T_708 = or(T_705, T_706)
    node T_709 = or(T_708, T_707)
    node is_subblock = and(io_tl_acquire_bits_is_builtin_type, T_709)
    wire T_718_0 : UInt<3>
    node T_720 = eq(io_tl_acquire_bits_a_type, UInt<3>("h3"))
    node is_multibeat = and(io_tl_acquire_bits_is_builtin_type, T_720)
    node T_721 = and(io_tl_acquire_ready, io_tl_acquire_valid)
    node T_722 = and(T_721, is_multibeat)
    reg tl_cnt_out : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_725 = eq(tl_cnt_out, UInt<3>("h7"))
    node T_727 = add(tl_cnt_out, UInt<3>("h1"))
    node T_728 = tail(T_727, 1)
    node GEN_0 = mux(T_722, T_728, tl_cnt_out)
    node tl_wrap_out = and(T_722, T_725)
    node T_730 = eq(has_data, UInt<1>("h0"))
    node get_valid = and(io_tl_acquire_valid, T_730)
    node put_valid = and(io_tl_acquire_valid, has_data)
    inst roq of ReorderQueue_2
    inst get_id_mapper of IdMapper
    inst put_id_mapper of IdMapper
    node T_755 = eq(io_tl_acquire_bits_addr_beat, UInt<3>("h0"))
    node put_id_mask = or(is_subblock, T_755)
    node T_757 = eq(put_id_mask, UInt<1>("h0"))
    node put_id_ready = or(put_id_mapper.io_req_ready, T_757)
    reg w_inflight : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg w_id_reg : UInt<5>, clk with :
      reset => (reset, UInt<5>("h0"))
    node w_id = mux(w_inflight, w_id_reg, put_id_mapper.io_req_out_id)
    node aw_ready = or(w_inflight, io_nasti_aw_ready)
    node T_760 = and(io_nasti_r_ready, io_nasti_r_valid)
    node T_762 = eq(roq.io_deq_data_subblock, UInt<1>("h0"))
    node T_763 = and(T_760, T_762)
    reg nasti_cnt_out : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_766 = eq(nasti_cnt_out, UInt<3>("h7"))
    node T_768 = add(nasti_cnt_out, UInt<3>("h1"))
    node T_769 = tail(T_768, 1)
    node GEN_1 = mux(T_763, T_769, nasti_cnt_out)
    node nasti_wrap_out = and(T_763, T_766)
    node T_770 = and(get_valid, io_nasti_ar_ready)
    node T_771 = and(T_770, get_id_mapper.io_req_ready)
    node T_773 = or(nasti_wrap_out, roq.io_deq_data_subblock)
    node T_774 = and(T_760, T_773)
    node T_775 = and(get_valid, roq.io_enq_ready)
    node T_776 = and(T_775, io_nasti_ar_ready)
    node T_778 = and(T_760, io_nasti_r_bits_last)
    node T_779 = and(put_valid, aw_ready)
    node T_780 = and(T_779, io_nasti_w_ready)
    node T_781 = and(T_780, put_id_mask)
    node T_782 = and(io_nasti_b_ready, io_nasti_b_valid)
    node T_784 = and(T_775, get_id_mapper.io_req_ready)
    wire T_792_0 : UInt<3>
    wire T_792_1 : UInt<3>
    node T_794 = eq(io_tl_acquire_bits_a_type, UInt<3>("h0"))
    node T_795 = eq(io_tl_acquire_bits_a_type, UInt<3>("h4"))
    node T_796 = or(T_794, T_795)
    node T_797 = and(io_tl_acquire_bits_is_builtin_type, T_796)
    node T_798 = bits(io_tl_acquire_bits_union, 10, 8)
    node T_800 = mux(T_797, T_798, UInt<3>("h0"))
    node T_801 = cat(io_tl_acquire_bits_addr_block, io_tl_acquire_bits_addr_beat)
    node T_802 = cat(T_801, T_800)
    node T_803 = bits(io_tl_acquire_bits_union, 7, 6)
    node T_805 = mux(is_subblock, T_803, UInt<2>("h3"))
    node T_808 = mux(is_subblock, UInt<3>("h0"), UInt<3>("h7"))
    wire T_828_addr : UInt<32>
    wire T_828_len : UInt<8>
    wire T_828_size : UInt<3>
    wire T_828_burst : UInt<2>
    wire T_828_lock : UInt<1>
    wire T_828_cache : UInt<4>
    wire T_828_prot : UInt<3>
    wire T_828_qos : UInt<4>
    wire T_828_region : UInt<4>
    wire T_828_id : UInt<5>
    wire T_828_user : UInt<1>
    node T_847 = eq(io_tl_acquire_bits_a_type, UInt<3>("h4"))
    node T_848 = and(io_tl_acquire_bits_is_builtin_type, T_847)
    node T_872 = eq(io_tl_acquire_bits_a_type, UInt<3>("h3"))
    node T_873 = and(io_tl_acquire_bits_is_builtin_type, T_872)
    node T_875 = eq(io_tl_acquire_bits_a_type, UInt<3>("h2"))
    node T_876 = and(io_tl_acquire_bits_is_builtin_type, T_875)
    node T_877 = or(T_873, T_876)
    node T_878 = bits(io_tl_acquire_bits_union, 8, 1)
    node T_880 = mux(T_877, T_878, UInt<8>("h0"))
    node T_881 = mux(T_848, UInt<8>("hff"), T_880)
    node T_882 = not(T_881)
    node all_inside_0_0 = bits(T_882, 0, 0)
    node all_inside_0_1 = bits(T_882, 1, 1)
    node all_inside_0_2 = bits(T_882, 2, 2)
    node all_inside_0_3 = bits(T_882, 3, 3)
    node all_inside_0_4 = bits(T_882, 4, 4)
    node all_inside_0_5 = bits(T_882, 5, 5)
    node all_inside_0_6 = bits(T_882, 6, 6)
    node all_inside_0_7 = bits(T_882, 7, 7)
    node T_883 = and(all_inside_0_0, all_inside_0_1)
    node T_884 = and(all_inside_0_2, all_inside_0_3)
    node T_885 = and(all_inside_0_4, all_inside_0_5)
    node T_886 = and(all_inside_0_6, all_inside_0_7)
    node T_887 = and(T_883, T_884)
    node T_888 = and(T_885, T_886)
    node T_895 = or(T_888, T_887)
    node T_896 = cat(UInt<1>("h0"), T_887)
    node T_898 = mux(T_895, UInt<2>("h2"), UInt<2>("h3"))
    node T_899 = and(T_888, T_884)
    node T_900 = and(T_888, T_883)
    node T_901 = and(T_887, T_886)
    node T_902 = and(T_887, T_885)
    node T_903 = or(T_900, T_902)
    node T_904 = or(T_899, T_900)
    node T_905 = or(T_904, T_901)
    node T_906 = or(T_905, T_902)
    node T_907 = cat(T_896, T_903)
    node T_909 = mux(T_906, UInt<2>("h1"), T_898)
    node T_910 = and(T_899, all_inside_0_1)
    node T_911 = and(T_899, all_inside_0_0)
    node T_912 = and(T_900, all_inside_0_3)
    node T_913 = and(T_900, all_inside_0_2)
    node T_914 = and(T_901, all_inside_0_5)
    node T_915 = and(T_901, all_inside_0_4)
    node T_916 = and(T_902, all_inside_0_7)
    node T_917 = and(T_902, all_inside_0_6)
    node T_918 = or(T_911, T_913)
    node T_919 = or(T_918, T_915)
    node T_920 = or(T_919, T_917)
    node T_921 = or(T_910, T_911)
    node T_922 = or(T_921, T_912)
    node T_923 = or(T_922, T_913)
    node T_924 = or(T_923, T_914)
    node T_925 = or(T_924, T_915)
    node T_926 = or(T_925, T_916)
    node T_927 = or(T_926, T_917)
    node put_offset = cat(T_907, T_920)
    node put_size = mux(T_927, UInt<2>("h0"), T_909)
    node T_930 = eq(w_inflight, UInt<1>("h0"))
    node T_931 = and(put_valid, io_nasti_w_ready)
    node T_932 = and(T_931, put_id_ready)
    node T_933 = and(T_932, T_930)
    wire T_941_0 : UInt<3>
    wire T_941_1 : UInt<3>
    node T_943 = eq(io_tl_acquire_bits_a_type, UInt<3>("h0"))
    node T_944 = eq(io_tl_acquire_bits_a_type, UInt<3>("h4"))
    node T_945 = or(T_943, T_944)
    node T_946 = and(io_tl_acquire_bits_is_builtin_type, T_945)
    node T_949 = mux(T_946, T_798, UInt<3>("h0"))
    node T_951 = cat(T_801, T_949)
    node T_953 = mux(is_multibeat, UInt<4>("h0"), put_offset)
    node GEN_7 = pad(T_953, 32)
    node T_954 = or(T_951, GEN_7)
    node T_956 = mux(is_multibeat, UInt<2>("h3"), put_size)
    node T_959 = mux(is_multibeat, UInt<3>("h7"), UInt<3>("h0"))
    wire T_972_addr : UInt<32>
    wire T_972_len : UInt<8>
    wire T_972_size : UInt<3>
    wire T_972_burst : UInt<2>
    wire T_972_lock : UInt<1>
    wire T_972_cache : UInt<4>
    wire T_972_prot : UInt<3>
    wire T_972_qos : UInt<4>
    wire T_972_region : UInt<4>
    wire T_972_id : UInt<5>
    wire T_972_user : UInt<1>
    node T_991 = and(T_779, put_id_ready)
    node T_1031 = eq(is_multibeat, UInt<1>("h0"))
    node T_1032 = mux(w_inflight, T_725, T_1031)
    wire T_1039_data : UInt<64>
    wire T_1039_last : UInt<1>
    wire T_1039_id : UInt<5>
    wire T_1039_strb : UInt<8>
    wire T_1039_user : UInt<1>
    node T_1046 = and(aw_ready, io_nasti_w_ready)
    node T_1047 = and(T_1046, put_id_ready)
    node T_1048 = and(roq.io_enq_ready, io_nasti_ar_ready)
    node T_1049 = and(T_1048, get_id_mapper.io_req_ready)
    node T_1050 = mux(has_data, T_1047, T_1049)
    node T_1054 = and(T_930, T_721)
    node T_1055 = and(T_1054, is_multibeat)
    node GEN_2 = mux(T_1055, UInt<1>("h1"), w_inflight)
    node GEN_3 = mux(T_1055, w_id, w_id_reg)
    node GEN_4 = mux(tl_wrap_out, UInt<1>("h0"), GEN_2)
    node GEN_5 = mux(w_inflight, GEN_4, GEN_2)
    node T_1058 = and(io_tl_grant_ready, io_tl_grant_valid)
    wire T_1066_0 : UInt<3>
    node GEN_8 = pad(UInt<3>("h5"), 4)
    node T_1068 = eq(io_tl_grant_bits_g_type, GEN_8)
    node T_1069 = eq(io_tl_grant_bits_g_type, UInt<4>("h0"))
    node T_1070 = mux(io_tl_grant_bits_is_builtin_type, T_1068, T_1069)
    node T_1072 = and(T_1058, T_1070)
    reg tl_cnt_in : UInt<3>, clk with :
      reset => (reset, UInt<3>("h0"))
    node T_1077 = add(tl_cnt_in, UInt<3>("h1"))
    node T_1078 = tail(T_1077, 1)
    node GEN_6 = mux(T_1072, T_1078, tl_cnt_in)
    inst gnt_arb of LockingArbiter
    node T_1110 = mux(roq.io_deq_data_subblock, UInt<3>("h4"), UInt<3>("h5"))
    node T_1112 = mux(roq.io_deq_data_subblock, roq.io_deq_data_addr_beat, tl_cnt_in)
    wire T_1140_addr_beat : UInt<3>
    wire T_1140_client_xact_id : UInt<4>
    wire T_1140_manager_xact_id : UInt<1>
    wire T_1140_is_builtin_type : UInt<1>
    wire T_1140_g_type : UInt<4>
    wire T_1140_data : UInt<64>
    node T_1168 = eq(roq.io_deq_valid, UInt<1>("h0"))
    node T_1169 = or(T_1168, roq.io_deq_matches)
    node T_1170 = or(T_1169, reset)
    node T_1172 = eq(T_1170, UInt<1>("h0"))
    node T_1174 = eq(gnt_arb.io_in_0_valid, UInt<1>("h0"))
    node T_1175 = or(T_1174, get_id_mapper.io_resp_matches)
    node T_1176 = or(T_1175, reset)
    node T_1178 = eq(T_1176, UInt<1>("h0"))
    wire T_1211_addr_beat : UInt<3>
    wire T_1211_client_xact_id : UInt<4>
    wire T_1211_manager_xact_id : UInt<1>
    wire T_1211_is_builtin_type : UInt<1>
    wire T_1211_g_type : UInt<4>
    wire T_1211_data : UInt<64>
    node T_1239 = eq(gnt_arb.io_in_1_valid, UInt<1>("h0"))
    node T_1240 = or(T_1239, put_id_mapper.io_resp_matches)
    node T_1241 = or(T_1240, reset)
    node T_1243 = eq(T_1241, UInt<1>("h0"))
    node T_1245 = eq(io_nasti_r_valid, UInt<1>("h0"))
    node T_1247 = eq(io_nasti_r_bits_resp, UInt<2>("h0"))
    node T_1248 = or(T_1245, T_1247)
    node T_1249 = or(T_1248, reset)
    node T_1251 = eq(T_1249, UInt<1>("h0"))
    node T_1253 = eq(io_nasti_b_valid, UInt<1>("h0"))
    node T_1255 = eq(io_nasti_b_bits_resp, UInt<2>("h0"))
    node T_1256 = or(T_1253, T_1255)
    node T_1257 = or(T_1256, reset)
    node T_1259 = eq(T_1257, UInt<1>("h0"))
    io_tl_acquire_ready <= T_1050
    io_tl_grant_valid <= gnt_arb.io_out_valid
    io_tl_grant_bits_addr_beat <= gnt_arb.io_out_bits_addr_beat
    io_tl_grant_bits_client_xact_id <= gnt_arb.io_out_bits_client_xact_id
    io_tl_grant_bits_manager_xact_id <= gnt_arb.io_out_bits_manager_xact_id
    io_tl_grant_bits_is_builtin_type <= gnt_arb.io_out_bits_is_builtin_type
    io_tl_grant_bits_g_type <= gnt_arb.io_out_bits_g_type
    io_tl_grant_bits_data <= gnt_arb.io_out_bits_data
    io_nasti_aw_valid <= T_933
    io_nasti_aw_bits_addr <= T_972_addr
    io_nasti_aw_bits_len <= T_972_len
    io_nasti_aw_bits_size <= T_972_size
    io_nasti_aw_bits_burst <= UInt<2>("h1")
    io_nasti_aw_bits_lock <= UInt<1>("h0")
    io_nasti_aw_bits_cache <= UInt<4>("h0")
    io_nasti_aw_bits_prot <= UInt<3>("h0")
    io_nasti_aw_bits_qos <= UInt<4>("h0")
    io_nasti_aw_bits_region <= UInt<4>("h0")
    io_nasti_aw_bits_id <= T_972_id
    io_nasti_aw_bits_user <= UInt<1>("h0")
    io_nasti_w_valid <= T_991
    io_nasti_w_bits_data <= T_1039_data
    io_nasti_w_bits_last <= T_1039_last
    io_nasti_w_bits_id <= T_1039_id
    io_nasti_w_bits_strb <= T_1039_strb
    io_nasti_w_bits_user <= UInt<1>("h0")
    io_nasti_b_ready <= gnt_arb.io_in_1_ready
    io_nasti_ar_valid <= T_784
    io_nasti_ar_bits_addr <= T_828_addr
    io_nasti_ar_bits_len <= T_828_len
    io_nasti_ar_bits_size <= T_828_size
    io_nasti_ar_bits_burst <= UInt<2>("h1")
    io_nasti_ar_bits_lock <= UInt<1>("h0")
    io_nasti_ar_bits_cache <= UInt<4>("h0")
    io_nasti_ar_bits_prot <= UInt<3>("h0")
    io_nasti_ar_bits_qos <= UInt<4>("h0")
    io_nasti_ar_bits_region <= UInt<4>("h0")
    io_nasti_ar_bits_id <= T_828_id
    io_nasti_ar_bits_user <= UInt<1>("h0")
    io_nasti_r_ready <= gnt_arb.io_in_0_ready
    tl_cnt_out <= GEN_0
    roq.io_enq_valid <= T_771
    roq.io_enq_bits_data_addr_beat <= io_tl_acquire_bits_addr_beat
    roq.io_enq_bits_data_subblock <= is_subblock
    roq.io_enq_bits_tag <= bits(io_nasti_ar_bits_id, 3, 0)
    roq.io_deq_valid <= T_774
    roq.io_deq_tag <= bits(io_nasti_r_bits_id, 3, 0)
    get_id_mapper.io_req_valid <= T_776
    get_id_mapper.io_req_in_id <= io_tl_acquire_bits_client_xact_id
    get_id_mapper.io_resp_valid <= T_778
    get_id_mapper.io_resp_out_id <= io_nasti_r_bits_id
    put_id_mapper.io_req_valid <= T_781
    put_id_mapper.io_req_in_id <= io_tl_acquire_bits_client_xact_id
    put_id_mapper.io_resp_valid <= T_782
    put_id_mapper.io_resp_out_id <= io_nasti_b_bits_id
    w_inflight <= GEN_5
    w_id_reg <= GEN_3
    nasti_cnt_out <= GEN_1
    T_828_addr <= T_802
    T_828_len <= pad(T_808, 8)
    T_828_size <= pad(T_805, 3)
    T_828_id <= get_id_mapper.io_req_out_id
    T_972_addr <= T_954
    T_972_len <= pad(T_959, 8)
    T_972_size <= pad(T_956, 3)
    T_972_id <= put_id_mapper.io_req_out_id
    T_1039_data <= io_tl_acquire_bits_data
    T_1039_last <= T_1032
    T_1039_id <= w_id
    T_1039_strb <= T_881
    tl_cnt_in <= GEN_6
    gnt_arb.io_in_0_valid <= io_nasti_r_valid
    gnt_arb.io_in_0_bits_addr_beat <= T_1140_addr_beat
    gnt_arb.io_in_0_bits_client_xact_id <= T_1140_client_xact_id
    gnt_arb.io_in_0_bits_manager_xact_id <= UInt<1>("h0")
    gnt_arb.io_in_0_bits_is_builtin_type <= UInt<1>("h1")
    gnt_arb.io_in_0_bits_g_type <= T_1140_g_type
    gnt_arb.io_in_0_bits_data <= T_1140_data
    gnt_arb.io_in_0_bits_client_id <= UInt<1>("h1")
    gnt_arb.io_in_1_valid <= io_nasti_b_valid
    gnt_arb.io_in_1_bits_addr_beat <= UInt<3>("h0")
    gnt_arb.io_in_1_bits_client_xact_id <= T_1211_client_xact_id
    gnt_arb.io_in_1_bits_manager_xact_id <= UInt<1>("h0")
    gnt_arb.io_in_1_bits_is_builtin_type <= UInt<1>("h1")
    gnt_arb.io_in_1_bits_g_type <= UInt<4>("h3")
    gnt_arb.io_in_1_bits_data <= UInt<64>("h0")
    gnt_arb.io_in_1_bits_client_id <= UInt<1>("h0")
    gnt_arb.io_out_ready <= io_tl_grant_ready
    T_1140_addr_beat <= T_1112
    T_1140_client_xact_id <= get_id_mapper.io_resp_in_id
    T_1140_g_type <= pad(T_1110, 4)
    T_1140_data <= io_nasti_r_bits_data
    T_1211_client_xact_id <= put_id_mapper.io_resp_in_id
    printf(clk, T_1172, "Assertion failed: TL -> NASTI converter ReorderQueue: NASTI tag error\n    at Nasti.scala:220 assert(!roq.io.deq.valid || roq.io.deq.matches,\n")
    stop(clk, T_1172, 1)
    printf(clk, T_1178, "Assertion failed: TL -> NASTI ID Mapper: NASTI tag error\n    at Nasti.scala:222 assert(!gnt_arb.io.in(0).valid || get_id_mapper.io.resp.matches,\n")
    stop(clk, T_1178, 1)
    printf(clk, T_1243, "Assertion failed: NASTI tag error\n    at Nasti.scala:234 assert(!gnt_arb.io.in(1).valid || put_id_mapper.io.resp.matches, \"NASTI tag error\")\n")
    stop(clk, T_1243, 1)
    printf(clk, T_1251, "Assertion failed: NASTI read error\n    at Nasti.scala:236 assert(!io.nasti.r.valid || io.nasti.r.bits.resp === UInt(0), \"NASTI read error\")\n")
    stop(clk, T_1251, 1)
    printf(clk, T_1259, "Assertion failed: NASTI write error\n    at Nasti.scala:237 assert(!io.nasti.b.valid || io.nasti.b.bits.resp === UInt(0), \"NASTI write error\")\n")
    stop(clk, T_1259, 1)

  module Queue_20 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_addr : UInt<32>
    input io_enq_bits_len : UInt<8>
    input io_enq_bits_size : UInt<3>
    input io_enq_bits_burst : UInt<2>
    input io_enq_bits_lock : UInt<1>
    input io_enq_bits_cache : UInt<4>
    input io_enq_bits_prot : UInt<3>
    input io_enq_bits_qos : UInt<4>
    input io_enq_bits_region : UInt<4>
    input io_enq_bits_id : UInt<5>
    input io_enq_bits_user : UInt<1>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_addr : UInt<32>
    output io_deq_bits_len : UInt<8>
    output io_deq_bits_size : UInt<3>
    output io_deq_bits_burst : UInt<2>
    output io_deq_bits_lock : UInt<1>
    output io_deq_bits_cache : UInt<4>
    output io_deq_bits_prot : UInt<3>
    output io_deq_bits_qos : UInt<4>
    output io_deq_bits_region : UInt<4>
    output io_deq_bits_id : UInt<5>
    output io_deq_bits_user : UInt<1>
    output io_count : UInt<1>
  
    mem ram_addr :
      data-type => UInt<32>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_addr.T_144.en <= UInt<1>("h1")
    ram_addr.T_144.addr <= UInt<1>("h0")
    ram_addr.T_125.en <= do_enq
    ram_addr.T_125.mask <= do_enq
    ram_addr.T_125.addr <= UInt<1>("h0")
    ram_addr.T_125.data <= io_enq_bits_addr
    mem ram_len :
      data-type => UInt<8>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_len.T_144.en <= UInt<1>("h1")
    ram_len.T_144.addr <= UInt<1>("h0")
    ram_len.T_125.en <= do_enq
    ram_len.T_125.mask <= do_enq
    ram_len.T_125.addr <= UInt<1>("h0")
    ram_len.T_125.data <= io_enq_bits_len
    mem ram_size :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_size.T_144.en <= UInt<1>("h1")
    ram_size.T_144.addr <= UInt<1>("h0")
    ram_size.T_125.en <= do_enq
    ram_size.T_125.mask <= do_enq
    ram_size.T_125.addr <= UInt<1>("h0")
    ram_size.T_125.data <= io_enq_bits_size
    mem ram_burst :
      data-type => UInt<2>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_burst.T_144.en <= UInt<1>("h1")
    ram_burst.T_144.addr <= UInt<1>("h0")
    ram_burst.T_125.en <= do_enq
    ram_burst.T_125.mask <= do_enq
    ram_burst.T_125.addr <= UInt<1>("h0")
    ram_burst.T_125.data <= io_enq_bits_burst
    mem ram_lock :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_lock.T_144.en <= UInt<1>("h1")
    ram_lock.T_144.addr <= UInt<1>("h0")
    ram_lock.T_125.en <= do_enq
    ram_lock.T_125.mask <= do_enq
    ram_lock.T_125.addr <= UInt<1>("h0")
    ram_lock.T_125.data <= io_enq_bits_lock
    mem ram_cache :
      data-type => UInt<4>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_cache.T_144.en <= UInt<1>("h1")
    ram_cache.T_144.addr <= UInt<1>("h0")
    ram_cache.T_125.en <= do_enq
    ram_cache.T_125.mask <= do_enq
    ram_cache.T_125.addr <= UInt<1>("h0")
    ram_cache.T_125.data <= io_enq_bits_cache
    mem ram_prot :
      data-type => UInt<3>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_prot.T_144.en <= UInt<1>("h1")
    ram_prot.T_144.addr <= UInt<1>("h0")
    ram_prot.T_125.en <= do_enq
    ram_prot.T_125.mask <= do_enq
    ram_prot.T_125.addr <= UInt<1>("h0")
    ram_prot.T_125.data <= io_enq_bits_prot
    mem ram_qos :
      data-type => UInt<4>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_qos.T_144.en <= UInt<1>("h1")
    ram_qos.T_144.addr <= UInt<1>("h0")
    ram_qos.T_125.en <= do_enq
    ram_qos.T_125.mask <= do_enq
    ram_qos.T_125.addr <= UInt<1>("h0")
    ram_qos.T_125.data <= io_enq_bits_qos
    mem ram_region :
      data-type => UInt<4>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_region.T_144.en <= UInt<1>("h1")
    ram_region.T_144.addr <= UInt<1>("h0")
    ram_region.T_125.en <= do_enq
    ram_region.T_125.mask <= do_enq
    ram_region.T_125.addr <= UInt<1>("h0")
    ram_region.T_125.data <= io_enq_bits_region
    mem ram_id :
      data-type => UInt<5>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_id.T_144.en <= UInt<1>("h1")
    ram_id.T_144.addr <= UInt<1>("h0")
    ram_id.T_125.en <= do_enq
    ram_id.T_125.mask <= do_enq
    ram_id.T_125.addr <= UInt<1>("h0")
    ram_id.T_125.data <= io_enq_bits_id
    mem ram_user :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_144
      writer => T_125
      read-under-write => undefined
    ram_user.T_144.en <= UInt<1>("h1")
    ram_user.T_144.addr <= UInt<1>("h0")
    ram_user.T_125.en <= do_enq
    ram_user.T_125.mask <= do_enq
    ram_user.T_125.addr <= UInt<1>("h0")
    ram_user.T_125.data <= io_enq_bits_user
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_122 = eq(maybe_full, UInt<1>("h0"))
    node T_123 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_124 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_139 = neq(do_enq, do_deq)
    node GEN_14 = mux(T_139, do_enq, maybe_full)
    node T_141 = eq(T_122, UInt<1>("h0"))
    node T_156 = sub(UInt<1>("h0"), UInt<1>("h0"))
    node ptr_diff = tail(T_156, 1)
    node T_158 = cat(maybe_full, ptr_diff)
    io_enq_ready <= T_122
    io_deq_valid <= T_141
    io_deq_bits_addr <= ram_addr.T_144.data
    io_deq_bits_len <= ram_len.T_144.data
    io_deq_bits_size <= ram_size.T_144.data
    io_deq_bits_burst <= ram_burst.T_144.data
    io_deq_bits_lock <= ram_lock.T_144.data
    io_deq_bits_cache <= ram_cache.T_144.data
    io_deq_bits_prot <= ram_prot.T_144.data
    io_deq_bits_qos <= ram_qos.T_144.data
    io_deq_bits_region <= ram_region.T_144.data
    io_deq_bits_id <= ram_id.T_144.data
    io_deq_bits_user <= ram_user.T_144.data
    io_count <= bits(T_158, 0, 0)
    maybe_full <= GEN_14
    do_enq <= T_123
    do_deq <= T_124

  module Queue_22 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_data : UInt<64>
    input io_enq_bits_last : UInt<1>
    input io_enq_bits_id : UInt<5>
    input io_enq_bits_strb : UInt<8>
    input io_enq_bits_user : UInt<1>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_data : UInt<64>
    output io_deq_bits_last : UInt<1>
    output io_deq_bits_id : UInt<5>
    output io_deq_bits_strb : UInt<8>
    output io_deq_bits_user : UInt<1>
    output io_count : UInt<2>
  
    mem ram_data :
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_data.T_94.en <= UInt<1>("h1")
    ram_data.T_94.addr <= T_67
    ram_data.T_73.en <= do_enq
    ram_data.T_73.mask <= do_enq
    ram_data.T_73.addr <= T_65
    ram_data.T_73.data <= io_enq_bits_data
    mem ram_last :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_last.T_94.en <= UInt<1>("h1")
    ram_last.T_94.addr <= T_67
    ram_last.T_73.en <= do_enq
    ram_last.T_73.mask <= do_enq
    ram_last.T_73.addr <= T_65
    ram_last.T_73.data <= io_enq_bits_last
    mem ram_id :
      data-type => UInt<5>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_id.T_94.en <= UInt<1>("h1")
    ram_id.T_94.addr <= T_67
    ram_id.T_73.en <= do_enq
    ram_id.T_73.mask <= do_enq
    ram_id.T_73.addr <= T_65
    ram_id.T_73.data <= io_enq_bits_id
    mem ram_strb :
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_strb.T_94.en <= UInt<1>("h1")
    ram_strb.T_94.addr <= T_67
    ram_strb.T_73.en <= do_enq
    ram_strb.T_73.mask <= do_enq
    ram_strb.T_73.addr <= T_65
    ram_strb.T_73.data <= io_enq_bits_strb
    mem ram_user :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_user.T_94.en <= UInt<1>("h1")
    ram_user.T_94.addr <= T_67
    ram_user.T_73.en <= do_enq
    ram_user.T_73.mask <= do_enq
    ram_user.T_73.addr <= T_65
    ram_user.T_73.data <= io_enq_bits_user
    reg T_65 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_67 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node ptr_match = eq(T_65, T_67)
    node T_70 = eq(maybe_full, UInt<1>("h0"))
    node empty = and(ptr_match, T_70)
    node full = and(ptr_match, maybe_full)
    node T_71 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_72 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_82 = add(T_65, UInt<1>("h1"))
    node T_83 = tail(T_82, 1)
    node GEN_8 = mux(do_enq, T_83, T_65)
    node T_87 = add(T_67, UInt<1>("h1"))
    node T_88 = tail(T_87, 1)
    node GEN_9 = mux(do_deq, T_88, T_67)
    node T_89 = neq(do_enq, do_deq)
    node GEN_10 = mux(T_89, do_enq, maybe_full)
    node T_91 = eq(empty, UInt<1>("h0"))
    node T_93 = eq(full, UInt<1>("h0"))
    node T_100 = sub(T_65, T_67)
    node ptr_diff = tail(T_100, 1)
    node T_101 = and(maybe_full, ptr_match)
    node T_102 = cat(T_101, ptr_diff)
    io_enq_ready <= T_93
    io_deq_valid <= T_91
    io_deq_bits_data <= ram_data.T_94.data
    io_deq_bits_last <= ram_last.T_94.data
    io_deq_bits_id <= ram_id.T_94.data
    io_deq_bits_strb <= ram_strb.T_94.data
    io_deq_bits_user <= ram_user.T_94.data
    io_count <= T_102
    T_65 <= GEN_8
    T_67 <= GEN_9
    maybe_full <= GEN_10
    do_enq <= T_71
    do_deq <= T_72

  module Queue_23 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_resp : UInt<2>
    input io_enq_bits_data : UInt<64>
    input io_enq_bits_last : UInt<1>
    input io_enq_bits_id : UInt<5>
    input io_enq_bits_user : UInt<1>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_resp : UInt<2>
    output io_deq_bits_data : UInt<64>
    output io_deq_bits_last : UInt<1>
    output io_deq_bits_id : UInt<5>
    output io_deq_bits_user : UInt<1>
    output io_count : UInt<2>
  
    mem ram_resp :
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_resp.T_94.en <= UInt<1>("h1")
    ram_resp.T_94.addr <= T_67
    ram_resp.T_73.en <= do_enq
    ram_resp.T_73.mask <= do_enq
    ram_resp.T_73.addr <= T_65
    ram_resp.T_73.data <= io_enq_bits_resp
    mem ram_data :
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_data.T_94.en <= UInt<1>("h1")
    ram_data.T_94.addr <= T_67
    ram_data.T_73.en <= do_enq
    ram_data.T_73.mask <= do_enq
    ram_data.T_73.addr <= T_65
    ram_data.T_73.data <= io_enq_bits_data
    mem ram_last :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_last.T_94.en <= UInt<1>("h1")
    ram_last.T_94.addr <= T_67
    ram_last.T_73.en <= do_enq
    ram_last.T_73.mask <= do_enq
    ram_last.T_73.addr <= T_65
    ram_last.T_73.data <= io_enq_bits_last
    mem ram_id :
      data-type => UInt<5>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_id.T_94.en <= UInt<1>("h1")
    ram_id.T_94.addr <= T_67
    ram_id.T_73.en <= do_enq
    ram_id.T_73.mask <= do_enq
    ram_id.T_73.addr <= T_65
    ram_id.T_73.data <= io_enq_bits_id
    mem ram_user :
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => T_94
      writer => T_73
      read-under-write => undefined
    ram_user.T_94.en <= UInt<1>("h1")
    ram_user.T_94.addr <= T_67
    ram_user.T_73.en <= do_enq
    ram_user.T_73.mask <= do_enq
    ram_user.T_73.addr <= T_65
    ram_user.T_73.data <= io_enq_bits_user
    reg T_65 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg T_67 : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node ptr_match = eq(T_65, T_67)
    node T_70 = eq(maybe_full, UInt<1>("h0"))
    node empty = and(ptr_match, T_70)
    node full = and(ptr_match, maybe_full)
    node T_71 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_72 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_82 = add(T_65, UInt<1>("h1"))
    node T_83 = tail(T_82, 1)
    node GEN_8 = mux(do_enq, T_83, T_65)
    node T_87 = add(T_67, UInt<1>("h1"))
    node T_88 = tail(T_87, 1)
    node GEN_9 = mux(do_deq, T_88, T_67)
    node T_89 = neq(do_enq, do_deq)
    node GEN_10 = mux(T_89, do_enq, maybe_full)
    node T_91 = eq(empty, UInt<1>("h0"))
    node T_93 = eq(full, UInt<1>("h0"))
    node T_100 = sub(T_65, T_67)
    node ptr_diff = tail(T_100, 1)
    node T_101 = and(maybe_full, ptr_match)
    node T_102 = cat(T_101, ptr_diff)
    io_enq_ready <= T_93
    io_deq_valid <= T_91
    io_deq_bits_resp <= ram_resp.T_94.data
    io_deq_bits_data <= ram_data.T_94.data
    io_deq_bits_last <= ram_last.T_94.data
    io_deq_bits_id <= ram_id.T_94.data
    io_deq_bits_user <= ram_user.T_94.data
    io_count <= T_102
    T_65 <= GEN_8
    T_67 <= GEN_9
    maybe_full <= GEN_10
    do_enq <= T_71
    do_deq <= T_72

  module Queue_24 :
    input clk : Clock
    input reset : UInt<1>
    output io_enq_ready : UInt<1>
    input io_enq_valid : UInt<1>
    input io_enq_bits_resp : UInt<2>
    input io_enq_bits_id : UInt<5>
    input io_enq_bits_user : UInt<1>
    input io_deq_ready : UInt<1>
    output io_deq_valid : UInt<1>
    output io_deq_bits_resp : UInt<2>
    output io_deq_bits_id : UInt<5>
    output io_deq_bits_user : UInt<1>
    output io_count : UInt<1>
  
    mem ram_resp :
      data-type => UInt<2>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_64
      writer => T_53
      read-under-write => undefined
    ram_resp.T_64.en <= UInt<1>("h1")
    ram_resp.T_64.addr <= UInt<1>("h0")
    ram_resp.T_53.en <= do_enq
    ram_resp.T_53.mask <= do_enq
    ram_resp.T_53.addr <= UInt<1>("h0")
    ram_resp.T_53.data <= io_enq_bits_resp
    mem ram_id :
      data-type => UInt<5>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_64
      writer => T_53
      read-under-write => undefined
    ram_id.T_64.en <= UInt<1>("h1")
    ram_id.T_64.addr <= UInt<1>("h0")
    ram_id.T_53.en <= do_enq
    ram_id.T_53.mask <= do_enq
    ram_id.T_53.addr <= UInt<1>("h0")
    ram_id.T_53.data <= io_enq_bits_id
    mem ram_user :
      data-type => UInt<1>
      depth => 1
      read-latency => 0
      write-latency => 1
      reader => T_64
      writer => T_53
      read-under-write => undefined
    ram_user.T_64.en <= UInt<1>("h1")
    ram_user.T_64.addr <= UInt<1>("h0")
    ram_user.T_53.en <= do_enq
    ram_user.T_53.mask <= do_enq
    ram_user.T_53.addr <= UInt<1>("h0")
    ram_user.T_53.data <= io_enq_bits_user
    reg maybe_full : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_50 = eq(maybe_full, UInt<1>("h0"))
    node T_51 = and(io_enq_ready, io_enq_valid)
    wire do_enq : UInt<1>
    node T_52 = and(io_deq_ready, io_deq_valid)
    wire do_deq : UInt<1>
    node T_59 = neq(do_enq, do_deq)
    node GEN_6 = mux(T_59, do_enq, maybe_full)
    node T_61 = eq(T_50, UInt<1>("h0"))
    node T_68 = sub(UInt<1>("h0"), UInt<1>("h0"))
    node ptr_diff = tail(T_68, 1)
    node T_70 = cat(maybe_full, ptr_diff)
    io_enq_ready <= T_50
    io_deq_valid <= T_61
    io_deq_bits_resp <= ram_resp.T_64.data
    io_deq_bits_id <= ram_id.T_64.data
    io_deq_bits_user <= ram_user.T_64.data
    io_count <= bits(T_70, 0, 0)
    maybe_full <= GEN_6
    do_enq <= T_51
    do_deq <= T_52

  module ExampleTop :
    input clk : Clock
    input reset : UInt<1>
    output io_debug_req_ready : UInt<1>
    input io_debug_req_valid : UInt<1>
    input io_debug_req_bits_addr : UInt<5>
    input io_debug_req_bits_data : UInt<34>
    input io_debug_req_bits_op : UInt<2>
    input io_debug_resp_ready : UInt<1>
    output io_debug_resp_valid : UInt<1>
    output io_debug_resp_bits_data : UInt<34>
    output io_debug_resp_bits_resp : UInt<2>
    input io_interrupts_0 : UInt<1>
    input io_interrupts_1 : UInt<1>
    input io_mem_axi_0_aw_ready : UInt<1>
    output io_mem_axi_0_aw_valid : UInt<1>
    output io_mem_axi_0_aw_bits_addr : UInt<32>
    output io_mem_axi_0_aw_bits_len : UInt<8>
    output io_mem_axi_0_aw_bits_size : UInt<3>
    output io_mem_axi_0_aw_bits_burst : UInt<2>
    output io_mem_axi_0_aw_bits_lock : UInt<1>
    output io_mem_axi_0_aw_bits_cache : UInt<4>
    output io_mem_axi_0_aw_bits_prot : UInt<3>
    output io_mem_axi_0_aw_bits_qos : UInt<4>
    output io_mem_axi_0_aw_bits_region : UInt<4>
    output io_mem_axi_0_aw_bits_id : UInt<5>
    output io_mem_axi_0_aw_bits_user : UInt<1>
    input io_mem_axi_0_w_ready : UInt<1>
    output io_mem_axi_0_w_valid : UInt<1>
    output io_mem_axi_0_w_bits_data : UInt<64>
    output io_mem_axi_0_w_bits_last : UInt<1>
    output io_mem_axi_0_w_bits_id : UInt<5>
    output io_mem_axi_0_w_bits_strb : UInt<8>
    output io_mem_axi_0_w_bits_user : UInt<1>
    output io_mem_axi_0_b_ready : UInt<1>
    input io_mem_axi_0_b_valid : UInt<1>
    input io_mem_axi_0_b_bits_resp : UInt<2>
    input io_mem_axi_0_b_bits_id : UInt<5>
    input io_mem_axi_0_b_bits_user : UInt<1>
    input io_mem_axi_0_ar_ready : UInt<1>
    output io_mem_axi_0_ar_valid : UInt<1>
    output io_mem_axi_0_ar_bits_addr : UInt<32>
    output io_mem_axi_0_ar_bits_len : UInt<8>
    output io_mem_axi_0_ar_bits_size : UInt<3>
    output io_mem_axi_0_ar_bits_burst : UInt<2>
    output io_mem_axi_0_ar_bits_lock : UInt<1>
    output io_mem_axi_0_ar_bits_cache : UInt<4>
    output io_mem_axi_0_ar_bits_prot : UInt<3>
    output io_mem_axi_0_ar_bits_qos : UInt<4>
    output io_mem_axi_0_ar_bits_region : UInt<4>
    output io_mem_axi_0_ar_bits_id : UInt<5>
    output io_mem_axi_0_ar_bits_user : UInt<1>
    output io_mem_axi_0_r_ready : UInt<1>
    input io_mem_axi_0_r_valid : UInt<1>
    input io_mem_axi_0_r_bits_resp : UInt<2>
    input io_mem_axi_0_r_bits_data : UInt<64>
    input io_mem_axi_0_r_bits_last : UInt<1>
    input io_mem_axi_0_r_bits_id : UInt<5>
    input io_mem_axi_0_r_bits_user : UInt<1>
  
    inst coreplex of DefaultCoreplex
    reg T_3641 : UInt<7>, clk with :
      reset => (reset, UInt<7>("h0"))
    node T_3643 = eq(T_3641, UInt<7>("h63"))
    node T_3645 = add(T_3641, UInt<7>("h1"))
    node T_3646 = tail(T_3645, 1)
    node GEN_0 = mux(T_3643, UInt<7>("h0"), T_3646)
    inst NastiIOTileLinkIOConverter_1 of NastiIOTileLinkIOConverter
    wire T_3810_aw_ready : UInt<1>
    wire T_3810_aw_valid : UInt<1>
    wire T_3810_aw_bits_addr : UInt<32>
    wire T_3810_aw_bits_len : UInt<8>
    wire T_3810_aw_bits_size : UInt<3>
    wire T_3810_aw_bits_burst : UInt<2>
    wire T_3810_aw_bits_lock : UInt<1>
    wire T_3810_aw_bits_cache : UInt<4>
    wire T_3810_aw_bits_prot : UInt<3>
    wire T_3810_aw_bits_qos : UInt<4>
    wire T_3810_aw_bits_region : UInt<4>
    wire T_3810_aw_bits_id : UInt<5>
    wire T_3810_aw_bits_user : UInt<1>
    wire T_3810_w_ready : UInt<1>
    wire T_3810_w_valid : UInt<1>
    wire T_3810_w_bits_data : UInt<64>
    wire T_3810_w_bits_last : UInt<1>
    wire T_3810_w_bits_id : UInt<5>
    wire T_3810_w_bits_strb : UInt<8>
    wire T_3810_w_bits_user : UInt<1>
    wire T_3810_b_ready : UInt<1>
    wire T_3810_b_valid : UInt<1>
    wire T_3810_b_bits_resp : UInt<2>
    wire T_3810_b_bits_id : UInt<5>
    wire T_3810_b_bits_user : UInt<1>
    wire T_3810_ar_ready : UInt<1>
    wire T_3810_ar_valid : UInt<1>
    wire T_3810_ar_bits_addr : UInt<32>
    wire T_3810_ar_bits_len : UInt<8>
    wire T_3810_ar_bits_size : UInt<3>
    wire T_3810_ar_bits_burst : UInt<2>
    wire T_3810_ar_bits_lock : UInt<1>
    wire T_3810_ar_bits_cache : UInt<4>
    wire T_3810_ar_bits_prot : UInt<3>
    wire T_3810_ar_bits_qos : UInt<4>
    wire T_3810_ar_bits_region : UInt<4>
    wire T_3810_ar_bits_id : UInt<5>
    wire T_3810_ar_bits_user : UInt<1>
    wire T_3810_r_ready : UInt<1>
    wire T_3810_r_valid : UInt<1>
    wire T_3810_r_bits_resp : UInt<2>
    wire T_3810_r_bits_data : UInt<64>
    wire T_3810_r_bits_last : UInt<1>
    wire T_3810_r_bits_id : UInt<5>
    wire T_3810_r_bits_user : UInt<1>
    inst Queue_20_1 of Queue_20
    inst Queue_21_1 of Queue_20
    inst Queue_22_1 of Queue_22
    inst Queue_23_1 of Queue_23
    inst Queue_24_1 of Queue_24
    io_debug_req_ready <= coreplex.io_debug_req_ready
    io_debug_resp_valid <= coreplex.io_debug_resp_valid
    io_debug_resp_bits_data <= coreplex.io_debug_resp_bits_data
    io_debug_resp_bits_resp <= coreplex.io_debug_resp_bits_resp
    io_mem_axi_0_aw_valid <= T_3810_aw_valid
    io_mem_axi_0_aw_bits_addr <= T_3810_aw_bits_addr
    io_mem_axi_0_aw_bits_len <= T_3810_aw_bits_len
    io_mem_axi_0_aw_bits_size <= T_3810_aw_bits_size
    io_mem_axi_0_aw_bits_burst <= T_3810_aw_bits_burst
    io_mem_axi_0_aw_bits_lock <= T_3810_aw_bits_lock
    io_mem_axi_0_aw_bits_cache <= UInt<4>("h3")
    io_mem_axi_0_aw_bits_prot <= T_3810_aw_bits_prot
    io_mem_axi_0_aw_bits_qos <= T_3810_aw_bits_qos
    io_mem_axi_0_aw_bits_region <= T_3810_aw_bits_region
    io_mem_axi_0_aw_bits_id <= T_3810_aw_bits_id
    io_mem_axi_0_aw_bits_user <= T_3810_aw_bits_user
    io_mem_axi_0_w_valid <= T_3810_w_valid
    io_mem_axi_0_w_bits_data <= T_3810_w_bits_data
    io_mem_axi_0_w_bits_last <= T_3810_w_bits_last
    io_mem_axi_0_w_bits_id <= T_3810_w_bits_id
    io_mem_axi_0_w_bits_strb <= T_3810_w_bits_strb
    io_mem_axi_0_w_bits_user <= T_3810_w_bits_user
    io_mem_axi_0_b_ready <= T_3810_b_ready
    io_mem_axi_0_ar_valid <= T_3810_ar_valid
    io_mem_axi_0_ar_bits_addr <= T_3810_ar_bits_addr
    io_mem_axi_0_ar_bits_len <= T_3810_ar_bits_len
    io_mem_axi_0_ar_bits_size <= T_3810_ar_bits_size
    io_mem_axi_0_ar_bits_burst <= T_3810_ar_bits_burst
    io_mem_axi_0_ar_bits_lock <= T_3810_ar_bits_lock
    io_mem_axi_0_ar_bits_cache <= UInt<4>("h3")
    io_mem_axi_0_ar_bits_prot <= T_3810_ar_bits_prot
    io_mem_axi_0_ar_bits_qos <= T_3810_ar_bits_qos
    io_mem_axi_0_ar_bits_region <= T_3810_ar_bits_region
    io_mem_axi_0_ar_bits_id <= T_3810_ar_bits_id
    io_mem_axi_0_ar_bits_user <= T_3810_ar_bits_user
    io_mem_axi_0_r_ready <= T_3810_r_ready
    coreplex.io_master_mem_0_acquire_ready <= NastiIOTileLinkIOConverter_1.io_tl_acquire_ready
    coreplex.io_master_mem_0_grant_valid <= NastiIOTileLinkIOConverter_1.io_tl_grant_valid
    coreplex.io_master_mem_0_grant_bits_addr_beat <= NastiIOTileLinkIOConverter_1.io_tl_grant_bits_addr_beat
    coreplex.io_master_mem_0_grant_bits_client_xact_id <= NastiIOTileLinkIOConverter_1.io_tl_grant_bits_client_xact_id
    coreplex.io_master_mem_0_grant_bits_manager_xact_id <= NastiIOTileLinkIOConverter_1.io_tl_grant_bits_manager_xact_id
    coreplex.io_master_mem_0_grant_bits_is_builtin_type <= NastiIOTileLinkIOConverter_1.io_tl_grant_bits_is_builtin_type
    coreplex.io_master_mem_0_grant_bits_g_type <= NastiIOTileLinkIOConverter_1.io_tl_grant_bits_g_type
    coreplex.io_master_mem_0_grant_bits_data <= NastiIOTileLinkIOConverter_1.io_tl_grant_bits_data
    coreplex.io_interrupts_0 <= io_interrupts_0
    coreplex.io_interrupts_1 <= io_interrupts_1
    coreplex.io_debug_req_valid <= io_debug_req_valid
    coreplex.io_debug_req_bits_addr <= io_debug_req_bits_addr
    coreplex.io_debug_req_bits_data <= io_debug_req_bits_data
    coreplex.io_debug_req_bits_op <= io_debug_req_bits_op
    coreplex.io_debug_resp_ready <= io_debug_resp_ready
    coreplex.io_rtcTick <= T_3643
    T_3641 <= GEN_0
    NastiIOTileLinkIOConverter_1.io_tl_acquire_valid <= coreplex.io_master_mem_0_acquire_valid
    NastiIOTileLinkIOConverter_1.io_tl_acquire_bits_addr_block <= coreplex.io_master_mem_0_acquire_bits_addr_block
    NastiIOTileLinkIOConverter_1.io_tl_acquire_bits_client_xact_id <= coreplex.io_master_mem_0_acquire_bits_client_xact_id
    NastiIOTileLinkIOConverter_1.io_tl_acquire_bits_addr_beat <= coreplex.io_master_mem_0_acquire_bits_addr_beat
    NastiIOTileLinkIOConverter_1.io_tl_acquire_bits_is_builtin_type <= coreplex.io_master_mem_0_acquire_bits_is_builtin_type
    NastiIOTileLinkIOConverter_1.io_tl_acquire_bits_a_type <= coreplex.io_master_mem_0_acquire_bits_a_type
    NastiIOTileLinkIOConverter_1.io_tl_acquire_bits_union <= coreplex.io_master_mem_0_acquire_bits_union
    NastiIOTileLinkIOConverter_1.io_tl_acquire_bits_data <= coreplex.io_master_mem_0_acquire_bits_data
    NastiIOTileLinkIOConverter_1.io_tl_grant_ready <= coreplex.io_master_mem_0_grant_ready
    NastiIOTileLinkIOConverter_1.io_nasti_aw_ready <= Queue_21_1.io_enq_ready
    NastiIOTileLinkIOConverter_1.io_nasti_w_ready <= Queue_22_1.io_enq_ready
    NastiIOTileLinkIOConverter_1.io_nasti_b_valid <= Queue_24_1.io_deq_valid
    NastiIOTileLinkIOConverter_1.io_nasti_b_bits_resp <= Queue_24_1.io_deq_bits_resp
    NastiIOTileLinkIOConverter_1.io_nasti_b_bits_id <= Queue_24_1.io_deq_bits_id
    NastiIOTileLinkIOConverter_1.io_nasti_b_bits_user <= Queue_24_1.io_deq_bits_user
    NastiIOTileLinkIOConverter_1.io_nasti_ar_ready <= Queue_20_1.io_enq_ready
    NastiIOTileLinkIOConverter_1.io_nasti_r_valid <= Queue_23_1.io_deq_valid
    NastiIOTileLinkIOConverter_1.io_nasti_r_bits_resp <= Queue_23_1.io_deq_bits_resp
    NastiIOTileLinkIOConverter_1.io_nasti_r_bits_data <= Queue_23_1.io_deq_bits_data
    NastiIOTileLinkIOConverter_1.io_nasti_r_bits_last <= Queue_23_1.io_deq_bits_last
    NastiIOTileLinkIOConverter_1.io_nasti_r_bits_id <= Queue_23_1.io_deq_bits_id
    NastiIOTileLinkIOConverter_1.io_nasti_r_bits_user <= Queue_23_1.io_deq_bits_user
    T_3810_aw_ready <= io_mem_axi_0_aw_ready
    T_3810_aw_valid <= Queue_21_1.io_deq_valid
    T_3810_aw_bits_addr <= Queue_21_1.io_deq_bits_addr
    T_3810_aw_bits_len <= Queue_21_1.io_deq_bits_len
    T_3810_aw_bits_size <= Queue_21_1.io_deq_bits_size
    T_3810_aw_bits_burst <= Queue_21_1.io_deq_bits_burst
    T_3810_aw_bits_lock <= Queue_21_1.io_deq_bits_lock
    T_3810_aw_bits_prot <= Queue_21_1.io_deq_bits_prot
    T_3810_aw_bits_qos <= Queue_21_1.io_deq_bits_qos
    T_3810_aw_bits_region <= Queue_21_1.io_deq_bits_region
    T_3810_aw_bits_id <= Queue_21_1.io_deq_bits_id
    T_3810_aw_bits_user <= Queue_21_1.io_deq_bits_user
    T_3810_w_ready <= io_mem_axi_0_w_ready
    T_3810_w_valid <= Queue_22_1.io_deq_valid
    T_3810_w_bits_data <= Queue_22_1.io_deq_bits_data
    T_3810_w_bits_last <= Queue_22_1.io_deq_bits_last
    T_3810_w_bits_id <= Queue_22_1.io_deq_bits_id
    T_3810_w_bits_strb <= Queue_22_1.io_deq_bits_strb
    T_3810_w_bits_user <= Queue_22_1.io_deq_bits_user
    T_3810_b_ready <= Queue_24_1.io_enq_ready
    T_3810_b_valid <= io_mem_axi_0_b_valid
    T_3810_b_bits_resp <= io_mem_axi_0_b_bits_resp
    T_3810_b_bits_id <= io_mem_axi_0_b_bits_id
    T_3810_b_bits_user <= io_mem_axi_0_b_bits_user
    T_3810_ar_ready <= io_mem_axi_0_ar_ready
    T_3810_ar_valid <= Queue_20_1.io_deq_valid
    T_3810_ar_bits_addr <= Queue_20_1.io_deq_bits_addr
    T_3810_ar_bits_len <= Queue_20_1.io_deq_bits_len
    T_3810_ar_bits_size <= Queue_20_1.io_deq_bits_size
    T_3810_ar_bits_burst <= Queue_20_1.io_deq_bits_burst
    T_3810_ar_bits_lock <= Queue_20_1.io_deq_bits_lock
    T_3810_ar_bits_prot <= Queue_20_1.io_deq_bits_prot
    T_3810_ar_bits_qos <= Queue_20_1.io_deq_bits_qos
    T_3810_ar_bits_region <= Queue_20_1.io_deq_bits_region
    T_3810_ar_bits_id <= Queue_20_1.io_deq_bits_id
    T_3810_ar_bits_user <= Queue_20_1.io_deq_bits_user
    T_3810_r_ready <= Queue_23_1.io_enq_ready
    T_3810_r_valid <= io_mem_axi_0_r_valid
    T_3810_r_bits_resp <= io_mem_axi_0_r_bits_resp
    T_3810_r_bits_data <= io_mem_axi_0_r_bits_data
    T_3810_r_bits_last <= io_mem_axi_0_r_bits_last
    T_3810_r_bits_id <= io_mem_axi_0_r_bits_id
    T_3810_r_bits_user <= io_mem_axi_0_r_bits_user
    Queue_20_1.io_enq_valid <= NastiIOTileLinkIOConverter_1.io_nasti_ar_valid
    Queue_20_1.io_enq_bits_addr <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_addr
    Queue_20_1.io_enq_bits_len <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_len
    Queue_20_1.io_enq_bits_size <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_size
    Queue_20_1.io_enq_bits_burst <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_burst
    Queue_20_1.io_enq_bits_lock <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_lock
    Queue_20_1.io_enq_bits_cache <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_cache
    Queue_20_1.io_enq_bits_prot <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_prot
    Queue_20_1.io_enq_bits_qos <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_qos
    Queue_20_1.io_enq_bits_region <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_region
    Queue_20_1.io_enq_bits_id <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_id
    Queue_20_1.io_enq_bits_user <= NastiIOTileLinkIOConverter_1.io_nasti_ar_bits_user
    Queue_20_1.io_deq_ready <= T_3810_ar_ready
    Queue_21_1.io_enq_valid <= NastiIOTileLinkIOConverter_1.io_nasti_aw_valid
    Queue_21_1.io_enq_bits_addr <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_addr
    Queue_21_1.io_enq_bits_len <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_len
    Queue_21_1.io_enq_bits_size <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_size
    Queue_21_1.io_enq_bits_burst <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_burst
    Queue_21_1.io_enq_bits_lock <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_lock
    Queue_21_1.io_enq_bits_cache <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_cache
    Queue_21_1.io_enq_bits_prot <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_prot
    Queue_21_1.io_enq_bits_qos <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_qos
    Queue_21_1.io_enq_bits_region <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_region
    Queue_21_1.io_enq_bits_id <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_id
    Queue_21_1.io_enq_bits_user <= NastiIOTileLinkIOConverter_1.io_nasti_aw_bits_user
    Queue_21_1.io_deq_ready <= T_3810_aw_ready
    Queue_22_1.io_enq_valid <= NastiIOTileLinkIOConverter_1.io_nasti_w_valid
    Queue_22_1.io_enq_bits_data <= NastiIOTileLinkIOConverter_1.io_nasti_w_bits_data
    Queue_22_1.io_enq_bits_last <= NastiIOTileLinkIOConverter_1.io_nasti_w_bits_last
    Queue_22_1.io_enq_bits_id <= NastiIOTileLinkIOConverter_1.io_nasti_w_bits_id
    Queue_22_1.io_enq_bits_strb <= NastiIOTileLinkIOConverter_1.io_nasti_w_bits_strb
    Queue_22_1.io_enq_bits_user <= NastiIOTileLinkIOConverter_1.io_nasti_w_bits_user
    Queue_22_1.io_deq_ready <= T_3810_w_ready
    Queue_23_1.io_enq_valid <= T_3810_r_valid
    Queue_23_1.io_enq_bits_resp <= T_3810_r_bits_resp
    Queue_23_1.io_enq_bits_data <= T_3810_r_bits_data
    Queue_23_1.io_enq_bits_last <= T_3810_r_bits_last
    Queue_23_1.io_enq_bits_id <= T_3810_r_bits_id
    Queue_23_1.io_enq_bits_user <= T_3810_r_bits_user
    Queue_23_1.io_deq_ready <= NastiIOTileLinkIOConverter_1.io_nasti_r_ready
    Queue_24_1.io_enq_valid <= T_3810_b_valid
    Queue_24_1.io_enq_bits_resp <= T_3810_b_bits_resp
    Queue_24_1.io_enq_bits_id <= T_3810_b_bits_id
    Queue_24_1.io_enq_bits_user <= T_3810_b_bits_user
    Queue_24_1.io_deq_ready <= NastiIOTileLinkIOConverter_1.io_nasti_b_ready

  module SimAXIMem :
    input clk : Clock
    input reset : UInt<1>
    output io_axi_aw_ready : UInt<1>
    input io_axi_aw_valid : UInt<1>
    input io_axi_aw_bits_addr : UInt<32>
    input io_axi_aw_bits_len : UInt<8>
    input io_axi_aw_bits_size : UInt<3>
    input io_axi_aw_bits_burst : UInt<2>
    input io_axi_aw_bits_lock : UInt<1>
    input io_axi_aw_bits_cache : UInt<4>
    input io_axi_aw_bits_prot : UInt<3>
    input io_axi_aw_bits_qos : UInt<4>
    input io_axi_aw_bits_region : UInt<4>
    input io_axi_aw_bits_id : UInt<5>
    input io_axi_aw_bits_user : UInt<1>
    output io_axi_w_ready : UInt<1>
    input io_axi_w_valid : UInt<1>
    input io_axi_w_bits_data : UInt<64>
    input io_axi_w_bits_last : UInt<1>
    input io_axi_w_bits_id : UInt<5>
    input io_axi_w_bits_strb : UInt<8>
    input io_axi_w_bits_user : UInt<1>
    input io_axi_b_ready : UInt<1>
    output io_axi_b_valid : UInt<1>
    output io_axi_b_bits_resp : UInt<2>
    output io_axi_b_bits_id : UInt<5>
    output io_axi_b_bits_user : UInt<1>
    output io_axi_ar_ready : UInt<1>
    input io_axi_ar_valid : UInt<1>
    input io_axi_ar_bits_addr : UInt<32>
    input io_axi_ar_bits_len : UInt<8>
    input io_axi_ar_bits_size : UInt<3>
    input io_axi_ar_bits_burst : UInt<2>
    input io_axi_ar_bits_lock : UInt<1>
    input io_axi_ar_bits_cache : UInt<4>
    input io_axi_ar_bits_prot : UInt<3>
    input io_axi_ar_bits_qos : UInt<4>
    input io_axi_ar_bits_region : UInt<4>
    input io_axi_ar_bits_id : UInt<5>
    input io_axi_ar_bits_user : UInt<1>
    input io_axi_r_ready : UInt<1>
    output io_axi_r_valid : UInt<1>
    output io_axi_r_bits_resp : UInt<2>
    output io_axi_r_bits_data : UInt<64>
    output io_axi_r_bits_last : UInt<1>
    output io_axi_r_bits_id : UInt<5>
    output io_axi_r_bits_user : UInt<1>
  
    reg rValid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_324 = and(io_axi_ar_ready, io_axi_ar_valid)
    reg ar_addr : UInt<32>, clk with :
      reset => (UInt<1>("h0"), ar_addr)
    reg ar_len : UInt<8>, clk with :
      reset => (UInt<1>("h0"), ar_len)
    reg ar_size : UInt<3>, clk with :
      reset => (UInt<1>("h0"), ar_size)
    reg ar_burst : UInt<2>, clk with :
      reset => (UInt<1>("h0"), ar_burst)
    reg ar_lock : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ar_lock)
    reg ar_cache : UInt<4>, clk with :
      reset => (UInt<1>("h0"), ar_cache)
    reg ar_prot : UInt<3>, clk with :
      reset => (UInt<1>("h0"), ar_prot)
    reg ar_qos : UInt<4>, clk with :
      reset => (UInt<1>("h0"), ar_qos)
    reg ar_region : UInt<4>, clk with :
      reset => (UInt<1>("h0"), ar_region)
    reg ar_id : UInt<5>, clk with :
      reset => (UInt<1>("h0"), ar_id)
    reg ar_user : UInt<1>, clk with :
      reset => (UInt<1>("h0"), ar_user)
    node GEN_0 = mux(T_324, io_axi_ar_bits_addr, ar_addr)
    node GEN_1 = mux(T_324, io_axi_ar_bits_len, ar_len)
    node GEN_2 = mux(T_324, io_axi_ar_bits_size, ar_size)
    node GEN_3 = mux(T_324, io_axi_ar_bits_burst, ar_burst)
    node GEN_4 = mux(T_324, io_axi_ar_bits_lock, ar_lock)
    node GEN_5 = mux(T_324, io_axi_ar_bits_cache, ar_cache)
    node GEN_6 = mux(T_324, io_axi_ar_bits_prot, ar_prot)
    node GEN_7 = mux(T_324, io_axi_ar_bits_qos, ar_qos)
    node GEN_8 = mux(T_324, io_axi_ar_bits_region, ar_region)
    node GEN_9 = mux(T_324, io_axi_ar_bits_id, ar_id)
    node GEN_10 = mux(T_324, io_axi_ar_bits_user, ar_user)
    node T_337 = eq(rValid, UInt<1>("h0"))
    node GEN_11 = mux(T_324, UInt<1>("h1"), rValid)
    node T_340 = and(io_axi_r_ready, io_axi_r_valid)
    node T_341 = eq(ar_burst, UInt<2>("h1"))
    node T_342 = or(T_341, reset)
    node T_344 = eq(T_342, UInt<1>("h0"))
    node T_346 = dshlw(UInt<8>("h1"), ar_size)
    node GEN_48 = pad(T_346, 32)
    node T_347 = add(ar_addr, GEN_48)
    node T_348 = tail(T_347, 1)
    node T_350 = sub(ar_len, UInt<8>("h1"))
    node T_351 = tail(T_350, 1)
    node T_353 = eq(ar_len, UInt<8>("h0"))
    node GEN_12 = mux(T_353, UInt<1>("h0"), GEN_11)
    node GEN_13 = mux(T_340, T_348, GEN_0)
    node GEN_14 = mux(T_340, T_351, GEN_1)
    node GEN_15 = mux(T_340, GEN_12, GEN_11)
    mem mem :
      data-type => UInt<64>
      depth => 33554432
      read-latency => 0
      write-latency => 1
      reader => T_446
      reader => T_455
      writer => T_451
      read-under-write => undefined
    mem.T_446.en <= T_379
    mem.T_446.addr <= T_445
    mem.T_455.en <= UInt<1>("h1")
    mem.T_455.addr <= T_454
    mem.T_451.en <= T_379
    mem.T_451.mask <= T_379
    mem.T_451.addr <= T_445
    mem.T_451.data <= T_448
    reg wValid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    reg bValid : UInt<1>, clk with :
      reset => (reset, UInt<1>("h0"))
    node T_358 = and(io_axi_aw_ready, io_axi_aw_valid)
    reg aw_addr : UInt<32>, clk with :
      reset => (UInt<1>("h0"), aw_addr)
    reg aw_len : UInt<8>, clk with :
      reset => (UInt<1>("h0"), aw_len)
    reg aw_size : UInt<3>, clk with :
      reset => (UInt<1>("h0"), aw_size)
    reg aw_burst : UInt<2>, clk with :
      reset => (UInt<1>("h0"), aw_burst)
    reg aw_lock : UInt<1>, clk with :
      reset => (UInt<1>("h0"), aw_lock)
    reg aw_cache : UInt<4>, clk with :
      reset => (UInt<1>("h0"), aw_cache)
    reg aw_prot : UInt<3>, clk with :
      reset => (UInt<1>("h0"), aw_prot)
    reg aw_qos : UInt<4>, clk with :
      reset => (UInt<1>("h0"), aw_qos)
    reg aw_region : UInt<4>, clk with :
      reset => (UInt<1>("h0"), aw_region)
    reg aw_id : UInt<5>, clk with :
      reset => (UInt<1>("h0"), aw_id)
    reg aw_user : UInt<1>, clk with :
      reset => (UInt<1>("h0"), aw_user)
    node GEN_16 = mux(T_358, io_axi_aw_bits_addr, aw_addr)
    node GEN_17 = mux(T_358, io_axi_aw_bits_len, aw_len)
    node GEN_18 = mux(T_358, io_axi_aw_bits_size, aw_size)
    node GEN_19 = mux(T_358, io_axi_aw_bits_burst, aw_burst)
    node GEN_20 = mux(T_358, io_axi_aw_bits_lock, aw_lock)
    node GEN_21 = mux(T_358, io_axi_aw_bits_cache, aw_cache)
    node GEN_22 = mux(T_358, io_axi_aw_bits_prot, aw_prot)
    node GEN_23 = mux(T_358, io_axi_aw_bits_qos, aw_qos)
    node GEN_24 = mux(T_358, io_axi_aw_bits_region, aw_region)
    node GEN_25 = mux(T_358, io_axi_aw_bits_id, aw_id)
    node GEN_26 = mux(T_358, io_axi_aw_bits_user, aw_user)
    node T_371 = eq(wValid, UInt<1>("h0"))
    node T_373 = eq(bValid, UInt<1>("h0"))
    node T_374 = and(T_371, T_373)
    node T_375 = and(io_axi_b_ready, io_axi_b_valid)
    node GEN_27 = mux(T_375, UInt<1>("h0"), bValid)
    node GEN_28 = mux(T_358, UInt<1>("h1"), wValid)
    node T_379 = and(io_axi_w_ready, io_axi_w_valid)
    node T_380 = eq(aw_burst, UInt<2>("h1"))
    node T_381 = or(T_380, reset)
    node T_383 = eq(T_381, UInt<1>("h0"))
    node T_385 = dshlw(UInt<8>("h1"), aw_size)
    node GEN_49 = pad(T_385, 32)
    node T_386 = add(aw_addr, GEN_49)
    node T_387 = tail(T_386, 1)
    node T_389 = sub(aw_len, UInt<8>("h1"))
    node T_390 = tail(T_389, 1)
    node T_392 = eq(aw_len, UInt<8>("h0"))
    node GEN_29 = mux(T_392, UInt<1>("h0"), GEN_28)
    node GEN_30 = mux(T_392, UInt<1>("h1"), GEN_27)
    node T_395 = bits(io_axi_w_bits_strb, 0, 0)
    node T_396 = bits(io_axi_w_bits_strb, 1, 1)
    node T_397 = bits(io_axi_w_bits_strb, 2, 2)
    node T_398 = bits(io_axi_w_bits_strb, 3, 3)
    node T_399 = bits(io_axi_w_bits_strb, 4, 4)
    node T_400 = bits(io_axi_w_bits_strb, 5, 5)
    node T_401 = bits(io_axi_w_bits_strb, 6, 6)
    node T_402 = bits(io_axi_w_bits_strb, 7, 7)
    node T_406 = mux(T_395, UInt<8>("hff"), UInt<8>("h0"))
    node T_410 = mux(T_396, UInt<8>("hff"), UInt<8>("h0"))
    node T_414 = mux(T_397, UInt<8>("hff"), UInt<8>("h0"))
    node T_418 = mux(T_398, UInt<8>("hff"), UInt<8>("h0"))
    node T_422 = mux(T_399, UInt<8>("hff"), UInt<8>("h0"))
    node T_426 = mux(T_400, UInt<8>("hff"), UInt<8>("h0"))
    node T_430 = mux(T_401, UInt<8>("hff"), UInt<8>("h0"))
    node T_434 = mux(T_402, UInt<8>("hff"), UInt<8>("h0"))
    node T_435 = cat(T_410, T_406)
    node T_436 = cat(T_418, T_414)
    node T_437 = cat(T_436, T_435)
    node T_438 = cat(T_426, T_422)
    node T_439 = cat(T_434, T_430)
    node T_440 = cat(T_439, T_438)
    node T_441 = cat(T_440, T_437)
    node T_442 = and(T_441, io_axi_w_bits_data)
    node T_443 = not(T_441)
    node T_444 = shr(aw_addr, 3)
    node T_445 = bits(T_444, 24, 0)
    node T_447 = and(T_443, mem.T_446.data)
    node T_448 = or(T_442, T_447)
    node GEN_31 = mux(T_379, T_387, GEN_16)
    node GEN_32 = mux(T_379, T_390, GEN_17)
    node GEN_33 = mux(T_379, GEN_29, GEN_28)
    node GEN_34 = mux(T_379, GEN_30, GEN_27)
    node T_453 = shr(ar_addr, 3)
    node T_454 = bits(T_453, 24, 0)
    io_axi_aw_ready <= T_374
    io_axi_w_ready <= wValid
    io_axi_b_valid <= bValid
    io_axi_b_bits_resp <= UInt<2>("h0")
    io_axi_b_bits_id <= aw_id
    io_axi_b_bits_user <= UInt<1>("h0")
    io_axi_ar_ready <= T_337
    io_axi_r_valid <= rValid
    io_axi_r_bits_resp <= UInt<2>("h0")
    io_axi_r_bits_data <= mem.T_455.data
    io_axi_r_bits_last <= T_353
    io_axi_r_bits_id <= ar_id
    io_axi_r_bits_user <= UInt<1>("h0")
    rValid <= GEN_15
    ar_addr <= GEN_13
    ar_len <= GEN_14
    ar_size <= GEN_2
    ar_burst <= GEN_3
    ar_lock <= GEN_4
    ar_cache <= GEN_5
    ar_prot <= GEN_6
    ar_qos <= GEN_7
    ar_region <= GEN_8
    ar_id <= GEN_9
    ar_user <= GEN_10
    wValid <= GEN_33
    bValid <= GEN_34
    aw_addr <= GEN_31
    aw_len <= GEN_32
    aw_size <= GEN_18
    aw_burst <= GEN_19
    aw_lock <= GEN_20
    aw_cache <= GEN_21
    aw_prot <= GEN_22
    aw_qos <= GEN_23
    aw_region <= GEN_24
    aw_id <= GEN_25
    aw_user <= GEN_26
    printf(clk, and(T_340, T_344), "Assertion failed\n    at TestHarness.scala:85 assert(ar.burst === NastiConstants.BURST_INCR)\n")
    stop(clk, and(T_340, T_344), 1)
    printf(clk, and(T_379, T_383), "Assertion failed\n    at TestHarness.scala:104 assert(aw.burst === NastiConstants.BURST_INCR)\n")
    stop(clk, and(T_379, T_383), 1)

  extmodule SimDTM :
    output exit : UInt<32>
    input debug_req_ready : UInt<1>
    output debug_req_valid : UInt<1>
    output debug_req_bits_addr : UInt<5>
    output debug_req_bits_data : UInt<34>
    output debug_req_bits_op : UInt<2>
    output debug_resp_ready : UInt<1>
    input debug_resp_valid : UInt<1>
    input debug_resp_bits_data : UInt<34>
    input debug_resp_bits_resp : UInt<2>
    input reset : UInt<1>
    input clk : Clock
  
    defname = SimDTM
    

  module TestHarness :
    input clk : Clock
    input reset : UInt<1>
    output io_success : UInt<1>
  
    inst dut of ExampleTop
    inst SimAXIMem_1 of SimAXIMem
    inst SimDTM_1 of SimDTM
    node T_4 = eq(SimDTM_1.exit, UInt<32>("h1"))
    node T_6 = geq(SimDTM_1.exit, UInt<32>("h2"))
    node T_7 = shr(SimDTM_1.exit, 1)
    node T_9 = eq(reset, UInt<1>("h0"))
    io_success <= T_4
    dut.io_debug_req_valid <= SimDTM_1.debug_req_valid
    dut.io_debug_req_bits_addr <= SimDTM_1.debug_req_bits_addr
    dut.io_debug_req_bits_data <= SimDTM_1.debug_req_bits_data
    dut.io_debug_req_bits_op <= SimDTM_1.debug_req_bits_op
    dut.io_debug_resp_ready <= SimDTM_1.debug_resp_ready
    dut.io_interrupts_0 <= UInt<1>("h0")
    dut.io_interrupts_1 <= UInt<1>("h0")
    dut.io_mem_axi_0_aw_ready <= SimAXIMem_1.io_axi_aw_ready
    dut.io_mem_axi_0_w_ready <= SimAXIMem_1.io_axi_w_ready
    dut.io_mem_axi_0_b_valid <= SimAXIMem_1.io_axi_b_valid
    dut.io_mem_axi_0_b_bits_resp <= SimAXIMem_1.io_axi_b_bits_resp
    dut.io_mem_axi_0_b_bits_id <= SimAXIMem_1.io_axi_b_bits_id
    dut.io_mem_axi_0_b_bits_user <= SimAXIMem_1.io_axi_b_bits_user
    dut.io_mem_axi_0_ar_ready <= SimAXIMem_1.io_axi_ar_ready
    dut.io_mem_axi_0_r_valid <= SimAXIMem_1.io_axi_r_valid
    dut.io_mem_axi_0_r_bits_resp <= SimAXIMem_1.io_axi_r_bits_resp
    dut.io_mem_axi_0_r_bits_data <= SimAXIMem_1.io_axi_r_bits_data
    dut.io_mem_axi_0_r_bits_last <= SimAXIMem_1.io_axi_r_bits_last
    dut.io_mem_axi_0_r_bits_id <= SimAXIMem_1.io_axi_r_bits_id
    dut.io_mem_axi_0_r_bits_user <= SimAXIMem_1.io_axi_r_bits_user
    SimAXIMem_1.io_axi_aw_valid <= dut.io_mem_axi_0_aw_valid
    SimAXIMem_1.io_axi_aw_bits_addr <= dut.io_mem_axi_0_aw_bits_addr
    SimAXIMem_1.io_axi_aw_bits_len <= dut.io_mem_axi_0_aw_bits_len
    SimAXIMem_1.io_axi_aw_bits_size <= dut.io_mem_axi_0_aw_bits_size
    SimAXIMem_1.io_axi_aw_bits_burst <= dut.io_mem_axi_0_aw_bits_burst
    SimAXIMem_1.io_axi_aw_bits_lock <= dut.io_mem_axi_0_aw_bits_lock
    SimAXIMem_1.io_axi_aw_bits_cache <= dut.io_mem_axi_0_aw_bits_cache
    SimAXIMem_1.io_axi_aw_bits_prot <= dut.io_mem_axi_0_aw_bits_prot
    SimAXIMem_1.io_axi_aw_bits_qos <= dut.io_mem_axi_0_aw_bits_qos
    SimAXIMem_1.io_axi_aw_bits_region <= dut.io_mem_axi_0_aw_bits_region
    SimAXIMem_1.io_axi_aw_bits_id <= dut.io_mem_axi_0_aw_bits_id
    SimAXIMem_1.io_axi_aw_bits_user <= dut.io_mem_axi_0_aw_bits_user
    SimAXIMem_1.io_axi_w_valid <= dut.io_mem_axi_0_w_valid
    SimAXIMem_1.io_axi_w_bits_data <= dut.io_mem_axi_0_w_bits_data
    SimAXIMem_1.io_axi_w_bits_last <= dut.io_mem_axi_0_w_bits_last
    SimAXIMem_1.io_axi_w_bits_id <= dut.io_mem_axi_0_w_bits_id
    SimAXIMem_1.io_axi_w_bits_strb <= dut.io_mem_axi_0_w_bits_strb
    SimAXIMem_1.io_axi_w_bits_user <= dut.io_mem_axi_0_w_bits_user
    SimAXIMem_1.io_axi_b_ready <= dut.io_mem_axi_0_b_ready
    SimAXIMem_1.io_axi_ar_valid <= dut.io_mem_axi_0_ar_valid
    SimAXIMem_1.io_axi_ar_bits_addr <= dut.io_mem_axi_0_ar_bits_addr
    SimAXIMem_1.io_axi_ar_bits_len <= dut.io_mem_axi_0_ar_bits_len
    SimAXIMem_1.io_axi_ar_bits_size <= dut.io_mem_axi_0_ar_bits_size
    SimAXIMem_1.io_axi_ar_bits_burst <= dut.io_mem_axi_0_ar_bits_burst
    SimAXIMem_1.io_axi_ar_bits_lock <= dut.io_mem_axi_0_ar_bits_lock
    SimAXIMem_1.io_axi_ar_bits_cache <= dut.io_mem_axi_0_ar_bits_cache
    SimAXIMem_1.io_axi_ar_bits_prot <= dut.io_mem_axi_0_ar_bits_prot
    SimAXIMem_1.io_axi_ar_bits_qos <= dut.io_mem_axi_0_ar_bits_qos
    SimAXIMem_1.io_axi_ar_bits_region <= dut.io_mem_axi_0_ar_bits_region
    SimAXIMem_1.io_axi_ar_bits_id <= dut.io_mem_axi_0_ar_bits_id
    SimAXIMem_1.io_axi_ar_bits_user <= dut.io_mem_axi_0_ar_bits_user
    SimAXIMem_1.io_axi_r_ready <= dut.io_mem_axi_0_r_ready
    SimDTM_1.debug_req_ready <= dut.io_debug_req_ready
    SimDTM_1.debug_resp_valid <= dut.io_debug_resp_valid
    SimDTM_1.debug_resp_bits_data <= dut.io_debug_resp_bits_data
    SimDTM_1.debug_resp_bits_resp <= dut.io_debug_resp_bits_resp
    printf(clk, and(T_6, T_9), "*** FAILED *** (exit code = %d)\n", T_7)
    stop(clk, and(T_6, T_9), 1)

[0m[[32msuccess[0m] [0mTotal time: 15 s, completed Nov 10, 2016 4:33:20 PM[0m
