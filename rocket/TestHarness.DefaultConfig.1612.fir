circuit TestHarness : 
  module TLXbar : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1], out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[2]}
    
    io is invalid
    wire in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1] @[Xbar.scala 103:18]
    in is invalid @[Xbar.scala 103:18]
    in[0] <- io.in[0] @[Xbar.scala 106:13]
    node T_3443 = or(io.in[0].a.bits.source, UInt<1>("h00")) @[Xbar.scala 108:53]
    in[0].a.bits.source <= T_3443 @[Xbar.scala 108:27]
    node T_3445 = or(io.in[0].c.bits.source, UInt<1>("h00")) @[Xbar.scala 109:53]
    in[0].c.bits.source <= T_3445 @[Xbar.scala 109:27]
    node T_3446 = bits(in[0].b.bits.source, 1, 0) @[Xbar.scala 99:67]
    io.in[0].b.bits.source <= T_3446 @[Xbar.scala 111:30]
    node T_3447 = bits(in[0].d.bits.source, 1, 0) @[Xbar.scala 99:67]
    io.in[0].d.bits.source <= T_3447 @[Xbar.scala 112:30]
    wire out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[2] @[Xbar.scala 116:19]
    out is invalid @[Xbar.scala 116:19]
    io.out[0] <- out[0] @[Xbar.scala 119:17]
    node T_5086 = or(io.out[0].d.bits.sink, UInt<1>("h01")) @[Xbar.scala 121:51]
    out[0].d.bits.sink <= T_5086 @[Xbar.scala 121:26]
    io.out[0].e.bits.sink <= UInt<1>("h00") @[Xbar.scala 123:29]
    io.out[1] <- out[1] @[Xbar.scala 119:17]
    node T_5089 = or(io.out[1].d.bits.sink, UInt<1>("h00")) @[Xbar.scala 121:51]
    out[1].d.bits.sink <= T_5089 @[Xbar.scala 121:26]
    io.out[1].e.bits.sink <= UInt<1>("h00") @[Xbar.scala 123:29]
    wire grantedAIO : UInt<1>[2][1] @[Xbar.scala 127:26]
    grantedAIO is invalid @[Xbar.scala 127:26]
    wire grantedBOI : UInt<1>[1][2] @[Xbar.scala 128:26]
    grantedBOI is invalid @[Xbar.scala 128:26]
    wire grantedCIO : UInt<1>[2][1] @[Xbar.scala 129:26]
    grantedCIO is invalid @[Xbar.scala 129:26]
    wire grantedDOI : UInt<1>[1][2] @[Xbar.scala 130:26]
    grantedDOI is invalid @[Xbar.scala 130:26]
    wire grantedEIO : UInt<1>[2][1] @[Xbar.scala 131:26]
    grantedEIO is invalid @[Xbar.scala 131:26]
    wire T_5263 : UInt<1>[1] @[Xbar.scala 100:92]
    T_5263 is invalid @[Xbar.scala 100:92]
    T_5263[0] <= grantedAIO[0][0] @[Xbar.scala 100:92]
    wire T_5270 : UInt<1>[1] @[Xbar.scala 100:92]
    T_5270 is invalid @[Xbar.scala 100:92]
    T_5270[0] <= grantedAIO[0][1] @[Xbar.scala 100:92]
    wire grantedAOI : UInt<1>[1][2] @[Xbar.scala 100:64]
    grantedAOI is invalid @[Xbar.scala 100:64]
    grantedAOI[0] <= T_5263 @[Xbar.scala 100:64]
    grantedAOI[1] <= T_5270 @[Xbar.scala 100:64]
    wire T_5310 : UInt<1>[2] @[Xbar.scala 100:92]
    T_5310 is invalid @[Xbar.scala 100:92]
    T_5310[0] <= grantedBOI[0][0] @[Xbar.scala 100:92]
    T_5310[1] <= grantedBOI[1][0] @[Xbar.scala 100:92]
    wire grantedBIO : UInt<1>[2][1] @[Xbar.scala 100:64]
    grantedBIO is invalid @[Xbar.scala 100:64]
    grantedBIO[0] <= T_5310 @[Xbar.scala 100:64]
    wire T_5344 : UInt<1>[1] @[Xbar.scala 100:92]
    T_5344 is invalid @[Xbar.scala 100:92]
    T_5344[0] <= grantedCIO[0][0] @[Xbar.scala 100:92]
    wire T_5351 : UInt<1>[1] @[Xbar.scala 100:92]
    T_5351 is invalid @[Xbar.scala 100:92]
    T_5351[0] <= grantedCIO[0][1] @[Xbar.scala 100:92]
    wire grantedCOI : UInt<1>[1][2] @[Xbar.scala 100:64]
    grantedCOI is invalid @[Xbar.scala 100:64]
    grantedCOI[0] <= T_5344 @[Xbar.scala 100:64]
    grantedCOI[1] <= T_5351 @[Xbar.scala 100:64]
    wire T_5391 : UInt<1>[2] @[Xbar.scala 100:92]
    T_5391 is invalid @[Xbar.scala 100:92]
    T_5391[0] <= grantedDOI[0][0] @[Xbar.scala 100:92]
    T_5391[1] <= grantedDOI[1][0] @[Xbar.scala 100:92]
    wire grantedDIO : UInt<1>[2][1] @[Xbar.scala 100:64]
    grantedDIO is invalid @[Xbar.scala 100:64]
    grantedDIO[0] <= T_5391 @[Xbar.scala 100:64]
    wire T_5425 : UInt<1>[1] @[Xbar.scala 100:92]
    T_5425 is invalid @[Xbar.scala 100:92]
    T_5425[0] <= grantedEIO[0][0] @[Xbar.scala 100:92]
    wire T_5432 : UInt<1>[1] @[Xbar.scala 100:92]
    T_5432 is invalid @[Xbar.scala 100:92]
    T_5432[0] <= grantedEIO[0][1] @[Xbar.scala 100:92]
    wire grantedEOI : UInt<1>[1][2] @[Xbar.scala 100:64]
    grantedEOI is invalid @[Xbar.scala 100:64]
    grantedEOI[0] <= T_5425 @[Xbar.scala 100:64]
    grantedEOI[1] <= T_5432 @[Xbar.scala 100:64]
    node T_5467 = and(grantedAOI[0][0], in[0].a.valid) @[Xbar.scala 140:84]
    out[0].a.valid <= T_5467 @[Xbar.scala 144:22]
    out[0].a.bits <- in[0].a.bits @[Xbar.scala 145:22]
    node T_5468 = and(grantedBOI[0][0], in[0].b.ready) @[Xbar.scala 140:84]
    out[0].b.ready <= T_5468 @[Xbar.scala 146:22]
    node T_5469 = and(grantedCOI[0][0], in[0].c.valid) @[Xbar.scala 140:84]
    out[0].c.valid <= T_5469 @[Xbar.scala 147:22]
    out[0].c.bits <- in[0].c.bits @[Xbar.scala 148:22]
    node T_5470 = and(grantedDOI[0][0], in[0].d.ready) @[Xbar.scala 140:84]
    out[0].d.ready <= T_5470 @[Xbar.scala 149:22]
    node T_5471 = and(grantedEOI[0][0], in[0].e.valid) @[Xbar.scala 140:84]
    out[0].e.valid <= T_5471 @[Xbar.scala 150:22]
    out[0].e.bits <- in[0].e.bits @[Xbar.scala 151:22]
    node T_5472 = and(grantedAOI[1][0], in[0].a.valid) @[Xbar.scala 140:84]
    out[1].a.valid <= T_5472 @[Xbar.scala 144:22]
    out[1].a.bits <- in[0].a.bits @[Xbar.scala 145:22]
    node T_5473 = and(grantedBOI[1][0], in[0].b.ready) @[Xbar.scala 140:84]
    out[1].b.ready <= T_5473 @[Xbar.scala 146:22]
    node T_5474 = and(grantedCOI[1][0], in[0].c.valid) @[Xbar.scala 140:84]
    out[1].c.valid <= T_5474 @[Xbar.scala 147:22]
    out[1].c.bits <- in[0].c.bits @[Xbar.scala 148:22]
    node T_5475 = and(grantedDOI[1][0], in[0].d.ready) @[Xbar.scala 140:84]
    out[1].d.ready <= T_5475 @[Xbar.scala 149:22]
    node T_5476 = and(grantedEOI[1][0], in[0].e.valid) @[Xbar.scala 140:84]
    out[1].e.valid <= T_5476 @[Xbar.scala 150:22]
    out[1].e.bits <- in[0].e.bits @[Xbar.scala 151:22]
    node T_5477 = and(grantedAIO[0][0], out[0].a.ready) @[Xbar.scala 140:84]
    node T_5478 = and(grantedAIO[0][1], out[1].a.ready) @[Xbar.scala 140:84]
    node T_5479 = or(T_5477, T_5478) @[Xbar.scala 140:100]
    in[0].a.ready <= T_5479 @[Xbar.scala 156:21]
    node T_5480 = and(grantedBIO[0][0], out[0].b.valid) @[Xbar.scala 140:84]
    node T_5481 = and(grantedBIO[0][1], out[1].b.valid) @[Xbar.scala 140:84]
    node T_5482 = or(T_5480, T_5481) @[Xbar.scala 140:100]
    in[0].b.valid <= T_5482 @[Xbar.scala 157:21]
    node T_5483 = cat(out[0].b.bits.addr_hi, out[0].b.bits.mask) @[Mux.scala 18:72]
    node T_5484 = cat(T_5483, out[0].b.bits.data) @[Mux.scala 18:72]
    node T_5485 = cat(out[0].b.bits.size, out[0].b.bits.source) @[Mux.scala 18:72]
    node T_5486 = cat(out[0].b.bits.opcode, out[0].b.bits.param) @[Mux.scala 18:72]
    node T_5487 = cat(T_5486, T_5485) @[Mux.scala 18:72]
    node T_5488 = cat(T_5487, T_5484) @[Mux.scala 18:72]
    node T_5490 = mux(grantedBIO[0][0], T_5488, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_5491 = cat(out[1].b.bits.addr_hi, out[1].b.bits.mask) @[Mux.scala 18:72]
    node T_5492 = cat(T_5491, out[1].b.bits.data) @[Mux.scala 18:72]
    node T_5493 = cat(out[1].b.bits.size, out[1].b.bits.source) @[Mux.scala 18:72]
    node T_5494 = cat(out[1].b.bits.opcode, out[1].b.bits.param) @[Mux.scala 18:72]
    node T_5495 = cat(T_5494, T_5493) @[Mux.scala 18:72]
    node T_5496 = cat(T_5495, T_5492) @[Mux.scala 18:72]
    node T_5498 = mux(grantedBIO[0][1], T_5496, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_5507 = or(T_5490, T_5498) @[Mux.scala 18:72]
    wire T_5516 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>} @[Mux.scala 18:72]
    T_5516 is invalid @[Mux.scala 18:72]
    node T_5524 = bits(T_5507, 31, 0) @[Mux.scala 18:72]
    T_5516.data <= T_5524 @[Mux.scala 18:72]
    node T_5525 = bits(T_5507, 35, 32) @[Mux.scala 18:72]
    T_5516.mask <= T_5525 @[Mux.scala 18:72]
    node T_5526 = bits(T_5507, 64, 36) @[Mux.scala 18:72]
    T_5516.addr_hi <= T_5526 @[Mux.scala 18:72]
    node T_5527 = bits(T_5507, 66, 65) @[Mux.scala 18:72]
    T_5516.source <= T_5527 @[Mux.scala 18:72]
    node T_5528 = bits(T_5507, 70, 67) @[Mux.scala 18:72]
    T_5516.size <= T_5528 @[Mux.scala 18:72]
    node T_5529 = bits(T_5507, 73, 71) @[Mux.scala 18:72]
    T_5516.param <= T_5529 @[Mux.scala 18:72]
    node T_5530 = bits(T_5507, 76, 74) @[Mux.scala 18:72]
    T_5516.opcode <= T_5530 @[Mux.scala 18:72]
    in[0].b.bits <- T_5516 @[Xbar.scala 158:21]
    node T_5531 = and(grantedCIO[0][0], out[0].c.ready) @[Xbar.scala 140:84]
    node T_5532 = and(grantedCIO[0][1], out[1].c.ready) @[Xbar.scala 140:84]
    node T_5533 = or(T_5531, T_5532) @[Xbar.scala 140:100]
    in[0].c.ready <= T_5533 @[Xbar.scala 159:21]
    node T_5534 = and(grantedDIO[0][0], out[0].d.valid) @[Xbar.scala 140:84]
    node T_5535 = and(grantedDIO[0][1], out[1].d.valid) @[Xbar.scala 140:84]
    node T_5536 = or(T_5534, T_5535) @[Xbar.scala 140:100]
    in[0].d.valid <= T_5536 @[Xbar.scala 160:21]
    node T_5537 = cat(out[0].d.bits.data, out[0].d.bits.error) @[Mux.scala 18:72]
    node T_5538 = cat(out[0].d.bits.sink, out[0].d.bits.addr_lo) @[Mux.scala 18:72]
    node T_5539 = cat(T_5538, T_5537) @[Mux.scala 18:72]
    node T_5540 = cat(out[0].d.bits.size, out[0].d.bits.source) @[Mux.scala 18:72]
    node T_5541 = cat(out[0].d.bits.opcode, out[0].d.bits.param) @[Mux.scala 18:72]
    node T_5542 = cat(T_5541, T_5540) @[Mux.scala 18:72]
    node T_5543 = cat(T_5542, T_5539) @[Mux.scala 18:72]
    node T_5545 = mux(grantedDIO[0][0], T_5543, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_5546 = cat(out[1].d.bits.data, out[1].d.bits.error) @[Mux.scala 18:72]
    node T_5547 = cat(out[1].d.bits.sink, out[1].d.bits.addr_lo) @[Mux.scala 18:72]
    node T_5548 = cat(T_5547, T_5546) @[Mux.scala 18:72]
    node T_5549 = cat(out[1].d.bits.size, out[1].d.bits.source) @[Mux.scala 18:72]
    node T_5550 = cat(out[1].d.bits.opcode, out[1].d.bits.param) @[Mux.scala 18:72]
    node T_5551 = cat(T_5550, T_5549) @[Mux.scala 18:72]
    node T_5552 = cat(T_5551, T_5548) @[Mux.scala 18:72]
    node T_5554 = mux(grantedDIO[0][1], T_5552, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_5564 = or(T_5545, T_5554) @[Mux.scala 18:72]
    wire T_5574 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>} @[Mux.scala 18:72]
    T_5574 is invalid @[Mux.scala 18:72]
    node T_5583 = bits(T_5564, 0, 0) @[Mux.scala 18:72]
    T_5574.error <= T_5583 @[Mux.scala 18:72]
    node T_5584 = bits(T_5564, 32, 1) @[Mux.scala 18:72]
    T_5574.data <= T_5584 @[Mux.scala 18:72]
    node T_5585 = bits(T_5564, 34, 33) @[Mux.scala 18:72]
    T_5574.addr_lo <= T_5585 @[Mux.scala 18:72]
    node T_5586 = bits(T_5564, 35, 35) @[Mux.scala 18:72]
    T_5574.sink <= T_5586 @[Mux.scala 18:72]
    node T_5587 = bits(T_5564, 37, 36) @[Mux.scala 18:72]
    T_5574.source <= T_5587 @[Mux.scala 18:72]
    node T_5588 = bits(T_5564, 41, 38) @[Mux.scala 18:72]
    T_5574.size <= T_5588 @[Mux.scala 18:72]
    node T_5589 = bits(T_5564, 43, 42) @[Mux.scala 18:72]
    T_5574.param <= T_5589 @[Mux.scala 18:72]
    node T_5590 = bits(T_5564, 46, 44) @[Mux.scala 18:72]
    T_5574.opcode <= T_5590 @[Mux.scala 18:72]
    in[0].d.bits <- T_5574 @[Xbar.scala 161:21]
    node T_5591 = and(grantedEIO[0][0], out[0].e.ready) @[Xbar.scala 140:84]
    node T_5592 = and(grantedEIO[0][1], out[1].e.ready) @[Xbar.scala 140:84]
    node T_5593 = or(T_5591, T_5592) @[Xbar.scala 140:100]
    in[0].e.ready <= T_5593 @[Xbar.scala 162:21]
    node T_5595 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
    node T_5596 = dshl(T_5595, in[0].a.bits.size) @[package.scala 11:71]
    node T_5597 = bits(T_5596, 1, 0) @[package.scala 11:76]
    node T_5598 = not(T_5597) @[package.scala 11:40]
    node T_5599 = bits(in[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
    node T_5600 = bits(in[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
    node T_5602 = neq(T_5600, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_5604 = eq(T_5602, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_5605 = or(T_5599, T_5600) @[Edges.scala 63:32]
    node T_5606 = bits(T_5605, 0, 0) @[Edges.scala 58:14]
    node T_5607 = not(T_5606) @[Edges.scala 58:9]
    node T_5608 = cat(T_5604, T_5607) @[Cat.scala 20:58]
    node T_5609 = not(T_5598) @[Edges.scala 66:39]
    node T_5610 = and(T_5608, T_5609) @[Edges.scala 66:37]
    node T_5611 = cat(in[0].a.bits.addr_hi, T_5610) @[Cat.scala 20:58]
    node T_5612 = cat(in[0].c.bits.addr_hi, in[0].c.bits.addr_lo) @[Cat.scala 20:58]
    node T_5614 = xor(T_5611, UInt<1>("h00")) @[Parameters.scala 89:31]
    node T_5615 = cvt(T_5614) @[Parameters.scala 89:49]
    node T_5617 = and(T_5615, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_5618 = asSInt(T_5617) @[Parameters.scala 89:52]
    node T_5620 = eq(T_5618, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    node T_5621 = and(in[0].a.valid, T_5620) @[Xbar.scala 168:78]
    node T_5623 = xor(T_5611, UInt<27>("h04000000")) @[Parameters.scala 89:31]
    node T_5624 = cvt(T_5623) @[Parameters.scala 89:49]
    node T_5626 = and(T_5624, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_5627 = asSInt(T_5626) @[Parameters.scala 89:52]
    node T_5629 = eq(T_5627, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    node T_5630 = and(in[0].a.valid, T_5629) @[Xbar.scala 168:78]
    wire T_5636 : UInt<1>[2] @[Xbar.scala 168:49]
    T_5636 is invalid @[Xbar.scala 168:49]
    T_5636[0] <= T_5621 @[Xbar.scala 168:49]
    T_5636[1] <= T_5630 @[Xbar.scala 168:49]
    wire requestAIO : UInt<1>[2][1] @[Xbar.scala 168:25]
    requestAIO is invalid @[Xbar.scala 168:25]
    requestAIO[0] <= T_5636 @[Xbar.scala 168:25]
    node T_5666 = xor(T_5612, UInt<1>("h00")) @[Parameters.scala 89:31]
    node T_5667 = cvt(T_5666) @[Parameters.scala 89:49]
    node T_5669 = and(T_5667, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_5670 = asSInt(T_5669) @[Parameters.scala 89:52]
    node T_5672 = eq(T_5670, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    node T_5673 = and(in[0].c.valid, T_5672) @[Xbar.scala 169:78]
    node T_5675 = xor(T_5612, UInt<27>("h04000000")) @[Parameters.scala 89:31]
    node T_5676 = cvt(T_5675) @[Parameters.scala 89:49]
    node T_5678 = and(T_5676, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_5679 = asSInt(T_5678) @[Parameters.scala 89:52]
    node T_5681 = eq(T_5679, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    node T_5682 = and(in[0].c.valid, T_5681) @[Xbar.scala 169:78]
    wire T_5688 : UInt<1>[2] @[Xbar.scala 169:49]
    T_5688 is invalid @[Xbar.scala 169:49]
    T_5688[0] <= T_5673 @[Xbar.scala 169:49]
    T_5688[1] <= T_5682 @[Xbar.scala 169:49]
    wire requestCIO : UInt<1>[2][1] @[Xbar.scala 169:25]
    requestCIO is invalid @[Xbar.scala 169:25]
    requestCIO[0] <= T_5688 @[Xbar.scala 169:25]
    node T_5718 = xor(UInt<1>("h00"), out[0].b.bits.source) @[Parameters.scala 37:23]
    node T_5719 = not(T_5718) @[Parameters.scala 37:9]
    node T_5721 = or(T_5719, UInt<2>("h03")) @[Parameters.scala 37:28]
    node T_5722 = not(T_5721) @[Parameters.scala 37:7]
    node T_5724 = eq(T_5722, UInt<1>("h00")) @[Parameters.scala 37:49]
    node T_5725 = and(out[0].b.valid, T_5724) @[Xbar.scala 171:81]
    wire T_5731 : UInt<1>[1] @[Xbar.scala 171:44]
    T_5731 is invalid @[Xbar.scala 171:44]
    T_5731[0] <= T_5725 @[Xbar.scala 171:44]
    node T_5734 = xor(UInt<1>("h00"), out[1].b.bits.source) @[Parameters.scala 37:23]
    node T_5735 = not(T_5734) @[Parameters.scala 37:9]
    node T_5737 = or(T_5735, UInt<2>("h03")) @[Parameters.scala 37:28]
    node T_5738 = not(T_5737) @[Parameters.scala 37:7]
    node T_5740 = eq(T_5738, UInt<1>("h00")) @[Parameters.scala 37:49]
    node T_5741 = and(out[1].b.valid, T_5740) @[Xbar.scala 171:81]
    wire T_5747 : UInt<1>[1] @[Xbar.scala 171:44]
    T_5747 is invalid @[Xbar.scala 171:44]
    T_5747[0] <= T_5741 @[Xbar.scala 171:44]
    wire requestBOI : UInt<1>[1][2] @[Xbar.scala 171:25]
    requestBOI is invalid @[Xbar.scala 171:25]
    requestBOI[0] <= T_5731 @[Xbar.scala 171:25]
    requestBOI[1] <= T_5747 @[Xbar.scala 171:25]
    node T_5783 = xor(UInt<1>("h00"), out[0].d.bits.source) @[Parameters.scala 37:23]
    node T_5784 = not(T_5783) @[Parameters.scala 37:9]
    node T_5786 = or(T_5784, UInt<2>("h03")) @[Parameters.scala 37:28]
    node T_5787 = not(T_5786) @[Parameters.scala 37:7]
    node T_5789 = eq(T_5787, UInt<1>("h00")) @[Parameters.scala 37:49]
    node T_5790 = and(out[0].d.valid, T_5789) @[Xbar.scala 172:81]
    wire T_5796 : UInt<1>[1] @[Xbar.scala 172:44]
    T_5796 is invalid @[Xbar.scala 172:44]
    T_5796[0] <= T_5790 @[Xbar.scala 172:44]
    node T_5799 = xor(UInt<1>("h00"), out[1].d.bits.source) @[Parameters.scala 37:23]
    node T_5800 = not(T_5799) @[Parameters.scala 37:9]
    node T_5802 = or(T_5800, UInt<2>("h03")) @[Parameters.scala 37:28]
    node T_5803 = not(T_5802) @[Parameters.scala 37:7]
    node T_5805 = eq(T_5803, UInt<1>("h00")) @[Parameters.scala 37:49]
    node T_5806 = and(out[1].d.valid, T_5805) @[Xbar.scala 172:81]
    wire T_5812 : UInt<1>[1] @[Xbar.scala 172:44]
    T_5812 is invalid @[Xbar.scala 172:44]
    T_5812[0] <= T_5806 @[Xbar.scala 172:44]
    wire requestDOI : UInt<1>[1][2] @[Xbar.scala 172:25]
    requestDOI is invalid @[Xbar.scala 172:25]
    requestDOI[0] <= T_5796 @[Xbar.scala 172:25]
    requestDOI[1] <= T_5812 @[Xbar.scala 172:25]
    node T_5848 = eq(UInt<1>("h01"), in[0].e.bits.sink) @[Parameters.scala 35:39]
    node T_5849 = and(in[0].e.valid, T_5848) @[Xbar.scala 173:81]
    node T_5851 = eq(UInt<1>("h00"), in[0].e.bits.sink) @[Parameters.scala 35:39]
    node T_5852 = and(in[0].e.valid, T_5851) @[Xbar.scala 173:81]
    wire T_5858 : UInt<1>[2] @[Xbar.scala 173:44]
    T_5858 is invalid @[Xbar.scala 173:44]
    T_5858[0] <= T_5849 @[Xbar.scala 173:44]
    T_5858[1] <= T_5852 @[Xbar.scala 173:44]
    wire requestEIO : UInt<1>[2][1] @[Xbar.scala 173:25]
    requestEIO is invalid @[Xbar.scala 173:25]
    requestEIO[0] <= T_5858 @[Xbar.scala 173:25]
    node T_5887 = bits(in[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
    node T_5889 = eq(T_5887, UInt<1>("h00")) @[Edges.scala 125:28]
    node T_5891 = leq(in[0].a.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
    node T_5893 = bits(in[0].a.bits.size, 3, 0) @[OneHot.scala 46:21]
    node T_5894 = dshl(UInt<1>("h01"), T_5893) @[OneHot.scala 46:16]
    node T_5895 = bits(T_5894, 8, 0) @[OneHot.scala 46:41]
    node T_5896 = shr(T_5895, 2) @[Edges.scala 209:50]
    node T_5897 = or(T_5896, T_5891) @[Edges.scala 210:29]
    node T_5899 = mux(T_5889, T_5897, UInt<1>("h01")) @[Edges.scala 210:12]
    wire beatsA : UInt<7>[1] @[Xbar.scala 175:21]
    beatsA is invalid @[Xbar.scala 175:21]
    beatsA[0] <= T_5899 @[Xbar.scala 175:21]
    node T_5906 = bits(out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
    node T_5908 = eq(T_5906, UInt<1>("h00")) @[Edges.scala 130:28]
    node T_5911 = leq(out[0].b.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
    node T_5913 = bits(out[0].b.bits.size, 3, 0) @[OneHot.scala 46:21]
    node T_5914 = dshl(UInt<1>("h01"), T_5913) @[OneHot.scala 46:16]
    node T_5915 = bits(T_5914, 8, 0) @[OneHot.scala 46:41]
    node T_5916 = shr(T_5915, 2) @[Edges.scala 209:50]
    node T_5917 = or(T_5916, T_5911) @[Edges.scala 210:29]
    node T_5919 = mux(UInt<1>("h00"), T_5917, UInt<1>("h01")) @[Edges.scala 210:12]
    node T_5920 = bits(out[1].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
    node T_5922 = eq(T_5920, UInt<1>("h00")) @[Edges.scala 130:28]
    node T_5925 = leq(out[1].b.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
    node T_5927 = bits(out[1].b.bits.size, 3, 0) @[OneHot.scala 46:21]
    node T_5928 = dshl(UInt<1>("h01"), T_5927) @[OneHot.scala 46:16]
    node T_5929 = bits(T_5928, 8, 0) @[OneHot.scala 46:41]
    node T_5930 = shr(T_5929, 2) @[Edges.scala 209:50]
    node T_5931 = or(T_5930, T_5925) @[Edges.scala 210:29]
    node T_5933 = mux(UInt<1>("h00"), T_5931, UInt<1>("h01")) @[Edges.scala 210:12]
    wire beatsB : UInt<7>[2] @[Xbar.scala 176:21]
    beatsB is invalid @[Xbar.scala 176:21]
    beatsB[0] <= T_5919 @[Xbar.scala 176:21]
    beatsB[1] <= T_5933 @[Xbar.scala 176:21]
    node T_5940 = bits(in[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
    node T_5943 = leq(in[0].c.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
    node T_5945 = bits(in[0].c.bits.size, 3, 0) @[OneHot.scala 46:21]
    node T_5946 = dshl(UInt<1>("h01"), T_5945) @[OneHot.scala 46:16]
    node T_5947 = bits(T_5946, 8, 0) @[OneHot.scala 46:41]
    node T_5948 = shr(T_5947, 2) @[Edges.scala 209:50]
    node T_5949 = or(T_5948, T_5943) @[Edges.scala 210:29]
    node T_5951 = mux(UInt<1>("h00"), T_5949, UInt<1>("h01")) @[Edges.scala 210:12]
    wire beatsC : UInt<7>[1] @[Xbar.scala 177:21]
    beatsC is invalid @[Xbar.scala 177:21]
    beatsC[0] <= T_5951 @[Xbar.scala 177:21]
    node T_5958 = bits(out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
    node T_5961 = leq(out[0].d.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
    node T_5963 = bits(out[0].d.bits.size, 3, 0) @[OneHot.scala 46:21]
    node T_5964 = dshl(UInt<1>("h01"), T_5963) @[OneHot.scala 46:16]
    node T_5965 = bits(T_5964, 8, 0) @[OneHot.scala 46:41]
    node T_5966 = shr(T_5965, 2) @[Edges.scala 209:50]
    node T_5967 = or(T_5966, T_5961) @[Edges.scala 210:29]
    node T_5969 = mux(UInt<1>("h01"), T_5967, UInt<1>("h01")) @[Edges.scala 210:12]
    node T_5970 = bits(out[1].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
    node T_5972 = leq(out[1].d.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
    node T_5974 = bits(out[1].d.bits.size, 3, 0) @[OneHot.scala 46:21]
    node T_5975 = dshl(UInt<1>("h01"), T_5974) @[OneHot.scala 46:16]
    node T_5976 = bits(T_5975, 8, 0) @[OneHot.scala 46:41]
    node T_5977 = shr(T_5976, 2) @[Edges.scala 209:50]
    node T_5978 = or(T_5977, T_5972) @[Edges.scala 210:29]
    node T_5980 = mux(T_5970, T_5978, UInt<1>("h01")) @[Edges.scala 210:12]
    wire beatsD : UInt<7>[2] @[Xbar.scala 178:21]
    beatsD is invalid @[Xbar.scala 178:21]
    beatsD[0] <= T_5969 @[Xbar.scala 178:21]
    beatsD[1] <= T_5980 @[Xbar.scala 178:21]
    wire beatsE : UInt<1>[1] @[Xbar.scala 179:21]
    beatsE is invalid @[Xbar.scala 179:21]
    beatsE[0] <= UInt<1>("h01") @[Xbar.scala 179:21]
    wire T_6001 : UInt<1>[2] @[Xbar.scala 182:70]
    T_6001 is invalid @[Xbar.scala 182:70]
    T_6001[0] <= UInt<1>("h00") @[Xbar.scala 182:70]
    T_6001[1] <= UInt<1>("h00") @[Xbar.scala 182:70]
    wire maskIO : UInt<1>[2][1] @[Xbar.scala 182:40]
    maskIO is invalid @[Xbar.scala 182:40]
    maskIO[0] <= T_6001 @[Xbar.scala 182:40]
    wire T_6035 : UInt<1>[1] @[Xbar.scala 100:92]
    T_6035 is invalid @[Xbar.scala 100:92]
    T_6035[0] <= maskIO[0][0] @[Xbar.scala 100:92]
    wire T_6042 : UInt<1>[1] @[Xbar.scala 100:92]
    T_6042 is invalid @[Xbar.scala 100:92]
    T_6042[0] <= maskIO[0][1] @[Xbar.scala 100:92]
    wire maskOI : UInt<1>[1][2] @[Xbar.scala 100:64]
    maskOI is invalid @[Xbar.scala 100:64]
    maskOI[0] <= T_6035 @[Xbar.scala 100:64]
    maskOI[1] <= T_6042 @[Xbar.scala 100:64]
    node T_6077 = and(out[0].a.ready, out[0].a.valid) @[Decoupled.scala 21:42]
    node T_6078 = and(out[1].a.ready, out[1].a.valid) @[Decoupled.scala 21:42]
    node T_6080 = or(UInt<1>("h00"), requestAIO[0][0]) @[Xbar.scala 200:58]
    node T_6081 = or(T_6080, requestAIO[0][1]) @[Xbar.scala 200:58]
    node T_6082 = and(UInt<1>("h00"), requestAIO[0][0]) @[Xbar.scala 201:64]
    node T_6083 = and(T_6080, requestAIO[0][1]) @[Xbar.scala 201:64]
    node T_6084 = or(T_6082, T_6083) @[Xbar.scala 201:79]
    node T_6086 = eq(T_6084, UInt<1>("h00")) @[Xbar.scala 201:17]
    node T_6087 = or(T_6086, reset) @[Xbar.scala 201:16]
    node T_6089 = eq(T_6087, UInt<1>("h00")) @[Xbar.scala 201:16]
    when T_6089 : @[Xbar.scala 201:16]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:201 assert (!(prefixOR zip resources).map{case (a, b) => a && b}.reduce(_ || _))\n") @[Xbar.scala 201:16]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 201:16]
      skip @[Xbar.scala 201:16]
    wire T_6095 : UInt<1>[1] @[Xbar.scala 100:92]
    T_6095 is invalid @[Xbar.scala 100:92]
    T_6095[0] <= requestAIO[0][0] @[Xbar.scala 100:92]
    wire T_6102 : UInt<1>[1] @[Xbar.scala 100:92]
    T_6102 is invalid @[Xbar.scala 100:92]
    T_6102[0] <= requestAIO[0][1] @[Xbar.scala 100:92]
    wire T_6127 : UInt<1>[1][2] @[Xbar.scala 100:64]
    T_6127 is invalid @[Xbar.scala 100:64]
    T_6127[0] <= T_6095 @[Xbar.scala 100:64]
    T_6127[1] <= T_6102 @[Xbar.scala 100:64]
    reg T_6139 : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node T_6141 = eq(T_6139, UInt<1>("h00")) @[Xbar.scala 210:28]
    node T_6143 = or(UInt<1>("h00"), T_6127[0][0]) @[Xbar.scala 11:52]
    wire T_6149 : UInt<1>[1] @[Xbar.scala 11:18]
    T_6149 is invalid @[Xbar.scala 11:18]
    T_6149[0] <= UInt<1>("h00") @[Xbar.scala 11:18]
    node T_6152 = eq(T_6149[0], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_6153 = and(T_6152, T_6127[0][0]) @[Xbar.scala 12:52]
    wire T_6159 : UInt<1>[1] @[Xbar.scala 12:8]
    T_6159 is invalid @[Xbar.scala 12:8]
    T_6159[0] <= T_6153 @[Xbar.scala 12:8]
    wire T_6166 : UInt<1>[1] @[Xbar.scala 213:24]
    T_6166 is invalid @[Xbar.scala 213:24]
    T_6166[0] <= T_6159[0] @[Xbar.scala 213:24]
    node T_6169 = eq(T_6166[0], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_6170 = or(T_6169, T_6127[0][0]) @[Xbar.scala 216:61]
    node T_6171 = or(T_6170, reset) @[Xbar.scala 216:14]
    node T_6173 = eq(T_6171, UInt<1>("h00")) @[Xbar.scala 216:14]
    when T_6173 : @[Xbar.scala 216:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:216 assert ((winners zip requests).map { case (w,r) => !w || r } .reduce(_ && _))\n") @[Xbar.scala 216:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 216:14]
      skip @[Xbar.scala 216:14]
    node T_6175 = or(UInt<1>("h00"), T_6166[0]) @[Xbar.scala 218:54]
    node T_6177 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_6179 = eq(T_6166[0], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_6180 = or(T_6177, T_6179) @[Xbar.scala 219:61]
    node T_6181 = or(T_6180, reset) @[Xbar.scala 219:14]
    node T_6183 = eq(T_6181, UInt<1>("h00")) @[Xbar.scala 219:14]
    when T_6183 : @[Xbar.scala 219:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:219 assert ((prefixOR zip winners).map { case (p,w) => !p || !w }.reduce(_ && _))\n") @[Xbar.scala 219:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 219:14]
      skip @[Xbar.scala 219:14]
    node T_6185 = mux(T_6166[0], beatsA[0], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_6186 = mux(T_6141, T_6185, T_6139) @[Xbar.scala 225:26]
    node T_6187 = sub(T_6186, T_6077) @[Xbar.scala 227:30]
    node T_6188 = tail(T_6187, 1) @[Xbar.scala 227:30]
    T_6139 <= T_6188 @[Xbar.scala 227:17]
    node T_6190 = eq(T_6077, UInt<1>("h00")) @[Xbar.scala 228:15]
    node T_6192 = neq(T_6186, UInt<1>("h00")) @[Xbar.scala 228:38]
    node T_6193 = or(T_6190, T_6192) @[Xbar.scala 228:25]
    node T_6194 = or(T_6193, reset) @[Xbar.scala 228:14]
    node T_6196 = eq(T_6194, UInt<1>("h00")) @[Xbar.scala 228:14]
    when T_6196 : @[Xbar.scala 228:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:228 assert (!progress || todoBeats =/= UInt(0)) // underflow should be impossible\n") @[Xbar.scala 228:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 228:14]
      skip @[Xbar.scala 228:14]
    wire T_6203 : UInt<1>[1] @[Xbar.scala 231:50]
    T_6203 is invalid @[Xbar.scala 231:50]
    T_6203[0] <= UInt<1>("h00") @[Xbar.scala 231:50]
    reg T_6207 : UInt<1>[1], clk with : (reset => (reset, T_6203))
    node T_6211 = mux(T_6141, T_6166, T_6207) @[Xbar.scala 233:25]
    T_6207 <= T_6211 @[Xbar.scala 234:13]
    reg T_6214 : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node T_6216 = eq(T_6214, UInt<1>("h00")) @[Xbar.scala 210:28]
    node T_6218 = or(UInt<1>("h00"), T_6127[1][0]) @[Xbar.scala 11:52]
    wire T_6224 : UInt<1>[1] @[Xbar.scala 11:18]
    T_6224 is invalid @[Xbar.scala 11:18]
    T_6224[0] <= UInt<1>("h00") @[Xbar.scala 11:18]
    node T_6227 = eq(T_6224[0], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_6228 = and(T_6227, T_6127[1][0]) @[Xbar.scala 12:52]
    wire T_6234 : UInt<1>[1] @[Xbar.scala 12:8]
    T_6234 is invalid @[Xbar.scala 12:8]
    T_6234[0] <= T_6228 @[Xbar.scala 12:8]
    wire T_6241 : UInt<1>[1] @[Xbar.scala 213:24]
    T_6241 is invalid @[Xbar.scala 213:24]
    T_6241[0] <= T_6234[0] @[Xbar.scala 213:24]
    node T_6244 = eq(T_6241[0], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_6245 = or(T_6244, T_6127[1][0]) @[Xbar.scala 216:61]
    node T_6246 = or(T_6245, reset) @[Xbar.scala 216:14]
    node T_6248 = eq(T_6246, UInt<1>("h00")) @[Xbar.scala 216:14]
    when T_6248 : @[Xbar.scala 216:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:216 assert ((winners zip requests).map { case (w,r) => !w || r } .reduce(_ && _))\n") @[Xbar.scala 216:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 216:14]
      skip @[Xbar.scala 216:14]
    node T_6250 = or(UInt<1>("h00"), T_6241[0]) @[Xbar.scala 218:54]
    node T_6252 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_6254 = eq(T_6241[0], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_6255 = or(T_6252, T_6254) @[Xbar.scala 219:61]
    node T_6256 = or(T_6255, reset) @[Xbar.scala 219:14]
    node T_6258 = eq(T_6256, UInt<1>("h00")) @[Xbar.scala 219:14]
    when T_6258 : @[Xbar.scala 219:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:219 assert ((prefixOR zip winners).map { case (p,w) => !p || !w }.reduce(_ && _))\n") @[Xbar.scala 219:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 219:14]
      skip @[Xbar.scala 219:14]
    node T_6260 = mux(T_6241[0], beatsA[0], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_6261 = mux(T_6216, T_6260, T_6214) @[Xbar.scala 225:26]
    node T_6262 = sub(T_6261, T_6078) @[Xbar.scala 227:30]
    node T_6263 = tail(T_6262, 1) @[Xbar.scala 227:30]
    T_6214 <= T_6263 @[Xbar.scala 227:17]
    node T_6265 = eq(T_6078, UInt<1>("h00")) @[Xbar.scala 228:15]
    node T_6267 = neq(T_6261, UInt<1>("h00")) @[Xbar.scala 228:38]
    node T_6268 = or(T_6265, T_6267) @[Xbar.scala 228:25]
    node T_6269 = or(T_6268, reset) @[Xbar.scala 228:14]
    node T_6271 = eq(T_6269, UInt<1>("h00")) @[Xbar.scala 228:14]
    when T_6271 : @[Xbar.scala 228:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:228 assert (!progress || todoBeats =/= UInt(0)) // underflow should be impossible\n") @[Xbar.scala 228:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 228:14]
      skip @[Xbar.scala 228:14]
    wire T_6278 : UInt<1>[1] @[Xbar.scala 231:50]
    T_6278 is invalid @[Xbar.scala 231:50]
    T_6278[0] <= UInt<1>("h00") @[Xbar.scala 231:50]
    reg T_6282 : UInt<1>[1], clk with : (reset => (reset, T_6278))
    node T_6286 = mux(T_6216, T_6241, T_6282) @[Xbar.scala 233:25]
    T_6282 <= T_6286 @[Xbar.scala 234:13]
    wire T_6293 : UInt<1>[2] @[Xbar.scala 100:92]
    T_6293 is invalid @[Xbar.scala 100:92]
    T_6293[0] <= T_6211[0] @[Xbar.scala 100:92]
    T_6293[1] <= T_6286[0] @[Xbar.scala 100:92]
    wire T_6315 : UInt<1>[2][1] @[Xbar.scala 100:64]
    T_6315 is invalid @[Xbar.scala 100:64]
    T_6315[0] <= T_6293 @[Xbar.scala 100:64]
    grantedAIO <= T_6315 @[Xbar.scala 191:16]
    node T_6323 = and(requestBOI[0][0], maskOI[0][0]) @[Xbar.scala 189:79]
    wire T_6329 : UInt<1>[1] @[Xbar.scala 189:45]
    T_6329 is invalid @[Xbar.scala 189:45]
    T_6329[0] <= T_6323 @[Xbar.scala 189:45]
    node T_6331 = and(requestBOI[1][0], maskOI[1][0]) @[Xbar.scala 189:79]
    wire T_6337 : UInt<1>[1] @[Xbar.scala 189:45]
    T_6337 is invalid @[Xbar.scala 189:45]
    T_6337[0] <= T_6331 @[Xbar.scala 189:45]
    wire T_6362 : UInt<1>[1][2] @[Xbar.scala 189:10]
    T_6362 is invalid @[Xbar.scala 189:10]
    T_6362[0] <= T_6329 @[Xbar.scala 189:10]
    T_6362[1] <= T_6337 @[Xbar.scala 189:10]
    node T_6373 = and(in[0].b.ready, in[0].b.valid) @[Decoupled.scala 21:42]
    node T_6375 = or(UInt<1>("h00"), T_6362[0][0]) @[Xbar.scala 200:58]
    node T_6376 = and(UInt<1>("h00"), T_6362[0][0]) @[Xbar.scala 201:64]
    node T_6378 = eq(T_6376, UInt<1>("h00")) @[Xbar.scala 201:17]
    node T_6379 = or(T_6378, reset) @[Xbar.scala 201:16]
    node T_6381 = eq(T_6379, UInt<1>("h00")) @[Xbar.scala 201:16]
    when T_6381 : @[Xbar.scala 201:16]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:201 assert (!(prefixOR zip resources).map{case (a, b) => a && b}.reduce(_ || _))\n") @[Xbar.scala 201:16]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 201:16]
      skip @[Xbar.scala 201:16]
    node T_6383 = or(UInt<1>("h00"), T_6362[1][0]) @[Xbar.scala 200:58]
    node T_6384 = and(UInt<1>("h00"), T_6362[1][0]) @[Xbar.scala 201:64]
    node T_6386 = eq(T_6384, UInt<1>("h00")) @[Xbar.scala 201:17]
    node T_6387 = or(T_6386, reset) @[Xbar.scala 201:16]
    node T_6389 = eq(T_6387, UInt<1>("h00")) @[Xbar.scala 201:16]
    when T_6389 : @[Xbar.scala 201:16]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:201 assert (!(prefixOR zip resources).map{case (a, b) => a && b}.reduce(_ || _))\n") @[Xbar.scala 201:16]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 201:16]
      skip @[Xbar.scala 201:16]
    wire T_6395 : UInt<1>[2] @[Xbar.scala 100:92]
    T_6395 is invalid @[Xbar.scala 100:92]
    T_6395[0] <= T_6362[0][0] @[Xbar.scala 100:92]
    T_6395[1] <= T_6362[1][0] @[Xbar.scala 100:92]
    wire T_6417 : UInt<1>[2][1] @[Xbar.scala 100:64]
    T_6417 is invalid @[Xbar.scala 100:64]
    T_6417[0] <= T_6395 @[Xbar.scala 100:64]
    reg T_6426 : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node T_6428 = eq(T_6426, UInt<1>("h00")) @[Xbar.scala 210:28]
    node T_6430 = or(UInt<1>("h00"), T_6417[0][0]) @[Xbar.scala 11:52]
    node T_6431 = or(T_6430, T_6417[0][1]) @[Xbar.scala 11:52]
    wire T_6437 : UInt<1>[2] @[Xbar.scala 11:18]
    T_6437 is invalid @[Xbar.scala 11:18]
    T_6437[0] <= UInt<1>("h00") @[Xbar.scala 11:18]
    T_6437[1] <= T_6430 @[Xbar.scala 11:18]
    node T_6440 = eq(T_6437[0], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_6441 = and(T_6440, T_6417[0][0]) @[Xbar.scala 12:52]
    node T_6443 = eq(T_6437[1], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_6444 = and(T_6443, T_6417[0][1]) @[Xbar.scala 12:52]
    wire T_6450 : UInt<1>[2] @[Xbar.scala 12:8]
    T_6450 is invalid @[Xbar.scala 12:8]
    T_6450[0] <= T_6441 @[Xbar.scala 12:8]
    T_6450[1] <= T_6444 @[Xbar.scala 12:8]
    wire T_6457 : UInt<1>[2] @[Xbar.scala 213:24]
    T_6457 is invalid @[Xbar.scala 213:24]
    T_6457[0] <= T_6450[0] @[Xbar.scala 213:24]
    T_6457[1] <= T_6450[1] @[Xbar.scala 213:24]
    node T_6460 = eq(T_6457[0], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_6461 = or(T_6460, T_6417[0][0]) @[Xbar.scala 216:61]
    node T_6463 = eq(T_6457[1], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_6464 = or(T_6463, T_6417[0][1]) @[Xbar.scala 216:61]
    node T_6465 = and(T_6461, T_6464) @[Xbar.scala 216:78]
    node T_6466 = or(T_6465, reset) @[Xbar.scala 216:14]
    node T_6468 = eq(T_6466, UInt<1>("h00")) @[Xbar.scala 216:14]
    when T_6468 : @[Xbar.scala 216:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:216 assert ((winners zip requests).map { case (w,r) => !w || r } .reduce(_ && _))\n") @[Xbar.scala 216:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 216:14]
      skip @[Xbar.scala 216:14]
    node T_6470 = or(UInt<1>("h00"), T_6457[0]) @[Xbar.scala 218:54]
    node T_6471 = or(T_6470, T_6457[1]) @[Xbar.scala 218:54]
    node T_6473 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_6475 = eq(T_6457[0], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_6476 = or(T_6473, T_6475) @[Xbar.scala 219:61]
    node T_6478 = eq(T_6470, UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_6480 = eq(T_6457[1], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_6481 = or(T_6478, T_6480) @[Xbar.scala 219:61]
    node T_6482 = and(T_6476, T_6481) @[Xbar.scala 219:78]
    node T_6483 = or(T_6482, reset) @[Xbar.scala 219:14]
    node T_6485 = eq(T_6483, UInt<1>("h00")) @[Xbar.scala 219:14]
    when T_6485 : @[Xbar.scala 219:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:219 assert ((prefixOR zip winners).map { case (p,w) => !p || !w }.reduce(_ && _))\n") @[Xbar.scala 219:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 219:14]
      skip @[Xbar.scala 219:14]
    node T_6487 = mux(T_6457[0], beatsB[0], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_6489 = mux(T_6457[1], beatsB[1], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_6490 = or(T_6487, T_6489) @[Xbar.scala 223:48]
    node T_6491 = mux(T_6428, T_6490, T_6426) @[Xbar.scala 225:26]
    node T_6492 = sub(T_6491, T_6373) @[Xbar.scala 227:30]
    node T_6493 = tail(T_6492, 1) @[Xbar.scala 227:30]
    T_6426 <= T_6493 @[Xbar.scala 227:17]
    node T_6495 = eq(T_6373, UInt<1>("h00")) @[Xbar.scala 228:15]
    node T_6497 = neq(T_6491, UInt<1>("h00")) @[Xbar.scala 228:38]
    node T_6498 = or(T_6495, T_6497) @[Xbar.scala 228:25]
    node T_6499 = or(T_6498, reset) @[Xbar.scala 228:14]
    node T_6501 = eq(T_6499, UInt<1>("h00")) @[Xbar.scala 228:14]
    when T_6501 : @[Xbar.scala 228:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:228 assert (!progress || todoBeats =/= UInt(0)) // underflow should be impossible\n") @[Xbar.scala 228:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 228:14]
      skip @[Xbar.scala 228:14]
    wire T_6509 : UInt<1>[2] @[Xbar.scala 231:50]
    T_6509 is invalid @[Xbar.scala 231:50]
    T_6509[0] <= UInt<1>("h00") @[Xbar.scala 231:50]
    T_6509[1] <= UInt<1>("h00") @[Xbar.scala 231:50]
    reg T_6513 : UInt<1>[2], clk with : (reset => (reset, T_6509))
    node T_6517 = mux(T_6428, T_6457, T_6513) @[Xbar.scala 233:25]
    T_6513 <= T_6517 @[Xbar.scala 234:13]
    wire T_6524 : UInt<1>[1] @[Xbar.scala 100:92]
    T_6524 is invalid @[Xbar.scala 100:92]
    T_6524[0] <= T_6517[0] @[Xbar.scala 100:92]
    wire T_6531 : UInt<1>[1] @[Xbar.scala 100:92]
    T_6531 is invalid @[Xbar.scala 100:92]
    T_6531[0] <= T_6517[1] @[Xbar.scala 100:92]
    wire T_6556 : UInt<1>[1][2] @[Xbar.scala 100:64]
    T_6556 is invalid @[Xbar.scala 100:64]
    T_6556[0] <= T_6524 @[Xbar.scala 100:64]
    T_6556[1] <= T_6531 @[Xbar.scala 100:64]
    node T_6567 = and(T_6556[0][0], maskOI[0][0]) @[Xbar.scala 189:79]
    wire T_6573 : UInt<1>[1] @[Xbar.scala 189:45]
    T_6573 is invalid @[Xbar.scala 189:45]
    T_6573[0] <= T_6567 @[Xbar.scala 189:45]
    node T_6575 = and(T_6556[1][0], maskOI[1][0]) @[Xbar.scala 189:79]
    wire T_6581 : UInt<1>[1] @[Xbar.scala 189:45]
    T_6581 is invalid @[Xbar.scala 189:45]
    T_6581[0] <= T_6575 @[Xbar.scala 189:45]
    wire T_6606 : UInt<1>[1][2] @[Xbar.scala 189:10]
    T_6606 is invalid @[Xbar.scala 189:10]
    T_6606[0] <= T_6573 @[Xbar.scala 189:10]
    T_6606[1] <= T_6581 @[Xbar.scala 189:10]
    grantedBOI <= T_6606 @[Xbar.scala 192:16]
    node T_6617 = and(requestCIO[0][0], maskIO[0][0]) @[Xbar.scala 189:79]
    node T_6618 = and(requestCIO[0][1], maskIO[0][1]) @[Xbar.scala 189:79]
    wire T_6624 : UInt<1>[2] @[Xbar.scala 189:45]
    T_6624 is invalid @[Xbar.scala 189:45]
    T_6624[0] <= T_6617 @[Xbar.scala 189:45]
    T_6624[1] <= T_6618 @[Xbar.scala 189:45]
    wire T_6646 : UInt<1>[2][1] @[Xbar.scala 189:10]
    T_6646 is invalid @[Xbar.scala 189:10]
    T_6646[0] <= T_6624 @[Xbar.scala 189:10]
    node T_6654 = and(out[0].c.ready, out[0].c.valid) @[Decoupled.scala 21:42]
    node T_6655 = and(out[1].c.ready, out[1].c.valid) @[Decoupled.scala 21:42]
    node T_6657 = or(UInt<1>("h00"), T_6646[0][0]) @[Xbar.scala 200:58]
    node T_6658 = or(T_6657, T_6646[0][1]) @[Xbar.scala 200:58]
    node T_6659 = and(UInt<1>("h00"), T_6646[0][0]) @[Xbar.scala 201:64]
    node T_6660 = and(T_6657, T_6646[0][1]) @[Xbar.scala 201:64]
    node T_6661 = or(T_6659, T_6660) @[Xbar.scala 201:79]
    node T_6663 = eq(T_6661, UInt<1>("h00")) @[Xbar.scala 201:17]
    node T_6664 = or(T_6663, reset) @[Xbar.scala 201:16]
    node T_6666 = eq(T_6664, UInt<1>("h00")) @[Xbar.scala 201:16]
    when T_6666 : @[Xbar.scala 201:16]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:201 assert (!(prefixOR zip resources).map{case (a, b) => a && b}.reduce(_ || _))\n") @[Xbar.scala 201:16]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 201:16]
      skip @[Xbar.scala 201:16]
    wire T_6672 : UInt<1>[1] @[Xbar.scala 100:92]
    T_6672 is invalid @[Xbar.scala 100:92]
    T_6672[0] <= T_6646[0][0] @[Xbar.scala 100:92]
    wire T_6679 : UInt<1>[1] @[Xbar.scala 100:92]
    T_6679 is invalid @[Xbar.scala 100:92]
    T_6679[0] <= T_6646[0][1] @[Xbar.scala 100:92]
    wire T_6704 : UInt<1>[1][2] @[Xbar.scala 100:64]
    T_6704 is invalid @[Xbar.scala 100:64]
    T_6704[0] <= T_6672 @[Xbar.scala 100:64]
    T_6704[1] <= T_6679 @[Xbar.scala 100:64]
    reg T_6716 : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node T_6718 = eq(T_6716, UInt<1>("h00")) @[Xbar.scala 210:28]
    node T_6720 = or(UInt<1>("h00"), T_6704[0][0]) @[Xbar.scala 11:52]
    wire T_6726 : UInt<1>[1] @[Xbar.scala 11:18]
    T_6726 is invalid @[Xbar.scala 11:18]
    T_6726[0] <= UInt<1>("h00") @[Xbar.scala 11:18]
    node T_6729 = eq(T_6726[0], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_6730 = and(T_6729, T_6704[0][0]) @[Xbar.scala 12:52]
    wire T_6736 : UInt<1>[1] @[Xbar.scala 12:8]
    T_6736 is invalid @[Xbar.scala 12:8]
    T_6736[0] <= T_6730 @[Xbar.scala 12:8]
    wire T_6743 : UInt<1>[1] @[Xbar.scala 213:24]
    T_6743 is invalid @[Xbar.scala 213:24]
    T_6743[0] <= T_6736[0] @[Xbar.scala 213:24]
    node T_6746 = eq(T_6743[0], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_6747 = or(T_6746, T_6704[0][0]) @[Xbar.scala 216:61]
    node T_6748 = or(T_6747, reset) @[Xbar.scala 216:14]
    node T_6750 = eq(T_6748, UInt<1>("h00")) @[Xbar.scala 216:14]
    when T_6750 : @[Xbar.scala 216:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:216 assert ((winners zip requests).map { case (w,r) => !w || r } .reduce(_ && _))\n") @[Xbar.scala 216:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 216:14]
      skip @[Xbar.scala 216:14]
    node T_6752 = or(UInt<1>("h00"), T_6743[0]) @[Xbar.scala 218:54]
    node T_6754 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_6756 = eq(T_6743[0], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_6757 = or(T_6754, T_6756) @[Xbar.scala 219:61]
    node T_6758 = or(T_6757, reset) @[Xbar.scala 219:14]
    node T_6760 = eq(T_6758, UInt<1>("h00")) @[Xbar.scala 219:14]
    when T_6760 : @[Xbar.scala 219:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:219 assert ((prefixOR zip winners).map { case (p,w) => !p || !w }.reduce(_ && _))\n") @[Xbar.scala 219:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 219:14]
      skip @[Xbar.scala 219:14]
    node T_6762 = mux(T_6743[0], beatsC[0], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_6763 = mux(T_6718, T_6762, T_6716) @[Xbar.scala 225:26]
    node T_6764 = sub(T_6763, T_6654) @[Xbar.scala 227:30]
    node T_6765 = tail(T_6764, 1) @[Xbar.scala 227:30]
    T_6716 <= T_6765 @[Xbar.scala 227:17]
    node T_6767 = eq(T_6654, UInt<1>("h00")) @[Xbar.scala 228:15]
    node T_6769 = neq(T_6763, UInt<1>("h00")) @[Xbar.scala 228:38]
    node T_6770 = or(T_6767, T_6769) @[Xbar.scala 228:25]
    node T_6771 = or(T_6770, reset) @[Xbar.scala 228:14]
    node T_6773 = eq(T_6771, UInt<1>("h00")) @[Xbar.scala 228:14]
    when T_6773 : @[Xbar.scala 228:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:228 assert (!progress || todoBeats =/= UInt(0)) // underflow should be impossible\n") @[Xbar.scala 228:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 228:14]
      skip @[Xbar.scala 228:14]
    wire T_6780 : UInt<1>[1] @[Xbar.scala 231:50]
    T_6780 is invalid @[Xbar.scala 231:50]
    T_6780[0] <= UInt<1>("h00") @[Xbar.scala 231:50]
    reg T_6784 : UInt<1>[1], clk with : (reset => (reset, T_6780))
    node T_6788 = mux(T_6718, T_6743, T_6784) @[Xbar.scala 233:25]
    T_6784 <= T_6788 @[Xbar.scala 234:13]
    reg T_6791 : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node T_6793 = eq(T_6791, UInt<1>("h00")) @[Xbar.scala 210:28]
    node T_6795 = or(UInt<1>("h00"), T_6704[1][0]) @[Xbar.scala 11:52]
    wire T_6801 : UInt<1>[1] @[Xbar.scala 11:18]
    T_6801 is invalid @[Xbar.scala 11:18]
    T_6801[0] <= UInt<1>("h00") @[Xbar.scala 11:18]
    node T_6804 = eq(T_6801[0], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_6805 = and(T_6804, T_6704[1][0]) @[Xbar.scala 12:52]
    wire T_6811 : UInt<1>[1] @[Xbar.scala 12:8]
    T_6811 is invalid @[Xbar.scala 12:8]
    T_6811[0] <= T_6805 @[Xbar.scala 12:8]
    wire T_6818 : UInt<1>[1] @[Xbar.scala 213:24]
    T_6818 is invalid @[Xbar.scala 213:24]
    T_6818[0] <= T_6811[0] @[Xbar.scala 213:24]
    node T_6821 = eq(T_6818[0], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_6822 = or(T_6821, T_6704[1][0]) @[Xbar.scala 216:61]
    node T_6823 = or(T_6822, reset) @[Xbar.scala 216:14]
    node T_6825 = eq(T_6823, UInt<1>("h00")) @[Xbar.scala 216:14]
    when T_6825 : @[Xbar.scala 216:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:216 assert ((winners zip requests).map { case (w,r) => !w || r } .reduce(_ && _))\n") @[Xbar.scala 216:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 216:14]
      skip @[Xbar.scala 216:14]
    node T_6827 = or(UInt<1>("h00"), T_6818[0]) @[Xbar.scala 218:54]
    node T_6829 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_6831 = eq(T_6818[0], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_6832 = or(T_6829, T_6831) @[Xbar.scala 219:61]
    node T_6833 = or(T_6832, reset) @[Xbar.scala 219:14]
    node T_6835 = eq(T_6833, UInt<1>("h00")) @[Xbar.scala 219:14]
    when T_6835 : @[Xbar.scala 219:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:219 assert ((prefixOR zip winners).map { case (p,w) => !p || !w }.reduce(_ && _))\n") @[Xbar.scala 219:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 219:14]
      skip @[Xbar.scala 219:14]
    node T_6837 = mux(T_6818[0], beatsC[0], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_6838 = mux(T_6793, T_6837, T_6791) @[Xbar.scala 225:26]
    node T_6839 = sub(T_6838, T_6655) @[Xbar.scala 227:30]
    node T_6840 = tail(T_6839, 1) @[Xbar.scala 227:30]
    T_6791 <= T_6840 @[Xbar.scala 227:17]
    node T_6842 = eq(T_6655, UInt<1>("h00")) @[Xbar.scala 228:15]
    node T_6844 = neq(T_6838, UInt<1>("h00")) @[Xbar.scala 228:38]
    node T_6845 = or(T_6842, T_6844) @[Xbar.scala 228:25]
    node T_6846 = or(T_6845, reset) @[Xbar.scala 228:14]
    node T_6848 = eq(T_6846, UInt<1>("h00")) @[Xbar.scala 228:14]
    when T_6848 : @[Xbar.scala 228:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:228 assert (!progress || todoBeats =/= UInt(0)) // underflow should be impossible\n") @[Xbar.scala 228:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 228:14]
      skip @[Xbar.scala 228:14]
    wire T_6855 : UInt<1>[1] @[Xbar.scala 231:50]
    T_6855 is invalid @[Xbar.scala 231:50]
    T_6855[0] <= UInt<1>("h00") @[Xbar.scala 231:50]
    reg T_6859 : UInt<1>[1], clk with : (reset => (reset, T_6855))
    node T_6863 = mux(T_6793, T_6818, T_6859) @[Xbar.scala 233:25]
    T_6859 <= T_6863 @[Xbar.scala 234:13]
    wire T_6870 : UInt<1>[2] @[Xbar.scala 100:92]
    T_6870 is invalid @[Xbar.scala 100:92]
    T_6870[0] <= T_6788[0] @[Xbar.scala 100:92]
    T_6870[1] <= T_6863[0] @[Xbar.scala 100:92]
    wire T_6892 : UInt<1>[2][1] @[Xbar.scala 100:64]
    T_6892 is invalid @[Xbar.scala 100:64]
    T_6892[0] <= T_6870 @[Xbar.scala 100:64]
    node T_6900 = and(T_6892[0][0], maskIO[0][0]) @[Xbar.scala 189:79]
    node T_6901 = and(T_6892[0][1], maskIO[0][1]) @[Xbar.scala 189:79]
    wire T_6907 : UInt<1>[2] @[Xbar.scala 189:45]
    T_6907 is invalid @[Xbar.scala 189:45]
    T_6907[0] <= T_6900 @[Xbar.scala 189:45]
    T_6907[1] <= T_6901 @[Xbar.scala 189:45]
    wire T_6929 : UInt<1>[2][1] @[Xbar.scala 189:10]
    T_6929 is invalid @[Xbar.scala 189:10]
    T_6929[0] <= T_6907 @[Xbar.scala 189:10]
    grantedCIO <= T_6929 @[Xbar.scala 193:16]
    node T_6937 = and(in[0].d.ready, in[0].d.valid) @[Decoupled.scala 21:42]
    node T_6939 = or(UInt<1>("h00"), requestDOI[0][0]) @[Xbar.scala 200:58]
    node T_6940 = and(UInt<1>("h00"), requestDOI[0][0]) @[Xbar.scala 201:64]
    node T_6942 = eq(T_6940, UInt<1>("h00")) @[Xbar.scala 201:17]
    node T_6943 = or(T_6942, reset) @[Xbar.scala 201:16]
    node T_6945 = eq(T_6943, UInt<1>("h00")) @[Xbar.scala 201:16]
    when T_6945 : @[Xbar.scala 201:16]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:201 assert (!(prefixOR zip resources).map{case (a, b) => a && b}.reduce(_ || _))\n") @[Xbar.scala 201:16]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 201:16]
      skip @[Xbar.scala 201:16]
    node T_6947 = or(UInt<1>("h00"), requestDOI[1][0]) @[Xbar.scala 200:58]
    node T_6948 = and(UInt<1>("h00"), requestDOI[1][0]) @[Xbar.scala 201:64]
    node T_6950 = eq(T_6948, UInt<1>("h00")) @[Xbar.scala 201:17]
    node T_6951 = or(T_6950, reset) @[Xbar.scala 201:16]
    node T_6953 = eq(T_6951, UInt<1>("h00")) @[Xbar.scala 201:16]
    when T_6953 : @[Xbar.scala 201:16]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:201 assert (!(prefixOR zip resources).map{case (a, b) => a && b}.reduce(_ || _))\n") @[Xbar.scala 201:16]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 201:16]
      skip @[Xbar.scala 201:16]
    wire T_6959 : UInt<1>[2] @[Xbar.scala 100:92]
    T_6959 is invalid @[Xbar.scala 100:92]
    T_6959[0] <= requestDOI[0][0] @[Xbar.scala 100:92]
    T_6959[1] <= requestDOI[1][0] @[Xbar.scala 100:92]
    wire T_6981 : UInt<1>[2][1] @[Xbar.scala 100:64]
    T_6981 is invalid @[Xbar.scala 100:64]
    T_6981[0] <= T_6959 @[Xbar.scala 100:64]
    reg T_6990 : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node T_6992 = eq(T_6990, UInt<1>("h00")) @[Xbar.scala 210:28]
    node T_6994 = or(UInt<1>("h00"), T_6981[0][0]) @[Xbar.scala 11:52]
    node T_6995 = or(T_6994, T_6981[0][1]) @[Xbar.scala 11:52]
    wire T_7001 : UInt<1>[2] @[Xbar.scala 11:18]
    T_7001 is invalid @[Xbar.scala 11:18]
    T_7001[0] <= UInt<1>("h00") @[Xbar.scala 11:18]
    T_7001[1] <= T_6994 @[Xbar.scala 11:18]
    node T_7004 = eq(T_7001[0], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_7005 = and(T_7004, T_6981[0][0]) @[Xbar.scala 12:52]
    node T_7007 = eq(T_7001[1], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_7008 = and(T_7007, T_6981[0][1]) @[Xbar.scala 12:52]
    wire T_7014 : UInt<1>[2] @[Xbar.scala 12:8]
    T_7014 is invalid @[Xbar.scala 12:8]
    T_7014[0] <= T_7005 @[Xbar.scala 12:8]
    T_7014[1] <= T_7008 @[Xbar.scala 12:8]
    wire T_7021 : UInt<1>[2] @[Xbar.scala 213:24]
    T_7021 is invalid @[Xbar.scala 213:24]
    T_7021[0] <= T_7014[0] @[Xbar.scala 213:24]
    T_7021[1] <= T_7014[1] @[Xbar.scala 213:24]
    node T_7024 = eq(T_7021[0], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_7025 = or(T_7024, T_6981[0][0]) @[Xbar.scala 216:61]
    node T_7027 = eq(T_7021[1], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_7028 = or(T_7027, T_6981[0][1]) @[Xbar.scala 216:61]
    node T_7029 = and(T_7025, T_7028) @[Xbar.scala 216:78]
    node T_7030 = or(T_7029, reset) @[Xbar.scala 216:14]
    node T_7032 = eq(T_7030, UInt<1>("h00")) @[Xbar.scala 216:14]
    when T_7032 : @[Xbar.scala 216:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:216 assert ((winners zip requests).map { case (w,r) => !w || r } .reduce(_ && _))\n") @[Xbar.scala 216:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 216:14]
      skip @[Xbar.scala 216:14]
    node T_7034 = or(UInt<1>("h00"), T_7021[0]) @[Xbar.scala 218:54]
    node T_7035 = or(T_7034, T_7021[1]) @[Xbar.scala 218:54]
    node T_7037 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_7039 = eq(T_7021[0], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_7040 = or(T_7037, T_7039) @[Xbar.scala 219:61]
    node T_7042 = eq(T_7034, UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_7044 = eq(T_7021[1], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_7045 = or(T_7042, T_7044) @[Xbar.scala 219:61]
    node T_7046 = and(T_7040, T_7045) @[Xbar.scala 219:78]
    node T_7047 = or(T_7046, reset) @[Xbar.scala 219:14]
    node T_7049 = eq(T_7047, UInt<1>("h00")) @[Xbar.scala 219:14]
    when T_7049 : @[Xbar.scala 219:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:219 assert ((prefixOR zip winners).map { case (p,w) => !p || !w }.reduce(_ && _))\n") @[Xbar.scala 219:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 219:14]
      skip @[Xbar.scala 219:14]
    node T_7051 = mux(T_7021[0], beatsD[0], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_7053 = mux(T_7021[1], beatsD[1], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_7054 = or(T_7051, T_7053) @[Xbar.scala 223:48]
    node T_7055 = mux(T_6992, T_7054, T_6990) @[Xbar.scala 225:26]
    node T_7056 = sub(T_7055, T_6937) @[Xbar.scala 227:30]
    node T_7057 = tail(T_7056, 1) @[Xbar.scala 227:30]
    T_6990 <= T_7057 @[Xbar.scala 227:17]
    node T_7059 = eq(T_6937, UInt<1>("h00")) @[Xbar.scala 228:15]
    node T_7061 = neq(T_7055, UInt<1>("h00")) @[Xbar.scala 228:38]
    node T_7062 = or(T_7059, T_7061) @[Xbar.scala 228:25]
    node T_7063 = or(T_7062, reset) @[Xbar.scala 228:14]
    node T_7065 = eq(T_7063, UInt<1>("h00")) @[Xbar.scala 228:14]
    when T_7065 : @[Xbar.scala 228:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:228 assert (!progress || todoBeats =/= UInt(0)) // underflow should be impossible\n") @[Xbar.scala 228:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 228:14]
      skip @[Xbar.scala 228:14]
    wire T_7073 : UInt<1>[2] @[Xbar.scala 231:50]
    T_7073 is invalid @[Xbar.scala 231:50]
    T_7073[0] <= UInt<1>("h00") @[Xbar.scala 231:50]
    T_7073[1] <= UInt<1>("h00") @[Xbar.scala 231:50]
    reg T_7077 : UInt<1>[2], clk with : (reset => (reset, T_7073))
    node T_7081 = mux(T_6992, T_7021, T_7077) @[Xbar.scala 233:25]
    T_7077 <= T_7081 @[Xbar.scala 234:13]
    wire T_7088 : UInt<1>[1] @[Xbar.scala 100:92]
    T_7088 is invalid @[Xbar.scala 100:92]
    T_7088[0] <= T_7081[0] @[Xbar.scala 100:92]
    wire T_7095 : UInt<1>[1] @[Xbar.scala 100:92]
    T_7095 is invalid @[Xbar.scala 100:92]
    T_7095[0] <= T_7081[1] @[Xbar.scala 100:92]
    wire T_7120 : UInt<1>[1][2] @[Xbar.scala 100:64]
    T_7120 is invalid @[Xbar.scala 100:64]
    T_7120[0] <= T_7088 @[Xbar.scala 100:64]
    T_7120[1] <= T_7095 @[Xbar.scala 100:64]
    grantedDOI <= T_7120 @[Xbar.scala 194:16]
    node T_7131 = and(requestEIO[0][0], maskIO[0][0]) @[Xbar.scala 189:79]
    node T_7132 = and(requestEIO[0][1], maskIO[0][1]) @[Xbar.scala 189:79]
    wire T_7138 : UInt<1>[2] @[Xbar.scala 189:45]
    T_7138 is invalid @[Xbar.scala 189:45]
    T_7138[0] <= T_7131 @[Xbar.scala 189:45]
    T_7138[1] <= T_7132 @[Xbar.scala 189:45]
    wire T_7160 : UInt<1>[2][1] @[Xbar.scala 189:10]
    T_7160 is invalid @[Xbar.scala 189:10]
    T_7160[0] <= T_7138 @[Xbar.scala 189:10]
    node T_7168 = and(out[0].e.ready, out[0].e.valid) @[Decoupled.scala 21:42]
    node T_7169 = and(out[1].e.ready, out[1].e.valid) @[Decoupled.scala 21:42]
    node T_7171 = or(UInt<1>("h00"), T_7160[0][0]) @[Xbar.scala 200:58]
    node T_7172 = or(T_7171, T_7160[0][1]) @[Xbar.scala 200:58]
    node T_7173 = and(UInt<1>("h00"), T_7160[0][0]) @[Xbar.scala 201:64]
    node T_7174 = and(T_7171, T_7160[0][1]) @[Xbar.scala 201:64]
    node T_7175 = or(T_7173, T_7174) @[Xbar.scala 201:79]
    node T_7177 = eq(T_7175, UInt<1>("h00")) @[Xbar.scala 201:17]
    node T_7178 = or(T_7177, reset) @[Xbar.scala 201:16]
    node T_7180 = eq(T_7178, UInt<1>("h00")) @[Xbar.scala 201:16]
    when T_7180 : @[Xbar.scala 201:16]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:201 assert (!(prefixOR zip resources).map{case (a, b) => a && b}.reduce(_ || _))\n") @[Xbar.scala 201:16]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 201:16]
      skip @[Xbar.scala 201:16]
    wire T_7186 : UInt<1>[1] @[Xbar.scala 100:92]
    T_7186 is invalid @[Xbar.scala 100:92]
    T_7186[0] <= T_7160[0][0] @[Xbar.scala 100:92]
    wire T_7193 : UInt<1>[1] @[Xbar.scala 100:92]
    T_7193 is invalid @[Xbar.scala 100:92]
    T_7193[0] <= T_7160[0][1] @[Xbar.scala 100:92]
    wire T_7218 : UInt<1>[1][2] @[Xbar.scala 100:64]
    T_7218 is invalid @[Xbar.scala 100:64]
    T_7218[0] <= T_7186 @[Xbar.scala 100:64]
    T_7218[1] <= T_7193 @[Xbar.scala 100:64]
    reg T_7230 : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node T_7232 = eq(T_7230, UInt<1>("h00")) @[Xbar.scala 210:28]
    node T_7234 = or(UInt<1>("h00"), T_7218[0][0]) @[Xbar.scala 11:52]
    wire T_7240 : UInt<1>[1] @[Xbar.scala 11:18]
    T_7240 is invalid @[Xbar.scala 11:18]
    T_7240[0] <= UInt<1>("h00") @[Xbar.scala 11:18]
    node T_7243 = eq(T_7240[0], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_7244 = and(T_7243, T_7218[0][0]) @[Xbar.scala 12:52]
    wire T_7250 : UInt<1>[1] @[Xbar.scala 12:8]
    T_7250 is invalid @[Xbar.scala 12:8]
    T_7250[0] <= T_7244 @[Xbar.scala 12:8]
    wire T_7257 : UInt<1>[1] @[Xbar.scala 213:24]
    T_7257 is invalid @[Xbar.scala 213:24]
    T_7257[0] <= T_7250[0] @[Xbar.scala 213:24]
    node T_7260 = eq(T_7257[0], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_7261 = or(T_7260, T_7218[0][0]) @[Xbar.scala 216:61]
    node T_7262 = or(T_7261, reset) @[Xbar.scala 216:14]
    node T_7264 = eq(T_7262, UInt<1>("h00")) @[Xbar.scala 216:14]
    when T_7264 : @[Xbar.scala 216:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:216 assert ((winners zip requests).map { case (w,r) => !w || r } .reduce(_ && _))\n") @[Xbar.scala 216:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 216:14]
      skip @[Xbar.scala 216:14]
    node T_7266 = or(UInt<1>("h00"), T_7257[0]) @[Xbar.scala 218:54]
    node T_7268 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_7270 = eq(T_7257[0], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_7271 = or(T_7268, T_7270) @[Xbar.scala 219:61]
    node T_7272 = or(T_7271, reset) @[Xbar.scala 219:14]
    node T_7274 = eq(T_7272, UInt<1>("h00")) @[Xbar.scala 219:14]
    when T_7274 : @[Xbar.scala 219:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:219 assert ((prefixOR zip winners).map { case (p,w) => !p || !w }.reduce(_ && _))\n") @[Xbar.scala 219:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 219:14]
      skip @[Xbar.scala 219:14]
    node T_7276 = mux(T_7257[0], beatsE[0], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_7277 = mux(T_7232, T_7276, T_7230) @[Xbar.scala 225:26]
    node T_7278 = sub(T_7277, T_7168) @[Xbar.scala 227:30]
    node T_7279 = tail(T_7278, 1) @[Xbar.scala 227:30]
    T_7230 <= T_7279 @[Xbar.scala 227:17]
    node T_7281 = eq(T_7168, UInt<1>("h00")) @[Xbar.scala 228:15]
    node T_7283 = neq(T_7277, UInt<1>("h00")) @[Xbar.scala 228:38]
    node T_7284 = or(T_7281, T_7283) @[Xbar.scala 228:25]
    node T_7285 = or(T_7284, reset) @[Xbar.scala 228:14]
    node T_7287 = eq(T_7285, UInt<1>("h00")) @[Xbar.scala 228:14]
    when T_7287 : @[Xbar.scala 228:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:228 assert (!progress || todoBeats =/= UInt(0)) // underflow should be impossible\n") @[Xbar.scala 228:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 228:14]
      skip @[Xbar.scala 228:14]
    wire T_7294 : UInt<1>[1] @[Xbar.scala 231:50]
    T_7294 is invalid @[Xbar.scala 231:50]
    T_7294[0] <= UInt<1>("h00") @[Xbar.scala 231:50]
    reg T_7298 : UInt<1>[1], clk with : (reset => (reset, T_7294))
    node T_7302 = mux(T_7232, T_7257, T_7298) @[Xbar.scala 233:25]
    T_7298 <= T_7302 @[Xbar.scala 234:13]
    reg T_7305 : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node T_7307 = eq(T_7305, UInt<1>("h00")) @[Xbar.scala 210:28]
    node T_7309 = or(UInt<1>("h00"), T_7218[1][0]) @[Xbar.scala 11:52]
    wire T_7315 : UInt<1>[1] @[Xbar.scala 11:18]
    T_7315 is invalid @[Xbar.scala 11:18]
    T_7315[0] <= UInt<1>("h00") @[Xbar.scala 11:18]
    node T_7318 = eq(T_7315[0], UInt<1>("h00")) @[Xbar.scala 12:49]
    node T_7319 = and(T_7318, T_7218[1][0]) @[Xbar.scala 12:52]
    wire T_7325 : UInt<1>[1] @[Xbar.scala 12:8]
    T_7325 is invalid @[Xbar.scala 12:8]
    T_7325[0] <= T_7319 @[Xbar.scala 12:8]
    wire T_7332 : UInt<1>[1] @[Xbar.scala 213:24]
    T_7332 is invalid @[Xbar.scala 213:24]
    T_7332[0] <= T_7325[0] @[Xbar.scala 213:24]
    node T_7335 = eq(T_7332[0], UInt<1>("h00")) @[Xbar.scala 216:58]
    node T_7336 = or(T_7335, T_7218[1][0]) @[Xbar.scala 216:61]
    node T_7337 = or(T_7336, reset) @[Xbar.scala 216:14]
    node T_7339 = eq(T_7337, UInt<1>("h00")) @[Xbar.scala 216:14]
    when T_7339 : @[Xbar.scala 216:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:216 assert ((winners zip requests).map { case (w,r) => !w || r } .reduce(_ && _))\n") @[Xbar.scala 216:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 216:14]
      skip @[Xbar.scala 216:14]
    node T_7341 = or(UInt<1>("h00"), T_7332[0]) @[Xbar.scala 218:54]
    node T_7343 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Xbar.scala 219:58]
    node T_7345 = eq(T_7332[0], UInt<1>("h00")) @[Xbar.scala 219:64]
    node T_7346 = or(T_7343, T_7345) @[Xbar.scala 219:61]
    node T_7347 = or(T_7346, reset) @[Xbar.scala 219:14]
    node T_7349 = eq(T_7347, UInt<1>("h00")) @[Xbar.scala 219:14]
    when T_7349 : @[Xbar.scala 219:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:219 assert ((prefixOR zip winners).map { case (p,w) => !p || !w }.reduce(_ && _))\n") @[Xbar.scala 219:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 219:14]
      skip @[Xbar.scala 219:14]
    node T_7351 = mux(T_7332[0], beatsE[0], UInt<1>("h00")) @[Xbar.scala 222:68]
    node T_7352 = mux(T_7307, T_7351, T_7305) @[Xbar.scala 225:26]
    node T_7353 = sub(T_7352, T_7169) @[Xbar.scala 227:30]
    node T_7354 = tail(T_7353, 1) @[Xbar.scala 227:30]
    T_7305 <= T_7354 @[Xbar.scala 227:17]
    node T_7356 = eq(T_7169, UInt<1>("h00")) @[Xbar.scala 228:15]
    node T_7358 = neq(T_7352, UInt<1>("h00")) @[Xbar.scala 228:38]
    node T_7359 = or(T_7356, T_7358) @[Xbar.scala 228:25]
    node T_7360 = or(T_7359, reset) @[Xbar.scala 228:14]
    node T_7362 = eq(T_7360, UInt<1>("h00")) @[Xbar.scala 228:14]
    when T_7362 : @[Xbar.scala 228:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Xbar.scala:228 assert (!progress || todoBeats =/= UInt(0)) // underflow should be impossible\n") @[Xbar.scala 228:14]
      stop(clk, UInt<1>(1), 1) @[Xbar.scala 228:14]
      skip @[Xbar.scala 228:14]
    wire T_7369 : UInt<1>[1] @[Xbar.scala 231:50]
    T_7369 is invalid @[Xbar.scala 231:50]
    T_7369[0] <= UInt<1>("h00") @[Xbar.scala 231:50]
    reg T_7373 : UInt<1>[1], clk with : (reset => (reset, T_7369))
    node T_7377 = mux(T_7307, T_7332, T_7373) @[Xbar.scala 233:25]
    T_7373 <= T_7377 @[Xbar.scala 234:13]
    wire T_7384 : UInt<1>[2] @[Xbar.scala 100:92]
    T_7384 is invalid @[Xbar.scala 100:92]
    T_7384[0] <= T_7302[0] @[Xbar.scala 100:92]
    T_7384[1] <= T_7377[0] @[Xbar.scala 100:92]
    wire T_7406 : UInt<1>[2][1] @[Xbar.scala 100:64]
    T_7406 is invalid @[Xbar.scala 100:64]
    T_7406[0] <= T_7384 @[Xbar.scala 100:64]
    node T_7414 = and(T_7406[0][0], maskIO[0][0]) @[Xbar.scala 189:79]
    node T_7415 = and(T_7406[0][1], maskIO[0][1]) @[Xbar.scala 189:79]
    wire T_7421 : UInt<1>[2] @[Xbar.scala 189:45]
    T_7421 is invalid @[Xbar.scala 189:45]
    T_7421[0] <= T_7414 @[Xbar.scala 189:45]
    T_7421[1] <= T_7415 @[Xbar.scala 189:45]
    wire T_7443 : UInt<1>[2][1] @[Xbar.scala 189:10]
    T_7443 is invalid @[Xbar.scala 189:10]
    T_7443[0] <= T_7421 @[Xbar.scala 189:10]
    grantedEIO <= T_7443 @[Xbar.scala 195:16]
    
  module TLLegacy : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip legacy : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1]}
    
    io is invalid
    io.out[0].a.valid <= io.legacy.acquire.valid @[Legacy.scala 55:17]
    io.out[0].d.ready <= io.legacy.grant.ready @[Legacy.scala 56:17]
    io.legacy.acquire.ready <= io.out[0].a.ready @[Legacy.scala 57:29]
    io.legacy.grant.valid <= io.out[0].d.valid @[Legacy.scala 58:29]
    node T_1077 = eq(io.legacy.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
    node T_1078 = and(io.legacy.acquire.bits.is_builtin_type, T_1077) @[Definitions.scala 212:54]
    node T_1095 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
    node T_1097 = eq(io.legacy.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
    node T_1098 = and(io.legacy.acquire.bits.is_builtin_type, T_1097) @[Definitions.scala 212:54]
    node T_1100 = eq(io.legacy.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
    node T_1101 = and(io.legacy.acquire.bits.is_builtin_type, T_1100) @[Definitions.scala 212:54]
    node T_1102 = or(T_1098, T_1101) @[Definitions.scala 190:56]
    node T_1103 = bits(io.legacy.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
    node T_1105 = mux(T_1102, T_1103, UInt<1>("h00")) @[Definitions.scala 192:30]
    node wmask = mux(T_1078, T_1095, T_1105) @[Definitions.scala 192:8]
    wire T_1113 : UInt<3>[2] @[Definitions.scala 357:30]
    T_1113 is invalid @[Definitions.scala 357:30]
    T_1113[0] <= UInt<3>("h00") @[Definitions.scala 357:30]
    T_1113[1] <= UInt<3>("h04") @[Definitions.scala 357:30]
    node T_1115 = eq(io.legacy.acquire.bits.a_type, T_1113[0]) @[Package.scala 7:47]
    node T_1116 = eq(io.legacy.acquire.bits.a_type, T_1113[1]) @[Package.scala 7:47]
    node T_1117 = or(T_1115, T_1116) @[Package.scala 7:62]
    node T_1118 = and(io.legacy.acquire.bits.is_builtin_type, T_1117) @[Definitions.scala 300:27]
    node T_1119 = bits(io.legacy.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
    node T_1121 = mux(T_1118, T_1119, UInt<3>("h00")) @[Definitions.scala 300:10]
    node T_1122 = cat(io.legacy.acquire.bits.addr_block, io.legacy.acquire.bits.addr_beat) @[Cat.scala 20:58]
    node address = cat(T_1122, T_1121) @[Cat.scala 20:58]
    node T_1124 = eq(io.legacy.acquire.valid, UInt<1>("h00")) @[Legacy.scala 82:15]
    node T_1126 = neq(io.legacy.acquire.bits.a_type, UInt<3>("h04")) @[Legacy.scala 82:73]
    node T_1127 = or(T_1124, T_1126) @[Legacy.scala 82:40]
    node T_1128 = or(T_1127, reset) @[Legacy.scala 82:14]
    node T_1130 = eq(T_1128, UInt<1>("h00")) @[Legacy.scala 82:14]
    when T_1130 : @[Legacy.scala 82:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Legacy.scala:82 assert (!io.legacy.acquire.valid || io.legacy.acquire.bits.a_type =/= Acquire.putAtomicType)\n") @[Legacy.scala 82:14]
      stop(clk, UInt<1>(1), 1) @[Legacy.scala 82:14]
      skip @[Legacy.scala 82:14]
    wire atomics : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>} @[Legacy.scala 83:11]
    atomics is invalid @[Legacy.scala 83:11]
    wire T_1154 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>} @[Legacy.scala 86:64]
    T_1154 is invalid @[Legacy.scala 86:64]
    node T_1164 = leq(UInt<1>("h00"), UInt<2>("h03")) @[Parameters.scala 61:32]
    node T_1166 = leq(UInt<2>("h03"), UInt<4>("h08")) @[Parameters.scala 61:42]
    node T_1167 = and(T_1164, T_1166) @[Parameters.scala 61:37]
    wire T_1176 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>} @[Edges.scala 312:17]
    T_1176 is invalid @[Edges.scala 312:17]
    T_1176.opcode <= UInt<3>("h04") @[Edges.scala 313:15]
    T_1176.param <= UInt<1>("h00") @[Edges.scala 314:15]
    T_1176.size <= UInt<2>("h03") @[Edges.scala 315:15]
    T_1176.source <= io.legacy.acquire.bits.client_xact_id @[Edges.scala 316:15]
    node T_1204 = shr(address, 3) @[Edges.scala 317:28]
    T_1176.addr_hi <= T_1204 @[Edges.scala 317:15]
    node T_1207 = dshl(UInt<1>("h01"), UInt<2>("h03")) @[OneHot.scala 46:16]
    node T_1208 = bits(T_1207, 2, 0) @[OneHot.scala 46:41]
    node T_1210 = geq(UInt<2>("h03"), UInt<2>("h03")) @[Edges.scala 33:21]
    node T_1212 = bits(T_1208, 2, 2) @[Edges.scala 36:26]
    node T_1213 = bits(address, 2, 2) @[Edges.scala 37:26]
    node T_1215 = eq(T_1213, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1216 = and(UInt<1>("h01"), T_1215) @[Edges.scala 41:27]
    node T_1217 = and(T_1212, T_1216) @[Edges.scala 42:38]
    node T_1218 = or(T_1210, T_1217) @[Edges.scala 42:29]
    node T_1219 = and(UInt<1>("h01"), T_1213) @[Edges.scala 41:27]
    node T_1220 = and(T_1212, T_1219) @[Edges.scala 42:38]
    node T_1221 = or(T_1210, T_1220) @[Edges.scala 42:29]
    node T_1222 = bits(T_1208, 1, 1) @[Edges.scala 36:26]
    node T_1223 = bits(address, 1, 1) @[Edges.scala 37:26]
    node T_1225 = eq(T_1223, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1226 = and(T_1216, T_1225) @[Edges.scala 41:27]
    node T_1227 = and(T_1222, T_1226) @[Edges.scala 42:38]
    node T_1228 = or(T_1218, T_1227) @[Edges.scala 42:29]
    node T_1229 = and(T_1216, T_1223) @[Edges.scala 41:27]
    node T_1230 = and(T_1222, T_1229) @[Edges.scala 42:38]
    node T_1231 = or(T_1218, T_1230) @[Edges.scala 42:29]
    node T_1232 = and(T_1219, T_1225) @[Edges.scala 41:27]
    node T_1233 = and(T_1222, T_1232) @[Edges.scala 42:38]
    node T_1234 = or(T_1221, T_1233) @[Edges.scala 42:29]
    node T_1235 = and(T_1219, T_1223) @[Edges.scala 41:27]
    node T_1236 = and(T_1222, T_1235) @[Edges.scala 42:38]
    node T_1237 = or(T_1221, T_1236) @[Edges.scala 42:29]
    node T_1238 = bits(T_1208, 0, 0) @[Edges.scala 36:26]
    node T_1239 = bits(address, 0, 0) @[Edges.scala 37:26]
    node T_1241 = eq(T_1239, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1242 = and(T_1226, T_1241) @[Edges.scala 41:27]
    node T_1243 = and(T_1238, T_1242) @[Edges.scala 42:38]
    node T_1244 = or(T_1228, T_1243) @[Edges.scala 42:29]
    node T_1245 = and(T_1226, T_1239) @[Edges.scala 41:27]
    node T_1246 = and(T_1238, T_1245) @[Edges.scala 42:38]
    node T_1247 = or(T_1228, T_1246) @[Edges.scala 42:29]
    node T_1248 = and(T_1229, T_1241) @[Edges.scala 41:27]
    node T_1249 = and(T_1238, T_1248) @[Edges.scala 42:38]
    node T_1250 = or(T_1231, T_1249) @[Edges.scala 42:29]
    node T_1251 = and(T_1229, T_1239) @[Edges.scala 41:27]
    node T_1252 = and(T_1238, T_1251) @[Edges.scala 42:38]
    node T_1253 = or(T_1231, T_1252) @[Edges.scala 42:29]
    node T_1254 = and(T_1232, T_1241) @[Edges.scala 41:27]
    node T_1255 = and(T_1238, T_1254) @[Edges.scala 42:38]
    node T_1256 = or(T_1234, T_1255) @[Edges.scala 42:29]
    node T_1257 = and(T_1232, T_1239) @[Edges.scala 41:27]
    node T_1258 = and(T_1238, T_1257) @[Edges.scala 42:38]
    node T_1259 = or(T_1234, T_1258) @[Edges.scala 42:29]
    node T_1260 = and(T_1235, T_1241) @[Edges.scala 41:27]
    node T_1261 = and(T_1238, T_1260) @[Edges.scala 42:38]
    node T_1262 = or(T_1237, T_1261) @[Edges.scala 42:29]
    node T_1263 = and(T_1235, T_1239) @[Edges.scala 41:27]
    node T_1264 = and(T_1238, T_1263) @[Edges.scala 42:38]
    node T_1265 = or(T_1237, T_1264) @[Edges.scala 42:29]
    node T_1266 = cat(T_1247, T_1244) @[Cat.scala 20:58]
    node T_1267 = cat(T_1253, T_1250) @[Cat.scala 20:58]
    node T_1268 = cat(T_1267, T_1266) @[Cat.scala 20:58]
    node T_1269 = cat(T_1259, T_1256) @[Cat.scala 20:58]
    node T_1270 = cat(T_1265, T_1262) @[Cat.scala 20:58]
    node T_1271 = cat(T_1270, T_1269) @[Cat.scala 20:58]
    node T_1272 = cat(T_1271, T_1268) @[Cat.scala 20:58]
    T_1176.mask <= T_1272 @[Edges.scala 318:15]
    T_1176.data <= UInt<1>("h00") @[Edges.scala 319:15]
    node T_1276 = leq(UInt<1>("h00"), UInt<3>("h06")) @[Parameters.scala 61:32]
    node T_1278 = leq(UInt<3>("h06"), UInt<4>("h08")) @[Parameters.scala 61:42]
    node T_1279 = and(T_1276, T_1278) @[Parameters.scala 61:37]
    wire T_1288 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>} @[Edges.scala 312:17]
    T_1288 is invalid @[Edges.scala 312:17]
    T_1288.opcode <= UInt<3>("h04") @[Edges.scala 313:15]
    T_1288.param <= UInt<1>("h00") @[Edges.scala 314:15]
    T_1288.size <= UInt<3>("h06") @[Edges.scala 315:15]
    T_1288.source <= io.legacy.acquire.bits.client_xact_id @[Edges.scala 316:15]
    node T_1297 = shr(address, 3) @[Edges.scala 317:28]
    T_1288.addr_hi <= T_1297 @[Edges.scala 317:15]
    node T_1300 = dshl(UInt<1>("h01"), UInt<2>("h02")) @[OneHot.scala 46:16]
    node T_1301 = bits(T_1300, 2, 0) @[OneHot.scala 46:41]
    node T_1303 = geq(UInt<3>("h06"), UInt<2>("h03")) @[Edges.scala 33:21]
    node T_1305 = bits(T_1301, 2, 2) @[Edges.scala 36:26]
    node T_1306 = bits(address, 2, 2) @[Edges.scala 37:26]
    node T_1308 = eq(T_1306, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1309 = and(UInt<1>("h01"), T_1308) @[Edges.scala 41:27]
    node T_1310 = and(T_1305, T_1309) @[Edges.scala 42:38]
    node T_1311 = or(T_1303, T_1310) @[Edges.scala 42:29]
    node T_1312 = and(UInt<1>("h01"), T_1306) @[Edges.scala 41:27]
    node T_1313 = and(T_1305, T_1312) @[Edges.scala 42:38]
    node T_1314 = or(T_1303, T_1313) @[Edges.scala 42:29]
    node T_1315 = bits(T_1301, 1, 1) @[Edges.scala 36:26]
    node T_1316 = bits(address, 1, 1) @[Edges.scala 37:26]
    node T_1318 = eq(T_1316, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1319 = and(T_1309, T_1318) @[Edges.scala 41:27]
    node T_1320 = and(T_1315, T_1319) @[Edges.scala 42:38]
    node T_1321 = or(T_1311, T_1320) @[Edges.scala 42:29]
    node T_1322 = and(T_1309, T_1316) @[Edges.scala 41:27]
    node T_1323 = and(T_1315, T_1322) @[Edges.scala 42:38]
    node T_1324 = or(T_1311, T_1323) @[Edges.scala 42:29]
    node T_1325 = and(T_1312, T_1318) @[Edges.scala 41:27]
    node T_1326 = and(T_1315, T_1325) @[Edges.scala 42:38]
    node T_1327 = or(T_1314, T_1326) @[Edges.scala 42:29]
    node T_1328 = and(T_1312, T_1316) @[Edges.scala 41:27]
    node T_1329 = and(T_1315, T_1328) @[Edges.scala 42:38]
    node T_1330 = or(T_1314, T_1329) @[Edges.scala 42:29]
    node T_1331 = bits(T_1301, 0, 0) @[Edges.scala 36:26]
    node T_1332 = bits(address, 0, 0) @[Edges.scala 37:26]
    node T_1334 = eq(T_1332, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1335 = and(T_1319, T_1334) @[Edges.scala 41:27]
    node T_1336 = and(T_1331, T_1335) @[Edges.scala 42:38]
    node T_1337 = or(T_1321, T_1336) @[Edges.scala 42:29]
    node T_1338 = and(T_1319, T_1332) @[Edges.scala 41:27]
    node T_1339 = and(T_1331, T_1338) @[Edges.scala 42:38]
    node T_1340 = or(T_1321, T_1339) @[Edges.scala 42:29]
    node T_1341 = and(T_1322, T_1334) @[Edges.scala 41:27]
    node T_1342 = and(T_1331, T_1341) @[Edges.scala 42:38]
    node T_1343 = or(T_1324, T_1342) @[Edges.scala 42:29]
    node T_1344 = and(T_1322, T_1332) @[Edges.scala 41:27]
    node T_1345 = and(T_1331, T_1344) @[Edges.scala 42:38]
    node T_1346 = or(T_1324, T_1345) @[Edges.scala 42:29]
    node T_1347 = and(T_1325, T_1334) @[Edges.scala 41:27]
    node T_1348 = and(T_1331, T_1347) @[Edges.scala 42:38]
    node T_1349 = or(T_1327, T_1348) @[Edges.scala 42:29]
    node T_1350 = and(T_1325, T_1332) @[Edges.scala 41:27]
    node T_1351 = and(T_1331, T_1350) @[Edges.scala 42:38]
    node T_1352 = or(T_1327, T_1351) @[Edges.scala 42:29]
    node T_1353 = and(T_1328, T_1334) @[Edges.scala 41:27]
    node T_1354 = and(T_1331, T_1353) @[Edges.scala 42:38]
    node T_1355 = or(T_1330, T_1354) @[Edges.scala 42:29]
    node T_1356 = and(T_1328, T_1332) @[Edges.scala 41:27]
    node T_1357 = and(T_1331, T_1356) @[Edges.scala 42:38]
    node T_1358 = or(T_1330, T_1357) @[Edges.scala 42:29]
    node T_1359 = cat(T_1340, T_1337) @[Cat.scala 20:58]
    node T_1360 = cat(T_1346, T_1343) @[Cat.scala 20:58]
    node T_1361 = cat(T_1360, T_1359) @[Cat.scala 20:58]
    node T_1362 = cat(T_1352, T_1349) @[Cat.scala 20:58]
    node T_1363 = cat(T_1358, T_1355) @[Cat.scala 20:58]
    node T_1364 = cat(T_1363, T_1362) @[Cat.scala 20:58]
    node T_1365 = cat(T_1364, T_1361) @[Cat.scala 20:58]
    T_1288.mask <= T_1365 @[Edges.scala 318:15]
    T_1288.data <= UInt<1>("h00") @[Edges.scala 319:15]
    node T_1369 = xor(address, UInt<1>("h00")) @[Parameters.scala 89:31]
    node T_1370 = cvt(T_1369) @[Parameters.scala 89:49]
    node T_1372 = and(T_1370, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_1373 = asSInt(T_1372) @[Parameters.scala 89:52]
    node T_1375 = eq(T_1373, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    node T_1377 = xor(address, UInt<27>("h04000000")) @[Parameters.scala 89:31]
    node T_1378 = cvt(T_1377) @[Parameters.scala 89:49]
    node T_1380 = and(T_1378, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_1381 = asSInt(T_1380) @[Parameters.scala 89:52]
    node T_1383 = eq(T_1381, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    wire T_1389 : UInt<1>[2] @[Parameters.scala 229:36]
    T_1389 is invalid @[Parameters.scala 229:36]
    T_1389[0] <= T_1375 @[Parameters.scala 229:36]
    T_1389[1] <= T_1383 @[Parameters.scala 229:36]
    node T_1393 = leq(UInt<1>("h00"), UInt<2>("h03")) @[Parameters.scala 61:32]
    node T_1395 = leq(UInt<2>("h03"), UInt<4>("h08")) @[Parameters.scala 61:42]
    node T_1396 = and(T_1393, T_1395) @[Parameters.scala 61:37]
    node T_1398 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
    node T_1399 = mux(T_1389[0], T_1398, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1401 = shl(T_1396, 0) @[Mux.scala 18:72]
    node T_1402 = mux(T_1389[1], T_1401, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1404 = or(T_1399, T_1402) @[Mux.scala 18:72]
    wire T_1405 : UInt<1>
    T_1405 is invalid
    T_1405 <= T_1404 @[Mux.scala 18:72]
    wire T_1414 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>} @[Edges.scala 340:17]
    T_1414 is invalid @[Edges.scala 340:17]
    T_1414.opcode <= UInt<1>("h01") @[Edges.scala 341:15]
    T_1414.param <= UInt<1>("h00") @[Edges.scala 342:15]
    T_1414.size <= UInt<2>("h03") @[Edges.scala 343:15]
    T_1414.source <= io.legacy.acquire.bits.client_xact_id @[Edges.scala 344:15]
    node T_1423 = shr(address, 3) @[Edges.scala 345:28]
    T_1414.addr_hi <= T_1423 @[Edges.scala 345:15]
    T_1414.mask <= wmask @[Edges.scala 346:15]
    T_1414.data <= io.legacy.acquire.bits.data @[Edges.scala 347:15]
    node T_1426 = xor(address, UInt<1>("h00")) @[Parameters.scala 89:31]
    node T_1427 = cvt(T_1426) @[Parameters.scala 89:49]
    node T_1429 = and(T_1427, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_1430 = asSInt(T_1429) @[Parameters.scala 89:52]
    node T_1432 = eq(T_1430, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    node T_1434 = xor(address, UInt<27>("h04000000")) @[Parameters.scala 89:31]
    node T_1435 = cvt(T_1434) @[Parameters.scala 89:49]
    node T_1437 = and(T_1435, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_1438 = asSInt(T_1437) @[Parameters.scala 89:52]
    node T_1440 = eq(T_1438, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    wire T_1446 : UInt<1>[2] @[Parameters.scala 229:36]
    T_1446 is invalid @[Parameters.scala 229:36]
    T_1446[0] <= T_1432 @[Parameters.scala 229:36]
    T_1446[1] <= T_1440 @[Parameters.scala 229:36]
    node T_1450 = leq(UInt<1>("h00"), UInt<3>("h06")) @[Parameters.scala 61:32]
    node T_1452 = leq(UInt<3>("h06"), UInt<4>("h08")) @[Parameters.scala 61:42]
    node T_1453 = and(T_1450, T_1452) @[Parameters.scala 61:37]
    node T_1455 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
    node T_1456 = mux(T_1446[0], T_1455, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1458 = shl(T_1453, 0) @[Mux.scala 18:72]
    node T_1459 = mux(T_1446[1], T_1458, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1461 = or(T_1456, T_1459) @[Mux.scala 18:72]
    wire T_1462 : UInt<1>
    T_1462 is invalid
    T_1462 <= T_1461 @[Mux.scala 18:72]
    wire T_1471 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>} @[Edges.scala 340:17]
    T_1471 is invalid @[Edges.scala 340:17]
    T_1471.opcode <= UInt<1>("h01") @[Edges.scala 341:15]
    T_1471.param <= UInt<1>("h00") @[Edges.scala 342:15]
    T_1471.size <= UInt<3>("h06") @[Edges.scala 343:15]
    T_1471.source <= io.legacy.acquire.bits.client_xact_id @[Edges.scala 344:15]
    node T_1480 = shr(address, 3) @[Edges.scala 345:28]
    T_1471.addr_hi <= T_1480 @[Edges.scala 345:15]
    T_1471.mask <= wmask @[Edges.scala 346:15]
    T_1471.data <= io.legacy.acquire.bits.data @[Edges.scala 347:15]
    node T_1484 = leq(UInt<1>("h00"), UInt<3>("h06")) @[Parameters.scala 61:32]
    node T_1486 = leq(UInt<3>("h06"), UInt<4>("h08")) @[Parameters.scala 61:42]
    node T_1487 = and(T_1484, T_1486) @[Parameters.scala 61:37]
    wire T_1496 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>} @[Edges.scala 382:17]
    T_1496 is invalid @[Edges.scala 382:17]
    T_1496.opcode <= UInt<3>("h05") @[Edges.scala 383:15]
    T_1496.param <= UInt<1>("h00") @[Edges.scala 384:15]
    T_1496.size <= UInt<3>("h06") @[Edges.scala 385:15]
    T_1496.source <= io.legacy.acquire.bits.client_xact_id @[Edges.scala 386:15]
    node T_1504 = shr(address, 3) @[Edges.scala 387:28]
    T_1496.addr_hi <= T_1504 @[Edges.scala 387:15]
    node T_1507 = dshl(UInt<1>("h01"), UInt<2>("h02")) @[OneHot.scala 46:16]
    node T_1508 = bits(T_1507, 2, 0) @[OneHot.scala 46:41]
    node T_1510 = geq(UInt<3>("h06"), UInt<2>("h03")) @[Edges.scala 33:21]
    node T_1512 = bits(T_1508, 2, 2) @[Edges.scala 36:26]
    node T_1513 = bits(address, 2, 2) @[Edges.scala 37:26]
    node T_1515 = eq(T_1513, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1516 = and(UInt<1>("h01"), T_1515) @[Edges.scala 41:27]
    node T_1517 = and(T_1512, T_1516) @[Edges.scala 42:38]
    node T_1518 = or(T_1510, T_1517) @[Edges.scala 42:29]
    node T_1519 = and(UInt<1>("h01"), T_1513) @[Edges.scala 41:27]
    node T_1520 = and(T_1512, T_1519) @[Edges.scala 42:38]
    node T_1521 = or(T_1510, T_1520) @[Edges.scala 42:29]
    node T_1522 = bits(T_1508, 1, 1) @[Edges.scala 36:26]
    node T_1523 = bits(address, 1, 1) @[Edges.scala 37:26]
    node T_1525 = eq(T_1523, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1526 = and(T_1516, T_1525) @[Edges.scala 41:27]
    node T_1527 = and(T_1522, T_1526) @[Edges.scala 42:38]
    node T_1528 = or(T_1518, T_1527) @[Edges.scala 42:29]
    node T_1529 = and(T_1516, T_1523) @[Edges.scala 41:27]
    node T_1530 = and(T_1522, T_1529) @[Edges.scala 42:38]
    node T_1531 = or(T_1518, T_1530) @[Edges.scala 42:29]
    node T_1532 = and(T_1519, T_1525) @[Edges.scala 41:27]
    node T_1533 = and(T_1522, T_1532) @[Edges.scala 42:38]
    node T_1534 = or(T_1521, T_1533) @[Edges.scala 42:29]
    node T_1535 = and(T_1519, T_1523) @[Edges.scala 41:27]
    node T_1536 = and(T_1522, T_1535) @[Edges.scala 42:38]
    node T_1537 = or(T_1521, T_1536) @[Edges.scala 42:29]
    node T_1538 = bits(T_1508, 0, 0) @[Edges.scala 36:26]
    node T_1539 = bits(address, 0, 0) @[Edges.scala 37:26]
    node T_1541 = eq(T_1539, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1542 = and(T_1526, T_1541) @[Edges.scala 41:27]
    node T_1543 = and(T_1538, T_1542) @[Edges.scala 42:38]
    node T_1544 = or(T_1528, T_1543) @[Edges.scala 42:29]
    node T_1545 = and(T_1526, T_1539) @[Edges.scala 41:27]
    node T_1546 = and(T_1538, T_1545) @[Edges.scala 42:38]
    node T_1547 = or(T_1528, T_1546) @[Edges.scala 42:29]
    node T_1548 = and(T_1529, T_1541) @[Edges.scala 41:27]
    node T_1549 = and(T_1538, T_1548) @[Edges.scala 42:38]
    node T_1550 = or(T_1531, T_1549) @[Edges.scala 42:29]
    node T_1551 = and(T_1529, T_1539) @[Edges.scala 41:27]
    node T_1552 = and(T_1538, T_1551) @[Edges.scala 42:38]
    node T_1553 = or(T_1531, T_1552) @[Edges.scala 42:29]
    node T_1554 = and(T_1532, T_1541) @[Edges.scala 41:27]
    node T_1555 = and(T_1538, T_1554) @[Edges.scala 42:38]
    node T_1556 = or(T_1534, T_1555) @[Edges.scala 42:29]
    node T_1557 = and(T_1532, T_1539) @[Edges.scala 41:27]
    node T_1558 = and(T_1538, T_1557) @[Edges.scala 42:38]
    node T_1559 = or(T_1534, T_1558) @[Edges.scala 42:29]
    node T_1560 = and(T_1535, T_1541) @[Edges.scala 41:27]
    node T_1561 = and(T_1538, T_1560) @[Edges.scala 42:38]
    node T_1562 = or(T_1537, T_1561) @[Edges.scala 42:29]
    node T_1563 = and(T_1535, T_1539) @[Edges.scala 41:27]
    node T_1564 = and(T_1538, T_1563) @[Edges.scala 42:38]
    node T_1565 = or(T_1537, T_1564) @[Edges.scala 42:29]
    node T_1566 = cat(T_1547, T_1544) @[Cat.scala 20:58]
    node T_1567 = cat(T_1553, T_1550) @[Cat.scala 20:58]
    node T_1568 = cat(T_1567, T_1566) @[Cat.scala 20:58]
    node T_1569 = cat(T_1559, T_1556) @[Cat.scala 20:58]
    node T_1570 = cat(T_1565, T_1562) @[Cat.scala 20:58]
    node T_1571 = cat(T_1570, T_1569) @[Cat.scala 20:58]
    node T_1572 = cat(T_1571, T_1568) @[Cat.scala 20:58]
    T_1496.mask <= T_1572 @[Edges.scala 388:15]
    T_1496.data <= UInt<1>("h00") @[Edges.scala 389:15]
    node T_1577 = leq(UInt<1>("h00"), UInt<3>("h06")) @[Parameters.scala 61:32]
    node T_1579 = leq(UInt<3>("h06"), UInt<4>("h08")) @[Parameters.scala 61:42]
    node T_1580 = and(T_1577, T_1579) @[Parameters.scala 61:37]
    wire T_1589 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>} @[Edges.scala 382:17]
    T_1589 is invalid @[Edges.scala 382:17]
    T_1589.opcode <= UInt<3>("h05") @[Edges.scala 383:15]
    T_1589.param <= UInt<1>("h01") @[Edges.scala 384:15]
    T_1589.size <= UInt<3>("h06") @[Edges.scala 385:15]
    T_1589.source <= io.legacy.acquire.bits.client_xact_id @[Edges.scala 386:15]
    node T_1597 = shr(address, 3) @[Edges.scala 387:28]
    T_1589.addr_hi <= T_1597 @[Edges.scala 387:15]
    node T_1600 = dshl(UInt<1>("h01"), UInt<2>("h02")) @[OneHot.scala 46:16]
    node T_1601 = bits(T_1600, 2, 0) @[OneHot.scala 46:41]
    node T_1603 = geq(UInt<3>("h06"), UInt<2>("h03")) @[Edges.scala 33:21]
    node T_1605 = bits(T_1601, 2, 2) @[Edges.scala 36:26]
    node T_1606 = bits(address, 2, 2) @[Edges.scala 37:26]
    node T_1608 = eq(T_1606, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1609 = and(UInt<1>("h01"), T_1608) @[Edges.scala 41:27]
    node T_1610 = and(T_1605, T_1609) @[Edges.scala 42:38]
    node T_1611 = or(T_1603, T_1610) @[Edges.scala 42:29]
    node T_1612 = and(UInt<1>("h01"), T_1606) @[Edges.scala 41:27]
    node T_1613 = and(T_1605, T_1612) @[Edges.scala 42:38]
    node T_1614 = or(T_1603, T_1613) @[Edges.scala 42:29]
    node T_1615 = bits(T_1601, 1, 1) @[Edges.scala 36:26]
    node T_1616 = bits(address, 1, 1) @[Edges.scala 37:26]
    node T_1618 = eq(T_1616, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1619 = and(T_1609, T_1618) @[Edges.scala 41:27]
    node T_1620 = and(T_1615, T_1619) @[Edges.scala 42:38]
    node T_1621 = or(T_1611, T_1620) @[Edges.scala 42:29]
    node T_1622 = and(T_1609, T_1616) @[Edges.scala 41:27]
    node T_1623 = and(T_1615, T_1622) @[Edges.scala 42:38]
    node T_1624 = or(T_1611, T_1623) @[Edges.scala 42:29]
    node T_1625 = and(T_1612, T_1618) @[Edges.scala 41:27]
    node T_1626 = and(T_1615, T_1625) @[Edges.scala 42:38]
    node T_1627 = or(T_1614, T_1626) @[Edges.scala 42:29]
    node T_1628 = and(T_1612, T_1616) @[Edges.scala 41:27]
    node T_1629 = and(T_1615, T_1628) @[Edges.scala 42:38]
    node T_1630 = or(T_1614, T_1629) @[Edges.scala 42:29]
    node T_1631 = bits(T_1601, 0, 0) @[Edges.scala 36:26]
    node T_1632 = bits(address, 0, 0) @[Edges.scala 37:26]
    node T_1634 = eq(T_1632, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_1635 = and(T_1619, T_1634) @[Edges.scala 41:27]
    node T_1636 = and(T_1631, T_1635) @[Edges.scala 42:38]
    node T_1637 = or(T_1621, T_1636) @[Edges.scala 42:29]
    node T_1638 = and(T_1619, T_1632) @[Edges.scala 41:27]
    node T_1639 = and(T_1631, T_1638) @[Edges.scala 42:38]
    node T_1640 = or(T_1621, T_1639) @[Edges.scala 42:29]
    node T_1641 = and(T_1622, T_1634) @[Edges.scala 41:27]
    node T_1642 = and(T_1631, T_1641) @[Edges.scala 42:38]
    node T_1643 = or(T_1624, T_1642) @[Edges.scala 42:29]
    node T_1644 = and(T_1622, T_1632) @[Edges.scala 41:27]
    node T_1645 = and(T_1631, T_1644) @[Edges.scala 42:38]
    node T_1646 = or(T_1624, T_1645) @[Edges.scala 42:29]
    node T_1647 = and(T_1625, T_1634) @[Edges.scala 41:27]
    node T_1648 = and(T_1631, T_1647) @[Edges.scala 42:38]
    node T_1649 = or(T_1627, T_1648) @[Edges.scala 42:29]
    node T_1650 = and(T_1625, T_1632) @[Edges.scala 41:27]
    node T_1651 = and(T_1631, T_1650) @[Edges.scala 42:38]
    node T_1652 = or(T_1627, T_1651) @[Edges.scala 42:29]
    node T_1653 = and(T_1628, T_1634) @[Edges.scala 41:27]
    node T_1654 = and(T_1631, T_1653) @[Edges.scala 42:38]
    node T_1655 = or(T_1630, T_1654) @[Edges.scala 42:29]
    node T_1656 = and(T_1628, T_1632) @[Edges.scala 41:27]
    node T_1657 = and(T_1631, T_1656) @[Edges.scala 42:38]
    node T_1658 = or(T_1630, T_1657) @[Edges.scala 42:29]
    node T_1659 = cat(T_1640, T_1637) @[Cat.scala 20:58]
    node T_1660 = cat(T_1646, T_1643) @[Cat.scala 20:58]
    node T_1661 = cat(T_1660, T_1659) @[Cat.scala 20:58]
    node T_1662 = cat(T_1652, T_1649) @[Cat.scala 20:58]
    node T_1663 = cat(T_1658, T_1655) @[Cat.scala 20:58]
    node T_1664 = cat(T_1663, T_1662) @[Cat.scala 20:58]
    node T_1665 = cat(T_1664, T_1661) @[Cat.scala 20:58]
    T_1589.mask <= T_1665 @[Edges.scala 388:15]
    T_1589.data <= UInt<1>("h00") @[Edges.scala 389:15]
    node T_1668 = eq(UInt<3>("h04"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1669 = mux(T_1668, atomics, T_1154) @[Mux.scala 46:16]
    node T_1677 = eq(UInt<3>("h06"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1678 = mux(T_1677, T_1589, T_1669) @[Mux.scala 46:16]
    node T_1686 = eq(UInt<3>("h05"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1687 = mux(T_1686, T_1496, T_1678) @[Mux.scala 46:16]
    node T_1695 = eq(UInt<3>("h03"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1696 = mux(T_1695, T_1471, T_1687) @[Mux.scala 46:16]
    node T_1704 = eq(UInt<3>("h02"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1705 = mux(T_1704, T_1414, T_1696) @[Mux.scala 46:16]
    node T_1713 = eq(UInt<3>("h01"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1714 = mux(T_1713, T_1288, T_1705) @[Mux.scala 46:16]
    node T_1722 = eq(UInt<3>("h00"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1723 = mux(T_1722, T_1176, T_1714) @[Mux.scala 46:16]
    io.out[0].a.bits <- T_1723 @[Legacy.scala 86:16]
    node T_1738 = eq(UInt<3>("h04"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1739 = mux(T_1738, UInt<3>("h07"), UInt<3>("h07")) @[Mux.scala 46:16]
    node T_1740 = eq(UInt<3>("h06"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1741 = mux(T_1740, UInt<6>("h03f"), T_1739) @[Mux.scala 46:16]
    node T_1742 = eq(UInt<3>("h05"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1743 = mux(T_1742, UInt<6>("h03f"), T_1741) @[Mux.scala 46:16]
    node T_1744 = eq(UInt<3>("h03"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1745 = mux(T_1744, UInt<6>("h03f"), T_1743) @[Mux.scala 46:16]
    node T_1746 = eq(UInt<3>("h02"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1747 = mux(T_1746, UInt<3>("h07"), T_1745) @[Mux.scala 46:16]
    node T_1748 = eq(UInt<3>("h01"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node T_1749 = mux(T_1748, UInt<6>("h03f"), T_1747) @[Mux.scala 46:16]
    node T_1750 = eq(UInt<3>("h00"), io.legacy.acquire.bits.a_type) @[Mux.scala 46:19]
    node addressMask = mux(T_1750, UInt<3>("h07"), T_1749) @[Mux.scala 46:16]
    io.out[0].a.bits.source <= io.legacy.acquire.bits.client_xact_id @[Legacy.scala 107:24]
    io.out[0].a.bits.data <= io.legacy.acquire.bits.data @[Legacy.scala 108:24]
    node T_1751 = not(address) @[Legacy.scala 109:29]
    node T_1752 = or(T_1751, addressMask) @[Legacy.scala 109:38]
    node T_1753 = not(T_1752) @[Legacy.scala 109:27]
    node T_1754 = shr(T_1753, 3) @[Legacy.scala 109:53]
    io.out[0].a.bits.addr_hi <= T_1754 @[Legacy.scala 109:24]
    node T_1756 = eq(io.out[0].d.valid, UInt<1>("h00")) @[Legacy.scala 112:13]
    node T_1758 = eq(io.out[0].d.bits.error, UInt<1>("h00")) @[Legacy.scala 112:29]
    node T_1759 = or(T_1756, T_1758) @[Legacy.scala 112:26]
    node T_1760 = or(T_1759, reset) @[Legacy.scala 112:12]
    node T_1762 = eq(T_1760, UInt<1>("h00")) @[Legacy.scala 112:12]
    when T_1762 : @[Legacy.scala 112:12]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Legacy.scala:112 assert (!out.d.valid || !out.d.bits.error)\n") @[Legacy.scala 112:12]
      stop(clk, UInt<1>(1), 1) @[Legacy.scala 112:12]
      skip @[Legacy.scala 112:12]
    reg beatCounter : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    node T_1764 = and(io.out[0].d.ready, io.out[0].d.valid) @[Decoupled.scala 21:42]
    node T_1765 = bits(io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
    node T_1766 = and(T_1764, T_1765) @[Legacy.scala 116:24]
    node T_1767 = eq(io.out[0].d.bits.size, UInt<3>("h06")) @[Legacy.scala 116:71]
    node T_1768 = and(T_1766, T_1767) @[Legacy.scala 116:52]
    when T_1768 : @[Legacy.scala 116:82]
      node T_1770 = add(beatCounter, UInt<1>("h01")) @[Legacy.scala 117:34]
      node T_1771 = tail(T_1770, 1) @[Legacy.scala 117:34]
      beatCounter <= T_1771 @[Legacy.scala 117:19]
      skip @[Legacy.scala 116:82]
    node T_1774 = eq(io.out[0].d.bits.size, UInt<2>("h03")) @[Legacy.scala 123:55]
    node T_1777 = mux(T_1774, UInt<3>("h04"), UInt<3>("h05")) @[Legacy.scala 123:38]
    node T_1779 = eq(UInt<2>("h02"), io.out[0].d.bits.opcode) @[Mux.scala 46:19]
    node T_1780 = mux(T_1779, UInt<3>("h01"), UInt<3>("h01")) @[Mux.scala 46:16]
    node T_1781 = eq(UInt<1>("h01"), io.out[0].d.bits.opcode) @[Mux.scala 46:19]
    node T_1782 = mux(T_1781, T_1777, T_1780) @[Mux.scala 46:16]
    node T_1783 = eq(UInt<1>("h00"), io.out[0].d.bits.opcode) @[Mux.scala 46:19]
    node T_1784 = mux(T_1783, UInt<3>("h03"), T_1782) @[Mux.scala 46:16]
    io.legacy.grant.bits.g_type <= T_1784 @[Legacy.scala 121:18]
    io.legacy.grant.bits.is_builtin_type <= UInt<1>("h01") @[Legacy.scala 125:27]
    io.legacy.grant.bits.client_xact_id <= io.out[0].d.bits.source @[Legacy.scala 126:27]
    io.legacy.grant.bits.manager_xact_id <= io.out[0].d.bits.sink @[Legacy.scala 127:27]
    io.legacy.grant.bits.data <= io.out[0].d.bits.data @[Legacy.scala 128:27]
    io.legacy.grant.bits.addr_beat <= beatCounter @[Legacy.scala 129:27]
    io.out[0].b.ready <= UInt<1>("h01") @[Legacy.scala 132:17]
    io.out[0].c.valid <= UInt<1>("h00") @[Legacy.scala 133:17]
    io.out[0].e.valid <= UInt<1>("h00") @[Legacy.scala 134:17]
    
  module TLHintHandler : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1], out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1]}
    
    io is invalid
    reg T_1969 : UInt<5>, clk with : (reset => (reset, UInt<5>("h00")))
    reg T_1971 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1973 = neq(T_1969, UInt<1>("h00")) @[HintHandler.scala 38:33]
    node T_1975 = eq(T_1971, UInt<1>("h00")) @[HintHandler.scala 40:15]
    node T_1977 = eq(T_1973, UInt<1>("h00")) @[HintHandler.scala 40:30]
    node T_1978 = or(T_1975, T_1977) @[HintHandler.scala 40:27]
    node T_1979 = or(T_1978, reset) @[HintHandler.scala 40:14]
    node T_1981 = eq(T_1979, UInt<1>("h00")) @[HintHandler.scala 40:14]
    when T_1981 : @[HintHandler.scala 40:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at HintHandler.scala:40 assert (!hintHoldsD || !outerHoldsD)\n") @[HintHandler.scala 40:14]
      stop(clk, UInt<1>(1), 1) @[HintHandler.scala 40:14]
      skip @[HintHandler.scala 40:14]
    node T_1983 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
    node T_1984 = dshl(T_1983, io.out[0].d.bits.size) @[package.scala 11:71]
    node T_1985 = bits(T_1984, 7, 0) @[package.scala 11:76]
    node T_1986 = not(T_1985) @[package.scala 11:40]
    node T_1987 = shr(T_1986, 3) @[Edges.scala 219:57]
    node T_1988 = bits(io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
    node T_1990 = mux(T_1988, T_1987, UInt<1>("h00")) @[Edges.scala 220:12]
    node T_1991 = and(io.out[0].d.ready, io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_1991 : @[HintHandler.scala 44:27]
      node T_1993 = sub(T_1969, UInt<1>("h01")) @[HintHandler.scala 44:65]
      node T_1994 = tail(T_1993, 1) @[HintHandler.scala 44:65]
      node T_1995 = mux(T_1973, T_1994, T_1990) @[HintHandler.scala 44:43]
      T_1969 <= T_1995 @[HintHandler.scala 44:37]
      skip @[HintHandler.scala 44:27]
    node T_1997 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_1998 = dshl(T_1997, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_1999 = bits(T_1998, 2, 0) @[package.scala 11:76]
    node T_2000 = not(T_1999) @[package.scala 11:40]
    node T_2001 = bits(io.in[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
    node T_2002 = bits(io.in[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
    node T_2004 = neq(T_2002, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_2006 = eq(T_2004, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_2007 = or(T_2001, T_2002) @[Edges.scala 63:32]
    node T_2008 = bits(T_2007, 3, 2) @[Edges.scala 61:22]
    node T_2009 = bits(T_2007, 1, 0) @[Edges.scala 62:22]
    node T_2011 = neq(T_2009, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_2013 = eq(T_2011, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_2014 = or(T_2008, T_2009) @[Edges.scala 63:32]
    node T_2015 = bits(T_2014, 0, 0) @[Edges.scala 58:14]
    node T_2016 = not(T_2015) @[Edges.scala 58:9]
    node T_2017 = cat(T_2013, T_2016) @[Cat.scala 20:58]
    node T_2018 = cat(T_2006, T_2017) @[Cat.scala 20:58]
    node T_2019 = not(T_2000) @[Edges.scala 66:39]
    node T_2020 = and(T_2018, T_2019) @[Edges.scala 66:37]
    node T_2021 = cat(io.in[0].a.bits.addr_hi, T_2020) @[Cat.scala 20:58]
    node T_2024 = eq(UInt<1>("h00"), UInt<1>("h00")) @[HintHandler.scala 48:38]
    node T_2025 = eq(io.in[0].a.bits.opcode, UInt<3>("h05")) @[HintHandler.scala 49:53]
    node T_2026 = and(T_2024, T_2025) @[HintHandler.scala 49:33]
    node T_2027 = and(io.in[0].a.valid, T_2026) @[HintHandler.scala 50:35]
    node T_2029 = eq(T_1973, UInt<1>("h00")) @[HintHandler.scala 54:38]
    node T_2031 = eq(io.out[0].d.valid, UInt<1>("h00")) @[HintHandler.scala 54:54]
    node T_2032 = and(T_2029, T_2031) @[HintHandler.scala 54:51]
    node T_2033 = or(T_1971, T_2032) @[HintHandler.scala 54:34]
    node T_2034 = and(T_2027, T_2033) @[HintHandler.scala 55:32]
    node T_2036 = eq(io.in[0].d.ready, UInt<1>("h00")) @[HintHandler.scala 55:48]
    node T_2037 = and(T_2034, T_2036) @[HintHandler.scala 55:45]
    T_1971 <= T_2037 @[HintHandler.scala 55:18]
    node T_2039 = eq(T_1971, UInt<1>("h00")) @[HintHandler.scala 57:15]
    node T_2040 = or(T_2039, T_2027) @[HintHandler.scala 57:27]
    node T_2041 = or(T_2040, reset) @[HintHandler.scala 57:14]
    node T_2043 = eq(T_2041, UInt<1>("h00")) @[HintHandler.scala 57:14]
    when T_2043 : @[HintHandler.scala 57:14]
      printf(clk, UInt<1>(1), "Assertion failed\n    at HintHandler.scala:57 assert (!hintHoldsD || hintWantsD)\n") @[HintHandler.scala 57:14]
      stop(clk, UInt<1>(1), 1) @[HintHandler.scala 57:14]
      skip @[HintHandler.scala 57:14]
    node T_2044 = mux(T_2033, T_2027, io.out[0].d.valid) @[HintHandler.scala 59:25]
    io.in[0].d.valid <= T_2044 @[HintHandler.scala 59:19]
    node T_2046 = xor(T_2021, UInt<1>("h00")) @[Parameters.scala 89:31]
    node T_2047 = cvt(T_2046) @[Parameters.scala 89:49]
    node T_2049 = and(T_2047, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_2050 = asSInt(T_2049) @[Parameters.scala 89:52]
    node T_2052 = eq(T_2050, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    node T_2054 = xor(T_2021, UInt<27>("h04000000")) @[Parameters.scala 89:31]
    node T_2055 = cvt(T_2054) @[Parameters.scala 89:49]
    node T_2057 = and(T_2055, asSInt(UInt<28>("h04000000"))) @[Parameters.scala 89:52]
    node T_2058 = asSInt(T_2057) @[Parameters.scala 89:52]
    node T_2060 = eq(T_2058, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    wire T_2066 : UInt<1>[2] @[Parameters.scala 229:36]
    T_2066 is invalid @[Parameters.scala 229:36]
    T_2066[0] <= T_2052 @[Parameters.scala 229:36]
    T_2066[1] <= T_2060 @[Parameters.scala 229:36]
    node T_2071 = mux(T_2066[0], UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2073 = mux(T_2066[1], UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2075 = or(T_2071, T_2073) @[Mux.scala 18:72]
    wire T_2076 : UInt<1>
    T_2076 is invalid
    T_2076 <= T_2075 @[Mux.scala 18:72]
    node T_2078 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_2079 = dshl(T_2078, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_2080 = bits(T_2079, 2, 0) @[package.scala 11:76]
    node T_2081 = not(T_2080) @[package.scala 11:40]
    node T_2082 = bits(io.in[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
    node T_2083 = bits(io.in[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
    node T_2085 = neq(T_2083, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_2087 = eq(T_2085, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_2088 = or(T_2082, T_2083) @[Edges.scala 63:32]
    node T_2089 = bits(T_2088, 3, 2) @[Edges.scala 61:22]
    node T_2090 = bits(T_2088, 1, 0) @[Edges.scala 62:22]
    node T_2092 = neq(T_2090, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_2094 = eq(T_2092, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_2095 = or(T_2089, T_2090) @[Edges.scala 63:32]
    node T_2096 = bits(T_2095, 0, 0) @[Edges.scala 58:14]
    node T_2097 = not(T_2096) @[Edges.scala 58:9]
    node T_2098 = cat(T_2094, T_2097) @[Cat.scala 20:58]
    node T_2099 = cat(T_2087, T_2098) @[Cat.scala 20:58]
    node T_2100 = not(T_2081) @[Edges.scala 66:39]
    node T_2101 = and(T_2099, T_2100) @[Edges.scala 66:37]
    node T_2102 = cat(io.in[0].a.bits.addr_hi, T_2101) @[Cat.scala 20:58]
    wire T_2112 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>} @[Edges.scala 620:17]
    T_2112 is invalid @[Edges.scala 620:17]
    T_2112.opcode <= UInt<2>("h02") @[Edges.scala 621:15]
    T_2112.param <= UInt<1>("h00") @[Edges.scala 622:15]
    T_2112.size <= io.in[0].a.bits.size @[Edges.scala 623:15]
    T_2112.source <= io.in[0].a.bits.source @[Edges.scala 624:15]
    T_2112.sink <= T_2076 @[Edges.scala 625:15]
    T_2112.addr_lo <= T_2102 @[Edges.scala 626:15]
    T_2112.data <= UInt<1>("h00") @[Edges.scala 627:15]
    T_2112.error <= UInt<1>("h00") @[Edges.scala 628:15]
    node T_2124 = mux(T_2033, T_2112, io.out[0].d.bits) @[HintHandler.scala 60:25]
    io.in[0].d.bits <- T_2124 @[HintHandler.scala 60:19]
    node T_2134 = eq(T_1971, UInt<1>("h00")) @[HintHandler.scala 61:36]
    node T_2135 = and(io.in[0].d.ready, T_2134) @[HintHandler.scala 61:33]
    io.out[0].d.ready <= T_2135 @[HintHandler.scala 61:19]
    node T_2136 = and(T_2033, io.in[0].d.ready) @[HintHandler.scala 63:49]
    node T_2137 = mux(T_2026, T_2136, io.out[0].a.ready) @[HintHandler.scala 63:25]
    io.in[0].a.ready <= T_2137 @[HintHandler.scala 63:19]
    node T_2139 = eq(T_2026, UInt<1>("h00")) @[HintHandler.scala 64:36]
    node T_2140 = and(io.in[0].a.valid, T_2139) @[HintHandler.scala 64:33]
    io.out[0].a.valid <= T_2140 @[HintHandler.scala 64:19]
    io.out[0].a.bits <- io.in[0].a.bits @[HintHandler.scala 65:19]
    io.in[0].b.valid <= UInt<1>("h00") @[HintHandler.scala 116:18]
    io.in[0].c.ready <= UInt<1>("h01") @[HintHandler.scala 117:18]
    io.out[0].b.ready <= UInt<1>("h01") @[HintHandler.scala 118:19]
    io.out[0].c.valid <= UInt<1>("h00") @[HintHandler.scala 119:19]
    io.in[0].e.ready <= UInt<1>("h01") @[HintHandler.scala 128:18]
    io.out[0].e.valid <= UInt<1>("h00") @[HintHandler.scala 129:19]
    
  module TLWidthWidget : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1], out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1]}
    
    io is invalid
    node T_1968 = bits(io.in[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
    node T_1970 = eq(T_1968, UInt<1>("h00")) @[Edges.scala 125:28]
    node T_1972 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_1973 = dshl(T_1972, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_1974 = bits(T_1973, 2, 0) @[package.scala 11:76]
    node T_1975 = not(T_1974) @[package.scala 11:40]
    node T_1976 = bits(io.in[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
    node T_1977 = bits(io.in[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
    node T_1979 = neq(T_1977, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_1981 = eq(T_1979, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_1982 = or(T_1976, T_1977) @[Edges.scala 63:32]
    node T_1983 = bits(T_1982, 3, 2) @[Edges.scala 61:22]
    node T_1984 = bits(T_1982, 1, 0) @[Edges.scala 62:22]
    node T_1986 = neq(T_1984, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_1988 = eq(T_1986, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_1989 = or(T_1983, T_1984) @[Edges.scala 63:32]
    node T_1990 = bits(T_1989, 0, 0) @[Edges.scala 58:14]
    node T_1991 = not(T_1990) @[Edges.scala 58:9]
    node T_1992 = cat(T_1988, T_1991) @[Cat.scala 20:58]
    node T_1993 = cat(T_1981, T_1992) @[Cat.scala 20:58]
    node T_1994 = not(T_1975) @[Edges.scala 66:39]
    node T_1995 = and(T_1993, T_1994) @[Edges.scala 66:37]
    node T_1996 = cat(io.in[0].a.bits.addr_hi, T_1995) @[Cat.scala 20:58]
    node T_1997 = shr(T_1996, 2) @[WidthWidget.scala 95:52]
    node T_1998 = bits(io.in[0].a.bits.data, 31, 0) @[WidthWidget.scala 99:55]
    node T_1999 = bits(io.in[0].a.bits.data, 63, 32) @[WidthWidget.scala 99:55]
    wire T_2005 : UInt<32>[2] @[WidthWidget.scala 99:44]
    T_2005 is invalid @[WidthWidget.scala 99:44]
    T_2005[0] <= T_1998 @[WidthWidget.scala 99:44]
    T_2005[1] <= T_1999 @[WidthWidget.scala 99:44]
    node T_2007 = bits(io.in[0].a.bits.mask, 3, 0) @[WidthWidget.scala 100:55]
    node T_2008 = bits(io.in[0].a.bits.mask, 7, 4) @[WidthWidget.scala 100:55]
    wire T_2014 : UInt<4>[2] @[WidthWidget.scala 100:44]
    T_2014 is invalid @[WidthWidget.scala 100:44]
    T_2014[0] <= T_2007 @[WidthWidget.scala 100:44]
    T_2014[1] <= T_2008 @[WidthWidget.scala 100:44]
    node T_2018 = asUInt(asSInt(UInt<2>("h03"))) @[WidthWidget.scala 101:76]
    reg T_2019 : UInt<2>, clk with : (reset => (reset, T_2018))
    node T_2021 = neq(T_2014[0], UInt<1>("h00")) @[WidthWidget.scala 102:36]
    node T_2023 = neq(T_2014[1], UInt<1>("h00")) @[WidthWidget.scala 102:36]
    node T_2025 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_2026 = dshl(T_2025, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_2027 = bits(T_2026, 2, 0) @[package.scala 11:76]
    node T_2028 = not(T_2027) @[package.scala 11:40]
    node T_2029 = shr(T_2028, 2) @[WidthWidget.scala 105:56]
    node T_2031 = bits(T_2029, 0, 0) @[WidthWidget.scala 106:82]
    node T_2033 = eq(T_2031, UInt<1>("h00")) @[WidthWidget.scala 106:74]
    node T_2034 = bits(T_2019, 1, 1) @[WidthWidget.scala 108:25]
    node T_2035 = cat(T_2033, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_2036 = shl(T_2019, 1) @[WidthWidget.scala 109:69]
    node T_2037 = mux(T_2034, T_2035, T_2036) @[WidthWidget.scala 109:27]
    node T_2038 = bits(T_2037, 1, 1) @[WidthWidget.scala 110:28]
    node T_2040 = eq(T_1970, UInt<1>("h00")) @[WidthWidget.scala 110:41]
    node T_2041 = or(T_2038, T_2040) @[WidthWidget.scala 110:38]
    node T_2042 = and(io.out[0].a.ready, io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_2042 : @[WidthWidget.scala 111:25]
      T_2019 <= T_2037 @[WidthWidget.scala 112:16]
      node T_2044 = eq(T_1970, UInt<1>("h00")) @[WidthWidget.scala 113:15]
      when T_2044 : @[WidthWidget.scala 113:25]
        node T_2046 = asUInt(asSInt(UInt<2>("h03"))) @[WidthWidget.scala 113:61]
        T_2019 <= T_2046 @[WidthWidget.scala 113:34]
        skip @[WidthWidget.scala 113:25]
      skip @[WidthWidget.scala 111:25]
    node T_2047 = cat(T_2023, T_2021) @[Cat.scala 20:58]
    node T_2048 = and(T_2047, T_2037) @[WidthWidget.scala 116:39]
    node T_2049 = bits(T_2048, 0, 0) @[Mux.scala 20:36]
    node T_2050 = bits(T_2048, 1, 1) @[Mux.scala 20:36]
    node T_2052 = mux(T_2049, T_2005[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2054 = mux(T_2050, T_2005[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2056 = or(T_2052, T_2054) @[Mux.scala 18:72]
    wire T_2057 : UInt<32>
    T_2057 is invalid
    T_2057 <= T_2056 @[Mux.scala 18:72]
    node T_2058 = bits(T_2048, 0, 0) @[Mux.scala 20:36]
    node T_2059 = bits(T_2048, 1, 1) @[Mux.scala 20:36]
    node T_2061 = mux(T_2058, T_2014[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2063 = mux(T_2059, T_2014[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2065 = or(T_2061, T_2063) @[Mux.scala 18:72]
    wire T_2066 : UInt<4>
    T_2066 is invalid
    T_2066 <= T_2065 @[Mux.scala 18:72]
    node T_2067 = and(io.out[0].a.ready, T_2041) @[WidthWidget.scala 120:29]
    io.in[0].a.ready <= T_2067 @[WidthWidget.scala 120:16]
    io.out[0].a.valid <= io.in[0].a.valid @[WidthWidget.scala 121:17]
    io.out[0].a.bits <- io.in[0].a.bits @[WidthWidget.scala 122:16]
    io.out[0].a.bits.data <= T_2057 @[WidthWidget.scala 123:30]
    io.out[0].a.bits.addr_hi <= T_1997 @[WidthWidget.scala 126:40]
    io.out[0].a.bits.mask <= T_2066 @[WidthWidget.scala 126:56]
    reg T_2069 : UInt<32>, clk
    reg T_2071 : UInt<4>, clk
    node T_2072 = cat(io.out[0].d.bits.data, T_2069) @[Cat.scala 20:58]
    node T_2074 = bits(io.out[0].d.bits.size, 0, 0) @[OneHot.scala 46:21]
    node T_2075 = dshl(UInt<1>("h01"), T_2074) @[OneHot.scala 46:16]
    node T_2076 = bits(T_2075, 1, 0) @[OneHot.scala 46:41]
    node T_2078 = geq(io.out[0].d.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
    node T_2080 = bits(T_2076, 1, 1) @[Edges.scala 36:26]
    node T_2081 = bits(io.out[0].d.bits.addr_lo, 1, 1) @[Edges.scala 37:26]
    node T_2083 = eq(T_2081, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2084 = and(UInt<1>("h01"), T_2083) @[Edges.scala 41:27]
    node T_2085 = and(T_2080, T_2084) @[Edges.scala 42:38]
    node T_2086 = or(T_2078, T_2085) @[Edges.scala 42:29]
    node T_2087 = and(UInt<1>("h01"), T_2081) @[Edges.scala 41:27]
    node T_2088 = and(T_2080, T_2087) @[Edges.scala 42:38]
    node T_2089 = or(T_2078, T_2088) @[Edges.scala 42:29]
    node T_2090 = bits(T_2076, 0, 0) @[Edges.scala 36:26]
    node T_2091 = bits(io.out[0].d.bits.addr_lo, 0, 0) @[Edges.scala 37:26]
    node T_2093 = eq(T_2091, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2094 = and(T_2084, T_2093) @[Edges.scala 41:27]
    node T_2095 = and(T_2090, T_2094) @[Edges.scala 42:38]
    node T_2096 = or(T_2086, T_2095) @[Edges.scala 42:29]
    node T_2097 = and(T_2084, T_2091) @[Edges.scala 41:27]
    node T_2098 = and(T_2090, T_2097) @[Edges.scala 42:38]
    node T_2099 = or(T_2086, T_2098) @[Edges.scala 42:29]
    node T_2100 = and(T_2087, T_2093) @[Edges.scala 41:27]
    node T_2101 = and(T_2090, T_2100) @[Edges.scala 42:38]
    node T_2102 = or(T_2089, T_2101) @[Edges.scala 42:29]
    node T_2103 = and(T_2087, T_2091) @[Edges.scala 41:27]
    node T_2104 = and(T_2090, T_2103) @[Edges.scala 42:38]
    node T_2105 = or(T_2089, T_2104) @[Edges.scala 42:29]
    node T_2106 = cat(T_2099, T_2096) @[Cat.scala 20:58]
    node T_2107 = cat(T_2105, T_2102) @[Cat.scala 20:58]
    node T_2108 = cat(T_2107, T_2106) @[Cat.scala 20:58]
    node T_2109 = cat(T_2108, T_2071) @[Cat.scala 20:58]
    node T_2110 = bits(io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
    node T_2112 = shr(UInt<1>("h00"), 3) @[WidthWidget.scala 38:26]
    reg T_2114 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2116 = eq(T_2114, UInt<1>("h00")) @[WidthWidget.scala 41:25]
    node T_2118 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_2119 = dshl(T_2118, io.out[0].d.bits.size) @[package.scala 11:71]
    node T_2120 = bits(T_2119, 2, 0) @[package.scala 11:76]
    node T_2121 = not(T_2120) @[package.scala 11:40]
    node T_2122 = shr(T_2121, 2) @[WidthWidget.scala 42:55]
    node T_2123 = eq(T_2114, T_2122) @[WidthWidget.scala 43:24]
    node T_2125 = eq(T_2110, UInt<1>("h00")) @[WidthWidget.scala 43:37]
    node T_2126 = or(T_2123, T_2125) @[WidthWidget.scala 43:34]
    node T_2127 = and(io.out[0].d.ready, io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_2127 : @[WidthWidget.scala 45:24]
      node T_2128 = shr(T_2072, 32) @[WidthWidget.scala 46:23]
      T_2069 <= T_2128 @[WidthWidget.scala 46:15]
      node T_2129 = shr(T_2109, 4) @[WidthWidget.scala 47:23]
      T_2071 <= T_2129 @[WidthWidget.scala 47:15]
      node T_2131 = add(T_2114, UInt<1>("h01")) @[WidthWidget.scala 48:24]
      node T_2132 = tail(T_2131, 1) @[WidthWidget.scala 48:24]
      T_2114 <= T_2132 @[WidthWidget.scala 48:15]
      when T_2126 : @[WidthWidget.scala 49:21]
        T_2114 <= UInt<1>("h00") @[WidthWidget.scala 49:29]
        skip @[WidthWidget.scala 49:21]
      skip @[WidthWidget.scala 45:24]
    node T_2134 = bits(T_2072, 63, 32) @[WidthWidget.scala 55:45]
    node T_2135 = cat(T_2134, T_2134) @[Cat.scala 20:58]
    node T_2136 = bits(T_2109, 7, 4) @[WidthWidget.scala 56:45]
    node T_2137 = cat(T_2136, T_2136) @[Cat.scala 20:58]
    node T_2138 = bits(T_2072, 63, 0) @[WidthWidget.scala 55:45]
    node T_2139 = bits(T_2109, 7, 0) @[WidthWidget.scala 56:45]
    wire T_2145 : UInt<64>[9] @[WidthWidget.scala 58:66]
    T_2145 is invalid @[WidthWidget.scala 58:66]
    T_2145[0] <= T_2135 @[WidthWidget.scala 58:66]
    T_2145[1] <= T_2135 @[WidthWidget.scala 58:66]
    T_2145[2] <= T_2135 @[WidthWidget.scala 58:66]
    T_2145[3] <= T_2138 @[WidthWidget.scala 58:66]
    T_2145[4] <= T_2138 @[WidthWidget.scala 58:66]
    T_2145[5] <= T_2138 @[WidthWidget.scala 58:66]
    T_2145[6] <= T_2138 @[WidthWidget.scala 58:66]
    T_2145[7] <= T_2138 @[WidthWidget.scala 58:66]
    T_2145[8] <= T_2138 @[WidthWidget.scala 58:66]
    wire T_2152 : UInt<8>[9] @[WidthWidget.scala 61:66]
    T_2152 is invalid @[WidthWidget.scala 61:66]
    T_2152[0] <= T_2137 @[WidthWidget.scala 61:66]
    T_2152[1] <= T_2137 @[WidthWidget.scala 61:66]
    T_2152[2] <= T_2137 @[WidthWidget.scala 61:66]
    T_2152[3] <= T_2139 @[WidthWidget.scala 61:66]
    T_2152[4] <= T_2139 @[WidthWidget.scala 61:66]
    T_2152[5] <= T_2139 @[WidthWidget.scala 61:66]
    T_2152[6] <= T_2139 @[WidthWidget.scala 61:66]
    T_2152[7] <= T_2139 @[WidthWidget.scala 61:66]
    T_2152[8] <= T_2139 @[WidthWidget.scala 61:66]
    node T_2155 = bits(io.out[0].d.bits.size, 1, 0) @[OneHot.scala 46:21]
    node T_2156 = dshl(UInt<1>("h01"), T_2155) @[OneHot.scala 46:16]
    node T_2157 = bits(T_2156, 2, 0) @[OneHot.scala 46:41]
    node T_2159 = geq(io.out[0].d.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
    node T_2161 = bits(T_2157, 2, 2) @[Edges.scala 36:26]
    node T_2164 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2165 = and(UInt<1>("h01"), T_2164) @[Edges.scala 41:27]
    node T_2166 = and(T_2161, T_2165) @[Edges.scala 42:38]
    node T_2167 = or(T_2159, T_2166) @[Edges.scala 42:29]
    node T_2168 = and(UInt<1>("h01"), UInt<1>("h00")) @[Edges.scala 41:27]
    node T_2169 = and(T_2161, T_2168) @[Edges.scala 42:38]
    node T_2170 = or(T_2159, T_2169) @[Edges.scala 42:29]
    node T_2171 = bits(T_2157, 1, 1) @[Edges.scala 36:26]
    node T_2174 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2175 = and(T_2165, T_2174) @[Edges.scala 41:27]
    node T_2176 = and(T_2171, T_2175) @[Edges.scala 42:38]
    node T_2177 = or(T_2167, T_2176) @[Edges.scala 42:29]
    node T_2178 = and(T_2165, UInt<1>("h00")) @[Edges.scala 41:27]
    node T_2179 = and(T_2171, T_2178) @[Edges.scala 42:38]
    node T_2180 = or(T_2167, T_2179) @[Edges.scala 42:29]
    node T_2181 = and(T_2168, T_2174) @[Edges.scala 41:27]
    node T_2182 = and(T_2171, T_2181) @[Edges.scala 42:38]
    node T_2183 = or(T_2170, T_2182) @[Edges.scala 42:29]
    node T_2184 = and(T_2168, UInt<1>("h00")) @[Edges.scala 41:27]
    node T_2185 = and(T_2171, T_2184) @[Edges.scala 42:38]
    node T_2186 = or(T_2170, T_2185) @[Edges.scala 42:29]
    node T_2187 = bits(T_2157, 0, 0) @[Edges.scala 36:26]
    node T_2190 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2191 = and(T_2175, T_2190) @[Edges.scala 41:27]
    node T_2192 = and(T_2187, T_2191) @[Edges.scala 42:38]
    node T_2193 = or(T_2177, T_2192) @[Edges.scala 42:29]
    node T_2194 = and(T_2175, UInt<1>("h00")) @[Edges.scala 41:27]
    node T_2195 = and(T_2187, T_2194) @[Edges.scala 42:38]
    node T_2196 = or(T_2177, T_2195) @[Edges.scala 42:29]
    node T_2197 = and(T_2178, T_2190) @[Edges.scala 41:27]
    node T_2198 = and(T_2187, T_2197) @[Edges.scala 42:38]
    node T_2199 = or(T_2180, T_2198) @[Edges.scala 42:29]
    node T_2200 = and(T_2178, UInt<1>("h00")) @[Edges.scala 41:27]
    node T_2201 = and(T_2187, T_2200) @[Edges.scala 42:38]
    node T_2202 = or(T_2180, T_2201) @[Edges.scala 42:29]
    node T_2203 = and(T_2181, T_2190) @[Edges.scala 41:27]
    node T_2204 = and(T_2187, T_2203) @[Edges.scala 42:38]
    node T_2205 = or(T_2183, T_2204) @[Edges.scala 42:29]
    node T_2206 = and(T_2181, UInt<1>("h00")) @[Edges.scala 41:27]
    node T_2207 = and(T_2187, T_2206) @[Edges.scala 42:38]
    node T_2208 = or(T_2183, T_2207) @[Edges.scala 42:29]
    node T_2209 = and(T_2184, T_2190) @[Edges.scala 41:27]
    node T_2210 = and(T_2187, T_2209) @[Edges.scala 42:38]
    node T_2211 = or(T_2186, T_2210) @[Edges.scala 42:29]
    node T_2212 = and(T_2184, UInt<1>("h00")) @[Edges.scala 41:27]
    node T_2213 = and(T_2187, T_2212) @[Edges.scala 42:38]
    node T_2214 = or(T_2186, T_2213) @[Edges.scala 42:29]
    node T_2215 = cat(T_2196, T_2193) @[Cat.scala 20:58]
    node T_2216 = cat(T_2202, T_2199) @[Cat.scala 20:58]
    node T_2217 = cat(T_2216, T_2215) @[Cat.scala 20:58]
    node T_2218 = cat(T_2208, T_2205) @[Cat.scala 20:58]
    node T_2219 = cat(T_2214, T_2211) @[Cat.scala 20:58]
    node T_2220 = cat(T_2219, T_2218) @[Cat.scala 20:58]
    node T_2221 = cat(T_2220, T_2217) @[Cat.scala 20:58]
    node T_2222 = and(T_2152[io.out[0].d.bits.size], T_2221) @[WidthWidget.scala 66:35]
    node T_2224 = eq(T_2126, UInt<1>("h00")) @[WidthWidget.scala 68:32]
    node T_2225 = or(io.in[0].d.ready, T_2224) @[WidthWidget.scala 68:29]
    io.out[0].d.ready <= T_2225 @[WidthWidget.scala 68:16]
    node T_2226 = and(io.out[0].d.valid, T_2126) @[WidthWidget.scala 69:29]
    io.in[0].d.valid <= T_2226 @[WidthWidget.scala 69:17]
    io.in[0].d.bits <- io.out[0].d.bits @[WidthWidget.scala 70:16]
    io.in[0].d.bits.data <= T_2145[io.out[0].d.bits.size] @[WidthWidget.scala 71:30]
    io.in[0].b.valid <= UInt<1>("h00") @[WidthWidget.scala 163:18]
    io.in[0].c.ready <= UInt<1>("h01") @[WidthWidget.scala 164:18]
    io.in[0].e.ready <= UInt<1>("h01") @[WidthWidget.scala 165:18]
    io.out[0].b.ready <= UInt<1>("h01") @[WidthWidget.scala 166:19]
    io.out[0].c.valid <= UInt<1>("h00") @[WidthWidget.scala 167:19]
    io.out[0].e.valid <= UInt<1>("h00") @[WidthWidget.scala 168:19]
    
  module Queue : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}[2] @[Decoupled.scala 175:16]
    reg T_83 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_85 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_83, T_85) @[Decoupled.scala 180:33]
    node T_88 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_88) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_89 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_89
    node T_90 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_90
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_91 = ram[T_83], clk
      T_91 <- io.enq.bits @[Decoupled.scala 187:24]
      node T_100 = eq(T_83, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_102 = add(T_83, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_103 = tail(T_102, 1) @[Counter.scala 21:22]
      T_83 <= T_103 @[Counter.scala 21:13]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      node T_105 = eq(T_85, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_107 = add(T_85, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_108 = tail(T_107, 1) @[Counter.scala 21:22]
      T_85 <= T_108 @[Counter.scala 21:13]
      skip @[Decoupled.scala 190:17]
    node T_109 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_109 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_111 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_111 @[Decoupled.scala 197:16]
    node T_113 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_113 @[Decoupled.scala 198:16]
    infer mport T_114 = ram[T_85], clk
    io.deq.bits <- T_114 @[Decoupled.scala 199:15]
    node T_122 = sub(T_83, T_85) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_122, 1) @[Decoupled.scala 214:32]
    node T_123 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_124 = cat(T_123, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_124 @[Decoupled.scala 216:14]
    
  module Queue_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}[2] @[Decoupled.scala 175:16]
    reg T_92 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_94 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_92, T_94) @[Decoupled.scala 180:33]
    node T_97 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_97) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_98 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_98
    node T_99 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_99
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_100 = ram[T_92], clk
      T_100 <- io.enq.bits @[Decoupled.scala 187:24]
      node T_110 = eq(T_92, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_112 = add(T_92, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_113 = tail(T_112, 1) @[Counter.scala 21:22]
      T_92 <= T_113 @[Counter.scala 21:13]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      node T_115 = eq(T_94, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_117 = add(T_94, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_118 = tail(T_117, 1) @[Counter.scala 21:22]
      T_94 <= T_118 @[Counter.scala 21:13]
      skip @[Decoupled.scala 190:17]
    node T_119 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_119 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_121 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_121 @[Decoupled.scala 197:16]
    node T_123 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_123 @[Decoupled.scala 198:16]
    infer mport T_124 = ram[T_94], clk
    io.deq.bits <- T_124 @[Decoupled.scala 199:15]
    node T_133 = sub(T_92, T_94) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_133, 1) @[Decoupled.scala 214:32]
    node T_134 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_135 = cat(T_134, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_135 @[Decoupled.scala 216:14]
    
  module TLBuffer : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1], out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1]}
    
    io is invalid
    inst Queue_2 of Queue @[Decoupled.scala 241:19]
    Queue_2.io is invalid
    Queue_2.clk <= clk
    Queue_2.reset <= reset
    Queue_2.io.enq.valid <= io.in[0].a.valid @[Decoupled.scala 242:20]
    Queue_2.io.enq.bits <- io.in[0].a.bits @[Decoupled.scala 243:19]
    io.in[0].a.ready <= Queue_2.io.enq.ready @[Decoupled.scala 244:15]
    io.out[0].a <- Queue_2.io.deq @[Buffer.scala 19:13]
    inst Queue_1_1 of Queue_1 @[Decoupled.scala 241:19]
    Queue_1_1.io is invalid
    Queue_1_1.clk <= clk
    Queue_1_1.reset <= reset
    Queue_1_1.io.enq.valid <= io.out[0].d.valid @[Decoupled.scala 242:20]
    Queue_1_1.io.enq.bits <- io.out[0].d.bits @[Decoupled.scala 243:19]
    io.out[0].d.ready <= Queue_1_1.io.enq.ready @[Decoupled.scala 244:15]
    io.in[0].d <- Queue_1_1.io.deq @[Buffer.scala 20:13]
    io.in[0].b.valid <= UInt<1>("h00") @[Buffer.scala 27:20]
    io.in[0].c.ready <= UInt<1>("h01") @[Buffer.scala 28:20]
    io.in[0].e.ready <= UInt<1>("h01") @[Buffer.scala 29:20]
    io.out[0].b.ready <= UInt<1>("h01") @[Buffer.scala 30:21]
    io.out[0].c.valid <= UInt<1>("h00") @[Buffer.scala 31:21]
    io.out[0].e.valid <= UInt<1>("h00") @[Buffer.scala 32:21]
    
  module bootrom : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<8>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1]}
    
    io is invalid
    wire rom : UInt<32>[1024] @[Rom.scala 33:18]
    rom is invalid @[Rom.scala 33:18]
    rom[0] <= UInt<32>("h06f") @[Rom.scala 33:18]
    rom[1] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[2] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[3] <= UInt<32>("h01020") @[Rom.scala 33:18]
    rom[4] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[5] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[6] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[7] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[8] <= UInt<32>("h063696c70") @[Rom.scala 33:18]
    rom[9] <= UInt<32>("h0200a7b20") @[Rom.scala 33:18]
    rom[10] <= UInt<32>("h069727020") @[Rom.scala 33:18]
    rom[11] <= UInt<32>("h07469726f") @[Rom.scala 33:18]
    rom[12] <= UInt<32>("h078302079") @[Rom.scala 33:18]
    rom[13] <= UInt<32>("h030303034") @[Rom.scala 33:18]
    rom[14] <= UInt<32>("h030303030") @[Rom.scala 33:18]
    rom[15] <= UInt<32>("h020200a3b") @[Rom.scala 33:18]
    rom[16] <= UInt<32>("h0646e6570") @[Rom.scala 33:18]
    rom[17] <= UInt<32>("h020676e69") @[Rom.scala 33:18]
    rom[18] <= UInt<32>("h030347830") @[Rom.scala 33:18]
    rom[19] <= UInt<32>("h030313030") @[Rom.scala 33:18]
    rom[20] <= UInt<32>("h0a3b3030") @[Rom.scala 33:18]
    rom[21] <= UInt<32>("h0646e2020") @[Rom.scala 33:18]
    rom[22] <= UInt<32>("h020737665") @[Rom.scala 33:18]
    rom[23] <= UInt<32>("h07d0a3b32") @[Rom.scala 33:18]
    rom[24] <= UInt<32>("h074720a3b") @[Rom.scala 33:18]
    rom[25] <= UInt<32>("h0a7b2063") @[Rom.scala 33:18]
    rom[26] <= UInt<32>("h064612020") @[Rom.scala 33:18]
    rom[27] <= UInt<32>("h030207264") @[Rom.scala 33:18]
    rom[28] <= UInt<32>("h030343478") @[Rom.scala 33:18]
    rom[29] <= UInt<32>("h066666230") @[Rom.scala 33:18]
    rom[30] <= UInt<32>("h07d0a3b38") @[Rom.scala 33:18]
    rom[31] <= UInt<32>("h061720a3b") @[Rom.scala 33:18]
    rom[32] <= UInt<32>("h0a7b206d") @[Rom.scala 33:18]
    rom[33] <= UInt<32>("h020302020") @[Rom.scala 33:18]
    rom[34] <= UInt<32>("h020200a7b") @[Rom.scala 33:18]
    rom[35] <= UInt<32>("h064612020") @[Rom.scala 33:18]
    rom[36] <= UInt<32>("h030207264") @[Rom.scala 33:18]
    rom[37] <= UInt<32>("h030303878") @[Rom.scala 33:18]
    rom[38] <= UInt<32>("h030303030") @[Rom.scala 33:18]
    rom[39] <= UInt<32>("h0200a3b30") @[Rom.scala 33:18]
    rom[40] <= UInt<32>("h073202020") @[Rom.scala 33:18]
    rom[41] <= UInt<32>("h020657a69") @[Rom.scala 33:18]
    rom[42] <= UInt<32>("h030317830") @[Rom.scala 33:18]
    rom[43] <= UInt<32>("h030303030") @[Rom.scala 33:18]
    rom[44] <= UInt<32>("h0a3b3030") @[Rom.scala 33:18]
    rom[45] <= UInt<32>("h03b7d2020") @[Rom.scala 33:18]
    rom[46] <= UInt<32>("h0a3b7d0a") @[Rom.scala 33:18]
    rom[47] <= UInt<32>("h065726f63") @[Rom.scala 33:18]
    rom[48] <= UInt<32>("h0200a7b20") @[Rom.scala 33:18]
    rom[49] <= UInt<32>("h07b203020") @[Rom.scala 33:18]
    rom[50] <= UInt<32>("h02020200a") @[Rom.scala 33:18]
    rom[51] <= UInt<32>("h07b203020") @[Rom.scala 33:18]
    rom[52] <= UInt<32>("h02020200a") @[Rom.scala 33:18]
    rom[53] <= UInt<32>("h069202020") @[Rom.scala 33:18]
    rom[54] <= UInt<32>("h072206173") @[Rom.scala 33:18]
    rom[55] <= UInt<32>("h069343676") @[Rom.scala 33:18]
    rom[56] <= UInt<32>("h06466616d") @[Rom.scala 33:18]
    rom[57] <= UInt<32>("h0200a3b73") @[Rom.scala 33:18]
    rom[58] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[59] <= UInt<32>("h06d697420") @[Rom.scala 33:18]
    rom[60] <= UInt<32>("h0706d6365") @[Rom.scala 33:18]
    rom[61] <= UInt<32>("h034783020") @[Rom.scala 33:18]
    rom[62] <= UInt<32>("h034303034") @[Rom.scala 33:18]
    rom[63] <= UInt<32>("h03b303030") @[Rom.scala 33:18]
    rom[64] <= UInt<32>("h02020200a") @[Rom.scala 33:18]
    rom[65] <= UInt<32>("h069202020") @[Rom.scala 33:18]
    rom[66] <= UInt<32>("h030206970") @[Rom.scala 33:18]
    rom[67] <= UInt<32>("h030343478") @[Rom.scala 33:18]
    rom[68] <= UInt<32>("h030303030") @[Rom.scala 33:18]
    rom[69] <= UInt<32>("h0200a3b30") @[Rom.scala 33:18]
    rom[70] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[71] <= UInt<32>("h0696c7020") @[Rom.scala 33:18]
    rom[72] <= UInt<32>("h0a7b2063") @[Rom.scala 33:18]
    rom[73] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[74] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[75] <= UInt<32>("h0a7b206d") @[Rom.scala 33:18]
    rom[76] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[77] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[78] <= UInt<32>("h020656920") @[Rom.scala 33:18]
    rom[79] <= UInt<32>("h030347830") @[Rom.scala 33:18]
    rom[80] <= UInt<32>("h030323030") @[Rom.scala 33:18]
    rom[81] <= UInt<32>("h0a3b3030") @[Rom.scala 33:18]
    rom[82] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[83] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[84] <= UInt<32>("h072687420") @[Rom.scala 33:18]
    rom[85] <= UInt<32>("h020687365") @[Rom.scala 33:18]
    rom[86] <= UInt<32>("h030347830") @[Rom.scala 33:18]
    rom[87] <= UInt<32>("h030303032") @[Rom.scala 33:18]
    rom[88] <= UInt<32>("h0a3b3030") @[Rom.scala 33:18]
    rom[89] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[90] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[91] <= UInt<32>("h0616c6320") @[Rom.scala 33:18]
    rom[92] <= UInt<32>("h030206d69") @[Rom.scala 33:18]
    rom[93] <= UInt<32>("h032303478") @[Rom.scala 33:18]
    rom[94] <= UInt<32>("h030303030") @[Rom.scala 33:18]
    rom[95] <= UInt<32>("h0200a3b34") @[Rom.scala 33:18]
    rom[96] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[97] <= UInt<32>("h07d202020") @[Rom.scala 33:18]
    rom[98] <= UInt<32>("h020200a3b") @[Rom.scala 33:18]
    rom[99] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[100] <= UInt<32>("h020732020") @[Rom.scala 33:18]
    rom[101] <= UInt<32>("h020200a7b") @[Rom.scala 33:18]
    rom[102] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[103] <= UInt<32>("h069202020") @[Rom.scala 33:18]
    rom[104] <= UInt<32>("h078302065") @[Rom.scala 33:18]
    rom[105] <= UInt<32>("h030303034") @[Rom.scala 33:18]
    rom[106] <= UInt<32>("h030383032") @[Rom.scala 33:18]
    rom[107] <= UInt<32>("h020200a3b") @[Rom.scala 33:18]
    rom[108] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[109] <= UInt<32>("h074202020") @[Rom.scala 33:18]
    rom[110] <= UInt<32>("h073657268") @[Rom.scala 33:18]
    rom[111] <= UInt<32>("h078302068") @[Rom.scala 33:18]
    rom[112] <= UInt<32>("h030323034") @[Rom.scala 33:18]
    rom[113] <= UInt<32>("h030303031") @[Rom.scala 33:18]
    rom[114] <= UInt<32>("h020200a3b") @[Rom.scala 33:18]
    rom[115] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[116] <= UInt<32>("h063202020") @[Rom.scala 33:18]
    rom[117] <= UInt<32>("h06d69616c") @[Rom.scala 33:18]
    rom[118] <= UInt<32>("h034783020") @[Rom.scala 33:18]
    rom[119] <= UInt<32>("h031303230") @[Rom.scala 33:18]
    rom[120] <= UInt<32>("h03b343030") @[Rom.scala 33:18]
    rom[121] <= UInt<32>("h02020200a") @[Rom.scala 33:18]
    rom[122] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[123] <= UInt<32>("h0a3b7d20") @[Rom.scala 33:18]
    rom[124] <= UInt<32>("h020202020") @[Rom.scala 33:18]
    rom[125] <= UInt<32>("h03b7d2020") @[Rom.scala 33:18]
    rom[126] <= UInt<32>("h02020200a") @[Rom.scala 33:18]
    rom[127] <= UInt<32>("h0a3b7d20") @[Rom.scala 33:18]
    rom[128] <= UInt<32>("h03b7d2020") @[Rom.scala 33:18]
    rom[129] <= UInt<32>("h0a3b7d0a") @[Rom.scala 33:18]
    rom[130] <= UInt<32>("h0746f6f62") @[Rom.scala 33:18]
    rom[131] <= UInt<32>("h0206d6f72") @[Rom.scala 33:18]
    rom[132] <= UInt<32>("h020200a7b") @[Rom.scala 33:18]
    rom[133] <= UInt<32>("h072646461") @[Rom.scala 33:18]
    rom[134] <= UInt<32>("h031783020") @[Rom.scala 33:18]
    rom[135] <= UInt<32>("h03b303030") @[Rom.scala 33:18]
    rom[136] <= UInt<32>("h07320200a") @[Rom.scala 33:18]
    rom[137] <= UInt<32>("h020657a69") @[Rom.scala 33:18]
    rom[138] <= UInt<32>("h030317830") @[Rom.scala 33:18]
    rom[139] <= UInt<32>("h0a3b3030") @[Rom.scala 33:18]
    rom[140] <= UInt<32>("h06c630a7d") @[Rom.scala 33:18]
    rom[141] <= UInt<32>("h020746e69") @[Rom.scala 33:18]
    rom[142] <= UInt<32>("h020200a7b") @[Rom.scala 33:18]
    rom[143] <= UInt<32>("h072646461") @[Rom.scala 33:18]
    rom[144] <= UInt<32>("h034783020") @[Rom.scala 33:18]
    rom[145] <= UInt<32>("h030303034") @[Rom.scala 33:18]
    rom[146] <= UInt<32>("h03b303030") @[Rom.scala 33:18]
    rom[147] <= UInt<32>("h07320200a") @[Rom.scala 33:18]
    rom[148] <= UInt<32>("h020657a69") @[Rom.scala 33:18]
    rom[149] <= UInt<32>("h030317830") @[Rom.scala 33:18]
    rom[150] <= UInt<32>("h03b303030") @[Rom.scala 33:18]
    rom[151] <= UInt<32>("h0a7d0a") @[Rom.scala 33:18]
    rom[152] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[153] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[154] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[155] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[156] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[157] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[158] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[159] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[160] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[161] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[162] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[163] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[164] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[165] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[166] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[167] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[168] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[169] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[170] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[171] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[172] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[173] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[174] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[175] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[176] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[177] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[178] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[179] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[180] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[181] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[182] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[183] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[184] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[185] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[186] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[187] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[188] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[189] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[190] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[191] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[192] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[193] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[194] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[195] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[196] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[197] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[198] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[199] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[200] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[201] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[202] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[203] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[204] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[205] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[206] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[207] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[208] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[209] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[210] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[211] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[212] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[213] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[214] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[215] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[216] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[217] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[218] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[219] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[220] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[221] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[222] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[223] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[224] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[225] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[226] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[227] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[228] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[229] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[230] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[231] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[232] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[233] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[234] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[235] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[236] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[237] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[238] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[239] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[240] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[241] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[242] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[243] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[244] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[245] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[246] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[247] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[248] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[249] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[250] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[251] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[252] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[253] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[254] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[255] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[256] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[257] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[258] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[259] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[260] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[261] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[262] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[263] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[264] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[265] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[266] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[267] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[268] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[269] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[270] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[271] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[272] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[273] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[274] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[275] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[276] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[277] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[278] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[279] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[280] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[281] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[282] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[283] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[284] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[285] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[286] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[287] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[288] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[289] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[290] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[291] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[292] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[293] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[294] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[295] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[296] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[297] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[298] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[299] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[300] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[301] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[302] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[303] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[304] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[305] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[306] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[307] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[308] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[309] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[310] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[311] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[312] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[313] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[314] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[315] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[316] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[317] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[318] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[319] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[320] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[321] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[322] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[323] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[324] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[325] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[326] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[327] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[328] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[329] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[330] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[331] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[332] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[333] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[334] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[335] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[336] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[337] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[338] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[339] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[340] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[341] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[342] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[343] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[344] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[345] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[346] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[347] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[348] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[349] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[350] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[351] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[352] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[353] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[354] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[355] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[356] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[357] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[358] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[359] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[360] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[361] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[362] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[363] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[364] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[365] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[366] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[367] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[368] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[369] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[370] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[371] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[372] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[373] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[374] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[375] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[376] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[377] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[378] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[379] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[380] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[381] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[382] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[383] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[384] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[385] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[386] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[387] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[388] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[389] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[390] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[391] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[392] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[393] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[394] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[395] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[396] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[397] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[398] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[399] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[400] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[401] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[402] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[403] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[404] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[405] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[406] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[407] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[408] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[409] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[410] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[411] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[412] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[413] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[414] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[415] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[416] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[417] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[418] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[419] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[420] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[421] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[422] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[423] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[424] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[425] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[426] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[427] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[428] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[429] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[430] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[431] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[432] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[433] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[434] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[435] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[436] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[437] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[438] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[439] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[440] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[441] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[442] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[443] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[444] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[445] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[446] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[447] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[448] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[449] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[450] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[451] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[452] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[453] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[454] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[455] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[456] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[457] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[458] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[459] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[460] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[461] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[462] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[463] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[464] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[465] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[466] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[467] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[468] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[469] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[470] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[471] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[472] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[473] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[474] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[475] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[476] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[477] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[478] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[479] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[480] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[481] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[482] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[483] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[484] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[485] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[486] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[487] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[488] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[489] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[490] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[491] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[492] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[493] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[494] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[495] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[496] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[497] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[498] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[499] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[500] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[501] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[502] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[503] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[504] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[505] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[506] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[507] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[508] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[509] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[510] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[511] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[512] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[513] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[514] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[515] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[516] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[517] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[518] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[519] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[520] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[521] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[522] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[523] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[524] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[525] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[526] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[527] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[528] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[529] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[530] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[531] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[532] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[533] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[534] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[535] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[536] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[537] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[538] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[539] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[540] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[541] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[542] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[543] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[544] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[545] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[546] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[547] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[548] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[549] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[550] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[551] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[552] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[553] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[554] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[555] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[556] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[557] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[558] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[559] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[560] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[561] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[562] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[563] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[564] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[565] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[566] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[567] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[568] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[569] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[570] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[571] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[572] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[573] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[574] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[575] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[576] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[577] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[578] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[579] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[580] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[581] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[582] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[583] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[584] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[585] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[586] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[587] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[588] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[589] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[590] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[591] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[592] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[593] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[594] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[595] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[596] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[597] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[598] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[599] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[600] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[601] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[602] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[603] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[604] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[605] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[606] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[607] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[608] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[609] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[610] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[611] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[612] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[613] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[614] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[615] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[616] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[617] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[618] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[619] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[620] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[621] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[622] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[623] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[624] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[625] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[626] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[627] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[628] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[629] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[630] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[631] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[632] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[633] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[634] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[635] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[636] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[637] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[638] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[639] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[640] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[641] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[642] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[643] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[644] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[645] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[646] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[647] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[648] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[649] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[650] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[651] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[652] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[653] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[654] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[655] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[656] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[657] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[658] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[659] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[660] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[661] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[662] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[663] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[664] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[665] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[666] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[667] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[668] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[669] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[670] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[671] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[672] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[673] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[674] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[675] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[676] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[677] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[678] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[679] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[680] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[681] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[682] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[683] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[684] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[685] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[686] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[687] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[688] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[689] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[690] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[691] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[692] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[693] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[694] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[695] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[696] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[697] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[698] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[699] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[700] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[701] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[702] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[703] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[704] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[705] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[706] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[707] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[708] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[709] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[710] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[711] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[712] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[713] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[714] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[715] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[716] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[717] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[718] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[719] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[720] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[721] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[722] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[723] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[724] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[725] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[726] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[727] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[728] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[729] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[730] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[731] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[732] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[733] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[734] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[735] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[736] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[737] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[738] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[739] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[740] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[741] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[742] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[743] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[744] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[745] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[746] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[747] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[748] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[749] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[750] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[751] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[752] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[753] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[754] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[755] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[756] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[757] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[758] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[759] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[760] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[761] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[762] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[763] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[764] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[765] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[766] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[767] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[768] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[769] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[770] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[771] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[772] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[773] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[774] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[775] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[776] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[777] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[778] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[779] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[780] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[781] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[782] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[783] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[784] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[785] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[786] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[787] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[788] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[789] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[790] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[791] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[792] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[793] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[794] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[795] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[796] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[797] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[798] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[799] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[800] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[801] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[802] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[803] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[804] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[805] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[806] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[807] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[808] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[809] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[810] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[811] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[812] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[813] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[814] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[815] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[816] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[817] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[818] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[819] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[820] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[821] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[822] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[823] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[824] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[825] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[826] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[827] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[828] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[829] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[830] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[831] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[832] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[833] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[834] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[835] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[836] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[837] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[838] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[839] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[840] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[841] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[842] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[843] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[844] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[845] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[846] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[847] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[848] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[849] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[850] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[851] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[852] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[853] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[854] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[855] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[856] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[857] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[858] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[859] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[860] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[861] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[862] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[863] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[864] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[865] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[866] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[867] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[868] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[869] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[870] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[871] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[872] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[873] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[874] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[875] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[876] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[877] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[878] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[879] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[880] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[881] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[882] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[883] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[884] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[885] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[886] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[887] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[888] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[889] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[890] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[891] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[892] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[893] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[894] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[895] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[896] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[897] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[898] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[899] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[900] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[901] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[902] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[903] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[904] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[905] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[906] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[907] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[908] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[909] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[910] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[911] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[912] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[913] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[914] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[915] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[916] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[917] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[918] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[919] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[920] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[921] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[922] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[923] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[924] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[925] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[926] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[927] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[928] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[929] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[930] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[931] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[932] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[933] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[934] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[935] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[936] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[937] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[938] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[939] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[940] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[941] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[942] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[943] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[944] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[945] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[946] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[947] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[948] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[949] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[950] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[951] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[952] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[953] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[954] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[955] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[956] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[957] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[958] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[959] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[960] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[961] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[962] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[963] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[964] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[965] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[966] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[967] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[968] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[969] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[970] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[971] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[972] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[973] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[974] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[975] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[976] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[977] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[978] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[979] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[980] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[981] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[982] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[983] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[984] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[985] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[986] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[987] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[988] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[989] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[990] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[991] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[992] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[993] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[994] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[995] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[996] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[997] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[998] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[999] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1000] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1001] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1002] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1003] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1004] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1005] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1006] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1007] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1008] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1009] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1010] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1011] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1012] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1013] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1014] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1015] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1016] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1017] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1018] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1019] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1020] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1021] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1022] <= UInt<32>("h00") @[Rom.scala 33:18]
    rom[1023] <= UInt<32>("h00") @[Rom.scala 33:18]
    io.in[0].d.valid <= io.in[0].a.valid @[Rom.scala 35:16]
    io.in[0].a.ready <= io.in[0].d.ready @[Rom.scala 36:16]
    node index = bits(io.in[0].a.bits.addr_hi, 9, 0) @[Rom.scala 38:34]
    node T_2344 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
    node T_2345 = dshl(T_2344, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_2346 = bits(T_2345, 1, 0) @[package.scala 11:76]
    node T_2347 = not(T_2346) @[package.scala 11:40]
    node T_2348 = bits(io.in[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
    node T_2349 = bits(io.in[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
    node T_2351 = neq(T_2349, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_2353 = eq(T_2351, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_2354 = or(T_2348, T_2349) @[Edges.scala 63:32]
    node T_2355 = bits(T_2354, 0, 0) @[Edges.scala 58:14]
    node T_2356 = not(T_2355) @[Edges.scala 58:9]
    node T_2357 = cat(T_2353, T_2356) @[Cat.scala 20:58]
    node T_2358 = not(T_2347) @[Edges.scala 66:39]
    node T_2359 = and(T_2357, T_2358) @[Edges.scala 66:37]
    node T_2360 = cat(io.in[0].a.bits.addr_hi, T_2359) @[Cat.scala 20:58]
    wire T_2371 : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<8>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>} @[Edges.scala 606:17]
    T_2371 is invalid @[Edges.scala 606:17]
    T_2371.opcode <= UInt<1>("h01") @[Edges.scala 607:15]
    T_2371.param <= UInt<1>("h00") @[Edges.scala 608:15]
    T_2371.size <= io.in[0].a.bits.size @[Edges.scala 609:15]
    T_2371.source <= io.in[0].a.bits.source @[Edges.scala 610:15]
    T_2371.sink <= UInt<1>("h00") @[Edges.scala 611:15]
    T_2371.addr_lo <= T_2360 @[Edges.scala 612:15]
    T_2371.data <= rom[index] @[Edges.scala 613:15]
    T_2371.error <= UInt<1>("h00") @[Edges.scala 614:15]
    io.in[0].d.bits <- T_2371 @[Rom.scala 39:15]
    io.in[0].b.valid <= UInt<1>("h00") @[Rom.scala 42:16]
    io.in[0].c.ready <= UInt<1>("h01") @[Rom.scala 43:16]
    io.in[0].e.ready <= UInt<1>("h01") @[Rom.scala 44:16]
    
  module TLFragmenter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<11>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<11>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<11>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1], out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<8>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1]}
    
    io is invalid
    reg acknum : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    reg dOrig : UInt, clk
    node dFragnum = bits(io.out[0].d.bits.source, 5, 0) @[Fragmenter.scala 146:37]
    node dFirst = eq(acknum, UInt<1>("h00")) @[Fragmenter.scala 147:25]
    node T_1971 = bits(io.out[0].d.bits.size, 1, 0) @[OneHot.scala 46:21]
    node T_1972 = dshl(UInt<1>("h01"), T_1971) @[OneHot.scala 46:16]
    node dsizeOH = bits(T_1972, 2, 0) @[OneHot.scala 46:41]
    node T_1974 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
    node T_1975 = dshl(T_1974, io.out[0].d.bits.size) @[package.scala 11:71]
    node T_1976 = bits(T_1975, 1, 0) @[package.scala 11:76]
    node dsizeOH1 = not(T_1976) @[package.scala 11:40]
    node T_1977 = bits(io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
    node acknum_fragment = shl(dFragnum, 0) @[Fragmenter.scala 153:36]
    node acknum_size = shr(dsizeOH1, 2) @[Fragmenter.scala 154:32]
    node T_1979 = eq(io.out[0].d.valid, UInt<1>("h00")) @[Fragmenter.scala 155:13]
    node T_1980 = and(acknum_fragment, acknum_size) @[Fragmenter.scala 155:46]
    node T_1982 = eq(T_1980, UInt<1>("h00")) @[Fragmenter.scala 155:61]
    node T_1983 = or(T_1979, T_1982) @[Fragmenter.scala 155:26]
    node T_1984 = or(T_1983, reset) @[Fragmenter.scala 155:12]
    node T_1986 = eq(T_1984, UInt<1>("h00")) @[Fragmenter.scala 155:12]
    when T_1986 : @[Fragmenter.scala 155:12]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Fragmenter.scala:155 assert (!out.d.valid || (acknum_fragment & acknum_size) === UInt(0))\n") @[Fragmenter.scala 155:12]
      stop(clk, UInt<1>(1), 1) @[Fragmenter.scala 155:12]
      skip @[Fragmenter.scala 155:12]
    node T_1988 = mux(UInt<1>("h01"), acknum_size, UInt<1>("h00")) @[Fragmenter.scala 156:46]
    node dFirst_acknum = or(acknum_fragment, T_1988) @[Fragmenter.scala 156:41]
    node T_1990 = shr(dsizeOH, 2) @[Fragmenter.scala 157:56]
    node ack_decrement = mux(UInt<1>("h01"), UInt<1>("h01"), T_1990) @[Fragmenter.scala 157:28]
    node T_1991 = shl(dFragnum, 2) @[Fragmenter.scala 159:43]
    node T_1992 = or(T_1991, dsizeOH1) @[Fragmenter.scala 159:65]
    node T_1993 = shl(T_1992, 1) @[package.scala 10:40]
    node T_1995 = or(T_1993, UInt<1>("h01")) @[package.scala 10:45]
    node T_1996 = xor(T_1995, T_1992) @[package.scala 10:56]
    node T_1997 = bits(T_1996, 8, 8) @[OneHot.scala 22:18]
    node T_1998 = bits(T_1996, 7, 0) @[OneHot.scala 23:18]
    node T_2000 = neq(T_1997, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2001 = or(T_1997, T_1998) @[OneHot.scala 24:28]
    node T_2002 = bits(T_2001, 7, 4) @[OneHot.scala 22:18]
    node T_2003 = bits(T_2001, 3, 0) @[OneHot.scala 23:18]
    node T_2005 = neq(T_2002, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2006 = or(T_2002, T_2003) @[OneHot.scala 24:28]
    node T_2007 = bits(T_2006, 3, 2) @[OneHot.scala 22:18]
    node T_2008 = bits(T_2006, 1, 0) @[OneHot.scala 23:18]
    node T_2010 = neq(T_2007, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2011 = or(T_2007, T_2008) @[OneHot.scala 24:28]
    node T_2012 = bits(T_2011, 1, 1) @[CircuitMath.scala 21:8]
    node T_2013 = cat(T_2010, T_2012) @[Cat.scala 20:58]
    node T_2014 = cat(T_2005, T_2013) @[Cat.scala 20:58]
    node dFirst_size = cat(T_2000, T_2014) @[Cat.scala 20:58]
    node T_2015 = and(io.out[0].d.ready, io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_2015 : @[Fragmenter.scala 161:25]
      node T_2016 = sub(acknum, ack_decrement) @[Fragmenter.scala 162:51]
      node T_2017 = tail(T_2016, 1) @[Fragmenter.scala 162:51]
      node T_2018 = mux(dFirst, dFirst_acknum, T_2017) @[Fragmenter.scala 162:20]
      acknum <= T_2018 @[Fragmenter.scala 162:14]
      when dFirst : @[Fragmenter.scala 163:21]
        dOrig <= dFirst_size @[Fragmenter.scala 163:29]
        skip @[Fragmenter.scala 163:21]
      skip @[Fragmenter.scala 161:25]
    node T_2020 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Fragmenter.scala 167:16]
    node T_2022 = neq(dFragnum, UInt<1>("h00")) @[Fragmenter.scala 167:39]
    node drop = and(T_2020, T_2022) @[Fragmenter.scala 167:26]
    node T_2023 = or(io.in[0].d.ready, drop) @[Fragmenter.scala 168:31]
    io.out[0].d.ready <= T_2023 @[Fragmenter.scala 168:17]
    node T_2025 = eq(drop, UInt<1>("h00")) @[Fragmenter.scala 169:35]
    node T_2026 = and(io.out[0].d.valid, T_2025) @[Fragmenter.scala 169:32]
    io.in[0].d.valid <= T_2026 @[Fragmenter.scala 169:17]
    io.in[0].d.bits <- io.out[0].d.bits @[Fragmenter.scala 170:17]
    node T_2027 = shr(io.out[0].d.bits.source, 6) @[Fragmenter.scala 171:43]
    io.in[0].d.bits.source <= T_2027 @[Fragmenter.scala 171:22]
    node T_2028 = mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 172:28]
    io.in[0].d.bits.size <= T_2028 @[Fragmenter.scala 172:22]
    node T_2030 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
    node T_2031 = dshl(T_2030, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_2032 = bits(T_2031, 1, 0) @[package.scala 11:76]
    node T_2033 = not(T_2032) @[package.scala 11:40]
    node T_2034 = bits(io.in[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
    node T_2035 = bits(io.in[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
    node T_2037 = neq(T_2035, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_2039 = eq(T_2037, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_2040 = or(T_2034, T_2035) @[Edges.scala 63:32]
    node T_2041 = bits(T_2040, 0, 0) @[Edges.scala 58:14]
    node T_2042 = not(T_2041) @[Edges.scala 58:9]
    node T_2043 = cat(T_2039, T_2042) @[Cat.scala 20:58]
    node T_2044 = not(T_2033) @[Edges.scala 66:39]
    node T_2045 = and(T_2043, T_2044) @[Edges.scala 66:37]
    node T_2046 = cat(io.in[0].a.bits.addr_hi, T_2045) @[Cat.scala 20:58]
    node T_2048 = xor(T_2046, UInt<1>("h00")) @[Parameters.scala 89:31]
    node T_2049 = cvt(T_2048) @[Parameters.scala 89:49]
    node T_2051 = and(T_2049, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:52]
    node T_2052 = asSInt(T_2051) @[Parameters.scala 89:52]
    node T_2054 = eq(T_2052, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    wire find : UInt<1>[1] @[Parameters.scala 229:36]
    find is invalid @[Parameters.scala 229:36]
    find[0] <= T_2054 @[Parameters.scala 229:36]
    node T_2061 = eq(UInt<3>("h05"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2062 = mux(T_2061, UInt<2>("h02"), UInt<2>("h02")) @[Mux.scala 46:16]
    node T_2063 = eq(UInt<3>("h04"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2064 = mux(T_2063, UInt<2>("h02"), T_2062) @[Mux.scala 46:16]
    node T_2065 = eq(UInt<2>("h03"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2066 = mux(T_2065, UInt<2>("h02"), T_2064) @[Mux.scala 46:16]
    node T_2067 = eq(UInt<2>("h02"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2068 = mux(T_2067, UInt<2>("h02"), T_2066) @[Mux.scala 46:16]
    node T_2069 = eq(UInt<1>("h01"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2070 = mux(T_2069, UInt<2>("h02"), T_2068) @[Mux.scala 46:16]
    node T_2071 = eq(UInt<1>("h00"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node limit = mux(T_2071, UInt<2>("h02"), T_2070) @[Mux.scala 46:16]
    node T_2072 = gt(io.in[0].a.bits.size, limit) @[Fragmenter.scala 210:27]
    node aFrag = mux(T_2072, limit, io.in[0].a.bits.size) @[Fragmenter.scala 210:20]
    node T_2074 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
    node T_2075 = dshl(T_2074, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_2076 = bits(T_2075, 7, 0) @[package.scala 11:76]
    node aOrigOH1 = not(T_2076) @[package.scala 11:40]
    node T_2078 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
    node T_2079 = dshl(T_2078, aFrag) @[package.scala 11:71]
    node T_2080 = bits(T_2079, 1, 0) @[package.scala 11:76]
    node aFragOH1 = not(T_2080) @[package.scala 11:40]
    node T_2081 = bits(io.in[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
    node T_2083 = eq(T_2081, UInt<1>("h00")) @[Edges.scala 125:28]
    node aMask = mux(UInt<1>("h00"), UInt<1>("h00"), aFragOH1) @[Fragmenter.scala 214:20]
    reg gennum : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    node aFirst = eq(gennum, UInt<1>("h00")) @[Fragmenter.scala 217:25]
    node T_2087 = shr(aOrigOH1, 2) @[Fragmenter.scala 218:44]
    node T_2089 = sub(gennum, UInt<1>("h01")) @[Fragmenter.scala 218:75]
    node T_2090 = tail(T_2089, 1) @[Fragmenter.scala 218:75]
    node old_gennum1 = mux(aFirst, T_2087, T_2090) @[Fragmenter.scala 218:26]
    node T_2091 = not(old_gennum1) @[Fragmenter.scala 219:24]
    node T_2092 = shr(aMask, 2) @[Fragmenter.scala 219:46]
    node T_2093 = or(T_2091, T_2092) @[Fragmenter.scala 219:37]
    node new_gennum = not(T_2093) @[Fragmenter.scala 219:22]
    node T_2094 = shr(old_gennum1, 0) @[Fragmenter.scala 220:36]
    node T_2095 = not(T_2094) @[Fragmenter.scala 220:22]
    node T_2096 = shr(aFragOH1, 2) @[Fragmenter.scala 220:80]
    node T_2097 = or(T_2095, T_2096) @[Fragmenter.scala 220:68]
    node aFragnum = not(T_2097) @[Fragmenter.scala 220:20]
    node T_2098 = and(io.out[0].a.ready, io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_2098 : @[Fragmenter.scala 222:25]
      gennum <= new_gennum @[Fragmenter.scala 222:34]
      skip @[Fragmenter.scala 222:25]
    node T_2100 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Fragmenter.scala 224:17]
    node T_2102 = neq(aFragnum, UInt<1>("h00")) @[Fragmenter.scala 224:39]
    node delay = and(T_2100, T_2102) @[Fragmenter.scala 224:27]
    io.out[0].a.valid <= io.in[0].a.valid @[Fragmenter.scala 225:17]
    node T_2104 = eq(delay, UInt<1>("h00")) @[Fragmenter.scala 226:34]
    node T_2105 = and(io.out[0].a.ready, T_2104) @[Fragmenter.scala 226:31]
    io.in[0].a.ready <= T_2105 @[Fragmenter.scala 226:16]
    io.out[0].a.bits <- io.in[0].a.bits @[Fragmenter.scala 227:16]
    node T_2106 = not(aFragnum) @[Fragmenter.scala 228:48]
    node T_2107 = shl(T_2106, 0) @[Fragmenter.scala 228:58]
    node T_2108 = shr(aOrigOH1, 2) @[Fragmenter.scala 228:100]
    node T_2109 = and(T_2107, T_2108) @[Fragmenter.scala 228:89]
    node T_2110 = or(io.in[0].a.bits.addr_hi, T_2109) @[Fragmenter.scala 228:45]
    io.out[0].a.bits.addr_hi <= T_2110 @[Fragmenter.scala 228:24]
    node T_2111 = cat(io.in[0].a.bits.source, aFragnum) @[Cat.scala 20:58]
    io.out[0].a.bits.source <= T_2111 @[Fragmenter.scala 229:23]
    io.out[0].a.bits.size <= aFrag @[Fragmenter.scala 230:21]
    io.in[0].b.valid <= UInt<1>("h00") @[Fragmenter.scala 233:16]
    io.in[0].c.ready <= UInt<1>("h01") @[Fragmenter.scala 234:16]
    io.in[0].e.ready <= UInt<1>("h01") @[Fragmenter.scala 235:16]
    io.out[0].b.ready <= UInt<1>("h01") @[Fragmenter.scala 236:17]
    io.out[0].c.valid <= UInt<1>("h00") @[Fragmenter.scala 237:17]
    io.out[0].e.valid <= UInt<1>("h00") @[Fragmenter.scala 238:17]
    
  module clint : 
    input clk : Clock
    input reset : UInt<1>
    output io : {interrupts : UInt<1>[0][0], flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1], tiles : {mtip : UInt<1>, msip : UInt<1>}[1], flip rtcTick : UInt<1>}
    
    io is invalid
    reg time : UInt<64>, clk with : (reset => (reset, UInt<64>("h00")))
    when io.rtcTick : @[Prci.scala 50:21]
      node T_1355 = add(time, UInt<1>("h01")) @[Prci.scala 50:36]
      node T_1356 = tail(T_1355, 1) @[Prci.scala 50:36]
      time <= T_1356 @[Prci.scala 50:28]
      skip @[Prci.scala 50:21]
    reg timecmp_0 : UInt<64>, clk
    reg ipi_0 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1359 = bits(ipi_0, 0, 0) @[Prci.scala 56:24]
    io.tiles[0].msip <= T_1359 @[Prci.scala 56:15]
    node T_1360 = geq(time, timecmp_0) @[Prci.scala 57:23]
    io.tiles[0].mtip <= T_1360 @[Prci.scala 57:15]
    node T_1365 = bits(timecmp_0, 7, 0) @[RegField.scala 113:52]
    node T_1366 = bits(timecmp_0, 15, 8) @[RegField.scala 113:52]
    node T_1367 = bits(timecmp_0, 23, 16) @[RegField.scala 113:52]
    node T_1368 = bits(timecmp_0, 31, 24) @[RegField.scala 113:52]
    node T_1369 = bits(timecmp_0, 39, 32) @[RegField.scala 113:52]
    node T_1370 = bits(timecmp_0, 47, 40) @[RegField.scala 113:52]
    node T_1371 = bits(timecmp_0, 55, 48) @[RegField.scala 113:52]
    node T_1372 = bits(timecmp_0, 63, 56) @[RegField.scala 113:52]
    wire T_1373 : UInt
    T_1373 is invalid
    T_1373 <= T_1365
    wire T_1374 : UInt
    T_1374 is invalid
    T_1374 <= T_1366
    wire T_1375 : UInt
    T_1375 is invalid
    T_1375 <= T_1367
    wire T_1376 : UInt
    T_1376 is invalid
    T_1376 <= T_1368
    wire T_1377 : UInt
    T_1377 is invalid
    T_1377 <= T_1369
    wire T_1378 : UInt
    T_1378 is invalid
    T_1378 <= T_1370
    wire T_1379 : UInt
    T_1379 is invalid
    T_1379 <= T_1371
    wire T_1380 : UInt
    T_1380 is invalid
    T_1380 <= T_1372
    node T_1381 = cat(T_1374, T_1373) @[Cat.scala 20:58]
    node T_1382 = cat(T_1376, T_1375) @[Cat.scala 20:58]
    node T_1383 = cat(T_1382, T_1381) @[Cat.scala 20:58]
    node T_1384 = cat(T_1378, T_1377) @[Cat.scala 20:58]
    node T_1385 = cat(T_1380, T_1379) @[Cat.scala 20:58]
    node T_1386 = cat(T_1385, T_1384) @[Cat.scala 20:58]
    node T_1387 = cat(T_1386, T_1383) @[Cat.scala 20:58]
    timecmp_0 <= T_1387 @[RegField.scala 115:7]
    node T_1388 = bits(time, 7, 0) @[RegField.scala 113:52]
    node T_1389 = bits(time, 15, 8) @[RegField.scala 113:52]
    node T_1390 = bits(time, 23, 16) @[RegField.scala 113:52]
    node T_1391 = bits(time, 31, 24) @[RegField.scala 113:52]
    node T_1392 = bits(time, 39, 32) @[RegField.scala 113:52]
    node T_1393 = bits(time, 47, 40) @[RegField.scala 113:52]
    node T_1394 = bits(time, 55, 48) @[RegField.scala 113:52]
    node T_1395 = bits(time, 63, 56) @[RegField.scala 113:52]
    wire T_1396 : UInt
    T_1396 is invalid
    T_1396 <= T_1388
    wire T_1397 : UInt
    T_1397 is invalid
    T_1397 <= T_1389
    wire T_1398 : UInt
    T_1398 is invalid
    T_1398 <= T_1390
    wire T_1399 : UInt
    T_1399 is invalid
    T_1399 <= T_1391
    wire T_1400 : UInt
    T_1400 is invalid
    T_1400 <= T_1392
    wire T_1401 : UInt
    T_1401 is invalid
    T_1401 <= T_1393
    wire T_1402 : UInt
    T_1402 is invalid
    T_1402 <= T_1394
    wire T_1403 : UInt
    T_1403 is invalid
    T_1403 <= T_1395
    node T_1404 = cat(T_1397, T_1396) @[Cat.scala 20:58]
    node T_1405 = cat(T_1399, T_1398) @[Cat.scala 20:58]
    node T_1406 = cat(T_1405, T_1404) @[Cat.scala 20:58]
    node T_1407 = cat(T_1401, T_1400) @[Cat.scala 20:58]
    node T_1408 = cat(T_1403, T_1402) @[Cat.scala 20:58]
    node T_1409 = cat(T_1408, T_1407) @[Cat.scala 20:58]
    node T_1410 = cat(T_1409, T_1406) @[Cat.scala 20:58]
    time <= T_1410 @[RegField.scala 115:7]
    wire T_1432 : {flip ready : UInt<1>, valid : UInt<1>, bits : {read : UInt<1>, index : UInt<13>, data : UInt<64>, mask : UInt<8>, extra : UInt<12>}} @[RegisterRouter.scala 31:18]
    T_1432 is invalid @[RegisterRouter.scala 31:18]
    node T_1447 = eq(io.in[0].a.bits.opcode, UInt<3>("h04")) @[RegisterRouter.scala 32:36]
    T_1432.bits.read <= T_1447 @[RegisterRouter.scala 32:19]
    T_1432.bits.index <= io.in[0].a.bits.addr_hi @[RegisterRouter.scala 33:19]
    T_1432.bits.data <= io.in[0].a.bits.data @[RegisterRouter.scala 34:19]
    T_1432.bits.mask <= io.in[0].a.bits.mask @[RegisterRouter.scala 35:19]
    node T_1449 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_1450 = dshl(T_1449, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_1451 = bits(T_1450, 2, 0) @[package.scala 11:76]
    node T_1452 = not(T_1451) @[package.scala 11:40]
    node T_1453 = bits(io.in[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
    node T_1454 = bits(io.in[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
    node T_1456 = neq(T_1454, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_1458 = eq(T_1456, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_1459 = or(T_1453, T_1454) @[Edges.scala 63:32]
    node T_1460 = bits(T_1459, 3, 2) @[Edges.scala 61:22]
    node T_1461 = bits(T_1459, 1, 0) @[Edges.scala 62:22]
    node T_1463 = neq(T_1461, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_1465 = eq(T_1463, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_1466 = or(T_1460, T_1461) @[Edges.scala 63:32]
    node T_1467 = bits(T_1466, 0, 0) @[Edges.scala 58:14]
    node T_1468 = not(T_1467) @[Edges.scala 58:9]
    node T_1469 = cat(T_1465, T_1468) @[Cat.scala 20:58]
    node T_1470 = cat(T_1458, T_1469) @[Cat.scala 20:58]
    node T_1471 = not(T_1452) @[Edges.scala 66:39]
    node T_1472 = and(T_1470, T_1471) @[Edges.scala 66:37]
    node T_1473 = cat(T_1472, io.in[0].a.bits.source) @[Cat.scala 20:58]
    node T_1474 = cat(T_1473, io.in[0].a.bits.size) @[Cat.scala 20:58]
    T_1432.bits.extra <= T_1474 @[RegisterRouter.scala 36:19]
    wire T_1490 : {flip ready : UInt<1>, valid : UInt<1>, bits : {read : UInt<1>, data : UInt<64>, extra : UInt<12>}} @[RegMapper.scala 46:19]
    T_1490 is invalid @[RegMapper.scala 46:19]
    wire T_1522 : {flip ready : UInt<1>, valid : UInt<1>, bits : {read : UInt<1>, index : UInt<13>, data : UInt<64>, mask : UInt<8>, extra : UInt<12>}} @[RegMapper.scala 47:21]
    T_1522 is invalid @[RegMapper.scala 47:21]
    T_1522.bits <- T_1432.bits @[RegMapper.scala 48:16]
    node T_1538 = not(UInt<13>("h0801")) @[RegMapper.scala 64:21]
    wire T_1556 : UInt<1>[21] @[RegMapper.scala 92:23]
    T_1556 is invalid @[RegMapper.scala 92:23]
    wire T_1564 : UInt<1>[21] @[RegMapper.scala 93:23]
    T_1564 is invalid @[RegMapper.scala 93:23]
    wire T_1572 : UInt<1>[21] @[RegMapper.scala 94:23]
    T_1572 is invalid @[RegMapper.scala 94:23]
    wire T_1580 : UInt<1>[21] @[RegMapper.scala 95:23]
    T_1580 is invalid @[RegMapper.scala 95:23]
    wire T_1588 : UInt<1>[21] @[RegMapper.scala 96:23]
    T_1588 is invalid @[RegMapper.scala 96:23]
    wire T_1596 : UInt<1>[21] @[RegMapper.scala 97:23]
    T_1596 is invalid @[RegMapper.scala 97:23]
    wire T_1604 : UInt<1>[21] @[RegMapper.scala 98:23]
    T_1604 is invalid @[RegMapper.scala 98:23]
    wire T_1612 : UInt<1>[21] @[RegMapper.scala 99:23]
    T_1612 is invalid @[RegMapper.scala 99:23]
    node T_1634 = bits(T_1522.bits.mask, 0, 0) @[Bitwise.scala 13:51]
    node T_1635 = bits(T_1522.bits.mask, 1, 1) @[Bitwise.scala 13:51]
    node T_1636 = bits(T_1522.bits.mask, 2, 2) @[Bitwise.scala 13:51]
    node T_1637 = bits(T_1522.bits.mask, 3, 3) @[Bitwise.scala 13:51]
    node T_1638 = bits(T_1522.bits.mask, 4, 4) @[Bitwise.scala 13:51]
    node T_1639 = bits(T_1522.bits.mask, 5, 5) @[Bitwise.scala 13:51]
    node T_1640 = bits(T_1522.bits.mask, 6, 6) @[Bitwise.scala 13:51]
    node T_1641 = bits(T_1522.bits.mask, 7, 7) @[Bitwise.scala 13:51]
    node T_1642 = bits(T_1634, 0, 0) @[Bitwise.scala 33:15]
    node T_1645 = mux(T_1642, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1646 = bits(T_1635, 0, 0) @[Bitwise.scala 33:15]
    node T_1649 = mux(T_1646, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1650 = bits(T_1636, 0, 0) @[Bitwise.scala 33:15]
    node T_1653 = mux(T_1650, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1654 = bits(T_1637, 0, 0) @[Bitwise.scala 33:15]
    node T_1657 = mux(T_1654, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1658 = bits(T_1638, 0, 0) @[Bitwise.scala 33:15]
    node T_1661 = mux(T_1658, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1662 = bits(T_1639, 0, 0) @[Bitwise.scala 33:15]
    node T_1665 = mux(T_1662, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1666 = bits(T_1640, 0, 0) @[Bitwise.scala 33:15]
    node T_1669 = mux(T_1666, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1670 = bits(T_1641, 0, 0) @[Bitwise.scala 33:15]
    node T_1673 = mux(T_1670, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1674 = cat(T_1649, T_1645) @[Cat.scala 20:58]
    node T_1675 = cat(T_1657, T_1653) @[Cat.scala 20:58]
    node T_1676 = cat(T_1675, T_1674) @[Cat.scala 20:58]
    node T_1677 = cat(T_1665, T_1661) @[Cat.scala 20:58]
    node T_1678 = cat(T_1673, T_1669) @[Cat.scala 20:58]
    node T_1679 = cat(T_1678, T_1677) @[Cat.scala 20:58]
    node T_1680 = cat(T_1679, T_1676) @[Cat.scala 20:58]
    node T_1681 = bits(T_1522.bits.mask, 0, 0) @[Bitwise.scala 13:51]
    node T_1682 = bits(T_1522.bits.mask, 1, 1) @[Bitwise.scala 13:51]
    node T_1683 = bits(T_1522.bits.mask, 2, 2) @[Bitwise.scala 13:51]
    node T_1684 = bits(T_1522.bits.mask, 3, 3) @[Bitwise.scala 13:51]
    node T_1685 = bits(T_1522.bits.mask, 4, 4) @[Bitwise.scala 13:51]
    node T_1686 = bits(T_1522.bits.mask, 5, 5) @[Bitwise.scala 13:51]
    node T_1687 = bits(T_1522.bits.mask, 6, 6) @[Bitwise.scala 13:51]
    node T_1688 = bits(T_1522.bits.mask, 7, 7) @[Bitwise.scala 13:51]
    node T_1689 = bits(T_1681, 0, 0) @[Bitwise.scala 33:15]
    node T_1692 = mux(T_1689, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1693 = bits(T_1682, 0, 0) @[Bitwise.scala 33:15]
    node T_1696 = mux(T_1693, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1697 = bits(T_1683, 0, 0) @[Bitwise.scala 33:15]
    node T_1700 = mux(T_1697, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1701 = bits(T_1684, 0, 0) @[Bitwise.scala 33:15]
    node T_1704 = mux(T_1701, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1705 = bits(T_1685, 0, 0) @[Bitwise.scala 33:15]
    node T_1708 = mux(T_1705, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1709 = bits(T_1686, 0, 0) @[Bitwise.scala 33:15]
    node T_1712 = mux(T_1709, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1713 = bits(T_1687, 0, 0) @[Bitwise.scala 33:15]
    node T_1716 = mux(T_1713, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1717 = bits(T_1688, 0, 0) @[Bitwise.scala 33:15]
    node T_1720 = mux(T_1717, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1721 = cat(T_1696, T_1692) @[Cat.scala 20:58]
    node T_1722 = cat(T_1704, T_1700) @[Cat.scala 20:58]
    node T_1723 = cat(T_1722, T_1721) @[Cat.scala 20:58]
    node T_1724 = cat(T_1712, T_1708) @[Cat.scala 20:58]
    node T_1725 = cat(T_1720, T_1716) @[Cat.scala 20:58]
    node T_1726 = cat(T_1725, T_1724) @[Cat.scala 20:58]
    node T_1727 = cat(T_1726, T_1723) @[Cat.scala 20:58]
    node T_1728 = bits(T_1680, 0, 0) @[RegMapper.scala 120:29]
    node T_1730 = neq(T_1728, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_1731 = bits(T_1680, 0, 0) @[RegMapper.scala 121:29]
    node T_1732 = not(T_1731) @[RegMapper.scala 121:45]
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_1735 = bits(T_1727, 0, 0) @[RegMapper.scala 122:28]
    node T_1737 = neq(T_1735, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_1738 = bits(T_1727, 0, 0) @[RegMapper.scala 123:28]
    node T_1739 = not(T_1738) @[RegMapper.scala 123:44]
    node T_1741 = eq(T_1739, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_1742 = and(T_1556[0], T_1730) @[RegMapper.scala 125:69]
    node T_1743 = and(T_1604[0], T_1737) @[RegMapper.scala 125:91]
    node T_1746 = and(T_1564[0], T_1734) @[RegMapper.scala 126:62]
    node T_1747 = and(T_1612[0], T_1741) @[RegMapper.scala 126:84]
    node T_1748 = bits(T_1522.bits.data, 0, 0) @[RegMapper.scala 126:99]
    when T_1747 : @[RegField.scala 75:88]
      ipi_0 <= T_1748 @[RegField.scala 75:92]
      skip @[RegField.scala 75:88]
    node T_1752 = eq(T_1730, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_1753 = or(UInt<1>("h01"), T_1752) @[RegMapper.scala 127:31]
    T_1572[0] <= T_1753 @[RegMapper.scala 127:18]
    node T_1755 = eq(T_1734, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_1756 = or(UInt<1>("h01"), T_1755) @[RegMapper.scala 128:31]
    T_1580[0] <= T_1756 @[RegMapper.scala 128:18]
    node T_1758 = eq(T_1737, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_1759 = or(UInt<1>("h01"), T_1758) @[RegMapper.scala 129:31]
    T_1588[0] <= T_1759 @[RegMapper.scala 129:18]
    node T_1761 = eq(T_1741, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_1762 = or(UInt<1>("h01"), T_1761) @[RegMapper.scala 130:31]
    T_1596[0] <= T_1762 @[RegMapper.scala 130:18]
    node T_1763 = shl(ipi_0, 0) @[RegMapper.scala 135:47]
    node T_1765 = not(UInt<1>("h00")) @[RegMapper.scala 135:58]
    node T_1766 = and(T_1763, T_1765) @[RegMapper.scala 135:55]
    node T_1767 = or(UInt<1>("h00"), T_1766) @[RegMapper.scala 135:35]
    node T_1768 = bits(T_1680, 7, 1) @[RegMapper.scala 120:29]
    node T_1770 = neq(T_1768, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_1771 = bits(T_1680, 7, 1) @[RegMapper.scala 121:29]
    node T_1772 = not(T_1771) @[RegMapper.scala 121:45]
    node T_1774 = eq(T_1772, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_1775 = bits(T_1727, 7, 1) @[RegMapper.scala 122:28]
    node T_1777 = neq(T_1775, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_1778 = bits(T_1727, 7, 1) @[RegMapper.scala 123:28]
    node T_1779 = not(T_1778) @[RegMapper.scala 123:44]
    node T_1781 = eq(T_1779, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_1782 = and(T_1556[1], T_1770) @[RegMapper.scala 125:69]
    node T_1783 = and(T_1604[1], T_1777) @[RegMapper.scala 125:91]
    node T_1786 = and(T_1564[1], T_1774) @[RegMapper.scala 126:62]
    node T_1787 = and(T_1612[1], T_1781) @[RegMapper.scala 126:84]
    node T_1788 = bits(T_1522.bits.data, 7, 1) @[RegMapper.scala 126:99]
    node T_1792 = eq(T_1770, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_1793 = or(UInt<1>("h01"), T_1792) @[RegMapper.scala 127:31]
    T_1572[1] <= T_1793 @[RegMapper.scala 127:18]
    node T_1795 = eq(T_1774, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_1796 = or(UInt<1>("h01"), T_1795) @[RegMapper.scala 128:31]
    T_1580[1] <= T_1796 @[RegMapper.scala 128:18]
    node T_1798 = eq(T_1777, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_1799 = or(UInt<1>("h01"), T_1798) @[RegMapper.scala 129:31]
    T_1588[1] <= T_1799 @[RegMapper.scala 129:18]
    node T_1801 = eq(T_1781, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_1802 = or(UInt<1>("h01"), T_1801) @[RegMapper.scala 130:31]
    T_1596[1] <= T_1802 @[RegMapper.scala 130:18]
    node T_1803 = shl(UInt<1>("h00"), 1) @[RegMapper.scala 135:47]
    node T_1805 = not(UInt<8>("h00")) @[RegMapper.scala 135:58]
    node T_1806 = and(T_1803, T_1805) @[RegMapper.scala 135:55]
    node T_1807 = or(T_1767, T_1806) @[RegMapper.scala 135:35]
    node T_1808 = bits(T_1680, 15, 8) @[RegMapper.scala 120:29]
    node T_1810 = neq(T_1808, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_1811 = bits(T_1680, 15, 8) @[RegMapper.scala 121:29]
    node T_1812 = not(T_1811) @[RegMapper.scala 121:45]
    node T_1814 = eq(T_1812, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_1815 = bits(T_1727, 15, 8) @[RegMapper.scala 122:28]
    node T_1817 = neq(T_1815, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_1818 = bits(T_1727, 15, 8) @[RegMapper.scala 123:28]
    node T_1819 = not(T_1818) @[RegMapper.scala 123:44]
    node T_1821 = eq(T_1819, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_1822 = and(T_1556[2], T_1810) @[RegMapper.scala 125:69]
    node T_1823 = and(T_1604[2], T_1817) @[RegMapper.scala 125:91]
    node T_1826 = and(T_1564[2], T_1814) @[RegMapper.scala 126:62]
    node T_1827 = and(T_1612[2], T_1821) @[RegMapper.scala 126:84]
    node T_1828 = bits(T_1522.bits.data, 15, 8) @[RegMapper.scala 126:99]
    node T_1832 = eq(T_1810, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_1833 = or(UInt<1>("h01"), T_1832) @[RegMapper.scala 127:31]
    T_1572[2] <= T_1833 @[RegMapper.scala 127:18]
    node T_1835 = eq(T_1814, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_1836 = or(UInt<1>("h01"), T_1835) @[RegMapper.scala 128:31]
    T_1580[2] <= T_1836 @[RegMapper.scala 128:18]
    node T_1838 = eq(T_1817, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_1839 = or(UInt<1>("h01"), T_1838) @[RegMapper.scala 129:31]
    T_1588[2] <= T_1839 @[RegMapper.scala 129:18]
    node T_1841 = eq(T_1821, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_1842 = or(UInt<1>("h01"), T_1841) @[RegMapper.scala 130:31]
    T_1596[2] <= T_1842 @[RegMapper.scala 130:18]
    node T_1843 = shl(UInt<1>("h00"), 8) @[RegMapper.scala 135:47]
    node T_1845 = not(UInt<16>("h00")) @[RegMapper.scala 135:58]
    node T_1846 = and(T_1843, T_1845) @[RegMapper.scala 135:55]
    node T_1847 = or(T_1807, T_1846) @[RegMapper.scala 135:35]
    node T_1848 = bits(T_1680, 23, 16) @[RegMapper.scala 120:29]
    node T_1850 = neq(T_1848, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_1851 = bits(T_1680, 23, 16) @[RegMapper.scala 121:29]
    node T_1852 = not(T_1851) @[RegMapper.scala 121:45]
    node T_1854 = eq(T_1852, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_1855 = bits(T_1727, 23, 16) @[RegMapper.scala 122:28]
    node T_1857 = neq(T_1855, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_1858 = bits(T_1727, 23, 16) @[RegMapper.scala 123:28]
    node T_1859 = not(T_1858) @[RegMapper.scala 123:44]
    node T_1861 = eq(T_1859, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_1862 = and(T_1556[3], T_1850) @[RegMapper.scala 125:69]
    node T_1863 = and(T_1604[3], T_1857) @[RegMapper.scala 125:91]
    node T_1866 = and(T_1564[3], T_1854) @[RegMapper.scala 126:62]
    node T_1867 = and(T_1612[3], T_1861) @[RegMapper.scala 126:84]
    node T_1868 = bits(T_1522.bits.data, 23, 16) @[RegMapper.scala 126:99]
    node T_1872 = eq(T_1850, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_1873 = or(UInt<1>("h01"), T_1872) @[RegMapper.scala 127:31]
    T_1572[3] <= T_1873 @[RegMapper.scala 127:18]
    node T_1875 = eq(T_1854, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_1876 = or(UInt<1>("h01"), T_1875) @[RegMapper.scala 128:31]
    T_1580[3] <= T_1876 @[RegMapper.scala 128:18]
    node T_1878 = eq(T_1857, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_1879 = or(UInt<1>("h01"), T_1878) @[RegMapper.scala 129:31]
    T_1588[3] <= T_1879 @[RegMapper.scala 129:18]
    node T_1881 = eq(T_1861, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_1882 = or(UInt<1>("h01"), T_1881) @[RegMapper.scala 130:31]
    T_1596[3] <= T_1882 @[RegMapper.scala 130:18]
    node T_1883 = shl(UInt<1>("h00"), 16) @[RegMapper.scala 135:47]
    node T_1885 = not(UInt<24>("h00")) @[RegMapper.scala 135:58]
    node T_1886 = and(T_1883, T_1885) @[RegMapper.scala 135:55]
    node T_1887 = or(T_1847, T_1886) @[RegMapper.scala 135:35]
    node T_1888 = bits(T_1680, 31, 24) @[RegMapper.scala 120:29]
    node T_1890 = neq(T_1888, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_1891 = bits(T_1680, 31, 24) @[RegMapper.scala 121:29]
    node T_1892 = not(T_1891) @[RegMapper.scala 121:45]
    node T_1894 = eq(T_1892, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_1895 = bits(T_1727, 31, 24) @[RegMapper.scala 122:28]
    node T_1897 = neq(T_1895, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_1898 = bits(T_1727, 31, 24) @[RegMapper.scala 123:28]
    node T_1899 = not(T_1898) @[RegMapper.scala 123:44]
    node T_1901 = eq(T_1899, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_1902 = and(T_1556[4], T_1890) @[RegMapper.scala 125:69]
    node T_1903 = and(T_1604[4], T_1897) @[RegMapper.scala 125:91]
    node T_1906 = and(T_1564[4], T_1894) @[RegMapper.scala 126:62]
    node T_1907 = and(T_1612[4], T_1901) @[RegMapper.scala 126:84]
    node T_1908 = bits(T_1522.bits.data, 31, 24) @[RegMapper.scala 126:99]
    node T_1912 = eq(T_1890, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_1913 = or(UInt<1>("h01"), T_1912) @[RegMapper.scala 127:31]
    T_1572[4] <= T_1913 @[RegMapper.scala 127:18]
    node T_1915 = eq(T_1894, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_1916 = or(UInt<1>("h01"), T_1915) @[RegMapper.scala 128:31]
    T_1580[4] <= T_1916 @[RegMapper.scala 128:18]
    node T_1918 = eq(T_1897, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_1919 = or(UInt<1>("h01"), T_1918) @[RegMapper.scala 129:31]
    T_1588[4] <= T_1919 @[RegMapper.scala 129:18]
    node T_1921 = eq(T_1901, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_1922 = or(UInt<1>("h01"), T_1921) @[RegMapper.scala 130:31]
    T_1596[4] <= T_1922 @[RegMapper.scala 130:18]
    node T_1923 = shl(UInt<1>("h00"), 24) @[RegMapper.scala 135:47]
    node T_1925 = not(UInt<32>("h00")) @[RegMapper.scala 135:58]
    node T_1926 = and(T_1923, T_1925) @[RegMapper.scala 135:55]
    node T_1927 = or(T_1887, T_1926) @[RegMapper.scala 135:35]
    node T_1928 = bits(T_1680, 7, 0) @[RegMapper.scala 120:29]
    node T_1930 = neq(T_1928, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_1931 = bits(T_1680, 7, 0) @[RegMapper.scala 121:29]
    node T_1932 = not(T_1931) @[RegMapper.scala 121:45]
    node T_1934 = eq(T_1932, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_1935 = bits(T_1727, 7, 0) @[RegMapper.scala 122:28]
    node T_1937 = neq(T_1935, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_1938 = bits(T_1727, 7, 0) @[RegMapper.scala 123:28]
    node T_1939 = not(T_1938) @[RegMapper.scala 123:44]
    node T_1941 = eq(T_1939, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_1942 = and(T_1556[5], T_1930) @[RegMapper.scala 125:69]
    node T_1943 = and(T_1604[5], T_1937) @[RegMapper.scala 125:91]
    node T_1946 = and(T_1564[5], T_1934) @[RegMapper.scala 126:62]
    node T_1947 = and(T_1612[5], T_1941) @[RegMapper.scala 126:84]
    node T_1948 = bits(T_1522.bits.data, 7, 0) @[RegMapper.scala 126:99]
    when T_1947 : @[RegField.scala 118:22]
      T_1373 <= T_1948 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_1952 = eq(T_1930, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_1953 = or(UInt<1>("h01"), T_1952) @[RegMapper.scala 127:31]
    T_1572[5] <= T_1953 @[RegMapper.scala 127:18]
    node T_1955 = eq(T_1934, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_1956 = or(UInt<1>("h01"), T_1955) @[RegMapper.scala 128:31]
    T_1580[5] <= T_1956 @[RegMapper.scala 128:18]
    node T_1958 = eq(T_1937, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_1959 = or(UInt<1>("h01"), T_1958) @[RegMapper.scala 129:31]
    T_1588[5] <= T_1959 @[RegMapper.scala 129:18]
    node T_1961 = eq(T_1941, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_1962 = or(UInt<1>("h01"), T_1961) @[RegMapper.scala 130:31]
    T_1596[5] <= T_1962 @[RegMapper.scala 130:18]
    node T_1963 = shl(T_1365, 0) @[RegMapper.scala 135:47]
    node T_1965 = not(UInt<8>("h00")) @[RegMapper.scala 135:58]
    node T_1966 = and(T_1963, T_1965) @[RegMapper.scala 135:55]
    node T_1967 = or(UInt<1>("h00"), T_1966) @[RegMapper.scala 135:35]
    node T_1968 = bits(T_1680, 15, 8) @[RegMapper.scala 120:29]
    node T_1970 = neq(T_1968, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_1971 = bits(T_1680, 15, 8) @[RegMapper.scala 121:29]
    node T_1972 = not(T_1971) @[RegMapper.scala 121:45]
    node T_1974 = eq(T_1972, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_1975 = bits(T_1727, 15, 8) @[RegMapper.scala 122:28]
    node T_1977 = neq(T_1975, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_1978 = bits(T_1727, 15, 8) @[RegMapper.scala 123:28]
    node T_1979 = not(T_1978) @[RegMapper.scala 123:44]
    node T_1981 = eq(T_1979, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_1982 = and(T_1556[6], T_1970) @[RegMapper.scala 125:69]
    node T_1983 = and(T_1604[6], T_1977) @[RegMapper.scala 125:91]
    node T_1986 = and(T_1564[6], T_1974) @[RegMapper.scala 126:62]
    node T_1987 = and(T_1612[6], T_1981) @[RegMapper.scala 126:84]
    node T_1988 = bits(T_1522.bits.data, 15, 8) @[RegMapper.scala 126:99]
    when T_1987 : @[RegField.scala 118:22]
      T_1374 <= T_1988 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_1992 = eq(T_1970, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_1993 = or(UInt<1>("h01"), T_1992) @[RegMapper.scala 127:31]
    T_1572[6] <= T_1993 @[RegMapper.scala 127:18]
    node T_1995 = eq(T_1974, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_1996 = or(UInt<1>("h01"), T_1995) @[RegMapper.scala 128:31]
    T_1580[6] <= T_1996 @[RegMapper.scala 128:18]
    node T_1998 = eq(T_1977, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_1999 = or(UInt<1>("h01"), T_1998) @[RegMapper.scala 129:31]
    T_1588[6] <= T_1999 @[RegMapper.scala 129:18]
    node T_2001 = eq(T_1981, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2002 = or(UInt<1>("h01"), T_2001) @[RegMapper.scala 130:31]
    T_1596[6] <= T_2002 @[RegMapper.scala 130:18]
    node T_2003 = shl(T_1366, 8) @[RegMapper.scala 135:47]
    node T_2005 = not(UInt<16>("h00")) @[RegMapper.scala 135:58]
    node T_2006 = and(T_2003, T_2005) @[RegMapper.scala 135:55]
    node T_2007 = or(T_1967, T_2006) @[RegMapper.scala 135:35]
    node T_2008 = bits(T_1680, 23, 16) @[RegMapper.scala 120:29]
    node T_2010 = neq(T_2008, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2011 = bits(T_1680, 23, 16) @[RegMapper.scala 121:29]
    node T_2012 = not(T_2011) @[RegMapper.scala 121:45]
    node T_2014 = eq(T_2012, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2015 = bits(T_1727, 23, 16) @[RegMapper.scala 122:28]
    node T_2017 = neq(T_2015, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2018 = bits(T_1727, 23, 16) @[RegMapper.scala 123:28]
    node T_2019 = not(T_2018) @[RegMapper.scala 123:44]
    node T_2021 = eq(T_2019, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2022 = and(T_1556[7], T_2010) @[RegMapper.scala 125:69]
    node T_2023 = and(T_1604[7], T_2017) @[RegMapper.scala 125:91]
    node T_2026 = and(T_1564[7], T_2014) @[RegMapper.scala 126:62]
    node T_2027 = and(T_1612[7], T_2021) @[RegMapper.scala 126:84]
    node T_2028 = bits(T_1522.bits.data, 23, 16) @[RegMapper.scala 126:99]
    when T_2027 : @[RegField.scala 118:22]
      T_1375 <= T_2028 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2032 = eq(T_2010, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2033 = or(UInt<1>("h01"), T_2032) @[RegMapper.scala 127:31]
    T_1572[7] <= T_2033 @[RegMapper.scala 127:18]
    node T_2035 = eq(T_2014, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2036 = or(UInt<1>("h01"), T_2035) @[RegMapper.scala 128:31]
    T_1580[7] <= T_2036 @[RegMapper.scala 128:18]
    node T_2038 = eq(T_2017, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2039 = or(UInt<1>("h01"), T_2038) @[RegMapper.scala 129:31]
    T_1588[7] <= T_2039 @[RegMapper.scala 129:18]
    node T_2041 = eq(T_2021, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2042 = or(UInt<1>("h01"), T_2041) @[RegMapper.scala 130:31]
    T_1596[7] <= T_2042 @[RegMapper.scala 130:18]
    node T_2043 = shl(T_1367, 16) @[RegMapper.scala 135:47]
    node T_2045 = not(UInt<24>("h00")) @[RegMapper.scala 135:58]
    node T_2046 = and(T_2043, T_2045) @[RegMapper.scala 135:55]
    node T_2047 = or(T_2007, T_2046) @[RegMapper.scala 135:35]
    node T_2048 = bits(T_1680, 31, 24) @[RegMapper.scala 120:29]
    node T_2050 = neq(T_2048, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2051 = bits(T_1680, 31, 24) @[RegMapper.scala 121:29]
    node T_2052 = not(T_2051) @[RegMapper.scala 121:45]
    node T_2054 = eq(T_2052, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2055 = bits(T_1727, 31, 24) @[RegMapper.scala 122:28]
    node T_2057 = neq(T_2055, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2058 = bits(T_1727, 31, 24) @[RegMapper.scala 123:28]
    node T_2059 = not(T_2058) @[RegMapper.scala 123:44]
    node T_2061 = eq(T_2059, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2062 = and(T_1556[8], T_2050) @[RegMapper.scala 125:69]
    node T_2063 = and(T_1604[8], T_2057) @[RegMapper.scala 125:91]
    node T_2066 = and(T_1564[8], T_2054) @[RegMapper.scala 126:62]
    node T_2067 = and(T_1612[8], T_2061) @[RegMapper.scala 126:84]
    node T_2068 = bits(T_1522.bits.data, 31, 24) @[RegMapper.scala 126:99]
    when T_2067 : @[RegField.scala 118:22]
      T_1376 <= T_2068 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2072 = eq(T_2050, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2073 = or(UInt<1>("h01"), T_2072) @[RegMapper.scala 127:31]
    T_1572[8] <= T_2073 @[RegMapper.scala 127:18]
    node T_2075 = eq(T_2054, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2076 = or(UInt<1>("h01"), T_2075) @[RegMapper.scala 128:31]
    T_1580[8] <= T_2076 @[RegMapper.scala 128:18]
    node T_2078 = eq(T_2057, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2079 = or(UInt<1>("h01"), T_2078) @[RegMapper.scala 129:31]
    T_1588[8] <= T_2079 @[RegMapper.scala 129:18]
    node T_2081 = eq(T_2061, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2082 = or(UInt<1>("h01"), T_2081) @[RegMapper.scala 130:31]
    T_1596[8] <= T_2082 @[RegMapper.scala 130:18]
    node T_2083 = shl(T_1368, 24) @[RegMapper.scala 135:47]
    node T_2085 = not(UInt<32>("h00")) @[RegMapper.scala 135:58]
    node T_2086 = and(T_2083, T_2085) @[RegMapper.scala 135:55]
    node T_2087 = or(T_2047, T_2086) @[RegMapper.scala 135:35]
    node T_2088 = bits(T_1680, 39, 32) @[RegMapper.scala 120:29]
    node T_2090 = neq(T_2088, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2091 = bits(T_1680, 39, 32) @[RegMapper.scala 121:29]
    node T_2092 = not(T_2091) @[RegMapper.scala 121:45]
    node T_2094 = eq(T_2092, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2095 = bits(T_1727, 39, 32) @[RegMapper.scala 122:28]
    node T_2097 = neq(T_2095, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2098 = bits(T_1727, 39, 32) @[RegMapper.scala 123:28]
    node T_2099 = not(T_2098) @[RegMapper.scala 123:44]
    node T_2101 = eq(T_2099, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2102 = and(T_1556[9], T_2090) @[RegMapper.scala 125:69]
    node T_2103 = and(T_1604[9], T_2097) @[RegMapper.scala 125:91]
    node T_2106 = and(T_1564[9], T_2094) @[RegMapper.scala 126:62]
    node T_2107 = and(T_1612[9], T_2101) @[RegMapper.scala 126:84]
    node T_2108 = bits(T_1522.bits.data, 39, 32) @[RegMapper.scala 126:99]
    when T_2107 : @[RegField.scala 118:22]
      T_1377 <= T_2108 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2112 = eq(T_2090, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2113 = or(UInt<1>("h01"), T_2112) @[RegMapper.scala 127:31]
    T_1572[9] <= T_2113 @[RegMapper.scala 127:18]
    node T_2115 = eq(T_2094, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2116 = or(UInt<1>("h01"), T_2115) @[RegMapper.scala 128:31]
    T_1580[9] <= T_2116 @[RegMapper.scala 128:18]
    node T_2118 = eq(T_2097, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2119 = or(UInt<1>("h01"), T_2118) @[RegMapper.scala 129:31]
    T_1588[9] <= T_2119 @[RegMapper.scala 129:18]
    node T_2121 = eq(T_2101, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2122 = or(UInt<1>("h01"), T_2121) @[RegMapper.scala 130:31]
    T_1596[9] <= T_2122 @[RegMapper.scala 130:18]
    node T_2123 = shl(T_1369, 32) @[RegMapper.scala 135:47]
    node T_2125 = not(UInt<40>("h00")) @[RegMapper.scala 135:58]
    node T_2126 = and(T_2123, T_2125) @[RegMapper.scala 135:55]
    node T_2127 = or(T_2087, T_2126) @[RegMapper.scala 135:35]
    node T_2128 = bits(T_1680, 47, 40) @[RegMapper.scala 120:29]
    node T_2130 = neq(T_2128, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2131 = bits(T_1680, 47, 40) @[RegMapper.scala 121:29]
    node T_2132 = not(T_2131) @[RegMapper.scala 121:45]
    node T_2134 = eq(T_2132, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2135 = bits(T_1727, 47, 40) @[RegMapper.scala 122:28]
    node T_2137 = neq(T_2135, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2138 = bits(T_1727, 47, 40) @[RegMapper.scala 123:28]
    node T_2139 = not(T_2138) @[RegMapper.scala 123:44]
    node T_2141 = eq(T_2139, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2142 = and(T_1556[10], T_2130) @[RegMapper.scala 125:69]
    node T_2143 = and(T_1604[10], T_2137) @[RegMapper.scala 125:91]
    node T_2146 = and(T_1564[10], T_2134) @[RegMapper.scala 126:62]
    node T_2147 = and(T_1612[10], T_2141) @[RegMapper.scala 126:84]
    node T_2148 = bits(T_1522.bits.data, 47, 40) @[RegMapper.scala 126:99]
    when T_2147 : @[RegField.scala 118:22]
      T_1378 <= T_2148 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2152 = eq(T_2130, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2153 = or(UInt<1>("h01"), T_2152) @[RegMapper.scala 127:31]
    T_1572[10] <= T_2153 @[RegMapper.scala 127:18]
    node T_2155 = eq(T_2134, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2156 = or(UInt<1>("h01"), T_2155) @[RegMapper.scala 128:31]
    T_1580[10] <= T_2156 @[RegMapper.scala 128:18]
    node T_2158 = eq(T_2137, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2159 = or(UInt<1>("h01"), T_2158) @[RegMapper.scala 129:31]
    T_1588[10] <= T_2159 @[RegMapper.scala 129:18]
    node T_2161 = eq(T_2141, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2162 = or(UInt<1>("h01"), T_2161) @[RegMapper.scala 130:31]
    T_1596[10] <= T_2162 @[RegMapper.scala 130:18]
    node T_2163 = shl(T_1370, 40) @[RegMapper.scala 135:47]
    node T_2165 = not(UInt<48>("h00")) @[RegMapper.scala 135:58]
    node T_2166 = and(T_2163, T_2165) @[RegMapper.scala 135:55]
    node T_2167 = or(T_2127, T_2166) @[RegMapper.scala 135:35]
    node T_2168 = bits(T_1680, 55, 48) @[RegMapper.scala 120:29]
    node T_2170 = neq(T_2168, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2171 = bits(T_1680, 55, 48) @[RegMapper.scala 121:29]
    node T_2172 = not(T_2171) @[RegMapper.scala 121:45]
    node T_2174 = eq(T_2172, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2175 = bits(T_1727, 55, 48) @[RegMapper.scala 122:28]
    node T_2177 = neq(T_2175, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2178 = bits(T_1727, 55, 48) @[RegMapper.scala 123:28]
    node T_2179 = not(T_2178) @[RegMapper.scala 123:44]
    node T_2181 = eq(T_2179, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2182 = and(T_1556[11], T_2170) @[RegMapper.scala 125:69]
    node T_2183 = and(T_1604[11], T_2177) @[RegMapper.scala 125:91]
    node T_2186 = and(T_1564[11], T_2174) @[RegMapper.scala 126:62]
    node T_2187 = and(T_1612[11], T_2181) @[RegMapper.scala 126:84]
    node T_2188 = bits(T_1522.bits.data, 55, 48) @[RegMapper.scala 126:99]
    when T_2187 : @[RegField.scala 118:22]
      T_1379 <= T_2188 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2192 = eq(T_2170, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2193 = or(UInt<1>("h01"), T_2192) @[RegMapper.scala 127:31]
    T_1572[11] <= T_2193 @[RegMapper.scala 127:18]
    node T_2195 = eq(T_2174, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2196 = or(UInt<1>("h01"), T_2195) @[RegMapper.scala 128:31]
    T_1580[11] <= T_2196 @[RegMapper.scala 128:18]
    node T_2198 = eq(T_2177, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2199 = or(UInt<1>("h01"), T_2198) @[RegMapper.scala 129:31]
    T_1588[11] <= T_2199 @[RegMapper.scala 129:18]
    node T_2201 = eq(T_2181, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2202 = or(UInt<1>("h01"), T_2201) @[RegMapper.scala 130:31]
    T_1596[11] <= T_2202 @[RegMapper.scala 130:18]
    node T_2203 = shl(T_1371, 48) @[RegMapper.scala 135:47]
    node T_2205 = not(UInt<56>("h00")) @[RegMapper.scala 135:58]
    node T_2206 = and(T_2203, T_2205) @[RegMapper.scala 135:55]
    node T_2207 = or(T_2167, T_2206) @[RegMapper.scala 135:35]
    node T_2208 = bits(T_1680, 63, 56) @[RegMapper.scala 120:29]
    node T_2210 = neq(T_2208, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2211 = bits(T_1680, 63, 56) @[RegMapper.scala 121:29]
    node T_2212 = not(T_2211) @[RegMapper.scala 121:45]
    node T_2214 = eq(T_2212, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2215 = bits(T_1727, 63, 56) @[RegMapper.scala 122:28]
    node T_2217 = neq(T_2215, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2218 = bits(T_1727, 63, 56) @[RegMapper.scala 123:28]
    node T_2219 = not(T_2218) @[RegMapper.scala 123:44]
    node T_2221 = eq(T_2219, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2222 = and(T_1556[12], T_2210) @[RegMapper.scala 125:69]
    node T_2223 = and(T_1604[12], T_2217) @[RegMapper.scala 125:91]
    node T_2226 = and(T_1564[12], T_2214) @[RegMapper.scala 126:62]
    node T_2227 = and(T_1612[12], T_2221) @[RegMapper.scala 126:84]
    node T_2228 = bits(T_1522.bits.data, 63, 56) @[RegMapper.scala 126:99]
    when T_2227 : @[RegField.scala 118:22]
      T_1380 <= T_2228 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2232 = eq(T_2210, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2233 = or(UInt<1>("h01"), T_2232) @[RegMapper.scala 127:31]
    T_1572[12] <= T_2233 @[RegMapper.scala 127:18]
    node T_2235 = eq(T_2214, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2236 = or(UInt<1>("h01"), T_2235) @[RegMapper.scala 128:31]
    T_1580[12] <= T_2236 @[RegMapper.scala 128:18]
    node T_2238 = eq(T_2217, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2239 = or(UInt<1>("h01"), T_2238) @[RegMapper.scala 129:31]
    T_1588[12] <= T_2239 @[RegMapper.scala 129:18]
    node T_2241 = eq(T_2221, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2242 = or(UInt<1>("h01"), T_2241) @[RegMapper.scala 130:31]
    T_1596[12] <= T_2242 @[RegMapper.scala 130:18]
    node T_2243 = shl(T_1372, 56) @[RegMapper.scala 135:47]
    node T_2245 = not(UInt<64>("h00")) @[RegMapper.scala 135:58]
    node T_2246 = and(T_2243, T_2245) @[RegMapper.scala 135:55]
    node T_2247 = or(T_2207, T_2246) @[RegMapper.scala 135:35]
    node T_2248 = bits(T_1680, 7, 0) @[RegMapper.scala 120:29]
    node T_2250 = neq(T_2248, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2251 = bits(T_1680, 7, 0) @[RegMapper.scala 121:29]
    node T_2252 = not(T_2251) @[RegMapper.scala 121:45]
    node T_2254 = eq(T_2252, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2255 = bits(T_1727, 7, 0) @[RegMapper.scala 122:28]
    node T_2257 = neq(T_2255, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2258 = bits(T_1727, 7, 0) @[RegMapper.scala 123:28]
    node T_2259 = not(T_2258) @[RegMapper.scala 123:44]
    node T_2261 = eq(T_2259, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2262 = and(T_1556[13], T_2250) @[RegMapper.scala 125:69]
    node T_2263 = and(T_1604[13], T_2257) @[RegMapper.scala 125:91]
    node T_2266 = and(T_1564[13], T_2254) @[RegMapper.scala 126:62]
    node T_2267 = and(T_1612[13], T_2261) @[RegMapper.scala 126:84]
    node T_2268 = bits(T_1522.bits.data, 7, 0) @[RegMapper.scala 126:99]
    when T_2267 : @[RegField.scala 118:22]
      T_1396 <= T_2268 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2272 = eq(T_2250, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2273 = or(UInt<1>("h01"), T_2272) @[RegMapper.scala 127:31]
    T_1572[13] <= T_2273 @[RegMapper.scala 127:18]
    node T_2275 = eq(T_2254, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2276 = or(UInt<1>("h01"), T_2275) @[RegMapper.scala 128:31]
    T_1580[13] <= T_2276 @[RegMapper.scala 128:18]
    node T_2278 = eq(T_2257, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2279 = or(UInt<1>("h01"), T_2278) @[RegMapper.scala 129:31]
    T_1588[13] <= T_2279 @[RegMapper.scala 129:18]
    node T_2281 = eq(T_2261, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2282 = or(UInt<1>("h01"), T_2281) @[RegMapper.scala 130:31]
    T_1596[13] <= T_2282 @[RegMapper.scala 130:18]
    node T_2283 = shl(T_1388, 0) @[RegMapper.scala 135:47]
    node T_2285 = not(UInt<8>("h00")) @[RegMapper.scala 135:58]
    node T_2286 = and(T_2283, T_2285) @[RegMapper.scala 135:55]
    node T_2287 = or(UInt<1>("h00"), T_2286) @[RegMapper.scala 135:35]
    node T_2288 = bits(T_1680, 15, 8) @[RegMapper.scala 120:29]
    node T_2290 = neq(T_2288, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2291 = bits(T_1680, 15, 8) @[RegMapper.scala 121:29]
    node T_2292 = not(T_2291) @[RegMapper.scala 121:45]
    node T_2294 = eq(T_2292, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2295 = bits(T_1727, 15, 8) @[RegMapper.scala 122:28]
    node T_2297 = neq(T_2295, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2298 = bits(T_1727, 15, 8) @[RegMapper.scala 123:28]
    node T_2299 = not(T_2298) @[RegMapper.scala 123:44]
    node T_2301 = eq(T_2299, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2302 = and(T_1556[14], T_2290) @[RegMapper.scala 125:69]
    node T_2303 = and(T_1604[14], T_2297) @[RegMapper.scala 125:91]
    node T_2306 = and(T_1564[14], T_2294) @[RegMapper.scala 126:62]
    node T_2307 = and(T_1612[14], T_2301) @[RegMapper.scala 126:84]
    node T_2308 = bits(T_1522.bits.data, 15, 8) @[RegMapper.scala 126:99]
    when T_2307 : @[RegField.scala 118:22]
      T_1397 <= T_2308 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2312 = eq(T_2290, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2313 = or(UInt<1>("h01"), T_2312) @[RegMapper.scala 127:31]
    T_1572[14] <= T_2313 @[RegMapper.scala 127:18]
    node T_2315 = eq(T_2294, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2316 = or(UInt<1>("h01"), T_2315) @[RegMapper.scala 128:31]
    T_1580[14] <= T_2316 @[RegMapper.scala 128:18]
    node T_2318 = eq(T_2297, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2319 = or(UInt<1>("h01"), T_2318) @[RegMapper.scala 129:31]
    T_1588[14] <= T_2319 @[RegMapper.scala 129:18]
    node T_2321 = eq(T_2301, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2322 = or(UInt<1>("h01"), T_2321) @[RegMapper.scala 130:31]
    T_1596[14] <= T_2322 @[RegMapper.scala 130:18]
    node T_2323 = shl(T_1389, 8) @[RegMapper.scala 135:47]
    node T_2325 = not(UInt<16>("h00")) @[RegMapper.scala 135:58]
    node T_2326 = and(T_2323, T_2325) @[RegMapper.scala 135:55]
    node T_2327 = or(T_2287, T_2326) @[RegMapper.scala 135:35]
    node T_2328 = bits(T_1680, 23, 16) @[RegMapper.scala 120:29]
    node T_2330 = neq(T_2328, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2331 = bits(T_1680, 23, 16) @[RegMapper.scala 121:29]
    node T_2332 = not(T_2331) @[RegMapper.scala 121:45]
    node T_2334 = eq(T_2332, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2335 = bits(T_1727, 23, 16) @[RegMapper.scala 122:28]
    node T_2337 = neq(T_2335, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2338 = bits(T_1727, 23, 16) @[RegMapper.scala 123:28]
    node T_2339 = not(T_2338) @[RegMapper.scala 123:44]
    node T_2341 = eq(T_2339, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2342 = and(T_1556[15], T_2330) @[RegMapper.scala 125:69]
    node T_2343 = and(T_1604[15], T_2337) @[RegMapper.scala 125:91]
    node T_2346 = and(T_1564[15], T_2334) @[RegMapper.scala 126:62]
    node T_2347 = and(T_1612[15], T_2341) @[RegMapper.scala 126:84]
    node T_2348 = bits(T_1522.bits.data, 23, 16) @[RegMapper.scala 126:99]
    when T_2347 : @[RegField.scala 118:22]
      T_1398 <= T_2348 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2352 = eq(T_2330, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2353 = or(UInt<1>("h01"), T_2352) @[RegMapper.scala 127:31]
    T_1572[15] <= T_2353 @[RegMapper.scala 127:18]
    node T_2355 = eq(T_2334, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2356 = or(UInt<1>("h01"), T_2355) @[RegMapper.scala 128:31]
    T_1580[15] <= T_2356 @[RegMapper.scala 128:18]
    node T_2358 = eq(T_2337, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2359 = or(UInt<1>("h01"), T_2358) @[RegMapper.scala 129:31]
    T_1588[15] <= T_2359 @[RegMapper.scala 129:18]
    node T_2361 = eq(T_2341, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2362 = or(UInt<1>("h01"), T_2361) @[RegMapper.scala 130:31]
    T_1596[15] <= T_2362 @[RegMapper.scala 130:18]
    node T_2363 = shl(T_1390, 16) @[RegMapper.scala 135:47]
    node T_2365 = not(UInt<24>("h00")) @[RegMapper.scala 135:58]
    node T_2366 = and(T_2363, T_2365) @[RegMapper.scala 135:55]
    node T_2367 = or(T_2327, T_2366) @[RegMapper.scala 135:35]
    node T_2368 = bits(T_1680, 31, 24) @[RegMapper.scala 120:29]
    node T_2370 = neq(T_2368, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2371 = bits(T_1680, 31, 24) @[RegMapper.scala 121:29]
    node T_2372 = not(T_2371) @[RegMapper.scala 121:45]
    node T_2374 = eq(T_2372, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2375 = bits(T_1727, 31, 24) @[RegMapper.scala 122:28]
    node T_2377 = neq(T_2375, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2378 = bits(T_1727, 31, 24) @[RegMapper.scala 123:28]
    node T_2379 = not(T_2378) @[RegMapper.scala 123:44]
    node T_2381 = eq(T_2379, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2382 = and(T_1556[16], T_2370) @[RegMapper.scala 125:69]
    node T_2383 = and(T_1604[16], T_2377) @[RegMapper.scala 125:91]
    node T_2386 = and(T_1564[16], T_2374) @[RegMapper.scala 126:62]
    node T_2387 = and(T_1612[16], T_2381) @[RegMapper.scala 126:84]
    node T_2388 = bits(T_1522.bits.data, 31, 24) @[RegMapper.scala 126:99]
    when T_2387 : @[RegField.scala 118:22]
      T_1399 <= T_2388 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2392 = eq(T_2370, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2393 = or(UInt<1>("h01"), T_2392) @[RegMapper.scala 127:31]
    T_1572[16] <= T_2393 @[RegMapper.scala 127:18]
    node T_2395 = eq(T_2374, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2396 = or(UInt<1>("h01"), T_2395) @[RegMapper.scala 128:31]
    T_1580[16] <= T_2396 @[RegMapper.scala 128:18]
    node T_2398 = eq(T_2377, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2399 = or(UInt<1>("h01"), T_2398) @[RegMapper.scala 129:31]
    T_1588[16] <= T_2399 @[RegMapper.scala 129:18]
    node T_2401 = eq(T_2381, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2402 = or(UInt<1>("h01"), T_2401) @[RegMapper.scala 130:31]
    T_1596[16] <= T_2402 @[RegMapper.scala 130:18]
    node T_2403 = shl(T_1391, 24) @[RegMapper.scala 135:47]
    node T_2405 = not(UInt<32>("h00")) @[RegMapper.scala 135:58]
    node T_2406 = and(T_2403, T_2405) @[RegMapper.scala 135:55]
    node T_2407 = or(T_2367, T_2406) @[RegMapper.scala 135:35]
    node T_2408 = bits(T_1680, 39, 32) @[RegMapper.scala 120:29]
    node T_2410 = neq(T_2408, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2411 = bits(T_1680, 39, 32) @[RegMapper.scala 121:29]
    node T_2412 = not(T_2411) @[RegMapper.scala 121:45]
    node T_2414 = eq(T_2412, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2415 = bits(T_1727, 39, 32) @[RegMapper.scala 122:28]
    node T_2417 = neq(T_2415, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2418 = bits(T_1727, 39, 32) @[RegMapper.scala 123:28]
    node T_2419 = not(T_2418) @[RegMapper.scala 123:44]
    node T_2421 = eq(T_2419, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2422 = and(T_1556[17], T_2410) @[RegMapper.scala 125:69]
    node T_2423 = and(T_1604[17], T_2417) @[RegMapper.scala 125:91]
    node T_2426 = and(T_1564[17], T_2414) @[RegMapper.scala 126:62]
    node T_2427 = and(T_1612[17], T_2421) @[RegMapper.scala 126:84]
    node T_2428 = bits(T_1522.bits.data, 39, 32) @[RegMapper.scala 126:99]
    when T_2427 : @[RegField.scala 118:22]
      T_1400 <= T_2428 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2432 = eq(T_2410, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2433 = or(UInt<1>("h01"), T_2432) @[RegMapper.scala 127:31]
    T_1572[17] <= T_2433 @[RegMapper.scala 127:18]
    node T_2435 = eq(T_2414, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2436 = or(UInt<1>("h01"), T_2435) @[RegMapper.scala 128:31]
    T_1580[17] <= T_2436 @[RegMapper.scala 128:18]
    node T_2438 = eq(T_2417, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2439 = or(UInt<1>("h01"), T_2438) @[RegMapper.scala 129:31]
    T_1588[17] <= T_2439 @[RegMapper.scala 129:18]
    node T_2441 = eq(T_2421, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2442 = or(UInt<1>("h01"), T_2441) @[RegMapper.scala 130:31]
    T_1596[17] <= T_2442 @[RegMapper.scala 130:18]
    node T_2443 = shl(T_1392, 32) @[RegMapper.scala 135:47]
    node T_2445 = not(UInt<40>("h00")) @[RegMapper.scala 135:58]
    node T_2446 = and(T_2443, T_2445) @[RegMapper.scala 135:55]
    node T_2447 = or(T_2407, T_2446) @[RegMapper.scala 135:35]
    node T_2448 = bits(T_1680, 47, 40) @[RegMapper.scala 120:29]
    node T_2450 = neq(T_2448, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2451 = bits(T_1680, 47, 40) @[RegMapper.scala 121:29]
    node T_2452 = not(T_2451) @[RegMapper.scala 121:45]
    node T_2454 = eq(T_2452, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2455 = bits(T_1727, 47, 40) @[RegMapper.scala 122:28]
    node T_2457 = neq(T_2455, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2458 = bits(T_1727, 47, 40) @[RegMapper.scala 123:28]
    node T_2459 = not(T_2458) @[RegMapper.scala 123:44]
    node T_2461 = eq(T_2459, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2462 = and(T_1556[18], T_2450) @[RegMapper.scala 125:69]
    node T_2463 = and(T_1604[18], T_2457) @[RegMapper.scala 125:91]
    node T_2466 = and(T_1564[18], T_2454) @[RegMapper.scala 126:62]
    node T_2467 = and(T_1612[18], T_2461) @[RegMapper.scala 126:84]
    node T_2468 = bits(T_1522.bits.data, 47, 40) @[RegMapper.scala 126:99]
    when T_2467 : @[RegField.scala 118:22]
      T_1401 <= T_2468 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2472 = eq(T_2450, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2473 = or(UInt<1>("h01"), T_2472) @[RegMapper.scala 127:31]
    T_1572[18] <= T_2473 @[RegMapper.scala 127:18]
    node T_2475 = eq(T_2454, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2476 = or(UInt<1>("h01"), T_2475) @[RegMapper.scala 128:31]
    T_1580[18] <= T_2476 @[RegMapper.scala 128:18]
    node T_2478 = eq(T_2457, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2479 = or(UInt<1>("h01"), T_2478) @[RegMapper.scala 129:31]
    T_1588[18] <= T_2479 @[RegMapper.scala 129:18]
    node T_2481 = eq(T_2461, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2482 = or(UInt<1>("h01"), T_2481) @[RegMapper.scala 130:31]
    T_1596[18] <= T_2482 @[RegMapper.scala 130:18]
    node T_2483 = shl(T_1393, 40) @[RegMapper.scala 135:47]
    node T_2485 = not(UInt<48>("h00")) @[RegMapper.scala 135:58]
    node T_2486 = and(T_2483, T_2485) @[RegMapper.scala 135:55]
    node T_2487 = or(T_2447, T_2486) @[RegMapper.scala 135:35]
    node T_2488 = bits(T_1680, 55, 48) @[RegMapper.scala 120:29]
    node T_2490 = neq(T_2488, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2491 = bits(T_1680, 55, 48) @[RegMapper.scala 121:29]
    node T_2492 = not(T_2491) @[RegMapper.scala 121:45]
    node T_2494 = eq(T_2492, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2495 = bits(T_1727, 55, 48) @[RegMapper.scala 122:28]
    node T_2497 = neq(T_2495, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2498 = bits(T_1727, 55, 48) @[RegMapper.scala 123:28]
    node T_2499 = not(T_2498) @[RegMapper.scala 123:44]
    node T_2501 = eq(T_2499, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2502 = and(T_1556[19], T_2490) @[RegMapper.scala 125:69]
    node T_2503 = and(T_1604[19], T_2497) @[RegMapper.scala 125:91]
    node T_2506 = and(T_1564[19], T_2494) @[RegMapper.scala 126:62]
    node T_2507 = and(T_1612[19], T_2501) @[RegMapper.scala 126:84]
    node T_2508 = bits(T_1522.bits.data, 55, 48) @[RegMapper.scala 126:99]
    when T_2507 : @[RegField.scala 118:22]
      T_1402 <= T_2508 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2512 = eq(T_2490, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2513 = or(UInt<1>("h01"), T_2512) @[RegMapper.scala 127:31]
    T_1572[19] <= T_2513 @[RegMapper.scala 127:18]
    node T_2515 = eq(T_2494, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2516 = or(UInt<1>("h01"), T_2515) @[RegMapper.scala 128:31]
    T_1580[19] <= T_2516 @[RegMapper.scala 128:18]
    node T_2518 = eq(T_2497, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2519 = or(UInt<1>("h01"), T_2518) @[RegMapper.scala 129:31]
    T_1588[19] <= T_2519 @[RegMapper.scala 129:18]
    node T_2521 = eq(T_2501, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2522 = or(UInt<1>("h01"), T_2521) @[RegMapper.scala 130:31]
    T_1596[19] <= T_2522 @[RegMapper.scala 130:18]
    node T_2523 = shl(T_1394, 48) @[RegMapper.scala 135:47]
    node T_2525 = not(UInt<56>("h00")) @[RegMapper.scala 135:58]
    node T_2526 = and(T_2523, T_2525) @[RegMapper.scala 135:55]
    node T_2527 = or(T_2487, T_2526) @[RegMapper.scala 135:35]
    node T_2528 = bits(T_1680, 63, 56) @[RegMapper.scala 120:29]
    node T_2530 = neq(T_2528, UInt<1>("h00")) @[RegMapper.scala 120:44]
    node T_2531 = bits(T_1680, 63, 56) @[RegMapper.scala 121:29]
    node T_2532 = not(T_2531) @[RegMapper.scala 121:45]
    node T_2534 = eq(T_2532, UInt<1>("h00")) @[RegMapper.scala 121:45]
    node T_2535 = bits(T_1727, 63, 56) @[RegMapper.scala 122:28]
    node T_2537 = neq(T_2535, UInt<1>("h00")) @[RegMapper.scala 122:43]
    node T_2538 = bits(T_1727, 63, 56) @[RegMapper.scala 123:28]
    node T_2539 = not(T_2538) @[RegMapper.scala 123:44]
    node T_2541 = eq(T_2539, UInt<1>("h00")) @[RegMapper.scala 123:44]
    node T_2542 = and(T_1556[20], T_2530) @[RegMapper.scala 125:69]
    node T_2543 = and(T_1604[20], T_2537) @[RegMapper.scala 125:91]
    node T_2546 = and(T_1564[20], T_2534) @[RegMapper.scala 126:62]
    node T_2547 = and(T_1612[20], T_2541) @[RegMapper.scala 126:84]
    node T_2548 = bits(T_1522.bits.data, 63, 56) @[RegMapper.scala 126:99]
    when T_2547 : @[RegField.scala 118:22]
      T_1403 <= T_2548 @[RegField.scala 118:33]
      skip @[RegField.scala 118:22]
    node T_2552 = eq(T_2530, UInt<1>("h00")) @[RegMapper.scala 127:34]
    node T_2553 = or(UInt<1>("h01"), T_2552) @[RegMapper.scala 127:31]
    T_1572[20] <= T_2553 @[RegMapper.scala 127:18]
    node T_2555 = eq(T_2534, UInt<1>("h00")) @[RegMapper.scala 128:34]
    node T_2556 = or(UInt<1>("h01"), T_2555) @[RegMapper.scala 128:31]
    T_1580[20] <= T_2556 @[RegMapper.scala 128:18]
    node T_2558 = eq(T_2537, UInt<1>("h00")) @[RegMapper.scala 129:34]
    node T_2559 = or(UInt<1>("h01"), T_2558) @[RegMapper.scala 129:31]
    T_1588[20] <= T_2559 @[RegMapper.scala 129:18]
    node T_2561 = eq(T_2541, UInt<1>("h00")) @[RegMapper.scala 130:34]
    node T_2562 = or(UInt<1>("h01"), T_2561) @[RegMapper.scala 130:31]
    T_1596[20] <= T_2562 @[RegMapper.scala 130:18]
    node T_2563 = shl(T_1395, 56) @[RegMapper.scala 135:47]
    node T_2565 = not(UInt<64>("h00")) @[RegMapper.scala 135:58]
    node T_2566 = and(T_2563, T_2565) @[RegMapper.scala 135:55]
    node T_2567 = or(T_2527, T_2566) @[RegMapper.scala 135:35]
    node T_2569 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 139:68]
    node T_2570 = and(T_1572[4], T_1572[3]) @[RegMapper.scala 139:98]
    node T_2571 = and(T_2570, T_1572[2]) @[RegMapper.scala 139:98]
    node T_2572 = and(T_2571, T_1572[1]) @[RegMapper.scala 139:98]
    node T_2573 = and(T_2572, T_1572[0]) @[RegMapper.scala 139:98]
    node T_2574 = and(T_2573, UInt<1>("h01")) @[RegMapper.scala 139:98]
    node T_2575 = or(T_2569, T_2574) @[RegMapper.scala 139:82]
    node T_2577 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 139:68]
    node T_2578 = and(T_1572[20], T_1572[19]) @[RegMapper.scala 139:98]
    node T_2579 = and(T_2578, T_1572[18]) @[RegMapper.scala 139:98]
    node T_2580 = and(T_2579, T_1572[17]) @[RegMapper.scala 139:98]
    node T_2581 = and(T_2580, T_1572[16]) @[RegMapper.scala 139:98]
    node T_2582 = and(T_2581, T_1572[15]) @[RegMapper.scala 139:98]
    node T_2583 = and(T_2582, T_1572[14]) @[RegMapper.scala 139:98]
    node T_2584 = and(T_2583, T_1572[13]) @[RegMapper.scala 139:98]
    node T_2585 = and(T_2584, UInt<1>("h01")) @[RegMapper.scala 139:98]
    node T_2586 = or(T_2577, T_2585) @[RegMapper.scala 139:82]
    node T_2588 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 139:68]
    node T_2589 = and(T_1572[12], T_1572[11]) @[RegMapper.scala 139:98]
    node T_2590 = and(T_2589, T_1572[10]) @[RegMapper.scala 139:98]
    node T_2591 = and(T_2590, T_1572[9]) @[RegMapper.scala 139:98]
    node T_2592 = and(T_2591, T_1572[8]) @[RegMapper.scala 139:98]
    node T_2593 = and(T_2592, T_1572[7]) @[RegMapper.scala 139:98]
    node T_2594 = and(T_2593, T_1572[6]) @[RegMapper.scala 139:98]
    node T_2595 = and(T_2594, T_1572[5]) @[RegMapper.scala 139:98]
    node T_2596 = and(T_2595, UInt<1>("h01")) @[RegMapper.scala 139:98]
    node T_2597 = or(T_2588, T_2596) @[RegMapper.scala 139:82]
    node T_2599 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 139:68]
    node T_2600 = or(T_2599, UInt<1>("h01")) @[RegMapper.scala 139:82]
    wire T_2606 : UInt<1>[4] @[RegMapper.scala 139:24]
    T_2606 is invalid @[RegMapper.scala 139:24]
    T_2606[0] <= T_2575 @[RegMapper.scala 139:24]
    T_2606[1] <= T_2586 @[RegMapper.scala 139:24]
    T_2606[2] <= T_2597 @[RegMapper.scala 139:24]
    T_2606[3] <= T_2600 @[RegMapper.scala 139:24]
    node T_2609 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 140:68]
    node T_2610 = and(T_1580[4], T_1580[3]) @[RegMapper.scala 140:98]
    node T_2611 = and(T_2610, T_1580[2]) @[RegMapper.scala 140:98]
    node T_2612 = and(T_2611, T_1580[1]) @[RegMapper.scala 140:98]
    node T_2613 = and(T_2612, T_1580[0]) @[RegMapper.scala 140:98]
    node T_2614 = and(T_2613, UInt<1>("h01")) @[RegMapper.scala 140:98]
    node T_2615 = or(T_2609, T_2614) @[RegMapper.scala 140:82]
    node T_2617 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 140:68]
    node T_2618 = and(T_1580[20], T_1580[19]) @[RegMapper.scala 140:98]
    node T_2619 = and(T_2618, T_1580[18]) @[RegMapper.scala 140:98]
    node T_2620 = and(T_2619, T_1580[17]) @[RegMapper.scala 140:98]
    node T_2621 = and(T_2620, T_1580[16]) @[RegMapper.scala 140:98]
    node T_2622 = and(T_2621, T_1580[15]) @[RegMapper.scala 140:98]
    node T_2623 = and(T_2622, T_1580[14]) @[RegMapper.scala 140:98]
    node T_2624 = and(T_2623, T_1580[13]) @[RegMapper.scala 140:98]
    node T_2625 = and(T_2624, UInt<1>("h01")) @[RegMapper.scala 140:98]
    node T_2626 = or(T_2617, T_2625) @[RegMapper.scala 140:82]
    node T_2628 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 140:68]
    node T_2629 = and(T_1580[12], T_1580[11]) @[RegMapper.scala 140:98]
    node T_2630 = and(T_2629, T_1580[10]) @[RegMapper.scala 140:98]
    node T_2631 = and(T_2630, T_1580[9]) @[RegMapper.scala 140:98]
    node T_2632 = and(T_2631, T_1580[8]) @[RegMapper.scala 140:98]
    node T_2633 = and(T_2632, T_1580[7]) @[RegMapper.scala 140:98]
    node T_2634 = and(T_2633, T_1580[6]) @[RegMapper.scala 140:98]
    node T_2635 = and(T_2634, T_1580[5]) @[RegMapper.scala 140:98]
    node T_2636 = and(T_2635, UInt<1>("h01")) @[RegMapper.scala 140:98]
    node T_2637 = or(T_2628, T_2636) @[RegMapper.scala 140:82]
    node T_2639 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 140:68]
    node T_2640 = or(T_2639, UInt<1>("h01")) @[RegMapper.scala 140:82]
    wire T_2646 : UInt<1>[4] @[RegMapper.scala 140:24]
    T_2646 is invalid @[RegMapper.scala 140:24]
    T_2646[0] <= T_2615 @[RegMapper.scala 140:24]
    T_2646[1] <= T_2626 @[RegMapper.scala 140:24]
    T_2646[2] <= T_2637 @[RegMapper.scala 140:24]
    T_2646[3] <= T_2640 @[RegMapper.scala 140:24]
    node T_2649 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 141:68]
    node T_2650 = and(T_1588[4], T_1588[3]) @[RegMapper.scala 141:98]
    node T_2651 = and(T_2650, T_1588[2]) @[RegMapper.scala 141:98]
    node T_2652 = and(T_2651, T_1588[1]) @[RegMapper.scala 141:98]
    node T_2653 = and(T_2652, T_1588[0]) @[RegMapper.scala 141:98]
    node T_2654 = and(T_2653, UInt<1>("h01")) @[RegMapper.scala 141:98]
    node T_2655 = or(T_2649, T_2654) @[RegMapper.scala 141:82]
    node T_2657 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 141:68]
    node T_2658 = and(T_1588[20], T_1588[19]) @[RegMapper.scala 141:98]
    node T_2659 = and(T_2658, T_1588[18]) @[RegMapper.scala 141:98]
    node T_2660 = and(T_2659, T_1588[17]) @[RegMapper.scala 141:98]
    node T_2661 = and(T_2660, T_1588[16]) @[RegMapper.scala 141:98]
    node T_2662 = and(T_2661, T_1588[15]) @[RegMapper.scala 141:98]
    node T_2663 = and(T_2662, T_1588[14]) @[RegMapper.scala 141:98]
    node T_2664 = and(T_2663, T_1588[13]) @[RegMapper.scala 141:98]
    node T_2665 = and(T_2664, UInt<1>("h01")) @[RegMapper.scala 141:98]
    node T_2666 = or(T_2657, T_2665) @[RegMapper.scala 141:82]
    node T_2668 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 141:68]
    node T_2669 = and(T_1588[12], T_1588[11]) @[RegMapper.scala 141:98]
    node T_2670 = and(T_2669, T_1588[10]) @[RegMapper.scala 141:98]
    node T_2671 = and(T_2670, T_1588[9]) @[RegMapper.scala 141:98]
    node T_2672 = and(T_2671, T_1588[8]) @[RegMapper.scala 141:98]
    node T_2673 = and(T_2672, T_1588[7]) @[RegMapper.scala 141:98]
    node T_2674 = and(T_2673, T_1588[6]) @[RegMapper.scala 141:98]
    node T_2675 = and(T_2674, T_1588[5]) @[RegMapper.scala 141:98]
    node T_2676 = and(T_2675, UInt<1>("h01")) @[RegMapper.scala 141:98]
    node T_2677 = or(T_2668, T_2676) @[RegMapper.scala 141:82]
    node T_2679 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 141:68]
    node T_2680 = or(T_2679, UInt<1>("h01")) @[RegMapper.scala 141:82]
    wire T_2686 : UInt<1>[4] @[RegMapper.scala 141:24]
    T_2686 is invalid @[RegMapper.scala 141:24]
    T_2686[0] <= T_2655 @[RegMapper.scala 141:24]
    T_2686[1] <= T_2666 @[RegMapper.scala 141:24]
    T_2686[2] <= T_2677 @[RegMapper.scala 141:24]
    T_2686[3] <= T_2680 @[RegMapper.scala 141:24]
    node T_2689 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 142:68]
    node T_2690 = and(T_1596[4], T_1596[3]) @[RegMapper.scala 142:98]
    node T_2691 = and(T_2690, T_1596[2]) @[RegMapper.scala 142:98]
    node T_2692 = and(T_2691, T_1596[1]) @[RegMapper.scala 142:98]
    node T_2693 = and(T_2692, T_1596[0]) @[RegMapper.scala 142:98]
    node T_2694 = and(T_2693, UInt<1>("h01")) @[RegMapper.scala 142:98]
    node T_2695 = or(T_2689, T_2694) @[RegMapper.scala 142:82]
    node T_2697 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 142:68]
    node T_2698 = and(T_1596[20], T_1596[19]) @[RegMapper.scala 142:98]
    node T_2699 = and(T_2698, T_1596[18]) @[RegMapper.scala 142:98]
    node T_2700 = and(T_2699, T_1596[17]) @[RegMapper.scala 142:98]
    node T_2701 = and(T_2700, T_1596[16]) @[RegMapper.scala 142:98]
    node T_2702 = and(T_2701, T_1596[15]) @[RegMapper.scala 142:98]
    node T_2703 = and(T_2702, T_1596[14]) @[RegMapper.scala 142:98]
    node T_2704 = and(T_2703, T_1596[13]) @[RegMapper.scala 142:98]
    node T_2705 = and(T_2704, UInt<1>("h01")) @[RegMapper.scala 142:98]
    node T_2706 = or(T_2697, T_2705) @[RegMapper.scala 142:82]
    node T_2708 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 142:68]
    node T_2709 = and(T_1596[12], T_1596[11]) @[RegMapper.scala 142:98]
    node T_2710 = and(T_2709, T_1596[10]) @[RegMapper.scala 142:98]
    node T_2711 = and(T_2710, T_1596[9]) @[RegMapper.scala 142:98]
    node T_2712 = and(T_2711, T_1596[8]) @[RegMapper.scala 142:98]
    node T_2713 = and(T_2712, T_1596[7]) @[RegMapper.scala 142:98]
    node T_2714 = and(T_2713, T_1596[6]) @[RegMapper.scala 142:98]
    node T_2715 = and(T_2714, T_1596[5]) @[RegMapper.scala 142:98]
    node T_2716 = and(T_2715, UInt<1>("h01")) @[RegMapper.scala 142:98]
    node T_2717 = or(T_2708, T_2716) @[RegMapper.scala 142:82]
    node T_2719 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegMapper.scala 142:68]
    node T_2720 = or(T_2719, UInt<1>("h01")) @[RegMapper.scala 142:82]
    wire T_2726 : UInt<1>[4] @[RegMapper.scala 142:24]
    T_2726 is invalid @[RegMapper.scala 142:24]
    T_2726[0] <= T_2695 @[RegMapper.scala 142:24]
    T_2726[1] <= T_2706 @[RegMapper.scala 142:24]
    T_2726[2] <= T_2717 @[RegMapper.scala 142:24]
    T_2726[3] <= T_2720 @[RegMapper.scala 142:24]
    node T_2728 = bits(T_1522.bits.index, 0, 0) @[RegMapper.scala 72:29]
    node T_2729 = bits(T_1522.bits.index, 1, 1) @[RegMapper.scala 72:29]
    node T_2730 = bits(T_1522.bits.index, 2, 2) @[RegMapper.scala 72:29]
    node T_2731 = bits(T_1522.bits.index, 3, 3) @[RegMapper.scala 72:29]
    node T_2732 = bits(T_1522.bits.index, 4, 4) @[RegMapper.scala 72:29]
    node T_2733 = bits(T_1522.bits.index, 5, 5) @[RegMapper.scala 72:29]
    node T_2734 = bits(T_1522.bits.index, 6, 6) @[RegMapper.scala 72:29]
    node T_2735 = bits(T_1522.bits.index, 7, 7) @[RegMapper.scala 72:29]
    node T_2736 = bits(T_1522.bits.index, 8, 8) @[RegMapper.scala 72:29]
    node T_2737 = bits(T_1522.bits.index, 9, 9) @[RegMapper.scala 72:29]
    node T_2738 = bits(T_1522.bits.index, 10, 10) @[RegMapper.scala 72:29]
    node T_2739 = bits(T_1522.bits.index, 11, 11) @[RegMapper.scala 72:29]
    node T_2740 = bits(T_1522.bits.index, 12, 12) @[RegMapper.scala 72:29]
    node T_2741 = cat(T_2739, T_2728) @[Cat.scala 20:58]
    node T_2742 = bits(T_1522.bits.index, 0, 0) @[RegMapper.scala 72:29]
    node T_2743 = bits(T_1522.bits.index, 1, 1) @[RegMapper.scala 72:29]
    node T_2744 = bits(T_1522.bits.index, 2, 2) @[RegMapper.scala 72:29]
    node T_2745 = bits(T_1522.bits.index, 3, 3) @[RegMapper.scala 72:29]
    node T_2746 = bits(T_1522.bits.index, 4, 4) @[RegMapper.scala 72:29]
    node T_2747 = bits(T_1522.bits.index, 5, 5) @[RegMapper.scala 72:29]
    node T_2748 = bits(T_1522.bits.index, 6, 6) @[RegMapper.scala 72:29]
    node T_2749 = bits(T_1522.bits.index, 7, 7) @[RegMapper.scala 72:29]
    node T_2750 = bits(T_1522.bits.index, 8, 8) @[RegMapper.scala 72:29]
    node T_2751 = bits(T_1522.bits.index, 9, 9) @[RegMapper.scala 72:29]
    node T_2752 = bits(T_1522.bits.index, 10, 10) @[RegMapper.scala 72:29]
    node T_2753 = bits(T_1522.bits.index, 11, 11) @[RegMapper.scala 72:29]
    node T_2754 = bits(T_1522.bits.index, 12, 12) @[RegMapper.scala 72:29]
    node T_2755 = cat(T_2753, T_2742) @[Cat.scala 20:58]
    node T_2756 = mux(T_1522.bits.read, T_2606[T_2741], T_2646[T_2741]) @[RegMapper.scala 145:21]
    node T_2757 = mux(T_1522.bits.read, T_2686[T_2755], T_2726[T_2755]) @[RegMapper.scala 146:21]
    node T_2758 = and(T_1522.ready, T_2756) @[RegMapper.scala 149:32]
    T_1432.ready <= T_2758 @[RegMapper.scala 149:17]
    node T_2759 = and(T_1432.valid, T_2756) @[RegMapper.scala 150:32]
    T_1522.valid <= T_2759 @[RegMapper.scala 150:17]
    node T_2760 = and(T_1490.ready, T_2757) @[RegMapper.scala 151:32]
    T_1522.ready <= T_2760 @[RegMapper.scala 151:17]
    node T_2761 = and(T_1522.valid, T_2757) @[RegMapper.scala 152:32]
    T_1490.valid <= T_2761 @[RegMapper.scala 152:17]
    node T_2763 = dshl(UInt<1>("h01"), T_2741) @[OneHot.scala 44:15]
    node T_2764 = cat(UInt<1>("h01"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_2765 = cat(UInt<1>("h01"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_2766 = cat(T_2765, T_2764) @[Cat.scala 20:58]
    node T_2767 = and(T_2763, T_2766) @[RegMapper.scala 155:37]
    node T_2769 = dshl(UInt<1>("h01"), T_2755) @[OneHot.scala 44:15]
    node T_2770 = cat(UInt<1>("h01"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_2771 = cat(UInt<1>("h01"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_2772 = cat(T_2771, T_2770) @[Cat.scala 20:58]
    node T_2773 = and(T_2769, T_2772) @[RegMapper.scala 156:37]
    node T_2774 = and(T_1432.valid, T_1522.ready) @[RegMapper.scala 160:31]
    node T_2775 = and(T_2774, T_1522.bits.read) @[RegMapper.scala 160:46]
    node T_2776 = bits(T_2767, 0, 0) @[RegMapper.scala 160:77]
    node T_2777 = and(T_2775, T_2776) @[RegMapper.scala 160:66]
    node T_2778 = and(T_1432.valid, T_1522.ready) @[RegMapper.scala 161:31]
    node T_2780 = eq(T_1522.bits.read, UInt<1>("h00")) @[RegMapper.scala 161:49]
    node T_2781 = and(T_2778, T_2780) @[RegMapper.scala 161:46]
    node T_2782 = bits(T_2767, 0, 0) @[RegMapper.scala 161:77]
    node T_2783 = and(T_2781, T_2782) @[RegMapper.scala 161:66]
    node T_2784 = and(T_1522.valid, T_1490.ready) @[RegMapper.scala 162:33]
    node T_2785 = and(T_2784, T_1522.bits.read) @[RegMapper.scala 162:46]
    node T_2786 = bits(T_2773, 0, 0) @[RegMapper.scala 162:77]
    node T_2787 = and(T_2785, T_2786) @[RegMapper.scala 162:66]
    node T_2788 = and(T_1522.valid, T_1490.ready) @[RegMapper.scala 163:33]
    node T_2790 = eq(T_1522.bits.read, UInt<1>("h00")) @[RegMapper.scala 163:49]
    node T_2791 = and(T_2788, T_2790) @[RegMapper.scala 163:46]
    node T_2792 = bits(T_2773, 0, 0) @[RegMapper.scala 163:77]
    node T_2793 = and(T_2791, T_2792) @[RegMapper.scala 163:66]
    node T_2794 = and(T_1432.valid, T_1522.ready) @[RegMapper.scala 160:31]
    node T_2795 = and(T_2794, T_1522.bits.read) @[RegMapper.scala 160:46]
    node T_2796 = bits(T_2767, 1, 1) @[RegMapper.scala 160:77]
    node T_2797 = and(T_2795, T_2796) @[RegMapper.scala 160:66]
    node T_2798 = and(T_1432.valid, T_1522.ready) @[RegMapper.scala 161:31]
    node T_2800 = eq(T_1522.bits.read, UInt<1>("h00")) @[RegMapper.scala 161:49]
    node T_2801 = and(T_2798, T_2800) @[RegMapper.scala 161:46]
    node T_2802 = bits(T_2767, 1, 1) @[RegMapper.scala 161:77]
    node T_2803 = and(T_2801, T_2802) @[RegMapper.scala 161:66]
    node T_2804 = and(T_1522.valid, T_1490.ready) @[RegMapper.scala 162:33]
    node T_2805 = and(T_2804, T_1522.bits.read) @[RegMapper.scala 162:46]
    node T_2806 = bits(T_2773, 1, 1) @[RegMapper.scala 162:77]
    node T_2807 = and(T_2805, T_2806) @[RegMapper.scala 162:66]
    node T_2808 = and(T_1522.valid, T_1490.ready) @[RegMapper.scala 163:33]
    node T_2810 = eq(T_1522.bits.read, UInt<1>("h00")) @[RegMapper.scala 163:49]
    node T_2811 = and(T_2808, T_2810) @[RegMapper.scala 163:46]
    node T_2812 = bits(T_2773, 1, 1) @[RegMapper.scala 163:77]
    node T_2813 = and(T_2811, T_2812) @[RegMapper.scala 163:66]
    node T_2814 = and(T_1432.valid, T_1522.ready) @[RegMapper.scala 160:31]
    node T_2815 = and(T_2814, T_1522.bits.read) @[RegMapper.scala 160:46]
    node T_2816 = bits(T_2767, 2, 2) @[RegMapper.scala 160:77]
    node T_2817 = and(T_2815, T_2816) @[RegMapper.scala 160:66]
    node T_2818 = and(T_1432.valid, T_1522.ready) @[RegMapper.scala 161:31]
    node T_2820 = eq(T_1522.bits.read, UInt<1>("h00")) @[RegMapper.scala 161:49]
    node T_2821 = and(T_2818, T_2820) @[RegMapper.scala 161:46]
    node T_2822 = bits(T_2767, 2, 2) @[RegMapper.scala 161:77]
    node T_2823 = and(T_2821, T_2822) @[RegMapper.scala 161:66]
    node T_2824 = and(T_1522.valid, T_1490.ready) @[RegMapper.scala 162:33]
    node T_2825 = and(T_2824, T_1522.bits.read) @[RegMapper.scala 162:46]
    node T_2826 = bits(T_2773, 2, 2) @[RegMapper.scala 162:77]
    node T_2827 = and(T_2825, T_2826) @[RegMapper.scala 162:66]
    node T_2828 = and(T_1522.valid, T_1490.ready) @[RegMapper.scala 163:33]
    node T_2830 = eq(T_1522.bits.read, UInt<1>("h00")) @[RegMapper.scala 163:49]
    node T_2831 = and(T_2828, T_2830) @[RegMapper.scala 163:46]
    node T_2832 = bits(T_2773, 2, 2) @[RegMapper.scala 163:77]
    node T_2833 = and(T_2831, T_2832) @[RegMapper.scala 163:66]
    node T_2834 = and(T_1432.valid, T_1522.ready) @[RegMapper.scala 160:31]
    node T_2835 = and(T_2834, T_1522.bits.read) @[RegMapper.scala 160:46]
    node T_2836 = bits(T_2767, 3, 3) @[RegMapper.scala 160:77]
    node T_2837 = and(T_2835, T_2836) @[RegMapper.scala 160:66]
    node T_2838 = and(T_1432.valid, T_1522.ready) @[RegMapper.scala 161:31]
    node T_2840 = eq(T_1522.bits.read, UInt<1>("h00")) @[RegMapper.scala 161:49]
    node T_2841 = and(T_2838, T_2840) @[RegMapper.scala 161:46]
    node T_2842 = bits(T_2767, 3, 3) @[RegMapper.scala 161:77]
    node T_2843 = and(T_2841, T_2842) @[RegMapper.scala 161:66]
    node T_2844 = and(T_1522.valid, T_1490.ready) @[RegMapper.scala 162:33]
    node T_2845 = and(T_2844, T_1522.bits.read) @[RegMapper.scala 162:46]
    node T_2846 = bits(T_2773, 3, 3) @[RegMapper.scala 162:77]
    node T_2847 = and(T_2845, T_2846) @[RegMapper.scala 162:66]
    node T_2848 = and(T_1522.valid, T_1490.ready) @[RegMapper.scala 163:33]
    node T_2850 = eq(T_1522.bits.read, UInt<1>("h00")) @[RegMapper.scala 163:49]
    node T_2851 = and(T_2848, T_2850) @[RegMapper.scala 163:46]
    node T_2852 = bits(T_2773, 3, 3) @[RegMapper.scala 163:77]
    node T_2853 = and(T_2851, T_2852) @[RegMapper.scala 163:66]
    node T_2854 = and(T_2777, T_1572[4]) @[RegMapper.scala 169:66]
    node T_2855 = and(T_2854, T_1572[3]) @[RegMapper.scala 169:66]
    node T_2856 = and(T_2855, T_1572[2]) @[RegMapper.scala 169:66]
    node T_2857 = and(T_2856, T_1572[1]) @[RegMapper.scala 169:66]
    node T_2858 = and(T_2857, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[0] <= T_2858 @[RegMapper.scala 169:18]
    node T_2859 = and(T_2783, T_1580[4]) @[RegMapper.scala 170:66]
    node T_2860 = and(T_2859, T_1580[3]) @[RegMapper.scala 170:66]
    node T_2861 = and(T_2860, T_1580[2]) @[RegMapper.scala 170:66]
    node T_2862 = and(T_2861, T_1580[1]) @[RegMapper.scala 170:66]
    node T_2863 = and(T_2862, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[0] <= T_2863 @[RegMapper.scala 170:18]
    node T_2864 = and(T_2787, T_1588[4]) @[RegMapper.scala 171:66]
    node T_2865 = and(T_2864, T_1588[3]) @[RegMapper.scala 171:66]
    node T_2866 = and(T_2865, T_1588[2]) @[RegMapper.scala 171:66]
    node T_2867 = and(T_2866, T_1588[1]) @[RegMapper.scala 171:66]
    node T_2868 = and(T_2867, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[0] <= T_2868 @[RegMapper.scala 171:18]
    node T_2869 = and(T_2793, T_1596[4]) @[RegMapper.scala 172:66]
    node T_2870 = and(T_2869, T_1596[3]) @[RegMapper.scala 172:66]
    node T_2871 = and(T_2870, T_1596[2]) @[RegMapper.scala 172:66]
    node T_2872 = and(T_2871, T_1596[1]) @[RegMapper.scala 172:66]
    node T_2873 = and(T_2872, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[0] <= T_2873 @[RegMapper.scala 172:18]
    node T_2874 = and(T_2777, T_1572[4]) @[RegMapper.scala 169:66]
    node T_2875 = and(T_2874, T_1572[3]) @[RegMapper.scala 169:66]
    node T_2876 = and(T_2875, T_1572[2]) @[RegMapper.scala 169:66]
    node T_2877 = and(T_2876, T_1572[0]) @[RegMapper.scala 169:66]
    node T_2878 = and(T_2877, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[1] <= T_2878 @[RegMapper.scala 169:18]
    node T_2879 = and(T_2783, T_1580[4]) @[RegMapper.scala 170:66]
    node T_2880 = and(T_2879, T_1580[3]) @[RegMapper.scala 170:66]
    node T_2881 = and(T_2880, T_1580[2]) @[RegMapper.scala 170:66]
    node T_2882 = and(T_2881, T_1580[0]) @[RegMapper.scala 170:66]
    node T_2883 = and(T_2882, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[1] <= T_2883 @[RegMapper.scala 170:18]
    node T_2884 = and(T_2787, T_1588[4]) @[RegMapper.scala 171:66]
    node T_2885 = and(T_2884, T_1588[3]) @[RegMapper.scala 171:66]
    node T_2886 = and(T_2885, T_1588[2]) @[RegMapper.scala 171:66]
    node T_2887 = and(T_2886, T_1588[0]) @[RegMapper.scala 171:66]
    node T_2888 = and(T_2887, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[1] <= T_2888 @[RegMapper.scala 171:18]
    node T_2889 = and(T_2793, T_1596[4]) @[RegMapper.scala 172:66]
    node T_2890 = and(T_2889, T_1596[3]) @[RegMapper.scala 172:66]
    node T_2891 = and(T_2890, T_1596[2]) @[RegMapper.scala 172:66]
    node T_2892 = and(T_2891, T_1596[0]) @[RegMapper.scala 172:66]
    node T_2893 = and(T_2892, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[1] <= T_2893 @[RegMapper.scala 172:18]
    node T_2894 = and(T_2777, T_1572[4]) @[RegMapper.scala 169:66]
    node T_2895 = and(T_2894, T_1572[3]) @[RegMapper.scala 169:66]
    node T_2896 = and(T_2895, T_1572[1]) @[RegMapper.scala 169:66]
    node T_2897 = and(T_2896, T_1572[0]) @[RegMapper.scala 169:66]
    node T_2898 = and(T_2897, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[2] <= T_2898 @[RegMapper.scala 169:18]
    node T_2899 = and(T_2783, T_1580[4]) @[RegMapper.scala 170:66]
    node T_2900 = and(T_2899, T_1580[3]) @[RegMapper.scala 170:66]
    node T_2901 = and(T_2900, T_1580[1]) @[RegMapper.scala 170:66]
    node T_2902 = and(T_2901, T_1580[0]) @[RegMapper.scala 170:66]
    node T_2903 = and(T_2902, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[2] <= T_2903 @[RegMapper.scala 170:18]
    node T_2904 = and(T_2787, T_1588[4]) @[RegMapper.scala 171:66]
    node T_2905 = and(T_2904, T_1588[3]) @[RegMapper.scala 171:66]
    node T_2906 = and(T_2905, T_1588[1]) @[RegMapper.scala 171:66]
    node T_2907 = and(T_2906, T_1588[0]) @[RegMapper.scala 171:66]
    node T_2908 = and(T_2907, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[2] <= T_2908 @[RegMapper.scala 171:18]
    node T_2909 = and(T_2793, T_1596[4]) @[RegMapper.scala 172:66]
    node T_2910 = and(T_2909, T_1596[3]) @[RegMapper.scala 172:66]
    node T_2911 = and(T_2910, T_1596[1]) @[RegMapper.scala 172:66]
    node T_2912 = and(T_2911, T_1596[0]) @[RegMapper.scala 172:66]
    node T_2913 = and(T_2912, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[2] <= T_2913 @[RegMapper.scala 172:18]
    node T_2914 = and(T_2777, T_1572[4]) @[RegMapper.scala 169:66]
    node T_2915 = and(T_2914, T_1572[2]) @[RegMapper.scala 169:66]
    node T_2916 = and(T_2915, T_1572[1]) @[RegMapper.scala 169:66]
    node T_2917 = and(T_2916, T_1572[0]) @[RegMapper.scala 169:66]
    node T_2918 = and(T_2917, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[3] <= T_2918 @[RegMapper.scala 169:18]
    node T_2919 = and(T_2783, T_1580[4]) @[RegMapper.scala 170:66]
    node T_2920 = and(T_2919, T_1580[2]) @[RegMapper.scala 170:66]
    node T_2921 = and(T_2920, T_1580[1]) @[RegMapper.scala 170:66]
    node T_2922 = and(T_2921, T_1580[0]) @[RegMapper.scala 170:66]
    node T_2923 = and(T_2922, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[3] <= T_2923 @[RegMapper.scala 170:18]
    node T_2924 = and(T_2787, T_1588[4]) @[RegMapper.scala 171:66]
    node T_2925 = and(T_2924, T_1588[2]) @[RegMapper.scala 171:66]
    node T_2926 = and(T_2925, T_1588[1]) @[RegMapper.scala 171:66]
    node T_2927 = and(T_2926, T_1588[0]) @[RegMapper.scala 171:66]
    node T_2928 = and(T_2927, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[3] <= T_2928 @[RegMapper.scala 171:18]
    node T_2929 = and(T_2793, T_1596[4]) @[RegMapper.scala 172:66]
    node T_2930 = and(T_2929, T_1596[2]) @[RegMapper.scala 172:66]
    node T_2931 = and(T_2930, T_1596[1]) @[RegMapper.scala 172:66]
    node T_2932 = and(T_2931, T_1596[0]) @[RegMapper.scala 172:66]
    node T_2933 = and(T_2932, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[3] <= T_2933 @[RegMapper.scala 172:18]
    node T_2934 = and(T_2777, T_1572[3]) @[RegMapper.scala 169:66]
    node T_2935 = and(T_2934, T_1572[2]) @[RegMapper.scala 169:66]
    node T_2936 = and(T_2935, T_1572[1]) @[RegMapper.scala 169:66]
    node T_2937 = and(T_2936, T_1572[0]) @[RegMapper.scala 169:66]
    node T_2938 = and(T_2937, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[4] <= T_2938 @[RegMapper.scala 169:18]
    node T_2939 = and(T_2783, T_1580[3]) @[RegMapper.scala 170:66]
    node T_2940 = and(T_2939, T_1580[2]) @[RegMapper.scala 170:66]
    node T_2941 = and(T_2940, T_1580[1]) @[RegMapper.scala 170:66]
    node T_2942 = and(T_2941, T_1580[0]) @[RegMapper.scala 170:66]
    node T_2943 = and(T_2942, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[4] <= T_2943 @[RegMapper.scala 170:18]
    node T_2944 = and(T_2787, T_1588[3]) @[RegMapper.scala 171:66]
    node T_2945 = and(T_2944, T_1588[2]) @[RegMapper.scala 171:66]
    node T_2946 = and(T_2945, T_1588[1]) @[RegMapper.scala 171:66]
    node T_2947 = and(T_2946, T_1588[0]) @[RegMapper.scala 171:66]
    node T_2948 = and(T_2947, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[4] <= T_2948 @[RegMapper.scala 171:18]
    node T_2949 = and(T_2793, T_1596[3]) @[RegMapper.scala 172:66]
    node T_2950 = and(T_2949, T_1596[2]) @[RegMapper.scala 172:66]
    node T_2951 = and(T_2950, T_1596[1]) @[RegMapper.scala 172:66]
    node T_2952 = and(T_2951, T_1596[0]) @[RegMapper.scala 172:66]
    node T_2953 = and(T_2952, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[4] <= T_2953 @[RegMapper.scala 172:18]
    node T_2954 = and(T_2817, T_1572[12]) @[RegMapper.scala 169:66]
    node T_2955 = and(T_2954, T_1572[11]) @[RegMapper.scala 169:66]
    node T_2956 = and(T_2955, T_1572[10]) @[RegMapper.scala 169:66]
    node T_2957 = and(T_2956, T_1572[9]) @[RegMapper.scala 169:66]
    node T_2958 = and(T_2957, T_1572[8]) @[RegMapper.scala 169:66]
    node T_2959 = and(T_2958, T_1572[7]) @[RegMapper.scala 169:66]
    node T_2960 = and(T_2959, T_1572[6]) @[RegMapper.scala 169:66]
    node T_2961 = and(T_2960, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[5] <= T_2961 @[RegMapper.scala 169:18]
    node T_2962 = and(T_2823, T_1580[12]) @[RegMapper.scala 170:66]
    node T_2963 = and(T_2962, T_1580[11]) @[RegMapper.scala 170:66]
    node T_2964 = and(T_2963, T_1580[10]) @[RegMapper.scala 170:66]
    node T_2965 = and(T_2964, T_1580[9]) @[RegMapper.scala 170:66]
    node T_2966 = and(T_2965, T_1580[8]) @[RegMapper.scala 170:66]
    node T_2967 = and(T_2966, T_1580[7]) @[RegMapper.scala 170:66]
    node T_2968 = and(T_2967, T_1580[6]) @[RegMapper.scala 170:66]
    node T_2969 = and(T_2968, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[5] <= T_2969 @[RegMapper.scala 170:18]
    node T_2970 = and(T_2827, T_1588[12]) @[RegMapper.scala 171:66]
    node T_2971 = and(T_2970, T_1588[11]) @[RegMapper.scala 171:66]
    node T_2972 = and(T_2971, T_1588[10]) @[RegMapper.scala 171:66]
    node T_2973 = and(T_2972, T_1588[9]) @[RegMapper.scala 171:66]
    node T_2974 = and(T_2973, T_1588[8]) @[RegMapper.scala 171:66]
    node T_2975 = and(T_2974, T_1588[7]) @[RegMapper.scala 171:66]
    node T_2976 = and(T_2975, T_1588[6]) @[RegMapper.scala 171:66]
    node T_2977 = and(T_2976, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[5] <= T_2977 @[RegMapper.scala 171:18]
    node T_2978 = and(T_2833, T_1596[12]) @[RegMapper.scala 172:66]
    node T_2979 = and(T_2978, T_1596[11]) @[RegMapper.scala 172:66]
    node T_2980 = and(T_2979, T_1596[10]) @[RegMapper.scala 172:66]
    node T_2981 = and(T_2980, T_1596[9]) @[RegMapper.scala 172:66]
    node T_2982 = and(T_2981, T_1596[8]) @[RegMapper.scala 172:66]
    node T_2983 = and(T_2982, T_1596[7]) @[RegMapper.scala 172:66]
    node T_2984 = and(T_2983, T_1596[6]) @[RegMapper.scala 172:66]
    node T_2985 = and(T_2984, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[5] <= T_2985 @[RegMapper.scala 172:18]
    node T_2986 = and(T_2817, T_1572[12]) @[RegMapper.scala 169:66]
    node T_2987 = and(T_2986, T_1572[11]) @[RegMapper.scala 169:66]
    node T_2988 = and(T_2987, T_1572[10]) @[RegMapper.scala 169:66]
    node T_2989 = and(T_2988, T_1572[9]) @[RegMapper.scala 169:66]
    node T_2990 = and(T_2989, T_1572[8]) @[RegMapper.scala 169:66]
    node T_2991 = and(T_2990, T_1572[7]) @[RegMapper.scala 169:66]
    node T_2992 = and(T_2991, T_1572[5]) @[RegMapper.scala 169:66]
    node T_2993 = and(T_2992, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[6] <= T_2993 @[RegMapper.scala 169:18]
    node T_2994 = and(T_2823, T_1580[12]) @[RegMapper.scala 170:66]
    node T_2995 = and(T_2994, T_1580[11]) @[RegMapper.scala 170:66]
    node T_2996 = and(T_2995, T_1580[10]) @[RegMapper.scala 170:66]
    node T_2997 = and(T_2996, T_1580[9]) @[RegMapper.scala 170:66]
    node T_2998 = and(T_2997, T_1580[8]) @[RegMapper.scala 170:66]
    node T_2999 = and(T_2998, T_1580[7]) @[RegMapper.scala 170:66]
    node T_3000 = and(T_2999, T_1580[5]) @[RegMapper.scala 170:66]
    node T_3001 = and(T_3000, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[6] <= T_3001 @[RegMapper.scala 170:18]
    node T_3002 = and(T_2827, T_1588[12]) @[RegMapper.scala 171:66]
    node T_3003 = and(T_3002, T_1588[11]) @[RegMapper.scala 171:66]
    node T_3004 = and(T_3003, T_1588[10]) @[RegMapper.scala 171:66]
    node T_3005 = and(T_3004, T_1588[9]) @[RegMapper.scala 171:66]
    node T_3006 = and(T_3005, T_1588[8]) @[RegMapper.scala 171:66]
    node T_3007 = and(T_3006, T_1588[7]) @[RegMapper.scala 171:66]
    node T_3008 = and(T_3007, T_1588[5]) @[RegMapper.scala 171:66]
    node T_3009 = and(T_3008, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[6] <= T_3009 @[RegMapper.scala 171:18]
    node T_3010 = and(T_2833, T_1596[12]) @[RegMapper.scala 172:66]
    node T_3011 = and(T_3010, T_1596[11]) @[RegMapper.scala 172:66]
    node T_3012 = and(T_3011, T_1596[10]) @[RegMapper.scala 172:66]
    node T_3013 = and(T_3012, T_1596[9]) @[RegMapper.scala 172:66]
    node T_3014 = and(T_3013, T_1596[8]) @[RegMapper.scala 172:66]
    node T_3015 = and(T_3014, T_1596[7]) @[RegMapper.scala 172:66]
    node T_3016 = and(T_3015, T_1596[5]) @[RegMapper.scala 172:66]
    node T_3017 = and(T_3016, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[6] <= T_3017 @[RegMapper.scala 172:18]
    node T_3018 = and(T_2817, T_1572[12]) @[RegMapper.scala 169:66]
    node T_3019 = and(T_3018, T_1572[11]) @[RegMapper.scala 169:66]
    node T_3020 = and(T_3019, T_1572[10]) @[RegMapper.scala 169:66]
    node T_3021 = and(T_3020, T_1572[9]) @[RegMapper.scala 169:66]
    node T_3022 = and(T_3021, T_1572[8]) @[RegMapper.scala 169:66]
    node T_3023 = and(T_3022, T_1572[6]) @[RegMapper.scala 169:66]
    node T_3024 = and(T_3023, T_1572[5]) @[RegMapper.scala 169:66]
    node T_3025 = and(T_3024, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[7] <= T_3025 @[RegMapper.scala 169:18]
    node T_3026 = and(T_2823, T_1580[12]) @[RegMapper.scala 170:66]
    node T_3027 = and(T_3026, T_1580[11]) @[RegMapper.scala 170:66]
    node T_3028 = and(T_3027, T_1580[10]) @[RegMapper.scala 170:66]
    node T_3029 = and(T_3028, T_1580[9]) @[RegMapper.scala 170:66]
    node T_3030 = and(T_3029, T_1580[8]) @[RegMapper.scala 170:66]
    node T_3031 = and(T_3030, T_1580[6]) @[RegMapper.scala 170:66]
    node T_3032 = and(T_3031, T_1580[5]) @[RegMapper.scala 170:66]
    node T_3033 = and(T_3032, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[7] <= T_3033 @[RegMapper.scala 170:18]
    node T_3034 = and(T_2827, T_1588[12]) @[RegMapper.scala 171:66]
    node T_3035 = and(T_3034, T_1588[11]) @[RegMapper.scala 171:66]
    node T_3036 = and(T_3035, T_1588[10]) @[RegMapper.scala 171:66]
    node T_3037 = and(T_3036, T_1588[9]) @[RegMapper.scala 171:66]
    node T_3038 = and(T_3037, T_1588[8]) @[RegMapper.scala 171:66]
    node T_3039 = and(T_3038, T_1588[6]) @[RegMapper.scala 171:66]
    node T_3040 = and(T_3039, T_1588[5]) @[RegMapper.scala 171:66]
    node T_3041 = and(T_3040, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[7] <= T_3041 @[RegMapper.scala 171:18]
    node T_3042 = and(T_2833, T_1596[12]) @[RegMapper.scala 172:66]
    node T_3043 = and(T_3042, T_1596[11]) @[RegMapper.scala 172:66]
    node T_3044 = and(T_3043, T_1596[10]) @[RegMapper.scala 172:66]
    node T_3045 = and(T_3044, T_1596[9]) @[RegMapper.scala 172:66]
    node T_3046 = and(T_3045, T_1596[8]) @[RegMapper.scala 172:66]
    node T_3047 = and(T_3046, T_1596[6]) @[RegMapper.scala 172:66]
    node T_3048 = and(T_3047, T_1596[5]) @[RegMapper.scala 172:66]
    node T_3049 = and(T_3048, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[7] <= T_3049 @[RegMapper.scala 172:18]
    node T_3050 = and(T_2817, T_1572[12]) @[RegMapper.scala 169:66]
    node T_3051 = and(T_3050, T_1572[11]) @[RegMapper.scala 169:66]
    node T_3052 = and(T_3051, T_1572[10]) @[RegMapper.scala 169:66]
    node T_3053 = and(T_3052, T_1572[9]) @[RegMapper.scala 169:66]
    node T_3054 = and(T_3053, T_1572[7]) @[RegMapper.scala 169:66]
    node T_3055 = and(T_3054, T_1572[6]) @[RegMapper.scala 169:66]
    node T_3056 = and(T_3055, T_1572[5]) @[RegMapper.scala 169:66]
    node T_3057 = and(T_3056, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[8] <= T_3057 @[RegMapper.scala 169:18]
    node T_3058 = and(T_2823, T_1580[12]) @[RegMapper.scala 170:66]
    node T_3059 = and(T_3058, T_1580[11]) @[RegMapper.scala 170:66]
    node T_3060 = and(T_3059, T_1580[10]) @[RegMapper.scala 170:66]
    node T_3061 = and(T_3060, T_1580[9]) @[RegMapper.scala 170:66]
    node T_3062 = and(T_3061, T_1580[7]) @[RegMapper.scala 170:66]
    node T_3063 = and(T_3062, T_1580[6]) @[RegMapper.scala 170:66]
    node T_3064 = and(T_3063, T_1580[5]) @[RegMapper.scala 170:66]
    node T_3065 = and(T_3064, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[8] <= T_3065 @[RegMapper.scala 170:18]
    node T_3066 = and(T_2827, T_1588[12]) @[RegMapper.scala 171:66]
    node T_3067 = and(T_3066, T_1588[11]) @[RegMapper.scala 171:66]
    node T_3068 = and(T_3067, T_1588[10]) @[RegMapper.scala 171:66]
    node T_3069 = and(T_3068, T_1588[9]) @[RegMapper.scala 171:66]
    node T_3070 = and(T_3069, T_1588[7]) @[RegMapper.scala 171:66]
    node T_3071 = and(T_3070, T_1588[6]) @[RegMapper.scala 171:66]
    node T_3072 = and(T_3071, T_1588[5]) @[RegMapper.scala 171:66]
    node T_3073 = and(T_3072, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[8] <= T_3073 @[RegMapper.scala 171:18]
    node T_3074 = and(T_2833, T_1596[12]) @[RegMapper.scala 172:66]
    node T_3075 = and(T_3074, T_1596[11]) @[RegMapper.scala 172:66]
    node T_3076 = and(T_3075, T_1596[10]) @[RegMapper.scala 172:66]
    node T_3077 = and(T_3076, T_1596[9]) @[RegMapper.scala 172:66]
    node T_3078 = and(T_3077, T_1596[7]) @[RegMapper.scala 172:66]
    node T_3079 = and(T_3078, T_1596[6]) @[RegMapper.scala 172:66]
    node T_3080 = and(T_3079, T_1596[5]) @[RegMapper.scala 172:66]
    node T_3081 = and(T_3080, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[8] <= T_3081 @[RegMapper.scala 172:18]
    node T_3082 = and(T_2817, T_1572[12]) @[RegMapper.scala 169:66]
    node T_3083 = and(T_3082, T_1572[11]) @[RegMapper.scala 169:66]
    node T_3084 = and(T_3083, T_1572[10]) @[RegMapper.scala 169:66]
    node T_3085 = and(T_3084, T_1572[8]) @[RegMapper.scala 169:66]
    node T_3086 = and(T_3085, T_1572[7]) @[RegMapper.scala 169:66]
    node T_3087 = and(T_3086, T_1572[6]) @[RegMapper.scala 169:66]
    node T_3088 = and(T_3087, T_1572[5]) @[RegMapper.scala 169:66]
    node T_3089 = and(T_3088, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[9] <= T_3089 @[RegMapper.scala 169:18]
    node T_3090 = and(T_2823, T_1580[12]) @[RegMapper.scala 170:66]
    node T_3091 = and(T_3090, T_1580[11]) @[RegMapper.scala 170:66]
    node T_3092 = and(T_3091, T_1580[10]) @[RegMapper.scala 170:66]
    node T_3093 = and(T_3092, T_1580[8]) @[RegMapper.scala 170:66]
    node T_3094 = and(T_3093, T_1580[7]) @[RegMapper.scala 170:66]
    node T_3095 = and(T_3094, T_1580[6]) @[RegMapper.scala 170:66]
    node T_3096 = and(T_3095, T_1580[5]) @[RegMapper.scala 170:66]
    node T_3097 = and(T_3096, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[9] <= T_3097 @[RegMapper.scala 170:18]
    node T_3098 = and(T_2827, T_1588[12]) @[RegMapper.scala 171:66]
    node T_3099 = and(T_3098, T_1588[11]) @[RegMapper.scala 171:66]
    node T_3100 = and(T_3099, T_1588[10]) @[RegMapper.scala 171:66]
    node T_3101 = and(T_3100, T_1588[8]) @[RegMapper.scala 171:66]
    node T_3102 = and(T_3101, T_1588[7]) @[RegMapper.scala 171:66]
    node T_3103 = and(T_3102, T_1588[6]) @[RegMapper.scala 171:66]
    node T_3104 = and(T_3103, T_1588[5]) @[RegMapper.scala 171:66]
    node T_3105 = and(T_3104, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[9] <= T_3105 @[RegMapper.scala 171:18]
    node T_3106 = and(T_2833, T_1596[12]) @[RegMapper.scala 172:66]
    node T_3107 = and(T_3106, T_1596[11]) @[RegMapper.scala 172:66]
    node T_3108 = and(T_3107, T_1596[10]) @[RegMapper.scala 172:66]
    node T_3109 = and(T_3108, T_1596[8]) @[RegMapper.scala 172:66]
    node T_3110 = and(T_3109, T_1596[7]) @[RegMapper.scala 172:66]
    node T_3111 = and(T_3110, T_1596[6]) @[RegMapper.scala 172:66]
    node T_3112 = and(T_3111, T_1596[5]) @[RegMapper.scala 172:66]
    node T_3113 = and(T_3112, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[9] <= T_3113 @[RegMapper.scala 172:18]
    node T_3114 = and(T_2817, T_1572[12]) @[RegMapper.scala 169:66]
    node T_3115 = and(T_3114, T_1572[11]) @[RegMapper.scala 169:66]
    node T_3116 = and(T_3115, T_1572[9]) @[RegMapper.scala 169:66]
    node T_3117 = and(T_3116, T_1572[8]) @[RegMapper.scala 169:66]
    node T_3118 = and(T_3117, T_1572[7]) @[RegMapper.scala 169:66]
    node T_3119 = and(T_3118, T_1572[6]) @[RegMapper.scala 169:66]
    node T_3120 = and(T_3119, T_1572[5]) @[RegMapper.scala 169:66]
    node T_3121 = and(T_3120, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[10] <= T_3121 @[RegMapper.scala 169:18]
    node T_3122 = and(T_2823, T_1580[12]) @[RegMapper.scala 170:66]
    node T_3123 = and(T_3122, T_1580[11]) @[RegMapper.scala 170:66]
    node T_3124 = and(T_3123, T_1580[9]) @[RegMapper.scala 170:66]
    node T_3125 = and(T_3124, T_1580[8]) @[RegMapper.scala 170:66]
    node T_3126 = and(T_3125, T_1580[7]) @[RegMapper.scala 170:66]
    node T_3127 = and(T_3126, T_1580[6]) @[RegMapper.scala 170:66]
    node T_3128 = and(T_3127, T_1580[5]) @[RegMapper.scala 170:66]
    node T_3129 = and(T_3128, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[10] <= T_3129 @[RegMapper.scala 170:18]
    node T_3130 = and(T_2827, T_1588[12]) @[RegMapper.scala 171:66]
    node T_3131 = and(T_3130, T_1588[11]) @[RegMapper.scala 171:66]
    node T_3132 = and(T_3131, T_1588[9]) @[RegMapper.scala 171:66]
    node T_3133 = and(T_3132, T_1588[8]) @[RegMapper.scala 171:66]
    node T_3134 = and(T_3133, T_1588[7]) @[RegMapper.scala 171:66]
    node T_3135 = and(T_3134, T_1588[6]) @[RegMapper.scala 171:66]
    node T_3136 = and(T_3135, T_1588[5]) @[RegMapper.scala 171:66]
    node T_3137 = and(T_3136, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[10] <= T_3137 @[RegMapper.scala 171:18]
    node T_3138 = and(T_2833, T_1596[12]) @[RegMapper.scala 172:66]
    node T_3139 = and(T_3138, T_1596[11]) @[RegMapper.scala 172:66]
    node T_3140 = and(T_3139, T_1596[9]) @[RegMapper.scala 172:66]
    node T_3141 = and(T_3140, T_1596[8]) @[RegMapper.scala 172:66]
    node T_3142 = and(T_3141, T_1596[7]) @[RegMapper.scala 172:66]
    node T_3143 = and(T_3142, T_1596[6]) @[RegMapper.scala 172:66]
    node T_3144 = and(T_3143, T_1596[5]) @[RegMapper.scala 172:66]
    node T_3145 = and(T_3144, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[10] <= T_3145 @[RegMapper.scala 172:18]
    node T_3146 = and(T_2817, T_1572[12]) @[RegMapper.scala 169:66]
    node T_3147 = and(T_3146, T_1572[10]) @[RegMapper.scala 169:66]
    node T_3148 = and(T_3147, T_1572[9]) @[RegMapper.scala 169:66]
    node T_3149 = and(T_3148, T_1572[8]) @[RegMapper.scala 169:66]
    node T_3150 = and(T_3149, T_1572[7]) @[RegMapper.scala 169:66]
    node T_3151 = and(T_3150, T_1572[6]) @[RegMapper.scala 169:66]
    node T_3152 = and(T_3151, T_1572[5]) @[RegMapper.scala 169:66]
    node T_3153 = and(T_3152, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[11] <= T_3153 @[RegMapper.scala 169:18]
    node T_3154 = and(T_2823, T_1580[12]) @[RegMapper.scala 170:66]
    node T_3155 = and(T_3154, T_1580[10]) @[RegMapper.scala 170:66]
    node T_3156 = and(T_3155, T_1580[9]) @[RegMapper.scala 170:66]
    node T_3157 = and(T_3156, T_1580[8]) @[RegMapper.scala 170:66]
    node T_3158 = and(T_3157, T_1580[7]) @[RegMapper.scala 170:66]
    node T_3159 = and(T_3158, T_1580[6]) @[RegMapper.scala 170:66]
    node T_3160 = and(T_3159, T_1580[5]) @[RegMapper.scala 170:66]
    node T_3161 = and(T_3160, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[11] <= T_3161 @[RegMapper.scala 170:18]
    node T_3162 = and(T_2827, T_1588[12]) @[RegMapper.scala 171:66]
    node T_3163 = and(T_3162, T_1588[10]) @[RegMapper.scala 171:66]
    node T_3164 = and(T_3163, T_1588[9]) @[RegMapper.scala 171:66]
    node T_3165 = and(T_3164, T_1588[8]) @[RegMapper.scala 171:66]
    node T_3166 = and(T_3165, T_1588[7]) @[RegMapper.scala 171:66]
    node T_3167 = and(T_3166, T_1588[6]) @[RegMapper.scala 171:66]
    node T_3168 = and(T_3167, T_1588[5]) @[RegMapper.scala 171:66]
    node T_3169 = and(T_3168, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[11] <= T_3169 @[RegMapper.scala 171:18]
    node T_3170 = and(T_2833, T_1596[12]) @[RegMapper.scala 172:66]
    node T_3171 = and(T_3170, T_1596[10]) @[RegMapper.scala 172:66]
    node T_3172 = and(T_3171, T_1596[9]) @[RegMapper.scala 172:66]
    node T_3173 = and(T_3172, T_1596[8]) @[RegMapper.scala 172:66]
    node T_3174 = and(T_3173, T_1596[7]) @[RegMapper.scala 172:66]
    node T_3175 = and(T_3174, T_1596[6]) @[RegMapper.scala 172:66]
    node T_3176 = and(T_3175, T_1596[5]) @[RegMapper.scala 172:66]
    node T_3177 = and(T_3176, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[11] <= T_3177 @[RegMapper.scala 172:18]
    node T_3178 = and(T_2817, T_1572[11]) @[RegMapper.scala 169:66]
    node T_3179 = and(T_3178, T_1572[10]) @[RegMapper.scala 169:66]
    node T_3180 = and(T_3179, T_1572[9]) @[RegMapper.scala 169:66]
    node T_3181 = and(T_3180, T_1572[8]) @[RegMapper.scala 169:66]
    node T_3182 = and(T_3181, T_1572[7]) @[RegMapper.scala 169:66]
    node T_3183 = and(T_3182, T_1572[6]) @[RegMapper.scala 169:66]
    node T_3184 = and(T_3183, T_1572[5]) @[RegMapper.scala 169:66]
    node T_3185 = and(T_3184, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[12] <= T_3185 @[RegMapper.scala 169:18]
    node T_3186 = and(T_2823, T_1580[11]) @[RegMapper.scala 170:66]
    node T_3187 = and(T_3186, T_1580[10]) @[RegMapper.scala 170:66]
    node T_3188 = and(T_3187, T_1580[9]) @[RegMapper.scala 170:66]
    node T_3189 = and(T_3188, T_1580[8]) @[RegMapper.scala 170:66]
    node T_3190 = and(T_3189, T_1580[7]) @[RegMapper.scala 170:66]
    node T_3191 = and(T_3190, T_1580[6]) @[RegMapper.scala 170:66]
    node T_3192 = and(T_3191, T_1580[5]) @[RegMapper.scala 170:66]
    node T_3193 = and(T_3192, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[12] <= T_3193 @[RegMapper.scala 170:18]
    node T_3194 = and(T_2827, T_1588[11]) @[RegMapper.scala 171:66]
    node T_3195 = and(T_3194, T_1588[10]) @[RegMapper.scala 171:66]
    node T_3196 = and(T_3195, T_1588[9]) @[RegMapper.scala 171:66]
    node T_3197 = and(T_3196, T_1588[8]) @[RegMapper.scala 171:66]
    node T_3198 = and(T_3197, T_1588[7]) @[RegMapper.scala 171:66]
    node T_3199 = and(T_3198, T_1588[6]) @[RegMapper.scala 171:66]
    node T_3200 = and(T_3199, T_1588[5]) @[RegMapper.scala 171:66]
    node T_3201 = and(T_3200, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[12] <= T_3201 @[RegMapper.scala 171:18]
    node T_3202 = and(T_2833, T_1596[11]) @[RegMapper.scala 172:66]
    node T_3203 = and(T_3202, T_1596[10]) @[RegMapper.scala 172:66]
    node T_3204 = and(T_3203, T_1596[9]) @[RegMapper.scala 172:66]
    node T_3205 = and(T_3204, T_1596[8]) @[RegMapper.scala 172:66]
    node T_3206 = and(T_3205, T_1596[7]) @[RegMapper.scala 172:66]
    node T_3207 = and(T_3206, T_1596[6]) @[RegMapper.scala 172:66]
    node T_3208 = and(T_3207, T_1596[5]) @[RegMapper.scala 172:66]
    node T_3209 = and(T_3208, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[12] <= T_3209 @[RegMapper.scala 172:18]
    node T_3210 = and(T_2797, T_1572[20]) @[RegMapper.scala 169:66]
    node T_3211 = and(T_3210, T_1572[19]) @[RegMapper.scala 169:66]
    node T_3212 = and(T_3211, T_1572[18]) @[RegMapper.scala 169:66]
    node T_3213 = and(T_3212, T_1572[17]) @[RegMapper.scala 169:66]
    node T_3214 = and(T_3213, T_1572[16]) @[RegMapper.scala 169:66]
    node T_3215 = and(T_3214, T_1572[15]) @[RegMapper.scala 169:66]
    node T_3216 = and(T_3215, T_1572[14]) @[RegMapper.scala 169:66]
    node T_3217 = and(T_3216, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[13] <= T_3217 @[RegMapper.scala 169:18]
    node T_3218 = and(T_2803, T_1580[20]) @[RegMapper.scala 170:66]
    node T_3219 = and(T_3218, T_1580[19]) @[RegMapper.scala 170:66]
    node T_3220 = and(T_3219, T_1580[18]) @[RegMapper.scala 170:66]
    node T_3221 = and(T_3220, T_1580[17]) @[RegMapper.scala 170:66]
    node T_3222 = and(T_3221, T_1580[16]) @[RegMapper.scala 170:66]
    node T_3223 = and(T_3222, T_1580[15]) @[RegMapper.scala 170:66]
    node T_3224 = and(T_3223, T_1580[14]) @[RegMapper.scala 170:66]
    node T_3225 = and(T_3224, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[13] <= T_3225 @[RegMapper.scala 170:18]
    node T_3226 = and(T_2807, T_1588[20]) @[RegMapper.scala 171:66]
    node T_3227 = and(T_3226, T_1588[19]) @[RegMapper.scala 171:66]
    node T_3228 = and(T_3227, T_1588[18]) @[RegMapper.scala 171:66]
    node T_3229 = and(T_3228, T_1588[17]) @[RegMapper.scala 171:66]
    node T_3230 = and(T_3229, T_1588[16]) @[RegMapper.scala 171:66]
    node T_3231 = and(T_3230, T_1588[15]) @[RegMapper.scala 171:66]
    node T_3232 = and(T_3231, T_1588[14]) @[RegMapper.scala 171:66]
    node T_3233 = and(T_3232, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[13] <= T_3233 @[RegMapper.scala 171:18]
    node T_3234 = and(T_2813, T_1596[20]) @[RegMapper.scala 172:66]
    node T_3235 = and(T_3234, T_1596[19]) @[RegMapper.scala 172:66]
    node T_3236 = and(T_3235, T_1596[18]) @[RegMapper.scala 172:66]
    node T_3237 = and(T_3236, T_1596[17]) @[RegMapper.scala 172:66]
    node T_3238 = and(T_3237, T_1596[16]) @[RegMapper.scala 172:66]
    node T_3239 = and(T_3238, T_1596[15]) @[RegMapper.scala 172:66]
    node T_3240 = and(T_3239, T_1596[14]) @[RegMapper.scala 172:66]
    node T_3241 = and(T_3240, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[13] <= T_3241 @[RegMapper.scala 172:18]
    node T_3242 = and(T_2797, T_1572[20]) @[RegMapper.scala 169:66]
    node T_3243 = and(T_3242, T_1572[19]) @[RegMapper.scala 169:66]
    node T_3244 = and(T_3243, T_1572[18]) @[RegMapper.scala 169:66]
    node T_3245 = and(T_3244, T_1572[17]) @[RegMapper.scala 169:66]
    node T_3246 = and(T_3245, T_1572[16]) @[RegMapper.scala 169:66]
    node T_3247 = and(T_3246, T_1572[15]) @[RegMapper.scala 169:66]
    node T_3248 = and(T_3247, T_1572[13]) @[RegMapper.scala 169:66]
    node T_3249 = and(T_3248, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[14] <= T_3249 @[RegMapper.scala 169:18]
    node T_3250 = and(T_2803, T_1580[20]) @[RegMapper.scala 170:66]
    node T_3251 = and(T_3250, T_1580[19]) @[RegMapper.scala 170:66]
    node T_3252 = and(T_3251, T_1580[18]) @[RegMapper.scala 170:66]
    node T_3253 = and(T_3252, T_1580[17]) @[RegMapper.scala 170:66]
    node T_3254 = and(T_3253, T_1580[16]) @[RegMapper.scala 170:66]
    node T_3255 = and(T_3254, T_1580[15]) @[RegMapper.scala 170:66]
    node T_3256 = and(T_3255, T_1580[13]) @[RegMapper.scala 170:66]
    node T_3257 = and(T_3256, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[14] <= T_3257 @[RegMapper.scala 170:18]
    node T_3258 = and(T_2807, T_1588[20]) @[RegMapper.scala 171:66]
    node T_3259 = and(T_3258, T_1588[19]) @[RegMapper.scala 171:66]
    node T_3260 = and(T_3259, T_1588[18]) @[RegMapper.scala 171:66]
    node T_3261 = and(T_3260, T_1588[17]) @[RegMapper.scala 171:66]
    node T_3262 = and(T_3261, T_1588[16]) @[RegMapper.scala 171:66]
    node T_3263 = and(T_3262, T_1588[15]) @[RegMapper.scala 171:66]
    node T_3264 = and(T_3263, T_1588[13]) @[RegMapper.scala 171:66]
    node T_3265 = and(T_3264, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[14] <= T_3265 @[RegMapper.scala 171:18]
    node T_3266 = and(T_2813, T_1596[20]) @[RegMapper.scala 172:66]
    node T_3267 = and(T_3266, T_1596[19]) @[RegMapper.scala 172:66]
    node T_3268 = and(T_3267, T_1596[18]) @[RegMapper.scala 172:66]
    node T_3269 = and(T_3268, T_1596[17]) @[RegMapper.scala 172:66]
    node T_3270 = and(T_3269, T_1596[16]) @[RegMapper.scala 172:66]
    node T_3271 = and(T_3270, T_1596[15]) @[RegMapper.scala 172:66]
    node T_3272 = and(T_3271, T_1596[13]) @[RegMapper.scala 172:66]
    node T_3273 = and(T_3272, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[14] <= T_3273 @[RegMapper.scala 172:18]
    node T_3274 = and(T_2797, T_1572[20]) @[RegMapper.scala 169:66]
    node T_3275 = and(T_3274, T_1572[19]) @[RegMapper.scala 169:66]
    node T_3276 = and(T_3275, T_1572[18]) @[RegMapper.scala 169:66]
    node T_3277 = and(T_3276, T_1572[17]) @[RegMapper.scala 169:66]
    node T_3278 = and(T_3277, T_1572[16]) @[RegMapper.scala 169:66]
    node T_3279 = and(T_3278, T_1572[14]) @[RegMapper.scala 169:66]
    node T_3280 = and(T_3279, T_1572[13]) @[RegMapper.scala 169:66]
    node T_3281 = and(T_3280, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[15] <= T_3281 @[RegMapper.scala 169:18]
    node T_3282 = and(T_2803, T_1580[20]) @[RegMapper.scala 170:66]
    node T_3283 = and(T_3282, T_1580[19]) @[RegMapper.scala 170:66]
    node T_3284 = and(T_3283, T_1580[18]) @[RegMapper.scala 170:66]
    node T_3285 = and(T_3284, T_1580[17]) @[RegMapper.scala 170:66]
    node T_3286 = and(T_3285, T_1580[16]) @[RegMapper.scala 170:66]
    node T_3287 = and(T_3286, T_1580[14]) @[RegMapper.scala 170:66]
    node T_3288 = and(T_3287, T_1580[13]) @[RegMapper.scala 170:66]
    node T_3289 = and(T_3288, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[15] <= T_3289 @[RegMapper.scala 170:18]
    node T_3290 = and(T_2807, T_1588[20]) @[RegMapper.scala 171:66]
    node T_3291 = and(T_3290, T_1588[19]) @[RegMapper.scala 171:66]
    node T_3292 = and(T_3291, T_1588[18]) @[RegMapper.scala 171:66]
    node T_3293 = and(T_3292, T_1588[17]) @[RegMapper.scala 171:66]
    node T_3294 = and(T_3293, T_1588[16]) @[RegMapper.scala 171:66]
    node T_3295 = and(T_3294, T_1588[14]) @[RegMapper.scala 171:66]
    node T_3296 = and(T_3295, T_1588[13]) @[RegMapper.scala 171:66]
    node T_3297 = and(T_3296, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[15] <= T_3297 @[RegMapper.scala 171:18]
    node T_3298 = and(T_2813, T_1596[20]) @[RegMapper.scala 172:66]
    node T_3299 = and(T_3298, T_1596[19]) @[RegMapper.scala 172:66]
    node T_3300 = and(T_3299, T_1596[18]) @[RegMapper.scala 172:66]
    node T_3301 = and(T_3300, T_1596[17]) @[RegMapper.scala 172:66]
    node T_3302 = and(T_3301, T_1596[16]) @[RegMapper.scala 172:66]
    node T_3303 = and(T_3302, T_1596[14]) @[RegMapper.scala 172:66]
    node T_3304 = and(T_3303, T_1596[13]) @[RegMapper.scala 172:66]
    node T_3305 = and(T_3304, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[15] <= T_3305 @[RegMapper.scala 172:18]
    node T_3306 = and(T_2797, T_1572[20]) @[RegMapper.scala 169:66]
    node T_3307 = and(T_3306, T_1572[19]) @[RegMapper.scala 169:66]
    node T_3308 = and(T_3307, T_1572[18]) @[RegMapper.scala 169:66]
    node T_3309 = and(T_3308, T_1572[17]) @[RegMapper.scala 169:66]
    node T_3310 = and(T_3309, T_1572[15]) @[RegMapper.scala 169:66]
    node T_3311 = and(T_3310, T_1572[14]) @[RegMapper.scala 169:66]
    node T_3312 = and(T_3311, T_1572[13]) @[RegMapper.scala 169:66]
    node T_3313 = and(T_3312, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[16] <= T_3313 @[RegMapper.scala 169:18]
    node T_3314 = and(T_2803, T_1580[20]) @[RegMapper.scala 170:66]
    node T_3315 = and(T_3314, T_1580[19]) @[RegMapper.scala 170:66]
    node T_3316 = and(T_3315, T_1580[18]) @[RegMapper.scala 170:66]
    node T_3317 = and(T_3316, T_1580[17]) @[RegMapper.scala 170:66]
    node T_3318 = and(T_3317, T_1580[15]) @[RegMapper.scala 170:66]
    node T_3319 = and(T_3318, T_1580[14]) @[RegMapper.scala 170:66]
    node T_3320 = and(T_3319, T_1580[13]) @[RegMapper.scala 170:66]
    node T_3321 = and(T_3320, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[16] <= T_3321 @[RegMapper.scala 170:18]
    node T_3322 = and(T_2807, T_1588[20]) @[RegMapper.scala 171:66]
    node T_3323 = and(T_3322, T_1588[19]) @[RegMapper.scala 171:66]
    node T_3324 = and(T_3323, T_1588[18]) @[RegMapper.scala 171:66]
    node T_3325 = and(T_3324, T_1588[17]) @[RegMapper.scala 171:66]
    node T_3326 = and(T_3325, T_1588[15]) @[RegMapper.scala 171:66]
    node T_3327 = and(T_3326, T_1588[14]) @[RegMapper.scala 171:66]
    node T_3328 = and(T_3327, T_1588[13]) @[RegMapper.scala 171:66]
    node T_3329 = and(T_3328, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[16] <= T_3329 @[RegMapper.scala 171:18]
    node T_3330 = and(T_2813, T_1596[20]) @[RegMapper.scala 172:66]
    node T_3331 = and(T_3330, T_1596[19]) @[RegMapper.scala 172:66]
    node T_3332 = and(T_3331, T_1596[18]) @[RegMapper.scala 172:66]
    node T_3333 = and(T_3332, T_1596[17]) @[RegMapper.scala 172:66]
    node T_3334 = and(T_3333, T_1596[15]) @[RegMapper.scala 172:66]
    node T_3335 = and(T_3334, T_1596[14]) @[RegMapper.scala 172:66]
    node T_3336 = and(T_3335, T_1596[13]) @[RegMapper.scala 172:66]
    node T_3337 = and(T_3336, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[16] <= T_3337 @[RegMapper.scala 172:18]
    node T_3338 = and(T_2797, T_1572[20]) @[RegMapper.scala 169:66]
    node T_3339 = and(T_3338, T_1572[19]) @[RegMapper.scala 169:66]
    node T_3340 = and(T_3339, T_1572[18]) @[RegMapper.scala 169:66]
    node T_3341 = and(T_3340, T_1572[16]) @[RegMapper.scala 169:66]
    node T_3342 = and(T_3341, T_1572[15]) @[RegMapper.scala 169:66]
    node T_3343 = and(T_3342, T_1572[14]) @[RegMapper.scala 169:66]
    node T_3344 = and(T_3343, T_1572[13]) @[RegMapper.scala 169:66]
    node T_3345 = and(T_3344, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[17] <= T_3345 @[RegMapper.scala 169:18]
    node T_3346 = and(T_2803, T_1580[20]) @[RegMapper.scala 170:66]
    node T_3347 = and(T_3346, T_1580[19]) @[RegMapper.scala 170:66]
    node T_3348 = and(T_3347, T_1580[18]) @[RegMapper.scala 170:66]
    node T_3349 = and(T_3348, T_1580[16]) @[RegMapper.scala 170:66]
    node T_3350 = and(T_3349, T_1580[15]) @[RegMapper.scala 170:66]
    node T_3351 = and(T_3350, T_1580[14]) @[RegMapper.scala 170:66]
    node T_3352 = and(T_3351, T_1580[13]) @[RegMapper.scala 170:66]
    node T_3353 = and(T_3352, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[17] <= T_3353 @[RegMapper.scala 170:18]
    node T_3354 = and(T_2807, T_1588[20]) @[RegMapper.scala 171:66]
    node T_3355 = and(T_3354, T_1588[19]) @[RegMapper.scala 171:66]
    node T_3356 = and(T_3355, T_1588[18]) @[RegMapper.scala 171:66]
    node T_3357 = and(T_3356, T_1588[16]) @[RegMapper.scala 171:66]
    node T_3358 = and(T_3357, T_1588[15]) @[RegMapper.scala 171:66]
    node T_3359 = and(T_3358, T_1588[14]) @[RegMapper.scala 171:66]
    node T_3360 = and(T_3359, T_1588[13]) @[RegMapper.scala 171:66]
    node T_3361 = and(T_3360, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[17] <= T_3361 @[RegMapper.scala 171:18]
    node T_3362 = and(T_2813, T_1596[20]) @[RegMapper.scala 172:66]
    node T_3363 = and(T_3362, T_1596[19]) @[RegMapper.scala 172:66]
    node T_3364 = and(T_3363, T_1596[18]) @[RegMapper.scala 172:66]
    node T_3365 = and(T_3364, T_1596[16]) @[RegMapper.scala 172:66]
    node T_3366 = and(T_3365, T_1596[15]) @[RegMapper.scala 172:66]
    node T_3367 = and(T_3366, T_1596[14]) @[RegMapper.scala 172:66]
    node T_3368 = and(T_3367, T_1596[13]) @[RegMapper.scala 172:66]
    node T_3369 = and(T_3368, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[17] <= T_3369 @[RegMapper.scala 172:18]
    node T_3370 = and(T_2797, T_1572[20]) @[RegMapper.scala 169:66]
    node T_3371 = and(T_3370, T_1572[19]) @[RegMapper.scala 169:66]
    node T_3372 = and(T_3371, T_1572[17]) @[RegMapper.scala 169:66]
    node T_3373 = and(T_3372, T_1572[16]) @[RegMapper.scala 169:66]
    node T_3374 = and(T_3373, T_1572[15]) @[RegMapper.scala 169:66]
    node T_3375 = and(T_3374, T_1572[14]) @[RegMapper.scala 169:66]
    node T_3376 = and(T_3375, T_1572[13]) @[RegMapper.scala 169:66]
    node T_3377 = and(T_3376, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[18] <= T_3377 @[RegMapper.scala 169:18]
    node T_3378 = and(T_2803, T_1580[20]) @[RegMapper.scala 170:66]
    node T_3379 = and(T_3378, T_1580[19]) @[RegMapper.scala 170:66]
    node T_3380 = and(T_3379, T_1580[17]) @[RegMapper.scala 170:66]
    node T_3381 = and(T_3380, T_1580[16]) @[RegMapper.scala 170:66]
    node T_3382 = and(T_3381, T_1580[15]) @[RegMapper.scala 170:66]
    node T_3383 = and(T_3382, T_1580[14]) @[RegMapper.scala 170:66]
    node T_3384 = and(T_3383, T_1580[13]) @[RegMapper.scala 170:66]
    node T_3385 = and(T_3384, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[18] <= T_3385 @[RegMapper.scala 170:18]
    node T_3386 = and(T_2807, T_1588[20]) @[RegMapper.scala 171:66]
    node T_3387 = and(T_3386, T_1588[19]) @[RegMapper.scala 171:66]
    node T_3388 = and(T_3387, T_1588[17]) @[RegMapper.scala 171:66]
    node T_3389 = and(T_3388, T_1588[16]) @[RegMapper.scala 171:66]
    node T_3390 = and(T_3389, T_1588[15]) @[RegMapper.scala 171:66]
    node T_3391 = and(T_3390, T_1588[14]) @[RegMapper.scala 171:66]
    node T_3392 = and(T_3391, T_1588[13]) @[RegMapper.scala 171:66]
    node T_3393 = and(T_3392, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[18] <= T_3393 @[RegMapper.scala 171:18]
    node T_3394 = and(T_2813, T_1596[20]) @[RegMapper.scala 172:66]
    node T_3395 = and(T_3394, T_1596[19]) @[RegMapper.scala 172:66]
    node T_3396 = and(T_3395, T_1596[17]) @[RegMapper.scala 172:66]
    node T_3397 = and(T_3396, T_1596[16]) @[RegMapper.scala 172:66]
    node T_3398 = and(T_3397, T_1596[15]) @[RegMapper.scala 172:66]
    node T_3399 = and(T_3398, T_1596[14]) @[RegMapper.scala 172:66]
    node T_3400 = and(T_3399, T_1596[13]) @[RegMapper.scala 172:66]
    node T_3401 = and(T_3400, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[18] <= T_3401 @[RegMapper.scala 172:18]
    node T_3402 = and(T_2797, T_1572[20]) @[RegMapper.scala 169:66]
    node T_3403 = and(T_3402, T_1572[18]) @[RegMapper.scala 169:66]
    node T_3404 = and(T_3403, T_1572[17]) @[RegMapper.scala 169:66]
    node T_3405 = and(T_3404, T_1572[16]) @[RegMapper.scala 169:66]
    node T_3406 = and(T_3405, T_1572[15]) @[RegMapper.scala 169:66]
    node T_3407 = and(T_3406, T_1572[14]) @[RegMapper.scala 169:66]
    node T_3408 = and(T_3407, T_1572[13]) @[RegMapper.scala 169:66]
    node T_3409 = and(T_3408, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[19] <= T_3409 @[RegMapper.scala 169:18]
    node T_3410 = and(T_2803, T_1580[20]) @[RegMapper.scala 170:66]
    node T_3411 = and(T_3410, T_1580[18]) @[RegMapper.scala 170:66]
    node T_3412 = and(T_3411, T_1580[17]) @[RegMapper.scala 170:66]
    node T_3413 = and(T_3412, T_1580[16]) @[RegMapper.scala 170:66]
    node T_3414 = and(T_3413, T_1580[15]) @[RegMapper.scala 170:66]
    node T_3415 = and(T_3414, T_1580[14]) @[RegMapper.scala 170:66]
    node T_3416 = and(T_3415, T_1580[13]) @[RegMapper.scala 170:66]
    node T_3417 = and(T_3416, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[19] <= T_3417 @[RegMapper.scala 170:18]
    node T_3418 = and(T_2807, T_1588[20]) @[RegMapper.scala 171:66]
    node T_3419 = and(T_3418, T_1588[18]) @[RegMapper.scala 171:66]
    node T_3420 = and(T_3419, T_1588[17]) @[RegMapper.scala 171:66]
    node T_3421 = and(T_3420, T_1588[16]) @[RegMapper.scala 171:66]
    node T_3422 = and(T_3421, T_1588[15]) @[RegMapper.scala 171:66]
    node T_3423 = and(T_3422, T_1588[14]) @[RegMapper.scala 171:66]
    node T_3424 = and(T_3423, T_1588[13]) @[RegMapper.scala 171:66]
    node T_3425 = and(T_3424, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[19] <= T_3425 @[RegMapper.scala 171:18]
    node T_3426 = and(T_2813, T_1596[20]) @[RegMapper.scala 172:66]
    node T_3427 = and(T_3426, T_1596[18]) @[RegMapper.scala 172:66]
    node T_3428 = and(T_3427, T_1596[17]) @[RegMapper.scala 172:66]
    node T_3429 = and(T_3428, T_1596[16]) @[RegMapper.scala 172:66]
    node T_3430 = and(T_3429, T_1596[15]) @[RegMapper.scala 172:66]
    node T_3431 = and(T_3430, T_1596[14]) @[RegMapper.scala 172:66]
    node T_3432 = and(T_3431, T_1596[13]) @[RegMapper.scala 172:66]
    node T_3433 = and(T_3432, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[19] <= T_3433 @[RegMapper.scala 172:18]
    node T_3434 = and(T_2797, T_1572[19]) @[RegMapper.scala 169:66]
    node T_3435 = and(T_3434, T_1572[18]) @[RegMapper.scala 169:66]
    node T_3436 = and(T_3435, T_1572[17]) @[RegMapper.scala 169:66]
    node T_3437 = and(T_3436, T_1572[16]) @[RegMapper.scala 169:66]
    node T_3438 = and(T_3437, T_1572[15]) @[RegMapper.scala 169:66]
    node T_3439 = and(T_3438, T_1572[14]) @[RegMapper.scala 169:66]
    node T_3440 = and(T_3439, T_1572[13]) @[RegMapper.scala 169:66]
    node T_3441 = and(T_3440, UInt<1>("h01")) @[RegMapper.scala 169:66]
    T_1556[20] <= T_3441 @[RegMapper.scala 169:18]
    node T_3442 = and(T_2803, T_1580[19]) @[RegMapper.scala 170:66]
    node T_3443 = and(T_3442, T_1580[18]) @[RegMapper.scala 170:66]
    node T_3444 = and(T_3443, T_1580[17]) @[RegMapper.scala 170:66]
    node T_3445 = and(T_3444, T_1580[16]) @[RegMapper.scala 170:66]
    node T_3446 = and(T_3445, T_1580[15]) @[RegMapper.scala 170:66]
    node T_3447 = and(T_3446, T_1580[14]) @[RegMapper.scala 170:66]
    node T_3448 = and(T_3447, T_1580[13]) @[RegMapper.scala 170:66]
    node T_3449 = and(T_3448, UInt<1>("h01")) @[RegMapper.scala 170:66]
    T_1564[20] <= T_3449 @[RegMapper.scala 170:18]
    node T_3450 = and(T_2807, T_1588[19]) @[RegMapper.scala 171:66]
    node T_3451 = and(T_3450, T_1588[18]) @[RegMapper.scala 171:66]
    node T_3452 = and(T_3451, T_1588[17]) @[RegMapper.scala 171:66]
    node T_3453 = and(T_3452, T_1588[16]) @[RegMapper.scala 171:66]
    node T_3454 = and(T_3453, T_1588[15]) @[RegMapper.scala 171:66]
    node T_3455 = and(T_3454, T_1588[14]) @[RegMapper.scala 171:66]
    node T_3456 = and(T_3455, T_1588[13]) @[RegMapper.scala 171:66]
    node T_3457 = and(T_3456, UInt<1>("h01")) @[RegMapper.scala 171:66]
    T_1604[20] <= T_3457 @[RegMapper.scala 171:18]
    node T_3458 = and(T_2813, T_1596[19]) @[RegMapper.scala 172:66]
    node T_3459 = and(T_3458, T_1596[18]) @[RegMapper.scala 172:66]
    node T_3460 = and(T_3459, T_1596[17]) @[RegMapper.scala 172:66]
    node T_3461 = and(T_3460, T_1596[16]) @[RegMapper.scala 172:66]
    node T_3462 = and(T_3461, T_1596[15]) @[RegMapper.scala 172:66]
    node T_3463 = and(T_3462, T_1596[14]) @[RegMapper.scala 172:66]
    node T_3464 = and(T_3463, T_1596[13]) @[RegMapper.scala 172:66]
    node T_3465 = and(T_3464, UInt<1>("h01")) @[RegMapper.scala 172:66]
    T_1612[20] <= T_3465 @[RegMapper.scala 172:18]
    T_1490.bits.read <= T_1522.bits.read @[RegMapper.scala 175:20]
    wire T_3471 : UInt<1>[4] @[RegMapper.scala 176:30]
    T_3471 is invalid @[RegMapper.scala 176:30]
    T_3471[0] <= UInt<1>("h01") @[RegMapper.scala 176:30]
    T_3471[1] <= UInt<1>("h01") @[RegMapper.scala 176:30]
    T_3471[2] <= UInt<1>("h01") @[RegMapper.scala 176:30]
    T_3471[3] <= UInt<1>("h01") @[RegMapper.scala 176:30]
    wire T_3478 : UInt<64>[4] @[RegMapper.scala 176:54]
    T_3478 is invalid @[RegMapper.scala 176:54]
    T_3478[0] <= T_1927 @[RegMapper.scala 176:54]
    T_3478[1] <= T_2567 @[RegMapper.scala 176:54]
    T_3478[2] <= T_2247 @[RegMapper.scala 176:54]
    T_3478[3] <= UInt<1>("h00") @[RegMapper.scala 176:54]
    node T_3481 = mux(T_3471[T_2755], T_3478[T_2755], UInt<1>("h00")) @[RegMapper.scala 176:26]
    T_1490.bits.data <= T_3481 @[RegMapper.scala 176:20]
    T_1490.bits.extra <= T_1522.bits.extra @[RegMapper.scala 177:20]
    T_1432.valid <= io.in[0].a.valid @[RegisterRouter.scala 42:15]
    io.in[0].a.ready <= T_1432.ready @[RegisterRouter.scala 43:15]
    io.in[0].d.valid <= T_1490.valid @[RegisterRouter.scala 44:15]
    T_1490.ready <= io.in[0].d.ready @[RegisterRouter.scala 45:15]
    node T_3482 = bits(T_1490.bits.extra, 11, 9) @[RegisterRouter.scala 49:35]
    node T_3484 = bits(T_1490.bits.extra, 8, 2) @[RegisterRouter.scala 51:35]
    node T_3485 = bits(T_1490.bits.extra, 1, 0) @[RegisterRouter.scala 52:35]
    wire T_3496 : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>} @[Edges.scala 590:17]
    T_3496 is invalid @[Edges.scala 590:17]
    T_3496.opcode <= UInt<1>("h00") @[Edges.scala 591:15]
    T_3496.param <= UInt<1>("h00") @[Edges.scala 592:15]
    T_3496.size <= T_3485 @[Edges.scala 593:15]
    T_3496.source <= T_3484 @[Edges.scala 594:15]
    T_3496.sink <= UInt<1>("h00") @[Edges.scala 595:15]
    T_3496.addr_lo <= T_3482 @[Edges.scala 596:15]
    T_3496.data <= UInt<1>("h00") @[Edges.scala 597:15]
    T_3496.error <= UInt<1>("h00") @[Edges.scala 598:15]
    io.in[0].d.bits <- T_3496 @[RegisterRouter.scala 48:12]
    io.in[0].d.bits.data <= T_1490.bits.data @[RegisterRouter.scala 55:17]
    node T_3507 = mux(T_1490.bits.read, UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 56:25]
    io.in[0].d.bits.opcode <= T_3507 @[RegisterRouter.scala 56:19]
    io.in[0].b.valid <= UInt<1>("h00") @[RegisterRouter.scala 59:25]
    io.in[0].c.ready <= UInt<1>("h01") @[RegisterRouter.scala 60:25]
    io.in[0].e.ready <= UInt<1>("h01") @[RegisterRouter.scala 61:25]
    
  module TLWidthWidget_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1], out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1]}
    
    io is invalid
    reg T_1969 : UInt<32>, clk
    reg T_1971 : UInt<4>, clk
    node T_1972 = cat(io.in[0].a.bits.data, T_1969) @[Cat.scala 20:58]
    node T_1973 = cat(io.in[0].a.bits.mask, T_1971) @[Cat.scala 20:58]
    node T_1974 = bits(io.in[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
    node T_1976 = eq(T_1974, UInt<1>("h00")) @[Edges.scala 125:28]
    node T_1978 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
    node T_1979 = dshl(T_1978, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_1980 = bits(T_1979, 1, 0) @[package.scala 11:76]
    node T_1981 = not(T_1980) @[package.scala 11:40]
    node T_1982 = bits(io.in[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
    node T_1983 = bits(io.in[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
    node T_1985 = neq(T_1983, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_1987 = eq(T_1985, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_1988 = or(T_1982, T_1983) @[Edges.scala 63:32]
    node T_1989 = bits(T_1988, 0, 0) @[Edges.scala 58:14]
    node T_1990 = not(T_1989) @[Edges.scala 58:9]
    node T_1991 = cat(T_1987, T_1990) @[Cat.scala 20:58]
    node T_1992 = not(T_1981) @[Edges.scala 66:39]
    node T_1993 = and(T_1991, T_1992) @[Edges.scala 66:37]
    node T_1994 = cat(io.in[0].a.bits.addr_hi, T_1993) @[Cat.scala 20:58]
    node T_1995 = shr(T_1994, 3) @[WidthWidget.scala 38:26]
    reg T_1997 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1999 = eq(T_1997, UInt<1>("h00")) @[WidthWidget.scala 41:25]
    node T_2001 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_2002 = dshl(T_2001, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_2003 = bits(T_2002, 2, 0) @[package.scala 11:76]
    node T_2004 = not(T_2003) @[package.scala 11:40]
    node T_2005 = shr(T_2004, 2) @[WidthWidget.scala 42:55]
    node T_2006 = eq(T_1997, T_2005) @[WidthWidget.scala 43:24]
    node T_2008 = eq(T_1976, UInt<1>("h00")) @[WidthWidget.scala 43:37]
    node T_2009 = or(T_2006, T_2008) @[WidthWidget.scala 43:34]
    node T_2010 = and(io.in[0].a.ready, io.in[0].a.valid) @[Decoupled.scala 21:42]
    when T_2010 : @[WidthWidget.scala 45:24]
      node T_2011 = shr(T_1972, 32) @[WidthWidget.scala 46:23]
      T_1969 <= T_2011 @[WidthWidget.scala 46:15]
      node T_2012 = shr(T_1973, 4) @[WidthWidget.scala 47:23]
      T_1971 <= T_2012 @[WidthWidget.scala 47:15]
      node T_2014 = add(T_1997, UInt<1>("h01")) @[WidthWidget.scala 48:24]
      node T_2015 = tail(T_2014, 1) @[WidthWidget.scala 48:24]
      T_1997 <= T_2015 @[WidthWidget.scala 48:15]
      when T_2009 : @[WidthWidget.scala 49:21]
        T_1997 <= UInt<1>("h00") @[WidthWidget.scala 49:29]
        skip @[WidthWidget.scala 49:21]
      skip @[WidthWidget.scala 45:24]
    node T_2017 = bits(T_1972, 63, 32) @[WidthWidget.scala 55:45]
    node T_2018 = cat(T_2017, T_2017) @[Cat.scala 20:58]
    node T_2019 = bits(T_1973, 7, 4) @[WidthWidget.scala 56:45]
    node T_2020 = cat(T_2019, T_2019) @[Cat.scala 20:58]
    node T_2021 = bits(T_1972, 63, 0) @[WidthWidget.scala 55:45]
    node T_2022 = bits(T_1973, 7, 0) @[WidthWidget.scala 56:45]
    wire T_2028 : UInt<64>[9] @[WidthWidget.scala 58:66]
    T_2028 is invalid @[WidthWidget.scala 58:66]
    T_2028[0] <= T_2018 @[WidthWidget.scala 58:66]
    T_2028[1] <= T_2018 @[WidthWidget.scala 58:66]
    T_2028[2] <= T_2018 @[WidthWidget.scala 58:66]
    T_2028[3] <= T_2021 @[WidthWidget.scala 58:66]
    T_2028[4] <= T_2021 @[WidthWidget.scala 58:66]
    T_2028[5] <= T_2021 @[WidthWidget.scala 58:66]
    T_2028[6] <= T_2021 @[WidthWidget.scala 58:66]
    T_2028[7] <= T_2021 @[WidthWidget.scala 58:66]
    T_2028[8] <= T_2021 @[WidthWidget.scala 58:66]
    wire T_2035 : UInt<8>[9] @[WidthWidget.scala 61:66]
    T_2035 is invalid @[WidthWidget.scala 61:66]
    T_2035[0] <= T_2020 @[WidthWidget.scala 61:66]
    T_2035[1] <= T_2020 @[WidthWidget.scala 61:66]
    T_2035[2] <= T_2020 @[WidthWidget.scala 61:66]
    T_2035[3] <= T_2022 @[WidthWidget.scala 61:66]
    T_2035[4] <= T_2022 @[WidthWidget.scala 61:66]
    T_2035[5] <= T_2022 @[WidthWidget.scala 61:66]
    T_2035[6] <= T_2022 @[WidthWidget.scala 61:66]
    T_2035[7] <= T_2022 @[WidthWidget.scala 61:66]
    T_2035[8] <= T_2022 @[WidthWidget.scala 61:66]
    node T_2038 = bits(io.in[0].a.bits.size, 1, 0) @[OneHot.scala 46:21]
    node T_2039 = dshl(UInt<1>("h01"), T_2038) @[OneHot.scala 46:16]
    node T_2040 = bits(T_2039, 2, 0) @[OneHot.scala 46:41]
    node T_2042 = geq(io.in[0].a.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
    node T_2044 = bits(T_2040, 2, 2) @[Edges.scala 36:26]
    node T_2045 = bits(T_1994, 2, 2) @[Edges.scala 37:26]
    node T_2047 = eq(T_2045, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2048 = and(UInt<1>("h01"), T_2047) @[Edges.scala 41:27]
    node T_2049 = and(T_2044, T_2048) @[Edges.scala 42:38]
    node T_2050 = or(T_2042, T_2049) @[Edges.scala 42:29]
    node T_2051 = and(UInt<1>("h01"), T_2045) @[Edges.scala 41:27]
    node T_2052 = and(T_2044, T_2051) @[Edges.scala 42:38]
    node T_2053 = or(T_2042, T_2052) @[Edges.scala 42:29]
    node T_2054 = bits(T_2040, 1, 1) @[Edges.scala 36:26]
    node T_2055 = bits(T_1994, 1, 1) @[Edges.scala 37:26]
    node T_2057 = eq(T_2055, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2058 = and(T_2048, T_2057) @[Edges.scala 41:27]
    node T_2059 = and(T_2054, T_2058) @[Edges.scala 42:38]
    node T_2060 = or(T_2050, T_2059) @[Edges.scala 42:29]
    node T_2061 = and(T_2048, T_2055) @[Edges.scala 41:27]
    node T_2062 = and(T_2054, T_2061) @[Edges.scala 42:38]
    node T_2063 = or(T_2050, T_2062) @[Edges.scala 42:29]
    node T_2064 = and(T_2051, T_2057) @[Edges.scala 41:27]
    node T_2065 = and(T_2054, T_2064) @[Edges.scala 42:38]
    node T_2066 = or(T_2053, T_2065) @[Edges.scala 42:29]
    node T_2067 = and(T_2051, T_2055) @[Edges.scala 41:27]
    node T_2068 = and(T_2054, T_2067) @[Edges.scala 42:38]
    node T_2069 = or(T_2053, T_2068) @[Edges.scala 42:29]
    node T_2070 = bits(T_2040, 0, 0) @[Edges.scala 36:26]
    node T_2071 = bits(T_1994, 0, 0) @[Edges.scala 37:26]
    node T_2073 = eq(T_2071, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2074 = and(T_2058, T_2073) @[Edges.scala 41:27]
    node T_2075 = and(T_2070, T_2074) @[Edges.scala 42:38]
    node T_2076 = or(T_2060, T_2075) @[Edges.scala 42:29]
    node T_2077 = and(T_2058, T_2071) @[Edges.scala 41:27]
    node T_2078 = and(T_2070, T_2077) @[Edges.scala 42:38]
    node T_2079 = or(T_2060, T_2078) @[Edges.scala 42:29]
    node T_2080 = and(T_2061, T_2073) @[Edges.scala 41:27]
    node T_2081 = and(T_2070, T_2080) @[Edges.scala 42:38]
    node T_2082 = or(T_2063, T_2081) @[Edges.scala 42:29]
    node T_2083 = and(T_2061, T_2071) @[Edges.scala 41:27]
    node T_2084 = and(T_2070, T_2083) @[Edges.scala 42:38]
    node T_2085 = or(T_2063, T_2084) @[Edges.scala 42:29]
    node T_2086 = and(T_2064, T_2073) @[Edges.scala 41:27]
    node T_2087 = and(T_2070, T_2086) @[Edges.scala 42:38]
    node T_2088 = or(T_2066, T_2087) @[Edges.scala 42:29]
    node T_2089 = and(T_2064, T_2071) @[Edges.scala 41:27]
    node T_2090 = and(T_2070, T_2089) @[Edges.scala 42:38]
    node T_2091 = or(T_2066, T_2090) @[Edges.scala 42:29]
    node T_2092 = and(T_2067, T_2073) @[Edges.scala 41:27]
    node T_2093 = and(T_2070, T_2092) @[Edges.scala 42:38]
    node T_2094 = or(T_2069, T_2093) @[Edges.scala 42:29]
    node T_2095 = and(T_2067, T_2071) @[Edges.scala 41:27]
    node T_2096 = and(T_2070, T_2095) @[Edges.scala 42:38]
    node T_2097 = or(T_2069, T_2096) @[Edges.scala 42:29]
    node T_2098 = cat(T_2079, T_2076) @[Cat.scala 20:58]
    node T_2099 = cat(T_2085, T_2082) @[Cat.scala 20:58]
    node T_2100 = cat(T_2099, T_2098) @[Cat.scala 20:58]
    node T_2101 = cat(T_2091, T_2088) @[Cat.scala 20:58]
    node T_2102 = cat(T_2097, T_2094) @[Cat.scala 20:58]
    node T_2103 = cat(T_2102, T_2101) @[Cat.scala 20:58]
    node T_2104 = cat(T_2103, T_2100) @[Cat.scala 20:58]
    node T_2105 = and(T_2035[io.in[0].a.bits.size], T_2104) @[WidthWidget.scala 66:35]
    node T_2107 = eq(T_2009, UInt<1>("h00")) @[WidthWidget.scala 68:32]
    node T_2108 = or(io.out[0].a.ready, T_2107) @[WidthWidget.scala 68:29]
    io.in[0].a.ready <= T_2108 @[WidthWidget.scala 68:16]
    node T_2109 = and(io.in[0].a.valid, T_2009) @[WidthWidget.scala 69:29]
    io.out[0].a.valid <= T_2109 @[WidthWidget.scala 69:17]
    io.out[0].a.bits <- io.in[0].a.bits @[WidthWidget.scala 70:16]
    io.out[0].a.bits.data <= T_2028[io.in[0].a.bits.size] @[WidthWidget.scala 71:30]
    io.out[0].a.bits.addr_hi <= T_1995 @[WidthWidget.scala 74:40]
    io.out[0].a.bits.mask <= T_2105 @[WidthWidget.scala 74:56]
    node T_2110 = bits(io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
    node T_2112 = bits(io.out[0].d.bits.size, 1, 0) @[OneHot.scala 46:21]
    node T_2113 = dshl(UInt<1>("h01"), T_2112) @[OneHot.scala 46:16]
    node T_2114 = bits(T_2113, 2, 0) @[OneHot.scala 46:41]
    node T_2116 = geq(io.out[0].d.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
    node T_2118 = bits(T_2114, 2, 2) @[Edges.scala 36:26]
    node T_2119 = bits(io.out[0].d.bits.addr_lo, 2, 2) @[Edges.scala 37:26]
    node T_2121 = eq(T_2119, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2122 = and(UInt<1>("h01"), T_2121) @[Edges.scala 41:27]
    node T_2123 = and(T_2118, T_2122) @[Edges.scala 42:38]
    node T_2124 = or(T_2116, T_2123) @[Edges.scala 42:29]
    node T_2125 = and(UInt<1>("h01"), T_2119) @[Edges.scala 41:27]
    node T_2126 = and(T_2118, T_2125) @[Edges.scala 42:38]
    node T_2127 = or(T_2116, T_2126) @[Edges.scala 42:29]
    node T_2128 = bits(T_2114, 1, 1) @[Edges.scala 36:26]
    node T_2129 = bits(io.out[0].d.bits.addr_lo, 1, 1) @[Edges.scala 37:26]
    node T_2131 = eq(T_2129, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2132 = and(T_2122, T_2131) @[Edges.scala 41:27]
    node T_2133 = and(T_2128, T_2132) @[Edges.scala 42:38]
    node T_2134 = or(T_2124, T_2133) @[Edges.scala 42:29]
    node T_2135 = and(T_2122, T_2129) @[Edges.scala 41:27]
    node T_2136 = and(T_2128, T_2135) @[Edges.scala 42:38]
    node T_2137 = or(T_2124, T_2136) @[Edges.scala 42:29]
    node T_2138 = and(T_2125, T_2131) @[Edges.scala 41:27]
    node T_2139 = and(T_2128, T_2138) @[Edges.scala 42:38]
    node T_2140 = or(T_2127, T_2139) @[Edges.scala 42:29]
    node T_2141 = and(T_2125, T_2129) @[Edges.scala 41:27]
    node T_2142 = and(T_2128, T_2141) @[Edges.scala 42:38]
    node T_2143 = or(T_2127, T_2142) @[Edges.scala 42:29]
    node T_2144 = bits(T_2114, 0, 0) @[Edges.scala 36:26]
    node T_2145 = bits(io.out[0].d.bits.addr_lo, 0, 0) @[Edges.scala 37:26]
    node T_2147 = eq(T_2145, UInt<1>("h00")) @[Edges.scala 38:20]
    node T_2148 = and(T_2132, T_2147) @[Edges.scala 41:27]
    node T_2149 = and(T_2144, T_2148) @[Edges.scala 42:38]
    node T_2150 = or(T_2134, T_2149) @[Edges.scala 42:29]
    node T_2151 = and(T_2132, T_2145) @[Edges.scala 41:27]
    node T_2152 = and(T_2144, T_2151) @[Edges.scala 42:38]
    node T_2153 = or(T_2134, T_2152) @[Edges.scala 42:29]
    node T_2154 = and(T_2135, T_2147) @[Edges.scala 41:27]
    node T_2155 = and(T_2144, T_2154) @[Edges.scala 42:38]
    node T_2156 = or(T_2137, T_2155) @[Edges.scala 42:29]
    node T_2157 = and(T_2135, T_2145) @[Edges.scala 41:27]
    node T_2158 = and(T_2144, T_2157) @[Edges.scala 42:38]
    node T_2159 = or(T_2137, T_2158) @[Edges.scala 42:29]
    node T_2160 = and(T_2138, T_2147) @[Edges.scala 41:27]
    node T_2161 = and(T_2144, T_2160) @[Edges.scala 42:38]
    node T_2162 = or(T_2140, T_2161) @[Edges.scala 42:29]
    node T_2163 = and(T_2138, T_2145) @[Edges.scala 41:27]
    node T_2164 = and(T_2144, T_2163) @[Edges.scala 42:38]
    node T_2165 = or(T_2140, T_2164) @[Edges.scala 42:29]
    node T_2166 = and(T_2141, T_2147) @[Edges.scala 41:27]
    node T_2167 = and(T_2144, T_2166) @[Edges.scala 42:38]
    node T_2168 = or(T_2143, T_2167) @[Edges.scala 42:29]
    node T_2169 = and(T_2141, T_2145) @[Edges.scala 41:27]
    node T_2170 = and(T_2144, T_2169) @[Edges.scala 42:38]
    node T_2171 = or(T_2143, T_2170) @[Edges.scala 42:29]
    node T_2172 = cat(T_2153, T_2150) @[Cat.scala 20:58]
    node T_2173 = cat(T_2159, T_2156) @[Cat.scala 20:58]
    node T_2174 = cat(T_2173, T_2172) @[Cat.scala 20:58]
    node T_2175 = cat(T_2165, T_2162) @[Cat.scala 20:58]
    node T_2176 = cat(T_2171, T_2168) @[Cat.scala 20:58]
    node T_2177 = cat(T_2176, T_2175) @[Cat.scala 20:58]
    node T_2178 = cat(T_2177, T_2174) @[Cat.scala 20:58]
    node T_2180 = bits(io.out[0].d.bits.data, 31, 0) @[WidthWidget.scala 99:55]
    node T_2181 = bits(io.out[0].d.bits.data, 63, 32) @[WidthWidget.scala 99:55]
    wire T_2187 : UInt<32>[2] @[WidthWidget.scala 99:44]
    T_2187 is invalid @[WidthWidget.scala 99:44]
    T_2187[0] <= T_2180 @[WidthWidget.scala 99:44]
    T_2187[1] <= T_2181 @[WidthWidget.scala 99:44]
    node T_2189 = bits(T_2178, 3, 0) @[WidthWidget.scala 100:55]
    node T_2190 = bits(T_2178, 7, 4) @[WidthWidget.scala 100:55]
    wire T_2196 : UInt<4>[2] @[WidthWidget.scala 100:44]
    T_2196 is invalid @[WidthWidget.scala 100:44]
    T_2196[0] <= T_2189 @[WidthWidget.scala 100:44]
    T_2196[1] <= T_2190 @[WidthWidget.scala 100:44]
    node T_2200 = asUInt(asSInt(UInt<2>("h03"))) @[WidthWidget.scala 101:76]
    reg T_2201 : UInt<2>, clk with : (reset => (reset, T_2200))
    node T_2203 = neq(T_2196[0], UInt<1>("h00")) @[WidthWidget.scala 102:36]
    node T_2205 = neq(T_2196[1], UInt<1>("h00")) @[WidthWidget.scala 102:36]
    node T_2207 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_2208 = dshl(T_2207, io.out[0].d.bits.size) @[package.scala 11:71]
    node T_2209 = bits(T_2208, 2, 0) @[package.scala 11:76]
    node T_2210 = not(T_2209) @[package.scala 11:40]
    node T_2211 = shr(T_2210, 2) @[WidthWidget.scala 105:56]
    node T_2213 = bits(T_2211, 0, 0) @[WidthWidget.scala 106:82]
    node T_2215 = eq(T_2213, UInt<1>("h00")) @[WidthWidget.scala 106:74]
    node T_2216 = bits(T_2201, 1, 1) @[WidthWidget.scala 108:25]
    node T_2217 = cat(T_2215, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_2218 = shl(T_2201, 1) @[WidthWidget.scala 109:69]
    node T_2219 = mux(T_2216, T_2217, T_2218) @[WidthWidget.scala 109:27]
    node T_2220 = bits(T_2219, 1, 1) @[WidthWidget.scala 110:28]
    node T_2222 = eq(T_2110, UInt<1>("h00")) @[WidthWidget.scala 110:41]
    node T_2223 = or(T_2220, T_2222) @[WidthWidget.scala 110:38]
    node T_2224 = and(io.in[0].d.ready, io.in[0].d.valid) @[Decoupled.scala 21:42]
    when T_2224 : @[WidthWidget.scala 111:25]
      T_2201 <= T_2219 @[WidthWidget.scala 112:16]
      node T_2226 = eq(T_2110, UInt<1>("h00")) @[WidthWidget.scala 113:15]
      when T_2226 : @[WidthWidget.scala 113:25]
        node T_2228 = asUInt(asSInt(UInt<2>("h03"))) @[WidthWidget.scala 113:61]
        T_2201 <= T_2228 @[WidthWidget.scala 113:34]
        skip @[WidthWidget.scala 113:25]
      skip @[WidthWidget.scala 111:25]
    node T_2229 = cat(T_2205, T_2203) @[Cat.scala 20:58]
    node T_2230 = and(T_2229, T_2219) @[WidthWidget.scala 116:39]
    node T_2231 = bits(T_2230, 0, 0) @[Mux.scala 20:36]
    node T_2232 = bits(T_2230, 1, 1) @[Mux.scala 20:36]
    node T_2234 = mux(T_2231, T_2187[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2236 = mux(T_2232, T_2187[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2238 = or(T_2234, T_2236) @[Mux.scala 18:72]
    wire T_2239 : UInt<32>
    T_2239 is invalid
    T_2239 <= T_2238 @[Mux.scala 18:72]
    node T_2240 = bits(T_2230, 0, 0) @[Mux.scala 20:36]
    node T_2241 = bits(T_2230, 1, 1) @[Mux.scala 20:36]
    node T_2243 = mux(T_2240, T_2196[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2245 = mux(T_2241, T_2196[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2247 = or(T_2243, T_2245) @[Mux.scala 18:72]
    wire T_2248 : UInt<4>
    T_2248 is invalid
    T_2248 <= T_2247 @[Mux.scala 18:72]
    node T_2249 = and(io.in[0].d.ready, T_2223) @[WidthWidget.scala 120:29]
    io.out[0].d.ready <= T_2249 @[WidthWidget.scala 120:16]
    io.in[0].d.valid <= io.out[0].d.valid @[WidthWidget.scala 121:17]
    io.in[0].d.bits <- io.out[0].d.bits @[WidthWidget.scala 122:16]
    io.in[0].d.bits.data <= T_2239 @[WidthWidget.scala 123:30]
    io.in[0].b.valid <= UInt<1>("h00") @[WidthWidget.scala 163:18]
    io.in[0].c.ready <= UInt<1>("h01") @[WidthWidget.scala 164:18]
    io.in[0].e.ready <= UInt<1>("h01") @[WidthWidget.scala 165:18]
    io.out[0].b.ready <= UInt<1>("h01") @[WidthWidget.scala 166:19]
    io.out[0].c.valid <= UInt<1>("h00") @[WidthWidget.scala 167:19]
    io.out[0].e.valid <= UInt<1>("h00") @[WidthWidget.scala 168:19]
    
  module TLFragmenter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1], out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}[1]}
    
    io is invalid
    reg acknum : UInt<5>, clk with : (reset => (reset, UInt<5>("h00")))
    reg dOrig : UInt, clk
    node dFragnum = bits(io.out[0].d.bits.source, 4, 0) @[Fragmenter.scala 146:37]
    node dFirst = eq(acknum, UInt<1>("h00")) @[Fragmenter.scala 147:25]
    node T_1971 = bits(io.out[0].d.bits.size, 1, 0) @[OneHot.scala 46:21]
    node T_1972 = dshl(UInt<1>("h01"), T_1971) @[OneHot.scala 46:16]
    node dsizeOH = bits(T_1972, 3, 0) @[OneHot.scala 46:41]
    node T_1974 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_1975 = dshl(T_1974, io.out[0].d.bits.size) @[package.scala 11:71]
    node T_1976 = bits(T_1975, 2, 0) @[package.scala 11:76]
    node dsizeOH1 = not(T_1976) @[package.scala 11:40]
    node dHasData = bits(io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
    node acknum_fragment = shl(dFragnum, 0) @[Fragmenter.scala 153:36]
    node acknum_size = shr(dsizeOH1, 3) @[Fragmenter.scala 154:32]
    node T_1978 = eq(io.out[0].d.valid, UInt<1>("h00")) @[Fragmenter.scala 155:13]
    node T_1979 = and(acknum_fragment, acknum_size) @[Fragmenter.scala 155:46]
    node T_1981 = eq(T_1979, UInt<1>("h00")) @[Fragmenter.scala 155:61]
    node T_1982 = or(T_1978, T_1981) @[Fragmenter.scala 155:26]
    node T_1983 = or(T_1982, reset) @[Fragmenter.scala 155:12]
    node T_1985 = eq(T_1983, UInt<1>("h00")) @[Fragmenter.scala 155:12]
    when T_1985 : @[Fragmenter.scala 155:12]
      printf(clk, UInt<1>(1), "Assertion failed\n    at Fragmenter.scala:155 assert (!out.d.valid || (acknum_fragment & acknum_size) === UInt(0))\n") @[Fragmenter.scala 155:12]
      stop(clk, UInt<1>(1), 1) @[Fragmenter.scala 155:12]
      skip @[Fragmenter.scala 155:12]
    node T_1987 = mux(dHasData, acknum_size, UInt<1>("h00")) @[Fragmenter.scala 156:46]
    node dFirst_acknum = or(acknum_fragment, T_1987) @[Fragmenter.scala 156:41]
    node T_1989 = shr(dsizeOH, 3) @[Fragmenter.scala 157:56]
    node ack_decrement = mux(dHasData, UInt<1>("h01"), T_1989) @[Fragmenter.scala 157:28]
    node T_1990 = shl(dFragnum, 3) @[Fragmenter.scala 159:43]
    node T_1991 = or(T_1990, dsizeOH1) @[Fragmenter.scala 159:65]
    node T_1992 = shl(T_1991, 1) @[package.scala 10:40]
    node T_1994 = or(T_1992, UInt<1>("h01")) @[package.scala 10:45]
    node T_1995 = xor(T_1994, T_1991) @[package.scala 10:56]
    node T_1996 = bits(T_1995, 8, 8) @[OneHot.scala 22:18]
    node T_1997 = bits(T_1995, 7, 0) @[OneHot.scala 23:18]
    node T_1999 = neq(T_1996, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2000 = or(T_1996, T_1997) @[OneHot.scala 24:28]
    node T_2001 = bits(T_2000, 7, 4) @[OneHot.scala 22:18]
    node T_2002 = bits(T_2000, 3, 0) @[OneHot.scala 23:18]
    node T_2004 = neq(T_2001, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2005 = or(T_2001, T_2002) @[OneHot.scala 24:28]
    node T_2006 = bits(T_2005, 3, 2) @[OneHot.scala 22:18]
    node T_2007 = bits(T_2005, 1, 0) @[OneHot.scala 23:18]
    node T_2009 = neq(T_2006, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2010 = or(T_2006, T_2007) @[OneHot.scala 24:28]
    node T_2011 = bits(T_2010, 1, 1) @[CircuitMath.scala 21:8]
    node T_2012 = cat(T_2009, T_2011) @[Cat.scala 20:58]
    node T_2013 = cat(T_2004, T_2012) @[Cat.scala 20:58]
    node dFirst_size = cat(T_1999, T_2013) @[Cat.scala 20:58]
    node T_2014 = and(io.out[0].d.ready, io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_2014 : @[Fragmenter.scala 161:25]
      node T_2015 = sub(acknum, ack_decrement) @[Fragmenter.scala 162:51]
      node T_2016 = tail(T_2015, 1) @[Fragmenter.scala 162:51]
      node T_2017 = mux(dFirst, dFirst_acknum, T_2016) @[Fragmenter.scala 162:20]
      acknum <= T_2017 @[Fragmenter.scala 162:14]
      when dFirst : @[Fragmenter.scala 163:21]
        dOrig <= dFirst_size @[Fragmenter.scala 163:29]
        skip @[Fragmenter.scala 163:21]
      skip @[Fragmenter.scala 161:25]
    node T_2019 = eq(dHasData, UInt<1>("h00")) @[Fragmenter.scala 167:16]
    node T_2021 = neq(dFragnum, UInt<1>("h00")) @[Fragmenter.scala 167:39]
    node drop = and(T_2019, T_2021) @[Fragmenter.scala 167:26]
    node T_2022 = or(io.in[0].d.ready, drop) @[Fragmenter.scala 168:31]
    io.out[0].d.ready <= T_2022 @[Fragmenter.scala 168:17]
    node T_2024 = eq(drop, UInt<1>("h00")) @[Fragmenter.scala 169:35]
    node T_2025 = and(io.out[0].d.valid, T_2024) @[Fragmenter.scala 169:32]
    io.in[0].d.valid <= T_2025 @[Fragmenter.scala 169:17]
    io.in[0].d.bits <- io.out[0].d.bits @[Fragmenter.scala 170:17]
    node T_2026 = shr(io.out[0].d.bits.source, 5) @[Fragmenter.scala 171:43]
    io.in[0].d.bits.source <= T_2026 @[Fragmenter.scala 171:22]
    node T_2027 = mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 172:28]
    io.in[0].d.bits.size <= T_2027 @[Fragmenter.scala 172:22]
    node T_2029 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_2030 = dshl(T_2029, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_2031 = bits(T_2030, 2, 0) @[package.scala 11:76]
    node T_2032 = not(T_2031) @[package.scala 11:40]
    node T_2033 = bits(io.in[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
    node T_2034 = bits(io.in[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
    node T_2036 = neq(T_2034, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_2038 = eq(T_2036, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_2039 = or(T_2033, T_2034) @[Edges.scala 63:32]
    node T_2040 = bits(T_2039, 3, 2) @[Edges.scala 61:22]
    node T_2041 = bits(T_2039, 1, 0) @[Edges.scala 62:22]
    node T_2043 = neq(T_2041, UInt<1>("h00")) @[Edges.scala 63:17]
    node T_2045 = eq(T_2043, UInt<1>("h00")) @[Edges.scala 63:13]
    node T_2046 = or(T_2040, T_2041) @[Edges.scala 63:32]
    node T_2047 = bits(T_2046, 0, 0) @[Edges.scala 58:14]
    node T_2048 = not(T_2047) @[Edges.scala 58:9]
    node T_2049 = cat(T_2045, T_2048) @[Cat.scala 20:58]
    node T_2050 = cat(T_2038, T_2049) @[Cat.scala 20:58]
    node T_2051 = not(T_2032) @[Edges.scala 66:39]
    node T_2052 = and(T_2050, T_2051) @[Edges.scala 66:37]
    node T_2053 = cat(io.in[0].a.bits.addr_hi, T_2052) @[Cat.scala 20:58]
    node T_2055 = xor(T_2053, UInt<1>("h00")) @[Parameters.scala 89:31]
    node T_2056 = cvt(T_2055) @[Parameters.scala 89:49]
    node T_2058 = and(T_2056, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:52]
    node T_2059 = asSInt(T_2058) @[Parameters.scala 89:52]
    node T_2061 = eq(T_2059, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
    wire find : UInt<1>[1] @[Parameters.scala 229:36]
    find is invalid @[Parameters.scala 229:36]
    find[0] <= T_2061 @[Parameters.scala 229:36]
    node T_2068 = eq(UInt<3>("h05"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2069 = mux(T_2068, UInt<2>("h03"), UInt<2>("h03")) @[Mux.scala 46:16]
    node T_2070 = eq(UInt<3>("h04"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2071 = mux(T_2070, UInt<2>("h03"), T_2069) @[Mux.scala 46:16]
    node T_2072 = eq(UInt<2>("h03"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2073 = mux(T_2072, UInt<2>("h03"), T_2071) @[Mux.scala 46:16]
    node T_2074 = eq(UInt<2>("h02"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2075 = mux(T_2074, UInt<2>("h03"), T_2073) @[Mux.scala 46:16]
    node T_2076 = eq(UInt<1>("h01"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node T_2077 = mux(T_2076, UInt<2>("h03"), T_2075) @[Mux.scala 46:16]
    node T_2078 = eq(UInt<1>("h00"), io.in[0].a.bits.opcode) @[Mux.scala 46:19]
    node limit = mux(T_2078, UInt<2>("h03"), T_2077) @[Mux.scala 46:16]
    node T_2079 = gt(io.in[0].a.bits.size, limit) @[Fragmenter.scala 210:27]
    node aFrag = mux(T_2079, limit, io.in[0].a.bits.size) @[Fragmenter.scala 210:20]
    node T_2081 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
    node T_2082 = dshl(T_2081, io.in[0].a.bits.size) @[package.scala 11:71]
    node T_2083 = bits(T_2082, 7, 0) @[package.scala 11:76]
    node aOrigOH1 = not(T_2083) @[package.scala 11:40]
    node T_2085 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
    node T_2086 = dshl(T_2085, aFrag) @[package.scala 11:71]
    node T_2087 = bits(T_2086, 2, 0) @[package.scala 11:76]
    node aFragOH1 = not(T_2087) @[package.scala 11:40]
    node T_2088 = bits(io.in[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
    node aHasData = eq(T_2088, UInt<1>("h00")) @[Edges.scala 125:28]
    node aMask = mux(aHasData, UInt<1>("h00"), aFragOH1) @[Fragmenter.scala 214:20]
    reg gennum : UInt<5>, clk with : (reset => (reset, UInt<5>("h00")))
    node aFirst = eq(gennum, UInt<1>("h00")) @[Fragmenter.scala 217:25]
    node T_2093 = shr(aOrigOH1, 3) @[Fragmenter.scala 218:44]
    node T_2095 = sub(gennum, UInt<1>("h01")) @[Fragmenter.scala 218:75]
    node T_2096 = tail(T_2095, 1) @[Fragmenter.scala 218:75]
    node old_gennum1 = mux(aFirst, T_2093, T_2096) @[Fragmenter.scala 218:26]
    node T_2097 = not(old_gennum1) @[Fragmenter.scala 219:24]
    node T_2098 = shr(aMask, 3) @[Fragmenter.scala 219:46]
    node T_2099 = or(T_2097, T_2098) @[Fragmenter.scala 219:37]
    node new_gennum = not(T_2099) @[Fragmenter.scala 219:22]
    node T_2100 = shr(old_gennum1, 0) @[Fragmenter.scala 220:36]
    node T_2101 = not(T_2100) @[Fragmenter.scala 220:22]
    node T_2102 = shr(aFragOH1, 3) @[Fragmenter.scala 220:80]
    node T_2103 = or(T_2101, T_2102) @[Fragmenter.scala 220:68]
    node aFragnum = not(T_2103) @[Fragmenter.scala 220:20]
    node T_2104 = and(io.out[0].a.ready, io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_2104 : @[Fragmenter.scala 222:25]
      gennum <= new_gennum @[Fragmenter.scala 222:34]
      skip @[Fragmenter.scala 222:25]
    node T_2106 = eq(aHasData, UInt<1>("h00")) @[Fragmenter.scala 224:17]
    node T_2108 = neq(aFragnum, UInt<1>("h00")) @[Fragmenter.scala 224:39]
    node delay = and(T_2106, T_2108) @[Fragmenter.scala 224:27]
    io.out[0].a.valid <= io.in[0].a.valid @[Fragmenter.scala 225:17]
    node T_2110 = eq(delay, UInt<1>("h00")) @[Fragmenter.scala 226:34]
    node T_2111 = and(io.out[0].a.ready, T_2110) @[Fragmenter.scala 226:31]
    io.in[0].a.ready <= T_2111 @[Fragmenter.scala 226:16]
    io.out[0].a.bits <- io.in[0].a.bits @[Fragmenter.scala 227:16]
    node T_2112 = not(aFragnum) @[Fragmenter.scala 228:48]
    node T_2113 = shl(T_2112, 0) @[Fragmenter.scala 228:58]
    node T_2114 = shr(aOrigOH1, 3) @[Fragmenter.scala 228:100]
    node T_2115 = and(T_2113, T_2114) @[Fragmenter.scala 228:89]
    node T_2116 = or(io.in[0].a.bits.addr_hi, T_2115) @[Fragmenter.scala 228:45]
    io.out[0].a.bits.addr_hi <= T_2116 @[Fragmenter.scala 228:24]
    node T_2117 = cat(io.in[0].a.bits.source, aFragnum) @[Cat.scala 20:58]
    io.out[0].a.bits.source <= T_2117 @[Fragmenter.scala 229:23]
    io.out[0].a.bits.size <= aFrag @[Fragmenter.scala 230:21]
    io.in[0].b.valid <= UInt<1>("h00") @[Fragmenter.scala 233:16]
    io.in[0].c.ready <= UInt<1>("h01") @[Fragmenter.scala 234:16]
    io.in[0].e.ready <= UInt<1>("h01") @[Fragmenter.scala 235:16]
    io.out[0].b.ready <= UInt<1>("h01") @[Fragmenter.scala 236:17]
    io.out[0].c.valid <= UInt<1>("h00") @[Fragmenter.scala 237:17]
    io.out[0].e.valid <= UInt<1>("h00") @[Fragmenter.scala 238:17]
    
  module RVCExpander : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<32>, out : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>}, rvc : UInt<1>}
    
    io is invalid
    node T_8 = bits(io.in, 1, 0) @[rvc.scala 160:20]
    node T_10 = neq(T_8, UInt<2>("h03")) @[rvc.scala 160:26]
    io.rvc <= T_10 @[rvc.scala 160:12]
    node T_11 = bits(io.in, 12, 5) @[rvc.scala 51:22]
    node T_13 = neq(T_11, UInt<1>("h00")) @[rvc.scala 51:29]
    node T_16 = mux(T_13, UInt<7>("h013"), UInt<7>("h01f")) @[rvc.scala 51:20]
    node T_17 = bits(io.in, 10, 7) @[rvc.scala 32:26]
    node T_18 = bits(io.in, 12, 11) @[rvc.scala 32:35]
    node T_19 = bits(io.in, 5, 5) @[rvc.scala 32:45]
    node T_20 = bits(io.in, 6, 6) @[rvc.scala 32:51]
    node T_22 = cat(T_20, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_23 = cat(T_17, T_18) @[Cat.scala 20:58]
    node T_24 = cat(T_23, T_19) @[Cat.scala 20:58]
    node T_25 = cat(T_24, T_22) @[Cat.scala 20:58]
    node T_29 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_30 = cat(UInt<2>("h01"), T_29) @[Cat.scala 20:58]
    node T_31 = cat(T_30, T_16) @[Cat.scala 20:58]
    node T_32 = cat(T_25, UInt<5>("h02")) @[Cat.scala 20:58]
    node T_33 = cat(T_32, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_34 = cat(T_33, T_31) @[Cat.scala 20:58]
    node T_36 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_37 = cat(UInt<2>("h01"), T_36) @[Cat.scala 20:58]
    node T_40 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_41 = cat(UInt<2>("h01"), T_40) @[Cat.scala 20:58]
    node T_42 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_49 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_49 is invalid @[rvc.scala 19:19]
    T_49.bits <= T_34 @[rvc.scala 20:14]
    T_49.rd <= T_37 @[rvc.scala 21:12]
    T_49.rs1 <= UInt<5>("h02") @[rvc.scala 22:13]
    T_49.rs2 <= T_41 @[rvc.scala 23:13]
    T_49.rs3 <= T_42 @[rvc.scala 24:13]
    node T_55 = bits(io.in, 6, 5) @[rvc.scala 34:20]
    node T_56 = bits(io.in, 12, 10) @[rvc.scala 34:28]
    node T_58 = cat(T_55, T_56) @[Cat.scala 20:58]
    node T_59 = cat(T_58, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_61 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_62 = cat(UInt<2>("h01"), T_61) @[Cat.scala 20:58]
    node T_65 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_66 = cat(UInt<2>("h01"), T_65) @[Cat.scala 20:58]
    node T_68 = cat(T_66, UInt<7>("h07")) @[Cat.scala 20:58]
    node T_69 = cat(T_59, T_62) @[Cat.scala 20:58]
    node T_70 = cat(T_69, UInt<3>("h03")) @[Cat.scala 20:58]
    node T_71 = cat(T_70, T_68) @[Cat.scala 20:58]
    node T_73 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_74 = cat(UInt<2>("h01"), T_73) @[Cat.scala 20:58]
    node T_76 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_77 = cat(UInt<2>("h01"), T_76) @[Cat.scala 20:58]
    node T_79 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_80 = cat(UInt<2>("h01"), T_79) @[Cat.scala 20:58]
    node T_81 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_88 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_88 is invalid @[rvc.scala 19:19]
    T_88.bits <= T_71 @[rvc.scala 20:14]
    T_88.rd <= T_74 @[rvc.scala 21:12]
    T_88.rs1 <= T_77 @[rvc.scala 22:13]
    T_88.rs2 <= T_80 @[rvc.scala 23:13]
    T_88.rs3 <= T_81 @[rvc.scala 24:13]
    node T_94 = bits(io.in, 5, 5) @[rvc.scala 33:20]
    node T_95 = bits(io.in, 12, 10) @[rvc.scala 33:26]
    node T_96 = bits(io.in, 6, 6) @[rvc.scala 33:36]
    node T_98 = cat(T_96, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_99 = cat(T_94, T_95) @[Cat.scala 20:58]
    node T_100 = cat(T_99, T_98) @[Cat.scala 20:58]
    node T_102 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_103 = cat(UInt<2>("h01"), T_102) @[Cat.scala 20:58]
    node T_106 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_107 = cat(UInt<2>("h01"), T_106) @[Cat.scala 20:58]
    node T_109 = cat(T_107, UInt<7>("h03")) @[Cat.scala 20:58]
    node T_110 = cat(T_100, T_103) @[Cat.scala 20:58]
    node T_111 = cat(T_110, UInt<3>("h02")) @[Cat.scala 20:58]
    node T_112 = cat(T_111, T_109) @[Cat.scala 20:58]
    node T_114 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_115 = cat(UInt<2>("h01"), T_114) @[Cat.scala 20:58]
    node T_117 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_118 = cat(UInt<2>("h01"), T_117) @[Cat.scala 20:58]
    node T_120 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_121 = cat(UInt<2>("h01"), T_120) @[Cat.scala 20:58]
    node T_122 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_129 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_129 is invalid @[rvc.scala 19:19]
    T_129.bits <= T_112 @[rvc.scala 20:14]
    T_129.rd <= T_115 @[rvc.scala 21:12]
    T_129.rs1 <= T_118 @[rvc.scala 22:13]
    T_129.rs2 <= T_121 @[rvc.scala 23:13]
    T_129.rs3 <= T_122 @[rvc.scala 24:13]
    node T_135 = bits(io.in, 6, 5) @[rvc.scala 34:20]
    node T_136 = bits(io.in, 12, 10) @[rvc.scala 34:28]
    node T_138 = cat(T_135, T_136) @[Cat.scala 20:58]
    node T_139 = cat(T_138, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_141 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_142 = cat(UInt<2>("h01"), T_141) @[Cat.scala 20:58]
    node T_145 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_146 = cat(UInt<2>("h01"), T_145) @[Cat.scala 20:58]
    node T_148 = cat(T_146, UInt<7>("h03")) @[Cat.scala 20:58]
    node T_149 = cat(T_139, T_142) @[Cat.scala 20:58]
    node T_150 = cat(T_149, UInt<3>("h03")) @[Cat.scala 20:58]
    node T_151 = cat(T_150, T_148) @[Cat.scala 20:58]
    node T_153 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_154 = cat(UInt<2>("h01"), T_153) @[Cat.scala 20:58]
    node T_156 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_157 = cat(UInt<2>("h01"), T_156) @[Cat.scala 20:58]
    node T_159 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_160 = cat(UInt<2>("h01"), T_159) @[Cat.scala 20:58]
    node T_161 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_168 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_168 is invalid @[rvc.scala 19:19]
    T_168.bits <= T_151 @[rvc.scala 20:14]
    T_168.rd <= T_154 @[rvc.scala 21:12]
    T_168.rs1 <= T_157 @[rvc.scala 22:13]
    T_168.rs2 <= T_160 @[rvc.scala 23:13]
    T_168.rs3 <= T_161 @[rvc.scala 24:13]
    node T_174 = bits(io.in, 5, 5) @[rvc.scala 33:20]
    node T_175 = bits(io.in, 12, 10) @[rvc.scala 33:26]
    node T_176 = bits(io.in, 6, 6) @[rvc.scala 33:36]
    node T_178 = cat(T_176, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_179 = cat(T_174, T_175) @[Cat.scala 20:58]
    node T_180 = cat(T_179, T_178) @[Cat.scala 20:58]
    node T_181 = shr(T_180, 5) @[rvc.scala 61:32]
    node T_183 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_184 = cat(UInt<2>("h01"), T_183) @[Cat.scala 20:58]
    node T_186 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_187 = cat(UInt<2>("h01"), T_186) @[Cat.scala 20:58]
    node T_189 = bits(io.in, 5, 5) @[rvc.scala 33:20]
    node T_190 = bits(io.in, 12, 10) @[rvc.scala 33:26]
    node T_191 = bits(io.in, 6, 6) @[rvc.scala 33:36]
    node T_193 = cat(T_191, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_194 = cat(T_189, T_190) @[Cat.scala 20:58]
    node T_195 = cat(T_194, T_193) @[Cat.scala 20:58]
    node T_196 = bits(T_195, 4, 0) @[rvc.scala 61:66]
    node T_198 = cat(UInt<3>("h02"), T_196) @[Cat.scala 20:58]
    node T_199 = cat(T_198, UInt<7>("h02f")) @[Cat.scala 20:58]
    node T_200 = cat(T_181, T_184) @[Cat.scala 20:58]
    node T_201 = cat(T_200, T_187) @[Cat.scala 20:58]
    node T_202 = cat(T_201, T_199) @[Cat.scala 20:58]
    node T_204 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_205 = cat(UInt<2>("h01"), T_204) @[Cat.scala 20:58]
    node T_207 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_208 = cat(UInt<2>("h01"), T_207) @[Cat.scala 20:58]
    node T_210 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_211 = cat(UInt<2>("h01"), T_210) @[Cat.scala 20:58]
    node T_212 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_219 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_219 is invalid @[rvc.scala 19:19]
    T_219.bits <= T_202 @[rvc.scala 20:14]
    T_219.rd <= T_205 @[rvc.scala 21:12]
    T_219.rs1 <= T_208 @[rvc.scala 22:13]
    T_219.rs2 <= T_211 @[rvc.scala 23:13]
    T_219.rs3 <= T_212 @[rvc.scala 24:13]
    node T_225 = bits(io.in, 6, 5) @[rvc.scala 34:20]
    node T_226 = bits(io.in, 12, 10) @[rvc.scala 34:28]
    node T_228 = cat(T_225, T_226) @[Cat.scala 20:58]
    node T_229 = cat(T_228, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_230 = shr(T_229, 5) @[rvc.scala 64:30]
    node T_232 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_233 = cat(UInt<2>("h01"), T_232) @[Cat.scala 20:58]
    node T_235 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_236 = cat(UInt<2>("h01"), T_235) @[Cat.scala 20:58]
    node T_238 = bits(io.in, 6, 5) @[rvc.scala 34:20]
    node T_239 = bits(io.in, 12, 10) @[rvc.scala 34:28]
    node T_241 = cat(T_238, T_239) @[Cat.scala 20:58]
    node T_242 = cat(T_241, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_243 = bits(T_242, 4, 0) @[rvc.scala 64:64]
    node T_245 = cat(UInt<3>("h03"), T_243) @[Cat.scala 20:58]
    node T_246 = cat(T_245, UInt<7>("h027")) @[Cat.scala 20:58]
    node T_247 = cat(T_230, T_233) @[Cat.scala 20:58]
    node T_248 = cat(T_247, T_236) @[Cat.scala 20:58]
    node T_249 = cat(T_248, T_246) @[Cat.scala 20:58]
    node T_251 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_252 = cat(UInt<2>("h01"), T_251) @[Cat.scala 20:58]
    node T_254 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_255 = cat(UInt<2>("h01"), T_254) @[Cat.scala 20:58]
    node T_257 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_258 = cat(UInt<2>("h01"), T_257) @[Cat.scala 20:58]
    node T_259 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_266 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_266 is invalid @[rvc.scala 19:19]
    T_266.bits <= T_249 @[rvc.scala 20:14]
    T_266.rd <= T_252 @[rvc.scala 21:12]
    T_266.rs1 <= T_255 @[rvc.scala 22:13]
    T_266.rs2 <= T_258 @[rvc.scala 23:13]
    T_266.rs3 <= T_259 @[rvc.scala 24:13]
    node T_272 = bits(io.in, 5, 5) @[rvc.scala 33:20]
    node T_273 = bits(io.in, 12, 10) @[rvc.scala 33:26]
    node T_274 = bits(io.in, 6, 6) @[rvc.scala 33:36]
    node T_276 = cat(T_274, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_277 = cat(T_272, T_273) @[Cat.scala 20:58]
    node T_278 = cat(T_277, T_276) @[Cat.scala 20:58]
    node T_279 = shr(T_278, 5) @[rvc.scala 63:29]
    node T_281 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_282 = cat(UInt<2>("h01"), T_281) @[Cat.scala 20:58]
    node T_284 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_285 = cat(UInt<2>("h01"), T_284) @[Cat.scala 20:58]
    node T_287 = bits(io.in, 5, 5) @[rvc.scala 33:20]
    node T_288 = bits(io.in, 12, 10) @[rvc.scala 33:26]
    node T_289 = bits(io.in, 6, 6) @[rvc.scala 33:36]
    node T_291 = cat(T_289, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_292 = cat(T_287, T_288) @[Cat.scala 20:58]
    node T_293 = cat(T_292, T_291) @[Cat.scala 20:58]
    node T_294 = bits(T_293, 4, 0) @[rvc.scala 63:63]
    node T_296 = cat(UInt<3>("h02"), T_294) @[Cat.scala 20:58]
    node T_297 = cat(T_296, UInt<7>("h023")) @[Cat.scala 20:58]
    node T_298 = cat(T_279, T_282) @[Cat.scala 20:58]
    node T_299 = cat(T_298, T_285) @[Cat.scala 20:58]
    node T_300 = cat(T_299, T_297) @[Cat.scala 20:58]
    node T_302 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_303 = cat(UInt<2>("h01"), T_302) @[Cat.scala 20:58]
    node T_305 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_306 = cat(UInt<2>("h01"), T_305) @[Cat.scala 20:58]
    node T_308 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_309 = cat(UInt<2>("h01"), T_308) @[Cat.scala 20:58]
    node T_310 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_317 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_317 is invalid @[rvc.scala 19:19]
    T_317.bits <= T_300 @[rvc.scala 20:14]
    T_317.rd <= T_303 @[rvc.scala 21:12]
    T_317.rs1 <= T_306 @[rvc.scala 22:13]
    T_317.rs2 <= T_309 @[rvc.scala 23:13]
    T_317.rs3 <= T_310 @[rvc.scala 24:13]
    node T_323 = bits(io.in, 6, 5) @[rvc.scala 34:20]
    node T_324 = bits(io.in, 12, 10) @[rvc.scala 34:28]
    node T_326 = cat(T_323, T_324) @[Cat.scala 20:58]
    node T_327 = cat(T_326, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_328 = shr(T_327, 5) @[rvc.scala 62:29]
    node T_330 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_331 = cat(UInt<2>("h01"), T_330) @[Cat.scala 20:58]
    node T_333 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_334 = cat(UInt<2>("h01"), T_333) @[Cat.scala 20:58]
    node T_336 = bits(io.in, 6, 5) @[rvc.scala 34:20]
    node T_337 = bits(io.in, 12, 10) @[rvc.scala 34:28]
    node T_339 = cat(T_336, T_337) @[Cat.scala 20:58]
    node T_340 = cat(T_339, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_341 = bits(T_340, 4, 0) @[rvc.scala 62:63]
    node T_343 = cat(UInt<3>("h03"), T_341) @[Cat.scala 20:58]
    node T_344 = cat(T_343, UInt<7>("h023")) @[Cat.scala 20:58]
    node T_345 = cat(T_328, T_331) @[Cat.scala 20:58]
    node T_346 = cat(T_345, T_334) @[Cat.scala 20:58]
    node T_347 = cat(T_346, T_344) @[Cat.scala 20:58]
    node T_349 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_350 = cat(UInt<2>("h01"), T_349) @[Cat.scala 20:58]
    node T_352 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_353 = cat(UInt<2>("h01"), T_352) @[Cat.scala 20:58]
    node T_355 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_356 = cat(UInt<2>("h01"), T_355) @[Cat.scala 20:58]
    node T_357 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_364 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_364 is invalid @[rvc.scala 19:19]
    T_364.bits <= T_347 @[rvc.scala 20:14]
    T_364.rd <= T_350 @[rvc.scala 21:12]
    T_364.rs1 <= T_353 @[rvc.scala 22:13]
    T_364.rs2 <= T_356 @[rvc.scala 23:13]
    T_364.rs3 <= T_357 @[rvc.scala 24:13]
    node T_370 = bits(io.in, 12, 12) @[rvc.scala 41:30]
    node T_371 = bits(T_370, 0, 0) @[Bitwise.scala 33:15]
    node T_374 = mux(T_371, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
    node T_375 = bits(io.in, 6, 2) @[rvc.scala 41:38]
    node T_376 = cat(T_374, T_375) @[Cat.scala 20:58]
    node T_377 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_379 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_381 = cat(T_379, UInt<7>("h013")) @[Cat.scala 20:58]
    node T_382 = cat(T_376, T_377) @[Cat.scala 20:58]
    node T_383 = cat(T_382, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_384 = cat(T_383, T_381) @[Cat.scala 20:58]
    node T_385 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_386 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_388 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_389 = cat(UInt<2>("h01"), T_388) @[Cat.scala 20:58]
    node T_390 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_397 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_397 is invalid @[rvc.scala 19:19]
    T_397.bits <= T_384 @[rvc.scala 20:14]
    T_397.rd <= T_385 @[rvc.scala 21:12]
    T_397.rs1 <= T_386 @[rvc.scala 22:13]
    T_397.rs2 <= T_389 @[rvc.scala 23:13]
    T_397.rs3 <= T_390 @[rvc.scala 24:13]
    node T_403 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_405 = neq(T_403, UInt<1>("h00")) @[rvc.scala 75:24]
    node T_408 = mux(T_405, UInt<7>("h01b"), UInt<7>("h01f")) @[rvc.scala 75:20]
    node T_409 = bits(io.in, 12, 12) @[rvc.scala 41:30]
    node T_410 = bits(T_409, 0, 0) @[Bitwise.scala 33:15]
    node T_413 = mux(T_410, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
    node T_414 = bits(io.in, 6, 2) @[rvc.scala 41:38]
    node T_415 = cat(T_413, T_414) @[Cat.scala 20:58]
    node T_416 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_418 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_419 = cat(T_418, T_408) @[Cat.scala 20:58]
    node T_420 = cat(T_415, T_416) @[Cat.scala 20:58]
    node T_421 = cat(T_420, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_422 = cat(T_421, T_419) @[Cat.scala 20:58]
    node T_423 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_424 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_426 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_427 = cat(UInt<2>("h01"), T_426) @[Cat.scala 20:58]
    node T_428 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_435 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_435 is invalid @[rvc.scala 19:19]
    T_435.bits <= T_422 @[rvc.scala 20:14]
    T_435.rd <= T_423 @[rvc.scala 21:12]
    T_435.rs1 <= T_424 @[rvc.scala 22:13]
    T_435.rs2 <= T_427 @[rvc.scala 23:13]
    T_435.rs3 <= T_428 @[rvc.scala 24:13]
    node T_441 = bits(io.in, 12, 12) @[rvc.scala 41:30]
    node T_442 = bits(T_441, 0, 0) @[Bitwise.scala 33:15]
    node T_445 = mux(T_442, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
    node T_446 = bits(io.in, 6, 2) @[rvc.scala 41:38]
    node T_447 = cat(T_445, T_446) @[Cat.scala 20:58]
    node T_450 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_452 = cat(T_450, UInt<7>("h013")) @[Cat.scala 20:58]
    node T_453 = cat(T_447, UInt<5>("h00")) @[Cat.scala 20:58]
    node T_454 = cat(T_453, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_455 = cat(T_454, T_452) @[Cat.scala 20:58]
    node T_456 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_459 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_460 = cat(UInt<2>("h01"), T_459) @[Cat.scala 20:58]
    node T_461 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_468 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_468 is invalid @[rvc.scala 19:19]
    T_468.bits <= T_455 @[rvc.scala 20:14]
    T_468.rd <= T_456 @[rvc.scala 21:12]
    T_468.rs1 <= UInt<5>("h00") @[rvc.scala 22:13]
    T_468.rs2 <= T_460 @[rvc.scala 23:13]
    T_468.rs3 <= T_461 @[rvc.scala 24:13]
    node T_474 = bits(io.in, 12, 12) @[rvc.scala 41:30]
    node T_475 = bits(T_474, 0, 0) @[Bitwise.scala 33:15]
    node T_478 = mux(T_475, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
    node T_479 = bits(io.in, 6, 2) @[rvc.scala 41:38]
    node T_480 = cat(T_478, T_479) @[Cat.scala 20:58]
    node T_482 = neq(T_480, UInt<1>("h00")) @[rvc.scala 88:29]
    node T_485 = mux(T_482, UInt<7>("h037"), UInt<7>("h03f")) @[rvc.scala 88:20]
    node T_486 = bits(io.in, 12, 12) @[rvc.scala 39:30]
    node T_487 = bits(T_486, 0, 0) @[Bitwise.scala 33:15]
    node T_490 = mux(T_487, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 33:12]
    node T_491 = bits(io.in, 6, 2) @[rvc.scala 39:38]
    node T_493 = cat(T_490, T_491) @[Cat.scala 20:58]
    node T_494 = cat(T_493, UInt<12>("h00")) @[Cat.scala 20:58]
    node T_495 = bits(T_494, 31, 12) @[rvc.scala 89:31]
    node T_496 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_497 = cat(T_495, T_496) @[Cat.scala 20:58]
    node T_498 = cat(T_497, T_485) @[Cat.scala 20:58]
    node T_499 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_500 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_502 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_503 = cat(UInt<2>("h01"), T_502) @[Cat.scala 20:58]
    node T_504 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_511 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_511 is invalid @[rvc.scala 19:19]
    T_511.bits <= T_498 @[rvc.scala 20:14]
    T_511.rd <= T_499 @[rvc.scala 21:12]
    T_511.rs1 <= T_500 @[rvc.scala 22:13]
    T_511.rs2 <= T_503 @[rvc.scala 23:13]
    T_511.rs3 <= T_504 @[rvc.scala 24:13]
    node T_517 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_519 = eq(T_517, UInt<5>("h00")) @[rvc.scala 90:14]
    node T_520 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_522 = eq(T_520, UInt<5>("h02")) @[rvc.scala 90:27]
    node T_523 = or(T_519, T_522) @[rvc.scala 90:21]
    node T_524 = bits(io.in, 12, 12) @[rvc.scala 41:30]
    node T_525 = bits(T_524, 0, 0) @[Bitwise.scala 33:15]
    node T_528 = mux(T_525, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
    node T_529 = bits(io.in, 6, 2) @[rvc.scala 41:38]
    node T_530 = cat(T_528, T_529) @[Cat.scala 20:58]
    node T_532 = neq(T_530, UInt<1>("h00")) @[rvc.scala 84:29]
    node T_535 = mux(T_532, UInt<7>("h013"), UInt<7>("h01f")) @[rvc.scala 84:20]
    node T_536 = bits(io.in, 12, 12) @[rvc.scala 40:34]
    node T_537 = bits(T_536, 0, 0) @[Bitwise.scala 33:15]
    node T_540 = mux(T_537, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12]
    node T_541 = bits(io.in, 4, 3) @[rvc.scala 40:42]
    node T_542 = bits(io.in, 5, 5) @[rvc.scala 40:50]
    node T_543 = bits(io.in, 2, 2) @[rvc.scala 40:56]
    node T_544 = bits(io.in, 6, 6) @[rvc.scala 40:62]
    node T_546 = cat(T_543, T_544) @[Cat.scala 20:58]
    node T_547 = cat(T_546, UInt<4>("h00")) @[Cat.scala 20:58]
    node T_548 = cat(T_540, T_541) @[Cat.scala 20:58]
    node T_549 = cat(T_548, T_542) @[Cat.scala 20:58]
    node T_550 = cat(T_549, T_547) @[Cat.scala 20:58]
    node T_551 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_553 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_554 = cat(T_553, T_535) @[Cat.scala 20:58]
    node T_555 = cat(T_550, T_551) @[Cat.scala 20:58]
    node T_556 = cat(T_555, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_557 = cat(T_556, T_554) @[Cat.scala 20:58]
    node T_558 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_559 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_561 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_562 = cat(UInt<2>("h01"), T_561) @[Cat.scala 20:58]
    node T_563 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_570 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_570 is invalid @[rvc.scala 19:19]
    T_570.bits <= T_557 @[rvc.scala 20:14]
    T_570.rd <= T_558 @[rvc.scala 21:12]
    T_570.rs1 <= T_559 @[rvc.scala 22:13]
    T_570.rs2 <= T_562 @[rvc.scala 23:13]
    T_570.rs3 <= T_563 @[rvc.scala 24:13]
    node T_576 = mux(T_523, T_570, T_511) @[rvc.scala 90:10]
    node T_582 = bits(io.in, 12, 12) @[rvc.scala 44:20]
    node T_583 = bits(io.in, 6, 2) @[rvc.scala 44:27]
    node T_584 = cat(T_582, T_583) @[Cat.scala 20:58]
    node T_586 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_587 = cat(UInt<2>("h01"), T_586) @[Cat.scala 20:58]
    node T_590 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_591 = cat(UInt<2>("h01"), T_590) @[Cat.scala 20:58]
    node T_593 = cat(T_591, UInt<7>("h013")) @[Cat.scala 20:58]
    node T_594 = cat(T_584, T_587) @[Cat.scala 20:58]
    node T_595 = cat(T_594, UInt<3>("h05")) @[Cat.scala 20:58]
    node T_596 = cat(T_595, T_593) @[Cat.scala 20:58]
    node T_597 = bits(io.in, 12, 12) @[rvc.scala 44:20]
    node T_598 = bits(io.in, 6, 2) @[rvc.scala 44:27]
    node T_599 = cat(T_597, T_598) @[Cat.scala 20:58]
    node T_601 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_602 = cat(UInt<2>("h01"), T_601) @[Cat.scala 20:58]
    node T_605 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_606 = cat(UInt<2>("h01"), T_605) @[Cat.scala 20:58]
    node T_608 = cat(T_606, UInt<7>("h013")) @[Cat.scala 20:58]
    node T_609 = cat(T_599, T_602) @[Cat.scala 20:58]
    node T_610 = cat(T_609, UInt<3>("h05")) @[Cat.scala 20:58]
    node T_611 = cat(T_610, T_608) @[Cat.scala 20:58]
    node T_613 = or(T_611, UInt<31>("h040000000")) @[rvc.scala 97:23]
    node T_614 = bits(io.in, 12, 12) @[rvc.scala 41:30]
    node T_615 = bits(T_614, 0, 0) @[Bitwise.scala 33:15]
    node T_618 = mux(T_615, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
    node T_619 = bits(io.in, 6, 2) @[rvc.scala 41:38]
    node T_620 = cat(T_618, T_619) @[Cat.scala 20:58]
    node T_622 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_623 = cat(UInt<2>("h01"), T_622) @[Cat.scala 20:58]
    node T_626 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_627 = cat(UInt<2>("h01"), T_626) @[Cat.scala 20:58]
    node T_629 = cat(T_627, UInt<7>("h013")) @[Cat.scala 20:58]
    node T_630 = cat(T_620, T_623) @[Cat.scala 20:58]
    node T_631 = cat(T_630, UInt<3>("h07")) @[Cat.scala 20:58]
    node T_632 = cat(T_631, T_629) @[Cat.scala 20:58]
    node T_641 = bits(io.in, 12, 12) @[rvc.scala 100:70]
    node T_642 = bits(io.in, 6, 5) @[rvc.scala 100:77]
    node T_643 = cat(T_641, T_642) @[Cat.scala 20:58]
    node T_645 = and(T_643, UInt<2>("h03")) @[Package.scala 18:26]
    node T_647 = geq(T_643, UInt<3>("h04")) @[Package.scala 19:17]
    node T_649 = and(T_645, UInt<1>("h01")) @[Package.scala 18:26]
    node T_651 = geq(T_645, UInt<2>("h02")) @[Package.scala 19:17]
    node T_653 = and(T_649, UInt<1>("h00")) @[Package.scala 18:26]
    node T_655 = geq(T_649, UInt<1>("h01")) @[Package.scala 19:17]
    node T_656 = mux(T_655, UInt<2>("h03"), UInt<2>("h02")) @[Package.scala 19:12]
    node T_658 = and(T_649, UInt<1>("h00")) @[Package.scala 18:26]
    node T_660 = geq(T_649, UInt<1>("h01")) @[Package.scala 19:17]
    node T_661 = mux(T_660, UInt<1>("h00"), UInt<1>("h00")) @[Package.scala 19:12]
    node T_662 = mux(T_651, T_656, T_661) @[Package.scala 19:12]
    node T_664 = and(T_645, UInt<1>("h01")) @[Package.scala 18:26]
    node T_666 = geq(T_645, UInt<2>("h02")) @[Package.scala 19:17]
    node T_668 = and(T_664, UInt<1>("h00")) @[Package.scala 18:26]
    node T_670 = geq(T_664, UInt<1>("h01")) @[Package.scala 19:17]
    node T_671 = mux(T_670, UInt<3>("h07"), UInt<3>("h06")) @[Package.scala 19:12]
    node T_673 = and(T_664, UInt<1>("h00")) @[Package.scala 18:26]
    node T_675 = geq(T_664, UInt<1>("h01")) @[Package.scala 19:17]
    node T_676 = mux(T_675, UInt<3>("h04"), UInt<1>("h00")) @[Package.scala 19:12]
    node T_677 = mux(T_666, T_671, T_676) @[Package.scala 19:12]
    node T_678 = mux(T_647, T_662, T_677) @[Package.scala 19:12]
    node T_679 = bits(io.in, 6, 5) @[rvc.scala 101:24]
    node T_681 = eq(T_679, UInt<1>("h00")) @[rvc.scala 101:30]
    node T_684 = mux(T_681, UInt<31>("h040000000"), UInt<1>("h00")) @[rvc.scala 101:22]
    node T_685 = bits(io.in, 12, 12) @[rvc.scala 102:24]
    node T_688 = mux(T_685, UInt<7>("h03b"), UInt<7>("h033")) @[rvc.scala 102:22]
    node T_690 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_691 = cat(UInt<2>("h01"), T_690) @[Cat.scala 20:58]
    node T_693 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_694 = cat(UInt<2>("h01"), T_693) @[Cat.scala 20:58]
    node T_696 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_697 = cat(UInt<2>("h01"), T_696) @[Cat.scala 20:58]
    node T_698 = cat(T_697, T_688) @[Cat.scala 20:58]
    node T_699 = cat(T_691, T_694) @[Cat.scala 20:58]
    node T_700 = cat(T_699, T_678) @[Cat.scala 20:58]
    node T_701 = cat(T_700, T_698) @[Cat.scala 20:58]
    node T_702 = or(T_701, T_684) @[rvc.scala 103:43]
    node T_703 = bits(io.in, 11, 10) @[rvc.scala 105:42]
    node T_705 = and(T_703, UInt<1>("h01")) @[Package.scala 18:26]
    node T_707 = geq(T_703, UInt<2>("h02")) @[Package.scala 19:17]
    node T_709 = and(T_705, UInt<1>("h00")) @[Package.scala 18:26]
    node T_711 = geq(T_705, UInt<1>("h01")) @[Package.scala 19:17]
    node T_712 = mux(T_711, T_702, T_632) @[Package.scala 19:12]
    node T_714 = and(T_705, UInt<1>("h00")) @[Package.scala 18:26]
    node T_716 = geq(T_705, UInt<1>("h01")) @[Package.scala 19:17]
    node T_717 = mux(T_716, T_613, T_596) @[Package.scala 19:12]
    node T_718 = mux(T_707, T_712, T_717) @[Package.scala 19:12]
    node T_720 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_721 = cat(UInt<2>("h01"), T_720) @[Cat.scala 20:58]
    node T_723 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_724 = cat(UInt<2>("h01"), T_723) @[Cat.scala 20:58]
    node T_726 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_727 = cat(UInt<2>("h01"), T_726) @[Cat.scala 20:58]
    node T_728 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_735 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_735 is invalid @[rvc.scala 19:19]
    T_735.bits <= T_718 @[rvc.scala 20:14]
    T_735.rd <= T_721 @[rvc.scala 21:12]
    T_735.rs1 <= T_724 @[rvc.scala 22:13]
    T_735.rs2 <= T_727 @[rvc.scala 23:13]
    T_735.rs3 <= T_728 @[rvc.scala 24:13]
    node T_741 = bits(io.in, 12, 12) @[rvc.scala 42:28]
    node T_742 = bits(T_741, 0, 0) @[Bitwise.scala 33:15]
    node T_745 = mux(T_742, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12]
    node T_746 = bits(io.in, 8, 8) @[rvc.scala 42:36]
    node T_747 = bits(io.in, 10, 9) @[rvc.scala 42:42]
    node T_748 = bits(io.in, 6, 6) @[rvc.scala 42:51]
    node T_749 = bits(io.in, 7, 7) @[rvc.scala 42:57]
    node T_750 = bits(io.in, 2, 2) @[rvc.scala 42:63]
    node T_751 = bits(io.in, 11, 11) @[rvc.scala 42:69]
    node T_752 = bits(io.in, 5, 3) @[rvc.scala 42:76]
    node T_754 = cat(T_752, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_755 = cat(T_750, T_751) @[Cat.scala 20:58]
    node T_756 = cat(T_755, T_754) @[Cat.scala 20:58]
    node T_757 = cat(T_748, T_749) @[Cat.scala 20:58]
    node T_758 = cat(T_745, T_746) @[Cat.scala 20:58]
    node T_759 = cat(T_758, T_747) @[Cat.scala 20:58]
    node T_760 = cat(T_759, T_757) @[Cat.scala 20:58]
    node T_761 = cat(T_760, T_756) @[Cat.scala 20:58]
    node T_762 = bits(T_761, 20, 20) @[rvc.scala 92:26]
    node T_763 = bits(io.in, 12, 12) @[rvc.scala 42:28]
    node T_764 = bits(T_763, 0, 0) @[Bitwise.scala 33:15]
    node T_767 = mux(T_764, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12]
    node T_768 = bits(io.in, 8, 8) @[rvc.scala 42:36]
    node T_769 = bits(io.in, 10, 9) @[rvc.scala 42:42]
    node T_770 = bits(io.in, 6, 6) @[rvc.scala 42:51]
    node T_771 = bits(io.in, 7, 7) @[rvc.scala 42:57]
    node T_772 = bits(io.in, 2, 2) @[rvc.scala 42:63]
    node T_773 = bits(io.in, 11, 11) @[rvc.scala 42:69]
    node T_774 = bits(io.in, 5, 3) @[rvc.scala 42:76]
    node T_776 = cat(T_774, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_777 = cat(T_772, T_773) @[Cat.scala 20:58]
    node T_778 = cat(T_777, T_776) @[Cat.scala 20:58]
    node T_779 = cat(T_770, T_771) @[Cat.scala 20:58]
    node T_780 = cat(T_767, T_768) @[Cat.scala 20:58]
    node T_781 = cat(T_780, T_769) @[Cat.scala 20:58]
    node T_782 = cat(T_781, T_779) @[Cat.scala 20:58]
    node T_783 = cat(T_782, T_778) @[Cat.scala 20:58]
    node T_784 = bits(T_783, 10, 1) @[rvc.scala 92:36]
    node T_785 = bits(io.in, 12, 12) @[rvc.scala 42:28]
    node T_786 = bits(T_785, 0, 0) @[Bitwise.scala 33:15]
    node T_789 = mux(T_786, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12]
    node T_790 = bits(io.in, 8, 8) @[rvc.scala 42:36]
    node T_791 = bits(io.in, 10, 9) @[rvc.scala 42:42]
    node T_792 = bits(io.in, 6, 6) @[rvc.scala 42:51]
    node T_793 = bits(io.in, 7, 7) @[rvc.scala 42:57]
    node T_794 = bits(io.in, 2, 2) @[rvc.scala 42:63]
    node T_795 = bits(io.in, 11, 11) @[rvc.scala 42:69]
    node T_796 = bits(io.in, 5, 3) @[rvc.scala 42:76]
    node T_798 = cat(T_796, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_799 = cat(T_794, T_795) @[Cat.scala 20:58]
    node T_800 = cat(T_799, T_798) @[Cat.scala 20:58]
    node T_801 = cat(T_792, T_793) @[Cat.scala 20:58]
    node T_802 = cat(T_789, T_790) @[Cat.scala 20:58]
    node T_803 = cat(T_802, T_791) @[Cat.scala 20:58]
    node T_804 = cat(T_803, T_801) @[Cat.scala 20:58]
    node T_805 = cat(T_804, T_800) @[Cat.scala 20:58]
    node T_806 = bits(T_805, 11, 11) @[rvc.scala 92:48]
    node T_807 = bits(io.in, 12, 12) @[rvc.scala 42:28]
    node T_808 = bits(T_807, 0, 0) @[Bitwise.scala 33:15]
    node T_811 = mux(T_808, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12]
    node T_812 = bits(io.in, 8, 8) @[rvc.scala 42:36]
    node T_813 = bits(io.in, 10, 9) @[rvc.scala 42:42]
    node T_814 = bits(io.in, 6, 6) @[rvc.scala 42:51]
    node T_815 = bits(io.in, 7, 7) @[rvc.scala 42:57]
    node T_816 = bits(io.in, 2, 2) @[rvc.scala 42:63]
    node T_817 = bits(io.in, 11, 11) @[rvc.scala 42:69]
    node T_818 = bits(io.in, 5, 3) @[rvc.scala 42:76]
    node T_820 = cat(T_818, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_821 = cat(T_816, T_817) @[Cat.scala 20:58]
    node T_822 = cat(T_821, T_820) @[Cat.scala 20:58]
    node T_823 = cat(T_814, T_815) @[Cat.scala 20:58]
    node T_824 = cat(T_811, T_812) @[Cat.scala 20:58]
    node T_825 = cat(T_824, T_813) @[Cat.scala 20:58]
    node T_826 = cat(T_825, T_823) @[Cat.scala 20:58]
    node T_827 = cat(T_826, T_822) @[Cat.scala 20:58]
    node T_828 = bits(T_827, 19, 12) @[rvc.scala 92:58]
    node T_831 = cat(T_828, UInt<5>("h00")) @[Cat.scala 20:58]
    node T_832 = cat(T_831, UInt<7>("h06f")) @[Cat.scala 20:58]
    node T_833 = cat(T_762, T_784) @[Cat.scala 20:58]
    node T_834 = cat(T_833, T_806) @[Cat.scala 20:58]
    node T_835 = cat(T_834, T_832) @[Cat.scala 20:58]
    node T_838 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_839 = cat(UInt<2>("h01"), T_838) @[Cat.scala 20:58]
    node T_841 = bits(io.in, 4, 2) @[rvc.scala 29:30]
    node T_842 = cat(UInt<2>("h01"), T_841) @[Cat.scala 20:58]
    node T_843 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_850 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_850 is invalid @[rvc.scala 19:19]
    T_850.bits <= T_835 @[rvc.scala 20:14]
    T_850.rd <= UInt<5>("h00") @[rvc.scala 21:12]
    T_850.rs1 <= T_839 @[rvc.scala 22:13]
    T_850.rs2 <= T_842 @[rvc.scala 23:13]
    T_850.rs3 <= T_843 @[rvc.scala 24:13]
    node T_856 = bits(io.in, 12, 12) @[rvc.scala 43:27]
    node T_857 = bits(T_856, 0, 0) @[Bitwise.scala 33:15]
    node T_860 = mux(T_857, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12]
    node T_861 = bits(io.in, 6, 5) @[rvc.scala 43:35]
    node T_862 = bits(io.in, 2, 2) @[rvc.scala 43:43]
    node T_863 = bits(io.in, 11, 10) @[rvc.scala 43:49]
    node T_864 = bits(io.in, 4, 3) @[rvc.scala 43:59]
    node T_866 = cat(T_863, T_864) @[Cat.scala 20:58]
    node T_867 = cat(T_866, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_868 = cat(T_860, T_861) @[Cat.scala 20:58]
    node T_869 = cat(T_868, T_862) @[Cat.scala 20:58]
    node T_870 = cat(T_869, T_867) @[Cat.scala 20:58]
    node T_871 = bits(T_870, 12, 12) @[rvc.scala 93:29]
    node T_872 = bits(io.in, 12, 12) @[rvc.scala 43:27]
    node T_873 = bits(T_872, 0, 0) @[Bitwise.scala 33:15]
    node T_876 = mux(T_873, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12]
    node T_877 = bits(io.in, 6, 5) @[rvc.scala 43:35]
    node T_878 = bits(io.in, 2, 2) @[rvc.scala 43:43]
    node T_879 = bits(io.in, 11, 10) @[rvc.scala 43:49]
    node T_880 = bits(io.in, 4, 3) @[rvc.scala 43:59]
    node T_882 = cat(T_879, T_880) @[Cat.scala 20:58]
    node T_883 = cat(T_882, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_884 = cat(T_876, T_877) @[Cat.scala 20:58]
    node T_885 = cat(T_884, T_878) @[Cat.scala 20:58]
    node T_886 = cat(T_885, T_883) @[Cat.scala 20:58]
    node T_887 = bits(T_886, 10, 5) @[rvc.scala 93:39]
    node T_890 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_891 = cat(UInt<2>("h01"), T_890) @[Cat.scala 20:58]
    node T_893 = bits(io.in, 12, 12) @[rvc.scala 43:27]
    node T_894 = bits(T_893, 0, 0) @[Bitwise.scala 33:15]
    node T_897 = mux(T_894, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12]
    node T_898 = bits(io.in, 6, 5) @[rvc.scala 43:35]
    node T_899 = bits(io.in, 2, 2) @[rvc.scala 43:43]
    node T_900 = bits(io.in, 11, 10) @[rvc.scala 43:49]
    node T_901 = bits(io.in, 4, 3) @[rvc.scala 43:59]
    node T_903 = cat(T_900, T_901) @[Cat.scala 20:58]
    node T_904 = cat(T_903, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_905 = cat(T_897, T_898) @[Cat.scala 20:58]
    node T_906 = cat(T_905, T_899) @[Cat.scala 20:58]
    node T_907 = cat(T_906, T_904) @[Cat.scala 20:58]
    node T_908 = bits(T_907, 4, 1) @[rvc.scala 93:72]
    node T_909 = bits(io.in, 12, 12) @[rvc.scala 43:27]
    node T_910 = bits(T_909, 0, 0) @[Bitwise.scala 33:15]
    node T_913 = mux(T_910, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12]
    node T_914 = bits(io.in, 6, 5) @[rvc.scala 43:35]
    node T_915 = bits(io.in, 2, 2) @[rvc.scala 43:43]
    node T_916 = bits(io.in, 11, 10) @[rvc.scala 43:49]
    node T_917 = bits(io.in, 4, 3) @[rvc.scala 43:59]
    node T_919 = cat(T_916, T_917) @[Cat.scala 20:58]
    node T_920 = cat(T_919, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_921 = cat(T_913, T_914) @[Cat.scala 20:58]
    node T_922 = cat(T_921, T_915) @[Cat.scala 20:58]
    node T_923 = cat(T_922, T_920) @[Cat.scala 20:58]
    node T_924 = bits(T_923, 11, 11) @[rvc.scala 93:83]
    node T_926 = cat(T_924, UInt<7>("h063")) @[Cat.scala 20:58]
    node T_927 = cat(UInt<3>("h00"), T_908) @[Cat.scala 20:58]
    node T_928 = cat(T_927, T_926) @[Cat.scala 20:58]
    node T_929 = cat(UInt<5>("h00"), T_891) @[Cat.scala 20:58]
    node T_930 = cat(T_871, T_887) @[Cat.scala 20:58]
    node T_931 = cat(T_930, T_929) @[Cat.scala 20:58]
    node T_932 = cat(T_931, T_928) @[Cat.scala 20:58]
    node T_934 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_935 = cat(UInt<2>("h01"), T_934) @[Cat.scala 20:58]
    node T_937 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_938 = cat(UInt<2>("h01"), T_937) @[Cat.scala 20:58]
    node T_940 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_947 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_947 is invalid @[rvc.scala 19:19]
    T_947.bits <= T_932 @[rvc.scala 20:14]
    T_947.rd <= T_935 @[rvc.scala 21:12]
    T_947.rs1 <= T_938 @[rvc.scala 22:13]
    T_947.rs2 <= UInt<5>("h00") @[rvc.scala 23:13]
    T_947.rs3 <= T_940 @[rvc.scala 24:13]
    node T_953 = bits(io.in, 12, 12) @[rvc.scala 43:27]
    node T_954 = bits(T_953, 0, 0) @[Bitwise.scala 33:15]
    node T_957 = mux(T_954, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12]
    node T_958 = bits(io.in, 6, 5) @[rvc.scala 43:35]
    node T_959 = bits(io.in, 2, 2) @[rvc.scala 43:43]
    node T_960 = bits(io.in, 11, 10) @[rvc.scala 43:49]
    node T_961 = bits(io.in, 4, 3) @[rvc.scala 43:59]
    node T_963 = cat(T_960, T_961) @[Cat.scala 20:58]
    node T_964 = cat(T_963, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_965 = cat(T_957, T_958) @[Cat.scala 20:58]
    node T_966 = cat(T_965, T_959) @[Cat.scala 20:58]
    node T_967 = cat(T_966, T_964) @[Cat.scala 20:58]
    node T_968 = bits(T_967, 12, 12) @[rvc.scala 94:29]
    node T_969 = bits(io.in, 12, 12) @[rvc.scala 43:27]
    node T_970 = bits(T_969, 0, 0) @[Bitwise.scala 33:15]
    node T_973 = mux(T_970, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12]
    node T_974 = bits(io.in, 6, 5) @[rvc.scala 43:35]
    node T_975 = bits(io.in, 2, 2) @[rvc.scala 43:43]
    node T_976 = bits(io.in, 11, 10) @[rvc.scala 43:49]
    node T_977 = bits(io.in, 4, 3) @[rvc.scala 43:59]
    node T_979 = cat(T_976, T_977) @[Cat.scala 20:58]
    node T_980 = cat(T_979, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_981 = cat(T_973, T_974) @[Cat.scala 20:58]
    node T_982 = cat(T_981, T_975) @[Cat.scala 20:58]
    node T_983 = cat(T_982, T_980) @[Cat.scala 20:58]
    node T_984 = bits(T_983, 10, 5) @[rvc.scala 94:39]
    node T_987 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_988 = cat(UInt<2>("h01"), T_987) @[Cat.scala 20:58]
    node T_990 = bits(io.in, 12, 12) @[rvc.scala 43:27]
    node T_991 = bits(T_990, 0, 0) @[Bitwise.scala 33:15]
    node T_994 = mux(T_991, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12]
    node T_995 = bits(io.in, 6, 5) @[rvc.scala 43:35]
    node T_996 = bits(io.in, 2, 2) @[rvc.scala 43:43]
    node T_997 = bits(io.in, 11, 10) @[rvc.scala 43:49]
    node T_998 = bits(io.in, 4, 3) @[rvc.scala 43:59]
    node T_1000 = cat(T_997, T_998) @[Cat.scala 20:58]
    node T_1001 = cat(T_1000, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_1002 = cat(T_994, T_995) @[Cat.scala 20:58]
    node T_1003 = cat(T_1002, T_996) @[Cat.scala 20:58]
    node T_1004 = cat(T_1003, T_1001) @[Cat.scala 20:58]
    node T_1005 = bits(T_1004, 4, 1) @[rvc.scala 94:72]
    node T_1006 = bits(io.in, 12, 12) @[rvc.scala 43:27]
    node T_1007 = bits(T_1006, 0, 0) @[Bitwise.scala 33:15]
    node T_1010 = mux(T_1007, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12]
    node T_1011 = bits(io.in, 6, 5) @[rvc.scala 43:35]
    node T_1012 = bits(io.in, 2, 2) @[rvc.scala 43:43]
    node T_1013 = bits(io.in, 11, 10) @[rvc.scala 43:49]
    node T_1014 = bits(io.in, 4, 3) @[rvc.scala 43:59]
    node T_1016 = cat(T_1013, T_1014) @[Cat.scala 20:58]
    node T_1017 = cat(T_1016, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_1018 = cat(T_1010, T_1011) @[Cat.scala 20:58]
    node T_1019 = cat(T_1018, T_1012) @[Cat.scala 20:58]
    node T_1020 = cat(T_1019, T_1017) @[Cat.scala 20:58]
    node T_1021 = bits(T_1020, 11, 11) @[rvc.scala 94:83]
    node T_1023 = cat(T_1021, UInt<7>("h063")) @[Cat.scala 20:58]
    node T_1024 = cat(UInt<3>("h01"), T_1005) @[Cat.scala 20:58]
    node T_1025 = cat(T_1024, T_1023) @[Cat.scala 20:58]
    node T_1026 = cat(UInt<5>("h00"), T_988) @[Cat.scala 20:58]
    node T_1027 = cat(T_968, T_984) @[Cat.scala 20:58]
    node T_1028 = cat(T_1027, T_1026) @[Cat.scala 20:58]
    node T_1029 = cat(T_1028, T_1025) @[Cat.scala 20:58]
    node T_1032 = bits(io.in, 9, 7) @[rvc.scala 28:30]
    node T_1033 = cat(UInt<2>("h01"), T_1032) @[Cat.scala 20:58]
    node T_1035 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1042 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1042 is invalid @[rvc.scala 19:19]
    T_1042.bits <= T_1029 @[rvc.scala 20:14]
    T_1042.rd <= UInt<5>("h00") @[rvc.scala 21:12]
    T_1042.rs1 <= T_1033 @[rvc.scala 22:13]
    T_1042.rs2 <= UInt<5>("h00") @[rvc.scala 23:13]
    T_1042.rs3 <= T_1035 @[rvc.scala 24:13]
    node T_1048 = bits(io.in, 12, 12) @[rvc.scala 44:20]
    node T_1049 = bits(io.in, 6, 2) @[rvc.scala 44:27]
    node T_1050 = cat(T_1048, T_1049) @[Cat.scala 20:58]
    node T_1051 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1053 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1055 = cat(T_1053, UInt<7>("h013")) @[Cat.scala 20:58]
    node T_1056 = cat(T_1050, T_1051) @[Cat.scala 20:58]
    node T_1057 = cat(T_1056, UInt<3>("h01")) @[Cat.scala 20:58]
    node T_1058 = cat(T_1057, T_1055) @[Cat.scala 20:58]
    node T_1059 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1060 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1061 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1062 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1069 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1069 is invalid @[rvc.scala 19:19]
    T_1069.bits <= T_1058 @[rvc.scala 20:14]
    T_1069.rd <= T_1059 @[rvc.scala 21:12]
    T_1069.rs1 <= T_1060 @[rvc.scala 22:13]
    T_1069.rs2 <= T_1061 @[rvc.scala 23:13]
    T_1069.rs3 <= T_1062 @[rvc.scala 24:13]
    node T_1075 = bits(io.in, 4, 2) @[rvc.scala 36:22]
    node T_1076 = bits(io.in, 12, 12) @[rvc.scala 36:30]
    node T_1077 = bits(io.in, 6, 5) @[rvc.scala 36:37]
    node T_1079 = cat(T_1077, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1080 = cat(T_1075, T_1076) @[Cat.scala 20:58]
    node T_1081 = cat(T_1080, T_1079) @[Cat.scala 20:58]
    node T_1084 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1086 = cat(T_1084, UInt<7>("h07")) @[Cat.scala 20:58]
    node T_1087 = cat(T_1081, UInt<5>("h02")) @[Cat.scala 20:58]
    node T_1088 = cat(T_1087, UInt<3>("h03")) @[Cat.scala 20:58]
    node T_1089 = cat(T_1088, T_1086) @[Cat.scala 20:58]
    node T_1090 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1092 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1093 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1100 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1100 is invalid @[rvc.scala 19:19]
    T_1100.bits <= T_1089 @[rvc.scala 20:14]
    T_1100.rd <= T_1090 @[rvc.scala 21:12]
    T_1100.rs1 <= UInt<5>("h02") @[rvc.scala 22:13]
    T_1100.rs2 <= T_1092 @[rvc.scala 23:13]
    T_1100.rs3 <= T_1093 @[rvc.scala 24:13]
    node T_1106 = bits(io.in, 3, 2) @[rvc.scala 35:22]
    node T_1107 = bits(io.in, 12, 12) @[rvc.scala 35:30]
    node T_1108 = bits(io.in, 6, 4) @[rvc.scala 35:37]
    node T_1110 = cat(T_1108, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_1111 = cat(T_1106, T_1107) @[Cat.scala 20:58]
    node T_1112 = cat(T_1111, T_1110) @[Cat.scala 20:58]
    node T_1115 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1117 = cat(T_1115, UInt<7>("h03")) @[Cat.scala 20:58]
    node T_1118 = cat(T_1112, UInt<5>("h02")) @[Cat.scala 20:58]
    node T_1119 = cat(T_1118, UInt<3>("h02")) @[Cat.scala 20:58]
    node T_1120 = cat(T_1119, T_1117) @[Cat.scala 20:58]
    node T_1121 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1123 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1124 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1131 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1131 is invalid @[rvc.scala 19:19]
    T_1131.bits <= T_1120 @[rvc.scala 20:14]
    T_1131.rd <= T_1121 @[rvc.scala 21:12]
    T_1131.rs1 <= UInt<5>("h02") @[rvc.scala 22:13]
    T_1131.rs2 <= T_1123 @[rvc.scala 23:13]
    T_1131.rs3 <= T_1124 @[rvc.scala 24:13]
    node T_1137 = bits(io.in, 4, 2) @[rvc.scala 36:22]
    node T_1138 = bits(io.in, 12, 12) @[rvc.scala 36:30]
    node T_1139 = bits(io.in, 6, 5) @[rvc.scala 36:37]
    node T_1141 = cat(T_1139, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1142 = cat(T_1137, T_1138) @[Cat.scala 20:58]
    node T_1143 = cat(T_1142, T_1141) @[Cat.scala 20:58]
    node T_1146 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1148 = cat(T_1146, UInt<7>("h03")) @[Cat.scala 20:58]
    node T_1149 = cat(T_1143, UInt<5>("h02")) @[Cat.scala 20:58]
    node T_1150 = cat(T_1149, UInt<3>("h03")) @[Cat.scala 20:58]
    node T_1151 = cat(T_1150, T_1148) @[Cat.scala 20:58]
    node T_1152 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1154 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1155 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1162 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1162 is invalid @[rvc.scala 19:19]
    T_1162.bits <= T_1151 @[rvc.scala 20:14]
    T_1162.rd <= T_1152 @[rvc.scala 21:12]
    T_1162.rs1 <= UInt<5>("h02") @[rvc.scala 22:13]
    T_1162.rs2 <= T_1154 @[rvc.scala 23:13]
    T_1162.rs3 <= T_1155 @[rvc.scala 24:13]
    node T_1168 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1171 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1173 = cat(T_1171, UInt<7>("h033")) @[Cat.scala 20:58]
    node T_1174 = cat(T_1168, UInt<5>("h00")) @[Cat.scala 20:58]
    node T_1175 = cat(T_1174, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1176 = cat(T_1175, T_1173) @[Cat.scala 20:58]
    node T_1177 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1179 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1180 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1187 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1187 is invalid @[rvc.scala 19:19]
    T_1187.bits <= T_1176 @[rvc.scala 20:14]
    T_1187.rd <= T_1177 @[rvc.scala 21:12]
    T_1187.rs1 <= UInt<5>("h00") @[rvc.scala 22:13]
    T_1187.rs2 <= T_1179 @[rvc.scala 23:13]
    T_1187.rs3 <= T_1180 @[rvc.scala 24:13]
    node T_1193 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1194 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1196 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1198 = cat(T_1196, UInt<7>("h033")) @[Cat.scala 20:58]
    node T_1199 = cat(T_1193, T_1194) @[Cat.scala 20:58]
    node T_1200 = cat(T_1199, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1201 = cat(T_1200, T_1198) @[Cat.scala 20:58]
    node T_1202 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1203 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1204 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1205 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1212 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1212 is invalid @[rvc.scala 19:19]
    T_1212.bits <= T_1201 @[rvc.scala 20:14]
    T_1212.rd <= T_1202 @[rvc.scala 21:12]
    T_1212.rs1 <= T_1203 @[rvc.scala 22:13]
    T_1212.rs2 <= T_1204 @[rvc.scala 23:13]
    T_1212.rs3 <= T_1205 @[rvc.scala 24:13]
    node T_1218 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1219 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1223 = cat(UInt<5>("h00"), UInt<7>("h067")) @[Cat.scala 20:58]
    node T_1224 = cat(T_1218, T_1219) @[Cat.scala 20:58]
    node T_1225 = cat(T_1224, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1226 = cat(T_1225, T_1223) @[Cat.scala 20:58]
    node T_1227 = shr(T_1226, 7) @[rvc.scala 130:29]
    node T_1229 = cat(T_1227, UInt<7>("h01f")) @[Cat.scala 20:58]
    node T_1230 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1232 = neq(T_1230, UInt<1>("h00")) @[rvc.scala 131:37]
    node T_1233 = mux(T_1232, T_1226, T_1229) @[rvc.scala 131:33]
    node T_1235 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1236 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1237 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1244 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1244 is invalid @[rvc.scala 19:19]
    T_1244.bits <= T_1233 @[rvc.scala 20:14]
    T_1244.rd <= UInt<5>("h00") @[rvc.scala 21:12]
    T_1244.rs1 <= T_1235 @[rvc.scala 22:13]
    T_1244.rs2 <= T_1236 @[rvc.scala 23:13]
    T_1244.rs3 <= T_1237 @[rvc.scala 24:13]
    node T_1250 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1252 = neq(T_1250, UInt<1>("h00")) @[rvc.scala 132:27]
    node T_1253 = mux(T_1252, T_1187, T_1244) @[rvc.scala 132:22]
    node T_1259 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1260 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1264 = cat(UInt<5>("h01"), UInt<7>("h067")) @[Cat.scala 20:58]
    node T_1265 = cat(T_1259, T_1260) @[Cat.scala 20:58]
    node T_1266 = cat(T_1265, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1267 = cat(T_1266, T_1264) @[Cat.scala 20:58]
    node T_1268 = shr(T_1226, 7) @[rvc.scala 134:27]
    node T_1270 = cat(T_1268, UInt<7>("h073")) @[Cat.scala 20:58]
    node T_1272 = or(T_1270, UInt<21>("h0100000")) @[rvc.scala 134:47]
    node T_1273 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1275 = neq(T_1273, UInt<1>("h00")) @[rvc.scala 135:37]
    node T_1276 = mux(T_1275, T_1267, T_1272) @[rvc.scala 135:33]
    node T_1278 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1279 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1280 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1287 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1287 is invalid @[rvc.scala 19:19]
    T_1287.bits <= T_1276 @[rvc.scala 20:14]
    T_1287.rd <= UInt<5>("h01") @[rvc.scala 21:12]
    T_1287.rs1 <= T_1278 @[rvc.scala 22:13]
    T_1287.rs2 <= T_1279 @[rvc.scala 23:13]
    T_1287.rs3 <= T_1280 @[rvc.scala 24:13]
    node T_1293 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1295 = neq(T_1293, UInt<1>("h00")) @[rvc.scala 136:30]
    node T_1296 = mux(T_1295, T_1212, T_1287) @[rvc.scala 136:25]
    node T_1302 = bits(io.in, 12, 12) @[rvc.scala 137:12]
    node T_1303 = mux(T_1302, T_1296, T_1253) @[rvc.scala 137:10]
    node T_1309 = bits(io.in, 9, 7) @[rvc.scala 38:22]
    node T_1310 = bits(io.in, 12, 10) @[rvc.scala 38:30]
    node T_1312 = cat(T_1309, T_1310) @[Cat.scala 20:58]
    node T_1313 = cat(T_1312, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1314 = shr(T_1313, 5) @[rvc.scala 121:34]
    node T_1315 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1318 = bits(io.in, 9, 7) @[rvc.scala 38:22]
    node T_1319 = bits(io.in, 12, 10) @[rvc.scala 38:30]
    node T_1321 = cat(T_1318, T_1319) @[Cat.scala 20:58]
    node T_1322 = cat(T_1321, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1323 = bits(T_1322, 4, 0) @[rvc.scala 121:67]
    node T_1325 = cat(UInt<3>("h03"), T_1323) @[Cat.scala 20:58]
    node T_1326 = cat(T_1325, UInt<7>("h027")) @[Cat.scala 20:58]
    node T_1327 = cat(T_1314, T_1315) @[Cat.scala 20:58]
    node T_1328 = cat(T_1327, UInt<5>("h02")) @[Cat.scala 20:58]
    node T_1329 = cat(T_1328, T_1326) @[Cat.scala 20:58]
    node T_1330 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1332 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1333 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1340 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1340 is invalid @[rvc.scala 19:19]
    T_1340.bits <= T_1329 @[rvc.scala 20:14]
    T_1340.rd <= T_1330 @[rvc.scala 21:12]
    T_1340.rs1 <= UInt<5>("h02") @[rvc.scala 22:13]
    T_1340.rs2 <= T_1332 @[rvc.scala 23:13]
    T_1340.rs3 <= T_1333 @[rvc.scala 24:13]
    node T_1346 = bits(io.in, 8, 7) @[rvc.scala 37:22]
    node T_1347 = bits(io.in, 12, 9) @[rvc.scala 37:30]
    node T_1349 = cat(T_1346, T_1347) @[Cat.scala 20:58]
    node T_1350 = cat(T_1349, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_1351 = shr(T_1350, 5) @[rvc.scala 120:33]
    node T_1352 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1355 = bits(io.in, 8, 7) @[rvc.scala 37:22]
    node T_1356 = bits(io.in, 12, 9) @[rvc.scala 37:30]
    node T_1358 = cat(T_1355, T_1356) @[Cat.scala 20:58]
    node T_1359 = cat(T_1358, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_1360 = bits(T_1359, 4, 0) @[rvc.scala 120:66]
    node T_1362 = cat(UInt<3>("h02"), T_1360) @[Cat.scala 20:58]
    node T_1363 = cat(T_1362, UInt<7>("h023")) @[Cat.scala 20:58]
    node T_1364 = cat(T_1351, T_1352) @[Cat.scala 20:58]
    node T_1365 = cat(T_1364, UInt<5>("h02")) @[Cat.scala 20:58]
    node T_1366 = cat(T_1365, T_1363) @[Cat.scala 20:58]
    node T_1367 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1369 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1370 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1377 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1377 is invalid @[rvc.scala 19:19]
    T_1377.bits <= T_1366 @[rvc.scala 20:14]
    T_1377.rd <= T_1367 @[rvc.scala 21:12]
    T_1377.rs1 <= UInt<5>("h02") @[rvc.scala 22:13]
    T_1377.rs2 <= T_1369 @[rvc.scala 23:13]
    T_1377.rs3 <= T_1370 @[rvc.scala 24:13]
    node T_1383 = bits(io.in, 9, 7) @[rvc.scala 38:22]
    node T_1384 = bits(io.in, 12, 10) @[rvc.scala 38:30]
    node T_1386 = cat(T_1383, T_1384) @[Cat.scala 20:58]
    node T_1387 = cat(T_1386, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1388 = shr(T_1387, 5) @[rvc.scala 119:33]
    node T_1389 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1392 = bits(io.in, 9, 7) @[rvc.scala 38:22]
    node T_1393 = bits(io.in, 12, 10) @[rvc.scala 38:30]
    node T_1395 = cat(T_1392, T_1393) @[Cat.scala 20:58]
    node T_1396 = cat(T_1395, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_1397 = bits(T_1396, 4, 0) @[rvc.scala 119:66]
    node T_1399 = cat(UInt<3>("h03"), T_1397) @[Cat.scala 20:58]
    node T_1400 = cat(T_1399, UInt<7>("h023")) @[Cat.scala 20:58]
    node T_1401 = cat(T_1388, T_1389) @[Cat.scala 20:58]
    node T_1402 = cat(T_1401, UInt<5>("h02")) @[Cat.scala 20:58]
    node T_1403 = cat(T_1402, T_1400) @[Cat.scala 20:58]
    node T_1404 = bits(io.in, 11, 7) @[rvc.scala 31:13]
    node T_1406 = bits(io.in, 6, 2) @[rvc.scala 30:14]
    node T_1407 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1414 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1414 is invalid @[rvc.scala 19:19]
    T_1414.bits <= T_1403 @[rvc.scala 20:14]
    T_1414.rd <= T_1404 @[rvc.scala 21:12]
    T_1414.rs1 <= UInt<5>("h02") @[rvc.scala 22:13]
    T_1414.rs2 <= T_1406 @[rvc.scala 23:13]
    T_1414.rs3 <= T_1407 @[rvc.scala 24:13]
    node T_1420 = bits(io.in, 11, 7) @[rvc.scala 18:36]
    node T_1421 = bits(io.in, 19, 15) @[rvc.scala 18:57]
    node T_1422 = bits(io.in, 24, 20) @[rvc.scala 18:79]
    node T_1423 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1430 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1430 is invalid @[rvc.scala 19:19]
    T_1430.bits <= io.in @[rvc.scala 20:14]
    T_1430.rd <= T_1420 @[rvc.scala 21:12]
    T_1430.rs1 <= T_1421 @[rvc.scala 22:13]
    T_1430.rs2 <= T_1422 @[rvc.scala 23:13]
    T_1430.rs3 <= T_1423 @[rvc.scala 24:13]
    node T_1436 = bits(io.in, 11, 7) @[rvc.scala 18:36]
    node T_1437 = bits(io.in, 19, 15) @[rvc.scala 18:57]
    node T_1438 = bits(io.in, 24, 20) @[rvc.scala 18:79]
    node T_1439 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1446 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1446 is invalid @[rvc.scala 19:19]
    T_1446.bits <= io.in @[rvc.scala 20:14]
    T_1446.rd <= T_1436 @[rvc.scala 21:12]
    T_1446.rs1 <= T_1437 @[rvc.scala 22:13]
    T_1446.rs2 <= T_1438 @[rvc.scala 23:13]
    T_1446.rs3 <= T_1439 @[rvc.scala 24:13]
    node T_1452 = bits(io.in, 11, 7) @[rvc.scala 18:36]
    node T_1453 = bits(io.in, 19, 15) @[rvc.scala 18:57]
    node T_1454 = bits(io.in, 24, 20) @[rvc.scala 18:79]
    node T_1455 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1462 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1462 is invalid @[rvc.scala 19:19]
    T_1462.bits <= io.in @[rvc.scala 20:14]
    T_1462.rd <= T_1452 @[rvc.scala 21:12]
    T_1462.rs1 <= T_1453 @[rvc.scala 22:13]
    T_1462.rs2 <= T_1454 @[rvc.scala 23:13]
    T_1462.rs3 <= T_1455 @[rvc.scala 24:13]
    node T_1468 = bits(io.in, 11, 7) @[rvc.scala 18:36]
    node T_1469 = bits(io.in, 19, 15) @[rvc.scala 18:57]
    node T_1470 = bits(io.in, 24, 20) @[rvc.scala 18:79]
    node T_1471 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1478 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1478 is invalid @[rvc.scala 19:19]
    T_1478.bits <= io.in @[rvc.scala 20:14]
    T_1478.rd <= T_1468 @[rvc.scala 21:12]
    T_1478.rs1 <= T_1469 @[rvc.scala 22:13]
    T_1478.rs2 <= T_1470 @[rvc.scala 23:13]
    T_1478.rs3 <= T_1471 @[rvc.scala 24:13]
    node T_1484 = bits(io.in, 11, 7) @[rvc.scala 18:36]
    node T_1485 = bits(io.in, 19, 15) @[rvc.scala 18:57]
    node T_1486 = bits(io.in, 24, 20) @[rvc.scala 18:79]
    node T_1487 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1494 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1494 is invalid @[rvc.scala 19:19]
    T_1494.bits <= io.in @[rvc.scala 20:14]
    T_1494.rd <= T_1484 @[rvc.scala 21:12]
    T_1494.rs1 <= T_1485 @[rvc.scala 22:13]
    T_1494.rs2 <= T_1486 @[rvc.scala 23:13]
    T_1494.rs3 <= T_1487 @[rvc.scala 24:13]
    node T_1500 = bits(io.in, 11, 7) @[rvc.scala 18:36]
    node T_1501 = bits(io.in, 19, 15) @[rvc.scala 18:57]
    node T_1502 = bits(io.in, 24, 20) @[rvc.scala 18:79]
    node T_1503 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1510 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1510 is invalid @[rvc.scala 19:19]
    T_1510.bits <= io.in @[rvc.scala 20:14]
    T_1510.rd <= T_1500 @[rvc.scala 21:12]
    T_1510.rs1 <= T_1501 @[rvc.scala 22:13]
    T_1510.rs2 <= T_1502 @[rvc.scala 23:13]
    T_1510.rs3 <= T_1503 @[rvc.scala 24:13]
    node T_1516 = bits(io.in, 11, 7) @[rvc.scala 18:36]
    node T_1517 = bits(io.in, 19, 15) @[rvc.scala 18:57]
    node T_1518 = bits(io.in, 24, 20) @[rvc.scala 18:79]
    node T_1519 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1526 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1526 is invalid @[rvc.scala 19:19]
    T_1526.bits <= io.in @[rvc.scala 20:14]
    T_1526.rd <= T_1516 @[rvc.scala 21:12]
    T_1526.rs1 <= T_1517 @[rvc.scala 22:13]
    T_1526.rs2 <= T_1518 @[rvc.scala 23:13]
    T_1526.rs3 <= T_1519 @[rvc.scala 24:13]
    node T_1532 = bits(io.in, 11, 7) @[rvc.scala 18:36]
    node T_1533 = bits(io.in, 19, 15) @[rvc.scala 18:57]
    node T_1534 = bits(io.in, 24, 20) @[rvc.scala 18:79]
    node T_1535 = bits(io.in, 31, 27) @[rvc.scala 18:101]
    wire T_1542 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 19:19]
    T_1542 is invalid @[rvc.scala 19:19]
    T_1542.bits <= io.in @[rvc.scala 20:14]
    T_1542.rd <= T_1532 @[rvc.scala 21:12]
    T_1542.rs1 <= T_1533 @[rvc.scala 22:13]
    T_1542.rs2 <= T_1534 @[rvc.scala 23:13]
    T_1542.rs3 <= T_1535 @[rvc.scala 24:13]
    node T_1548 = bits(io.in, 1, 0) @[rvc.scala 148:12]
    node T_1549 = bits(io.in, 15, 13) @[rvc.scala 148:20]
    node T_1550 = cat(T_1548, T_1549) @[Cat.scala 20:58]
    node T_1552 = and(T_1550, UInt<4>("h0f")) @[Package.scala 18:26]
    node T_1554 = geq(T_1550, UInt<5>("h010")) @[Package.scala 19:17]
    node T_1556 = and(T_1552, UInt<3>("h07")) @[Package.scala 18:26]
    node T_1558 = geq(T_1552, UInt<4>("h08")) @[Package.scala 19:17]
    node T_1560 = and(T_1556, UInt<2>("h03")) @[Package.scala 18:26]
    node T_1562 = geq(T_1556, UInt<3>("h04")) @[Package.scala 19:17]
    node T_1564 = and(T_1560, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1566 = geq(T_1560, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1568 = and(T_1564, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1570 = geq(T_1564, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1571 = mux(T_1570, T_1542, T_1526) @[Package.scala 19:12]
    node T_1578 = and(T_1564, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1580 = geq(T_1564, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1581 = mux(T_1580, T_1510, T_1494) @[Package.scala 19:12]
    node T_1587 = mux(T_1566, T_1571, T_1581) @[Package.scala 19:12]
    node T_1594 = and(T_1560, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1596 = geq(T_1560, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1598 = and(T_1594, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1600 = geq(T_1594, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1601 = mux(T_1600, T_1478, T_1462) @[Package.scala 19:12]
    node T_1608 = and(T_1594, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1610 = geq(T_1594, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1611 = mux(T_1610, T_1446, T_1430) @[Package.scala 19:12]
    node T_1617 = mux(T_1596, T_1601, T_1611) @[Package.scala 19:12]
    node T_1623 = mux(T_1562, T_1587, T_1617) @[Package.scala 19:12]
    node T_1630 = and(T_1556, UInt<2>("h03")) @[Package.scala 18:26]
    node T_1632 = geq(T_1556, UInt<3>("h04")) @[Package.scala 19:17]
    node T_1634 = and(T_1630, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1636 = geq(T_1630, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1638 = and(T_1634, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1640 = geq(T_1634, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1641 = mux(T_1640, T_1414, T_1377) @[Package.scala 19:12]
    node T_1648 = and(T_1634, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1650 = geq(T_1634, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1651 = mux(T_1650, T_1340, T_1303) @[Package.scala 19:12]
    node T_1657 = mux(T_1636, T_1641, T_1651) @[Package.scala 19:12]
    node T_1664 = and(T_1630, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1666 = geq(T_1630, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1668 = and(T_1664, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1670 = geq(T_1664, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1671 = mux(T_1670, T_1162, T_1131) @[Package.scala 19:12]
    node T_1678 = and(T_1664, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1680 = geq(T_1664, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1681 = mux(T_1680, T_1100, T_1069) @[Package.scala 19:12]
    node T_1687 = mux(T_1666, T_1671, T_1681) @[Package.scala 19:12]
    node T_1693 = mux(T_1632, T_1657, T_1687) @[Package.scala 19:12]
    node T_1699 = mux(T_1558, T_1623, T_1693) @[Package.scala 19:12]
    node T_1706 = and(T_1552, UInt<3>("h07")) @[Package.scala 18:26]
    node T_1708 = geq(T_1552, UInt<4>("h08")) @[Package.scala 19:17]
    node T_1710 = and(T_1706, UInt<2>("h03")) @[Package.scala 18:26]
    node T_1712 = geq(T_1706, UInt<3>("h04")) @[Package.scala 19:17]
    node T_1714 = and(T_1710, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1716 = geq(T_1710, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1718 = and(T_1714, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1720 = geq(T_1714, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1721 = mux(T_1720, T_1042, T_947) @[Package.scala 19:12]
    node T_1728 = and(T_1714, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1730 = geq(T_1714, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1731 = mux(T_1730, T_850, T_735) @[Package.scala 19:12]
    node T_1737 = mux(T_1716, T_1721, T_1731) @[Package.scala 19:12]
    node T_1744 = and(T_1710, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1746 = geq(T_1710, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1748 = and(T_1744, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1750 = geq(T_1744, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1751 = mux(T_1750, T_576, T_468) @[Package.scala 19:12]
    node T_1758 = and(T_1744, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1760 = geq(T_1744, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1761 = mux(T_1760, T_435, T_397) @[Package.scala 19:12]
    node T_1767 = mux(T_1746, T_1751, T_1761) @[Package.scala 19:12]
    node T_1773 = mux(T_1712, T_1737, T_1767) @[Package.scala 19:12]
    node T_1780 = and(T_1706, UInt<2>("h03")) @[Package.scala 18:26]
    node T_1782 = geq(T_1706, UInt<3>("h04")) @[Package.scala 19:17]
    node T_1784 = and(T_1780, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1786 = geq(T_1780, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1788 = and(T_1784, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1790 = geq(T_1784, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1791 = mux(T_1790, T_364, T_317) @[Package.scala 19:12]
    node T_1798 = and(T_1784, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1800 = geq(T_1784, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1801 = mux(T_1800, T_266, T_219) @[Package.scala 19:12]
    node T_1807 = mux(T_1786, T_1791, T_1801) @[Package.scala 19:12]
    node T_1814 = and(T_1780, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1816 = geq(T_1780, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1818 = and(T_1814, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1820 = geq(T_1814, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1821 = mux(T_1820, T_168, T_129) @[Package.scala 19:12]
    node T_1828 = and(T_1814, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1830 = geq(T_1814, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1831 = mux(T_1830, T_88, T_49) @[Package.scala 19:12]
    node T_1837 = mux(T_1816, T_1821, T_1831) @[Package.scala 19:12]
    node T_1843 = mux(T_1782, T_1807, T_1837) @[Package.scala 19:12]
    node T_1849 = mux(T_1708, T_1773, T_1843) @[Package.scala 19:12]
    node T_1855 = mux(T_1554, T_1699, T_1849) @[Package.scala 19:12]
    io.out <- T_1855 @[rvc.scala 161:12]
    
  module IBuf : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip imem : {flip ready : UInt<1>, valid : UInt<1>, bits : {btb : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<40>, data : UInt<32>, mask : UInt<2>, xcpt_if : UInt<1>, replay : UInt<1>}}, flip kill : UInt<1>, pc : UInt<40>, btb_resp : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, inst : {flip ready : UInt<1>, valid : UInt<1>, bits : {pf0 : UInt<1>, pf1 : UInt<1>, replay : UInt<1>, btb_hit : UInt<1>, rvc : UInt<1>, inst : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>}}}[1]}
    
    io is invalid
    reg nBufValid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg buf : {btb : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<40>, data : UInt<32>, mask : UInt<2>, xcpt_if : UInt<1>, replay : UInt<1>}, clk
    reg ibufBTBHit : UInt<1>, clk
    reg ibufBTBResp : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, clk
    node pcWordBits = bits(io.imem.bits.pc, 1, 1) @[util.scala 25:13]
    wire nReady : UInt<2>
    nReady is invalid
    nReady <= UInt<2>("h00")
    node T_375 = and(io.imem.bits.btb.valid, io.imem.bits.btb.bits.taken) @[ibuf.scala 41:40]
    node T_377 = add(io.imem.bits.btb.bits.bridx, UInt<1>("h01")) @[ibuf.scala 41:100]
    node T_379 = mux(T_375, T_377, UInt<2>("h02")) @[ibuf.scala 41:16]
    node T_380 = sub(T_379, pcWordBits) @[ibuf.scala 41:124]
    node nIC = tail(T_380, 1) @[ibuf.scala 41:124]
    node T_381 = sub(nReady, nBufValid) @[ibuf.scala 42:25]
    node nICReady = tail(T_381, 1) @[ibuf.scala 42:25]
    node T_383 = mux(io.imem.valid, nIC, UInt<1>("h00")) @[ibuf.scala 43:19]
    node T_384 = add(T_383, nBufValid) @[ibuf.scala 43:49]
    node nValid = tail(T_384, 1) @[ibuf.scala 43:49]
    node T_385 = geq(nReady, nBufValid) @[ibuf.scala 44:27]
    node T_386 = geq(nICReady, nIC) @[ibuf.scala 44:53]
    node T_388 = sub(nIC, nICReady) @[ibuf.scala 44:72]
    node T_389 = tail(T_388, 1) @[ibuf.scala 44:72]
    node T_390 = geq(UInt<1>("h01"), T_389) @[ibuf.scala 44:65]
    node T_391 = or(T_386, T_390) @[ibuf.scala 44:60]
    node T_392 = and(T_385, T_391) @[ibuf.scala 44:40]
    io.imem.ready <= T_392 @[ibuf.scala 44:17]
    node T_393 = geq(nReady, nBufValid) @[ibuf.scala 47:29]
    node T_395 = sub(nBufValid, nReady) @[ibuf.scala 47:62]
    node T_396 = tail(T_395, 1) @[ibuf.scala 47:62]
    node T_397 = mux(T_393, UInt<1>("h00"), T_396) @[ibuf.scala 47:21]
    nBufValid <= T_397 @[ibuf.scala 47:15]
    node T_398 = geq(nReady, nBufValid) @[ibuf.scala 54:35]
    node T_399 = and(io.imem.valid, T_398) @[ibuf.scala 54:25]
    node T_400 = lt(nICReady, nIC) @[ibuf.scala 54:60]
    node T_401 = and(T_399, T_400) @[ibuf.scala 54:48]
    node T_403 = sub(nIC, nICReady) @[ibuf.scala 54:78]
    node T_404 = tail(T_403, 1) @[ibuf.scala 54:78]
    node T_405 = geq(UInt<1>("h01"), T_404) @[ibuf.scala 54:71]
    node T_406 = and(T_401, T_405) @[ibuf.scala 54:66]
    when T_406 : @[ibuf.scala 54:90]
      node T_407 = add(pcWordBits, nICReady) @[ibuf.scala 55:30]
      node T_408 = tail(T_407, 1) @[ibuf.scala 55:30]
      node T_409 = sub(nIC, nICReady) @[ibuf.scala 56:24]
      node T_410 = tail(T_409, 1) @[ibuf.scala 56:24]
      nBufValid <= T_410 @[ibuf.scala 56:17]
      buf <- io.imem.bits @[ibuf.scala 57:11]
      node T_411 = shr(io.imem.bits.data, 16) @[ibuf.scala 129:58]
      node T_412 = cat(T_411, T_411) @[Cat.scala 20:58]
      node T_413 = cat(T_412, io.imem.bits.data) @[Cat.scala 20:58]
      node T_414 = shl(T_408, 4) @[ibuf.scala 130:19]
      node T_415 = dshr(T_413, T_414) @[ibuf.scala 130:10]
      node T_416 = bits(T_415, 15, 0) @[ibuf.scala 58:59]
      buf.data <= T_416 @[ibuf.scala 58:16]
      node T_417 = not(UInt<40>("h03")) @[ibuf.scala 59:35]
      node T_418 = and(io.imem.bits.pc, T_417) @[ibuf.scala 59:33]
      node T_419 = shl(nICReady, 1) @[ibuf.scala 59:78]
      node T_420 = add(io.imem.bits.pc, T_419) @[ibuf.scala 59:66]
      node T_421 = tail(T_420, 1) @[ibuf.scala 59:66]
      node T_422 = and(T_421, UInt<40>("h03")) @[ibuf.scala 59:107]
      node T_423 = or(T_418, T_422) @[ibuf.scala 59:47]
      buf.pc <= T_423 @[ibuf.scala 59:14]
      ibufBTBHit <= io.imem.bits.btb.valid @[ibuf.scala 60:18]
      when io.imem.bits.btb.valid : @[ibuf.scala 61:37]
        ibufBTBResp <- io.imem.bits.btb.bits @[ibuf.scala 62:21]
        node T_424 = add(io.imem.bits.btb.bits.bridx, nICReady) @[ibuf.scala 63:58]
        node T_425 = tail(T_424, 1) @[ibuf.scala 63:58]
        ibufBTBResp.bridx <= T_425 @[ibuf.scala 63:27]
        skip @[ibuf.scala 61:37]
      skip @[ibuf.scala 54:90]
    when io.kill : @[ibuf.scala 66:20]
      nBufValid <= UInt<1>("h00") @[ibuf.scala 67:17]
      skip @[ibuf.scala 66:20]
    node T_428 = add(UInt<2>("h02"), nBufValid) @[ibuf.scala 71:32]
    node T_429 = tail(T_428, 1) @[ibuf.scala 71:32]
    node T_430 = sub(T_429, pcWordBits) @[ibuf.scala 71:44]
    node T_431 = tail(T_430, 1) @[ibuf.scala 71:44]
    node icShiftAmt = bits(T_431, 1, 0) @[ibuf.scala 71:57]
    node T_432 = bits(io.imem.bits.data, 15, 0) @[ibuf.scala 72:87]
    node T_433 = cat(T_432, T_432) @[Cat.scala 20:58]
    node T_434 = cat(io.imem.bits.data, T_433) @[Cat.scala 20:58]
    node T_435 = shr(T_434, 48) @[ibuf.scala 122:58]
    node T_436 = cat(T_435, T_435) @[Cat.scala 20:58]
    node T_437 = cat(T_436, T_436) @[Cat.scala 20:58]
    node T_438 = cat(T_437, T_434) @[Cat.scala 20:58]
    node T_439 = shl(icShiftAmt, 4) @[ibuf.scala 123:19]
    node T_440 = dshl(T_438, T_439) @[ibuf.scala 123:10]
    node icData = bits(T_440, 95, 64) @[util.scala 25:13]
    node T_442 = not(UInt<32>("h00")) @[ibuf.scala 74:17]
    node T_443 = shl(nBufValid, 4) @[ibuf.scala 74:65]
    node T_444 = dshl(T_442, T_443) @[ibuf.scala 74:51]
    node icMask = bits(T_444, 31, 0) @[ibuf.scala 74:92]
    node T_445 = and(icData, icMask) @[ibuf.scala 75:21]
    node T_446 = not(icMask) @[ibuf.scala 75:43]
    node T_447 = and(buf.data, T_446) @[ibuf.scala 75:41]
    node inst = or(T_445, T_447) @[ibuf.scala 75:30]
    node T_449 = dshl(UInt<1>("h01"), nValid) @[OneHot.scala 44:15]
    node T_451 = sub(T_449, UInt<1>("h01")) @[ibuf.scala 77:33]
    node T_452 = tail(T_451, 1) @[ibuf.scala 77:33]
    node valid = bits(T_452, 1, 0) @[ibuf.scala 77:37]
    node T_454 = dshl(UInt<1>("h01"), nBufValid) @[OneHot.scala 44:15]
    node T_456 = sub(T_454, UInt<1>("h01")) @[ibuf.scala 78:37]
    node bufMask = tail(T_456, 1) @[ibuf.scala 78:37]
    node T_458 = mux(buf.xcpt_if, bufMask, UInt<1>("h00")) @[ibuf.scala 79:29]
    node T_459 = not(bufMask) @[ibuf.scala 79:89]
    node T_461 = mux(io.imem.bits.xcpt_if, T_459, UInt<1>("h00")) @[ibuf.scala 79:66]
    node T_462 = or(T_458, T_461) @[ibuf.scala 79:61]
    node xcpt_if = and(valid, T_462) @[ibuf.scala 79:23]
    node T_464 = mux(buf.replay, bufMask, UInt<1>("h00")) @[ibuf.scala 80:31]
    node T_465 = not(bufMask) @[ibuf.scala 80:89]
    node T_467 = mux(io.imem.bits.replay, T_465, UInt<1>("h00")) @[ibuf.scala 80:67]
    node T_468 = or(T_464, T_467) @[ibuf.scala 80:62]
    node ic_replay = and(valid, T_468) @[ibuf.scala 80:25]
    node T_470 = dshl(UInt<1>("h01"), ibufBTBResp.bridx) @[OneHot.scala 44:15]
    node ibufBTBHitMask = mux(ibufBTBHit, T_470, UInt<1>("h00")) @[ibuf.scala 81:27]
    node T_472 = add(io.imem.bits.btb.bits.bridx, nBufValid) @[ibuf.scala 82:87]
    node T_473 = sub(T_472, pcWordBits) @[ibuf.scala 82:100]
    node T_474 = tail(T_473, 1) @[ibuf.scala 82:100]
    node T_476 = dshl(UInt<1>("h01"), T_474) @[OneHot.scala 44:15]
    node icBTBHitMask = mux(io.imem.bits.btb.valid, T_476, UInt<1>("h00")) @[ibuf.scala 82:25]
    node T_478 = and(ibufBTBHitMask, bufMask) @[ibuf.scala 83:35]
    node T_479 = not(bufMask) @[ibuf.scala 83:62]
    node T_480 = and(icBTBHitMask, T_479) @[ibuf.scala 83:60]
    node btbHitMask = or(T_478, T_480) @[ibuf.scala 83:45]
    node T_481 = and(ibufBTBHitMask, bufMask) @[ibuf.scala 85:38]
    node T_483 = neq(T_481, UInt<1>("h00")) @[ibuf.scala 85:49]
    node T_484 = mux(T_483, ibufBTBResp, io.imem.bits.btb.bits) @[ibuf.scala 85:21]
    io.btb_resp <- T_484 @[ibuf.scala 85:15]
    node T_494 = gt(nBufValid, UInt<1>("h00")) @[ibuf.scala 86:26]
    node T_495 = mux(T_494, buf.pc, io.imem.bits.pc) @[ibuf.scala 86:15]
    io.pc <= T_495 @[ibuf.scala 86:9]
    inst RVCExpander_1 of RVCExpander @[ibuf.scala 90:21]
    RVCExpander_1.io is invalid
    RVCExpander_1.clk <= clk
    RVCExpander_1.reset <= reset
    RVCExpander_1.io.in <= inst @[ibuf.scala 91:15]
    io.inst[0].bits.inst <- RVCExpander_1.io.out @[ibuf.scala 92:26]
    node T_497 = dshr(ic_replay, UInt<1>("h00")) @[ibuf.scala 95:29]
    node T_498 = bits(T_497, 0, 0) @[ibuf.scala 95:29]
    node T_500 = eq(RVCExpander_1.io.rvc, UInt<1>("h00")) @[ibuf.scala 95:37]
    node T_501 = dshr(btbHitMask, UInt<1>("h00")) @[ibuf.scala 95:63]
    node T_502 = bits(T_501, 0, 0) @[ibuf.scala 95:63]
    node T_504 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 95:81]
    node T_505 = tail(T_504, 1) @[ibuf.scala 95:81]
    node T_506 = dshr(ic_replay, T_505) @[ibuf.scala 95:79]
    node T_507 = bits(T_506, 0, 0) @[ibuf.scala 95:79]
    node T_508 = or(T_502, T_507) @[ibuf.scala 95:67]
    node T_509 = and(T_500, T_508) @[ibuf.scala 95:49]
    node T_510 = or(T_498, T_509) @[ibuf.scala 95:33]
    node T_511 = dshr(valid, UInt<1>("h00")) @[ibuf.scala 96:32]
    node T_512 = bits(T_511, 0, 0) @[ibuf.scala 96:32]
    node T_514 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 96:61]
    node T_515 = tail(T_514, 1) @[ibuf.scala 96:61]
    node T_516 = dshr(valid, T_515) @[ibuf.scala 96:59]
    node T_517 = bits(T_516, 0, 0) @[ibuf.scala 96:59]
    node T_518 = or(RVCExpander_1.io.rvc, T_517) @[ibuf.scala 96:51]
    node T_520 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 96:77]
    node T_521 = tail(T_520, 1) @[ibuf.scala 96:77]
    node T_522 = dshr(xcpt_if, T_521) @[ibuf.scala 96:75]
    node T_523 = bits(T_522, 0, 0) @[ibuf.scala 96:75]
    node T_524 = or(T_518, T_523) @[ibuf.scala 96:65]
    node T_525 = or(T_524, T_510) @[ibuf.scala 96:81]
    node T_526 = and(T_512, T_525) @[ibuf.scala 96:36]
    io.inst[0].valid <= T_526 @[ibuf.scala 96:24]
    node T_527 = dshr(xcpt_if, UInt<1>("h00")) @[ibuf.scala 97:37]
    node T_528 = bits(T_527, 0, 0) @[ibuf.scala 97:37]
    io.inst[0].bits.pf0 <= T_528 @[ibuf.scala 97:27]
    node T_530 = eq(RVCExpander_1.io.rvc, UInt<1>("h00")) @[ibuf.scala 98:30]
    node T_532 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 98:54]
    node T_533 = tail(T_532, 1) @[ibuf.scala 98:54]
    node T_534 = dshr(xcpt_if, T_533) @[ibuf.scala 98:52]
    node T_535 = bits(T_534, 0, 0) @[ibuf.scala 98:52]
    node T_536 = and(T_530, T_535) @[ibuf.scala 98:42]
    io.inst[0].bits.pf1 <= T_536 @[ibuf.scala 98:27]
    io.inst[0].bits.replay <= T_510 @[ibuf.scala 99:30]
    node T_537 = dshr(btbHitMask, UInt<1>("h00")) @[ibuf.scala 100:44]
    node T_538 = bits(T_537, 0, 0) @[ibuf.scala 100:44]
    node T_540 = eq(RVCExpander_1.io.rvc, UInt<1>("h00")) @[ibuf.scala 100:52]
    node T_542 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 100:79]
    node T_543 = tail(T_542, 1) @[ibuf.scala 100:79]
    node T_544 = dshr(btbHitMask, T_543) @[ibuf.scala 100:77]
    node T_545 = bits(T_544, 0, 0) @[ibuf.scala 100:77]
    node T_546 = and(T_540, T_545) @[ibuf.scala 100:64]
    node T_547 = or(T_538, T_546) @[ibuf.scala 100:48]
    io.inst[0].bits.btb_hit <= T_547 @[ibuf.scala 100:31]
    io.inst[0].bits.rvc <= RVCExpander_1.io.rvc @[ibuf.scala 101:27]
    node T_548 = and(io.inst[0].ready, io.inst[0].valid) @[Decoupled.scala 21:42]
    when T_548 : @[ibuf.scala 103:32]
      node T_550 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 103:61]
      node T_551 = tail(T_550, 1) @[ibuf.scala 103:61]
      node T_553 = add(UInt<1>("h00"), UInt<2>("h02")) @[ibuf.scala 103:66]
      node T_554 = tail(T_553, 1) @[ibuf.scala 103:66]
      node T_555 = mux(RVCExpander_1.io.rvc, T_551, T_554) @[ibuf.scala 103:47]
      nReady <= T_555 @[ibuf.scala 103:41]
      skip @[ibuf.scala 103:32]
    node T_557 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 105:36]
    node T_558 = tail(T_557, 1) @[ibuf.scala 105:36]
    node T_560 = add(UInt<1>("h00"), UInt<2>("h02")) @[ibuf.scala 105:41]
    node T_561 = tail(T_560, 1) @[ibuf.scala 105:41]
    node T_562 = mux(RVCExpander_1.io.rvc, T_558, T_561) @[ibuf.scala 105:22]
    node T_563 = shr(inst, 16) @[ibuf.scala 105:70]
    node T_564 = shr(inst, 32) @[ibuf.scala 105:85]
    node T_565 = mux(RVCExpander_1.io.rvc, T_563, T_564) @[ibuf.scala 105:49]
    
  module CSRFile : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip interrupts : {debug : UInt<1>, mtip : UInt<1>, msip : UInt<1>, meip : UInt<1>, seip : UInt<1>}, flip hartid : UInt<64>, rw : {flip addr : UInt<12>, flip cmd : UInt<3>, rdata : UInt<64>, flip wdata : UInt<64>}, csr_stall : UInt<1>, csr_xcpt : UInt<1>, eret : UInt<1>, singleStep : UInt<1>, status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}, ptbr : {asid : UInt<7>, ppn : UInt<38>}, evec : UInt<40>, flip exception : UInt<1>, flip retire : UInt<1>, flip custom_mrw_csrs : UInt<64>[0], flip cause : UInt<64>, flip pc : UInt<40>, flip badaddr : UInt<40>, fatc : UInt<1>, time : UInt<64>, fcsr_rm : UInt<3>, flip fcsr_flags : {valid : UInt<1>, bits : UInt<5>}, flip rocc : {flip cmd : {flip ready : UInt<1>, valid : UInt<1>, bits : {inst : {funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, data : UInt<64>}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, busy : UInt<1>, interrupt : UInt<1>, autl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, utl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}[0], fpu_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, flip fpu_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}, flip exception : UInt<1>}, interrupt : UInt<1>, interrupt_cause : UInt<64>, bp : {control : {ttype : UInt<4>, dmode : UInt<1>, maskmax : UInt<6>, reserved : UInt<40>, action : UInt<1>, chain : UInt<1>, zero : UInt<2>, tmatch : UInt<2>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>}, address : UInt<39>}[1], flip events : UInt<1>[0]}
    
    io is invalid
    wire T_4991 : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>} @[csr.scala 170:55]
    T_4991 is invalid @[csr.scala 170:55]
    wire T_5018 : UInt<99>
    T_5018 is invalid
    T_5018 <= UInt<1>("h00")
    node T_5019 = bits(T_5018, 0, 0) @[csr.scala 170:55]
    T_4991.uie <= T_5019 @[csr.scala 170:55]
    node T_5020 = bits(T_5018, 1, 1) @[csr.scala 170:55]
    T_4991.sie <= T_5020 @[csr.scala 170:55]
    node T_5021 = bits(T_5018, 2, 2) @[csr.scala 170:55]
    T_4991.hie <= T_5021 @[csr.scala 170:55]
    node T_5022 = bits(T_5018, 3, 3) @[csr.scala 170:55]
    T_4991.mie <= T_5022 @[csr.scala 170:55]
    node T_5023 = bits(T_5018, 4, 4) @[csr.scala 170:55]
    T_4991.upie <= T_5023 @[csr.scala 170:55]
    node T_5024 = bits(T_5018, 5, 5) @[csr.scala 170:55]
    T_4991.spie <= T_5024 @[csr.scala 170:55]
    node T_5025 = bits(T_5018, 6, 6) @[csr.scala 170:55]
    T_4991.hpie <= T_5025 @[csr.scala 170:55]
    node T_5026 = bits(T_5018, 7, 7) @[csr.scala 170:55]
    T_4991.mpie <= T_5026 @[csr.scala 170:55]
    node T_5027 = bits(T_5018, 8, 8) @[csr.scala 170:55]
    T_4991.spp <= T_5027 @[csr.scala 170:55]
    node T_5028 = bits(T_5018, 10, 9) @[csr.scala 170:55]
    T_4991.hpp <= T_5028 @[csr.scala 170:55]
    node T_5029 = bits(T_5018, 12, 11) @[csr.scala 170:55]
    T_4991.mpp <= T_5029 @[csr.scala 170:55]
    node T_5030 = bits(T_5018, 14, 13) @[csr.scala 170:55]
    T_4991.fs <= T_5030 @[csr.scala 170:55]
    node T_5031 = bits(T_5018, 16, 15) @[csr.scala 170:55]
    T_4991.xs <= T_5031 @[csr.scala 170:55]
    node T_5032 = bits(T_5018, 17, 17) @[csr.scala 170:55]
    T_4991.mprv <= T_5032 @[csr.scala 170:55]
    node T_5033 = bits(T_5018, 18, 18) @[csr.scala 170:55]
    T_4991.pum <= T_5033 @[csr.scala 170:55]
    node T_5034 = bits(T_5018, 19, 19) @[csr.scala 170:55]
    T_4991.mxr <= T_5034 @[csr.scala 170:55]
    node T_5035 = bits(T_5018, 23, 20) @[csr.scala 170:55]
    T_4991.zero1 <= T_5035 @[csr.scala 170:55]
    node T_5036 = bits(T_5018, 28, 24) @[csr.scala 170:55]
    T_4991.vm <= T_5036 @[csr.scala 170:55]
    node T_5037 = bits(T_5018, 30, 29) @[csr.scala 170:55]
    T_4991.zero2 <= T_5037 @[csr.scala 170:55]
    node T_5038 = bits(T_5018, 31, 31) @[csr.scala 170:55]
    T_4991.sd_rv32 <= T_5038 @[csr.scala 170:55]
    node T_5039 = bits(T_5018, 62, 32) @[csr.scala 170:55]
    T_4991.zero3 <= T_5039 @[csr.scala 170:55]
    node T_5040 = bits(T_5018, 63, 63) @[csr.scala 170:55]
    T_4991.sd <= T_5040 @[csr.scala 170:55]
    node T_5041 = bits(T_5018, 65, 64) @[csr.scala 170:55]
    T_4991.prv <= T_5041 @[csr.scala 170:55]
    node T_5042 = bits(T_5018, 97, 66) @[csr.scala 170:55]
    T_4991.isa <= T_5042 @[csr.scala 170:55]
    node T_5043 = bits(T_5018, 98, 98) @[csr.scala 170:55]
    T_4991.debug <= T_5043 @[csr.scala 170:55]
    wire reset_mstatus : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}
    reset_mstatus is invalid
    reset_mstatus <- T_4991
    reset_mstatus.mpp <= UInt<2>("h03") @[csr.scala 171:21]
    reset_mstatus.prv <= UInt<2>("h03") @[csr.scala 172:21]
    reg reg_mstatus : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}, clk with : (reset => (reset, reset_mstatus))
    wire new_prv : UInt
    new_prv is invalid
    new_prv <= reg_mstatus.prv
    node T_5097 = eq(new_prv, UInt<2>("h02")) @[csr.scala 651:27]
    node T_5099 = mux(T_5097, UInt<1>("h00"), new_prv) @[csr.scala 651:21]
    reg_mstatus.prv <= T_5099 @[csr.scala 176:19]
    wire T_5137 : {xdebugver : UInt<2>, ndreset : UInt<1>, fullreset : UInt<1>, zero3 : UInt<12>, ebreakm : UInt<1>, ebreakh : UInt<1>, ebreaks : UInt<1>, ebreaku : UInt<1>, zero2 : UInt<1>, stopcycle : UInt<1>, stoptime : UInt<1>, cause : UInt<3>, debugint : UInt<1>, zero1 : UInt<1>, halt : UInt<1>, step : UInt<1>, prv : UInt<2>} @[csr.scala 178:49]
    T_5137 is invalid @[csr.scala 178:49]
    wire T_5156 : UInt<32>
    T_5156 is invalid
    T_5156 <= UInt<1>("h00")
    node T_5157 = bits(T_5156, 1, 0) @[csr.scala 178:49]
    T_5137.prv <= T_5157 @[csr.scala 178:49]
    node T_5158 = bits(T_5156, 2, 2) @[csr.scala 178:49]
    T_5137.step <= T_5158 @[csr.scala 178:49]
    node T_5159 = bits(T_5156, 3, 3) @[csr.scala 178:49]
    T_5137.halt <= T_5159 @[csr.scala 178:49]
    node T_5160 = bits(T_5156, 4, 4) @[csr.scala 178:49]
    T_5137.zero1 <= T_5160 @[csr.scala 178:49]
    node T_5161 = bits(T_5156, 5, 5) @[csr.scala 178:49]
    T_5137.debugint <= T_5161 @[csr.scala 178:49]
    node T_5162 = bits(T_5156, 8, 6) @[csr.scala 178:49]
    T_5137.cause <= T_5162 @[csr.scala 178:49]
    node T_5163 = bits(T_5156, 9, 9) @[csr.scala 178:49]
    T_5137.stoptime <= T_5163 @[csr.scala 178:49]
    node T_5164 = bits(T_5156, 10, 10) @[csr.scala 178:49]
    T_5137.stopcycle <= T_5164 @[csr.scala 178:49]
    node T_5165 = bits(T_5156, 11, 11) @[csr.scala 178:49]
    T_5137.zero2 <= T_5165 @[csr.scala 178:49]
    node T_5166 = bits(T_5156, 12, 12) @[csr.scala 178:49]
    T_5137.ebreaku <= T_5166 @[csr.scala 178:49]
    node T_5167 = bits(T_5156, 13, 13) @[csr.scala 178:49]
    T_5137.ebreaks <= T_5167 @[csr.scala 178:49]
    node T_5168 = bits(T_5156, 14, 14) @[csr.scala 178:49]
    T_5137.ebreakh <= T_5168 @[csr.scala 178:49]
    node T_5169 = bits(T_5156, 15, 15) @[csr.scala 178:49]
    T_5137.ebreakm <= T_5169 @[csr.scala 178:49]
    node T_5170 = bits(T_5156, 27, 16) @[csr.scala 178:49]
    T_5137.zero3 <= T_5170 @[csr.scala 178:49]
    node T_5171 = bits(T_5156, 28, 28) @[csr.scala 178:49]
    T_5137.fullreset <= T_5171 @[csr.scala 178:49]
    node T_5172 = bits(T_5156, 29, 29) @[csr.scala 178:49]
    T_5137.ndreset <= T_5172 @[csr.scala 178:49]
    node T_5173 = bits(T_5156, 31, 30) @[csr.scala 178:49]
    T_5137.xdebugver <= T_5173 @[csr.scala 178:49]
    wire reset_dcsr : {xdebugver : UInt<2>, ndreset : UInt<1>, fullreset : UInt<1>, zero3 : UInt<12>, ebreakm : UInt<1>, ebreakh : UInt<1>, ebreaks : UInt<1>, ebreaku : UInt<1>, zero2 : UInt<1>, stopcycle : UInt<1>, stoptime : UInt<1>, cause : UInt<3>, debugint : UInt<1>, zero1 : UInt<1>, halt : UInt<1>, step : UInt<1>, prv : UInt<2>}
    reset_dcsr is invalid
    reset_dcsr <- T_5137
    reset_dcsr.xdebugver <= UInt<1>("h01") @[csr.scala 179:24]
    reset_dcsr.prv <= UInt<2>("h03") @[csr.scala 180:18]
    reg reg_dcsr : {xdebugver : UInt<2>, ndreset : UInt<1>, fullreset : UInt<1>, zero3 : UInt<12>, ebreakm : UInt<1>, ebreakh : UInt<1>, ebreaks : UInt<1>, ebreaku : UInt<1>, zero2 : UInt<1>, stopcycle : UInt<1>, stoptime : UInt<1>, cause : UInt<3>, debugint : UInt<1>, zero1 : UInt<1>, halt : UInt<1>, step : UInt<1>, prv : UInt<2>}, clk with : (reset => (reset, reset_dcsr))
    wire T_5239 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>} @[csr.scala 184:43]
    T_5239 is invalid @[csr.scala 184:43]
    wire T_5254 : UInt<13>
    T_5254 is invalid
    T_5254 <= UInt<1>("h00")
    node T_5255 = bits(T_5254, 0, 0) @[csr.scala 184:43]
    T_5239.usip <= T_5255 @[csr.scala 184:43]
    node T_5256 = bits(T_5254, 1, 1) @[csr.scala 184:43]
    T_5239.ssip <= T_5256 @[csr.scala 184:43]
    node T_5257 = bits(T_5254, 2, 2) @[csr.scala 184:43]
    T_5239.hsip <= T_5257 @[csr.scala 184:43]
    node T_5258 = bits(T_5254, 3, 3) @[csr.scala 184:43]
    T_5239.msip <= T_5258 @[csr.scala 184:43]
    node T_5259 = bits(T_5254, 4, 4) @[csr.scala 184:43]
    T_5239.utip <= T_5259 @[csr.scala 184:43]
    node T_5260 = bits(T_5254, 5, 5) @[csr.scala 184:43]
    T_5239.stip <= T_5260 @[csr.scala 184:43]
    node T_5261 = bits(T_5254, 6, 6) @[csr.scala 184:43]
    T_5239.htip <= T_5261 @[csr.scala 184:43]
    node T_5262 = bits(T_5254, 7, 7) @[csr.scala 184:43]
    T_5239.mtip <= T_5262 @[csr.scala 184:43]
    node T_5263 = bits(T_5254, 8, 8) @[csr.scala 184:43]
    T_5239.ueip <= T_5263 @[csr.scala 184:43]
    node T_5264 = bits(T_5254, 9, 9) @[csr.scala 184:43]
    T_5239.seip <= T_5264 @[csr.scala 184:43]
    node T_5265 = bits(T_5254, 10, 10) @[csr.scala 184:43]
    T_5239.heip <= T_5265 @[csr.scala 184:43]
    node T_5266 = bits(T_5254, 11, 11) @[csr.scala 184:43]
    T_5239.meip <= T_5266 @[csr.scala 184:43]
    node T_5267 = bits(T_5254, 12, 12) @[csr.scala 184:43]
    T_5239.rocc <= T_5267 @[csr.scala 184:43]
    wire T_5268 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>}
    T_5268 is invalid
    T_5268 <- T_5239
    T_5268.ssip <= UInt<1>("h01") @[csr.scala 185:14]
    T_5268.msip <= UInt<1>("h01") @[csr.scala 186:14]
    T_5268.stip <= UInt<1>("h01") @[csr.scala 187:14]
    T_5268.mtip <= UInt<1>("h01") @[csr.scala 188:14]
    T_5268.meip <= UInt<1>("h01") @[csr.scala 189:14]
    T_5268.seip <= UInt<1>("h01") @[csr.scala 190:14]
    T_5268.rocc <= UInt<1>("h00") @[csr.scala 191:14]
    wire T_5289 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>}
    T_5289 is invalid
    T_5289 <- T_5268
    T_5289.msip <= UInt<1>("h00") @[csr.scala 194:14]
    T_5289.mtip <= UInt<1>("h00") @[csr.scala 195:14]
    T_5289.meip <= UInt<1>("h00") @[csr.scala 196:14]
    node T_5306 = cat(T_5268.hsip, T_5268.ssip) @[csr.scala 198:10]
    node T_5307 = cat(T_5306, T_5268.usip) @[csr.scala 198:10]
    node T_5308 = cat(T_5268.stip, T_5268.utip) @[csr.scala 198:10]
    node T_5309 = cat(T_5308, T_5268.msip) @[csr.scala 198:10]
    node T_5310 = cat(T_5309, T_5307) @[csr.scala 198:10]
    node T_5311 = cat(T_5268.ueip, T_5268.mtip) @[csr.scala 198:10]
    node T_5312 = cat(T_5311, T_5268.htip) @[csr.scala 198:10]
    node T_5313 = cat(T_5268.heip, T_5268.seip) @[csr.scala 198:10]
    node T_5314 = cat(T_5268.rocc, T_5268.meip) @[csr.scala 198:10]
    node T_5315 = cat(T_5314, T_5313) @[csr.scala 198:10]
    node T_5316 = cat(T_5315, T_5312) @[csr.scala 198:10]
    node supported_interrupts = cat(T_5316, T_5310) @[csr.scala 198:10]
    node T_5317 = cat(T_5289.hsip, T_5289.ssip) @[csr.scala 198:22]
    node T_5318 = cat(T_5317, T_5289.usip) @[csr.scala 198:22]
    node T_5319 = cat(T_5289.stip, T_5289.utip) @[csr.scala 198:22]
    node T_5320 = cat(T_5319, T_5289.msip) @[csr.scala 198:22]
    node T_5321 = cat(T_5320, T_5318) @[csr.scala 198:22]
    node T_5322 = cat(T_5289.ueip, T_5289.mtip) @[csr.scala 198:22]
    node T_5323 = cat(T_5322, T_5289.htip) @[csr.scala 198:22]
    node T_5324 = cat(T_5289.heip, T_5289.seip) @[csr.scala 198:22]
    node T_5325 = cat(T_5289.rocc, T_5289.meip) @[csr.scala 198:22]
    node T_5326 = cat(T_5325, T_5324) @[csr.scala 198:22]
    node T_5327 = cat(T_5326, T_5323) @[csr.scala 198:22]
    node delegable_interrupts = cat(T_5327, T_5321) @[csr.scala 198:22]
    node exception = or(io.exception, io.csr_xcpt) @[csr.scala 208:32]
    reg reg_debug : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg reg_dpc : UInt<40>, clk
    reg reg_dscratch : UInt<64>, clk
    reg reg_singleStepped : UInt<1>, clk
    node T_5332 = bits(io.retire, 0, 0) @[csr.scala 214:18]
    node T_5333 = or(T_5332, exception) @[csr.scala 214:22]
    when T_5333 : @[csr.scala 214:36]
      reg_singleStepped <= UInt<1>("h01") @[csr.scala 214:56]
      skip @[csr.scala 214:36]
    node T_5336 = eq(io.singleStep, UInt<1>("h00")) @[csr.scala 215:9]
    when T_5336 : @[csr.scala 215:25]
      reg_singleStepped <= UInt<1>("h00") @[csr.scala 215:45]
      skip @[csr.scala 215:25]
    node T_5339 = eq(io.singleStep, UInt<1>("h00")) @[csr.scala 216:10]
    node T_5341 = leq(io.retire, UInt<1>("h01")) @[csr.scala 216:38]
    node T_5342 = or(T_5339, T_5341) @[csr.scala 216:25]
    node T_5343 = or(T_5342, reset) @[csr.scala 216:9]
    node T_5345 = eq(T_5343, UInt<1>("h00")) @[csr.scala 216:9]
    when T_5345 : @[csr.scala 216:9]
      printf(clk, UInt<1>(1), "Assertion failed\n    at csr.scala:216 assert(!io.singleStep || io.retire <= UInt(1))\n") @[csr.scala 216:9]
      stop(clk, UInt<1>(1), 1) @[csr.scala 216:9]
      skip @[csr.scala 216:9]
    node T_5347 = eq(reg_singleStepped, UInt<1>("h00")) @[csr.scala 217:10]
    node T_5349 = eq(io.retire, UInt<1>("h00")) @[csr.scala 217:42]
    node T_5350 = or(T_5347, T_5349) @[csr.scala 217:29]
    node T_5351 = or(T_5350, reset) @[csr.scala 217:9]
    node T_5353 = eq(T_5351, UInt<1>("h00")) @[csr.scala 217:9]
    when T_5353 : @[csr.scala 217:9]
      printf(clk, UInt<1>(1), "Assertion failed\n    at csr.scala:217 assert(!reg_singleStepped || io.retire === UInt(0))\n") @[csr.scala 217:9]
      stop(clk, UInt<1>(1), 1) @[csr.scala 217:9]
      skip @[csr.scala 217:9]
    reg reg_tselect : UInt<1>, clk
    reg reg_bp : {control : {ttype : UInt<4>, dmode : UInt<1>, maskmax : UInt<6>, reserved : UInt<40>, action : UInt<1>, chain : UInt<1>, zero : UInt<2>, tmatch : UInt<2>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>}, address : UInt<39>}[2], clk
    reg reg_mie : UInt<64>, clk
    reg reg_mideleg : UInt<64>, clk
    reg reg_medeleg : UInt<64>, clk
    reg reg_mip : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>}, clk
    reg reg_mepc : UInt<40>, clk
    reg reg_mcause : UInt<64>, clk
    reg reg_mbadaddr : UInt<40>, clk
    reg reg_mscratch : UInt<64>, clk
    reg reg_mtvec : UInt<32>, clk with : (reset => (reset, UInt<32>("h01010")))
    reg reg_mucounteren : UInt<32>, clk
    reg reg_mscounteren : UInt<32>, clk
    reg reg_sepc : UInt<40>, clk
    reg reg_scause : UInt<64>, clk
    reg reg_sbadaddr : UInt<40>, clk
    reg reg_sscratch : UInt<64>, clk
    reg reg_stvec : UInt<39>, clk
    reg reg_sptbr : {asid : UInt<7>, ppn : UInt<38>}, clk
    reg reg_wfi : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg reg_fflags : UInt<5>, clk
    reg reg_frm : UInt<3>, clk
    reg T_5583 : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    node T_5584 = add(T_5583, io.retire) @[util.scala 135:33]
    T_5583 <= T_5584 @[util.scala 136:9]
    reg T_5586 : UInt<58>, clk with : (reset => (reset, UInt<58>("h00")))
    node T_5587 = bits(T_5584, 6, 6) @[util.scala 140:20]
    when T_5587 : @[util.scala 140:34]
      node T_5589 = add(T_5586, UInt<1>("h01")) @[util.scala 140:43]
      T_5586 <= T_5589 @[util.scala 140:38]
      skip @[util.scala 140:34]
    node T_5590 = cat(T_5586, T_5583) @[Cat.scala 20:58]
    reg T_5593 : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    node T_5594 = add(T_5593, UInt<1>("h01")) @[util.scala 135:33]
    T_5593 <= T_5594 @[util.scala 136:9]
    reg T_5596 : UInt<58>, clk with : (reset => (reset, UInt<58>("h00")))
    node T_5597 = bits(T_5594, 6, 6) @[util.scala 140:20]
    when T_5597 : @[util.scala 140:34]
      node T_5599 = add(T_5596, UInt<1>("h01")) @[util.scala 140:43]
      T_5596 <= T_5599 @[util.scala 140:38]
      skip @[util.scala 140:34]
    node T_5600 = cat(T_5596, T_5593) @[Cat.scala 20:58]
    wire mip : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>}
    mip is invalid
    mip <- reg_mip
    mip.rocc <= io.rocc.interrupt @[csr.scala 252:12]
    node T_5614 = cat(mip.hsip, mip.ssip) @[csr.scala 253:22]
    node T_5615 = cat(T_5614, mip.usip) @[csr.scala 253:22]
    node T_5616 = cat(mip.stip, mip.utip) @[csr.scala 253:22]
    node T_5617 = cat(T_5616, mip.msip) @[csr.scala 253:22]
    node T_5618 = cat(T_5617, T_5615) @[csr.scala 253:22]
    node T_5619 = cat(mip.ueip, mip.mtip) @[csr.scala 253:22]
    node T_5620 = cat(T_5619, mip.htip) @[csr.scala 253:22]
    node T_5621 = cat(mip.heip, mip.seip) @[csr.scala 253:22]
    node T_5622 = cat(mip.rocc, mip.meip) @[csr.scala 253:22]
    node T_5623 = cat(T_5622, T_5621) @[csr.scala 253:22]
    node T_5624 = cat(T_5623, T_5620) @[csr.scala 253:22]
    node T_5625 = cat(T_5624, T_5618) @[csr.scala 253:22]
    node read_mip = and(T_5625, supported_interrupts) @[csr.scala 253:29]
    node pending_interrupts = and(read_mip, reg_mie) @[csr.scala 255:37]
    node T_5627 = eq(reg_debug, UInt<1>("h00")) @[csr.scala 256:26]
    node T_5629 = lt(reg_mstatus.prv, UInt<2>("h03")) @[csr.scala 256:57]
    node T_5631 = eq(reg_mstatus.prv, UInt<2>("h03")) @[csr.scala 256:85]
    node T_5632 = and(T_5631, reg_mstatus.mie) @[csr.scala 256:95]
    node T_5633 = or(T_5629, T_5632) @[csr.scala 256:65]
    node T_5634 = and(T_5627, T_5633) @[csr.scala 256:37]
    node T_5635 = not(reg_mideleg) @[csr.scala 256:138]
    node T_5636 = and(pending_interrupts, T_5635) @[csr.scala 256:136]
    node m_interrupts = mux(T_5634, T_5636, UInt<1>("h00")) @[csr.scala 256:25]
    node T_5639 = eq(reg_debug, UInt<1>("h00")) @[csr.scala 257:26]
    node T_5641 = lt(reg_mstatus.prv, UInt<1>("h01")) @[csr.scala 257:57]
    node T_5643 = eq(reg_mstatus.prv, UInt<1>("h01")) @[csr.scala 257:85]
    node T_5644 = and(T_5643, reg_mstatus.sie) @[csr.scala 257:95]
    node T_5645 = or(T_5641, T_5644) @[csr.scala 257:65]
    node T_5646 = and(T_5639, T_5645) @[csr.scala 257:37]
    node T_5647 = and(pending_interrupts, reg_mideleg) @[csr.scala 257:136]
    node s_interrupts = mux(T_5646, T_5647, UInt<1>("h00")) @[csr.scala 257:25]
    node all_interrupts = or(m_interrupts, s_interrupts) @[csr.scala 258:37]
    node T_5650 = bits(all_interrupts, 0, 0) @[OneHot.scala 35:40]
    node T_5651 = bits(all_interrupts, 1, 1) @[OneHot.scala 35:40]
    node T_5652 = bits(all_interrupts, 2, 2) @[OneHot.scala 35:40]
    node T_5653 = bits(all_interrupts, 3, 3) @[OneHot.scala 35:40]
    node T_5654 = bits(all_interrupts, 4, 4) @[OneHot.scala 35:40]
    node T_5655 = bits(all_interrupts, 5, 5) @[OneHot.scala 35:40]
    node T_5656 = bits(all_interrupts, 6, 6) @[OneHot.scala 35:40]
    node T_5657 = bits(all_interrupts, 7, 7) @[OneHot.scala 35:40]
    node T_5658 = bits(all_interrupts, 8, 8) @[OneHot.scala 35:40]
    node T_5659 = bits(all_interrupts, 9, 9) @[OneHot.scala 35:40]
    node T_5660 = bits(all_interrupts, 10, 10) @[OneHot.scala 35:40]
    node T_5661 = bits(all_interrupts, 11, 11) @[OneHot.scala 35:40]
    node T_5662 = bits(all_interrupts, 12, 12) @[OneHot.scala 35:40]
    node T_5663 = bits(all_interrupts, 13, 13) @[OneHot.scala 35:40]
    node T_5664 = bits(all_interrupts, 14, 14) @[OneHot.scala 35:40]
    node T_5665 = bits(all_interrupts, 15, 15) @[OneHot.scala 35:40]
    node T_5666 = bits(all_interrupts, 16, 16) @[OneHot.scala 35:40]
    node T_5667 = bits(all_interrupts, 17, 17) @[OneHot.scala 35:40]
    node T_5668 = bits(all_interrupts, 18, 18) @[OneHot.scala 35:40]
    node T_5669 = bits(all_interrupts, 19, 19) @[OneHot.scala 35:40]
    node T_5670 = bits(all_interrupts, 20, 20) @[OneHot.scala 35:40]
    node T_5671 = bits(all_interrupts, 21, 21) @[OneHot.scala 35:40]
    node T_5672 = bits(all_interrupts, 22, 22) @[OneHot.scala 35:40]
    node T_5673 = bits(all_interrupts, 23, 23) @[OneHot.scala 35:40]
    node T_5674 = bits(all_interrupts, 24, 24) @[OneHot.scala 35:40]
    node T_5675 = bits(all_interrupts, 25, 25) @[OneHot.scala 35:40]
    node T_5676 = bits(all_interrupts, 26, 26) @[OneHot.scala 35:40]
    node T_5677 = bits(all_interrupts, 27, 27) @[OneHot.scala 35:40]
    node T_5678 = bits(all_interrupts, 28, 28) @[OneHot.scala 35:40]
    node T_5679 = bits(all_interrupts, 29, 29) @[OneHot.scala 35:40]
    node T_5680 = bits(all_interrupts, 30, 30) @[OneHot.scala 35:40]
    node T_5681 = bits(all_interrupts, 31, 31) @[OneHot.scala 35:40]
    node T_5682 = bits(all_interrupts, 32, 32) @[OneHot.scala 35:40]
    node T_5683 = bits(all_interrupts, 33, 33) @[OneHot.scala 35:40]
    node T_5684 = bits(all_interrupts, 34, 34) @[OneHot.scala 35:40]
    node T_5685 = bits(all_interrupts, 35, 35) @[OneHot.scala 35:40]
    node T_5686 = bits(all_interrupts, 36, 36) @[OneHot.scala 35:40]
    node T_5687 = bits(all_interrupts, 37, 37) @[OneHot.scala 35:40]
    node T_5688 = bits(all_interrupts, 38, 38) @[OneHot.scala 35:40]
    node T_5689 = bits(all_interrupts, 39, 39) @[OneHot.scala 35:40]
    node T_5690 = bits(all_interrupts, 40, 40) @[OneHot.scala 35:40]
    node T_5691 = bits(all_interrupts, 41, 41) @[OneHot.scala 35:40]
    node T_5692 = bits(all_interrupts, 42, 42) @[OneHot.scala 35:40]
    node T_5693 = bits(all_interrupts, 43, 43) @[OneHot.scala 35:40]
    node T_5694 = bits(all_interrupts, 44, 44) @[OneHot.scala 35:40]
    node T_5695 = bits(all_interrupts, 45, 45) @[OneHot.scala 35:40]
    node T_5696 = bits(all_interrupts, 46, 46) @[OneHot.scala 35:40]
    node T_5697 = bits(all_interrupts, 47, 47) @[OneHot.scala 35:40]
    node T_5698 = bits(all_interrupts, 48, 48) @[OneHot.scala 35:40]
    node T_5699 = bits(all_interrupts, 49, 49) @[OneHot.scala 35:40]
    node T_5700 = bits(all_interrupts, 50, 50) @[OneHot.scala 35:40]
    node T_5701 = bits(all_interrupts, 51, 51) @[OneHot.scala 35:40]
    node T_5702 = bits(all_interrupts, 52, 52) @[OneHot.scala 35:40]
    node T_5703 = bits(all_interrupts, 53, 53) @[OneHot.scala 35:40]
    node T_5704 = bits(all_interrupts, 54, 54) @[OneHot.scala 35:40]
    node T_5705 = bits(all_interrupts, 55, 55) @[OneHot.scala 35:40]
    node T_5706 = bits(all_interrupts, 56, 56) @[OneHot.scala 35:40]
    node T_5707 = bits(all_interrupts, 57, 57) @[OneHot.scala 35:40]
    node T_5708 = bits(all_interrupts, 58, 58) @[OneHot.scala 35:40]
    node T_5709 = bits(all_interrupts, 59, 59) @[OneHot.scala 35:40]
    node T_5710 = bits(all_interrupts, 60, 60) @[OneHot.scala 35:40]
    node T_5711 = bits(all_interrupts, 61, 61) @[OneHot.scala 35:40]
    node T_5712 = bits(all_interrupts, 62, 62) @[OneHot.scala 35:40]
    node T_5713 = bits(all_interrupts, 63, 63) @[OneHot.scala 35:40]
    node T_5778 = mux(T_5712, UInt<6>("h03e"), UInt<6>("h03f")) @[Mux.scala 31:69]
    node T_5779 = mux(T_5711, UInt<6>("h03d"), T_5778) @[Mux.scala 31:69]
    node T_5780 = mux(T_5710, UInt<6>("h03c"), T_5779) @[Mux.scala 31:69]
    node T_5781 = mux(T_5709, UInt<6>("h03b"), T_5780) @[Mux.scala 31:69]
    node T_5782 = mux(T_5708, UInt<6>("h03a"), T_5781) @[Mux.scala 31:69]
    node T_5783 = mux(T_5707, UInt<6>("h039"), T_5782) @[Mux.scala 31:69]
    node T_5784 = mux(T_5706, UInt<6>("h038"), T_5783) @[Mux.scala 31:69]
    node T_5785 = mux(T_5705, UInt<6>("h037"), T_5784) @[Mux.scala 31:69]
    node T_5786 = mux(T_5704, UInt<6>("h036"), T_5785) @[Mux.scala 31:69]
    node T_5787 = mux(T_5703, UInt<6>("h035"), T_5786) @[Mux.scala 31:69]
    node T_5788 = mux(T_5702, UInt<6>("h034"), T_5787) @[Mux.scala 31:69]
    node T_5789 = mux(T_5701, UInt<6>("h033"), T_5788) @[Mux.scala 31:69]
    node T_5790 = mux(T_5700, UInt<6>("h032"), T_5789) @[Mux.scala 31:69]
    node T_5791 = mux(T_5699, UInt<6>("h031"), T_5790) @[Mux.scala 31:69]
    node T_5792 = mux(T_5698, UInt<6>("h030"), T_5791) @[Mux.scala 31:69]
    node T_5793 = mux(T_5697, UInt<6>("h02f"), T_5792) @[Mux.scala 31:69]
    node T_5794 = mux(T_5696, UInt<6>("h02e"), T_5793) @[Mux.scala 31:69]
    node T_5795 = mux(T_5695, UInt<6>("h02d"), T_5794) @[Mux.scala 31:69]
    node T_5796 = mux(T_5694, UInt<6>("h02c"), T_5795) @[Mux.scala 31:69]
    node T_5797 = mux(T_5693, UInt<6>("h02b"), T_5796) @[Mux.scala 31:69]
    node T_5798 = mux(T_5692, UInt<6>("h02a"), T_5797) @[Mux.scala 31:69]
    node T_5799 = mux(T_5691, UInt<6>("h029"), T_5798) @[Mux.scala 31:69]
    node T_5800 = mux(T_5690, UInt<6>("h028"), T_5799) @[Mux.scala 31:69]
    node T_5801 = mux(T_5689, UInt<6>("h027"), T_5800) @[Mux.scala 31:69]
    node T_5802 = mux(T_5688, UInt<6>("h026"), T_5801) @[Mux.scala 31:69]
    node T_5803 = mux(T_5687, UInt<6>("h025"), T_5802) @[Mux.scala 31:69]
    node T_5804 = mux(T_5686, UInt<6>("h024"), T_5803) @[Mux.scala 31:69]
    node T_5805 = mux(T_5685, UInt<6>("h023"), T_5804) @[Mux.scala 31:69]
    node T_5806 = mux(T_5684, UInt<6>("h022"), T_5805) @[Mux.scala 31:69]
    node T_5807 = mux(T_5683, UInt<6>("h021"), T_5806) @[Mux.scala 31:69]
    node T_5808 = mux(T_5682, UInt<6>("h020"), T_5807) @[Mux.scala 31:69]
    node T_5809 = mux(T_5681, UInt<5>("h01f"), T_5808) @[Mux.scala 31:69]
    node T_5810 = mux(T_5680, UInt<5>("h01e"), T_5809) @[Mux.scala 31:69]
    node T_5811 = mux(T_5679, UInt<5>("h01d"), T_5810) @[Mux.scala 31:69]
    node T_5812 = mux(T_5678, UInt<5>("h01c"), T_5811) @[Mux.scala 31:69]
    node T_5813 = mux(T_5677, UInt<5>("h01b"), T_5812) @[Mux.scala 31:69]
    node T_5814 = mux(T_5676, UInt<5>("h01a"), T_5813) @[Mux.scala 31:69]
    node T_5815 = mux(T_5675, UInt<5>("h019"), T_5814) @[Mux.scala 31:69]
    node T_5816 = mux(T_5674, UInt<5>("h018"), T_5815) @[Mux.scala 31:69]
    node T_5817 = mux(T_5673, UInt<5>("h017"), T_5816) @[Mux.scala 31:69]
    node T_5818 = mux(T_5672, UInt<5>("h016"), T_5817) @[Mux.scala 31:69]
    node T_5819 = mux(T_5671, UInt<5>("h015"), T_5818) @[Mux.scala 31:69]
    node T_5820 = mux(T_5670, UInt<5>("h014"), T_5819) @[Mux.scala 31:69]
    node T_5821 = mux(T_5669, UInt<5>("h013"), T_5820) @[Mux.scala 31:69]
    node T_5822 = mux(T_5668, UInt<5>("h012"), T_5821) @[Mux.scala 31:69]
    node T_5823 = mux(T_5667, UInt<5>("h011"), T_5822) @[Mux.scala 31:69]
    node T_5824 = mux(T_5666, UInt<5>("h010"), T_5823) @[Mux.scala 31:69]
    node T_5825 = mux(T_5665, UInt<4>("h0f"), T_5824) @[Mux.scala 31:69]
    node T_5826 = mux(T_5664, UInt<4>("h0e"), T_5825) @[Mux.scala 31:69]
    node T_5827 = mux(T_5663, UInt<4>("h0d"), T_5826) @[Mux.scala 31:69]
    node T_5828 = mux(T_5662, UInt<4>("h0c"), T_5827) @[Mux.scala 31:69]
    node T_5829 = mux(T_5661, UInt<4>("h0b"), T_5828) @[Mux.scala 31:69]
    node T_5830 = mux(T_5660, UInt<4>("h0a"), T_5829) @[Mux.scala 31:69]
    node T_5831 = mux(T_5659, UInt<4>("h09"), T_5830) @[Mux.scala 31:69]
    node T_5832 = mux(T_5658, UInt<4>("h08"), T_5831) @[Mux.scala 31:69]
    node T_5833 = mux(T_5657, UInt<3>("h07"), T_5832) @[Mux.scala 31:69]
    node T_5834 = mux(T_5656, UInt<3>("h06"), T_5833) @[Mux.scala 31:69]
    node T_5835 = mux(T_5655, UInt<3>("h05"), T_5834) @[Mux.scala 31:69]
    node T_5836 = mux(T_5654, UInt<3>("h04"), T_5835) @[Mux.scala 31:69]
    node T_5837 = mux(T_5653, UInt<2>("h03"), T_5836) @[Mux.scala 31:69]
    node T_5838 = mux(T_5652, UInt<2>("h02"), T_5837) @[Mux.scala 31:69]
    node T_5839 = mux(T_5651, UInt<1>("h01"), T_5838) @[Mux.scala 31:69]
    node T_5840 = mux(T_5650, UInt<1>("h00"), T_5839) @[Mux.scala 31:69]
    node T_5841 = add(UInt<64>("h08000000000000000"), T_5840) @[csr.scala 260:37]
    node interruptCause = tail(T_5841, 1) @[csr.scala 260:37]
    node T_5843 = neq(all_interrupts, UInt<1>("h00")) @[csr.scala 261:34]
    node T_5845 = eq(io.singleStep, UInt<1>("h00")) @[csr.scala 261:41]
    node T_5846 = and(T_5843, T_5845) @[csr.scala 261:38]
    node T_5847 = or(T_5846, reg_singleStepped) @[csr.scala 261:56]
    io.interrupt <= T_5847 @[csr.scala 261:16]
    io.interrupt_cause <= interruptCause @[csr.scala 262:22]
    io.bp[0] <- reg_bp[0] @[csr.scala 263:9]
    node T_5849 = and(UInt<1>("h01"), reg_dcsr.debugint) @[csr.scala 266:26]
    node T_5851 = eq(reg_debug, UInt<1>("h00")) @[csr.scala 266:50]
    node T_5852 = and(T_5849, T_5851) @[csr.scala 266:47]
    when T_5852 : @[csr.scala 266:62]
      io.interrupt <= UInt<1>("h01") @[csr.scala 267:18]
      io.interrupt_cause <= UInt<64>("h0800000000000000d") @[csr.scala 268:24]
      skip @[csr.scala 266:62]
    node system_insn = eq(io.rw.cmd, UInt<3>("h04")) @[csr.scala 271:31]
    node T_5855 = neq(io.rw.cmd, UInt<3>("h00")) @[csr.scala 272:27]
    node T_5857 = eq(system_insn, UInt<1>("h00")) @[csr.scala 272:40]
    node cpu_ren = and(T_5855, T_5857) @[csr.scala 272:37]
    node T_5858 = neq(io.rw.cmd, UInt<3>("h05")) @[csr.scala 273:38]
    node cpu_wen = and(cpu_ren, T_5858) @[csr.scala 273:25]
    reg reg_misa : UInt, clk with : (reset => (reset, UInt<64>("h0800000000014112d")))
    node T_5860 = cat(io.status.hie, io.status.sie) @[csr.scala 287:38]
    node T_5861 = cat(T_5860, io.status.uie) @[csr.scala 287:38]
    node T_5862 = cat(io.status.spie, io.status.upie) @[csr.scala 287:38]
    node T_5863 = cat(T_5862, io.status.mie) @[csr.scala 287:38]
    node T_5864 = cat(T_5863, T_5861) @[csr.scala 287:38]
    node T_5865 = cat(io.status.spp, io.status.mpie) @[csr.scala 287:38]
    node T_5866 = cat(T_5865, io.status.hpie) @[csr.scala 287:38]
    node T_5867 = cat(io.status.fs, io.status.mpp) @[csr.scala 287:38]
    node T_5868 = cat(T_5867, io.status.hpp) @[csr.scala 287:38]
    node T_5869 = cat(T_5868, T_5866) @[csr.scala 287:38]
    node T_5870 = cat(T_5869, T_5864) @[csr.scala 287:38]
    node T_5871 = cat(io.status.pum, io.status.mprv) @[csr.scala 287:38]
    node T_5872 = cat(T_5871, io.status.xs) @[csr.scala 287:38]
    node T_5873 = cat(io.status.vm, io.status.zero1) @[csr.scala 287:38]
    node T_5874 = cat(T_5873, io.status.mxr) @[csr.scala 287:38]
    node T_5875 = cat(T_5874, T_5872) @[csr.scala 287:38]
    node T_5876 = cat(io.status.zero3, io.status.sd_rv32) @[csr.scala 287:38]
    node T_5877 = cat(T_5876, io.status.zero2) @[csr.scala 287:38]
    node T_5878 = cat(io.status.prv, io.status.sd) @[csr.scala 287:38]
    node T_5879 = cat(io.status.debug, io.status.isa) @[csr.scala 287:38]
    node T_5880 = cat(T_5879, T_5878) @[csr.scala 287:38]
    node T_5881 = cat(T_5880, T_5877) @[csr.scala 287:38]
    node T_5882 = cat(T_5881, T_5875) @[csr.scala 287:38]
    node T_5883 = cat(T_5882, T_5870) @[csr.scala 287:38]
    node read_mstatus = bits(T_5883, 63, 0) @[csr.scala 287:40]
    node T_5901 = cat(reg_bp[reg_tselect].control.x, reg_bp[reg_tselect].control.w) @[csr.scala 291:48]
    node T_5902 = cat(T_5901, reg_bp[reg_tselect].control.r) @[csr.scala 291:48]
    node T_5903 = cat(reg_bp[reg_tselect].control.s, reg_bp[reg_tselect].control.u) @[csr.scala 291:48]
    node T_5904 = cat(reg_bp[reg_tselect].control.m, reg_bp[reg_tselect].control.h) @[csr.scala 291:48]
    node T_5905 = cat(T_5904, T_5903) @[csr.scala 291:48]
    node T_5906 = cat(T_5905, T_5902) @[csr.scala 291:48]
    node T_5907 = cat(reg_bp[reg_tselect].control.zero, reg_bp[reg_tselect].control.tmatch) @[csr.scala 291:48]
    node T_5908 = cat(reg_bp[reg_tselect].control.action, reg_bp[reg_tselect].control.chain) @[csr.scala 291:48]
    node T_5909 = cat(T_5908, T_5907) @[csr.scala 291:48]
    node T_5910 = cat(reg_bp[reg_tselect].control.maskmax, reg_bp[reg_tselect].control.reserved) @[csr.scala 291:48]
    node T_5911 = cat(reg_bp[reg_tselect].control.ttype, reg_bp[reg_tselect].control.dmode) @[csr.scala 291:48]
    node T_5912 = cat(T_5911, T_5910) @[csr.scala 291:48]
    node T_5913 = cat(T_5912, T_5909) @[csr.scala 291:48]
    node T_5914 = cat(T_5913, T_5906) @[csr.scala 291:48]
    node T_5932 = bits(reg_bp[reg_tselect].address, 38, 38) @[util.scala 21:38]
    node T_5933 = bits(T_5932, 0, 0) @[Bitwise.scala 33:15]
    node T_5936 = mux(T_5933, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 33:12]
    node T_5937 = cat(T_5936, reg_bp[reg_tselect].address) @[Cat.scala 20:58]
    node T_5941 = bits(reg_mepc, 39, 39) @[util.scala 21:38]
    node T_5942 = bits(T_5941, 0, 0) @[Bitwise.scala 33:15]
    node T_5945 = mux(T_5942, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 33:12]
    node T_5946 = cat(T_5945, reg_mepc) @[Cat.scala 20:58]
    node T_5947 = bits(reg_mbadaddr, 39, 39) @[util.scala 21:38]
    node T_5948 = bits(T_5947, 0, 0) @[Bitwise.scala 33:15]
    node T_5951 = mux(T_5948, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 33:12]
    node T_5952 = cat(T_5951, reg_mbadaddr) @[Cat.scala 20:58]
    node T_5953 = cat(reg_dcsr.step, reg_dcsr.prv) @[csr.scala 312:27]
    node T_5954 = cat(reg_dcsr.zero1, reg_dcsr.halt) @[csr.scala 312:27]
    node T_5955 = cat(T_5954, T_5953) @[csr.scala 312:27]
    node T_5956 = cat(reg_dcsr.cause, reg_dcsr.debugint) @[csr.scala 312:27]
    node T_5957 = cat(reg_dcsr.stopcycle, reg_dcsr.stoptime) @[csr.scala 312:27]
    node T_5958 = cat(T_5957, T_5956) @[csr.scala 312:27]
    node T_5959 = cat(T_5958, T_5955) @[csr.scala 312:27]
    node T_5960 = cat(reg_dcsr.ebreaku, reg_dcsr.zero2) @[csr.scala 312:27]
    node T_5961 = cat(reg_dcsr.ebreakh, reg_dcsr.ebreaks) @[csr.scala 312:27]
    node T_5962 = cat(T_5961, T_5960) @[csr.scala 312:27]
    node T_5963 = cat(reg_dcsr.zero3, reg_dcsr.ebreakm) @[csr.scala 312:27]
    node T_5964 = cat(reg_dcsr.xdebugver, reg_dcsr.ndreset) @[csr.scala 312:27]
    node T_5965 = cat(T_5964, reg_dcsr.fullreset) @[csr.scala 312:27]
    node T_5966 = cat(T_5965, T_5963) @[csr.scala 312:27]
    node T_5967 = cat(T_5966, T_5962) @[csr.scala 312:27]
    node T_5968 = cat(T_5967, T_5959) @[csr.scala 312:27]
    node T_5969 = cat(reg_frm, reg_fflags) @[Cat.scala 20:58]
    node T_5972 = and(reg_mie, reg_mideleg) @[csr.scala 335:28]
    node T_5973 = and(read_mip, reg_mideleg) @[csr.scala 336:29]
    wire T_5974 : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}
    T_5974 is invalid
    T_5974 <- io.status
    T_5974.vm <= UInt<1>("h00") @[csr.scala 338:21]
    T_5974.mprv <= UInt<1>("h00") @[csr.scala 339:23]
    T_5974.mpp <= UInt<1>("h00") @[csr.scala 340:22]
    T_5974.hpp <= UInt<1>("h00") @[csr.scala 341:22]
    T_5974.mpie <= UInt<1>("h00") @[csr.scala 342:23]
    T_5974.hpie <= UInt<1>("h00") @[csr.scala 343:23]
    T_5974.mie <= UInt<1>("h00") @[csr.scala 344:22]
    T_5974.hie <= UInt<1>("h00") @[csr.scala 345:22]
    node T_6008 = cat(T_5974.hie, T_5974.sie) @[csr.scala 347:57]
    node T_6009 = cat(T_6008, T_5974.uie) @[csr.scala 347:57]
    node T_6010 = cat(T_5974.spie, T_5974.upie) @[csr.scala 347:57]
    node T_6011 = cat(T_6010, T_5974.mie) @[csr.scala 347:57]
    node T_6012 = cat(T_6011, T_6009) @[csr.scala 347:57]
    node T_6013 = cat(T_5974.spp, T_5974.mpie) @[csr.scala 347:57]
    node T_6014 = cat(T_6013, T_5974.hpie) @[csr.scala 347:57]
    node T_6015 = cat(T_5974.fs, T_5974.mpp) @[csr.scala 347:57]
    node T_6016 = cat(T_6015, T_5974.hpp) @[csr.scala 347:57]
    node T_6017 = cat(T_6016, T_6014) @[csr.scala 347:57]
    node T_6018 = cat(T_6017, T_6012) @[csr.scala 347:57]
    node T_6019 = cat(T_5974.pum, T_5974.mprv) @[csr.scala 347:57]
    node T_6020 = cat(T_6019, T_5974.xs) @[csr.scala 347:57]
    node T_6021 = cat(T_5974.vm, T_5974.zero1) @[csr.scala 347:57]
    node T_6022 = cat(T_6021, T_5974.mxr) @[csr.scala 347:57]
    node T_6023 = cat(T_6022, T_6020) @[csr.scala 347:57]
    node T_6024 = cat(T_5974.zero3, T_5974.sd_rv32) @[csr.scala 347:57]
    node T_6025 = cat(T_6024, T_5974.zero2) @[csr.scala 347:57]
    node T_6026 = cat(T_5974.prv, T_5974.sd) @[csr.scala 347:57]
    node T_6027 = cat(T_5974.debug, T_5974.isa) @[csr.scala 347:57]
    node T_6028 = cat(T_6027, T_6026) @[csr.scala 347:57]
    node T_6029 = cat(T_6028, T_6025) @[csr.scala 347:57]
    node T_6030 = cat(T_6029, T_6023) @[csr.scala 347:57]
    node T_6031 = cat(T_6030, T_6018) @[csr.scala 347:57]
    node T_6032 = bits(T_6031, 63, 0) @[csr.scala 347:60]
    node T_6033 = bits(reg_sbadaddr, 39, 39) @[util.scala 21:38]
    node T_6034 = bits(T_6033, 0, 0) @[Bitwise.scala 33:15]
    node T_6037 = mux(T_6034, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 33:12]
    node T_6038 = cat(T_6037, reg_sbadaddr) @[Cat.scala 20:58]
    node T_6039 = cat(reg_sptbr.asid, reg_sptbr.ppn) @[csr.scala 353:45]
    node T_6040 = bits(reg_sepc, 39, 39) @[util.scala 21:38]
    node T_6041 = bits(T_6040, 0, 0) @[Bitwise.scala 33:15]
    node T_6044 = mux(T_6041, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 33:12]
    node T_6045 = cat(T_6044, reg_sepc) @[Cat.scala 20:58]
    node T_6046 = bits(reg_stvec, 38, 38) @[util.scala 21:38]
    node T_6047 = bits(T_6046, 0, 0) @[Bitwise.scala 33:15]
    node T_6050 = mux(T_6047, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 33:12]
    node T_6051 = cat(T_6050, reg_stvec) @[Cat.scala 20:58]
    node T_6053 = eq(io.rw.addr, UInt<11>("h07a0")) @[csr.scala 381:73]
    node T_6055 = eq(io.rw.addr, UInt<11>("h07a1")) @[csr.scala 381:73]
    node T_6057 = eq(io.rw.addr, UInt<11>("h07a2")) @[csr.scala 381:73]
    node T_6059 = eq(io.rw.addr, UInt<12>("h0f13")) @[csr.scala 381:73]
    node T_6061 = eq(io.rw.addr, UInt<12>("h0f12")) @[csr.scala 381:73]
    node T_6063 = eq(io.rw.addr, UInt<12>("h0f11")) @[csr.scala 381:73]
    node T_6065 = eq(io.rw.addr, UInt<12>("h0b00")) @[csr.scala 381:73]
    node T_6067 = eq(io.rw.addr, UInt<12>("h0b02")) @[csr.scala 381:73]
    node T_6069 = eq(io.rw.addr, UInt<10>("h0301")) @[csr.scala 381:73]
    node T_6071 = eq(io.rw.addr, UInt<10>("h0300")) @[csr.scala 381:73]
    node T_6073 = eq(io.rw.addr, UInt<10>("h0305")) @[csr.scala 381:73]
    node T_6075 = eq(io.rw.addr, UInt<10>("h0344")) @[csr.scala 381:73]
    node T_6077 = eq(io.rw.addr, UInt<10>("h0304")) @[csr.scala 381:73]
    node T_6079 = eq(io.rw.addr, UInt<10>("h0303")) @[csr.scala 381:73]
    node T_6081 = eq(io.rw.addr, UInt<10>("h0302")) @[csr.scala 381:73]
    node T_6083 = eq(io.rw.addr, UInt<10>("h0340")) @[csr.scala 381:73]
    node T_6085 = eq(io.rw.addr, UInt<10>("h0341")) @[csr.scala 381:73]
    node T_6087 = eq(io.rw.addr, UInt<10>("h0343")) @[csr.scala 381:73]
    node T_6089 = eq(io.rw.addr, UInt<10>("h0342")) @[csr.scala 381:73]
    node T_6091 = eq(io.rw.addr, UInt<12>("h0f14")) @[csr.scala 381:73]
    node T_6093 = eq(io.rw.addr, UInt<11>("h07b0")) @[csr.scala 381:73]
    node T_6095 = eq(io.rw.addr, UInt<11>("h07b1")) @[csr.scala 381:73]
    node T_6097 = eq(io.rw.addr, UInt<11>("h07b2")) @[csr.scala 381:73]
    node T_6099 = eq(io.rw.addr, UInt<1>("h01")) @[csr.scala 381:73]
    node T_6101 = eq(io.rw.addr, UInt<2>("h02")) @[csr.scala 381:73]
    node T_6103 = eq(io.rw.addr, UInt<2>("h03")) @[csr.scala 381:73]
    node T_6105 = eq(io.rw.addr, UInt<10>("h0323")) @[csr.scala 381:73]
    node T_6107 = eq(io.rw.addr, UInt<12>("h0b03")) @[csr.scala 381:73]
    node T_6109 = eq(io.rw.addr, UInt<12>("h0c03")) @[csr.scala 381:73]
    node T_6111 = eq(io.rw.addr, UInt<10>("h0324")) @[csr.scala 381:73]
    node T_6113 = eq(io.rw.addr, UInt<12>("h0b04")) @[csr.scala 381:73]
    node T_6115 = eq(io.rw.addr, UInt<12>("h0c04")) @[csr.scala 381:73]
    node T_6117 = eq(io.rw.addr, UInt<10>("h0325")) @[csr.scala 381:73]
    node T_6119 = eq(io.rw.addr, UInt<12>("h0b05")) @[csr.scala 381:73]
    node T_6121 = eq(io.rw.addr, UInt<12>("h0c05")) @[csr.scala 381:73]
    node T_6123 = eq(io.rw.addr, UInt<10>("h0326")) @[csr.scala 381:73]
    node T_6125 = eq(io.rw.addr, UInt<12>("h0b06")) @[csr.scala 381:73]
    node T_6127 = eq(io.rw.addr, UInt<12>("h0c06")) @[csr.scala 381:73]
    node T_6129 = eq(io.rw.addr, UInt<10>("h0327")) @[csr.scala 381:73]
    node T_6131 = eq(io.rw.addr, UInt<12>("h0b07")) @[csr.scala 381:73]
    node T_6133 = eq(io.rw.addr, UInt<12>("h0c07")) @[csr.scala 381:73]
    node T_6135 = eq(io.rw.addr, UInt<10>("h0328")) @[csr.scala 381:73]
    node T_6137 = eq(io.rw.addr, UInt<12>("h0b08")) @[csr.scala 381:73]
    node T_6139 = eq(io.rw.addr, UInt<12>("h0c08")) @[csr.scala 381:73]
    node T_6141 = eq(io.rw.addr, UInt<10>("h0329")) @[csr.scala 381:73]
    node T_6143 = eq(io.rw.addr, UInt<12>("h0b09")) @[csr.scala 381:73]
    node T_6145 = eq(io.rw.addr, UInt<12>("h0c09")) @[csr.scala 381:73]
    node T_6147 = eq(io.rw.addr, UInt<10>("h032a")) @[csr.scala 381:73]
    node T_6149 = eq(io.rw.addr, UInt<12>("h0b0a")) @[csr.scala 381:73]
    node T_6151 = eq(io.rw.addr, UInt<12>("h0c0a")) @[csr.scala 381:73]
    node T_6153 = eq(io.rw.addr, UInt<10>("h032b")) @[csr.scala 381:73]
    node T_6155 = eq(io.rw.addr, UInt<12>("h0b0b")) @[csr.scala 381:73]
    node T_6157 = eq(io.rw.addr, UInt<12>("h0c0b")) @[csr.scala 381:73]
    node T_6159 = eq(io.rw.addr, UInt<10>("h032c")) @[csr.scala 381:73]
    node T_6161 = eq(io.rw.addr, UInt<12>("h0b0c")) @[csr.scala 381:73]
    node T_6163 = eq(io.rw.addr, UInt<12>("h0c0c")) @[csr.scala 381:73]
    node T_6165 = eq(io.rw.addr, UInt<10>("h032d")) @[csr.scala 381:73]
    node T_6167 = eq(io.rw.addr, UInt<12>("h0b0d")) @[csr.scala 381:73]
    node T_6169 = eq(io.rw.addr, UInt<12>("h0c0d")) @[csr.scala 381:73]
    node T_6171 = eq(io.rw.addr, UInt<10>("h032e")) @[csr.scala 381:73]
    node T_6173 = eq(io.rw.addr, UInt<12>("h0b0e")) @[csr.scala 381:73]
    node T_6175 = eq(io.rw.addr, UInt<12>("h0c0e")) @[csr.scala 381:73]
    node T_6177 = eq(io.rw.addr, UInt<10>("h032f")) @[csr.scala 381:73]
    node T_6179 = eq(io.rw.addr, UInt<12>("h0b0f")) @[csr.scala 381:73]
    node T_6181 = eq(io.rw.addr, UInt<12>("h0c0f")) @[csr.scala 381:73]
    node T_6183 = eq(io.rw.addr, UInt<10>("h0330")) @[csr.scala 381:73]
    node T_6185 = eq(io.rw.addr, UInt<12>("h0b10")) @[csr.scala 381:73]
    node T_6187 = eq(io.rw.addr, UInt<12>("h0c10")) @[csr.scala 381:73]
    node T_6189 = eq(io.rw.addr, UInt<10>("h0331")) @[csr.scala 381:73]
    node T_6191 = eq(io.rw.addr, UInt<12>("h0b11")) @[csr.scala 381:73]
    node T_6193 = eq(io.rw.addr, UInt<12>("h0c11")) @[csr.scala 381:73]
    node T_6195 = eq(io.rw.addr, UInt<10>("h0332")) @[csr.scala 381:73]
    node T_6197 = eq(io.rw.addr, UInt<12>("h0b12")) @[csr.scala 381:73]
    node T_6199 = eq(io.rw.addr, UInt<12>("h0c12")) @[csr.scala 381:73]
    node T_6201 = eq(io.rw.addr, UInt<10>("h0333")) @[csr.scala 381:73]
    node T_6203 = eq(io.rw.addr, UInt<12>("h0b13")) @[csr.scala 381:73]
    node T_6205 = eq(io.rw.addr, UInt<12>("h0c13")) @[csr.scala 381:73]
    node T_6207 = eq(io.rw.addr, UInt<10>("h0334")) @[csr.scala 381:73]
    node T_6209 = eq(io.rw.addr, UInt<12>("h0b14")) @[csr.scala 381:73]
    node T_6211 = eq(io.rw.addr, UInt<12>("h0c14")) @[csr.scala 381:73]
    node T_6213 = eq(io.rw.addr, UInt<10>("h0335")) @[csr.scala 381:73]
    node T_6215 = eq(io.rw.addr, UInt<12>("h0b15")) @[csr.scala 381:73]
    node T_6217 = eq(io.rw.addr, UInt<12>("h0c15")) @[csr.scala 381:73]
    node T_6219 = eq(io.rw.addr, UInt<10>("h0336")) @[csr.scala 381:73]
    node T_6221 = eq(io.rw.addr, UInt<12>("h0b16")) @[csr.scala 381:73]
    node T_6223 = eq(io.rw.addr, UInt<12>("h0c16")) @[csr.scala 381:73]
    node T_6225 = eq(io.rw.addr, UInt<10>("h0337")) @[csr.scala 381:73]
    node T_6227 = eq(io.rw.addr, UInt<12>("h0b17")) @[csr.scala 381:73]
    node T_6229 = eq(io.rw.addr, UInt<12>("h0c17")) @[csr.scala 381:73]
    node T_6231 = eq(io.rw.addr, UInt<10>("h0338")) @[csr.scala 381:73]
    node T_6233 = eq(io.rw.addr, UInt<12>("h0b18")) @[csr.scala 381:73]
    node T_6235 = eq(io.rw.addr, UInt<12>("h0c18")) @[csr.scala 381:73]
    node T_6237 = eq(io.rw.addr, UInt<10>("h0339")) @[csr.scala 381:73]
    node T_6239 = eq(io.rw.addr, UInt<12>("h0b19")) @[csr.scala 381:73]
    node T_6241 = eq(io.rw.addr, UInt<12>("h0c19")) @[csr.scala 381:73]
    node T_6243 = eq(io.rw.addr, UInt<10>("h033a")) @[csr.scala 381:73]
    node T_6245 = eq(io.rw.addr, UInt<12>("h0b1a")) @[csr.scala 381:73]
    node T_6247 = eq(io.rw.addr, UInt<12>("h0c1a")) @[csr.scala 381:73]
    node T_6249 = eq(io.rw.addr, UInt<10>("h033b")) @[csr.scala 381:73]
    node T_6251 = eq(io.rw.addr, UInt<12>("h0b1b")) @[csr.scala 381:73]
    node T_6253 = eq(io.rw.addr, UInt<12>("h0c1b")) @[csr.scala 381:73]
    node T_6255 = eq(io.rw.addr, UInt<10>("h033c")) @[csr.scala 381:73]
    node T_6257 = eq(io.rw.addr, UInt<12>("h0b1c")) @[csr.scala 381:73]
    node T_6259 = eq(io.rw.addr, UInt<12>("h0c1c")) @[csr.scala 381:73]
    node T_6261 = eq(io.rw.addr, UInt<10>("h033d")) @[csr.scala 381:73]
    node T_6263 = eq(io.rw.addr, UInt<12>("h0b1d")) @[csr.scala 381:73]
    node T_6265 = eq(io.rw.addr, UInt<12>("h0c1d")) @[csr.scala 381:73]
    node T_6267 = eq(io.rw.addr, UInt<10>("h033e")) @[csr.scala 381:73]
    node T_6269 = eq(io.rw.addr, UInt<12>("h0b1e")) @[csr.scala 381:73]
    node T_6271 = eq(io.rw.addr, UInt<12>("h0c1e")) @[csr.scala 381:73]
    node T_6273 = eq(io.rw.addr, UInt<10>("h033f")) @[csr.scala 381:73]
    node T_6275 = eq(io.rw.addr, UInt<12>("h0b1f")) @[csr.scala 381:73]
    node T_6277 = eq(io.rw.addr, UInt<12>("h0c1f")) @[csr.scala 381:73]
    node T_6279 = eq(io.rw.addr, UInt<9>("h0100")) @[csr.scala 381:73]
    node T_6281 = eq(io.rw.addr, UInt<9>("h0144")) @[csr.scala 381:73]
    node T_6283 = eq(io.rw.addr, UInt<9>("h0104")) @[csr.scala 381:73]
    node T_6285 = eq(io.rw.addr, UInt<9>("h0140")) @[csr.scala 381:73]
    node T_6287 = eq(io.rw.addr, UInt<9>("h0142")) @[csr.scala 381:73]
    node T_6289 = eq(io.rw.addr, UInt<9>("h0143")) @[csr.scala 381:73]
    node T_6291 = eq(io.rw.addr, UInt<9>("h0180")) @[csr.scala 381:73]
    node T_6293 = eq(io.rw.addr, UInt<9>("h0141")) @[csr.scala 381:73]
    node T_6295 = eq(io.rw.addr, UInt<9>("h0105")) @[csr.scala 381:73]
    node T_6297 = eq(io.rw.addr, UInt<10>("h0321")) @[csr.scala 381:73]
    node T_6299 = eq(io.rw.addr, UInt<10>("h0320")) @[csr.scala 381:73]
    node T_6301 = eq(io.rw.addr, UInt<12>("h0c00")) @[csr.scala 381:73]
    node T_6303 = eq(io.rw.addr, UInt<12>("h0c02")) @[csr.scala 381:73]
    node T_6304 = or(T_6053, T_6055) @[csr.scala 382:48]
    node T_6305 = or(T_6304, T_6057) @[csr.scala 382:48]
    node T_6306 = or(T_6305, T_6059) @[csr.scala 382:48]
    node T_6307 = or(T_6306, T_6061) @[csr.scala 382:48]
    node T_6308 = or(T_6307, T_6063) @[csr.scala 382:48]
    node T_6309 = or(T_6308, T_6065) @[csr.scala 382:48]
    node T_6310 = or(T_6309, T_6067) @[csr.scala 382:48]
    node T_6311 = or(T_6310, T_6069) @[csr.scala 382:48]
    node T_6312 = or(T_6311, T_6071) @[csr.scala 382:48]
    node T_6313 = or(T_6312, T_6073) @[csr.scala 382:48]
    node T_6314 = or(T_6313, T_6075) @[csr.scala 382:48]
    node T_6315 = or(T_6314, T_6077) @[csr.scala 382:48]
    node T_6316 = or(T_6315, T_6079) @[csr.scala 382:48]
    node T_6317 = or(T_6316, T_6081) @[csr.scala 382:48]
    node T_6318 = or(T_6317, T_6083) @[csr.scala 382:48]
    node T_6319 = or(T_6318, T_6085) @[csr.scala 382:48]
    node T_6320 = or(T_6319, T_6087) @[csr.scala 382:48]
    node T_6321 = or(T_6320, T_6089) @[csr.scala 382:48]
    node T_6322 = or(T_6321, T_6091) @[csr.scala 382:48]
    node T_6323 = or(T_6322, T_6093) @[csr.scala 382:48]
    node T_6324 = or(T_6323, T_6095) @[csr.scala 382:48]
    node T_6325 = or(T_6324, T_6097) @[csr.scala 382:48]
    node T_6326 = or(T_6325, T_6099) @[csr.scala 382:48]
    node T_6327 = or(T_6326, T_6101) @[csr.scala 382:48]
    node T_6328 = or(T_6327, T_6103) @[csr.scala 382:48]
    node T_6329 = or(T_6328, T_6105) @[csr.scala 382:48]
    node T_6330 = or(T_6329, T_6107) @[csr.scala 382:48]
    node T_6331 = or(T_6330, T_6109) @[csr.scala 382:48]
    node T_6332 = or(T_6331, T_6111) @[csr.scala 382:48]
    node T_6333 = or(T_6332, T_6113) @[csr.scala 382:48]
    node T_6334 = or(T_6333, T_6115) @[csr.scala 382:48]
    node T_6335 = or(T_6334, T_6117) @[csr.scala 382:48]
    node T_6336 = or(T_6335, T_6119) @[csr.scala 382:48]
    node T_6337 = or(T_6336, T_6121) @[csr.scala 382:48]
    node T_6338 = or(T_6337, T_6123) @[csr.scala 382:48]
    node T_6339 = or(T_6338, T_6125) @[csr.scala 382:48]
    node T_6340 = or(T_6339, T_6127) @[csr.scala 382:48]
    node T_6341 = or(T_6340, T_6129) @[csr.scala 382:48]
    node T_6342 = or(T_6341, T_6131) @[csr.scala 382:48]
    node T_6343 = or(T_6342, T_6133) @[csr.scala 382:48]
    node T_6344 = or(T_6343, T_6135) @[csr.scala 382:48]
    node T_6345 = or(T_6344, T_6137) @[csr.scala 382:48]
    node T_6346 = or(T_6345, T_6139) @[csr.scala 382:48]
    node T_6347 = or(T_6346, T_6141) @[csr.scala 382:48]
    node T_6348 = or(T_6347, T_6143) @[csr.scala 382:48]
    node T_6349 = or(T_6348, T_6145) @[csr.scala 382:48]
    node T_6350 = or(T_6349, T_6147) @[csr.scala 382:48]
    node T_6351 = or(T_6350, T_6149) @[csr.scala 382:48]
    node T_6352 = or(T_6351, T_6151) @[csr.scala 382:48]
    node T_6353 = or(T_6352, T_6153) @[csr.scala 382:48]
    node T_6354 = or(T_6353, T_6155) @[csr.scala 382:48]
    node T_6355 = or(T_6354, T_6157) @[csr.scala 382:48]
    node T_6356 = or(T_6355, T_6159) @[csr.scala 382:48]
    node T_6357 = or(T_6356, T_6161) @[csr.scala 382:48]
    node T_6358 = or(T_6357, T_6163) @[csr.scala 382:48]
    node T_6359 = or(T_6358, T_6165) @[csr.scala 382:48]
    node T_6360 = or(T_6359, T_6167) @[csr.scala 382:48]
    node T_6361 = or(T_6360, T_6169) @[csr.scala 382:48]
    node T_6362 = or(T_6361, T_6171) @[csr.scala 382:48]
    node T_6363 = or(T_6362, T_6173) @[csr.scala 382:48]
    node T_6364 = or(T_6363, T_6175) @[csr.scala 382:48]
    node T_6365 = or(T_6364, T_6177) @[csr.scala 382:48]
    node T_6366 = or(T_6365, T_6179) @[csr.scala 382:48]
    node T_6367 = or(T_6366, T_6181) @[csr.scala 382:48]
    node T_6368 = or(T_6367, T_6183) @[csr.scala 382:48]
    node T_6369 = or(T_6368, T_6185) @[csr.scala 382:48]
    node T_6370 = or(T_6369, T_6187) @[csr.scala 382:48]
    node T_6371 = or(T_6370, T_6189) @[csr.scala 382:48]
    node T_6372 = or(T_6371, T_6191) @[csr.scala 382:48]
    node T_6373 = or(T_6372, T_6193) @[csr.scala 382:48]
    node T_6374 = or(T_6373, T_6195) @[csr.scala 382:48]
    node T_6375 = or(T_6374, T_6197) @[csr.scala 382:48]
    node T_6376 = or(T_6375, T_6199) @[csr.scala 382:48]
    node T_6377 = or(T_6376, T_6201) @[csr.scala 382:48]
    node T_6378 = or(T_6377, T_6203) @[csr.scala 382:48]
    node T_6379 = or(T_6378, T_6205) @[csr.scala 382:48]
    node T_6380 = or(T_6379, T_6207) @[csr.scala 382:48]
    node T_6381 = or(T_6380, T_6209) @[csr.scala 382:48]
    node T_6382 = or(T_6381, T_6211) @[csr.scala 382:48]
    node T_6383 = or(T_6382, T_6213) @[csr.scala 382:48]
    node T_6384 = or(T_6383, T_6215) @[csr.scala 382:48]
    node T_6385 = or(T_6384, T_6217) @[csr.scala 382:48]
    node T_6386 = or(T_6385, T_6219) @[csr.scala 382:48]
    node T_6387 = or(T_6386, T_6221) @[csr.scala 382:48]
    node T_6388 = or(T_6387, T_6223) @[csr.scala 382:48]
    node T_6389 = or(T_6388, T_6225) @[csr.scala 382:48]
    node T_6390 = or(T_6389, T_6227) @[csr.scala 382:48]
    node T_6391 = or(T_6390, T_6229) @[csr.scala 382:48]
    node T_6392 = or(T_6391, T_6231) @[csr.scala 382:48]
    node T_6393 = or(T_6392, T_6233) @[csr.scala 382:48]
    node T_6394 = or(T_6393, T_6235) @[csr.scala 382:48]
    node T_6395 = or(T_6394, T_6237) @[csr.scala 382:48]
    node T_6396 = or(T_6395, T_6239) @[csr.scala 382:48]
    node T_6397 = or(T_6396, T_6241) @[csr.scala 382:48]
    node T_6398 = or(T_6397, T_6243) @[csr.scala 382:48]
    node T_6399 = or(T_6398, T_6245) @[csr.scala 382:48]
    node T_6400 = or(T_6399, T_6247) @[csr.scala 382:48]
    node T_6401 = or(T_6400, T_6249) @[csr.scala 382:48]
    node T_6402 = or(T_6401, T_6251) @[csr.scala 382:48]
    node T_6403 = or(T_6402, T_6253) @[csr.scala 382:48]
    node T_6404 = or(T_6403, T_6255) @[csr.scala 382:48]
    node T_6405 = or(T_6404, T_6257) @[csr.scala 382:48]
    node T_6406 = or(T_6405, T_6259) @[csr.scala 382:48]
    node T_6407 = or(T_6406, T_6261) @[csr.scala 382:48]
    node T_6408 = or(T_6407, T_6263) @[csr.scala 382:48]
    node T_6409 = or(T_6408, T_6265) @[csr.scala 382:48]
    node T_6410 = or(T_6409, T_6267) @[csr.scala 382:48]
    node T_6411 = or(T_6410, T_6269) @[csr.scala 382:48]
    node T_6412 = or(T_6411, T_6271) @[csr.scala 382:48]
    node T_6413 = or(T_6412, T_6273) @[csr.scala 382:48]
    node T_6414 = or(T_6413, T_6275) @[csr.scala 382:48]
    node T_6415 = or(T_6414, T_6277) @[csr.scala 382:48]
    node T_6416 = or(T_6415, T_6279) @[csr.scala 382:48]
    node T_6417 = or(T_6416, T_6281) @[csr.scala 382:48]
    node T_6418 = or(T_6417, T_6283) @[csr.scala 382:48]
    node T_6419 = or(T_6418, T_6285) @[csr.scala 382:48]
    node T_6420 = or(T_6419, T_6287) @[csr.scala 382:48]
    node T_6421 = or(T_6420, T_6289) @[csr.scala 382:48]
    node T_6422 = or(T_6421, T_6291) @[csr.scala 382:48]
    node T_6423 = or(T_6422, T_6293) @[csr.scala 382:48]
    node T_6424 = or(T_6423, T_6295) @[csr.scala 382:48]
    node T_6425 = or(T_6424, T_6297) @[csr.scala 382:48]
    node T_6426 = or(T_6425, T_6299) @[csr.scala 382:48]
    node T_6427 = or(T_6426, T_6301) @[csr.scala 382:48]
    node addr_valid = or(T_6427, T_6303) @[csr.scala 382:48]
    node T_6428 = or(T_6099, T_6101) @[csr.scala 383:90]
    node fp_csr = or(T_6428, T_6103) @[csr.scala 383:90]
    node T_6430 = geq(io.rw.addr, UInt<12>("h0c00")) @[csr.scala 384:43]
    node T_6432 = lt(io.rw.addr, UInt<12>("h0c20")) @[csr.scala 384:73]
    node hpm_csr = and(T_6430, T_6432) @[csr.scala 384:59]
    node T_6434 = eq(reg_mstatus.prv, UInt<2>("h03")) @[csr.scala 385:45]
    node T_6435 = or(reg_debug, T_6434) @[csr.scala 385:26]
    node T_6437 = eq(reg_mstatus.prv, UInt<1>("h01")) @[csr.scala 386:22]
    node T_6438 = bits(io.rw.addr, 4, 0) @[csr.scala 386:61]
    node T_6439 = dshr(reg_mscounteren, T_6438) @[csr.scala 386:50]
    node T_6440 = bits(T_6439, 0, 0) @[csr.scala 386:50]
    node T_6441 = and(T_6437, T_6440) @[csr.scala 386:32]
    node T_6442 = or(T_6435, T_6441) @[csr.scala 385:55]
    node T_6444 = eq(reg_mstatus.prv, UInt<1>("h00")) @[csr.scala 387:22]
    node T_6445 = bits(io.rw.addr, 4, 0) @[csr.scala 387:61]
    node T_6446 = dshr(reg_mucounteren, T_6445) @[csr.scala 387:50]
    node T_6447 = bits(T_6446, 0, 0) @[csr.scala 387:50]
    node T_6448 = and(T_6444, T_6447) @[csr.scala 387:32]
    node hpm_en = or(T_6442, T_6448) @[csr.scala 386:89]
    node csr_addr_priv = bits(io.rw.addr, 9, 8) @[csr.scala 388:33]
    node T_6451 = and(io.rw.addr, UInt<8>("h090")) @[csr.scala 393:51]
    node T_6453 = eq(T_6451, UInt<8>("h090")) @[csr.scala 393:69]
    node csr_debug = and(UInt<1>("h01"), T_6453) @[csr.scala 393:36]
    node T_6455 = eq(csr_debug, UInt<1>("h00")) @[csr.scala 394:39]
    node T_6456 = geq(reg_mstatus.prv, csr_addr_priv) @[csr.scala 394:69]
    node T_6457 = and(T_6455, T_6456) @[csr.scala 394:50]
    node priv_sufficient = or(reg_debug, T_6457) @[csr.scala 394:35]
    node T_6458 = bits(io.rw.addr, 11, 10) @[csr.scala 395:29]
    node T_6459 = not(T_6458) @[csr.scala 395:37]
    node read_only = eq(T_6459, UInt<1>("h00")) @[csr.scala 395:37]
    node T_6461 = and(cpu_wen, priv_sufficient) @[csr.scala 396:21]
    node T_6463 = eq(read_only, UInt<1>("h00")) @[csr.scala 396:43]
    node wen = and(T_6461, T_6463) @[csr.scala 396:40]
    node T_6464 = eq(io.rw.cmd, UInt<3>("h02")) @[Package.scala 7:47]
    node T_6465 = eq(io.rw.cmd, UInt<3>("h03")) @[Package.scala 7:47]
    node T_6466 = or(T_6464, T_6465) @[Package.scala 7:62]
    node T_6468 = mux(T_6466, io.rw.rdata, UInt<1>("h00")) @[csr.scala 398:19]
    node T_6469 = neq(io.rw.cmd, UInt<3>("h03")) @[csr.scala 399:30]
    node T_6471 = mux(T_6469, io.rw.wdata, UInt<1>("h00")) @[csr.scala 399:19]
    node T_6472 = or(T_6468, T_6471) @[csr.scala 398:75]
    node T_6473 = eq(io.rw.cmd, UInt<3>("h03")) @[csr.scala 400:30]
    node T_6475 = mux(T_6473, io.rw.wdata, UInt<1>("h00")) @[csr.scala 400:19]
    node T_6476 = not(T_6475) @[csr.scala 400:15]
    node wdata = and(T_6472, T_6476) @[csr.scala 399:64]
    node do_system_insn = and(priv_sufficient, system_insn) @[csr.scala 402:40]
    node T_6478 = bits(io.rw.addr, 2, 0) @[csr.scala 403:37]
    node opcode = dshl(UInt<1>("h01"), T_6478) @[csr.scala 403:24]
    node T_6479 = bits(opcode, 0, 0) @[csr.scala 404:43]
    node insn_call = and(do_system_insn, T_6479) @[csr.scala 404:34]
    node T_6480 = bits(opcode, 1, 1) @[csr.scala 405:44]
    node insn_break = and(do_system_insn, T_6480) @[csr.scala 405:35]
    node T_6481 = bits(opcode, 2, 2) @[csr.scala 406:42]
    node insn_ret = and(do_system_insn, T_6481) @[csr.scala 406:33]
    node T_6482 = bits(opcode, 4, 4) @[csr.scala 407:48]
    node insn_sfence_vm = and(do_system_insn, T_6482) @[csr.scala 407:39]
    node T_6483 = bits(opcode, 5, 5) @[csr.scala 408:42]
    node insn_wfi = and(do_system_insn, T_6483) @[csr.scala 408:33]
    node T_6484 = and(cpu_wen, read_only) @[csr.scala 410:27]
    node T_6486 = eq(priv_sufficient, UInt<1>("h00")) @[csr.scala 411:18]
    node T_6488 = eq(addr_valid, UInt<1>("h00")) @[csr.scala 411:38]
    node T_6489 = or(T_6486, T_6488) @[csr.scala 411:35]
    node T_6491 = eq(hpm_en, UInt<1>("h00")) @[csr.scala 411:65]
    node T_6492 = and(hpm_csr, T_6491) @[csr.scala 411:62]
    node T_6493 = or(T_6489, T_6492) @[csr.scala 411:50]
    node T_6495 = neq(io.status.fs, UInt<1>("h00")) @[csr.scala 411:103]
    node T_6496 = bits(reg_misa, 5, 5) @[csr.scala 411:118]
    node T_6497 = and(T_6495, T_6496) @[csr.scala 411:107]
    node T_6499 = eq(T_6497, UInt<1>("h00")) @[csr.scala 411:88]
    node T_6500 = and(fp_csr, T_6499) @[csr.scala 411:85]
    node T_6501 = or(T_6493, T_6500) @[csr.scala 411:74]
    node T_6502 = and(cpu_ren, T_6501) @[csr.scala 411:14]
    node T_6503 = or(T_6484, T_6502) @[csr.scala 410:41]
    node T_6505 = eq(priv_sufficient, UInt<1>("h00")) @[csr.scala 412:21]
    node T_6506 = and(system_insn, T_6505) @[csr.scala 412:18]
    node T_6507 = or(T_6503, T_6506) @[csr.scala 411:132]
    node T_6508 = or(T_6507, insn_call) @[csr.scala 412:39]
    node T_6509 = or(T_6508, insn_break) @[csr.scala 413:15]
    io.csr_xcpt <= T_6509 @[csr.scala 410:15]
    when insn_wfi : @[csr.scala 415:19]
      reg_wfi <= UInt<1>("h01") @[csr.scala 415:29]
      skip @[csr.scala 415:19]
    node T_6512 = neq(pending_interrupts, UInt<1>("h00")) @[csr.scala 416:28]
    when T_6512 : @[csr.scala 416:33]
      reg_wfi <= UInt<1>("h00") @[csr.scala 416:43]
      skip @[csr.scala 416:33]
    node T_6515 = eq(io.csr_xcpt, UInt<1>("h00")) @[csr.scala 419:9]
    node T_6517 = add(reg_mstatus.prv, UInt<4>("h08")) @[csr.scala 420:36]
    node T_6518 = tail(T_6517, 1) @[csr.scala 420:36]
    node T_6521 = mux(insn_break, UInt<2>("h03"), UInt<2>("h02")) @[csr.scala 421:14]
    node T_6522 = mux(insn_call, T_6518, T_6521) @[csr.scala 420:8]
    node cause = mux(T_6515, io.cause, T_6522) @[csr.scala 419:8]
    node cause_lsbs = bits(cause, 5, 0) @[csr.scala 422:25]
    node T_6523 = bits(cause, 63, 63) @[csr.scala 423:30]
    node T_6525 = eq(cause_lsbs, UInt<4>("h0d")) @[csr.scala 423:53]
    node causeIsDebugInt = and(T_6523, T_6525) @[csr.scala 423:39]
    node T_6526 = bits(cause, 63, 63) @[csr.scala 424:35]
    node T_6528 = eq(T_6526, UInt<1>("h00")) @[csr.scala 424:29]
    node T_6530 = eq(cause_lsbs, UInt<4>("h0d")) @[csr.scala 424:58]
    node causeIsDebugTrigger = and(T_6528, T_6530) @[csr.scala 424:44]
    node T_6531 = bits(cause, 63, 63) @[csr.scala 425:33]
    node T_6533 = eq(T_6531, UInt<1>("h00")) @[csr.scala 425:27]
    node T_6534 = and(T_6533, insn_break) @[csr.scala 425:42]
    node T_6535 = cat(reg_dcsr.ebreaks, reg_dcsr.ebreaku) @[Cat.scala 20:58]
    node T_6536 = cat(reg_dcsr.ebreakm, reg_dcsr.ebreakh) @[Cat.scala 20:58]
    node T_6537 = cat(T_6536, T_6535) @[Cat.scala 20:58]
    node T_6538 = dshr(T_6537, reg_mstatus.prv) @[csr.scala 425:134]
    node T_6539 = bits(T_6538, 0, 0) @[csr.scala 425:134]
    node causeIsDebugBreak = and(T_6534, T_6539) @[csr.scala 425:56]
    node T_6541 = or(reg_singleStepped, causeIsDebugInt) @[csr.scala 426:60]
    node T_6542 = or(T_6541, causeIsDebugTrigger) @[csr.scala 426:79]
    node T_6543 = or(T_6542, causeIsDebugBreak) @[csr.scala 426:102]
    node T_6544 = or(T_6543, reg_debug) @[csr.scala 426:123]
    node trapToDebug = and(UInt<1>("h01"), T_6544) @[csr.scala 426:38]
    node T_6547 = lt(reg_mstatus.prv, UInt<2>("h03")) @[csr.scala 427:51]
    node T_6548 = and(UInt<1>("h01"), T_6547) @[csr.scala 427:32]
    node T_6549 = bits(cause, 63, 63) @[csr.scala 427:71]
    node T_6550 = dshr(reg_mideleg, cause_lsbs) @[csr.scala 427:92]
    node T_6551 = bits(T_6550, 0, 0) @[csr.scala 427:92]
    node T_6552 = dshr(reg_medeleg, cause_lsbs) @[csr.scala 427:117]
    node T_6553 = bits(T_6552, 0, 0) @[csr.scala 427:117]
    node T_6554 = mux(T_6549, T_6551, T_6553) @[csr.scala 427:65]
    node delegate = and(T_6548, T_6554) @[csr.scala 427:59]
    node debugTVec = mux(reg_debug, UInt<12>("h0808"), UInt<12>("h0800")) @[csr.scala 428:22]
    node T_6557 = bits(reg_stvec, 38, 38) @[util.scala 21:38]
    node T_6558 = cat(T_6557, reg_stvec) @[Cat.scala 20:58]
    node T_6559 = mux(delegate, T_6558, reg_mtvec) @[csr.scala 429:45]
    node tvec = mux(trapToDebug, debugTVec, T_6559) @[csr.scala 429:17]
    node T_6561 = bits(csr_addr_priv, 1, 1) @[csr.scala 430:72]
    node T_6563 = eq(T_6561, UInt<1>("h00")) @[csr.scala 430:58]
    node T_6564 = and(UInt<1>("h01"), T_6563) @[csr.scala 430:55]
    node T_6565 = mux(T_6564, reg_sepc, reg_mepc) @[csr.scala 430:40]
    node epc = mux(csr_debug, reg_dpc, T_6565) @[csr.scala 430:16]
    io.fatc <= insn_sfence_vm @[csr.scala 431:11]
    node T_6566 = mux(exception, tvec, epc) @[csr.scala 432:17]
    io.evec <= T_6566 @[csr.scala 432:11]
    io.ptbr <- reg_sptbr @[csr.scala 433:11]
    io.eret <= insn_ret @[csr.scala 434:11]
    node T_6568 = eq(reg_debug, UInt<1>("h00")) @[csr.scala 435:37]
    node T_6569 = and(reg_dcsr.step, T_6568) @[csr.scala 435:34]
    io.singleStep <= T_6569 @[csr.scala 435:17]
    io.status <- reg_mstatus @[csr.scala 436:13]
    node T_6570 = not(io.status.fs) @[csr.scala 437:32]
    node T_6572 = eq(T_6570, UInt<1>("h00")) @[csr.scala 437:32]
    node T_6573 = not(io.status.xs) @[csr.scala 437:53]
    node T_6575 = eq(T_6573, UInt<1>("h00")) @[csr.scala 437:53]
    node T_6576 = or(T_6572, T_6575) @[csr.scala 437:37]
    io.status.sd <= T_6576 @[csr.scala 437:16]
    io.status.debug <= reg_debug @[csr.scala 438:19]
    io.status.isa <= reg_misa @[csr.scala 439:17]
    when exception : @[csr.scala 443:20]
      node T_6577 = not(io.pc) @[csr.scala 444:17]
      node T_6579 = or(T_6577, UInt<1>("h01")) @[csr.scala 444:24]
      node T_6580 = not(T_6579) @[csr.scala 444:15]
      node T_6581 = dshr(read_mstatus, reg_mstatus.prv) @[csr.scala 445:27]
      node T_6582 = bits(T_6581, 0, 0) @[csr.scala 445:27]
      node T_6590 = eq(cause, UInt<2>("h03")) @[Package.scala 7:47]
      node T_6591 = eq(cause, UInt<3>("h04")) @[Package.scala 7:47]
      node T_6592 = eq(cause, UInt<3>("h06")) @[Package.scala 7:47]
      node T_6593 = eq(cause, UInt<1>("h00")) @[Package.scala 7:47]
      node T_6594 = eq(cause, UInt<3>("h05")) @[Package.scala 7:47]
      node T_6595 = eq(cause, UInt<3>("h07")) @[Package.scala 7:47]
      node T_6596 = eq(cause, UInt<1>("h01")) @[Package.scala 7:47]
      node T_6597 = or(T_6590, T_6591) @[Package.scala 7:62]
      node T_6598 = or(T_6597, T_6592) @[Package.scala 7:62]
      node T_6599 = or(T_6598, T_6593) @[Package.scala 7:62]
      node T_6600 = or(T_6599, T_6594) @[Package.scala 7:62]
      node T_6601 = or(T_6600, T_6595) @[Package.scala 7:62]
      node T_6602 = or(T_6601, T_6596) @[Package.scala 7:62]
      when trapToDebug : @[csr.scala 451:24]
        reg_debug <= UInt<1>("h01") @[csr.scala 452:17]
        reg_dpc <= T_6580 @[csr.scala 453:15]
        node T_6608 = mux(causeIsDebugTrigger, UInt<2>("h02"), UInt<1>("h01")) @[csr.scala 454:84]
        node T_6609 = mux(causeIsDebugInt, UInt<2>("h03"), T_6608) @[csr.scala 454:54]
        node T_6610 = mux(reg_singleStepped, UInt<3>("h04"), T_6609) @[csr.scala 454:28]
        reg_dcsr.cause <= T_6610 @[csr.scala 454:22]
        reg_dcsr.prv <= reg_mstatus.prv @[csr.scala 455:20]
        skip @[csr.scala 451:24]
      node T_6612 = eq(trapToDebug, UInt<1>("h00")) @[csr.scala 451:24]
      node T_6613 = and(T_6612, delegate) @[csr.scala 456:27]
      when T_6613 : @[csr.scala 456:27]
        node T_6614 = not(T_6580) @[csr.scala 668:28]
        node T_6615 = bits(reg_misa, 2, 2) @[csr.scala 668:46]
        node T_6617 = eq(T_6615, UInt<1>("h00")) @[csr.scala 668:37]
        node T_6619 = cat(T_6617, UInt<1>("h01")) @[Cat.scala 20:58]
        node T_6620 = or(T_6614, T_6619) @[csr.scala 668:31]
        node T_6621 = not(T_6620) @[csr.scala 668:26]
        reg_sepc <= T_6621 @[csr.scala 457:16]
        reg_scause <= cause @[csr.scala 458:18]
        when T_6602 : @[csr.scala 459:28]
          reg_sbadaddr <= io.badaddr @[csr.scala 459:43]
          skip @[csr.scala 459:28]
        reg_mstatus.spie <= T_6582 @[csr.scala 460:24]
        reg_mstatus.spp <= reg_mstatus.prv @[csr.scala 461:23]
        reg_mstatus.sie <= UInt<1>("h00") @[csr.scala 462:23]
        new_prv <= UInt<1>("h01") @[csr.scala 463:15]
        skip @[csr.scala 456:27]
      node T_6625 = eq(trapToDebug, UInt<1>("h00")) @[csr.scala 451:24]
      node T_6627 = eq(delegate, UInt<1>("h00")) @[csr.scala 456:27]
      node T_6628 = and(T_6625, T_6627) @[csr.scala 456:27]
      when T_6628 : @[csr.scala 464:17]
        node T_6629 = not(T_6580) @[csr.scala 668:28]
        node T_6630 = bits(reg_misa, 2, 2) @[csr.scala 668:46]
        node T_6632 = eq(T_6630, UInt<1>("h00")) @[csr.scala 668:37]
        node T_6634 = cat(T_6632, UInt<1>("h01")) @[Cat.scala 20:58]
        node T_6635 = or(T_6629, T_6634) @[csr.scala 668:31]
        node T_6636 = not(T_6635) @[csr.scala 668:26]
        reg_mepc <= T_6636 @[csr.scala 465:16]
        reg_mcause <= cause @[csr.scala 466:18]
        when T_6602 : @[csr.scala 467:28]
          reg_mbadaddr <= io.badaddr @[csr.scala 467:43]
          skip @[csr.scala 467:28]
        reg_mstatus.mpie <= T_6582 @[csr.scala 468:24]
        reg_mstatus.mpp <= reg_mstatus.prv @[csr.scala 469:23]
        reg_mstatus.mie <= UInt<1>("h00") @[csr.scala 470:23]
        new_prv <= UInt<2>("h03") @[csr.scala 471:15]
        skip @[csr.scala 464:17]
      skip @[csr.scala 443:20]
    when insn_ret : @[csr.scala 475:19]
      node T_6640 = bits(csr_addr_priv, 1, 1) @[csr.scala 476:42]
      node T_6642 = eq(T_6640, UInt<1>("h00")) @[csr.scala 476:28]
      node T_6643 = and(UInt<1>("h01"), T_6642) @[csr.scala 476:25]
      when T_6643 : @[csr.scala 476:47]
        node T_6644 = bits(reg_mstatus.spp, 0, 0) @[csr.scala 477:29]
        when T_6644 : @[csr.scala 477:37]
          reg_mstatus.sie <= reg_mstatus.spie @[csr.scala 477:55]
          skip @[csr.scala 477:37]
        reg_mstatus.spie <= UInt<1>("h00") @[csr.scala 478:24]
        reg_mstatus.spp <= UInt<1>("h00") @[csr.scala 479:23]
        new_prv <= reg_mstatus.spp @[csr.scala 480:15]
        skip @[csr.scala 476:47]
      node T_6648 = eq(T_6643, UInt<1>("h00")) @[csr.scala 476:47]
      node T_6649 = and(T_6648, csr_debug) @[csr.scala 481:28]
      when T_6649 : @[csr.scala 481:28]
        new_prv <= reg_dcsr.prv @[csr.scala 482:15]
        reg_debug <= UInt<1>("h00") @[csr.scala 483:17]
        skip @[csr.scala 481:28]
      node T_6652 = eq(T_6643, UInt<1>("h00")) @[csr.scala 476:47]
      node T_6654 = eq(csr_debug, UInt<1>("h00")) @[csr.scala 481:28]
      node T_6655 = and(T_6652, T_6654) @[csr.scala 481:28]
      when T_6655 : @[csr.scala 484:17]
        node T_6656 = bits(reg_mstatus.mpp, 1, 1) @[csr.scala 485:28]
        when T_6656 : @[csr.scala 485:33]
          reg_mstatus.mie <= reg_mstatus.mpie @[csr.scala 485:51]
          skip @[csr.scala 485:33]
        node T_6658 = bits(reg_mstatus.mpp, 0, 0) @[csr.scala 486:50]
        node T_6659 = and(UInt<1>("h01"), T_6658) @[csr.scala 486:32]
        node T_6661 = eq(T_6656, UInt<1>("h00")) @[csr.scala 485:33]
        node T_6662 = and(T_6661, T_6659) @[csr.scala 486:55]
        when T_6662 : @[csr.scala 486:55]
          reg_mstatus.sie <= reg_mstatus.mpie @[csr.scala 486:73]
          skip @[csr.scala 486:55]
        reg_mstatus.mpie <= UInt<1>("h00") @[csr.scala 487:24]
        node T_6666 = eq(UInt<1>("h00"), UInt<2>("h02")) @[csr.scala 651:27]
        node T_6668 = mux(T_6666, UInt<1>("h00"), UInt<1>("h00")) @[csr.scala 651:21]
        reg_mstatus.mpp <= T_6668 @[csr.scala 488:23]
        new_prv <= reg_mstatus.mpp @[csr.scala 489:15]
        skip @[csr.scala 484:17]
      skip @[csr.scala 475:19]
    node T_6669 = add(io.exception, io.csr_xcpt) @[Bitwise.scala 21:55]
    node T_6670 = add(insn_ret, T_6669) @[Bitwise.scala 21:55]
    node T_6672 = leq(T_6670, UInt<1>("h01")) @[csr.scala 493:67]
    node T_6673 = or(T_6672, reset) @[csr.scala 493:9]
    node T_6675 = eq(T_6673, UInt<1>("h00")) @[csr.scala 493:9]
    when T_6675 : @[csr.scala 493:9]
      printf(clk, UInt<1>(1), "Assertion failed: these conditions must be mutually exclusive\n    at csr.scala:493 assert(PopCount(insn_ret :: io.exception :: io.csr_xcpt :: Nil) <= 1, \"these conditions must be mutually exclusive\")\n") @[csr.scala 493:9]
      stop(clk, UInt<1>(1), 1) @[csr.scala 493:9]
      skip @[csr.scala 493:9]
    io.time <= T_5600 @[csr.scala 495:11]
    io.csr_stall <= reg_wfi @[csr.scala 496:16]
    node T_6677 = mux(T_6053, reg_tselect, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6679 = mux(T_6055, T_5914, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6681 = mux(T_6057, T_5937, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6683 = mux(T_6059, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6685 = mux(T_6061, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6687 = mux(T_6063, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6689 = mux(T_6065, T_5600, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6691 = mux(T_6067, T_5590, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6693 = mux(T_6069, reg_misa, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6695 = mux(T_6071, read_mstatus, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6697 = mux(T_6073, reg_mtvec, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6699 = mux(T_6075, read_mip, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6701 = mux(T_6077, reg_mie, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6703 = mux(T_6079, reg_mideleg, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6705 = mux(T_6081, reg_medeleg, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6707 = mux(T_6083, reg_mscratch, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6709 = mux(T_6085, T_5946, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6711 = mux(T_6087, T_5952, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6713 = mux(T_6089, reg_mcause, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6715 = mux(T_6091, io.hartid, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6717 = mux(T_6093, T_5968, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6719 = mux(T_6095, reg_dpc, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6721 = mux(T_6097, reg_dscratch, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6723 = mux(T_6099, reg_fflags, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6725 = mux(T_6101, reg_frm, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6727 = mux(T_6103, T_5969, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6729 = mux(T_6105, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6731 = mux(T_6107, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6733 = mux(T_6109, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6735 = mux(T_6111, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6737 = mux(T_6113, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6739 = mux(T_6115, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6741 = mux(T_6117, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6743 = mux(T_6119, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6745 = mux(T_6121, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6747 = mux(T_6123, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6749 = mux(T_6125, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6751 = mux(T_6127, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6753 = mux(T_6129, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6755 = mux(T_6131, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6757 = mux(T_6133, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6759 = mux(T_6135, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6761 = mux(T_6137, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6763 = mux(T_6139, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6765 = mux(T_6141, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6767 = mux(T_6143, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6769 = mux(T_6145, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6771 = mux(T_6147, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6773 = mux(T_6149, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6775 = mux(T_6151, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6777 = mux(T_6153, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6779 = mux(T_6155, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6781 = mux(T_6157, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6783 = mux(T_6159, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6785 = mux(T_6161, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6787 = mux(T_6163, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6789 = mux(T_6165, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6791 = mux(T_6167, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6793 = mux(T_6169, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6795 = mux(T_6171, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6797 = mux(T_6173, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6799 = mux(T_6175, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6801 = mux(T_6177, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6803 = mux(T_6179, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6805 = mux(T_6181, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6807 = mux(T_6183, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6809 = mux(T_6185, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6811 = mux(T_6187, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6813 = mux(T_6189, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6815 = mux(T_6191, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6817 = mux(T_6193, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6819 = mux(T_6195, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6821 = mux(T_6197, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6823 = mux(T_6199, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6825 = mux(T_6201, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6827 = mux(T_6203, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6829 = mux(T_6205, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6831 = mux(T_6207, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6833 = mux(T_6209, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6835 = mux(T_6211, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6837 = mux(T_6213, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6839 = mux(T_6215, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6841 = mux(T_6217, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6843 = mux(T_6219, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6845 = mux(T_6221, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6847 = mux(T_6223, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6849 = mux(T_6225, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6851 = mux(T_6227, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6853 = mux(T_6229, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6855 = mux(T_6231, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6857 = mux(T_6233, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6859 = mux(T_6235, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6861 = mux(T_6237, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6863 = mux(T_6239, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6865 = mux(T_6241, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6867 = mux(T_6243, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6869 = mux(T_6245, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6871 = mux(T_6247, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6873 = mux(T_6249, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6875 = mux(T_6251, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6877 = mux(T_6253, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6879 = mux(T_6255, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6881 = mux(T_6257, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6883 = mux(T_6259, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6885 = mux(T_6261, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6887 = mux(T_6263, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6889 = mux(T_6265, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6891 = mux(T_6267, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6893 = mux(T_6269, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6895 = mux(T_6271, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6897 = mux(T_6273, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6899 = mux(T_6275, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6901 = mux(T_6277, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6903 = mux(T_6279, T_6032, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6905 = mux(T_6281, T_5973, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6907 = mux(T_6283, T_5972, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6909 = mux(T_6285, reg_sscratch, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6911 = mux(T_6287, reg_scause, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6913 = mux(T_6289, T_6038, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6915 = mux(T_6291, T_6039, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6917 = mux(T_6293, T_6045, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6919 = mux(T_6295, T_6051, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6921 = mux(T_6297, reg_mscounteren, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6923 = mux(T_6299, reg_mucounteren, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6925 = mux(T_6301, T_5600, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6927 = mux(T_6303, T_5590, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_6929 = or(T_6677, T_6679) @[Mux.scala 18:72]
    node T_6930 = or(T_6929, T_6681) @[Mux.scala 18:72]
    node T_6931 = or(T_6930, T_6683) @[Mux.scala 18:72]
    node T_6932 = or(T_6931, T_6685) @[Mux.scala 18:72]
    node T_6933 = or(T_6932, T_6687) @[Mux.scala 18:72]
    node T_6934 = or(T_6933, T_6689) @[Mux.scala 18:72]
    node T_6935 = or(T_6934, T_6691) @[Mux.scala 18:72]
    node T_6936 = or(T_6935, T_6693) @[Mux.scala 18:72]
    node T_6937 = or(T_6936, T_6695) @[Mux.scala 18:72]
    node T_6938 = or(T_6937, T_6697) @[Mux.scala 18:72]
    node T_6939 = or(T_6938, T_6699) @[Mux.scala 18:72]
    node T_6940 = or(T_6939, T_6701) @[Mux.scala 18:72]
    node T_6941 = or(T_6940, T_6703) @[Mux.scala 18:72]
    node T_6942 = or(T_6941, T_6705) @[Mux.scala 18:72]
    node T_6943 = or(T_6942, T_6707) @[Mux.scala 18:72]
    node T_6944 = or(T_6943, T_6709) @[Mux.scala 18:72]
    node T_6945 = or(T_6944, T_6711) @[Mux.scala 18:72]
    node T_6946 = or(T_6945, T_6713) @[Mux.scala 18:72]
    node T_6947 = or(T_6946, T_6715) @[Mux.scala 18:72]
    node T_6948 = or(T_6947, T_6717) @[Mux.scala 18:72]
    node T_6949 = or(T_6948, T_6719) @[Mux.scala 18:72]
    node T_6950 = or(T_6949, T_6721) @[Mux.scala 18:72]
    node T_6951 = or(T_6950, T_6723) @[Mux.scala 18:72]
    node T_6952 = or(T_6951, T_6725) @[Mux.scala 18:72]
    node T_6953 = or(T_6952, T_6727) @[Mux.scala 18:72]
    node T_6954 = or(T_6953, T_6729) @[Mux.scala 18:72]
    node T_6955 = or(T_6954, T_6731) @[Mux.scala 18:72]
    node T_6956 = or(T_6955, T_6733) @[Mux.scala 18:72]
    node T_6957 = or(T_6956, T_6735) @[Mux.scala 18:72]
    node T_6958 = or(T_6957, T_6737) @[Mux.scala 18:72]
    node T_6959 = or(T_6958, T_6739) @[Mux.scala 18:72]
    node T_6960 = or(T_6959, T_6741) @[Mux.scala 18:72]
    node T_6961 = or(T_6960, T_6743) @[Mux.scala 18:72]
    node T_6962 = or(T_6961, T_6745) @[Mux.scala 18:72]
    node T_6963 = or(T_6962, T_6747) @[Mux.scala 18:72]
    node T_6964 = or(T_6963, T_6749) @[Mux.scala 18:72]
    node T_6965 = or(T_6964, T_6751) @[Mux.scala 18:72]
    node T_6966 = or(T_6965, T_6753) @[Mux.scala 18:72]
    node T_6967 = or(T_6966, T_6755) @[Mux.scala 18:72]
    node T_6968 = or(T_6967, T_6757) @[Mux.scala 18:72]
    node T_6969 = or(T_6968, T_6759) @[Mux.scala 18:72]
    node T_6970 = or(T_6969, T_6761) @[Mux.scala 18:72]
    node T_6971 = or(T_6970, T_6763) @[Mux.scala 18:72]
    node T_6972 = or(T_6971, T_6765) @[Mux.scala 18:72]
    node T_6973 = or(T_6972, T_6767) @[Mux.scala 18:72]
    node T_6974 = or(T_6973, T_6769) @[Mux.scala 18:72]
    node T_6975 = or(T_6974, T_6771) @[Mux.scala 18:72]
    node T_6976 = or(T_6975, T_6773) @[Mux.scala 18:72]
    node T_6977 = or(T_6976, T_6775) @[Mux.scala 18:72]
    node T_6978 = or(T_6977, T_6777) @[Mux.scala 18:72]
    node T_6979 = or(T_6978, T_6779) @[Mux.scala 18:72]
    node T_6980 = or(T_6979, T_6781) @[Mux.scala 18:72]
    node T_6981 = or(T_6980, T_6783) @[Mux.scala 18:72]
    node T_6982 = or(T_6981, T_6785) @[Mux.scala 18:72]
    node T_6983 = or(T_6982, T_6787) @[Mux.scala 18:72]
    node T_6984 = or(T_6983, T_6789) @[Mux.scala 18:72]
    node T_6985 = or(T_6984, T_6791) @[Mux.scala 18:72]
    node T_6986 = or(T_6985, T_6793) @[Mux.scala 18:72]
    node T_6987 = or(T_6986, T_6795) @[Mux.scala 18:72]
    node T_6988 = or(T_6987, T_6797) @[Mux.scala 18:72]
    node T_6989 = or(T_6988, T_6799) @[Mux.scala 18:72]
    node T_6990 = or(T_6989, T_6801) @[Mux.scala 18:72]
    node T_6991 = or(T_6990, T_6803) @[Mux.scala 18:72]
    node T_6992 = or(T_6991, T_6805) @[Mux.scala 18:72]
    node T_6993 = or(T_6992, T_6807) @[Mux.scala 18:72]
    node T_6994 = or(T_6993, T_6809) @[Mux.scala 18:72]
    node T_6995 = or(T_6994, T_6811) @[Mux.scala 18:72]
    node T_6996 = or(T_6995, T_6813) @[Mux.scala 18:72]
    node T_6997 = or(T_6996, T_6815) @[Mux.scala 18:72]
    node T_6998 = or(T_6997, T_6817) @[Mux.scala 18:72]
    node T_6999 = or(T_6998, T_6819) @[Mux.scala 18:72]
    node T_7000 = or(T_6999, T_6821) @[Mux.scala 18:72]
    node T_7001 = or(T_7000, T_6823) @[Mux.scala 18:72]
    node T_7002 = or(T_7001, T_6825) @[Mux.scala 18:72]
    node T_7003 = or(T_7002, T_6827) @[Mux.scala 18:72]
    node T_7004 = or(T_7003, T_6829) @[Mux.scala 18:72]
    node T_7005 = or(T_7004, T_6831) @[Mux.scala 18:72]
    node T_7006 = or(T_7005, T_6833) @[Mux.scala 18:72]
    node T_7007 = or(T_7006, T_6835) @[Mux.scala 18:72]
    node T_7008 = or(T_7007, T_6837) @[Mux.scala 18:72]
    node T_7009 = or(T_7008, T_6839) @[Mux.scala 18:72]
    node T_7010 = or(T_7009, T_6841) @[Mux.scala 18:72]
    node T_7011 = or(T_7010, T_6843) @[Mux.scala 18:72]
    node T_7012 = or(T_7011, T_6845) @[Mux.scala 18:72]
    node T_7013 = or(T_7012, T_6847) @[Mux.scala 18:72]
    node T_7014 = or(T_7013, T_6849) @[Mux.scala 18:72]
    node T_7015 = or(T_7014, T_6851) @[Mux.scala 18:72]
    node T_7016 = or(T_7015, T_6853) @[Mux.scala 18:72]
    node T_7017 = or(T_7016, T_6855) @[Mux.scala 18:72]
    node T_7018 = or(T_7017, T_6857) @[Mux.scala 18:72]
    node T_7019 = or(T_7018, T_6859) @[Mux.scala 18:72]
    node T_7020 = or(T_7019, T_6861) @[Mux.scala 18:72]
    node T_7021 = or(T_7020, T_6863) @[Mux.scala 18:72]
    node T_7022 = or(T_7021, T_6865) @[Mux.scala 18:72]
    node T_7023 = or(T_7022, T_6867) @[Mux.scala 18:72]
    node T_7024 = or(T_7023, T_6869) @[Mux.scala 18:72]
    node T_7025 = or(T_7024, T_6871) @[Mux.scala 18:72]
    node T_7026 = or(T_7025, T_6873) @[Mux.scala 18:72]
    node T_7027 = or(T_7026, T_6875) @[Mux.scala 18:72]
    node T_7028 = or(T_7027, T_6877) @[Mux.scala 18:72]
    node T_7029 = or(T_7028, T_6879) @[Mux.scala 18:72]
    node T_7030 = or(T_7029, T_6881) @[Mux.scala 18:72]
    node T_7031 = or(T_7030, T_6883) @[Mux.scala 18:72]
    node T_7032 = or(T_7031, T_6885) @[Mux.scala 18:72]
    node T_7033 = or(T_7032, T_6887) @[Mux.scala 18:72]
    node T_7034 = or(T_7033, T_6889) @[Mux.scala 18:72]
    node T_7035 = or(T_7034, T_6891) @[Mux.scala 18:72]
    node T_7036 = or(T_7035, T_6893) @[Mux.scala 18:72]
    node T_7037 = or(T_7036, T_6895) @[Mux.scala 18:72]
    node T_7038 = or(T_7037, T_6897) @[Mux.scala 18:72]
    node T_7039 = or(T_7038, T_6899) @[Mux.scala 18:72]
    node T_7040 = or(T_7039, T_6901) @[Mux.scala 18:72]
    node T_7041 = or(T_7040, T_6903) @[Mux.scala 18:72]
    node T_7042 = or(T_7041, T_6905) @[Mux.scala 18:72]
    node T_7043 = or(T_7042, T_6907) @[Mux.scala 18:72]
    node T_7044 = or(T_7043, T_6909) @[Mux.scala 18:72]
    node T_7045 = or(T_7044, T_6911) @[Mux.scala 18:72]
    node T_7046 = or(T_7045, T_6913) @[Mux.scala 18:72]
    node T_7047 = or(T_7046, T_6915) @[Mux.scala 18:72]
    node T_7048 = or(T_7047, T_6917) @[Mux.scala 18:72]
    node T_7049 = or(T_7048, T_6919) @[Mux.scala 18:72]
    node T_7050 = or(T_7049, T_6921) @[Mux.scala 18:72]
    node T_7051 = or(T_7050, T_6923) @[Mux.scala 18:72]
    node T_7052 = or(T_7051, T_6925) @[Mux.scala 18:72]
    node T_7053 = or(T_7052, T_6927) @[Mux.scala 18:72]
    wire T_7054 : UInt
    T_7054 is invalid
    T_7054 <= T_7053 @[Mux.scala 18:72]
    io.rw.rdata <= T_7054 @[csr.scala 498:15]
    io.fcsr_rm <= reg_frm @[csr.scala 500:14]
    when io.fcsr_flags.valid : @[csr.scala 501:30]
      node T_7055 = or(reg_fflags, io.fcsr_flags.bits) @[csr.scala 502:30]
      reg_fflags <= T_7055 @[csr.scala 502:16]
      skip @[csr.scala 501:30]
    when wen : @[csr.scala 505:14]
      when T_6071 : @[csr.scala 506:39]
        wire T_7108 : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>} @[csr.scala 507:47]
        T_7108 is invalid @[csr.scala 507:47]
        wire T_7135 : UInt<99>
        T_7135 is invalid
        T_7135 <= wdata
        node T_7136 = bits(T_7135, 0, 0) @[csr.scala 507:47]
        T_7108.uie <= T_7136 @[csr.scala 507:47]
        node T_7137 = bits(T_7135, 1, 1) @[csr.scala 507:47]
        T_7108.sie <= T_7137 @[csr.scala 507:47]
        node T_7138 = bits(T_7135, 2, 2) @[csr.scala 507:47]
        T_7108.hie <= T_7138 @[csr.scala 507:47]
        node T_7139 = bits(T_7135, 3, 3) @[csr.scala 507:47]
        T_7108.mie <= T_7139 @[csr.scala 507:47]
        node T_7140 = bits(T_7135, 4, 4) @[csr.scala 507:47]
        T_7108.upie <= T_7140 @[csr.scala 507:47]
        node T_7141 = bits(T_7135, 5, 5) @[csr.scala 507:47]
        T_7108.spie <= T_7141 @[csr.scala 507:47]
        node T_7142 = bits(T_7135, 6, 6) @[csr.scala 507:47]
        T_7108.hpie <= T_7142 @[csr.scala 507:47]
        node T_7143 = bits(T_7135, 7, 7) @[csr.scala 507:47]
        T_7108.mpie <= T_7143 @[csr.scala 507:47]
        node T_7144 = bits(T_7135, 8, 8) @[csr.scala 507:47]
        T_7108.spp <= T_7144 @[csr.scala 507:47]
        node T_7145 = bits(T_7135, 10, 9) @[csr.scala 507:47]
        T_7108.hpp <= T_7145 @[csr.scala 507:47]
        node T_7146 = bits(T_7135, 12, 11) @[csr.scala 507:47]
        T_7108.mpp <= T_7146 @[csr.scala 507:47]
        node T_7147 = bits(T_7135, 14, 13) @[csr.scala 507:47]
        T_7108.fs <= T_7147 @[csr.scala 507:47]
        node T_7148 = bits(T_7135, 16, 15) @[csr.scala 507:47]
        T_7108.xs <= T_7148 @[csr.scala 507:47]
        node T_7149 = bits(T_7135, 17, 17) @[csr.scala 507:47]
        T_7108.mprv <= T_7149 @[csr.scala 507:47]
        node T_7150 = bits(T_7135, 18, 18) @[csr.scala 507:47]
        T_7108.pum <= T_7150 @[csr.scala 507:47]
        node T_7151 = bits(T_7135, 19, 19) @[csr.scala 507:47]
        T_7108.mxr <= T_7151 @[csr.scala 507:47]
        node T_7152 = bits(T_7135, 23, 20) @[csr.scala 507:47]
        T_7108.zero1 <= T_7152 @[csr.scala 507:47]
        node T_7153 = bits(T_7135, 28, 24) @[csr.scala 507:47]
        T_7108.vm <= T_7153 @[csr.scala 507:47]
        node T_7154 = bits(T_7135, 30, 29) @[csr.scala 507:47]
        T_7108.zero2 <= T_7154 @[csr.scala 507:47]
        node T_7155 = bits(T_7135, 31, 31) @[csr.scala 507:47]
        T_7108.sd_rv32 <= T_7155 @[csr.scala 507:47]
        node T_7156 = bits(T_7135, 62, 32) @[csr.scala 507:47]
        T_7108.zero3 <= T_7156 @[csr.scala 507:47]
        node T_7157 = bits(T_7135, 63, 63) @[csr.scala 507:47]
        T_7108.sd <= T_7157 @[csr.scala 507:47]
        node T_7158 = bits(T_7135, 65, 64) @[csr.scala 507:47]
        T_7108.prv <= T_7158 @[csr.scala 507:47]
        node T_7159 = bits(T_7135, 97, 66) @[csr.scala 507:47]
        T_7108.isa <= T_7159 @[csr.scala 507:47]
        node T_7160 = bits(T_7135, 98, 98) @[csr.scala 507:47]
        T_7108.debug <= T_7160 @[csr.scala 507:47]
        reg_mstatus.mie <= T_7108.mie @[csr.scala 508:23]
        reg_mstatus.mpie <= T_7108.mpie @[csr.scala 509:24]
        reg_mstatus.mprv <= T_7108.mprv @[csr.scala 512:26]
        reg_mstatus.mpp <= T_7108.mpp @[csr.scala 513:25]
        reg_mstatus.mxr <= T_7108.mxr @[csr.scala 515:27]
        reg_mstatus.pum <= T_7108.pum @[csr.scala 516:27]
        reg_mstatus.spp <= T_7108.spp @[csr.scala 517:27]
        reg_mstatus.spie <= T_7108.spie @[csr.scala 518:28]
        reg_mstatus.sie <= T_7108.sie @[csr.scala 519:27]
        node T_7162 = eq(T_7108.vm, UInt<1>("h00")) @[csr.scala 526:30]
        when T_7162 : @[csr.scala 526:37]
          reg_mstatus.vm <= UInt<1>("h00") @[csr.scala 526:54]
          skip @[csr.scala 526:37]
        node T_7165 = eq(T_7108.vm, UInt<4>("h09")) @[csr.scala 527:30]
        when T_7165 : @[csr.scala 527:41]
          reg_mstatus.vm <= UInt<4>("h09") @[csr.scala 527:58]
          skip @[csr.scala 527:41]
        node T_7168 = neq(T_7108.fs, UInt<1>("h00")) @[csr.scala 529:73]
        node T_7169 = bits(T_7168, 0, 0) @[Bitwise.scala 33:15]
        node T_7172 = mux(T_7169, UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 33:12]
        reg_mstatus.fs <= T_7172 @[csr.scala 529:47]
        skip @[csr.scala 506:39]
      when T_6069 : @[csr.scala 532:36]
        node T_7174 = bits(wdata, 5, 5) @[csr.scala 534:20]
        node T_7175 = not(wdata) @[csr.scala 535:21]
        node T_7177 = eq(T_7174, UInt<1>("h00")) @[csr.scala 535:31]
        node T_7178 = shl(T_7177, 3) @[csr.scala 535:34]
        node T_7179 = or(T_7175, T_7178) @[csr.scala 535:28]
        node T_7180 = not(T_7179) @[csr.scala 535:19]
        node T_7181 = and(T_7180, UInt<13>("h0102d")) @[csr.scala 535:51]
        node T_7182 = not(UInt<13>("h0102d")) @[csr.scala 535:71]
        node T_7183 = and(reg_misa, T_7182) @[csr.scala 535:69]
        node T_7184 = or(T_7181, T_7183) @[csr.scala 535:58]
        reg_misa <= T_7184 @[csr.scala 535:16]
        skip @[csr.scala 532:36]
      when T_6075 : @[csr.scala 537:35]
        wire T_7213 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>} @[csr.scala 538:39]
        T_7213 is invalid @[csr.scala 538:39]
        node T_7227 = bits(wdata, 0, 0) @[csr.scala 538:39]
        T_7213.usip <= T_7227 @[csr.scala 538:39]
        node T_7228 = bits(wdata, 1, 1) @[csr.scala 538:39]
        T_7213.ssip <= T_7228 @[csr.scala 538:39]
        node T_7229 = bits(wdata, 2, 2) @[csr.scala 538:39]
        T_7213.hsip <= T_7229 @[csr.scala 538:39]
        node T_7230 = bits(wdata, 3, 3) @[csr.scala 538:39]
        T_7213.msip <= T_7230 @[csr.scala 538:39]
        node T_7231 = bits(wdata, 4, 4) @[csr.scala 538:39]
        T_7213.utip <= T_7231 @[csr.scala 538:39]
        node T_7232 = bits(wdata, 5, 5) @[csr.scala 538:39]
        T_7213.stip <= T_7232 @[csr.scala 538:39]
        node T_7233 = bits(wdata, 6, 6) @[csr.scala 538:39]
        T_7213.htip <= T_7233 @[csr.scala 538:39]
        node T_7234 = bits(wdata, 7, 7) @[csr.scala 538:39]
        T_7213.mtip <= T_7234 @[csr.scala 538:39]
        node T_7235 = bits(wdata, 8, 8) @[csr.scala 538:39]
        T_7213.ueip <= T_7235 @[csr.scala 538:39]
        node T_7236 = bits(wdata, 9, 9) @[csr.scala 538:39]
        T_7213.seip <= T_7236 @[csr.scala 538:39]
        node T_7237 = bits(wdata, 10, 10) @[csr.scala 538:39]
        T_7213.heip <= T_7237 @[csr.scala 538:39]
        node T_7238 = bits(wdata, 11, 11) @[csr.scala 538:39]
        T_7213.meip <= T_7238 @[csr.scala 538:39]
        node T_7239 = bits(wdata, 12, 12) @[csr.scala 538:39]
        T_7213.rocc <= T_7239 @[csr.scala 538:39]
        reg_mip.ssip <= T_7213.ssip @[csr.scala 540:22]
        reg_mip.stip <= T_7213.stip @[csr.scala 541:22]
        skip @[csr.scala 537:35]
      when T_6077 : @[csr.scala 544:40]
        node T_7240 = and(wdata, supported_interrupts) @[csr.scala 544:59]
        reg_mie <= T_7240 @[csr.scala 544:50]
        skip @[csr.scala 544:40]
      when T_6085 : @[csr.scala 545:40]
        node T_7241 = not(wdata) @[csr.scala 668:28]
        node T_7242 = bits(reg_misa, 2, 2) @[csr.scala 668:46]
        node T_7244 = eq(T_7242, UInt<1>("h00")) @[csr.scala 668:37]
        node T_7246 = cat(T_7244, UInt<1>("h01")) @[Cat.scala 20:58]
        node T_7247 = or(T_7241, T_7246) @[csr.scala 668:31]
        node T_7248 = not(T_7247) @[csr.scala 668:26]
        reg_mepc <= T_7248 @[csr.scala 545:51]
        skip @[csr.scala 545:40]
      when T_6083 : @[csr.scala 546:40]
        reg_mscratch <= wdata @[csr.scala 546:55]
        skip @[csr.scala 546:40]
      when T_6073 : @[csr.scala 548:40]
        node T_7249 = shr(wdata, 2) @[csr.scala 548:61]
        node T_7250 = shl(T_7249, 2) @[csr.scala 548:66]
        reg_mtvec <= T_7250 @[csr.scala 548:52]
        skip @[csr.scala 548:40]
      when T_6089 : @[csr.scala 549:40]
        node T_7252 = and(wdata, UInt<64>("h0800000000000001f")) @[csr.scala 549:62]
        reg_mcause <= T_7252 @[csr.scala 549:53]
        skip @[csr.scala 549:40]
      when T_6087 : @[csr.scala 550:40]
        node T_7253 = bits(wdata, 39, 0) @[csr.scala 550:63]
        reg_mbadaddr <= T_7253 @[csr.scala 550:55]
        skip @[csr.scala 550:40]
      when T_6065 : @[csr.scala 665:31]
        T_5593 <= wdata @[util.scala 154:11]
        node T_7254 = shr(wdata, 6) @[util.scala 155:28]
        T_5596 <= T_7254 @[util.scala 155:23]
        skip @[csr.scala 665:31]
      when T_6067 : @[csr.scala 665:31]
        T_5583 <= wdata @[util.scala 154:11]
        node T_7255 = shr(wdata, 6) @[util.scala 155:28]
        T_5586 <= T_7255 @[util.scala 155:23]
        skip @[csr.scala 665:31]
      when T_6099 : @[csr.scala 561:40]
        reg_fflags <= wdata @[csr.scala 561:53]
        skip @[csr.scala 561:40]
      when T_6101 : @[csr.scala 562:40]
        reg_frm <= wdata @[csr.scala 562:50]
        skip @[csr.scala 562:40]
      when T_6103 : @[csr.scala 563:40]
        reg_fflags <= wdata @[csr.scala 563:53]
        node T_7256 = shr(wdata, 5) @[csr.scala 563:80]
        reg_frm <= T_7256 @[csr.scala 563:71]
        skip @[csr.scala 563:40]
      when T_6093 : @[csr.scala 566:38]
        wire T_7293 : {xdebugver : UInt<2>, ndreset : UInt<1>, fullreset : UInt<1>, zero3 : UInt<12>, ebreakm : UInt<1>, ebreakh : UInt<1>, ebreaks : UInt<1>, ebreaku : UInt<1>, zero2 : UInt<1>, stopcycle : UInt<1>, stoptime : UInt<1>, cause : UInt<3>, debugint : UInt<1>, zero1 : UInt<1>, halt : UInt<1>, step : UInt<1>, prv : UInt<2>} @[csr.scala 567:43]
        T_7293 is invalid @[csr.scala 567:43]
        node T_7311 = bits(wdata, 1, 0) @[csr.scala 567:43]
        T_7293.prv <= T_7311 @[csr.scala 567:43]
        node T_7312 = bits(wdata, 2, 2) @[csr.scala 567:43]
        T_7293.step <= T_7312 @[csr.scala 567:43]
        node T_7313 = bits(wdata, 3, 3) @[csr.scala 567:43]
        T_7293.halt <= T_7313 @[csr.scala 567:43]
        node T_7314 = bits(wdata, 4, 4) @[csr.scala 567:43]
        T_7293.zero1 <= T_7314 @[csr.scala 567:43]
        node T_7315 = bits(wdata, 5, 5) @[csr.scala 567:43]
        T_7293.debugint <= T_7315 @[csr.scala 567:43]
        node T_7316 = bits(wdata, 8, 6) @[csr.scala 567:43]
        T_7293.cause <= T_7316 @[csr.scala 567:43]
        node T_7317 = bits(wdata, 9, 9) @[csr.scala 567:43]
        T_7293.stoptime <= T_7317 @[csr.scala 567:43]
        node T_7318 = bits(wdata, 10, 10) @[csr.scala 567:43]
        T_7293.stopcycle <= T_7318 @[csr.scala 567:43]
        node T_7319 = bits(wdata, 11, 11) @[csr.scala 567:43]
        T_7293.zero2 <= T_7319 @[csr.scala 567:43]
        node T_7320 = bits(wdata, 12, 12) @[csr.scala 567:43]
        T_7293.ebreaku <= T_7320 @[csr.scala 567:43]
        node T_7321 = bits(wdata, 13, 13) @[csr.scala 567:43]
        T_7293.ebreaks <= T_7321 @[csr.scala 567:43]
        node T_7322 = bits(wdata, 14, 14) @[csr.scala 567:43]
        T_7293.ebreakh <= T_7322 @[csr.scala 567:43]
        node T_7323 = bits(wdata, 15, 15) @[csr.scala 567:43]
        T_7293.ebreakm <= T_7323 @[csr.scala 567:43]
        node T_7324 = bits(wdata, 27, 16) @[csr.scala 567:43]
        T_7293.zero3 <= T_7324 @[csr.scala 567:43]
        node T_7325 = bits(wdata, 28, 28) @[csr.scala 567:43]
        T_7293.fullreset <= T_7325 @[csr.scala 567:43]
        node T_7326 = bits(wdata, 29, 29) @[csr.scala 567:43]
        T_7293.ndreset <= T_7326 @[csr.scala 567:43]
        node T_7327 = bits(wdata, 31, 30) @[csr.scala 567:43]
        T_7293.xdebugver <= T_7327 @[csr.scala 567:43]
        reg_dcsr.halt <= T_7293.halt @[csr.scala 568:23]
        reg_dcsr.step <= T_7293.step @[csr.scala 569:23]
        reg_dcsr.ebreakm <= T_7293.ebreakm @[csr.scala 570:26]
        reg_dcsr.ebreaks <= T_7293.ebreaks @[csr.scala 571:39]
        reg_dcsr.ebreaku <= T_7293.ebreaku @[csr.scala 572:41]
        reg_dcsr.prv <= T_7293.prv @[csr.scala 573:37]
        skip @[csr.scala 566:38]
      when T_6095 : @[csr.scala 575:42]
        node T_7328 = not(wdata) @[csr.scala 575:57]
        node T_7330 = or(T_7328, UInt<1>("h01")) @[csr.scala 575:64]
        node T_7331 = not(T_7330) @[csr.scala 575:55]
        reg_dpc <= T_7331 @[csr.scala 575:52]
        skip @[csr.scala 575:42]
      when T_6097 : @[csr.scala 576:42]
        reg_dscratch <= wdata @[csr.scala 576:57]
        skip @[csr.scala 576:42]
      when T_6279 : @[csr.scala 579:41]
        wire T_7384 : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>} @[csr.scala 580:49]
        T_7384 is invalid @[csr.scala 580:49]
        wire T_7411 : UInt<99>
        T_7411 is invalid
        T_7411 <= wdata
        node T_7412 = bits(T_7411, 0, 0) @[csr.scala 580:49]
        T_7384.uie <= T_7412 @[csr.scala 580:49]
        node T_7413 = bits(T_7411, 1, 1) @[csr.scala 580:49]
        T_7384.sie <= T_7413 @[csr.scala 580:49]
        node T_7414 = bits(T_7411, 2, 2) @[csr.scala 580:49]
        T_7384.hie <= T_7414 @[csr.scala 580:49]
        node T_7415 = bits(T_7411, 3, 3) @[csr.scala 580:49]
        T_7384.mie <= T_7415 @[csr.scala 580:49]
        node T_7416 = bits(T_7411, 4, 4) @[csr.scala 580:49]
        T_7384.upie <= T_7416 @[csr.scala 580:49]
        node T_7417 = bits(T_7411, 5, 5) @[csr.scala 580:49]
        T_7384.spie <= T_7417 @[csr.scala 580:49]
        node T_7418 = bits(T_7411, 6, 6) @[csr.scala 580:49]
        T_7384.hpie <= T_7418 @[csr.scala 580:49]
        node T_7419 = bits(T_7411, 7, 7) @[csr.scala 580:49]
        T_7384.mpie <= T_7419 @[csr.scala 580:49]
        node T_7420 = bits(T_7411, 8, 8) @[csr.scala 580:49]
        T_7384.spp <= T_7420 @[csr.scala 580:49]
        node T_7421 = bits(T_7411, 10, 9) @[csr.scala 580:49]
        T_7384.hpp <= T_7421 @[csr.scala 580:49]
        node T_7422 = bits(T_7411, 12, 11) @[csr.scala 580:49]
        T_7384.mpp <= T_7422 @[csr.scala 580:49]
        node T_7423 = bits(T_7411, 14, 13) @[csr.scala 580:49]
        T_7384.fs <= T_7423 @[csr.scala 580:49]
        node T_7424 = bits(T_7411, 16, 15) @[csr.scala 580:49]
        T_7384.xs <= T_7424 @[csr.scala 580:49]
        node T_7425 = bits(T_7411, 17, 17) @[csr.scala 580:49]
        T_7384.mprv <= T_7425 @[csr.scala 580:49]
        node T_7426 = bits(T_7411, 18, 18) @[csr.scala 580:49]
        T_7384.pum <= T_7426 @[csr.scala 580:49]
        node T_7427 = bits(T_7411, 19, 19) @[csr.scala 580:49]
        T_7384.mxr <= T_7427 @[csr.scala 580:49]
        node T_7428 = bits(T_7411, 23, 20) @[csr.scala 580:49]
        T_7384.zero1 <= T_7428 @[csr.scala 580:49]
        node T_7429 = bits(T_7411, 28, 24) @[csr.scala 580:49]
        T_7384.vm <= T_7429 @[csr.scala 580:49]
        node T_7430 = bits(T_7411, 30, 29) @[csr.scala 580:49]
        T_7384.zero2 <= T_7430 @[csr.scala 580:49]
        node T_7431 = bits(T_7411, 31, 31) @[csr.scala 580:49]
        T_7384.sd_rv32 <= T_7431 @[csr.scala 580:49]
        node T_7432 = bits(T_7411, 62, 32) @[csr.scala 580:49]
        T_7384.zero3 <= T_7432 @[csr.scala 580:49]
        node T_7433 = bits(T_7411, 63, 63) @[csr.scala 580:49]
        T_7384.sd <= T_7433 @[csr.scala 580:49]
        node T_7434 = bits(T_7411, 65, 64) @[csr.scala 580:49]
        T_7384.prv <= T_7434 @[csr.scala 580:49]
        node T_7435 = bits(T_7411, 97, 66) @[csr.scala 580:49]
        T_7384.isa <= T_7435 @[csr.scala 580:49]
        node T_7436 = bits(T_7411, 98, 98) @[csr.scala 580:49]
        T_7384.debug <= T_7436 @[csr.scala 580:49]
        reg_mstatus.sie <= T_7384.sie @[csr.scala 581:25]
        reg_mstatus.spie <= T_7384.spie @[csr.scala 582:26]
        reg_mstatus.spp <= T_7384.spp @[csr.scala 583:25]
        reg_mstatus.pum <= T_7384.pum @[csr.scala 584:25]
        node T_7438 = neq(T_7384.fs, UInt<1>("h00")) @[csr.scala 585:50]
        node T_7439 = bits(T_7438, 0, 0) @[Bitwise.scala 33:15]
        node T_7442 = mux(T_7439, UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 33:12]
        reg_mstatus.fs <= T_7442 @[csr.scala 585:24]
        skip @[csr.scala 579:41]
      when T_6281 : @[csr.scala 588:37]
        wire T_7471 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>} @[csr.scala 589:41]
        T_7471 is invalid @[csr.scala 589:41]
        node T_7485 = bits(wdata, 0, 0) @[csr.scala 589:41]
        T_7471.usip <= T_7485 @[csr.scala 589:41]
        node T_7486 = bits(wdata, 1, 1) @[csr.scala 589:41]
        T_7471.ssip <= T_7486 @[csr.scala 589:41]
        node T_7487 = bits(wdata, 2, 2) @[csr.scala 589:41]
        T_7471.hsip <= T_7487 @[csr.scala 589:41]
        node T_7488 = bits(wdata, 3, 3) @[csr.scala 589:41]
        T_7471.msip <= T_7488 @[csr.scala 589:41]
        node T_7489 = bits(wdata, 4, 4) @[csr.scala 589:41]
        T_7471.utip <= T_7489 @[csr.scala 589:41]
        node T_7490 = bits(wdata, 5, 5) @[csr.scala 589:41]
        T_7471.stip <= T_7490 @[csr.scala 589:41]
        node T_7491 = bits(wdata, 6, 6) @[csr.scala 589:41]
        T_7471.htip <= T_7491 @[csr.scala 589:41]
        node T_7492 = bits(wdata, 7, 7) @[csr.scala 589:41]
        T_7471.mtip <= T_7492 @[csr.scala 589:41]
        node T_7493 = bits(wdata, 8, 8) @[csr.scala 589:41]
        T_7471.ueip <= T_7493 @[csr.scala 589:41]
        node T_7494 = bits(wdata, 9, 9) @[csr.scala 589:41]
        T_7471.seip <= T_7494 @[csr.scala 589:41]
        node T_7495 = bits(wdata, 10, 10) @[csr.scala 589:41]
        T_7471.heip <= T_7495 @[csr.scala 589:41]
        node T_7496 = bits(wdata, 11, 11) @[csr.scala 589:41]
        T_7471.meip <= T_7496 @[csr.scala 589:41]
        node T_7497 = bits(wdata, 12, 12) @[csr.scala 589:41]
        T_7471.rocc <= T_7497 @[csr.scala 589:41]
        reg_mip.ssip <= T_7471.ssip @[csr.scala 590:22]
        skip @[csr.scala 588:37]
      when T_6283 : @[csr.scala 592:42]
        node T_7498 = not(reg_mideleg) @[csr.scala 592:66]
        node T_7499 = and(reg_mie, T_7498) @[csr.scala 592:64]
        node T_7500 = and(wdata, reg_mideleg) @[csr.scala 592:89]
        node T_7501 = or(T_7499, T_7500) @[csr.scala 592:80]
        reg_mie <= T_7501 @[csr.scala 592:52]
        skip @[csr.scala 592:42]
      when T_6285 : @[csr.scala 593:42]
        reg_sscratch <= wdata @[csr.scala 593:57]
        skip @[csr.scala 593:42]
      when T_6291 : @[csr.scala 594:42]
        node T_7502 = bits(wdata, 19, 0) @[csr.scala 594:66]
        reg_sptbr.ppn <= T_7502 @[csr.scala 594:58]
        skip @[csr.scala 594:42]
      when T_6293 : @[csr.scala 595:42]
        node T_7503 = not(wdata) @[csr.scala 668:28]
        node T_7504 = bits(reg_misa, 2, 2) @[csr.scala 668:46]
        node T_7506 = eq(T_7504, UInt<1>("h00")) @[csr.scala 668:37]
        node T_7508 = cat(T_7506, UInt<1>("h01")) @[Cat.scala 20:58]
        node T_7509 = or(T_7503, T_7508) @[csr.scala 668:31]
        node T_7510 = not(T_7509) @[csr.scala 668:26]
        reg_sepc <= T_7510 @[csr.scala 595:53]
        skip @[csr.scala 595:42]
      when T_6295 : @[csr.scala 596:42]
        node T_7511 = shr(wdata, 2) @[csr.scala 596:63]
        node T_7512 = shl(T_7511, 2) @[csr.scala 596:68]
        reg_stvec <= T_7512 @[csr.scala 596:54]
        skip @[csr.scala 596:42]
      when T_6287 : @[csr.scala 597:42]
        node T_7514 = and(wdata, UInt<64>("h0800000000000001f")) @[csr.scala 597:64]
        reg_scause <= T_7514 @[csr.scala 597:55]
        skip @[csr.scala 597:42]
      when T_6289 : @[csr.scala 598:42]
        node T_7515 = bits(wdata, 39, 0) @[csr.scala 598:65]
        reg_sbadaddr <= T_7515 @[csr.scala 598:57]
        skip @[csr.scala 598:42]
      when T_6079 : @[csr.scala 599:42]
        node T_7516 = and(wdata, delegable_interrupts) @[csr.scala 599:65]
        reg_mideleg <= T_7516 @[csr.scala 599:56]
        skip @[csr.scala 599:42]
      when T_6081 : @[csr.scala 600:42]
        node T_7517 = and(wdata, UInt<9>("h01ab")) @[csr.scala 600:65]
        reg_medeleg <= T_7517 @[csr.scala 600:56]
        skip @[csr.scala 600:42]
      when T_6297 : @[csr.scala 601:45]
        node T_7519 = and(wdata, UInt<3>("h07")) @[csr.scala 601:72]
        reg_mscounteren <= T_7519 @[csr.scala 601:63]
        skip @[csr.scala 601:45]
      when T_6299 : @[csr.scala 604:45]
        node T_7521 = and(wdata, UInt<3>("h07")) @[csr.scala 604:72]
        reg_mucounteren <= T_7521 @[csr.scala 604:63]
        skip @[csr.scala 604:45]
      when T_6053 : @[csr.scala 607:41]
        reg_tselect <= wdata @[csr.scala 607:55]
        skip @[csr.scala 607:41]
      node T_7540 = eq(reg_bp[reg_tselect].control.dmode, UInt<1>("h00")) @[csr.scala 610:13]
      node T_7541 = or(T_7540, reg_debug) @[csr.scala 610:31]
      when T_7541 : @[csr.scala 610:45]
        when T_6055 : @[csr.scala 611:42]
          wire T_7574 : {ttype : UInt<4>, dmode : UInt<1>, maskmax : UInt<6>, reserved : UInt<40>, action : UInt<1>, chain : UInt<1>, zero : UInt<2>, tmatch : UInt<2>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>} @[csr.scala 612:48]
          T_7574 is invalid @[csr.scala 612:48]
          node T_7590 = bits(wdata, 0, 0) @[csr.scala 612:48]
          T_7574.r <= T_7590 @[csr.scala 612:48]
          node T_7591 = bits(wdata, 1, 1) @[csr.scala 612:48]
          T_7574.w <= T_7591 @[csr.scala 612:48]
          node T_7592 = bits(wdata, 2, 2) @[csr.scala 612:48]
          T_7574.x <= T_7592 @[csr.scala 612:48]
          node T_7593 = bits(wdata, 3, 3) @[csr.scala 612:48]
          T_7574.u <= T_7593 @[csr.scala 612:48]
          node T_7594 = bits(wdata, 4, 4) @[csr.scala 612:48]
          T_7574.s <= T_7594 @[csr.scala 612:48]
          node T_7595 = bits(wdata, 5, 5) @[csr.scala 612:48]
          T_7574.h <= T_7595 @[csr.scala 612:48]
          node T_7596 = bits(wdata, 6, 6) @[csr.scala 612:48]
          T_7574.m <= T_7596 @[csr.scala 612:48]
          node T_7597 = bits(wdata, 8, 7) @[csr.scala 612:48]
          T_7574.tmatch <= T_7597 @[csr.scala 612:48]
          node T_7598 = bits(wdata, 10, 9) @[csr.scala 612:48]
          T_7574.zero <= T_7598 @[csr.scala 612:48]
          node T_7599 = bits(wdata, 11, 11) @[csr.scala 612:48]
          T_7574.chain <= T_7599 @[csr.scala 612:48]
          node T_7600 = bits(wdata, 12, 12) @[csr.scala 612:48]
          T_7574.action <= T_7600 @[csr.scala 612:48]
          node T_7601 = bits(wdata, 52, 13) @[csr.scala 612:48]
          T_7574.reserved <= T_7601 @[csr.scala 612:48]
          node T_7602 = bits(wdata, 58, 53) @[csr.scala 612:48]
          T_7574.maskmax <= T_7602 @[csr.scala 612:48]
          node T_7603 = bits(wdata, 59, 59) @[csr.scala 612:48]
          T_7574.dmode <= T_7603 @[csr.scala 612:48]
          node T_7604 = bits(wdata, 63, 60) @[csr.scala 612:48]
          T_7574.ttype <= T_7604 @[csr.scala 612:48]
          node T_7605 = and(T_7574.dmode, reg_debug) @[csr.scala 613:36]
          reg_bp[reg_tselect].control <- T_7574 @[csr.scala 614:22]
          reg_bp[reg_tselect].control.dmode <= T_7605 @[csr.scala 615:28]
          node T_7606 = and(T_7605, T_7574.action) @[csr.scala 616:38]
          reg_bp[reg_tselect].control.action <= T_7606 @[csr.scala 616:29]
          skip @[csr.scala 611:42]
        when T_6057 : @[csr.scala 618:42]
          reg_bp[reg_tselect].address <= wdata @[csr.scala 618:55]
          skip @[csr.scala 618:42]
        skip @[csr.scala 610:45]
      skip @[csr.scala 505:14]
    reg_mip <- io.interrupts @[csr.scala 623:11]
    reg_dcsr.debugint <= io.interrupts.debug @[csr.scala 624:21]
    reg_sptbr.asid <= UInt<1>("h00") @[csr.scala 626:18]
    reg_tselect <= UInt<1>("h00") @[csr.scala 627:38]
    reg_bp[0].control.chain <= UInt<1>("h00") @[csr.scala 629:42]
    reg_bp[0].control.ttype <= UInt<2>("h02") @[csr.scala 631:15]
    reg_bp[0].control.maskmax <= UInt<3>("h04") @[csr.scala 632:17]
    reg_bp[0].control.reserved <= UInt<1>("h00") @[csr.scala 633:18]
    reg_bp[0].control.zero <= UInt<1>("h00") @[csr.scala 634:14]
    reg_bp[0].control.h <= UInt<1>("h00") @[csr.scala 635:11]
    when reset : @[csr.scala 639:18]
      reg_bp[0].control.action <= UInt<1>("h00") @[csr.scala 640:18]
      reg_bp[0].control.dmode <= UInt<1>("h00") @[csr.scala 641:17]
      reg_bp[0].control.r <= UInt<1>("h00") @[csr.scala 642:13]
      reg_bp[0].control.w <= UInt<1>("h00") @[csr.scala 643:13]
      reg_bp[0].control.x <= UInt<1>("h00") @[csr.scala 644:13]
      skip @[csr.scala 639:18]
    reg_bp[1].control.ttype <= UInt<2>("h02") @[csr.scala 631:15]
    reg_bp[1].control.maskmax <= UInt<3>("h04") @[csr.scala 632:17]
    reg_bp[1].control.reserved <= UInt<1>("h00") @[csr.scala 633:18]
    reg_bp[1].control.zero <= UInt<1>("h00") @[csr.scala 634:14]
    reg_bp[1].control.h <= UInt<1>("h00") @[csr.scala 635:11]
    when reset : @[csr.scala 639:18]
      reg_bp[1].control.action <= UInt<1>("h00") @[csr.scala 640:18]
      reg_bp[1].control.dmode <= UInt<1>("h00") @[csr.scala 641:17]
      reg_bp[1].control.r <= UInt<1>("h00") @[csr.scala 642:13]
      reg_bp[1].control.w <= UInt<1>("h00") @[csr.scala 643:13]
      reg_bp[1].control.x <= UInt<1>("h00") @[csr.scala 644:13]
      skip @[csr.scala 639:18]
    wire T_7667 : {control : {ttype : UInt<4>, dmode : UInt<1>, maskmax : UInt<6>, reserved : UInt<40>, action : UInt<1>, chain : UInt<1>, zero : UInt<2>, tmatch : UInt<2>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>}, address : UInt<39>} @[csr.scala 648:28]
    T_7667 is invalid @[csr.scala 648:28]
    wire T_7686 : UInt<103>
    T_7686 is invalid
    T_7686 <= UInt<1>("h00")
    node T_7687 = bits(T_7686, 38, 0) @[csr.scala 648:28]
    T_7667.address <= T_7687 @[csr.scala 648:28]
    node T_7688 = bits(T_7686, 39, 39) @[csr.scala 648:28]
    T_7667.control.r <= T_7688 @[csr.scala 648:28]
    node T_7689 = bits(T_7686, 40, 40) @[csr.scala 648:28]
    T_7667.control.w <= T_7689 @[csr.scala 648:28]
    node T_7690 = bits(T_7686, 41, 41) @[csr.scala 648:28]
    T_7667.control.x <= T_7690 @[csr.scala 648:28]
    node T_7691 = bits(T_7686, 42, 42) @[csr.scala 648:28]
    T_7667.control.u <= T_7691 @[csr.scala 648:28]
    node T_7692 = bits(T_7686, 43, 43) @[csr.scala 648:28]
    T_7667.control.s <= T_7692 @[csr.scala 648:28]
    node T_7693 = bits(T_7686, 44, 44) @[csr.scala 648:28]
    T_7667.control.h <= T_7693 @[csr.scala 648:28]
    node T_7694 = bits(T_7686, 45, 45) @[csr.scala 648:28]
    T_7667.control.m <= T_7694 @[csr.scala 648:28]
    node T_7695 = bits(T_7686, 47, 46) @[csr.scala 648:28]
    T_7667.control.tmatch <= T_7695 @[csr.scala 648:28]
    node T_7696 = bits(T_7686, 49, 48) @[csr.scala 648:28]
    T_7667.control.zero <= T_7696 @[csr.scala 648:28]
    node T_7697 = bits(T_7686, 50, 50) @[csr.scala 648:28]
    T_7667.control.chain <= T_7697 @[csr.scala 648:28]
    node T_7698 = bits(T_7686, 51, 51) @[csr.scala 648:28]
    T_7667.control.action <= T_7698 @[csr.scala 648:28]
    node T_7699 = bits(T_7686, 91, 52) @[csr.scala 648:28]
    T_7667.control.reserved <= T_7699 @[csr.scala 648:28]
    node T_7700 = bits(T_7686, 97, 92) @[csr.scala 648:28]
    T_7667.control.maskmax <= T_7700 @[csr.scala 648:28]
    node T_7701 = bits(T_7686, 98, 98) @[csr.scala 648:28]
    T_7667.control.dmode <= T_7701 @[csr.scala 648:28]
    node T_7702 = bits(T_7686, 102, 99) @[csr.scala 648:28]
    T_7667.control.ttype <= T_7702 @[csr.scala 648:28]
    reg_bp[1] <- T_7667 @[csr.scala 648:8]
    
  module BreakpointUnit : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}, flip bp : {control : {ttype : UInt<4>, dmode : UInt<1>, maskmax : UInt<6>, reserved : UInt<40>, action : UInt<1>, chain : UInt<1>, zero : UInt<2>, tmatch : UInt<2>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>}, address : UInt<39>}[1], flip pc : UInt<39>, flip ea : UInt<39>, xcpt_if : UInt<1>, xcpt_ld : UInt<1>, xcpt_st : UInt<1>, debug_if : UInt<1>, debug_ld : UInt<1>, debug_st : UInt<1>}
    
    io is invalid
    io.xcpt_if <= UInt<1>("h00") @[breakpoint.scala 63:14]
    io.xcpt_ld <= UInt<1>("h00") @[breakpoint.scala 64:14]
    io.xcpt_st <= UInt<1>("h00") @[breakpoint.scala 65:14]
    io.debug_if <= UInt<1>("h00") @[breakpoint.scala 66:15]
    io.debug_ld <= UInt<1>("h00") @[breakpoint.scala 67:15]
    io.debug_st <= UInt<1>("h00") @[breakpoint.scala 68:15]
    node T_214 = eq(io.status.debug, UInt<1>("h00")) @[breakpoint.scala 29:35]
    node T_215 = cat(io.bp[0].control.s, io.bp[0].control.u) @[Cat.scala 20:58]
    node T_216 = cat(io.bp[0].control.m, io.bp[0].control.h) @[Cat.scala 20:58]
    node T_217 = cat(T_216, T_215) @[Cat.scala 20:58]
    node T_218 = dshr(T_217, io.status.prv) @[breakpoint.scala 29:68]
    node T_219 = bits(T_218, 0, 0) @[breakpoint.scala 29:68]
    node T_220 = and(T_214, T_219) @[breakpoint.scala 29:50]
    node T_221 = and(T_220, UInt<1>("h01")) @[breakpoint.scala 72:16]
    node T_222 = and(T_221, io.bp[0].control.r) @[breakpoint.scala 72:22]
    node T_223 = bits(io.bp[0].control.tmatch, 1, 1) @[breakpoint.scala 46:23]
    node T_224 = geq(io.ea, io.bp[0].address) @[breakpoint.scala 43:8]
    node T_225 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 43:36]
    node T_226 = xor(T_224, T_225) @[breakpoint.scala 43:20]
    node T_227 = not(io.ea) @[breakpoint.scala 40:6]
    node T_228 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 37:56]
    node T_229 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 37:83]
    node T_230 = and(T_228, T_229) @[breakpoint.scala 37:73]
    node T_231 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 37:83]
    node T_232 = and(T_230, T_231) @[breakpoint.scala 37:73]
    node T_233 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 37:83]
    node T_234 = and(T_232, T_233) @[breakpoint.scala 37:73]
    node T_235 = cat(T_230, T_228) @[Cat.scala 20:58]
    node T_236 = cat(T_234, T_232) @[Cat.scala 20:58]
    node T_237 = cat(T_236, T_235) @[Cat.scala 20:58]
    node T_238 = or(T_227, T_237) @[breakpoint.scala 40:9]
    node T_239 = not(io.bp[0].address) @[breakpoint.scala 40:24]
    node T_240 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 37:56]
    node T_241 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 37:83]
    node T_242 = and(T_240, T_241) @[breakpoint.scala 37:73]
    node T_243 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 37:83]
    node T_244 = and(T_242, T_243) @[breakpoint.scala 37:73]
    node T_245 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 37:83]
    node T_246 = and(T_244, T_245) @[breakpoint.scala 37:73]
    node T_247 = cat(T_242, T_240) @[Cat.scala 20:58]
    node T_248 = cat(T_246, T_244) @[Cat.scala 20:58]
    node T_249 = cat(T_248, T_247) @[Cat.scala 20:58]
    node T_250 = or(T_239, T_249) @[breakpoint.scala 40:33]
    node T_251 = eq(T_238, T_250) @[breakpoint.scala 40:19]
    node T_252 = mux(T_223, T_226, T_251) @[breakpoint.scala 46:8]
    node T_253 = and(T_222, T_252) @[breakpoint.scala 72:38]
    node T_254 = and(T_220, UInt<1>("h01")) @[breakpoint.scala 73:16]
    node T_255 = and(T_254, io.bp[0].control.w) @[breakpoint.scala 73:22]
    node T_256 = bits(io.bp[0].control.tmatch, 1, 1) @[breakpoint.scala 46:23]
    node T_257 = geq(io.ea, io.bp[0].address) @[breakpoint.scala 43:8]
    node T_258 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 43:36]
    node T_259 = xor(T_257, T_258) @[breakpoint.scala 43:20]
    node T_260 = not(io.ea) @[breakpoint.scala 40:6]
    node T_261 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 37:56]
    node T_262 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 37:83]
    node T_263 = and(T_261, T_262) @[breakpoint.scala 37:73]
    node T_264 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 37:83]
    node T_265 = and(T_263, T_264) @[breakpoint.scala 37:73]
    node T_266 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 37:83]
    node T_267 = and(T_265, T_266) @[breakpoint.scala 37:73]
    node T_268 = cat(T_263, T_261) @[Cat.scala 20:58]
    node T_269 = cat(T_267, T_265) @[Cat.scala 20:58]
    node T_270 = cat(T_269, T_268) @[Cat.scala 20:58]
    node T_271 = or(T_260, T_270) @[breakpoint.scala 40:9]
    node T_272 = not(io.bp[0].address) @[breakpoint.scala 40:24]
    node T_273 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 37:56]
    node T_274 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 37:83]
    node T_275 = and(T_273, T_274) @[breakpoint.scala 37:73]
    node T_276 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 37:83]
    node T_277 = and(T_275, T_276) @[breakpoint.scala 37:73]
    node T_278 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 37:83]
    node T_279 = and(T_277, T_278) @[breakpoint.scala 37:73]
    node T_280 = cat(T_275, T_273) @[Cat.scala 20:58]
    node T_281 = cat(T_279, T_277) @[Cat.scala 20:58]
    node T_282 = cat(T_281, T_280) @[Cat.scala 20:58]
    node T_283 = or(T_272, T_282) @[breakpoint.scala 40:33]
    node T_284 = eq(T_271, T_283) @[breakpoint.scala 40:19]
    node T_285 = mux(T_256, T_259, T_284) @[breakpoint.scala 46:8]
    node T_286 = and(T_255, T_285) @[breakpoint.scala 73:38]
    node T_287 = and(T_220, UInt<1>("h01")) @[breakpoint.scala 74:16]
    node T_288 = and(T_287, io.bp[0].control.x) @[breakpoint.scala 74:22]
    node T_289 = bits(io.bp[0].control.tmatch, 1, 1) @[breakpoint.scala 46:23]
    node T_290 = geq(io.pc, io.bp[0].address) @[breakpoint.scala 43:8]
    node T_291 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 43:36]
    node T_292 = xor(T_290, T_291) @[breakpoint.scala 43:20]
    node T_293 = not(io.pc) @[breakpoint.scala 40:6]
    node T_294 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 37:56]
    node T_295 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 37:83]
    node T_296 = and(T_294, T_295) @[breakpoint.scala 37:73]
    node T_297 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 37:83]
    node T_298 = and(T_296, T_297) @[breakpoint.scala 37:73]
    node T_299 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 37:83]
    node T_300 = and(T_298, T_299) @[breakpoint.scala 37:73]
    node T_301 = cat(T_296, T_294) @[Cat.scala 20:58]
    node T_302 = cat(T_300, T_298) @[Cat.scala 20:58]
    node T_303 = cat(T_302, T_301) @[Cat.scala 20:58]
    node T_304 = or(T_293, T_303) @[breakpoint.scala 40:9]
    node T_305 = not(io.bp[0].address) @[breakpoint.scala 40:24]
    node T_306 = bits(io.bp[0].control.tmatch, 0, 0) @[breakpoint.scala 37:56]
    node T_307 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 37:83]
    node T_308 = and(T_306, T_307) @[breakpoint.scala 37:73]
    node T_309 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 37:83]
    node T_310 = and(T_308, T_309) @[breakpoint.scala 37:73]
    node T_311 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 37:83]
    node T_312 = and(T_310, T_311) @[breakpoint.scala 37:73]
    node T_313 = cat(T_308, T_306) @[Cat.scala 20:58]
    node T_314 = cat(T_312, T_310) @[Cat.scala 20:58]
    node T_315 = cat(T_314, T_313) @[Cat.scala 20:58]
    node T_316 = or(T_305, T_315) @[breakpoint.scala 40:33]
    node T_317 = eq(T_304, T_316) @[breakpoint.scala 40:19]
    node T_318 = mux(T_289, T_292, T_317) @[breakpoint.scala 46:8]
    node T_319 = and(T_288, T_318) @[breakpoint.scala 74:38]
    node T_321 = eq(io.bp[0].control.chain, UInt<1>("h00")) @[breakpoint.scala 75:15]
    node T_322 = and(T_321, T_253) @[breakpoint.scala 77:15]
    when T_322 : @[breakpoint.scala 77:21]
      node T_324 = eq(io.bp[0].control.action, UInt<1>("h00")) @[breakpoint.scala 77:37]
      io.xcpt_ld <= T_324 @[breakpoint.scala 77:34]
      io.debug_ld <= io.bp[0].control.action @[breakpoint.scala 77:69]
      skip @[breakpoint.scala 77:21]
    node T_325 = and(T_321, T_286) @[breakpoint.scala 78:15]
    when T_325 : @[breakpoint.scala 78:21]
      node T_327 = eq(io.bp[0].control.action, UInt<1>("h00")) @[breakpoint.scala 78:37]
      io.xcpt_st <= T_327 @[breakpoint.scala 78:34]
      io.debug_st <= io.bp[0].control.action @[breakpoint.scala 78:69]
      skip @[breakpoint.scala 78:21]
    node T_328 = and(T_321, T_319) @[breakpoint.scala 79:15]
    when T_328 : @[breakpoint.scala 79:21]
      node T_330 = eq(io.bp[0].control.action, UInt<1>("h00")) @[breakpoint.scala 79:37]
      io.xcpt_if <= T_330 @[breakpoint.scala 79:34]
      io.debug_if <= io.bp[0].control.action @[breakpoint.scala 79:69]
      skip @[breakpoint.scala 79:21]
    node T_331 = or(T_321, T_253) @[breakpoint.scala 81:10]
    node T_332 = or(T_321, T_286) @[breakpoint.scala 81:20]
    node T_333 = or(T_321, T_319) @[breakpoint.scala 81:30]
    
  module ALU : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip dw : UInt<1>, flip fn : UInt<4>, flip in2 : UInt<64>, flip in1 : UInt<64>, out : UInt<64>, adder_out : UInt<64>, cmp_out : UInt<1>}
    
    io is invalid
    node T_7 = bits(io.fn, 3, 3) @[dpath_alu.scala 39:29]
    node T_8 = not(io.in2) @[dpath_alu.scala 59:35]
    node in2_inv = mux(T_7, T_8, io.in2) @[dpath_alu.scala 59:20]
    node in1_xor_in2 = xor(io.in1, in2_inv) @[dpath_alu.scala 60:28]
    node T_9 = add(io.in1, in2_inv) @[dpath_alu.scala 61:26]
    node T_10 = tail(T_9, 1) @[dpath_alu.scala 61:26]
    node T_11 = bits(io.fn, 3, 3) @[dpath_alu.scala 39:29]
    node T_12 = add(T_10, T_11) @[dpath_alu.scala 61:36]
    node T_13 = tail(T_12, 1) @[dpath_alu.scala 61:36]
    io.adder_out <= T_13 @[dpath_alu.scala 61:16]
    node T_14 = bits(io.fn, 0, 0) @[dpath_alu.scala 42:35]
    node T_15 = bits(io.fn, 3, 3) @[dpath_alu.scala 43:30]
    node T_17 = eq(T_15, UInt<1>("h00")) @[dpath_alu.scala 43:26]
    node T_19 = eq(in1_xor_in2, UInt<1>("h00")) @[dpath_alu.scala 65:35]
    node T_20 = bits(io.in1, 63, 63) @[dpath_alu.scala 66:15]
    node T_21 = bits(io.in2, 63, 63) @[dpath_alu.scala 66:34]
    node T_22 = eq(T_20, T_21) @[dpath_alu.scala 66:24]
    node T_23 = bits(io.adder_out, 63, 63) @[dpath_alu.scala 66:56]
    node T_24 = bits(io.fn, 1, 1) @[dpath_alu.scala 41:35]
    node T_25 = bits(io.in2, 63, 63) @[dpath_alu.scala 67:35]
    node T_26 = bits(io.in1, 63, 63) @[dpath_alu.scala 67:51]
    node T_27 = mux(T_24, T_25, T_26) @[dpath_alu.scala 67:8]
    node T_28 = mux(T_22, T_23, T_27) @[dpath_alu.scala 66:8]
    node T_29 = mux(T_17, T_19, T_28) @[dpath_alu.scala 65:8]
    node T_30 = xor(T_14, T_29) @[dpath_alu.scala 64:36]
    io.cmp_out <= T_30 @[dpath_alu.scala 64:14]
    node T_31 = bits(io.fn, 3, 3) @[dpath_alu.scala 39:29]
    node T_32 = bits(io.in1, 31, 31) @[dpath_alu.scala 74:55]
    node T_33 = and(T_31, T_32) @[dpath_alu.scala 74:46]
    node T_34 = bits(T_33, 0, 0) @[Bitwise.scala 33:15]
    node T_37 = mux(T_34, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node T_38 = eq(io.dw, UInt<1>("h01")) @[dpath_alu.scala 75:31]
    node T_39 = bits(io.in1, 63, 32) @[dpath_alu.scala 75:48]
    node T_40 = mux(T_38, T_39, T_37) @[dpath_alu.scala 75:24]
    node T_41 = bits(io.in2, 5, 5) @[dpath_alu.scala 76:29]
    node T_42 = eq(io.dw, UInt<1>("h01")) @[dpath_alu.scala 76:42]
    node T_43 = and(T_41, T_42) @[dpath_alu.scala 76:33]
    node T_44 = bits(io.in2, 4, 0) @[dpath_alu.scala 76:60]
    node shamt = cat(T_43, T_44) @[Cat.scala 20:58]
    node T_45 = bits(io.in1, 31, 0) @[dpath_alu.scala 77:34]
    node shin_r = cat(T_40, T_45) @[Cat.scala 20:58]
    node T_46 = eq(io.fn, UInt<3>("h05")) @[dpath_alu.scala 79:24]
    node T_47 = eq(io.fn, UInt<4>("h0b")) @[dpath_alu.scala 79:44]
    node T_48 = or(T_46, T_47) @[dpath_alu.scala 79:35]
    node T_51 = shl(UInt<32>("h0ffffffff"), 32) @[Bitwise.scala 58:47]
    node T_52 = xor(UInt<64>("h0ffffffffffffffff"), T_51) @[Bitwise.scala 58:21]
    node T_53 = shr(shin_r, 32) @[Bitwise.scala 59:21]
    node T_54 = and(T_53, T_52) @[Bitwise.scala 59:31]
    node T_55 = bits(shin_r, 31, 0) @[Bitwise.scala 59:46]
    node T_56 = shl(T_55, 32) @[Bitwise.scala 59:65]
    node T_57 = not(T_52) @[Bitwise.scala 59:77]
    node T_58 = and(T_56, T_57) @[Bitwise.scala 59:75]
    node T_59 = or(T_54, T_58) @[Bitwise.scala 59:39]
    node T_60 = bits(T_52, 47, 0) @[Bitwise.scala 58:28]
    node T_61 = shl(T_60, 16) @[Bitwise.scala 58:47]
    node T_62 = xor(T_52, T_61) @[Bitwise.scala 58:21]
    node T_63 = shr(T_59, 16) @[Bitwise.scala 59:21]
    node T_64 = and(T_63, T_62) @[Bitwise.scala 59:31]
    node T_65 = bits(T_59, 47, 0) @[Bitwise.scala 59:46]
    node T_66 = shl(T_65, 16) @[Bitwise.scala 59:65]
    node T_67 = not(T_62) @[Bitwise.scala 59:77]
    node T_68 = and(T_66, T_67) @[Bitwise.scala 59:75]
    node T_69 = or(T_64, T_68) @[Bitwise.scala 59:39]
    node T_70 = bits(T_62, 55, 0) @[Bitwise.scala 58:28]
    node T_71 = shl(T_70, 8) @[Bitwise.scala 58:47]
    node T_72 = xor(T_62, T_71) @[Bitwise.scala 58:21]
    node T_73 = shr(T_69, 8) @[Bitwise.scala 59:21]
    node T_74 = and(T_73, T_72) @[Bitwise.scala 59:31]
    node T_75 = bits(T_69, 55, 0) @[Bitwise.scala 59:46]
    node T_76 = shl(T_75, 8) @[Bitwise.scala 59:65]
    node T_77 = not(T_72) @[Bitwise.scala 59:77]
    node T_78 = and(T_76, T_77) @[Bitwise.scala 59:75]
    node T_79 = or(T_74, T_78) @[Bitwise.scala 59:39]
    node T_80 = bits(T_72, 59, 0) @[Bitwise.scala 58:28]
    node T_81 = shl(T_80, 4) @[Bitwise.scala 58:47]
    node T_82 = xor(T_72, T_81) @[Bitwise.scala 58:21]
    node T_83 = shr(T_79, 4) @[Bitwise.scala 59:21]
    node T_84 = and(T_83, T_82) @[Bitwise.scala 59:31]
    node T_85 = bits(T_79, 59, 0) @[Bitwise.scala 59:46]
    node T_86 = shl(T_85, 4) @[Bitwise.scala 59:65]
    node T_87 = not(T_82) @[Bitwise.scala 59:77]
    node T_88 = and(T_86, T_87) @[Bitwise.scala 59:75]
    node T_89 = or(T_84, T_88) @[Bitwise.scala 59:39]
    node T_90 = bits(T_82, 61, 0) @[Bitwise.scala 58:28]
    node T_91 = shl(T_90, 2) @[Bitwise.scala 58:47]
    node T_92 = xor(T_82, T_91) @[Bitwise.scala 58:21]
    node T_93 = shr(T_89, 2) @[Bitwise.scala 59:21]
    node T_94 = and(T_93, T_92) @[Bitwise.scala 59:31]
    node T_95 = bits(T_89, 61, 0) @[Bitwise.scala 59:46]
    node T_96 = shl(T_95, 2) @[Bitwise.scala 59:65]
    node T_97 = not(T_92) @[Bitwise.scala 59:77]
    node T_98 = and(T_96, T_97) @[Bitwise.scala 59:75]
    node T_99 = or(T_94, T_98) @[Bitwise.scala 59:39]
    node T_100 = bits(T_92, 62, 0) @[Bitwise.scala 58:28]
    node T_101 = shl(T_100, 1) @[Bitwise.scala 58:47]
    node T_102 = xor(T_92, T_101) @[Bitwise.scala 58:21]
    node T_103 = shr(T_99, 1) @[Bitwise.scala 59:21]
    node T_104 = and(T_103, T_102) @[Bitwise.scala 59:31]
    node T_105 = bits(T_99, 62, 0) @[Bitwise.scala 59:46]
    node T_106 = shl(T_105, 1) @[Bitwise.scala 59:65]
    node T_107 = not(T_102) @[Bitwise.scala 59:77]
    node T_108 = and(T_106, T_107) @[Bitwise.scala 59:75]
    node T_109 = or(T_104, T_108) @[Bitwise.scala 59:39]
    node shin = mux(T_48, shin_r, T_109) @[dpath_alu.scala 79:17]
    node T_110 = bits(io.fn, 3, 3) @[dpath_alu.scala 39:29]
    node T_111 = bits(shin, 63, 63) @[dpath_alu.scala 80:41]
    node T_112 = and(T_110, T_111) @[dpath_alu.scala 80:35]
    node T_113 = cat(T_112, shin) @[Cat.scala 20:58]
    node T_114 = asSInt(T_113) @[dpath_alu.scala 80:57]
    node T_115 = dshr(T_114, shamt) @[dpath_alu.scala 80:64]
    node shout_r = bits(T_115, 63, 0) @[dpath_alu.scala 80:73]
    node T_118 = shl(UInt<32>("h0ffffffff"), 32) @[Bitwise.scala 58:47]
    node T_119 = xor(UInt<64>("h0ffffffffffffffff"), T_118) @[Bitwise.scala 58:21]
    node T_120 = shr(shout_r, 32) @[Bitwise.scala 59:21]
    node T_121 = and(T_120, T_119) @[Bitwise.scala 59:31]
    node T_122 = bits(shout_r, 31, 0) @[Bitwise.scala 59:46]
    node T_123 = shl(T_122, 32) @[Bitwise.scala 59:65]
    node T_124 = not(T_119) @[Bitwise.scala 59:77]
    node T_125 = and(T_123, T_124) @[Bitwise.scala 59:75]
    node T_126 = or(T_121, T_125) @[Bitwise.scala 59:39]
    node T_127 = bits(T_119, 47, 0) @[Bitwise.scala 58:28]
    node T_128 = shl(T_127, 16) @[Bitwise.scala 58:47]
    node T_129 = xor(T_119, T_128) @[Bitwise.scala 58:21]
    node T_130 = shr(T_126, 16) @[Bitwise.scala 59:21]
    node T_131 = and(T_130, T_129) @[Bitwise.scala 59:31]
    node T_132 = bits(T_126, 47, 0) @[Bitwise.scala 59:46]
    node T_133 = shl(T_132, 16) @[Bitwise.scala 59:65]
    node T_134 = not(T_129) @[Bitwise.scala 59:77]
    node T_135 = and(T_133, T_134) @[Bitwise.scala 59:75]
    node T_136 = or(T_131, T_135) @[Bitwise.scala 59:39]
    node T_137 = bits(T_129, 55, 0) @[Bitwise.scala 58:28]
    node T_138 = shl(T_137, 8) @[Bitwise.scala 58:47]
    node T_139 = xor(T_129, T_138) @[Bitwise.scala 58:21]
    node T_140 = shr(T_136, 8) @[Bitwise.scala 59:21]
    node T_141 = and(T_140, T_139) @[Bitwise.scala 59:31]
    node T_142 = bits(T_136, 55, 0) @[Bitwise.scala 59:46]
    node T_143 = shl(T_142, 8) @[Bitwise.scala 59:65]
    node T_144 = not(T_139) @[Bitwise.scala 59:77]
    node T_145 = and(T_143, T_144) @[Bitwise.scala 59:75]
    node T_146 = or(T_141, T_145) @[Bitwise.scala 59:39]
    node T_147 = bits(T_139, 59, 0) @[Bitwise.scala 58:28]
    node T_148 = shl(T_147, 4) @[Bitwise.scala 58:47]
    node T_149 = xor(T_139, T_148) @[Bitwise.scala 58:21]
    node T_150 = shr(T_146, 4) @[Bitwise.scala 59:21]
    node T_151 = and(T_150, T_149) @[Bitwise.scala 59:31]
    node T_152 = bits(T_146, 59, 0) @[Bitwise.scala 59:46]
    node T_153 = shl(T_152, 4) @[Bitwise.scala 59:65]
    node T_154 = not(T_149) @[Bitwise.scala 59:77]
    node T_155 = and(T_153, T_154) @[Bitwise.scala 59:75]
    node T_156 = or(T_151, T_155) @[Bitwise.scala 59:39]
    node T_157 = bits(T_149, 61, 0) @[Bitwise.scala 58:28]
    node T_158 = shl(T_157, 2) @[Bitwise.scala 58:47]
    node T_159 = xor(T_149, T_158) @[Bitwise.scala 58:21]
    node T_160 = shr(T_156, 2) @[Bitwise.scala 59:21]
    node T_161 = and(T_160, T_159) @[Bitwise.scala 59:31]
    node T_162 = bits(T_156, 61, 0) @[Bitwise.scala 59:46]
    node T_163 = shl(T_162, 2) @[Bitwise.scala 59:65]
    node T_164 = not(T_159) @[Bitwise.scala 59:77]
    node T_165 = and(T_163, T_164) @[Bitwise.scala 59:75]
    node T_166 = or(T_161, T_165) @[Bitwise.scala 59:39]
    node T_167 = bits(T_159, 62, 0) @[Bitwise.scala 58:28]
    node T_168 = shl(T_167, 1) @[Bitwise.scala 58:47]
    node T_169 = xor(T_159, T_168) @[Bitwise.scala 58:21]
    node T_170 = shr(T_166, 1) @[Bitwise.scala 59:21]
    node T_171 = and(T_170, T_169) @[Bitwise.scala 59:31]
    node T_172 = bits(T_166, 62, 0) @[Bitwise.scala 59:46]
    node T_173 = shl(T_172, 1) @[Bitwise.scala 59:65]
    node T_174 = not(T_169) @[Bitwise.scala 59:77]
    node T_175 = and(T_173, T_174) @[Bitwise.scala 59:75]
    node shout_l = or(T_171, T_175) @[Bitwise.scala 59:39]
    node T_176 = eq(io.fn, UInt<3>("h05")) @[dpath_alu.scala 82:25]
    node T_177 = eq(io.fn, UInt<4>("h0b")) @[dpath_alu.scala 82:44]
    node T_178 = or(T_176, T_177) @[dpath_alu.scala 82:35]
    node T_180 = mux(T_178, shout_r, UInt<1>("h00")) @[dpath_alu.scala 82:18]
    node T_181 = eq(io.fn, UInt<1>("h01")) @[dpath_alu.scala 83:25]
    node T_183 = mux(T_181, shout_l, UInt<1>("h00")) @[dpath_alu.scala 83:18]
    node shout = or(T_180, T_183) @[dpath_alu.scala 82:74]
    node T_184 = eq(io.fn, UInt<3>("h04")) @[dpath_alu.scala 86:25]
    node T_185 = eq(io.fn, UInt<3>("h06")) @[dpath_alu.scala 86:45]
    node T_186 = or(T_184, T_185) @[dpath_alu.scala 86:36]
    node T_188 = mux(T_186, in1_xor_in2, UInt<1>("h00")) @[dpath_alu.scala 86:18]
    node T_189 = eq(io.fn, UInt<3>("h06")) @[dpath_alu.scala 87:25]
    node T_190 = eq(io.fn, UInt<3>("h07")) @[dpath_alu.scala 87:44]
    node T_191 = or(T_189, T_190) @[dpath_alu.scala 87:35]
    node T_192 = and(io.in1, io.in2) @[dpath_alu.scala 87:63]
    node T_194 = mux(T_191, T_192, UInt<1>("h00")) @[dpath_alu.scala 87:18]
    node logic = or(T_188, T_194) @[dpath_alu.scala 86:78]
    node T_195 = eq(io.fn, UInt<2>("h02")) @[dpath_alu.scala 40:30]
    node T_196 = eq(io.fn, UInt<2>("h03")) @[dpath_alu.scala 40:48]
    node T_197 = or(T_195, T_196) @[dpath_alu.scala 40:41]
    node T_198 = geq(io.fn, UInt<4>("h0c")) @[dpath_alu.scala 40:66]
    node T_199 = or(T_197, T_198) @[dpath_alu.scala 40:59]
    node T_200 = and(T_199, io.cmp_out) @[dpath_alu.scala 88:35]
    node T_201 = or(T_200, logic) @[dpath_alu.scala 88:50]
    node shift_logic = or(T_201, shout) @[dpath_alu.scala 88:58]
    node T_202 = eq(io.fn, UInt<1>("h00")) @[dpath_alu.scala 89:23]
    node T_203 = eq(io.fn, UInt<4>("h0a")) @[dpath_alu.scala 89:43]
    node T_204 = or(T_202, T_203) @[dpath_alu.scala 89:34]
    node out = mux(T_204, io.adder_out, shift_logic) @[dpath_alu.scala 89:16]
    io.out <= out @[dpath_alu.scala 91:10]
    node T_205 = eq(io.dw, UInt<1>("h00")) @[dpath_alu.scala 94:17]
    when T_205 : @[dpath_alu.scala 94:28]
      node T_206 = bits(out, 31, 31) @[dpath_alu.scala 94:56]
      node T_207 = bits(T_206, 0, 0) @[Bitwise.scala 33:15]
      node T_210 = mux(T_207, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
      node T_211 = bits(out, 31, 0) @[dpath_alu.scala 94:66]
      node T_212 = cat(T_210, T_211) @[Cat.scala 20:58]
      io.out <= T_212 @[dpath_alu.scala 94:37]
      skip @[dpath_alu.scala 94:28]
    
  module MulDiv : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {fn : UInt<4>, dw : UInt<1>, in1 : UInt<64>, in2 : UInt<64>, tag : UInt<5>}}, flip kill : UInt<1>, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, tag : UInt<5>}}}
    
    io is invalid
    reg state : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg req : {fn : UInt<4>, dw : UInt<1>, in1 : UInt<64>, in2 : UInt<64>, tag : UInt<5>}, clk
    reg count : UInt<7>, clk
    reg neg_out : UInt<1>, clk
    reg isMul : UInt<1>, clk
    reg isHi : UInt<1>, clk
    reg divisor : UInt<65>, clk
    reg remainder : UInt<130>, clk
    node T_62 = and(io.req.bits.fn, UInt<4>("h04")) @[decode.scala 13:65]
    node T_64 = eq(T_62, UInt<4>("h00")) @[decode.scala 13:121]
    node T_66 = and(io.req.bits.fn, UInt<4>("h08")) @[decode.scala 13:65]
    node T_68 = eq(T_66, UInt<4>("h08")) @[decode.scala 13:121]
    node T_70 = or(UInt<1>("h00"), T_64) @[decode.scala 14:30]
    node T_71 = or(T_70, T_68) @[decode.scala 14:30]
    node T_73 = and(io.req.bits.fn, UInt<4>("h05")) @[decode.scala 13:65]
    node T_75 = eq(T_73, UInt<4>("h01")) @[decode.scala 13:121]
    node T_77 = and(io.req.bits.fn, UInt<4>("h02")) @[decode.scala 13:65]
    node T_79 = eq(T_77, UInt<4>("h02")) @[decode.scala 13:121]
    node T_81 = or(UInt<1>("h00"), T_75) @[decode.scala 14:30]
    node T_82 = or(T_81, T_79) @[decode.scala 14:30]
    node T_83 = or(T_82, T_68) @[decode.scala 14:30]
    node T_85 = and(io.req.bits.fn, UInt<4>("h09")) @[decode.scala 13:65]
    node T_87 = eq(T_85, UInt<4>("h00")) @[decode.scala 13:121]
    node T_89 = and(io.req.bits.fn, UInt<4>("h03")) @[decode.scala 13:65]
    node T_91 = eq(T_89, UInt<4>("h00")) @[decode.scala 13:121]
    node T_93 = or(UInt<1>("h00"), T_87) @[decode.scala 14:30]
    node T_94 = or(T_93, T_64) @[decode.scala 14:30]
    node T_95 = or(T_94, T_91) @[decode.scala 14:30]
    node T_97 = or(UInt<1>("h00"), T_87) @[decode.scala 14:30]
    node T_98 = or(T_97, T_64) @[decode.scala 14:30]
    node cmdMul = bits(T_71, 0, 0) @[multiplier.scala 61:58]
    node cmdHi = bits(T_83, 0, 0) @[multiplier.scala 61:58]
    node lhsSigned = bits(T_95, 0, 0) @[multiplier.scala 61:58]
    node rhsSigned = bits(T_98, 0, 0) @[multiplier.scala 61:58]
    node T_100 = eq(io.req.bits.dw, UInt<1>("h00")) @[multiplier.scala 64:62]
    node T_101 = and(UInt<1>("h01"), T_100) @[multiplier.scala 64:52]
    node T_102 = bits(io.req.bits.in1, 31, 31) @[multiplier.scala 67:38]
    node T_103 = bits(io.req.bits.in1, 63, 63) @[multiplier.scala 67:48]
    node T_104 = mux(T_101, T_102, T_103) @[multiplier.scala 67:29]
    node lhs_sign = and(lhsSigned, T_104) @[multiplier.scala 67:23]
    node T_105 = bits(lhs_sign, 0, 0) @[Bitwise.scala 33:15]
    node T_108 = mux(T_105, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node T_109 = bits(io.req.bits.in1, 63, 32) @[multiplier.scala 68:43]
    node T_110 = mux(T_101, T_108, T_109) @[multiplier.scala 68:17]
    node T_111 = bits(io.req.bits.in1, 31, 0) @[multiplier.scala 69:15]
    node lhs_in = cat(T_110, T_111) @[Cat.scala 20:58]
    node T_113 = eq(io.req.bits.dw, UInt<1>("h00")) @[multiplier.scala 64:62]
    node T_114 = and(UInt<1>("h01"), T_113) @[multiplier.scala 64:52]
    node T_115 = bits(io.req.bits.in2, 31, 31) @[multiplier.scala 67:38]
    node T_116 = bits(io.req.bits.in2, 63, 63) @[multiplier.scala 67:48]
    node T_117 = mux(T_114, T_115, T_116) @[multiplier.scala 67:29]
    node rhs_sign = and(rhsSigned, T_117) @[multiplier.scala 67:23]
    node T_118 = bits(rhs_sign, 0, 0) @[Bitwise.scala 33:15]
    node T_121 = mux(T_118, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node T_122 = bits(io.req.bits.in2, 63, 32) @[multiplier.scala 68:43]
    node T_123 = mux(T_114, T_121, T_122) @[multiplier.scala 68:17]
    node T_124 = bits(io.req.bits.in2, 31, 0) @[multiplier.scala 69:15]
    node rhs_in = cat(T_123, T_124) @[Cat.scala 20:58]
    node T_125 = bits(remainder, 128, 64) @[multiplier.scala 74:29]
    node T_126 = bits(divisor, 64, 0) @[multiplier.scala 74:46]
    node T_127 = sub(T_125, T_126) @[multiplier.scala 74:37]
    node subtractor = tail(T_127, 1) @[multiplier.scala 74:37]
    node less = bits(subtractor, 64, 64) @[multiplier.scala 75:24]
    node T_128 = bits(remainder, 63, 0) @[multiplier.scala 76:37]
    node T_130 = sub(UInt<1>("h00"), T_128) @[multiplier.scala 76:27]
    node negated_remainder = tail(T_130, 1) @[multiplier.scala 76:27]
    node T_131 = eq(state, UInt<3>("h01")) @[multiplier.scala 78:15]
    when T_131 : @[multiplier.scala 78:33]
      node T_132 = bits(remainder, 63, 63) @[multiplier.scala 79:20]
      node T_133 = or(T_132, isMul) @[multiplier.scala 79:26]
      when T_133 : @[multiplier.scala 79:36]
        remainder <= negated_remainder @[multiplier.scala 80:17]
        skip @[multiplier.scala 79:36]
      node T_134 = bits(divisor, 63, 63) @[multiplier.scala 82:18]
      node T_135 = or(T_134, isMul) @[multiplier.scala 82:24]
      when T_135 : @[multiplier.scala 82:34]
        divisor <= subtractor @[multiplier.scala 83:15]
        skip @[multiplier.scala 82:34]
      state <= UInt<3>("h02") @[multiplier.scala 85:11]
      skip @[multiplier.scala 78:33]
    node T_136 = eq(state, UInt<3>("h04")) @[multiplier.scala 88:15]
    when T_136 : @[multiplier.scala 88:33]
      remainder <= negated_remainder @[multiplier.scala 89:15]
      state <= UInt<3>("h05") @[multiplier.scala 90:11]
      skip @[multiplier.scala 88:33]
    node T_137 = eq(state, UInt<3>("h03")) @[multiplier.scala 92:15]
    when T_137 : @[multiplier.scala 92:31]
      node T_138 = bits(remainder, 128, 65) @[multiplier.scala 93:27]
      remainder <= T_138 @[multiplier.scala 93:15]
      node T_139 = mux(neg_out, UInt<3>("h04"), UInt<3>("h05")) @[multiplier.scala 94:17]
      state <= T_139 @[multiplier.scala 94:11]
      skip @[multiplier.scala 92:31]
    node T_140 = eq(state, UInt<3>("h02")) @[multiplier.scala 96:15]
    node T_141 = and(T_140, isMul) @[multiplier.scala 96:26]
    when T_141 : @[multiplier.scala 96:36]
      node T_142 = bits(remainder, 129, 65) @[multiplier.scala 97:31]
      node T_143 = bits(remainder, 63, 0) @[multiplier.scala 97:55]
      node T_144 = cat(T_142, T_143) @[Cat.scala 20:58]
      node T_145 = bits(T_144, 63, 0) @[multiplier.scala 98:24]
      node T_146 = bits(T_144, 128, 64) @[multiplier.scala 99:23]
      node T_147 = asSInt(T_146) @[multiplier.scala 99:37]
      node T_148 = asSInt(divisor) @[multiplier.scala 100:26]
      node T_149 = bits(T_145, 7, 0) @[multiplier.scala 101:22]
      node T_150 = mul(T_148, T_149) @[multiplier.scala 101:43]
      node T_151 = add(T_150, T_147) @[multiplier.scala 101:52]
      node T_152 = tail(T_151, 1) @[multiplier.scala 101:52]
      node T_153 = asSInt(T_152) @[multiplier.scala 101:52]
      node T_154 = bits(T_145, 63, 8) @[multiplier.scala 102:38]
      node T_155 = asUInt(T_153) @[Cat.scala 20:58]
      node T_156 = cat(T_155, T_154) @[Cat.scala 20:58]
      node T_159 = mul(count, UInt<4>("h08")) @[multiplier.scala 104:56]
      node T_160 = bits(T_159, 5, 0) @[multiplier.scala 104:72]
      node T_161 = dshr(asSInt(UInt<65>("h010000000000000000")), T_160) @[multiplier.scala 104:46]
      node T_162 = bits(T_161, 63, 0) @[multiplier.scala 104:91]
      node T_165 = neq(count, UInt<3>("h07")) @[multiplier.scala 105:47]
      node T_166 = and(UInt<1>("h01"), T_165) @[multiplier.scala 105:38]
      node T_168 = neq(count, UInt<1>("h00")) @[multiplier.scala 105:81]
      node T_169 = and(T_166, T_168) @[multiplier.scala 105:72]
      node T_171 = eq(isHi, UInt<1>("h00")) @[multiplier.scala 106:7]
      node T_172 = and(T_169, T_171) @[multiplier.scala 105:87]
      node T_173 = not(T_162) @[multiplier.scala 106:26]
      node T_174 = and(T_145, T_173) @[multiplier.scala 106:24]
      node T_176 = eq(T_174, UInt<1>("h00")) @[multiplier.scala 106:37]
      node T_177 = and(T_172, T_176) @[multiplier.scala 106:13]
      node T_180 = mul(count, UInt<4>("h08")) @[multiplier.scala 107:44]
      node T_181 = sub(UInt<7>("h040"), T_180) @[multiplier.scala 107:36]
      node T_182 = tail(T_181, 1) @[multiplier.scala 107:36]
      node T_183 = bits(T_182, 5, 0) @[multiplier.scala 107:60]
      node T_184 = dshr(T_144, T_183) @[multiplier.scala 107:27]
      node T_185 = bits(T_156, 128, 64) @[multiplier.scala 108:37]
      node T_186 = mux(T_177, T_184, T_156) @[multiplier.scala 108:55]
      node T_187 = bits(T_186, 63, 0) @[multiplier.scala 108:82]
      node T_188 = cat(T_185, T_187) @[Cat.scala 20:58]
      node T_189 = shr(T_188, 64) @[multiplier.scala 109:34]
      node T_191 = bits(T_188, 63, 0) @[multiplier.scala 109:64]
      node T_192 = cat(T_189, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_193 = cat(T_192, T_191) @[Cat.scala 20:58]
      remainder <= T_193 @[multiplier.scala 109:15]
      node T_195 = add(count, UInt<1>("h01")) @[multiplier.scala 111:20]
      node T_196 = tail(T_195, 1) @[multiplier.scala 111:20]
      count <= T_196 @[multiplier.scala 111:11]
      node T_198 = eq(count, UInt<3>("h07")) @[multiplier.scala 112:25]
      node T_199 = or(T_177, T_198) @[multiplier.scala 112:16]
      when T_199 : @[multiplier.scala 112:51]
        node T_200 = mux(isHi, UInt<3>("h03"), UInt<3>("h05")) @[multiplier.scala 113:19]
        state <= T_200 @[multiplier.scala 113:13]
        skip @[multiplier.scala 112:51]
      skip @[multiplier.scala 96:36]
    node T_201 = eq(state, UInt<3>("h02")) @[multiplier.scala 116:15]
    node T_203 = eq(isMul, UInt<1>("h00")) @[multiplier.scala 116:29]
    node T_204 = and(T_201, T_203) @[multiplier.scala 116:26]
    when T_204 : @[multiplier.scala 116:37]
      node T_206 = eq(count, UInt<7>("h040")) @[multiplier.scala 117:17]
      when T_206 : @[multiplier.scala 117:24]
        node T_207 = mux(neg_out, UInt<3>("h04"), UInt<3>("h05")) @[multiplier.scala 118:41]
        node T_208 = mux(isHi, UInt<3>("h03"), T_207) @[multiplier.scala 118:19]
        state <= T_208 @[multiplier.scala 118:13]
        skip @[multiplier.scala 117:24]
      node T_210 = add(count, UInt<1>("h01")) @[multiplier.scala 120:20]
      node T_211 = tail(T_210, 1) @[multiplier.scala 120:20]
      count <= T_211 @[multiplier.scala 120:11]
      node T_212 = bits(remainder, 127, 64) @[multiplier.scala 122:41]
      node T_213 = bits(subtractor, 63, 0) @[multiplier.scala 122:62]
      node T_214 = mux(less, T_212, T_213) @[multiplier.scala 122:25]
      node T_215 = bits(remainder, 63, 0) @[multiplier.scala 122:81]
      node T_217 = eq(less, UInt<1>("h00")) @[multiplier.scala 122:90]
      node T_218 = cat(T_214, T_215) @[Cat.scala 20:58]
      node T_219 = cat(T_218, T_217) @[Cat.scala 20:58]
      remainder <= T_219 @[multiplier.scala 122:15]
      node T_220 = bits(divisor, 63, 0) @[multiplier.scala 124:34]
      node T_221 = bits(T_220, 63, 32) @[CircuitMath.scala 26:17]
      node T_222 = bits(T_220, 31, 0) @[CircuitMath.scala 27:17]
      node T_224 = neq(T_221, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_225 = bits(T_221, 31, 16) @[CircuitMath.scala 26:17]
      node T_226 = bits(T_221, 15, 0) @[CircuitMath.scala 27:17]
      node T_228 = neq(T_225, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_229 = bits(T_225, 15, 8) @[CircuitMath.scala 26:17]
      node T_230 = bits(T_225, 7, 0) @[CircuitMath.scala 27:17]
      node T_232 = neq(T_229, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_233 = bits(T_229, 7, 4) @[CircuitMath.scala 26:17]
      node T_234 = bits(T_229, 3, 0) @[CircuitMath.scala 27:17]
      node T_236 = neq(T_233, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_237 = bits(T_233, 3, 3) @[CircuitMath.scala 23:12]
      node T_239 = bits(T_233, 2, 2) @[CircuitMath.scala 23:12]
      node T_241 = bits(T_233, 1, 1) @[CircuitMath.scala 21:8]
      node T_242 = shl(T_241, 0) @[CircuitMath.scala 23:10]
      node T_243 = mux(T_239, UInt<2>("h02"), T_242) @[CircuitMath.scala 23:10]
      node T_244 = mux(T_237, UInt<2>("h03"), T_243) @[CircuitMath.scala 23:10]
      node T_245 = bits(T_234, 3, 3) @[CircuitMath.scala 23:12]
      node T_247 = bits(T_234, 2, 2) @[CircuitMath.scala 23:12]
      node T_249 = bits(T_234, 1, 1) @[CircuitMath.scala 21:8]
      node T_250 = shl(T_249, 0) @[CircuitMath.scala 23:10]
      node T_251 = mux(T_247, UInt<2>("h02"), T_250) @[CircuitMath.scala 23:10]
      node T_252 = mux(T_245, UInt<2>("h03"), T_251) @[CircuitMath.scala 23:10]
      node T_253 = mux(T_236, T_244, T_252) @[CircuitMath.scala 29:21]
      node T_254 = cat(T_236, T_253) @[Cat.scala 20:58]
      node T_255 = bits(T_230, 7, 4) @[CircuitMath.scala 26:17]
      node T_256 = bits(T_230, 3, 0) @[CircuitMath.scala 27:17]
      node T_258 = neq(T_255, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_259 = bits(T_255, 3, 3) @[CircuitMath.scala 23:12]
      node T_261 = bits(T_255, 2, 2) @[CircuitMath.scala 23:12]
      node T_263 = bits(T_255, 1, 1) @[CircuitMath.scala 21:8]
      node T_264 = shl(T_263, 0) @[CircuitMath.scala 23:10]
      node T_265 = mux(T_261, UInt<2>("h02"), T_264) @[CircuitMath.scala 23:10]
      node T_266 = mux(T_259, UInt<2>("h03"), T_265) @[CircuitMath.scala 23:10]
      node T_267 = bits(T_256, 3, 3) @[CircuitMath.scala 23:12]
      node T_269 = bits(T_256, 2, 2) @[CircuitMath.scala 23:12]
      node T_271 = bits(T_256, 1, 1) @[CircuitMath.scala 21:8]
      node T_272 = shl(T_271, 0) @[CircuitMath.scala 23:10]
      node T_273 = mux(T_269, UInt<2>("h02"), T_272) @[CircuitMath.scala 23:10]
      node T_274 = mux(T_267, UInt<2>("h03"), T_273) @[CircuitMath.scala 23:10]
      node T_275 = mux(T_258, T_266, T_274) @[CircuitMath.scala 29:21]
      node T_276 = cat(T_258, T_275) @[Cat.scala 20:58]
      node T_277 = mux(T_232, T_254, T_276) @[CircuitMath.scala 29:21]
      node T_278 = cat(T_232, T_277) @[Cat.scala 20:58]
      node T_279 = bits(T_226, 15, 8) @[CircuitMath.scala 26:17]
      node T_280 = bits(T_226, 7, 0) @[CircuitMath.scala 27:17]
      node T_282 = neq(T_279, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_283 = bits(T_279, 7, 4) @[CircuitMath.scala 26:17]
      node T_284 = bits(T_279, 3, 0) @[CircuitMath.scala 27:17]
      node T_286 = neq(T_283, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_287 = bits(T_283, 3, 3) @[CircuitMath.scala 23:12]
      node T_289 = bits(T_283, 2, 2) @[CircuitMath.scala 23:12]
      node T_291 = bits(T_283, 1, 1) @[CircuitMath.scala 21:8]
      node T_292 = shl(T_291, 0) @[CircuitMath.scala 23:10]
      node T_293 = mux(T_289, UInt<2>("h02"), T_292) @[CircuitMath.scala 23:10]
      node T_294 = mux(T_287, UInt<2>("h03"), T_293) @[CircuitMath.scala 23:10]
      node T_295 = bits(T_284, 3, 3) @[CircuitMath.scala 23:12]
      node T_297 = bits(T_284, 2, 2) @[CircuitMath.scala 23:12]
      node T_299 = bits(T_284, 1, 1) @[CircuitMath.scala 21:8]
      node T_300 = shl(T_299, 0) @[CircuitMath.scala 23:10]
      node T_301 = mux(T_297, UInt<2>("h02"), T_300) @[CircuitMath.scala 23:10]
      node T_302 = mux(T_295, UInt<2>("h03"), T_301) @[CircuitMath.scala 23:10]
      node T_303 = mux(T_286, T_294, T_302) @[CircuitMath.scala 29:21]
      node T_304 = cat(T_286, T_303) @[Cat.scala 20:58]
      node T_305 = bits(T_280, 7, 4) @[CircuitMath.scala 26:17]
      node T_306 = bits(T_280, 3, 0) @[CircuitMath.scala 27:17]
      node T_308 = neq(T_305, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_309 = bits(T_305, 3, 3) @[CircuitMath.scala 23:12]
      node T_311 = bits(T_305, 2, 2) @[CircuitMath.scala 23:12]
      node T_313 = bits(T_305, 1, 1) @[CircuitMath.scala 21:8]
      node T_314 = shl(T_313, 0) @[CircuitMath.scala 23:10]
      node T_315 = mux(T_311, UInt<2>("h02"), T_314) @[CircuitMath.scala 23:10]
      node T_316 = mux(T_309, UInt<2>("h03"), T_315) @[CircuitMath.scala 23:10]
      node T_317 = bits(T_306, 3, 3) @[CircuitMath.scala 23:12]
      node T_319 = bits(T_306, 2, 2) @[CircuitMath.scala 23:12]
      node T_321 = bits(T_306, 1, 1) @[CircuitMath.scala 21:8]
      node T_322 = shl(T_321, 0) @[CircuitMath.scala 23:10]
      node T_323 = mux(T_319, UInt<2>("h02"), T_322) @[CircuitMath.scala 23:10]
      node T_324 = mux(T_317, UInt<2>("h03"), T_323) @[CircuitMath.scala 23:10]
      node T_325 = mux(T_308, T_316, T_324) @[CircuitMath.scala 29:21]
      node T_326 = cat(T_308, T_325) @[Cat.scala 20:58]
      node T_327 = mux(T_282, T_304, T_326) @[CircuitMath.scala 29:21]
      node T_328 = cat(T_282, T_327) @[Cat.scala 20:58]
      node T_329 = mux(T_228, T_278, T_328) @[CircuitMath.scala 29:21]
      node T_330 = cat(T_228, T_329) @[Cat.scala 20:58]
      node T_331 = bits(T_222, 31, 16) @[CircuitMath.scala 26:17]
      node T_332 = bits(T_222, 15, 0) @[CircuitMath.scala 27:17]
      node T_334 = neq(T_331, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_335 = bits(T_331, 15, 8) @[CircuitMath.scala 26:17]
      node T_336 = bits(T_331, 7, 0) @[CircuitMath.scala 27:17]
      node T_338 = neq(T_335, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_339 = bits(T_335, 7, 4) @[CircuitMath.scala 26:17]
      node T_340 = bits(T_335, 3, 0) @[CircuitMath.scala 27:17]
      node T_342 = neq(T_339, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_343 = bits(T_339, 3, 3) @[CircuitMath.scala 23:12]
      node T_345 = bits(T_339, 2, 2) @[CircuitMath.scala 23:12]
      node T_347 = bits(T_339, 1, 1) @[CircuitMath.scala 21:8]
      node T_348 = shl(T_347, 0) @[CircuitMath.scala 23:10]
      node T_349 = mux(T_345, UInt<2>("h02"), T_348) @[CircuitMath.scala 23:10]
      node T_350 = mux(T_343, UInt<2>("h03"), T_349) @[CircuitMath.scala 23:10]
      node T_351 = bits(T_340, 3, 3) @[CircuitMath.scala 23:12]
      node T_353 = bits(T_340, 2, 2) @[CircuitMath.scala 23:12]
      node T_355 = bits(T_340, 1, 1) @[CircuitMath.scala 21:8]
      node T_356 = shl(T_355, 0) @[CircuitMath.scala 23:10]
      node T_357 = mux(T_353, UInt<2>("h02"), T_356) @[CircuitMath.scala 23:10]
      node T_358 = mux(T_351, UInt<2>("h03"), T_357) @[CircuitMath.scala 23:10]
      node T_359 = mux(T_342, T_350, T_358) @[CircuitMath.scala 29:21]
      node T_360 = cat(T_342, T_359) @[Cat.scala 20:58]
      node T_361 = bits(T_336, 7, 4) @[CircuitMath.scala 26:17]
      node T_362 = bits(T_336, 3, 0) @[CircuitMath.scala 27:17]
      node T_364 = neq(T_361, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_365 = bits(T_361, 3, 3) @[CircuitMath.scala 23:12]
      node T_367 = bits(T_361, 2, 2) @[CircuitMath.scala 23:12]
      node T_369 = bits(T_361, 1, 1) @[CircuitMath.scala 21:8]
      node T_370 = shl(T_369, 0) @[CircuitMath.scala 23:10]
      node T_371 = mux(T_367, UInt<2>("h02"), T_370) @[CircuitMath.scala 23:10]
      node T_372 = mux(T_365, UInt<2>("h03"), T_371) @[CircuitMath.scala 23:10]
      node T_373 = bits(T_362, 3, 3) @[CircuitMath.scala 23:12]
      node T_375 = bits(T_362, 2, 2) @[CircuitMath.scala 23:12]
      node T_377 = bits(T_362, 1, 1) @[CircuitMath.scala 21:8]
      node T_378 = shl(T_377, 0) @[CircuitMath.scala 23:10]
      node T_379 = mux(T_375, UInt<2>("h02"), T_378) @[CircuitMath.scala 23:10]
      node T_380 = mux(T_373, UInt<2>("h03"), T_379) @[CircuitMath.scala 23:10]
      node T_381 = mux(T_364, T_372, T_380) @[CircuitMath.scala 29:21]
      node T_382 = cat(T_364, T_381) @[Cat.scala 20:58]
      node T_383 = mux(T_338, T_360, T_382) @[CircuitMath.scala 29:21]
      node T_384 = cat(T_338, T_383) @[Cat.scala 20:58]
      node T_385 = bits(T_332, 15, 8) @[CircuitMath.scala 26:17]
      node T_386 = bits(T_332, 7, 0) @[CircuitMath.scala 27:17]
      node T_388 = neq(T_385, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_389 = bits(T_385, 7, 4) @[CircuitMath.scala 26:17]
      node T_390 = bits(T_385, 3, 0) @[CircuitMath.scala 27:17]
      node T_392 = neq(T_389, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_393 = bits(T_389, 3, 3) @[CircuitMath.scala 23:12]
      node T_395 = bits(T_389, 2, 2) @[CircuitMath.scala 23:12]
      node T_397 = bits(T_389, 1, 1) @[CircuitMath.scala 21:8]
      node T_398 = shl(T_397, 0) @[CircuitMath.scala 23:10]
      node T_399 = mux(T_395, UInt<2>("h02"), T_398) @[CircuitMath.scala 23:10]
      node T_400 = mux(T_393, UInt<2>("h03"), T_399) @[CircuitMath.scala 23:10]
      node T_401 = bits(T_390, 3, 3) @[CircuitMath.scala 23:12]
      node T_403 = bits(T_390, 2, 2) @[CircuitMath.scala 23:12]
      node T_405 = bits(T_390, 1, 1) @[CircuitMath.scala 21:8]
      node T_406 = shl(T_405, 0) @[CircuitMath.scala 23:10]
      node T_407 = mux(T_403, UInt<2>("h02"), T_406) @[CircuitMath.scala 23:10]
      node T_408 = mux(T_401, UInt<2>("h03"), T_407) @[CircuitMath.scala 23:10]
      node T_409 = mux(T_392, T_400, T_408) @[CircuitMath.scala 29:21]
      node T_410 = cat(T_392, T_409) @[Cat.scala 20:58]
      node T_411 = bits(T_386, 7, 4) @[CircuitMath.scala 26:17]
      node T_412 = bits(T_386, 3, 0) @[CircuitMath.scala 27:17]
      node T_414 = neq(T_411, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_415 = bits(T_411, 3, 3) @[CircuitMath.scala 23:12]
      node T_417 = bits(T_411, 2, 2) @[CircuitMath.scala 23:12]
      node T_419 = bits(T_411, 1, 1) @[CircuitMath.scala 21:8]
      node T_420 = shl(T_419, 0) @[CircuitMath.scala 23:10]
      node T_421 = mux(T_417, UInt<2>("h02"), T_420) @[CircuitMath.scala 23:10]
      node T_422 = mux(T_415, UInt<2>("h03"), T_421) @[CircuitMath.scala 23:10]
      node T_423 = bits(T_412, 3, 3) @[CircuitMath.scala 23:12]
      node T_425 = bits(T_412, 2, 2) @[CircuitMath.scala 23:12]
      node T_427 = bits(T_412, 1, 1) @[CircuitMath.scala 21:8]
      node T_428 = shl(T_427, 0) @[CircuitMath.scala 23:10]
      node T_429 = mux(T_425, UInt<2>("h02"), T_428) @[CircuitMath.scala 23:10]
      node T_430 = mux(T_423, UInt<2>("h03"), T_429) @[CircuitMath.scala 23:10]
      node T_431 = mux(T_414, T_422, T_430) @[CircuitMath.scala 29:21]
      node T_432 = cat(T_414, T_431) @[Cat.scala 20:58]
      node T_433 = mux(T_388, T_410, T_432) @[CircuitMath.scala 29:21]
      node T_434 = cat(T_388, T_433) @[Cat.scala 20:58]
      node T_435 = mux(T_334, T_384, T_434) @[CircuitMath.scala 29:21]
      node T_436 = cat(T_334, T_435) @[Cat.scala 20:58]
      node T_437 = mux(T_224, T_330, T_436) @[CircuitMath.scala 29:21]
      node T_438 = cat(T_224, T_437) @[Cat.scala 20:58]
      node T_439 = bits(remainder, 63, 0) @[multiplier.scala 125:37]
      node T_440 = bits(T_439, 63, 32) @[CircuitMath.scala 26:17]
      node T_441 = bits(T_439, 31, 0) @[CircuitMath.scala 27:17]
      node T_443 = neq(T_440, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_444 = bits(T_440, 31, 16) @[CircuitMath.scala 26:17]
      node T_445 = bits(T_440, 15, 0) @[CircuitMath.scala 27:17]
      node T_447 = neq(T_444, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_448 = bits(T_444, 15, 8) @[CircuitMath.scala 26:17]
      node T_449 = bits(T_444, 7, 0) @[CircuitMath.scala 27:17]
      node T_451 = neq(T_448, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_452 = bits(T_448, 7, 4) @[CircuitMath.scala 26:17]
      node T_453 = bits(T_448, 3, 0) @[CircuitMath.scala 27:17]
      node T_455 = neq(T_452, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_456 = bits(T_452, 3, 3) @[CircuitMath.scala 23:12]
      node T_458 = bits(T_452, 2, 2) @[CircuitMath.scala 23:12]
      node T_460 = bits(T_452, 1, 1) @[CircuitMath.scala 21:8]
      node T_461 = shl(T_460, 0) @[CircuitMath.scala 23:10]
      node T_462 = mux(T_458, UInt<2>("h02"), T_461) @[CircuitMath.scala 23:10]
      node T_463 = mux(T_456, UInt<2>("h03"), T_462) @[CircuitMath.scala 23:10]
      node T_464 = bits(T_453, 3, 3) @[CircuitMath.scala 23:12]
      node T_466 = bits(T_453, 2, 2) @[CircuitMath.scala 23:12]
      node T_468 = bits(T_453, 1, 1) @[CircuitMath.scala 21:8]
      node T_469 = shl(T_468, 0) @[CircuitMath.scala 23:10]
      node T_470 = mux(T_466, UInt<2>("h02"), T_469) @[CircuitMath.scala 23:10]
      node T_471 = mux(T_464, UInt<2>("h03"), T_470) @[CircuitMath.scala 23:10]
      node T_472 = mux(T_455, T_463, T_471) @[CircuitMath.scala 29:21]
      node T_473 = cat(T_455, T_472) @[Cat.scala 20:58]
      node T_474 = bits(T_449, 7, 4) @[CircuitMath.scala 26:17]
      node T_475 = bits(T_449, 3, 0) @[CircuitMath.scala 27:17]
      node T_477 = neq(T_474, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_478 = bits(T_474, 3, 3) @[CircuitMath.scala 23:12]
      node T_480 = bits(T_474, 2, 2) @[CircuitMath.scala 23:12]
      node T_482 = bits(T_474, 1, 1) @[CircuitMath.scala 21:8]
      node T_483 = shl(T_482, 0) @[CircuitMath.scala 23:10]
      node T_484 = mux(T_480, UInt<2>("h02"), T_483) @[CircuitMath.scala 23:10]
      node T_485 = mux(T_478, UInt<2>("h03"), T_484) @[CircuitMath.scala 23:10]
      node T_486 = bits(T_475, 3, 3) @[CircuitMath.scala 23:12]
      node T_488 = bits(T_475, 2, 2) @[CircuitMath.scala 23:12]
      node T_490 = bits(T_475, 1, 1) @[CircuitMath.scala 21:8]
      node T_491 = shl(T_490, 0) @[CircuitMath.scala 23:10]
      node T_492 = mux(T_488, UInt<2>("h02"), T_491) @[CircuitMath.scala 23:10]
      node T_493 = mux(T_486, UInt<2>("h03"), T_492) @[CircuitMath.scala 23:10]
      node T_494 = mux(T_477, T_485, T_493) @[CircuitMath.scala 29:21]
      node T_495 = cat(T_477, T_494) @[Cat.scala 20:58]
      node T_496 = mux(T_451, T_473, T_495) @[CircuitMath.scala 29:21]
      node T_497 = cat(T_451, T_496) @[Cat.scala 20:58]
      node T_498 = bits(T_445, 15, 8) @[CircuitMath.scala 26:17]
      node T_499 = bits(T_445, 7, 0) @[CircuitMath.scala 27:17]
      node T_501 = neq(T_498, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_502 = bits(T_498, 7, 4) @[CircuitMath.scala 26:17]
      node T_503 = bits(T_498, 3, 0) @[CircuitMath.scala 27:17]
      node T_505 = neq(T_502, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_506 = bits(T_502, 3, 3) @[CircuitMath.scala 23:12]
      node T_508 = bits(T_502, 2, 2) @[CircuitMath.scala 23:12]
      node T_510 = bits(T_502, 1, 1) @[CircuitMath.scala 21:8]
      node T_511 = shl(T_510, 0) @[CircuitMath.scala 23:10]
      node T_512 = mux(T_508, UInt<2>("h02"), T_511) @[CircuitMath.scala 23:10]
      node T_513 = mux(T_506, UInt<2>("h03"), T_512) @[CircuitMath.scala 23:10]
      node T_514 = bits(T_503, 3, 3) @[CircuitMath.scala 23:12]
      node T_516 = bits(T_503, 2, 2) @[CircuitMath.scala 23:12]
      node T_518 = bits(T_503, 1, 1) @[CircuitMath.scala 21:8]
      node T_519 = shl(T_518, 0) @[CircuitMath.scala 23:10]
      node T_520 = mux(T_516, UInt<2>("h02"), T_519) @[CircuitMath.scala 23:10]
      node T_521 = mux(T_514, UInt<2>("h03"), T_520) @[CircuitMath.scala 23:10]
      node T_522 = mux(T_505, T_513, T_521) @[CircuitMath.scala 29:21]
      node T_523 = cat(T_505, T_522) @[Cat.scala 20:58]
      node T_524 = bits(T_499, 7, 4) @[CircuitMath.scala 26:17]
      node T_525 = bits(T_499, 3, 0) @[CircuitMath.scala 27:17]
      node T_527 = neq(T_524, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_528 = bits(T_524, 3, 3) @[CircuitMath.scala 23:12]
      node T_530 = bits(T_524, 2, 2) @[CircuitMath.scala 23:12]
      node T_532 = bits(T_524, 1, 1) @[CircuitMath.scala 21:8]
      node T_533 = shl(T_532, 0) @[CircuitMath.scala 23:10]
      node T_534 = mux(T_530, UInt<2>("h02"), T_533) @[CircuitMath.scala 23:10]
      node T_535 = mux(T_528, UInt<2>("h03"), T_534) @[CircuitMath.scala 23:10]
      node T_536 = bits(T_525, 3, 3) @[CircuitMath.scala 23:12]
      node T_538 = bits(T_525, 2, 2) @[CircuitMath.scala 23:12]
      node T_540 = bits(T_525, 1, 1) @[CircuitMath.scala 21:8]
      node T_541 = shl(T_540, 0) @[CircuitMath.scala 23:10]
      node T_542 = mux(T_538, UInt<2>("h02"), T_541) @[CircuitMath.scala 23:10]
      node T_543 = mux(T_536, UInt<2>("h03"), T_542) @[CircuitMath.scala 23:10]
      node T_544 = mux(T_527, T_535, T_543) @[CircuitMath.scala 29:21]
      node T_545 = cat(T_527, T_544) @[Cat.scala 20:58]
      node T_546 = mux(T_501, T_523, T_545) @[CircuitMath.scala 29:21]
      node T_547 = cat(T_501, T_546) @[Cat.scala 20:58]
      node T_548 = mux(T_447, T_497, T_547) @[CircuitMath.scala 29:21]
      node T_549 = cat(T_447, T_548) @[Cat.scala 20:58]
      node T_550 = bits(T_441, 31, 16) @[CircuitMath.scala 26:17]
      node T_551 = bits(T_441, 15, 0) @[CircuitMath.scala 27:17]
      node T_553 = neq(T_550, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_554 = bits(T_550, 15, 8) @[CircuitMath.scala 26:17]
      node T_555 = bits(T_550, 7, 0) @[CircuitMath.scala 27:17]
      node T_557 = neq(T_554, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_558 = bits(T_554, 7, 4) @[CircuitMath.scala 26:17]
      node T_559 = bits(T_554, 3, 0) @[CircuitMath.scala 27:17]
      node T_561 = neq(T_558, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_562 = bits(T_558, 3, 3) @[CircuitMath.scala 23:12]
      node T_564 = bits(T_558, 2, 2) @[CircuitMath.scala 23:12]
      node T_566 = bits(T_558, 1, 1) @[CircuitMath.scala 21:8]
      node T_567 = shl(T_566, 0) @[CircuitMath.scala 23:10]
      node T_568 = mux(T_564, UInt<2>("h02"), T_567) @[CircuitMath.scala 23:10]
      node T_569 = mux(T_562, UInt<2>("h03"), T_568) @[CircuitMath.scala 23:10]
      node T_570 = bits(T_559, 3, 3) @[CircuitMath.scala 23:12]
      node T_572 = bits(T_559, 2, 2) @[CircuitMath.scala 23:12]
      node T_574 = bits(T_559, 1, 1) @[CircuitMath.scala 21:8]
      node T_575 = shl(T_574, 0) @[CircuitMath.scala 23:10]
      node T_576 = mux(T_572, UInt<2>("h02"), T_575) @[CircuitMath.scala 23:10]
      node T_577 = mux(T_570, UInt<2>("h03"), T_576) @[CircuitMath.scala 23:10]
      node T_578 = mux(T_561, T_569, T_577) @[CircuitMath.scala 29:21]
      node T_579 = cat(T_561, T_578) @[Cat.scala 20:58]
      node T_580 = bits(T_555, 7, 4) @[CircuitMath.scala 26:17]
      node T_581 = bits(T_555, 3, 0) @[CircuitMath.scala 27:17]
      node T_583 = neq(T_580, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_584 = bits(T_580, 3, 3) @[CircuitMath.scala 23:12]
      node T_586 = bits(T_580, 2, 2) @[CircuitMath.scala 23:12]
      node T_588 = bits(T_580, 1, 1) @[CircuitMath.scala 21:8]
      node T_589 = shl(T_588, 0) @[CircuitMath.scala 23:10]
      node T_590 = mux(T_586, UInt<2>("h02"), T_589) @[CircuitMath.scala 23:10]
      node T_591 = mux(T_584, UInt<2>("h03"), T_590) @[CircuitMath.scala 23:10]
      node T_592 = bits(T_581, 3, 3) @[CircuitMath.scala 23:12]
      node T_594 = bits(T_581, 2, 2) @[CircuitMath.scala 23:12]
      node T_596 = bits(T_581, 1, 1) @[CircuitMath.scala 21:8]
      node T_597 = shl(T_596, 0) @[CircuitMath.scala 23:10]
      node T_598 = mux(T_594, UInt<2>("h02"), T_597) @[CircuitMath.scala 23:10]
      node T_599 = mux(T_592, UInt<2>("h03"), T_598) @[CircuitMath.scala 23:10]
      node T_600 = mux(T_583, T_591, T_599) @[CircuitMath.scala 29:21]
      node T_601 = cat(T_583, T_600) @[Cat.scala 20:58]
      node T_602 = mux(T_557, T_579, T_601) @[CircuitMath.scala 29:21]
      node T_603 = cat(T_557, T_602) @[Cat.scala 20:58]
      node T_604 = bits(T_551, 15, 8) @[CircuitMath.scala 26:17]
      node T_605 = bits(T_551, 7, 0) @[CircuitMath.scala 27:17]
      node T_607 = neq(T_604, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_608 = bits(T_604, 7, 4) @[CircuitMath.scala 26:17]
      node T_609 = bits(T_604, 3, 0) @[CircuitMath.scala 27:17]
      node T_611 = neq(T_608, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_612 = bits(T_608, 3, 3) @[CircuitMath.scala 23:12]
      node T_614 = bits(T_608, 2, 2) @[CircuitMath.scala 23:12]
      node T_616 = bits(T_608, 1, 1) @[CircuitMath.scala 21:8]
      node T_617 = shl(T_616, 0) @[CircuitMath.scala 23:10]
      node T_618 = mux(T_614, UInt<2>("h02"), T_617) @[CircuitMath.scala 23:10]
      node T_619 = mux(T_612, UInt<2>("h03"), T_618) @[CircuitMath.scala 23:10]
      node T_620 = bits(T_609, 3, 3) @[CircuitMath.scala 23:12]
      node T_622 = bits(T_609, 2, 2) @[CircuitMath.scala 23:12]
      node T_624 = bits(T_609, 1, 1) @[CircuitMath.scala 21:8]
      node T_625 = shl(T_624, 0) @[CircuitMath.scala 23:10]
      node T_626 = mux(T_622, UInt<2>("h02"), T_625) @[CircuitMath.scala 23:10]
      node T_627 = mux(T_620, UInt<2>("h03"), T_626) @[CircuitMath.scala 23:10]
      node T_628 = mux(T_611, T_619, T_627) @[CircuitMath.scala 29:21]
      node T_629 = cat(T_611, T_628) @[Cat.scala 20:58]
      node T_630 = bits(T_605, 7, 4) @[CircuitMath.scala 26:17]
      node T_631 = bits(T_605, 3, 0) @[CircuitMath.scala 27:17]
      node T_633 = neq(T_630, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_634 = bits(T_630, 3, 3) @[CircuitMath.scala 23:12]
      node T_636 = bits(T_630, 2, 2) @[CircuitMath.scala 23:12]
      node T_638 = bits(T_630, 1, 1) @[CircuitMath.scala 21:8]
      node T_639 = shl(T_638, 0) @[CircuitMath.scala 23:10]
      node T_640 = mux(T_636, UInt<2>("h02"), T_639) @[CircuitMath.scala 23:10]
      node T_641 = mux(T_634, UInt<2>("h03"), T_640) @[CircuitMath.scala 23:10]
      node T_642 = bits(T_631, 3, 3) @[CircuitMath.scala 23:12]
      node T_644 = bits(T_631, 2, 2) @[CircuitMath.scala 23:12]
      node T_646 = bits(T_631, 1, 1) @[CircuitMath.scala 21:8]
      node T_647 = shl(T_646, 0) @[CircuitMath.scala 23:10]
      node T_648 = mux(T_644, UInt<2>("h02"), T_647) @[CircuitMath.scala 23:10]
      node T_649 = mux(T_642, UInt<2>("h03"), T_648) @[CircuitMath.scala 23:10]
      node T_650 = mux(T_633, T_641, T_649) @[CircuitMath.scala 29:21]
      node T_651 = cat(T_633, T_650) @[Cat.scala 20:58]
      node T_652 = mux(T_607, T_629, T_651) @[CircuitMath.scala 29:21]
      node T_653 = cat(T_607, T_652) @[Cat.scala 20:58]
      node T_654 = mux(T_553, T_603, T_653) @[CircuitMath.scala 29:21]
      node T_655 = cat(T_553, T_654) @[Cat.scala 20:58]
      node T_656 = mux(T_443, T_549, T_655) @[CircuitMath.scala 29:21]
      node T_657 = cat(T_443, T_656) @[Cat.scala 20:58]
      node T_659 = add(UInt<6>("h03f"), T_438) @[multiplier.scala 126:29]
      node T_660 = tail(T_659, 1) @[multiplier.scala 126:29]
      node T_661 = sub(T_660, T_657) @[multiplier.scala 126:42]
      node T_662 = tail(T_661, 1) @[multiplier.scala 126:42]
      node T_663 = gt(T_438, T_657) @[multiplier.scala 127:31]
      node T_665 = eq(count, UInt<1>("h00")) @[multiplier.scala 128:22]
      node T_666 = and(T_665, less) @[multiplier.scala 128:28]
      node T_668 = gt(T_662, UInt<1>("h00")) @[multiplier.scala 128:65]
      node T_669 = or(T_668, T_663) @[multiplier.scala 128:69]
      node T_670 = and(T_666, T_669) @[multiplier.scala 128:53]
      node T_672 = and(UInt<1>("h01"), T_670) @[multiplier.scala 129:33]
      when T_672 : @[multiplier.scala 129:42]
        node T_674 = bits(T_662, 5, 0) @[multiplier.scala 130:51]
        node T_675 = mux(T_663, UInt<6>("h03f"), T_674) @[multiplier.scala 130:22]
        node T_676 = bits(remainder, 63, 0) @[multiplier.scala 131:29]
        node T_677 = dshl(T_676, T_675) @[multiplier.scala 131:37]
        remainder <= T_677 @[multiplier.scala 131:17]
        count <= T_675 @[multiplier.scala 132:13]
        skip @[multiplier.scala 129:42]
      node T_679 = eq(count, UInt<1>("h00")) @[multiplier.scala 134:17]
      node T_681 = eq(less, UInt<1>("h00")) @[multiplier.scala 134:26]
      node T_682 = and(T_679, T_681) @[multiplier.scala 134:23]
      node T_684 = eq(isHi, UInt<1>("h00")) @[multiplier.scala 134:48]
      node T_685 = and(T_682, T_684) @[multiplier.scala 134:45]
      when T_685 : @[multiplier.scala 134:55]
        neg_out <= UInt<1>("h00") @[multiplier.scala 134:65]
        skip @[multiplier.scala 134:55]
      skip @[multiplier.scala 116:37]
    node T_687 = and(io.resp.ready, io.resp.valid) @[Decoupled.scala 21:42]
    node T_688 = or(T_687, io.kill) @[multiplier.scala 136:24]
    when T_688 : @[multiplier.scala 136:36]
      state <= UInt<3>("h00") @[multiplier.scala 137:11]
      skip @[multiplier.scala 136:36]
    node T_689 = and(io.req.ready, io.req.valid) @[Decoupled.scala 21:42]
    when T_689 : @[multiplier.scala 139:24]
      node T_691 = eq(cmdMul, UInt<1>("h00")) @[multiplier.scala 140:42]
      node T_692 = and(rhs_sign, T_691) @[multiplier.scala 140:39]
      node T_693 = or(lhs_sign, T_692) @[multiplier.scala 140:27]
      node T_694 = mux(T_693, UInt<3>("h01"), UInt<3>("h02")) @[multiplier.scala 140:17]
      state <= T_694 @[multiplier.scala 140:11]
      isMul <= cmdMul @[multiplier.scala 141:11]
      isHi <= cmdHi @[multiplier.scala 142:10]
      count <= UInt<1>("h00") @[multiplier.scala 143:11]
      node T_697 = eq(cmdMul, UInt<1>("h00")) @[multiplier.scala 144:16]
      node T_698 = neq(lhs_sign, rhs_sign) @[multiplier.scala 144:57]
      node T_699 = mux(cmdHi, lhs_sign, T_698) @[multiplier.scala 144:30]
      node T_700 = and(T_697, T_699) @[multiplier.scala 144:24]
      neg_out <= T_700 @[multiplier.scala 144:13]
      node T_701 = cat(rhs_sign, rhs_in) @[Cat.scala 20:58]
      divisor <= T_701 @[multiplier.scala 145:13]
      remainder <= lhs_in @[multiplier.scala 146:15]
      req <- io.req.bits @[multiplier.scala 147:9]
      skip @[multiplier.scala 139:24]
    io.resp.bits <- req @[multiplier.scala 150:16]
    node T_703 = eq(req.dw, UInt<1>("h00")) @[multiplier.scala 64:62]
    node T_704 = and(UInt<1>("h01"), T_703) @[multiplier.scala 64:52]
    node T_705 = bits(remainder, 31, 31) @[multiplier.scala 151:67]
    node T_706 = bits(T_705, 0, 0) @[Bitwise.scala 33:15]
    node T_709 = mux(T_706, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node T_710 = bits(remainder, 31, 0) @[multiplier.scala 151:86]
    node T_711 = cat(T_709, T_710) @[Cat.scala 20:58]
    node T_712 = bits(remainder, 63, 0) @[multiplier.scala 151:107]
    node T_713 = mux(T_704, T_711, T_712) @[multiplier.scala 151:27]
    io.resp.bits.data <= T_713 @[multiplier.scala 151:21]
    node T_714 = eq(state, UInt<3>("h05")) @[multiplier.scala 152:26]
    io.resp.valid <= T_714 @[multiplier.scala 152:17]
    node T_715 = eq(state, UInt<3>("h00")) @[multiplier.scala 153:25]
    io.req.ready <= T_715 @[multiplier.scala 153:16]
    
  module Rocket : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip interrupts : {debug : UInt<1>, mtip : UInt<1>, msip : UInt<1>, meip : UInt<1>, seip : UInt<1>}, flip hartid : UInt<64>, imem : {req : {valid : UInt<1>, bits : {pc : UInt<40>, speculative : UInt<1>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {btb : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<40>, data : UInt<32>, mask : UInt<2>, xcpt_if : UInt<1>, replay : UInt<1>}}, btb_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}}, bht_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, taken : UInt<1>, mispredict : UInt<1>}}, ras_update : {valid : UInt<1>, bits : {isCall : UInt<1>, isReturn : UInt<1>, returnAddr : UInt<39>, prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}}}, flush_icache : UInt<1>, flush_tlb : UInt<1>, flip npc : UInt<40>}, dmem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, flip ptw : {flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}, flip fpu : {flip inst : UInt<32>, flip fromint_data : UInt<64>, flip fcsr_rm : UInt<3>, fcsr_flags : {valid : UInt<1>, bits : UInt<5>}, store_data : UInt<64>, toint_data : UInt<64>, flip dmem_resp_val : UInt<1>, flip dmem_resp_type : UInt<3>, flip dmem_resp_tag : UInt<5>, flip dmem_resp_data : UInt<64>, flip valid : UInt<1>, fcsr_rdy : UInt<1>, nack_mem : UInt<1>, illegal_rm : UInt<1>, flip killx : UInt<1>, flip killm : UInt<1>, dec : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, sboard_set : UInt<1>, sboard_clr : UInt<1>, sboard_clra : UInt<5>, flip cp_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, cp_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}, flip rocc : {flip cmd : {flip ready : UInt<1>, valid : UInt<1>, bits : {inst : {funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, data : UInt<64>}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, busy : UInt<1>, interrupt : UInt<1>, autl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, utl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}[0], fpu_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, flip fpu_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}, flip exception : UInt<1>}}
    
    io is invalid
    reg ex_ctrl : {legal : UInt<1>, fp : UInt<1>, rocc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, rxs2 : UInt<1>, rxs1 : UInt<1>, sel_alu2 : UInt<2>, sel_alu1 : UInt<2>, sel_imm : UInt<3>, alu_dw : UInt<1>, alu_fn : UInt<4>, mem : UInt<1>, mem_cmd : UInt<5>, mem_type : UInt<3>, rfs1 : UInt<1>, rfs2 : UInt<1>, rfs3 : UInt<1>, wfd : UInt<1>, div : UInt<1>, wxd : UInt<1>, csr : UInt<3>, fence_i : UInt<1>, fence : UInt<1>, amo : UInt<1>, dp : UInt<1>}, clk
    reg mem_ctrl : {legal : UInt<1>, fp : UInt<1>, rocc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, rxs2 : UInt<1>, rxs1 : UInt<1>, sel_alu2 : UInt<2>, sel_alu1 : UInt<2>, sel_imm : UInt<3>, alu_dw : UInt<1>, alu_fn : UInt<4>, mem : UInt<1>, mem_cmd : UInt<5>, mem_type : UInt<3>, rfs1 : UInt<1>, rfs2 : UInt<1>, rfs3 : UInt<1>, wfd : UInt<1>, div : UInt<1>, wxd : UInt<1>, csr : UInt<3>, fence_i : UInt<1>, fence : UInt<1>, amo : UInt<1>, dp : UInt<1>}, clk
    reg wb_ctrl : {legal : UInt<1>, fp : UInt<1>, rocc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, rxs2 : UInt<1>, rxs1 : UInt<1>, sel_alu2 : UInt<2>, sel_alu1 : UInt<2>, sel_imm : UInt<3>, alu_dw : UInt<1>, alu_fn : UInt<4>, mem : UInt<1>, mem_cmd : UInt<5>, mem_type : UInt<3>, rfs1 : UInt<1>, rfs2 : UInt<1>, rfs3 : UInt<1>, wfd : UInt<1>, div : UInt<1>, wxd : UInt<1>, csr : UInt<3>, fence_i : UInt<1>, fence : UInt<1>, amo : UInt<1>, dp : UInt<1>}, clk
    reg ex_reg_xcpt_interrupt : UInt<1>, clk
    reg ex_reg_valid : UInt<1>, clk
    reg ex_reg_rvc : UInt<1>, clk
    reg ex_reg_btb_hit : UInt<1>, clk
    reg ex_reg_btb_resp : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, clk
    reg ex_reg_xcpt : UInt<1>, clk
    reg ex_reg_flush_pipe : UInt<1>, clk
    reg ex_reg_load_use : UInt<1>, clk
    reg ex_reg_cause : UInt, clk
    reg ex_reg_replay : UInt<1>, clk
    reg ex_reg_pc : UInt, clk
    reg ex_reg_inst : UInt, clk
    reg mem_reg_xcpt_interrupt : UInt<1>, clk
    reg mem_reg_valid : UInt<1>, clk
    reg mem_reg_rvc : UInt<1>, clk
    reg mem_reg_btb_hit : UInt<1>, clk
    reg mem_reg_btb_resp : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, clk
    reg mem_reg_xcpt : UInt<1>, clk
    reg mem_reg_replay : UInt<1>, clk
    reg mem_reg_flush_pipe : UInt<1>, clk
    reg mem_reg_cause : UInt, clk
    reg mem_reg_slow_bypass : UInt<1>, clk
    reg mem_reg_load : UInt<1>, clk
    reg mem_reg_store : UInt<1>, clk
    reg mem_reg_pc : UInt, clk
    reg mem_reg_inst : UInt, clk
    reg mem_reg_wdata : UInt, clk
    reg mem_reg_rs2 : UInt, clk
    wire take_pc_mem : UInt<1> @[rocket.scala 200:25]
    take_pc_mem is invalid @[rocket.scala 200:25]
    reg wb_reg_valid : UInt<1>, clk
    reg wb_reg_xcpt : UInt<1>, clk
    reg wb_reg_replay : UInt<1>, clk
    reg wb_reg_cause : UInt, clk
    reg wb_reg_pc : UInt, clk
    reg wb_reg_inst : UInt, clk
    reg wb_reg_wdata : UInt, clk
    reg wb_reg_rs2 : UInt, clk
    wire take_pc_wb : UInt<1> @[rocket.scala 210:24]
    take_pc_wb is invalid @[rocket.scala 210:24]
    wire take_pc_id : UInt<1> @[rocket.scala 212:24]
    take_pc_id is invalid @[rocket.scala 212:24]
    node take_pc_mem_wb = or(take_pc_wb, take_pc_mem) @[rocket.scala 213:35]
    node take_pc = or(take_pc_mem_wb, take_pc_id) @[rocket.scala 214:32]
    inst ibuf of IBuf @[rocket.scala 217:20]
    ibuf.io is invalid
    ibuf.clk <= clk
    ibuf.reset <= reset
    ibuf.io.imem <- io.imem.resp @[rocket.scala 220:16]
    ibuf.io.kill <= take_pc @[rocket.scala 221:16]
    wire id_ctrl : {legal : UInt<1>, fp : UInt<1>, rocc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, rxs2 : UInt<1>, rxs1 : UInt<1>, sel_alu2 : UInt<2>, sel_alu1 : UInt<2>, sel_imm : UInt<3>, alu_dw : UInt<1>, alu_fn : UInt<4>, mem : UInt<1>, mem_cmd : UInt<5>, mem_type : UInt<3>, rfs1 : UInt<1>, rfs2 : UInt<1>, rfs3 : UInt<1>, wfd : UInt<1>, div : UInt<1>, wxd : UInt<1>, csr : UInt<3>, fence_i : UInt<1>, fence : UInt<1>, amo : UInt<1>, dp : UInt<1>} @[rocket.scala 224:21]
    id_ctrl is invalid @[rocket.scala 224:21]
    node T_6663 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0207f")) @[decode.scala 13:65]
    node T_6665 = eq(T_6663, UInt<32>("h03")) @[decode.scala 13:121]
    node T_6667 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0106f")) @[decode.scala 13:65]
    node T_6669 = eq(T_6667, UInt<32>("h03")) @[decode.scala 13:121]
    node T_6671 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0607f")) @[decode.scala 13:65]
    node T_6673 = eq(T_6671, UInt<32>("h0f")) @[decode.scala 13:121]
    node T_6675 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07077")) @[decode.scala 13:65]
    node T_6677 = eq(T_6675, UInt<32>("h013")) @[decode.scala 13:121]
    node T_6679 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h05f")) @[decode.scala 13:65]
    node T_6681 = eq(T_6679, UInt<32>("h017")) @[decode.scala 13:121]
    node T_6683 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fc00007f")) @[decode.scala 13:65]
    node T_6685 = eq(T_6683, UInt<32>("h033")) @[decode.scala 13:121]
    node T_6687 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0be007077")) @[decode.scala 13:65]
    node T_6689 = eq(T_6687, UInt<32>("h033")) @[decode.scala 13:121]
    node T_6691 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04000073")) @[decode.scala 13:65]
    node T_6693 = eq(T_6691, UInt<32>("h043")) @[decode.scala 13:121]
    node T_6695 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0e400007f")) @[decode.scala 13:65]
    node T_6697 = eq(T_6695, UInt<32>("h053")) @[decode.scala 13:121]
    node T_6699 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0707b")) @[decode.scala 13:65]
    node T_6701 = eq(T_6699, UInt<32>("h063")) @[decode.scala 13:121]
    node T_6703 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07f")) @[decode.scala 13:65]
    node T_6705 = eq(T_6703, UInt<32>("h06f")) @[decode.scala 13:121]
    node T_6707 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0ffefffff")) @[decode.scala 13:65]
    node T_6709 = eq(T_6707, UInt<32>("h073")) @[decode.scala 13:121]
    node T_6711 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fc00305f")) @[decode.scala 13:65]
    node T_6713 = eq(T_6711, UInt<32>("h01013")) @[decode.scala 13:121]
    node T_6715 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fe00305f")) @[decode.scala 13:65]
    node T_6717 = eq(T_6715, UInt<32>("h0101b")) @[decode.scala 13:121]
    node T_6719 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0605b")) @[decode.scala 13:65]
    node T_6721 = eq(T_6719, UInt<32>("h02003")) @[decode.scala 13:121]
    node T_6723 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0207f")) @[decode.scala 13:65]
    node T_6725 = eq(T_6723, UInt<32>("h02013")) @[decode.scala 13:121]
    node T_6727 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01800607f")) @[decode.scala 13:65]
    node T_6729 = eq(T_6727, UInt<32>("h0202f")) @[decode.scala 13:121]
    node T_6731 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0207f")) @[decode.scala 13:65]
    node T_6733 = eq(T_6731, UInt<32>("h02073")) @[decode.scala 13:121]
    node T_6735 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0bc00707f")) @[decode.scala 13:65]
    node T_6737 = eq(T_6735, UInt<32>("h05013")) @[decode.scala 13:121]
    node T_6739 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0be00705f")) @[decode.scala 13:65]
    node T_6741 = eq(T_6739, UInt<32>("h0501b")) @[decode.scala 13:121]
    node T_6743 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0be007077")) @[decode.scala 13:65]
    node T_6745 = eq(T_6743, UInt<32>("h05033")) @[decode.scala 13:121]
    node T_6747 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fe004077")) @[decode.scala 13:65]
    node T_6749 = eq(T_6747, UInt<32>("h02004033")) @[decode.scala 13:121]
    node T_6751 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0e800607f")) @[decode.scala 13:65]
    node T_6753 = eq(T_6751, UInt<32>("h0800202f")) @[decode.scala 13:121]
    node T_6755 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0f9f0607f")) @[decode.scala 13:65]
    node T_6757 = eq(T_6755, UInt<32>("h01000202f")) @[decode.scala 13:121]
    node T_6759 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0dfffffff")) @[decode.scala 13:65]
    node T_6761 = eq(T_6759, UInt<32>("h010200073")) @[decode.scala 13:121]
    node T_6763 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fff07fff")) @[decode.scala 13:65]
    node T_6765 = eq(T_6763, UInt<32>("h010400073")) @[decode.scala 13:121]
    node T_6767 = eq(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010500073")) @[decode.scala 13:121]
    node T_6769 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0f400607f")) @[decode.scala 13:65]
    node T_6771 = eq(T_6769, UInt<32>("h020000053")) @[decode.scala 13:121]
    node T_6773 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07c00607f")) @[decode.scala 13:65]
    node T_6775 = eq(T_6773, UInt<32>("h020000053")) @[decode.scala 13:121]
    node T_6777 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07c00507f")) @[decode.scala 13:65]
    node T_6779 = eq(T_6777, UInt<32>("h020000053")) @[decode.scala 13:121]
    node T_6781 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07ff0007f")) @[decode.scala 13:65]
    node T_6783 = eq(T_6781, UInt<32>("h040100053")) @[decode.scala 13:121]
    node T_6785 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07ff0007f")) @[decode.scala 13:65]
    node T_6787 = eq(T_6785, UInt<32>("h042000053")) @[decode.scala 13:121]
    node T_6789 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fdf0007f")) @[decode.scala 13:65]
    node T_6791 = eq(T_6789, UInt<32>("h058000053")) @[decode.scala 13:121]
    node T_6793 = eq(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07b200073")) @[decode.scala 13:121]
    node T_6795 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0edc0007f")) @[decode.scala 13:65]
    node T_6797 = eq(T_6795, UInt<32>("h0c0000053")) @[decode.scala 13:121]
    node T_6799 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fdf0607f")) @[decode.scala 13:65]
    node T_6801 = eq(T_6799, UInt<32>("h0e0000053")) @[decode.scala 13:121]
    node T_6803 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0edf0707f")) @[decode.scala 13:65]
    node T_6805 = eq(T_6803, UInt<32>("h0e0000053")) @[decode.scala 13:121]
    node T_6807 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0603f")) @[decode.scala 13:65]
    node T_6809 = eq(T_6807, UInt<32>("h023")) @[decode.scala 13:121]
    node T_6811 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0306f")) @[decode.scala 13:65]
    node T_6813 = eq(T_6811, UInt<32>("h01063")) @[decode.scala 13:121]
    node T_6815 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0407f")) @[decode.scala 13:65]
    node T_6817 = eq(T_6815, UInt<32>("h04063")) @[decode.scala 13:121]
    node T_6819 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fc007077")) @[decode.scala 13:65]
    node T_6821 = eq(T_6819, UInt<32>("h033")) @[decode.scala 13:121]
    node T_6823 = or(UInt<1>("h00"), T_6665) @[decode.scala 14:30]
    node T_6824 = or(T_6823, T_6669) @[decode.scala 14:30]
    node T_6825 = or(T_6824, T_6673) @[decode.scala 14:30]
    node T_6826 = or(T_6825, T_6677) @[decode.scala 14:30]
    node T_6827 = or(T_6826, T_6681) @[decode.scala 14:30]
    node T_6828 = or(T_6827, T_6685) @[decode.scala 14:30]
    node T_6829 = or(T_6828, T_6689) @[decode.scala 14:30]
    node T_6830 = or(T_6829, T_6693) @[decode.scala 14:30]
    node T_6831 = or(T_6830, T_6697) @[decode.scala 14:30]
    node T_6832 = or(T_6831, T_6701) @[decode.scala 14:30]
    node T_6833 = or(T_6832, T_6705) @[decode.scala 14:30]
    node T_6834 = or(T_6833, T_6709) @[decode.scala 14:30]
    node T_6835 = or(T_6834, T_6713) @[decode.scala 14:30]
    node T_6836 = or(T_6835, T_6717) @[decode.scala 14:30]
    node T_6837 = or(T_6836, T_6721) @[decode.scala 14:30]
    node T_6838 = or(T_6837, T_6725) @[decode.scala 14:30]
    node T_6839 = or(T_6838, T_6729) @[decode.scala 14:30]
    node T_6840 = or(T_6839, T_6733) @[decode.scala 14:30]
    node T_6841 = or(T_6840, T_6737) @[decode.scala 14:30]
    node T_6842 = or(T_6841, T_6741) @[decode.scala 14:30]
    node T_6843 = or(T_6842, T_6745) @[decode.scala 14:30]
    node T_6844 = or(T_6843, T_6749) @[decode.scala 14:30]
    node T_6845 = or(T_6844, T_6753) @[decode.scala 14:30]
    node T_6846 = or(T_6845, T_6757) @[decode.scala 14:30]
    node T_6847 = or(T_6846, T_6761) @[decode.scala 14:30]
    node T_6848 = or(T_6847, T_6765) @[decode.scala 14:30]
    node T_6849 = or(T_6848, T_6767) @[decode.scala 14:30]
    node T_6850 = or(T_6849, T_6771) @[decode.scala 14:30]
    node T_6851 = or(T_6850, T_6775) @[decode.scala 14:30]
    node T_6852 = or(T_6851, T_6779) @[decode.scala 14:30]
    node T_6853 = or(T_6852, T_6783) @[decode.scala 14:30]
    node T_6854 = or(T_6853, T_6787) @[decode.scala 14:30]
    node T_6855 = or(T_6854, T_6791) @[decode.scala 14:30]
    node T_6856 = or(T_6855, T_6793) @[decode.scala 14:30]
    node T_6857 = or(T_6856, T_6797) @[decode.scala 14:30]
    node T_6858 = or(T_6857, T_6801) @[decode.scala 14:30]
    node T_6859 = or(T_6858, T_6805) @[decode.scala 14:30]
    node T_6860 = or(T_6859, T_6809) @[decode.scala 14:30]
    node T_6861 = or(T_6860, T_6813) @[decode.scala 14:30]
    node T_6862 = or(T_6861, T_6817) @[decode.scala 14:30]
    node T_6863 = or(T_6862, T_6821) @[decode.scala 14:30]
    node T_6865 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h05c")) @[decode.scala 13:65]
    node T_6867 = eq(T_6865, UInt<32>("h04")) @[decode.scala 13:121]
    node T_6869 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h060")) @[decode.scala 13:65]
    node T_6871 = eq(T_6869, UInt<32>("h040")) @[decode.scala 13:121]
    node T_6873 = or(UInt<1>("h00"), T_6867) @[decode.scala 14:30]
    node T_6874 = or(T_6873, T_6871) @[decode.scala 14:30]
    node T_6877 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h074")) @[decode.scala 13:65]
    node T_6879 = eq(T_6877, UInt<32>("h060")) @[decode.scala 13:121]
    node T_6881 = or(UInt<1>("h00"), T_6879) @[decode.scala 14:30]
    node T_6883 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h068")) @[decode.scala 13:65]
    node T_6885 = eq(T_6883, UInt<32>("h068")) @[decode.scala 13:121]
    node T_6887 = or(UInt<1>("h00"), T_6885) @[decode.scala 14:30]
    node T_6889 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0203c")) @[decode.scala 13:65]
    node T_6891 = eq(T_6889, UInt<32>("h024")) @[decode.scala 13:121]
    node T_6893 = or(UInt<1>("h00"), T_6891) @[decode.scala 14:30]
    node T_6895 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h064")) @[decode.scala 13:65]
    node T_6897 = eq(T_6895, UInt<32>("h020")) @[decode.scala 13:121]
    node T_6899 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h034")) @[decode.scala 13:65]
    node T_6901 = eq(T_6899, UInt<32>("h020")) @[decode.scala 13:121]
    node T_6903 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02048")) @[decode.scala 13:65]
    node T_6905 = eq(T_6903, UInt<32>("h02008")) @[decode.scala 13:121]
    node T_6907 = or(UInt<1>("h00"), T_6897) @[decode.scala 14:30]
    node T_6908 = or(T_6907, T_6901) @[decode.scala 14:30]
    node T_6909 = or(T_6908, T_6905) @[decode.scala 14:30]
    node T_6911 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h044")) @[decode.scala 13:65]
    node T_6913 = eq(T_6911, UInt<32>("h00")) @[decode.scala 13:121]
    node T_6915 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04024")) @[decode.scala 13:65]
    node T_6917 = eq(T_6915, UInt<32>("h020")) @[decode.scala 13:121]
    node T_6919 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h038")) @[decode.scala 13:65]
    node T_6921 = eq(T_6919, UInt<32>("h020")) @[decode.scala 13:121]
    node T_6923 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02050")) @[decode.scala 13:65]
    node T_6925 = eq(T_6923, UInt<32>("h02000")) @[decode.scala 13:121]
    node T_6927 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h090000034")) @[decode.scala 13:65]
    node T_6929 = eq(T_6927, UInt<32>("h090000010")) @[decode.scala 13:121]
    node T_6931 = or(UInt<1>("h00"), T_6913) @[decode.scala 14:30]
    node T_6932 = or(T_6931, T_6917) @[decode.scala 14:30]
    node T_6933 = or(T_6932, T_6921) @[decode.scala 14:30]
    node T_6934 = or(T_6933, T_6925) @[decode.scala 14:30]
    node T_6935 = or(T_6934, T_6929) @[decode.scala 14:30]
    node T_6937 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h058")) @[decode.scala 13:65]
    node T_6939 = eq(T_6937, UInt<32>("h00")) @[decode.scala 13:121]
    node T_6941 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h020")) @[decode.scala 13:65]
    node T_6943 = eq(T_6941, UInt<32>("h00")) @[decode.scala 13:121]
    node T_6945 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0c")) @[decode.scala 13:65]
    node T_6947 = eq(T_6945, UInt<32>("h04")) @[decode.scala 13:121]
    node T_6949 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h048")) @[decode.scala 13:65]
    node T_6951 = eq(T_6949, UInt<32>("h048")) @[decode.scala 13:121]
    node T_6953 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04050")) @[decode.scala 13:65]
    node T_6955 = eq(T_6953, UInt<32>("h04050")) @[decode.scala 13:121]
    node T_6957 = or(UInt<1>("h00"), T_6939) @[decode.scala 14:30]
    node T_6958 = or(T_6957, T_6943) @[decode.scala 14:30]
    node T_6959 = or(T_6958, T_6947) @[decode.scala 14:30]
    node T_6960 = or(T_6959, T_6951) @[decode.scala 14:30]
    node T_6961 = or(T_6960, T_6955) @[decode.scala 14:30]
    node T_6963 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h048")) @[decode.scala 13:65]
    node T_6965 = eq(T_6963, UInt<32>("h00")) @[decode.scala 13:121]
    node T_6967 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h018")) @[decode.scala 13:65]
    node T_6969 = eq(T_6967, UInt<32>("h00")) @[decode.scala 13:121]
    node T_6971 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04008")) @[decode.scala 13:65]
    node T_6973 = eq(T_6971, UInt<32>("h04000")) @[decode.scala 13:121]
    node T_6975 = or(UInt<1>("h00"), T_6965) @[decode.scala 14:30]
    node T_6976 = or(T_6975, T_6913) @[decode.scala 14:30]
    node T_6977 = or(T_6976, T_6969) @[decode.scala 14:30]
    node T_6978 = or(T_6977, T_6973) @[decode.scala 14:30]
    node T_6979 = cat(T_6978, T_6961) @[Cat.scala 20:58]
    node T_6981 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04004")) @[decode.scala 13:65]
    node T_6983 = eq(T_6981, UInt<32>("h00")) @[decode.scala 13:121]
    node T_6985 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h050")) @[decode.scala 13:65]
    node T_6987 = eq(T_6985, UInt<32>("h00")) @[decode.scala 13:121]
    node T_6989 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h024")) @[decode.scala 13:65]
    node T_6991 = eq(T_6989, UInt<32>("h00")) @[decode.scala 13:121]
    node T_6993 = or(UInt<1>("h00"), T_6983) @[decode.scala 14:30]
    node T_6994 = or(T_6993, T_6987) @[decode.scala 14:30]
    node T_6995 = or(T_6994, T_6913) @[decode.scala 14:30]
    node T_6996 = or(T_6995, T_6991) @[decode.scala 14:30]
    node T_6997 = or(T_6996, T_6969) @[decode.scala 14:30]
    node T_6999 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h034")) @[decode.scala 13:65]
    node T_7001 = eq(T_6999, UInt<32>("h014")) @[decode.scala 13:121]
    node T_7003 = or(UInt<1>("h00"), T_7001) @[decode.scala 14:30]
    node T_7004 = or(T_7003, T_6951) @[decode.scala 14:30]
    node T_7005 = cat(T_7004, T_6997) @[Cat.scala 20:58]
    node T_7007 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h018")) @[decode.scala 13:65]
    node T_7009 = eq(T_7007, UInt<32>("h08")) @[decode.scala 13:121]
    node T_7011 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h044")) @[decode.scala 13:65]
    node T_7013 = eq(T_7011, UInt<32>("h040")) @[decode.scala 13:121]
    node T_7015 = or(UInt<1>("h00"), T_7009) @[decode.scala 14:30]
    node T_7016 = or(T_7015, T_7013) @[decode.scala 14:30]
    node T_7018 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h014")) @[decode.scala 13:65]
    node T_7020 = eq(T_7018, UInt<32>("h014")) @[decode.scala 13:121]
    node T_7022 = or(UInt<1>("h00"), T_7009) @[decode.scala 14:30]
    node T_7023 = or(T_7022, T_7020) @[decode.scala 14:30]
    node T_7025 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h030")) @[decode.scala 13:65]
    node T_7027 = eq(T_7025, UInt<32>("h00")) @[decode.scala 13:121]
    node T_7029 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0201c")) @[decode.scala 13:65]
    node T_7031 = eq(T_7029, UInt<32>("h04")) @[decode.scala 13:121]
    node T_7033 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h014")) @[decode.scala 13:65]
    node T_7035 = eq(T_7033, UInt<32>("h010")) @[decode.scala 13:121]
    node T_7037 = or(UInt<1>("h00"), T_7027) @[decode.scala 14:30]
    node T_7038 = or(T_7037, T_7031) @[decode.scala 14:30]
    node T_7039 = or(T_7038, T_7035) @[decode.scala 14:30]
    node T_7040 = cat(T_7039, T_7023) @[Cat.scala 20:58]
    node T_7041 = cat(T_7040, T_7016) @[Cat.scala 20:58]
    node T_7043 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010")) @[decode.scala 13:65]
    node T_7045 = eq(T_7043, UInt<32>("h00")) @[decode.scala 13:121]
    node T_7047 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h08")) @[decode.scala 13:65]
    node T_7049 = eq(T_7047, UInt<32>("h00")) @[decode.scala 13:121]
    node T_7051 = or(UInt<1>("h00"), T_7045) @[decode.scala 14:30]
    node T_7052 = or(T_7051, T_7049) @[decode.scala 14:30]
    node T_7054 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03054")) @[decode.scala 13:65]
    node T_7056 = eq(T_7054, UInt<32>("h01010")) @[decode.scala 13:121]
    node T_7058 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01058")) @[decode.scala 13:65]
    node T_7060 = eq(T_7058, UInt<32>("h01040")) @[decode.scala 13:121]
    node T_7062 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07044")) @[decode.scala 13:65]
    node T_7064 = eq(T_7062, UInt<32>("h07000")) @[decode.scala 13:121]
    node T_7066 = or(UInt<1>("h00"), T_7056) @[decode.scala 14:30]
    node T_7067 = or(T_7066, T_7060) @[decode.scala 14:30]
    node T_7068 = or(T_7067, T_7064) @[decode.scala 14:30]
    node T_7070 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04054")) @[decode.scala 13:65]
    node T_7072 = eq(T_7070, UInt<32>("h040")) @[decode.scala 13:121]
    node T_7074 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02058")) @[decode.scala 13:65]
    node T_7076 = eq(T_7074, UInt<32>("h02040")) @[decode.scala 13:121]
    node T_7078 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03054")) @[decode.scala 13:65]
    node T_7080 = eq(T_7078, UInt<32>("h03010")) @[decode.scala 13:121]
    node T_7082 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h06054")) @[decode.scala 13:65]
    node T_7084 = eq(T_7082, UInt<32>("h06010")) @[decode.scala 13:121]
    node T_7086 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040003034")) @[decode.scala 13:65]
    node T_7088 = eq(T_7086, UInt<32>("h040000030")) @[decode.scala 13:121]
    node T_7090 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040001054")) @[decode.scala 13:65]
    node T_7092 = eq(T_7090, UInt<32>("h040001010")) @[decode.scala 13:121]
    node T_7094 = or(UInt<1>("h00"), T_7072) @[decode.scala 14:30]
    node T_7095 = or(T_7094, T_7076) @[decode.scala 14:30]
    node T_7096 = or(T_7095, T_7080) @[decode.scala 14:30]
    node T_7097 = or(T_7096, T_7084) @[decode.scala 14:30]
    node T_7098 = or(T_7097, T_7088) @[decode.scala 14:30]
    node T_7099 = or(T_7098, T_7092) @[decode.scala 14:30]
    node T_7101 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02054")) @[decode.scala 13:65]
    node T_7103 = eq(T_7101, UInt<32>("h02010")) @[decode.scala 13:121]
    node T_7105 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040004054")) @[decode.scala 13:65]
    node T_7107 = eq(T_7105, UInt<32>("h04010")) @[decode.scala 13:121]
    node T_7109 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h05054")) @[decode.scala 13:65]
    node T_7111 = eq(T_7109, UInt<32>("h04010")) @[decode.scala 13:121]
    node T_7113 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04058")) @[decode.scala 13:65]
    node T_7115 = eq(T_7113, UInt<32>("h04040")) @[decode.scala 13:121]
    node T_7117 = or(UInt<1>("h00"), T_7103) @[decode.scala 14:30]
    node T_7118 = or(T_7117, T_7107) @[decode.scala 14:30]
    node T_7119 = or(T_7118, T_7111) @[decode.scala 14:30]
    node T_7120 = or(T_7119, T_7115) @[decode.scala 14:30]
    node T_7122 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h06054")) @[decode.scala 13:65]
    node T_7124 = eq(T_7122, UInt<32>("h02010")) @[decode.scala 13:121]
    node T_7126 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040003054")) @[decode.scala 13:65]
    node T_7128 = eq(T_7126, UInt<32>("h040001010")) @[decode.scala 13:121]
    node T_7130 = or(UInt<1>("h00"), T_7124) @[decode.scala 14:30]
    node T_7131 = or(T_7130, T_7115) @[decode.scala 14:30]
    node T_7132 = or(T_7131, T_7088) @[decode.scala 14:30]
    node T_7133 = or(T_7132, T_7128) @[decode.scala 14:30]
    node T_7134 = cat(T_7099, T_7068) @[Cat.scala 20:58]
    node T_7135 = cat(T_7133, T_7120) @[Cat.scala 20:58]
    node T_7136 = cat(T_7135, T_7134) @[Cat.scala 20:58]
    node T_7138 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0405f")) @[decode.scala 13:65]
    node T_7140 = eq(T_7138, UInt<32>("h03")) @[decode.scala 13:121]
    node T_7142 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0107f")) @[decode.scala 13:65]
    node T_7144 = eq(T_7142, UInt<32>("h03")) @[decode.scala 13:121]
    node T_7146 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0707f")) @[decode.scala 13:65]
    node T_7148 = eq(T_7146, UInt<32>("h0100f")) @[decode.scala 13:121]
    node T_7150 = or(UInt<1>("h00"), T_7140) @[decode.scala 14:30]
    node T_7151 = or(T_7150, T_6665) @[decode.scala 14:30]
    node T_7152 = or(T_7151, T_7144) @[decode.scala 14:30]
    node T_7153 = or(T_7152, T_7148) @[decode.scala 14:30]
    node T_7154 = or(T_7153, T_6721) @[decode.scala 14:30]
    node T_7155 = or(T_7154, T_6729) @[decode.scala 14:30]
    node T_7156 = or(T_7155, T_6753) @[decode.scala 14:30]
    node T_7157 = or(T_7156, T_6757) @[decode.scala 14:30]
    node T_7159 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02008")) @[decode.scala 13:65]
    node T_7161 = eq(T_7159, UInt<32>("h08")) @[decode.scala 13:121]
    node T_7163 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h028")) @[decode.scala 13:65]
    node T_7165 = eq(T_7163, UInt<32>("h020")) @[decode.scala 13:121]
    node T_7167 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h018000020")) @[decode.scala 13:65]
    node T_7169 = eq(T_7167, UInt<32>("h018000020")) @[decode.scala 13:121]
    node T_7171 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h020000020")) @[decode.scala 13:65]
    node T_7173 = eq(T_7171, UInt<32>("h020000020")) @[decode.scala 13:121]
    node T_7175 = or(UInt<1>("h00"), T_7161) @[decode.scala 14:30]
    node T_7176 = or(T_7175, T_7165) @[decode.scala 14:30]
    node T_7177 = or(T_7176, T_7169) @[decode.scala 14:30]
    node T_7178 = or(T_7177, T_7173) @[decode.scala 14:30]
    node T_7180 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010002008")) @[decode.scala 13:65]
    node T_7182 = eq(T_7180, UInt<32>("h010002008")) @[decode.scala 13:121]
    node T_7184 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040002008")) @[decode.scala 13:65]
    node T_7186 = eq(T_7184, UInt<32>("h040002008")) @[decode.scala 13:121]
    node T_7188 = or(UInt<1>("h00"), T_7182) @[decode.scala 14:30]
    node T_7189 = or(T_7188, T_7186) @[decode.scala 14:30]
    node T_7191 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h08000008")) @[decode.scala 13:65]
    node T_7193 = eq(T_7191, UInt<32>("h08000008")) @[decode.scala 13:121]
    node T_7195 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010000008")) @[decode.scala 13:65]
    node T_7197 = eq(T_7195, UInt<32>("h010000008")) @[decode.scala 13:121]
    node T_7199 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h080000008")) @[decode.scala 13:65]
    node T_7201 = eq(T_7199, UInt<32>("h080000008")) @[decode.scala 13:121]
    node T_7203 = or(UInt<1>("h00"), T_7161) @[decode.scala 14:30]
    node T_7204 = or(T_7203, T_7193) @[decode.scala 14:30]
    node T_7205 = or(T_7204, T_7197) @[decode.scala 14:30]
    node T_7206 = or(T_7205, T_7201) @[decode.scala 14:30]
    node T_7208 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h018002008")) @[decode.scala 13:65]
    node T_7210 = eq(T_7208, UInt<32>("h02008")) @[decode.scala 13:121]
    node T_7212 = or(UInt<1>("h00"), T_7210) @[decode.scala 14:30]
    node T_7214 = cat(T_7189, T_7178) @[Cat.scala 20:58]
    node T_7215 = cat(UInt<1>("h00"), T_7212) @[Cat.scala 20:58]
    node T_7216 = cat(T_7215, T_7206) @[Cat.scala 20:58]
    node T_7217 = cat(T_7216, T_7214) @[Cat.scala 20:58]
    node T_7219 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01000")) @[decode.scala 13:65]
    node T_7221 = eq(T_7219, UInt<32>("h01000")) @[decode.scala 13:121]
    node T_7223 = or(UInt<1>("h00"), T_7221) @[decode.scala 14:30]
    node T_7225 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02000")) @[decode.scala 13:65]
    node T_7227 = eq(T_7225, UInt<32>("h02000")) @[decode.scala 13:121]
    node T_7229 = or(UInt<1>("h00"), T_7227) @[decode.scala 14:30]
    node T_7231 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04000")) @[decode.scala 13:65]
    node T_7233 = eq(T_7231, UInt<32>("h04000")) @[decode.scala 13:121]
    node T_7235 = or(UInt<1>("h00"), T_7233) @[decode.scala 14:30]
    node T_7236 = cat(T_7235, T_7229) @[Cat.scala 20:58]
    node T_7237 = cat(T_7236, T_7223) @[Cat.scala 20:58]
    node T_7239 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h080000060")) @[decode.scala 13:65]
    node T_7241 = eq(T_7239, UInt<32>("h040")) @[decode.scala 13:121]
    node T_7243 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010000060")) @[decode.scala 13:65]
    node T_7245 = eq(T_7243, UInt<32>("h040")) @[decode.scala 13:121]
    node T_7247 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h070")) @[decode.scala 13:65]
    node T_7249 = eq(T_7247, UInt<32>("h040")) @[decode.scala 13:121]
    node T_7251 = or(UInt<1>("h00"), T_7241) @[decode.scala 14:30]
    node T_7252 = or(T_7251, T_7245) @[decode.scala 14:30]
    node T_7253 = or(T_7252, T_7249) @[decode.scala 14:30]
    node T_7255 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07c")) @[decode.scala 13:65]
    node T_7257 = eq(T_7255, UInt<32>("h024")) @[decode.scala 13:121]
    node T_7259 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040000060")) @[decode.scala 13:65]
    node T_7261 = eq(T_7259, UInt<32>("h040")) @[decode.scala 13:121]
    node T_7263 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h090000060")) @[decode.scala 13:65]
    node T_7265 = eq(T_7263, UInt<32>("h010000040")) @[decode.scala 13:121]
    node T_7267 = or(UInt<1>("h00"), T_7257) @[decode.scala 14:30]
    node T_7268 = or(T_7267, T_7261) @[decode.scala 14:30]
    node T_7269 = or(T_7268, T_7249) @[decode.scala 14:30]
    node T_7270 = or(T_7269, T_7265) @[decode.scala 14:30]
    node T_7272 = or(UInt<1>("h00"), T_7249) @[decode.scala 14:30]
    node T_7274 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03c")) @[decode.scala 13:65]
    node T_7276 = eq(T_7274, UInt<32>("h04")) @[decode.scala 13:121]
    node T_7278 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010000060")) @[decode.scala 13:65]
    node T_7280 = eq(T_7278, UInt<32>("h010000040")) @[decode.scala 13:121]
    node T_7282 = or(UInt<1>("h00"), T_7276) @[decode.scala 14:30]
    node T_7283 = or(T_7282, T_7241) @[decode.scala 14:30]
    node T_7284 = or(T_7283, T_7249) @[decode.scala 14:30]
    node T_7285 = or(T_7284, T_7280) @[decode.scala 14:30]
    node T_7287 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02000074")) @[decode.scala 13:65]
    node T_7289 = eq(T_7287, UInt<32>("h02000030")) @[decode.scala 13:121]
    node T_7291 = or(UInt<1>("h00"), T_7289) @[decode.scala 14:30]
    node T_7293 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h064")) @[decode.scala 13:65]
    node T_7295 = eq(T_7293, UInt<32>("h00")) @[decode.scala 13:121]
    node T_7297 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h050")) @[decode.scala 13:65]
    node T_7299 = eq(T_7297, UInt<32>("h010")) @[decode.scala 13:121]
    node T_7301 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02024")) @[decode.scala 13:65]
    node T_7303 = eq(T_7301, UInt<32>("h024")) @[decode.scala 13:121]
    node T_7305 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h028")) @[decode.scala 13:65]
    node T_7307 = eq(T_7305, UInt<32>("h028")) @[decode.scala 13:121]
    node T_7309 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01030")) @[decode.scala 13:65]
    node T_7311 = eq(T_7309, UInt<32>("h01030")) @[decode.scala 13:121]
    node T_7313 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02030")) @[decode.scala 13:65]
    node T_7315 = eq(T_7313, UInt<32>("h02030")) @[decode.scala 13:121]
    node T_7317 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h090000010")) @[decode.scala 13:65]
    node T_7319 = eq(T_7317, UInt<32>("h080000010")) @[decode.scala 13:121]
    node T_7321 = or(UInt<1>("h00"), T_7295) @[decode.scala 14:30]
    node T_7322 = or(T_7321, T_7299) @[decode.scala 14:30]
    node T_7323 = or(T_7322, T_7303) @[decode.scala 14:30]
    node T_7324 = or(T_7323, T_7307) @[decode.scala 14:30]
    node T_7325 = or(T_7324, T_7311) @[decode.scala 14:30]
    node T_7326 = or(T_7325, T_7315) @[decode.scala 14:30]
    node T_7327 = or(T_7326, T_7319) @[decode.scala 14:30]
    node T_7329 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01070")) @[decode.scala 13:65]
    node T_7331 = eq(T_7329, UInt<32>("h01070")) @[decode.scala 13:121]
    node T_7333 = or(UInt<1>("h00"), T_7331) @[decode.scala 14:30]
    node T_7335 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02070")) @[decode.scala 13:65]
    node T_7337 = eq(T_7335, UInt<32>("h02070")) @[decode.scala 13:121]
    node T_7339 = or(UInt<1>("h00"), T_7337) @[decode.scala 14:30]
    node T_7341 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03070")) @[decode.scala 13:65]
    node T_7343 = eq(T_7341, UInt<32>("h070")) @[decode.scala 13:121]
    node T_7345 = or(UInt<1>("h00"), T_7343) @[decode.scala 14:30]
    node T_7346 = cat(T_7345, T_7339) @[Cat.scala 20:58]
    node T_7347 = cat(T_7346, T_7333) @[Cat.scala 20:58]
    node T_7349 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03058")) @[decode.scala 13:65]
    node T_7351 = eq(T_7349, UInt<32>("h01008")) @[decode.scala 13:121]
    node T_7353 = or(UInt<1>("h00"), T_7351) @[decode.scala 14:30]
    node T_7355 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03058")) @[decode.scala 13:65]
    node T_7357 = eq(T_7355, UInt<32>("h08")) @[decode.scala 13:121]
    node T_7359 = or(UInt<1>("h00"), T_7357) @[decode.scala 14:30]
    node T_7361 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h06048")) @[decode.scala 13:65]
    node T_7363 = eq(T_7361, UInt<32>("h02008")) @[decode.scala 13:121]
    node T_7365 = or(UInt<1>("h00"), T_7363) @[decode.scala 14:30]
    node T_7367 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0105c")) @[decode.scala 13:65]
    node T_7369 = eq(T_7367, UInt<32>("h01004")) @[decode.scala 13:121]
    node T_7371 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02000060")) @[decode.scala 13:65]
    node T_7373 = eq(T_7371, UInt<32>("h02000040")) @[decode.scala 13:121]
    node T_7375 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0d0000070")) @[decode.scala 13:65]
    node T_7377 = eq(T_7375, UInt<32>("h040000050")) @[decode.scala 13:121]
    node T_7379 = or(UInt<1>("h00"), T_7369) @[decode.scala 14:30]
    node T_7380 = or(T_7379, T_7373) @[decode.scala 14:30]
    node T_7381 = or(T_7380, T_7377) @[decode.scala 14:30]
    id_ctrl.legal <= T_6863 @[idecode.scala 62:42]
    id_ctrl.fp <= T_6874 @[idecode.scala 62:42]
    id_ctrl.rocc <= UInt<1>("h00") @[idecode.scala 62:42]
    id_ctrl.branch <= T_6881 @[idecode.scala 62:42]
    id_ctrl.jal <= T_6887 @[idecode.scala 62:42]
    id_ctrl.jalr <= T_6893 @[idecode.scala 62:42]
    id_ctrl.rxs2 <= T_6909 @[idecode.scala 62:42]
    id_ctrl.rxs1 <= T_6935 @[idecode.scala 62:42]
    id_ctrl.sel_alu2 <= T_6979 @[idecode.scala 62:42]
    id_ctrl.sel_alu1 <= T_7005 @[idecode.scala 62:42]
    id_ctrl.sel_imm <= T_7041 @[idecode.scala 62:42]
    id_ctrl.alu_dw <= T_7052 @[idecode.scala 62:42]
    id_ctrl.alu_fn <= T_7136 @[idecode.scala 62:42]
    id_ctrl.mem <= T_7157 @[idecode.scala 62:42]
    id_ctrl.mem_cmd <= T_7217 @[idecode.scala 62:42]
    id_ctrl.mem_type <= T_7237 @[idecode.scala 62:42]
    id_ctrl.rfs1 <= T_7253 @[idecode.scala 62:42]
    id_ctrl.rfs2 <= T_7270 @[idecode.scala 62:42]
    id_ctrl.rfs3 <= T_7272 @[idecode.scala 62:42]
    id_ctrl.wfd <= T_7285 @[idecode.scala 62:42]
    id_ctrl.div <= T_7291 @[idecode.scala 62:42]
    id_ctrl.wxd <= T_7327 @[idecode.scala 62:42]
    id_ctrl.csr <= T_7347 @[idecode.scala 62:42]
    id_ctrl.fence_i <= T_7353 @[idecode.scala 62:42]
    id_ctrl.fence <= T_7359 @[idecode.scala 62:42]
    id_ctrl.amo <= T_7365 @[idecode.scala 62:42]
    id_ctrl.dp <= T_7381 @[idecode.scala 62:42]
    wire id_load_use : UInt<1> @[rocket.scala 229:25]
    id_load_use is invalid @[rocket.scala 229:25]
    reg id_reg_fence : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    cmem T_7386 : UInt<64>[31] @[rocket.scala 104:23]
    wire id_rs_0 : UInt @[rocket.scala 110:26]
    id_rs_0 is invalid @[rocket.scala 110:26]
    node T_7390 = eq(ibuf.io.inst[0].bits.inst.rs1, UInt<1>("h00")) @[rocket.scala 111:45]
    node T_7391 = and(UInt<1>("h00"), T_7390) @[rocket.scala 111:37]
    node T_7393 = bits(ibuf.io.inst[0].bits.inst.rs1, 4, 0) @[rocket.scala 105:44]
    node T_7394 = not(T_7393) @[rocket.scala 105:39]
    infer mport T_7395 = T_7386[T_7394], clk
    node T_7396 = mux(T_7391, UInt<1>("h00"), T_7395) @[rocket.scala 111:25]
    id_rs_0 <= T_7396 @[rocket.scala 111:19]
    wire id_rs_1 : UInt @[rocket.scala 110:26]
    id_rs_1 is invalid @[rocket.scala 110:26]
    node T_7400 = eq(ibuf.io.inst[0].bits.inst.rs2, UInt<1>("h00")) @[rocket.scala 111:45]
    node T_7401 = and(UInt<1>("h00"), T_7400) @[rocket.scala 111:37]
    node T_7403 = bits(ibuf.io.inst[0].bits.inst.rs2, 4, 0) @[rocket.scala 105:44]
    node T_7404 = not(T_7403) @[rocket.scala 105:39]
    infer mport T_7405 = T_7386[T_7404], clk
    node T_7406 = mux(T_7401, UInt<1>("h00"), T_7405) @[rocket.scala 111:25]
    id_rs_1 <= T_7406 @[rocket.scala 111:19]
    wire ctrl_killd : UInt<1> @[rocket.scala 235:24]
    ctrl_killd is invalid @[rocket.scala 235:24]
    node T_7408 = asSInt(ibuf.io.pc) @[rocket.scala 236:28]
    node T_7409 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 126:24]
    node T_7411 = bits(ibuf.io.inst[0].bits.inst.bits, 31, 31) @[rocket.scala 126:48]
    node T_7412 = asSInt(T_7411) @[rocket.scala 126:53]
    node T_7413 = mux(T_7409, asSInt(UInt<1>("h00")), T_7412) @[rocket.scala 126:19]
    node T_7414 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 127:26]
    node T_7415 = bits(ibuf.io.inst[0].bits.inst.bits, 30, 20) @[rocket.scala 127:41]
    node T_7416 = asSInt(T_7415) @[rocket.scala 127:49]
    node T_7417 = mux(T_7414, T_7416, T_7413) @[rocket.scala 127:21]
    node T_7418 = neq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 128:26]
    node T_7419 = neq(UInt<3>("h03"), UInt<3>("h03")) @[rocket.scala 128:43]
    node T_7420 = and(T_7418, T_7419) @[rocket.scala 128:36]
    node T_7421 = bits(ibuf.io.inst[0].bits.inst.bits, 19, 12) @[rocket.scala 128:65]
    node T_7422 = asSInt(T_7421) @[rocket.scala 128:73]
    node T_7423 = mux(T_7420, T_7413, T_7422) @[rocket.scala 128:21]
    node T_7424 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 129:23]
    node T_7425 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 129:40]
    node T_7426 = or(T_7424, T_7425) @[rocket.scala 129:33]
    node T_7428 = eq(UInt<3>("h03"), UInt<3>("h03")) @[rocket.scala 130:23]
    node T_7429 = bits(ibuf.io.inst[0].bits.inst.bits, 20, 20) @[rocket.scala 130:39]
    node T_7430 = asSInt(T_7429) @[rocket.scala 130:44]
    node T_7431 = eq(UInt<3>("h03"), UInt<3>("h01")) @[rocket.scala 131:23]
    node T_7432 = bits(ibuf.io.inst[0].bits.inst.bits, 7, 7) @[rocket.scala 131:39]
    node T_7433 = asSInt(T_7432) @[rocket.scala 131:43]
    node T_7434 = mux(T_7431, T_7433, T_7413) @[rocket.scala 131:18]
    node T_7435 = mux(T_7428, T_7430, T_7434) @[rocket.scala 130:18]
    node T_7436 = mux(T_7426, asSInt(UInt<1>("h00")), T_7435) @[rocket.scala 129:18]
    node T_7437 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 132:25]
    node T_7438 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 132:42]
    node T_7439 = or(T_7437, T_7438) @[rocket.scala 132:35]
    node T_7441 = bits(ibuf.io.inst[0].bits.inst.bits, 30, 25) @[rocket.scala 132:66]
    node T_7442 = mux(T_7439, UInt<1>("h00"), T_7441) @[rocket.scala 132:20]
    node T_7443 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 133:24]
    node T_7445 = eq(UInt<3>("h03"), UInt<3>("h00")) @[rocket.scala 134:24]
    node T_7446 = eq(UInt<3>("h03"), UInt<3>("h01")) @[rocket.scala 134:41]
    node T_7447 = or(T_7445, T_7446) @[rocket.scala 134:34]
    node T_7448 = bits(ibuf.io.inst[0].bits.inst.bits, 11, 8) @[rocket.scala 134:57]
    node T_7449 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 135:24]
    node T_7450 = bits(ibuf.io.inst[0].bits.inst.bits, 19, 16) @[rocket.scala 135:39]
    node T_7451 = bits(ibuf.io.inst[0].bits.inst.bits, 24, 21) @[rocket.scala 135:52]
    node T_7452 = mux(T_7449, T_7450, T_7451) @[rocket.scala 135:19]
    node T_7453 = mux(T_7447, T_7448, T_7452) @[rocket.scala 134:19]
    node T_7454 = mux(T_7443, UInt<1>("h00"), T_7453) @[rocket.scala 133:19]
    node T_7455 = eq(UInt<3>("h03"), UInt<3>("h00")) @[rocket.scala 136:22]
    node T_7456 = bits(ibuf.io.inst[0].bits.inst.bits, 7, 7) @[rocket.scala 136:37]
    node T_7457 = eq(UInt<3>("h03"), UInt<3>("h04")) @[rocket.scala 137:22]
    node T_7458 = bits(ibuf.io.inst[0].bits.inst.bits, 20, 20) @[rocket.scala 137:37]
    node T_7459 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 138:22]
    node T_7460 = bits(ibuf.io.inst[0].bits.inst.bits, 15, 15) @[rocket.scala 138:37]
    node T_7462 = shl(T_7460, 0) @[rocket.scala 138:17]
    node T_7463 = mux(T_7459, T_7462, UInt<1>("h00")) @[rocket.scala 138:17]
    node T_7464 = shl(T_7458, 0) @[rocket.scala 137:17]
    node T_7465 = mux(T_7457, T_7464, T_7463) @[rocket.scala 137:17]
    node T_7466 = shl(T_7456, 0) @[rocket.scala 136:17]
    node T_7467 = mux(T_7455, T_7466, T_7465) @[rocket.scala 136:17]
    node T_7468 = cat(T_7442, T_7454) @[Cat.scala 20:58]
    node T_7469 = cat(T_7468, T_7467) @[Cat.scala 20:58]
    node T_7470 = asUInt(T_7436) @[Cat.scala 20:58]
    node T_7471 = asUInt(T_7423) @[Cat.scala 20:58]
    node T_7472 = cat(T_7471, T_7470) @[Cat.scala 20:58]
    node T_7473 = asUInt(T_7417) @[Cat.scala 20:58]
    node T_7474 = asUInt(T_7413) @[Cat.scala 20:58]
    node T_7475 = cat(T_7474, T_7473) @[Cat.scala 20:58]
    node T_7476 = cat(T_7475, T_7472) @[Cat.scala 20:58]
    node T_7477 = cat(T_7476, T_7469) @[Cat.scala 20:58]
    node T_7478 = asSInt(T_7477) @[rocket.scala 140:53]
    node T_7479 = add(T_7408, T_7478) @[rocket.scala 236:35]
    node T_7480 = tail(T_7479, 1) @[rocket.scala 236:35]
    node T_7481 = asSInt(T_7480) @[rocket.scala 236:35]
    node id_npc = asUInt(T_7481) @[rocket.scala 236:65]
    node T_7484 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 237:34]
    node T_7485 = and(UInt<1>("h00"), T_7484) @[rocket.scala 237:31]
    node T_7486 = and(T_7485, id_ctrl.jal) @[rocket.scala 237:46]
    take_pc_id <= T_7486 @[rocket.scala 237:14]
    inst csr of CSRFile @[rocket.scala 239:19]
    csr.io is invalid
    csr.clk <= clk
    csr.reset <= reset
    node id_csr_en = neq(id_ctrl.csr, UInt<3>("h00")) @[rocket.scala 240:31]
    node id_system_insn = eq(id_ctrl.csr, UInt<3>("h04")) @[rocket.scala 241:36]
    node T_7487 = eq(id_ctrl.csr, UInt<3>("h02")) @[rocket.scala 242:33]
    node T_7488 = eq(id_ctrl.csr, UInt<3>("h03")) @[rocket.scala 242:58]
    node T_7489 = or(T_7487, T_7488) @[rocket.scala 242:43]
    node T_7491 = eq(ibuf.io.inst[0].bits.inst.rs1, UInt<1>("h00")) @[rocket.scala 242:82]
    node id_csr_ren = and(T_7489, T_7491) @[rocket.scala 242:69]
    node id_csr = mux(id_csr_ren, UInt<3>("h05"), id_ctrl.csr) @[rocket.scala 243:19]
    node id_csr_addr = bits(ibuf.io.inst[0].bits.inst.bits, 31, 20) @[rocket.scala 244:31]
    node T_7493 = eq(id_csr_ren, UInt<1>("h00")) @[rocket.scala 248:54]
    node T_7494 = and(id_csr_en, T_7493) @[rocket.scala 248:51]
    node T_7624 = and(id_csr_addr, UInt<12>("h046")) @[decode.scala 13:65]
    node T_7626 = eq(T_7624, UInt<12>("h040")) @[decode.scala 13:121]
    node T_7628 = and(id_csr_addr, UInt<12>("h0244")) @[decode.scala 13:65]
    node T_7630 = eq(T_7628, UInt<12>("h0240")) @[decode.scala 13:121]
    node T_7632 = or(UInt<1>("h00"), T_7626) @[decode.scala 14:30]
    node T_7633 = or(T_7632, T_7630) @[decode.scala 14:30]
    node T_7634 = bits(T_7633, 0, 0) @[decode.scala 54:116]
    node T_7636 = eq(T_7634, UInt<1>("h00")) @[rocket.scala 248:69]
    node T_7637 = and(T_7494, T_7636) @[rocket.scala 248:66]
    node id_csr_flush = or(id_system_insn, T_7637) @[rocket.scala 248:37]
    node T_7639 = eq(id_ctrl.legal, UInt<1>("h00")) @[rocket.scala 250:25]
    node T_7640 = bits(csr.io.status.isa, 12, 12) @[rocket.scala 251:38]
    node T_7642 = eq(T_7640, UInt<1>("h00")) @[rocket.scala 251:20]
    node T_7643 = and(id_ctrl.div, T_7642) @[rocket.scala 251:17]
    node T_7644 = or(T_7639, T_7643) @[rocket.scala 250:40]
    node T_7645 = bits(csr.io.status.isa, 0, 0) @[rocket.scala 252:38]
    node T_7647 = eq(T_7645, UInt<1>("h00")) @[rocket.scala 252:20]
    node T_7648 = and(id_ctrl.amo, T_7647) @[rocket.scala 252:17]
    node T_7649 = or(T_7644, T_7648) @[rocket.scala 251:48]
    node T_7651 = neq(csr.io.status.fs, UInt<1>("h00")) @[rocket.scala 253:38]
    node T_7652 = bits(csr.io.status.isa, 5, 5) @[rocket.scala 253:62]
    node T_7653 = and(T_7651, T_7652) @[rocket.scala 253:42]
    node T_7655 = eq(T_7653, UInt<1>("h00")) @[rocket.scala 253:19]
    node T_7656 = and(id_ctrl.fp, T_7655) @[rocket.scala 253:16]
    node T_7657 = or(T_7649, T_7656) @[rocket.scala 252:48]
    node T_7658 = bits(csr.io.status.isa, 3, 3) @[rocket.scala 254:37]
    node T_7660 = eq(T_7658, UInt<1>("h00")) @[rocket.scala 254:19]
    node T_7661 = and(id_ctrl.dp, T_7660) @[rocket.scala 254:16]
    node T_7662 = or(T_7657, T_7661) @[rocket.scala 253:73]
    node T_7663 = bits(csr.io.status.isa, 2, 2) @[rocket.scala 255:51]
    node T_7665 = eq(T_7663, UInt<1>("h00")) @[rocket.scala 255:33]
    node T_7666 = and(ibuf.io.inst[0].bits.rvc, T_7665) @[rocket.scala 255:30]
    node T_7667 = or(T_7662, T_7666) @[rocket.scala 254:47]
    node T_7669 = neq(csr.io.status.xs, UInt<1>("h00")) @[rocket.scala 256:40]
    node T_7670 = bits(csr.io.status.isa, 23, 23) @[rocket.scala 256:64]
    node T_7671 = and(T_7669, T_7670) @[rocket.scala 256:44]
    node T_7673 = eq(T_7671, UInt<1>("h00")) @[rocket.scala 256:21]
    node T_7674 = and(id_ctrl.rocc, T_7673) @[rocket.scala 256:18]
    node id_illegal_insn = or(T_7667, T_7674) @[rocket.scala 255:61]
    node id_amo_aq = bits(ibuf.io.inst[0].bits.inst.bits, 26, 26) @[rocket.scala 258:29]
    node id_amo_rl = bits(ibuf.io.inst[0].bits.inst.bits, 25, 25) @[rocket.scala 259:29]
    node T_7675 = and(id_ctrl.amo, id_amo_rl) @[rocket.scala 260:52]
    node id_fence_next = or(id_ctrl.fence, T_7675) @[rocket.scala 260:37]
    node T_7677 = eq(io.dmem.ordered, UInt<1>("h00")) @[rocket.scala 261:21]
    node id_mem_busy = or(T_7677, io.dmem.req.valid) @[rocket.scala 261:38]
    node T_7679 = and(ex_reg_valid, ex_ctrl.rocc) @[rocket.scala 263:35]
    node T_7680 = or(io.rocc.busy, T_7679) @[rocket.scala 263:19]
    node T_7681 = and(mem_reg_valid, mem_ctrl.rocc) @[rocket.scala 264:20]
    node T_7682 = or(T_7680, T_7681) @[rocket.scala 263:51]
    node T_7683 = and(wb_reg_valid, wb_ctrl.rocc) @[rocket.scala 264:53]
    node T_7684 = or(T_7682, T_7683) @[rocket.scala 264:37]
    node id_rocc_busy = and(UInt<1>("h00"), T_7684) @[rocket.scala 262:38]
    node T_7685 = and(id_reg_fence, id_mem_busy) @[rocket.scala 265:49]
    node T_7686 = or(id_fence_next, T_7685) @[rocket.scala 265:33]
    id_reg_fence <= T_7686 @[rocket.scala 265:16]
    node T_7687 = and(id_rocc_busy, id_ctrl.fence) @[rocket.scala 266:34]
    node T_7688 = and(id_ctrl.amo, id_amo_aq) @[rocket.scala 267:33]
    node T_7689 = or(T_7688, id_ctrl.fence_i) @[rocket.scala 267:46]
    node T_7690 = or(id_ctrl.mem, id_ctrl.rocc) @[rocket.scala 267:97]
    node T_7691 = and(id_reg_fence, T_7690) @[rocket.scala 267:81]
    node T_7692 = or(T_7689, T_7691) @[rocket.scala 267:65]
    node T_7693 = or(T_7692, id_csr_en) @[rocket.scala 267:114]
    node T_7694 = and(id_mem_busy, T_7693) @[rocket.scala 267:17]
    node id_do_fence = or(T_7687, T_7694) @[rocket.scala 266:51]
    inst bpu of BreakpointUnit @[rocket.scala 269:19]
    bpu.io is invalid
    bpu.clk <= clk
    bpu.reset <= reset
    bpu.io.status <- csr.io.status @[rocket.scala 270:17]
    bpu.io.bp <= csr.io.bp @[rocket.scala 271:13]
    bpu.io.pc <= ibuf.io.pc @[rocket.scala 272:13]
    bpu.io.ea <= mem_reg_wdata @[rocket.scala 273:13]
    node id_xcpt_if = or(ibuf.io.inst[0].bits.pf0, ibuf.io.inst[0].bits.pf1) @[rocket.scala 275:45]
    node T_7699 = or(csr.io.interrupt, bpu.io.debug_if) @[rocket.scala 694:26]
    node T_7700 = or(T_7699, bpu.io.xcpt_if) @[rocket.scala 694:26]
    node T_7701 = or(T_7700, id_xcpt_if) @[rocket.scala 694:26]
    node id_xcpt = or(T_7701, id_illegal_insn) @[rocket.scala 694:26]
    node T_7702 = mux(id_xcpt_if, UInt<1>("h01"), UInt<2>("h02")) @[Mux.scala 31:69]
    node T_7703 = mux(bpu.io.xcpt_if, UInt<2>("h03"), T_7702) @[Mux.scala 31:69]
    node T_7704 = mux(bpu.io.debug_if, UInt<4>("h0d"), T_7703) @[Mux.scala 31:69]
    node id_cause = mux(csr.io.interrupt, csr.io.interrupt_cause, T_7704) @[Mux.scala 31:69]
    node ex_waddr = bits(ex_reg_inst, 11, 7) @[rocket.scala 289:29]
    node mem_waddr = bits(mem_reg_inst, 11, 7) @[rocket.scala 290:31]
    node wb_waddr = bits(wb_reg_inst, 11, 7) @[rocket.scala 291:29]
    node T_7708 = and(ex_reg_valid, ex_ctrl.wxd) @[rocket.scala 294:19]
    node T_7709 = and(mem_reg_valid, mem_ctrl.wxd) @[rocket.scala 295:20]
    node T_7711 = eq(mem_ctrl.mem, UInt<1>("h00")) @[rocket.scala 295:39]
    node T_7712 = and(T_7709, T_7711) @[rocket.scala 295:36]
    node T_7713 = and(mem_reg_valid, mem_ctrl.wxd) @[rocket.scala 296:20]
    node T_7714 = eq(UInt<1>("h00"), ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 297:82]
    node id_bypass_src_0_0 = and(UInt<1>("h01"), T_7714) @[rocket.scala 297:74]
    node T_7715 = eq(ex_waddr, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 297:82]
    node id_bypass_src_0_1 = and(T_7708, T_7715) @[rocket.scala 297:74]
    node T_7716 = eq(mem_waddr, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 297:82]
    node id_bypass_src_0_2 = and(T_7712, T_7716) @[rocket.scala 297:74]
    node T_7717 = eq(mem_waddr, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 297:82]
    node id_bypass_src_0_3 = and(T_7713, T_7717) @[rocket.scala 297:74]
    node T_7718 = eq(UInt<1>("h00"), ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 297:82]
    node id_bypass_src_1_0 = and(UInt<1>("h01"), T_7718) @[rocket.scala 297:74]
    node T_7719 = eq(ex_waddr, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 297:82]
    node id_bypass_src_1_1 = and(T_7708, T_7719) @[rocket.scala 297:74]
    node T_7720 = eq(mem_waddr, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 297:82]
    node id_bypass_src_1_2 = and(T_7712, T_7720) @[rocket.scala 297:74]
    node T_7721 = eq(mem_waddr, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 297:82]
    node id_bypass_src_1_3 = and(T_7713, T_7721) @[rocket.scala 297:74]
    wire bypass_mux : UInt[4] @[rocket.scala 300:23]
    bypass_mux is invalid @[rocket.scala 300:23]
    bypass_mux[0] <= UInt<1>("h00") @[rocket.scala 300:23]
    bypass_mux[1] <= mem_reg_wdata @[rocket.scala 300:23]
    bypass_mux[2] <= wb_reg_wdata @[rocket.scala 300:23]
    bypass_mux[3] <= io.dmem.resp.bits.data_word_bypass @[rocket.scala 300:23]
    reg ex_reg_rs_bypass : UInt<1>[2], clk
    reg ex_reg_rs_lsb : UInt[2], clk
    reg ex_reg_rs_msb : UInt[2], clk
    node T_7749 = cat(ex_reg_rs_msb[0], ex_reg_rs_lsb[0]) @[Cat.scala 20:58]
    node ex_rs_0 = mux(ex_reg_rs_bypass[0], bypass_mux[ex_reg_rs_lsb[0]], T_7749) @[rocket.scala 305:14]
    node T_7750 = cat(ex_reg_rs_msb[1], ex_reg_rs_lsb[1]) @[Cat.scala 20:58]
    node ex_rs_1 = mux(ex_reg_rs_bypass[1], bypass_mux[ex_reg_rs_lsb[1]], T_7750) @[rocket.scala 305:14]
    node T_7751 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 126:24]
    node T_7753 = bits(ex_reg_inst, 31, 31) @[rocket.scala 126:48]
    node T_7754 = asSInt(T_7753) @[rocket.scala 126:53]
    node T_7755 = mux(T_7751, asSInt(UInt<1>("h00")), T_7754) @[rocket.scala 126:19]
    node T_7756 = eq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 127:26]
    node T_7757 = bits(ex_reg_inst, 30, 20) @[rocket.scala 127:41]
    node T_7758 = asSInt(T_7757) @[rocket.scala 127:49]
    node T_7759 = mux(T_7756, T_7758, T_7755) @[rocket.scala 127:21]
    node T_7760 = neq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 128:26]
    node T_7761 = neq(ex_ctrl.sel_imm, UInt<3>("h03")) @[rocket.scala 128:43]
    node T_7762 = and(T_7760, T_7761) @[rocket.scala 128:36]
    node T_7763 = bits(ex_reg_inst, 19, 12) @[rocket.scala 128:65]
    node T_7764 = asSInt(T_7763) @[rocket.scala 128:73]
    node T_7765 = mux(T_7762, T_7755, T_7764) @[rocket.scala 128:21]
    node T_7766 = eq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 129:23]
    node T_7767 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 129:40]
    node T_7768 = or(T_7766, T_7767) @[rocket.scala 129:33]
    node T_7770 = eq(ex_ctrl.sel_imm, UInt<3>("h03")) @[rocket.scala 130:23]
    node T_7771 = bits(ex_reg_inst, 20, 20) @[rocket.scala 130:39]
    node T_7772 = asSInt(T_7771) @[rocket.scala 130:44]
    node T_7773 = eq(ex_ctrl.sel_imm, UInt<3>("h01")) @[rocket.scala 131:23]
    node T_7774 = bits(ex_reg_inst, 7, 7) @[rocket.scala 131:39]
    node T_7775 = asSInt(T_7774) @[rocket.scala 131:43]
    node T_7776 = mux(T_7773, T_7775, T_7755) @[rocket.scala 131:18]
    node T_7777 = mux(T_7770, T_7772, T_7776) @[rocket.scala 130:18]
    node T_7778 = mux(T_7768, asSInt(UInt<1>("h00")), T_7777) @[rocket.scala 129:18]
    node T_7779 = eq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 132:25]
    node T_7780 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 132:42]
    node T_7781 = or(T_7779, T_7780) @[rocket.scala 132:35]
    node T_7783 = bits(ex_reg_inst, 30, 25) @[rocket.scala 132:66]
    node T_7784 = mux(T_7781, UInt<1>("h00"), T_7783) @[rocket.scala 132:20]
    node T_7785 = eq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 133:24]
    node T_7787 = eq(ex_ctrl.sel_imm, UInt<3>("h00")) @[rocket.scala 134:24]
    node T_7788 = eq(ex_ctrl.sel_imm, UInt<3>("h01")) @[rocket.scala 134:41]
    node T_7789 = or(T_7787, T_7788) @[rocket.scala 134:34]
    node T_7790 = bits(ex_reg_inst, 11, 8) @[rocket.scala 134:57]
    node T_7791 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 135:24]
    node T_7792 = bits(ex_reg_inst, 19, 16) @[rocket.scala 135:39]
    node T_7793 = bits(ex_reg_inst, 24, 21) @[rocket.scala 135:52]
    node T_7794 = mux(T_7791, T_7792, T_7793) @[rocket.scala 135:19]
    node T_7795 = mux(T_7789, T_7790, T_7794) @[rocket.scala 134:19]
    node T_7796 = mux(T_7785, UInt<1>("h00"), T_7795) @[rocket.scala 133:19]
    node T_7797 = eq(ex_ctrl.sel_imm, UInt<3>("h00")) @[rocket.scala 136:22]
    node T_7798 = bits(ex_reg_inst, 7, 7) @[rocket.scala 136:37]
    node T_7799 = eq(ex_ctrl.sel_imm, UInt<3>("h04")) @[rocket.scala 137:22]
    node T_7800 = bits(ex_reg_inst, 20, 20) @[rocket.scala 137:37]
    node T_7801 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 138:22]
    node T_7802 = bits(ex_reg_inst, 15, 15) @[rocket.scala 138:37]
    node T_7804 = shl(T_7802, 0) @[rocket.scala 138:17]
    node T_7805 = mux(T_7801, T_7804, UInt<1>("h00")) @[rocket.scala 138:17]
    node T_7806 = shl(T_7800, 0) @[rocket.scala 137:17]
    node T_7807 = mux(T_7799, T_7806, T_7805) @[rocket.scala 137:17]
    node T_7808 = shl(T_7798, 0) @[rocket.scala 136:17]
    node T_7809 = mux(T_7797, T_7808, T_7807) @[rocket.scala 136:17]
    node T_7810 = cat(T_7784, T_7796) @[Cat.scala 20:58]
    node T_7811 = cat(T_7810, T_7809) @[Cat.scala 20:58]
    node T_7812 = asUInt(T_7778) @[Cat.scala 20:58]
    node T_7813 = asUInt(T_7765) @[Cat.scala 20:58]
    node T_7814 = cat(T_7813, T_7812) @[Cat.scala 20:58]
    node T_7815 = asUInt(T_7759) @[Cat.scala 20:58]
    node T_7816 = asUInt(T_7755) @[Cat.scala 20:58]
    node T_7817 = cat(T_7816, T_7815) @[Cat.scala 20:58]
    node T_7818 = cat(T_7817, T_7814) @[Cat.scala 20:58]
    node T_7819 = cat(T_7818, T_7811) @[Cat.scala 20:58]
    node ex_imm = asSInt(T_7819) @[rocket.scala 140:53]
    node T_7821 = asSInt(ex_rs_0) @[rocket.scala 308:24]
    node T_7822 = asSInt(ex_reg_pc) @[rocket.scala 309:24]
    node T_7823 = eq(UInt<2>("h02"), ex_ctrl.sel_alu1) @[Mux.scala 46:19]
    node T_7824 = mux(T_7823, T_7822, asSInt(UInt<1>("h00"))) @[Mux.scala 46:16]
    node T_7825 = eq(UInt<2>("h01"), ex_ctrl.sel_alu1) @[Mux.scala 46:19]
    node ex_op1 = mux(T_7825, T_7821, T_7824) @[Mux.scala 46:16]
    node T_7827 = asSInt(ex_rs_1) @[rocket.scala 311:24]
    node T_7830 = mux(ex_reg_rvc, asSInt(UInt<3>("h02")), asSInt(UInt<4>("h04"))) @[rocket.scala 313:19]
    node T_7831 = eq(UInt<2>("h01"), ex_ctrl.sel_alu2) @[Mux.scala 46:19]
    node T_7832 = mux(T_7831, T_7830, asSInt(UInt<1>("h00"))) @[Mux.scala 46:16]
    node T_7833 = eq(UInt<2>("h03"), ex_ctrl.sel_alu2) @[Mux.scala 46:19]
    node T_7834 = mux(T_7833, ex_imm, T_7832) @[Mux.scala 46:16]
    node T_7835 = eq(UInt<2>("h02"), ex_ctrl.sel_alu2) @[Mux.scala 46:19]
    node ex_op2 = mux(T_7835, T_7827, T_7834) @[Mux.scala 46:16]
    inst alu of ALU @[rocket.scala 315:19]
    alu.io is invalid
    alu.clk <= clk
    alu.reset <= reset
    alu.io.dw <= ex_ctrl.alu_dw @[rocket.scala 316:13]
    alu.io.fn <= ex_ctrl.alu_fn @[rocket.scala 317:13]
    node T_7836 = asUInt(ex_op2) @[rocket.scala 318:24]
    alu.io.in2 <= T_7836 @[rocket.scala 318:14]
    node T_7837 = asUInt(ex_op1) @[rocket.scala 319:24]
    alu.io.in1 <= T_7837 @[rocket.scala 319:14]
    inst div of MulDiv @[rocket.scala 322:19]
    div.io is invalid
    div.clk <= clk
    div.reset <= reset
    node T_7838 = and(ex_reg_valid, ex_ctrl.div) @[rocket.scala 323:36]
    div.io.req.valid <= T_7838 @[rocket.scala 323:20]
    div.io.req.bits.dw <= ex_ctrl.alu_dw @[rocket.scala 324:22]
    div.io.req.bits.fn <= ex_ctrl.alu_fn @[rocket.scala 325:22]
    div.io.req.bits.in1 <= ex_rs_0 @[rocket.scala 326:23]
    div.io.req.bits.in2 <= ex_rs_1 @[rocket.scala 327:23]
    div.io.req.bits.tag <= ex_waddr @[rocket.scala 328:23]
    node T_7840 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 330:19]
    ex_reg_valid <= T_7840 @[rocket.scala 330:16]
    node T_7842 = eq(take_pc, UInt<1>("h00")) @[rocket.scala 331:20]
    node T_7843 = and(T_7842, ibuf.io.inst[0].valid) @[rocket.scala 331:29]
    node T_7844 = and(T_7843, ibuf.io.inst[0].bits.replay) @[rocket.scala 331:54]
    ex_reg_replay <= T_7844 @[rocket.scala 331:17]
    node T_7846 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 332:18]
    node T_7847 = and(T_7846, id_xcpt) @[rocket.scala 332:30]
    ex_reg_xcpt <= T_7847 @[rocket.scala 332:15]
    node T_7849 = eq(take_pc, UInt<1>("h00")) @[rocket.scala 333:28]
    node T_7850 = and(T_7849, ibuf.io.inst[0].valid) @[rocket.scala 333:37]
    node T_7851 = and(T_7850, csr.io.interrupt) @[rocket.scala 333:62]
    ex_reg_xcpt_interrupt <= T_7851 @[rocket.scala 333:25]
    when id_xcpt : @[rocket.scala 334:18]
      ex_reg_cause <= id_cause @[rocket.scala 334:33]
      skip @[rocket.scala 334:18]
    ex_reg_btb_hit <= ibuf.io.inst[0].bits.btb_hit @[rocket.scala 335:18]
    when ibuf.io.inst[0].bits.btb_hit : @[rocket.scala 336:39]
      ex_reg_btb_resp <- ibuf.io.btb_resp @[rocket.scala 336:57]
      skip @[rocket.scala 336:39]
    node T_7853 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 338:9]
    when T_7853 : @[rocket.scala 338:22]
      ex_ctrl <- id_ctrl @[rocket.scala 339:13]
      ex_reg_rvc <= ibuf.io.inst[0].bits.rvc @[rocket.scala 340:16]
      ex_ctrl.csr <= id_csr @[rocket.scala 341:17]
      when id_xcpt : @[rocket.scala 342:20]
        ex_ctrl.alu_fn <= UInt<1>("h00") @[rocket.scala 343:22]
        ex_ctrl.alu_dw <= UInt<1>("h01") @[rocket.scala 344:22]
        ex_ctrl.sel_alu1 <= UInt<2>("h02") @[rocket.scala 345:24]
        ex_ctrl.sel_alu2 <= UInt<2>("h00") @[rocket.scala 346:24]
        node T_7855 = eq(bpu.io.xcpt_if, UInt<1>("h00")) @[rocket.scala 347:13]
        node T_7857 = eq(ibuf.io.inst[0].bits.pf0, UInt<1>("h00")) @[rocket.scala 347:32]
        node T_7858 = and(T_7855, T_7857) @[rocket.scala 347:29]
        node T_7859 = and(T_7858, ibuf.io.inst[0].bits.pf1) @[rocket.scala 347:58]
        when T_7859 : @[rocket.scala 347:87]
          ex_ctrl.sel_alu2 <= UInt<2>("h01") @[rocket.scala 348:26]
          ex_reg_rvc <= UInt<1>("h01") @[rocket.scala 349:20]
          skip @[rocket.scala 347:87]
        skip @[rocket.scala 342:20]
      node T_7861 = or(id_ctrl.fence_i, id_csr_flush) @[rocket.scala 352:42]
      node T_7862 = or(T_7861, csr.io.singleStep) @[rocket.scala 352:58]
      ex_reg_flush_pipe <= T_7862 @[rocket.scala 352:23]
      ex_reg_load_use <= id_load_use @[rocket.scala 353:21]
      node T_7863 = and(id_ctrl.jalr, csr.io.status.debug) @[rocket.scala 355:24]
      when T_7863 : @[rocket.scala 355:48]
        ex_reg_flush_pipe <= UInt<1>("h01") @[rocket.scala 356:25]
        ex_ctrl.fence_i <= UInt<1>("h01") @[rocket.scala 357:23]
        skip @[rocket.scala 355:48]
      node T_7866 = or(id_bypass_src_0_0, id_bypass_src_0_1) @[rocket.scala 361:48]
      node T_7867 = or(T_7866, id_bypass_src_0_2) @[rocket.scala 361:48]
      node T_7868 = or(T_7867, id_bypass_src_0_3) @[rocket.scala 361:48]
      node T_7873 = mux(id_bypass_src_0_2, UInt<2>("h02"), UInt<2>("h03")) @[Mux.scala 31:69]
      node T_7874 = mux(id_bypass_src_0_1, UInt<1>("h01"), T_7873) @[Mux.scala 31:69]
      node T_7875 = mux(id_bypass_src_0_0, UInt<1>("h00"), T_7874) @[Mux.scala 31:69]
      ex_reg_rs_bypass[0] <= T_7868 @[rocket.scala 363:27]
      ex_reg_rs_lsb[0] <= T_7875 @[rocket.scala 364:24]
      node T_7877 = eq(T_7868, UInt<1>("h00")) @[rocket.scala 365:26]
      node T_7878 = and(id_ctrl.rxs1, T_7877) @[rocket.scala 365:23]
      when T_7878 : @[rocket.scala 365:38]
        node T_7879 = bits(id_rs_0, 1, 0) @[rocket.scala 366:37]
        ex_reg_rs_lsb[0] <= T_7879 @[rocket.scala 366:26]
        node T_7880 = shr(id_rs_0, 2) @[rocket.scala 367:38]
        ex_reg_rs_msb[0] <= T_7880 @[rocket.scala 367:26]
        skip @[rocket.scala 365:38]
      node T_7881 = or(id_bypass_src_1_0, id_bypass_src_1_1) @[rocket.scala 361:48]
      node T_7882 = or(T_7881, id_bypass_src_1_2) @[rocket.scala 361:48]
      node T_7883 = or(T_7882, id_bypass_src_1_3) @[rocket.scala 361:48]
      node T_7888 = mux(id_bypass_src_1_2, UInt<2>("h02"), UInt<2>("h03")) @[Mux.scala 31:69]
      node T_7889 = mux(id_bypass_src_1_1, UInt<1>("h01"), T_7888) @[Mux.scala 31:69]
      node T_7890 = mux(id_bypass_src_1_0, UInt<1>("h00"), T_7889) @[Mux.scala 31:69]
      ex_reg_rs_bypass[1] <= T_7883 @[rocket.scala 363:27]
      ex_reg_rs_lsb[1] <= T_7890 @[rocket.scala 364:24]
      node T_7892 = eq(T_7883, UInt<1>("h00")) @[rocket.scala 365:26]
      node T_7893 = and(id_ctrl.rxs2, T_7892) @[rocket.scala 365:23]
      when T_7893 : @[rocket.scala 365:38]
        node T_7894 = bits(id_rs_1, 1, 0) @[rocket.scala 366:37]
        ex_reg_rs_lsb[1] <= T_7894 @[rocket.scala 366:26]
        node T_7895 = shr(id_rs_1, 2) @[rocket.scala 367:38]
        ex_reg_rs_msb[1] <= T_7895 @[rocket.scala 367:26]
        skip @[rocket.scala 365:38]
      skip @[rocket.scala 338:22]
    node T_7897 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 371:9]
    node T_7898 = or(T_7897, csr.io.interrupt) @[rocket.scala 371:21]
    node T_7899 = or(T_7898, ibuf.io.inst[0].bits.replay) @[rocket.scala 371:41]
    when T_7899 : @[rocket.scala 371:73]
      ex_reg_inst <= ibuf.io.inst[0].bits.inst.bits @[rocket.scala 372:17]
      ex_reg_pc <= ibuf.io.pc @[rocket.scala 373:15]
      skip @[rocket.scala 371:73]
    node T_7900 = or(ex_reg_valid, ex_reg_replay) @[rocket.scala 377:34]
    node ex_pc_valid = or(T_7900, ex_reg_xcpt_interrupt) @[rocket.scala 377:51]
    node T_7902 = eq(io.dmem.resp.valid, UInt<1>("h00")) @[rocket.scala 378:39]
    node wb_dcache_miss = and(wb_ctrl.mem, T_7902) @[rocket.scala 378:36]
    node T_7904 = eq(io.dmem.req.ready, UInt<1>("h00")) @[rocket.scala 379:45]
    node T_7905 = and(ex_ctrl.mem, T_7904) @[rocket.scala 379:42]
    node T_7907 = eq(div.io.req.ready, UInt<1>("h00")) @[rocket.scala 380:45]
    node T_7908 = and(ex_ctrl.div, T_7907) @[rocket.scala 380:42]
    node replay_ex_structural = or(T_7905, T_7908) @[rocket.scala 379:64]
    node replay_ex_load_use = and(wb_dcache_miss, ex_reg_load_use) @[rocket.scala 381:43]
    node T_7909 = or(replay_ex_structural, replay_ex_load_use) @[rocket.scala 382:75]
    node T_7910 = and(ex_reg_valid, T_7909) @[rocket.scala 382:50]
    node replay_ex = or(ex_reg_replay, T_7910) @[rocket.scala 382:33]
    node T_7911 = or(take_pc_mem_wb, replay_ex) @[rocket.scala 383:35]
    node T_7913 = eq(ex_reg_valid, UInt<1>("h00")) @[rocket.scala 383:51]
    node ctrl_killx = or(T_7911, T_7913) @[rocket.scala 383:48]
    node T_7914 = eq(ex_ctrl.mem_cmd, UInt<5>("h07")) @[rocket.scala 385:40]
    wire T_7920 : UInt<3>[4] @[rocket.scala 385:56]
    T_7920 is invalid @[rocket.scala 385:56]
    T_7920[0] <= UInt<3>("h00") @[rocket.scala 385:56]
    T_7920[1] <= UInt<3>("h04") @[rocket.scala 385:56]
    T_7920[2] <= UInt<3>("h01") @[rocket.scala 385:56]
    T_7920[3] <= UInt<3>("h05") @[rocket.scala 385:56]
    node T_7922 = eq(T_7920[0], ex_ctrl.mem_type) @[rocket.scala 385:91]
    node T_7923 = eq(T_7920[1], ex_ctrl.mem_type) @[rocket.scala 385:91]
    node T_7924 = eq(T_7920[2], ex_ctrl.mem_type) @[rocket.scala 385:91]
    node T_7925 = eq(T_7920[3], ex_ctrl.mem_type) @[rocket.scala 385:91]
    node T_7927 = or(UInt<1>("h00"), T_7922) @[rocket.scala 385:91]
    node T_7928 = or(T_7927, T_7923) @[rocket.scala 385:91]
    node T_7929 = or(T_7928, T_7924) @[rocket.scala 385:91]
    node T_7930 = or(T_7929, T_7925) @[rocket.scala 385:91]
    node ex_slow_bypass = or(T_7914, T_7930) @[rocket.scala 385:50]
    node T_7931 = or(ex_reg_xcpt_interrupt, ex_reg_xcpt) @[rocket.scala 388:28]
    node T_7932 = and(ex_ctrl.fp, io.fpu.illegal_rm) @[rocket.scala 389:17]
    node ex_xcpt = or(T_7931, T_7932) @[rocket.scala 694:26]
    node ex_cause = mux(T_7931, ex_reg_cause, UInt<2>("h02")) @[Mux.scala 31:69]
    node mem_br_taken = bits(mem_reg_wdata, 0, 0) @[rocket.scala 392:35]
    node T_7934 = asSInt(mem_reg_pc) @[rocket.scala 393:34]
    node T_7935 = and(mem_ctrl.branch, mem_br_taken) @[rocket.scala 394:25]
    node T_7936 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 126:24]
    node T_7938 = bits(mem_reg_inst, 31, 31) @[rocket.scala 126:48]
    node T_7939 = asSInt(T_7938) @[rocket.scala 126:53]
    node T_7940 = mux(T_7936, asSInt(UInt<1>("h00")), T_7939) @[rocket.scala 126:19]
    node T_7941 = eq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 127:26]
    node T_7942 = bits(mem_reg_inst, 30, 20) @[rocket.scala 127:41]
    node T_7943 = asSInt(T_7942) @[rocket.scala 127:49]
    node T_7944 = mux(T_7941, T_7943, T_7940) @[rocket.scala 127:21]
    node T_7945 = neq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 128:26]
    node T_7946 = neq(UInt<3>("h01"), UInt<3>("h03")) @[rocket.scala 128:43]
    node T_7947 = and(T_7945, T_7946) @[rocket.scala 128:36]
    node T_7948 = bits(mem_reg_inst, 19, 12) @[rocket.scala 128:65]
    node T_7949 = asSInt(T_7948) @[rocket.scala 128:73]
    node T_7950 = mux(T_7947, T_7940, T_7949) @[rocket.scala 128:21]
    node T_7951 = eq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 129:23]
    node T_7952 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 129:40]
    node T_7953 = or(T_7951, T_7952) @[rocket.scala 129:33]
    node T_7955 = eq(UInt<3>("h01"), UInt<3>("h03")) @[rocket.scala 130:23]
    node T_7956 = bits(mem_reg_inst, 20, 20) @[rocket.scala 130:39]
    node T_7957 = asSInt(T_7956) @[rocket.scala 130:44]
    node T_7958 = eq(UInt<3>("h01"), UInt<3>("h01")) @[rocket.scala 131:23]
    node T_7959 = bits(mem_reg_inst, 7, 7) @[rocket.scala 131:39]
    node T_7960 = asSInt(T_7959) @[rocket.scala 131:43]
    node T_7961 = mux(T_7958, T_7960, T_7940) @[rocket.scala 131:18]
    node T_7962 = mux(T_7955, T_7957, T_7961) @[rocket.scala 130:18]
    node T_7963 = mux(T_7953, asSInt(UInt<1>("h00")), T_7962) @[rocket.scala 129:18]
    node T_7964 = eq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 132:25]
    node T_7965 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 132:42]
    node T_7966 = or(T_7964, T_7965) @[rocket.scala 132:35]
    node T_7968 = bits(mem_reg_inst, 30, 25) @[rocket.scala 132:66]
    node T_7969 = mux(T_7966, UInt<1>("h00"), T_7968) @[rocket.scala 132:20]
    node T_7970 = eq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 133:24]
    node T_7972 = eq(UInt<3>("h01"), UInt<3>("h00")) @[rocket.scala 134:24]
    node T_7973 = eq(UInt<3>("h01"), UInt<3>("h01")) @[rocket.scala 134:41]
    node T_7974 = or(T_7972, T_7973) @[rocket.scala 134:34]
    node T_7975 = bits(mem_reg_inst, 11, 8) @[rocket.scala 134:57]
    node T_7976 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 135:24]
    node T_7977 = bits(mem_reg_inst, 19, 16) @[rocket.scala 135:39]
    node T_7978 = bits(mem_reg_inst, 24, 21) @[rocket.scala 135:52]
    node T_7979 = mux(T_7976, T_7977, T_7978) @[rocket.scala 135:19]
    node T_7980 = mux(T_7974, T_7975, T_7979) @[rocket.scala 134:19]
    node T_7981 = mux(T_7970, UInt<1>("h00"), T_7980) @[rocket.scala 133:19]
    node T_7982 = eq(UInt<3>("h01"), UInt<3>("h00")) @[rocket.scala 136:22]
    node T_7983 = bits(mem_reg_inst, 7, 7) @[rocket.scala 136:37]
    node T_7984 = eq(UInt<3>("h01"), UInt<3>("h04")) @[rocket.scala 137:22]
    node T_7985 = bits(mem_reg_inst, 20, 20) @[rocket.scala 137:37]
    node T_7986 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 138:22]
    node T_7987 = bits(mem_reg_inst, 15, 15) @[rocket.scala 138:37]
    node T_7989 = shl(T_7987, 0) @[rocket.scala 138:17]
    node T_7990 = mux(T_7986, T_7989, UInt<1>("h00")) @[rocket.scala 138:17]
    node T_7991 = shl(T_7985, 0) @[rocket.scala 137:17]
    node T_7992 = mux(T_7984, T_7991, T_7990) @[rocket.scala 137:17]
    node T_7993 = shl(T_7983, 0) @[rocket.scala 136:17]
    node T_7994 = mux(T_7982, T_7993, T_7992) @[rocket.scala 136:17]
    node T_7995 = cat(T_7969, T_7981) @[Cat.scala 20:58]
    node T_7996 = cat(T_7995, T_7994) @[Cat.scala 20:58]
    node T_7997 = asUInt(T_7963) @[Cat.scala 20:58]
    node T_7998 = asUInt(T_7950) @[Cat.scala 20:58]
    node T_7999 = cat(T_7998, T_7997) @[Cat.scala 20:58]
    node T_8000 = asUInt(T_7944) @[Cat.scala 20:58]
    node T_8001 = asUInt(T_7940) @[Cat.scala 20:58]
    node T_8002 = cat(T_8001, T_8000) @[Cat.scala 20:58]
    node T_8003 = cat(T_8002, T_7999) @[Cat.scala 20:58]
    node T_8004 = cat(T_8003, T_7996) @[Cat.scala 20:58]
    node T_8005 = asSInt(T_8004) @[rocket.scala 140:53]
    node T_8007 = and(UInt<1>("h01"), mem_ctrl.jal) @[rocket.scala 395:24]
    node T_8008 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 126:24]
    node T_8010 = bits(mem_reg_inst, 31, 31) @[rocket.scala 126:48]
    node T_8011 = asSInt(T_8010) @[rocket.scala 126:53]
    node T_8012 = mux(T_8008, asSInt(UInt<1>("h00")), T_8011) @[rocket.scala 126:19]
    node T_8013 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 127:26]
    node T_8014 = bits(mem_reg_inst, 30, 20) @[rocket.scala 127:41]
    node T_8015 = asSInt(T_8014) @[rocket.scala 127:49]
    node T_8016 = mux(T_8013, T_8015, T_8012) @[rocket.scala 127:21]
    node T_8017 = neq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 128:26]
    node T_8018 = neq(UInt<3>("h03"), UInt<3>("h03")) @[rocket.scala 128:43]
    node T_8019 = and(T_8017, T_8018) @[rocket.scala 128:36]
    node T_8020 = bits(mem_reg_inst, 19, 12) @[rocket.scala 128:65]
    node T_8021 = asSInt(T_8020) @[rocket.scala 128:73]
    node T_8022 = mux(T_8019, T_8012, T_8021) @[rocket.scala 128:21]
    node T_8023 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 129:23]
    node T_8024 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 129:40]
    node T_8025 = or(T_8023, T_8024) @[rocket.scala 129:33]
    node T_8027 = eq(UInt<3>("h03"), UInt<3>("h03")) @[rocket.scala 130:23]
    node T_8028 = bits(mem_reg_inst, 20, 20) @[rocket.scala 130:39]
    node T_8029 = asSInt(T_8028) @[rocket.scala 130:44]
    node T_8030 = eq(UInt<3>("h03"), UInt<3>("h01")) @[rocket.scala 131:23]
    node T_8031 = bits(mem_reg_inst, 7, 7) @[rocket.scala 131:39]
    node T_8032 = asSInt(T_8031) @[rocket.scala 131:43]
    node T_8033 = mux(T_8030, T_8032, T_8012) @[rocket.scala 131:18]
    node T_8034 = mux(T_8027, T_8029, T_8033) @[rocket.scala 130:18]
    node T_8035 = mux(T_8025, asSInt(UInt<1>("h00")), T_8034) @[rocket.scala 129:18]
    node T_8036 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 132:25]
    node T_8037 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 132:42]
    node T_8038 = or(T_8036, T_8037) @[rocket.scala 132:35]
    node T_8040 = bits(mem_reg_inst, 30, 25) @[rocket.scala 132:66]
    node T_8041 = mux(T_8038, UInt<1>("h00"), T_8040) @[rocket.scala 132:20]
    node T_8042 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 133:24]
    node T_8044 = eq(UInt<3>("h03"), UInt<3>("h00")) @[rocket.scala 134:24]
    node T_8045 = eq(UInt<3>("h03"), UInt<3>("h01")) @[rocket.scala 134:41]
    node T_8046 = or(T_8044, T_8045) @[rocket.scala 134:34]
    node T_8047 = bits(mem_reg_inst, 11, 8) @[rocket.scala 134:57]
    node T_8048 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 135:24]
    node T_8049 = bits(mem_reg_inst, 19, 16) @[rocket.scala 135:39]
    node T_8050 = bits(mem_reg_inst, 24, 21) @[rocket.scala 135:52]
    node T_8051 = mux(T_8048, T_8049, T_8050) @[rocket.scala 135:19]
    node T_8052 = mux(T_8046, T_8047, T_8051) @[rocket.scala 134:19]
    node T_8053 = mux(T_8042, UInt<1>("h00"), T_8052) @[rocket.scala 133:19]
    node T_8054 = eq(UInt<3>("h03"), UInt<3>("h00")) @[rocket.scala 136:22]
    node T_8055 = bits(mem_reg_inst, 7, 7) @[rocket.scala 136:37]
    node T_8056 = eq(UInt<3>("h03"), UInt<3>("h04")) @[rocket.scala 137:22]
    node T_8057 = bits(mem_reg_inst, 20, 20) @[rocket.scala 137:37]
    node T_8058 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 138:22]
    node T_8059 = bits(mem_reg_inst, 15, 15) @[rocket.scala 138:37]
    node T_8061 = shl(T_8059, 0) @[rocket.scala 138:17]
    node T_8062 = mux(T_8058, T_8061, UInt<1>("h00")) @[rocket.scala 138:17]
    node T_8063 = shl(T_8057, 0) @[rocket.scala 137:17]
    node T_8064 = mux(T_8056, T_8063, T_8062) @[rocket.scala 137:17]
    node T_8065 = shl(T_8055, 0) @[rocket.scala 136:17]
    node T_8066 = mux(T_8054, T_8065, T_8064) @[rocket.scala 136:17]
    node T_8067 = cat(T_8041, T_8053) @[Cat.scala 20:58]
    node T_8068 = cat(T_8067, T_8066) @[Cat.scala 20:58]
    node T_8069 = asUInt(T_8035) @[Cat.scala 20:58]
    node T_8070 = asUInt(T_8022) @[Cat.scala 20:58]
    node T_8071 = cat(T_8070, T_8069) @[Cat.scala 20:58]
    node T_8072 = asUInt(T_8016) @[Cat.scala 20:58]
    node T_8073 = asUInt(T_8012) @[Cat.scala 20:58]
    node T_8074 = cat(T_8073, T_8072) @[Cat.scala 20:58]
    node T_8075 = cat(T_8074, T_8071) @[Cat.scala 20:58]
    node T_8076 = cat(T_8075, T_8068) @[Cat.scala 20:58]
    node T_8077 = asSInt(T_8076) @[rocket.scala 140:53]
    node T_8080 = mux(mem_reg_rvc, asSInt(UInt<3>("h02")), asSInt(UInt<4>("h04"))) @[rocket.scala 396:8]
    node T_8081 = mux(T_8007, T_8077, T_8080) @[rocket.scala 395:8]
    node T_8082 = mux(T_7935, T_8005, T_8081) @[rocket.scala 394:8]
    node T_8083 = add(T_7934, T_8082) @[rocket.scala 393:41]
    node T_8084 = tail(T_8083, 1) @[rocket.scala 393:41]
    node mem_br_target = asSInt(T_8084) @[rocket.scala 393:41]
    node T_8085 = shr(mem_reg_wdata, 38) @[rocket.scala 702:16]
    node T_8086 = bits(mem_reg_wdata, 39, 38) @[rocket.scala 703:15]
    node T_8087 = asSInt(T_8086) @[rocket.scala 703:39]
    node T_8089 = eq(T_8085, UInt<1>("h00")) @[rocket.scala 705:13]
    node T_8091 = eq(T_8085, UInt<1>("h01")) @[rocket.scala 705:30]
    node T_8092 = or(T_8089, T_8091) @[rocket.scala 705:25]
    node T_8094 = neq(T_8087, asSInt(UInt<1>("h00"))) @[rocket.scala 705:45]
    node T_8095 = asSInt(T_8085) @[rocket.scala 706:13]
    node T_8097 = eq(T_8095, asSInt(UInt<1>("h01"))) @[rocket.scala 706:20]
    node T_8098 = asSInt(T_8085) @[rocket.scala 706:38]
    node T_8100 = eq(T_8098, asSInt(UInt<2>("h02"))) @[rocket.scala 706:45]
    node T_8101 = or(T_8097, T_8100) @[rocket.scala 706:33]
    node T_8103 = eq(T_8087, asSInt(UInt<1>("h01"))) @[rocket.scala 706:61]
    node T_8104 = bits(T_8087, 0, 0) @[rocket.scala 706:76]
    node T_8105 = mux(T_8101, T_8103, T_8104) @[rocket.scala 706:10]
    node T_8106 = mux(T_8092, T_8094, T_8105) @[rocket.scala 705:10]
    node T_8107 = bits(mem_reg_wdata, 38, 0) @[rocket.scala 707:16]
    node T_8108 = cat(T_8106, T_8107) @[Cat.scala 20:58]
    node T_8109 = asSInt(T_8108) @[rocket.scala 397:88]
    node T_8110 = mux(mem_ctrl.jalr, T_8109, mem_br_target) @[rocket.scala 397:21]
    node T_8112 = and(T_8110, asSInt(UInt<2>("h02"))) @[rocket.scala 397:111]
    node T_8113 = asSInt(T_8112) @[rocket.scala 397:111]
    node mem_npc = asUInt(T_8113) @[rocket.scala 397:123]
    node T_8114 = neq(mem_npc, ex_reg_pc) @[rocket.scala 398:48]
    node T_8115 = neq(mem_npc, ibuf.io.pc) @[rocket.scala 398:98]
    node T_8117 = mux(ibuf.io.inst[0].valid, T_8115, UInt<1>("h01")) @[rocket.scala 398:66]
    node mem_wrong_npc = mux(ex_pc_valid, T_8114, T_8117) @[rocket.scala 398:26]
    node T_8118 = bits(csr.io.status.isa, 2, 2) @[rocket.scala 399:46]
    node T_8120 = eq(T_8118, UInt<1>("h00")) @[rocket.scala 399:28]
    node T_8121 = bits(mem_npc, 1, 1) @[rocket.scala 399:66]
    node mem_npc_misaligned = and(T_8120, T_8121) @[rocket.scala 399:56]
    node T_8123 = eq(mem_reg_xcpt, UInt<1>("h00")) @[rocket.scala 400:27]
    node T_8124 = xor(mem_ctrl.jalr, mem_npc_misaligned) @[rocket.scala 400:59]
    node T_8125 = and(T_8123, T_8124) @[rocket.scala 400:41]
    node T_8126 = asSInt(mem_reg_wdata) @[rocket.scala 400:111]
    node T_8127 = mux(T_8125, mem_br_target, T_8126) @[rocket.scala 400:26]
    node mem_int_wdata = asUInt(T_8127) @[rocket.scala 400:119]
    node T_8128 = or(mem_ctrl.branch, mem_ctrl.jalr) @[rocket.scala 401:33]
    node mem_cfi = or(T_8128, mem_ctrl.jal) @[rocket.scala 401:50]
    node T_8129 = and(mem_ctrl.branch, mem_br_taken) @[rocket.scala 402:40]
    node T_8130 = or(T_8129, mem_ctrl.jalr) @[rocket.scala 402:57]
    node T_8132 = and(UInt<1>("h01"), mem_ctrl.jal) @[rocket.scala 402:93]
    node mem_cfi_taken = or(T_8130, T_8132) @[rocket.scala 402:74]
    node T_8133 = or(mem_wrong_npc, mem_reg_flush_pipe) @[rocket.scala 406:54]
    node T_8134 = and(mem_reg_valid, T_8133) @[rocket.scala 406:32]
    take_pc_mem <= T_8134 @[rocket.scala 406:15]
    node T_8136 = eq(ctrl_killx, UInt<1>("h00")) @[rocket.scala 408:20]
    mem_reg_valid <= T_8136 @[rocket.scala 408:17]
    node T_8138 = eq(take_pc_mem_wb, UInt<1>("h00")) @[rocket.scala 409:21]
    node T_8139 = and(T_8138, replay_ex) @[rocket.scala 409:37]
    mem_reg_replay <= T_8139 @[rocket.scala 409:18]
    node T_8141 = eq(ctrl_killx, UInt<1>("h00")) @[rocket.scala 410:19]
    node T_8142 = and(T_8141, ex_xcpt) @[rocket.scala 410:31]
    mem_reg_xcpt <= T_8142 @[rocket.scala 410:16]
    node T_8144 = eq(take_pc_mem_wb, UInt<1>("h00")) @[rocket.scala 411:29]
    node T_8145 = and(T_8144, ex_reg_xcpt_interrupt) @[rocket.scala 411:45]
    mem_reg_xcpt_interrupt <= T_8145 @[rocket.scala 411:26]
    when ex_xcpt : @[rocket.scala 412:18]
      mem_reg_cause <= ex_cause @[rocket.scala 412:34]
      skip @[rocket.scala 412:18]
    when ex_pc_valid : @[rocket.scala 414:22]
      mem_ctrl <- ex_ctrl @[rocket.scala 415:14]
      mem_reg_rvc <= ex_reg_rvc @[rocket.scala 416:17]
      node T_8146 = eq(ex_ctrl.mem_cmd, UInt<5>("h00")) @[Consts.scala 35:31]
      node T_8147 = eq(ex_ctrl.mem_cmd, UInt<5>("h06")) @[Consts.scala 35:48]
      node T_8148 = or(T_8146, T_8147) @[Consts.scala 35:41]
      node T_8149 = eq(ex_ctrl.mem_cmd, UInt<5>("h07")) @[Consts.scala 35:65]
      node T_8150 = or(T_8148, T_8149) @[Consts.scala 35:58]
      node T_8151 = bits(ex_ctrl.mem_cmd, 3, 3) @[Consts.scala 33:29]
      node T_8152 = eq(ex_ctrl.mem_cmd, UInt<5>("h04")) @[Consts.scala 33:40]
      node T_8153 = or(T_8151, T_8152) @[Consts.scala 33:33]
      node T_8154 = or(T_8150, T_8153) @[Consts.scala 35:75]
      node T_8155 = and(ex_ctrl.mem, T_8154) @[rocket.scala 417:33]
      mem_reg_load <= T_8155 @[rocket.scala 417:18]
      node T_8156 = eq(ex_ctrl.mem_cmd, UInt<5>("h01")) @[Consts.scala 36:32]
      node T_8157 = eq(ex_ctrl.mem_cmd, UInt<5>("h07")) @[Consts.scala 36:49]
      node T_8158 = or(T_8156, T_8157) @[Consts.scala 36:42]
      node T_8159 = bits(ex_ctrl.mem_cmd, 3, 3) @[Consts.scala 33:29]
      node T_8160 = eq(ex_ctrl.mem_cmd, UInt<5>("h04")) @[Consts.scala 33:40]
      node T_8161 = or(T_8159, T_8160) @[Consts.scala 33:33]
      node T_8162 = or(T_8158, T_8161) @[Consts.scala 36:59]
      node T_8163 = and(ex_ctrl.mem, T_8162) @[rocket.scala 418:34]
      mem_reg_store <= T_8163 @[rocket.scala 418:19]
      mem_reg_btb_hit <= ex_reg_btb_hit @[rocket.scala 419:21]
      when ex_reg_btb_hit : @[rocket.scala 420:27]
        mem_reg_btb_resp <- ex_reg_btb_resp @[rocket.scala 420:46]
        skip @[rocket.scala 420:27]
      mem_reg_flush_pipe <= ex_reg_flush_pipe @[rocket.scala 421:24]
      mem_reg_slow_bypass <= ex_slow_bypass @[rocket.scala 422:25]
      mem_reg_inst <= ex_reg_inst @[rocket.scala 424:18]
      mem_reg_pc <= ex_reg_pc @[rocket.scala 425:16]
      mem_reg_wdata <= alu.io.out @[rocket.scala 426:19]
      node T_8164 = or(ex_ctrl.mem, ex_ctrl.rocc) @[rocket.scala 427:40]
      node T_8165 = and(ex_ctrl.rxs2, T_8164) @[rocket.scala 427:24]
      when T_8165 : @[rocket.scala 427:58]
        mem_reg_rs2 <= ex_rs_1 @[rocket.scala 428:19]
        skip @[rocket.scala 427:58]
      skip @[rocket.scala 414:22]
    node T_8166 = and(mem_reg_load, bpu.io.xcpt_ld) @[rocket.scala 432:38]
    node T_8167 = and(mem_reg_store, bpu.io.xcpt_st) @[rocket.scala 432:75]
    node mem_breakpoint = or(T_8166, T_8167) @[rocket.scala 432:57]
    node T_8168 = and(mem_reg_load, bpu.io.debug_ld) @[rocket.scala 433:44]
    node T_8169 = and(mem_reg_store, bpu.io.debug_st) @[rocket.scala 433:82]
    node mem_debug_breakpoint = or(T_8168, T_8169) @[rocket.scala 433:64]
    node T_8173 = and(mem_ctrl.mem, io.dmem.xcpt.ma.st) @[rocket.scala 438:19]
    node T_8175 = and(mem_ctrl.mem, io.dmem.xcpt.ma.ld) @[rocket.scala 439:19]
    node T_8177 = and(mem_ctrl.mem, io.dmem.xcpt.pf.st) @[rocket.scala 440:19]
    node T_8179 = and(mem_ctrl.mem, io.dmem.xcpt.pf.ld) @[rocket.scala 441:19]
    node T_8181 = or(mem_debug_breakpoint, mem_breakpoint) @[rocket.scala 694:26]
    node T_8182 = or(T_8181, mem_npc_misaligned) @[rocket.scala 694:26]
    node T_8183 = or(T_8182, T_8173) @[rocket.scala 694:26]
    node T_8184 = or(T_8183, T_8175) @[rocket.scala 694:26]
    node T_8185 = or(T_8184, T_8177) @[rocket.scala 694:26]
    node mem_new_xcpt = or(T_8185, T_8179) @[rocket.scala 694:26]
    node T_8186 = mux(T_8177, UInt<3>("h07"), UInt<3>("h05")) @[Mux.scala 31:69]
    node T_8187 = mux(T_8175, UInt<3>("h04"), T_8186) @[Mux.scala 31:69]
    node T_8188 = mux(T_8173, UInt<3>("h06"), T_8187) @[Mux.scala 31:69]
    node T_8189 = mux(mem_npc_misaligned, UInt<1>("h00"), T_8188) @[Mux.scala 31:69]
    node T_8190 = mux(mem_breakpoint, UInt<2>("h03"), T_8189) @[Mux.scala 31:69]
    node mem_new_cause = mux(mem_debug_breakpoint, UInt<4>("h0d"), T_8190) @[Mux.scala 31:69]
    node T_8191 = or(mem_reg_xcpt_interrupt, mem_reg_xcpt) @[rocket.scala 444:29]
    node T_8192 = and(mem_reg_valid, mem_new_xcpt) @[rocket.scala 445:20]
    node mem_xcpt = or(T_8191, T_8192) @[rocket.scala 694:26]
    node mem_cause = mux(T_8191, mem_reg_cause, mem_new_cause) @[Mux.scala 31:69]
    node T_8193 = and(mem_reg_valid, mem_ctrl.wxd) @[rocket.scala 447:39]
    node dcache_kill_mem = and(T_8193, io.dmem.replay_next) @[rocket.scala 447:55]
    node T_8194 = and(mem_reg_valid, mem_ctrl.fp) @[rocket.scala 448:36]
    node fpu_kill_mem = and(T_8194, io.fpu.nack_mem) @[rocket.scala 448:51]
    node T_8195 = or(dcache_kill_mem, mem_reg_replay) @[rocket.scala 449:37]
    node replay_mem = or(T_8195, fpu_kill_mem) @[rocket.scala 449:55]
    node T_8196 = or(dcache_kill_mem, take_pc_wb) @[rocket.scala 450:38]
    node T_8197 = or(T_8196, mem_reg_xcpt) @[rocket.scala 450:52]
    node T_8199 = eq(mem_reg_valid, UInt<1>("h00")) @[rocket.scala 450:71]
    node killm_common = or(T_8197, T_8199) @[rocket.scala 450:68]
    node T_8200 = and(div.io.req.ready, div.io.req.valid) @[Decoupled.scala 21:42]
    reg T_8201 : UInt<1>, clk
    T_8201 <= T_8200
    node T_8202 = and(killm_common, T_8201) @[rocket.scala 451:31]
    div.io.kill <= T_8202 @[rocket.scala 451:15]
    node T_8203 = or(killm_common, mem_xcpt) @[rocket.scala 452:33]
    node ctrl_killm = or(T_8203, fpu_kill_mem) @[rocket.scala 452:45]
    node T_8205 = eq(ctrl_killm, UInt<1>("h00")) @[rocket.scala 455:19]
    wb_reg_valid <= T_8205 @[rocket.scala 455:16]
    node T_8207 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 456:34]
    node T_8208 = and(replay_mem, T_8207) @[rocket.scala 456:31]
    wb_reg_replay <= T_8208 @[rocket.scala 456:17]
    node T_8210 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 457:30]
    node T_8211 = and(mem_xcpt, T_8210) @[rocket.scala 457:27]
    wb_reg_xcpt <= T_8211 @[rocket.scala 457:15]
    when mem_xcpt : @[rocket.scala 458:19]
      wb_reg_cause <= mem_cause @[rocket.scala 458:34]
      skip @[rocket.scala 458:19]
    node T_8212 = or(mem_reg_valid, mem_reg_replay) @[rocket.scala 459:23]
    node T_8213 = or(T_8212, mem_reg_xcpt_interrupt) @[rocket.scala 459:41]
    when T_8213 : @[rocket.scala 459:68]
      wb_ctrl <- mem_ctrl @[rocket.scala 460:13]
      node T_8215 = eq(mem_reg_xcpt, UInt<1>("h00")) @[rocket.scala 461:25]
      node T_8216 = and(T_8215, mem_ctrl.fp) @[rocket.scala 461:39]
      node T_8217 = and(T_8216, mem_ctrl.wxd) @[rocket.scala 461:54]
      node T_8218 = mux(T_8217, io.fpu.toint_data, mem_int_wdata) @[rocket.scala 461:24]
      wb_reg_wdata <= T_8218 @[rocket.scala 461:18]
      when mem_ctrl.rocc : @[rocket.scala 462:26]
        wb_reg_rs2 <= mem_reg_rs2 @[rocket.scala 463:18]
        skip @[rocket.scala 462:26]
      wb_reg_inst <= mem_reg_inst @[rocket.scala 465:17]
      wb_reg_pc <= mem_reg_pc @[rocket.scala 466:15]
      skip @[rocket.scala 459:68]
    node T_8219 = or(wb_ctrl.div, wb_dcache_miss) @[rocket.scala 469:35]
    node wb_set_sboard = or(T_8219, wb_ctrl.rocc) @[rocket.scala 469:53]
    node replay_wb_common = or(io.dmem.s2_nack, wb_reg_replay) @[rocket.scala 470:42]
    node T_8220 = and(wb_reg_valid, wb_ctrl.rocc) @[rocket.scala 471:37]
    node T_8222 = eq(io.rocc.cmd.ready, UInt<1>("h00")) @[rocket.scala 471:56]
    node replay_wb_rocc = and(T_8220, T_8222) @[rocket.scala 471:53]
    node replay_wb = or(replay_wb_common, replay_wb_rocc) @[rocket.scala 472:36]
    node wb_xcpt = or(wb_reg_xcpt, csr.io.csr_xcpt) @[rocket.scala 473:29]
    node T_8223 = or(replay_wb, wb_xcpt) @[rocket.scala 474:27]
    node T_8224 = or(T_8223, csr.io.eret) @[rocket.scala 474:38]
    take_pc_wb <= T_8224 @[rocket.scala 474:14]
    node T_8225 = bits(io.dmem.resp.bits.tag, 0, 0) @[rocket.scala 477:45]
    node T_8226 = bits(T_8225, 0, 0) @[rocket.scala 477:49]
    node dmem_resp_xpu = eq(T_8226, UInt<1>("h00")) @[rocket.scala 477:23]
    node T_8228 = bits(io.dmem.resp.bits.tag, 0, 0) @[rocket.scala 478:45]
    node dmem_resp_fpu = bits(T_8228, 0, 0) @[rocket.scala 478:49]
    node dmem_resp_waddr = bits(io.dmem.resp.bits.tag, 5, 1) @[rocket.scala 479:46]
    node dmem_resp_valid = and(io.dmem.resp.valid, io.dmem.resp.bits.has_data) @[rocket.scala 480:44]
    node dmem_resp_replay = and(dmem_resp_valid, io.dmem.resp.bits.replay) @[rocket.scala 481:42]
    node T_8229 = and(wb_reg_valid, wb_ctrl.wxd) @[rocket.scala 483:39]
    node T_8231 = eq(T_8229, UInt<1>("h00")) @[rocket.scala 483:24]
    div.io.resp.ready <= T_8231 @[rocket.scala 483:21]
    wire ll_wdata : UInt
    ll_wdata is invalid
    ll_wdata <= div.io.resp.bits.data
    wire ll_waddr : UInt
    ll_waddr is invalid
    ll_waddr <= div.io.resp.bits.tag
    node T_8232 = and(div.io.resp.ready, div.io.resp.valid) @[Decoupled.scala 21:42]
    wire ll_wen : UInt<1>
    ll_wen is invalid
    ll_wen <= T_8232
    node T_8233 = and(dmem_resp_replay, dmem_resp_xpu) @[rocket.scala 496:26]
    when T_8233 : @[rocket.scala 496:44]
      div.io.resp.ready <= UInt<1>("h00") @[rocket.scala 497:23]
      ll_waddr <= dmem_resp_waddr @[rocket.scala 500:14]
      ll_wen <= UInt<1>("h01") @[rocket.scala 501:12]
      skip @[rocket.scala 496:44]
    node T_8237 = eq(replay_wb, UInt<1>("h00")) @[rocket.scala 504:34]
    node T_8238 = and(wb_reg_valid, T_8237) @[rocket.scala 504:31]
    node T_8240 = eq(wb_xcpt, UInt<1>("h00")) @[rocket.scala 504:48]
    node wb_valid = and(T_8238, T_8240) @[rocket.scala 504:45]
    node wb_wen = and(wb_valid, wb_ctrl.wxd) @[rocket.scala 505:25]
    node rf_wen = or(wb_wen, ll_wen) @[rocket.scala 506:23]
    node rf_waddr = mux(ll_wen, ll_waddr, wb_waddr) @[rocket.scala 507:21]
    node T_8241 = and(dmem_resp_valid, dmem_resp_xpu) @[rocket.scala 508:38]
    node T_8242 = neq(wb_ctrl.csr, UInt<3>("h00")) @[rocket.scala 510:34]
    node T_8243 = mux(T_8242, csr.io.rw.rdata, wb_reg_wdata) @[rocket.scala 510:21]
    node T_8244 = mux(ll_wen, ll_wdata, T_8243) @[rocket.scala 509:21]
    node rf_wdata = mux(T_8241, io.dmem.resp.bits.data, T_8244) @[rocket.scala 508:21]
    when rf_wen : @[rocket.scala 512:17]
      node T_8246 = neq(rf_waddr, UInt<1>("h00")) @[rocket.scala 116:16]
      when T_8246 : @[rocket.scala 116:29]
        node T_8247 = bits(rf_waddr, 4, 0) @[rocket.scala 105:44]
        node T_8248 = not(T_8247) @[rocket.scala 105:39]
        infer mport T_8249 = T_7386[T_8248], clk
        T_8249 <= rf_wdata @[rocket.scala 117:20]
        node T_8250 = eq(rf_waddr, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 119:20]
        when T_8250 : @[rocket.scala 119:31]
          id_rs_0 <= rf_wdata @[rocket.scala 119:39]
          skip @[rocket.scala 119:31]
        node T_8251 = eq(rf_waddr, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 119:20]
        when T_8251 : @[rocket.scala 119:31]
          id_rs_1 <= rf_wdata @[rocket.scala 119:39]
          skip @[rocket.scala 119:31]
        skip @[rocket.scala 116:29]
      skip @[rocket.scala 512:17]
    csr.io.exception <= wb_reg_xcpt @[rocket.scala 515:20]
    csr.io.cause <= wb_reg_cause @[rocket.scala 516:16]
    csr.io.retire <= wb_valid @[rocket.scala 517:17]
    csr.io.interrupts <- io.interrupts @[rocket.scala 518:21]
    csr.io.hartid <= io.hartid @[rocket.scala 519:17]
    io.fpu.fcsr_rm <= csr.io.fcsr_rm @[rocket.scala 520:18]
    csr.io.fcsr_flags <- io.fpu.fcsr_flags @[rocket.scala 521:21]
    csr.io.rocc.interrupt <= io.rocc.interrupt @[rocket.scala 522:25]
    csr.io.pc <= wb_reg_pc @[rocket.scala 523:13]
    node T_8252 = shr(wb_reg_wdata, 38) @[rocket.scala 702:16]
    node T_8253 = bits(wb_reg_wdata, 39, 38) @[rocket.scala 703:15]
    node T_8254 = asSInt(T_8253) @[rocket.scala 703:39]
    node T_8256 = eq(T_8252, UInt<1>("h00")) @[rocket.scala 705:13]
    node T_8258 = eq(T_8252, UInt<1>("h01")) @[rocket.scala 705:30]
    node T_8259 = or(T_8256, T_8258) @[rocket.scala 705:25]
    node T_8261 = neq(T_8254, asSInt(UInt<1>("h00"))) @[rocket.scala 705:45]
    node T_8262 = asSInt(T_8252) @[rocket.scala 706:13]
    node T_8264 = eq(T_8262, asSInt(UInt<1>("h01"))) @[rocket.scala 706:20]
    node T_8265 = asSInt(T_8252) @[rocket.scala 706:38]
    node T_8267 = eq(T_8265, asSInt(UInt<2>("h02"))) @[rocket.scala 706:45]
    node T_8268 = or(T_8264, T_8267) @[rocket.scala 706:33]
    node T_8270 = eq(T_8254, asSInt(UInt<1>("h01"))) @[rocket.scala 706:61]
    node T_8271 = bits(T_8254, 0, 0) @[rocket.scala 706:76]
    node T_8272 = mux(T_8268, T_8270, T_8271) @[rocket.scala 706:10]
    node T_8273 = mux(T_8259, T_8261, T_8272) @[rocket.scala 705:10]
    node T_8274 = bits(wb_reg_wdata, 38, 0) @[rocket.scala 707:16]
    node T_8275 = cat(T_8273, T_8274) @[Cat.scala 20:58]
    csr.io.badaddr <= T_8275 @[rocket.scala 524:18]
    io.ptw.ptbr <- csr.io.ptbr @[rocket.scala 525:15]
    io.ptw.invalidate <= csr.io.fatc @[rocket.scala 526:21]
    io.ptw.status <- csr.io.status @[rocket.scala 527:17]
    node T_8276 = bits(wb_reg_inst, 31, 20) @[rocket.scala 528:32]
    csr.io.rw.addr <= T_8276 @[rocket.scala 528:18]
    node T_8277 = mux(wb_reg_valid, wb_ctrl.csr, UInt<3>("h00")) @[rocket.scala 529:23]
    csr.io.rw.cmd <= T_8277 @[rocket.scala 529:17]
    csr.io.rw.wdata <= wb_reg_wdata @[rocket.scala 530:19]
    node T_8279 = neq(ibuf.io.inst[0].bits.inst.rs1, UInt<1>("h00")) @[rocket.scala 532:55]
    node T_8280 = and(id_ctrl.rxs1, T_8279) @[rocket.scala 532:42]
    node T_8282 = neq(ibuf.io.inst[0].bits.inst.rs2, UInt<1>("h00")) @[rocket.scala 533:55]
    node T_8283 = and(id_ctrl.rxs2, T_8282) @[rocket.scala 533:42]
    node T_8285 = neq(ibuf.io.inst[0].bits.inst.rd, UInt<1>("h00")) @[rocket.scala 534:55]
    node T_8286 = and(id_ctrl.wxd, T_8285) @[rocket.scala 534:42]
    reg T_8288 : UInt<32>, clk with : (reset => (reset, UInt<32>("h00")))
    node T_8289 = shr(T_8288, 1) @[rocket.scala 718:35]
    node T_8290 = shl(T_8289, 1) @[rocket.scala 718:40]
    node T_8293 = dshl(UInt<1>("h01"), ll_waddr) @[rocket.scala 721:62]
    node T_8295 = mux(ll_wen, T_8293, UInt<1>("h00")) @[rocket.scala 721:49]
    node T_8296 = not(T_8295) @[rocket.scala 713:64]
    node T_8297 = and(T_8290, T_8296) @[rocket.scala 713:62]
    node T_8298 = or(UInt<1>("h00"), ll_wen) @[rocket.scala 724:17]
    when T_8298 : @[rocket.scala 725:18]
      T_8288 <= T_8297 @[rocket.scala 725:23]
      skip @[rocket.scala 725:18]
    node T_8299 = dshr(T_8290, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 714:35]
    node T_8300 = bits(T_8299, 0, 0) @[rocket.scala 714:35]
    node T_8301 = and(T_8280, T_8300) @[rocket.scala 697:27]
    node T_8302 = dshr(T_8290, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 714:35]
    node T_8303 = bits(T_8302, 0, 0) @[rocket.scala 714:35]
    node T_8304 = and(T_8283, T_8303) @[rocket.scala 697:27]
    node T_8305 = dshr(T_8290, ibuf.io.inst[0].bits.inst.rd) @[rocket.scala 714:35]
    node T_8306 = bits(T_8305, 0, 0) @[rocket.scala 714:35]
    node T_8307 = and(T_8286, T_8306) @[rocket.scala 697:27]
    node T_8308 = or(T_8301, T_8304) @[rocket.scala 697:50]
    node id_sboard_hazard = or(T_8308, T_8307) @[rocket.scala 697:50]
    node T_8309 = and(wb_set_sboard, wb_wen) @[rocket.scala 543:28]
    node T_8311 = dshl(UInt<1>("h01"), wb_waddr) @[rocket.scala 721:62]
    node T_8313 = mux(T_8309, T_8311, UInt<1>("h00")) @[rocket.scala 721:49]
    node T_8314 = or(T_8297, T_8313) @[rocket.scala 712:60]
    node T_8315 = or(T_8298, T_8309) @[rocket.scala 724:17]
    when T_8315 : @[rocket.scala 725:18]
      T_8288 <= T_8314 @[rocket.scala 725:23]
      skip @[rocket.scala 725:18]
    node T_8316 = neq(ex_ctrl.csr, UInt<3>("h00")) @[rocket.scala 546:38]
    node T_8317 = or(T_8316, ex_ctrl.jalr) @[rocket.scala 546:48]
    node T_8318 = or(T_8317, ex_ctrl.mem) @[rocket.scala 546:64]
    node T_8319 = or(T_8318, ex_ctrl.div) @[rocket.scala 546:79]
    node T_8320 = or(T_8319, ex_ctrl.fp) @[rocket.scala 546:94]
    node ex_cannot_bypass = or(T_8320, ex_ctrl.rocc) @[rocket.scala 546:108]
    node T_8321 = eq(ibuf.io.inst[0].bits.inst.rs1, ex_waddr) @[rocket.scala 547:70]
    node T_8322 = and(T_8280, T_8321) @[rocket.scala 697:27]
    node T_8323 = eq(ibuf.io.inst[0].bits.inst.rs2, ex_waddr) @[rocket.scala 547:70]
    node T_8324 = and(T_8283, T_8323) @[rocket.scala 697:27]
    node T_8325 = eq(ibuf.io.inst[0].bits.inst.rd, ex_waddr) @[rocket.scala 547:70]
    node T_8326 = and(T_8286, T_8325) @[rocket.scala 697:27]
    node T_8327 = or(T_8322, T_8324) @[rocket.scala 697:50]
    node T_8328 = or(T_8327, T_8326) @[rocket.scala 697:50]
    node data_hazard_ex = and(ex_ctrl.wxd, T_8328) @[rocket.scala 547:36]
    node T_8329 = eq(ibuf.io.inst[0].bits.inst.rs1, ex_waddr) @[rocket.scala 548:76]
    node T_8330 = and(io.fpu.dec.ren1, T_8329) @[rocket.scala 697:27]
    node T_8331 = eq(ibuf.io.inst[0].bits.inst.rs2, ex_waddr) @[rocket.scala 548:76]
    node T_8332 = and(io.fpu.dec.ren2, T_8331) @[rocket.scala 697:27]
    node T_8333 = eq(ibuf.io.inst[0].bits.inst.rs3, ex_waddr) @[rocket.scala 548:76]
    node T_8334 = and(io.fpu.dec.ren3, T_8333) @[rocket.scala 697:27]
    node T_8335 = eq(ibuf.io.inst[0].bits.inst.rd, ex_waddr) @[rocket.scala 548:76]
    node T_8336 = and(io.fpu.dec.wen, T_8335) @[rocket.scala 697:27]
    node T_8337 = or(T_8330, T_8332) @[rocket.scala 697:50]
    node T_8338 = or(T_8337, T_8334) @[rocket.scala 697:50]
    node T_8339 = or(T_8338, T_8336) @[rocket.scala 697:50]
    node fp_data_hazard_ex = and(ex_ctrl.wfd, T_8339) @[rocket.scala 548:39]
    node T_8340 = and(data_hazard_ex, ex_cannot_bypass) @[rocket.scala 549:54]
    node T_8341 = or(T_8340, fp_data_hazard_ex) @[rocket.scala 549:74]
    node id_ex_hazard = and(ex_reg_valid, T_8341) @[rocket.scala 549:35]
    node mem_mem_cmd_bh = and(UInt<1>("h01"), mem_reg_slow_bypass) @[rocket.scala 553:43]
    node T_8343 = neq(mem_ctrl.csr, UInt<3>("h00")) @[rocket.scala 555:40]
    node T_8344 = and(mem_ctrl.mem, mem_mem_cmd_bh) @[rocket.scala 555:66]
    node T_8345 = or(T_8343, T_8344) @[rocket.scala 555:50]
    node T_8346 = or(T_8345, mem_ctrl.div) @[rocket.scala 555:84]
    node T_8347 = or(T_8346, mem_ctrl.fp) @[rocket.scala 555:100]
    node mem_cannot_bypass = or(T_8347, mem_ctrl.rocc) @[rocket.scala 555:115]
    node T_8348 = eq(ibuf.io.inst[0].bits.inst.rs1, mem_waddr) @[rocket.scala 556:72]
    node T_8349 = and(T_8280, T_8348) @[rocket.scala 697:27]
    node T_8350 = eq(ibuf.io.inst[0].bits.inst.rs2, mem_waddr) @[rocket.scala 556:72]
    node T_8351 = and(T_8283, T_8350) @[rocket.scala 697:27]
    node T_8352 = eq(ibuf.io.inst[0].bits.inst.rd, mem_waddr) @[rocket.scala 556:72]
    node T_8353 = and(T_8286, T_8352) @[rocket.scala 697:27]
    node T_8354 = or(T_8349, T_8351) @[rocket.scala 697:50]
    node T_8355 = or(T_8354, T_8353) @[rocket.scala 697:50]
    node data_hazard_mem = and(mem_ctrl.wxd, T_8355) @[rocket.scala 556:38]
    node T_8356 = eq(ibuf.io.inst[0].bits.inst.rs1, mem_waddr) @[rocket.scala 557:78]
    node T_8357 = and(io.fpu.dec.ren1, T_8356) @[rocket.scala 697:27]
    node T_8358 = eq(ibuf.io.inst[0].bits.inst.rs2, mem_waddr) @[rocket.scala 557:78]
    node T_8359 = and(io.fpu.dec.ren2, T_8358) @[rocket.scala 697:27]
    node T_8360 = eq(ibuf.io.inst[0].bits.inst.rs3, mem_waddr) @[rocket.scala 557:78]
    node T_8361 = and(io.fpu.dec.ren3, T_8360) @[rocket.scala 697:27]
    node T_8362 = eq(ibuf.io.inst[0].bits.inst.rd, mem_waddr) @[rocket.scala 557:78]
    node T_8363 = and(io.fpu.dec.wen, T_8362) @[rocket.scala 697:27]
    node T_8364 = or(T_8357, T_8359) @[rocket.scala 697:50]
    node T_8365 = or(T_8364, T_8361) @[rocket.scala 697:50]
    node T_8366 = or(T_8365, T_8363) @[rocket.scala 697:50]
    node fp_data_hazard_mem = and(mem_ctrl.wfd, T_8366) @[rocket.scala 557:41]
    node T_8367 = and(data_hazard_mem, mem_cannot_bypass) @[rocket.scala 558:57]
    node T_8368 = or(T_8367, fp_data_hazard_mem) @[rocket.scala 558:78]
    node id_mem_hazard = and(mem_reg_valid, T_8368) @[rocket.scala 558:37]
    node T_8369 = and(mem_reg_valid, data_hazard_mem) @[rocket.scala 559:32]
    node T_8370 = and(T_8369, mem_ctrl.mem) @[rocket.scala 559:51]
    id_load_use <= T_8370 @[rocket.scala 559:15]
    node T_8371 = eq(ibuf.io.inst[0].bits.inst.rs1, wb_waddr) @[rocket.scala 562:70]
    node T_8372 = and(T_8280, T_8371) @[rocket.scala 697:27]
    node T_8373 = eq(ibuf.io.inst[0].bits.inst.rs2, wb_waddr) @[rocket.scala 562:70]
    node T_8374 = and(T_8283, T_8373) @[rocket.scala 697:27]
    node T_8375 = eq(ibuf.io.inst[0].bits.inst.rd, wb_waddr) @[rocket.scala 562:70]
    node T_8376 = and(T_8286, T_8375) @[rocket.scala 697:27]
    node T_8377 = or(T_8372, T_8374) @[rocket.scala 697:50]
    node T_8378 = or(T_8377, T_8376) @[rocket.scala 697:50]
    node data_hazard_wb = and(wb_ctrl.wxd, T_8378) @[rocket.scala 562:36]
    node T_8379 = eq(ibuf.io.inst[0].bits.inst.rs1, wb_waddr) @[rocket.scala 563:76]
    node T_8380 = and(io.fpu.dec.ren1, T_8379) @[rocket.scala 697:27]
    node T_8381 = eq(ibuf.io.inst[0].bits.inst.rs2, wb_waddr) @[rocket.scala 563:76]
    node T_8382 = and(io.fpu.dec.ren2, T_8381) @[rocket.scala 697:27]
    node T_8383 = eq(ibuf.io.inst[0].bits.inst.rs3, wb_waddr) @[rocket.scala 563:76]
    node T_8384 = and(io.fpu.dec.ren3, T_8383) @[rocket.scala 697:27]
    node T_8385 = eq(ibuf.io.inst[0].bits.inst.rd, wb_waddr) @[rocket.scala 563:76]
    node T_8386 = and(io.fpu.dec.wen, T_8385) @[rocket.scala 697:27]
    node T_8387 = or(T_8380, T_8382) @[rocket.scala 697:50]
    node T_8388 = or(T_8387, T_8384) @[rocket.scala 697:50]
    node T_8389 = or(T_8388, T_8386) @[rocket.scala 697:50]
    node fp_data_hazard_wb = and(wb_ctrl.wfd, T_8389) @[rocket.scala 563:39]
    node T_8390 = and(data_hazard_wb, wb_set_sboard) @[rocket.scala 564:54]
    node T_8391 = or(T_8390, fp_data_hazard_wb) @[rocket.scala 564:71]
    node id_wb_hazard = and(wb_reg_valid, T_8391) @[rocket.scala 564:35]
    reg T_8393 : UInt<32>, clk with : (reset => (reset, UInt<32>("h00")))
    node T_8395 = and(wb_dcache_miss, wb_ctrl.wfd) @[rocket.scala 568:35]
    node T_8396 = or(T_8395, io.fpu.sboard_set) @[rocket.scala 568:50]
    node T_8397 = and(T_8396, wb_valid) @[rocket.scala 568:72]
    node T_8399 = dshl(UInt<1>("h01"), wb_waddr) @[rocket.scala 721:62]
    node T_8401 = mux(T_8397, T_8399, UInt<1>("h00")) @[rocket.scala 721:49]
    node T_8402 = or(T_8393, T_8401) @[rocket.scala 712:60]
    node T_8403 = or(UInt<1>("h00"), T_8397) @[rocket.scala 724:17]
    when T_8403 : @[rocket.scala 725:18]
      T_8393 <= T_8402 @[rocket.scala 725:23]
      skip @[rocket.scala 725:18]
    node T_8404 = and(dmem_resp_replay, dmem_resp_fpu) @[rocket.scala 569:38]
    node T_8406 = dshl(UInt<1>("h01"), dmem_resp_waddr) @[rocket.scala 721:62]
    node T_8408 = mux(T_8404, T_8406, UInt<1>("h00")) @[rocket.scala 721:49]
    node T_8409 = not(T_8408) @[rocket.scala 713:64]
    node T_8410 = and(T_8402, T_8409) @[rocket.scala 713:62]
    node T_8411 = or(T_8403, T_8404) @[rocket.scala 724:17]
    when T_8411 : @[rocket.scala 725:18]
      T_8393 <= T_8410 @[rocket.scala 725:23]
      skip @[rocket.scala 725:18]
    node T_8413 = dshl(UInt<1>("h01"), io.fpu.sboard_clra) @[rocket.scala 721:62]
    node T_8415 = mux(io.fpu.sboard_clr, T_8413, UInt<1>("h00")) @[rocket.scala 721:49]
    node T_8416 = not(T_8415) @[rocket.scala 713:64]
    node T_8417 = and(T_8410, T_8416) @[rocket.scala 713:62]
    node T_8418 = or(T_8411, io.fpu.sboard_clr) @[rocket.scala 724:17]
    when T_8418 : @[rocket.scala 725:18]
      T_8393 <= T_8417 @[rocket.scala 725:23]
      skip @[rocket.scala 725:18]
    node T_8420 = eq(io.fpu.fcsr_rdy, UInt<1>("h00")) @[rocket.scala 572:18]
    node T_8421 = and(id_csr_en, T_8420) @[rocket.scala 572:15]
    node T_8422 = dshr(T_8393, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 714:35]
    node T_8423 = bits(T_8422, 0, 0) @[rocket.scala 714:35]
    node T_8424 = and(io.fpu.dec.ren1, T_8423) @[rocket.scala 697:27]
    node T_8425 = dshr(T_8393, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 714:35]
    node T_8426 = bits(T_8425, 0, 0) @[rocket.scala 714:35]
    node T_8427 = and(io.fpu.dec.ren2, T_8426) @[rocket.scala 697:27]
    node T_8428 = dshr(T_8393, ibuf.io.inst[0].bits.inst.rs3) @[rocket.scala 714:35]
    node T_8429 = bits(T_8428, 0, 0) @[rocket.scala 714:35]
    node T_8430 = and(io.fpu.dec.ren3, T_8429) @[rocket.scala 697:27]
    node T_8431 = dshr(T_8393, ibuf.io.inst[0].bits.inst.rd) @[rocket.scala 714:35]
    node T_8432 = bits(T_8431, 0, 0) @[rocket.scala 714:35]
    node T_8433 = and(io.fpu.dec.wen, T_8432) @[rocket.scala 697:27]
    node T_8434 = or(T_8424, T_8427) @[rocket.scala 697:50]
    node T_8435 = or(T_8434, T_8430) @[rocket.scala 697:50]
    node T_8436 = or(T_8435, T_8433) @[rocket.scala 697:50]
    node id_stall_fpu = or(T_8421, T_8436) @[rocket.scala 572:35]
    reg dcache_blocked : UInt<1>, clk
    node T_8439 = eq(io.dmem.req.ready, UInt<1>("h00")) @[rocket.scala 576:21]
    node T_8440 = or(io.dmem.req.valid, dcache_blocked) @[rocket.scala 576:62]
    node T_8441 = and(T_8439, T_8440) @[rocket.scala 576:40]
    dcache_blocked <= T_8441 @[rocket.scala 576:18]
    reg rocc_blocked : UInt<1>, clk
    node T_8444 = eq(wb_reg_xcpt, UInt<1>("h00")) @[rocket.scala 578:19]
    node T_8446 = eq(io.rocc.cmd.ready, UInt<1>("h00")) @[rocket.scala 578:35]
    node T_8447 = and(T_8444, T_8446) @[rocket.scala 578:32]
    node T_8448 = or(io.rocc.cmd.valid, rocc_blocked) @[rocket.scala 578:76]
    node T_8449 = and(T_8447, T_8448) @[rocket.scala 578:54]
    rocc_blocked <= T_8449 @[rocket.scala 578:16]
    node T_8450 = or(id_ex_hazard, id_mem_hazard) @[rocket.scala 581:18]
    node T_8451 = or(T_8450, id_wb_hazard) @[rocket.scala 581:35]
    node T_8452 = or(T_8451, id_sboard_hazard) @[rocket.scala 581:51]
    node T_8453 = and(id_ctrl.fp, id_stall_fpu) @[rocket.scala 582:16]
    node T_8454 = or(T_8452, T_8453) @[rocket.scala 581:71]
    node T_8455 = and(id_ctrl.mem, dcache_blocked) @[rocket.scala 583:17]
    node T_8456 = or(T_8454, T_8455) @[rocket.scala 582:32]
    node T_8457 = and(id_ctrl.rocc, rocc_blocked) @[rocket.scala 584:18]
    node T_8458 = or(T_8456, T_8457) @[rocket.scala 583:35]
    node T_8459 = or(T_8458, id_do_fence) @[rocket.scala 584:34]
    node ctrl_stalld = or(T_8459, csr.io.csr_stall) @[rocket.scala 585:17]
    node T_8461 = eq(ibuf.io.inst[0].valid, UInt<1>("h00")) @[rocket.scala 587:17]
    node T_8462 = or(T_8461, ibuf.io.inst[0].bits.replay) @[rocket.scala 587:40]
    node T_8463 = or(T_8462, take_pc_mem_wb) @[rocket.scala 587:71]
    node T_8464 = or(T_8463, ctrl_stalld) @[rocket.scala 587:89]
    node T_8465 = or(T_8464, csr.io.interrupt) @[rocket.scala 587:104]
    ctrl_killd <= T_8465 @[rocket.scala 587:14]
    io.imem.req.valid <= take_pc @[rocket.scala 589:21]
    node T_8467 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 590:35]
    io.imem.req.bits.speculative <= T_8467 @[rocket.scala 590:32]
    node T_8468 = or(wb_xcpt, csr.io.eret) @[rocket.scala 592:17]
    node T_8470 = or(take_pc_mem, UInt<1>("h01")) @[rocket.scala 594:21]
    node T_8471 = mux(T_8470, mem_npc, id_npc) @[rocket.scala 594:8]
    node T_8472 = mux(replay_wb, wb_reg_pc, T_8471) @[rocket.scala 593:8]
    node T_8473 = mux(T_8468, csr.io.evec, T_8472) @[rocket.scala 592:8]
    io.imem.req.bits.pc <= T_8473 @[rocket.scala 591:23]
    node T_8474 = and(wb_reg_valid, wb_ctrl.fence_i) @[rocket.scala 596:40]
    node T_8476 = eq(io.dmem.s2_nack, UInt<1>("h00")) @[rocket.scala 596:62]
    node T_8477 = and(T_8474, T_8476) @[rocket.scala 596:59]
    io.imem.flush_icache <= T_8477 @[rocket.scala 596:24]
    io.imem.flush_tlb <= csr.io.fatc @[rocket.scala 597:21]
    node T_8479 = eq(ctrl_stalld, UInt<1>("h00")) @[rocket.scala 599:28]
    node T_8480 = or(T_8479, csr.io.interrupt) @[rocket.scala 599:41]
    ibuf.io.inst[0].ready <= T_8480 @[rocket.scala 599:25]
    node T_8481 = and(mem_reg_replay, mem_reg_btb_hit) @[rocket.scala 601:47]
    node T_8483 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 601:88]
    node T_8484 = and(mem_reg_valid, T_8483) @[rocket.scala 601:85]
    node T_8486 = eq(mem_cfi, UInt<1>("h00")) @[rocket.scala 601:123]
    node T_8487 = or(mem_cfi_taken, T_8486) @[rocket.scala 601:120]
    node T_8488 = and(T_8487, mem_wrong_npc) @[rocket.scala 601:133]
    node T_8490 = and(UInt<1>("h00"), mem_ctrl.jal) @[rocket.scala 601:169]
    node T_8492 = eq(mem_reg_btb_hit, UInt<1>("h00")) @[rocket.scala 601:188]
    node T_8493 = and(T_8490, T_8492) @[rocket.scala 601:185]
    node T_8494 = or(T_8488, T_8493) @[rocket.scala 601:151]
    node T_8495 = and(T_8484, T_8494) @[rocket.scala 601:100]
    node T_8496 = or(T_8481, T_8495) @[rocket.scala 601:67]
    io.imem.btb_update.valid <= T_8496 @[rocket.scala 601:28]
    node T_8498 = eq(mem_reg_replay, UInt<1>("h00")) @[rocket.scala 602:38]
    node T_8499 = and(T_8498, mem_cfi) @[rocket.scala 602:54]
    io.imem.btb_update.bits.isValid <= T_8499 @[rocket.scala 602:35]
    node T_8500 = or(mem_ctrl.jal, mem_ctrl.jalr) @[rocket.scala 603:50]
    io.imem.btb_update.bits.isJump <= T_8500 @[rocket.scala 603:34]
    node T_8501 = bits(mem_reg_inst, 19, 15) @[rocket.scala 604:68]
    node T_8504 = and(T_8501, UInt<5>("h019")) @[rocket.scala 604:76]
    node T_8505 = eq(UInt<5>("h01"), T_8504) @[rocket.scala 604:76]
    node T_8506 = and(mem_ctrl.jalr, T_8505) @[rocket.scala 604:53]
    io.imem.btb_update.bits.isReturn <= T_8506 @[rocket.scala 604:36]
    io.imem.btb_update.bits.target <= io.imem.req.bits.pc @[rocket.scala 605:34]
    node T_8509 = mux(mem_reg_rvc, UInt<1>("h00"), UInt<2>("h02")) @[rocket.scala 606:74]
    node T_8510 = add(mem_reg_pc, T_8509) @[rocket.scala 606:69]
    node T_8511 = tail(T_8510, 1) @[rocket.scala 606:69]
    io.imem.btb_update.bits.br_pc <= T_8511 @[rocket.scala 606:33]
    node T_8512 = not(io.imem.btb_update.bits.br_pc) @[rocket.scala 607:35]
    node T_8514 = or(T_8512, UInt<2>("h03")) @[rocket.scala 607:66]
    node T_8515 = not(T_8514) @[rocket.scala 607:33]
    io.imem.btb_update.bits.pc <= T_8515 @[rocket.scala 607:30]
    io.imem.btb_update.bits.prediction.valid <= mem_reg_btb_hit @[rocket.scala 608:44]
    io.imem.btb_update.bits.prediction.bits <- mem_reg_btb_resp @[rocket.scala 609:43]
    node T_8517 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 611:48]
    node T_8518 = and(mem_reg_valid, T_8517) @[rocket.scala 611:45]
    node T_8519 = and(T_8518, mem_ctrl.branch) @[rocket.scala 611:60]
    io.imem.bht_update.valid <= T_8519 @[rocket.scala 611:28]
    io.imem.bht_update.bits.pc <= io.imem.btb_update.bits.pc @[rocket.scala 612:30]
    io.imem.bht_update.bits.taken <= mem_br_taken @[rocket.scala 613:33]
    io.imem.bht_update.bits.mispredict <= mem_wrong_npc @[rocket.scala 614:38]
    io.imem.bht_update.bits.prediction <- io.imem.btb_update.bits.prediction @[rocket.scala 615:38]
    node T_8521 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 617:48]
    node T_8522 = and(mem_reg_valid, T_8521) @[rocket.scala 617:45]
    io.imem.ras_update.valid <= T_8522 @[rocket.scala 617:28]
    io.imem.ras_update.bits.returnAddr <= mem_int_wdata @[rocket.scala 618:38]
    node T_8523 = bits(mem_waddr, 0, 0) @[rocket.scala 619:80]
    node T_8524 = and(io.imem.btb_update.bits.isJump, T_8523) @[rocket.scala 619:68]
    io.imem.ras_update.bits.isCall <= T_8524 @[rocket.scala 619:34]
    io.imem.ras_update.bits.isReturn <= io.imem.btb_update.bits.isReturn @[rocket.scala 620:36]
    io.imem.ras_update.bits.prediction <- io.imem.btb_update.bits.prediction @[rocket.scala 621:38]
    node T_8526 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 623:19]
    node T_8527 = and(T_8526, id_ctrl.fp) @[rocket.scala 623:31]
    io.fpu.valid <= T_8527 @[rocket.scala 623:16]
    io.fpu.killx <= ctrl_killx @[rocket.scala 624:16]
    io.fpu.killm <= killm_common @[rocket.scala 625:16]
    io.fpu.inst <= ibuf.io.inst[0].bits.inst.bits @[rocket.scala 626:15]
    io.fpu.fromint_data <= ex_rs_0 @[rocket.scala 627:23]
    node T_8528 = and(dmem_resp_valid, dmem_resp_fpu) @[rocket.scala 628:43]
    io.fpu.dmem_resp_val <= T_8528 @[rocket.scala 628:24]
    io.fpu.dmem_resp_data <= io.dmem.resp.bits.data_word_bypass @[rocket.scala 629:25]
    io.fpu.dmem_resp_type <= io.dmem.resp.bits.typ @[rocket.scala 630:25]
    io.fpu.dmem_resp_tag <= dmem_resp_waddr @[rocket.scala 631:24]
    node T_8529 = and(ex_reg_valid, ex_ctrl.mem) @[rocket.scala 633:41]
    io.dmem.req.valid <= T_8529 @[rocket.scala 633:25]
    node ex_dcache_tag = cat(ex_waddr, ex_ctrl.fp) @[Cat.scala 20:58]
    io.dmem.req.bits.tag <= ex_dcache_tag @[rocket.scala 636:25]
    io.dmem.req.bits.cmd <= ex_ctrl.mem_cmd @[rocket.scala 637:25]
    io.dmem.req.bits.typ <= ex_ctrl.mem_type @[rocket.scala 638:25]
    io.dmem.req.bits.phys <= UInt<1>("h00") @[rocket.scala 639:25]
    node T_8531 = shr(ex_rs_0, 38) @[rocket.scala 702:16]
    node T_8532 = bits(alu.io.adder_out, 39, 38) @[rocket.scala 703:15]
    node T_8533 = asSInt(T_8532) @[rocket.scala 703:39]
    node T_8535 = eq(T_8531, UInt<1>("h00")) @[rocket.scala 705:13]
    node T_8537 = eq(T_8531, UInt<1>("h01")) @[rocket.scala 705:30]
    node T_8538 = or(T_8535, T_8537) @[rocket.scala 705:25]
    node T_8540 = neq(T_8533, asSInt(UInt<1>("h00"))) @[rocket.scala 705:45]
    node T_8541 = asSInt(T_8531) @[rocket.scala 706:13]
    node T_8543 = eq(T_8541, asSInt(UInt<1>("h01"))) @[rocket.scala 706:20]
    node T_8544 = asSInt(T_8531) @[rocket.scala 706:38]
    node T_8546 = eq(T_8544, asSInt(UInt<2>("h02"))) @[rocket.scala 706:45]
    node T_8547 = or(T_8543, T_8546) @[rocket.scala 706:33]
    node T_8549 = eq(T_8533, asSInt(UInt<1>("h01"))) @[rocket.scala 706:61]
    node T_8550 = bits(T_8533, 0, 0) @[rocket.scala 706:76]
    node T_8551 = mux(T_8547, T_8549, T_8550) @[rocket.scala 706:10]
    node T_8552 = mux(T_8538, T_8540, T_8551) @[rocket.scala 705:10]
    node T_8553 = bits(alu.io.adder_out, 38, 0) @[rocket.scala 707:16]
    node T_8554 = cat(T_8552, T_8553) @[Cat.scala 20:58]
    io.dmem.req.bits.addr <= T_8554 @[rocket.scala 640:25]
    io.dmem.invalidate_lr <= wb_xcpt @[rocket.scala 641:25]
    node T_8555 = mux(mem_ctrl.fp, io.fpu.store_data, mem_reg_rs2) @[rocket.scala 642:25]
    io.dmem.s1_data <= T_8555 @[rocket.scala 642:19]
    node T_8556 = or(killm_common, mem_breakpoint) @[rocket.scala 643:35]
    io.dmem.s1_kill <= T_8556 @[rocket.scala 643:19]
    node T_8557 = and(mem_ctrl.mem, mem_xcpt) @[rocket.scala 644:22]
    node T_8559 = eq(io.dmem.s1_kill, UInt<1>("h00")) @[rocket.scala 644:37]
    node T_8560 = and(T_8557, T_8559) @[rocket.scala 644:34]
    when T_8560 : @[rocket.scala 644:55]
      node T_8561 = cat(io.dmem.xcpt.pf.ld, io.dmem.xcpt.pf.st) @[rocket.scala 645:25]
      node T_8562 = cat(io.dmem.xcpt.ma.ld, io.dmem.xcpt.ma.st) @[rocket.scala 645:25]
      node T_8563 = cat(T_8562, T_8561) @[rocket.scala 645:25]
      node T_8565 = neq(T_8563, UInt<1>("h00")) @[rocket.scala 645:32]
      node T_8566 = or(T_8565, reset) @[rocket.scala 645:11]
      node T_8568 = eq(T_8566, UInt<1>("h00")) @[rocket.scala 645:11]
      when T_8568 : @[rocket.scala 645:11]
        printf(clk, UInt<1>(1), "Assertion failed\n    at rocket.scala:645 assert(io.dmem.xcpt.asUInt.orR) // make sure s1_kill is exhaustive\n") @[rocket.scala 645:11]
        stop(clk, UInt<1>(1), 1) @[rocket.scala 645:11]
        skip @[rocket.scala 645:11]
      skip @[rocket.scala 644:55]
    node T_8569 = and(wb_reg_valid, wb_ctrl.rocc) @[rocket.scala 648:37]
    node T_8571 = eq(replay_wb_common, UInt<1>("h00")) @[rocket.scala 648:56]
    node T_8572 = and(T_8569, T_8571) @[rocket.scala 648:53]
    io.rocc.cmd.valid <= T_8572 @[rocket.scala 648:21]
    node T_8574 = neq(csr.io.status.xs, UInt<1>("h00")) @[rocket.scala 649:52]
    node T_8575 = and(wb_xcpt, T_8574) @[rocket.scala 649:32]
    io.rocc.exception <= T_8575 @[rocket.scala 649:21]
    io.rocc.cmd.bits.status <- csr.io.status @[rocket.scala 650:27]
    wire T_8594 : {funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>} @[rocket.scala 651:58]
    T_8594 is invalid @[rocket.scala 651:58]
    wire T_8604 : UInt<32>
    T_8604 is invalid
    T_8604 <= wb_reg_inst
    node T_8605 = bits(T_8604, 6, 0) @[rocket.scala 651:58]
    T_8594.opcode <= T_8605 @[rocket.scala 651:58]
    node T_8606 = bits(T_8604, 11, 7) @[rocket.scala 651:58]
    T_8594.rd <= T_8606 @[rocket.scala 651:58]
    node T_8607 = bits(T_8604, 12, 12) @[rocket.scala 651:58]
    T_8594.xs2 <= T_8607 @[rocket.scala 651:58]
    node T_8608 = bits(T_8604, 13, 13) @[rocket.scala 651:58]
    T_8594.xs1 <= T_8608 @[rocket.scala 651:58]
    node T_8609 = bits(T_8604, 14, 14) @[rocket.scala 651:58]
    T_8594.xd <= T_8609 @[rocket.scala 651:58]
    node T_8610 = bits(T_8604, 19, 15) @[rocket.scala 651:58]
    T_8594.rs1 <= T_8610 @[rocket.scala 651:58]
    node T_8611 = bits(T_8604, 24, 20) @[rocket.scala 651:58]
    T_8594.rs2 <= T_8611 @[rocket.scala 651:58]
    node T_8612 = bits(T_8604, 31, 25) @[rocket.scala 651:58]
    T_8594.funct <= T_8612 @[rocket.scala 651:58]
    io.rocc.cmd.bits.inst <- T_8594 @[rocket.scala 651:25]
    io.rocc.cmd.bits.rs1 <= wb_reg_wdata @[rocket.scala 652:24]
    io.rocc.cmd.bits.rs2 <= wb_reg_rs2 @[rocket.scala 653:24]
    node T_8613 = bits(csr.io.time, 31, 0) @[rocket.scala 686:32]
    node T_8615 = mux(rf_wen, rf_waddr, UInt<1>("h00")) @[rocket.scala 687:13]
    node T_8616 = bits(wb_reg_inst, 19, 15) @[rocket.scala 688:21]
    reg T_8617 : UInt, clk
    T_8617 <= ex_rs_0
    reg T_8618 : UInt, clk
    T_8618 <= T_8617
    node T_8619 = bits(wb_reg_inst, 24, 20) @[rocket.scala 689:21]
    reg T_8620 : UInt, clk
    T_8620 <= ex_rs_1
    reg T_8621 : UInt, clk
    T_8621 <= T_8620
    node T_8623 = eq(reset, UInt<1>("h00")) @[rocket.scala 685:11]
    when T_8623 : @[rocket.scala 685:11]
      printf(clk, UInt<1>(1), "C%d: %d [%d] pc=[%x] W[r%d=%x][%d] R[r%d=%x] R[r%d=%x] inst=[%x] DASM(%x)\n", io.hartid, T_8613, wb_valid, wb_reg_pc, T_8615, rf_wdata, rf_wen, T_8616, T_8618, T_8619, T_8621, wb_reg_inst, wb_reg_inst) @[rocket.scala 685:11]
      skip @[rocket.scala 685:11]
    
  module FlowThroughSerializer : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, cnt : UInt<1>, done : UInt<1>}
    
    io is invalid
    io.out <- io.in @[Serializer.scala 19:12]
    io.cnt <= UInt<1>("h00") @[Serializer.scala 20:12]
    io.done <= UInt<1>("h01") @[Serializer.scala 21:13]
    
  module ICache : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {valid : UInt<1>, bits : {addr : UInt<39>}}, flip s1_ppn : UInt<20>, flip s1_kill : UInt<1>, flip s2_kill : UInt<1>, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<16>, datablock : UInt<64>}}, flip invalidate : UInt<1>, mem : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    reg state : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg invalidated : UInt<1>, clk
    node stall = eq(io.resp.ready, UInt<1>("h00")) @[icache.scala 44:15]
    wire rdy : UInt<1> @[icache.scala 45:17]
    rdy is invalid @[icache.scala 45:17]
    reg refill_addr : UInt<32>, clk
    wire s1_any_tag_hit : UInt<1> @[icache.scala 48:28]
    s1_any_tag_hit is invalid @[icache.scala 48:28]
    reg s1_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg s1_vaddr : UInt, clk
    node T_827 = bits(s1_vaddr, 11, 0) @[icache.scala 52:41]
    node s1_paddr = cat(io.s1_ppn, T_827) @[Cat.scala 20:58]
    node s1_tag = bits(s1_paddr, 31, 12) @[icache.scala 53:24]
    node T_828 = and(s1_valid, stall) @[icache.scala 55:43]
    node s0_valid = or(io.req.valid, T_828) @[icache.scala 55:31]
    node T_829 = and(s1_valid, stall) @[icache.scala 56:31]
    node s0_vaddr = mux(T_829, s1_vaddr, io.req.bits.addr) @[icache.scala 56:21]
    node T_830 = and(io.req.valid, rdy) @[icache.scala 58:28]
    node T_831 = and(s1_valid, stall) @[icache.scala 58:47]
    node T_833 = eq(io.s1_kill, UInt<1>("h00")) @[icache.scala 58:59]
    node T_834 = and(T_831, T_833) @[icache.scala 58:56]
    node T_835 = or(T_830, T_834) @[icache.scala 58:35]
    s1_valid <= T_835 @[icache.scala 58:12]
    node T_836 = and(io.req.valid, rdy) @[icache.scala 59:22]
    when T_836 : @[icache.scala 59:30]
      s1_vaddr <= io.req.bits.addr @[icache.scala 60:14]
      skip @[icache.scala 59:30]
    node T_838 = eq(io.s1_kill, UInt<1>("h00")) @[icache.scala 63:31]
    node T_839 = and(s1_valid, T_838) @[icache.scala 63:28]
    node T_840 = eq(state, UInt<2>("h00")) @[icache.scala 63:52]
    node out_valid = and(T_839, T_840) @[icache.scala 63:43]
    node s1_idx = bits(s1_vaddr, 11, 6) @[icache.scala 64:24]
    node s1_hit = and(out_valid, s1_any_tag_hit) @[icache.scala 65:26]
    node T_842 = eq(s1_any_tag_hit, UInt<1>("h00")) @[icache.scala 66:30]
    node s1_miss = and(out_valid, T_842) @[icache.scala 66:27]
    node T_843 = eq(state, UInt<2>("h00")) @[icache.scala 67:16]
    node T_845 = eq(s1_miss, UInt<1>("h00")) @[icache.scala 67:31]
    node T_846 = and(T_843, T_845) @[icache.scala 67:28]
    rdy <= T_846 @[icache.scala 67:7]
    node T_847 = eq(state, UInt<2>("h00")) @[icache.scala 69:26]
    node T_848 = and(s1_miss, T_847) @[icache.scala 69:17]
    when T_848 : @[icache.scala 69:39]
      refill_addr <= s1_paddr @[icache.scala 70:17]
      skip @[icache.scala 69:39]
    node refill_tag = bits(refill_addr, 31, 12) @[icache.scala 72:31]
    inst FlowThroughSerializer_1 of FlowThroughSerializer @[Serializer.scala 63:20]
    FlowThroughSerializer_1.io is invalid
    FlowThroughSerializer_1.clk <= clk
    FlowThroughSerializer_1.reset <= reset
    FlowThroughSerializer_1.io.in.valid <= io.mem.grant.valid @[Serializer.scala 64:20]
    FlowThroughSerializer_1.io.in.bits <- io.mem.grant.bits @[Serializer.scala 65:19]
    io.mem.grant.ready <= FlowThroughSerializer_1.io.in.ready @[Serializer.scala 66:14]
    node T_849 = and(FlowThroughSerializer_1.io.out.ready, FlowThroughSerializer_1.io.out.valid) @[Decoupled.scala 21:42]
    reg refill_cnt : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_849 : @[Counter.scala 43:17]
      node T_852 = eq(refill_cnt, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_854 = add(refill_cnt, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_855 = tail(T_854, 1) @[Counter.scala 21:22]
      refill_cnt <= T_855 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node refill_wrap = and(T_849, T_852) @[Counter.scala 44:20]
    node T_856 = eq(state, UInt<2>("h03")) @[icache.scala 76:27]
    node refill_done = and(T_856, refill_wrap) @[icache.scala 76:40]
    FlowThroughSerializer_1.io.out.ready <= UInt<1>("h01") @[icache.scala 77:22]
    reg T_859 : UInt<16>, clk with : (reset => (reset, UInt<16>("h01")))
    when s1_miss : @[LFSR.scala 19:22]
      node T_860 = bits(T_859, 0, 0) @[LFSR.scala 19:40]
      node T_861 = bits(T_859, 2, 2) @[LFSR.scala 19:48]
      node T_862 = xor(T_860, T_861) @[LFSR.scala 19:43]
      node T_863 = bits(T_859, 3, 3) @[LFSR.scala 19:56]
      node T_864 = xor(T_862, T_863) @[LFSR.scala 19:51]
      node T_865 = bits(T_859, 5, 5) @[LFSR.scala 19:64]
      node T_866 = xor(T_864, T_865) @[LFSR.scala 19:59]
      node T_867 = bits(T_859, 15, 1) @[LFSR.scala 19:73]
      node T_868 = cat(T_866, T_867) @[Cat.scala 20:58]
      T_859 <= T_868 @[LFSR.scala 19:29]
      skip @[LFSR.scala 19:22]
    node repl_way = bits(T_859, 1, 0) @[icache.scala 79:56]
    smem tag_array : UInt<20>[4][64] @[icache.scala 81:25]
    node T_877 = bits(s0_vaddr, 11, 6) @[icache.scala 82:42]
    node T_879 = eq(refill_done, UInt<1>("h00")) @[icache.scala 82:70]
    node T_880 = and(T_879, s0_valid) @[icache.scala 82:83]
    wire T_882 : UInt
    T_882 is invalid
    when T_880 :
      T_882 <= T_877
      skip
    read mport tag_rdata = tag_array[T_882], clk
    when refill_done : @[icache.scala 83:22]
      wire T_891 : UInt<20>[4] @[icache.scala 85:44]
      T_891 is invalid @[icache.scala 85:44]
      T_891[0] <= refill_tag @[icache.scala 85:44]
      T_891[1] <= refill_tag @[icache.scala 85:44]
      T_891[2] <= refill_tag @[icache.scala 85:44]
      T_891[3] <= refill_tag @[icache.scala 85:44]
      node T_894 = eq(repl_way, UInt<1>("h00")) @[icache.scala 85:80]
      node T_896 = eq(repl_way, UInt<1>("h01")) @[icache.scala 85:80]
      node T_898 = eq(repl_way, UInt<2>("h02")) @[icache.scala 85:80]
      node T_900 = eq(repl_way, UInt<2>("h03")) @[icache.scala 85:80]
      wire T_906 : UInt<1>[4] @[icache.scala 85:70]
      T_906 is invalid @[icache.scala 85:70]
      T_906[0] <= T_894 @[icache.scala 85:70]
      T_906[1] <= T_896 @[icache.scala 85:70]
      T_906[2] <= T_898 @[icache.scala 85:70]
      T_906[3] <= T_900 @[icache.scala 85:70]
      write mport T_910 = tag_array[s1_idx], clk
      when T_906[0] :
        T_910[0] <= T_891[0]
        skip
      when T_906[1] :
        T_910[1] <= T_891[1]
        skip
      when T_906[2] :
        T_910[2] <= T_891[2]
        skip
      when T_906[3] :
        T_910[3] <= T_891[3]
        skip
      skip @[icache.scala 83:22]
    reg vb_array : UInt<256>, clk with : (reset => (reset, UInt<256>("h00")))
    node T_914 = eq(invalidated, UInt<1>("h00")) @[icache.scala 89:24]
    node T_915 = and(refill_done, T_914) @[icache.scala 89:21]
    when T_915 : @[icache.scala 89:38]
      node T_916 = cat(repl_way, s1_idx) @[Cat.scala 20:58]
      node T_919 = dshl(UInt<1>("h01"), T_916) @[icache.scala 90:32]
      node T_920 = or(vb_array, T_919) @[icache.scala 90:32]
      node T_921 = not(vb_array) @[icache.scala 90:32]
      node T_922 = or(T_921, T_919) @[icache.scala 90:32]
      node T_923 = not(T_922) @[icache.scala 90:32]
      node T_924 = mux(UInt<1>("h01"), T_920, T_923) @[icache.scala 90:32]
      vb_array <= T_924 @[icache.scala 90:14]
      skip @[icache.scala 89:38]
    when io.invalidate : @[icache.scala 92:24]
      vb_array <= UInt<1>("h00") @[icache.scala 93:14]
      invalidated <= UInt<1>("h01") @[icache.scala 94:17]
      skip @[icache.scala 92:24]
    wire s1_disparity : UInt<1>[4] @[icache.scala 96:26]
    s1_disparity is invalid @[icache.scala 96:26]
    node T_934 = and(s1_valid, s1_disparity[0]) @[icache.scala 98:20]
    when T_934 : @[icache.scala 98:40]
      node T_936 = cat(UInt<1>("h00"), s1_idx) @[Cat.scala 20:58]
      node T_939 = dshl(UInt<1>("h01"), T_936) @[icache.scala 98:69]
      node T_940 = or(vb_array, T_939) @[icache.scala 98:69]
      node T_941 = not(vb_array) @[icache.scala 98:69]
      node T_942 = or(T_941, T_939) @[icache.scala 98:69]
      node T_943 = not(T_942) @[icache.scala 98:69]
      node T_944 = mux(UInt<1>("h00"), T_940, T_943) @[icache.scala 98:69]
      vb_array <= T_944 @[icache.scala 98:51]
      skip @[icache.scala 98:40]
    node T_945 = and(s1_valid, s1_disparity[1]) @[icache.scala 98:20]
    when T_945 : @[icache.scala 98:40]
      node T_947 = cat(UInt<1>("h01"), s1_idx) @[Cat.scala 20:58]
      node T_950 = dshl(UInt<1>("h01"), T_947) @[icache.scala 98:69]
      node T_951 = or(vb_array, T_950) @[icache.scala 98:69]
      node T_952 = not(vb_array) @[icache.scala 98:69]
      node T_953 = or(T_952, T_950) @[icache.scala 98:69]
      node T_954 = not(T_953) @[icache.scala 98:69]
      node T_955 = mux(UInt<1>("h00"), T_951, T_954) @[icache.scala 98:69]
      vb_array <= T_955 @[icache.scala 98:51]
      skip @[icache.scala 98:40]
    node T_956 = and(s1_valid, s1_disparity[2]) @[icache.scala 98:20]
    when T_956 : @[icache.scala 98:40]
      node T_958 = cat(UInt<2>("h02"), s1_idx) @[Cat.scala 20:58]
      node T_961 = dshl(UInt<1>("h01"), T_958) @[icache.scala 98:69]
      node T_962 = or(vb_array, T_961) @[icache.scala 98:69]
      node T_963 = not(vb_array) @[icache.scala 98:69]
      node T_964 = or(T_963, T_961) @[icache.scala 98:69]
      node T_965 = not(T_964) @[icache.scala 98:69]
      node T_966 = mux(UInt<1>("h00"), T_962, T_965) @[icache.scala 98:69]
      vb_array <= T_966 @[icache.scala 98:51]
      skip @[icache.scala 98:40]
    node T_967 = and(s1_valid, s1_disparity[3]) @[icache.scala 98:20]
    when T_967 : @[icache.scala 98:40]
      node T_969 = cat(UInt<2>("h03"), s1_idx) @[Cat.scala 20:58]
      node T_972 = dshl(UInt<1>("h01"), T_969) @[icache.scala 98:69]
      node T_973 = or(vb_array, T_972) @[icache.scala 98:69]
      node T_974 = not(vb_array) @[icache.scala 98:69]
      node T_975 = or(T_974, T_972) @[icache.scala 98:69]
      node T_976 = not(T_975) @[icache.scala 98:69]
      node T_977 = mux(UInt<1>("h00"), T_973, T_976) @[icache.scala 98:69]
      vb_array <= T_977 @[icache.scala 98:51]
      skip @[icache.scala 98:40]
    wire s1_tag_match : UInt<1>[4] @[icache.scala 100:26]
    s1_tag_match is invalid @[icache.scala 100:26]
    wire s1_tag_hit : UInt<1>[4] @[icache.scala 101:24]
    s1_tag_hit is invalid @[icache.scala 101:24]
    wire s1_dout : UInt<64>[4] @[icache.scala 102:21]
    s1_dout is invalid @[icache.scala 102:21]
    node T_1000 = eq(io.invalidate, UInt<1>("h00")) @[icache.scala 105:17]
    node T_1002 = bits(s1_vaddr, 11, 6) @[icache.scala 105:65]
    node T_1003 = cat(UInt<1>("h00"), T_1002) @[Cat.scala 20:58]
    node T_1004 = dshr(vb_array, T_1003) @[icache.scala 105:43]
    node T_1005 = bits(T_1004, 0, 0) @[icache.scala 105:43]
    node T_1006 = bits(T_1005, 0, 0) @[icache.scala 105:94]
    node T_1007 = and(T_1000, T_1006) @[icache.scala 105:32]
    node T_1010 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27]
    node T_1011 = bits(tag_rdata[0], 19, 0) @[icache.scala 108:31]
    node T_1012 = eq(T_1011, s1_tag) @[icache.scala 108:45]
    s1_tag_match[0] <= T_1012 @[icache.scala 108:21]
    node T_1013 = and(T_1007, s1_tag_match[0]) @[icache.scala 109:28]
    s1_tag_hit[0] <= T_1013 @[icache.scala 109:19]
    node T_1016 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27]
    node T_1017 = or(T_1010, T_1016) @[icache.scala 110:51]
    node T_1018 = and(T_1007, T_1017) @[icache.scala 110:30]
    s1_disparity[0] <= T_1018 @[icache.scala 110:21]
    node T_1020 = eq(io.invalidate, UInt<1>("h00")) @[icache.scala 105:17]
    node T_1022 = bits(s1_vaddr, 11, 6) @[icache.scala 105:65]
    node T_1023 = cat(UInt<1>("h01"), T_1022) @[Cat.scala 20:58]
    node T_1024 = dshr(vb_array, T_1023) @[icache.scala 105:43]
    node T_1025 = bits(T_1024, 0, 0) @[icache.scala 105:43]
    node T_1026 = bits(T_1025, 0, 0) @[icache.scala 105:94]
    node T_1027 = and(T_1020, T_1026) @[icache.scala 105:32]
    node T_1030 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27]
    node T_1031 = bits(tag_rdata[1], 19, 0) @[icache.scala 108:31]
    node T_1032 = eq(T_1031, s1_tag) @[icache.scala 108:45]
    s1_tag_match[1] <= T_1032 @[icache.scala 108:21]
    node T_1033 = and(T_1027, s1_tag_match[1]) @[icache.scala 109:28]
    s1_tag_hit[1] <= T_1033 @[icache.scala 109:19]
    node T_1036 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27]
    node T_1037 = or(T_1030, T_1036) @[icache.scala 110:51]
    node T_1038 = and(T_1027, T_1037) @[icache.scala 110:30]
    s1_disparity[1] <= T_1038 @[icache.scala 110:21]
    node T_1040 = eq(io.invalidate, UInt<1>("h00")) @[icache.scala 105:17]
    node T_1042 = bits(s1_vaddr, 11, 6) @[icache.scala 105:65]
    node T_1043 = cat(UInt<2>("h02"), T_1042) @[Cat.scala 20:58]
    node T_1044 = dshr(vb_array, T_1043) @[icache.scala 105:43]
    node T_1045 = bits(T_1044, 0, 0) @[icache.scala 105:43]
    node T_1046 = bits(T_1045, 0, 0) @[icache.scala 105:94]
    node T_1047 = and(T_1040, T_1046) @[icache.scala 105:32]
    node T_1050 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27]
    node T_1051 = bits(tag_rdata[2], 19, 0) @[icache.scala 108:31]
    node T_1052 = eq(T_1051, s1_tag) @[icache.scala 108:45]
    s1_tag_match[2] <= T_1052 @[icache.scala 108:21]
    node T_1053 = and(T_1047, s1_tag_match[2]) @[icache.scala 109:28]
    s1_tag_hit[2] <= T_1053 @[icache.scala 109:19]
    node T_1056 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27]
    node T_1057 = or(T_1050, T_1056) @[icache.scala 110:51]
    node T_1058 = and(T_1047, T_1057) @[icache.scala 110:30]
    s1_disparity[2] <= T_1058 @[icache.scala 110:21]
    node T_1060 = eq(io.invalidate, UInt<1>("h00")) @[icache.scala 105:17]
    node T_1062 = bits(s1_vaddr, 11, 6) @[icache.scala 105:65]
    node T_1063 = cat(UInt<2>("h03"), T_1062) @[Cat.scala 20:58]
    node T_1064 = dshr(vb_array, T_1063) @[icache.scala 105:43]
    node T_1065 = bits(T_1064, 0, 0) @[icache.scala 105:43]
    node T_1066 = bits(T_1065, 0, 0) @[icache.scala 105:94]
    node T_1067 = and(T_1060, T_1066) @[icache.scala 105:32]
    node T_1070 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27]
    node T_1071 = bits(tag_rdata[3], 19, 0) @[icache.scala 108:31]
    node T_1072 = eq(T_1071, s1_tag) @[icache.scala 108:45]
    s1_tag_match[3] <= T_1072 @[icache.scala 108:21]
    node T_1073 = and(T_1067, s1_tag_match[3]) @[icache.scala 109:28]
    s1_tag_hit[3] <= T_1073 @[icache.scala 109:19]
    node T_1076 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27]
    node T_1077 = or(T_1070, T_1076) @[icache.scala 110:51]
    node T_1078 = and(T_1067, T_1077) @[icache.scala 110:30]
    s1_disparity[3] <= T_1078 @[icache.scala 110:21]
    node T_1079 = or(s1_tag_hit[0], s1_tag_hit[1]) @[icache.scala 112:44]
    node T_1080 = or(T_1079, s1_tag_hit[2]) @[icache.scala 112:44]
    node T_1081 = or(T_1080, s1_tag_hit[3]) @[icache.scala 112:44]
    node T_1082 = or(s1_disparity[0], s1_disparity[1]) @[icache.scala 112:78]
    node T_1083 = or(T_1082, s1_disparity[2]) @[icache.scala 112:78]
    node T_1084 = or(T_1083, s1_disparity[3]) @[icache.scala 112:78]
    node T_1086 = eq(T_1084, UInt<1>("h00")) @[icache.scala 112:52]
    node T_1087 = and(T_1081, T_1086) @[icache.scala 112:49]
    s1_any_tag_hit <= T_1087 @[icache.scala 112:18]
    smem T_1090 : UInt<64>[512] @[icache.scala 115:28]
    node T_1092 = eq(repl_way, UInt<1>("h00")) @[icache.scala 116:46]
    node T_1093 = and(FlowThroughSerializer_1.io.out.valid, T_1092) @[icache.scala 116:34]
    when T_1093 : @[icache.scala 117:16]
      node T_1094 = shl(s1_idx, 3) @[icache.scala 119:32]
      node T_1095 = or(T_1094, refill_cnt) @[icache.scala 119:59]
      write mport T_1096 = T_1090[T_1095], clk
      T_1096 <= FlowThroughSerializer_1.io.out.bits.data
      skip @[icache.scala 117:16]
    node T_1097 = bits(s0_vaddr, 11, 3) @[icache.scala 121:28]
    node T_1099 = eq(T_1093, UInt<1>("h00")) @[icache.scala 122:45]
    node T_1100 = and(T_1099, s0_valid) @[icache.scala 122:50]
    wire T_1102 : UInt
    T_1102 is invalid
    when T_1100 :
      T_1102 <= T_1097
      skip
    read mport T_1103 = T_1090[T_1102], clk
    s1_dout[0] <= T_1103 @[icache.scala 122:16]
    smem T_1106 : UInt<64>[512] @[icache.scala 115:28]
    node T_1108 = eq(repl_way, UInt<1>("h01")) @[icache.scala 116:46]
    node T_1109 = and(FlowThroughSerializer_1.io.out.valid, T_1108) @[icache.scala 116:34]
    when T_1109 : @[icache.scala 117:16]
      node T_1110 = shl(s1_idx, 3) @[icache.scala 119:32]
      node T_1111 = or(T_1110, refill_cnt) @[icache.scala 119:59]
      write mport T_1112 = T_1106[T_1111], clk
      T_1112 <= FlowThroughSerializer_1.io.out.bits.data
      skip @[icache.scala 117:16]
    node T_1113 = bits(s0_vaddr, 11, 3) @[icache.scala 121:28]
    node T_1115 = eq(T_1109, UInt<1>("h00")) @[icache.scala 122:45]
    node T_1116 = and(T_1115, s0_valid) @[icache.scala 122:50]
    wire T_1118 : UInt
    T_1118 is invalid
    when T_1116 :
      T_1118 <= T_1113
      skip
    read mport T_1119 = T_1106[T_1118], clk
    s1_dout[1] <= T_1119 @[icache.scala 122:16]
    smem T_1122 : UInt<64>[512] @[icache.scala 115:28]
    node T_1124 = eq(repl_way, UInt<2>("h02")) @[icache.scala 116:46]
    node T_1125 = and(FlowThroughSerializer_1.io.out.valid, T_1124) @[icache.scala 116:34]
    when T_1125 : @[icache.scala 117:16]
      node T_1126 = shl(s1_idx, 3) @[icache.scala 119:32]
      node T_1127 = or(T_1126, refill_cnt) @[icache.scala 119:59]
      write mport T_1128 = T_1122[T_1127], clk
      T_1128 <= FlowThroughSerializer_1.io.out.bits.data
      skip @[icache.scala 117:16]
    node T_1129 = bits(s0_vaddr, 11, 3) @[icache.scala 121:28]
    node T_1131 = eq(T_1125, UInt<1>("h00")) @[icache.scala 122:45]
    node T_1132 = and(T_1131, s0_valid) @[icache.scala 122:50]
    wire T_1134 : UInt
    T_1134 is invalid
    when T_1132 :
      T_1134 <= T_1129
      skip
    read mport T_1135 = T_1122[T_1134], clk
    s1_dout[2] <= T_1135 @[icache.scala 122:16]
    smem T_1138 : UInt<64>[512] @[icache.scala 115:28]
    node T_1140 = eq(repl_way, UInt<2>("h03")) @[icache.scala 116:46]
    node T_1141 = and(FlowThroughSerializer_1.io.out.valid, T_1140) @[icache.scala 116:34]
    when T_1141 : @[icache.scala 117:16]
      node T_1142 = shl(s1_idx, 3) @[icache.scala 119:32]
      node T_1143 = or(T_1142, refill_cnt) @[icache.scala 119:59]
      write mport T_1144 = T_1138[T_1143], clk
      T_1144 <= FlowThroughSerializer_1.io.out.bits.data
      skip @[icache.scala 117:16]
    node T_1145 = bits(s0_vaddr, 11, 3) @[icache.scala 121:28]
    node T_1147 = eq(T_1141, UInt<1>("h00")) @[icache.scala 122:45]
    node T_1148 = and(T_1147, s0_valid) @[icache.scala 122:50]
    wire T_1150 : UInt
    T_1150 is invalid
    when T_1148 :
      T_1150 <= T_1145
      skip
    read mport T_1151 = T_1138[T_1150], clk
    s1_dout[3] <= T_1151 @[icache.scala 122:16]
    node T_1153 = eq(stall, UInt<1>("h00")) @[icache.scala 131:38]
    reg T_1154 : UInt<1>, clk
    when T_1153 : @[Reg.scala 29:19]
      T_1154 <= s1_hit @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_1156 = eq(stall, UInt<1>("h00")) @[icache.scala 132:46]
    reg T_1159 : UInt<1>[4], clk
    when T_1156 : @[Reg.scala 29:19]
      T_1159 <= s1_tag_hit @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_1162 = eq(stall, UInt<1>("h00")) @[icache.scala 133:40]
    reg T_1165 : UInt<64>[4], clk
    when T_1162 : @[Reg.scala 29:19]
      T_1165 <= s1_dout @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_1168 = mux(T_1159[0], T_1165[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1170 = mux(T_1159[1], T_1165[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1172 = mux(T_1159[2], T_1165[2], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1174 = mux(T_1159[3], T_1165[3], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1176 = or(T_1168, T_1170) @[Mux.scala 18:72]
    node T_1177 = or(T_1176, T_1172) @[Mux.scala 18:72]
    node T_1178 = or(T_1177, T_1174) @[Mux.scala 18:72]
    wire T_1179 : UInt<64>
    T_1179 is invalid
    T_1179 <= T_1178 @[Mux.scala 18:72]
    io.resp.bits.datablock <= T_1179 @[icache.scala 134:30]
    io.resp.valid <= T_1154 @[icache.scala 135:21]
    node T_1180 = eq(state, UInt<2>("h01")) @[icache.scala 137:33]
    node T_1182 = eq(io.s2_kill, UInt<1>("h00")) @[icache.scala 137:50]
    node T_1183 = and(T_1180, T_1182) @[icache.scala 137:47]
    io.mem.acquire.valid <= T_1183 @[icache.scala 137:24]
    node T_1184 = shr(refill_addr, 6) @[icache.scala 138:60]
    node T_1235 = or(UInt<3>("h00"), UInt<1>("h00")) @[Definitions.scala 386:49]
    node T_1236 = bits(T_1235, 2, 0) @[Definitions.scala 386:61]
    node T_1238 = or(UInt<2>("h00"), UInt<2>("h03")) @[Definitions.scala 387:61]
    node T_1239 = bits(T_1238, 1, 0) @[Definitions.scala 387:76]
    node T_1241 = or(UInt<5>("h00"), UInt<5>("h00")) @[Definitions.scala 388:36]
    node T_1242 = bits(T_1241, 4, 0) @[Definitions.scala 388:45]
    node T_1244 = or(UInt<8>("h00"), UInt<1>("h00")) @[Definitions.scala 389:46]
    node T_1245 = bits(T_1244, 7, 0) @[Definitions.scala 389:54]
    node T_1248 = cat(T_1242, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1249 = cat(T_1236, T_1239) @[Cat.scala 20:58]
    node T_1250 = cat(T_1249, T_1248) @[Cat.scala 20:58]
    node T_1252 = cat(T_1239, T_1242) @[Cat.scala 20:58]
    node T_1253 = cat(T_1252, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1255 = cat(T_1245, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1257 = cat(T_1245, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1259 = cat(T_1242, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1260 = cat(T_1236, T_1239) @[Cat.scala 20:58]
    node T_1261 = cat(T_1260, T_1259) @[Cat.scala 20:58]
    node T_1263 = cat(UInt<5>("h00"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1265 = cat(UInt<5>("h01"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1266 = eq(UInt<3>("h06"), UInt<3>("h01")) @[Mux.scala 46:19]
    node T_1267 = mux(T_1266, T_1265, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_1268 = eq(UInt<3>("h05"), UInt<3>("h01")) @[Mux.scala 46:19]
    node T_1269 = mux(T_1268, T_1263, T_1267) @[Mux.scala 46:16]
    node T_1270 = eq(UInt<3>("h04"), UInt<3>("h01")) @[Mux.scala 46:19]
    node T_1271 = mux(T_1270, T_1261, T_1269) @[Mux.scala 46:16]
    node T_1272 = eq(UInt<3>("h03"), UInt<3>("h01")) @[Mux.scala 46:19]
    node T_1273 = mux(T_1272, T_1257, T_1271) @[Mux.scala 46:16]
    node T_1274 = eq(UInt<3>("h02"), UInt<3>("h01")) @[Mux.scala 46:19]
    node T_1275 = mux(T_1274, T_1255, T_1273) @[Mux.scala 46:16]
    node T_1276 = eq(UInt<3>("h01"), UInt<3>("h01")) @[Mux.scala 46:19]
    node T_1277 = mux(T_1276, T_1253, T_1275) @[Mux.scala 46:16]
    node T_1278 = eq(UInt<3>("h00"), UInt<3>("h01")) @[Mux.scala 46:19]
    node T_1279 = mux(T_1278, T_1250, T_1277) @[Mux.scala 46:16]
    wire T_1308 : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_1308 is invalid @[Definitions.scala 417:19]
    T_1308.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_1308.a_type <= UInt<3>("h01") @[Definitions.scala 419:16]
    T_1308.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_1308.addr_block <= T_1184 @[Definitions.scala 421:20]
    T_1308.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    T_1308.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    T_1308.union <= T_1279 @[Definitions.scala 424:15]
    io.mem.acquire.bits <- T_1308 @[icache.scala 138:23]
    node T_1336 = eq(UInt<2>("h00"), state) @[Conditional.scala 24:42]
    when T_1336 : @[Conditional.scala 24:73]
      when s1_miss : @[icache.scala 143:22]
        state <= UInt<2>("h01") @[icache.scala 143:30]
        skip @[icache.scala 143:22]
      invalidated <= UInt<1>("h00") @[icache.scala 144:19]
      skip @[Conditional.scala 24:73]
    node T_1338 = eq(UInt<2>("h01"), state) @[Conditional.scala 24:42]
    when T_1338 : @[Conditional.scala 24:73]
      when io.mem.acquire.ready : @[icache.scala 147:35]
        state <= UInt<2>("h02") @[icache.scala 147:43]
        skip @[icache.scala 147:35]
      when io.s2_kill : @[icache.scala 148:25]
        state <= UInt<2>("h00") @[icache.scala 148:33]
        skip @[icache.scala 148:25]
      skip @[Conditional.scala 24:73]
    node T_1339 = eq(UInt<2>("h02"), state) @[Conditional.scala 24:42]
    when T_1339 : @[Conditional.scala 24:73]
      when io.mem.grant.valid : @[icache.scala 151:33]
        state <= UInt<2>("h03") @[icache.scala 151:41]
        skip @[icache.scala 151:33]
      skip @[Conditional.scala 24:73]
    node T_1340 = eq(UInt<2>("h03"), state) @[Conditional.scala 24:42]
    when T_1340 : @[Conditional.scala 24:73]
      when refill_done : @[icache.scala 154:26]
        state <= UInt<2>("h00") @[icache.scala 154:34]
        skip @[icache.scala 154:26]
      skip @[Conditional.scala 24:73]
    
  module TLB : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {vpn : UInt<28>, passthrough : UInt<1>, instruction : UInt<1>, store : UInt<1>}}, resp : {miss : UInt<1>, ppn : UInt<20>, xcpt_ld : UInt<1>, xcpt_st : UInt<1>, xcpt_if : UInt<1>, cacheable : UInt<1>}, ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}
    
    io is invalid
    reg valid : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg ppns : UInt<20>[8], clk
    reg tags : UInt<34>[8], clk
    reg state : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg r_refill_tag : UInt<34>, clk
    reg r_refill_waddr : UInt<3>, clk
    reg r_req : {vpn : UInt<28>, passthrough : UInt<1>, instruction : UInt<1>, store : UInt<1>}, clk
    node T_219 = eq(io.req.bits.instruction, UInt<1>("h00")) @[tlb.scala 58:39]
    node do_mprv = and(io.ptw.status.mprv, T_219) @[tlb.scala 58:36]
    node priv = mux(do_mprv, io.ptw.status.mpp, io.ptw.status.prv) @[tlb.scala 59:17]
    node priv_s = eq(priv, UInt<1>("h01")) @[tlb.scala 60:21]
    node T_222 = leq(priv, UInt<1>("h01")) @[tlb.scala 61:27]
    node T_224 = eq(io.ptw.status.debug, UInt<1>("h00")) @[tlb.scala 61:39]
    node priv_uses_vm = and(T_222, T_224) @[tlb.scala 61:36]
    node passthrough_ppn = bits(io.req.bits.vpn, 19, 0) @[tlb.scala 64:40]
    node refill_ppn = bits(io.ptw.resp.bits.pte.ppn, 19, 0) @[tlb.scala 65:44]
    node do_refill = and(UInt<1>("h01"), io.ptw.resp.valid) @[tlb.scala 66:33]
    node mpu_ppn = mux(do_refill, refill_ppn, passthrough_ppn) @[tlb.scala 67:20]
    node T_226 = shl(mpu_ppn, 12) @[tlb.scala 68:38]
    node T_228 = leq(UInt<1>("h00"), T_226) @[addrmap.scala 26:46]
    node T_230 = lt(T_226, UInt<13>("h01000")) @[addrmap.scala 26:56]
    node T_231 = and(T_228, T_230) @[addrmap.scala 26:51]
    node T_234 = mux(T_231, UInt<3>("h07"), UInt<1>("h00")) @[addrmap.scala 150:10]
    node T_236 = leq(UInt<13>("h01000"), T_226) @[addrmap.scala 26:46]
    node T_238 = lt(T_226, UInt<14>("h02000")) @[addrmap.scala 26:56]
    node T_239 = and(T_236, T_238) @[addrmap.scala 26:51]
    node T_242 = mux(T_239, UInt<3>("h05"), UInt<1>("h00")) @[addrmap.scala 150:10]
    node T_244 = leq(UInt<31>("h040000000"), T_226) @[addrmap.scala 26:46]
    node T_246 = lt(T_226, UInt<31>("h044000000")) @[addrmap.scala 26:56]
    node T_247 = and(T_244, T_246) @[addrmap.scala 26:51]
    node T_250 = mux(T_247, UInt<3>("h03"), UInt<1>("h00")) @[addrmap.scala 150:10]
    node T_252 = leq(UInt<31>("h044000000"), T_226) @[addrmap.scala 26:46]
    node T_254 = lt(T_226, UInt<31>("h044010000")) @[addrmap.scala 26:56]
    node T_255 = and(T_252, T_254) @[addrmap.scala 26:51]
    node T_258 = mux(T_255, UInt<3>("h03"), UInt<1>("h00")) @[addrmap.scala 150:10]
    node T_260 = leq(UInt<32>("h080000000"), T_226) @[addrmap.scala 26:46]
    node T_262 = lt(T_226, UInt<32>("h090000000")) @[addrmap.scala 26:56]
    node T_263 = and(T_260, T_262) @[addrmap.scala 26:51]
    node T_266 = mux(T_263, UInt<3>("h07"), UInt<1>("h00")) @[addrmap.scala 150:10]
    node T_271 = or(T_234, T_242) @[addrmap.scala 153:54]
    node T_272 = or(T_271, T_250) @[addrmap.scala 153:54]
    node T_273 = or(T_272, T_258) @[addrmap.scala 153:54]
    node T_274 = or(T_273, T_266) @[addrmap.scala 153:54]
    wire prot : {x : UInt<1>, w : UInt<1>, r : UInt<1>} @[addrmap.scala 153:31]
    prot is invalid @[addrmap.scala 153:31]
    node T_282 = bits(T_274, 0, 0) @[addrmap.scala 153:31]
    prot.r <= T_282 @[addrmap.scala 153:31]
    node T_283 = bits(T_274, 1, 1) @[addrmap.scala 153:31]
    prot.w <= T_283 @[addrmap.scala 153:31]
    node T_284 = bits(T_274, 2, 2) @[addrmap.scala 153:31]
    prot.x <= T_284 @[addrmap.scala 153:31]
    node T_285 = shl(mpu_ppn, 12) @[tlb.scala 69:47]
    node T_287 = leq(UInt<32>("h080000000"), T_285) @[addrmap.scala 26:46]
    node T_289 = lt(T_285, UInt<32>("h090000000")) @[addrmap.scala 26:56]
    node T_290 = and(T_287, T_289) @[addrmap.scala 26:51]
    node cacheable = or(UInt<1>("h00"), T_290) @[addrmap.scala 141:31]
    node T_292 = bits(io.req.bits.vpn, 26, 0) @[tlb.scala 77:57]
    node lookup_tag = cat(io.ptw.ptbr.asid, T_292) @[Cat.scala 20:58]
    node T_294 = bits(io.ptw.status.vm, 3, 3) @[tlb.scala 78:53]
    node T_295 = and(UInt<1>("h01"), T_294) @[tlb.scala 78:34]
    node T_296 = and(T_295, priv_uses_vm) @[tlb.scala 78:57]
    node T_298 = eq(io.req.bits.passthrough, UInt<1>("h00")) @[tlb.scala 78:76]
    node vm_enabled = and(T_296, T_298) @[tlb.scala 78:73]
    node T_299 = bits(valid, 0, 0) @[tlb.scala 79:49]
    node T_300 = and(T_299, vm_enabled) @[tlb.scala 79:53]
    node T_301 = eq(tags[0], lookup_tag) @[tlb.scala 79:78]
    node hitsVec_0 = and(T_300, T_301) @[tlb.scala 79:67]
    node T_302 = bits(valid, 1, 1) @[tlb.scala 79:49]
    node T_303 = and(T_302, vm_enabled) @[tlb.scala 79:53]
    node T_304 = eq(tags[1], lookup_tag) @[tlb.scala 79:78]
    node hitsVec_1 = and(T_303, T_304) @[tlb.scala 79:67]
    node T_305 = bits(valid, 2, 2) @[tlb.scala 79:49]
    node T_306 = and(T_305, vm_enabled) @[tlb.scala 79:53]
    node T_307 = eq(tags[2], lookup_tag) @[tlb.scala 79:78]
    node hitsVec_2 = and(T_306, T_307) @[tlb.scala 79:67]
    node T_308 = bits(valid, 3, 3) @[tlb.scala 79:49]
    node T_309 = and(T_308, vm_enabled) @[tlb.scala 79:53]
    node T_310 = eq(tags[3], lookup_tag) @[tlb.scala 79:78]
    node hitsVec_3 = and(T_309, T_310) @[tlb.scala 79:67]
    node T_311 = bits(valid, 4, 4) @[tlb.scala 79:49]
    node T_312 = and(T_311, vm_enabled) @[tlb.scala 79:53]
    node T_313 = eq(tags[4], lookup_tag) @[tlb.scala 79:78]
    node hitsVec_4 = and(T_312, T_313) @[tlb.scala 79:67]
    node T_314 = bits(valid, 5, 5) @[tlb.scala 79:49]
    node T_315 = and(T_314, vm_enabled) @[tlb.scala 79:53]
    node T_316 = eq(tags[5], lookup_tag) @[tlb.scala 79:78]
    node hitsVec_5 = and(T_315, T_316) @[tlb.scala 79:67]
    node T_317 = bits(valid, 6, 6) @[tlb.scala 79:49]
    node T_318 = and(T_317, vm_enabled) @[tlb.scala 79:53]
    node T_319 = eq(tags[6], lookup_tag) @[tlb.scala 79:78]
    node hitsVec_6 = and(T_318, T_319) @[tlb.scala 79:67]
    node T_320 = bits(valid, 7, 7) @[tlb.scala 79:49]
    node T_321 = and(T_320, vm_enabled) @[tlb.scala 79:53]
    node T_322 = eq(tags[7], lookup_tag) @[tlb.scala 79:78]
    node hitsVec_7 = and(T_321, T_322) @[tlb.scala 79:67]
    node hitsVec_8 = eq(vm_enabled, UInt<1>("h00")) @[tlb.scala 79:97]
    node T_324 = cat(hitsVec_1, hitsVec_0) @[Cat.scala 20:58]
    node T_325 = cat(hitsVec_3, hitsVec_2) @[Cat.scala 20:58]
    node T_326 = cat(T_325, T_324) @[Cat.scala 20:58]
    node T_327 = cat(hitsVec_5, hitsVec_4) @[Cat.scala 20:58]
    node T_328 = cat(hitsVec_8, hitsVec_7) @[Cat.scala 20:58]
    node T_329 = cat(T_328, hitsVec_6) @[Cat.scala 20:58]
    node T_330 = cat(T_329, T_327) @[Cat.scala 20:58]
    node hits = cat(T_330, T_326) @[Cat.scala 20:58]
    reg pte_array : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}, clk
    reg u_array : UInt<8>, clk
    reg sw_array : UInt<8>, clk
    reg sx_array : UInt<8>, clk
    reg sr_array : UInt<8>, clk
    reg xr_array : UInt<8>, clk
    reg cash_array : UInt<8>, clk
    reg dirty_array : UInt<8>, clk
    when do_refill : @[tlb.scala 91:20]
      ppns[r_refill_waddr] <= io.ptw.resp.bits.pte.ppn @[tlb.scala 93:26]
      tags[r_refill_waddr] <= r_refill_tag @[tlb.scala 94:26]
      node T_362 = dshl(UInt<1>("h01"), r_refill_waddr) @[OneHot.scala 44:15]
      node T_363 = or(valid, T_362) @[tlb.scala 97:20]
      valid <= T_363 @[tlb.scala 97:11]
      node T_364 = or(u_array, T_362) @[tlb.scala 98:35]
      node T_365 = not(T_362) @[tlb.scala 98:53]
      node T_366 = and(u_array, T_365) @[tlb.scala 98:51]
      node T_367 = mux(io.ptw.resp.bits.pte.u, T_364, T_366) @[tlb.scala 98:19]
      u_array <= T_367 @[tlb.scala 98:13]
      node T_369 = eq(io.ptw.resp.bits.pte.w, UInt<1>("h00")) @[ptw.scala 53:47]
      node T_370 = and(io.ptw.resp.bits.pte.x, T_369) @[ptw.scala 53:44]
      node T_371 = or(io.ptw.resp.bits.pte.r, T_370) @[ptw.scala 53:38]
      node T_372 = and(io.ptw.resp.bits.pte.v, T_371) @[ptw.scala 53:32]
      node T_373 = and(T_372, io.ptw.resp.bits.pte.w) @[ptw.scala 58:35]
      node T_374 = and(T_373, prot.w) @[tlb.scala 99:30]
      node T_375 = or(sw_array, T_362) @[tlb.scala 99:50]
      node T_376 = not(T_362) @[tlb.scala 99:69]
      node T_377 = and(sw_array, T_376) @[tlb.scala 99:67]
      node T_378 = mux(T_374, T_375, T_377) @[tlb.scala 99:20]
      sw_array <= T_378 @[tlb.scala 99:14]
      node T_380 = eq(io.ptw.resp.bits.pte.w, UInt<1>("h00")) @[ptw.scala 53:47]
      node T_381 = and(io.ptw.resp.bits.pte.x, T_380) @[ptw.scala 53:44]
      node T_382 = or(io.ptw.resp.bits.pte.r, T_381) @[ptw.scala 53:38]
      node T_383 = and(io.ptw.resp.bits.pte.v, T_382) @[ptw.scala 53:32]
      node T_384 = and(T_383, io.ptw.resp.bits.pte.x) @[ptw.scala 59:35]
      node T_385 = and(T_384, prot.x) @[tlb.scala 100:30]
      node T_386 = or(sx_array, T_362) @[tlb.scala 100:50]
      node T_387 = not(T_362) @[tlb.scala 100:69]
      node T_388 = and(sx_array, T_387) @[tlb.scala 100:67]
      node T_389 = mux(T_385, T_386, T_388) @[tlb.scala 100:20]
      sx_array <= T_389 @[tlb.scala 100:14]
      node T_391 = eq(io.ptw.resp.bits.pte.w, UInt<1>("h00")) @[ptw.scala 53:47]
      node T_392 = and(io.ptw.resp.bits.pte.x, T_391) @[ptw.scala 53:44]
      node T_393 = or(io.ptw.resp.bits.pte.r, T_392) @[ptw.scala 53:38]
      node T_394 = and(io.ptw.resp.bits.pte.v, T_393) @[ptw.scala 53:32]
      node T_395 = and(T_394, io.ptw.resp.bits.pte.r) @[ptw.scala 57:35]
      node T_396 = and(T_395, prot.r) @[tlb.scala 101:30]
      node T_397 = or(sr_array, T_362) @[tlb.scala 101:50]
      node T_398 = not(T_362) @[tlb.scala 101:69]
      node T_399 = and(sr_array, T_398) @[tlb.scala 101:67]
      node T_400 = mux(T_396, T_397, T_399) @[tlb.scala 101:20]
      sr_array <= T_400 @[tlb.scala 101:14]
      node T_402 = eq(io.ptw.resp.bits.pte.w, UInt<1>("h00")) @[ptw.scala 53:47]
      node T_403 = and(io.ptw.resp.bits.pte.x, T_402) @[ptw.scala 53:44]
      node T_404 = or(io.ptw.resp.bits.pte.r, T_403) @[ptw.scala 53:38]
      node T_405 = and(io.ptw.resp.bits.pte.v, T_404) @[ptw.scala 53:32]
      node T_406 = and(T_405, io.ptw.resp.bits.pte.x) @[ptw.scala 59:35]
      node T_407 = and(T_406, prot.r) @[tlb.scala 102:30]
      node T_408 = or(xr_array, T_362) @[tlb.scala 102:50]
      node T_409 = not(T_362) @[tlb.scala 102:69]
      node T_410 = and(xr_array, T_409) @[tlb.scala 102:67]
      node T_411 = mux(T_407, T_408, T_410) @[tlb.scala 102:20]
      xr_array <= T_411 @[tlb.scala 102:14]
      node T_412 = or(cash_array, T_362) @[tlb.scala 103:45]
      node T_413 = not(T_362) @[tlb.scala 103:66]
      node T_414 = and(cash_array, T_413) @[tlb.scala 103:64]
      node T_415 = mux(cacheable, T_412, T_414) @[tlb.scala 103:22]
      cash_array <= T_415 @[tlb.scala 103:16]
      node T_416 = or(dirty_array, T_362) @[tlb.scala 104:43]
      node T_417 = not(T_362) @[tlb.scala 104:65]
      node T_418 = and(dirty_array, T_417) @[tlb.scala 104:63]
      node T_419 = mux(io.ptw.resp.bits.pte.d, T_416, T_418) @[tlb.scala 104:23]
      dirty_array <= T_419 @[tlb.scala 104:17]
      skip @[tlb.scala 91:20]
    reg T_421 : UInt<8>, clk
    node T_422 = not(valid) @[tlb.scala 108:31]
    node T_424 = eq(T_422, UInt<1>("h00")) @[tlb.scala 108:31]
    node T_426 = eq(T_424, UInt<1>("h00")) @[tlb.scala 108:24]
    node T_427 = not(valid) @[tlb.scala 108:53]
    node T_428 = bits(T_427, 0, 0) @[OneHot.scala 35:40]
    node T_429 = bits(T_427, 1, 1) @[OneHot.scala 35:40]
    node T_430 = bits(T_427, 2, 2) @[OneHot.scala 35:40]
    node T_431 = bits(T_427, 3, 3) @[OneHot.scala 35:40]
    node T_432 = bits(T_427, 4, 4) @[OneHot.scala 35:40]
    node T_433 = bits(T_427, 5, 5) @[OneHot.scala 35:40]
    node T_434 = bits(T_427, 6, 6) @[OneHot.scala 35:40]
    node T_435 = bits(T_427, 7, 7) @[OneHot.scala 35:40]
    node T_444 = mux(T_434, UInt<3>("h06"), UInt<3>("h07")) @[Mux.scala 31:69]
    node T_445 = mux(T_433, UInt<3>("h05"), T_444) @[Mux.scala 31:69]
    node T_446 = mux(T_432, UInt<3>("h04"), T_445) @[Mux.scala 31:69]
    node T_447 = mux(T_431, UInt<2>("h03"), T_446) @[Mux.scala 31:69]
    node T_448 = mux(T_430, UInt<2>("h02"), T_447) @[Mux.scala 31:69]
    node T_449 = mux(T_429, UInt<1>("h01"), T_448) @[Mux.scala 31:69]
    node T_450 = mux(T_428, UInt<1>("h00"), T_449) @[Mux.scala 31:69]
    node T_452 = dshr(T_421, UInt<1>("h01")) @[Cache.scala 105:27]
    node T_453 = bits(T_452, 0, 0) @[Cache.scala 105:27]
    node T_454 = cat(UInt<1>("h01"), T_453) @[Cat.scala 20:58]
    node T_455 = dshr(T_421, T_454) @[Cache.scala 105:27]
    node T_456 = bits(T_455, 0, 0) @[Cache.scala 105:27]
    node T_457 = cat(T_454, T_456) @[Cat.scala 20:58]
    node T_458 = dshr(T_421, T_457) @[Cache.scala 105:27]
    node T_459 = bits(T_458, 0, 0) @[Cache.scala 105:27]
    node T_460 = cat(T_457, T_459) @[Cat.scala 20:58]
    node T_461 = bits(T_460, 2, 0) @[Cache.scala 106:8]
    node repl_waddr = mux(T_426, T_450, T_461) @[tlb.scala 108:23]
    node T_463 = mux(io.ptw.status.pum, u_array, UInt<1>("h00")) @[tlb.scala 110:33]
    node T_464 = not(T_463) @[tlb.scala 110:29]
    node priv_ok = mux(priv_s, T_464, u_array) @[tlb.scala 110:20]
    node T_465 = and(priv_ok, sw_array) @[tlb.scala 111:37]
    node w_array = cat(prot.w, T_465) @[Cat.scala 20:58]
    node T_466 = and(priv_ok, sx_array) @[tlb.scala 112:37]
    node x_array = cat(prot.x, T_466) @[Cat.scala 20:58]
    node T_468 = mux(io.ptw.status.mxr, xr_array, UInt<1>("h00")) @[tlb.scala 113:54]
    node T_469 = or(sr_array, T_468) @[tlb.scala 113:49]
    node T_470 = and(priv_ok, T_469) @[tlb.scala 113:37]
    node r_array = cat(prot.r, T_470) @[Cat.scala 20:58]
    node c_array = cat(cacheable, cash_array) @[Cat.scala 20:58]
    node T_471 = bits(io.req.bits.vpn, 27, 27) @[tlb.scala 118:25]
    node T_472 = bits(io.req.bits.vpn, 26, 26) @[tlb.scala 118:54]
    node bad_va = neq(T_471, T_472) @[tlb.scala 118:35]
    node T_473 = bits(hits, 7, 0) @[tlb.scala 120:22]
    node T_475 = mux(io.req.bits.store, w_array, UInt<1>("h00")) @[tlb.scala 120:58]
    node T_476 = not(T_475) @[tlb.scala 120:54]
    node T_477 = or(dirty_array, T_476) @[tlb.scala 120:52]
    node tlb_hits = and(T_473, T_477) @[tlb.scala 120:37]
    node tlb_hit = neq(tlb_hits, UInt<1>("h00")) @[tlb.scala 121:26]
    node T_480 = eq(bad_va, UInt<1>("h00")) @[tlb.scala 122:32]
    node T_481 = and(vm_enabled, T_480) @[tlb.scala 122:29]
    node T_483 = eq(tlb_hit, UInt<1>("h00")) @[tlb.scala 122:43]
    node tlb_miss = and(T_481, T_483) @[tlb.scala 122:40]
    node T_485 = eq(tlb_miss, UInt<1>("h00")) @[tlb.scala 124:25]
    node T_486 = and(io.req.valid, T_485) @[tlb.scala 124:22]
    when T_486 : @[tlb.scala 124:36]
      node T_487 = bits(hits, 7, 0) @[tlb.scala 125:30]
      node T_488 = bits(T_487, 7, 4) @[OneHot.scala 22:18]
      node T_489 = bits(T_487, 3, 0) @[OneHot.scala 23:18]
      node T_491 = neq(T_488, UInt<1>("h00")) @[OneHot.scala 24:14]
      node T_492 = or(T_488, T_489) @[OneHot.scala 24:28]
      node T_493 = bits(T_492, 3, 2) @[OneHot.scala 22:18]
      node T_494 = bits(T_492, 1, 0) @[OneHot.scala 23:18]
      node T_496 = neq(T_493, UInt<1>("h00")) @[OneHot.scala 24:14]
      node T_497 = or(T_493, T_494) @[OneHot.scala 24:28]
      node T_498 = bits(T_497, 1, 1) @[CircuitMath.scala 21:8]
      node T_499 = cat(T_496, T_498) @[Cat.scala 20:58]
      node T_500 = cat(T_491, T_499) @[Cat.scala 20:58]
      node T_502 = bits(T_500, 2, 2) @[Cache.scala 95:20]
      node T_504 = eq(T_502, UInt<1>("h00")) @[Cache.scala 96:43]
      node T_506 = dshl(UInt<1>("h01"), UInt<1>("h01")) @[Cache.scala 96:37]
      node T_507 = or(T_421, T_506) @[Cache.scala 96:37]
      node T_508 = not(T_421) @[Cache.scala 96:37]
      node T_509 = or(T_508, T_506) @[Cache.scala 96:37]
      node T_510 = not(T_509) @[Cache.scala 96:37]
      node T_511 = mux(T_504, T_507, T_510) @[Cache.scala 96:37]
      node T_512 = cat(UInt<1>("h01"), T_502) @[Cat.scala 20:58]
      node T_513 = bits(T_500, 1, 1) @[Cache.scala 95:20]
      node T_515 = eq(T_513, UInt<1>("h00")) @[Cache.scala 96:43]
      node T_517 = dshl(UInt<1>("h01"), T_512) @[Cache.scala 96:37]
      node T_518 = or(T_511, T_517) @[Cache.scala 96:37]
      node T_519 = not(T_511) @[Cache.scala 96:37]
      node T_520 = or(T_519, T_517) @[Cache.scala 96:37]
      node T_521 = not(T_520) @[Cache.scala 96:37]
      node T_522 = mux(T_515, T_518, T_521) @[Cache.scala 96:37]
      node T_523 = cat(T_512, T_513) @[Cat.scala 20:58]
      node T_524 = bits(T_500, 0, 0) @[Cache.scala 95:20]
      node T_526 = eq(T_524, UInt<1>("h00")) @[Cache.scala 96:43]
      node T_528 = dshl(UInt<1>("h01"), T_523) @[Cache.scala 96:37]
      node T_529 = or(T_522, T_528) @[Cache.scala 96:37]
      node T_530 = not(T_522) @[Cache.scala 96:37]
      node T_531 = or(T_530, T_528) @[Cache.scala 96:37]
      node T_532 = not(T_531) @[Cache.scala 96:37]
      node T_533 = mux(T_526, T_529, T_532) @[Cache.scala 96:37]
      node T_534 = cat(T_523, T_524) @[Cat.scala 20:58]
      T_421 <= T_533 @[Cache.scala 89:15]
      skip @[tlb.scala 124:36]
    node T_535 = eq(state, UInt<2>("h00")) @[tlb.scala 128:25]
    io.req.ready <= T_535 @[tlb.scala 128:16]
    node T_536 = not(r_array) @[tlb.scala 129:33]
    node T_537 = and(T_536, hits) @[tlb.scala 129:42]
    node T_539 = neq(T_537, UInt<1>("h00")) @[tlb.scala 129:50]
    node T_540 = or(bad_va, T_539) @[tlb.scala 129:29]
    io.resp.xcpt_ld <= T_540 @[tlb.scala 129:19]
    node T_541 = not(w_array) @[tlb.scala 130:33]
    node T_542 = and(T_541, hits) @[tlb.scala 130:42]
    node T_544 = neq(T_542, UInt<1>("h00")) @[tlb.scala 130:50]
    node T_545 = or(bad_va, T_544) @[tlb.scala 130:29]
    io.resp.xcpt_st <= T_545 @[tlb.scala 130:19]
    node T_546 = not(x_array) @[tlb.scala 131:33]
    node T_547 = and(T_546, hits) @[tlb.scala 131:42]
    node T_549 = neq(T_547, UInt<1>("h00")) @[tlb.scala 131:50]
    node T_550 = or(bad_va, T_549) @[tlb.scala 131:29]
    io.resp.xcpt_if <= T_550 @[tlb.scala 131:19]
    node T_551 = and(c_array, hits) @[tlb.scala 132:33]
    node T_553 = neq(T_551, UInt<1>("h00")) @[tlb.scala 132:41]
    io.resp.cacheable <= T_553 @[tlb.scala 132:21]
    node T_554 = or(do_refill, tlb_miss) @[tlb.scala 133:29]
    io.resp.miss <= T_554 @[tlb.scala 133:16]
    node T_556 = mux(hitsVec_0, ppns[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_558 = mux(hitsVec_1, ppns[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_560 = mux(hitsVec_2, ppns[2], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_562 = mux(hitsVec_3, ppns[3], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_564 = mux(hitsVec_4, ppns[4], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_566 = mux(hitsVec_5, ppns[5], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_568 = mux(hitsVec_6, ppns[6], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_570 = mux(hitsVec_7, ppns[7], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_572 = mux(hitsVec_8, passthrough_ppn, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_574 = or(T_556, T_558) @[Mux.scala 18:72]
    node T_575 = or(T_574, T_560) @[Mux.scala 18:72]
    node T_576 = or(T_575, T_562) @[Mux.scala 18:72]
    node T_577 = or(T_576, T_564) @[Mux.scala 18:72]
    node T_578 = or(T_577, T_566) @[Mux.scala 18:72]
    node T_579 = or(T_578, T_568) @[Mux.scala 18:72]
    node T_580 = or(T_579, T_570) @[Mux.scala 18:72]
    node T_581 = or(T_580, T_572) @[Mux.scala 18:72]
    wire T_582 : UInt<20>
    T_582 is invalid
    T_582 <= T_581 @[Mux.scala 18:72]
    io.resp.ppn <= T_582 @[tlb.scala 134:15]
    node T_583 = eq(state, UInt<2>("h01")) @[tlb.scala 136:29]
    io.ptw.req.valid <= T_583 @[tlb.scala 136:20]
    io.ptw.req.bits <- io.ptw.status @[tlb.scala 137:19]
    io.ptw.req.bits.addr <= r_refill_tag @[tlb.scala 138:24]
    io.ptw.req.bits.store <= r_req.store @[tlb.scala 139:25]
    io.ptw.req.bits.fetch <= r_req.instruction @[tlb.scala 140:25]
    node T_584 = and(io.req.ready, io.req.valid) @[Decoupled.scala 21:42]
    node T_585 = and(T_584, tlb_miss) @[tlb.scala 143:25]
    when T_585 : @[tlb.scala 143:38]
      state <= UInt<2>("h01") @[tlb.scala 144:13]
      r_refill_tag <= lookup_tag @[tlb.scala 145:20]
      r_refill_waddr <= repl_waddr @[tlb.scala 146:22]
      r_req <- io.req.bits @[tlb.scala 147:13]
      skip @[tlb.scala 143:38]
    node T_586 = eq(state, UInt<2>("h01")) @[tlb.scala 149:17]
    when T_586 : @[tlb.scala 149:32]
      when io.ptw.invalidate : @[tlb.scala 150:32]
        state <= UInt<2>("h00") @[tlb.scala 151:15]
        skip @[tlb.scala 150:32]
      when io.ptw.req.ready : @[tlb.scala 153:31]
        state <= UInt<2>("h02") @[tlb.scala 154:15]
        when io.ptw.invalidate : @[tlb.scala 155:34]
          state <= UInt<2>("h03") @[tlb.scala 155:42]
          skip @[tlb.scala 155:34]
        skip @[tlb.scala 153:31]
      skip @[tlb.scala 149:32]
    node T_587 = eq(state, UInt<2>("h02")) @[tlb.scala 158:17]
    node T_588 = and(T_587, io.ptw.invalidate) @[tlb.scala 158:28]
    when T_588 : @[tlb.scala 158:50]
      state <= UInt<2>("h03") @[tlb.scala 159:13]
      skip @[tlb.scala 158:50]
    when io.ptw.resp.valid : @[tlb.scala 161:30]
      state <= UInt<2>("h00") @[tlb.scala 162:13]
      skip @[tlb.scala 161:30]
    when io.ptw.invalidate : @[tlb.scala 165:30]
      valid <= UInt<1>("h00") @[tlb.scala 166:13]
      skip @[tlb.scala 165:30]
    
  module BTB : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {valid : UInt<1>, bits : {addr : UInt<39>}}, resp : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, flip btb_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}}, flip bht_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, taken : UInt<1>, mispredict : UInt<1>}}, flip ras_update : {valid : UInt<1>, bits : {isCall : UInt<1>, isReturn : UInt<1>, returnAddr : UInt<39>, prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}}}}
    
    io is invalid
    reg idxs : UInt<11>[40], clk
    reg idxPages : UInt<3>[40], clk
    reg tgts : UInt<11>[40], clk
    reg tgtPages : UInt<3>[40], clk
    reg pages : UInt<27>[6], clk
    reg pageValid : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    node T_606 = dshl(UInt<1>("h01"), idxPages[0]) @[OneHot.scala 44:15]
    node idxPagesOH_0 = bits(T_606, 5, 0) @[btb.scala 154:44]
    node T_608 = dshl(UInt<1>("h01"), idxPages[1]) @[OneHot.scala 44:15]
    node idxPagesOH_1 = bits(T_608, 5, 0) @[btb.scala 154:44]
    node T_610 = dshl(UInt<1>("h01"), idxPages[2]) @[OneHot.scala 44:15]
    node idxPagesOH_2 = bits(T_610, 5, 0) @[btb.scala 154:44]
    node T_612 = dshl(UInt<1>("h01"), idxPages[3]) @[OneHot.scala 44:15]
    node idxPagesOH_3 = bits(T_612, 5, 0) @[btb.scala 154:44]
    node T_614 = dshl(UInt<1>("h01"), idxPages[4]) @[OneHot.scala 44:15]
    node idxPagesOH_4 = bits(T_614, 5, 0) @[btb.scala 154:44]
    node T_616 = dshl(UInt<1>("h01"), idxPages[5]) @[OneHot.scala 44:15]
    node idxPagesOH_5 = bits(T_616, 5, 0) @[btb.scala 154:44]
    node T_618 = dshl(UInt<1>("h01"), idxPages[6]) @[OneHot.scala 44:15]
    node idxPagesOH_6 = bits(T_618, 5, 0) @[btb.scala 154:44]
    node T_620 = dshl(UInt<1>("h01"), idxPages[7]) @[OneHot.scala 44:15]
    node idxPagesOH_7 = bits(T_620, 5, 0) @[btb.scala 154:44]
    node T_622 = dshl(UInt<1>("h01"), idxPages[8]) @[OneHot.scala 44:15]
    node idxPagesOH_8 = bits(T_622, 5, 0) @[btb.scala 154:44]
    node T_624 = dshl(UInt<1>("h01"), idxPages[9]) @[OneHot.scala 44:15]
    node idxPagesOH_9 = bits(T_624, 5, 0) @[btb.scala 154:44]
    node T_626 = dshl(UInt<1>("h01"), idxPages[10]) @[OneHot.scala 44:15]
    node idxPagesOH_10 = bits(T_626, 5, 0) @[btb.scala 154:44]
    node T_628 = dshl(UInt<1>("h01"), idxPages[11]) @[OneHot.scala 44:15]
    node idxPagesOH_11 = bits(T_628, 5, 0) @[btb.scala 154:44]
    node T_630 = dshl(UInt<1>("h01"), idxPages[12]) @[OneHot.scala 44:15]
    node idxPagesOH_12 = bits(T_630, 5, 0) @[btb.scala 154:44]
    node T_632 = dshl(UInt<1>("h01"), idxPages[13]) @[OneHot.scala 44:15]
    node idxPagesOH_13 = bits(T_632, 5, 0) @[btb.scala 154:44]
    node T_634 = dshl(UInt<1>("h01"), idxPages[14]) @[OneHot.scala 44:15]
    node idxPagesOH_14 = bits(T_634, 5, 0) @[btb.scala 154:44]
    node T_636 = dshl(UInt<1>("h01"), idxPages[15]) @[OneHot.scala 44:15]
    node idxPagesOH_15 = bits(T_636, 5, 0) @[btb.scala 154:44]
    node T_638 = dshl(UInt<1>("h01"), idxPages[16]) @[OneHot.scala 44:15]
    node idxPagesOH_16 = bits(T_638, 5, 0) @[btb.scala 154:44]
    node T_640 = dshl(UInt<1>("h01"), idxPages[17]) @[OneHot.scala 44:15]
    node idxPagesOH_17 = bits(T_640, 5, 0) @[btb.scala 154:44]
    node T_642 = dshl(UInt<1>("h01"), idxPages[18]) @[OneHot.scala 44:15]
    node idxPagesOH_18 = bits(T_642, 5, 0) @[btb.scala 154:44]
    node T_644 = dshl(UInt<1>("h01"), idxPages[19]) @[OneHot.scala 44:15]
    node idxPagesOH_19 = bits(T_644, 5, 0) @[btb.scala 154:44]
    node T_646 = dshl(UInt<1>("h01"), idxPages[20]) @[OneHot.scala 44:15]
    node idxPagesOH_20 = bits(T_646, 5, 0) @[btb.scala 154:44]
    node T_648 = dshl(UInt<1>("h01"), idxPages[21]) @[OneHot.scala 44:15]
    node idxPagesOH_21 = bits(T_648, 5, 0) @[btb.scala 154:44]
    node T_650 = dshl(UInt<1>("h01"), idxPages[22]) @[OneHot.scala 44:15]
    node idxPagesOH_22 = bits(T_650, 5, 0) @[btb.scala 154:44]
    node T_652 = dshl(UInt<1>("h01"), idxPages[23]) @[OneHot.scala 44:15]
    node idxPagesOH_23 = bits(T_652, 5, 0) @[btb.scala 154:44]
    node T_654 = dshl(UInt<1>("h01"), idxPages[24]) @[OneHot.scala 44:15]
    node idxPagesOH_24 = bits(T_654, 5, 0) @[btb.scala 154:44]
    node T_656 = dshl(UInt<1>("h01"), idxPages[25]) @[OneHot.scala 44:15]
    node idxPagesOH_25 = bits(T_656, 5, 0) @[btb.scala 154:44]
    node T_658 = dshl(UInt<1>("h01"), idxPages[26]) @[OneHot.scala 44:15]
    node idxPagesOH_26 = bits(T_658, 5, 0) @[btb.scala 154:44]
    node T_660 = dshl(UInt<1>("h01"), idxPages[27]) @[OneHot.scala 44:15]
    node idxPagesOH_27 = bits(T_660, 5, 0) @[btb.scala 154:44]
    node T_662 = dshl(UInt<1>("h01"), idxPages[28]) @[OneHot.scala 44:15]
    node idxPagesOH_28 = bits(T_662, 5, 0) @[btb.scala 154:44]
    node T_664 = dshl(UInt<1>("h01"), idxPages[29]) @[OneHot.scala 44:15]
    node idxPagesOH_29 = bits(T_664, 5, 0) @[btb.scala 154:44]
    node T_666 = dshl(UInt<1>("h01"), idxPages[30]) @[OneHot.scala 44:15]
    node idxPagesOH_30 = bits(T_666, 5, 0) @[btb.scala 154:44]
    node T_668 = dshl(UInt<1>("h01"), idxPages[31]) @[OneHot.scala 44:15]
    node idxPagesOH_31 = bits(T_668, 5, 0) @[btb.scala 154:44]
    node T_670 = dshl(UInt<1>("h01"), idxPages[32]) @[OneHot.scala 44:15]
    node idxPagesOH_32 = bits(T_670, 5, 0) @[btb.scala 154:44]
    node T_672 = dshl(UInt<1>("h01"), idxPages[33]) @[OneHot.scala 44:15]
    node idxPagesOH_33 = bits(T_672, 5, 0) @[btb.scala 154:44]
    node T_674 = dshl(UInt<1>("h01"), idxPages[34]) @[OneHot.scala 44:15]
    node idxPagesOH_34 = bits(T_674, 5, 0) @[btb.scala 154:44]
    node T_676 = dshl(UInt<1>("h01"), idxPages[35]) @[OneHot.scala 44:15]
    node idxPagesOH_35 = bits(T_676, 5, 0) @[btb.scala 154:44]
    node T_678 = dshl(UInt<1>("h01"), idxPages[36]) @[OneHot.scala 44:15]
    node idxPagesOH_36 = bits(T_678, 5, 0) @[btb.scala 154:44]
    node T_680 = dshl(UInt<1>("h01"), idxPages[37]) @[OneHot.scala 44:15]
    node idxPagesOH_37 = bits(T_680, 5, 0) @[btb.scala 154:44]
    node T_682 = dshl(UInt<1>("h01"), idxPages[38]) @[OneHot.scala 44:15]
    node idxPagesOH_38 = bits(T_682, 5, 0) @[btb.scala 154:44]
    node T_684 = dshl(UInt<1>("h01"), idxPages[39]) @[OneHot.scala 44:15]
    node idxPagesOH_39 = bits(T_684, 5, 0) @[btb.scala 154:44]
    node T_686 = dshl(UInt<1>("h01"), tgtPages[0]) @[OneHot.scala 44:15]
    node tgtPagesOH_0 = bits(T_686, 5, 0) @[btb.scala 155:44]
    node T_688 = dshl(UInt<1>("h01"), tgtPages[1]) @[OneHot.scala 44:15]
    node tgtPagesOH_1 = bits(T_688, 5, 0) @[btb.scala 155:44]
    node T_690 = dshl(UInt<1>("h01"), tgtPages[2]) @[OneHot.scala 44:15]
    node tgtPagesOH_2 = bits(T_690, 5, 0) @[btb.scala 155:44]
    node T_692 = dshl(UInt<1>("h01"), tgtPages[3]) @[OneHot.scala 44:15]
    node tgtPagesOH_3 = bits(T_692, 5, 0) @[btb.scala 155:44]
    node T_694 = dshl(UInt<1>("h01"), tgtPages[4]) @[OneHot.scala 44:15]
    node tgtPagesOH_4 = bits(T_694, 5, 0) @[btb.scala 155:44]
    node T_696 = dshl(UInt<1>("h01"), tgtPages[5]) @[OneHot.scala 44:15]
    node tgtPagesOH_5 = bits(T_696, 5, 0) @[btb.scala 155:44]
    node T_698 = dshl(UInt<1>("h01"), tgtPages[6]) @[OneHot.scala 44:15]
    node tgtPagesOH_6 = bits(T_698, 5, 0) @[btb.scala 155:44]
    node T_700 = dshl(UInt<1>("h01"), tgtPages[7]) @[OneHot.scala 44:15]
    node tgtPagesOH_7 = bits(T_700, 5, 0) @[btb.scala 155:44]
    node T_702 = dshl(UInt<1>("h01"), tgtPages[8]) @[OneHot.scala 44:15]
    node tgtPagesOH_8 = bits(T_702, 5, 0) @[btb.scala 155:44]
    node T_704 = dshl(UInt<1>("h01"), tgtPages[9]) @[OneHot.scala 44:15]
    node tgtPagesOH_9 = bits(T_704, 5, 0) @[btb.scala 155:44]
    node T_706 = dshl(UInt<1>("h01"), tgtPages[10]) @[OneHot.scala 44:15]
    node tgtPagesOH_10 = bits(T_706, 5, 0) @[btb.scala 155:44]
    node T_708 = dshl(UInt<1>("h01"), tgtPages[11]) @[OneHot.scala 44:15]
    node tgtPagesOH_11 = bits(T_708, 5, 0) @[btb.scala 155:44]
    node T_710 = dshl(UInt<1>("h01"), tgtPages[12]) @[OneHot.scala 44:15]
    node tgtPagesOH_12 = bits(T_710, 5, 0) @[btb.scala 155:44]
    node T_712 = dshl(UInt<1>("h01"), tgtPages[13]) @[OneHot.scala 44:15]
    node tgtPagesOH_13 = bits(T_712, 5, 0) @[btb.scala 155:44]
    node T_714 = dshl(UInt<1>("h01"), tgtPages[14]) @[OneHot.scala 44:15]
    node tgtPagesOH_14 = bits(T_714, 5, 0) @[btb.scala 155:44]
    node T_716 = dshl(UInt<1>("h01"), tgtPages[15]) @[OneHot.scala 44:15]
    node tgtPagesOH_15 = bits(T_716, 5, 0) @[btb.scala 155:44]
    node T_718 = dshl(UInt<1>("h01"), tgtPages[16]) @[OneHot.scala 44:15]
    node tgtPagesOH_16 = bits(T_718, 5, 0) @[btb.scala 155:44]
    node T_720 = dshl(UInt<1>("h01"), tgtPages[17]) @[OneHot.scala 44:15]
    node tgtPagesOH_17 = bits(T_720, 5, 0) @[btb.scala 155:44]
    node T_722 = dshl(UInt<1>("h01"), tgtPages[18]) @[OneHot.scala 44:15]
    node tgtPagesOH_18 = bits(T_722, 5, 0) @[btb.scala 155:44]
    node T_724 = dshl(UInt<1>("h01"), tgtPages[19]) @[OneHot.scala 44:15]
    node tgtPagesOH_19 = bits(T_724, 5, 0) @[btb.scala 155:44]
    node T_726 = dshl(UInt<1>("h01"), tgtPages[20]) @[OneHot.scala 44:15]
    node tgtPagesOH_20 = bits(T_726, 5, 0) @[btb.scala 155:44]
    node T_728 = dshl(UInt<1>("h01"), tgtPages[21]) @[OneHot.scala 44:15]
    node tgtPagesOH_21 = bits(T_728, 5, 0) @[btb.scala 155:44]
    node T_730 = dshl(UInt<1>("h01"), tgtPages[22]) @[OneHot.scala 44:15]
    node tgtPagesOH_22 = bits(T_730, 5, 0) @[btb.scala 155:44]
    node T_732 = dshl(UInt<1>("h01"), tgtPages[23]) @[OneHot.scala 44:15]
    node tgtPagesOH_23 = bits(T_732, 5, 0) @[btb.scala 155:44]
    node T_734 = dshl(UInt<1>("h01"), tgtPages[24]) @[OneHot.scala 44:15]
    node tgtPagesOH_24 = bits(T_734, 5, 0) @[btb.scala 155:44]
    node T_736 = dshl(UInt<1>("h01"), tgtPages[25]) @[OneHot.scala 44:15]
    node tgtPagesOH_25 = bits(T_736, 5, 0) @[btb.scala 155:44]
    node T_738 = dshl(UInt<1>("h01"), tgtPages[26]) @[OneHot.scala 44:15]
    node tgtPagesOH_26 = bits(T_738, 5, 0) @[btb.scala 155:44]
    node T_740 = dshl(UInt<1>("h01"), tgtPages[27]) @[OneHot.scala 44:15]
    node tgtPagesOH_27 = bits(T_740, 5, 0) @[btb.scala 155:44]
    node T_742 = dshl(UInt<1>("h01"), tgtPages[28]) @[OneHot.scala 44:15]
    node tgtPagesOH_28 = bits(T_742, 5, 0) @[btb.scala 155:44]
    node T_744 = dshl(UInt<1>("h01"), tgtPages[29]) @[OneHot.scala 44:15]
    node tgtPagesOH_29 = bits(T_744, 5, 0) @[btb.scala 155:44]
    node T_746 = dshl(UInt<1>("h01"), tgtPages[30]) @[OneHot.scala 44:15]
    node tgtPagesOH_30 = bits(T_746, 5, 0) @[btb.scala 155:44]
    node T_748 = dshl(UInt<1>("h01"), tgtPages[31]) @[OneHot.scala 44:15]
    node tgtPagesOH_31 = bits(T_748, 5, 0) @[btb.scala 155:44]
    node T_750 = dshl(UInt<1>("h01"), tgtPages[32]) @[OneHot.scala 44:15]
    node tgtPagesOH_32 = bits(T_750, 5, 0) @[btb.scala 155:44]
    node T_752 = dshl(UInt<1>("h01"), tgtPages[33]) @[OneHot.scala 44:15]
    node tgtPagesOH_33 = bits(T_752, 5, 0) @[btb.scala 155:44]
    node T_754 = dshl(UInt<1>("h01"), tgtPages[34]) @[OneHot.scala 44:15]
    node tgtPagesOH_34 = bits(T_754, 5, 0) @[btb.scala 155:44]
    node T_756 = dshl(UInt<1>("h01"), tgtPages[35]) @[OneHot.scala 44:15]
    node tgtPagesOH_35 = bits(T_756, 5, 0) @[btb.scala 155:44]
    node T_758 = dshl(UInt<1>("h01"), tgtPages[36]) @[OneHot.scala 44:15]
    node tgtPagesOH_36 = bits(T_758, 5, 0) @[btb.scala 155:44]
    node T_760 = dshl(UInt<1>("h01"), tgtPages[37]) @[OneHot.scala 44:15]
    node tgtPagesOH_37 = bits(T_760, 5, 0) @[btb.scala 155:44]
    node T_762 = dshl(UInt<1>("h01"), tgtPages[38]) @[OneHot.scala 44:15]
    node tgtPagesOH_38 = bits(T_762, 5, 0) @[btb.scala 155:44]
    node T_764 = dshl(UInt<1>("h01"), tgtPages[39]) @[OneHot.scala 44:15]
    node tgtPagesOH_39 = bits(T_764, 5, 0) @[btb.scala 155:44]
    reg isValid : UInt<40>, clk with : (reset => (reset, UInt<40>("h00")))
    reg isReturn : UInt<40>, clk
    reg isJump : UInt<40>, clk
    reg brIdx : UInt<1>[40], clk
    reg T_777 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_777 <= io.btb_update.valid
    reg T_778 : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}, clk
    when io.btb_update.valid : @[Reg.scala 29:19]
      T_778 <- io.btb_update.bits @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    wire r_btb_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}} @[Valid.scala 39:21]
    r_btb_update is invalid @[Valid.scala 39:21]
    r_btb_update.valid <= T_777 @[Valid.scala 40:17]
    r_btb_update.bits <- T_778 @[Valid.scala 41:16]
    node T_964 = shr(io.req.bits.addr, 12) @[btb.scala 162:39]
    node T_965 = eq(pages[0], T_964) @[btb.scala 165:29]
    node T_966 = eq(pages[1], T_964) @[btb.scala 165:29]
    node T_967 = eq(pages[2], T_964) @[btb.scala 165:29]
    node T_968 = eq(pages[3], T_964) @[btb.scala 165:29]
    node T_969 = eq(pages[4], T_964) @[btb.scala 165:29]
    node T_970 = eq(pages[5], T_964) @[btb.scala 165:29]
    node T_971 = cat(T_967, T_966) @[Cat.scala 20:58]
    node T_972 = cat(T_971, T_965) @[Cat.scala 20:58]
    node T_973 = cat(T_970, T_969) @[Cat.scala 20:58]
    node T_974 = cat(T_973, T_968) @[Cat.scala 20:58]
    node T_975 = cat(T_974, T_972) @[Cat.scala 20:58]
    node pageHit = and(pageValid, T_975) @[btb.scala 165:15]
    node T_976 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_977 = eq(idxs[0], T_976) @[btb.scala 168:31]
    node T_978 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_979 = eq(idxs[1], T_978) @[btb.scala 168:31]
    node T_980 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_981 = eq(idxs[2], T_980) @[btb.scala 168:31]
    node T_982 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_983 = eq(idxs[3], T_982) @[btb.scala 168:31]
    node T_984 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_985 = eq(idxs[4], T_984) @[btb.scala 168:31]
    node T_986 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_987 = eq(idxs[5], T_986) @[btb.scala 168:31]
    node T_988 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_989 = eq(idxs[6], T_988) @[btb.scala 168:31]
    node T_990 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_991 = eq(idxs[7], T_990) @[btb.scala 168:31]
    node T_992 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_993 = eq(idxs[8], T_992) @[btb.scala 168:31]
    node T_994 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_995 = eq(idxs[9], T_994) @[btb.scala 168:31]
    node T_996 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_997 = eq(idxs[10], T_996) @[btb.scala 168:31]
    node T_998 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_999 = eq(idxs[11], T_998) @[btb.scala 168:31]
    node T_1000 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1001 = eq(idxs[12], T_1000) @[btb.scala 168:31]
    node T_1002 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1003 = eq(idxs[13], T_1002) @[btb.scala 168:31]
    node T_1004 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1005 = eq(idxs[14], T_1004) @[btb.scala 168:31]
    node T_1006 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1007 = eq(idxs[15], T_1006) @[btb.scala 168:31]
    node T_1008 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1009 = eq(idxs[16], T_1008) @[btb.scala 168:31]
    node T_1010 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1011 = eq(idxs[17], T_1010) @[btb.scala 168:31]
    node T_1012 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1013 = eq(idxs[18], T_1012) @[btb.scala 168:31]
    node T_1014 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1015 = eq(idxs[19], T_1014) @[btb.scala 168:31]
    node T_1016 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1017 = eq(idxs[20], T_1016) @[btb.scala 168:31]
    node T_1018 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1019 = eq(idxs[21], T_1018) @[btb.scala 168:31]
    node T_1020 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1021 = eq(idxs[22], T_1020) @[btb.scala 168:31]
    node T_1022 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1023 = eq(idxs[23], T_1022) @[btb.scala 168:31]
    node T_1024 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1025 = eq(idxs[24], T_1024) @[btb.scala 168:31]
    node T_1026 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1027 = eq(idxs[25], T_1026) @[btb.scala 168:31]
    node T_1028 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1029 = eq(idxs[26], T_1028) @[btb.scala 168:31]
    node T_1030 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1031 = eq(idxs[27], T_1030) @[btb.scala 168:31]
    node T_1032 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1033 = eq(idxs[28], T_1032) @[btb.scala 168:31]
    node T_1034 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1035 = eq(idxs[29], T_1034) @[btb.scala 168:31]
    node T_1036 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1037 = eq(idxs[30], T_1036) @[btb.scala 168:31]
    node T_1038 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1039 = eq(idxs[31], T_1038) @[btb.scala 168:31]
    node T_1040 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1041 = eq(idxs[32], T_1040) @[btb.scala 168:31]
    node T_1042 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1043 = eq(idxs[33], T_1042) @[btb.scala 168:31]
    node T_1044 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1045 = eq(idxs[34], T_1044) @[btb.scala 168:31]
    node T_1046 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1047 = eq(idxs[35], T_1046) @[btb.scala 168:31]
    node T_1048 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1049 = eq(idxs[36], T_1048) @[btb.scala 168:31]
    node T_1050 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1051 = eq(idxs[37], T_1050) @[btb.scala 168:31]
    node T_1052 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1053 = eq(idxs[38], T_1052) @[btb.scala 168:31]
    node T_1054 = bits(io.req.bits.addr, 11, 1) @[btb.scala 168:39]
    node T_1055 = eq(idxs[39], T_1054) @[btb.scala 168:31]
    node T_1056 = cat(T_979, T_977) @[Cat.scala 20:58]
    node T_1057 = cat(T_985, T_983) @[Cat.scala 20:58]
    node T_1058 = cat(T_1057, T_981) @[Cat.scala 20:58]
    node T_1059 = cat(T_1058, T_1056) @[Cat.scala 20:58]
    node T_1060 = cat(T_989, T_987) @[Cat.scala 20:58]
    node T_1061 = cat(T_995, T_993) @[Cat.scala 20:58]
    node T_1062 = cat(T_1061, T_991) @[Cat.scala 20:58]
    node T_1063 = cat(T_1062, T_1060) @[Cat.scala 20:58]
    node T_1064 = cat(T_1063, T_1059) @[Cat.scala 20:58]
    node T_1065 = cat(T_999, T_997) @[Cat.scala 20:58]
    node T_1066 = cat(T_1005, T_1003) @[Cat.scala 20:58]
    node T_1067 = cat(T_1066, T_1001) @[Cat.scala 20:58]
    node T_1068 = cat(T_1067, T_1065) @[Cat.scala 20:58]
    node T_1069 = cat(T_1009, T_1007) @[Cat.scala 20:58]
    node T_1070 = cat(T_1015, T_1013) @[Cat.scala 20:58]
    node T_1071 = cat(T_1070, T_1011) @[Cat.scala 20:58]
    node T_1072 = cat(T_1071, T_1069) @[Cat.scala 20:58]
    node T_1073 = cat(T_1072, T_1068) @[Cat.scala 20:58]
    node T_1074 = cat(T_1073, T_1064) @[Cat.scala 20:58]
    node T_1075 = cat(T_1019, T_1017) @[Cat.scala 20:58]
    node T_1076 = cat(T_1025, T_1023) @[Cat.scala 20:58]
    node T_1077 = cat(T_1076, T_1021) @[Cat.scala 20:58]
    node T_1078 = cat(T_1077, T_1075) @[Cat.scala 20:58]
    node T_1079 = cat(T_1029, T_1027) @[Cat.scala 20:58]
    node T_1080 = cat(T_1035, T_1033) @[Cat.scala 20:58]
    node T_1081 = cat(T_1080, T_1031) @[Cat.scala 20:58]
    node T_1082 = cat(T_1081, T_1079) @[Cat.scala 20:58]
    node T_1083 = cat(T_1082, T_1078) @[Cat.scala 20:58]
    node T_1084 = cat(T_1039, T_1037) @[Cat.scala 20:58]
    node T_1085 = cat(T_1045, T_1043) @[Cat.scala 20:58]
    node T_1086 = cat(T_1085, T_1041) @[Cat.scala 20:58]
    node T_1087 = cat(T_1086, T_1084) @[Cat.scala 20:58]
    node T_1088 = cat(T_1049, T_1047) @[Cat.scala 20:58]
    node T_1089 = cat(T_1055, T_1053) @[Cat.scala 20:58]
    node T_1090 = cat(T_1089, T_1051) @[Cat.scala 20:58]
    node T_1091 = cat(T_1090, T_1088) @[Cat.scala 20:58]
    node T_1092 = cat(T_1091, T_1087) @[Cat.scala 20:58]
    node T_1093 = cat(T_1092, T_1083) @[Cat.scala 20:58]
    node T_1094 = cat(T_1093, T_1074) @[Cat.scala 20:58]
    node T_1095 = and(idxPagesOH_0, pageHit) @[btb.scala 169:41]
    node T_1096 = and(idxPagesOH_1, pageHit) @[btb.scala 169:41]
    node T_1097 = and(idxPagesOH_2, pageHit) @[btb.scala 169:41]
    node T_1098 = and(idxPagesOH_3, pageHit) @[btb.scala 169:41]
    node T_1099 = and(idxPagesOH_4, pageHit) @[btb.scala 169:41]
    node T_1100 = and(idxPagesOH_5, pageHit) @[btb.scala 169:41]
    node T_1101 = and(idxPagesOH_6, pageHit) @[btb.scala 169:41]
    node T_1102 = and(idxPagesOH_7, pageHit) @[btb.scala 169:41]
    node T_1103 = and(idxPagesOH_8, pageHit) @[btb.scala 169:41]
    node T_1104 = and(idxPagesOH_9, pageHit) @[btb.scala 169:41]
    node T_1105 = and(idxPagesOH_10, pageHit) @[btb.scala 169:41]
    node T_1106 = and(idxPagesOH_11, pageHit) @[btb.scala 169:41]
    node T_1107 = and(idxPagesOH_12, pageHit) @[btb.scala 169:41]
    node T_1108 = and(idxPagesOH_13, pageHit) @[btb.scala 169:41]
    node T_1109 = and(idxPagesOH_14, pageHit) @[btb.scala 169:41]
    node T_1110 = and(idxPagesOH_15, pageHit) @[btb.scala 169:41]
    node T_1111 = and(idxPagesOH_16, pageHit) @[btb.scala 169:41]
    node T_1112 = and(idxPagesOH_17, pageHit) @[btb.scala 169:41]
    node T_1113 = and(idxPagesOH_18, pageHit) @[btb.scala 169:41]
    node T_1114 = and(idxPagesOH_19, pageHit) @[btb.scala 169:41]
    node T_1115 = and(idxPagesOH_20, pageHit) @[btb.scala 169:41]
    node T_1116 = and(idxPagesOH_21, pageHit) @[btb.scala 169:41]
    node T_1117 = and(idxPagesOH_22, pageHit) @[btb.scala 169:41]
    node T_1118 = and(idxPagesOH_23, pageHit) @[btb.scala 169:41]
    node T_1119 = and(idxPagesOH_24, pageHit) @[btb.scala 169:41]
    node T_1120 = and(idxPagesOH_25, pageHit) @[btb.scala 169:41]
    node T_1121 = and(idxPagesOH_26, pageHit) @[btb.scala 169:41]
    node T_1122 = and(idxPagesOH_27, pageHit) @[btb.scala 169:41]
    node T_1123 = and(idxPagesOH_28, pageHit) @[btb.scala 169:41]
    node T_1124 = and(idxPagesOH_29, pageHit) @[btb.scala 169:41]
    node T_1125 = and(idxPagesOH_30, pageHit) @[btb.scala 169:41]
    node T_1126 = and(idxPagesOH_31, pageHit) @[btb.scala 169:41]
    node T_1127 = and(idxPagesOH_32, pageHit) @[btb.scala 169:41]
    node T_1128 = and(idxPagesOH_33, pageHit) @[btb.scala 169:41]
    node T_1129 = and(idxPagesOH_34, pageHit) @[btb.scala 169:41]
    node T_1130 = and(idxPagesOH_35, pageHit) @[btb.scala 169:41]
    node T_1131 = and(idxPagesOH_36, pageHit) @[btb.scala 169:41]
    node T_1132 = and(idxPagesOH_37, pageHit) @[btb.scala 169:41]
    node T_1133 = and(idxPagesOH_38, pageHit) @[btb.scala 169:41]
    node T_1134 = and(idxPagesOH_39, pageHit) @[btb.scala 169:41]
    node T_1136 = neq(T_1095, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1138 = neq(T_1096, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1140 = neq(T_1097, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1142 = neq(T_1098, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1144 = neq(T_1099, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1146 = neq(T_1100, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1148 = neq(T_1101, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1150 = neq(T_1102, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1152 = neq(T_1103, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1154 = neq(T_1104, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1156 = neq(T_1105, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1158 = neq(T_1106, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1160 = neq(T_1107, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1162 = neq(T_1108, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1164 = neq(T_1109, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1166 = neq(T_1110, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1168 = neq(T_1111, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1170 = neq(T_1112, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1172 = neq(T_1113, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1174 = neq(T_1114, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1176 = neq(T_1115, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1178 = neq(T_1116, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1180 = neq(T_1117, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1182 = neq(T_1118, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1184 = neq(T_1119, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1186 = neq(T_1120, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1188 = neq(T_1121, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1190 = neq(T_1122, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1192 = neq(T_1123, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1194 = neq(T_1124, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1196 = neq(T_1125, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1198 = neq(T_1126, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1200 = neq(T_1127, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1202 = neq(T_1128, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1204 = neq(T_1129, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1206 = neq(T_1130, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1208 = neq(T_1131, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1210 = neq(T_1132, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1212 = neq(T_1133, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1214 = neq(T_1134, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1215 = cat(T_1138, T_1136) @[Cat.scala 20:58]
    node T_1216 = cat(T_1144, T_1142) @[Cat.scala 20:58]
    node T_1217 = cat(T_1216, T_1140) @[Cat.scala 20:58]
    node T_1218 = cat(T_1217, T_1215) @[Cat.scala 20:58]
    node T_1219 = cat(T_1148, T_1146) @[Cat.scala 20:58]
    node T_1220 = cat(T_1154, T_1152) @[Cat.scala 20:58]
    node T_1221 = cat(T_1220, T_1150) @[Cat.scala 20:58]
    node T_1222 = cat(T_1221, T_1219) @[Cat.scala 20:58]
    node T_1223 = cat(T_1222, T_1218) @[Cat.scala 20:58]
    node T_1224 = cat(T_1158, T_1156) @[Cat.scala 20:58]
    node T_1225 = cat(T_1164, T_1162) @[Cat.scala 20:58]
    node T_1226 = cat(T_1225, T_1160) @[Cat.scala 20:58]
    node T_1227 = cat(T_1226, T_1224) @[Cat.scala 20:58]
    node T_1228 = cat(T_1168, T_1166) @[Cat.scala 20:58]
    node T_1229 = cat(T_1174, T_1172) @[Cat.scala 20:58]
    node T_1230 = cat(T_1229, T_1170) @[Cat.scala 20:58]
    node T_1231 = cat(T_1230, T_1228) @[Cat.scala 20:58]
    node T_1232 = cat(T_1231, T_1227) @[Cat.scala 20:58]
    node T_1233 = cat(T_1232, T_1223) @[Cat.scala 20:58]
    node T_1234 = cat(T_1178, T_1176) @[Cat.scala 20:58]
    node T_1235 = cat(T_1184, T_1182) @[Cat.scala 20:58]
    node T_1236 = cat(T_1235, T_1180) @[Cat.scala 20:58]
    node T_1237 = cat(T_1236, T_1234) @[Cat.scala 20:58]
    node T_1238 = cat(T_1188, T_1186) @[Cat.scala 20:58]
    node T_1239 = cat(T_1194, T_1192) @[Cat.scala 20:58]
    node T_1240 = cat(T_1239, T_1190) @[Cat.scala 20:58]
    node T_1241 = cat(T_1240, T_1238) @[Cat.scala 20:58]
    node T_1242 = cat(T_1241, T_1237) @[Cat.scala 20:58]
    node T_1243 = cat(T_1198, T_1196) @[Cat.scala 20:58]
    node T_1244 = cat(T_1204, T_1202) @[Cat.scala 20:58]
    node T_1245 = cat(T_1244, T_1200) @[Cat.scala 20:58]
    node T_1246 = cat(T_1245, T_1243) @[Cat.scala 20:58]
    node T_1247 = cat(T_1208, T_1206) @[Cat.scala 20:58]
    node T_1248 = cat(T_1214, T_1212) @[Cat.scala 20:58]
    node T_1249 = cat(T_1248, T_1210) @[Cat.scala 20:58]
    node T_1250 = cat(T_1249, T_1247) @[Cat.scala 20:58]
    node T_1251 = cat(T_1250, T_1246) @[Cat.scala 20:58]
    node T_1252 = cat(T_1251, T_1242) @[Cat.scala 20:58]
    node T_1253 = cat(T_1252, T_1233) @[Cat.scala 20:58]
    node T_1254 = and(T_1094, T_1253) @[btb.scala 170:14]
    node hitsVec = and(T_1254, isValid) @[btb.scala 170:29]
    node T_1255 = shr(r_btb_update.bits.pc, 12) @[btb.scala 162:39]
    node T_1256 = eq(pages[0], T_1255) @[btb.scala 165:29]
    node T_1257 = eq(pages[1], T_1255) @[btb.scala 165:29]
    node T_1258 = eq(pages[2], T_1255) @[btb.scala 165:29]
    node T_1259 = eq(pages[3], T_1255) @[btb.scala 165:29]
    node T_1260 = eq(pages[4], T_1255) @[btb.scala 165:29]
    node T_1261 = eq(pages[5], T_1255) @[btb.scala 165:29]
    node T_1262 = cat(T_1258, T_1257) @[Cat.scala 20:58]
    node T_1263 = cat(T_1262, T_1256) @[Cat.scala 20:58]
    node T_1264 = cat(T_1261, T_1260) @[Cat.scala 20:58]
    node T_1265 = cat(T_1264, T_1259) @[Cat.scala 20:58]
    node T_1266 = cat(T_1265, T_1263) @[Cat.scala 20:58]
    node updatePageHit = and(pageValid, T_1266) @[btb.scala 165:15]
    node T_1267 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1268 = eq(idxs[0], T_1267) @[btb.scala 168:31]
    node T_1269 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1270 = eq(idxs[1], T_1269) @[btb.scala 168:31]
    node T_1271 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1272 = eq(idxs[2], T_1271) @[btb.scala 168:31]
    node T_1273 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1274 = eq(idxs[3], T_1273) @[btb.scala 168:31]
    node T_1275 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1276 = eq(idxs[4], T_1275) @[btb.scala 168:31]
    node T_1277 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1278 = eq(idxs[5], T_1277) @[btb.scala 168:31]
    node T_1279 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1280 = eq(idxs[6], T_1279) @[btb.scala 168:31]
    node T_1281 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1282 = eq(idxs[7], T_1281) @[btb.scala 168:31]
    node T_1283 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1284 = eq(idxs[8], T_1283) @[btb.scala 168:31]
    node T_1285 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1286 = eq(idxs[9], T_1285) @[btb.scala 168:31]
    node T_1287 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1288 = eq(idxs[10], T_1287) @[btb.scala 168:31]
    node T_1289 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1290 = eq(idxs[11], T_1289) @[btb.scala 168:31]
    node T_1291 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1292 = eq(idxs[12], T_1291) @[btb.scala 168:31]
    node T_1293 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1294 = eq(idxs[13], T_1293) @[btb.scala 168:31]
    node T_1295 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1296 = eq(idxs[14], T_1295) @[btb.scala 168:31]
    node T_1297 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1298 = eq(idxs[15], T_1297) @[btb.scala 168:31]
    node T_1299 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1300 = eq(idxs[16], T_1299) @[btb.scala 168:31]
    node T_1301 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1302 = eq(idxs[17], T_1301) @[btb.scala 168:31]
    node T_1303 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1304 = eq(idxs[18], T_1303) @[btb.scala 168:31]
    node T_1305 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1306 = eq(idxs[19], T_1305) @[btb.scala 168:31]
    node T_1307 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1308 = eq(idxs[20], T_1307) @[btb.scala 168:31]
    node T_1309 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1310 = eq(idxs[21], T_1309) @[btb.scala 168:31]
    node T_1311 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1312 = eq(idxs[22], T_1311) @[btb.scala 168:31]
    node T_1313 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1314 = eq(idxs[23], T_1313) @[btb.scala 168:31]
    node T_1315 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1316 = eq(idxs[24], T_1315) @[btb.scala 168:31]
    node T_1317 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1318 = eq(idxs[25], T_1317) @[btb.scala 168:31]
    node T_1319 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1320 = eq(idxs[26], T_1319) @[btb.scala 168:31]
    node T_1321 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1322 = eq(idxs[27], T_1321) @[btb.scala 168:31]
    node T_1323 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1324 = eq(idxs[28], T_1323) @[btb.scala 168:31]
    node T_1325 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1326 = eq(idxs[29], T_1325) @[btb.scala 168:31]
    node T_1327 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1328 = eq(idxs[30], T_1327) @[btb.scala 168:31]
    node T_1329 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1330 = eq(idxs[31], T_1329) @[btb.scala 168:31]
    node T_1331 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1332 = eq(idxs[32], T_1331) @[btb.scala 168:31]
    node T_1333 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1334 = eq(idxs[33], T_1333) @[btb.scala 168:31]
    node T_1335 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1336 = eq(idxs[34], T_1335) @[btb.scala 168:31]
    node T_1337 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1338 = eq(idxs[35], T_1337) @[btb.scala 168:31]
    node T_1339 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1340 = eq(idxs[36], T_1339) @[btb.scala 168:31]
    node T_1341 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1342 = eq(idxs[37], T_1341) @[btb.scala 168:31]
    node T_1343 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1344 = eq(idxs[38], T_1343) @[btb.scala 168:31]
    node T_1345 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 168:39]
    node T_1346 = eq(idxs[39], T_1345) @[btb.scala 168:31]
    node T_1347 = cat(T_1270, T_1268) @[Cat.scala 20:58]
    node T_1348 = cat(T_1276, T_1274) @[Cat.scala 20:58]
    node T_1349 = cat(T_1348, T_1272) @[Cat.scala 20:58]
    node T_1350 = cat(T_1349, T_1347) @[Cat.scala 20:58]
    node T_1351 = cat(T_1280, T_1278) @[Cat.scala 20:58]
    node T_1352 = cat(T_1286, T_1284) @[Cat.scala 20:58]
    node T_1353 = cat(T_1352, T_1282) @[Cat.scala 20:58]
    node T_1354 = cat(T_1353, T_1351) @[Cat.scala 20:58]
    node T_1355 = cat(T_1354, T_1350) @[Cat.scala 20:58]
    node T_1356 = cat(T_1290, T_1288) @[Cat.scala 20:58]
    node T_1357 = cat(T_1296, T_1294) @[Cat.scala 20:58]
    node T_1358 = cat(T_1357, T_1292) @[Cat.scala 20:58]
    node T_1359 = cat(T_1358, T_1356) @[Cat.scala 20:58]
    node T_1360 = cat(T_1300, T_1298) @[Cat.scala 20:58]
    node T_1361 = cat(T_1306, T_1304) @[Cat.scala 20:58]
    node T_1362 = cat(T_1361, T_1302) @[Cat.scala 20:58]
    node T_1363 = cat(T_1362, T_1360) @[Cat.scala 20:58]
    node T_1364 = cat(T_1363, T_1359) @[Cat.scala 20:58]
    node T_1365 = cat(T_1364, T_1355) @[Cat.scala 20:58]
    node T_1366 = cat(T_1310, T_1308) @[Cat.scala 20:58]
    node T_1367 = cat(T_1316, T_1314) @[Cat.scala 20:58]
    node T_1368 = cat(T_1367, T_1312) @[Cat.scala 20:58]
    node T_1369 = cat(T_1368, T_1366) @[Cat.scala 20:58]
    node T_1370 = cat(T_1320, T_1318) @[Cat.scala 20:58]
    node T_1371 = cat(T_1326, T_1324) @[Cat.scala 20:58]
    node T_1372 = cat(T_1371, T_1322) @[Cat.scala 20:58]
    node T_1373 = cat(T_1372, T_1370) @[Cat.scala 20:58]
    node T_1374 = cat(T_1373, T_1369) @[Cat.scala 20:58]
    node T_1375 = cat(T_1330, T_1328) @[Cat.scala 20:58]
    node T_1376 = cat(T_1336, T_1334) @[Cat.scala 20:58]
    node T_1377 = cat(T_1376, T_1332) @[Cat.scala 20:58]
    node T_1378 = cat(T_1377, T_1375) @[Cat.scala 20:58]
    node T_1379 = cat(T_1340, T_1338) @[Cat.scala 20:58]
    node T_1380 = cat(T_1346, T_1344) @[Cat.scala 20:58]
    node T_1381 = cat(T_1380, T_1342) @[Cat.scala 20:58]
    node T_1382 = cat(T_1381, T_1379) @[Cat.scala 20:58]
    node T_1383 = cat(T_1382, T_1378) @[Cat.scala 20:58]
    node T_1384 = cat(T_1383, T_1374) @[Cat.scala 20:58]
    node T_1385 = cat(T_1384, T_1365) @[Cat.scala 20:58]
    node T_1386 = and(idxPagesOH_0, updatePageHit) @[btb.scala 169:41]
    node T_1387 = and(idxPagesOH_1, updatePageHit) @[btb.scala 169:41]
    node T_1388 = and(idxPagesOH_2, updatePageHit) @[btb.scala 169:41]
    node T_1389 = and(idxPagesOH_3, updatePageHit) @[btb.scala 169:41]
    node T_1390 = and(idxPagesOH_4, updatePageHit) @[btb.scala 169:41]
    node T_1391 = and(idxPagesOH_5, updatePageHit) @[btb.scala 169:41]
    node T_1392 = and(idxPagesOH_6, updatePageHit) @[btb.scala 169:41]
    node T_1393 = and(idxPagesOH_7, updatePageHit) @[btb.scala 169:41]
    node T_1394 = and(idxPagesOH_8, updatePageHit) @[btb.scala 169:41]
    node T_1395 = and(idxPagesOH_9, updatePageHit) @[btb.scala 169:41]
    node T_1396 = and(idxPagesOH_10, updatePageHit) @[btb.scala 169:41]
    node T_1397 = and(idxPagesOH_11, updatePageHit) @[btb.scala 169:41]
    node T_1398 = and(idxPagesOH_12, updatePageHit) @[btb.scala 169:41]
    node T_1399 = and(idxPagesOH_13, updatePageHit) @[btb.scala 169:41]
    node T_1400 = and(idxPagesOH_14, updatePageHit) @[btb.scala 169:41]
    node T_1401 = and(idxPagesOH_15, updatePageHit) @[btb.scala 169:41]
    node T_1402 = and(idxPagesOH_16, updatePageHit) @[btb.scala 169:41]
    node T_1403 = and(idxPagesOH_17, updatePageHit) @[btb.scala 169:41]
    node T_1404 = and(idxPagesOH_18, updatePageHit) @[btb.scala 169:41]
    node T_1405 = and(idxPagesOH_19, updatePageHit) @[btb.scala 169:41]
    node T_1406 = and(idxPagesOH_20, updatePageHit) @[btb.scala 169:41]
    node T_1407 = and(idxPagesOH_21, updatePageHit) @[btb.scala 169:41]
    node T_1408 = and(idxPagesOH_22, updatePageHit) @[btb.scala 169:41]
    node T_1409 = and(idxPagesOH_23, updatePageHit) @[btb.scala 169:41]
    node T_1410 = and(idxPagesOH_24, updatePageHit) @[btb.scala 169:41]
    node T_1411 = and(idxPagesOH_25, updatePageHit) @[btb.scala 169:41]
    node T_1412 = and(idxPagesOH_26, updatePageHit) @[btb.scala 169:41]
    node T_1413 = and(idxPagesOH_27, updatePageHit) @[btb.scala 169:41]
    node T_1414 = and(idxPagesOH_28, updatePageHit) @[btb.scala 169:41]
    node T_1415 = and(idxPagesOH_29, updatePageHit) @[btb.scala 169:41]
    node T_1416 = and(idxPagesOH_30, updatePageHit) @[btb.scala 169:41]
    node T_1417 = and(idxPagesOH_31, updatePageHit) @[btb.scala 169:41]
    node T_1418 = and(idxPagesOH_32, updatePageHit) @[btb.scala 169:41]
    node T_1419 = and(idxPagesOH_33, updatePageHit) @[btb.scala 169:41]
    node T_1420 = and(idxPagesOH_34, updatePageHit) @[btb.scala 169:41]
    node T_1421 = and(idxPagesOH_35, updatePageHit) @[btb.scala 169:41]
    node T_1422 = and(idxPagesOH_36, updatePageHit) @[btb.scala 169:41]
    node T_1423 = and(idxPagesOH_37, updatePageHit) @[btb.scala 169:41]
    node T_1424 = and(idxPagesOH_38, updatePageHit) @[btb.scala 169:41]
    node T_1425 = and(idxPagesOH_39, updatePageHit) @[btb.scala 169:41]
    node T_1427 = neq(T_1386, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1429 = neq(T_1387, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1431 = neq(T_1388, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1433 = neq(T_1389, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1435 = neq(T_1390, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1437 = neq(T_1391, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1439 = neq(T_1392, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1441 = neq(T_1393, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1443 = neq(T_1394, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1445 = neq(T_1395, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1447 = neq(T_1396, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1449 = neq(T_1397, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1451 = neq(T_1398, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1453 = neq(T_1399, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1455 = neq(T_1400, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1457 = neq(T_1401, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1459 = neq(T_1402, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1461 = neq(T_1403, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1463 = neq(T_1404, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1465 = neq(T_1405, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1467 = neq(T_1406, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1469 = neq(T_1407, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1471 = neq(T_1408, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1473 = neq(T_1409, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1475 = neq(T_1410, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1477 = neq(T_1411, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1479 = neq(T_1412, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1481 = neq(T_1413, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1483 = neq(T_1414, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1485 = neq(T_1415, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1487 = neq(T_1416, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1489 = neq(T_1417, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1491 = neq(T_1418, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1493 = neq(T_1419, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1495 = neq(T_1420, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1497 = neq(T_1421, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1499 = neq(T_1422, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1501 = neq(T_1423, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1503 = neq(T_1424, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1505 = neq(T_1425, UInt<1>("h00")) @[btb.scala 169:58]
    node T_1506 = cat(T_1429, T_1427) @[Cat.scala 20:58]
    node T_1507 = cat(T_1435, T_1433) @[Cat.scala 20:58]
    node T_1508 = cat(T_1507, T_1431) @[Cat.scala 20:58]
    node T_1509 = cat(T_1508, T_1506) @[Cat.scala 20:58]
    node T_1510 = cat(T_1439, T_1437) @[Cat.scala 20:58]
    node T_1511 = cat(T_1445, T_1443) @[Cat.scala 20:58]
    node T_1512 = cat(T_1511, T_1441) @[Cat.scala 20:58]
    node T_1513 = cat(T_1512, T_1510) @[Cat.scala 20:58]
    node T_1514 = cat(T_1513, T_1509) @[Cat.scala 20:58]
    node T_1515 = cat(T_1449, T_1447) @[Cat.scala 20:58]
    node T_1516 = cat(T_1455, T_1453) @[Cat.scala 20:58]
    node T_1517 = cat(T_1516, T_1451) @[Cat.scala 20:58]
    node T_1518 = cat(T_1517, T_1515) @[Cat.scala 20:58]
    node T_1519 = cat(T_1459, T_1457) @[Cat.scala 20:58]
    node T_1520 = cat(T_1465, T_1463) @[Cat.scala 20:58]
    node T_1521 = cat(T_1520, T_1461) @[Cat.scala 20:58]
    node T_1522 = cat(T_1521, T_1519) @[Cat.scala 20:58]
    node T_1523 = cat(T_1522, T_1518) @[Cat.scala 20:58]
    node T_1524 = cat(T_1523, T_1514) @[Cat.scala 20:58]
    node T_1525 = cat(T_1469, T_1467) @[Cat.scala 20:58]
    node T_1526 = cat(T_1475, T_1473) @[Cat.scala 20:58]
    node T_1527 = cat(T_1526, T_1471) @[Cat.scala 20:58]
    node T_1528 = cat(T_1527, T_1525) @[Cat.scala 20:58]
    node T_1529 = cat(T_1479, T_1477) @[Cat.scala 20:58]
    node T_1530 = cat(T_1485, T_1483) @[Cat.scala 20:58]
    node T_1531 = cat(T_1530, T_1481) @[Cat.scala 20:58]
    node T_1532 = cat(T_1531, T_1529) @[Cat.scala 20:58]
    node T_1533 = cat(T_1532, T_1528) @[Cat.scala 20:58]
    node T_1534 = cat(T_1489, T_1487) @[Cat.scala 20:58]
    node T_1535 = cat(T_1495, T_1493) @[Cat.scala 20:58]
    node T_1536 = cat(T_1535, T_1491) @[Cat.scala 20:58]
    node T_1537 = cat(T_1536, T_1534) @[Cat.scala 20:58]
    node T_1538 = cat(T_1499, T_1497) @[Cat.scala 20:58]
    node T_1539 = cat(T_1505, T_1503) @[Cat.scala 20:58]
    node T_1540 = cat(T_1539, T_1501) @[Cat.scala 20:58]
    node T_1541 = cat(T_1540, T_1538) @[Cat.scala 20:58]
    node T_1542 = cat(T_1541, T_1537) @[Cat.scala 20:58]
    node T_1543 = cat(T_1542, T_1533) @[Cat.scala 20:58]
    node T_1544 = cat(T_1543, T_1524) @[Cat.scala 20:58]
    node T_1545 = and(T_1385, T_1544) @[btb.scala 170:14]
    node updateHits = and(T_1545, isValid) @[btb.scala 170:29]
    node T_1547 = eq(r_btb_update.bits.prediction.valid, UInt<1>("h00")) @[btb.scala 188:37]
    node T_1548 = and(r_btb_update.valid, T_1547) @[btb.scala 188:34]
    reg nextRepl : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    when T_1548 : @[Counter.scala 43:17]
      node T_1551 = eq(nextRepl, UInt<6>("h027")) @[Counter.scala 20:24]
      node T_1553 = add(nextRepl, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1554 = tail(T_1553, 1) @[Counter.scala 21:22]
      nextRepl <= T_1554 @[Counter.scala 21:13]
      when T_1551 : @[Counter.scala 23:21]
        nextRepl <= UInt<1>("h00") @[Counter.scala 23:29]
        skip @[Counter.scala 23:21]
      skip @[Counter.scala 43:17]
    node T_1556 = and(T_1548, T_1551) @[Counter.scala 44:20]
    node useUpdatePageHit = neq(updatePageHit, UInt<1>("h00")) @[btb.scala 195:40]
    node usePageHit = neq(pageHit, UInt<1>("h00")) @[btb.scala 196:28]
    node doIdxPageRepl = eq(useUpdatePageHit, UInt<1>("h00")) @[btb.scala 197:23]
    reg nextPageRepl : UInt<3>, clk
    node T_1561 = bits(pageHit, 4, 0) @[btb.scala 199:48]
    node T_1562 = bits(pageHit, 5, 5) @[btb.scala 199:69]
    node T_1563 = cat(T_1561, T_1562) @[Cat.scala 20:58]
    node T_1565 = dshl(UInt<1>("h01"), nextPageRepl) @[OneHot.scala 44:15]
    node idxPageRepl = mux(usePageHit, T_1563, T_1565) @[btb.scala 199:24]
    node idxPageUpdateOH = mux(useUpdatePageHit, updatePageHit, idxPageRepl) @[btb.scala 200:28]
    node T_1566 = bits(idxPageUpdateOH, 7, 4) @[OneHot.scala 22:18]
    node T_1567 = bits(idxPageUpdateOH, 3, 0) @[OneHot.scala 23:18]
    node T_1569 = neq(T_1566, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_1570 = or(T_1566, T_1567) @[OneHot.scala 24:28]
    node T_1571 = bits(T_1570, 3, 2) @[OneHot.scala 22:18]
    node T_1572 = bits(T_1570, 1, 0) @[OneHot.scala 23:18]
    node T_1574 = neq(T_1571, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_1575 = or(T_1571, T_1572) @[OneHot.scala 24:28]
    node T_1576 = bits(T_1575, 1, 1) @[CircuitMath.scala 21:8]
    node T_1577 = cat(T_1574, T_1576) @[Cat.scala 20:58]
    node idxPageUpdate = cat(T_1569, T_1577) @[Cat.scala 20:58]
    node idxPageReplEn = mux(doIdxPageRepl, idxPageRepl, UInt<1>("h00")) @[btb.scala 202:26]
    node T_1579 = shr(r_btb_update.bits.pc, 12) @[btb.scala 162:39]
    node T_1580 = shr(io.req.bits.addr, 12) @[btb.scala 162:39]
    node samePage = eq(T_1579, T_1580) @[btb.scala 204:45]
    node T_1582 = eq(samePage, UInt<1>("h00")) @[btb.scala 205:23]
    node T_1584 = eq(usePageHit, UInt<1>("h00")) @[btb.scala 205:36]
    node doTgtPageRepl = and(T_1582, T_1584) @[btb.scala 205:33]
    node T_1585 = bits(idxPageUpdateOH, 4, 0) @[btb.scala 206:71]
    node T_1586 = bits(idxPageUpdateOH, 5, 5) @[btb.scala 206:100]
    node T_1587 = cat(T_1585, T_1586) @[Cat.scala 20:58]
    node tgtPageRepl = mux(samePage, idxPageUpdateOH, T_1587) @[btb.scala 206:24]
    node T_1588 = mux(usePageHit, pageHit, tgtPageRepl) @[btb.scala 207:35]
    node T_1589 = bits(T_1588, 7, 4) @[OneHot.scala 22:18]
    node T_1590 = bits(T_1588, 3, 0) @[OneHot.scala 23:18]
    node T_1592 = neq(T_1589, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_1593 = or(T_1589, T_1590) @[OneHot.scala 24:28]
    node T_1594 = bits(T_1593, 3, 2) @[OneHot.scala 22:18]
    node T_1595 = bits(T_1593, 1, 0) @[OneHot.scala 23:18]
    node T_1597 = neq(T_1594, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_1598 = or(T_1594, T_1595) @[OneHot.scala 24:28]
    node T_1599 = bits(T_1598, 1, 1) @[CircuitMath.scala 21:8]
    node T_1600 = cat(T_1597, T_1599) @[Cat.scala 20:58]
    node tgtPageUpdate = cat(T_1592, T_1600) @[Cat.scala 20:58]
    node tgtPageReplEn = mux(doTgtPageRepl, tgtPageRepl, UInt<1>("h00")) @[btb.scala 208:26]
    node T_1602 = or(doIdxPageRepl, doTgtPageRepl) @[btb.scala 210:46]
    node T_1603 = and(r_btb_update.valid, T_1602) @[btb.scala 210:28]
    when T_1603 : @[btb.scala 210:65]
      node T_1604 = and(doIdxPageRepl, doTgtPageRepl) @[btb.scala 211:30]
      node T_1607 = mux(T_1604, UInt<2>("h02"), UInt<1>("h01")) @[btb.scala 212:40]
      node T_1608 = add(nextPageRepl, T_1607) @[btb.scala 212:29]
      node T_1609 = tail(T_1608, 1) @[btb.scala 212:29]
      node T_1611 = geq(T_1609, UInt<3>("h06")) @[btb.scala 213:30]
      node T_1612 = bits(T_1609, 0, 0) @[btb.scala 213:45]
      node T_1613 = shl(T_1612, 0) @[btb.scala 213:24]
      node T_1614 = mux(T_1611, T_1613, T_1609) @[btb.scala 213:24]
      nextPageRepl <= T_1614 @[btb.scala 213:18]
      skip @[btb.scala 210:65]
    when r_btb_update.valid : @[btb.scala 216:29]
      node T_1615 = mux(r_btb_update.bits.prediction.valid, r_btb_update.bits.prediction.bits.entry, nextRepl) @[btb.scala 217:20]
      node T_1617 = dshl(UInt<1>("h01"), T_1615) @[OneHot.scala 44:15]
      node T_1618 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 219:40]
      idxs[T_1615] <= T_1618 @[btb.scala 219:17]
      node T_1619 = bits(io.req.bits.addr, 11, 1) @[btb.scala 220:33]
      tgts[T_1615] <= T_1619 @[btb.scala 220:17]
      idxPages[T_1615] <= idxPageUpdate @[btb.scala 221:21]
      tgtPages[T_1615] <= tgtPageUpdate @[btb.scala 222:21]
      node T_1620 = or(isValid, T_1617) @[btb.scala 223:55]
      node T_1621 = not(T_1617) @[btb.scala 223:73]
      node T_1622 = and(isValid, T_1621) @[btb.scala 223:71]
      node T_1623 = mux(r_btb_update.bits.isValid, T_1620, T_1622) @[btb.scala 223:19]
      isValid <= T_1623 @[btb.scala 223:13]
      node T_1624 = or(isReturn, T_1617) @[btb.scala 224:58]
      node T_1625 = not(T_1617) @[btb.scala 224:77]
      node T_1626 = and(isReturn, T_1625) @[btb.scala 224:75]
      node T_1627 = mux(r_btb_update.bits.isReturn, T_1624, T_1626) @[btb.scala 224:20]
      isReturn <= T_1627 @[btb.scala 224:14]
      node T_1628 = or(isJump, T_1617) @[btb.scala 225:52]
      node T_1629 = not(T_1617) @[btb.scala 225:69]
      node T_1630 = and(isJump, T_1629) @[btb.scala 225:67]
      node T_1631 = mux(r_btb_update.bits.isJump, T_1628, T_1630) @[btb.scala 225:18]
      isJump <= T_1631 @[btb.scala 225:12]
      node T_1632 = shr(r_btb_update.bits.br_pc, 1) @[btb.scala 227:47]
      brIdx[T_1615] <= T_1632 @[btb.scala 227:20]
      node T_1633 = bits(idxPageUpdate, 0, 0) @[btb.scala 230:39]
      node T_1635 = eq(T_1633, UInt<1>("h00")) @[btb.scala 230:25]
      node T_1636 = mux(T_1635, idxPageReplEn, tgtPageReplEn) @[btb.scala 236:24]
      node T_1637 = shr(r_btb_update.bits.pc, 12) @[btb.scala 162:39]
      node T_1638 = shr(io.req.bits.addr, 12) @[btb.scala 162:39]
      node T_1639 = mux(T_1635, T_1637, T_1638) @[btb.scala 237:10]
      node T_1640 = bits(T_1636, 0, 0) @[btb.scala 234:17]
      when T_1640 : @[btb.scala 234:22]
        pages[0] <= T_1639 @[btb.scala 234:33]
        skip @[btb.scala 234:22]
      node T_1641 = bits(T_1636, 2, 2) @[btb.scala 234:17]
      when T_1641 : @[btb.scala 234:22]
        pages[2] <= T_1639 @[btb.scala 234:33]
        skip @[btb.scala 234:22]
      node T_1642 = bits(T_1636, 4, 4) @[btb.scala 234:17]
      when T_1642 : @[btb.scala 234:22]
        pages[4] <= T_1639 @[btb.scala 234:33]
        skip @[btb.scala 234:22]
      node T_1643 = mux(T_1635, tgtPageReplEn, idxPageReplEn) @[btb.scala 238:24]
      node T_1644 = shr(io.req.bits.addr, 12) @[btb.scala 162:39]
      node T_1645 = shr(r_btb_update.bits.pc, 12) @[btb.scala 162:39]
      node T_1646 = mux(T_1635, T_1644, T_1645) @[btb.scala 239:10]
      node T_1647 = bits(T_1643, 1, 1) @[btb.scala 234:17]
      when T_1647 : @[btb.scala 234:22]
        pages[1] <= T_1646 @[btb.scala 234:33]
        skip @[btb.scala 234:22]
      node T_1648 = bits(T_1643, 3, 3) @[btb.scala 234:17]
      when T_1648 : @[btb.scala 234:22]
        pages[3] <= T_1646 @[btb.scala 234:33]
        skip @[btb.scala 234:22]
      node T_1649 = bits(T_1643, 5, 5) @[btb.scala 234:17]
      when T_1649 : @[btb.scala 234:22]
        pages[5] <= T_1646 @[btb.scala 234:33]
        skip @[btb.scala 234:22]
      node T_1650 = or(pageValid, tgtPageReplEn) @[btb.scala 240:28]
      node T_1651 = or(T_1650, idxPageReplEn) @[btb.scala 240:44]
      pageValid <= T_1651 @[btb.scala 240:15]
      skip @[btb.scala 216:29]
    node T_1653 = neq(hitsVec, UInt<1>("h00")) @[btb.scala 243:25]
    io.resp.valid <= T_1653 @[btb.scala 243:17]
    io.resp.bits.taken <= UInt<1>("h01") @[btb.scala 244:22]
    node T_1655 = bits(hitsVec, 0, 0) @[Mux.scala 20:36]
    node T_1656 = bits(hitsVec, 1, 1) @[Mux.scala 20:36]
    node T_1657 = bits(hitsVec, 2, 2) @[Mux.scala 20:36]
    node T_1658 = bits(hitsVec, 3, 3) @[Mux.scala 20:36]
    node T_1659 = bits(hitsVec, 4, 4) @[Mux.scala 20:36]
    node T_1660 = bits(hitsVec, 5, 5) @[Mux.scala 20:36]
    node T_1661 = bits(hitsVec, 6, 6) @[Mux.scala 20:36]
    node T_1662 = bits(hitsVec, 7, 7) @[Mux.scala 20:36]
    node T_1663 = bits(hitsVec, 8, 8) @[Mux.scala 20:36]
    node T_1664 = bits(hitsVec, 9, 9) @[Mux.scala 20:36]
    node T_1665 = bits(hitsVec, 10, 10) @[Mux.scala 20:36]
    node T_1666 = bits(hitsVec, 11, 11) @[Mux.scala 20:36]
    node T_1667 = bits(hitsVec, 12, 12) @[Mux.scala 20:36]
    node T_1668 = bits(hitsVec, 13, 13) @[Mux.scala 20:36]
    node T_1669 = bits(hitsVec, 14, 14) @[Mux.scala 20:36]
    node T_1670 = bits(hitsVec, 15, 15) @[Mux.scala 20:36]
    node T_1671 = bits(hitsVec, 16, 16) @[Mux.scala 20:36]
    node T_1672 = bits(hitsVec, 17, 17) @[Mux.scala 20:36]
    node T_1673 = bits(hitsVec, 18, 18) @[Mux.scala 20:36]
    node T_1674 = bits(hitsVec, 19, 19) @[Mux.scala 20:36]
    node T_1675 = bits(hitsVec, 20, 20) @[Mux.scala 20:36]
    node T_1676 = bits(hitsVec, 21, 21) @[Mux.scala 20:36]
    node T_1677 = bits(hitsVec, 22, 22) @[Mux.scala 20:36]
    node T_1678 = bits(hitsVec, 23, 23) @[Mux.scala 20:36]
    node T_1679 = bits(hitsVec, 24, 24) @[Mux.scala 20:36]
    node T_1680 = bits(hitsVec, 25, 25) @[Mux.scala 20:36]
    node T_1681 = bits(hitsVec, 26, 26) @[Mux.scala 20:36]
    node T_1682 = bits(hitsVec, 27, 27) @[Mux.scala 20:36]
    node T_1683 = bits(hitsVec, 28, 28) @[Mux.scala 20:36]
    node T_1684 = bits(hitsVec, 29, 29) @[Mux.scala 20:36]
    node T_1685 = bits(hitsVec, 30, 30) @[Mux.scala 20:36]
    node T_1686 = bits(hitsVec, 31, 31) @[Mux.scala 20:36]
    node T_1687 = bits(hitsVec, 32, 32) @[Mux.scala 20:36]
    node T_1688 = bits(hitsVec, 33, 33) @[Mux.scala 20:36]
    node T_1689 = bits(hitsVec, 34, 34) @[Mux.scala 20:36]
    node T_1690 = bits(hitsVec, 35, 35) @[Mux.scala 20:36]
    node T_1691 = bits(hitsVec, 36, 36) @[Mux.scala 20:36]
    node T_1692 = bits(hitsVec, 37, 37) @[Mux.scala 20:36]
    node T_1693 = bits(hitsVec, 38, 38) @[Mux.scala 20:36]
    node T_1694 = bits(hitsVec, 39, 39) @[Mux.scala 20:36]
    node T_1696 = mux(T_1655, tgtPagesOH_0, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1698 = mux(T_1656, tgtPagesOH_1, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1700 = mux(T_1657, tgtPagesOH_2, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1702 = mux(T_1658, tgtPagesOH_3, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1704 = mux(T_1659, tgtPagesOH_4, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1706 = mux(T_1660, tgtPagesOH_5, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1708 = mux(T_1661, tgtPagesOH_6, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1710 = mux(T_1662, tgtPagesOH_7, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1712 = mux(T_1663, tgtPagesOH_8, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1714 = mux(T_1664, tgtPagesOH_9, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1716 = mux(T_1665, tgtPagesOH_10, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1718 = mux(T_1666, tgtPagesOH_11, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1720 = mux(T_1667, tgtPagesOH_12, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1722 = mux(T_1668, tgtPagesOH_13, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1724 = mux(T_1669, tgtPagesOH_14, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1726 = mux(T_1670, tgtPagesOH_15, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1728 = mux(T_1671, tgtPagesOH_16, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1730 = mux(T_1672, tgtPagesOH_17, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1732 = mux(T_1673, tgtPagesOH_18, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1734 = mux(T_1674, tgtPagesOH_19, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1736 = mux(T_1675, tgtPagesOH_20, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1738 = mux(T_1676, tgtPagesOH_21, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1740 = mux(T_1677, tgtPagesOH_22, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1742 = mux(T_1678, tgtPagesOH_23, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1744 = mux(T_1679, tgtPagesOH_24, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1746 = mux(T_1680, tgtPagesOH_25, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1748 = mux(T_1681, tgtPagesOH_26, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1750 = mux(T_1682, tgtPagesOH_27, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1752 = mux(T_1683, tgtPagesOH_28, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1754 = mux(T_1684, tgtPagesOH_29, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1756 = mux(T_1685, tgtPagesOH_30, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1758 = mux(T_1686, tgtPagesOH_31, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1760 = mux(T_1687, tgtPagesOH_32, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1762 = mux(T_1688, tgtPagesOH_33, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1764 = mux(T_1689, tgtPagesOH_34, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1766 = mux(T_1690, tgtPagesOH_35, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1768 = mux(T_1691, tgtPagesOH_36, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1770 = mux(T_1692, tgtPagesOH_37, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1772 = mux(T_1693, tgtPagesOH_38, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1774 = mux(T_1694, tgtPagesOH_39, UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1776 = or(T_1696, T_1698) @[Mux.scala 18:72]
    node T_1777 = or(T_1776, T_1700) @[Mux.scala 18:72]
    node T_1778 = or(T_1777, T_1702) @[Mux.scala 18:72]
    node T_1779 = or(T_1778, T_1704) @[Mux.scala 18:72]
    node T_1780 = or(T_1779, T_1706) @[Mux.scala 18:72]
    node T_1781 = or(T_1780, T_1708) @[Mux.scala 18:72]
    node T_1782 = or(T_1781, T_1710) @[Mux.scala 18:72]
    node T_1783 = or(T_1782, T_1712) @[Mux.scala 18:72]
    node T_1784 = or(T_1783, T_1714) @[Mux.scala 18:72]
    node T_1785 = or(T_1784, T_1716) @[Mux.scala 18:72]
    node T_1786 = or(T_1785, T_1718) @[Mux.scala 18:72]
    node T_1787 = or(T_1786, T_1720) @[Mux.scala 18:72]
    node T_1788 = or(T_1787, T_1722) @[Mux.scala 18:72]
    node T_1789 = or(T_1788, T_1724) @[Mux.scala 18:72]
    node T_1790 = or(T_1789, T_1726) @[Mux.scala 18:72]
    node T_1791 = or(T_1790, T_1728) @[Mux.scala 18:72]
    node T_1792 = or(T_1791, T_1730) @[Mux.scala 18:72]
    node T_1793 = or(T_1792, T_1732) @[Mux.scala 18:72]
    node T_1794 = or(T_1793, T_1734) @[Mux.scala 18:72]
    node T_1795 = or(T_1794, T_1736) @[Mux.scala 18:72]
    node T_1796 = or(T_1795, T_1738) @[Mux.scala 18:72]
    node T_1797 = or(T_1796, T_1740) @[Mux.scala 18:72]
    node T_1798 = or(T_1797, T_1742) @[Mux.scala 18:72]
    node T_1799 = or(T_1798, T_1744) @[Mux.scala 18:72]
    node T_1800 = or(T_1799, T_1746) @[Mux.scala 18:72]
    node T_1801 = or(T_1800, T_1748) @[Mux.scala 18:72]
    node T_1802 = or(T_1801, T_1750) @[Mux.scala 18:72]
    node T_1803 = or(T_1802, T_1752) @[Mux.scala 18:72]
    node T_1804 = or(T_1803, T_1754) @[Mux.scala 18:72]
    node T_1805 = or(T_1804, T_1756) @[Mux.scala 18:72]
    node T_1806 = or(T_1805, T_1758) @[Mux.scala 18:72]
    node T_1807 = or(T_1806, T_1760) @[Mux.scala 18:72]
    node T_1808 = or(T_1807, T_1762) @[Mux.scala 18:72]
    node T_1809 = or(T_1808, T_1764) @[Mux.scala 18:72]
    node T_1810 = or(T_1809, T_1766) @[Mux.scala 18:72]
    node T_1811 = or(T_1810, T_1768) @[Mux.scala 18:72]
    node T_1812 = or(T_1811, T_1770) @[Mux.scala 18:72]
    node T_1813 = or(T_1812, T_1772) @[Mux.scala 18:72]
    node T_1814 = or(T_1813, T_1774) @[Mux.scala 18:72]
    wire T_1815 : UInt<6>
    T_1815 is invalid
    T_1815 <= T_1814 @[Mux.scala 18:72]
    node T_1816 = bits(T_1815, 0, 0) @[Mux.scala 20:36]
    node T_1817 = bits(T_1815, 1, 1) @[Mux.scala 20:36]
    node T_1818 = bits(T_1815, 2, 2) @[Mux.scala 20:36]
    node T_1819 = bits(T_1815, 3, 3) @[Mux.scala 20:36]
    node T_1820 = bits(T_1815, 4, 4) @[Mux.scala 20:36]
    node T_1821 = bits(T_1815, 5, 5) @[Mux.scala 20:36]
    node T_1823 = mux(T_1816, pages[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1825 = mux(T_1817, pages[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1827 = mux(T_1818, pages[2], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1829 = mux(T_1819, pages[3], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1831 = mux(T_1820, pages[4], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1833 = mux(T_1821, pages[5], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1835 = or(T_1823, T_1825) @[Mux.scala 18:72]
    node T_1836 = or(T_1835, T_1827) @[Mux.scala 18:72]
    node T_1837 = or(T_1836, T_1829) @[Mux.scala 18:72]
    node T_1838 = or(T_1837, T_1831) @[Mux.scala 18:72]
    node T_1839 = or(T_1838, T_1833) @[Mux.scala 18:72]
    wire T_1840 : UInt<27>
    T_1840 is invalid
    T_1840 <= T_1839 @[Mux.scala 18:72]
    node T_1841 = bits(hitsVec, 0, 0) @[Mux.scala 20:36]
    node T_1842 = bits(hitsVec, 1, 1) @[Mux.scala 20:36]
    node T_1843 = bits(hitsVec, 2, 2) @[Mux.scala 20:36]
    node T_1844 = bits(hitsVec, 3, 3) @[Mux.scala 20:36]
    node T_1845 = bits(hitsVec, 4, 4) @[Mux.scala 20:36]
    node T_1846 = bits(hitsVec, 5, 5) @[Mux.scala 20:36]
    node T_1847 = bits(hitsVec, 6, 6) @[Mux.scala 20:36]
    node T_1848 = bits(hitsVec, 7, 7) @[Mux.scala 20:36]
    node T_1849 = bits(hitsVec, 8, 8) @[Mux.scala 20:36]
    node T_1850 = bits(hitsVec, 9, 9) @[Mux.scala 20:36]
    node T_1851 = bits(hitsVec, 10, 10) @[Mux.scala 20:36]
    node T_1852 = bits(hitsVec, 11, 11) @[Mux.scala 20:36]
    node T_1853 = bits(hitsVec, 12, 12) @[Mux.scala 20:36]
    node T_1854 = bits(hitsVec, 13, 13) @[Mux.scala 20:36]
    node T_1855 = bits(hitsVec, 14, 14) @[Mux.scala 20:36]
    node T_1856 = bits(hitsVec, 15, 15) @[Mux.scala 20:36]
    node T_1857 = bits(hitsVec, 16, 16) @[Mux.scala 20:36]
    node T_1858 = bits(hitsVec, 17, 17) @[Mux.scala 20:36]
    node T_1859 = bits(hitsVec, 18, 18) @[Mux.scala 20:36]
    node T_1860 = bits(hitsVec, 19, 19) @[Mux.scala 20:36]
    node T_1861 = bits(hitsVec, 20, 20) @[Mux.scala 20:36]
    node T_1862 = bits(hitsVec, 21, 21) @[Mux.scala 20:36]
    node T_1863 = bits(hitsVec, 22, 22) @[Mux.scala 20:36]
    node T_1864 = bits(hitsVec, 23, 23) @[Mux.scala 20:36]
    node T_1865 = bits(hitsVec, 24, 24) @[Mux.scala 20:36]
    node T_1866 = bits(hitsVec, 25, 25) @[Mux.scala 20:36]
    node T_1867 = bits(hitsVec, 26, 26) @[Mux.scala 20:36]
    node T_1868 = bits(hitsVec, 27, 27) @[Mux.scala 20:36]
    node T_1869 = bits(hitsVec, 28, 28) @[Mux.scala 20:36]
    node T_1870 = bits(hitsVec, 29, 29) @[Mux.scala 20:36]
    node T_1871 = bits(hitsVec, 30, 30) @[Mux.scala 20:36]
    node T_1872 = bits(hitsVec, 31, 31) @[Mux.scala 20:36]
    node T_1873 = bits(hitsVec, 32, 32) @[Mux.scala 20:36]
    node T_1874 = bits(hitsVec, 33, 33) @[Mux.scala 20:36]
    node T_1875 = bits(hitsVec, 34, 34) @[Mux.scala 20:36]
    node T_1876 = bits(hitsVec, 35, 35) @[Mux.scala 20:36]
    node T_1877 = bits(hitsVec, 36, 36) @[Mux.scala 20:36]
    node T_1878 = bits(hitsVec, 37, 37) @[Mux.scala 20:36]
    node T_1879 = bits(hitsVec, 38, 38) @[Mux.scala 20:36]
    node T_1880 = bits(hitsVec, 39, 39) @[Mux.scala 20:36]
    node T_1882 = mux(T_1841, tgts[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1884 = mux(T_1842, tgts[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1886 = mux(T_1843, tgts[2], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1888 = mux(T_1844, tgts[3], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1890 = mux(T_1845, tgts[4], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1892 = mux(T_1846, tgts[5], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1894 = mux(T_1847, tgts[6], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1896 = mux(T_1848, tgts[7], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1898 = mux(T_1849, tgts[8], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1900 = mux(T_1850, tgts[9], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1902 = mux(T_1851, tgts[10], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1904 = mux(T_1852, tgts[11], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1906 = mux(T_1853, tgts[12], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1908 = mux(T_1854, tgts[13], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1910 = mux(T_1855, tgts[14], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1912 = mux(T_1856, tgts[15], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1914 = mux(T_1857, tgts[16], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1916 = mux(T_1858, tgts[17], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1918 = mux(T_1859, tgts[18], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1920 = mux(T_1860, tgts[19], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1922 = mux(T_1861, tgts[20], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1924 = mux(T_1862, tgts[21], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1926 = mux(T_1863, tgts[22], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1928 = mux(T_1864, tgts[23], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1930 = mux(T_1865, tgts[24], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1932 = mux(T_1866, tgts[25], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1934 = mux(T_1867, tgts[26], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1936 = mux(T_1868, tgts[27], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1938 = mux(T_1869, tgts[28], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1940 = mux(T_1870, tgts[29], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1942 = mux(T_1871, tgts[30], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1944 = mux(T_1872, tgts[31], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1946 = mux(T_1873, tgts[32], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1948 = mux(T_1874, tgts[33], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1950 = mux(T_1875, tgts[34], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1952 = mux(T_1876, tgts[35], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1954 = mux(T_1877, tgts[36], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1956 = mux(T_1878, tgts[37], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1958 = mux(T_1879, tgts[38], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1960 = mux(T_1880, tgts[39], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_1962 = or(T_1882, T_1884) @[Mux.scala 18:72]
    node T_1963 = or(T_1962, T_1886) @[Mux.scala 18:72]
    node T_1964 = or(T_1963, T_1888) @[Mux.scala 18:72]
    node T_1965 = or(T_1964, T_1890) @[Mux.scala 18:72]
    node T_1966 = or(T_1965, T_1892) @[Mux.scala 18:72]
    node T_1967 = or(T_1966, T_1894) @[Mux.scala 18:72]
    node T_1968 = or(T_1967, T_1896) @[Mux.scala 18:72]
    node T_1969 = or(T_1968, T_1898) @[Mux.scala 18:72]
    node T_1970 = or(T_1969, T_1900) @[Mux.scala 18:72]
    node T_1971 = or(T_1970, T_1902) @[Mux.scala 18:72]
    node T_1972 = or(T_1971, T_1904) @[Mux.scala 18:72]
    node T_1973 = or(T_1972, T_1906) @[Mux.scala 18:72]
    node T_1974 = or(T_1973, T_1908) @[Mux.scala 18:72]
    node T_1975 = or(T_1974, T_1910) @[Mux.scala 18:72]
    node T_1976 = or(T_1975, T_1912) @[Mux.scala 18:72]
    node T_1977 = or(T_1976, T_1914) @[Mux.scala 18:72]
    node T_1978 = or(T_1977, T_1916) @[Mux.scala 18:72]
    node T_1979 = or(T_1978, T_1918) @[Mux.scala 18:72]
    node T_1980 = or(T_1979, T_1920) @[Mux.scala 18:72]
    node T_1981 = or(T_1980, T_1922) @[Mux.scala 18:72]
    node T_1982 = or(T_1981, T_1924) @[Mux.scala 18:72]
    node T_1983 = or(T_1982, T_1926) @[Mux.scala 18:72]
    node T_1984 = or(T_1983, T_1928) @[Mux.scala 18:72]
    node T_1985 = or(T_1984, T_1930) @[Mux.scala 18:72]
    node T_1986 = or(T_1985, T_1932) @[Mux.scala 18:72]
    node T_1987 = or(T_1986, T_1934) @[Mux.scala 18:72]
    node T_1988 = or(T_1987, T_1936) @[Mux.scala 18:72]
    node T_1989 = or(T_1988, T_1938) @[Mux.scala 18:72]
    node T_1990 = or(T_1989, T_1940) @[Mux.scala 18:72]
    node T_1991 = or(T_1990, T_1942) @[Mux.scala 18:72]
    node T_1992 = or(T_1991, T_1944) @[Mux.scala 18:72]
    node T_1993 = or(T_1992, T_1946) @[Mux.scala 18:72]
    node T_1994 = or(T_1993, T_1948) @[Mux.scala 18:72]
    node T_1995 = or(T_1994, T_1950) @[Mux.scala 18:72]
    node T_1996 = or(T_1995, T_1952) @[Mux.scala 18:72]
    node T_1997 = or(T_1996, T_1954) @[Mux.scala 18:72]
    node T_1998 = or(T_1997, T_1956) @[Mux.scala 18:72]
    node T_1999 = or(T_1998, T_1958) @[Mux.scala 18:72]
    node T_2000 = or(T_1999, T_1960) @[Mux.scala 18:72]
    wire T_2001 : UInt<11>
    T_2001 is invalid
    T_2001 <= T_2000 @[Mux.scala 18:72]
    node T_2002 = shl(T_2001, 1) @[btb.scala 245:93]
    node T_2003 = cat(T_1840, T_2002) @[Cat.scala 20:58]
    io.resp.bits.target <= T_2003 @[btb.scala 245:23]
    node T_2004 = bits(hitsVec, 39, 32) @[OneHot.scala 22:18]
    node T_2005 = bits(hitsVec, 31, 0) @[OneHot.scala 23:18]
    node T_2007 = neq(T_2004, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2008 = or(T_2004, T_2005) @[OneHot.scala 24:28]
    node T_2009 = bits(T_2008, 31, 16) @[OneHot.scala 22:18]
    node T_2010 = bits(T_2008, 15, 0) @[OneHot.scala 23:18]
    node T_2012 = neq(T_2009, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2013 = or(T_2009, T_2010) @[OneHot.scala 24:28]
    node T_2014 = bits(T_2013, 15, 8) @[OneHot.scala 22:18]
    node T_2015 = bits(T_2013, 7, 0) @[OneHot.scala 23:18]
    node T_2017 = neq(T_2014, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2018 = or(T_2014, T_2015) @[OneHot.scala 24:28]
    node T_2019 = bits(T_2018, 7, 4) @[OneHot.scala 22:18]
    node T_2020 = bits(T_2018, 3, 0) @[OneHot.scala 23:18]
    node T_2022 = neq(T_2019, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2023 = or(T_2019, T_2020) @[OneHot.scala 24:28]
    node T_2024 = bits(T_2023, 3, 2) @[OneHot.scala 22:18]
    node T_2025 = bits(T_2023, 1, 0) @[OneHot.scala 23:18]
    node T_2027 = neq(T_2024, UInt<1>("h00")) @[OneHot.scala 24:14]
    node T_2028 = or(T_2024, T_2025) @[OneHot.scala 24:28]
    node T_2029 = bits(T_2028, 1, 1) @[CircuitMath.scala 21:8]
    node T_2030 = cat(T_2027, T_2029) @[Cat.scala 20:58]
    node T_2031 = cat(T_2022, T_2030) @[Cat.scala 20:58]
    node T_2032 = cat(T_2017, T_2031) @[Cat.scala 20:58]
    node T_2033 = cat(T_2012, T_2032) @[Cat.scala 20:58]
    node T_2034 = cat(T_2007, T_2033) @[Cat.scala 20:58]
    io.resp.bits.entry <= T_2034 @[btb.scala 246:22]
    node T_2035 = bits(hitsVec, 0, 0) @[Mux.scala 20:36]
    node T_2036 = bits(hitsVec, 1, 1) @[Mux.scala 20:36]
    node T_2037 = bits(hitsVec, 2, 2) @[Mux.scala 20:36]
    node T_2038 = bits(hitsVec, 3, 3) @[Mux.scala 20:36]
    node T_2039 = bits(hitsVec, 4, 4) @[Mux.scala 20:36]
    node T_2040 = bits(hitsVec, 5, 5) @[Mux.scala 20:36]
    node T_2041 = bits(hitsVec, 6, 6) @[Mux.scala 20:36]
    node T_2042 = bits(hitsVec, 7, 7) @[Mux.scala 20:36]
    node T_2043 = bits(hitsVec, 8, 8) @[Mux.scala 20:36]
    node T_2044 = bits(hitsVec, 9, 9) @[Mux.scala 20:36]
    node T_2045 = bits(hitsVec, 10, 10) @[Mux.scala 20:36]
    node T_2046 = bits(hitsVec, 11, 11) @[Mux.scala 20:36]
    node T_2047 = bits(hitsVec, 12, 12) @[Mux.scala 20:36]
    node T_2048 = bits(hitsVec, 13, 13) @[Mux.scala 20:36]
    node T_2049 = bits(hitsVec, 14, 14) @[Mux.scala 20:36]
    node T_2050 = bits(hitsVec, 15, 15) @[Mux.scala 20:36]
    node T_2051 = bits(hitsVec, 16, 16) @[Mux.scala 20:36]
    node T_2052 = bits(hitsVec, 17, 17) @[Mux.scala 20:36]
    node T_2053 = bits(hitsVec, 18, 18) @[Mux.scala 20:36]
    node T_2054 = bits(hitsVec, 19, 19) @[Mux.scala 20:36]
    node T_2055 = bits(hitsVec, 20, 20) @[Mux.scala 20:36]
    node T_2056 = bits(hitsVec, 21, 21) @[Mux.scala 20:36]
    node T_2057 = bits(hitsVec, 22, 22) @[Mux.scala 20:36]
    node T_2058 = bits(hitsVec, 23, 23) @[Mux.scala 20:36]
    node T_2059 = bits(hitsVec, 24, 24) @[Mux.scala 20:36]
    node T_2060 = bits(hitsVec, 25, 25) @[Mux.scala 20:36]
    node T_2061 = bits(hitsVec, 26, 26) @[Mux.scala 20:36]
    node T_2062 = bits(hitsVec, 27, 27) @[Mux.scala 20:36]
    node T_2063 = bits(hitsVec, 28, 28) @[Mux.scala 20:36]
    node T_2064 = bits(hitsVec, 29, 29) @[Mux.scala 20:36]
    node T_2065 = bits(hitsVec, 30, 30) @[Mux.scala 20:36]
    node T_2066 = bits(hitsVec, 31, 31) @[Mux.scala 20:36]
    node T_2067 = bits(hitsVec, 32, 32) @[Mux.scala 20:36]
    node T_2068 = bits(hitsVec, 33, 33) @[Mux.scala 20:36]
    node T_2069 = bits(hitsVec, 34, 34) @[Mux.scala 20:36]
    node T_2070 = bits(hitsVec, 35, 35) @[Mux.scala 20:36]
    node T_2071 = bits(hitsVec, 36, 36) @[Mux.scala 20:36]
    node T_2072 = bits(hitsVec, 37, 37) @[Mux.scala 20:36]
    node T_2073 = bits(hitsVec, 38, 38) @[Mux.scala 20:36]
    node T_2074 = bits(hitsVec, 39, 39) @[Mux.scala 20:36]
    node T_2076 = mux(T_2035, brIdx[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2078 = mux(T_2036, brIdx[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2080 = mux(T_2037, brIdx[2], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2082 = mux(T_2038, brIdx[3], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2084 = mux(T_2039, brIdx[4], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2086 = mux(T_2040, brIdx[5], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2088 = mux(T_2041, brIdx[6], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2090 = mux(T_2042, brIdx[7], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2092 = mux(T_2043, brIdx[8], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2094 = mux(T_2044, brIdx[9], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2096 = mux(T_2045, brIdx[10], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2098 = mux(T_2046, brIdx[11], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2100 = mux(T_2047, brIdx[12], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2102 = mux(T_2048, brIdx[13], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2104 = mux(T_2049, brIdx[14], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2106 = mux(T_2050, brIdx[15], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2108 = mux(T_2051, brIdx[16], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2110 = mux(T_2052, brIdx[17], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2112 = mux(T_2053, brIdx[18], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2114 = mux(T_2054, brIdx[19], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2116 = mux(T_2055, brIdx[20], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2118 = mux(T_2056, brIdx[21], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2120 = mux(T_2057, brIdx[22], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2122 = mux(T_2058, brIdx[23], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2124 = mux(T_2059, brIdx[24], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2126 = mux(T_2060, brIdx[25], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2128 = mux(T_2061, brIdx[26], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2130 = mux(T_2062, brIdx[27], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2132 = mux(T_2063, brIdx[28], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2134 = mux(T_2064, brIdx[29], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2136 = mux(T_2065, brIdx[30], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2138 = mux(T_2066, brIdx[31], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2140 = mux(T_2067, brIdx[32], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2142 = mux(T_2068, brIdx[33], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2144 = mux(T_2069, brIdx[34], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2146 = mux(T_2070, brIdx[35], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2148 = mux(T_2071, brIdx[36], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2150 = mux(T_2072, brIdx[37], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2152 = mux(T_2073, brIdx[38], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2154 = mux(T_2074, brIdx[39], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2156 = or(T_2076, T_2078) @[Mux.scala 18:72]
    node T_2157 = or(T_2156, T_2080) @[Mux.scala 18:72]
    node T_2158 = or(T_2157, T_2082) @[Mux.scala 18:72]
    node T_2159 = or(T_2158, T_2084) @[Mux.scala 18:72]
    node T_2160 = or(T_2159, T_2086) @[Mux.scala 18:72]
    node T_2161 = or(T_2160, T_2088) @[Mux.scala 18:72]
    node T_2162 = or(T_2161, T_2090) @[Mux.scala 18:72]
    node T_2163 = or(T_2162, T_2092) @[Mux.scala 18:72]
    node T_2164 = or(T_2163, T_2094) @[Mux.scala 18:72]
    node T_2165 = or(T_2164, T_2096) @[Mux.scala 18:72]
    node T_2166 = or(T_2165, T_2098) @[Mux.scala 18:72]
    node T_2167 = or(T_2166, T_2100) @[Mux.scala 18:72]
    node T_2168 = or(T_2167, T_2102) @[Mux.scala 18:72]
    node T_2169 = or(T_2168, T_2104) @[Mux.scala 18:72]
    node T_2170 = or(T_2169, T_2106) @[Mux.scala 18:72]
    node T_2171 = or(T_2170, T_2108) @[Mux.scala 18:72]
    node T_2172 = or(T_2171, T_2110) @[Mux.scala 18:72]
    node T_2173 = or(T_2172, T_2112) @[Mux.scala 18:72]
    node T_2174 = or(T_2173, T_2114) @[Mux.scala 18:72]
    node T_2175 = or(T_2174, T_2116) @[Mux.scala 18:72]
    node T_2176 = or(T_2175, T_2118) @[Mux.scala 18:72]
    node T_2177 = or(T_2176, T_2120) @[Mux.scala 18:72]
    node T_2178 = or(T_2177, T_2122) @[Mux.scala 18:72]
    node T_2179 = or(T_2178, T_2124) @[Mux.scala 18:72]
    node T_2180 = or(T_2179, T_2126) @[Mux.scala 18:72]
    node T_2181 = or(T_2180, T_2128) @[Mux.scala 18:72]
    node T_2182 = or(T_2181, T_2130) @[Mux.scala 18:72]
    node T_2183 = or(T_2182, T_2132) @[Mux.scala 18:72]
    node T_2184 = or(T_2183, T_2134) @[Mux.scala 18:72]
    node T_2185 = or(T_2184, T_2136) @[Mux.scala 18:72]
    node T_2186 = or(T_2185, T_2138) @[Mux.scala 18:72]
    node T_2187 = or(T_2186, T_2140) @[Mux.scala 18:72]
    node T_2188 = or(T_2187, T_2142) @[Mux.scala 18:72]
    node T_2189 = or(T_2188, T_2144) @[Mux.scala 18:72]
    node T_2190 = or(T_2189, T_2146) @[Mux.scala 18:72]
    node T_2191 = or(T_2190, T_2148) @[Mux.scala 18:72]
    node T_2192 = or(T_2191, T_2150) @[Mux.scala 18:72]
    node T_2193 = or(T_2192, T_2152) @[Mux.scala 18:72]
    node T_2194 = or(T_2193, T_2154) @[Mux.scala 18:72]
    wire T_2195 : UInt<1>
    T_2195 is invalid
    T_2195 <= T_2194 @[Mux.scala 18:72]
    io.resp.bits.bridx <= T_2195 @[btb.scala 247:22]
    node T_2197 = not(io.resp.bits.bridx) @[btb.scala 248:65]
    node T_2199 = mux(io.resp.bits.taken, T_2197, UInt<1>("h00")) @[btb.scala 248:44]
    node T_2200 = not(T_2199) @[btb.scala 248:40]
    node T_2201 = dshl(UInt<1>("h01"), T_2200) @[btb.scala 248:37]
    node T_2203 = sub(T_2201, UInt<1>("h01")) @[btb.scala 248:95]
    node T_2204 = tail(T_2203, 1) @[btb.scala 248:95]
    node T_2206 = cat(T_2204, UInt<1>("h01")) @[Cat.scala 20:58]
    io.resp.bits.mask <= T_2206 @[btb.scala 248:21]
    cmem T_2209 : UInt<2>[128] @[btb.scala 84:26]
    reg T_2211 : UInt<7>, clk
    node T_2212 = and(hitsVec, isJump) @[btb.scala 252:27]
    node T_2214 = neq(T_2212, UInt<1>("h00")) @[btb.scala 252:37]
    node T_2216 = eq(T_2214, UInt<1>("h00")) @[btb.scala 252:20]
    node T_2217 = and(io.req.valid, io.resp.valid) @[btb.scala 253:54]
    node T_2218 = and(T_2217, T_2216) @[btb.scala 253:71]
    wire T_2222 : {history : UInt<7>, value : UInt<2>} @[btb.scala 70:19]
    T_2222 is invalid @[btb.scala 70:19]
    node T_2225 = bits(io.req.bits.addr, 8, 1) @[btb.scala 71:21]
    node T_2226 = xor(T_2225, T_2211) @[btb.scala 71:57]
    infer mport T_2227 = T_2209[T_2226], clk
    T_2222.value <= T_2227 @[btb.scala 72:15]
    T_2222.history <= T_2211 @[btb.scala 73:17]
    node T_2228 = bits(T_2222.value, 0, 0) @[btb.scala 74:26]
    when T_2218 : @[btb.scala 75:19]
      node T_2229 = bits(T_2211, 6, 1) @[btb.scala 75:50]
      node T_2230 = cat(T_2228, T_2229) @[Cat.scala 20:58]
      T_2211 <= T_2230 @[btb.scala 75:29]
      skip @[btb.scala 75:19]
    node T_2231 = and(io.bht_update.valid, io.bht_update.bits.prediction.valid) @[btb.scala 255:31]
    when T_2231 : @[btb.scala 255:50]
      node T_2232 = bits(io.bht_update.bits.pc, 8, 1) @[btb.scala 79:21]
      node T_2233 = xor(T_2232, io.bht_update.bits.prediction.bits.bht.history) @[btb.scala 79:57]
      infer mport T_2234 = T_2209[T_2233], clk
      node T_2235 = bits(io.bht_update.bits.prediction.bits.bht.value, 1, 1) @[btb.scala 80:40]
      node T_2236 = bits(io.bht_update.bits.prediction.bits.bht.value, 0, 0) @[btb.scala 80:53]
      node T_2237 = and(T_2235, T_2236) @[btb.scala 80:44]
      node T_2238 = bits(io.bht_update.bits.prediction.bits.bht.value, 1, 1) @[btb.scala 80:69]
      node T_2239 = bits(io.bht_update.bits.prediction.bits.bht.value, 0, 0) @[btb.scala 80:82]
      node T_2240 = or(T_2238, T_2239) @[btb.scala 80:73]
      node T_2241 = and(T_2240, io.bht_update.bits.taken) @[btb.scala 80:87]
      node T_2242 = or(T_2237, T_2241) @[btb.scala 80:58]
      node T_2243 = cat(io.bht_update.bits.taken, T_2242) @[Cat.scala 20:58]
      T_2234 <= T_2243 @[btb.scala 80:18]
      when io.bht_update.bits.mispredict : @[btb.scala 81:23]
        node T_2244 = bits(io.bht_update.bits.prediction.bits.bht.history, 6, 1) @[btb.scala 81:56]
        node T_2245 = cat(io.bht_update.bits.taken, T_2244) @[Cat.scala 20:58]
        T_2211 <= T_2245 @[btb.scala 81:33]
        skip @[btb.scala 81:23]
      skip @[btb.scala 255:50]
    node T_2246 = bits(T_2222.value, 0, 0) @[btb.scala 258:21]
    node T_2248 = eq(T_2246, UInt<1>("h00")) @[btb.scala 258:11]
    node T_2249 = and(T_2248, T_2216) @[btb.scala 258:25]
    when T_2249 : @[btb.scala 258:38]
      io.resp.bits.taken <= UInt<1>("h00") @[btb.scala 258:59]
      skip @[btb.scala 258:38]
    io.resp.bits.bht <- T_2222 @[btb.scala 259:22]
    reg T_2252 : UInt<2>, clk
    reg T_2254 : UInt<1>, clk
    reg T_2261 : UInt[2], clk
    node T_2263 = and(hitsVec, isReturn) @[btb.scala 264:24]
    node T_2265 = neq(T_2263, UInt<1>("h00")) @[btb.scala 264:36]
    node T_2267 = eq(T_2252, UInt<1>("h00")) @[btb.scala 46:29]
    node T_2269 = eq(T_2267, UInt<1>("h00")) @[btb.scala 265:11]
    node T_2270 = and(T_2269, T_2265) @[btb.scala 265:24]
    when T_2270 : @[btb.scala 265:35]
      io.resp.bits.target <= T_2261[T_2254] @[btb.scala 266:27]
      skip @[btb.scala 265:35]
    when io.ras_update.valid : @[btb.scala 268:32]
      when io.ras_update.bits.isCall : @[btb.scala 269:40]
        node T_2272 = lt(T_2252, UInt<2>("h02")) @[btb.scala 35:17]
        when T_2272 : @[btb.scala 35:25]
          node T_2274 = add(T_2252, UInt<1>("h01")) @[btb.scala 35:42]
          node T_2275 = tail(T_2274, 1) @[btb.scala 35:42]
          T_2252 <= T_2275 @[btb.scala 35:33]
          skip @[btb.scala 35:25]
        node T_2278 = lt(T_2254, UInt<1>("h01")) @[btb.scala 36:49]
        node T_2279 = or(UInt<1>("h01"), T_2278) @[btb.scala 36:42]
        node T_2281 = add(T_2254, UInt<1>("h01")) @[btb.scala 36:62]
        node T_2282 = tail(T_2281, 1) @[btb.scala 36:62]
        node T_2284 = mux(T_2279, T_2282, UInt<1>("h00")) @[btb.scala 36:22]
        T_2261[T_2284] <= io.ras_update.bits.returnAddr @[btb.scala 37:20]
        T_2254 <= T_2284 @[btb.scala 38:9]
        when T_2265 : @[btb.scala 271:23]
          io.resp.bits.target <= io.ras_update.bits.returnAddr @[btb.scala 272:31]
          skip @[btb.scala 271:23]
        skip @[btb.scala 269:40]
      node T_2285 = and(io.ras_update.bits.isReturn, io.ras_update.bits.prediction.valid) @[btb.scala 274:47]
      node T_2287 = eq(io.ras_update.bits.isCall, UInt<1>("h00")) @[btb.scala 269:40]
      node T_2288 = and(T_2287, T_2285) @[btb.scala 274:87]
      when T_2288 : @[btb.scala 274:87]
        node T_2290 = eq(T_2252, UInt<1>("h00")) @[btb.scala 46:29]
        node T_2292 = eq(T_2290, UInt<1>("h00")) @[btb.scala 41:27]
        when T_2292 : @[btb.scala 41:37]
          node T_2294 = sub(T_2252, UInt<1>("h01")) @[btb.scala 42:20]
          node T_2295 = tail(T_2294, 1) @[btb.scala 42:20]
          T_2252 <= T_2295 @[btb.scala 42:11]
          node T_2298 = gt(T_2254, UInt<1>("h00")) @[btb.scala 43:42]
          node T_2299 = or(UInt<1>("h01"), T_2298) @[btb.scala 43:35]
          node T_2301 = sub(T_2254, UInt<1>("h01")) @[btb.scala 43:50]
          node T_2302 = tail(T_2301, 1) @[btb.scala 43:50]
          node T_2304 = mux(T_2299, T_2302, UInt<1>("h01")) @[btb.scala 43:15]
          T_2254 <= T_2304 @[btb.scala 43:9]
          skip @[btb.scala 41:37]
        skip @[btb.scala 274:87]
      skip @[btb.scala 268:32]
    
  module Frontend : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip cpu : {req : {valid : UInt<1>, bits : {pc : UInt<40>, speculative : UInt<1>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {btb : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<40>, data : UInt<32>, mask : UInt<2>, xcpt_if : UInt<1>, replay : UInt<1>}}, btb_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}}, bht_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, taken : UInt<1>, mispredict : UInt<1>}}, ras_update : {valid : UInt<1>, bits : {isCall : UInt<1>, isReturn : UInt<1>, returnAddr : UInt<39>, prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}}}, flush_icache : UInt<1>, flush_tlb : UInt<1>, flip npc : UInt<40>}, ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}, mem : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    inst icache of ICache @[frontend.scala 40:22]
    icache.io is invalid
    icache.clk <= clk
    icache.reset <= reset
    inst tlb of TLB @[frontend.scala 41:19]
    tlb.io is invalid
    tlb.clk <= clk
    tlb.reset <= reset
    reg s1_pc_ : UInt<40>, clk
    node T_1485 = not(s1_pc_) @[frontend.scala 44:17]
    node T_1487 = or(T_1485, UInt<1>("h01")) @[frontend.scala 44:25]
    node s1_pc = not(T_1487) @[frontend.scala 44:15]
    reg s1_speculative : UInt<1>, clk
    reg s1_same_block : UInt<1>, clk
    reg s2_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h01")))
    reg s2_pc : UInt, clk with : (reset => (reset, UInt<13>("h01000")))
    reg s2_btb_resp_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg s2_btb_resp_bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, clk
    reg s2_xcpt_if : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg s2_speculative : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg s2_cacheable : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1513 = not(s1_pc) @[frontend.scala 55:16]
    node T_1515 = or(T_1513, UInt<2>("h03")) @[frontend.scala 55:23]
    node T_1516 = not(T_1515) @[frontend.scala 55:14]
    node T_1518 = add(T_1516, UInt<3>("h04")) @[frontend.scala 55:55]
    node ntpc = tail(T_1518, 1) @[frontend.scala 55:55]
    node T_1520 = and(ntpc, UInt<4>("h08")) @[frontend.scala 56:31]
    node T_1522 = and(s1_pc, UInt<4>("h08")) @[frontend.scala 56:54]
    node ntpc_same_block = eq(T_1520, T_1522) @[frontend.scala 56:43]
    wire predicted_npc : UInt
    predicted_npc is invalid
    predicted_npc <= ntpc
    wire predicted_taken : UInt<1>
    predicted_taken is invalid
    predicted_taken <= UInt<1>("h00")
    node T_1525 = eq(icache.io.resp.valid, UInt<1>("h00")) @[frontend.scala 59:28]
    node icmiss = and(s2_valid, T_1525) @[frontend.scala 59:25]
    node npc = mux(icmiss, s2_pc, predicted_npc) @[frontend.scala 60:16]
    node T_1527 = eq(predicted_taken, UInt<1>("h00")) @[frontend.scala 61:23]
    node T_1529 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 61:43]
    node T_1530 = and(T_1527, T_1529) @[frontend.scala 61:40]
    node T_1532 = eq(io.cpu.req.valid, UInt<1>("h00")) @[frontend.scala 61:54]
    node T_1533 = and(T_1530, T_1532) @[frontend.scala 61:51]
    node s0_same_block = and(T_1533, ntpc_same_block) @[frontend.scala 61:72]
    node T_1535 = eq(io.cpu.resp.ready, UInt<1>("h00")) @[frontend.scala 63:36]
    node stall = and(io.cpu.resp.valid, T_1535) @[frontend.scala 63:33]
    node T_1537 = eq(stall, UInt<1>("h00")) @[frontend.scala 64:9]
    when T_1537 : @[frontend.scala 64:17]
      node T_1539 = eq(tlb.io.resp.miss, UInt<1>("h00")) @[frontend.scala 65:39]
      node T_1540 = and(s0_same_block, T_1539) @[frontend.scala 65:36]
      s1_same_block <= T_1540 @[frontend.scala 65:19]
      s1_pc_ <= io.cpu.npc @[frontend.scala 66:12]
      node T_1542 = eq(s2_speculative, UInt<1>("h00")) @[frontend.scala 70:58]
      node T_1543 = and(s2_valid, T_1542) @[frontend.scala 70:55]
      node T_1544 = or(s1_speculative, T_1543) @[frontend.scala 70:43]
      node T_1545 = or(T_1544, predicted_taken) @[frontend.scala 70:74]
      node T_1546 = mux(icmiss, s2_speculative, T_1545) @[frontend.scala 72:26]
      s1_speculative <= T_1546 @[frontend.scala 72:20]
      node T_1548 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 73:17]
      s2_valid <= T_1548 @[frontend.scala 73:14]
      node T_1550 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 74:11]
      when T_1550 : @[frontend.scala 74:20]
        s2_pc <= s1_pc @[frontend.scala 75:13]
        s2_speculative <= s1_speculative @[frontend.scala 76:22]
        s2_cacheable <= tlb.io.resp.cacheable @[frontend.scala 77:20]
        s2_xcpt_if <= tlb.io.resp.xcpt_if @[frontend.scala 78:18]
        skip @[frontend.scala 74:20]
      skip @[frontend.scala 64:17]
    when io.cpu.req.valid : @[frontend.scala 81:27]
      s1_same_block <= UInt<1>("h00") @[frontend.scala 82:19]
      s1_pc_ <= io.cpu.npc @[frontend.scala 83:12]
      s1_speculative <= io.cpu.req.bits.speculative @[frontend.scala 84:20]
      s2_valid <= UInt<1>("h00") @[frontend.scala 85:14]
      skip @[frontend.scala 81:27]
    inst BTB_1 of BTB @[frontend.scala 89:21]
    BTB_1.io is invalid
    BTB_1.clk <= clk
    BTB_1.reset <= reset
    BTB_1.io.req.valid <= UInt<1>("h00") @[frontend.scala 90:22]
    BTB_1.io.req.bits.addr <= s1_pc_ @[frontend.scala 91:26]
    BTB_1.io.btb_update <- io.cpu.btb_update @[frontend.scala 92:23]
    BTB_1.io.bht_update <- io.cpu.bht_update @[frontend.scala 93:23]
    BTB_1.io.ras_update <- io.cpu.ras_update @[frontend.scala 94:23]
    node T_1555 = eq(stall, UInt<1>("h00")) @[frontend.scala 95:11]
    node T_1557 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 95:21]
    node T_1558 = and(T_1555, T_1557) @[frontend.scala 95:18]
    when T_1558 : @[frontend.scala 95:30]
      BTB_1.io.req.valid <= UInt<1>("h01") @[frontend.scala 96:24]
      s2_btb_resp_valid <= BTB_1.io.resp.valid @[frontend.scala 97:25]
      s2_btb_resp_bits <- BTB_1.io.resp.bits @[frontend.scala 98:24]
      skip @[frontend.scala 95:30]
    node T_1560 = and(BTB_1.io.resp.valid, BTB_1.io.resp.bits.taken) @[frontend.scala 100:29]
    when T_1560 : @[frontend.scala 100:56]
      node T_1561 = bits(BTB_1.io.resp.bits.target, 38, 38) @[util.scala 21:38]
      node T_1562 = cat(T_1561, BTB_1.io.resp.bits.target) @[Cat.scala 20:58]
      predicted_npc <= T_1562 @[frontend.scala 101:21]
      predicted_taken <= UInt<1>("h01") @[frontend.scala 102:23]
      skip @[frontend.scala 100:56]
    io.ptw <- tlb.io.ptw @[frontend.scala 106:10]
    node T_1565 = eq(stall, UInt<1>("h00")) @[frontend.scala 107:23]
    node T_1567 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 107:33]
    node T_1568 = and(T_1565, T_1567) @[frontend.scala 107:30]
    tlb.io.req.valid <= T_1568 @[frontend.scala 107:20]
    node T_1569 = shr(s1_pc, 12) @[frontend.scala 108:32]
    tlb.io.req.bits.vpn <= T_1569 @[frontend.scala 108:23]
    tlb.io.req.bits.passthrough <= UInt<1>("h00") @[frontend.scala 109:31]
    tlb.io.req.bits.instruction <= UInt<1>("h01") @[frontend.scala 110:31]
    tlb.io.req.bits.store <= UInt<1>("h00") @[frontend.scala 111:25]
    io.mem <- icache.io.mem @[frontend.scala 113:10]
    node T_1574 = eq(stall, UInt<1>("h00")) @[frontend.scala 114:26]
    node T_1576 = eq(s0_same_block, UInt<1>("h00")) @[frontend.scala 114:36]
    node T_1577 = and(T_1574, T_1576) @[frontend.scala 114:33]
    icache.io.req.valid <= T_1577 @[frontend.scala 114:23]
    icache.io.req.bits.addr <= io.cpu.npc @[frontend.scala 115:27]
    icache.io.invalidate <= io.cpu.flush_icache @[frontend.scala 116:24]
    icache.io.s1_ppn <= tlb.io.resp.ppn @[frontend.scala 117:20]
    node T_1578 = or(io.cpu.req.valid, tlb.io.resp.miss) @[frontend.scala 118:41]
    node T_1579 = or(T_1578, tlb.io.resp.xcpt_if) @[frontend.scala 118:61]
    node T_1580 = or(T_1579, icmiss) @[frontend.scala 118:84]
    node T_1581 = or(T_1580, io.cpu.flush_tlb) @[frontend.scala 118:94]
    icache.io.s1_kill <= T_1581 @[frontend.scala 118:21]
    node T_1583 = eq(s2_cacheable, UInt<1>("h00")) @[frontend.scala 119:42]
    node T_1584 = and(s2_speculative, T_1583) @[frontend.scala 119:39]
    icache.io.s2_kill <= T_1584 @[frontend.scala 119:21]
    node T_1586 = eq(stall, UInt<1>("h00")) @[frontend.scala 120:27]
    node T_1588 = eq(s1_same_block, UInt<1>("h00")) @[frontend.scala 120:37]
    node T_1589 = and(T_1586, T_1588) @[frontend.scala 120:34]
    icache.io.resp.ready <= T_1589 @[frontend.scala 120:24]
    node T_1590 = or(icache.io.resp.valid, icache.io.s2_kill) @[frontend.scala 122:58]
    node T_1591 = or(T_1590, s2_xcpt_if) @[frontend.scala 122:79]
    node T_1592 = and(s2_valid, T_1591) @[frontend.scala 122:33]
    io.cpu.resp.valid <= T_1592 @[frontend.scala 122:21]
    io.cpu.resp.bits.pc <= s2_pc @[frontend.scala 123:23]
    node T_1593 = mux(io.cpu.req.valid, io.cpu.req.bits.pc, npc) @[frontend.scala 124:20]
    io.cpu.npc <= T_1593 @[frontend.scala 124:14]
    node T_1594 = bits(s2_pc, 2, 2) @[util.scala 25:13]
    node T_1595 = shl(T_1594, 5) @[frontend.scala 127:133]
    node T_1596 = dshr(icache.io.resp.bits.datablock, T_1595) @[frontend.scala 127:58]
    io.cpu.resp.bits.data <= T_1596 @[frontend.scala 127:25]
    node T_1598 = bits(s2_pc, 1, 1) @[util.scala 25:13]
    node T_1599 = dshl(UInt<2>("h03"), T_1598) @[frontend.scala 128:54]
    io.cpu.resp.bits.mask <= T_1599 @[frontend.scala 128:25]
    io.cpu.resp.bits.xcpt_if <= s2_xcpt_if @[frontend.scala 129:28]
    node T_1601 = eq(icache.io.resp.valid, UInt<1>("h00")) @[frontend.scala 130:51]
    node T_1602 = and(icache.io.s2_kill, T_1601) @[frontend.scala 130:48]
    node T_1604 = eq(s2_xcpt_if, UInt<1>("h00")) @[frontend.scala 130:76]
    node T_1605 = and(T_1602, T_1604) @[frontend.scala 130:73]
    io.cpu.resp.bits.replay <= T_1605 @[frontend.scala 130:27]
    io.cpu.resp.bits.btb.valid <= s2_btb_resp_valid @[frontend.scala 131:30]
    io.cpu.resp.bits.btb.bits <- s2_btb_resp_bits @[frontend.scala 132:29]
    
  module FinishQueue : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {manager_xact_id : UInt<4>, manager_id : UInt<1>}[1] @[Decoupled.scala 175:16]
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 180:33]
    node T_221 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_221) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_222 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_222
    node T_223 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_223
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_224 = ram[UInt<1>("h00")], clk
      T_224 <- io.enq.bits @[Decoupled.scala 187:24]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      skip @[Decoupled.scala 190:17]
    node T_249 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_249 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_251 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_251 @[Decoupled.scala 197:16]
    node T_253 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_253 @[Decoupled.scala 198:16]
    infer mport T_254 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_254 @[Decoupled.scala 199:15]
    node T_277 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_277, 1) @[Decoupled.scala 214:32]
    node T_278 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_279 = cat(T_278, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_279 @[Decoupled.scala 216:14]
    
  module Arbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>}}[3], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>}}, chosen : UInt<2>}
    
    io is invalid
    io.chosen <= UInt<2>("h02") @[Arbiter.scala 106:13]
    io.out.bits <- io.in[2].bits @[Arbiter.scala 107:15]
    when io.in[1].valid : @[Arbiter.scala 109:27]
      io.chosen <= UInt<1>("h01") @[Arbiter.scala 110:17]
      io.out.bits <- io.in[1].bits @[Arbiter.scala 111:19]
      skip @[Arbiter.scala 109:27]
    when io.in[0].valid : @[Arbiter.scala 109:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 110:17]
      io.out.bits <- io.in[0].bits @[Arbiter.scala 111:19]
      skip @[Arbiter.scala 109:27]
    node T_637 = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 23:72]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node grant_2 = eq(T_637, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_640 = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 117:19]
    io.in[0].ready <= T_640 @[Arbiter.scala 117:14]
    node T_641 = and(grant_1, io.out.ready) @[Arbiter.scala 117:19]
    io.in[1].ready <= T_641 @[Arbiter.scala 117:14]
    node T_642 = and(grant_2, io.out.ready) @[Arbiter.scala 117:19]
    io.in[2].ready <= T_642 @[Arbiter.scala 117:14]
    node T_644 = eq(grant_2, UInt<1>("h00")) @[Arbiter.scala 118:19]
    node T_645 = or(T_644, io.in[2].valid) @[Arbiter.scala 118:31]
    io.out.valid <= T_645 @[Arbiter.scala 118:16]
    
  module Arbiter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>, data : {tag : UInt<20>, coh : {state : UInt<2>}}}}[3], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>, data : {tag : UInt<20>, coh : {state : UInt<2>}}}}, chosen : UInt<2>}
    
    io is invalid
    io.chosen <= UInt<2>("h02") @[Arbiter.scala 106:13]
    io.out.bits <- io.in[2].bits @[Arbiter.scala 107:15]
    when io.in[1].valid : @[Arbiter.scala 109:27]
      io.chosen <= UInt<1>("h01") @[Arbiter.scala 110:17]
      io.out.bits <- io.in[1].bits @[Arbiter.scala 111:19]
      skip @[Arbiter.scala 109:27]
    when io.in[0].valid : @[Arbiter.scala 109:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 110:17]
      io.out.bits <- io.in[0].bits @[Arbiter.scala 111:19]
      skip @[Arbiter.scala 109:27]
    node T_2821 = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 23:72]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node grant_2 = eq(T_2821, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_2824 = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 117:19]
    io.in[0].ready <= T_2824 @[Arbiter.scala 117:14]
    node T_2825 = and(grant_1, io.out.ready) @[Arbiter.scala 117:19]
    io.in[1].ready <= T_2825 @[Arbiter.scala 117:14]
    node T_2826 = and(grant_2, io.out.ready) @[Arbiter.scala 117:19]
    io.in[2].ready <= T_2826 @[Arbiter.scala 117:14]
    node T_2828 = eq(grant_2, UInt<1>("h00")) @[Arbiter.scala 118:19]
    node T_2829 = or(T_2828, io.in[2].valid) @[Arbiter.scala 118:31]
    io.out.valid <= T_2829 @[Arbiter.scala 118:16]
    
  module DCacheDataArray : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {valid : UInt<1>, bits : {addr : UInt<12>, write : UInt<1>, wdata : UInt<64>, wmask : UInt<8>, way_en : UInt<4>}}, resp : UInt<64>[4]}
    
    io is invalid
    node addr = shr(io.req.bits.addr, 3) @[dcache.scala 29:31]
    smem T_406 : UInt<8>[8][512] @[dcache.scala 31:23]
    node T_408 = bits(io.req.bits.way_en, 0, 0) @[dcache.scala 32:72]
    node T_409 = or(UInt<1>("h00"), T_408) @[dcache.scala 32:51]
    node T_410 = and(io.req.valid, T_409) @[dcache.scala 32:30]
    node T_411 = and(T_410, io.req.bits.write) @[dcache.scala 33:17]
    when T_411 : @[dcache.scala 33:39]
      node T_412 = bits(io.req.bits.wdata, 7, 0) @[dcache.scala 34:63]
      node T_413 = bits(io.req.bits.wdata, 15, 8) @[dcache.scala 34:63]
      node T_414 = bits(io.req.bits.wdata, 23, 16) @[dcache.scala 34:63]
      node T_415 = bits(io.req.bits.wdata, 31, 24) @[dcache.scala 34:63]
      node T_416 = bits(io.req.bits.wdata, 39, 32) @[dcache.scala 34:63]
      node T_417 = bits(io.req.bits.wdata, 47, 40) @[dcache.scala 34:63]
      node T_418 = bits(io.req.bits.wdata, 55, 48) @[dcache.scala 34:63]
      node T_419 = bits(io.req.bits.wdata, 63, 56) @[dcache.scala 34:63]
      wire T_425 : UInt<8>[8] @[dcache.scala 34:40]
      T_425 is invalid @[dcache.scala 34:40]
      T_425[0] <= T_412 @[dcache.scala 34:40]
      T_425[1] <= T_413 @[dcache.scala 34:40]
      T_425[2] <= T_414 @[dcache.scala 34:40]
      T_425[3] <= T_415 @[dcache.scala 34:40]
      T_425[4] <= T_416 @[dcache.scala 34:40]
      T_425[5] <= T_417 @[dcache.scala 34:40]
      T_425[6] <= T_418 @[dcache.scala 34:40]
      T_425[7] <= T_419 @[dcache.scala 34:40]
      node T_427 = bits(io.req.bits.wmask, 0, 0) @[dcache.scala 35:49]
      node T_428 = bits(io.req.bits.wmask, 1, 1) @[dcache.scala 35:49]
      node T_429 = bits(io.req.bits.wmask, 2, 2) @[dcache.scala 35:49]
      node T_430 = bits(io.req.bits.wmask, 3, 3) @[dcache.scala 35:49]
      node T_431 = bits(io.req.bits.wmask, 4, 4) @[dcache.scala 35:49]
      node T_432 = bits(io.req.bits.wmask, 5, 5) @[dcache.scala 35:49]
      node T_433 = bits(io.req.bits.wmask, 6, 6) @[dcache.scala 35:49]
      node T_434 = bits(io.req.bits.wmask, 7, 7) @[dcache.scala 35:49]
      write mport T_437 = T_406[addr], clk
      when T_427 :
        T_437[0] <= T_425[0]
        skip
      when T_428 :
        T_437[1] <= T_425[1]
        skip
      when T_429 :
        T_437[2] <= T_425[2]
        skip
      when T_430 :
        T_437[3] <= T_425[3]
        skip
      when T_431 :
        T_437[4] <= T_425[4]
        skip
      when T_432 :
        T_437[5] <= T_425[5]
        skip
      when T_433 :
        T_437[6] <= T_425[6]
        skip
      when T_434 :
        T_437[7] <= T_425[7]
        skip
      skip @[dcache.scala 33:39]
    node T_440 = eq(io.req.bits.write, UInt<1>("h00")) @[dcache.scala 37:45]
    node T_441 = and(T_410, T_440) @[dcache.scala 37:42]
    wire T_443 : UInt
    T_443 is invalid
    when T_441 :
      T_443 <= addr
      skip
    read mport T_446 = T_406[T_443], clk
    node T_448 = cat(T_446[1], T_446[0]) @[dcache.scala 37:65]
    node T_449 = cat(T_446[3], T_446[2]) @[dcache.scala 37:65]
    node T_450 = cat(T_449, T_448) @[dcache.scala 37:65]
    node T_451 = cat(T_446[5], T_446[4]) @[dcache.scala 37:65]
    node T_452 = cat(T_446[7], T_446[6]) @[dcache.scala 37:65]
    node T_453 = cat(T_452, T_451) @[dcache.scala 37:65]
    node T_454 = cat(T_453, T_450) @[dcache.scala 37:65]
    io.resp[0] <= T_454 @[dcache.scala 37:16]
    smem T_463 : UInt<8>[8][512] @[dcache.scala 31:23]
    node T_465 = bits(io.req.bits.way_en, 1, 1) @[dcache.scala 32:72]
    node T_466 = or(UInt<1>("h00"), T_465) @[dcache.scala 32:51]
    node T_467 = and(io.req.valid, T_466) @[dcache.scala 32:30]
    node T_468 = and(T_467, io.req.bits.write) @[dcache.scala 33:17]
    when T_468 : @[dcache.scala 33:39]
      node T_469 = bits(io.req.bits.wdata, 7, 0) @[dcache.scala 34:63]
      node T_470 = bits(io.req.bits.wdata, 15, 8) @[dcache.scala 34:63]
      node T_471 = bits(io.req.bits.wdata, 23, 16) @[dcache.scala 34:63]
      node T_472 = bits(io.req.bits.wdata, 31, 24) @[dcache.scala 34:63]
      node T_473 = bits(io.req.bits.wdata, 39, 32) @[dcache.scala 34:63]
      node T_474 = bits(io.req.bits.wdata, 47, 40) @[dcache.scala 34:63]
      node T_475 = bits(io.req.bits.wdata, 55, 48) @[dcache.scala 34:63]
      node T_476 = bits(io.req.bits.wdata, 63, 56) @[dcache.scala 34:63]
      wire T_482 : UInt<8>[8] @[dcache.scala 34:40]
      T_482 is invalid @[dcache.scala 34:40]
      T_482[0] <= T_469 @[dcache.scala 34:40]
      T_482[1] <= T_470 @[dcache.scala 34:40]
      T_482[2] <= T_471 @[dcache.scala 34:40]
      T_482[3] <= T_472 @[dcache.scala 34:40]
      T_482[4] <= T_473 @[dcache.scala 34:40]
      T_482[5] <= T_474 @[dcache.scala 34:40]
      T_482[6] <= T_475 @[dcache.scala 34:40]
      T_482[7] <= T_476 @[dcache.scala 34:40]
      node T_484 = bits(io.req.bits.wmask, 0, 0) @[dcache.scala 35:49]
      node T_485 = bits(io.req.bits.wmask, 1, 1) @[dcache.scala 35:49]
      node T_486 = bits(io.req.bits.wmask, 2, 2) @[dcache.scala 35:49]
      node T_487 = bits(io.req.bits.wmask, 3, 3) @[dcache.scala 35:49]
      node T_488 = bits(io.req.bits.wmask, 4, 4) @[dcache.scala 35:49]
      node T_489 = bits(io.req.bits.wmask, 5, 5) @[dcache.scala 35:49]
      node T_490 = bits(io.req.bits.wmask, 6, 6) @[dcache.scala 35:49]
      node T_491 = bits(io.req.bits.wmask, 7, 7) @[dcache.scala 35:49]
      write mport T_494 = T_463[addr], clk
      when T_484 :
        T_494[0] <= T_482[0]
        skip
      when T_485 :
        T_494[1] <= T_482[1]
        skip
      when T_486 :
        T_494[2] <= T_482[2]
        skip
      when T_487 :
        T_494[3] <= T_482[3]
        skip
      when T_488 :
        T_494[4] <= T_482[4]
        skip
      when T_489 :
        T_494[5] <= T_482[5]
        skip
      when T_490 :
        T_494[6] <= T_482[6]
        skip
      when T_491 :
        T_494[7] <= T_482[7]
        skip
      skip @[dcache.scala 33:39]
    node T_497 = eq(io.req.bits.write, UInt<1>("h00")) @[dcache.scala 37:45]
    node T_498 = and(T_467, T_497) @[dcache.scala 37:42]
    wire T_500 : UInt
    T_500 is invalid
    when T_498 :
      T_500 <= addr
      skip
    read mport T_503 = T_463[T_500], clk
    node T_505 = cat(T_503[1], T_503[0]) @[dcache.scala 37:65]
    node T_506 = cat(T_503[3], T_503[2]) @[dcache.scala 37:65]
    node T_507 = cat(T_506, T_505) @[dcache.scala 37:65]
    node T_508 = cat(T_503[5], T_503[4]) @[dcache.scala 37:65]
    node T_509 = cat(T_503[7], T_503[6]) @[dcache.scala 37:65]
    node T_510 = cat(T_509, T_508) @[dcache.scala 37:65]
    node T_511 = cat(T_510, T_507) @[dcache.scala 37:65]
    io.resp[1] <= T_511 @[dcache.scala 37:16]
    smem T_520 : UInt<8>[8][512] @[dcache.scala 31:23]
    node T_522 = bits(io.req.bits.way_en, 2, 2) @[dcache.scala 32:72]
    node T_523 = or(UInt<1>("h00"), T_522) @[dcache.scala 32:51]
    node T_524 = and(io.req.valid, T_523) @[dcache.scala 32:30]
    node T_525 = and(T_524, io.req.bits.write) @[dcache.scala 33:17]
    when T_525 : @[dcache.scala 33:39]
      node T_526 = bits(io.req.bits.wdata, 7, 0) @[dcache.scala 34:63]
      node T_527 = bits(io.req.bits.wdata, 15, 8) @[dcache.scala 34:63]
      node T_528 = bits(io.req.bits.wdata, 23, 16) @[dcache.scala 34:63]
      node T_529 = bits(io.req.bits.wdata, 31, 24) @[dcache.scala 34:63]
      node T_530 = bits(io.req.bits.wdata, 39, 32) @[dcache.scala 34:63]
      node T_531 = bits(io.req.bits.wdata, 47, 40) @[dcache.scala 34:63]
      node T_532 = bits(io.req.bits.wdata, 55, 48) @[dcache.scala 34:63]
      node T_533 = bits(io.req.bits.wdata, 63, 56) @[dcache.scala 34:63]
      wire T_539 : UInt<8>[8] @[dcache.scala 34:40]
      T_539 is invalid @[dcache.scala 34:40]
      T_539[0] <= T_526 @[dcache.scala 34:40]
      T_539[1] <= T_527 @[dcache.scala 34:40]
      T_539[2] <= T_528 @[dcache.scala 34:40]
      T_539[3] <= T_529 @[dcache.scala 34:40]
      T_539[4] <= T_530 @[dcache.scala 34:40]
      T_539[5] <= T_531 @[dcache.scala 34:40]
      T_539[6] <= T_532 @[dcache.scala 34:40]
      T_539[7] <= T_533 @[dcache.scala 34:40]
      node T_541 = bits(io.req.bits.wmask, 0, 0) @[dcache.scala 35:49]
      node T_542 = bits(io.req.bits.wmask, 1, 1) @[dcache.scala 35:49]
      node T_543 = bits(io.req.bits.wmask, 2, 2) @[dcache.scala 35:49]
      node T_544 = bits(io.req.bits.wmask, 3, 3) @[dcache.scala 35:49]
      node T_545 = bits(io.req.bits.wmask, 4, 4) @[dcache.scala 35:49]
      node T_546 = bits(io.req.bits.wmask, 5, 5) @[dcache.scala 35:49]
      node T_547 = bits(io.req.bits.wmask, 6, 6) @[dcache.scala 35:49]
      node T_548 = bits(io.req.bits.wmask, 7, 7) @[dcache.scala 35:49]
      write mport T_551 = T_520[addr], clk
      when T_541 :
        T_551[0] <= T_539[0]
        skip
      when T_542 :
        T_551[1] <= T_539[1]
        skip
      when T_543 :
        T_551[2] <= T_539[2]
        skip
      when T_544 :
        T_551[3] <= T_539[3]
        skip
      when T_545 :
        T_551[4] <= T_539[4]
        skip
      when T_546 :
        T_551[5] <= T_539[5]
        skip
      when T_547 :
        T_551[6] <= T_539[6]
        skip
      when T_548 :
        T_551[7] <= T_539[7]
        skip
      skip @[dcache.scala 33:39]
    node T_554 = eq(io.req.bits.write, UInt<1>("h00")) @[dcache.scala 37:45]
    node T_555 = and(T_524, T_554) @[dcache.scala 37:42]
    wire T_557 : UInt
    T_557 is invalid
    when T_555 :
      T_557 <= addr
      skip
    read mport T_560 = T_520[T_557], clk
    node T_562 = cat(T_560[1], T_560[0]) @[dcache.scala 37:65]
    node T_563 = cat(T_560[3], T_560[2]) @[dcache.scala 37:65]
    node T_564 = cat(T_563, T_562) @[dcache.scala 37:65]
    node T_565 = cat(T_560[5], T_560[4]) @[dcache.scala 37:65]
    node T_566 = cat(T_560[7], T_560[6]) @[dcache.scala 37:65]
    node T_567 = cat(T_566, T_565) @[dcache.scala 37:65]
    node T_568 = cat(T_567, T_564) @[dcache.scala 37:65]
    io.resp[2] <= T_568 @[dcache.scala 37:16]
    smem T_577 : UInt<8>[8][512] @[dcache.scala 31:23]
    node T_579 = bits(io.req.bits.way_en, 3, 3) @[dcache.scala 32:72]
    node T_580 = or(UInt<1>("h00"), T_579) @[dcache.scala 32:51]
    node T_581 = and(io.req.valid, T_580) @[dcache.scala 32:30]
    node T_582 = and(T_581, io.req.bits.write) @[dcache.scala 33:17]
    when T_582 : @[dcache.scala 33:39]
      node T_583 = bits(io.req.bits.wdata, 7, 0) @[dcache.scala 34:63]
      node T_584 = bits(io.req.bits.wdata, 15, 8) @[dcache.scala 34:63]
      node T_585 = bits(io.req.bits.wdata, 23, 16) @[dcache.scala 34:63]
      node T_586 = bits(io.req.bits.wdata, 31, 24) @[dcache.scala 34:63]
      node T_587 = bits(io.req.bits.wdata, 39, 32) @[dcache.scala 34:63]
      node T_588 = bits(io.req.bits.wdata, 47, 40) @[dcache.scala 34:63]
      node T_589 = bits(io.req.bits.wdata, 55, 48) @[dcache.scala 34:63]
      node T_590 = bits(io.req.bits.wdata, 63, 56) @[dcache.scala 34:63]
      wire T_596 : UInt<8>[8] @[dcache.scala 34:40]
      T_596 is invalid @[dcache.scala 34:40]
      T_596[0] <= T_583 @[dcache.scala 34:40]
      T_596[1] <= T_584 @[dcache.scala 34:40]
      T_596[2] <= T_585 @[dcache.scala 34:40]
      T_596[3] <= T_586 @[dcache.scala 34:40]
      T_596[4] <= T_587 @[dcache.scala 34:40]
      T_596[5] <= T_588 @[dcache.scala 34:40]
      T_596[6] <= T_589 @[dcache.scala 34:40]
      T_596[7] <= T_590 @[dcache.scala 34:40]
      node T_598 = bits(io.req.bits.wmask, 0, 0) @[dcache.scala 35:49]
      node T_599 = bits(io.req.bits.wmask, 1, 1) @[dcache.scala 35:49]
      node T_600 = bits(io.req.bits.wmask, 2, 2) @[dcache.scala 35:49]
      node T_601 = bits(io.req.bits.wmask, 3, 3) @[dcache.scala 35:49]
      node T_602 = bits(io.req.bits.wmask, 4, 4) @[dcache.scala 35:49]
      node T_603 = bits(io.req.bits.wmask, 5, 5) @[dcache.scala 35:49]
      node T_604 = bits(io.req.bits.wmask, 6, 6) @[dcache.scala 35:49]
      node T_605 = bits(io.req.bits.wmask, 7, 7) @[dcache.scala 35:49]
      write mport T_608 = T_577[addr], clk
      when T_598 :
        T_608[0] <= T_596[0]
        skip
      when T_599 :
        T_608[1] <= T_596[1]
        skip
      when T_600 :
        T_608[2] <= T_596[2]
        skip
      when T_601 :
        T_608[3] <= T_596[3]
        skip
      when T_602 :
        T_608[4] <= T_596[4]
        skip
      when T_603 :
        T_608[5] <= T_596[5]
        skip
      when T_604 :
        T_608[6] <= T_596[6]
        skip
      when T_605 :
        T_608[7] <= T_596[7]
        skip
      skip @[dcache.scala 33:39]
    node T_611 = eq(io.req.bits.write, UInt<1>("h00")) @[dcache.scala 37:45]
    node T_612 = and(T_581, T_611) @[dcache.scala 37:42]
    wire T_614 : UInt
    T_614 is invalid
    when T_612 :
      T_614 <= addr
      skip
    read mport T_617 = T_577[T_614], clk
    node T_619 = cat(T_617[1], T_617[0]) @[dcache.scala 37:65]
    node T_620 = cat(T_617[3], T_617[2]) @[dcache.scala 37:65]
    node T_621 = cat(T_620, T_619) @[dcache.scala 37:65]
    node T_622 = cat(T_617[5], T_617[4]) @[dcache.scala 37:65]
    node T_623 = cat(T_617[7], T_617[6]) @[dcache.scala 37:65]
    node T_624 = cat(T_623, T_622) @[dcache.scala 37:65]
    node T_625 = cat(T_624, T_621) @[dcache.scala 37:65]
    io.resp[3] <= T_625 @[dcache.scala 37:16]
    
  module Arbiter_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<12>, write : UInt<1>, wdata : UInt<64>, wmask : UInt<8>, way_en : UInt<4>}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<12>, write : UInt<1>, wdata : UInt<64>, wmask : UInt<8>, way_en : UInt<4>}}, chosen : UInt<2>}
    
    io is invalid
    io.chosen <= UInt<2>("h03") @[Arbiter.scala 106:13]
    io.out.bits <- io.in[3].bits @[Arbiter.scala 107:15]
    when io.in[2].valid : @[Arbiter.scala 109:27]
      io.chosen <= UInt<2>("h02") @[Arbiter.scala 110:17]
      io.out.bits <- io.in[2].bits @[Arbiter.scala 111:19]
      skip @[Arbiter.scala 109:27]
    when io.in[1].valid : @[Arbiter.scala 109:27]
      io.chosen <= UInt<1>("h01") @[Arbiter.scala 110:17]
      io.out.bits <- io.in[1].bits @[Arbiter.scala 111:19]
      skip @[Arbiter.scala 109:27]
    when io.in[0].valid : @[Arbiter.scala 109:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 110:17]
      io.out.bits <- io.in[0].bits @[Arbiter.scala 111:19]
      skip @[Arbiter.scala 109:27]
    node T_2024 = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_2025 = or(T_2024, io.in[2].valid) @[Arbiter.scala 23:72]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node grant_2 = eq(T_2024, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node grant_3 = eq(T_2025, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_2029 = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 117:19]
    io.in[0].ready <= T_2029 @[Arbiter.scala 117:14]
    node T_2030 = and(grant_1, io.out.ready) @[Arbiter.scala 117:19]
    io.in[1].ready <= T_2030 @[Arbiter.scala 117:14]
    node T_2031 = and(grant_2, io.out.ready) @[Arbiter.scala 117:19]
    io.in[2].ready <= T_2031 @[Arbiter.scala 117:14]
    node T_2032 = and(grant_3, io.out.ready) @[Arbiter.scala 117:19]
    io.in[3].ready <= T_2032 @[Arbiter.scala 117:14]
    node T_2034 = eq(grant_3, UInt<1>("h00")) @[Arbiter.scala 118:19]
    node T_2035 = or(T_2034, io.in[3].valid) @[Arbiter.scala 118:31]
    io.out.valid <= T_2035 @[Arbiter.scala 118:16]
    
  module MetadataArray : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip read : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>}}, flip write : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>, data : {tag : UInt<20>, coh : {state : UInt<2>}}}}, resp : {tag : UInt<20>, coh : {state : UInt<2>}}[4]}
    
    io is invalid
    wire T_44 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_44 is invalid @[Metadata.scala 158:20]
    T_44.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire rstVal : {tag : UInt<20>, coh : {state : UInt<2>}} @[nbdcache.scala 129:20]
    rstVal is invalid @[nbdcache.scala 129:20]
    rstVal.tag <= UInt<1>("h00") @[nbdcache.scala 130:14]
    rstVal.coh <- T_44 @[nbdcache.scala 131:14]
    reg rst_cnt : UInt<7>, clk with : (reset => (reset, UInt<7>("h00")))
    node rst = lt(rst_cnt, UInt<7>("h040")) @[Cache.scala 153:21]
    node waddr = mux(rst, rst_cnt, io.write.bits.idx) @[Cache.scala 154:18]
    node T_2067 = mux(rst, rstVal, io.write.bits.data) @[Cache.scala 155:18]
    node wdata = cat(T_2067.tag, T_2067.coh.state) @[Cache.scala 155:52]
    node T_2152 = or(rst, UInt<1>("h00")) @[Cache.scala 156:23]
    node T_2154 = asSInt(io.write.bits.way_en) @[Cache.scala 156:75]
    node T_2155 = mux(T_2152, asSInt(UInt<1>("h01")), T_2154) @[Cache.scala 156:18]
    node wmask_0 = bits(T_2155, 0, 0) @[Cache.scala 156:83]
    node wmask_1 = bits(T_2155, 1, 1) @[Cache.scala 156:83]
    node wmask_2 = bits(T_2155, 2, 2) @[Cache.scala 156:83]
    node wmask_3 = bits(T_2155, 3, 3) @[Cache.scala 156:83]
    node T_2157 = or(rst, UInt<1>("h00")) @[Cache.scala 157:23]
    node T_2159 = asSInt(io.read.bits.way_en) @[Cache.scala 157:74]
    node T_2160 = mux(T_2157, asSInt(UInt<1>("h01")), T_2159) @[Cache.scala 157:18]
    node rmask_0 = bits(T_2160, 0, 0) @[Cache.scala 157:82]
    node rmask_1 = bits(T_2160, 1, 1) @[Cache.scala 157:82]
    node rmask_2 = bits(T_2160, 2, 2) @[Cache.scala 157:82]
    node rmask_3 = bits(T_2160, 3, 3) @[Cache.scala 157:82]
    when rst : @[Cache.scala 158:14]
      node T_2162 = add(rst_cnt, UInt<1>("h01")) @[Cache.scala 158:34]
      node T_2163 = tail(T_2162, 1) @[Cache.scala 158:34]
      rst_cnt <= T_2163 @[Cache.scala 158:24]
      skip @[Cache.scala 158:14]
    smem T_2172 : UInt<22>[4][64] @[Cache.scala 172:25]
    node T_2173 = or(rst, io.write.valid) @[Cache.scala 173:15]
    when T_2173 : @[Cache.scala 173:34]
      wire T_2179 : UInt<22>[4] @[Cache.scala 174:43]
      T_2179 is invalid @[Cache.scala 174:43]
      T_2179[0] <= wdata @[Cache.scala 174:43]
      T_2179[1] <= wdata @[Cache.scala 174:43]
      T_2179[2] <= wdata @[Cache.scala 174:43]
      T_2179[3] <= wdata @[Cache.scala 174:43]
      write mport T_2183 = T_2172[waddr], clk
      when wmask_0 :
        T_2183[0] <= T_2179[0]
        skip
      when wmask_1 :
        T_2183[1] <= T_2179[1]
        skip
      when wmask_2 :
        T_2183[2] <= T_2179[2]
        skip
      when wmask_3 :
        T_2183[3] <= T_2179[3]
        skip
      skip @[Cache.scala 173:34]
    wire T_2186 : UInt
    T_2186 is invalid
    when io.read.valid :
      T_2186 <= io.read.bits.idx
      skip
    read mport T_2189 = T_2172[T_2186], clk
    wire T_2275 : {tag : UInt<20>, coh : {state : UInt<2>}} @[Cache.scala 176:81]
    T_2275 is invalid @[Cache.scala 176:81]
    node T_2359 = bits(T_2189[0], 1, 0) @[Cache.scala 176:81]
    T_2275.coh.state <= T_2359 @[Cache.scala 176:81]
    node T_2360 = bits(T_2189[0], 21, 2) @[Cache.scala 176:81]
    T_2275.tag <= T_2360 @[Cache.scala 176:81]
    wire T_2445 : {tag : UInt<20>, coh : {state : UInt<2>}} @[Cache.scala 176:81]
    T_2445 is invalid @[Cache.scala 176:81]
    node T_2529 = bits(T_2189[1], 1, 0) @[Cache.scala 176:81]
    T_2445.coh.state <= T_2529 @[Cache.scala 176:81]
    node T_2530 = bits(T_2189[1], 21, 2) @[Cache.scala 176:81]
    T_2445.tag <= T_2530 @[Cache.scala 176:81]
    wire T_2615 : {tag : UInt<20>, coh : {state : UInt<2>}} @[Cache.scala 176:81]
    T_2615 is invalid @[Cache.scala 176:81]
    node T_2699 = bits(T_2189[2], 1, 0) @[Cache.scala 176:81]
    T_2615.coh.state <= T_2699 @[Cache.scala 176:81]
    node T_2700 = bits(T_2189[2], 21, 2) @[Cache.scala 176:81]
    T_2615.tag <= T_2700 @[Cache.scala 176:81]
    wire T_2785 : {tag : UInt<20>, coh : {state : UInt<2>}} @[Cache.scala 176:81]
    T_2785 is invalid @[Cache.scala 176:81]
    node T_2869 = bits(T_2189[3], 1, 0) @[Cache.scala 176:81]
    T_2785.coh.state <= T_2869 @[Cache.scala 176:81]
    node T_2870 = bits(T_2189[3], 21, 2) @[Cache.scala 176:81]
    T_2785.tag <= T_2870 @[Cache.scala 176:81]
    io.resp[0] <- T_2275 @[Cache.scala 176:13]
    io.resp[1] <- T_2445 @[Cache.scala 176:13]
    io.resp[2] <- T_2615 @[Cache.scala 176:13]
    io.resp[3] <- T_2785 @[Cache.scala 176:13]
    node T_2872 = eq(rst, UInt<1>("h00")) @[Cache.scala 179:20]
    node T_2874 = eq(io.write.valid, UInt<1>("h00")) @[Cache.scala 179:28]
    node T_2875 = and(T_2872, T_2874) @[Cache.scala 179:25]
    io.read.ready <= T_2875 @[Cache.scala 179:17]
    node T_2877 = eq(rst, UInt<1>("h00")) @[Cache.scala 180:21]
    io.write.ready <= T_2877 @[Cache.scala 180:18]
    
  module AMOALU : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip addr : UInt<3>, flip cmd : UInt<5>, flip typ : UInt<2>, flip lhs : UInt<64>, flip rhs : UInt<64>, out : UInt<64>}
    
    io is invalid
    node T_6 = bits(io.typ, 1, 0) @[AmoAlu.scala 11:17]
    node T_8 = eq(T_6, UInt<2>("h02")) @[AmoAlu.scala 27:19]
    node T_9 = bits(io.rhs, 31, 0) @[AmoAlu.scala 27:66]
    node T_10 = cat(T_9, T_9) @[Cat.scala 20:58]
    node rhs = mux(T_8, T_10, io.rhs) @[AmoAlu.scala 27:13]
    node T_11 = eq(io.cmd, UInt<5>("h0c")) @[AmoAlu.scala 72:22]
    node T_12 = eq(io.cmd, UInt<5>("h0d")) @[AmoAlu.scala 72:45]
    node sgned = or(T_11, T_12) @[AmoAlu.scala 72:35]
    node T_13 = eq(io.cmd, UInt<5>("h0d")) @[AmoAlu.scala 73:20]
    node T_14 = eq(io.cmd, UInt<5>("h0f")) @[AmoAlu.scala 73:43]
    node max = or(T_13, T_14) @[AmoAlu.scala 73:33]
    node T_15 = eq(io.cmd, UInt<5>("h0c")) @[AmoAlu.scala 74:20]
    node T_16 = eq(io.cmd, UInt<5>("h0e")) @[AmoAlu.scala 74:43]
    node min = or(T_15, T_16) @[AmoAlu.scala 74:33]
    node T_18 = not(UInt<64>("h00")) @[AmoAlu.scala 79:18]
    node T_19 = bits(io.addr, 2, 2) @[AmoAlu.scala 79:40]
    node T_20 = shl(T_19, 31) @[AmoAlu.scala 79:44]
    node T_21 = xor(T_18, T_20) @[AmoAlu.scala 79:30]
    node T_22 = and(io.lhs, T_21) @[AmoAlu.scala 80:15]
    node T_23 = and(rhs, T_21) @[AmoAlu.scala 80:30]
    node T_24 = add(T_22, T_23) @[AmoAlu.scala 80:23]
    node adder_out = tail(T_24, 1) @[AmoAlu.scala 80:23]
    node T_25 = bits(io.typ, 0, 0) @[AmoAlu.scala 86:25]
    node T_27 = eq(T_25, UInt<1>("h00")) @[AmoAlu.scala 86:18]
    node T_28 = bits(io.addr, 2, 2) @[AmoAlu.scala 87:41]
    node T_30 = eq(T_28, UInt<1>("h00")) @[AmoAlu.scala 87:33]
    node T_31 = and(T_27, T_30) @[AmoAlu.scala 87:30]
    node T_32 = bits(io.lhs, 31, 31) @[AmoAlu.scala 87:52]
    node T_33 = bits(io.lhs, 63, 63) @[AmoAlu.scala 87:64]
    node T_34 = mux(T_31, T_32, T_33) @[AmoAlu.scala 87:24]
    node T_35 = bits(io.addr, 2, 2) @[AmoAlu.scala 88:41]
    node T_37 = eq(T_35, UInt<1>("h00")) @[AmoAlu.scala 88:33]
    node T_38 = and(T_27, T_37) @[AmoAlu.scala 88:30]
    node T_39 = bits(rhs, 31, 31) @[AmoAlu.scala 88:49]
    node T_40 = bits(rhs, 63, 63) @[AmoAlu.scala 88:58]
    node T_41 = mux(T_38, T_39, T_40) @[AmoAlu.scala 88:24]
    node T_42 = bits(io.lhs, 31, 0) @[AmoAlu.scala 89:25]
    node T_43 = bits(rhs, 31, 0) @[AmoAlu.scala 89:37]
    node T_44 = lt(T_42, T_43) @[AmoAlu.scala 89:32]
    node T_45 = bits(io.lhs, 63, 32) @[AmoAlu.scala 90:25]
    node T_46 = bits(rhs, 63, 32) @[AmoAlu.scala 90:38]
    node T_47 = lt(T_45, T_46) @[AmoAlu.scala 90:33]
    node T_48 = bits(io.lhs, 63, 32) @[AmoAlu.scala 91:25]
    node T_49 = bits(rhs, 63, 32) @[AmoAlu.scala 91:40]
    node T_50 = eq(T_48, T_49) @[AmoAlu.scala 91:33]
    node T_51 = bits(io.addr, 2, 2) @[AmoAlu.scala 92:37]
    node T_52 = mux(T_51, T_47, T_44) @[AmoAlu.scala 92:29]
    node T_53 = and(T_50, T_44) @[AmoAlu.scala 92:72]
    node T_54 = or(T_47, T_53) @[AmoAlu.scala 92:63]
    node T_55 = mux(T_27, T_52, T_54) @[AmoAlu.scala 92:19]
    node T_56 = eq(T_34, T_41) @[AmoAlu.scala 93:19]
    node T_57 = mux(sgned, T_34, T_41) @[AmoAlu.scala 93:39]
    node less = mux(T_56, T_55, T_57) @[AmoAlu.scala 93:10]
    node T_58 = eq(io.cmd, UInt<5>("h08")) @[AmoAlu.scala 96:24]
    node T_59 = eq(io.cmd, UInt<5>("h0b")) @[AmoAlu.scala 97:24]
    node T_60 = and(io.lhs, rhs) @[AmoAlu.scala 97:45]
    node T_61 = eq(io.cmd, UInt<5>("h0a")) @[AmoAlu.scala 98:24]
    node T_62 = or(io.lhs, rhs) @[AmoAlu.scala 98:45]
    node T_63 = eq(io.cmd, UInt<5>("h09")) @[AmoAlu.scala 99:24]
    node T_64 = xor(io.lhs, rhs) @[AmoAlu.scala 99:45]
    node T_65 = mux(less, min, max) @[AmoAlu.scala 100:20]
    node T_67 = eq(T_6, UInt<1>("h00")) @[AmoAlu.scala 27:19]
    node T_68 = bits(io.rhs, 7, 0) @[AmoAlu.scala 27:66]
    node T_69 = cat(T_68, T_68) @[Cat.scala 20:58]
    node T_70 = cat(T_69, T_69) @[Cat.scala 20:58]
    node T_71 = cat(T_70, T_70) @[Cat.scala 20:58]
    node T_73 = eq(T_6, UInt<1>("h01")) @[AmoAlu.scala 27:19]
    node T_74 = bits(io.rhs, 15, 0) @[AmoAlu.scala 27:66]
    node T_75 = cat(T_74, T_74) @[Cat.scala 20:58]
    node T_76 = cat(T_75, T_75) @[Cat.scala 20:58]
    node T_78 = eq(T_6, UInt<2>("h02")) @[AmoAlu.scala 27:19]
    node T_79 = bits(io.rhs, 31, 0) @[AmoAlu.scala 27:66]
    node T_80 = cat(T_79, T_79) @[Cat.scala 20:58]
    node T_81 = mux(T_78, T_80, io.rhs) @[AmoAlu.scala 27:13]
    node T_82 = mux(T_73, T_76, T_81) @[AmoAlu.scala 27:13]
    node T_83 = mux(T_67, T_71, T_82) @[AmoAlu.scala 27:13]
    node T_84 = mux(T_65, io.lhs, T_83) @[AmoAlu.scala 100:16]
    node T_85 = mux(T_63, T_64, T_84) @[AmoAlu.scala 99:16]
    node T_86 = mux(T_61, T_62, T_85) @[AmoAlu.scala 98:16]
    node T_87 = mux(T_59, T_60, T_86) @[AmoAlu.scala 97:16]
    node out = mux(T_58, adder_out, T_87) @[AmoAlu.scala 96:16]
    node T_89 = bits(io.addr, 0, 0) @[AmoAlu.scala 18:27]
    node T_91 = mux(T_89, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_93 = geq(T_6, UInt<1>("h01")) @[AmoAlu.scala 18:57]
    node T_96 = mux(T_93, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_97 = or(T_91, T_96) @[AmoAlu.scala 18:46]
    node T_98 = bits(io.addr, 0, 0) @[AmoAlu.scala 19:27]
    node T_100 = mux(T_98, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22]
    node T_101 = cat(T_97, T_100) @[Cat.scala 20:58]
    node T_102 = bits(io.addr, 1, 1) @[AmoAlu.scala 18:27]
    node T_104 = mux(T_102, T_101, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_106 = geq(T_6, UInt<2>("h02")) @[AmoAlu.scala 18:57]
    node T_109 = mux(T_106, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_110 = or(T_104, T_109) @[AmoAlu.scala 18:46]
    node T_111 = bits(io.addr, 1, 1) @[AmoAlu.scala 19:27]
    node T_113 = mux(T_111, UInt<1>("h00"), T_101) @[AmoAlu.scala 19:22]
    node T_114 = cat(T_110, T_113) @[Cat.scala 20:58]
    node T_115 = bits(io.addr, 2, 2) @[AmoAlu.scala 18:27]
    node T_117 = mux(T_115, T_114, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_119 = geq(T_6, UInt<2>("h03")) @[AmoAlu.scala 18:57]
    node T_122 = mux(T_119, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_123 = or(T_117, T_122) @[AmoAlu.scala 18:46]
    node T_124 = bits(io.addr, 2, 2) @[AmoAlu.scala 19:27]
    node T_126 = mux(T_124, UInt<1>("h00"), T_114) @[AmoAlu.scala 19:22]
    node T_127 = cat(T_123, T_126) @[Cat.scala 20:58]
    node T_128 = bits(T_127, 0, 0) @[Bitwise.scala 13:51]
    node T_129 = bits(T_127, 1, 1) @[Bitwise.scala 13:51]
    node T_130 = bits(T_127, 2, 2) @[Bitwise.scala 13:51]
    node T_131 = bits(T_127, 3, 3) @[Bitwise.scala 13:51]
    node T_132 = bits(T_127, 4, 4) @[Bitwise.scala 13:51]
    node T_133 = bits(T_127, 5, 5) @[Bitwise.scala 13:51]
    node T_134 = bits(T_127, 6, 6) @[Bitwise.scala 13:51]
    node T_135 = bits(T_127, 7, 7) @[Bitwise.scala 13:51]
    node T_136 = bits(T_128, 0, 0) @[Bitwise.scala 33:15]
    node T_139 = mux(T_136, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_140 = bits(T_129, 0, 0) @[Bitwise.scala 33:15]
    node T_143 = mux(T_140, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_144 = bits(T_130, 0, 0) @[Bitwise.scala 33:15]
    node T_147 = mux(T_144, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_148 = bits(T_131, 0, 0) @[Bitwise.scala 33:15]
    node T_151 = mux(T_148, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_152 = bits(T_132, 0, 0) @[Bitwise.scala 33:15]
    node T_155 = mux(T_152, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_156 = bits(T_133, 0, 0) @[Bitwise.scala 33:15]
    node T_159 = mux(T_156, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_160 = bits(T_134, 0, 0) @[Bitwise.scala 33:15]
    node T_163 = mux(T_160, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_164 = bits(T_135, 0, 0) @[Bitwise.scala 33:15]
    node T_167 = mux(T_164, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_168 = cat(T_143, T_139) @[Cat.scala 20:58]
    node T_169 = cat(T_151, T_147) @[Cat.scala 20:58]
    node T_170 = cat(T_169, T_168) @[Cat.scala 20:58]
    node T_171 = cat(T_159, T_155) @[Cat.scala 20:58]
    node T_172 = cat(T_167, T_163) @[Cat.scala 20:58]
    node T_173 = cat(T_172, T_171) @[Cat.scala 20:58]
    node wmask = cat(T_173, T_170) @[Cat.scala 20:58]
    node T_174 = and(wmask, out) @[AmoAlu.scala 104:19]
    node T_175 = not(wmask) @[AmoAlu.scala 104:27]
    node T_176 = and(T_175, io.lhs) @[AmoAlu.scala 104:34]
    node T_177 = or(T_174, T_176) @[AmoAlu.scala 104:25]
    io.out <= T_177 @[AmoAlu.scala 104:10]
    
  module DCache : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip cpu : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}, mem : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}}
    
    io is invalid
    inst fq of FinishQueue @[dcache.scala 48:18]
    fq.io is invalid
    fq.clk <= clk
    fq.reset <= reset
    wire T_1926 : UInt<1> @[Cache.scala 60:29]
    T_1926 is invalid @[Cache.scala 60:29]
    T_1926 <= UInt<1>("h00") @[Cache.scala 61:11]
    reg T_1929 : UInt<16>, clk with : (reset => (reset, UInt<16>("h01")))
    when T_1926 : @[LFSR.scala 19:22]
      node T_1930 = bits(T_1929, 0, 0) @[LFSR.scala 19:40]
      node T_1931 = bits(T_1929, 2, 2) @[LFSR.scala 19:48]
      node T_1932 = xor(T_1930, T_1931) @[LFSR.scala 19:43]
      node T_1933 = bits(T_1929, 3, 3) @[LFSR.scala 19:56]
      node T_1934 = xor(T_1932, T_1933) @[LFSR.scala 19:51]
      node T_1935 = bits(T_1929, 5, 5) @[LFSR.scala 19:64]
      node T_1936 = xor(T_1934, T_1935) @[LFSR.scala 19:59]
      node T_1937 = bits(T_1929, 15, 1) @[LFSR.scala 19:73]
      node T_1938 = cat(T_1936, T_1937) @[Cat.scala 20:58]
      T_1929 <= T_1938 @[LFSR.scala 19:29]
      skip @[LFSR.scala 19:22]
    inst metaReadArb of Arbiter @[dcache.scala 57:27]
    metaReadArb.io is invalid
    metaReadArb.clk <= clk
    metaReadArb.reset <= reset
    inst metaWriteArb of Arbiter_1 @[dcache.scala 58:28]
    metaWriteArb.io is invalid
    metaWriteArb.clk <= clk
    metaWriteArb.reset <= reset
    inst data of DCacheDataArray @[dcache.scala 61:20]
    data.io is invalid
    data.clk <= clk
    data.reset <= reset
    inst dataArb of Arbiter_2 @[dcache.scala 62:23]
    dataArb.io is invalid
    dataArb.clk <= clk
    dataArb.reset <= reset
    data.io.req <- dataArb.io.out @[dcache.scala 63:15]
    dataArb.io.out.ready <= UInt<1>("h01") @[dcache.scala 64:24]
    node T_2220 = and(io.cpu.req.ready, io.cpu.req.valid) @[Decoupled.scala 21:42]
    reg s1_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    s1_valid <= T_2220
    node T_2222 = and(io.mem.probe.ready, io.mem.probe.valid) @[Decoupled.scala 21:42]
    reg s1_probe : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    s1_probe <= T_2222
    node T_2224 = and(io.mem.probe.ready, io.mem.probe.valid) @[Decoupled.scala 21:42]
    reg probe_bits : {addr_block : UInt<26>, p_type : UInt<2>}, clk
    when T_2224 : @[Reg.scala 29:19]
      probe_bits <- io.mem.probe.bits @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    wire s1_nack : UInt<1>
    s1_nack is invalid
    s1_nack <= UInt<1>("h00")
    node T_2249 = eq(io.cpu.s1_kill, UInt<1>("h00")) @[dcache.scala 70:37]
    node T_2250 = and(s1_valid, T_2249) @[dcache.scala 70:34]
    node T_2251 = cat(io.cpu.xcpt.pf.ld, io.cpu.xcpt.pf.st) @[dcache.scala 70:69]
    node T_2252 = cat(io.cpu.xcpt.ma.ld, io.cpu.xcpt.ma.st) @[dcache.scala 70:69]
    node T_2253 = cat(T_2252, T_2251) @[dcache.scala 70:69]
    node T_2255 = neq(T_2253, UInt<1>("h00")) @[dcache.scala 70:76]
    node T_2257 = eq(T_2255, UInt<1>("h00")) @[dcache.scala 70:56]
    node s1_valid_masked = and(T_2250, T_2257) @[dcache.scala 70:53]
    node T_2259 = eq(s1_nack, UInt<1>("h00")) @[dcache.scala 71:48]
    node s1_valid_not_nacked = and(s1_valid_masked, T_2259) @[dcache.scala 71:45]
    reg s1_req : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}, clk
    when metaReadArb.io.out.valid : @[dcache.scala 73:35]
      s1_req <- io.cpu.req.bits @[dcache.scala 74:12]
      node T_2326 = shr(io.cpu.req.bits.addr, 12) @[dcache.scala 75:45]
      node T_2327 = bits(io.cpu.req.bits.addr, 5, 0) @[dcache.scala 75:108]
      node T_2328 = cat(T_2326, metaReadArb.io.out.bits.idx) @[Cat.scala 20:58]
      node T_2329 = cat(T_2328, T_2327) @[Cat.scala 20:58]
      s1_req.addr <= T_2329 @[dcache.scala 75:17]
      skip @[dcache.scala 73:35]
    node T_2330 = eq(s1_req.cmd, UInt<5>("h00")) @[Consts.scala 35:31]
    node T_2331 = eq(s1_req.cmd, UInt<5>("h06")) @[Consts.scala 35:48]
    node T_2332 = or(T_2330, T_2331) @[Consts.scala 35:41]
    node T_2333 = eq(s1_req.cmd, UInt<5>("h07")) @[Consts.scala 35:65]
    node T_2334 = or(T_2332, T_2333) @[Consts.scala 35:58]
    node T_2335 = bits(s1_req.cmd, 3, 3) @[Consts.scala 33:29]
    node T_2336 = eq(s1_req.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2337 = or(T_2335, T_2336) @[Consts.scala 33:33]
    node s1_read = or(T_2334, T_2337) @[Consts.scala 35:75]
    node T_2338 = eq(s1_req.cmd, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2339 = eq(s1_req.cmd, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2340 = or(T_2338, T_2339) @[Consts.scala 36:42]
    node T_2341 = bits(s1_req.cmd, 3, 3) @[Consts.scala 33:29]
    node T_2342 = eq(s1_req.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2343 = or(T_2341, T_2342) @[Consts.scala 33:33]
    node s1_write = or(T_2340, T_2343) @[Consts.scala 36:59]
    node s1_readwrite = or(s1_read, s1_write) @[dcache.scala 79:30]
    reg s1_flush_valid : UInt<1>, clk
    reg grant_wait : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg release_ack_wait : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg release_state : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    wire pstore1_valid : UInt<1> @[dcache.scala 86:27]
    pstore1_valid is invalid @[dcache.scala 86:27]
    reg pstore2_valid : UInt<1>, clk
    node T_2350 = eq(release_state, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2351 = eq(release_state, UInt<3>("h03")) @[Package.scala 7:47]
    node inWriteback = or(T_2350, T_2351) @[Package.scala 7:62]
    wire releaseWay : UInt @[dcache.scala 89:24]
    releaseWay is invalid @[dcache.scala 89:24]
    node T_2353 = eq(release_state, UInt<3>("h00")) @[dcache.scala 90:38]
    node T_2355 = eq(grant_wait, UInt<1>("h00")) @[dcache.scala 90:54]
    node T_2356 = and(T_2353, T_2355) @[dcache.scala 90:51]
    node T_2358 = eq(s1_nack, UInt<1>("h00")) @[dcache.scala 90:69]
    node T_2359 = and(T_2356, T_2358) @[dcache.scala 90:66]
    io.cpu.req.ready <= T_2359 @[dcache.scala 90:20]
    node T_2360 = eq(io.cpu.req.bits.cmd, UInt<5>("h00")) @[Consts.scala 35:31]
    node T_2361 = eq(io.cpu.req.bits.cmd, UInt<5>("h06")) @[Consts.scala 35:48]
    node T_2362 = or(T_2360, T_2361) @[Consts.scala 35:41]
    node T_2363 = eq(io.cpu.req.bits.cmd, UInt<5>("h07")) @[Consts.scala 35:65]
    node T_2364 = or(T_2362, T_2363) @[Consts.scala 35:58]
    node T_2365 = bits(io.cpu.req.bits.cmd, 3, 3) @[Consts.scala 33:29]
    node T_2366 = eq(io.cpu.req.bits.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2367 = or(T_2365, T_2366) @[Consts.scala 33:33]
    node T_2368 = or(T_2364, T_2367) @[Consts.scala 35:75]
    node T_2369 = and(io.cpu.req.valid, T_2368) @[dcache.scala 93:46]
    dataArb.io.in[3].valid <= T_2369 @[dcache.scala 93:26]
    dataArb.io.in[3].bits.write <= UInt<1>("h00") @[dcache.scala 94:31]
    dataArb.io.in[3].bits.addr <= io.cpu.req.bits.addr @[dcache.scala 95:30]
    node T_2372 = not(UInt<4>("h00")) @[dcache.scala 96:35]
    dataArb.io.in[3].bits.way_en <= T_2372 @[dcache.scala 96:32]
    node T_2374 = eq(dataArb.io.in[3].ready, UInt<1>("h00")) @[dcache.scala 97:9]
    node T_2375 = eq(io.cpu.req.bits.cmd, UInt<5>("h00")) @[Consts.scala 35:31]
    node T_2376 = eq(io.cpu.req.bits.cmd, UInt<5>("h06")) @[Consts.scala 35:48]
    node T_2377 = or(T_2375, T_2376) @[Consts.scala 35:41]
    node T_2378 = eq(io.cpu.req.bits.cmd, UInt<5>("h07")) @[Consts.scala 35:65]
    node T_2379 = or(T_2377, T_2378) @[Consts.scala 35:58]
    node T_2380 = bits(io.cpu.req.bits.cmd, 3, 3) @[Consts.scala 33:29]
    node T_2381 = eq(io.cpu.req.bits.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2382 = or(T_2380, T_2381) @[Consts.scala 33:33]
    node T_2383 = or(T_2379, T_2382) @[Consts.scala 35:75]
    node T_2384 = and(T_2374, T_2383) @[dcache.scala 97:33]
    when T_2384 : @[dcache.scala 97:65]
      io.cpu.req.ready <= UInt<1>("h00") @[dcache.scala 97:84]
      skip @[dcache.scala 97:65]
    metaReadArb.io.in[2].valid <= io.cpu.req.valid @[dcache.scala 98:30]
    node T_2386 = bits(io.cpu.req.bits.addr, 11, 6) @[dcache.scala 99:56]
    metaReadArb.io.in[2].bits.idx <= T_2386 @[dcache.scala 99:33]
    node T_2388 = not(UInt<4>("h00")) @[dcache.scala 100:39]
    metaReadArb.io.in[2].bits.way_en <= T_2388 @[dcache.scala 100:36]
    node T_2390 = eq(metaReadArb.io.in[2].ready, UInt<1>("h00")) @[dcache.scala 101:9]
    when T_2390 : @[dcache.scala 101:38]
      io.cpu.req.ready <= UInt<1>("h00") @[dcache.scala 101:57]
      skip @[dcache.scala 101:38]
    inst tlb of TLB @[dcache.scala 104:19]
    tlb.io is invalid
    tlb.clk <= clk
    tlb.reset <= reset
    io.ptw <- tlb.io.ptw @[dcache.scala 105:10]
    node T_2392 = and(s1_valid_masked, s1_readwrite) @[dcache.scala 106:39]
    tlb.io.req.valid <= T_2392 @[dcache.scala 106:20]
    tlb.io.req.bits.passthrough <= s1_req.phys @[dcache.scala 107:31]
    node T_2393 = shr(s1_req.addr, 12) @[dcache.scala 108:38]
    tlb.io.req.bits.vpn <= T_2393 @[dcache.scala 108:23]
    tlb.io.req.bits.instruction <= UInt<1>("h00") @[dcache.scala 109:31]
    tlb.io.req.bits.store <= s1_write @[dcache.scala 110:25]
    node T_2396 = eq(tlb.io.req.ready, UInt<1>("h00")) @[dcache.scala 111:9]
    node T_2398 = eq(io.cpu.req.bits.phys, UInt<1>("h00")) @[dcache.scala 111:30]
    node T_2399 = and(T_2396, T_2398) @[dcache.scala 111:27]
    when T_2399 : @[dcache.scala 111:53]
      io.cpu.req.ready <= UInt<1>("h00") @[dcache.scala 111:72]
      skip @[dcache.scala 111:53]
    node T_2401 = and(s1_valid, s1_readwrite) @[dcache.scala 112:18]
    node T_2402 = and(T_2401, tlb.io.resp.miss) @[dcache.scala 112:34]
    when T_2402 : @[dcache.scala 112:55]
      s1_nack <= UInt<1>("h01") @[dcache.scala 112:65]
      skip @[dcache.scala 112:55]
    node T_2404 = bits(s1_req.addr, 11, 0) @[dcache.scala 114:50]
    node s1_paddr = cat(tlb.io.resp.ppn, T_2404) @[Cat.scala 20:58]
    node T_2405 = shr(probe_bits.addr_block, 6) @[dcache.scala 115:52]
    node T_2406 = bits(s1_paddr, 31, 12) @[dcache.scala 115:72]
    node s1_tag = mux(s1_probe, T_2405, T_2406) @[dcache.scala 115:19]
    node T_2407 = bits(T_1929, 1, 0) @[Cache.scala 64:44]
    wire s1_victim_way : UInt
    s1_victim_way is invalid
    s1_victim_way <= T_2407
    inst MetadataArray_1 of MetadataArray @[dcache.scala 126:24]
    MetadataArray_1.io is invalid
    MetadataArray_1.clk <= clk
    MetadataArray_1.reset <= reset
    MetadataArray_1.io.read <- metaReadArb.io.out @[dcache.scala 127:20]
    MetadataArray_1.io.write <- metaWriteArb.io.out @[dcache.scala 128:21]
    node T_2408 = neq(MetadataArray_1.io.resp[0].coh.state, UInt<2>("h00")) @[Policies.scala 237:51]
    node T_2409 = eq(MetadataArray_1.io.resp[0].tag, s1_tag) @[dcache.scala 130:71]
    node T_2410 = and(T_2408, T_2409) @[dcache.scala 130:62]
    node T_2411 = neq(MetadataArray_1.io.resp[1].coh.state, UInt<2>("h00")) @[Policies.scala 237:51]
    node T_2412 = eq(MetadataArray_1.io.resp[1].tag, s1_tag) @[dcache.scala 130:71]
    node T_2413 = and(T_2411, T_2412) @[dcache.scala 130:62]
    node T_2414 = neq(MetadataArray_1.io.resp[2].coh.state, UInt<2>("h00")) @[Policies.scala 237:51]
    node T_2415 = eq(MetadataArray_1.io.resp[2].tag, s1_tag) @[dcache.scala 130:71]
    node T_2416 = and(T_2414, T_2415) @[dcache.scala 130:62]
    node T_2417 = neq(MetadataArray_1.io.resp[3].coh.state, UInt<2>("h00")) @[Policies.scala 237:51]
    node T_2418 = eq(MetadataArray_1.io.resp[3].tag, s1_tag) @[dcache.scala 130:71]
    node T_2419 = and(T_2417, T_2418) @[dcache.scala 130:62]
    node T_2420 = cat(T_2413, T_2410) @[Cat.scala 20:58]
    node T_2421 = cat(T_2419, T_2416) @[Cat.scala 20:58]
    node s1_hit_way = cat(T_2421, T_2420) @[Cat.scala 20:58]
    wire T_2445 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_2445 is invalid @[Metadata.scala 158:20]
    T_2445.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    node T_2467 = eq(MetadataArray_1.io.resp[0].tag, s1_tag) @[dcache.scala 132:36]
    node T_2469 = mux(T_2467, MetadataArray_1.io.resp[0].coh.state, UInt<1>("h00")) @[dcache.scala 132:29]
    node T_2470 = eq(MetadataArray_1.io.resp[1].tag, s1_tag) @[dcache.scala 132:36]
    node T_2472 = mux(T_2470, MetadataArray_1.io.resp[1].coh.state, UInt<1>("h00")) @[dcache.scala 132:29]
    node T_2473 = eq(MetadataArray_1.io.resp[2].tag, s1_tag) @[dcache.scala 132:36]
    node T_2475 = mux(T_2473, MetadataArray_1.io.resp[2].coh.state, UInt<1>("h00")) @[dcache.scala 132:29]
    node T_2476 = eq(MetadataArray_1.io.resp[3].tag, s1_tag) @[dcache.scala 132:36]
    node T_2478 = mux(T_2476, MetadataArray_1.io.resp[3].coh.state, UInt<1>("h00")) @[dcache.scala 132:29]
    node T_2479 = or(T_2469, T_2472) @[dcache.scala 133:19]
    node T_2480 = or(T_2479, T_2475) @[dcache.scala 133:19]
    node T_2481 = or(T_2480, T_2478) @[dcache.scala 133:19]
    wire s1_hit_state : {state : UInt<2>} @[dcache.scala 131:62]
    s1_hit_state is invalid @[dcache.scala 131:62]
    node T_2525 = bits(T_2481, 1, 0) @[dcache.scala 131:62]
    s1_hit_state.state <= T_2525 @[dcache.scala 131:62]
    node s1_data_way = mux(inWriteback, releaseWay, s1_hit_way) @[dcache.scala 136:24]
    node T_2609 = bits(s1_data_way, 0, 0) @[Mux.scala 20:36]
    node T_2610 = bits(s1_data_way, 1, 1) @[Mux.scala 20:36]
    node T_2611 = bits(s1_data_way, 2, 2) @[Mux.scala 20:36]
    node T_2612 = bits(s1_data_way, 3, 3) @[Mux.scala 20:36]
    node T_2614 = mux(T_2609, data.io.resp[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2616 = mux(T_2610, data.io.resp[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2618 = mux(T_2611, data.io.resp[2], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2620 = mux(T_2612, data.io.resp[3], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2622 = or(T_2614, T_2616) @[Mux.scala 18:72]
    node T_2623 = or(T_2622, T_2618) @[Mux.scala 18:72]
    node T_2624 = or(T_2623, T_2620) @[Mux.scala 18:72]
    wire s1_data : UInt<64>
    s1_data is invalid
    s1_data <= T_2624 @[Mux.scala 18:72]
    reg s2_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    s2_valid <= s1_valid_masked
    reg s2_probe : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    s2_probe <= s1_probe
    node T_2627 = or(s1_probe, s2_probe) @[dcache.scala 141:34]
    node T_2628 = neq(release_state, UInt<3>("h00")) @[dcache.scala 141:63]
    node releaseInFlight = or(T_2627, T_2628) @[dcache.scala 141:46]
    node T_2630 = eq(s1_nack, UInt<1>("h00")) @[dcache.scala 142:48]
    reg T_2631 : UInt<1>, clk
    T_2631 <= T_2630
    node s2_valid_masked = and(s2_valid, T_2631) @[dcache.scala 142:34]
    reg s2_req : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}, clk
    reg s2_uncached : UInt<1>, clk
    node T_2699 = or(s1_valid_not_nacked, s1_flush_valid) @[dcache.scala 145:29]
    when T_2699 : @[dcache.scala 145:48]
      s2_req <- s1_req @[dcache.scala 146:12]
      s2_req.addr <= s1_paddr @[dcache.scala 147:17]
      node T_2701 = eq(tlb.io.resp.cacheable, UInt<1>("h00")) @[dcache.scala 148:20]
      node T_2703 = or(T_2701, UInt<1>("h00")) @[dcache.scala 148:43]
      s2_uncached <= T_2703 @[dcache.scala 148:17]
      skip @[dcache.scala 145:48]
    node T_2704 = eq(s2_req.cmd, UInt<5>("h00")) @[Consts.scala 35:31]
    node T_2705 = eq(s2_req.cmd, UInt<5>("h06")) @[Consts.scala 35:48]
    node T_2706 = or(T_2704, T_2705) @[Consts.scala 35:41]
    node T_2707 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 35:65]
    node T_2708 = or(T_2706, T_2707) @[Consts.scala 35:58]
    node T_2709 = bits(s2_req.cmd, 3, 3) @[Consts.scala 33:29]
    node T_2710 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2711 = or(T_2709, T_2710) @[Consts.scala 33:33]
    node s2_read = or(T_2708, T_2711) @[Consts.scala 35:75]
    node T_2712 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2713 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2714 = or(T_2712, T_2713) @[Consts.scala 36:42]
    node T_2715 = bits(s2_req.cmd, 3, 3) @[Consts.scala 33:29]
    node T_2716 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2717 = or(T_2715, T_2716) @[Consts.scala 33:33]
    node s2_write = or(T_2714, T_2717) @[Consts.scala 36:59]
    node s2_readwrite = or(s2_read, s2_write) @[dcache.scala 152:30]
    reg s2_flush_valid : UInt<1>, clk
    s2_flush_valid <= s1_flush_valid
    node T_2718 = or(s1_valid, inWriteback) @[dcache.scala 154:45]
    reg s2_data : UInt<64>, clk
    when T_2718 : @[Reg.scala 29:19]
      s2_data <= s1_data @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg s2_probe_way : UInt<4>, clk
    when s1_probe : @[Reg.scala 29:19]
      s2_probe_way <= s1_hit_way @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg s2_probe_state : {state : UInt<2>}, clk
    when s1_probe : @[Reg.scala 29:19]
      s2_probe_state <- s1_hit_state @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg s2_hit_way : UInt<4>, clk
    when s1_valid_not_nacked : @[Reg.scala 29:19]
      s2_hit_way <= s1_hit_way @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg s2_hit_state : {state : UInt<2>}, clk
    when s1_valid_not_nacked : @[Reg.scala 29:19]
      s2_hit_state <- s1_hit_state @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_2761 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2762 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2763 = or(T_2761, T_2762) @[Consts.scala 36:42]
    node T_2764 = bits(s2_req.cmd, 3, 3) @[Consts.scala 33:29]
    node T_2765 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2766 = or(T_2764, T_2765) @[Consts.scala 33:33]
    node T_2767 = or(T_2763, T_2766) @[Consts.scala 36:59]
    node T_2768 = eq(s2_req.cmd, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_2769 = or(T_2767, T_2768) @[Consts.scala 37:47]
    node T_2770 = eq(s2_req.cmd, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_2771 = or(T_2769, T_2770) @[Consts.scala 37:64]
    node T_2772 = eq(s2_hit_state.state, UInt<2>("h01")) @[Package.scala 7:47]
    node T_2773 = eq(s2_hit_state.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2774 = or(T_2772, T_2773) @[Package.scala 7:62]
    node T_2775 = eq(s2_hit_state.state, UInt<2>("h01")) @[Package.scala 7:47]
    node T_2776 = eq(s2_hit_state.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2777 = or(T_2775, T_2776) @[Package.scala 7:62]
    node s2_hit = mux(T_2771, T_2774, T_2777) @[Policies.scala 58:8]
    node T_2778 = and(s2_valid_masked, s2_readwrite) @[dcache.scala 160:38]
    node s2_valid_hit = and(T_2778, s2_hit) @[dcache.scala 160:54]
    node T_2779 = and(s2_valid_masked, s2_readwrite) @[dcache.scala 161:39]
    node T_2781 = eq(s2_hit, UInt<1>("h00")) @[dcache.scala 161:58]
    node T_2782 = and(T_2779, T_2781) @[dcache.scala 161:55]
    node T_2783 = or(pstore1_valid, pstore2_valid) @[dcache.scala 161:85]
    node T_2785 = eq(T_2783, UInt<1>("h00")) @[dcache.scala 161:69]
    node T_2786 = and(T_2782, T_2785) @[dcache.scala 161:66]
    node T_2788 = eq(release_ack_wait, UInt<1>("h00")) @[dcache.scala 161:106]
    node s2_valid_miss = and(T_2786, T_2788) @[dcache.scala 161:103]
    node T_2790 = eq(s2_uncached, UInt<1>("h00")) @[dcache.scala 162:47]
    node s2_valid_cached_miss = and(s2_valid_miss, T_2790) @[dcache.scala 162:44]
    node s2_victimize = or(s2_valid_cached_miss, s2_flush_valid) @[dcache.scala 163:43]
    node s2_valid_uncached = and(s2_valid_miss, s2_uncached) @[dcache.scala 164:41]
    node T_2791 = neq(s2_hit_state.state, UInt<2>("h00")) @[Policies.scala 237:51]
    node T_2793 = eq(s2_flush_valid, UInt<1>("h00")) @[dcache.scala 165:53]
    node T_2794 = and(T_2791, T_2793) @[dcache.scala 165:50]
    node T_2795 = or(s1_valid_not_nacked, s1_flush_valid) @[dcache.scala 165:136]
    reg T_2796 : UInt, clk
    when T_2795 : @[Reg.scala 29:19]
      T_2796 <= s1_victim_way @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_2798 = dshl(UInt<1>("h01"), T_2796) @[OneHot.scala 44:15]
    node s2_victim_way = mux(T_2794, s2_hit_way, T_2798) @[dcache.scala 165:26]
    node T_2799 = or(s1_valid_not_nacked, s1_flush_valid) @[dcache.scala 166:73]
    reg s2_victim_tag : UInt<20>, clk
    when T_2799 : @[Reg.scala 29:19]
      s2_victim_tag <= MetadataArray_1.io.resp[s1_victim_way].tag @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_2800 = neq(s2_hit_state.state, UInt<2>("h00")) @[Policies.scala 237:51]
    node T_2802 = eq(s2_flush_valid, UInt<1>("h00")) @[dcache.scala 167:55]
    node T_2803 = and(T_2800, T_2802) @[dcache.scala 167:52]
    node T_2804 = or(s1_valid_not_nacked, s1_flush_valid) @[dcache.scala 167:136]
    reg T_2805 : {state : UInt<2>}, clk
    when T_2804 : @[Reg.scala 29:19]
      T_2805 <- MetadataArray_1.io.resp[s1_victim_way].coh @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node s2_victim_state = mux(T_2803, s2_hit_state, T_2805) @[dcache.scala 167:28]
    node s2_victim_valid = neq(s2_victim_state.state, UInt<2>("h00")) @[Policies.scala 237:51]
    node s2_victim_dirty = eq(s2_victim_state.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2848 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2849 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2850 = or(T_2848, T_2849) @[Consts.scala 36:42]
    node T_2851 = bits(s2_req.cmd, 3, 3) @[Consts.scala 33:29]
    node T_2852 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2853 = or(T_2851, T_2852) @[Consts.scala 33:33]
    node T_2854 = or(T_2850, T_2853) @[Consts.scala 36:59]
    node T_2855 = mux(T_2854, UInt<2>("h02"), s2_hit_state.state) @[Policies.scala 257:23]
    wire s2_new_hit_state : {state : UInt<2>} @[Metadata.scala 158:20]
    s2_new_hit_state is invalid @[Metadata.scala 158:20]
    s2_new_hit_state.state <= T_2855 @[Metadata.scala 159:16]
    node T_2899 = eq(s2_hit_state.state, s2_new_hit_state.state) @[Metadata.scala 30:51]
    node s2_update_meta = eq(T_2899, UInt<1>("h00")) @[Metadata.scala 31:40]
    node T_2902 = eq(s2_valid_hit, UInt<1>("h00")) @[dcache.scala 172:33]
    node T_2903 = and(s2_valid, T_2902) @[dcache.scala 172:30]
    node T_2904 = and(s2_valid_uncached, io.mem.acquire.ready) @[dcache.scala 172:70]
    node T_2906 = eq(T_2904, UInt<1>("h00")) @[dcache.scala 172:50]
    node T_2907 = and(T_2903, T_2906) @[dcache.scala 172:47]
    io.cpu.s2_nack <= T_2907 @[dcache.scala 172:18]
    node T_2909 = eq(s2_valid_hit, UInt<1>("h00")) @[dcache.scala 173:22]
    node T_2910 = or(T_2909, s2_update_meta) @[dcache.scala 173:36]
    node T_2911 = and(s2_valid, T_2910) @[dcache.scala 173:18]
    when T_2911 : @[dcache.scala 173:56]
      s1_nack <= UInt<1>("h01") @[dcache.scala 173:66]
      skip @[dcache.scala 173:56]
    node T_2914 = bits(s1_req.typ, 1, 0) @[AmoAlu.scala 11:17]
    node T_2916 = dshl(UInt<1>("h01"), T_2914) @[AmoAlu.scala 13:23]
    node T_2918 = sub(T_2916, UInt<1>("h01")) @[AmoAlu.scala 13:32]
    node T_2919 = tail(T_2918, 1) @[AmoAlu.scala 13:32]
    node T_2920 = bits(T_2919, 2, 0) @[AmoAlu.scala 13:42]
    node T_2921 = and(s1_req.addr, T_2920) @[AmoAlu.scala 13:11]
    node T_2923 = neq(T_2921, UInt<1>("h00")) @[AmoAlu.scala 13:65]
    node T_2924 = and(s1_read, T_2923) @[dcache.scala 177:32]
    io.cpu.xcpt.ma.ld <= T_2924 @[dcache.scala 177:21]
    node T_2926 = dshl(UInt<1>("h01"), T_2914) @[AmoAlu.scala 13:23]
    node T_2928 = sub(T_2926, UInt<1>("h01")) @[AmoAlu.scala 13:32]
    node T_2929 = tail(T_2928, 1) @[AmoAlu.scala 13:32]
    node T_2930 = bits(T_2929, 2, 0) @[AmoAlu.scala 13:42]
    node T_2931 = and(s1_req.addr, T_2930) @[AmoAlu.scala 13:11]
    node T_2933 = neq(T_2931, UInt<1>("h00")) @[AmoAlu.scala 13:65]
    node T_2934 = and(s1_write, T_2933) @[dcache.scala 178:33]
    io.cpu.xcpt.ma.st <= T_2934 @[dcache.scala 178:21]
    node T_2935 = and(s1_read, tlb.io.resp.xcpt_ld) @[dcache.scala 179:32]
    io.cpu.xcpt.pf.ld <= T_2935 @[dcache.scala 179:21]
    node T_2936 = and(s1_write, tlb.io.resp.xcpt_st) @[dcache.scala 180:33]
    io.cpu.xcpt.pf.st <= T_2936 @[dcache.scala 180:21]
    node T_2938 = eq(s2_req.cmd, UInt<5>("h06")) @[dcache.scala 183:48]
    node s2_lr = and(UInt<1>("h01"), T_2938) @[dcache.scala 183:34]
    node T_2940 = eq(s2_req.cmd, UInt<5>("h07")) @[dcache.scala 184:48]
    node s2_sc = and(UInt<1>("h01"), T_2940) @[dcache.scala 184:34]
    reg lrscCount : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node lrscValid = gt(lrscCount, UInt<1>("h00")) @[dcache.scala 186:29]
    reg lrscAddr : UInt, clk
    node T_2944 = shr(s2_req.addr, 6) @[dcache.scala 188:70]
    node T_2945 = eq(lrscAddr, T_2944) @[dcache.scala 188:53]
    node T_2946 = and(lrscValid, T_2945) @[dcache.scala 188:41]
    node T_2948 = eq(T_2946, UInt<1>("h00")) @[dcache.scala 188:29]
    node s2_sc_fail = and(s2_sc, T_2948) @[dcache.scala 188:26]
    node T_2949 = and(s2_valid_hit, s2_lr) @[dcache.scala 189:22]
    when T_2949 : @[dcache.scala 189:32]
      lrscCount <= UInt<5>("h01f") @[dcache.scala 190:15]
      node T_2951 = shr(s2_req.addr, 6) @[dcache.scala 191:29]
      lrscAddr <= T_2951 @[dcache.scala 191:14]
      skip @[dcache.scala 189:32]
    when lrscValid : @[dcache.scala 193:20]
      node T_2953 = sub(lrscCount, UInt<1>("h01")) @[dcache.scala 193:45]
      node T_2954 = tail(T_2953, 1) @[dcache.scala 193:45]
      lrscCount <= T_2954 @[dcache.scala 193:32]
      skip @[dcache.scala 193:20]
    node T_2955 = and(s2_valid_hit, s2_sc) @[dcache.scala 194:23]
    node T_2956 = or(T_2955, io.cpu.invalidate_lr) @[dcache.scala 194:33]
    when T_2956 : @[dcache.scala 194:58]
      lrscCount <= UInt<1>("h00") @[dcache.scala 194:70]
      skip @[dcache.scala 194:58]
    node T_2958 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 197:63]
    reg pstore1_cmd : UInt<5>, clk
    when T_2958 : @[Reg.scala 29:19]
      pstore1_cmd <= s1_req.cmd @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_2959 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 198:63]
    reg pstore1_typ : UInt<3>, clk
    when T_2959 : @[Reg.scala 29:19]
      pstore1_typ <= s1_req.typ @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_2960 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 199:62]
    reg pstore1_addr : UInt<32>, clk
    when T_2960 : @[Reg.scala 29:19]
      pstore1_addr <= s1_paddr @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_2961 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 200:68]
    reg pstore1_data : UInt<64>, clk
    when T_2961 : @[Reg.scala 29:19]
      pstore1_data <= io.cpu.s1_data @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_2962 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 201:63]
    reg pstore1_way : UInt<4>, clk
    when T_2962 : @[Reg.scala 29:19]
      pstore1_way <= s1_hit_way @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_2963 = bits(pstore1_typ, 1, 0) @[AmoAlu.scala 11:17]
    node T_2965 = eq(T_2963, UInt<1>("h00")) @[AmoAlu.scala 27:19]
    node T_2966 = bits(pstore1_data, 7, 0) @[AmoAlu.scala 27:66]
    node T_2967 = cat(T_2966, T_2966) @[Cat.scala 20:58]
    node T_2968 = cat(T_2967, T_2967) @[Cat.scala 20:58]
    node T_2969 = cat(T_2968, T_2968) @[Cat.scala 20:58]
    node T_2971 = eq(T_2963, UInt<1>("h01")) @[AmoAlu.scala 27:19]
    node T_2972 = bits(pstore1_data, 15, 0) @[AmoAlu.scala 27:66]
    node T_2973 = cat(T_2972, T_2972) @[Cat.scala 20:58]
    node T_2974 = cat(T_2973, T_2973) @[Cat.scala 20:58]
    node T_2976 = eq(T_2963, UInt<2>("h02")) @[AmoAlu.scala 27:19]
    node T_2977 = bits(pstore1_data, 31, 0) @[AmoAlu.scala 27:66]
    node T_2978 = cat(T_2977, T_2977) @[Cat.scala 20:58]
    node T_2979 = mux(T_2976, T_2978, pstore1_data) @[AmoAlu.scala 27:13]
    node T_2980 = mux(T_2971, T_2974, T_2979) @[AmoAlu.scala 27:13]
    node T_2981 = mux(T_2965, T_2969, T_2980) @[AmoAlu.scala 27:13]
    wire pstore1_storegen_data : UInt
    pstore1_storegen_data is invalid
    pstore1_storegen_data <= T_2981
    node T_2983 = eq(pstore1_cmd, UInt<5>("h00")) @[Consts.scala 35:31]
    node T_2984 = eq(pstore1_cmd, UInt<5>("h06")) @[Consts.scala 35:48]
    node T_2985 = or(T_2983, T_2984) @[Consts.scala 35:41]
    node T_2986 = eq(pstore1_cmd, UInt<5>("h07")) @[Consts.scala 35:65]
    node T_2987 = or(T_2985, T_2986) @[Consts.scala 35:58]
    node T_2988 = bits(pstore1_cmd, 3, 3) @[Consts.scala 33:29]
    node T_2989 = eq(pstore1_cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2990 = or(T_2988, T_2989) @[Consts.scala 33:33]
    node T_2991 = or(T_2987, T_2990) @[Consts.scala 35:75]
    node pstore1_amo = and(UInt<1>("h01"), T_2991) @[dcache.scala 204:40]
    node T_2992 = and(pstore1_valid, pstore2_valid) @[dcache.scala 205:47]
    node T_2993 = and(s1_valid, s1_write) @[dcache.scala 205:78]
    node T_2994 = or(T_2993, pstore1_amo) @[dcache.scala 205:91]
    node pstore_drain_structural = and(T_2992, T_2994) @[dcache.scala 205:64]
    node T_2995 = eq(io.cpu.req.bits.cmd, UInt<5>("h00")) @[Consts.scala 35:31]
    node T_2996 = eq(io.cpu.req.bits.cmd, UInt<5>("h06")) @[Consts.scala 35:48]
    node T_2997 = or(T_2995, T_2996) @[Consts.scala 35:41]
    node T_2998 = eq(io.cpu.req.bits.cmd, UInt<5>("h07")) @[Consts.scala 35:65]
    node T_2999 = or(T_2997, T_2998) @[Consts.scala 35:58]
    node T_3000 = bits(io.cpu.req.bits.cmd, 3, 3) @[Consts.scala 33:29]
    node T_3001 = eq(io.cpu.req.bits.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_3002 = or(T_3000, T_3001) @[Consts.scala 33:33]
    node T_3003 = or(T_2999, T_3002) @[Consts.scala 35:75]
    node T_3004 = and(io.cpu.req.valid, T_3003) @[dcache.scala 206:55]
    node pstore_drain_opportunistic = eq(T_3004, UInt<1>("h00")) @[dcache.scala 206:36]
    node pstore_drain_on_miss = or(releaseInFlight, io.cpu.s2_nack) @[dcache.scala 207:46]
    node T_3007 = and(UInt<1>("h01"), pstore_drain_structural) @[dcache.scala 209:24]
    node T_3009 = eq(pstore1_amo, UInt<1>("h00")) @[dcache.scala 210:25]
    node T_3010 = and(pstore1_valid, T_3009) @[dcache.scala 210:22]
    node T_3011 = or(T_3010, pstore2_valid) @[dcache.scala 210:39]
    node T_3012 = or(pstore_drain_opportunistic, pstore_drain_on_miss) @[dcache.scala 210:88]
    node T_3013 = and(T_3011, T_3012) @[dcache.scala 210:57]
    node pstore_drain = or(T_3007, T_3013) @[dcache.scala 209:51]
    node T_3014 = and(s2_valid_hit, s2_write) @[dcache.scala 212:39]
    node T_3016 = eq(s2_sc_fail, UInt<1>("h00")) @[dcache.scala 212:54]
    node T_3017 = and(T_3014, T_3016) @[dcache.scala 212:51]
    reg T_3019 : UInt<1>, clk
    node T_3021 = eq(T_3017, UInt<1>("h00")) @[dcache.scala 214:12]
    node T_3023 = eq(T_3019, UInt<1>("h00")) @[dcache.scala 214:31]
    node T_3024 = or(T_3021, T_3023) @[dcache.scala 214:28]
    node T_3025 = or(T_3024, reset) @[dcache.scala 214:11]
    node T_3027 = eq(T_3025, UInt<1>("h00")) @[dcache.scala 214:11]
    when T_3027 : @[dcache.scala 214:11]
      printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:214 assert(!s2_store_valid || !pstore1_held)\n") @[dcache.scala 214:11]
      stop(clk, UInt<1>(1), 1) @[dcache.scala 214:11]
      skip @[dcache.scala 214:11]
    node T_3028 = or(T_3017, T_3019) @[dcache.scala 215:37]
    node T_3029 = and(T_3028, pstore2_valid) @[dcache.scala 215:54]
    node T_3031 = eq(pstore_drain, UInt<1>("h00")) @[dcache.scala 215:74]
    node T_3032 = and(T_3029, T_3031) @[dcache.scala 215:71]
    T_3019 <= T_3032 @[dcache.scala 215:18]
    node T_3033 = or(T_3017, T_3019) @[dcache.scala 216:20]
    pstore1_valid <= T_3033 @[dcache.scala 211:17]
    node T_3034 = eq(pstore2_valid, pstore_drain) @[dcache.scala 218:57]
    node advance_pstore1 = and(pstore1_valid, T_3034) @[dcache.scala 218:39]
    node T_3036 = eq(pstore_drain, UInt<1>("h00")) @[dcache.scala 219:37]
    node T_3037 = and(pstore2_valid, T_3036) @[dcache.scala 219:34]
    node T_3038 = or(T_3037, advance_pstore1) @[dcache.scala 219:51]
    pstore2_valid <= T_3038 @[dcache.scala 219:17]
    reg pstore2_addr : UInt<32>, clk
    when advance_pstore1 : @[Reg.scala 29:19]
      pstore2_addr <= pstore1_addr @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg pstore2_way : UInt<4>, clk
    when advance_pstore1 : @[Reg.scala 29:19]
      pstore2_way <= pstore1_way @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg pstore2_storegen_data : UInt, clk
    when advance_pstore1 : @[Reg.scala 29:19]
      pstore2_storegen_data <= pstore1_storegen_data @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_3040 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 18:27]
    node T_3042 = mux(T_3040, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3044 = geq(T_2963, UInt<1>("h01")) @[AmoAlu.scala 18:57]
    node T_3047 = mux(T_3044, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3048 = or(T_3042, T_3047) @[AmoAlu.scala 18:46]
    node T_3049 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 19:27]
    node T_3051 = mux(T_3049, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22]
    node T_3052 = cat(T_3048, T_3051) @[Cat.scala 20:58]
    node T_3053 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 18:27]
    node T_3055 = mux(T_3053, T_3052, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3057 = geq(T_2963, UInt<2>("h02")) @[AmoAlu.scala 18:57]
    node T_3060 = mux(T_3057, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3061 = or(T_3055, T_3060) @[AmoAlu.scala 18:46]
    node T_3062 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 19:27]
    node T_3064 = mux(T_3062, UInt<1>("h00"), T_3052) @[AmoAlu.scala 19:22]
    node T_3065 = cat(T_3061, T_3064) @[Cat.scala 20:58]
    node T_3066 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 18:27]
    node T_3068 = mux(T_3066, T_3065, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3070 = geq(T_2963, UInt<2>("h03")) @[AmoAlu.scala 18:57]
    node T_3073 = mux(T_3070, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3074 = or(T_3068, T_3073) @[AmoAlu.scala 18:46]
    node T_3075 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 19:27]
    node T_3077 = mux(T_3075, UInt<1>("h00"), T_3065) @[AmoAlu.scala 19:22]
    node T_3078 = cat(T_3074, T_3077) @[Cat.scala 20:58]
    reg pstore2_storegen_mask : UInt<8>, clk
    when advance_pstore1 : @[Reg.scala 29:19]
      pstore2_storegen_mask <= T_3078 @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    dataArb.io.in[0].valid <= pstore_drain @[dcache.scala 224:26]
    dataArb.io.in[0].bits.write <= UInt<1>("h01") @[dcache.scala 225:31]
    node T_3080 = mux(pstore2_valid, pstore2_addr, pstore1_addr) @[dcache.scala 226:36]
    dataArb.io.in[0].bits.addr <= T_3080 @[dcache.scala 226:30]
    node T_3081 = mux(pstore2_valid, pstore2_way, pstore1_way) @[dcache.scala 227:38]
    dataArb.io.in[0].bits.way_en <= T_3081 @[dcache.scala 227:32]
    node T_3082 = mux(pstore2_valid, pstore2_storegen_data, pstore1_storegen_data) @[dcache.scala 228:52]
    dataArb.io.in[0].bits.wdata <= T_3082 @[dcache.scala 228:31]
    node T_3083 = mux(pstore2_valid, pstore2_addr, pstore1_addr) @[dcache.scala 229:30]
    node pstore_mask_shift = shl(UInt<1>("h00"), 3) @[dcache.scala 229:106]
    node T_3086 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 18:27]
    node T_3088 = mux(T_3086, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3090 = geq(T_2963, UInt<1>("h01")) @[AmoAlu.scala 18:57]
    node T_3093 = mux(T_3090, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3094 = or(T_3088, T_3093) @[AmoAlu.scala 18:46]
    node T_3095 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 19:27]
    node T_3097 = mux(T_3095, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22]
    node T_3098 = cat(T_3094, T_3097) @[Cat.scala 20:58]
    node T_3099 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 18:27]
    node T_3101 = mux(T_3099, T_3098, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3103 = geq(T_2963, UInt<2>("h02")) @[AmoAlu.scala 18:57]
    node T_3106 = mux(T_3103, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3107 = or(T_3101, T_3106) @[AmoAlu.scala 18:46]
    node T_3108 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 19:27]
    node T_3110 = mux(T_3108, UInt<1>("h00"), T_3098) @[AmoAlu.scala 19:22]
    node T_3111 = cat(T_3107, T_3110) @[Cat.scala 20:58]
    node T_3112 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 18:27]
    node T_3114 = mux(T_3112, T_3111, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3116 = geq(T_2963, UInt<2>("h03")) @[AmoAlu.scala 18:57]
    node T_3119 = mux(T_3116, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3120 = or(T_3114, T_3119) @[AmoAlu.scala 18:46]
    node T_3121 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 19:27]
    node T_3123 = mux(T_3121, UInt<1>("h00"), T_3111) @[AmoAlu.scala 19:22]
    node T_3124 = cat(T_3120, T_3123) @[Cat.scala 20:58]
    node T_3125 = mux(pstore2_valid, pstore2_storegen_mask, T_3124) @[dcache.scala 230:37]
    node T_3126 = dshl(T_3125, pstore_mask_shift) @[dcache.scala 230:99]
    dataArb.io.in[0].bits.wmask <= T_3126 @[dcache.scala 230:31]
    node s1_idx = bits(s1_req.addr, 11, 3) @[dcache.scala 233:27]
    node T_3127 = bits(pstore1_addr, 11, 3) @[dcache.scala 235:36]
    node T_3128 = eq(T_3127, s1_idx) @[dcache.scala 235:58]
    node T_3129 = and(pstore1_valid, T_3128) @[dcache.scala 235:21]
    node T_3131 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 18:27]
    node T_3133 = mux(T_3131, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3135 = geq(T_2963, UInt<1>("h01")) @[AmoAlu.scala 18:57]
    node T_3138 = mux(T_3135, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3139 = or(T_3133, T_3138) @[AmoAlu.scala 18:46]
    node T_3140 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 19:27]
    node T_3142 = mux(T_3140, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22]
    node T_3143 = cat(T_3139, T_3142) @[Cat.scala 20:58]
    node T_3144 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 18:27]
    node T_3146 = mux(T_3144, T_3143, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3148 = geq(T_2963, UInt<2>("h02")) @[AmoAlu.scala 18:57]
    node T_3151 = mux(T_3148, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3152 = or(T_3146, T_3151) @[AmoAlu.scala 18:46]
    node T_3153 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 19:27]
    node T_3155 = mux(T_3153, UInt<1>("h00"), T_3143) @[AmoAlu.scala 19:22]
    node T_3156 = cat(T_3152, T_3155) @[Cat.scala 20:58]
    node T_3157 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 18:27]
    node T_3159 = mux(T_3157, T_3156, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3161 = geq(T_2963, UInt<2>("h03")) @[AmoAlu.scala 18:57]
    node T_3164 = mux(T_3161, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3165 = or(T_3159, T_3164) @[AmoAlu.scala 18:46]
    node T_3166 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 19:27]
    node T_3168 = mux(T_3166, UInt<1>("h00"), T_3156) @[AmoAlu.scala 19:22]
    node T_3169 = cat(T_3165, T_3168) @[Cat.scala 20:58]
    node T_3171 = bits(s1_req.addr, 0, 0) @[AmoAlu.scala 18:27]
    node T_3173 = mux(T_3171, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3175 = geq(T_2914, UInt<1>("h01")) @[AmoAlu.scala 18:57]
    node T_3178 = mux(T_3175, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3179 = or(T_3173, T_3178) @[AmoAlu.scala 18:46]
    node T_3180 = bits(s1_req.addr, 0, 0) @[AmoAlu.scala 19:27]
    node T_3182 = mux(T_3180, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22]
    node T_3183 = cat(T_3179, T_3182) @[Cat.scala 20:58]
    node T_3184 = bits(s1_req.addr, 1, 1) @[AmoAlu.scala 18:27]
    node T_3186 = mux(T_3184, T_3183, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3188 = geq(T_2914, UInt<2>("h02")) @[AmoAlu.scala 18:57]
    node T_3191 = mux(T_3188, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3192 = or(T_3186, T_3191) @[AmoAlu.scala 18:46]
    node T_3193 = bits(s1_req.addr, 1, 1) @[AmoAlu.scala 19:27]
    node T_3195 = mux(T_3193, UInt<1>("h00"), T_3183) @[AmoAlu.scala 19:22]
    node T_3196 = cat(T_3192, T_3195) @[Cat.scala 20:58]
    node T_3197 = bits(s1_req.addr, 2, 2) @[AmoAlu.scala 18:27]
    node T_3199 = mux(T_3197, T_3196, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3201 = geq(T_2914, UInt<2>("h03")) @[AmoAlu.scala 18:57]
    node T_3204 = mux(T_3201, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3205 = or(T_3199, T_3204) @[AmoAlu.scala 18:46]
    node T_3206 = bits(s1_req.addr, 2, 2) @[AmoAlu.scala 19:27]
    node T_3208 = mux(T_3206, UInt<1>("h00"), T_3196) @[AmoAlu.scala 19:22]
    node T_3209 = cat(T_3205, T_3208) @[Cat.scala 20:58]
    node T_3210 = and(T_3169, T_3209) @[dcache.scala 235:95]
    node T_3212 = neq(T_3210, UInt<1>("h00")) @[dcache.scala 235:115]
    node T_3213 = and(T_3129, T_3212) @[dcache.scala 235:69]
    node T_3214 = bits(pstore2_addr, 11, 3) @[dcache.scala 236:36]
    node T_3215 = eq(T_3214, s1_idx) @[dcache.scala 236:58]
    node T_3216 = and(pstore2_valid, T_3215) @[dcache.scala 236:21]
    node T_3218 = bits(s1_req.addr, 0, 0) @[AmoAlu.scala 18:27]
    node T_3220 = mux(T_3218, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3222 = geq(T_2914, UInt<1>("h01")) @[AmoAlu.scala 18:57]
    node T_3225 = mux(T_3222, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3226 = or(T_3220, T_3225) @[AmoAlu.scala 18:46]
    node T_3227 = bits(s1_req.addr, 0, 0) @[AmoAlu.scala 19:27]
    node T_3229 = mux(T_3227, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22]
    node T_3230 = cat(T_3226, T_3229) @[Cat.scala 20:58]
    node T_3231 = bits(s1_req.addr, 1, 1) @[AmoAlu.scala 18:27]
    node T_3233 = mux(T_3231, T_3230, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3235 = geq(T_2914, UInt<2>("h02")) @[AmoAlu.scala 18:57]
    node T_3238 = mux(T_3235, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3239 = or(T_3233, T_3238) @[AmoAlu.scala 18:46]
    node T_3240 = bits(s1_req.addr, 1, 1) @[AmoAlu.scala 19:27]
    node T_3242 = mux(T_3240, UInt<1>("h00"), T_3230) @[AmoAlu.scala 19:22]
    node T_3243 = cat(T_3239, T_3242) @[Cat.scala 20:58]
    node T_3244 = bits(s1_req.addr, 2, 2) @[AmoAlu.scala 18:27]
    node T_3246 = mux(T_3244, T_3243, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3248 = geq(T_2914, UInt<2>("h03")) @[AmoAlu.scala 18:57]
    node T_3251 = mux(T_3248, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3252 = or(T_3246, T_3251) @[AmoAlu.scala 18:46]
    node T_3253 = bits(s1_req.addr, 2, 2) @[AmoAlu.scala 19:27]
    node T_3255 = mux(T_3253, UInt<1>("h00"), T_3243) @[AmoAlu.scala 19:22]
    node T_3256 = cat(T_3252, T_3255) @[Cat.scala 20:58]
    node T_3257 = and(pstore2_storegen_mask, T_3256) @[dcache.scala 236:95]
    node T_3259 = neq(T_3257, UInt<1>("h00")) @[dcache.scala 236:115]
    node T_3260 = and(T_3216, T_3259) @[dcache.scala 236:69]
    node T_3261 = or(T_3213, T_3260) @[dcache.scala 235:120]
    node s1_raw_hazard = and(s1_read, T_3261) @[dcache.scala 234:31]
    node T_3262 = and(s1_valid, s1_raw_hazard) @[dcache.scala 237:18]
    when T_3262 : @[dcache.scala 237:36]
      s1_nack <= UInt<1>("h01") @[dcache.scala 237:46]
      skip @[dcache.scala 237:36]
    node T_3264 = and(s2_valid_hit, s2_update_meta) @[dcache.scala 239:48]
    node T_3266 = eq(s2_victim_dirty, UInt<1>("h00")) @[dcache.scala 239:87]
    node T_3267 = and(s2_victimize, T_3266) @[dcache.scala 239:84]
    node T_3268 = or(T_3264, T_3267) @[dcache.scala 239:67]
    metaWriteArb.io.in[0].valid <= T_3268 @[dcache.scala 239:31]
    metaWriteArb.io.in[0].bits.way_en <= s2_victim_way @[dcache.scala 240:37]
    node T_3269 = bits(s2_req.addr, 11, 6) @[dcache.scala 241:48]
    metaWriteArb.io.in[0].bits.idx <= T_3269 @[dcache.scala 241:34]
    wire T_3293 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_3293 is invalid @[Metadata.scala 158:20]
    T_3293.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    node T_3315 = mux(s2_valid_hit, s2_new_hit_state, T_3293) @[dcache.scala 242:45]
    metaWriteArb.io.in[0].bits.data.coh <- T_3315 @[dcache.scala 242:39]
    node T_3337 = bits(s2_req.addr, 31, 12) @[dcache.scala 243:53]
    metaWriteArb.io.in[0].bits.data.tag <= T_3337 @[dcache.scala 243:39]
    node T_3339 = bits(s2_req.addr, 31, 6) @[dcache.scala 248:29]
    node T_3341 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_3342 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_3343 = or(T_3341, T_3342) @[Consts.scala 36:42]
    node T_3344 = bits(s2_req.cmd, 3, 3) @[Consts.scala 33:29]
    node T_3345 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_3346 = or(T_3344, T_3345) @[Consts.scala 33:33]
    node T_3347 = or(T_3343, T_3346) @[Consts.scala 36:59]
    node T_3348 = eq(s2_req.cmd, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_3349 = or(T_3347, T_3348) @[Consts.scala 37:47]
    node T_3350 = eq(s2_req.cmd, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_3351 = or(T_3349, T_3350) @[Consts.scala 37:64]
    node T_3352 = mux(T_3351, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8]
    node T_3354 = cat(s2_req.cmd, UInt<1>("h01")) @[Cat.scala 20:58]
    wire cachedGetMessage : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    cachedGetMessage is invalid @[Definitions.scala 417:19]
    cachedGetMessage.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 418:25]
    cachedGetMessage.a_type <= T_3352 @[Definitions.scala 419:16]
    cachedGetMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    cachedGetMessage.addr_block <= T_3339 @[Definitions.scala 421:20]
    cachedGetMessage.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    cachedGetMessage.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    cachedGetMessage.union <= T_3354 @[Definitions.scala 424:15]
    node T_3413 = bits(s2_req.addr, 31, 6) @[dcache.scala 252:29]
    node T_3414 = bits(s2_req.addr, 5, 3) @[dcache.scala 253:28]
    node T_3415 = bits(s2_req.addr, 2, 0) @[dcache.scala 254:28]
    node T_3442 = or(UInt<3>("h00"), T_3415) @[Definitions.scala 386:49]
    node T_3443 = bits(T_3442, 2, 0) @[Definitions.scala 386:61]
    node T_3445 = or(UInt<2>("h00"), s2_req.typ) @[Definitions.scala 387:61]
    node T_3446 = bits(T_3445, 1, 0) @[Definitions.scala 387:76]
    node T_3448 = or(UInt<5>("h00"), UInt<5>("h00")) @[Definitions.scala 388:36]
    node T_3449 = bits(T_3448, 4, 0) @[Definitions.scala 388:45]
    node T_3451 = or(UInt<8>("h00"), UInt<1>("h00")) @[Definitions.scala 389:46]
    node T_3452 = bits(T_3451, 7, 0) @[Definitions.scala 389:54]
    node T_3455 = cat(T_3449, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3456 = cat(T_3443, T_3446) @[Cat.scala 20:58]
    node T_3457 = cat(T_3456, T_3455) @[Cat.scala 20:58]
    node T_3459 = cat(T_3446, T_3449) @[Cat.scala 20:58]
    node T_3460 = cat(T_3459, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3462 = cat(T_3452, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3464 = cat(T_3452, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3466 = cat(T_3449, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3467 = cat(T_3443, T_3446) @[Cat.scala 20:58]
    node T_3468 = cat(T_3467, T_3466) @[Cat.scala 20:58]
    node T_3470 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3472 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3473 = eq(UInt<3>("h06"), UInt<3>("h00")) @[Mux.scala 46:19]
    node T_3474 = mux(T_3473, T_3472, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3475 = eq(UInt<3>("h05"), UInt<3>("h00")) @[Mux.scala 46:19]
    node T_3476 = mux(T_3475, T_3470, T_3474) @[Mux.scala 46:16]
    node T_3477 = eq(UInt<3>("h04"), UInt<3>("h00")) @[Mux.scala 46:19]
    node T_3478 = mux(T_3477, T_3468, T_3476) @[Mux.scala 46:16]
    node T_3479 = eq(UInt<3>("h03"), UInt<3>("h00")) @[Mux.scala 46:19]
    node T_3480 = mux(T_3479, T_3464, T_3478) @[Mux.scala 46:16]
    node T_3481 = eq(UInt<3>("h02"), UInt<3>("h00")) @[Mux.scala 46:19]
    node T_3482 = mux(T_3481, T_3462, T_3480) @[Mux.scala 46:16]
    node T_3483 = eq(UInt<3>("h01"), UInt<3>("h00")) @[Mux.scala 46:19]
    node T_3484 = mux(T_3483, T_3460, T_3482) @[Mux.scala 46:16]
    node T_3485 = eq(UInt<3>("h00"), UInt<3>("h00")) @[Mux.scala 46:19]
    node T_3486 = mux(T_3485, T_3457, T_3484) @[Mux.scala 46:16]
    wire uncachedGetMessage : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    uncachedGetMessage is invalid @[Definitions.scala 417:19]
    uncachedGetMessage.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    uncachedGetMessage.a_type <= UInt<3>("h00") @[Definitions.scala 419:16]
    uncachedGetMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    uncachedGetMessage.addr_block <= T_3413 @[Definitions.scala 421:20]
    uncachedGetMessage.addr_beat <= T_3414 @[Definitions.scala 422:19]
    uncachedGetMessage.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    uncachedGetMessage.union <= T_3486 @[Definitions.scala 424:15]
    node T_3543 = bits(s2_req.addr, 31, 6) @[dcache.scala 260:29]
    node T_3544 = bits(s2_req.addr, 5, 3) @[dcache.scala 261:28]
    node T_3546 = eq(T_2963, UInt<1>("h00")) @[AmoAlu.scala 27:19]
    node T_3547 = bits(pstore1_data, 7, 0) @[AmoAlu.scala 27:66]
    node T_3548 = cat(T_3547, T_3547) @[Cat.scala 20:58]
    node T_3549 = cat(T_3548, T_3548) @[Cat.scala 20:58]
    node T_3550 = cat(T_3549, T_3549) @[Cat.scala 20:58]
    node T_3552 = eq(T_2963, UInt<1>("h01")) @[AmoAlu.scala 27:19]
    node T_3553 = bits(pstore1_data, 15, 0) @[AmoAlu.scala 27:66]
    node T_3554 = cat(T_3553, T_3553) @[Cat.scala 20:58]
    node T_3555 = cat(T_3554, T_3554) @[Cat.scala 20:58]
    node T_3557 = eq(T_2963, UInt<2>("h02")) @[AmoAlu.scala 27:19]
    node T_3558 = bits(pstore1_data, 31, 0) @[AmoAlu.scala 27:66]
    node T_3559 = cat(T_3558, T_3558) @[Cat.scala 20:58]
    node T_3560 = mux(T_3557, T_3559, pstore1_data) @[AmoAlu.scala 27:13]
    node T_3561 = mux(T_3552, T_3555, T_3560) @[AmoAlu.scala 27:13]
    node T_3562 = mux(T_3546, T_3550, T_3561) @[AmoAlu.scala 27:13]
    node T_3564 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 18:27]
    node T_3566 = mux(T_3564, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3568 = geq(T_2963, UInt<1>("h01")) @[AmoAlu.scala 18:57]
    node T_3571 = mux(T_3568, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3572 = or(T_3566, T_3571) @[AmoAlu.scala 18:46]
    node T_3573 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 19:27]
    node T_3575 = mux(T_3573, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22]
    node T_3576 = cat(T_3572, T_3575) @[Cat.scala 20:58]
    node T_3577 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 18:27]
    node T_3579 = mux(T_3577, T_3576, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3581 = geq(T_2963, UInt<2>("h02")) @[AmoAlu.scala 18:57]
    node T_3584 = mux(T_3581, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3585 = or(T_3579, T_3584) @[AmoAlu.scala 18:46]
    node T_3586 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 19:27]
    node T_3588 = mux(T_3586, UInt<1>("h00"), T_3576) @[AmoAlu.scala 19:22]
    node T_3589 = cat(T_3585, T_3588) @[Cat.scala 20:58]
    node T_3590 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 18:27]
    node T_3592 = mux(T_3590, T_3589, UInt<1>("h00")) @[AmoAlu.scala 18:22]
    node T_3594 = geq(T_2963, UInt<2>("h03")) @[AmoAlu.scala 18:57]
    node T_3597 = mux(T_3594, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51]
    node T_3598 = or(T_3592, T_3597) @[AmoAlu.scala 18:46]
    node T_3599 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 19:27]
    node T_3601 = mux(T_3599, UInt<1>("h00"), T_3589) @[AmoAlu.scala 19:22]
    node T_3602 = cat(T_3598, T_3601) @[Cat.scala 20:58]
    node T_3603 = shl(UInt<1>("h00"), 3) @[dcache.scala 263:62]
    node T_3604 = dshl(T_3602, T_3603) @[dcache.scala 263:40]
    node T_3632 = or(UInt<3>("h00"), UInt<1>("h00")) @[Definitions.scala 386:49]
    node T_3633 = bits(T_3632, 2, 0) @[Definitions.scala 386:61]
    node T_3635 = or(UInt<2>("h00"), UInt<1>("h00")) @[Definitions.scala 387:61]
    node T_3636 = bits(T_3635, 1, 0) @[Definitions.scala 387:76]
    node T_3638 = or(UInt<5>("h00"), UInt<1>("h00")) @[Definitions.scala 388:36]
    node T_3639 = bits(T_3638, 4, 0) @[Definitions.scala 388:45]
    node T_3641 = or(UInt<8>("h00"), T_3604) @[Definitions.scala 389:46]
    node T_3642 = bits(T_3641, 7, 0) @[Definitions.scala 389:54]
    node T_3645 = cat(T_3639, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3646 = cat(T_3633, T_3636) @[Cat.scala 20:58]
    node T_3647 = cat(T_3646, T_3645) @[Cat.scala 20:58]
    node T_3649 = cat(T_3636, T_3639) @[Cat.scala 20:58]
    node T_3650 = cat(T_3649, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3652 = cat(T_3642, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3654 = cat(T_3642, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3656 = cat(T_3639, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3657 = cat(T_3633, T_3636) @[Cat.scala 20:58]
    node T_3658 = cat(T_3657, T_3656) @[Cat.scala 20:58]
    node T_3660 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3662 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3663 = eq(UInt<3>("h06"), UInt<3>("h02")) @[Mux.scala 46:19]
    node T_3664 = mux(T_3663, T_3662, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3665 = eq(UInt<3>("h05"), UInt<3>("h02")) @[Mux.scala 46:19]
    node T_3666 = mux(T_3665, T_3660, T_3664) @[Mux.scala 46:16]
    node T_3667 = eq(UInt<3>("h04"), UInt<3>("h02")) @[Mux.scala 46:19]
    node T_3668 = mux(T_3667, T_3658, T_3666) @[Mux.scala 46:16]
    node T_3669 = eq(UInt<3>("h03"), UInt<3>("h02")) @[Mux.scala 46:19]
    node T_3670 = mux(T_3669, T_3654, T_3668) @[Mux.scala 46:16]
    node T_3671 = eq(UInt<3>("h02"), UInt<3>("h02")) @[Mux.scala 46:19]
    node T_3672 = mux(T_3671, T_3652, T_3670) @[Mux.scala 46:16]
    node T_3673 = eq(UInt<3>("h01"), UInt<3>("h02")) @[Mux.scala 46:19]
    node T_3674 = mux(T_3673, T_3650, T_3672) @[Mux.scala 46:16]
    node T_3675 = eq(UInt<3>("h00"), UInt<3>("h02")) @[Mux.scala 46:19]
    node T_3676 = mux(T_3675, T_3647, T_3674) @[Mux.scala 46:16]
    wire uncachedPutMessage : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    uncachedPutMessage is invalid @[Definitions.scala 417:19]
    uncachedPutMessage.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    uncachedPutMessage.a_type <= UInt<3>("h02") @[Definitions.scala 419:16]
    uncachedPutMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    uncachedPutMessage.addr_block <= T_3543 @[Definitions.scala 421:20]
    uncachedPutMessage.addr_beat <= T_3544 @[Definitions.scala 422:19]
    uncachedPutMessage.data <= T_3562 @[Definitions.scala 423:14]
    uncachedPutMessage.union <= T_3676 @[Definitions.scala 424:15]
    node T_3733 = bits(s2_req.addr, 31, 6) @[dcache.scala 267:29]
    node T_3734 = bits(s2_req.addr, 5, 3) @[dcache.scala 268:28]
    node T_3735 = bits(s2_req.addr, 2, 0) @[dcache.scala 269:28]
    node T_3737 = eq(T_2963, UInt<1>("h00")) @[AmoAlu.scala 27:19]
    node T_3738 = bits(pstore1_data, 7, 0) @[AmoAlu.scala 27:66]
    node T_3739 = cat(T_3738, T_3738) @[Cat.scala 20:58]
    node T_3740 = cat(T_3739, T_3739) @[Cat.scala 20:58]
    node T_3741 = cat(T_3740, T_3740) @[Cat.scala 20:58]
    node T_3743 = eq(T_2963, UInt<1>("h01")) @[AmoAlu.scala 27:19]
    node T_3744 = bits(pstore1_data, 15, 0) @[AmoAlu.scala 27:66]
    node T_3745 = cat(T_3744, T_3744) @[Cat.scala 20:58]
    node T_3746 = cat(T_3745, T_3745) @[Cat.scala 20:58]
    node T_3748 = eq(T_2963, UInt<2>("h02")) @[AmoAlu.scala 27:19]
    node T_3749 = bits(pstore1_data, 31, 0) @[AmoAlu.scala 27:66]
    node T_3750 = cat(T_3749, T_3749) @[Cat.scala 20:58]
    node T_3751 = mux(T_3748, T_3750, pstore1_data) @[AmoAlu.scala 27:13]
    node T_3752 = mux(T_3743, T_3746, T_3751) @[AmoAlu.scala 27:13]
    node T_3753 = mux(T_3737, T_3741, T_3752) @[AmoAlu.scala 27:13]
    node T_3779 = or(UInt<3>("h00"), T_3735) @[Definitions.scala 386:49]
    node T_3780 = bits(T_3779, 2, 0) @[Definitions.scala 386:61]
    node T_3782 = or(UInt<2>("h00"), s2_req.typ) @[Definitions.scala 387:61]
    node T_3783 = bits(T_3782, 1, 0) @[Definitions.scala 387:76]
    node T_3785 = or(UInt<5>("h00"), s2_req.cmd) @[Definitions.scala 388:36]
    node T_3786 = bits(T_3785, 4, 0) @[Definitions.scala 388:45]
    node T_3788 = or(UInt<8>("h00"), UInt<1>("h00")) @[Definitions.scala 389:46]
    node T_3789 = bits(T_3788, 7, 0) @[Definitions.scala 389:54]
    node T_3792 = cat(T_3786, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_3793 = cat(T_3780, T_3783) @[Cat.scala 20:58]
    node T_3794 = cat(T_3793, T_3792) @[Cat.scala 20:58]
    node T_3796 = cat(T_3783, T_3786) @[Cat.scala 20:58]
    node T_3797 = cat(T_3796, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_3799 = cat(T_3789, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_3801 = cat(T_3789, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_3803 = cat(T_3786, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_3804 = cat(T_3780, T_3783) @[Cat.scala 20:58]
    node T_3805 = cat(T_3804, T_3803) @[Cat.scala 20:58]
    node T_3807 = cat(UInt<5>("h00"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_3809 = cat(UInt<5>("h01"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_3810 = eq(UInt<3>("h06"), UInt<3>("h04")) @[Mux.scala 46:19]
    node T_3811 = mux(T_3810, T_3809, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3812 = eq(UInt<3>("h05"), UInt<3>("h04")) @[Mux.scala 46:19]
    node T_3813 = mux(T_3812, T_3807, T_3811) @[Mux.scala 46:16]
    node T_3814 = eq(UInt<3>("h04"), UInt<3>("h04")) @[Mux.scala 46:19]
    node T_3815 = mux(T_3814, T_3805, T_3813) @[Mux.scala 46:16]
    node T_3816 = eq(UInt<3>("h03"), UInt<3>("h04")) @[Mux.scala 46:19]
    node T_3817 = mux(T_3816, T_3801, T_3815) @[Mux.scala 46:16]
    node T_3818 = eq(UInt<3>("h02"), UInt<3>("h04")) @[Mux.scala 46:19]
    node T_3819 = mux(T_3818, T_3799, T_3817) @[Mux.scala 46:16]
    node T_3820 = eq(UInt<3>("h01"), UInt<3>("h04")) @[Mux.scala 46:19]
    node T_3821 = mux(T_3820, T_3797, T_3819) @[Mux.scala 46:16]
    node T_3822 = eq(UInt<3>("h00"), UInt<3>("h04")) @[Mux.scala 46:19]
    node T_3823 = mux(T_3822, T_3794, T_3821) @[Mux.scala 46:16]
    wire uncachedPutAtomicMessage : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    uncachedPutAtomicMessage is invalid @[Definitions.scala 417:19]
    uncachedPutAtomicMessage.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    uncachedPutAtomicMessage.a_type <= UInt<3>("h04") @[Definitions.scala 419:16]
    uncachedPutAtomicMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    uncachedPutAtomicMessage.addr_block <= T_3733 @[Definitions.scala 421:20]
    uncachedPutAtomicMessage.addr_beat <= T_3734 @[Definitions.scala 422:19]
    uncachedPutAtomicMessage.data <= T_3753 @[Definitions.scala 423:14]
    uncachedPutAtomicMessage.union <= T_3823 @[Definitions.scala 424:15]
    node T_3880 = eq(s2_victim_dirty, UInt<1>("h00")) @[dcache.scala 273:53]
    node T_3881 = and(s2_valid_cached_miss, T_3880) @[dcache.scala 273:50]
    node T_3882 = or(T_3881, s2_valid_uncached) @[dcache.scala 273:71]
    node T_3883 = and(T_3882, fq.io.enq.ready) @[dcache.scala 273:93]
    io.mem.acquire.valid <= T_3883 @[dcache.scala 273:24]
    io.mem.acquire.bits <- cachedGetMessage @[dcache.scala 274:23]
    when s2_uncached : @[dcache.scala 275:22]
      node T_3885 = eq(s2_valid_masked, UInt<1>("h00")) @[dcache.scala 277:14]
      node T_3886 = neq(s2_hit_state.state, UInt<2>("h00")) @[Policies.scala 237:51]
      node T_3888 = eq(T_3886, UInt<1>("h00")) @[dcache.scala 277:34]
      node T_3889 = or(T_3885, T_3888) @[dcache.scala 277:31]
      node T_3890 = or(T_3889, reset) @[dcache.scala 277:13]
      node T_3892 = eq(T_3890, UInt<1>("h00")) @[dcache.scala 277:13]
      when T_3892 : @[dcache.scala 277:13]
        printf(clk, UInt<1>(1), "Assertion failed: cache hit on uncached access\n    at dcache.scala:277 assert(!s2_valid_masked || !s2_hit_state.isValid(), \"cache hit on uncached access\")\n") @[dcache.scala 277:13]
        stop(clk, UInt<1>(1), 1) @[dcache.scala 277:13]
        skip @[dcache.scala 277:13]
      io.mem.acquire.bits <- uncachedGetMessage @[dcache.scala 278:25]
      when s2_write : @[dcache.scala 279:21]
        io.mem.acquire.bits <- uncachedPutMessage @[dcache.scala 280:27]
        when pstore1_amo : @[dcache.scala 281:26]
          io.mem.acquire.bits <- uncachedPutAtomicMessage @[dcache.scala 282:29]
          skip @[dcache.scala 281:26]
        skip @[dcache.scala 279:21]
      skip @[dcache.scala 275:22]
    node T_3893 = and(io.mem.acquire.ready, io.mem.acquire.valid) @[Decoupled.scala 21:42]
    when T_3893 : @[dcache.scala 286:32]
      grant_wait <= UInt<1>("h01") @[dcache.scala 286:45]
      skip @[dcache.scala 286:32]
    wire T_3902 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3902 is invalid @[Definitions.scala 853:34]
    T_3902[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3904 = eq(io.mem.grant.bits.g_type, T_3902[0]) @[Package.scala 7:47]
    node T_3905 = eq(io.mem.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3906 = mux(io.mem.grant.bits.is_builtin_type, T_3904, T_3905) @[Definitions.scala 274:33]
    node grantIsRefill = and(UInt<1>("h01"), T_3906) @[Definitions.scala 274:27]
    node T_3908 = eq(io.mem.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node grantIsVoluntary = and(io.mem.grant.bits.is_builtin_type, T_3908) @[Definitions.scala 277:59]
    node T_3910 = eq(grantIsRefill, UInt<1>("h00")) @[dcache.scala 291:25]
    node T_3912 = eq(grantIsVoluntary, UInt<1>("h00")) @[dcache.scala 291:43]
    node grantIsUncached = and(T_3910, T_3912) @[dcache.scala 291:40]
    when io.mem.grant.valid : @[dcache.scala 292:29]
      node T_3913 = and(grantIsVoluntary, release_ack_wait) @[dcache.scala 293:43]
      node T_3914 = or(grant_wait, T_3913) @[dcache.scala 293:23]
      node T_3915 = or(T_3914, reset) @[dcache.scala 293:11]
      node T_3917 = eq(T_3915, UInt<1>("h00")) @[dcache.scala 293:11]
      when T_3917 : @[dcache.scala 293:11]
        printf(clk, UInt<1>(1), "Assertion failed: unexpected grant\n    at dcache.scala:293 assert(grant_wait || grantIsVoluntary && release_ack_wait, \"unexpected grant\")\n") @[dcache.scala 293:11]
        stop(clk, UInt<1>(1), 1) @[dcache.scala 293:11]
        skip @[dcache.scala 293:11]
      when grantIsUncached : @[dcache.scala 294:28]
        s2_data <= io.mem.grant.bits.data @[dcache.scala 294:38]
        skip @[dcache.scala 294:28]
      when grantIsVoluntary : @[dcache.scala 295:29]
        release_ack_wait <= UInt<1>("h00") @[dcache.scala 295:48]
        skip @[dcache.scala 295:29]
      skip @[dcache.scala 292:29]
    node T_3919 = and(io.mem.grant.ready, io.mem.grant.valid) @[Decoupled.scala 21:42]
    node T_3920 = and(T_3919, grantIsRefill) @[dcache.scala 297:63]
    reg refillCount : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3920 : @[Counter.scala 43:17]
      node T_3923 = eq(refillCount, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3925 = add(refillCount, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3926 = tail(T_3925, 1) @[Counter.scala 21:22]
      refillCount <= T_3926 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node refillDone = and(T_3920, T_3923) @[Counter.scala 44:20]
    node grantDone = or(refillDone, grantIsUncached) @[dcache.scala 298:30]
    node T_3927 = and(io.mem.grant.ready, io.mem.grant.valid) @[Decoupled.scala 21:42]
    node T_3928 = and(T_3927, grantDone) @[dcache.scala 299:29]
    when T_3928 : @[dcache.scala 299:43]
      grant_wait <= UInt<1>("h00") @[dcache.scala 299:56]
      skip @[dcache.scala 299:43]
    node T_3930 = and(grantIsRefill, io.mem.grant.valid) @[dcache.scala 302:43]
    dataArb.io.in[1].valid <= T_3930 @[dcache.scala 302:26]
    io.mem.grant.ready <= UInt<1>("h01") @[dcache.scala 303:22]
    node T_3933 = eq(dataArb.io.in[1].valid, UInt<1>("h00")) @[dcache.scala 304:36]
    node T_3934 = or(dataArb.io.in[1].ready, T_3933) @[dcache.scala 304:33]
    node T_3935 = or(T_3934, reset) @[dcache.scala 304:9]
    node T_3937 = eq(T_3935, UInt<1>("h00")) @[dcache.scala 304:9]
    when T_3937 : @[dcache.scala 304:9]
      printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:304 assert(dataArb.io.in(1).ready || !dataArb.io.in(1).valid)\n") @[dcache.scala 304:9]
      stop(clk, UInt<1>(1), 1) @[dcache.scala 304:9]
      skip @[dcache.scala 304:9]
    dataArb.io.in[1].bits.write <= UInt<1>("h01") @[dcache.scala 305:31]
    node T_3939 = bits(s2_req.addr, 31, 6) @[dcache.scala 306:48]
    node T_3940 = cat(T_3939, io.mem.grant.bits.addr_beat) @[Cat.scala 20:58]
    node T_3941 = shl(T_3940, 3) @[dcache.scala 306:106]
    dataArb.io.in[1].bits.addr <= T_3941 @[dcache.scala 306:30]
    dataArb.io.in[1].bits.way_en <= s2_victim_way @[dcache.scala 307:32]
    dataArb.io.in[1].bits.wdata <= io.mem.grant.bits.data @[dcache.scala 308:31]
    node T_3943 = not(UInt<8>("h00")) @[dcache.scala 309:34]
    dataArb.io.in[1].bits.wmask <= T_3943 @[dcache.scala 309:31]
    metaWriteArb.io.in[1].valid <= refillDone @[dcache.scala 311:31]
    node T_3945 = eq(metaWriteArb.io.in[1].valid, UInt<1>("h00")) @[dcache.scala 312:10]
    node T_3946 = or(T_3945, metaWriteArb.io.in[1].ready) @[dcache.scala 312:39]
    node T_3947 = or(T_3946, reset) @[dcache.scala 312:9]
    node T_3949 = eq(T_3947, UInt<1>("h00")) @[dcache.scala 312:9]
    when T_3949 : @[dcache.scala 312:9]
      printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:312 assert(!metaWriteArb.io.in(1).valid || metaWriteArb.io.in(1).ready)\n") @[dcache.scala 312:9]
      stop(clk, UInt<1>(1), 1) @[dcache.scala 312:9]
      skip @[dcache.scala 312:9]
    metaWriteArb.io.in[1].bits.way_en <= s2_victim_way @[dcache.scala 313:37]
    node T_3950 = bits(s2_req.addr, 11, 6) @[dcache.scala 314:48]
    metaWriteArb.io.in[1].bits.idx <= T_3950 @[dcache.scala 314:34]
    node T_3951 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_3952 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_3953 = or(T_3951, T_3952) @[Consts.scala 36:42]
    node T_3954 = bits(s2_req.cmd, 3, 3) @[Consts.scala 33:29]
    node T_3955 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_3956 = or(T_3954, T_3955) @[Consts.scala 33:33]
    node T_3957 = or(T_3953, T_3956) @[Consts.scala 36:59]
    node T_3958 = mux(T_3957, UInt<2>("h02"), UInt<2>("h01")) @[Policies.scala 268:12]
    node T_3959 = mux(io.mem.grant.bits.is_builtin_type, UInt<2>("h00"), T_3958) @[Policies.scala 267:10]
    wire T_3982 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_3982 is invalid @[Metadata.scala 158:20]
    T_3982.state <= T_3959 @[Metadata.scala 159:16]
    metaWriteArb.io.in[1].bits.data.coh <- T_3982 @[dcache.scala 315:39]
    node T_4004 = bits(s2_req.addr, 31, 12) @[dcache.scala 316:53]
    metaWriteArb.io.in[1].bits.data.tag <= T_4004 @[dcache.scala 316:39]
    node T_4005 = and(io.mem.grant.ready, io.mem.grant.valid) @[Decoupled.scala 21:42]
    node T_4008 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_4010 = eq(io.mem.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_4011 = and(io.mem.grant.bits.is_builtin_type, T_4010) @[Definitions.scala 277:59]
    node T_4013 = eq(T_4011, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_4014 = and(T_4008, T_4013) @[Definitions.scala 278:89]
    node T_4015 = and(T_4005, T_4014) @[dcache.scala 319:42]
    node T_4017 = eq(grantIsRefill, UInt<1>("h00")) @[dcache.scala 319:81]
    node T_4018 = or(T_4017, refillDone) @[dcache.scala 319:96]
    node T_4019 = and(T_4015, T_4018) @[dcache.scala 319:77]
    fq.io.enq.valid <= T_4019 @[dcache.scala 319:19]
    wire T_4043 : {manager_xact_id : UInt<4>, manager_id : UInt<1>} @[Definitions.scala 816:17]
    T_4043 is invalid @[Definitions.scala 816:17]
    T_4043.manager_xact_id <= io.mem.grant.bits.manager_xact_id @[Definitions.scala 817:23]
    T_4043.manager_id <= io.mem.grant.bits.manager_id @[Definitions.scala 818:18]
    fq.io.enq.bits <- T_4043 @[dcache.scala 320:18]
    io.mem.finish <- fq.io.deq @[dcache.scala 321:17]
    when fq.io.enq.valid : @[dcache.scala 322:26]
      node T_4066 = or(fq.io.enq.ready, reset) @[dcache.scala 322:34]
      node T_4068 = eq(T_4066, UInt<1>("h00")) @[dcache.scala 322:34]
      when T_4068 : @[dcache.scala 322:34]
        printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:322 when (fq.io.enq.valid) { assert(fq.io.enq.ready) }\n") @[dcache.scala 322:34]
        stop(clk, UInt<1>(1), 1) @[dcache.scala 322:34]
        skip @[dcache.scala 322:34]
      skip @[dcache.scala 322:26]
    when refillDone : @[dcache.scala 323:21]
      T_1926 <= UInt<1>("h01") @[Cache.scala 65:22]
      skip @[dcache.scala 323:21]
    node T_4070 = or(releaseInFlight, lrscValid) @[dcache.scala 326:37]
    node T_4071 = and(s2_valid_hit, s2_lr) @[dcache.scala 326:67]
    node block_probe = or(T_4070, T_4071) @[dcache.scala 326:50]
    node T_4073 = eq(block_probe, UInt<1>("h00")) @[dcache.scala 327:55]
    node T_4074 = and(io.mem.probe.valid, T_4073) @[dcache.scala 327:52]
    metaReadArb.io.in[1].valid <= T_4074 @[dcache.scala 327:30]
    node T_4076 = eq(block_probe, UInt<1>("h00")) @[dcache.scala 328:55]
    node T_4077 = and(metaReadArb.io.in[1].ready, T_4076) @[dcache.scala 328:52]
    node T_4079 = eq(s1_valid, UInt<1>("h00")) @[dcache.scala 328:71]
    node T_4080 = and(T_4077, T_4079) @[dcache.scala 328:68]
    node T_4082 = eq(s2_valid, UInt<1>("h00")) @[dcache.scala 328:85]
    node T_4083 = or(T_4082, s2_valid_hit) @[dcache.scala 328:95]
    node T_4084 = and(T_4080, T_4083) @[dcache.scala 328:81]
    io.mem.probe.ready <= T_4084 @[dcache.scala 328:22]
    metaReadArb.io.in[1].bits.idx <= io.mem.probe.bits.addr_block @[dcache.scala 329:33]
    node T_4086 = not(UInt<4>("h00")) @[dcache.scala 330:39]
    metaReadArb.io.in[1].bits.way_en <= T_4086 @[dcache.scala 330:36]
    node T_4087 = and(io.mem.release.ready, io.mem.release.valid) @[Decoupled.scala 21:42]
    node T_4088 = and(T_4087, inWriteback) @[dcache.scala 333:71]
    reg writebackCount : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_4088 : @[Counter.scala 43:17]
      node T_4091 = eq(writebackCount, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_4093 = add(writebackCount, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_4094 = tail(T_4093, 1) @[Counter.scala 21:22]
      writebackCount <= T_4094 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node writebackDone = and(T_4088, T_4091) @[Counter.scala 44:20]
    node T_4095 = and(io.mem.release.ready, io.mem.release.valid) @[Decoupled.scala 21:42]
    node T_4097 = eq(inWriteback, UInt<1>("h00")) @[dcache.scala 334:64]
    node T_4098 = and(T_4095, T_4097) @[dcache.scala 334:61]
    node releaseDone = or(writebackDone, T_4098) @[dcache.scala 334:35]
    node T_4100 = eq(io.mem.release.ready, UInt<1>("h00")) @[dcache.scala 335:49]
    node releaseRejected = and(io.mem.release.valid, T_4100) @[dcache.scala 335:46]
    node T_4101 = and(dataArb.io.in[2].ready, dataArb.io.in[2].valid) @[Decoupled.scala 21:42]
    reg s1_release_data_valid : UInt<1>, clk
    s1_release_data_valid <= T_4101
    node T_4103 = eq(releaseRejected, UInt<1>("h00")) @[dcache.scala 337:67]
    node T_4104 = and(s1_release_data_valid, T_4103) @[dcache.scala 337:64]
    reg s2_release_data_valid : UInt<1>, clk
    s2_release_data_valid <= T_4104
    node T_4106 = cat(UInt<1>("h00"), writebackCount) @[Cat.scala 20:58]
    node T_4109 = cat(UInt<1>("h00"), s2_release_data_valid) @[Cat.scala 20:58]
    node T_4110 = add(s1_release_data_valid, T_4109) @[dcache.scala 338:108]
    node T_4111 = tail(T_4110, 1) @[dcache.scala 338:108]
    node T_4112 = mux(releaseRejected, UInt<1>("h00"), T_4111) @[dcache.scala 338:59]
    node T_4113 = add(T_4106, T_4112) @[dcache.scala 338:54]
    node releaseDataBeat = tail(T_4113, 1) @[dcache.scala 338:54]
    io.mem.release.valid <= s2_release_data_valid @[dcache.scala 339:24]
    wire T_4137 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_4137 is invalid @[Metadata.scala 158:20]
    T_4137.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    node T_4162 = eq(T_4137.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_4163 = mux(T_4162, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_4164 = mux(T_4162, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_4165 = mux(T_4162, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_4166 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4167 = mux(T_4166, T_4165, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_4168 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4169 = mux(T_4168, T_4164, T_4167) @[Mux.scala 46:16]
    node T_4170 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4171 = mux(T_4170, T_4163, T_4169) @[Mux.scala 46:16]
    node T_4172 = eq(T_4137.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_4173 = mux(T_4172, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_4174 = mux(T_4172, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_4175 = mux(T_4172, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_4176 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4177 = mux(T_4176, T_4175, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_4178 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4179 = mux(T_4178, T_4174, T_4177) @[Mux.scala 46:16]
    node T_4180 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4181 = mux(T_4180, T_4173, T_4179) @[Mux.scala 46:16]
    node T_4182 = eq(T_4137.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_4183 = mux(T_4182, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_4184 = mux(T_4182, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_4185 = mux(T_4182, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_4186 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4187 = mux(T_4186, T_4185, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_4188 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4189 = mux(T_4188, T_4184, T_4187) @[Mux.scala 46:16]
    node T_4190 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4191 = mux(T_4190, T_4183, T_4189) @[Mux.scala 46:16]
    node T_4192 = eq(UInt<2>("h02"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4193 = mux(T_4192, T_4191, UInt<3>("h03")) @[Mux.scala 46:16]
    node T_4194 = eq(UInt<2>("h01"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4195 = mux(T_4194, T_4181, T_4193) @[Mux.scala 46:16]
    node T_4196 = eq(UInt<2>("h00"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4197 = mux(T_4196, T_4171, T_4195) @[Mux.scala 46:16]
    wire T_4226 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_4226 is invalid @[Definitions.scala 754:19]
    T_4226.r_type <= T_4197 @[Definitions.scala 755:16]
    T_4226.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_4226.addr_block <= probe_bits.addr_block @[Definitions.scala 757:20]
    T_4226.addr_beat <= UInt<1>("h00") @[Definitions.scala 758:19]
    T_4226.data <= UInt<1>("h00") @[Definitions.scala 759:14]
    T_4226.voluntary <= UInt<1>("h00") @[Definitions.scala 760:19]
    io.mem.release.bits <- T_4226 @[dcache.scala 340:23]
    node T_4258 = eq(s2_victim_state.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_4259 = mux(T_4258, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_4260 = mux(T_4258, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_4261 = mux(T_4258, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_4262 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4263 = mux(T_4262, T_4261, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_4264 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4265 = mux(T_4264, T_4260, T_4263) @[Mux.scala 46:16]
    node T_4266 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4267 = mux(T_4266, T_4259, T_4265) @[Mux.scala 46:16]
    wire voluntaryReleaseMessage : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    voluntaryReleaseMessage is invalid @[Definitions.scala 754:19]
    voluntaryReleaseMessage.r_type <= T_4267 @[Definitions.scala 755:16]
    voluntaryReleaseMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    voluntaryReleaseMessage.addr_block <= UInt<1>("h00") @[Definitions.scala 757:20]
    voluntaryReleaseMessage.addr_beat <= UInt<1>("h00") @[Definitions.scala 758:19]
    voluntaryReleaseMessage.data <= UInt<1>("h00") @[Definitions.scala 759:14]
    voluntaryReleaseMessage.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    node T_4321 = eq(s2_victim_state.state, UInt<2>("h02")) @[Policies.scala 263:35]
    node T_4322 = mux(T_4321, UInt<2>("h01"), s2_victim_state.state) @[Policies.scala 263:23]
    node T_4323 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4324 = mux(T_4323, T_4322, s2_victim_state.state) @[Mux.scala 46:16]
    node T_4325 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4326 = mux(T_4325, UInt<2>("h00"), T_4324) @[Mux.scala 46:16]
    wire voluntaryNewCoh : {state : UInt<2>} @[Metadata.scala 158:20]
    voluntaryNewCoh is invalid @[Metadata.scala 158:20]
    voluntaryNewCoh.state <= T_4326 @[Metadata.scala 159:16]
    node T_4373 = eq(s2_probe_state.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_4374 = mux(T_4373, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_4375 = mux(T_4373, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_4376 = mux(T_4373, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_4377 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4378 = mux(T_4377, T_4376, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_4379 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4380 = mux(T_4379, T_4375, T_4378) @[Mux.scala 46:16]
    node T_4381 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4382 = mux(T_4381, T_4374, T_4380) @[Mux.scala 46:16]
    node T_4383 = eq(s2_probe_state.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_4384 = mux(T_4383, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_4385 = mux(T_4383, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_4386 = mux(T_4383, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_4387 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4388 = mux(T_4387, T_4386, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_4389 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4390 = mux(T_4389, T_4385, T_4388) @[Mux.scala 46:16]
    node T_4391 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4392 = mux(T_4391, T_4384, T_4390) @[Mux.scala 46:16]
    node T_4393 = eq(s2_probe_state.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_4394 = mux(T_4393, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_4395 = mux(T_4393, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_4396 = mux(T_4393, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_4397 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4398 = mux(T_4397, T_4396, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_4399 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4400 = mux(T_4399, T_4395, T_4398) @[Mux.scala 46:16]
    node T_4401 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_4402 = mux(T_4401, T_4394, T_4400) @[Mux.scala 46:16]
    node T_4403 = eq(UInt<2>("h02"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4404 = mux(T_4403, T_4402, UInt<3>("h03")) @[Mux.scala 46:16]
    node T_4405 = eq(UInt<2>("h01"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4406 = mux(T_4405, T_4392, T_4404) @[Mux.scala 46:16]
    node T_4407 = eq(UInt<2>("h00"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4408 = mux(T_4407, T_4382, T_4406) @[Mux.scala 46:16]
    wire probeResponseMessage : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    probeResponseMessage is invalid @[Definitions.scala 754:19]
    probeResponseMessage.r_type <= T_4408 @[Definitions.scala 755:16]
    probeResponseMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    probeResponseMessage.addr_block <= probe_bits.addr_block @[Definitions.scala 757:20]
    probeResponseMessage.addr_beat <= UInt<1>("h00") @[Definitions.scala 758:19]
    probeResponseMessage.data <= UInt<1>("h00") @[Definitions.scala 759:14]
    probeResponseMessage.voluntary <= UInt<1>("h00") @[Definitions.scala 760:19]
    node T_4463 = eq(UInt<2>("h02"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4464 = mux(T_4463, UInt<2>("h00"), s2_probe_state.state) @[Mux.scala 46:16]
    node T_4465 = eq(UInt<2>("h01"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4466 = mux(T_4465, UInt<2>("h00"), T_4464) @[Mux.scala 46:16]
    node T_4467 = eq(UInt<2>("h00"), probe_bits.p_type) @[Mux.scala 46:19]
    node T_4468 = mux(T_4467, UInt<2>("h00"), T_4466) @[Mux.scala 46:16]
    wire probeNewCoh : {state : UInt<2>} @[Metadata.scala 158:20]
    probeNewCoh is invalid @[Metadata.scala 158:20]
    probeNewCoh.state <= T_4468 @[Metadata.scala 159:16]
    wire newCoh : {state : UInt<2>}
    newCoh is invalid
    newCoh <- probeNewCoh
    releaseWay <= s2_probe_way @[dcache.scala 346:14]
    node T_4533 = and(s2_victimize, s2_victim_dirty) @[dcache.scala 347:22]
    when T_4533 : @[dcache.scala 347:42]
      node T_4534 = neq(s2_hit_state.state, UInt<2>("h00")) @[Policies.scala 237:51]
      node T_4535 = and(s2_valid, T_4534) @[dcache.scala 348:23]
      node T_4537 = eq(T_4535, UInt<1>("h00")) @[dcache.scala 348:12]
      node T_4538 = or(T_4537, reset) @[dcache.scala 348:11]
      node T_4540 = eq(T_4538, UInt<1>("h00")) @[dcache.scala 348:11]
      when T_4540 : @[dcache.scala 348:11]
        printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:348 assert(!(s2_valid && s2_hit_state.isValid()))\n") @[dcache.scala 348:11]
        stop(clk, UInt<1>(1), 1) @[dcache.scala 348:11]
        skip @[dcache.scala 348:11]
      release_state <= UInt<3>("h02") @[dcache.scala 349:19]
      node T_4541 = bits(s2_req.addr, 11, 6) @[dcache.scala 350:60]
      node T_4542 = cat(s2_victim_tag, T_4541) @[Cat.scala 20:58]
      probe_bits.addr_block <= T_4542 @[dcache.scala 350:27]
      skip @[dcache.scala 347:42]
    when s2_probe : @[dcache.scala 352:19]
      node T_4543 = eq(s2_probe_state.state, UInt<2>("h02")) @[Package.scala 7:47]
      when T_4543 : @[dcache.scala 353:56]
        release_state <= UInt<3>("h03") @[dcache.scala 353:72]
        skip @[dcache.scala 353:56]
      node T_4544 = neq(s2_probe_state.state, UInt<2>("h00")) @[Policies.scala 237:51]
      node T_4546 = eq(T_4543, UInt<1>("h00")) @[dcache.scala 353:56]
      node T_4547 = and(T_4546, T_4544) @[dcache.scala 354:42]
      when T_4547 : @[dcache.scala 354:42]
        release_state <= UInt<3>("h04") @[dcache.scala 354:58]
        skip @[dcache.scala 354:42]
      node T_4549 = eq(T_4543, UInt<1>("h00")) @[dcache.scala 353:56]
      node T_4551 = eq(T_4544, UInt<1>("h00")) @[dcache.scala 354:42]
      node T_4552 = and(T_4549, T_4551) @[dcache.scala 354:42]
      when T_4552 : @[dcache.scala 355:16]
        io.mem.release.valid <= UInt<1>("h01") @[dcache.scala 356:28]
        release_state <= UInt<3>("h05") @[dcache.scala 357:21]
        skip @[dcache.scala 355:16]
      skip @[dcache.scala 352:19]
    when releaseDone : @[dcache.scala 360:22]
      release_state <= UInt<3>("h00") @[dcache.scala 360:38]
      skip @[dcache.scala 360:22]
    node T_4554 = eq(release_state, UInt<3>("h05")) @[Package.scala 7:47]
    node T_4555 = eq(release_state, UInt<3>("h04")) @[Package.scala 7:47]
    node T_4556 = or(T_4554, T_4555) @[Package.scala 7:62]
    when T_4556 : @[dcache.scala 361:69]
      io.mem.release.valid <= UInt<1>("h01") @[dcache.scala 362:26]
      skip @[dcache.scala 361:69]
    node T_4558 = eq(release_state, UInt<3>("h04")) @[Package.scala 7:47]
    node T_4559 = eq(release_state, UInt<3>("h03")) @[Package.scala 7:47]
    node T_4560 = or(T_4558, T_4559) @[Package.scala 7:62]
    when T_4560 : @[dcache.scala 364:70]
      io.mem.release.bits <- probeResponseMessage @[dcache.scala 365:25]
      when releaseDone : @[dcache.scala 366:24]
        release_state <= UInt<3>("h07") @[dcache.scala 366:40]
        skip @[dcache.scala 366:24]
      skip @[dcache.scala 364:70]
    node T_4561 = eq(release_state, UInt<3>("h02")) @[Package.scala 7:47]
    node T_4562 = eq(release_state, UInt<3>("h06")) @[Package.scala 7:47]
    node T_4563 = or(T_4561, T_4562) @[Package.scala 7:62]
    when T_4563 : @[dcache.scala 368:79]
      io.mem.release.bits <- voluntaryReleaseMessage @[dcache.scala 369:25]
      newCoh <- voluntaryNewCoh @[dcache.scala 370:12]
      releaseWay <= s2_victim_way @[dcache.scala 371:16]
      when releaseDone : @[dcache.scala 372:24]
        release_state <= UInt<3>("h06") @[dcache.scala 373:21]
        release_ack_wait <= UInt<1>("h01") @[dcache.scala 374:24]
        skip @[dcache.scala 372:24]
      skip @[dcache.scala 368:79]
    node T_4565 = and(io.mem.release.ready, io.mem.release.valid) @[Decoupled.scala 21:42]
    node T_4567 = eq(T_4565, UInt<1>("h00")) @[dcache.scala 377:21]
    node T_4568 = and(s2_probe, T_4567) @[dcache.scala 377:18]
    when T_4568 : @[dcache.scala 377:45]
      s1_nack <= UInt<1>("h01") @[dcache.scala 377:55]
      skip @[dcache.scala 377:45]
    io.mem.release.bits.addr_block <= probe_bits.addr_block @[dcache.scala 378:34]
    io.mem.release.bits.addr_beat <= writebackCount @[dcache.scala 379:33]
    io.mem.release.bits.data <= s2_data @[dcache.scala 380:28]
    node T_4571 = lt(releaseDataBeat, UInt<4>("h08")) @[dcache.scala 382:60]
    node T_4572 = and(inWriteback, T_4571) @[dcache.scala 382:41]
    dataArb.io.in[2].valid <= T_4572 @[dcache.scala 382:26]
    dataArb.io.in[2].bits.write <= UInt<1>("h00") @[dcache.scala 383:31]
    node T_4574 = bits(releaseDataBeat, 2, 0) @[dcache.scala 384:84]
    node T_4575 = cat(io.mem.release.bits.addr_block, T_4574) @[Cat.scala 20:58]
    node T_4576 = shl(T_4575, 3) @[dcache.scala 384:112]
    dataArb.io.in[2].bits.addr <= T_4576 @[dcache.scala 384:30]
    node T_4578 = not(UInt<4>("h00")) @[dcache.scala 385:35]
    dataArb.io.in[2].bits.way_en <= T_4578 @[dcache.scala 385:32]
    node T_4579 = eq(release_state, UInt<3>("h06")) @[Package.scala 7:47]
    node T_4580 = eq(release_state, UInt<3>("h07")) @[Package.scala 7:47]
    node T_4581 = or(T_4579, T_4580) @[Package.scala 7:62]
    metaWriteArb.io.in[2].valid <= T_4581 @[dcache.scala 387:31]
    metaWriteArb.io.in[2].bits.way_en <= releaseWay @[dcache.scala 388:37]
    node T_4583 = cat(io.mem.release.bits.addr_block, io.mem.release.bits.addr_beat) @[Cat.scala 20:58]
    node T_4584 = cat(T_4583, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_4585 = bits(T_4584, 11, 6) @[dcache.scala 389:68]
    metaWriteArb.io.in[2].bits.idx <= T_4585 @[dcache.scala 389:34]
    metaWriteArb.io.in[2].bits.data.coh <- newCoh @[dcache.scala 390:39]
    node T_4587 = cat(io.mem.release.bits.addr_block, io.mem.release.bits.addr_beat) @[Cat.scala 20:58]
    node T_4588 = cat(T_4587, UInt<3>("h00")) @[Cat.scala 20:58]
    node T_4589 = bits(T_4588, 31, 12) @[dcache.scala 391:73]
    metaWriteArb.io.in[2].bits.data.tag <= T_4589 @[dcache.scala 391:39]
    node T_4590 = and(metaWriteArb.io.in[2].ready, metaWriteArb.io.in[2].valid) @[Decoupled.scala 21:42]
    when T_4590 : @[dcache.scala 392:39]
      release_state <= UInt<3>("h00") @[dcache.scala 392:55]
      skip @[dcache.scala 392:39]
    io.cpu.resp.valid <= s2_valid_hit @[dcache.scala 395:21]
    io.cpu.resp.bits <- s2_req @[dcache.scala 396:20]
    io.cpu.resp.bits.has_data <= s2_read @[dcache.scala 397:29]
    io.cpu.resp.bits.replay <= UInt<1>("h00") @[dcache.scala 398:27]
    node T_4592 = or(s1_valid, s2_valid) @[dcache.scala 399:32]
    node T_4593 = or(T_4592, grant_wait) @[dcache.scala 399:44]
    node T_4595 = eq(T_4593, UInt<1>("h00")) @[dcache.scala 399:21]
    io.cpu.ordered <= T_4595 @[dcache.scala 399:18]
    node T_4596 = and(io.mem.grant.valid, grantIsUncached) @[dcache.scala 402:44]
    io.cpu.replay_next <= T_4596 @[dcache.scala 402:22]
    reg doUncachedResp : UInt<1>, clk
    doUncachedResp <= io.cpu.replay_next
    when doUncachedResp : @[dcache.scala 404:25]
      node T_4598 = eq(s2_valid_hit, UInt<1>("h00")) @[dcache.scala 405:12]
      node T_4599 = or(T_4598, reset) @[dcache.scala 405:11]
      node T_4601 = eq(T_4599, UInt<1>("h00")) @[dcache.scala 405:11]
      when T_4601 : @[dcache.scala 405:11]
        printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:405 assert(!s2_valid_hit)\n") @[dcache.scala 405:11]
        stop(clk, UInt<1>(1), 1) @[dcache.scala 405:11]
        skip @[dcache.scala 405:11]
      io.cpu.resp.valid <= UInt<1>("h01") @[dcache.scala 406:23]
      io.cpu.resp.bits.replay <= UInt<1>("h01") @[dcache.scala 407:29]
      skip @[dcache.scala 404:25]
    node T_4605 = cat(UInt<1>("h00"), UInt<6>("h00")) @[Cat.scala 20:58]
    node s2_data_word = dshr(s2_data, T_4605) @[dcache.scala 412:30]
    node T_4606 = bits(s2_req.typ, 2, 2) @[consts.scala 20:31]
    node T_4608 = eq(T_4606, UInt<1>("h00")) @[consts.scala 20:28]
    node T_4609 = bits(s2_req.typ, 1, 0) @[AmoAlu.scala 11:17]
    node T_4610 = bits(s2_req.addr, 2, 2) @[AmoAlu.scala 44:29]
    node T_4611 = bits(s2_data_word, 63, 32) @[AmoAlu.scala 44:37]
    node T_4612 = bits(s2_data_word, 31, 0) @[AmoAlu.scala 44:55]
    node T_4613 = mux(T_4610, T_4611, T_4612) @[AmoAlu.scala 44:24]
    node T_4615 = and(UInt<1>("h00"), s2_sc) @[AmoAlu.scala 45:33]
    node T_4617 = mux(T_4615, UInt<1>("h00"), T_4613) @[AmoAlu.scala 46:23]
    node T_4619 = eq(T_4609, UInt<2>("h02")) @[AmoAlu.scala 47:26]
    node T_4620 = or(T_4619, T_4615) @[AmoAlu.scala 47:38]
    node T_4621 = bits(T_4617, 31, 31) @[AmoAlu.scala 47:85]
    node T_4622 = and(T_4608, T_4621) @[AmoAlu.scala 47:76]
    node T_4623 = bits(T_4622, 0, 0) @[Bitwise.scala 33:15]
    node T_4626 = mux(T_4623, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node T_4627 = bits(s2_data_word, 63, 32) @[AmoAlu.scala 47:98]
    node T_4628 = mux(T_4620, T_4626, T_4627) @[AmoAlu.scala 47:20]
    node T_4629 = cat(T_4628, T_4617) @[Cat.scala 20:58]
    node T_4630 = bits(s2_req.addr, 1, 1) @[AmoAlu.scala 44:29]
    node T_4631 = bits(T_4629, 31, 16) @[AmoAlu.scala 44:37]
    node T_4632 = bits(T_4629, 15, 0) @[AmoAlu.scala 44:55]
    node T_4633 = mux(T_4630, T_4631, T_4632) @[AmoAlu.scala 44:24]
    node T_4635 = and(UInt<1>("h00"), s2_sc) @[AmoAlu.scala 45:33]
    node T_4637 = mux(T_4635, UInt<1>("h00"), T_4633) @[AmoAlu.scala 46:23]
    node T_4639 = eq(T_4609, UInt<1>("h01")) @[AmoAlu.scala 47:26]
    node T_4640 = or(T_4639, T_4635) @[AmoAlu.scala 47:38]
    node T_4641 = bits(T_4637, 15, 15) @[AmoAlu.scala 47:85]
    node T_4642 = and(T_4608, T_4641) @[AmoAlu.scala 47:76]
    node T_4643 = bits(T_4642, 0, 0) @[Bitwise.scala 33:15]
    node T_4646 = mux(T_4643, UInt<48>("h0ffffffffffff"), UInt<48>("h00")) @[Bitwise.scala 33:12]
    node T_4647 = bits(T_4629, 63, 16) @[AmoAlu.scala 47:98]
    node T_4648 = mux(T_4640, T_4646, T_4647) @[AmoAlu.scala 47:20]
    node T_4649 = cat(T_4648, T_4637) @[Cat.scala 20:58]
    node T_4650 = bits(s2_req.addr, 0, 0) @[AmoAlu.scala 44:29]
    node T_4651 = bits(T_4649, 15, 8) @[AmoAlu.scala 44:37]
    node T_4652 = bits(T_4649, 7, 0) @[AmoAlu.scala 44:55]
    node T_4653 = mux(T_4650, T_4651, T_4652) @[AmoAlu.scala 44:24]
    node T_4655 = and(UInt<1>("h01"), s2_sc) @[AmoAlu.scala 45:33]
    node T_4657 = mux(T_4655, UInt<1>("h00"), T_4653) @[AmoAlu.scala 46:23]
    node T_4659 = eq(T_4609, UInt<1>("h00")) @[AmoAlu.scala 47:26]
    node T_4660 = or(T_4659, T_4655) @[AmoAlu.scala 47:38]
    node T_4661 = bits(T_4657, 7, 7) @[AmoAlu.scala 47:85]
    node T_4662 = and(T_4608, T_4661) @[AmoAlu.scala 47:76]
    node T_4663 = bits(T_4662, 0, 0) @[Bitwise.scala 33:15]
    node T_4666 = mux(T_4663, UInt<56>("h0ffffffffffffff"), UInt<56>("h00")) @[Bitwise.scala 33:12]
    node T_4667 = bits(T_4649, 63, 8) @[AmoAlu.scala 47:98]
    node T_4668 = mux(T_4660, T_4666, T_4667) @[AmoAlu.scala 47:20]
    node T_4669 = cat(T_4668, T_4657) @[Cat.scala 20:58]
    node T_4670 = or(T_4669, s2_sc_fail) @[dcache.scala 414:41]
    io.cpu.resp.bits.data <= T_4670 @[dcache.scala 414:25]
    node T_4671 = bits(s2_req.addr, 2, 2) @[AmoAlu.scala 44:29]
    node T_4672 = bits(s2_data_word, 63, 32) @[AmoAlu.scala 44:37]
    node T_4673 = bits(s2_data_word, 31, 0) @[AmoAlu.scala 44:55]
    node T_4674 = mux(T_4671, T_4672, T_4673) @[AmoAlu.scala 44:24]
    node T_4676 = and(UInt<1>("h00"), s2_sc) @[AmoAlu.scala 45:33]
    node T_4678 = mux(T_4676, UInt<1>("h00"), T_4674) @[AmoAlu.scala 46:23]
    node T_4680 = eq(T_4609, UInt<2>("h02")) @[AmoAlu.scala 47:26]
    node T_4681 = or(T_4680, T_4676) @[AmoAlu.scala 47:38]
    node T_4682 = bits(T_4678, 31, 31) @[AmoAlu.scala 47:85]
    node T_4683 = and(T_4608, T_4682) @[AmoAlu.scala 47:76]
    node T_4684 = bits(T_4683, 0, 0) @[Bitwise.scala 33:15]
    node T_4687 = mux(T_4684, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node T_4688 = bits(s2_data_word, 63, 32) @[AmoAlu.scala 47:98]
    node T_4689 = mux(T_4681, T_4687, T_4688) @[AmoAlu.scala 47:20]
    node T_4690 = cat(T_4689, T_4678) @[Cat.scala 20:58]
    io.cpu.resp.bits.data_word_bypass <= T_4690 @[dcache.scala 415:37]
    io.cpu.resp.bits.store_data <= pstore1_data @[dcache.scala 416:31]
    inst AMOALU_1 of AMOALU @[dcache.scala 420:24]
    AMOALU_1.io is invalid
    AMOALU_1.clk <= clk
    AMOALU_1.reset <= reset
    AMOALU_1.io.addr <= pstore1_addr @[dcache.scala 421:20]
    AMOALU_1.io.cmd <= pstore1_cmd @[dcache.scala 422:19]
    AMOALU_1.io.typ <= pstore1_typ @[dcache.scala 423:19]
    AMOALU_1.io.lhs <= s2_data_word @[dcache.scala 424:19]
    AMOALU_1.io.rhs <= pstore1_data @[dcache.scala 425:19]
    pstore1_storegen_data <= AMOALU_1.io.out @[dcache.scala 426:27]
    reg flushed : UInt<1>, clk with : (reset => (reset, UInt<1>("h01")))
    reg flushing : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_4694 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    node T_4695 = and(io.mem.acquire.ready, io.mem.acquire.valid) @[Decoupled.scala 21:42]
    node T_4697 = eq(s2_uncached, UInt<1>("h00")) @[dcache.scala 435:34]
    node T_4698 = and(T_4695, T_4697) @[dcache.scala 435:31]
    when T_4698 : @[dcache.scala 435:48]
      flushed <= UInt<1>("h00") @[dcache.scala 435:58]
      skip @[dcache.scala 435:48]
    node T_4700 = eq(s2_req.cmd, UInt<5>("h05")) @[dcache.scala 436:39]
    node T_4701 = and(s2_valid_masked, T_4700) @[dcache.scala 436:25]
    when T_4701 : @[dcache.scala 436:56]
      node T_4703 = eq(flushed, UInt<1>("h00")) @[dcache.scala 437:23]
      io.cpu.s2_nack <= T_4703 @[dcache.scala 437:20]
      node T_4705 = eq(flushed, UInt<1>("h00")) @[dcache.scala 438:11]
      when T_4705 : @[dcache.scala 438:21]
        node T_4707 = eq(release_ack_wait, UInt<1>("h00")) @[dcache.scala 439:19]
        flushing <= T_4707 @[dcache.scala 439:16]
        skip @[dcache.scala 438:21]
      skip @[dcache.scala 436:56]
    node T_4708 = and(metaReadArb.io.in[0].ready, metaReadArb.io.in[0].valid) @[Decoupled.scala 21:42]
    node T_4710 = eq(s1_flush_valid, UInt<1>("h00")) @[dcache.scala 442:52]
    node T_4711 = and(T_4708, T_4710) @[dcache.scala 442:49]
    node T_4713 = eq(s2_flush_valid, UInt<1>("h00")) @[dcache.scala 442:71]
    node T_4714 = and(T_4711, T_4713) @[dcache.scala 442:68]
    node T_4715 = eq(release_state, UInt<3>("h00")) @[dcache.scala 442:104]
    node T_4716 = and(T_4714, T_4715) @[dcache.scala 442:87]
    node T_4718 = eq(release_ack_wait, UInt<1>("h00")) @[dcache.scala 442:119]
    node T_4719 = and(T_4716, T_4718) @[dcache.scala 442:116]
    s1_flush_valid <= T_4719 @[dcache.scala 442:18]
    metaReadArb.io.in[0].valid <= flushing @[dcache.scala 443:30]
    metaReadArb.io.in[0].bits.idx <= T_4694 @[dcache.scala 444:33]
    node T_4721 = not(UInt<4>("h00")) @[dcache.scala 445:39]
    metaReadArb.io.in[0].bits.way_en <= T_4721 @[dcache.scala 445:36]
    when flushing : @[dcache.scala 446:19]
      node T_4722 = shr(T_4694, 6) @[dcache.scala 447:41]
      s1_victim_way <= T_4722 @[dcache.scala 447:19]
      when s2_flush_valid : @[dcache.scala 448:27]
        node T_4724 = eq(T_4694, UInt<8>("h0ff")) @[Counter.scala 20:24]
        node T_4726 = add(T_4694, UInt<1>("h01")) @[Counter.scala 21:22]
        node T_4727 = tail(T_4726, 1) @[Counter.scala 21:22]
        T_4694 <= T_4727 @[Counter.scala 21:13]
        when T_4724 : @[dcache.scala 449:33]
          flushed <= UInt<1>("h01") @[dcache.scala 450:17]
          skip @[dcache.scala 449:33]
        skip @[dcache.scala 448:27]
      node T_4729 = eq(release_state, UInt<3>("h00")) @[dcache.scala 453:36]
      node T_4730 = and(flushed, T_4729) @[dcache.scala 453:19]
      node T_4732 = eq(release_ack_wait, UInt<1>("h00")) @[dcache.scala 453:51]
      node T_4733 = and(T_4730, T_4732) @[dcache.scala 453:48]
      when T_4733 : @[dcache.scala 453:70]
        flushing <= UInt<1>("h00") @[dcache.scala 454:16]
        skip @[dcache.scala 453:70]
      skip @[dcache.scala 446:19]
    
  module FPUDecoder : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip inst : UInt<32>, sigs : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}}
    
    io is invalid
    node T_20 = and(io.inst, UInt<32>("h04")) @[decode.scala 13:65]
    node T_22 = eq(T_20, UInt<32>("h04")) @[decode.scala 13:121]
    node T_24 = and(io.inst, UInt<32>("h08000010")) @[decode.scala 13:65]
    node T_26 = eq(T_24, UInt<32>("h08000010")) @[decode.scala 13:121]
    node T_28 = or(UInt<1>("h00"), T_22) @[decode.scala 14:30]
    node T_29 = or(T_28, T_26) @[decode.scala 14:30]
    node T_31 = and(io.inst, UInt<32>("h08")) @[decode.scala 13:65]
    node T_33 = eq(T_31, UInt<32>("h08")) @[decode.scala 13:121]
    node T_35 = and(io.inst, UInt<32>("h010000010")) @[decode.scala 13:65]
    node T_37 = eq(T_35, UInt<32>("h010000010")) @[decode.scala 13:121]
    node T_39 = or(UInt<1>("h00"), T_33) @[decode.scala 14:30]
    node T_40 = or(T_39, T_37) @[decode.scala 14:30]
    node T_42 = and(io.inst, UInt<32>("h040")) @[decode.scala 13:65]
    node T_44 = eq(T_42, UInt<32>("h00")) @[decode.scala 13:121]
    node T_46 = and(io.inst, UInt<32>("h020000000")) @[decode.scala 13:65]
    node T_48 = eq(T_46, UInt<32>("h020000000")) @[decode.scala 13:121]
    node T_50 = or(UInt<1>("h00"), T_44) @[decode.scala 14:30]
    node T_51 = or(T_50, T_48) @[decode.scala 14:30]
    node T_53 = and(io.inst, UInt<32>("h040000000")) @[decode.scala 13:65]
    node T_55 = eq(T_53, UInt<32>("h040000000")) @[decode.scala 13:121]
    node T_57 = or(UInt<1>("h00"), T_44) @[decode.scala 14:30]
    node T_58 = or(T_57, T_55) @[decode.scala 14:30]
    node T_60 = and(io.inst, UInt<32>("h010")) @[decode.scala 13:65]
    node T_62 = eq(T_60, UInt<32>("h00")) @[decode.scala 13:121]
    node T_64 = or(UInt<1>("h00"), T_62) @[decode.scala 14:30]
    node T_65 = cat(T_40, T_29) @[Cat.scala 20:58]
    node T_66 = cat(T_64, T_58) @[Cat.scala 20:58]
    node T_67 = cat(T_66, T_51) @[Cat.scala 20:58]
    node decoder_0 = cat(T_67, T_65) @[Cat.scala 20:58]
    node decoder_1 = or(UInt<1>("h00"), T_44) @[decode.scala 14:30]
    node T_70 = and(io.inst, UInt<32>("h080000020")) @[decode.scala 13:65]
    node T_72 = eq(T_70, UInt<32>("h00")) @[decode.scala 13:121]
    node T_74 = and(io.inst, UInt<32>("h030")) @[decode.scala 13:65]
    node T_76 = eq(T_74, UInt<32>("h00")) @[decode.scala 13:121]
    node T_78 = and(io.inst, UInt<32>("h010000020")) @[decode.scala 13:65]
    node T_80 = eq(T_78, UInt<32>("h010000000")) @[decode.scala 13:121]
    node T_82 = or(UInt<1>("h00"), T_72) @[decode.scala 14:30]
    node T_83 = or(T_82, T_76) @[decode.scala 14:30]
    node decoder_2 = or(T_83, T_80) @[decode.scala 14:30]
    node T_85 = and(io.inst, UInt<32>("h080000004")) @[decode.scala 13:65]
    node T_87 = eq(T_85, UInt<32>("h00")) @[decode.scala 13:121]
    node T_89 = and(io.inst, UInt<32>("h010000004")) @[decode.scala 13:65]
    node T_91 = eq(T_89, UInt<32>("h00")) @[decode.scala 13:121]
    node T_93 = and(io.inst, UInt<32>("h050")) @[decode.scala 13:65]
    node T_95 = eq(T_93, UInt<32>("h040")) @[decode.scala 13:121]
    node T_97 = or(UInt<1>("h00"), T_87) @[decode.scala 14:30]
    node T_98 = or(T_97, T_91) @[decode.scala 14:30]
    node decoder_3 = or(T_98, T_95) @[decode.scala 14:30]
    node T_100 = and(io.inst, UInt<32>("h040000004")) @[decode.scala 13:65]
    node T_102 = eq(T_100, UInt<32>("h00")) @[decode.scala 13:121]
    node T_104 = and(io.inst, UInt<32>("h020")) @[decode.scala 13:65]
    node T_106 = eq(T_104, UInt<32>("h020")) @[decode.scala 13:121]
    node T_108 = or(UInt<1>("h00"), T_102) @[decode.scala 14:30]
    node T_109 = or(T_108, T_106) @[decode.scala 14:30]
    node decoder_4 = or(T_109, T_95) @[decode.scala 14:30]
    node decoder_5 = or(UInt<1>("h00"), T_95) @[decode.scala 14:30]
    node T_112 = and(io.inst, UInt<32>("h050000010")) @[decode.scala 13:65]
    node T_114 = eq(T_112, UInt<32>("h050000010")) @[decode.scala 13:121]
    node T_116 = or(UInt<1>("h00"), T_44) @[decode.scala 14:30]
    node decoder_6 = or(T_116, T_114) @[decode.scala 14:30]
    node T_118 = and(io.inst, UInt<32>("h030000010")) @[decode.scala 13:65]
    node T_120 = eq(T_118, UInt<32>("h010")) @[decode.scala 13:121]
    node decoder_7 = or(UInt<1>("h00"), T_120) @[decode.scala 14:30]
    node T_123 = and(io.inst, UInt<32>("h01040")) @[decode.scala 13:65]
    node T_125 = eq(T_123, UInt<32>("h00")) @[decode.scala 13:121]
    node T_127 = and(io.inst, UInt<32>("h02000040")) @[decode.scala 13:65]
    node T_129 = eq(T_127, UInt<32>("h040")) @[decode.scala 13:121]
    node T_131 = or(UInt<1>("h00"), T_125) @[decode.scala 14:30]
    node decoder_8 = or(T_131, T_129) @[decode.scala 14:30]
    node T_133 = and(io.inst, UInt<32>("h090000010")) @[decode.scala 13:65]
    node T_135 = eq(T_133, UInt<32>("h090000010")) @[decode.scala 13:121]
    node decoder_9 = or(UInt<1>("h00"), T_135) @[decode.scala 14:30]
    node T_138 = and(io.inst, UInt<32>("h090000010")) @[decode.scala 13:65]
    node T_140 = eq(T_138, UInt<32>("h080000010")) @[decode.scala 13:121]
    node T_142 = or(UInt<1>("h00"), T_106) @[decode.scala 14:30]
    node decoder_10 = or(T_142, T_140) @[decode.scala 14:30]
    node T_144 = and(io.inst, UInt<32>("h0a0000010")) @[decode.scala 13:65]
    node T_146 = eq(T_144, UInt<32>("h020000010")) @[decode.scala 13:121]
    node T_148 = and(io.inst, UInt<32>("h0d0000010")) @[decode.scala 13:65]
    node T_150 = eq(T_148, UInt<32>("h040000010")) @[decode.scala 13:121]
    node T_152 = or(UInt<1>("h00"), T_146) @[decode.scala 14:30]
    node decoder_11 = or(T_152, T_150) @[decode.scala 14:30]
    node T_154 = and(io.inst, UInt<32>("h070000004")) @[decode.scala 13:65]
    node T_156 = eq(T_154, UInt<32>("h00")) @[decode.scala 13:121]
    node T_158 = and(io.inst, UInt<32>("h068000004")) @[decode.scala 13:65]
    node T_160 = eq(T_158, UInt<32>("h00")) @[decode.scala 13:121]
    node T_162 = or(UInt<1>("h00"), T_156) @[decode.scala 14:30]
    node T_163 = or(T_162, T_160) @[decode.scala 14:30]
    node decoder_12 = or(T_163, T_95) @[decode.scala 14:30]
    node T_165 = and(io.inst, UInt<32>("h058000010")) @[decode.scala 13:65]
    node T_167 = eq(T_165, UInt<32>("h018000010")) @[decode.scala 13:121]
    node decoder_13 = or(UInt<1>("h00"), T_167) @[decode.scala 14:30]
    node T_170 = and(io.inst, UInt<32>("h0d0000010")) @[decode.scala 13:65]
    node T_172 = eq(T_170, UInt<32>("h050000010")) @[decode.scala 13:121]
    node decoder_14 = or(UInt<1>("h00"), T_172) @[decode.scala 14:30]
    node T_175 = and(io.inst, UInt<32>("h020000004")) @[decode.scala 13:65]
    node T_177 = eq(T_175, UInt<32>("h00")) @[decode.scala 13:121]
    node T_179 = and(io.inst, UInt<32>("h040002000")) @[decode.scala 13:65]
    node T_181 = eq(T_179, UInt<32>("h040000000")) @[decode.scala 13:121]
    node T_183 = or(UInt<1>("h00"), T_177) @[decode.scala 14:30]
    node T_184 = or(T_183, T_95) @[decode.scala 14:30]
    node decoder_15 = or(T_184, T_181) @[decode.scala 14:30]
    node T_186 = and(io.inst, UInt<32>("h08002000")) @[decode.scala 13:65]
    node T_188 = eq(T_186, UInt<32>("h08000000")) @[decode.scala 13:121]
    node T_190 = and(io.inst, UInt<32>("h0c0000004")) @[decode.scala 13:65]
    node T_192 = eq(T_190, UInt<32>("h080000000")) @[decode.scala 13:121]
    node T_194 = or(UInt<1>("h00"), T_177) @[decode.scala 14:30]
    node T_195 = or(T_194, T_95) @[decode.scala 14:30]
    node T_196 = or(T_195, T_188) @[decode.scala 14:30]
    node decoder_16 = or(T_196, T_192) @[decode.scala 14:30]
    io.sigs.cmd <= decoder_0 @[fpu.scala 148:40]
    io.sigs.ldst <= decoder_1 @[fpu.scala 148:40]
    io.sigs.wen <= decoder_2 @[fpu.scala 148:40]
    io.sigs.ren1 <= decoder_3 @[fpu.scala 148:40]
    io.sigs.ren2 <= decoder_4 @[fpu.scala 148:40]
    io.sigs.ren3 <= decoder_5 @[fpu.scala 148:40]
    io.sigs.swap12 <= decoder_6 @[fpu.scala 148:40]
    io.sigs.swap23 <= decoder_7 @[fpu.scala 148:40]
    io.sigs.single <= decoder_8 @[fpu.scala 148:40]
    io.sigs.fromint <= decoder_9 @[fpu.scala 148:40]
    io.sigs.toint <= decoder_10 @[fpu.scala 148:40]
    io.sigs.fastpipe <= decoder_11 @[fpu.scala 148:40]
    io.sigs.fma <= decoder_12 @[fpu.scala 148:40]
    io.sigs.div <= decoder_13 @[fpu.scala 148:40]
    io.sigs.sqrt <= decoder_14 @[fpu.scala 148:40]
    io.sigs.round <= decoder_15 @[fpu.scala 148:40]
    io.sigs.wflags <= decoder_16 @[fpu.scala 148:40]
    
  module MulAddRecFN_preMul : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip op : UInt<2>, flip a : UInt<33>, flip b : UInt<33>, flip c : UInt<33>, flip roundingMode : UInt<2>, mulAddA : UInt<24>, mulAddB : UInt<24>, mulAddC : UInt<48>, toPostMul : {highExpA : UInt<3>, isNaN_isQuietNaNA : UInt<1>, highExpB : UInt<3>, isNaN_isQuietNaNB : UInt<1>, signProd : UInt<1>, isZeroProd : UInt<1>, opSignC : UInt<1>, highExpC : UInt<3>, isNaN_isQuietNaNC : UInt<1>, isCDominant : UInt<1>, CAlignDist_0 : UInt<1>, CAlignDist : UInt<7>, bit0AlignedNegSigC : UInt<1>, highAlignedNegSigC : UInt<26>, sExpSum : UInt<11>, roundingMode : UInt<2>}}
    
    io is invalid
    node signA = bits(io.a, 32, 32) @[MulAddRecFN.scala 102:22]
    node expA = bits(io.a, 31, 23) @[MulAddRecFN.scala 103:22]
    node fractA = bits(io.a, 22, 0) @[MulAddRecFN.scala 104:22]
    node T_42 = bits(expA, 8, 6) @[MulAddRecFN.scala 105:24]
    node isZeroA = eq(T_42, UInt<1>("h00")) @[MulAddRecFN.scala 105:49]
    node T_45 = eq(isZeroA, UInt<1>("h00")) @[MulAddRecFN.scala 106:20]
    node sigA = cat(T_45, fractA) @[Cat.scala 20:58]
    node signB = bits(io.b, 32, 32) @[MulAddRecFN.scala 108:22]
    node expB = bits(io.b, 31, 23) @[MulAddRecFN.scala 109:22]
    node fractB = bits(io.b, 22, 0) @[MulAddRecFN.scala 110:22]
    node T_46 = bits(expB, 8, 6) @[MulAddRecFN.scala 111:24]
    node isZeroB = eq(T_46, UInt<1>("h00")) @[MulAddRecFN.scala 111:49]
    node T_49 = eq(isZeroB, UInt<1>("h00")) @[MulAddRecFN.scala 112:20]
    node sigB = cat(T_49, fractB) @[Cat.scala 20:58]
    node T_50 = bits(io.c, 32, 32) @[MulAddRecFN.scala 114:23]
    node T_51 = bits(io.op, 0, 0) @[MulAddRecFN.scala 114:52]
    node opSignC = xor(T_50, T_51) @[MulAddRecFN.scala 114:45]
    node expC = bits(io.c, 31, 23) @[MulAddRecFN.scala 115:22]
    node fractC = bits(io.c, 22, 0) @[MulAddRecFN.scala 116:22]
    node T_52 = bits(expC, 8, 6) @[MulAddRecFN.scala 117:24]
    node isZeroC = eq(T_52, UInt<1>("h00")) @[MulAddRecFN.scala 117:49]
    node T_55 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 118:20]
    node sigC = cat(T_55, fractC) @[Cat.scala 20:58]
    node T_56 = xor(signA, signB) @[MulAddRecFN.scala 122:26]
    node T_57 = bits(io.op, 1, 1) @[MulAddRecFN.scala 122:41]
    node signProd = xor(T_56, T_57) @[MulAddRecFN.scala 122:34]
    node isZeroProd = or(isZeroA, isZeroB) @[MulAddRecFN.scala 123:30]
    node T_58 = bits(expB, 8, 8) @[MulAddRecFN.scala 125:34]
    node T_60 = eq(T_58, UInt<1>("h00")) @[MulAddRecFN.scala 125:28]
    node T_61 = bits(T_60, 0, 0) @[Bitwise.scala 33:15]
    node T_64 = mux(T_61, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12]
    node T_65 = bits(expB, 7, 0) @[MulAddRecFN.scala 125:51]
    node T_66 = cat(T_64, T_65) @[Cat.scala 20:58]
    node T_67 = add(expA, T_66) @[MulAddRecFN.scala 125:14]
    node T_68 = tail(T_67, 1) @[MulAddRecFN.scala 125:14]
    node T_70 = add(T_68, UInt<5>("h01b")) @[MulAddRecFN.scala 125:70]
    node sExpAlignedProd = tail(T_70, 1) @[MulAddRecFN.scala 125:70]
    node doSubMags = xor(signProd, opSignC) @[MulAddRecFN.scala 130:30]
    node T_71 = sub(sExpAlignedProd, expC) @[MulAddRecFN.scala 132:42]
    node sNatCAlignDist = tail(T_71, 1) @[MulAddRecFN.scala 132:42]
    node T_72 = bits(sNatCAlignDist, 10, 10) @[MulAddRecFN.scala 133:56]
    node CAlignDist_floor = or(isZeroProd, T_72) @[MulAddRecFN.scala 133:39]
    node T_73 = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 135:44]
    node T_75 = eq(T_73, UInt<1>("h00")) @[MulAddRecFN.scala 135:62]
    node CAlignDist_0 = or(CAlignDist_floor, T_75) @[MulAddRecFN.scala 135:26]
    node T_77 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 137:9]
    node T_78 = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 139:33]
    node T_80 = lt(T_78, UInt<5>("h019")) @[MulAddRecFN.scala 139:51]
    node T_81 = or(CAlignDist_floor, T_80) @[MulAddRecFN.scala 138:31]
    node isCDominant = and(T_77, T_81) @[MulAddRecFN.scala 137:19]
    node T_83 = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 143:31]
    node T_85 = lt(T_83, UInt<7>("h04a")) @[MulAddRecFN.scala 143:49]
    node T_86 = bits(sNatCAlignDist, 6, 0) @[MulAddRecFN.scala 144:31]
    node T_88 = mux(T_85, T_86, UInt<7>("h04a")) @[MulAddRecFN.scala 143:16]
    node CAlignDist = mux(CAlignDist_floor, UInt<1>("h00"), T_88) @[MulAddRecFN.scala 141:12]
    node sExpSum = mux(CAlignDist_floor, expC, sExpAlignedProd) @[MulAddRecFN.scala 148:22]
    node T_89 = bits(CAlignDist, 6, 6) @[primitives.scala 56:25]
    node T_90 = bits(CAlignDist, 5, 0) @[primitives.scala 57:26]
    node T_92 = dshr(asSInt(UInt<65>("h010000000000000000")), T_90) @[primitives.scala 68:52]
    node T_93 = bits(T_92, 63, 54) @[primitives.scala 69:26]
    node T_94 = bits(T_93, 7, 0) @[Bitwise.scala 65:18]
    node T_97 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 58:47]
    node T_98 = xor(UInt<8>("h0ff"), T_97) @[Bitwise.scala 58:21]
    node T_99 = shr(T_94, 4) @[Bitwise.scala 59:21]
    node T_100 = and(T_99, T_98) @[Bitwise.scala 59:31]
    node T_101 = bits(T_94, 3, 0) @[Bitwise.scala 59:46]
    node T_102 = shl(T_101, 4) @[Bitwise.scala 59:65]
    node T_103 = not(T_98) @[Bitwise.scala 59:77]
    node T_104 = and(T_102, T_103) @[Bitwise.scala 59:75]
    node T_105 = or(T_100, T_104) @[Bitwise.scala 59:39]
    node T_106 = bits(T_98, 5, 0) @[Bitwise.scala 58:28]
    node T_107 = shl(T_106, 2) @[Bitwise.scala 58:47]
    node T_108 = xor(T_98, T_107) @[Bitwise.scala 58:21]
    node T_109 = shr(T_105, 2) @[Bitwise.scala 59:21]
    node T_110 = and(T_109, T_108) @[Bitwise.scala 59:31]
    node T_111 = bits(T_105, 5, 0) @[Bitwise.scala 59:46]
    node T_112 = shl(T_111, 2) @[Bitwise.scala 59:65]
    node T_113 = not(T_108) @[Bitwise.scala 59:77]
    node T_114 = and(T_112, T_113) @[Bitwise.scala 59:75]
    node T_115 = or(T_110, T_114) @[Bitwise.scala 59:39]
    node T_116 = bits(T_108, 6, 0) @[Bitwise.scala 58:28]
    node T_117 = shl(T_116, 1) @[Bitwise.scala 58:47]
    node T_118 = xor(T_108, T_117) @[Bitwise.scala 58:21]
    node T_119 = shr(T_115, 1) @[Bitwise.scala 59:21]
    node T_120 = and(T_119, T_118) @[Bitwise.scala 59:31]
    node T_121 = bits(T_115, 6, 0) @[Bitwise.scala 59:46]
    node T_122 = shl(T_121, 1) @[Bitwise.scala 59:65]
    node T_123 = not(T_118) @[Bitwise.scala 59:77]
    node T_124 = and(T_122, T_123) @[Bitwise.scala 59:75]
    node T_125 = or(T_120, T_124) @[Bitwise.scala 59:39]
    node T_126 = bits(T_93, 9, 8) @[Bitwise.scala 65:44]
    node T_127 = bits(T_126, 0, 0) @[Bitwise.scala 65:18]
    node T_128 = bits(T_126, 1, 1) @[Bitwise.scala 65:44]
    node T_129 = cat(T_127, T_128) @[Cat.scala 20:58]
    node T_130 = cat(T_125, T_129) @[Cat.scala 20:58]
    node T_132 = cat(T_130, UInt<14>("h03fff")) @[Cat.scala 20:58]
    node T_134 = dshr(asSInt(UInt<65>("h010000000000000000")), T_90) @[primitives.scala 68:52]
    node T_135 = bits(T_134, 13, 0) @[primitives.scala 69:26]
    node T_136 = bits(T_135, 7, 0) @[Bitwise.scala 65:18]
    node T_139 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 58:47]
    node T_140 = xor(UInt<8>("h0ff"), T_139) @[Bitwise.scala 58:21]
    node T_141 = shr(T_136, 4) @[Bitwise.scala 59:21]
    node T_142 = and(T_141, T_140) @[Bitwise.scala 59:31]
    node T_143 = bits(T_136, 3, 0) @[Bitwise.scala 59:46]
    node T_144 = shl(T_143, 4) @[Bitwise.scala 59:65]
    node T_145 = not(T_140) @[Bitwise.scala 59:77]
    node T_146 = and(T_144, T_145) @[Bitwise.scala 59:75]
    node T_147 = or(T_142, T_146) @[Bitwise.scala 59:39]
    node T_148 = bits(T_140, 5, 0) @[Bitwise.scala 58:28]
    node T_149 = shl(T_148, 2) @[Bitwise.scala 58:47]
    node T_150 = xor(T_140, T_149) @[Bitwise.scala 58:21]
    node T_151 = shr(T_147, 2) @[Bitwise.scala 59:21]
    node T_152 = and(T_151, T_150) @[Bitwise.scala 59:31]
    node T_153 = bits(T_147, 5, 0) @[Bitwise.scala 59:46]
    node T_154 = shl(T_153, 2) @[Bitwise.scala 59:65]
    node T_155 = not(T_150) @[Bitwise.scala 59:77]
    node T_156 = and(T_154, T_155) @[Bitwise.scala 59:75]
    node T_157 = or(T_152, T_156) @[Bitwise.scala 59:39]
    node T_158 = bits(T_150, 6, 0) @[Bitwise.scala 58:28]
    node T_159 = shl(T_158, 1) @[Bitwise.scala 58:47]
    node T_160 = xor(T_150, T_159) @[Bitwise.scala 58:21]
    node T_161 = shr(T_157, 1) @[Bitwise.scala 59:21]
    node T_162 = and(T_161, T_160) @[Bitwise.scala 59:31]
    node T_163 = bits(T_157, 6, 0) @[Bitwise.scala 59:46]
    node T_164 = shl(T_163, 1) @[Bitwise.scala 59:65]
    node T_165 = not(T_160) @[Bitwise.scala 59:77]
    node T_166 = and(T_164, T_165) @[Bitwise.scala 59:75]
    node T_167 = or(T_162, T_166) @[Bitwise.scala 59:39]
    node T_168 = bits(T_135, 13, 8) @[Bitwise.scala 65:44]
    node T_169 = bits(T_168, 3, 0) @[Bitwise.scala 65:18]
    node T_170 = bits(T_169, 1, 0) @[Bitwise.scala 65:18]
    node T_171 = bits(T_170, 0, 0) @[Bitwise.scala 65:18]
    node T_172 = bits(T_170, 1, 1) @[Bitwise.scala 65:44]
    node T_173 = cat(T_171, T_172) @[Cat.scala 20:58]
    node T_174 = bits(T_169, 3, 2) @[Bitwise.scala 65:44]
    node T_175 = bits(T_174, 0, 0) @[Bitwise.scala 65:18]
    node T_176 = bits(T_174, 1, 1) @[Bitwise.scala 65:44]
    node T_177 = cat(T_175, T_176) @[Cat.scala 20:58]
    node T_178 = cat(T_173, T_177) @[Cat.scala 20:58]
    node T_179 = bits(T_168, 5, 4) @[Bitwise.scala 65:44]
    node T_180 = bits(T_179, 0, 0) @[Bitwise.scala 65:18]
    node T_181 = bits(T_179, 1, 1) @[Bitwise.scala 65:44]
    node T_182 = cat(T_180, T_181) @[Cat.scala 20:58]
    node T_183 = cat(T_178, T_182) @[Cat.scala 20:58]
    node T_184 = cat(T_167, T_183) @[Cat.scala 20:58]
    node CExtraMask = mux(T_89, T_132, T_184) @[primitives.scala 61:20]
    node T_185 = not(sigC) @[MulAddRecFN.scala 151:34]
    node negSigC = mux(doSubMags, T_185, sigC) @[MulAddRecFN.scala 151:22]
    node T_186 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15]
    node T_189 = mux(T_186, UInt<50>("h03ffffffffffff"), UInt<50>("h00")) @[Bitwise.scala 33:12]
    node T_190 = cat(doSubMags, negSigC) @[Cat.scala 20:58]
    node T_191 = cat(T_190, T_189) @[Cat.scala 20:58]
    node T_192 = asSInt(T_191) @[MulAddRecFN.scala 154:64]
    node T_193 = dshr(T_192, CAlignDist) @[MulAddRecFN.scala 154:70]
    node T_194 = and(sigC, CExtraMask) @[MulAddRecFN.scala 156:19]
    node T_196 = neq(T_194, UInt<1>("h00")) @[MulAddRecFN.scala 156:33]
    node T_197 = xor(T_196, doSubMags) @[MulAddRecFN.scala 156:37]
    node T_198 = asUInt(T_193) @[Cat.scala 20:58]
    node T_199 = cat(T_198, T_197) @[Cat.scala 20:58]
    node alignedNegSigC = bits(T_199, 74, 0) @[MulAddRecFN.scala 157:10]
    io.mulAddA <= sigA @[MulAddRecFN.scala 159:16]
    io.mulAddB <= sigB @[MulAddRecFN.scala 160:16]
    node T_200 = bits(alignedNegSigC, 48, 1) @[MulAddRecFN.scala 161:33]
    io.mulAddC <= T_200 @[MulAddRecFN.scala 161:16]
    node T_201 = bits(expA, 8, 6) @[MulAddRecFN.scala 163:44]
    io.toPostMul.highExpA <= T_201 @[MulAddRecFN.scala 163:37]
    node T_202 = bits(fractA, 22, 22) @[MulAddRecFN.scala 164:46]
    io.toPostMul.isNaN_isQuietNaNA <= T_202 @[MulAddRecFN.scala 164:37]
    node T_203 = bits(expB, 8, 6) @[MulAddRecFN.scala 165:44]
    io.toPostMul.highExpB <= T_203 @[MulAddRecFN.scala 165:37]
    node T_204 = bits(fractB, 22, 22) @[MulAddRecFN.scala 166:46]
    io.toPostMul.isNaN_isQuietNaNB <= T_204 @[MulAddRecFN.scala 166:37]
    io.toPostMul.signProd <= signProd @[MulAddRecFN.scala 167:37]
    io.toPostMul.isZeroProd <= isZeroProd @[MulAddRecFN.scala 168:37]
    io.toPostMul.opSignC <= opSignC @[MulAddRecFN.scala 169:37]
    node T_205 = bits(expC, 8, 6) @[MulAddRecFN.scala 170:44]
    io.toPostMul.highExpC <= T_205 @[MulAddRecFN.scala 170:37]
    node T_206 = bits(fractC, 22, 22) @[MulAddRecFN.scala 171:46]
    io.toPostMul.isNaN_isQuietNaNC <= T_206 @[MulAddRecFN.scala 171:37]
    io.toPostMul.isCDominant <= isCDominant @[MulAddRecFN.scala 172:37]
    io.toPostMul.CAlignDist_0 <= CAlignDist_0 @[MulAddRecFN.scala 173:37]
    io.toPostMul.CAlignDist <= CAlignDist @[MulAddRecFN.scala 174:37]
    node T_207 = bits(alignedNegSigC, 0, 0) @[MulAddRecFN.scala 175:54]
    io.toPostMul.bit0AlignedNegSigC <= T_207 @[MulAddRecFN.scala 175:37]
    node T_208 = bits(alignedNegSigC, 74, 49) @[MulAddRecFN.scala 177:23]
    io.toPostMul.highAlignedNegSigC <= T_208 @[MulAddRecFN.scala 176:37]
    io.toPostMul.sExpSum <= sExpSum @[MulAddRecFN.scala 178:37]
    io.toPostMul.roundingMode <= io.roundingMode @[MulAddRecFN.scala 179:37]
    
  module MulAddRecFN_postMul : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip fromPreMul : {highExpA : UInt<3>, isNaN_isQuietNaNA : UInt<1>, highExpB : UInt<3>, isNaN_isQuietNaNB : UInt<1>, signProd : UInt<1>, isZeroProd : UInt<1>, opSignC : UInt<1>, highExpC : UInt<3>, isNaN_isQuietNaNC : UInt<1>, isCDominant : UInt<1>, CAlignDist_0 : UInt<1>, CAlignDist : UInt<7>, bit0AlignedNegSigC : UInt<1>, highAlignedNegSigC : UInt<26>, sExpSum : UInt<11>, roundingMode : UInt<2>}, flip mulAddResult : UInt<49>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node isZeroA = eq(io.fromPreMul.highExpA, UInt<1>("h00")) @[MulAddRecFN.scala 207:46]
    node T_38 = bits(io.fromPreMul.highExpA, 2, 1) @[MulAddRecFN.scala 208:45]
    node isSpecialA = eq(T_38, UInt<2>("h03")) @[MulAddRecFN.scala 208:52]
    node T_40 = bits(io.fromPreMul.highExpA, 0, 0) @[MulAddRecFN.scala 209:56]
    node T_42 = eq(T_40, UInt<1>("h00")) @[MulAddRecFN.scala 209:32]
    node isInfA = and(isSpecialA, T_42) @[MulAddRecFN.scala 209:29]
    node T_43 = bits(io.fromPreMul.highExpA, 0, 0) @[MulAddRecFN.scala 210:56]
    node isNaNA = and(isSpecialA, T_43) @[MulAddRecFN.scala 210:29]
    node T_45 = eq(io.fromPreMul.isNaN_isQuietNaNA, UInt<1>("h00")) @[MulAddRecFN.scala 211:31]
    node isSigNaNA = and(isNaNA, T_45) @[MulAddRecFN.scala 211:28]
    node isZeroB = eq(io.fromPreMul.highExpB, UInt<1>("h00")) @[MulAddRecFN.scala 213:46]
    node T_47 = bits(io.fromPreMul.highExpB, 2, 1) @[MulAddRecFN.scala 214:45]
    node isSpecialB = eq(T_47, UInt<2>("h03")) @[MulAddRecFN.scala 214:52]
    node T_49 = bits(io.fromPreMul.highExpB, 0, 0) @[MulAddRecFN.scala 215:56]
    node T_51 = eq(T_49, UInt<1>("h00")) @[MulAddRecFN.scala 215:32]
    node isInfB = and(isSpecialB, T_51) @[MulAddRecFN.scala 215:29]
    node T_52 = bits(io.fromPreMul.highExpB, 0, 0) @[MulAddRecFN.scala 216:56]
    node isNaNB = and(isSpecialB, T_52) @[MulAddRecFN.scala 216:29]
    node T_54 = eq(io.fromPreMul.isNaN_isQuietNaNB, UInt<1>("h00")) @[MulAddRecFN.scala 217:31]
    node isSigNaNB = and(isNaNB, T_54) @[MulAddRecFN.scala 217:28]
    node isZeroC = eq(io.fromPreMul.highExpC, UInt<1>("h00")) @[MulAddRecFN.scala 219:46]
    node T_56 = bits(io.fromPreMul.highExpC, 2, 1) @[MulAddRecFN.scala 220:45]
    node isSpecialC = eq(T_56, UInt<2>("h03")) @[MulAddRecFN.scala 220:52]
    node T_58 = bits(io.fromPreMul.highExpC, 0, 0) @[MulAddRecFN.scala 221:56]
    node T_60 = eq(T_58, UInt<1>("h00")) @[MulAddRecFN.scala 221:32]
    node isInfC = and(isSpecialC, T_60) @[MulAddRecFN.scala 221:29]
    node T_61 = bits(io.fromPreMul.highExpC, 0, 0) @[MulAddRecFN.scala 222:56]
    node isNaNC = and(isSpecialC, T_61) @[MulAddRecFN.scala 222:29]
    node T_63 = eq(io.fromPreMul.isNaN_isQuietNaNC, UInt<1>("h00")) @[MulAddRecFN.scala 223:31]
    node isSigNaNC = and(isNaNC, T_63) @[MulAddRecFN.scala 223:28]
    node roundingMode_nearest_even = eq(io.fromPreMul.roundingMode, UInt<2>("h00")) @[MulAddRecFN.scala 226:37]
    node roundingMode_minMag = eq(io.fromPreMul.roundingMode, UInt<2>("h01")) @[MulAddRecFN.scala 227:59]
    node roundingMode_min = eq(io.fromPreMul.roundingMode, UInt<2>("h02")) @[MulAddRecFN.scala 228:59]
    node roundingMode_max = eq(io.fromPreMul.roundingMode, UInt<2>("h03")) @[MulAddRecFN.scala 229:59]
    node signZeroNotEqOpSigns = mux(roundingMode_min, UInt<1>("h01"), UInt<1>("h00")) @[MulAddRecFN.scala 231:35]
    node doSubMags = xor(io.fromPreMul.signProd, io.fromPreMul.opSignC) @[MulAddRecFN.scala 232:44]
    node T_70 = bits(io.mulAddResult, 48, 48) @[MulAddRecFN.scala 237:32]
    node T_72 = add(io.fromPreMul.highAlignedNegSigC, UInt<1>("h01")) @[MulAddRecFN.scala 238:50]
    node T_73 = tail(T_72, 1) @[MulAddRecFN.scala 238:50]
    node T_74 = mux(T_70, T_73, io.fromPreMul.highAlignedNegSigC) @[MulAddRecFN.scala 237:16]
    node T_75 = bits(io.mulAddResult, 47, 0) @[MulAddRecFN.scala 241:28]
    node T_76 = cat(T_74, T_75) @[Cat.scala 20:58]
    node sigSum = cat(T_76, io.fromPreMul.bit0AlignedNegSigC) @[Cat.scala 20:58]
    node T_78 = bits(sigSum, 50, 1) @[MulAddRecFN.scala 248:38]
    node T_79 = xor(UInt<50>("h00"), T_78) @[MulAddRecFN.scala 191:27]
    node T_80 = or(UInt<50>("h00"), T_78) @[MulAddRecFN.scala 191:37]
    node T_81 = shl(T_80, 1) @[MulAddRecFN.scala 191:41]
    node T_82 = xor(T_79, T_81) @[MulAddRecFN.scala 191:32]
    node T_84 = bits(T_82, 49, 0) @[primitives.scala 79:35]
    node T_85 = bits(T_84, 49, 32) @[CircuitMath.scala 26:17]
    node T_86 = bits(T_84, 31, 0) @[CircuitMath.scala 27:17]
    node T_88 = neq(T_85, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_89 = bits(T_85, 17, 16) @[CircuitMath.scala 26:17]
    node T_90 = bits(T_85, 15, 0) @[CircuitMath.scala 27:17]
    node T_92 = neq(T_89, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_93 = bits(T_89, 1, 1) @[CircuitMath.scala 21:8]
    node T_94 = bits(T_90, 15, 8) @[CircuitMath.scala 26:17]
    node T_95 = bits(T_90, 7, 0) @[CircuitMath.scala 27:17]
    node T_97 = neq(T_94, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_98 = bits(T_94, 7, 4) @[CircuitMath.scala 26:17]
    node T_99 = bits(T_94, 3, 0) @[CircuitMath.scala 27:17]
    node T_101 = neq(T_98, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_102 = bits(T_98, 3, 3) @[CircuitMath.scala 23:12]
    node T_104 = bits(T_98, 2, 2) @[CircuitMath.scala 23:12]
    node T_106 = bits(T_98, 1, 1) @[CircuitMath.scala 21:8]
    node T_107 = shl(T_106, 0) @[CircuitMath.scala 23:10]
    node T_108 = mux(T_104, UInt<2>("h02"), T_107) @[CircuitMath.scala 23:10]
    node T_109 = mux(T_102, UInt<2>("h03"), T_108) @[CircuitMath.scala 23:10]
    node T_110 = bits(T_99, 3, 3) @[CircuitMath.scala 23:12]
    node T_112 = bits(T_99, 2, 2) @[CircuitMath.scala 23:12]
    node T_114 = bits(T_99, 1, 1) @[CircuitMath.scala 21:8]
    node T_115 = shl(T_114, 0) @[CircuitMath.scala 23:10]
    node T_116 = mux(T_112, UInt<2>("h02"), T_115) @[CircuitMath.scala 23:10]
    node T_117 = mux(T_110, UInt<2>("h03"), T_116) @[CircuitMath.scala 23:10]
    node T_118 = mux(T_101, T_109, T_117) @[CircuitMath.scala 29:21]
    node T_119 = cat(T_101, T_118) @[Cat.scala 20:58]
    node T_120 = bits(T_95, 7, 4) @[CircuitMath.scala 26:17]
    node T_121 = bits(T_95, 3, 0) @[CircuitMath.scala 27:17]
    node T_123 = neq(T_120, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_124 = bits(T_120, 3, 3) @[CircuitMath.scala 23:12]
    node T_126 = bits(T_120, 2, 2) @[CircuitMath.scala 23:12]
    node T_128 = bits(T_120, 1, 1) @[CircuitMath.scala 21:8]
    node T_129 = shl(T_128, 0) @[CircuitMath.scala 23:10]
    node T_130 = mux(T_126, UInt<2>("h02"), T_129) @[CircuitMath.scala 23:10]
    node T_131 = mux(T_124, UInt<2>("h03"), T_130) @[CircuitMath.scala 23:10]
    node T_132 = bits(T_121, 3, 3) @[CircuitMath.scala 23:12]
    node T_134 = bits(T_121, 2, 2) @[CircuitMath.scala 23:12]
    node T_136 = bits(T_121, 1, 1) @[CircuitMath.scala 21:8]
    node T_137 = shl(T_136, 0) @[CircuitMath.scala 23:10]
    node T_138 = mux(T_134, UInt<2>("h02"), T_137) @[CircuitMath.scala 23:10]
    node T_139 = mux(T_132, UInt<2>("h03"), T_138) @[CircuitMath.scala 23:10]
    node T_140 = mux(T_123, T_131, T_139) @[CircuitMath.scala 29:21]
    node T_141 = cat(T_123, T_140) @[Cat.scala 20:58]
    node T_142 = mux(T_97, T_119, T_141) @[CircuitMath.scala 29:21]
    node T_143 = cat(T_97, T_142) @[Cat.scala 20:58]
    node T_144 = shl(T_93, 0) @[CircuitMath.scala 29:21]
    node T_145 = mux(T_92, T_144, T_143) @[CircuitMath.scala 29:21]
    node T_146 = cat(T_92, T_145) @[Cat.scala 20:58]
    node T_147 = bits(T_86, 31, 16) @[CircuitMath.scala 26:17]
    node T_148 = bits(T_86, 15, 0) @[CircuitMath.scala 27:17]
    node T_150 = neq(T_147, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_151 = bits(T_147, 15, 8) @[CircuitMath.scala 26:17]
    node T_152 = bits(T_147, 7, 0) @[CircuitMath.scala 27:17]
    node T_154 = neq(T_151, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_155 = bits(T_151, 7, 4) @[CircuitMath.scala 26:17]
    node T_156 = bits(T_151, 3, 0) @[CircuitMath.scala 27:17]
    node T_158 = neq(T_155, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_159 = bits(T_155, 3, 3) @[CircuitMath.scala 23:12]
    node T_161 = bits(T_155, 2, 2) @[CircuitMath.scala 23:12]
    node T_163 = bits(T_155, 1, 1) @[CircuitMath.scala 21:8]
    node T_164 = shl(T_163, 0) @[CircuitMath.scala 23:10]
    node T_165 = mux(T_161, UInt<2>("h02"), T_164) @[CircuitMath.scala 23:10]
    node T_166 = mux(T_159, UInt<2>("h03"), T_165) @[CircuitMath.scala 23:10]
    node T_167 = bits(T_156, 3, 3) @[CircuitMath.scala 23:12]
    node T_169 = bits(T_156, 2, 2) @[CircuitMath.scala 23:12]
    node T_171 = bits(T_156, 1, 1) @[CircuitMath.scala 21:8]
    node T_172 = shl(T_171, 0) @[CircuitMath.scala 23:10]
    node T_173 = mux(T_169, UInt<2>("h02"), T_172) @[CircuitMath.scala 23:10]
    node T_174 = mux(T_167, UInt<2>("h03"), T_173) @[CircuitMath.scala 23:10]
    node T_175 = mux(T_158, T_166, T_174) @[CircuitMath.scala 29:21]
    node T_176 = cat(T_158, T_175) @[Cat.scala 20:58]
    node T_177 = bits(T_152, 7, 4) @[CircuitMath.scala 26:17]
    node T_178 = bits(T_152, 3, 0) @[CircuitMath.scala 27:17]
    node T_180 = neq(T_177, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_181 = bits(T_177, 3, 3) @[CircuitMath.scala 23:12]
    node T_183 = bits(T_177, 2, 2) @[CircuitMath.scala 23:12]
    node T_185 = bits(T_177, 1, 1) @[CircuitMath.scala 21:8]
    node T_186 = shl(T_185, 0) @[CircuitMath.scala 23:10]
    node T_187 = mux(T_183, UInt<2>("h02"), T_186) @[CircuitMath.scala 23:10]
    node T_188 = mux(T_181, UInt<2>("h03"), T_187) @[CircuitMath.scala 23:10]
    node T_189 = bits(T_178, 3, 3) @[CircuitMath.scala 23:12]
    node T_191 = bits(T_178, 2, 2) @[CircuitMath.scala 23:12]
    node T_193 = bits(T_178, 1, 1) @[CircuitMath.scala 21:8]
    node T_194 = shl(T_193, 0) @[CircuitMath.scala 23:10]
    node T_195 = mux(T_191, UInt<2>("h02"), T_194) @[CircuitMath.scala 23:10]
    node T_196 = mux(T_189, UInt<2>("h03"), T_195) @[CircuitMath.scala 23:10]
    node T_197 = mux(T_180, T_188, T_196) @[CircuitMath.scala 29:21]
    node T_198 = cat(T_180, T_197) @[Cat.scala 20:58]
    node T_199 = mux(T_154, T_176, T_198) @[CircuitMath.scala 29:21]
    node T_200 = cat(T_154, T_199) @[Cat.scala 20:58]
    node T_201 = bits(T_148, 15, 8) @[CircuitMath.scala 26:17]
    node T_202 = bits(T_148, 7, 0) @[CircuitMath.scala 27:17]
    node T_204 = neq(T_201, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_205 = bits(T_201, 7, 4) @[CircuitMath.scala 26:17]
    node T_206 = bits(T_201, 3, 0) @[CircuitMath.scala 27:17]
    node T_208 = neq(T_205, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_209 = bits(T_205, 3, 3) @[CircuitMath.scala 23:12]
    node T_211 = bits(T_205, 2, 2) @[CircuitMath.scala 23:12]
    node T_213 = bits(T_205, 1, 1) @[CircuitMath.scala 21:8]
    node T_214 = shl(T_213, 0) @[CircuitMath.scala 23:10]
    node T_215 = mux(T_211, UInt<2>("h02"), T_214) @[CircuitMath.scala 23:10]
    node T_216 = mux(T_209, UInt<2>("h03"), T_215) @[CircuitMath.scala 23:10]
    node T_217 = bits(T_206, 3, 3) @[CircuitMath.scala 23:12]
    node T_219 = bits(T_206, 2, 2) @[CircuitMath.scala 23:12]
    node T_221 = bits(T_206, 1, 1) @[CircuitMath.scala 21:8]
    node T_222 = shl(T_221, 0) @[CircuitMath.scala 23:10]
    node T_223 = mux(T_219, UInt<2>("h02"), T_222) @[CircuitMath.scala 23:10]
    node T_224 = mux(T_217, UInt<2>("h03"), T_223) @[CircuitMath.scala 23:10]
    node T_225 = mux(T_208, T_216, T_224) @[CircuitMath.scala 29:21]
    node T_226 = cat(T_208, T_225) @[Cat.scala 20:58]
    node T_227 = bits(T_202, 7, 4) @[CircuitMath.scala 26:17]
    node T_228 = bits(T_202, 3, 0) @[CircuitMath.scala 27:17]
    node T_230 = neq(T_227, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_231 = bits(T_227, 3, 3) @[CircuitMath.scala 23:12]
    node T_233 = bits(T_227, 2, 2) @[CircuitMath.scala 23:12]
    node T_235 = bits(T_227, 1, 1) @[CircuitMath.scala 21:8]
    node T_236 = shl(T_235, 0) @[CircuitMath.scala 23:10]
    node T_237 = mux(T_233, UInt<2>("h02"), T_236) @[CircuitMath.scala 23:10]
    node T_238 = mux(T_231, UInt<2>("h03"), T_237) @[CircuitMath.scala 23:10]
    node T_239 = bits(T_228, 3, 3) @[CircuitMath.scala 23:12]
    node T_241 = bits(T_228, 2, 2) @[CircuitMath.scala 23:12]
    node T_243 = bits(T_228, 1, 1) @[CircuitMath.scala 21:8]
    node T_244 = shl(T_243, 0) @[CircuitMath.scala 23:10]
    node T_245 = mux(T_241, UInt<2>("h02"), T_244) @[CircuitMath.scala 23:10]
    node T_246 = mux(T_239, UInt<2>("h03"), T_245) @[CircuitMath.scala 23:10]
    node T_247 = mux(T_230, T_238, T_246) @[CircuitMath.scala 29:21]
    node T_248 = cat(T_230, T_247) @[Cat.scala 20:58]
    node T_249 = mux(T_204, T_226, T_248) @[CircuitMath.scala 29:21]
    node T_250 = cat(T_204, T_249) @[Cat.scala 20:58]
    node T_251 = mux(T_150, T_200, T_250) @[CircuitMath.scala 29:21]
    node T_252 = cat(T_150, T_251) @[Cat.scala 20:58]
    node T_253 = mux(T_88, T_146, T_252) @[CircuitMath.scala 29:21]
    node T_254 = cat(T_88, T_253) @[Cat.scala 20:58]
    node T_255 = sub(UInt<7>("h049"), T_254) @[primitives.scala 79:25]
    node estNormPos_dist = tail(T_255, 1) @[primitives.scala 79:25]
    node T_256 = bits(sigSum, 33, 18) @[MulAddRecFN.scala 252:19]
    node T_258 = neq(T_256, UInt<1>("h00")) @[MulAddRecFN.scala 254:15]
    node T_259 = bits(sigSum, 17, 0) @[MulAddRecFN.scala 255:19]
    node T_261 = neq(T_259, UInt<1>("h00")) @[MulAddRecFN.scala 255:57]
    node firstReduceSigSum = cat(T_258, T_261) @[Cat.scala 20:58]
    node complSigSum = not(sigSum) @[MulAddRecFN.scala 257:23]
    node T_262 = bits(complSigSum, 33, 18) @[MulAddRecFN.scala 259:24]
    node T_264 = neq(T_262, UInt<1>("h00")) @[MulAddRecFN.scala 261:15]
    node T_265 = bits(complSigSum, 17, 0) @[MulAddRecFN.scala 262:24]
    node T_267 = neq(T_265, UInt<1>("h00")) @[MulAddRecFN.scala 262:62]
    node firstReduceComplSigSum = cat(T_264, T_267) @[Cat.scala 20:58]
    node T_268 = or(io.fromPreMul.CAlignDist_0, doSubMags) @[MulAddRecFN.scala 266:40]
    node T_270 = sub(io.fromPreMul.CAlignDist, UInt<1>("h01")) @[MulAddRecFN.scala 268:39]
    node T_271 = tail(T_270, 1) @[MulAddRecFN.scala 268:39]
    node T_272 = bits(T_271, 4, 0) @[MulAddRecFN.scala 268:49]
    node CDom_estNormDist = mux(T_268, io.fromPreMul.CAlignDist, T_272) @[MulAddRecFN.scala 266:12]
    node T_274 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 271:13]
    node T_275 = bits(CDom_estNormDist, 4, 4) @[MulAddRecFN.scala 271:46]
    node T_277 = eq(T_275, UInt<1>("h00")) @[MulAddRecFN.scala 271:28]
    node T_278 = and(T_274, T_277) @[MulAddRecFN.scala 271:25]
    node T_279 = bits(sigSum, 74, 34) @[MulAddRecFN.scala 272:23]
    node T_281 = neq(firstReduceSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 273:35]
    node T_282 = cat(T_279, T_281) @[Cat.scala 20:58]
    node T_284 = mux(T_278, T_282, UInt<1>("h00")) @[MulAddRecFN.scala 271:12]
    node T_286 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 277:13]
    node T_287 = bits(CDom_estNormDist, 4, 4) @[MulAddRecFN.scala 277:44]
    node T_288 = and(T_286, T_287) @[MulAddRecFN.scala 277:25]
    node T_289 = bits(sigSum, 58, 18) @[MulAddRecFN.scala 278:23]
    node T_290 = bits(firstReduceSigSum, 0, 0) @[MulAddRecFN.scala 282:34]
    node T_291 = cat(T_289, T_290) @[Cat.scala 20:58]
    node T_293 = mux(T_288, T_291, UInt<1>("h00")) @[MulAddRecFN.scala 277:12]
    node T_294 = or(T_284, T_293) @[MulAddRecFN.scala 276:11]
    node T_295 = bits(CDom_estNormDist, 4, 4) @[MulAddRecFN.scala 286:44]
    node T_297 = eq(T_295, UInt<1>("h00")) @[MulAddRecFN.scala 286:26]
    node T_298 = and(doSubMags, T_297) @[MulAddRecFN.scala 286:23]
    node T_299 = bits(complSigSum, 74, 34) @[MulAddRecFN.scala 287:28]
    node T_301 = neq(firstReduceComplSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 288:40]
    node T_302 = cat(T_299, T_301) @[Cat.scala 20:58]
    node T_304 = mux(T_298, T_302, UInt<1>("h00")) @[MulAddRecFN.scala 286:12]
    node T_305 = or(T_294, T_304) @[MulAddRecFN.scala 285:11]
    node T_306 = bits(CDom_estNormDist, 4, 4) @[MulAddRecFN.scala 292:42]
    node T_307 = and(doSubMags, T_306) @[MulAddRecFN.scala 292:23]
    node T_308 = bits(complSigSum, 58, 18) @[MulAddRecFN.scala 293:28]
    node T_309 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 297:39]
    node T_310 = cat(T_308, T_309) @[Cat.scala 20:58]
    node T_312 = mux(T_307, T_310, UInt<1>("h00")) @[MulAddRecFN.scala 292:12]
    node CDom_firstNormAbsSigSum = or(T_305, T_312) @[MulAddRecFN.scala 291:11]
    node T_313 = bits(sigSum, 50, 18) @[MulAddRecFN.scala 308:23]
    node T_314 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 310:45]
    node T_316 = eq(T_314, UInt<1>("h00")) @[MulAddRecFN.scala 310:21]
    node T_317 = bits(firstReduceSigSum, 0, 0) @[MulAddRecFN.scala 311:38]
    node T_318 = mux(doSubMags, T_316, T_317) @[MulAddRecFN.scala 309:20]
    node T_319 = cat(T_313, T_318) @[Cat.scala 20:58]
    node T_320 = bits(sigSum, 42, 1) @[MulAddRecFN.scala 314:24]
    node T_321 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 338:28]
    node T_322 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 339:33]
    node T_323 = bits(sigSum, 26, 1) @[MulAddRecFN.scala 340:28]
    node T_324 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15]
    node T_327 = mux(T_324, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 33:12]
    node T_328 = cat(T_323, T_327) @[Cat.scala 20:58]
    node T_329 = mux(T_322, T_328, T_320) @[MulAddRecFN.scala 339:17]
    node T_330 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 345:33]
    node T_331 = bits(sigSum, 10, 1) @[MulAddRecFN.scala 347:28]
    node T_332 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15]
    node T_335 = mux(T_332, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node T_336 = cat(T_331, T_335) @[Cat.scala 20:58]
    node T_337 = mux(T_330, T_319, T_336) @[MulAddRecFN.scala 345:17]
    node notCDom_pos_firstNormAbsSigSum = mux(T_321, T_329, T_337) @[MulAddRecFN.scala 338:12]
    node T_338 = bits(complSigSum, 49, 18) @[MulAddRecFN.scala 360:28]
    node T_339 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 361:39]
    node T_340 = cat(T_338, T_339) @[Cat.scala 20:58]
    node T_341 = bits(complSigSum, 42, 1) @[MulAddRecFN.scala 363:29]
    node T_342 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 379:28]
    node T_343 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 380:33]
    node T_344 = bits(complSigSum, 27, 1) @[MulAddRecFN.scala 381:29]
    node T_345 = shl(T_344, 16) @[MulAddRecFN.scala 381:64]
    node T_346 = mux(T_343, T_345, T_341) @[MulAddRecFN.scala 380:17]
    node T_347 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 385:33]
    node T_348 = bits(complSigSum, 11, 1) @[MulAddRecFN.scala 387:29]
    node T_349 = shl(T_348, 32) @[MulAddRecFN.scala 387:64]
    node T_350 = mux(T_347, T_340, T_349) @[MulAddRecFN.scala 385:17]
    node notCDom_neg_cFirstNormAbsSigSum = mux(T_342, T_346, T_350) @[MulAddRecFN.scala 379:12]
    node notCDom_signSigSum = bits(sigSum, 51, 51) @[MulAddRecFN.scala 392:36]
    node T_352 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 395:26]
    node T_353 = and(doSubMags, T_352) @[MulAddRecFN.scala 395:23]
    node doNegSignSum = mux(io.fromPreMul.isCDominant, T_353, notCDom_signSigSum) @[MulAddRecFN.scala 394:12]
    node T_354 = mux(notCDom_signSigSum, estNormPos_dist, estNormPos_dist) @[MulAddRecFN.scala 401:16]
    node estNormDist = mux(io.fromPreMul.isCDominant, CDom_estNormDist, T_354) @[MulAddRecFN.scala 399:12]
    node T_355 = mux(io.fromPreMul.isCDominant, CDom_firstNormAbsSigSum, notCDom_neg_cFirstNormAbsSigSum) @[MulAddRecFN.scala 408:16]
    node T_356 = mux(io.fromPreMul.isCDominant, CDom_firstNormAbsSigSum, notCDom_pos_firstNormAbsSigSum) @[MulAddRecFN.scala 412:16]
    node cFirstNormAbsSigSum = mux(notCDom_signSigSum, T_355, T_356) @[MulAddRecFN.scala 407:12]
    node T_358 = eq(io.fromPreMul.isCDominant, UInt<1>("h00")) @[MulAddRecFN.scala 418:9]
    node T_360 = eq(notCDom_signSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 418:40]
    node T_361 = and(T_358, T_360) @[MulAddRecFN.scala 418:37]
    node doIncrSig = and(T_361, doSubMags) @[MulAddRecFN.scala 418:61]
    node estNormDist_5 = bits(estNormDist, 3, 0) @[MulAddRecFN.scala 419:36]
    node normTo2ShiftDist = not(estNormDist_5) @[MulAddRecFN.scala 420:28]
    node T_363 = dshr(asSInt(UInt<17>("h010000")), normTo2ShiftDist) @[primitives.scala 68:52]
    node T_364 = bits(T_363, 15, 1) @[primitives.scala 69:26]
    node T_365 = bits(T_364, 7, 0) @[Bitwise.scala 65:18]
    node T_368 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 58:47]
    node T_369 = xor(UInt<8>("h0ff"), T_368) @[Bitwise.scala 58:21]
    node T_370 = shr(T_365, 4) @[Bitwise.scala 59:21]
    node T_371 = and(T_370, T_369) @[Bitwise.scala 59:31]
    node T_372 = bits(T_365, 3, 0) @[Bitwise.scala 59:46]
    node T_373 = shl(T_372, 4) @[Bitwise.scala 59:65]
    node T_374 = not(T_369) @[Bitwise.scala 59:77]
    node T_375 = and(T_373, T_374) @[Bitwise.scala 59:75]
    node T_376 = or(T_371, T_375) @[Bitwise.scala 59:39]
    node T_377 = bits(T_369, 5, 0) @[Bitwise.scala 58:28]
    node T_378 = shl(T_377, 2) @[Bitwise.scala 58:47]
    node T_379 = xor(T_369, T_378) @[Bitwise.scala 58:21]
    node T_380 = shr(T_376, 2) @[Bitwise.scala 59:21]
    node T_381 = and(T_380, T_379) @[Bitwise.scala 59:31]
    node T_382 = bits(T_376, 5, 0) @[Bitwise.scala 59:46]
    node T_383 = shl(T_382, 2) @[Bitwise.scala 59:65]
    node T_384 = not(T_379) @[Bitwise.scala 59:77]
    node T_385 = and(T_383, T_384) @[Bitwise.scala 59:75]
    node T_386 = or(T_381, T_385) @[Bitwise.scala 59:39]
    node T_387 = bits(T_379, 6, 0) @[Bitwise.scala 58:28]
    node T_388 = shl(T_387, 1) @[Bitwise.scala 58:47]
    node T_389 = xor(T_379, T_388) @[Bitwise.scala 58:21]
    node T_390 = shr(T_386, 1) @[Bitwise.scala 59:21]
    node T_391 = and(T_390, T_389) @[Bitwise.scala 59:31]
    node T_392 = bits(T_386, 6, 0) @[Bitwise.scala 59:46]
    node T_393 = shl(T_392, 1) @[Bitwise.scala 59:65]
    node T_394 = not(T_389) @[Bitwise.scala 59:77]
    node T_395 = and(T_393, T_394) @[Bitwise.scala 59:75]
    node T_396 = or(T_391, T_395) @[Bitwise.scala 59:39]
    node T_397 = bits(T_364, 14, 8) @[Bitwise.scala 65:44]
    node T_398 = bits(T_397, 3, 0) @[Bitwise.scala 65:18]
    node T_399 = bits(T_398, 1, 0) @[Bitwise.scala 65:18]
    node T_400 = bits(T_399, 0, 0) @[Bitwise.scala 65:18]
    node T_401 = bits(T_399, 1, 1) @[Bitwise.scala 65:44]
    node T_402 = cat(T_400, T_401) @[Cat.scala 20:58]
    node T_403 = bits(T_398, 3, 2) @[Bitwise.scala 65:44]
    node T_404 = bits(T_403, 0, 0) @[Bitwise.scala 65:18]
    node T_405 = bits(T_403, 1, 1) @[Bitwise.scala 65:44]
    node T_406 = cat(T_404, T_405) @[Cat.scala 20:58]
    node T_407 = cat(T_402, T_406) @[Cat.scala 20:58]
    node T_408 = bits(T_397, 6, 4) @[Bitwise.scala 65:44]
    node T_409 = bits(T_408, 1, 0) @[Bitwise.scala 65:18]
    node T_410 = bits(T_409, 0, 0) @[Bitwise.scala 65:18]
    node T_411 = bits(T_409, 1, 1) @[Bitwise.scala 65:44]
    node T_412 = cat(T_410, T_411) @[Cat.scala 20:58]
    node T_413 = bits(T_408, 2, 2) @[Bitwise.scala 65:44]
    node T_414 = cat(T_412, T_413) @[Cat.scala 20:58]
    node T_415 = cat(T_407, T_414) @[Cat.scala 20:58]
    node T_416 = cat(T_396, T_415) @[Cat.scala 20:58]
    node absSigSumExtraMask = cat(T_416, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_418 = bits(cFirstNormAbsSigSum, 42, 1) @[MulAddRecFN.scala 424:32]
    node T_419 = dshr(T_418, normTo2ShiftDist) @[MulAddRecFN.scala 424:65]
    node T_420 = bits(cFirstNormAbsSigSum, 15, 0) @[MulAddRecFN.scala 427:39]
    node T_421 = not(T_420) @[MulAddRecFN.scala 427:19]
    node T_422 = and(T_421, absSigSumExtraMask) @[MulAddRecFN.scala 427:62]
    node T_424 = eq(T_422, UInt<1>("h00")) @[MulAddRecFN.scala 428:43]
    node T_425 = bits(cFirstNormAbsSigSum, 15, 0) @[MulAddRecFN.scala 430:38]
    node T_426 = and(T_425, absSigSumExtraMask) @[MulAddRecFN.scala 430:61]
    node T_428 = neq(T_426, UInt<1>("h00")) @[MulAddRecFN.scala 431:43]
    node T_429 = mux(doIncrSig, T_424, T_428) @[MulAddRecFN.scala 426:16]
    node T_430 = cat(T_419, T_429) @[Cat.scala 20:58]
    node sigX3 = bits(T_430, 27, 0) @[MulAddRecFN.scala 434:10]
    node T_431 = bits(sigX3, 27, 26) @[MulAddRecFN.scala 436:29]
    node sigX3Shift1 = eq(T_431, UInt<1>("h00")) @[MulAddRecFN.scala 436:58]
    node T_433 = sub(io.fromPreMul.sExpSum, estNormDist) @[MulAddRecFN.scala 437:40]
    node sExpX3 = tail(T_433, 1) @[MulAddRecFN.scala 437:40]
    node T_434 = bits(sigX3, 27, 25) @[MulAddRecFN.scala 439:25]
    node isZeroY = eq(T_434, UInt<1>("h00")) @[MulAddRecFN.scala 439:54]
    node T_436 = xor(io.fromPreMul.signProd, doNegSignSum) @[MulAddRecFN.scala 444:36]
    node signY = mux(isZeroY, signZeroNotEqOpSigns, T_436) @[MulAddRecFN.scala 442:12]
    node sExpX3_13 = bits(sExpX3, 9, 0) @[MulAddRecFN.scala 446:27]
    node T_437 = bits(sExpX3, 10, 10) @[MulAddRecFN.scala 448:34]
    node T_438 = bits(T_437, 0, 0) @[Bitwise.scala 33:15]
    node T_441 = mux(T_438, UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 33:12]
    node T_442 = not(sExpX3_13) @[primitives.scala 50:21]
    node T_443 = bits(T_442, 9, 9) @[primitives.scala 56:25]
    node T_444 = bits(T_442, 8, 0) @[primitives.scala 57:26]
    node T_445 = bits(T_444, 8, 8) @[primitives.scala 56:25]
    node T_446 = bits(T_444, 7, 0) @[primitives.scala 57:26]
    node T_447 = bits(T_446, 7, 7) @[primitives.scala 56:25]
    node T_448 = bits(T_446, 6, 0) @[primitives.scala 57:26]
    node T_449 = bits(T_448, 6, 6) @[primitives.scala 56:25]
    node T_450 = bits(T_448, 5, 0) @[primitives.scala 57:26]
    node T_453 = dshr(asSInt(UInt<65>("h010000000000000000")), T_450) @[primitives.scala 68:52]
    node T_454 = bits(T_453, 63, 43) @[primitives.scala 69:26]
    node T_455 = bits(T_454, 15, 0) @[Bitwise.scala 65:18]
    node T_458 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47]
    node T_459 = xor(UInt<16>("h0ffff"), T_458) @[Bitwise.scala 58:21]
    node T_460 = shr(T_455, 8) @[Bitwise.scala 59:21]
    node T_461 = and(T_460, T_459) @[Bitwise.scala 59:31]
    node T_462 = bits(T_455, 7, 0) @[Bitwise.scala 59:46]
    node T_463 = shl(T_462, 8) @[Bitwise.scala 59:65]
    node T_464 = not(T_459) @[Bitwise.scala 59:77]
    node T_465 = and(T_463, T_464) @[Bitwise.scala 59:75]
    node T_466 = or(T_461, T_465) @[Bitwise.scala 59:39]
    node T_467 = bits(T_459, 11, 0) @[Bitwise.scala 58:28]
    node T_468 = shl(T_467, 4) @[Bitwise.scala 58:47]
    node T_469 = xor(T_459, T_468) @[Bitwise.scala 58:21]
    node T_470 = shr(T_466, 4) @[Bitwise.scala 59:21]
    node T_471 = and(T_470, T_469) @[Bitwise.scala 59:31]
    node T_472 = bits(T_466, 11, 0) @[Bitwise.scala 59:46]
    node T_473 = shl(T_472, 4) @[Bitwise.scala 59:65]
    node T_474 = not(T_469) @[Bitwise.scala 59:77]
    node T_475 = and(T_473, T_474) @[Bitwise.scala 59:75]
    node T_476 = or(T_471, T_475) @[Bitwise.scala 59:39]
    node T_477 = bits(T_469, 13, 0) @[Bitwise.scala 58:28]
    node T_478 = shl(T_477, 2) @[Bitwise.scala 58:47]
    node T_479 = xor(T_469, T_478) @[Bitwise.scala 58:21]
    node T_480 = shr(T_476, 2) @[Bitwise.scala 59:21]
    node T_481 = and(T_480, T_479) @[Bitwise.scala 59:31]
    node T_482 = bits(T_476, 13, 0) @[Bitwise.scala 59:46]
    node T_483 = shl(T_482, 2) @[Bitwise.scala 59:65]
    node T_484 = not(T_479) @[Bitwise.scala 59:77]
    node T_485 = and(T_483, T_484) @[Bitwise.scala 59:75]
    node T_486 = or(T_481, T_485) @[Bitwise.scala 59:39]
    node T_487 = bits(T_479, 14, 0) @[Bitwise.scala 58:28]
    node T_488 = shl(T_487, 1) @[Bitwise.scala 58:47]
    node T_489 = xor(T_479, T_488) @[Bitwise.scala 58:21]
    node T_490 = shr(T_486, 1) @[Bitwise.scala 59:21]
    node T_491 = and(T_490, T_489) @[Bitwise.scala 59:31]
    node T_492 = bits(T_486, 14, 0) @[Bitwise.scala 59:46]
    node T_493 = shl(T_492, 1) @[Bitwise.scala 59:65]
    node T_494 = not(T_489) @[Bitwise.scala 59:77]
    node T_495 = and(T_493, T_494) @[Bitwise.scala 59:75]
    node T_496 = or(T_491, T_495) @[Bitwise.scala 59:39]
    node T_497 = bits(T_454, 20, 16) @[Bitwise.scala 65:44]
    node T_498 = bits(T_497, 3, 0) @[Bitwise.scala 65:18]
    node T_499 = bits(T_498, 1, 0) @[Bitwise.scala 65:18]
    node T_500 = bits(T_499, 0, 0) @[Bitwise.scala 65:18]
    node T_501 = bits(T_499, 1, 1) @[Bitwise.scala 65:44]
    node T_502 = cat(T_500, T_501) @[Cat.scala 20:58]
    node T_503 = bits(T_498, 3, 2) @[Bitwise.scala 65:44]
    node T_504 = bits(T_503, 0, 0) @[Bitwise.scala 65:18]
    node T_505 = bits(T_503, 1, 1) @[Bitwise.scala 65:44]
    node T_506 = cat(T_504, T_505) @[Cat.scala 20:58]
    node T_507 = cat(T_502, T_506) @[Cat.scala 20:58]
    node T_508 = bits(T_497, 4, 4) @[Bitwise.scala 65:44]
    node T_509 = cat(T_507, T_508) @[Cat.scala 20:58]
    node T_510 = cat(T_496, T_509) @[Cat.scala 20:58]
    node T_511 = not(T_510) @[primitives.scala 65:36]
    node T_512 = mux(T_449, UInt<1>("h00"), T_511) @[primitives.scala 65:21]
    node T_513 = not(T_512) @[primitives.scala 65:17]
    node T_515 = cat(T_513, UInt<4>("h0f")) @[Cat.scala 20:58]
    node T_516 = bits(T_448, 6, 6) @[primitives.scala 56:25]
    node T_517 = bits(T_448, 5, 0) @[primitives.scala 57:26]
    node T_519 = dshr(asSInt(UInt<65>("h010000000000000000")), T_517) @[primitives.scala 68:52]
    node T_520 = bits(T_519, 3, 0) @[primitives.scala 69:26]
    node T_521 = bits(T_520, 1, 0) @[Bitwise.scala 65:18]
    node T_522 = bits(T_521, 0, 0) @[Bitwise.scala 65:18]
    node T_523 = bits(T_521, 1, 1) @[Bitwise.scala 65:44]
    node T_524 = cat(T_522, T_523) @[Cat.scala 20:58]
    node T_525 = bits(T_520, 3, 2) @[Bitwise.scala 65:44]
    node T_526 = bits(T_525, 0, 0) @[Bitwise.scala 65:18]
    node T_527 = bits(T_525, 1, 1) @[Bitwise.scala 65:44]
    node T_528 = cat(T_526, T_527) @[Cat.scala 20:58]
    node T_529 = cat(T_524, T_528) @[Cat.scala 20:58]
    node T_531 = mux(T_516, T_529, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_532 = mux(T_447, T_515, T_531) @[primitives.scala 61:20]
    node T_534 = mux(T_445, T_532, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_536 = mux(T_443, T_534, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_537 = bits(sigX3, 26, 26) @[MulAddRecFN.scala 450:26]
    node T_538 = or(T_536, T_537) @[MulAddRecFN.scala 449:75]
    node T_540 = cat(T_538, UInt<2>("h03")) @[Cat.scala 20:58]
    node roundMask = or(T_441, T_540) @[MulAddRecFN.scala 448:50]
    node T_541 = shr(roundMask, 1) @[MulAddRecFN.scala 454:35]
    node T_542 = not(T_541) @[MulAddRecFN.scala 454:24]
    node roundPosMask = and(T_542, roundMask) @[MulAddRecFN.scala 454:40]
    node T_543 = and(sigX3, roundPosMask) @[MulAddRecFN.scala 455:30]
    node roundPosBit = neq(T_543, UInt<1>("h00")) @[MulAddRecFN.scala 455:46]
    node T_545 = shr(roundMask, 1) @[MulAddRecFN.scala 456:45]
    node T_546 = and(sigX3, T_545) @[MulAddRecFN.scala 456:34]
    node anyRoundExtra = neq(T_546, UInt<1>("h00")) @[MulAddRecFN.scala 456:50]
    node T_548 = not(sigX3) @[MulAddRecFN.scala 457:27]
    node T_549 = shr(roundMask, 1) @[MulAddRecFN.scala 457:45]
    node T_550 = and(T_548, T_549) @[MulAddRecFN.scala 457:34]
    node allRoundExtra = eq(T_550, UInt<1>("h00")) @[MulAddRecFN.scala 457:50]
    node anyRound = or(roundPosBit, anyRoundExtra) @[MulAddRecFN.scala 458:32]
    node allRound = and(roundPosBit, allRoundExtra) @[MulAddRecFN.scala 459:32]
    node roundDirectUp = mux(signY, roundingMode_min, roundingMode_max) @[MulAddRecFN.scala 460:28]
    node T_553 = eq(doIncrSig, UInt<1>("h00")) @[MulAddRecFN.scala 462:10]
    node T_554 = and(T_553, roundingMode_nearest_even) @[MulAddRecFN.scala 462:22]
    node T_555 = and(T_554, roundPosBit) @[MulAddRecFN.scala 462:51]
    node T_556 = and(T_555, anyRoundExtra) @[MulAddRecFN.scala 463:60]
    node T_558 = eq(doIncrSig, UInt<1>("h00")) @[MulAddRecFN.scala 464:10]
    node T_559 = and(T_558, roundDirectUp) @[MulAddRecFN.scala 464:22]
    node T_560 = and(T_559, anyRound) @[MulAddRecFN.scala 464:49]
    node T_561 = or(T_556, T_560) @[MulAddRecFN.scala 463:78]
    node T_562 = and(doIncrSig, allRound) @[MulAddRecFN.scala 465:49]
    node T_563 = or(T_561, T_562) @[MulAddRecFN.scala 464:65]
    node T_564 = and(doIncrSig, roundingMode_nearest_even) @[MulAddRecFN.scala 466:20]
    node T_565 = and(T_564, roundPosBit) @[MulAddRecFN.scala 466:49]
    node T_566 = or(T_563, T_565) @[MulAddRecFN.scala 465:65]
    node T_567 = and(doIncrSig, roundDirectUp) @[MulAddRecFN.scala 467:20]
    node T_569 = and(T_567, UInt<1>("h01")) @[MulAddRecFN.scala 467:49]
    node roundUp = or(T_566, T_569) @[MulAddRecFN.scala 466:65]
    node T_571 = eq(roundPosBit, UInt<1>("h00")) @[MulAddRecFN.scala 470:42]
    node T_572 = and(roundingMode_nearest_even, T_571) @[MulAddRecFN.scala 470:39]
    node T_573 = and(T_572, allRoundExtra) @[MulAddRecFN.scala 470:56]
    node T_574 = and(roundingMode_nearest_even, roundPosBit) @[MulAddRecFN.scala 471:39]
    node T_576 = eq(anyRoundExtra, UInt<1>("h00")) @[MulAddRecFN.scala 471:59]
    node T_577 = and(T_574, T_576) @[MulAddRecFN.scala 471:56]
    node roundEven = mux(doIncrSig, T_573, T_577) @[MulAddRecFN.scala 469:12]
    node T_579 = eq(allRound, UInt<1>("h00")) @[MulAddRecFN.scala 473:39]
    node roundInexact = mux(doIncrSig, T_579, anyRound) @[MulAddRecFN.scala 473:27]
    node T_580 = or(sigX3, roundMask) @[MulAddRecFN.scala 475:18]
    node T_581 = shr(T_580, 2) @[MulAddRecFN.scala 475:30]
    node T_583 = add(T_581, UInt<1>("h01")) @[MulAddRecFN.scala 475:35]
    node T_584 = tail(T_583, 1) @[MulAddRecFN.scala 475:35]
    node roundUp_sigY3 = bits(T_584, 25, 0) @[MulAddRecFN.scala 475:45]
    node T_586 = eq(roundUp, UInt<1>("h00")) @[MulAddRecFN.scala 477:13]
    node T_588 = eq(roundEven, UInt<1>("h00")) @[MulAddRecFN.scala 477:26]
    node T_589 = and(T_586, T_588) @[MulAddRecFN.scala 477:23]
    node T_590 = not(roundMask) @[MulAddRecFN.scala 477:48]
    node T_591 = and(sigX3, T_590) @[MulAddRecFN.scala 477:46]
    node T_592 = shr(T_591, 2) @[MulAddRecFN.scala 477:59]
    node T_594 = mux(T_589, T_592, UInt<1>("h00")) @[MulAddRecFN.scala 477:12]
    node T_596 = mux(roundUp, roundUp_sigY3, UInt<1>("h00")) @[MulAddRecFN.scala 478:12]
    node T_597 = or(T_594, T_596) @[MulAddRecFN.scala 477:79]
    node T_598 = shr(roundMask, 1) @[MulAddRecFN.scala 479:64]
    node T_599 = not(T_598) @[MulAddRecFN.scala 479:53]
    node T_600 = and(roundUp_sigY3, T_599) @[MulAddRecFN.scala 479:51]
    node T_602 = mux(roundEven, T_600, UInt<1>("h00")) @[MulAddRecFN.scala 479:12]
    node sigY3 = or(T_597, T_602) @[MulAddRecFN.scala 478:79]
    node T_603 = bits(sigY3, 25, 25) @[MulAddRecFN.scala 482:18]
    node T_605 = add(sExpX3, UInt<1>("h01")) @[MulAddRecFN.scala 482:41]
    node T_606 = tail(T_605, 1) @[MulAddRecFN.scala 482:41]
    node T_608 = mux(T_603, T_606, UInt<1>("h00")) @[MulAddRecFN.scala 482:12]
    node T_609 = bits(sigY3, 24, 24) @[MulAddRecFN.scala 483:18]
    node T_611 = mux(T_609, sExpX3, UInt<1>("h00")) @[MulAddRecFN.scala 483:12]
    node T_612 = or(T_608, T_611) @[MulAddRecFN.scala 482:61]
    node T_613 = bits(sigY3, 25, 24) @[MulAddRecFN.scala 484:19]
    node T_615 = eq(T_613, UInt<1>("h00")) @[MulAddRecFN.scala 484:44]
    node T_617 = sub(sExpX3, UInt<1>("h01")) @[MulAddRecFN.scala 485:20]
    node T_618 = tail(T_617, 1) @[MulAddRecFN.scala 485:20]
    node T_620 = mux(T_615, T_618, UInt<1>("h00")) @[MulAddRecFN.scala 484:12]
    node sExpY = or(T_612, T_620) @[MulAddRecFN.scala 483:61]
    node expY = bits(sExpY, 8, 0) @[MulAddRecFN.scala 488:21]
    node T_621 = bits(sigY3, 22, 0) @[MulAddRecFN.scala 490:31]
    node T_622 = bits(sigY3, 23, 1) @[MulAddRecFN.scala 490:55]
    node fractY = mux(sigX3Shift1, T_621, T_622) @[MulAddRecFN.scala 490:12]
    node T_623 = bits(sExpY, 9, 7) @[MulAddRecFN.scala 492:27]
    node overflowY = eq(T_623, UInt<2>("h03")) @[MulAddRecFN.scala 492:56]
    node T_626 = eq(isZeroY, UInt<1>("h00")) @[MulAddRecFN.scala 495:9]
    node T_627 = bits(sExpY, 9, 9) @[MulAddRecFN.scala 496:19]
    node T_628 = bits(sExpY, 8, 0) @[MulAddRecFN.scala 496:43]
    node T_630 = lt(T_628, UInt<7>("h06b")) @[MulAddRecFN.scala 496:57]
    node T_631 = or(T_627, T_630) @[MulAddRecFN.scala 496:34]
    node totalUnderflowY = and(T_626, T_631) @[MulAddRecFN.scala 495:19]
    node T_632 = bits(sExpX3, 10, 10) @[MulAddRecFN.scala 499:20]
    node T_635 = mux(sigX3Shift1, UInt<8>("h082"), UInt<8>("h081")) @[MulAddRecFN.scala 501:26]
    node T_636 = leq(sExpX3_13, T_635) @[MulAddRecFN.scala 500:29]
    node T_637 = or(T_632, T_636) @[MulAddRecFN.scala 499:35]
    node underflowY = and(roundInexact, T_637) @[MulAddRecFN.scala 498:22]
    node T_638 = and(roundingMode_min, signY) @[MulAddRecFN.scala 506:27]
    node T_640 = eq(signY, UInt<1>("h00")) @[MulAddRecFN.scala 506:61]
    node T_641 = and(roundingMode_max, T_640) @[MulAddRecFN.scala 506:58]
    node roundMagUp = or(T_638, T_641) @[MulAddRecFN.scala 506:37]
    node overflowY_roundMagUp = or(roundingMode_nearest_even, roundMagUp) @[MulAddRecFN.scala 507:58]
    node mulSpecial = or(isSpecialA, isSpecialB) @[MulAddRecFN.scala 511:33]
    node addSpecial = or(mulSpecial, isSpecialC) @[MulAddRecFN.scala 512:33]
    node notSpecial_addZeros = and(io.fromPreMul.isZeroProd, isZeroC) @[MulAddRecFN.scala 513:56]
    node T_643 = eq(addSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 514:22]
    node T_645 = eq(notSpecial_addZeros, UInt<1>("h00")) @[MulAddRecFN.scala 514:38]
    node commonCase = and(T_643, T_645) @[MulAddRecFN.scala 514:35]
    node T_646 = and(isInfA, isZeroB) @[MulAddRecFN.scala 517:17]
    node T_647 = and(isZeroA, isInfB) @[MulAddRecFN.scala 517:41]
    node T_648 = or(T_646, T_647) @[MulAddRecFN.scala 517:29]
    node T_650 = eq(isNaNA, UInt<1>("h00")) @[MulAddRecFN.scala 518:14]
    node T_652 = eq(isNaNB, UInt<1>("h00")) @[MulAddRecFN.scala 518:26]
    node T_653 = and(T_650, T_652) @[MulAddRecFN.scala 518:23]
    node T_654 = or(isInfA, isInfB) @[MulAddRecFN.scala 518:46]
    node T_655 = and(T_653, T_654) @[MulAddRecFN.scala 518:35]
    node T_656 = and(T_655, isInfC) @[MulAddRecFN.scala 518:57]
    node T_657 = and(T_656, doSubMags) @[MulAddRecFN.scala 518:67]
    node notSigNaN_invalid = or(T_648, T_657) @[MulAddRecFN.scala 517:52]
    node T_658 = or(isSigNaNA, isSigNaNB) @[MulAddRecFN.scala 519:29]
    node T_659 = or(T_658, isSigNaNC) @[MulAddRecFN.scala 519:42]
    node invalid = or(T_659, notSigNaN_invalid) @[MulAddRecFN.scala 519:55]
    node overflow = and(commonCase, overflowY) @[MulAddRecFN.scala 520:32]
    node underflow = and(commonCase, underflowY) @[MulAddRecFN.scala 521:32]
    node T_660 = and(commonCase, roundInexact) @[MulAddRecFN.scala 522:43]
    node inexact = or(overflow, T_660) @[MulAddRecFN.scala 522:28]
    node T_661 = or(notSpecial_addZeros, isZeroY) @[MulAddRecFN.scala 525:29]
    node notSpecial_isZeroOut = or(T_661, totalUnderflowY) @[MulAddRecFN.scala 525:40]
    node T_662 = and(commonCase, totalUnderflowY) @[MulAddRecFN.scala 526:41]
    node pegMinFiniteMagOut = and(T_662, roundMagUp) @[MulAddRecFN.scala 526:60]
    node T_664 = eq(overflowY_roundMagUp, UInt<1>("h00")) @[MulAddRecFN.scala 527:42]
    node pegMaxFiniteMagOut = and(overflow, T_664) @[MulAddRecFN.scala 527:39]
    node T_665 = or(isInfA, isInfB) @[MulAddRecFN.scala 529:16]
    node T_666 = or(T_665, isInfC) @[MulAddRecFN.scala 529:26]
    node T_667 = and(overflow, overflowY_roundMagUp) @[MulAddRecFN.scala 529:49]
    node notNaN_isInfOut = or(T_666, T_667) @[MulAddRecFN.scala 529:36]
    node T_668 = or(isNaNA, isNaNB) @[MulAddRecFN.scala 530:27]
    node T_669 = or(T_668, isNaNC) @[MulAddRecFN.scala 530:37]
    node isNaNOut = or(T_669, notSigNaN_invalid) @[MulAddRecFN.scala 530:47]
    node T_671 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 533:10]
    node T_672 = and(T_671, io.fromPreMul.opSignC) @[MulAddRecFN.scala 533:51]
    node T_674 = eq(isSpecialC, UInt<1>("h00")) @[MulAddRecFN.scala 534:24]
    node T_675 = and(mulSpecial, T_674) @[MulAddRecFN.scala 534:21]
    node T_676 = and(T_675, io.fromPreMul.signProd) @[MulAddRecFN.scala 534:51]
    node T_677 = or(T_672, T_676) @[MulAddRecFN.scala 533:78]
    node T_679 = eq(mulSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 535:10]
    node T_680 = and(T_679, isSpecialC) @[MulAddRecFN.scala 535:23]
    node T_681 = and(T_680, io.fromPreMul.opSignC) @[MulAddRecFN.scala 535:51]
    node T_682 = or(T_677, T_681) @[MulAddRecFN.scala 534:78]
    node T_684 = eq(mulSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 536:10]
    node T_685 = and(T_684, notSpecial_addZeros) @[MulAddRecFN.scala 536:23]
    node T_686 = and(T_685, doSubMags) @[MulAddRecFN.scala 536:46]
    node T_687 = and(T_686, signZeroNotEqOpSigns) @[MulAddRecFN.scala 536:59]
    node uncommonCaseSignOut = or(T_682, T_687) @[MulAddRecFN.scala 535:78]
    node T_689 = eq(isNaNOut, UInt<1>("h00")) @[MulAddRecFN.scala 538:20]
    node T_690 = and(T_689, uncommonCaseSignOut) @[MulAddRecFN.scala 538:31]
    node T_691 = and(commonCase, signY) @[MulAddRecFN.scala 538:70]
    node signOut = or(T_690, T_691) @[MulAddRecFN.scala 538:55]
    node T_694 = mux(notSpecial_isZeroOut, UInt<9>("h01c0"), UInt<9>("h00")) @[MulAddRecFN.scala 541:18]
    node T_695 = not(T_694) @[MulAddRecFN.scala 541:14]
    node T_696 = and(expY, T_695) @[MulAddRecFN.scala 540:15]
    node T_698 = not(UInt<9>("h06b")) @[MulAddRecFN.scala 546:19]
    node T_700 = mux(pegMinFiniteMagOut, T_698, UInt<9>("h00")) @[MulAddRecFN.scala 545:18]
    node T_701 = not(T_700) @[MulAddRecFN.scala 545:14]
    node T_702 = and(T_696, T_701) @[MulAddRecFN.scala 544:17]
    node T_705 = mux(pegMaxFiniteMagOut, UInt<9>("h080"), UInt<9>("h00")) @[MulAddRecFN.scala 549:18]
    node T_706 = not(T_705) @[MulAddRecFN.scala 549:14]
    node T_707 = and(T_702, T_706) @[MulAddRecFN.scala 548:17]
    node T_710 = mux(notNaN_isInfOut, UInt<7>("h040"), UInt<9>("h00")) @[MulAddRecFN.scala 553:18]
    node T_711 = not(T_710) @[MulAddRecFN.scala 553:14]
    node T_712 = and(T_707, T_711) @[MulAddRecFN.scala 552:17]
    node T_715 = mux(pegMinFiniteMagOut, UInt<7>("h06b"), UInt<9>("h00")) @[MulAddRecFN.scala 557:16]
    node T_716 = or(T_712, T_715) @[MulAddRecFN.scala 556:18]
    node T_719 = mux(pegMaxFiniteMagOut, UInt<9>("h017f"), UInt<9>("h00")) @[MulAddRecFN.scala 558:16]
    node T_720 = or(T_716, T_719) @[MulAddRecFN.scala 557:74]
    node T_723 = mux(notNaN_isInfOut, UInt<9>("h0180"), UInt<9>("h00")) @[MulAddRecFN.scala 562:16]
    node T_724 = or(T_720, T_723) @[MulAddRecFN.scala 561:15]
    node T_727 = mux(isNaNOut, UInt<9>("h01c0"), UInt<9>("h00")) @[MulAddRecFN.scala 566:16]
    node expOut = or(T_724, T_727) @[MulAddRecFN.scala 565:15]
    node T_728 = and(totalUnderflowY, roundMagUp) @[MulAddRecFN.scala 568:30]
    node T_729 = or(T_728, isNaNOut) @[MulAddRecFN.scala 568:45]
    node T_731 = shl(UInt<1>("h01"), 22) @[MulAddRecFN.scala 569:34]
    node T_733 = mux(isNaNOut, T_731, UInt<1>("h00")) @[MulAddRecFN.scala 569:16]
    node T_734 = mux(T_729, T_733, fractY) @[MulAddRecFN.scala 568:12]
    node T_735 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 33:15]
    node T_738 = mux(T_735, UInt<23>("h07fffff"), UInt<23>("h00")) @[Bitwise.scala 33:12]
    node fractOut = or(T_734, T_738) @[MulAddRecFN.scala 571:11]
    node T_739 = cat(signOut, expOut) @[Cat.scala 20:58]
    node T_740 = cat(T_739, fractOut) @[Cat.scala 20:58]
    io.out <= T_740 @[MulAddRecFN.scala 574:12]
    node T_742 = cat(underflow, inexact) @[Cat.scala 20:58]
    node T_743 = cat(invalid, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_744 = cat(T_743, overflow) @[Cat.scala 20:58]
    node T_745 = cat(T_744, T_742) @[Cat.scala 20:58]
    io.exceptionFlags <= T_745 @[MulAddRecFN.scala 575:23]
    
  module MulAddRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip op : UInt<2>, flip a : UInt<33>, flip b : UInt<33>, flip c : UInt<33>, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    inst mulAddRecFN_preMul of MulAddRecFN_preMul @[MulAddRecFN.scala 598:15]
    mulAddRecFN_preMul.io is invalid
    mulAddRecFN_preMul.clk <= clk
    mulAddRecFN_preMul.reset <= reset
    inst mulAddRecFN_postMul of MulAddRecFN_postMul @[MulAddRecFN.scala 600:15]
    mulAddRecFN_postMul.io is invalid
    mulAddRecFN_postMul.clk <= clk
    mulAddRecFN_postMul.reset <= reset
    mulAddRecFN_preMul.io.op <= io.op @[MulAddRecFN.scala 602:30]
    mulAddRecFN_preMul.io.a <= io.a @[MulAddRecFN.scala 603:30]
    mulAddRecFN_preMul.io.b <= io.b @[MulAddRecFN.scala 604:30]
    mulAddRecFN_preMul.io.c <= io.c @[MulAddRecFN.scala 605:30]
    mulAddRecFN_preMul.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 606:40]
    mulAddRecFN_postMul.io.fromPreMul <- mulAddRecFN_preMul.io.toPostMul @[MulAddRecFN.scala 608:39]
    node T_7 = mul(mulAddRecFN_preMul.io.mulAddA, mulAddRecFN_preMul.io.mulAddB) @[MulAddRecFN.scala 610:39]
    node T_9 = cat(UInt<1>("h00"), mulAddRecFN_preMul.io.mulAddC) @[Cat.scala 20:58]
    node T_10 = add(T_7, T_9) @[MulAddRecFN.scala 610:71]
    node T_11 = tail(T_10, 1) @[MulAddRecFN.scala 610:71]
    mulAddRecFN_postMul.io.mulAddResult <= T_11 @[MulAddRecFN.scala 609:41]
    io.out <= mulAddRecFN_postMul.io.out @[MulAddRecFN.scala 613:12]
    io.exceptionFlags <= mulAddRecFN_postMul.io.exceptionFlags @[MulAddRecFN.scala 614:23]
    
  module FPUFMAPipe : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}
    
    io is invalid
    node one = shl(UInt<1>("h01"), 31) @[fpu.scala 462:21]
    node T_131 = bits(io.in.bits.in1, 32, 32) @[fpu.scala 463:29]
    node T_132 = bits(io.in.bits.in2, 32, 32) @[fpu.scala 463:53]
    node T_133 = xor(T_131, T_132) @[fpu.scala 463:37]
    node zero = shl(T_133, 32) @[fpu.scala 463:62]
    reg valid : UInt<1>, clk
    valid <= io.in.valid
    reg in : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    when io.in.valid : @[fpu.scala 467:22]
      in <- io.in.bits @[fpu.scala 468:8]
      node T_179 = bits(io.in.bits.cmd, 1, 1) @[fpu.scala 471:33]
      node T_180 = or(io.in.bits.ren3, io.in.bits.swap23) @[fpu.scala 471:48]
      node T_181 = and(T_179, T_180) @[fpu.scala 471:37]
      node T_182 = bits(io.in.bits.cmd, 0, 0) @[fpu.scala 471:78]
      node T_183 = cat(T_181, T_182) @[Cat.scala 20:58]
      in.cmd <= T_183 @[fpu.scala 471:12]
      when io.in.bits.swap23 : @[fpu.scala 472:23]
        in.in2 <= one @[fpu.scala 472:32]
        skip @[fpu.scala 472:23]
      node T_184 = or(io.in.bits.ren3, io.in.bits.swap23) @[fpu.scala 473:21]
      node T_186 = eq(T_184, UInt<1>("h00")) @[Conditional.scala 18:11]
      when T_186 : @[Conditional.scala 18:15]
        in.in3 <= zero @[fpu.scala 473:45]
        skip @[Conditional.scala 18:15]
      skip @[fpu.scala 467:22]
    inst fma of MulAddRecFN @[fpu.scala 476:19]
    fma.io is invalid
    fma.clk <= clk
    fma.reset <= reset
    fma.io.op <= in.cmd @[fpu.scala 477:13]
    fma.io.roundingMode <= in.rm @[fpu.scala 478:23]
    fma.io.a <= in.in1 @[fpu.scala 479:12]
    fma.io.b <= in.in2 @[fpu.scala 480:12]
    fma.io.c <= in.in3 @[fpu.scala 481:12]
    wire res : {data : UInt<65>, exc : UInt<5>} @[fpu.scala 483:17]
    res is invalid @[fpu.scala 483:17]
    node T_193 = cat(UInt<32>("h0ffffffff"), fma.io.out) @[Cat.scala 20:58]
    res.data <= T_193 @[fpu.scala 484:12]
    res.exc <= fma.io.exceptionFlags @[fpu.scala 485:11]
    reg T_196 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_196 <= valid
    reg T_197 : {data : UInt<65>, exc : UInt<5>}, clk
    when valid : @[Reg.scala 29:19]
      T_197 <- res @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg T_202 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_202 <= T_196
    reg T_203 : {data : UInt<65>, exc : UInt<5>}, clk
    when T_196 : @[Reg.scala 29:19]
      T_203 <- T_197 @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    wire T_214 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 39:21]
    T_214 is invalid @[Valid.scala 39:21]
    T_214.valid <= T_202 @[Valid.scala 40:17]
    T_214.bits <- T_203 @[Valid.scala 41:16]
    io.out <- T_214 @[fpu.scala 486:10]
    
  module CompareRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<65>, flip b : UInt<65>, flip signaling : UInt<1>, lt : UInt<1>, eq : UInt<1>, gt : UInt<1>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_7 = bits(io.a, 63, 52) @[rawFNFromRecFN.scala 50:21]
    node T_8 = bits(T_7, 11, 9) @[rawFNFromRecFN.scala 51:29]
    node T_10 = eq(T_8, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54]
    node T_11 = bits(T_7, 11, 10) @[rawFNFromRecFN.scala 52:29]
    node T_13 = eq(T_11, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54]
    wire rawA : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[rawFNFromRecFN.scala 54:23]
    rawA is invalid @[rawFNFromRecFN.scala 54:23]
    node T_27 = bits(io.a, 64, 64) @[rawFNFromRecFN.scala 55:23]
    rawA.sign <= T_27 @[rawFNFromRecFN.scala 55:18]
    node T_28 = bits(T_7, 9, 9) @[rawFNFromRecFN.scala 56:40]
    node T_29 = and(T_13, T_28) @[rawFNFromRecFN.scala 56:32]
    rawA.isNaN <= T_29 @[rawFNFromRecFN.scala 56:19]
    node T_30 = bits(T_7, 9, 9) @[rawFNFromRecFN.scala 57:40]
    node T_32 = eq(T_30, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35]
    node T_33 = and(T_13, T_32) @[rawFNFromRecFN.scala 57:32]
    rawA.isInf <= T_33 @[rawFNFromRecFN.scala 57:19]
    rawA.isZero <= T_10 @[rawFNFromRecFN.scala 58:20]
    node T_34 = cvt(T_7) @[rawFNFromRecFN.scala 59:25]
    rawA.sExp <= T_34 @[rawFNFromRecFN.scala 59:18]
    node T_37 = eq(T_10, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36]
    node T_38 = bits(io.a, 51, 0) @[rawFNFromRecFN.scala 60:48]
    node T_40 = cat(T_38, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_41 = cat(UInt<1>("h00"), T_37) @[Cat.scala 20:58]
    node T_42 = cat(T_41, T_40) @[Cat.scala 20:58]
    rawA.sig <= T_42 @[rawFNFromRecFN.scala 60:17]
    node T_43 = bits(io.b, 63, 52) @[rawFNFromRecFN.scala 50:21]
    node T_44 = bits(T_43, 11, 9) @[rawFNFromRecFN.scala 51:29]
    node T_46 = eq(T_44, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54]
    node T_47 = bits(T_43, 11, 10) @[rawFNFromRecFN.scala 52:29]
    node T_49 = eq(T_47, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54]
    wire rawB : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[rawFNFromRecFN.scala 54:23]
    rawB is invalid @[rawFNFromRecFN.scala 54:23]
    node T_63 = bits(io.b, 64, 64) @[rawFNFromRecFN.scala 55:23]
    rawB.sign <= T_63 @[rawFNFromRecFN.scala 55:18]
    node T_64 = bits(T_43, 9, 9) @[rawFNFromRecFN.scala 56:40]
    node T_65 = and(T_49, T_64) @[rawFNFromRecFN.scala 56:32]
    rawB.isNaN <= T_65 @[rawFNFromRecFN.scala 56:19]
    node T_66 = bits(T_43, 9, 9) @[rawFNFromRecFN.scala 57:40]
    node T_68 = eq(T_66, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35]
    node T_69 = and(T_49, T_68) @[rawFNFromRecFN.scala 57:32]
    rawB.isInf <= T_69 @[rawFNFromRecFN.scala 57:19]
    rawB.isZero <= T_46 @[rawFNFromRecFN.scala 58:20]
    node T_70 = cvt(T_43) @[rawFNFromRecFN.scala 59:25]
    rawB.sExp <= T_70 @[rawFNFromRecFN.scala 59:18]
    node T_73 = eq(T_46, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36]
    node T_74 = bits(io.b, 51, 0) @[rawFNFromRecFN.scala 60:48]
    node T_76 = cat(T_74, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_77 = cat(UInt<1>("h00"), T_73) @[Cat.scala 20:58]
    node T_78 = cat(T_77, T_76) @[Cat.scala 20:58]
    rawB.sig <= T_78 @[rawFNFromRecFN.scala 60:17]
    node T_80 = eq(rawA.isNaN, UInt<1>("h00")) @[CompareRecFN.scala 57:19]
    node T_82 = eq(rawB.isNaN, UInt<1>("h00")) @[CompareRecFN.scala 57:35]
    node ordered = and(T_80, T_82) @[CompareRecFN.scala 57:32]
    node bothInfs = and(rawA.isInf, rawB.isInf) @[CompareRecFN.scala 58:33]
    node bothZeros = and(rawA.isZero, rawB.isZero) @[CompareRecFN.scala 59:33]
    node eqExps = eq(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 60:29]
    node T_83 = lt(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 62:20]
    node T_84 = lt(rawA.sig, rawB.sig) @[CompareRecFN.scala 62:57]
    node T_85 = and(eqExps, T_84) @[CompareRecFN.scala 62:44]
    node common_ltMags = or(T_83, T_85) @[CompareRecFN.scala 62:33]
    node T_86 = eq(rawA.sig, rawB.sig) @[CompareRecFN.scala 63:45]
    node common_eqMags = and(eqExps, T_86) @[CompareRecFN.scala 63:32]
    node T_88 = eq(bothZeros, UInt<1>("h00")) @[CompareRecFN.scala 66:9]
    node T_90 = eq(rawB.sign, UInt<1>("h00")) @[CompareRecFN.scala 67:28]
    node T_91 = and(rawA.sign, T_90) @[CompareRecFN.scala 67:25]
    node T_93 = eq(bothInfs, UInt<1>("h00")) @[CompareRecFN.scala 68:19]
    node T_95 = eq(common_ltMags, UInt<1>("h00")) @[CompareRecFN.scala 69:38]
    node T_96 = and(rawA.sign, T_95) @[CompareRecFN.scala 69:35]
    node T_98 = eq(common_eqMags, UInt<1>("h00")) @[CompareRecFN.scala 69:57]
    node T_99 = and(T_96, T_98) @[CompareRecFN.scala 69:54]
    node T_101 = eq(rawB.sign, UInt<1>("h00")) @[CompareRecFN.scala 70:29]
    node T_102 = and(T_101, common_ltMags) @[CompareRecFN.scala 70:41]
    node T_103 = or(T_99, T_102) @[CompareRecFN.scala 69:74]
    node T_104 = and(T_93, T_103) @[CompareRecFN.scala 68:30]
    node T_105 = or(T_91, T_104) @[CompareRecFN.scala 67:41]
    node ordered_lt = and(T_88, T_105) @[CompareRecFN.scala 66:21]
    node T_106 = eq(rawA.sign, rawB.sign) @[CompareRecFN.scala 72:34]
    node T_107 = or(bothInfs, common_eqMags) @[CompareRecFN.scala 72:62]
    node T_108 = and(T_106, T_107) @[CompareRecFN.scala 72:49]
    node ordered_eq = or(bothZeros, T_108) @[CompareRecFN.scala 72:19]
    node T_109 = bits(rawA.sig, 53, 53) @[RoundRawFNToRecFN.scala 61:57]
    node T_111 = eq(T_109, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49]
    node T_112 = and(rawA.isNaN, T_111) @[RoundRawFNToRecFN.scala 61:46]
    node T_113 = bits(rawB.sig, 53, 53) @[RoundRawFNToRecFN.scala 61:57]
    node T_115 = eq(T_113, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49]
    node T_116 = and(rawB.isNaN, T_115) @[RoundRawFNToRecFN.scala 61:46]
    node T_117 = or(T_112, T_116) @[CompareRecFN.scala 75:29]
    node T_119 = eq(ordered, UInt<1>("h00")) @[CompareRecFN.scala 76:30]
    node T_120 = and(io.signaling, T_119) @[CompareRecFN.scala 76:27]
    node invalid = or(T_117, T_120) @[CompareRecFN.scala 75:52]
    node T_121 = and(ordered, ordered_lt) @[CompareRecFN.scala 78:22]
    io.lt <= T_121 @[CompareRecFN.scala 78:11]
    node T_122 = and(ordered, ordered_eq) @[CompareRecFN.scala 79:22]
    io.eq <= T_122 @[CompareRecFN.scala 79:11]
    node T_124 = eq(ordered_lt, UInt<1>("h00")) @[CompareRecFN.scala 80:25]
    node T_125 = and(ordered, T_124) @[CompareRecFN.scala 80:22]
    node T_127 = eq(ordered_eq, UInt<1>("h00")) @[CompareRecFN.scala 80:41]
    node T_128 = and(T_125, T_127) @[CompareRecFN.scala 80:38]
    io.gt <= T_128 @[CompareRecFN.scala 80:11]
    node T_130 = cat(invalid, UInt<4>("h00")) @[Cat.scala 20:58]
    io.exceptionFlags <= T_130 @[CompareRecFN.scala 82:23]
    
  module RecFNToIN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<65>, flip roundingMode : UInt<2>, flip signedOut : UInt<1>, out : UInt<32>, intExceptionFlags : UInt<3>}
    
    io is invalid
    node sign = bits(io.in, 64, 64) @[RecFNToIN.scala 54:21]
    node exp = bits(io.in, 63, 52) @[RecFNToIN.scala 55:20]
    node fract = bits(io.in, 51, 0) @[RecFNToIN.scala 56:22]
    node T_5 = bits(exp, 11, 9) @[RecFNToIN.scala 58:22]
    node isZero = eq(T_5, UInt<1>("h00")) @[RecFNToIN.scala 58:47]
    node T_7 = bits(exp, 11, 10) @[RecFNToIN.scala 59:25]
    node isSpecial = eq(T_7, UInt<2>("h03")) @[RecFNToIN.scala 59:50]
    node T_9 = bits(exp, 9, 9) @[RecFNToIN.scala 60:33]
    node isNaN = and(isSpecial, T_9) @[RecFNToIN.scala 60:27]
    node notSpecial_magGeOne = bits(exp, 11, 11) @[RecFNToIN.scala 61:34]
    node T_10 = cat(notSpecial_magGeOne, fract) @[Cat.scala 20:58]
    node T_11 = bits(exp, 4, 0) @[RecFNToIN.scala 74:20]
    node T_13 = mux(notSpecial_magGeOne, T_11, UInt<1>("h00")) @[RecFNToIN.scala 73:16]
    node shiftedSig = dshl(T_10, T_13) @[RecFNToIN.scala 72:40]
    node unroundedInt = bits(shiftedSig, 83, 52) @[RecFNToIN.scala 82:24]
    node T_14 = bits(shiftedSig, 52, 51) @[RecFNToIN.scala 85:23]
    node T_15 = bits(shiftedSig, 50, 0) @[RecFNToIN.scala 86:23]
    node T_17 = neq(T_15, UInt<1>("h00")) @[RecFNToIN.scala 86:41]
    node roundBits = cat(T_14, T_17) @[Cat.scala 20:58]
    node T_18 = bits(roundBits, 1, 0) @[RecFNToIN.scala 88:58]
    node T_20 = neq(T_18, UInt<1>("h00")) @[RecFNToIN.scala 88:65]
    node T_22 = eq(isZero, UInt<1>("h00")) @[RecFNToIN.scala 88:70]
    node roundInexact = mux(notSpecial_magGeOne, T_20, T_22) @[RecFNToIN.scala 88:27]
    node T_23 = bits(roundBits, 2, 1) @[RecFNToIN.scala 91:22]
    node T_24 = not(T_23) @[RecFNToIN.scala 91:29]
    node T_26 = eq(T_24, UInt<1>("h00")) @[RecFNToIN.scala 91:29]
    node T_27 = bits(roundBits, 1, 0) @[RecFNToIN.scala 91:46]
    node T_28 = not(T_27) @[RecFNToIN.scala 91:53]
    node T_30 = eq(T_28, UInt<1>("h00")) @[RecFNToIN.scala 91:53]
    node T_31 = or(T_26, T_30) @[RecFNToIN.scala 91:34]
    node T_32 = bits(exp, 10, 0) @[RecFNToIN.scala 92:20]
    node T_33 = not(T_32) @[RecFNToIN.scala 92:38]
    node T_35 = eq(T_33, UInt<1>("h00")) @[RecFNToIN.scala 92:38]
    node T_36 = bits(roundBits, 1, 0) @[RecFNToIN.scala 92:53]
    node T_38 = neq(T_36, UInt<1>("h00")) @[RecFNToIN.scala 92:60]
    node T_40 = mux(T_35, T_38, UInt<1>("h00")) @[RecFNToIN.scala 92:16]
    node roundIncr_nearestEven = mux(notSpecial_magGeOne, T_31, T_40) @[RecFNToIN.scala 90:12]
    node T_41 = eq(io.roundingMode, UInt<2>("h00")) @[RecFNToIN.scala 95:27]
    node T_42 = and(T_41, roundIncr_nearestEven) @[RecFNToIN.scala 95:51]
    node T_43 = eq(io.roundingMode, UInt<2>("h02")) @[RecFNToIN.scala 96:27]
    node T_44 = and(sign, roundInexact) @[RecFNToIN.scala 96:60]
    node T_45 = and(T_43, T_44) @[RecFNToIN.scala 96:49]
    node T_46 = or(T_42, T_45) @[RecFNToIN.scala 95:78]
    node T_47 = eq(io.roundingMode, UInt<2>("h03")) @[RecFNToIN.scala 97:27]
    node T_49 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 97:53]
    node T_50 = and(T_49, roundInexact) @[RecFNToIN.scala 97:60]
    node T_51 = and(T_47, T_50) @[RecFNToIN.scala 97:49]
    node roundIncr = or(T_46, T_51) @[RecFNToIN.scala 96:78]
    node T_52 = not(unroundedInt) @[RecFNToIN.scala 98:39]
    node complUnroundedInt = mux(sign, T_52, unroundedInt) @[RecFNToIN.scala 98:32]
    node T_53 = xor(roundIncr, sign) @[RecFNToIN.scala 100:23]
    node T_55 = add(complUnroundedInt, UInt<1>("h01")) @[RecFNToIN.scala 100:49]
    node T_56 = tail(T_55, 1) @[RecFNToIN.scala 100:49]
    node roundedInt = mux(T_53, T_56, complUnroundedInt) @[RecFNToIN.scala 100:12]
    node T_57 = bits(unroundedInt, 29, 0) @[RecFNToIN.scala 103:38]
    node T_58 = not(T_57) @[RecFNToIN.scala 103:56]
    node T_60 = eq(T_58, UInt<1>("h00")) @[RecFNToIN.scala 103:56]
    node roundCarryBut2 = and(T_60, roundIncr) @[RecFNToIN.scala 103:61]
    node posExp = bits(exp, 10, 0) @[RecFNToIN.scala 104:21]
    node T_62 = geq(posExp, UInt<6>("h020")) @[RecFNToIN.scala 108:21]
    node T_64 = eq(posExp, UInt<5>("h01f")) @[RecFNToIN.scala 109:26]
    node T_66 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 110:23]
    node T_67 = bits(unroundedInt, 30, 0) @[RecFNToIN.scala 110:45]
    node T_69 = neq(T_67, UInt<1>("h00")) @[RecFNToIN.scala 110:63]
    node T_70 = or(T_66, T_69) @[RecFNToIN.scala 110:30]
    node T_71 = or(T_70, roundIncr) @[RecFNToIN.scala 111:27]
    node T_72 = and(T_64, T_71) @[RecFNToIN.scala 109:50]
    node T_73 = or(T_62, T_72) @[RecFNToIN.scala 108:40]
    node T_75 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 112:18]
    node T_77 = eq(posExp, UInt<5>("h01e")) @[RecFNToIN.scala 112:36]
    node T_78 = and(T_75, T_77) @[RecFNToIN.scala 112:25]
    node T_79 = and(T_78, roundCarryBut2) @[RecFNToIN.scala 112:60]
    node T_80 = or(T_73, T_79) @[RecFNToIN.scala 111:42]
    node overflow_signed = mux(notSpecial_magGeOne, T_80, UInt<1>("h00")) @[RecFNToIN.scala 107:12]
    node T_83 = geq(posExp, UInt<6>("h020")) @[RecFNToIN.scala 117:29]
    node T_84 = or(sign, T_83) @[RecFNToIN.scala 117:18]
    node T_86 = eq(posExp, UInt<5>("h01f")) @[RecFNToIN.scala 118:26]
    node T_87 = bits(unroundedInt, 30, 30) @[RecFNToIN.scala 119:34]
    node T_88 = and(T_86, T_87) @[RecFNToIN.scala 118:50]
    node T_89 = and(T_88, roundCarryBut2) @[RecFNToIN.scala 119:49]
    node T_90 = or(T_84, T_89) @[RecFNToIN.scala 117:48]
    node T_91 = and(sign, roundIncr) @[RecFNToIN.scala 120:18]
    node overflow_unsigned = mux(notSpecial_magGeOne, T_90, T_91) @[RecFNToIN.scala 116:12]
    node overflow = mux(io.signedOut, overflow_signed, overflow_unsigned) @[RecFNToIN.scala 122:23]
    node T_93 = eq(isNaN, UInt<1>("h00")) @[RecFNToIN.scala 124:27]
    node excSign = and(sign, T_93) @[RecFNToIN.scala 124:24]
    node T_94 = and(io.signedOut, excSign) @[RecFNToIN.scala 126:26]
    node T_96 = shl(UInt<1>("h01"), 31) @[RecFNToIN.scala 126:45]
    node T_98 = mux(T_94, T_96, UInt<1>("h00")) @[RecFNToIN.scala 126:12]
    node T_100 = eq(excSign, UInt<1>("h00")) @[RecFNToIN.scala 127:29]
    node T_101 = and(io.signedOut, T_100) @[RecFNToIN.scala 127:26]
    node T_104 = mux(T_101, UInt<31>("h07fffffff"), UInt<1>("h00")) @[RecFNToIN.scala 127:12]
    node T_105 = or(T_98, T_104) @[RecFNToIN.scala 126:72]
    node T_107 = eq(io.signedOut, UInt<1>("h00")) @[RecFNToIN.scala 131:13]
    node T_109 = eq(excSign, UInt<1>("h00")) @[RecFNToIN.scala 131:31]
    node T_110 = and(T_107, T_109) @[RecFNToIN.scala 131:28]
    node T_113 = mux(T_110, UInt<32>("h0ffffffff"), UInt<1>("h00")) @[RecFNToIN.scala 131:12]
    node excValue = or(T_105, T_113) @[RecFNToIN.scala 130:11]
    node T_115 = eq(isSpecial, UInt<1>("h00")) @[RecFNToIN.scala 135:35]
    node T_116 = and(roundInexact, T_115) @[RecFNToIN.scala 135:32]
    node T_118 = eq(overflow, UInt<1>("h00")) @[RecFNToIN.scala 135:48]
    node inexact = and(T_116, T_118) @[RecFNToIN.scala 135:45]
    node T_119 = or(isSpecial, overflow) @[RecFNToIN.scala 137:27]
    node T_120 = mux(T_119, excValue, roundedInt) @[RecFNToIN.scala 137:18]
    io.out <= T_120 @[RecFNToIN.scala 137:12]
    node T_121 = cat(isSpecial, overflow) @[Cat.scala 20:58]
    node T_122 = cat(T_121, inexact) @[Cat.scala 20:58]
    io.intExceptionFlags <= T_122 @[RecFNToIN.scala 138:26]
    
  module RecFNToIN_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<65>, flip roundingMode : UInt<2>, flip signedOut : UInt<1>, out : UInt<64>, intExceptionFlags : UInt<3>}
    
    io is invalid
    node sign = bits(io.in, 64, 64) @[RecFNToIN.scala 54:21]
    node exp = bits(io.in, 63, 52) @[RecFNToIN.scala 55:20]
    node fract = bits(io.in, 51, 0) @[RecFNToIN.scala 56:22]
    node T_5 = bits(exp, 11, 9) @[RecFNToIN.scala 58:22]
    node isZero = eq(T_5, UInt<1>("h00")) @[RecFNToIN.scala 58:47]
    node T_7 = bits(exp, 11, 10) @[RecFNToIN.scala 59:25]
    node isSpecial = eq(T_7, UInt<2>("h03")) @[RecFNToIN.scala 59:50]
    node T_9 = bits(exp, 9, 9) @[RecFNToIN.scala 60:33]
    node isNaN = and(isSpecial, T_9) @[RecFNToIN.scala 60:27]
    node notSpecial_magGeOne = bits(exp, 11, 11) @[RecFNToIN.scala 61:34]
    node T_10 = cat(notSpecial_magGeOne, fract) @[Cat.scala 20:58]
    node T_11 = bits(exp, 5, 0) @[RecFNToIN.scala 74:20]
    node T_13 = mux(notSpecial_magGeOne, T_11, UInt<1>("h00")) @[RecFNToIN.scala 73:16]
    node shiftedSig = dshl(T_10, T_13) @[RecFNToIN.scala 72:40]
    node unroundedInt = bits(shiftedSig, 115, 52) @[RecFNToIN.scala 82:24]
    node T_14 = bits(shiftedSig, 52, 51) @[RecFNToIN.scala 85:23]
    node T_15 = bits(shiftedSig, 50, 0) @[RecFNToIN.scala 86:23]
    node T_17 = neq(T_15, UInt<1>("h00")) @[RecFNToIN.scala 86:41]
    node roundBits = cat(T_14, T_17) @[Cat.scala 20:58]
    node T_18 = bits(roundBits, 1, 0) @[RecFNToIN.scala 88:58]
    node T_20 = neq(T_18, UInt<1>("h00")) @[RecFNToIN.scala 88:65]
    node T_22 = eq(isZero, UInt<1>("h00")) @[RecFNToIN.scala 88:70]
    node roundInexact = mux(notSpecial_magGeOne, T_20, T_22) @[RecFNToIN.scala 88:27]
    node T_23 = bits(roundBits, 2, 1) @[RecFNToIN.scala 91:22]
    node T_24 = not(T_23) @[RecFNToIN.scala 91:29]
    node T_26 = eq(T_24, UInt<1>("h00")) @[RecFNToIN.scala 91:29]
    node T_27 = bits(roundBits, 1, 0) @[RecFNToIN.scala 91:46]
    node T_28 = not(T_27) @[RecFNToIN.scala 91:53]
    node T_30 = eq(T_28, UInt<1>("h00")) @[RecFNToIN.scala 91:53]
    node T_31 = or(T_26, T_30) @[RecFNToIN.scala 91:34]
    node T_32 = bits(exp, 10, 0) @[RecFNToIN.scala 92:20]
    node T_33 = not(T_32) @[RecFNToIN.scala 92:38]
    node T_35 = eq(T_33, UInt<1>("h00")) @[RecFNToIN.scala 92:38]
    node T_36 = bits(roundBits, 1, 0) @[RecFNToIN.scala 92:53]
    node T_38 = neq(T_36, UInt<1>("h00")) @[RecFNToIN.scala 92:60]
    node T_40 = mux(T_35, T_38, UInt<1>("h00")) @[RecFNToIN.scala 92:16]
    node roundIncr_nearestEven = mux(notSpecial_magGeOne, T_31, T_40) @[RecFNToIN.scala 90:12]
    node T_41 = eq(io.roundingMode, UInt<2>("h00")) @[RecFNToIN.scala 95:27]
    node T_42 = and(T_41, roundIncr_nearestEven) @[RecFNToIN.scala 95:51]
    node T_43 = eq(io.roundingMode, UInt<2>("h02")) @[RecFNToIN.scala 96:27]
    node T_44 = and(sign, roundInexact) @[RecFNToIN.scala 96:60]
    node T_45 = and(T_43, T_44) @[RecFNToIN.scala 96:49]
    node T_46 = or(T_42, T_45) @[RecFNToIN.scala 95:78]
    node T_47 = eq(io.roundingMode, UInt<2>("h03")) @[RecFNToIN.scala 97:27]
    node T_49 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 97:53]
    node T_50 = and(T_49, roundInexact) @[RecFNToIN.scala 97:60]
    node T_51 = and(T_47, T_50) @[RecFNToIN.scala 97:49]
    node roundIncr = or(T_46, T_51) @[RecFNToIN.scala 96:78]
    node T_52 = not(unroundedInt) @[RecFNToIN.scala 98:39]
    node complUnroundedInt = mux(sign, T_52, unroundedInt) @[RecFNToIN.scala 98:32]
    node T_53 = xor(roundIncr, sign) @[RecFNToIN.scala 100:23]
    node T_55 = add(complUnroundedInt, UInt<1>("h01")) @[RecFNToIN.scala 100:49]
    node T_56 = tail(T_55, 1) @[RecFNToIN.scala 100:49]
    node roundedInt = mux(T_53, T_56, complUnroundedInt) @[RecFNToIN.scala 100:12]
    node T_57 = bits(unroundedInt, 61, 0) @[RecFNToIN.scala 103:38]
    node T_58 = not(T_57) @[RecFNToIN.scala 103:56]
    node T_60 = eq(T_58, UInt<1>("h00")) @[RecFNToIN.scala 103:56]
    node roundCarryBut2 = and(T_60, roundIncr) @[RecFNToIN.scala 103:61]
    node posExp = bits(exp, 10, 0) @[RecFNToIN.scala 104:21]
    node T_62 = geq(posExp, UInt<7>("h040")) @[RecFNToIN.scala 108:21]
    node T_64 = eq(posExp, UInt<6>("h03f")) @[RecFNToIN.scala 109:26]
    node T_66 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 110:23]
    node T_67 = bits(unroundedInt, 62, 0) @[RecFNToIN.scala 110:45]
    node T_69 = neq(T_67, UInt<1>("h00")) @[RecFNToIN.scala 110:63]
    node T_70 = or(T_66, T_69) @[RecFNToIN.scala 110:30]
    node T_71 = or(T_70, roundIncr) @[RecFNToIN.scala 111:27]
    node T_72 = and(T_64, T_71) @[RecFNToIN.scala 109:50]
    node T_73 = or(T_62, T_72) @[RecFNToIN.scala 108:40]
    node T_75 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 112:18]
    node T_77 = eq(posExp, UInt<6>("h03e")) @[RecFNToIN.scala 112:36]
    node T_78 = and(T_75, T_77) @[RecFNToIN.scala 112:25]
    node T_79 = and(T_78, roundCarryBut2) @[RecFNToIN.scala 112:60]
    node T_80 = or(T_73, T_79) @[RecFNToIN.scala 111:42]
    node overflow_signed = mux(notSpecial_magGeOne, T_80, UInt<1>("h00")) @[RecFNToIN.scala 107:12]
    node T_83 = geq(posExp, UInt<7>("h040")) @[RecFNToIN.scala 117:29]
    node T_84 = or(sign, T_83) @[RecFNToIN.scala 117:18]
    node T_86 = eq(posExp, UInt<6>("h03f")) @[RecFNToIN.scala 118:26]
    node T_87 = bits(unroundedInt, 62, 62) @[RecFNToIN.scala 119:34]
    node T_88 = and(T_86, T_87) @[RecFNToIN.scala 118:50]
    node T_89 = and(T_88, roundCarryBut2) @[RecFNToIN.scala 119:49]
    node T_90 = or(T_84, T_89) @[RecFNToIN.scala 117:48]
    node T_91 = and(sign, roundIncr) @[RecFNToIN.scala 120:18]
    node overflow_unsigned = mux(notSpecial_magGeOne, T_90, T_91) @[RecFNToIN.scala 116:12]
    node overflow = mux(io.signedOut, overflow_signed, overflow_unsigned) @[RecFNToIN.scala 122:23]
    node T_93 = eq(isNaN, UInt<1>("h00")) @[RecFNToIN.scala 124:27]
    node excSign = and(sign, T_93) @[RecFNToIN.scala 124:24]
    node T_94 = and(io.signedOut, excSign) @[RecFNToIN.scala 126:26]
    node T_96 = shl(UInt<1>("h01"), 63) @[RecFNToIN.scala 126:45]
    node T_98 = mux(T_94, T_96, UInt<1>("h00")) @[RecFNToIN.scala 126:12]
    node T_100 = eq(excSign, UInt<1>("h00")) @[RecFNToIN.scala 127:29]
    node T_101 = and(io.signedOut, T_100) @[RecFNToIN.scala 127:26]
    node T_104 = mux(T_101, UInt<63>("h07fffffffffffffff"), UInt<1>("h00")) @[RecFNToIN.scala 127:12]
    node T_105 = or(T_98, T_104) @[RecFNToIN.scala 126:72]
    node T_107 = eq(io.signedOut, UInt<1>("h00")) @[RecFNToIN.scala 131:13]
    node T_109 = eq(excSign, UInt<1>("h00")) @[RecFNToIN.scala 131:31]
    node T_110 = and(T_107, T_109) @[RecFNToIN.scala 131:28]
    node T_113 = mux(T_110, UInt<64>("h0ffffffffffffffff"), UInt<1>("h00")) @[RecFNToIN.scala 131:12]
    node excValue = or(T_105, T_113) @[RecFNToIN.scala 130:11]
    node T_115 = eq(isSpecial, UInt<1>("h00")) @[RecFNToIN.scala 135:35]
    node T_116 = and(roundInexact, T_115) @[RecFNToIN.scala 135:32]
    node T_118 = eq(overflow, UInt<1>("h00")) @[RecFNToIN.scala 135:48]
    node inexact = and(T_116, T_118) @[RecFNToIN.scala 135:45]
    node T_119 = or(isSpecial, overflow) @[RecFNToIN.scala 137:27]
    node T_120 = mux(T_119, excValue, roundedInt) @[RecFNToIN.scala 137:18]
    io.out <= T_120 @[RecFNToIN.scala 137:12]
    node T_121 = cat(isSpecial, overflow) @[Cat.scala 20:58]
    node T_122 = cat(T_121, inexact) @[Cat.scala 20:58]
    io.intExceptionFlags <= T_122 @[RecFNToIN.scala 138:26]
    
  module FPToInt : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, as_double : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, out : {valid : UInt<1>, bits : {lt : UInt<1>, store : UInt<64>, toint : UInt<64>, exc : UInt<5>}}}
    
    io is invalid
    reg in : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    reg valid : UInt<1>, clk
    valid <= io.in.valid
    when io.in.valid : @[fpu.scala 279:22]
      in <- io.in.bits @[fpu.scala 280:8]
      node T_228 = eq(io.in.bits.ldst, UInt<1>("h00")) @[fpu.scala 281:47]
      node T_229 = and(io.in.bits.single, T_228) @[fpu.scala 281:44]
      node T_232 = and(io.in.bits.cmd, UInt<4>("h0c")) @[fpu.scala 281:82]
      node T_233 = eq(UInt<5>("h0c"), T_232) @[fpu.scala 281:82]
      node T_235 = eq(T_233, UInt<1>("h00")) @[fpu.scala 281:82]
      node T_236 = and(T_229, T_235) @[fpu.scala 281:64]
      when T_236 : @[fpu.scala 281:98]
        node T_237 = bits(io.in.bits.in1, 32, 32) @[fpu.scala 234:18]
        node T_238 = bits(io.in.bits.in1, 22, 0) @[fpu.scala 235:21]
        node T_239 = bits(io.in.bits.in1, 31, 23) @[fpu.scala 236:19]
        node T_240 = shl(T_238, 53) @[fpu.scala 237:28]
        node T_241 = shr(T_240, 24) @[fpu.scala 237:43]
        node T_242 = bits(T_239, 8, 6) @[fpu.scala 239:26]
        node T_244 = add(T_239, UInt<12>("h0800")) @[fpu.scala 240:31]
        node T_245 = tail(T_244, 1) @[fpu.scala 240:31]
        node T_247 = sub(T_245, UInt<9>("h0100")) @[fpu.scala 240:53]
        node T_248 = tail(T_247, 1) @[fpu.scala 240:53]
        node T_250 = eq(T_242, UInt<1>("h00")) @[fpu.scala 241:19]
        node T_252 = geq(T_242, UInt<3>("h06")) @[fpu.scala 241:36]
        node T_253 = or(T_250, T_252) @[fpu.scala 241:25]
        node T_254 = bits(T_248, 8, 0) @[fpu.scala 241:65]
        node T_255 = cat(T_242, T_254) @[Cat.scala 20:58]
        node T_256 = bits(T_248, 11, 0) @[fpu.scala 242:52]
        node T_257 = mux(T_253, T_255, T_256) @[fpu.scala 241:10]
        node T_258 = cat(T_237, T_257) @[Cat.scala 20:58]
        node T_259 = cat(T_258, T_241) @[Cat.scala 20:58]
        in.in1 <= T_259 @[fpu.scala 282:14]
        node T_260 = bits(io.in.bits.in2, 32, 32) @[fpu.scala 234:18]
        node T_261 = bits(io.in.bits.in2, 22, 0) @[fpu.scala 235:21]
        node T_262 = bits(io.in.bits.in2, 31, 23) @[fpu.scala 236:19]
        node T_263 = shl(T_261, 53) @[fpu.scala 237:28]
        node T_264 = shr(T_263, 24) @[fpu.scala 237:43]
        node T_265 = bits(T_262, 8, 6) @[fpu.scala 239:26]
        node T_267 = add(T_262, UInt<12>("h0800")) @[fpu.scala 240:31]
        node T_268 = tail(T_267, 1) @[fpu.scala 240:31]
        node T_270 = sub(T_268, UInt<9>("h0100")) @[fpu.scala 240:53]
        node T_271 = tail(T_270, 1) @[fpu.scala 240:53]
        node T_273 = eq(T_265, UInt<1>("h00")) @[fpu.scala 241:19]
        node T_275 = geq(T_265, UInt<3>("h06")) @[fpu.scala 241:36]
        node T_276 = or(T_273, T_275) @[fpu.scala 241:25]
        node T_277 = bits(T_271, 8, 0) @[fpu.scala 241:65]
        node T_278 = cat(T_265, T_277) @[Cat.scala 20:58]
        node T_279 = bits(T_271, 11, 0) @[fpu.scala 242:52]
        node T_280 = mux(T_276, T_278, T_279) @[fpu.scala 241:10]
        node T_281 = cat(T_260, T_280) @[Cat.scala 20:58]
        node T_282 = cat(T_281, T_264) @[Cat.scala 20:58]
        in.in2 <= T_282 @[fpu.scala 283:14]
        skip @[fpu.scala 281:98]
      skip @[fpu.scala 279:22]
    node T_283 = bits(in.in1, 32, 32) @[fNFromRecFN.scala 45:22]
    node T_284 = bits(in.in1, 31, 23) @[fNFromRecFN.scala 46:23]
    node T_285 = bits(in.in1, 22, 0) @[fNFromRecFN.scala 47:25]
    node T_286 = bits(T_284, 6, 0) @[fNFromRecFN.scala 49:39]
    node T_288 = lt(T_286, UInt<2>("h02")) @[fNFromRecFN.scala 49:57]
    node T_289 = bits(T_284, 8, 6) @[fNFromRecFN.scala 51:19]
    node T_291 = eq(T_289, UInt<1>("h01")) @[fNFromRecFN.scala 51:44]
    node T_292 = bits(T_284, 8, 7) @[fNFromRecFN.scala 52:24]
    node T_294 = eq(T_292, UInt<1>("h01")) @[fNFromRecFN.scala 52:49]
    node T_295 = and(T_294, T_288) @[fNFromRecFN.scala 52:62]
    node T_296 = or(T_291, T_295) @[fNFromRecFN.scala 51:57]
    node T_297 = bits(T_284, 8, 7) @[fNFromRecFN.scala 55:20]
    node T_299 = eq(T_297, UInt<1>("h01")) @[fNFromRecFN.scala 55:45]
    node T_301 = eq(T_288, UInt<1>("h00")) @[fNFromRecFN.scala 56:18]
    node T_302 = and(T_299, T_301) @[fNFromRecFN.scala 55:58]
    node T_303 = bits(T_284, 8, 7) @[fNFromRecFN.scala 57:23]
    node T_305 = eq(T_303, UInt<2>("h02")) @[fNFromRecFN.scala 57:48]
    node T_306 = or(T_302, T_305) @[fNFromRecFN.scala 56:39]
    node T_307 = bits(T_284, 8, 7) @[fNFromRecFN.scala 58:30]
    node T_309 = eq(T_307, UInt<2>("h03")) @[fNFromRecFN.scala 58:55]
    node T_310 = bits(T_284, 6, 6) @[fNFromRecFN.scala 59:39]
    node T_311 = and(T_309, T_310) @[fNFromRecFN.scala 59:31]
    node T_313 = bits(T_284, 4, 0) @[fNFromRecFN.scala 61:46]
    node T_314 = sub(UInt<2>("h02"), T_313) @[fNFromRecFN.scala 61:39]
    node T_315 = tail(T_314, 1) @[fNFromRecFN.scala 61:39]
    node T_317 = cat(UInt<1>("h01"), T_285) @[Cat.scala 20:58]
    node T_318 = dshr(T_317, T_315) @[fNFromRecFN.scala 63:35]
    node T_319 = bits(T_318, 22, 0) @[fNFromRecFN.scala 63:53]
    node T_320 = bits(T_284, 7, 0) @[fNFromRecFN.scala 65:18]
    node T_322 = sub(T_320, UInt<8>("h081")) @[fNFromRecFN.scala 65:36]
    node T_323 = tail(T_322, 1) @[fNFromRecFN.scala 65:36]
    node T_324 = bits(T_309, 0, 0) @[Bitwise.scala 33:15]
    node T_327 = mux(T_324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_328 = mux(T_306, T_323, T_327) @[fNFromRecFN.scala 68:16]
    node T_329 = or(T_306, T_311) @[fNFromRecFN.scala 70:26]
    node T_331 = mux(T_296, T_319, UInt<1>("h00")) @[fNFromRecFN.scala 72:20]
    node T_332 = mux(T_329, T_285, T_331) @[fNFromRecFN.scala 70:16]
    node T_333 = cat(T_283, T_328) @[Cat.scala 20:58]
    node T_334 = cat(T_333, T_332) @[Cat.scala 20:58]
    node T_335 = bits(T_334, 31, 31) @[util.scala 21:38]
    node T_336 = bits(T_335, 0, 0) @[Bitwise.scala 33:15]
    node T_339 = mux(T_336, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node unrec_s = cat(T_339, T_334) @[Cat.scala 20:58]
    node T_340 = bits(in.in1, 64, 64) @[fNFromRecFN.scala 45:22]
    node T_341 = bits(in.in1, 63, 52) @[fNFromRecFN.scala 46:23]
    node T_342 = bits(in.in1, 51, 0) @[fNFromRecFN.scala 47:25]
    node T_343 = bits(T_341, 9, 0) @[fNFromRecFN.scala 49:39]
    node T_345 = lt(T_343, UInt<2>("h02")) @[fNFromRecFN.scala 49:57]
    node T_346 = bits(T_341, 11, 9) @[fNFromRecFN.scala 51:19]
    node T_348 = eq(T_346, UInt<1>("h01")) @[fNFromRecFN.scala 51:44]
    node T_349 = bits(T_341, 11, 10) @[fNFromRecFN.scala 52:24]
    node T_351 = eq(T_349, UInt<1>("h01")) @[fNFromRecFN.scala 52:49]
    node T_352 = and(T_351, T_345) @[fNFromRecFN.scala 52:62]
    node T_353 = or(T_348, T_352) @[fNFromRecFN.scala 51:57]
    node T_354 = bits(T_341, 11, 10) @[fNFromRecFN.scala 55:20]
    node T_356 = eq(T_354, UInt<1>("h01")) @[fNFromRecFN.scala 55:45]
    node T_358 = eq(T_345, UInt<1>("h00")) @[fNFromRecFN.scala 56:18]
    node T_359 = and(T_356, T_358) @[fNFromRecFN.scala 55:58]
    node T_360 = bits(T_341, 11, 10) @[fNFromRecFN.scala 57:23]
    node T_362 = eq(T_360, UInt<2>("h02")) @[fNFromRecFN.scala 57:48]
    node T_363 = or(T_359, T_362) @[fNFromRecFN.scala 56:39]
    node T_364 = bits(T_341, 11, 10) @[fNFromRecFN.scala 58:30]
    node T_366 = eq(T_364, UInt<2>("h03")) @[fNFromRecFN.scala 58:55]
    node T_367 = bits(T_341, 9, 9) @[fNFromRecFN.scala 59:39]
    node T_368 = and(T_366, T_367) @[fNFromRecFN.scala 59:31]
    node T_370 = bits(T_341, 5, 0) @[fNFromRecFN.scala 61:46]
    node T_371 = sub(UInt<2>("h02"), T_370) @[fNFromRecFN.scala 61:39]
    node T_372 = tail(T_371, 1) @[fNFromRecFN.scala 61:39]
    node T_374 = cat(UInt<1>("h01"), T_342) @[Cat.scala 20:58]
    node T_375 = dshr(T_374, T_372) @[fNFromRecFN.scala 63:35]
    node T_376 = bits(T_375, 51, 0) @[fNFromRecFN.scala 63:53]
    node T_377 = bits(T_341, 10, 0) @[fNFromRecFN.scala 65:18]
    node T_379 = sub(T_377, UInt<11>("h0401")) @[fNFromRecFN.scala 65:36]
    node T_380 = tail(T_379, 1) @[fNFromRecFN.scala 65:36]
    node T_381 = bits(T_366, 0, 0) @[Bitwise.scala 33:15]
    node T_384 = mux(T_381, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 33:12]
    node T_385 = mux(T_363, T_380, T_384) @[fNFromRecFN.scala 68:16]
    node T_386 = or(T_363, T_368) @[fNFromRecFN.scala 70:26]
    node T_388 = mux(T_353, T_376, UInt<1>("h00")) @[fNFromRecFN.scala 72:20]
    node T_389 = mux(T_386, T_342, T_388) @[fNFromRecFN.scala 70:16]
    node T_390 = cat(T_340, T_385) @[Cat.scala 20:58]
    node T_391 = cat(T_390, T_389) @[Cat.scala 20:58]
    node unrec_mem = mux(in.single, unrec_s, T_391) @[fpu.scala 292:10]
    node T_392 = bits(in.in1, 32, 32) @[fpu.scala 198:18]
    node T_393 = bits(in.in1, 31, 23) @[fpu.scala 199:17]
    node T_394 = bits(in.in1, 22, 0) @[fpu.scala 200:17]
    node T_395 = bits(T_393, 8, 6) @[fpu.scala 202:26]
    node T_396 = bits(T_395, 2, 1) @[fpu.scala 203:27]
    node T_398 = eq(T_396, UInt<2>("h03")) @[fpu.scala 204:30]
    node T_399 = bits(T_393, 6, 0) @[fpu.scala 206:32]
    node T_401 = lt(T_399, UInt<2>("h02")) @[fpu.scala 206:48]
    node T_403 = eq(T_395, UInt<1>("h01")) @[fpu.scala 207:28]
    node T_405 = eq(T_396, UInt<1>("h01")) @[fpu.scala 207:50]
    node T_406 = and(T_405, T_401) @[fpu.scala 207:62]
    node T_407 = or(T_403, T_406) @[fpu.scala 207:40]
    node T_409 = eq(T_396, UInt<1>("h01")) @[fpu.scala 208:27]
    node T_411 = eq(T_401, UInt<1>("h00")) @[fpu.scala 208:42]
    node T_412 = and(T_409, T_411) @[fpu.scala 208:39]
    node T_414 = eq(T_396, UInt<2>("h02")) @[fpu.scala 208:71]
    node T_415 = or(T_412, T_414) @[fpu.scala 208:61]
    node T_417 = eq(T_395, UInt<1>("h00")) @[fpu.scala 209:23]
    node T_418 = bits(T_393, 6, 6) @[fpu.scala 210:34]
    node T_420 = eq(T_418, UInt<1>("h00")) @[fpu.scala 210:30]
    node T_421 = and(T_398, T_420) @[fpu.scala 210:27]
    node T_422 = not(T_395) @[fpu.scala 211:22]
    node T_424 = eq(T_422, UInt<1>("h00")) @[fpu.scala 211:22]
    node T_425 = bits(T_394, 22, 22) @[fpu.scala 212:31]
    node T_427 = eq(T_425, UInt<1>("h00")) @[fpu.scala 212:27]
    node T_428 = and(T_424, T_427) @[fpu.scala 212:24]
    node T_429 = bits(T_394, 22, 22) @[fpu.scala 213:30]
    node T_430 = and(T_424, T_429) @[fpu.scala 213:24]
    node T_432 = eq(T_392, UInt<1>("h00")) @[fpu.scala 215:34]
    node T_433 = and(T_421, T_432) @[fpu.scala 215:31]
    node T_435 = eq(T_392, UInt<1>("h00")) @[fpu.scala 215:53]
    node T_436 = and(T_415, T_435) @[fpu.scala 215:50]
    node T_438 = eq(T_392, UInt<1>("h00")) @[fpu.scala 216:24]
    node T_439 = and(T_407, T_438) @[fpu.scala 216:21]
    node T_441 = eq(T_392, UInt<1>("h00")) @[fpu.scala 216:41]
    node T_442 = and(T_417, T_441) @[fpu.scala 216:38]
    node T_443 = and(T_417, T_392) @[fpu.scala 216:55]
    node T_444 = and(T_407, T_392) @[fpu.scala 217:21]
    node T_445 = and(T_415, T_392) @[fpu.scala 217:39]
    node T_446 = and(T_421, T_392) @[fpu.scala 217:54]
    node T_447 = cat(T_445, T_446) @[Cat.scala 20:58]
    node T_448 = cat(T_442, T_443) @[Cat.scala 20:58]
    node T_449 = cat(T_448, T_444) @[Cat.scala 20:58]
    node T_450 = cat(T_449, T_447) @[Cat.scala 20:58]
    node T_451 = cat(T_436, T_439) @[Cat.scala 20:58]
    node T_452 = cat(T_430, T_428) @[Cat.scala 20:58]
    node T_453 = cat(T_452, T_433) @[Cat.scala 20:58]
    node T_454 = cat(T_453, T_451) @[Cat.scala 20:58]
    node classify_s = cat(T_454, T_450) @[Cat.scala 20:58]
    node T_455 = bits(in.in1, 64, 64) @[fpu.scala 198:18]
    node T_456 = bits(in.in1, 63, 52) @[fpu.scala 199:17]
    node T_457 = bits(in.in1, 51, 0) @[fpu.scala 200:17]
    node T_458 = bits(T_456, 11, 9) @[fpu.scala 202:26]
    node T_459 = bits(T_458, 2, 1) @[fpu.scala 203:27]
    node T_461 = eq(T_459, UInt<2>("h03")) @[fpu.scala 204:30]
    node T_462 = bits(T_456, 9, 0) @[fpu.scala 206:32]
    node T_464 = lt(T_462, UInt<2>("h02")) @[fpu.scala 206:48]
    node T_466 = eq(T_458, UInt<1>("h01")) @[fpu.scala 207:28]
    node T_468 = eq(T_459, UInt<1>("h01")) @[fpu.scala 207:50]
    node T_469 = and(T_468, T_464) @[fpu.scala 207:62]
    node T_470 = or(T_466, T_469) @[fpu.scala 207:40]
    node T_472 = eq(T_459, UInt<1>("h01")) @[fpu.scala 208:27]
    node T_474 = eq(T_464, UInt<1>("h00")) @[fpu.scala 208:42]
    node T_475 = and(T_472, T_474) @[fpu.scala 208:39]
    node T_477 = eq(T_459, UInt<2>("h02")) @[fpu.scala 208:71]
    node T_478 = or(T_475, T_477) @[fpu.scala 208:61]
    node T_480 = eq(T_458, UInt<1>("h00")) @[fpu.scala 209:23]
    node T_481 = bits(T_456, 9, 9) @[fpu.scala 210:34]
    node T_483 = eq(T_481, UInt<1>("h00")) @[fpu.scala 210:30]
    node T_484 = and(T_461, T_483) @[fpu.scala 210:27]
    node T_485 = not(T_458) @[fpu.scala 211:22]
    node T_487 = eq(T_485, UInt<1>("h00")) @[fpu.scala 211:22]
    node T_488 = bits(T_457, 51, 51) @[fpu.scala 212:31]
    node T_490 = eq(T_488, UInt<1>("h00")) @[fpu.scala 212:27]
    node T_491 = and(T_487, T_490) @[fpu.scala 212:24]
    node T_492 = bits(T_457, 51, 51) @[fpu.scala 213:30]
    node T_493 = and(T_487, T_492) @[fpu.scala 213:24]
    node T_495 = eq(T_455, UInt<1>("h00")) @[fpu.scala 215:34]
    node T_496 = and(T_484, T_495) @[fpu.scala 215:31]
    node T_498 = eq(T_455, UInt<1>("h00")) @[fpu.scala 215:53]
    node T_499 = and(T_478, T_498) @[fpu.scala 215:50]
    node T_501 = eq(T_455, UInt<1>("h00")) @[fpu.scala 216:24]
    node T_502 = and(T_470, T_501) @[fpu.scala 216:21]
    node T_504 = eq(T_455, UInt<1>("h00")) @[fpu.scala 216:41]
    node T_505 = and(T_480, T_504) @[fpu.scala 216:38]
    node T_506 = and(T_480, T_455) @[fpu.scala 216:55]
    node T_507 = and(T_470, T_455) @[fpu.scala 217:21]
    node T_508 = and(T_478, T_455) @[fpu.scala 217:39]
    node T_509 = and(T_484, T_455) @[fpu.scala 217:54]
    node T_510 = cat(T_508, T_509) @[Cat.scala 20:58]
    node T_511 = cat(T_505, T_506) @[Cat.scala 20:58]
    node T_512 = cat(T_511, T_507) @[Cat.scala 20:58]
    node T_513 = cat(T_512, T_510) @[Cat.scala 20:58]
    node T_514 = cat(T_499, T_502) @[Cat.scala 20:58]
    node T_515 = cat(T_493, T_491) @[Cat.scala 20:58]
    node T_516 = cat(T_515, T_496) @[Cat.scala 20:58]
    node T_517 = cat(T_516, T_514) @[Cat.scala 20:58]
    node T_518 = cat(T_517, T_513) @[Cat.scala 20:58]
    node classify_out = mux(in.single, classify_s, T_518) @[fpu.scala 304:10]
    inst dcmp of CompareRecFN @[fpu.scala 307:20]
    dcmp.io is invalid
    dcmp.clk <= clk
    dcmp.reset <= reset
    dcmp.io.a <= in.in1 @[fpu.scala 308:13]
    dcmp.io.b <= in.in2 @[fpu.scala 309:13]
    dcmp.io.signaling <= UInt<1>("h01") @[fpu.scala 310:21]
    node T_520 = not(in.rm) @[fpu.scala 311:19]
    node T_521 = cat(dcmp.io.lt, dcmp.io.eq) @[Cat.scala 20:58]
    node T_522 = and(T_520, T_521) @[fpu.scala 311:26]
    node dcmp_out = neq(T_522, UInt<1>("h00")) @[fpu.scala 311:57]
    node T_524 = bits(in.rm, 0, 0) @[fpu.scala 314:33]
    node T_525 = mux(T_524, classify_out, unrec_mem) @[fpu.scala 314:27]
    io.out.bits.toint <= T_525 @[fpu.scala 314:21]
    io.out.bits.store <= unrec_mem @[fpu.scala 315:21]
    io.out.bits.exc <= UInt<1>("h00") @[fpu.scala 316:19]
    node T_529 = and(in.cmd, UInt<4>("h0c")) @[fpu.scala 318:16]
    node T_530 = eq(UInt<5>("h04"), T_529) @[fpu.scala 318:16]
    when T_530 : @[fpu.scala 318:30]
      io.out.bits.toint <= dcmp_out @[fpu.scala 319:23]
      io.out.bits.exc <= dcmp.io.exceptionFlags @[fpu.scala 320:21]
      skip @[fpu.scala 318:30]
    node T_533 = and(in.cmd, UInt<4>("h0c")) @[fpu.scala 322:16]
    node T_534 = eq(UInt<5>("h08"), T_533) @[fpu.scala 322:16]
    when T_534 : @[fpu.scala 322:33]
      inst RecFNToIN_2 of RecFNToIN @[fpu.scala 326:24]
      RecFNToIN_2.io is invalid
      RecFNToIN_2.clk <= clk
      RecFNToIN_2.reset <= reset
      RecFNToIN_2.io.in <= in.in1 @[fpu.scala 327:18]
      RecFNToIN_2.io.roundingMode <= in.rm @[fpu.scala 328:28]
      node T_535 = bits(in.typ, 0, 0) @[fpu.scala 329:35]
      node T_536 = not(T_535) @[fpu.scala 329:28]
      RecFNToIN_2.io.signedOut <= T_536 @[fpu.scala 329:25]
      node T_537 = bits(in.typ, 1, 1) @[util.scala 25:13]
      node T_539 = eq(T_537, UInt<1>("h00")) @[fpu.scala 330:44]
      when T_539 : @[fpu.scala 330:51]
        node T_540 = bits(RecFNToIN_2.io.out, 31, 31) @[util.scala 21:38]
        node T_541 = bits(T_540, 0, 0) @[Bitwise.scala 33:15]
        node T_544 = mux(T_541, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
        node T_545 = cat(T_544, RecFNToIN_2.io.out) @[Cat.scala 20:58]
        io.out.bits.toint <= T_545 @[fpu.scala 331:27]
        node T_546 = bits(RecFNToIN_2.io.intExceptionFlags, 2, 1) @[fpu.scala 332:57]
        node T_548 = neq(T_546, UInt<1>("h00")) @[fpu.scala 332:64]
        node T_550 = bits(RecFNToIN_2.io.intExceptionFlags, 0, 0) @[fpu.scala 332:106]
        node T_551 = cat(T_548, UInt<3>("h00")) @[Cat.scala 20:58]
        node T_552 = cat(T_551, T_550) @[Cat.scala 20:58]
        io.out.bits.exc <= T_552 @[fpu.scala 332:25]
        skip @[fpu.scala 330:51]
      inst RecFNToIN_1_1 of RecFNToIN_1 @[fpu.scala 326:24]
      RecFNToIN_1_1.io is invalid
      RecFNToIN_1_1.clk <= clk
      RecFNToIN_1_1.reset <= reset
      RecFNToIN_1_1.io.in <= in.in1 @[fpu.scala 327:18]
      RecFNToIN_1_1.io.roundingMode <= in.rm @[fpu.scala 328:28]
      node T_553 = bits(in.typ, 0, 0) @[fpu.scala 329:35]
      node T_554 = not(T_553) @[fpu.scala 329:28]
      RecFNToIN_1_1.io.signedOut <= T_554 @[fpu.scala 329:25]
      node T_555 = bits(in.typ, 1, 1) @[util.scala 25:13]
      node T_557 = eq(T_555, UInt<1>("h01")) @[fpu.scala 330:44]
      when T_557 : @[fpu.scala 330:51]
        io.out.bits.toint <= RecFNToIN_1_1.io.out @[fpu.scala 331:27]
        node T_558 = bits(RecFNToIN_1_1.io.intExceptionFlags, 2, 1) @[fpu.scala 332:57]
        node T_560 = neq(T_558, UInt<1>("h00")) @[fpu.scala 332:64]
        node T_562 = bits(RecFNToIN_1_1.io.intExceptionFlags, 0, 0) @[fpu.scala 332:106]
        node T_563 = cat(T_560, UInt<3>("h00")) @[Cat.scala 20:58]
        node T_564 = cat(T_563, T_562) @[Cat.scala 20:58]
        io.out.bits.exc <= T_564 @[fpu.scala 332:25]
        skip @[fpu.scala 330:51]
      skip @[fpu.scala 322:33]
    io.out.valid <= valid @[fpu.scala 337:16]
    io.out.bits.lt <= dcmp.io.lt @[fpu.scala 338:18]
    io.as_double <- in @[fpu.scala 339:16]
    
  module INToRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip signedIn : UInt<1>, flip in : UInt<64>, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_5 = bits(io.in, 63, 63) @[INToRecFN.scala 55:36]
    node sign = and(io.signedIn, T_5) @[INToRecFN.scala 55:28]
    node T_7 = sub(UInt<1>("h00"), io.in) @[INToRecFN.scala 56:27]
    node T_8 = tail(T_7, 1) @[INToRecFN.scala 56:27]
    node absIn = mux(sign, T_8, io.in) @[INToRecFN.scala 56:20]
    node T_9 = shl(absIn, 0) @[INToRecFN.scala 57:32]
    node T_10 = bits(T_9, 63, 32) @[CircuitMath.scala 26:17]
    node T_11 = bits(T_9, 31, 0) @[CircuitMath.scala 27:17]
    node T_13 = neq(T_10, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_14 = bits(T_10, 31, 16) @[CircuitMath.scala 26:17]
    node T_15 = bits(T_10, 15, 0) @[CircuitMath.scala 27:17]
    node T_17 = neq(T_14, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_18 = bits(T_14, 15, 8) @[CircuitMath.scala 26:17]
    node T_19 = bits(T_14, 7, 0) @[CircuitMath.scala 27:17]
    node T_21 = neq(T_18, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_22 = bits(T_18, 7, 4) @[CircuitMath.scala 26:17]
    node T_23 = bits(T_18, 3, 0) @[CircuitMath.scala 27:17]
    node T_25 = neq(T_22, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_26 = bits(T_22, 3, 3) @[CircuitMath.scala 23:12]
    node T_28 = bits(T_22, 2, 2) @[CircuitMath.scala 23:12]
    node T_30 = bits(T_22, 1, 1) @[CircuitMath.scala 21:8]
    node T_31 = shl(T_30, 0) @[CircuitMath.scala 23:10]
    node T_32 = mux(T_28, UInt<2>("h02"), T_31) @[CircuitMath.scala 23:10]
    node T_33 = mux(T_26, UInt<2>("h03"), T_32) @[CircuitMath.scala 23:10]
    node T_34 = bits(T_23, 3, 3) @[CircuitMath.scala 23:12]
    node T_36 = bits(T_23, 2, 2) @[CircuitMath.scala 23:12]
    node T_38 = bits(T_23, 1, 1) @[CircuitMath.scala 21:8]
    node T_39 = shl(T_38, 0) @[CircuitMath.scala 23:10]
    node T_40 = mux(T_36, UInt<2>("h02"), T_39) @[CircuitMath.scala 23:10]
    node T_41 = mux(T_34, UInt<2>("h03"), T_40) @[CircuitMath.scala 23:10]
    node T_42 = mux(T_25, T_33, T_41) @[CircuitMath.scala 29:21]
    node T_43 = cat(T_25, T_42) @[Cat.scala 20:58]
    node T_44 = bits(T_19, 7, 4) @[CircuitMath.scala 26:17]
    node T_45 = bits(T_19, 3, 0) @[CircuitMath.scala 27:17]
    node T_47 = neq(T_44, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_48 = bits(T_44, 3, 3) @[CircuitMath.scala 23:12]
    node T_50 = bits(T_44, 2, 2) @[CircuitMath.scala 23:12]
    node T_52 = bits(T_44, 1, 1) @[CircuitMath.scala 21:8]
    node T_53 = shl(T_52, 0) @[CircuitMath.scala 23:10]
    node T_54 = mux(T_50, UInt<2>("h02"), T_53) @[CircuitMath.scala 23:10]
    node T_55 = mux(T_48, UInt<2>("h03"), T_54) @[CircuitMath.scala 23:10]
    node T_56 = bits(T_45, 3, 3) @[CircuitMath.scala 23:12]
    node T_58 = bits(T_45, 2, 2) @[CircuitMath.scala 23:12]
    node T_60 = bits(T_45, 1, 1) @[CircuitMath.scala 21:8]
    node T_61 = shl(T_60, 0) @[CircuitMath.scala 23:10]
    node T_62 = mux(T_58, UInt<2>("h02"), T_61) @[CircuitMath.scala 23:10]
    node T_63 = mux(T_56, UInt<2>("h03"), T_62) @[CircuitMath.scala 23:10]
    node T_64 = mux(T_47, T_55, T_63) @[CircuitMath.scala 29:21]
    node T_65 = cat(T_47, T_64) @[Cat.scala 20:58]
    node T_66 = mux(T_21, T_43, T_65) @[CircuitMath.scala 29:21]
    node T_67 = cat(T_21, T_66) @[Cat.scala 20:58]
    node T_68 = bits(T_15, 15, 8) @[CircuitMath.scala 26:17]
    node T_69 = bits(T_15, 7, 0) @[CircuitMath.scala 27:17]
    node T_71 = neq(T_68, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_72 = bits(T_68, 7, 4) @[CircuitMath.scala 26:17]
    node T_73 = bits(T_68, 3, 0) @[CircuitMath.scala 27:17]
    node T_75 = neq(T_72, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_76 = bits(T_72, 3, 3) @[CircuitMath.scala 23:12]
    node T_78 = bits(T_72, 2, 2) @[CircuitMath.scala 23:12]
    node T_80 = bits(T_72, 1, 1) @[CircuitMath.scala 21:8]
    node T_81 = shl(T_80, 0) @[CircuitMath.scala 23:10]
    node T_82 = mux(T_78, UInt<2>("h02"), T_81) @[CircuitMath.scala 23:10]
    node T_83 = mux(T_76, UInt<2>("h03"), T_82) @[CircuitMath.scala 23:10]
    node T_84 = bits(T_73, 3, 3) @[CircuitMath.scala 23:12]
    node T_86 = bits(T_73, 2, 2) @[CircuitMath.scala 23:12]
    node T_88 = bits(T_73, 1, 1) @[CircuitMath.scala 21:8]
    node T_89 = shl(T_88, 0) @[CircuitMath.scala 23:10]
    node T_90 = mux(T_86, UInt<2>("h02"), T_89) @[CircuitMath.scala 23:10]
    node T_91 = mux(T_84, UInt<2>("h03"), T_90) @[CircuitMath.scala 23:10]
    node T_92 = mux(T_75, T_83, T_91) @[CircuitMath.scala 29:21]
    node T_93 = cat(T_75, T_92) @[Cat.scala 20:58]
    node T_94 = bits(T_69, 7, 4) @[CircuitMath.scala 26:17]
    node T_95 = bits(T_69, 3, 0) @[CircuitMath.scala 27:17]
    node T_97 = neq(T_94, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_98 = bits(T_94, 3, 3) @[CircuitMath.scala 23:12]
    node T_100 = bits(T_94, 2, 2) @[CircuitMath.scala 23:12]
    node T_102 = bits(T_94, 1, 1) @[CircuitMath.scala 21:8]
    node T_103 = shl(T_102, 0) @[CircuitMath.scala 23:10]
    node T_104 = mux(T_100, UInt<2>("h02"), T_103) @[CircuitMath.scala 23:10]
    node T_105 = mux(T_98, UInt<2>("h03"), T_104) @[CircuitMath.scala 23:10]
    node T_106 = bits(T_95, 3, 3) @[CircuitMath.scala 23:12]
    node T_108 = bits(T_95, 2, 2) @[CircuitMath.scala 23:12]
    node T_110 = bits(T_95, 1, 1) @[CircuitMath.scala 21:8]
    node T_111 = shl(T_110, 0) @[CircuitMath.scala 23:10]
    node T_112 = mux(T_108, UInt<2>("h02"), T_111) @[CircuitMath.scala 23:10]
    node T_113 = mux(T_106, UInt<2>("h03"), T_112) @[CircuitMath.scala 23:10]
    node T_114 = mux(T_97, T_105, T_113) @[CircuitMath.scala 29:21]
    node T_115 = cat(T_97, T_114) @[Cat.scala 20:58]
    node T_116 = mux(T_71, T_93, T_115) @[CircuitMath.scala 29:21]
    node T_117 = cat(T_71, T_116) @[Cat.scala 20:58]
    node T_118 = mux(T_17, T_67, T_117) @[CircuitMath.scala 29:21]
    node T_119 = cat(T_17, T_118) @[Cat.scala 20:58]
    node T_120 = bits(T_11, 31, 16) @[CircuitMath.scala 26:17]
    node T_121 = bits(T_11, 15, 0) @[CircuitMath.scala 27:17]
    node T_123 = neq(T_120, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_124 = bits(T_120, 15, 8) @[CircuitMath.scala 26:17]
    node T_125 = bits(T_120, 7, 0) @[CircuitMath.scala 27:17]
    node T_127 = neq(T_124, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_128 = bits(T_124, 7, 4) @[CircuitMath.scala 26:17]
    node T_129 = bits(T_124, 3, 0) @[CircuitMath.scala 27:17]
    node T_131 = neq(T_128, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_132 = bits(T_128, 3, 3) @[CircuitMath.scala 23:12]
    node T_134 = bits(T_128, 2, 2) @[CircuitMath.scala 23:12]
    node T_136 = bits(T_128, 1, 1) @[CircuitMath.scala 21:8]
    node T_137 = shl(T_136, 0) @[CircuitMath.scala 23:10]
    node T_138 = mux(T_134, UInt<2>("h02"), T_137) @[CircuitMath.scala 23:10]
    node T_139 = mux(T_132, UInt<2>("h03"), T_138) @[CircuitMath.scala 23:10]
    node T_140 = bits(T_129, 3, 3) @[CircuitMath.scala 23:12]
    node T_142 = bits(T_129, 2, 2) @[CircuitMath.scala 23:12]
    node T_144 = bits(T_129, 1, 1) @[CircuitMath.scala 21:8]
    node T_145 = shl(T_144, 0) @[CircuitMath.scala 23:10]
    node T_146 = mux(T_142, UInt<2>("h02"), T_145) @[CircuitMath.scala 23:10]
    node T_147 = mux(T_140, UInt<2>("h03"), T_146) @[CircuitMath.scala 23:10]
    node T_148 = mux(T_131, T_139, T_147) @[CircuitMath.scala 29:21]
    node T_149 = cat(T_131, T_148) @[Cat.scala 20:58]
    node T_150 = bits(T_125, 7, 4) @[CircuitMath.scala 26:17]
    node T_151 = bits(T_125, 3, 0) @[CircuitMath.scala 27:17]
    node T_153 = neq(T_150, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_154 = bits(T_150, 3, 3) @[CircuitMath.scala 23:12]
    node T_156 = bits(T_150, 2, 2) @[CircuitMath.scala 23:12]
    node T_158 = bits(T_150, 1, 1) @[CircuitMath.scala 21:8]
    node T_159 = shl(T_158, 0) @[CircuitMath.scala 23:10]
    node T_160 = mux(T_156, UInt<2>("h02"), T_159) @[CircuitMath.scala 23:10]
    node T_161 = mux(T_154, UInt<2>("h03"), T_160) @[CircuitMath.scala 23:10]
    node T_162 = bits(T_151, 3, 3) @[CircuitMath.scala 23:12]
    node T_164 = bits(T_151, 2, 2) @[CircuitMath.scala 23:12]
    node T_166 = bits(T_151, 1, 1) @[CircuitMath.scala 21:8]
    node T_167 = shl(T_166, 0) @[CircuitMath.scala 23:10]
    node T_168 = mux(T_164, UInt<2>("h02"), T_167) @[CircuitMath.scala 23:10]
    node T_169 = mux(T_162, UInt<2>("h03"), T_168) @[CircuitMath.scala 23:10]
    node T_170 = mux(T_153, T_161, T_169) @[CircuitMath.scala 29:21]
    node T_171 = cat(T_153, T_170) @[Cat.scala 20:58]
    node T_172 = mux(T_127, T_149, T_171) @[CircuitMath.scala 29:21]
    node T_173 = cat(T_127, T_172) @[Cat.scala 20:58]
    node T_174 = bits(T_121, 15, 8) @[CircuitMath.scala 26:17]
    node T_175 = bits(T_121, 7, 0) @[CircuitMath.scala 27:17]
    node T_177 = neq(T_174, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_178 = bits(T_174, 7, 4) @[CircuitMath.scala 26:17]
    node T_179 = bits(T_174, 3, 0) @[CircuitMath.scala 27:17]
    node T_181 = neq(T_178, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_182 = bits(T_178, 3, 3) @[CircuitMath.scala 23:12]
    node T_184 = bits(T_178, 2, 2) @[CircuitMath.scala 23:12]
    node T_186 = bits(T_178, 1, 1) @[CircuitMath.scala 21:8]
    node T_187 = shl(T_186, 0) @[CircuitMath.scala 23:10]
    node T_188 = mux(T_184, UInt<2>("h02"), T_187) @[CircuitMath.scala 23:10]
    node T_189 = mux(T_182, UInt<2>("h03"), T_188) @[CircuitMath.scala 23:10]
    node T_190 = bits(T_179, 3, 3) @[CircuitMath.scala 23:12]
    node T_192 = bits(T_179, 2, 2) @[CircuitMath.scala 23:12]
    node T_194 = bits(T_179, 1, 1) @[CircuitMath.scala 21:8]
    node T_195 = shl(T_194, 0) @[CircuitMath.scala 23:10]
    node T_196 = mux(T_192, UInt<2>("h02"), T_195) @[CircuitMath.scala 23:10]
    node T_197 = mux(T_190, UInt<2>("h03"), T_196) @[CircuitMath.scala 23:10]
    node T_198 = mux(T_181, T_189, T_197) @[CircuitMath.scala 29:21]
    node T_199 = cat(T_181, T_198) @[Cat.scala 20:58]
    node T_200 = bits(T_175, 7, 4) @[CircuitMath.scala 26:17]
    node T_201 = bits(T_175, 3, 0) @[CircuitMath.scala 27:17]
    node T_203 = neq(T_200, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_204 = bits(T_200, 3, 3) @[CircuitMath.scala 23:12]
    node T_206 = bits(T_200, 2, 2) @[CircuitMath.scala 23:12]
    node T_208 = bits(T_200, 1, 1) @[CircuitMath.scala 21:8]
    node T_209 = shl(T_208, 0) @[CircuitMath.scala 23:10]
    node T_210 = mux(T_206, UInt<2>("h02"), T_209) @[CircuitMath.scala 23:10]
    node T_211 = mux(T_204, UInt<2>("h03"), T_210) @[CircuitMath.scala 23:10]
    node T_212 = bits(T_201, 3, 3) @[CircuitMath.scala 23:12]
    node T_214 = bits(T_201, 2, 2) @[CircuitMath.scala 23:12]
    node T_216 = bits(T_201, 1, 1) @[CircuitMath.scala 21:8]
    node T_217 = shl(T_216, 0) @[CircuitMath.scala 23:10]
    node T_218 = mux(T_214, UInt<2>("h02"), T_217) @[CircuitMath.scala 23:10]
    node T_219 = mux(T_212, UInt<2>("h03"), T_218) @[CircuitMath.scala 23:10]
    node T_220 = mux(T_203, T_211, T_219) @[CircuitMath.scala 29:21]
    node T_221 = cat(T_203, T_220) @[Cat.scala 20:58]
    node T_222 = mux(T_177, T_199, T_221) @[CircuitMath.scala 29:21]
    node T_223 = cat(T_177, T_222) @[Cat.scala 20:58]
    node T_224 = mux(T_123, T_173, T_223) @[CircuitMath.scala 29:21]
    node T_225 = cat(T_123, T_224) @[Cat.scala 20:58]
    node T_226 = mux(T_13, T_119, T_225) @[CircuitMath.scala 29:21]
    node T_227 = cat(T_13, T_226) @[Cat.scala 20:58]
    node normCount = not(T_227) @[INToRecFN.scala 57:21]
    node T_228 = dshl(absIn, normCount) @[INToRecFN.scala 58:27]
    node normAbsIn = bits(T_228, 63, 0) @[INToRecFN.scala 58:39]
    node T_230 = bits(normAbsIn, 40, 39) @[INToRecFN.scala 63:26]
    node T_231 = bits(normAbsIn, 38, 0) @[INToRecFN.scala 64:26]
    node T_233 = neq(T_231, UInt<1>("h00")) @[INToRecFN.scala 64:55]
    node roundBits = cat(T_230, T_233) @[Cat.scala 20:58]
    node T_234 = bits(roundBits, 1, 0) @[INToRecFN.scala 72:33]
    node roundInexact = neq(T_234, UInt<1>("h00")) @[INToRecFN.scala 72:40]
    node T_236 = eq(io.roundingMode, UInt<2>("h00")) @[INToRecFN.scala 74:30]
    node T_237 = bits(roundBits, 2, 1) @[INToRecFN.scala 75:22]
    node T_238 = not(T_237) @[INToRecFN.scala 75:29]
    node T_240 = eq(T_238, UInt<1>("h00")) @[INToRecFN.scala 75:29]
    node T_241 = bits(roundBits, 1, 0) @[INToRecFN.scala 75:46]
    node T_242 = not(T_241) @[INToRecFN.scala 75:53]
    node T_244 = eq(T_242, UInt<1>("h00")) @[INToRecFN.scala 75:53]
    node T_245 = or(T_240, T_244) @[INToRecFN.scala 75:34]
    node T_247 = mux(T_236, T_245, UInt<1>("h00")) @[INToRecFN.scala 74:12]
    node T_248 = eq(io.roundingMode, UInt<2>("h02")) @[INToRecFN.scala 78:30]
    node T_249 = and(sign, roundInexact) @[INToRecFN.scala 79:18]
    node T_251 = mux(T_248, T_249, UInt<1>("h00")) @[INToRecFN.scala 78:12]
    node T_252 = or(T_247, T_251) @[INToRecFN.scala 77:11]
    node T_253 = eq(io.roundingMode, UInt<2>("h03")) @[INToRecFN.scala 82:30]
    node T_255 = eq(sign, UInt<1>("h00")) @[INToRecFN.scala 83:13]
    node T_256 = and(T_255, roundInexact) @[INToRecFN.scala 83:20]
    node T_258 = mux(T_253, T_256, UInt<1>("h00")) @[INToRecFN.scala 82:12]
    node round = or(T_252, T_258) @[INToRecFN.scala 81:11]
    node T_260 = bits(normAbsIn, 63, 40) @[INToRecFN.scala 89:34]
    node unroundedNorm = cat(UInt<1>("h00"), T_260) @[Cat.scala 20:58]
    node T_263 = add(unroundedNorm, UInt<1>("h01")) @[INToRecFN.scala 94:48]
    node T_264 = tail(T_263, 1) @[INToRecFN.scala 94:48]
    node roundedNorm = mux(round, T_264, unroundedNorm) @[INToRecFN.scala 94:26]
    node T_265 = not(normCount) @[INToRecFN.scala 97:24]
    node unroundedExp = cat(UInt<1>("h00"), T_265) @[Cat.scala 20:58]
    node T_268 = cat(UInt<1>("h00"), unroundedExp) @[Cat.scala 20:58]
    node T_269 = bits(roundedNorm, 24, 24) @[INToRecFN.scala 106:65]
    node T_270 = add(T_268, T_269) @[INToRecFN.scala 106:52]
    node roundedExp = tail(T_270, 1) @[INToRecFN.scala 106:52]
    node T_271 = bits(normAbsIn, 63, 63) @[INToRecFN.scala 112:22]
    node T_273 = bits(roundedExp, 7, 0) @[INToRecFN.scala 115:27]
    node T_274 = mux(UInt<1>("h00"), UInt<8>("h080"), T_273) @[INToRecFN.scala 113:16]
    node expOut = cat(T_271, T_274) @[Cat.scala 20:58]
    node overflow = or(UInt<1>("h00"), UInt<1>("h00")) @[INToRecFN.scala 119:39]
    node inexact = or(roundInexact, overflow) @[INToRecFN.scala 120:32]
    node T_275 = bits(roundedNorm, 22, 0) @[INToRecFN.scala 122:44]
    node T_276 = cat(sign, expOut) @[Cat.scala 20:58]
    node T_277 = cat(T_276, T_275) @[Cat.scala 20:58]
    io.out <= T_277 @[INToRecFN.scala 122:12]
    node T_280 = cat(UInt<1>("h00"), inexact) @[Cat.scala 20:58]
    node T_281 = cat(UInt<2>("h00"), overflow) @[Cat.scala 20:58]
    node T_282 = cat(T_281, T_280) @[Cat.scala 20:58]
    io.exceptionFlags <= T_282 @[INToRecFN.scala 123:23]
    
  module INToRecFN_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip signedIn : UInt<1>, flip in : UInt<64>, flip roundingMode : UInt<2>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_5 = bits(io.in, 63, 63) @[INToRecFN.scala 55:36]
    node sign = and(io.signedIn, T_5) @[INToRecFN.scala 55:28]
    node T_7 = sub(UInt<1>("h00"), io.in) @[INToRecFN.scala 56:27]
    node T_8 = tail(T_7, 1) @[INToRecFN.scala 56:27]
    node absIn = mux(sign, T_8, io.in) @[INToRecFN.scala 56:20]
    node T_9 = shl(absIn, 0) @[INToRecFN.scala 57:32]
    node T_10 = bits(T_9, 63, 32) @[CircuitMath.scala 26:17]
    node T_11 = bits(T_9, 31, 0) @[CircuitMath.scala 27:17]
    node T_13 = neq(T_10, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_14 = bits(T_10, 31, 16) @[CircuitMath.scala 26:17]
    node T_15 = bits(T_10, 15, 0) @[CircuitMath.scala 27:17]
    node T_17 = neq(T_14, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_18 = bits(T_14, 15, 8) @[CircuitMath.scala 26:17]
    node T_19 = bits(T_14, 7, 0) @[CircuitMath.scala 27:17]
    node T_21 = neq(T_18, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_22 = bits(T_18, 7, 4) @[CircuitMath.scala 26:17]
    node T_23 = bits(T_18, 3, 0) @[CircuitMath.scala 27:17]
    node T_25 = neq(T_22, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_26 = bits(T_22, 3, 3) @[CircuitMath.scala 23:12]
    node T_28 = bits(T_22, 2, 2) @[CircuitMath.scala 23:12]
    node T_30 = bits(T_22, 1, 1) @[CircuitMath.scala 21:8]
    node T_31 = shl(T_30, 0) @[CircuitMath.scala 23:10]
    node T_32 = mux(T_28, UInt<2>("h02"), T_31) @[CircuitMath.scala 23:10]
    node T_33 = mux(T_26, UInt<2>("h03"), T_32) @[CircuitMath.scala 23:10]
    node T_34 = bits(T_23, 3, 3) @[CircuitMath.scala 23:12]
    node T_36 = bits(T_23, 2, 2) @[CircuitMath.scala 23:12]
    node T_38 = bits(T_23, 1, 1) @[CircuitMath.scala 21:8]
    node T_39 = shl(T_38, 0) @[CircuitMath.scala 23:10]
    node T_40 = mux(T_36, UInt<2>("h02"), T_39) @[CircuitMath.scala 23:10]
    node T_41 = mux(T_34, UInt<2>("h03"), T_40) @[CircuitMath.scala 23:10]
    node T_42 = mux(T_25, T_33, T_41) @[CircuitMath.scala 29:21]
    node T_43 = cat(T_25, T_42) @[Cat.scala 20:58]
    node T_44 = bits(T_19, 7, 4) @[CircuitMath.scala 26:17]
    node T_45 = bits(T_19, 3, 0) @[CircuitMath.scala 27:17]
    node T_47 = neq(T_44, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_48 = bits(T_44, 3, 3) @[CircuitMath.scala 23:12]
    node T_50 = bits(T_44, 2, 2) @[CircuitMath.scala 23:12]
    node T_52 = bits(T_44, 1, 1) @[CircuitMath.scala 21:8]
    node T_53 = shl(T_52, 0) @[CircuitMath.scala 23:10]
    node T_54 = mux(T_50, UInt<2>("h02"), T_53) @[CircuitMath.scala 23:10]
    node T_55 = mux(T_48, UInt<2>("h03"), T_54) @[CircuitMath.scala 23:10]
    node T_56 = bits(T_45, 3, 3) @[CircuitMath.scala 23:12]
    node T_58 = bits(T_45, 2, 2) @[CircuitMath.scala 23:12]
    node T_60 = bits(T_45, 1, 1) @[CircuitMath.scala 21:8]
    node T_61 = shl(T_60, 0) @[CircuitMath.scala 23:10]
    node T_62 = mux(T_58, UInt<2>("h02"), T_61) @[CircuitMath.scala 23:10]
    node T_63 = mux(T_56, UInt<2>("h03"), T_62) @[CircuitMath.scala 23:10]
    node T_64 = mux(T_47, T_55, T_63) @[CircuitMath.scala 29:21]
    node T_65 = cat(T_47, T_64) @[Cat.scala 20:58]
    node T_66 = mux(T_21, T_43, T_65) @[CircuitMath.scala 29:21]
    node T_67 = cat(T_21, T_66) @[Cat.scala 20:58]
    node T_68 = bits(T_15, 15, 8) @[CircuitMath.scala 26:17]
    node T_69 = bits(T_15, 7, 0) @[CircuitMath.scala 27:17]
    node T_71 = neq(T_68, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_72 = bits(T_68, 7, 4) @[CircuitMath.scala 26:17]
    node T_73 = bits(T_68, 3, 0) @[CircuitMath.scala 27:17]
    node T_75 = neq(T_72, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_76 = bits(T_72, 3, 3) @[CircuitMath.scala 23:12]
    node T_78 = bits(T_72, 2, 2) @[CircuitMath.scala 23:12]
    node T_80 = bits(T_72, 1, 1) @[CircuitMath.scala 21:8]
    node T_81 = shl(T_80, 0) @[CircuitMath.scala 23:10]
    node T_82 = mux(T_78, UInt<2>("h02"), T_81) @[CircuitMath.scala 23:10]
    node T_83 = mux(T_76, UInt<2>("h03"), T_82) @[CircuitMath.scala 23:10]
    node T_84 = bits(T_73, 3, 3) @[CircuitMath.scala 23:12]
    node T_86 = bits(T_73, 2, 2) @[CircuitMath.scala 23:12]
    node T_88 = bits(T_73, 1, 1) @[CircuitMath.scala 21:8]
    node T_89 = shl(T_88, 0) @[CircuitMath.scala 23:10]
    node T_90 = mux(T_86, UInt<2>("h02"), T_89) @[CircuitMath.scala 23:10]
    node T_91 = mux(T_84, UInt<2>("h03"), T_90) @[CircuitMath.scala 23:10]
    node T_92 = mux(T_75, T_83, T_91) @[CircuitMath.scala 29:21]
    node T_93 = cat(T_75, T_92) @[Cat.scala 20:58]
    node T_94 = bits(T_69, 7, 4) @[CircuitMath.scala 26:17]
    node T_95 = bits(T_69, 3, 0) @[CircuitMath.scala 27:17]
    node T_97 = neq(T_94, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_98 = bits(T_94, 3, 3) @[CircuitMath.scala 23:12]
    node T_100 = bits(T_94, 2, 2) @[CircuitMath.scala 23:12]
    node T_102 = bits(T_94, 1, 1) @[CircuitMath.scala 21:8]
    node T_103 = shl(T_102, 0) @[CircuitMath.scala 23:10]
    node T_104 = mux(T_100, UInt<2>("h02"), T_103) @[CircuitMath.scala 23:10]
    node T_105 = mux(T_98, UInt<2>("h03"), T_104) @[CircuitMath.scala 23:10]
    node T_106 = bits(T_95, 3, 3) @[CircuitMath.scala 23:12]
    node T_108 = bits(T_95, 2, 2) @[CircuitMath.scala 23:12]
    node T_110 = bits(T_95, 1, 1) @[CircuitMath.scala 21:8]
    node T_111 = shl(T_110, 0) @[CircuitMath.scala 23:10]
    node T_112 = mux(T_108, UInt<2>("h02"), T_111) @[CircuitMath.scala 23:10]
    node T_113 = mux(T_106, UInt<2>("h03"), T_112) @[CircuitMath.scala 23:10]
    node T_114 = mux(T_97, T_105, T_113) @[CircuitMath.scala 29:21]
    node T_115 = cat(T_97, T_114) @[Cat.scala 20:58]
    node T_116 = mux(T_71, T_93, T_115) @[CircuitMath.scala 29:21]
    node T_117 = cat(T_71, T_116) @[Cat.scala 20:58]
    node T_118 = mux(T_17, T_67, T_117) @[CircuitMath.scala 29:21]
    node T_119 = cat(T_17, T_118) @[Cat.scala 20:58]
    node T_120 = bits(T_11, 31, 16) @[CircuitMath.scala 26:17]
    node T_121 = bits(T_11, 15, 0) @[CircuitMath.scala 27:17]
    node T_123 = neq(T_120, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_124 = bits(T_120, 15, 8) @[CircuitMath.scala 26:17]
    node T_125 = bits(T_120, 7, 0) @[CircuitMath.scala 27:17]
    node T_127 = neq(T_124, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_128 = bits(T_124, 7, 4) @[CircuitMath.scala 26:17]
    node T_129 = bits(T_124, 3, 0) @[CircuitMath.scala 27:17]
    node T_131 = neq(T_128, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_132 = bits(T_128, 3, 3) @[CircuitMath.scala 23:12]
    node T_134 = bits(T_128, 2, 2) @[CircuitMath.scala 23:12]
    node T_136 = bits(T_128, 1, 1) @[CircuitMath.scala 21:8]
    node T_137 = shl(T_136, 0) @[CircuitMath.scala 23:10]
    node T_138 = mux(T_134, UInt<2>("h02"), T_137) @[CircuitMath.scala 23:10]
    node T_139 = mux(T_132, UInt<2>("h03"), T_138) @[CircuitMath.scala 23:10]
    node T_140 = bits(T_129, 3, 3) @[CircuitMath.scala 23:12]
    node T_142 = bits(T_129, 2, 2) @[CircuitMath.scala 23:12]
    node T_144 = bits(T_129, 1, 1) @[CircuitMath.scala 21:8]
    node T_145 = shl(T_144, 0) @[CircuitMath.scala 23:10]
    node T_146 = mux(T_142, UInt<2>("h02"), T_145) @[CircuitMath.scala 23:10]
    node T_147 = mux(T_140, UInt<2>("h03"), T_146) @[CircuitMath.scala 23:10]
    node T_148 = mux(T_131, T_139, T_147) @[CircuitMath.scala 29:21]
    node T_149 = cat(T_131, T_148) @[Cat.scala 20:58]
    node T_150 = bits(T_125, 7, 4) @[CircuitMath.scala 26:17]
    node T_151 = bits(T_125, 3, 0) @[CircuitMath.scala 27:17]
    node T_153 = neq(T_150, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_154 = bits(T_150, 3, 3) @[CircuitMath.scala 23:12]
    node T_156 = bits(T_150, 2, 2) @[CircuitMath.scala 23:12]
    node T_158 = bits(T_150, 1, 1) @[CircuitMath.scala 21:8]
    node T_159 = shl(T_158, 0) @[CircuitMath.scala 23:10]
    node T_160 = mux(T_156, UInt<2>("h02"), T_159) @[CircuitMath.scala 23:10]
    node T_161 = mux(T_154, UInt<2>("h03"), T_160) @[CircuitMath.scala 23:10]
    node T_162 = bits(T_151, 3, 3) @[CircuitMath.scala 23:12]
    node T_164 = bits(T_151, 2, 2) @[CircuitMath.scala 23:12]
    node T_166 = bits(T_151, 1, 1) @[CircuitMath.scala 21:8]
    node T_167 = shl(T_166, 0) @[CircuitMath.scala 23:10]
    node T_168 = mux(T_164, UInt<2>("h02"), T_167) @[CircuitMath.scala 23:10]
    node T_169 = mux(T_162, UInt<2>("h03"), T_168) @[CircuitMath.scala 23:10]
    node T_170 = mux(T_153, T_161, T_169) @[CircuitMath.scala 29:21]
    node T_171 = cat(T_153, T_170) @[Cat.scala 20:58]
    node T_172 = mux(T_127, T_149, T_171) @[CircuitMath.scala 29:21]
    node T_173 = cat(T_127, T_172) @[Cat.scala 20:58]
    node T_174 = bits(T_121, 15, 8) @[CircuitMath.scala 26:17]
    node T_175 = bits(T_121, 7, 0) @[CircuitMath.scala 27:17]
    node T_177 = neq(T_174, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_178 = bits(T_174, 7, 4) @[CircuitMath.scala 26:17]
    node T_179 = bits(T_174, 3, 0) @[CircuitMath.scala 27:17]
    node T_181 = neq(T_178, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_182 = bits(T_178, 3, 3) @[CircuitMath.scala 23:12]
    node T_184 = bits(T_178, 2, 2) @[CircuitMath.scala 23:12]
    node T_186 = bits(T_178, 1, 1) @[CircuitMath.scala 21:8]
    node T_187 = shl(T_186, 0) @[CircuitMath.scala 23:10]
    node T_188 = mux(T_184, UInt<2>("h02"), T_187) @[CircuitMath.scala 23:10]
    node T_189 = mux(T_182, UInt<2>("h03"), T_188) @[CircuitMath.scala 23:10]
    node T_190 = bits(T_179, 3, 3) @[CircuitMath.scala 23:12]
    node T_192 = bits(T_179, 2, 2) @[CircuitMath.scala 23:12]
    node T_194 = bits(T_179, 1, 1) @[CircuitMath.scala 21:8]
    node T_195 = shl(T_194, 0) @[CircuitMath.scala 23:10]
    node T_196 = mux(T_192, UInt<2>("h02"), T_195) @[CircuitMath.scala 23:10]
    node T_197 = mux(T_190, UInt<2>("h03"), T_196) @[CircuitMath.scala 23:10]
    node T_198 = mux(T_181, T_189, T_197) @[CircuitMath.scala 29:21]
    node T_199 = cat(T_181, T_198) @[Cat.scala 20:58]
    node T_200 = bits(T_175, 7, 4) @[CircuitMath.scala 26:17]
    node T_201 = bits(T_175, 3, 0) @[CircuitMath.scala 27:17]
    node T_203 = neq(T_200, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_204 = bits(T_200, 3, 3) @[CircuitMath.scala 23:12]
    node T_206 = bits(T_200, 2, 2) @[CircuitMath.scala 23:12]
    node T_208 = bits(T_200, 1, 1) @[CircuitMath.scala 21:8]
    node T_209 = shl(T_208, 0) @[CircuitMath.scala 23:10]
    node T_210 = mux(T_206, UInt<2>("h02"), T_209) @[CircuitMath.scala 23:10]
    node T_211 = mux(T_204, UInt<2>("h03"), T_210) @[CircuitMath.scala 23:10]
    node T_212 = bits(T_201, 3, 3) @[CircuitMath.scala 23:12]
    node T_214 = bits(T_201, 2, 2) @[CircuitMath.scala 23:12]
    node T_216 = bits(T_201, 1, 1) @[CircuitMath.scala 21:8]
    node T_217 = shl(T_216, 0) @[CircuitMath.scala 23:10]
    node T_218 = mux(T_214, UInt<2>("h02"), T_217) @[CircuitMath.scala 23:10]
    node T_219 = mux(T_212, UInt<2>("h03"), T_218) @[CircuitMath.scala 23:10]
    node T_220 = mux(T_203, T_211, T_219) @[CircuitMath.scala 29:21]
    node T_221 = cat(T_203, T_220) @[Cat.scala 20:58]
    node T_222 = mux(T_177, T_199, T_221) @[CircuitMath.scala 29:21]
    node T_223 = cat(T_177, T_222) @[Cat.scala 20:58]
    node T_224 = mux(T_123, T_173, T_223) @[CircuitMath.scala 29:21]
    node T_225 = cat(T_123, T_224) @[Cat.scala 20:58]
    node T_226 = mux(T_13, T_119, T_225) @[CircuitMath.scala 29:21]
    node T_227 = cat(T_13, T_226) @[Cat.scala 20:58]
    node normCount = not(T_227) @[INToRecFN.scala 57:21]
    node T_228 = dshl(absIn, normCount) @[INToRecFN.scala 58:27]
    node normAbsIn = bits(T_228, 63, 0) @[INToRecFN.scala 58:39]
    node T_230 = bits(normAbsIn, 11, 10) @[INToRecFN.scala 63:26]
    node T_231 = bits(normAbsIn, 9, 0) @[INToRecFN.scala 64:26]
    node T_233 = neq(T_231, UInt<1>("h00")) @[INToRecFN.scala 64:55]
    node roundBits = cat(T_230, T_233) @[Cat.scala 20:58]
    node T_234 = bits(roundBits, 1, 0) @[INToRecFN.scala 72:33]
    node roundInexact = neq(T_234, UInt<1>("h00")) @[INToRecFN.scala 72:40]
    node T_236 = eq(io.roundingMode, UInt<2>("h00")) @[INToRecFN.scala 74:30]
    node T_237 = bits(roundBits, 2, 1) @[INToRecFN.scala 75:22]
    node T_238 = not(T_237) @[INToRecFN.scala 75:29]
    node T_240 = eq(T_238, UInt<1>("h00")) @[INToRecFN.scala 75:29]
    node T_241 = bits(roundBits, 1, 0) @[INToRecFN.scala 75:46]
    node T_242 = not(T_241) @[INToRecFN.scala 75:53]
    node T_244 = eq(T_242, UInt<1>("h00")) @[INToRecFN.scala 75:53]
    node T_245 = or(T_240, T_244) @[INToRecFN.scala 75:34]
    node T_247 = mux(T_236, T_245, UInt<1>("h00")) @[INToRecFN.scala 74:12]
    node T_248 = eq(io.roundingMode, UInt<2>("h02")) @[INToRecFN.scala 78:30]
    node T_249 = and(sign, roundInexact) @[INToRecFN.scala 79:18]
    node T_251 = mux(T_248, T_249, UInt<1>("h00")) @[INToRecFN.scala 78:12]
    node T_252 = or(T_247, T_251) @[INToRecFN.scala 77:11]
    node T_253 = eq(io.roundingMode, UInt<2>("h03")) @[INToRecFN.scala 82:30]
    node T_255 = eq(sign, UInt<1>("h00")) @[INToRecFN.scala 83:13]
    node T_256 = and(T_255, roundInexact) @[INToRecFN.scala 83:20]
    node T_258 = mux(T_253, T_256, UInt<1>("h00")) @[INToRecFN.scala 82:12]
    node round = or(T_252, T_258) @[INToRecFN.scala 81:11]
    node T_260 = bits(normAbsIn, 63, 11) @[INToRecFN.scala 89:34]
    node unroundedNorm = cat(UInt<1>("h00"), T_260) @[Cat.scala 20:58]
    node T_263 = add(unroundedNorm, UInt<1>("h01")) @[INToRecFN.scala 94:48]
    node T_264 = tail(T_263, 1) @[INToRecFN.scala 94:48]
    node roundedNorm = mux(round, T_264, unroundedNorm) @[INToRecFN.scala 94:26]
    node T_265 = not(normCount) @[INToRecFN.scala 97:24]
    node unroundedExp = cat(UInt<4>("h00"), T_265) @[Cat.scala 20:58]
    node T_268 = cat(UInt<1>("h00"), unroundedExp) @[Cat.scala 20:58]
    node T_269 = bits(roundedNorm, 53, 53) @[INToRecFN.scala 106:65]
    node T_270 = add(T_268, T_269) @[INToRecFN.scala 106:52]
    node roundedExp = tail(T_270, 1) @[INToRecFN.scala 106:52]
    node T_271 = bits(normAbsIn, 63, 63) @[INToRecFN.scala 112:22]
    node T_273 = bits(roundedExp, 10, 0) @[INToRecFN.scala 115:27]
    node T_274 = mux(UInt<1>("h00"), UInt<11>("h0400"), T_273) @[INToRecFN.scala 113:16]
    node expOut = cat(T_271, T_274) @[Cat.scala 20:58]
    node overflow = or(UInt<1>("h00"), UInt<1>("h00")) @[INToRecFN.scala 119:39]
    node inexact = or(roundInexact, overflow) @[INToRecFN.scala 120:32]
    node T_275 = bits(roundedNorm, 51, 0) @[INToRecFN.scala 122:44]
    node T_276 = cat(sign, expOut) @[Cat.scala 20:58]
    node T_277 = cat(T_276, T_275) @[Cat.scala 20:58]
    io.out <= T_277 @[INToRecFN.scala 122:12]
    node T_280 = cat(UInt<1>("h00"), inexact) @[Cat.scala 20:58]
    node T_281 = cat(UInt<2>("h00"), overflow) @[Cat.scala 20:58]
    node T_282 = cat(T_281, T_280) @[Cat.scala 20:58]
    io.exceptionFlags <= T_282 @[INToRecFN.scala 123:23]
    
  module IntToFP : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}
    
    io is invalid
    reg T_132 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_132 <= io.in.valid
    reg T_133 : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    when io.in.valid : @[Reg.scala 29:19]
      T_133 <- io.in.bits @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    wire in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}} @[Valid.scala 39:21]
    in is invalid @[Valid.scala 39:21]
    in.valid <= T_132 @[Valid.scala 40:17]
    in.bits <- T_133 @[Valid.scala 41:16]
    wire mux : {data : UInt<65>, exc : UInt<5>} @[fpu.scala 350:17]
    mux is invalid @[fpu.scala 350:17]
    mux.exc <= UInt<1>("h00") @[fpu.scala 351:11]
    node T_257 = bits(in.bits.in1, 31, 31) @[recFNFromFN.scala 47:22]
    node T_258 = bits(in.bits.in1, 30, 23) @[recFNFromFN.scala 48:23]
    node T_259 = bits(in.bits.in1, 22, 0) @[recFNFromFN.scala 49:25]
    node T_261 = eq(T_258, UInt<1>("h00")) @[recFNFromFN.scala 51:34]
    node T_263 = eq(T_259, UInt<1>("h00")) @[recFNFromFN.scala 52:38]
    node T_264 = and(T_261, T_263) @[recFNFromFN.scala 53:34]
    node T_265 = shl(T_259, 9) @[recFNFromFN.scala 56:26]
    node T_266 = bits(T_265, 31, 16) @[CircuitMath.scala 26:17]
    node T_267 = bits(T_265, 15, 0) @[CircuitMath.scala 27:17]
    node T_269 = neq(T_266, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_270 = bits(T_266, 15, 8) @[CircuitMath.scala 26:17]
    node T_271 = bits(T_266, 7, 0) @[CircuitMath.scala 27:17]
    node T_273 = neq(T_270, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_274 = bits(T_270, 7, 4) @[CircuitMath.scala 26:17]
    node T_275 = bits(T_270, 3, 0) @[CircuitMath.scala 27:17]
    node T_277 = neq(T_274, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_278 = bits(T_274, 3, 3) @[CircuitMath.scala 23:12]
    node T_280 = bits(T_274, 2, 2) @[CircuitMath.scala 23:12]
    node T_282 = bits(T_274, 1, 1) @[CircuitMath.scala 21:8]
    node T_283 = shl(T_282, 0) @[CircuitMath.scala 23:10]
    node T_284 = mux(T_280, UInt<2>("h02"), T_283) @[CircuitMath.scala 23:10]
    node T_285 = mux(T_278, UInt<2>("h03"), T_284) @[CircuitMath.scala 23:10]
    node T_286 = bits(T_275, 3, 3) @[CircuitMath.scala 23:12]
    node T_288 = bits(T_275, 2, 2) @[CircuitMath.scala 23:12]
    node T_290 = bits(T_275, 1, 1) @[CircuitMath.scala 21:8]
    node T_291 = shl(T_290, 0) @[CircuitMath.scala 23:10]
    node T_292 = mux(T_288, UInt<2>("h02"), T_291) @[CircuitMath.scala 23:10]
    node T_293 = mux(T_286, UInt<2>("h03"), T_292) @[CircuitMath.scala 23:10]
    node T_294 = mux(T_277, T_285, T_293) @[CircuitMath.scala 29:21]
    node T_295 = cat(T_277, T_294) @[Cat.scala 20:58]
    node T_296 = bits(T_271, 7, 4) @[CircuitMath.scala 26:17]
    node T_297 = bits(T_271, 3, 0) @[CircuitMath.scala 27:17]
    node T_299 = neq(T_296, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_300 = bits(T_296, 3, 3) @[CircuitMath.scala 23:12]
    node T_302 = bits(T_296, 2, 2) @[CircuitMath.scala 23:12]
    node T_304 = bits(T_296, 1, 1) @[CircuitMath.scala 21:8]
    node T_305 = shl(T_304, 0) @[CircuitMath.scala 23:10]
    node T_306 = mux(T_302, UInt<2>("h02"), T_305) @[CircuitMath.scala 23:10]
    node T_307 = mux(T_300, UInt<2>("h03"), T_306) @[CircuitMath.scala 23:10]
    node T_308 = bits(T_297, 3, 3) @[CircuitMath.scala 23:12]
    node T_310 = bits(T_297, 2, 2) @[CircuitMath.scala 23:12]
    node T_312 = bits(T_297, 1, 1) @[CircuitMath.scala 21:8]
    node T_313 = shl(T_312, 0) @[CircuitMath.scala 23:10]
    node T_314 = mux(T_310, UInt<2>("h02"), T_313) @[CircuitMath.scala 23:10]
    node T_315 = mux(T_308, UInt<2>("h03"), T_314) @[CircuitMath.scala 23:10]
    node T_316 = mux(T_299, T_307, T_315) @[CircuitMath.scala 29:21]
    node T_317 = cat(T_299, T_316) @[Cat.scala 20:58]
    node T_318 = mux(T_273, T_295, T_317) @[CircuitMath.scala 29:21]
    node T_319 = cat(T_273, T_318) @[Cat.scala 20:58]
    node T_320 = bits(T_267, 15, 8) @[CircuitMath.scala 26:17]
    node T_321 = bits(T_267, 7, 0) @[CircuitMath.scala 27:17]
    node T_323 = neq(T_320, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_324 = bits(T_320, 7, 4) @[CircuitMath.scala 26:17]
    node T_325 = bits(T_320, 3, 0) @[CircuitMath.scala 27:17]
    node T_327 = neq(T_324, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_328 = bits(T_324, 3, 3) @[CircuitMath.scala 23:12]
    node T_330 = bits(T_324, 2, 2) @[CircuitMath.scala 23:12]
    node T_332 = bits(T_324, 1, 1) @[CircuitMath.scala 21:8]
    node T_333 = shl(T_332, 0) @[CircuitMath.scala 23:10]
    node T_334 = mux(T_330, UInt<2>("h02"), T_333) @[CircuitMath.scala 23:10]
    node T_335 = mux(T_328, UInt<2>("h03"), T_334) @[CircuitMath.scala 23:10]
    node T_336 = bits(T_325, 3, 3) @[CircuitMath.scala 23:12]
    node T_338 = bits(T_325, 2, 2) @[CircuitMath.scala 23:12]
    node T_340 = bits(T_325, 1, 1) @[CircuitMath.scala 21:8]
    node T_341 = shl(T_340, 0) @[CircuitMath.scala 23:10]
    node T_342 = mux(T_338, UInt<2>("h02"), T_341) @[CircuitMath.scala 23:10]
    node T_343 = mux(T_336, UInt<2>("h03"), T_342) @[CircuitMath.scala 23:10]
    node T_344 = mux(T_327, T_335, T_343) @[CircuitMath.scala 29:21]
    node T_345 = cat(T_327, T_344) @[Cat.scala 20:58]
    node T_346 = bits(T_321, 7, 4) @[CircuitMath.scala 26:17]
    node T_347 = bits(T_321, 3, 0) @[CircuitMath.scala 27:17]
    node T_349 = neq(T_346, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_350 = bits(T_346, 3, 3) @[CircuitMath.scala 23:12]
    node T_352 = bits(T_346, 2, 2) @[CircuitMath.scala 23:12]
    node T_354 = bits(T_346, 1, 1) @[CircuitMath.scala 21:8]
    node T_355 = shl(T_354, 0) @[CircuitMath.scala 23:10]
    node T_356 = mux(T_352, UInt<2>("h02"), T_355) @[CircuitMath.scala 23:10]
    node T_357 = mux(T_350, UInt<2>("h03"), T_356) @[CircuitMath.scala 23:10]
    node T_358 = bits(T_347, 3, 3) @[CircuitMath.scala 23:12]
    node T_360 = bits(T_347, 2, 2) @[CircuitMath.scala 23:12]
    node T_362 = bits(T_347, 1, 1) @[CircuitMath.scala 21:8]
    node T_363 = shl(T_362, 0) @[CircuitMath.scala 23:10]
    node T_364 = mux(T_360, UInt<2>("h02"), T_363) @[CircuitMath.scala 23:10]
    node T_365 = mux(T_358, UInt<2>("h03"), T_364) @[CircuitMath.scala 23:10]
    node T_366 = mux(T_349, T_357, T_365) @[CircuitMath.scala 29:21]
    node T_367 = cat(T_349, T_366) @[Cat.scala 20:58]
    node T_368 = mux(T_323, T_345, T_367) @[CircuitMath.scala 29:21]
    node T_369 = cat(T_323, T_368) @[Cat.scala 20:58]
    node T_370 = mux(T_269, T_319, T_369) @[CircuitMath.scala 29:21]
    node T_371 = cat(T_269, T_370) @[Cat.scala 20:58]
    node T_372 = not(T_371) @[recFNFromFN.scala 56:13]
    node T_373 = dshl(T_259, T_372) @[recFNFromFN.scala 58:25]
    node T_374 = bits(T_373, 21, 0) @[recFNFromFN.scala 58:37]
    node T_376 = cat(T_374, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_381 = mux(UInt<1>("h01"), UInt<9>("h01ff"), UInt<9>("h00")) @[Bitwise.scala 33:12]
    node T_382 = xor(T_372, T_381) @[recFNFromFN.scala 62:27]
    node T_383 = mux(T_261, T_382, T_258) @[recFNFromFN.scala 61:16]
    node T_387 = mux(T_261, UInt<2>("h02"), UInt<1>("h01")) @[recFNFromFN.scala 64:47]
    node T_388 = or(UInt<8>("h080"), T_387) @[recFNFromFN.scala 64:42]
    node T_389 = add(T_383, T_388) @[recFNFromFN.scala 64:15]
    node T_390 = tail(T_389, 1) @[recFNFromFN.scala 64:15]
    node T_391 = bits(T_390, 8, 7) @[recFNFromFN.scala 67:25]
    node T_393 = eq(T_391, UInt<2>("h03")) @[recFNFromFN.scala 67:50]
    node T_395 = eq(T_263, UInt<1>("h00")) @[recFNFromFN.scala 68:17]
    node T_396 = and(T_393, T_395) @[recFNFromFN.scala 67:63]
    node T_397 = bits(T_264, 0, 0) @[Bitwise.scala 33:15]
    node T_400 = mux(T_397, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12]
    node T_401 = shl(T_400, 6) @[recFNFromFN.scala 71:45]
    node T_402 = not(T_401) @[recFNFromFN.scala 71:28]
    node T_403 = and(T_390, T_402) @[recFNFromFN.scala 71:26]
    node T_404 = shl(T_396, 6) @[recFNFromFN.scala 72:22]
    node T_405 = or(T_403, T_404) @[recFNFromFN.scala 71:64]
    node T_406 = mux(T_261, T_376, T_259) @[recFNFromFN.scala 73:27]
    node T_407 = cat(T_257, T_405) @[Cat.scala 20:58]
    node T_408 = cat(T_407, T_406) @[Cat.scala 20:58]
    mux.data <= T_408 @[fpu.scala 352:12]
    node T_410 = eq(in.bits.single, UInt<1>("h00")) @[fpu.scala 353:24]
    when T_410 : @[fpu.scala 353:41]
      node T_411 = bits(in.bits.in1, 63, 63) @[recFNFromFN.scala 47:22]
      node T_412 = bits(in.bits.in1, 62, 52) @[recFNFromFN.scala 48:23]
      node T_413 = bits(in.bits.in1, 51, 0) @[recFNFromFN.scala 49:25]
      node T_415 = eq(T_412, UInt<1>("h00")) @[recFNFromFN.scala 51:34]
      node T_417 = eq(T_413, UInt<1>("h00")) @[recFNFromFN.scala 52:38]
      node T_418 = and(T_415, T_417) @[recFNFromFN.scala 53:34]
      node T_419 = shl(T_413, 12) @[recFNFromFN.scala 56:26]
      node T_420 = bits(T_419, 63, 32) @[CircuitMath.scala 26:17]
      node T_421 = bits(T_419, 31, 0) @[CircuitMath.scala 27:17]
      node T_423 = neq(T_420, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_424 = bits(T_420, 31, 16) @[CircuitMath.scala 26:17]
      node T_425 = bits(T_420, 15, 0) @[CircuitMath.scala 27:17]
      node T_427 = neq(T_424, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_428 = bits(T_424, 15, 8) @[CircuitMath.scala 26:17]
      node T_429 = bits(T_424, 7, 0) @[CircuitMath.scala 27:17]
      node T_431 = neq(T_428, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_432 = bits(T_428, 7, 4) @[CircuitMath.scala 26:17]
      node T_433 = bits(T_428, 3, 0) @[CircuitMath.scala 27:17]
      node T_435 = neq(T_432, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_436 = bits(T_432, 3, 3) @[CircuitMath.scala 23:12]
      node T_438 = bits(T_432, 2, 2) @[CircuitMath.scala 23:12]
      node T_440 = bits(T_432, 1, 1) @[CircuitMath.scala 21:8]
      node T_441 = shl(T_440, 0) @[CircuitMath.scala 23:10]
      node T_442 = mux(T_438, UInt<2>("h02"), T_441) @[CircuitMath.scala 23:10]
      node T_443 = mux(T_436, UInt<2>("h03"), T_442) @[CircuitMath.scala 23:10]
      node T_444 = bits(T_433, 3, 3) @[CircuitMath.scala 23:12]
      node T_446 = bits(T_433, 2, 2) @[CircuitMath.scala 23:12]
      node T_448 = bits(T_433, 1, 1) @[CircuitMath.scala 21:8]
      node T_449 = shl(T_448, 0) @[CircuitMath.scala 23:10]
      node T_450 = mux(T_446, UInt<2>("h02"), T_449) @[CircuitMath.scala 23:10]
      node T_451 = mux(T_444, UInt<2>("h03"), T_450) @[CircuitMath.scala 23:10]
      node T_452 = mux(T_435, T_443, T_451) @[CircuitMath.scala 29:21]
      node T_453 = cat(T_435, T_452) @[Cat.scala 20:58]
      node T_454 = bits(T_429, 7, 4) @[CircuitMath.scala 26:17]
      node T_455 = bits(T_429, 3, 0) @[CircuitMath.scala 27:17]
      node T_457 = neq(T_454, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_458 = bits(T_454, 3, 3) @[CircuitMath.scala 23:12]
      node T_460 = bits(T_454, 2, 2) @[CircuitMath.scala 23:12]
      node T_462 = bits(T_454, 1, 1) @[CircuitMath.scala 21:8]
      node T_463 = shl(T_462, 0) @[CircuitMath.scala 23:10]
      node T_464 = mux(T_460, UInt<2>("h02"), T_463) @[CircuitMath.scala 23:10]
      node T_465 = mux(T_458, UInt<2>("h03"), T_464) @[CircuitMath.scala 23:10]
      node T_466 = bits(T_455, 3, 3) @[CircuitMath.scala 23:12]
      node T_468 = bits(T_455, 2, 2) @[CircuitMath.scala 23:12]
      node T_470 = bits(T_455, 1, 1) @[CircuitMath.scala 21:8]
      node T_471 = shl(T_470, 0) @[CircuitMath.scala 23:10]
      node T_472 = mux(T_468, UInt<2>("h02"), T_471) @[CircuitMath.scala 23:10]
      node T_473 = mux(T_466, UInt<2>("h03"), T_472) @[CircuitMath.scala 23:10]
      node T_474 = mux(T_457, T_465, T_473) @[CircuitMath.scala 29:21]
      node T_475 = cat(T_457, T_474) @[Cat.scala 20:58]
      node T_476 = mux(T_431, T_453, T_475) @[CircuitMath.scala 29:21]
      node T_477 = cat(T_431, T_476) @[Cat.scala 20:58]
      node T_478 = bits(T_425, 15, 8) @[CircuitMath.scala 26:17]
      node T_479 = bits(T_425, 7, 0) @[CircuitMath.scala 27:17]
      node T_481 = neq(T_478, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_482 = bits(T_478, 7, 4) @[CircuitMath.scala 26:17]
      node T_483 = bits(T_478, 3, 0) @[CircuitMath.scala 27:17]
      node T_485 = neq(T_482, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_486 = bits(T_482, 3, 3) @[CircuitMath.scala 23:12]
      node T_488 = bits(T_482, 2, 2) @[CircuitMath.scala 23:12]
      node T_490 = bits(T_482, 1, 1) @[CircuitMath.scala 21:8]
      node T_491 = shl(T_490, 0) @[CircuitMath.scala 23:10]
      node T_492 = mux(T_488, UInt<2>("h02"), T_491) @[CircuitMath.scala 23:10]
      node T_493 = mux(T_486, UInt<2>("h03"), T_492) @[CircuitMath.scala 23:10]
      node T_494 = bits(T_483, 3, 3) @[CircuitMath.scala 23:12]
      node T_496 = bits(T_483, 2, 2) @[CircuitMath.scala 23:12]
      node T_498 = bits(T_483, 1, 1) @[CircuitMath.scala 21:8]
      node T_499 = shl(T_498, 0) @[CircuitMath.scala 23:10]
      node T_500 = mux(T_496, UInt<2>("h02"), T_499) @[CircuitMath.scala 23:10]
      node T_501 = mux(T_494, UInt<2>("h03"), T_500) @[CircuitMath.scala 23:10]
      node T_502 = mux(T_485, T_493, T_501) @[CircuitMath.scala 29:21]
      node T_503 = cat(T_485, T_502) @[Cat.scala 20:58]
      node T_504 = bits(T_479, 7, 4) @[CircuitMath.scala 26:17]
      node T_505 = bits(T_479, 3, 0) @[CircuitMath.scala 27:17]
      node T_507 = neq(T_504, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_508 = bits(T_504, 3, 3) @[CircuitMath.scala 23:12]
      node T_510 = bits(T_504, 2, 2) @[CircuitMath.scala 23:12]
      node T_512 = bits(T_504, 1, 1) @[CircuitMath.scala 21:8]
      node T_513 = shl(T_512, 0) @[CircuitMath.scala 23:10]
      node T_514 = mux(T_510, UInt<2>("h02"), T_513) @[CircuitMath.scala 23:10]
      node T_515 = mux(T_508, UInt<2>("h03"), T_514) @[CircuitMath.scala 23:10]
      node T_516 = bits(T_505, 3, 3) @[CircuitMath.scala 23:12]
      node T_518 = bits(T_505, 2, 2) @[CircuitMath.scala 23:12]
      node T_520 = bits(T_505, 1, 1) @[CircuitMath.scala 21:8]
      node T_521 = shl(T_520, 0) @[CircuitMath.scala 23:10]
      node T_522 = mux(T_518, UInt<2>("h02"), T_521) @[CircuitMath.scala 23:10]
      node T_523 = mux(T_516, UInt<2>("h03"), T_522) @[CircuitMath.scala 23:10]
      node T_524 = mux(T_507, T_515, T_523) @[CircuitMath.scala 29:21]
      node T_525 = cat(T_507, T_524) @[Cat.scala 20:58]
      node T_526 = mux(T_481, T_503, T_525) @[CircuitMath.scala 29:21]
      node T_527 = cat(T_481, T_526) @[Cat.scala 20:58]
      node T_528 = mux(T_427, T_477, T_527) @[CircuitMath.scala 29:21]
      node T_529 = cat(T_427, T_528) @[Cat.scala 20:58]
      node T_530 = bits(T_421, 31, 16) @[CircuitMath.scala 26:17]
      node T_531 = bits(T_421, 15, 0) @[CircuitMath.scala 27:17]
      node T_533 = neq(T_530, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_534 = bits(T_530, 15, 8) @[CircuitMath.scala 26:17]
      node T_535 = bits(T_530, 7, 0) @[CircuitMath.scala 27:17]
      node T_537 = neq(T_534, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_538 = bits(T_534, 7, 4) @[CircuitMath.scala 26:17]
      node T_539 = bits(T_534, 3, 0) @[CircuitMath.scala 27:17]
      node T_541 = neq(T_538, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_542 = bits(T_538, 3, 3) @[CircuitMath.scala 23:12]
      node T_544 = bits(T_538, 2, 2) @[CircuitMath.scala 23:12]
      node T_546 = bits(T_538, 1, 1) @[CircuitMath.scala 21:8]
      node T_547 = shl(T_546, 0) @[CircuitMath.scala 23:10]
      node T_548 = mux(T_544, UInt<2>("h02"), T_547) @[CircuitMath.scala 23:10]
      node T_549 = mux(T_542, UInt<2>("h03"), T_548) @[CircuitMath.scala 23:10]
      node T_550 = bits(T_539, 3, 3) @[CircuitMath.scala 23:12]
      node T_552 = bits(T_539, 2, 2) @[CircuitMath.scala 23:12]
      node T_554 = bits(T_539, 1, 1) @[CircuitMath.scala 21:8]
      node T_555 = shl(T_554, 0) @[CircuitMath.scala 23:10]
      node T_556 = mux(T_552, UInt<2>("h02"), T_555) @[CircuitMath.scala 23:10]
      node T_557 = mux(T_550, UInt<2>("h03"), T_556) @[CircuitMath.scala 23:10]
      node T_558 = mux(T_541, T_549, T_557) @[CircuitMath.scala 29:21]
      node T_559 = cat(T_541, T_558) @[Cat.scala 20:58]
      node T_560 = bits(T_535, 7, 4) @[CircuitMath.scala 26:17]
      node T_561 = bits(T_535, 3, 0) @[CircuitMath.scala 27:17]
      node T_563 = neq(T_560, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_564 = bits(T_560, 3, 3) @[CircuitMath.scala 23:12]
      node T_566 = bits(T_560, 2, 2) @[CircuitMath.scala 23:12]
      node T_568 = bits(T_560, 1, 1) @[CircuitMath.scala 21:8]
      node T_569 = shl(T_568, 0) @[CircuitMath.scala 23:10]
      node T_570 = mux(T_566, UInt<2>("h02"), T_569) @[CircuitMath.scala 23:10]
      node T_571 = mux(T_564, UInt<2>("h03"), T_570) @[CircuitMath.scala 23:10]
      node T_572 = bits(T_561, 3, 3) @[CircuitMath.scala 23:12]
      node T_574 = bits(T_561, 2, 2) @[CircuitMath.scala 23:12]
      node T_576 = bits(T_561, 1, 1) @[CircuitMath.scala 21:8]
      node T_577 = shl(T_576, 0) @[CircuitMath.scala 23:10]
      node T_578 = mux(T_574, UInt<2>("h02"), T_577) @[CircuitMath.scala 23:10]
      node T_579 = mux(T_572, UInt<2>("h03"), T_578) @[CircuitMath.scala 23:10]
      node T_580 = mux(T_563, T_571, T_579) @[CircuitMath.scala 29:21]
      node T_581 = cat(T_563, T_580) @[Cat.scala 20:58]
      node T_582 = mux(T_537, T_559, T_581) @[CircuitMath.scala 29:21]
      node T_583 = cat(T_537, T_582) @[Cat.scala 20:58]
      node T_584 = bits(T_531, 15, 8) @[CircuitMath.scala 26:17]
      node T_585 = bits(T_531, 7, 0) @[CircuitMath.scala 27:17]
      node T_587 = neq(T_584, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_588 = bits(T_584, 7, 4) @[CircuitMath.scala 26:17]
      node T_589 = bits(T_584, 3, 0) @[CircuitMath.scala 27:17]
      node T_591 = neq(T_588, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_592 = bits(T_588, 3, 3) @[CircuitMath.scala 23:12]
      node T_594 = bits(T_588, 2, 2) @[CircuitMath.scala 23:12]
      node T_596 = bits(T_588, 1, 1) @[CircuitMath.scala 21:8]
      node T_597 = shl(T_596, 0) @[CircuitMath.scala 23:10]
      node T_598 = mux(T_594, UInt<2>("h02"), T_597) @[CircuitMath.scala 23:10]
      node T_599 = mux(T_592, UInt<2>("h03"), T_598) @[CircuitMath.scala 23:10]
      node T_600 = bits(T_589, 3, 3) @[CircuitMath.scala 23:12]
      node T_602 = bits(T_589, 2, 2) @[CircuitMath.scala 23:12]
      node T_604 = bits(T_589, 1, 1) @[CircuitMath.scala 21:8]
      node T_605 = shl(T_604, 0) @[CircuitMath.scala 23:10]
      node T_606 = mux(T_602, UInt<2>("h02"), T_605) @[CircuitMath.scala 23:10]
      node T_607 = mux(T_600, UInt<2>("h03"), T_606) @[CircuitMath.scala 23:10]
      node T_608 = mux(T_591, T_599, T_607) @[CircuitMath.scala 29:21]
      node T_609 = cat(T_591, T_608) @[Cat.scala 20:58]
      node T_610 = bits(T_585, 7, 4) @[CircuitMath.scala 26:17]
      node T_611 = bits(T_585, 3, 0) @[CircuitMath.scala 27:17]
      node T_613 = neq(T_610, UInt<1>("h00")) @[CircuitMath.scala 28:22]
      node T_614 = bits(T_610, 3, 3) @[CircuitMath.scala 23:12]
      node T_616 = bits(T_610, 2, 2) @[CircuitMath.scala 23:12]
      node T_618 = bits(T_610, 1, 1) @[CircuitMath.scala 21:8]
      node T_619 = shl(T_618, 0) @[CircuitMath.scala 23:10]
      node T_620 = mux(T_616, UInt<2>("h02"), T_619) @[CircuitMath.scala 23:10]
      node T_621 = mux(T_614, UInt<2>("h03"), T_620) @[CircuitMath.scala 23:10]
      node T_622 = bits(T_611, 3, 3) @[CircuitMath.scala 23:12]
      node T_624 = bits(T_611, 2, 2) @[CircuitMath.scala 23:12]
      node T_626 = bits(T_611, 1, 1) @[CircuitMath.scala 21:8]
      node T_627 = shl(T_626, 0) @[CircuitMath.scala 23:10]
      node T_628 = mux(T_624, UInt<2>("h02"), T_627) @[CircuitMath.scala 23:10]
      node T_629 = mux(T_622, UInt<2>("h03"), T_628) @[CircuitMath.scala 23:10]
      node T_630 = mux(T_613, T_621, T_629) @[CircuitMath.scala 29:21]
      node T_631 = cat(T_613, T_630) @[Cat.scala 20:58]
      node T_632 = mux(T_587, T_609, T_631) @[CircuitMath.scala 29:21]
      node T_633 = cat(T_587, T_632) @[Cat.scala 20:58]
      node T_634 = mux(T_533, T_583, T_633) @[CircuitMath.scala 29:21]
      node T_635 = cat(T_533, T_634) @[Cat.scala 20:58]
      node T_636 = mux(T_423, T_529, T_635) @[CircuitMath.scala 29:21]
      node T_637 = cat(T_423, T_636) @[Cat.scala 20:58]
      node T_638 = not(T_637) @[recFNFromFN.scala 56:13]
      node T_639 = dshl(T_413, T_638) @[recFNFromFN.scala 58:25]
      node T_640 = bits(T_639, 50, 0) @[recFNFromFN.scala 58:37]
      node T_642 = cat(T_640, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_647 = mux(UInt<1>("h01"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 33:12]
      node T_648 = xor(T_638, T_647) @[recFNFromFN.scala 62:27]
      node T_649 = mux(T_415, T_648, T_412) @[recFNFromFN.scala 61:16]
      node T_653 = mux(T_415, UInt<2>("h02"), UInt<1>("h01")) @[recFNFromFN.scala 64:47]
      node T_654 = or(UInt<11>("h0400"), T_653) @[recFNFromFN.scala 64:42]
      node T_655 = add(T_649, T_654) @[recFNFromFN.scala 64:15]
      node T_656 = tail(T_655, 1) @[recFNFromFN.scala 64:15]
      node T_657 = bits(T_656, 11, 10) @[recFNFromFN.scala 67:25]
      node T_659 = eq(T_657, UInt<2>("h03")) @[recFNFromFN.scala 67:50]
      node T_661 = eq(T_417, UInt<1>("h00")) @[recFNFromFN.scala 68:17]
      node T_662 = and(T_659, T_661) @[recFNFromFN.scala 67:63]
      node T_663 = bits(T_418, 0, 0) @[Bitwise.scala 33:15]
      node T_666 = mux(T_663, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12]
      node T_667 = shl(T_666, 9) @[recFNFromFN.scala 71:45]
      node T_668 = not(T_667) @[recFNFromFN.scala 71:28]
      node T_669 = and(T_656, T_668) @[recFNFromFN.scala 71:26]
      node T_670 = shl(T_662, 9) @[recFNFromFN.scala 72:22]
      node T_671 = or(T_669, T_670) @[recFNFromFN.scala 71:64]
      node T_672 = mux(T_415, T_642, T_413) @[recFNFromFN.scala 73:27]
      node T_673 = cat(T_411, T_671) @[Cat.scala 20:58]
      node T_674 = cat(T_673, T_672) @[Cat.scala 20:58]
      mux.data <= T_674 @[fpu.scala 354:14]
      skip @[fpu.scala 353:41]
    node T_675 = asSInt(in.bits.in1) @[fpu.scala 360:39]
    wire T_676 : SInt
    T_676 is invalid
    T_676 <= T_675
    node T_677 = bits(in.bits.in1, 31, 0) @[fpu.scala 362:33]
    node T_678 = bits(in.bits.typ, 1, 1) @[util.scala 25:13]
    node T_680 = eq(T_678, UInt<1>("h00")) @[fpu.scala 363:49]
    when T_680 : @[fpu.scala 363:56]
      node T_681 = bits(in.bits.typ, 0, 0) @[fpu.scala 364:31]
      node T_682 = cvt(T_677) @[fpu.scala 364:45]
      node T_683 = asSInt(T_677) @[fpu.scala 364:60]
      node T_684 = mux(T_681, T_682, T_683) @[fpu.scala 364:19]
      T_676 <= T_684 @[fpu.scala 364:13]
      skip @[fpu.scala 363:56]
    node intValue = asUInt(T_676) @[fpu.scala 367:9]
    node T_687 = and(in.bits.cmd, UInt<3>("h04")) @[fpu.scala 370:21]
    node T_688 = eq(UInt<5>("h00"), T_687) @[fpu.scala 370:21]
    when T_688 : @[fpu.scala 370:38]
      inst INToRecFN_2 of INToRecFN @[fpu.scala 371:21]
      INToRecFN_2.io is invalid
      INToRecFN_2.clk <= clk
      INToRecFN_2.reset <= reset
      node T_689 = bits(in.bits.typ, 0, 0) @[fpu.scala 372:36]
      node T_690 = not(T_689) @[fpu.scala 372:24]
      INToRecFN_2.io.signedIn <= T_690 @[fpu.scala 372:21]
      INToRecFN_2.io.in <= intValue @[fpu.scala 373:15]
      INToRecFN_2.io.roundingMode <= in.bits.rm @[fpu.scala 374:25]
      node T_692 = cat(UInt<32>("h0ffffffff"), INToRecFN_2.io.out) @[Cat.scala 20:58]
      mux.data <= T_692 @[fpu.scala 375:14]
      mux.exc <= INToRecFN_2.io.exceptionFlags @[fpu.scala 376:13]
      inst INToRecFN_1_1 of INToRecFN_1 @[fpu.scala 381:25]
      INToRecFN_1_1.io is invalid
      INToRecFN_1_1.clk <= clk
      INToRecFN_1_1.reset <= reset
      node T_693 = bits(in.bits.typ, 0, 0) @[fpu.scala 382:40]
      node T_694 = not(T_693) @[fpu.scala 382:28]
      INToRecFN_1_1.io.signedIn <= T_694 @[fpu.scala 382:25]
      INToRecFN_1_1.io.in <= intValue @[fpu.scala 383:19]
      INToRecFN_1_1.io.roundingMode <= in.bits.rm @[fpu.scala 384:29]
      node T_696 = eq(in.bits.single, UInt<1>("h00")) @[fpu.scala 385:15]
      when T_696 : @[fpu.scala 385:32]
        node T_698 = cat(UInt<1>("h00"), INToRecFN_1_1.io.out) @[Cat.scala 20:58]
        mux.data <= T_698 @[fpu.scala 386:22]
        mux.exc <= INToRecFN_1_1.io.exceptionFlags @[fpu.scala 387:21]
        skip @[fpu.scala 385:32]
      skip @[fpu.scala 370:38]
    reg T_701 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_701 <= in.valid
    reg T_702 : {data : UInt<65>, exc : UInt<5>}, clk
    when in.valid : @[Reg.scala 29:19]
      T_702 <- mux @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    wire T_713 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 39:21]
    T_713 is invalid @[Valid.scala 39:21]
    T_713.valid <= T_701 @[Valid.scala 40:17]
    T_713.bits <- T_702 @[Valid.scala 41:16]
    io.out <- T_713 @[fpu.scala 392:12]
    
  module RoundRawFNToRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node roundingMode_nearest_even = eq(io.roundingMode, UInt<2>("h00")) @[RoundRawFNToRecFN.scala 88:54]
    node roundingMode_minMag = eq(io.roundingMode, UInt<2>("h01")) @[RoundRawFNToRecFN.scala 89:54]
    node roundingMode_min = eq(io.roundingMode, UInt<2>("h02")) @[RoundRawFNToRecFN.scala 90:54]
    node roundingMode_max = eq(io.roundingMode, UInt<2>("h03")) @[RoundRawFNToRecFN.scala 91:54]
    node T_19 = and(roundingMode_min, io.in.sign) @[RoundRawFNToRecFN.scala 94:27]
    node T_21 = eq(io.in.sign, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 94:66]
    node T_22 = and(roundingMode_max, T_21) @[RoundRawFNToRecFN.scala 94:63]
    node roundMagUp = or(T_19, T_22) @[RoundRawFNToRecFN.scala 94:42]
    node doShiftSigDown1 = bits(io.in.sig, 26, 26) @[RoundRawFNToRecFN.scala 98:36]
    node isNegExp = lt(io.in.sExp, asSInt(UInt<1>("h00"))) @[RoundRawFNToRecFN.scala 99:32]
    node T_24 = bits(isNegExp, 0, 0) @[Bitwise.scala 33:15]
    node T_27 = mux(T_24, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 33:12]
    node T_28 = bits(io.in.sExp, 8, 0) @[RoundRawFNToRecFN.scala 103:31]
    node T_29 = not(T_28) @[primitives.scala 50:21]
    node T_30 = bits(T_29, 8, 8) @[primitives.scala 56:25]
    node T_31 = bits(T_29, 7, 0) @[primitives.scala 57:26]
    node T_32 = bits(T_31, 7, 7) @[primitives.scala 56:25]
    node T_33 = bits(T_31, 6, 0) @[primitives.scala 57:26]
    node T_34 = bits(T_33, 6, 6) @[primitives.scala 56:25]
    node T_35 = bits(T_33, 5, 0) @[primitives.scala 57:26]
    node T_38 = dshr(asSInt(UInt<65>("h010000000000000000")), T_35) @[primitives.scala 68:52]
    node T_39 = bits(T_38, 63, 42) @[primitives.scala 69:26]
    node T_40 = bits(T_39, 15, 0) @[Bitwise.scala 65:18]
    node T_43 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47]
    node T_44 = xor(UInt<16>("h0ffff"), T_43) @[Bitwise.scala 58:21]
    node T_45 = shr(T_40, 8) @[Bitwise.scala 59:21]
    node T_46 = and(T_45, T_44) @[Bitwise.scala 59:31]
    node T_47 = bits(T_40, 7, 0) @[Bitwise.scala 59:46]
    node T_48 = shl(T_47, 8) @[Bitwise.scala 59:65]
    node T_49 = not(T_44) @[Bitwise.scala 59:77]
    node T_50 = and(T_48, T_49) @[Bitwise.scala 59:75]
    node T_51 = or(T_46, T_50) @[Bitwise.scala 59:39]
    node T_52 = bits(T_44, 11, 0) @[Bitwise.scala 58:28]
    node T_53 = shl(T_52, 4) @[Bitwise.scala 58:47]
    node T_54 = xor(T_44, T_53) @[Bitwise.scala 58:21]
    node T_55 = shr(T_51, 4) @[Bitwise.scala 59:21]
    node T_56 = and(T_55, T_54) @[Bitwise.scala 59:31]
    node T_57 = bits(T_51, 11, 0) @[Bitwise.scala 59:46]
    node T_58 = shl(T_57, 4) @[Bitwise.scala 59:65]
    node T_59 = not(T_54) @[Bitwise.scala 59:77]
    node T_60 = and(T_58, T_59) @[Bitwise.scala 59:75]
    node T_61 = or(T_56, T_60) @[Bitwise.scala 59:39]
    node T_62 = bits(T_54, 13, 0) @[Bitwise.scala 58:28]
    node T_63 = shl(T_62, 2) @[Bitwise.scala 58:47]
    node T_64 = xor(T_54, T_63) @[Bitwise.scala 58:21]
    node T_65 = shr(T_61, 2) @[Bitwise.scala 59:21]
    node T_66 = and(T_65, T_64) @[Bitwise.scala 59:31]
    node T_67 = bits(T_61, 13, 0) @[Bitwise.scala 59:46]
    node T_68 = shl(T_67, 2) @[Bitwise.scala 59:65]
    node T_69 = not(T_64) @[Bitwise.scala 59:77]
    node T_70 = and(T_68, T_69) @[Bitwise.scala 59:75]
    node T_71 = or(T_66, T_70) @[Bitwise.scala 59:39]
    node T_72 = bits(T_64, 14, 0) @[Bitwise.scala 58:28]
    node T_73 = shl(T_72, 1) @[Bitwise.scala 58:47]
    node T_74 = xor(T_64, T_73) @[Bitwise.scala 58:21]
    node T_75 = shr(T_71, 1) @[Bitwise.scala 59:21]
    node T_76 = and(T_75, T_74) @[Bitwise.scala 59:31]
    node T_77 = bits(T_71, 14, 0) @[Bitwise.scala 59:46]
    node T_78 = shl(T_77, 1) @[Bitwise.scala 59:65]
    node T_79 = not(T_74) @[Bitwise.scala 59:77]
    node T_80 = and(T_78, T_79) @[Bitwise.scala 59:75]
    node T_81 = or(T_76, T_80) @[Bitwise.scala 59:39]
    node T_82 = bits(T_39, 21, 16) @[Bitwise.scala 65:44]
    node T_83 = bits(T_82, 3, 0) @[Bitwise.scala 65:18]
    node T_84 = bits(T_83, 1, 0) @[Bitwise.scala 65:18]
    node T_85 = bits(T_84, 0, 0) @[Bitwise.scala 65:18]
    node T_86 = bits(T_84, 1, 1) @[Bitwise.scala 65:44]
    node T_87 = cat(T_85, T_86) @[Cat.scala 20:58]
    node T_88 = bits(T_83, 3, 2) @[Bitwise.scala 65:44]
    node T_89 = bits(T_88, 0, 0) @[Bitwise.scala 65:18]
    node T_90 = bits(T_88, 1, 1) @[Bitwise.scala 65:44]
    node T_91 = cat(T_89, T_90) @[Cat.scala 20:58]
    node T_92 = cat(T_87, T_91) @[Cat.scala 20:58]
    node T_93 = bits(T_82, 5, 4) @[Bitwise.scala 65:44]
    node T_94 = bits(T_93, 0, 0) @[Bitwise.scala 65:18]
    node T_95 = bits(T_93, 1, 1) @[Bitwise.scala 65:44]
    node T_96 = cat(T_94, T_95) @[Cat.scala 20:58]
    node T_97 = cat(T_92, T_96) @[Cat.scala 20:58]
    node T_98 = cat(T_81, T_97) @[Cat.scala 20:58]
    node T_99 = not(T_98) @[primitives.scala 65:36]
    node T_100 = mux(T_34, UInt<1>("h00"), T_99) @[primitives.scala 65:21]
    node T_101 = not(T_100) @[primitives.scala 65:17]
    node T_103 = cat(T_101, UInt<3>("h07")) @[Cat.scala 20:58]
    node T_104 = bits(T_33, 6, 6) @[primitives.scala 56:25]
    node T_105 = bits(T_33, 5, 0) @[primitives.scala 57:26]
    node T_107 = dshr(asSInt(UInt<65>("h010000000000000000")), T_105) @[primitives.scala 68:52]
    node T_108 = bits(T_107, 2, 0) @[primitives.scala 69:26]
    node T_109 = bits(T_108, 1, 0) @[Bitwise.scala 65:18]
    node T_110 = bits(T_109, 0, 0) @[Bitwise.scala 65:18]
    node T_111 = bits(T_109, 1, 1) @[Bitwise.scala 65:44]
    node T_112 = cat(T_110, T_111) @[Cat.scala 20:58]
    node T_113 = bits(T_108, 2, 2) @[Bitwise.scala 65:44]
    node T_114 = cat(T_112, T_113) @[Cat.scala 20:58]
    node T_116 = mux(T_104, T_114, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_117 = mux(T_32, T_103, T_116) @[primitives.scala 61:20]
    node T_119 = mux(T_30, T_117, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_120 = or(T_27, T_119) @[RoundRawFNToRecFN.scala 101:42]
    node T_121 = or(T_120, doShiftSigDown1) @[RoundRawFNToRecFN.scala 106:19]
    node roundMask = cat(T_121, UInt<2>("h03")) @[Cat.scala 20:58]
    node T_123 = cat(isNegExp, roundMask) @[Cat.scala 20:58]
    node shiftedRoundMask = shr(T_123, 1) @[RoundRawFNToRecFN.scala 109:52]
    node T_124 = not(shiftedRoundMask) @[RoundRawFNToRecFN.scala 110:24]
    node roundPosMask = and(T_124, roundMask) @[RoundRawFNToRecFN.scala 110:42]
    node T_125 = and(io.in.sig, roundPosMask) @[RoundRawFNToRecFN.scala 111:34]
    node roundPosBit = neq(T_125, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 111:50]
    node T_127 = and(io.in.sig, shiftedRoundMask) @[RoundRawFNToRecFN.scala 112:36]
    node anyRoundExtra = neq(T_127, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 112:56]
    node common_inexact = or(roundPosBit, anyRoundExtra) @[RoundRawFNToRecFN.scala 113:32]
    node T_129 = and(roundingMode_nearest_even, roundPosBit) @[RoundRawFNToRecFN.scala 116:40]
    node T_130 = and(roundMagUp, common_inexact) @[RoundRawFNToRecFN.scala 117:29]
    node T_131 = or(T_129, T_130) @[RoundRawFNToRecFN.scala 116:56]
    node T_132 = or(io.in.sig, roundMask) @[RoundRawFNToRecFN.scala 118:26]
    node T_133 = shr(T_132, 2) @[RoundRawFNToRecFN.scala 118:38]
    node T_135 = add(T_133, UInt<1>("h01")) @[RoundRawFNToRecFN.scala 118:43]
    node T_136 = and(roundingMode_nearest_even, roundPosBit) @[RoundRawFNToRecFN.scala 119:48]
    node T_138 = eq(anyRoundExtra, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 120:26]
    node T_139 = and(T_136, T_138) @[RoundRawFNToRecFN.scala 119:63]
    node T_140 = shr(roundMask, 1) @[RoundRawFNToRecFN.scala 121:31]
    node T_142 = mux(T_139, T_140, UInt<26>("h00")) @[RoundRawFNToRecFN.scala 119:21]
    node T_143 = not(T_142) @[RoundRawFNToRecFN.scala 119:17]
    node T_144 = and(T_135, T_143) @[RoundRawFNToRecFN.scala 118:55]
    node T_145 = not(roundMask) @[RoundRawFNToRecFN.scala 124:26]
    node T_146 = and(io.in.sig, T_145) @[RoundRawFNToRecFN.scala 124:24]
    node T_147 = shr(T_146, 2) @[RoundRawFNToRecFN.scala 124:37]
    node roundedSig = mux(T_131, T_144, T_147) @[RoundRawFNToRecFN.scala 116:12]
    node T_148 = shr(roundedSig, 24) @[RoundRawFNToRecFN.scala 127:48]
    node T_149 = cvt(T_148) @[RoundRawFNToRecFN.scala 127:60]
    node sRoundedExp = add(io.in.sExp, T_149) @[RoundRawFNToRecFN.scala 127:34]
    node common_expOut = bits(sRoundedExp, 8, 0) @[RoundRawFNToRecFN.scala 129:36]
    node T_150 = bits(roundedSig, 23, 1) @[RoundRawFNToRecFN.scala 132:23]
    node T_151 = bits(roundedSig, 22, 0) @[RoundRawFNToRecFN.scala 133:23]
    node common_fractOut = mux(doShiftSigDown1, T_150, T_151) @[RoundRawFNToRecFN.scala 131:12]
    node T_152 = shr(sRoundedExp, 7) @[RoundRawFNToRecFN.scala 136:39]
    node common_overflow = geq(T_152, asSInt(UInt<3>("h03"))) @[RoundRawFNToRecFN.scala 136:56]
    node common_totalUnderflow = lt(sRoundedExp, asSInt(UInt<8>("h06b"))) @[RoundRawFNToRecFN.scala 138:46]
    node T_157 = mux(doShiftSigDown1, asSInt(UInt<9>("h081")), asSInt(UInt<9>("h082"))) @[RoundRawFNToRecFN.scala 142:21]
    node T_158 = lt(io.in.sExp, T_157) @[RoundRawFNToRecFN.scala 141:25]
    node common_underflow = and(common_inexact, T_158) @[RoundRawFNToRecFN.scala 140:18]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundRawFNToRecFN.scala 147:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundRawFNToRecFN.scala 148:49]
    node T_160 = eq(isNaNOut, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 149:22]
    node T_162 = eq(notNaN_isSpecialInfOut, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 149:36]
    node T_163 = and(T_160, T_162) @[RoundRawFNToRecFN.scala 149:33]
    node T_165 = eq(io.in.isZero, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 149:64]
    node commonCase = and(T_163, T_165) @[RoundRawFNToRecFN.scala 149:61]
    node overflow = and(commonCase, common_overflow) @[RoundRawFNToRecFN.scala 150:32]
    node underflow = and(commonCase, common_underflow) @[RoundRawFNToRecFN.scala 151:32]
    node T_166 = and(commonCase, common_inexact) @[RoundRawFNToRecFN.scala 152:43]
    node inexact = or(overflow, T_166) @[RoundRawFNToRecFN.scala 152:28]
    node overflow_roundMagUp = or(roundingMode_nearest_even, roundMagUp) @[RoundRawFNToRecFN.scala 154:57]
    node T_167 = and(commonCase, common_totalUnderflow) @[RoundRawFNToRecFN.scala 155:42]
    node pegMinNonzeroMagOut = and(T_167, roundMagUp) @[RoundRawFNToRecFN.scala 155:67]
    node T_168 = and(commonCase, overflow) @[RoundRawFNToRecFN.scala 156:41]
    node T_170 = eq(overflow_roundMagUp, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 156:56]
    node pegMaxFiniteMagOut = and(T_168, T_170) @[RoundRawFNToRecFN.scala 156:53]
    node T_171 = and(overflow, overflow_roundMagUp) @[RoundRawFNToRecFN.scala 158:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, T_171) @[RoundRawFNToRecFN.scala 158:32]
    node signOut = mux(isNaNOut, UInt<1>("h00"), io.in.sign) @[RoundRawFNToRecFN.scala 160:22]
    node T_173 = or(io.in.isZero, common_totalUnderflow) @[RoundRawFNToRecFN.scala 163:32]
    node T_176 = mux(T_173, UInt<9>("h01c0"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 163:18]
    node T_177 = not(T_176) @[RoundRawFNToRecFN.scala 163:14]
    node T_178 = and(common_expOut, T_177) @[RoundRawFNToRecFN.scala 162:24]
    node T_180 = not(UInt<9>("h06b")) @[RoundRawFNToRecFN.scala 168:19]
    node T_182 = mux(pegMinNonzeroMagOut, T_180, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 167:18]
    node T_183 = not(T_182) @[RoundRawFNToRecFN.scala 167:14]
    node T_184 = and(T_178, T_183) @[RoundRawFNToRecFN.scala 166:17]
    node T_187 = mux(pegMaxFiniteMagOut, UInt<9>("h080"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 171:18]
    node T_188 = not(T_187) @[RoundRawFNToRecFN.scala 171:14]
    node T_189 = and(T_184, T_188) @[RoundRawFNToRecFN.scala 170:17]
    node T_192 = mux(notNaN_isInfOut, UInt<9>("h040"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 175:18]
    node T_193 = not(T_192) @[RoundRawFNToRecFN.scala 175:14]
    node T_194 = and(T_189, T_193) @[RoundRawFNToRecFN.scala 174:17]
    node T_197 = mux(pegMinNonzeroMagOut, UInt<9>("h06b"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 179:16]
    node T_198 = or(T_194, T_197) @[RoundRawFNToRecFN.scala 178:18]
    node T_201 = mux(pegMaxFiniteMagOut, UInt<9>("h017f"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 183:16]
    node T_202 = or(T_198, T_201) @[RoundRawFNToRecFN.scala 182:15]
    node T_205 = mux(notNaN_isInfOut, UInt<9>("h0180"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 187:16]
    node T_206 = or(T_202, T_205) @[RoundRawFNToRecFN.scala 186:15]
    node T_209 = mux(isNaNOut, UInt<9>("h01c0"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 188:16]
    node expOut = or(T_206, T_209) @[RoundRawFNToRecFN.scala 187:71]
    node T_210 = or(common_totalUnderflow, isNaNOut) @[RoundRawFNToRecFN.scala 190:35]
    node T_212 = shl(UInt<1>("h01"), 22) @[RoundRawFNToRecFN.scala 191:34]
    node T_214 = mux(isNaNOut, T_212, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 191:16]
    node T_215 = mux(T_210, T_214, common_fractOut) @[RoundRawFNToRecFN.scala 190:12]
    node T_216 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 33:15]
    node T_219 = mux(T_216, UInt<23>("h07fffff"), UInt<23>("h00")) @[Bitwise.scala 33:12]
    node fractOut = or(T_215, T_219) @[RoundRawFNToRecFN.scala 193:11]
    node T_220 = cat(signOut, expOut) @[Cat.scala 20:58]
    node T_221 = cat(T_220, fractOut) @[Cat.scala 20:58]
    io.out <= T_221 @[RoundRawFNToRecFN.scala 196:12]
    node T_222 = cat(underflow, inexact) @[Cat.scala 20:58]
    node T_223 = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 20:58]
    node T_224 = cat(T_223, overflow) @[Cat.scala 20:58]
    node T_225 = cat(T_224, T_222) @[Cat.scala 20:58]
    io.exceptionFlags <= T_225 @[RoundRawFNToRecFN.scala 197:23]
    
  module RecFNToRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<65>, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_4 = bits(io.in, 63, 52) @[rawFNFromRecFN.scala 50:21]
    node T_5 = bits(T_4, 11, 9) @[rawFNFromRecFN.scala 51:29]
    node T_7 = eq(T_5, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54]
    node T_8 = bits(T_4, 11, 10) @[rawFNFromRecFN.scala 52:29]
    node T_10 = eq(T_8, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54]
    wire T_18 : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[rawFNFromRecFN.scala 54:23]
    T_18 is invalid @[rawFNFromRecFN.scala 54:23]
    node T_25 = bits(io.in, 64, 64) @[rawFNFromRecFN.scala 55:23]
    T_18.sign <= T_25 @[rawFNFromRecFN.scala 55:18]
    node T_26 = bits(T_4, 9, 9) @[rawFNFromRecFN.scala 56:40]
    node T_27 = and(T_10, T_26) @[rawFNFromRecFN.scala 56:32]
    T_18.isNaN <= T_27 @[rawFNFromRecFN.scala 56:19]
    node T_28 = bits(T_4, 9, 9) @[rawFNFromRecFN.scala 57:40]
    node T_30 = eq(T_28, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35]
    node T_31 = and(T_10, T_30) @[rawFNFromRecFN.scala 57:32]
    T_18.isInf <= T_31 @[rawFNFromRecFN.scala 57:19]
    T_18.isZero <= T_7 @[rawFNFromRecFN.scala 58:20]
    node T_32 = cvt(T_4) @[rawFNFromRecFN.scala 59:25]
    T_18.sExp <= T_32 @[rawFNFromRecFN.scala 59:18]
    node T_35 = eq(T_7, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36]
    node T_36 = bits(io.in, 51, 0) @[rawFNFromRecFN.scala 60:48]
    node T_38 = cat(T_36, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_39 = cat(UInt<1>("h00"), T_35) @[Cat.scala 20:58]
    node T_40 = cat(T_39, T_38) @[Cat.scala 20:58]
    T_18.sig <= T_40 @[rawFNFromRecFN.scala 60:17]
    node T_42 = add(T_18.sExp, asSInt(UInt<12>("h0900"))) @[resizeRawFN.scala 49:31]
    wire outRawFloat : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<10>, sig : UInt<27>} @[resizeRawFN.scala 51:23]
    outRawFloat is invalid @[resizeRawFN.scala 51:23]
    outRawFloat.sign <= T_18.sign @[resizeRawFN.scala 52:20]
    outRawFloat.isNaN <= T_18.isNaN @[resizeRawFN.scala 53:20]
    outRawFloat.isInf <= T_18.isInf @[resizeRawFN.scala 54:20]
    outRawFloat.isZero <= T_18.isZero @[resizeRawFN.scala 55:20]
    node T_57 = lt(T_42, asSInt(UInt<1>("h00"))) @[resizeRawFN.scala 60:31]
    node T_58 = bits(T_42, 12, 9) @[resizeRawFN.scala 61:33]
    node T_60 = neq(T_58, UInt<1>("h00")) @[resizeRawFN.scala 61:65]
    node T_65 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
    node T_67 = cat(T_65, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_68 = bits(T_42, 8, 0) @[resizeRawFN.scala 63:33]
    node T_69 = mux(T_60, T_67, T_68) @[resizeRawFN.scala 61:25]
    node T_70 = cat(T_57, T_69) @[Cat.scala 20:58]
    node T_71 = asSInt(T_70) @[resizeRawFN.scala 65:20]
    outRawFloat.sExp <= T_71 @[resizeRawFN.scala 56:18]
    node T_72 = bits(T_18.sig, 55, 30) @[resizeRawFN.scala 71:28]
    node T_73 = bits(T_18.sig, 29, 0) @[resizeRawFN.scala 72:28]
    node T_75 = neq(T_73, UInt<1>("h00")) @[resizeRawFN.scala 72:56]
    node T_76 = cat(T_72, T_75) @[Cat.scala 20:58]
    outRawFloat.sig <= T_76 @[resizeRawFN.scala 67:17]
    node T_77 = bits(outRawFloat.sig, 24, 24) @[RoundRawFNToRecFN.scala 61:57]
    node T_79 = eq(T_77, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49]
    node invalidExc = and(outRawFloat.isNaN, T_79) @[RoundRawFNToRecFN.scala 61:46]
    inst RoundRawFNToRecFN_1 of RoundRawFNToRecFN @[RecFNToRecFN.scala 102:19]
    RoundRawFNToRecFN_1.io is invalid
    RoundRawFNToRecFN_1.clk <= clk
    RoundRawFNToRecFN_1.reset <= reset
    RoundRawFNToRecFN_1.io.invalidExc <= invalidExc @[RecFNToRecFN.scala 103:41]
    RoundRawFNToRecFN_1.io.infiniteExc <= UInt<1>("h00") @[RecFNToRecFN.scala 104:42]
    RoundRawFNToRecFN_1.io.in <- outRawFloat @[RecFNToRecFN.scala 105:33]
    RoundRawFNToRecFN_1.io.roundingMode <= io.roundingMode @[RecFNToRecFN.scala 106:43]
    io.out <= RoundRawFNToRecFN_1.io.out @[RecFNToRecFN.scala 107:16]
    io.exceptionFlags <= RoundRawFNToRecFN_1.io.exceptionFlags @[RecFNToRecFN.scala 108:27]
    
  module RecFNToRecFN_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<33>, flip roundingMode : UInt<2>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_4 = bits(io.in, 31, 23) @[rawFNFromRecFN.scala 50:21]
    node T_5 = bits(T_4, 8, 6) @[rawFNFromRecFN.scala 51:29]
    node T_7 = eq(T_5, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54]
    node T_8 = bits(T_4, 8, 7) @[rawFNFromRecFN.scala 52:29]
    node T_10 = eq(T_8, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54]
    wire T_18 : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<10>, sig : UInt<27>} @[rawFNFromRecFN.scala 54:23]
    T_18 is invalid @[rawFNFromRecFN.scala 54:23]
    node T_25 = bits(io.in, 32, 32) @[rawFNFromRecFN.scala 55:23]
    T_18.sign <= T_25 @[rawFNFromRecFN.scala 55:18]
    node T_26 = bits(T_4, 6, 6) @[rawFNFromRecFN.scala 56:40]
    node T_27 = and(T_10, T_26) @[rawFNFromRecFN.scala 56:32]
    T_18.isNaN <= T_27 @[rawFNFromRecFN.scala 56:19]
    node T_28 = bits(T_4, 6, 6) @[rawFNFromRecFN.scala 57:40]
    node T_30 = eq(T_28, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35]
    node T_31 = and(T_10, T_30) @[rawFNFromRecFN.scala 57:32]
    T_18.isInf <= T_31 @[rawFNFromRecFN.scala 57:19]
    T_18.isZero <= T_7 @[rawFNFromRecFN.scala 58:20]
    node T_32 = cvt(T_4) @[rawFNFromRecFN.scala 59:25]
    T_18.sExp <= T_32 @[rawFNFromRecFN.scala 59:18]
    node T_35 = eq(T_7, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36]
    node T_36 = bits(io.in, 22, 0) @[rawFNFromRecFN.scala 60:48]
    node T_38 = cat(T_36, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_39 = cat(UInt<1>("h00"), T_35) @[Cat.scala 20:58]
    node T_40 = cat(T_39, T_38) @[Cat.scala 20:58]
    T_18.sig <= T_40 @[rawFNFromRecFN.scala 60:17]
    node T_42 = add(T_18.sExp, asSInt(UInt<12>("h0700"))) @[resizeRawFN.scala 49:31]
    wire outRawFloat : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[resizeRawFN.scala 51:23]
    outRawFloat is invalid @[resizeRawFN.scala 51:23]
    outRawFloat.sign <= T_18.sign @[resizeRawFN.scala 52:20]
    outRawFloat.isNaN <= T_18.isNaN @[resizeRawFN.scala 53:20]
    outRawFloat.isInf <= T_18.isInf @[resizeRawFN.scala 54:20]
    outRawFloat.isZero <= T_18.isZero @[resizeRawFN.scala 55:20]
    outRawFloat.sExp <= T_42 @[resizeRawFN.scala 56:18]
    node T_56 = shl(T_18.sig, 29) @[resizeRawFN.scala 69:24]
    outRawFloat.sig <= T_56 @[resizeRawFN.scala 67:17]
    node T_57 = bits(outRawFloat.sig, 53, 53) @[RoundRawFNToRecFN.scala 61:57]
    node T_59 = eq(T_57, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49]
    node invalidExc = and(outRawFloat.isNaN, T_59) @[RoundRawFNToRecFN.scala 61:46]
    node T_61 = eq(outRawFloat.isNaN, UInt<1>("h00")) @[RecFNToRecFN.scala 69:40]
    node T_62 = and(outRawFloat.sign, T_61) @[RecFNToRecFN.scala 69:37]
    node T_63 = bits(outRawFloat.sExp, 11, 0) @[RecFNToRecFN.scala 71:30]
    node T_66 = mux(outRawFloat.isZero, UInt<12>("h0c00"), UInt<1>("h00")) @[RecFNToRecFN.scala 72:22]
    node T_67 = not(T_66) @[RecFNToRecFN.scala 72:18]
    node T_68 = and(T_63, T_67) @[RecFNToRecFN.scala 71:47]
    node T_69 = or(outRawFloat.isZero, outRawFloat.isInf) @[RecFNToRecFN.scala 76:42]
    node T_72 = mux(T_69, UInt<12>("h0200"), UInt<1>("h00")) @[RecFNToRecFN.scala 76:22]
    node T_73 = not(T_72) @[RecFNToRecFN.scala 76:18]
    node T_74 = and(T_68, T_73) @[RecFNToRecFN.scala 75:21]
    node T_77 = mux(outRawFloat.isInf, UInt<12>("h0c00"), UInt<1>("h00")) @[RecFNToRecFN.scala 80:20]
    node T_78 = or(T_74, T_77) @[RecFNToRecFN.scala 79:22]
    node T_81 = mux(outRawFloat.isNaN, UInt<12>("h0e00"), UInt<1>("h00")) @[RecFNToRecFN.scala 84:20]
    node T_82 = or(T_78, T_81) @[RecFNToRecFN.scala 83:19]
    node T_84 = shl(UInt<1>("h01"), 51) @[RecFNToRecFN.scala 90:24]
    node T_85 = bits(outRawFloat.sig, 53, 2) @[RecFNToRecFN.scala 91:32]
    node T_86 = mux(outRawFloat.isNaN, T_84, T_85) @[RecFNToRecFN.scala 89:16]
    node T_87 = cat(T_62, T_82) @[Cat.scala 20:58]
    node T_88 = cat(T_87, T_86) @[Cat.scala 20:58]
    io.out <= T_88 @[RecFNToRecFN.scala 93:16]
    node T_90 = cat(invalidExc, UInt<4>("h00")) @[Cat.scala 20:58]
    io.exceptionFlags <= T_90 @[RecFNToRecFN.scala 94:27]
    
  module FPToFP : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}, flip lt : UInt<1>}
    
    io is invalid
    reg T_133 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_133 <= io.in.valid
    reg T_134 : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    when io.in.valid : @[Reg.scala 29:19]
      T_134 <- io.in.bits @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    wire in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}} @[Valid.scala 39:21]
    in is invalid @[Valid.scala 39:21]
    in.valid <= T_133 @[Valid.scala 40:17]
    in.bits <- T_134 @[Valid.scala 41:16]
    node T_252 = bits(in.bits.rm, 1, 1) @[fpu.scala 404:33]
    node T_253 = xor(in.bits.in1, in.bits.in2) @[fpu.scala 404:50]
    node T_254 = bits(in.bits.rm, 0, 0) @[fpu.scala 404:79]
    node T_255 = not(in.bits.in2) @[fpu.scala 404:84]
    node T_256 = mux(T_254, T_255, in.bits.in2) @[fpu.scala 404:68]
    node signNum = mux(T_252, T_253, T_256) @[fpu.scala 404:22]
    node T_257 = bits(signNum, 32, 32) @[fpu.scala 405:30]
    node T_258 = bits(in.bits.in1, 31, 0) @[fpu.scala 405:47]
    node fsgnj_s = cat(T_257, T_258) @[Cat.scala 20:58]
    node T_259 = shr(in.bits.in1, 33) @[fpu.scala 408:54]
    node T_260 = cat(T_259, fsgnj_s) @[Cat.scala 20:58]
    node T_261 = bits(signNum, 64, 64) @[fpu.scala 409:49]
    node T_262 = bits(in.bits.in1, 63, 0) @[fpu.scala 409:66]
    node T_263 = cat(T_261, T_262) @[Cat.scala 20:58]
    node fsgnj = mux(in.bits.single, T_260, T_263) @[fpu.scala 408:21]
    wire mux : {data : UInt<65>, exc : UInt<5>} @[fpu.scala 411:19]
    mux is invalid @[fpu.scala 411:19]
    mux.exc <= UInt<1>("h00") @[fpu.scala 412:13]
    mux.data <= fsgnj @[fpu.scala 413:14]
    node T_272 = and(in.bits.cmd, UInt<4>("h0d")) @[fpu.scala 415:23]
    node T_273 = eq(UInt<5>("h05"), T_272) @[fpu.scala 415:23]
    when T_273 : @[fpu.scala 415:40]
      node T_274 = bits(in.bits.in1, 31, 29) @[fpu.scala 223:7]
      node T_275 = not(T_274) @[fpu.scala 223:58]
      node T_277 = eq(T_275, UInt<1>("h00")) @[fpu.scala 223:58]
      node T_278 = bits(in.bits.in2, 31, 29) @[fpu.scala 223:7]
      node T_279 = not(T_278) @[fpu.scala 223:58]
      node T_281 = eq(T_279, UInt<1>("h00")) @[fpu.scala 223:58]
      node T_282 = bits(in.bits.in1, 31, 29) @[fpu.scala 223:7]
      node T_283 = not(T_282) @[fpu.scala 223:58]
      node T_285 = eq(T_283, UInt<1>("h00")) @[fpu.scala 223:58]
      node T_286 = bits(in.bits.in1, 22, 22) @[fpu.scala 228:46]
      node T_288 = eq(T_286, UInt<1>("h00")) @[fpu.scala 228:43]
      node T_289 = and(T_285, T_288) @[fpu.scala 228:40]
      node T_290 = bits(in.bits.in2, 31, 29) @[fpu.scala 223:7]
      node T_291 = not(T_290) @[fpu.scala 223:58]
      node T_293 = eq(T_291, UInt<1>("h00")) @[fpu.scala 223:58]
      node T_294 = bits(in.bits.in2, 22, 22) @[fpu.scala 228:46]
      node T_296 = eq(T_294, UInt<1>("h00")) @[fpu.scala 228:43]
      node T_297 = and(T_293, T_296) @[fpu.scala 228:40]
      node T_298 = bits(in.bits.rm, 0, 0) @[fpu.scala 421:30]
      node T_299 = neq(T_298, io.lt) @[fpu.scala 421:34]
      node T_301 = eq(T_277, UInt<1>("h00")) @[fpu.scala 421:47]
      node T_302 = and(T_299, T_301) @[fpu.scala 421:44]
      node T_303 = or(T_281, T_302) @[fpu.scala 421:17]
      node T_304 = or(T_289, T_297) @[fpu.scala 421:64]
      node T_305 = bits(in.bits.in1, 63, 61) @[fpu.scala 223:7]
      node T_306 = not(T_305) @[fpu.scala 223:58]
      node T_308 = eq(T_306, UInt<1>("h00")) @[fpu.scala 223:58]
      node T_309 = bits(in.bits.in2, 63, 61) @[fpu.scala 223:7]
      node T_310 = not(T_309) @[fpu.scala 223:58]
      node T_312 = eq(T_310, UInt<1>("h00")) @[fpu.scala 223:58]
      node T_313 = bits(in.bits.in1, 63, 61) @[fpu.scala 223:7]
      node T_314 = not(T_313) @[fpu.scala 223:58]
      node T_316 = eq(T_314, UInt<1>("h00")) @[fpu.scala 223:58]
      node T_317 = bits(in.bits.in1, 51, 51) @[fpu.scala 228:46]
      node T_319 = eq(T_317, UInt<1>("h00")) @[fpu.scala 228:43]
      node T_320 = and(T_316, T_319) @[fpu.scala 228:40]
      node T_321 = bits(in.bits.in2, 63, 61) @[fpu.scala 223:7]
      node T_322 = not(T_321) @[fpu.scala 223:58]
      node T_324 = eq(T_322, UInt<1>("h00")) @[fpu.scala 223:58]
      node T_325 = bits(in.bits.in2, 51, 51) @[fpu.scala 228:46]
      node T_327 = eq(T_325, UInt<1>("h00")) @[fpu.scala 228:43]
      node T_328 = and(T_324, T_327) @[fpu.scala 228:40]
      node T_329 = bits(in.bits.rm, 0, 0) @[fpu.scala 421:30]
      node T_330 = neq(T_329, io.lt) @[fpu.scala 421:34]
      node T_332 = eq(T_308, UInt<1>("h00")) @[fpu.scala 421:47]
      node T_333 = and(T_330, T_332) @[fpu.scala 421:44]
      node T_334 = or(T_312, T_333) @[fpu.scala 421:17]
      node T_335 = or(T_320, T_328) @[fpu.scala 421:64]
      node T_336 = mux(in.bits.single, T_303, T_334) @[util.scala 39:9]
      node T_337 = mux(in.bits.single, T_304, T_335) @[util.scala 39:36]
      node T_338 = shl(T_337, 4) @[fpu.scala 427:28]
      mux.exc <= T_338 @[fpu.scala 427:15]
      mux.data <= in.bits.in1 @[fpu.scala 428:16]
      node T_340 = eq(T_336, UInt<1>("h00")) @[fpu.scala 429:13]
      when T_340 : @[fpu.scala 429:21]
        mux.data <= in.bits.in2 @[fpu.scala 429:32]
        skip @[fpu.scala 429:21]
      skip @[fpu.scala 415:40]
    node T_343 = and(in.bits.cmd, UInt<3>("h04")) @[fpu.scala 435:27]
    node T_344 = eq(UInt<5>("h00"), T_343) @[fpu.scala 435:27]
    when T_344 : @[fpu.scala 435:44]
      when in.bits.single : @[fpu.scala 436:33]
        inst RecFNToRecFN_2 of RecFNToRecFN @[fpu.scala 437:29]
        RecFNToRecFN_2.io is invalid
        RecFNToRecFN_2.clk <= clk
        RecFNToRecFN_2.reset <= reset
        RecFNToRecFN_2.io.in <= in.bits.in1 @[fpu.scala 438:23]
        RecFNToRecFN_2.io.roundingMode <= in.bits.rm @[fpu.scala 439:33]
        node T_346 = cat(UInt<32>("h0ffffffff"), RecFNToRecFN_2.io.out) @[Cat.scala 20:58]
        mux.data <= T_346 @[fpu.scala 440:20]
        mux.exc <= RecFNToRecFN_2.io.exceptionFlags @[fpu.scala 441:19]
        skip @[fpu.scala 436:33]
      node T_348 = eq(in.bits.single, UInt<1>("h00")) @[fpu.scala 436:33]
      when T_348 : @[fpu.scala 442:21]
        inst RecFNToRecFN_1_1 of RecFNToRecFN_1 @[fpu.scala 443:27]
        RecFNToRecFN_1_1.io is invalid
        RecFNToRecFN_1_1.clk <= clk
        RecFNToRecFN_1_1.reset <= reset
        RecFNToRecFN_1_1.io.in <= in.bits.in1 @[fpu.scala 444:21]
        RecFNToRecFN_1_1.io.roundingMode <= in.bits.rm @[fpu.scala 445:31]
        mux.data <= RecFNToRecFN_1_1.io.out @[fpu.scala 446:20]
        mux.exc <= RecFNToRecFN_1_1.io.exceptionFlags @[fpu.scala 447:19]
        skip @[fpu.scala 442:21]
      skip @[fpu.scala 435:44]
    reg T_351 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_351 <= in.valid
    reg T_352 : {data : UInt<65>, exc : UInt<5>}, clk
    when in.valid : @[Reg.scala 29:19]
      T_352 <- mux @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    wire T_363 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 39:21]
    T_363 is invalid @[Valid.scala 39:21]
    T_363.valid <= T_351 @[Valid.scala 40:17]
    T_363.bits <- T_352 @[Valid.scala 41:16]
    io.out <- T_363 @[fpu.scala 452:10]
    
  module MulAddRecFN_preMul_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip op : UInt<2>, flip a : UInt<65>, flip b : UInt<65>, flip c : UInt<65>, flip roundingMode : UInt<2>, mulAddA : UInt<53>, mulAddB : UInt<53>, mulAddC : UInt<106>, toPostMul : {highExpA : UInt<3>, isNaN_isQuietNaNA : UInt<1>, highExpB : UInt<3>, isNaN_isQuietNaNB : UInt<1>, signProd : UInt<1>, isZeroProd : UInt<1>, opSignC : UInt<1>, highExpC : UInt<3>, isNaN_isQuietNaNC : UInt<1>, isCDominant : UInt<1>, CAlignDist_0 : UInt<1>, CAlignDist : UInt<8>, bit0AlignedNegSigC : UInt<1>, highAlignedNegSigC : UInt<55>, sExpSum : UInt<14>, roundingMode : UInt<2>}}
    
    io is invalid
    node signA = bits(io.a, 64, 64) @[MulAddRecFN.scala 102:22]
    node expA = bits(io.a, 63, 52) @[MulAddRecFN.scala 103:22]
    node fractA = bits(io.a, 51, 0) @[MulAddRecFN.scala 104:22]
    node T_42 = bits(expA, 11, 9) @[MulAddRecFN.scala 105:24]
    node isZeroA = eq(T_42, UInt<1>("h00")) @[MulAddRecFN.scala 105:49]
    node T_45 = eq(isZeroA, UInt<1>("h00")) @[MulAddRecFN.scala 106:20]
    node sigA = cat(T_45, fractA) @[Cat.scala 20:58]
    node signB = bits(io.b, 64, 64) @[MulAddRecFN.scala 108:22]
    node expB = bits(io.b, 63, 52) @[MulAddRecFN.scala 109:22]
    node fractB = bits(io.b, 51, 0) @[MulAddRecFN.scala 110:22]
    node T_46 = bits(expB, 11, 9) @[MulAddRecFN.scala 111:24]
    node isZeroB = eq(T_46, UInt<1>("h00")) @[MulAddRecFN.scala 111:49]
    node T_49 = eq(isZeroB, UInt<1>("h00")) @[MulAddRecFN.scala 112:20]
    node sigB = cat(T_49, fractB) @[Cat.scala 20:58]
    node T_50 = bits(io.c, 64, 64) @[MulAddRecFN.scala 114:23]
    node T_51 = bits(io.op, 0, 0) @[MulAddRecFN.scala 114:52]
    node opSignC = xor(T_50, T_51) @[MulAddRecFN.scala 114:45]
    node expC = bits(io.c, 63, 52) @[MulAddRecFN.scala 115:22]
    node fractC = bits(io.c, 51, 0) @[MulAddRecFN.scala 116:22]
    node T_52 = bits(expC, 11, 9) @[MulAddRecFN.scala 117:24]
    node isZeroC = eq(T_52, UInt<1>("h00")) @[MulAddRecFN.scala 117:49]
    node T_55 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 118:20]
    node sigC = cat(T_55, fractC) @[Cat.scala 20:58]
    node T_56 = xor(signA, signB) @[MulAddRecFN.scala 122:26]
    node T_57 = bits(io.op, 1, 1) @[MulAddRecFN.scala 122:41]
    node signProd = xor(T_56, T_57) @[MulAddRecFN.scala 122:34]
    node isZeroProd = or(isZeroA, isZeroB) @[MulAddRecFN.scala 123:30]
    node T_58 = bits(expB, 11, 11) @[MulAddRecFN.scala 125:34]
    node T_60 = eq(T_58, UInt<1>("h00")) @[MulAddRecFN.scala 125:28]
    node T_61 = bits(T_60, 0, 0) @[Bitwise.scala 33:15]
    node T_64 = mux(T_61, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12]
    node T_65 = bits(expB, 10, 0) @[MulAddRecFN.scala 125:51]
    node T_66 = cat(T_64, T_65) @[Cat.scala 20:58]
    node T_67 = add(expA, T_66) @[MulAddRecFN.scala 125:14]
    node T_68 = tail(T_67, 1) @[MulAddRecFN.scala 125:14]
    node T_70 = add(T_68, UInt<6>("h038")) @[MulAddRecFN.scala 125:70]
    node sExpAlignedProd = tail(T_70, 1) @[MulAddRecFN.scala 125:70]
    node doSubMags = xor(signProd, opSignC) @[MulAddRecFN.scala 130:30]
    node T_71 = sub(sExpAlignedProd, expC) @[MulAddRecFN.scala 132:42]
    node sNatCAlignDist = tail(T_71, 1) @[MulAddRecFN.scala 132:42]
    node T_72 = bits(sNatCAlignDist, 13, 13) @[MulAddRecFN.scala 133:56]
    node CAlignDist_floor = or(isZeroProd, T_72) @[MulAddRecFN.scala 133:39]
    node T_73 = bits(sNatCAlignDist, 12, 0) @[MulAddRecFN.scala 135:44]
    node T_75 = eq(T_73, UInt<1>("h00")) @[MulAddRecFN.scala 135:62]
    node CAlignDist_0 = or(CAlignDist_floor, T_75) @[MulAddRecFN.scala 135:26]
    node T_77 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 137:9]
    node T_78 = bits(sNatCAlignDist, 12, 0) @[MulAddRecFN.scala 139:33]
    node T_80 = lt(T_78, UInt<6>("h036")) @[MulAddRecFN.scala 139:51]
    node T_81 = or(CAlignDist_floor, T_80) @[MulAddRecFN.scala 138:31]
    node isCDominant = and(T_77, T_81) @[MulAddRecFN.scala 137:19]
    node T_83 = bits(sNatCAlignDist, 12, 0) @[MulAddRecFN.scala 143:31]
    node T_85 = lt(T_83, UInt<8>("h0a1")) @[MulAddRecFN.scala 143:49]
    node T_86 = bits(sNatCAlignDist, 7, 0) @[MulAddRecFN.scala 144:31]
    node T_88 = mux(T_85, T_86, UInt<8>("h0a1")) @[MulAddRecFN.scala 143:16]
    node CAlignDist = mux(CAlignDist_floor, UInt<1>("h00"), T_88) @[MulAddRecFN.scala 141:12]
    node sExpSum = mux(CAlignDist_floor, expC, sExpAlignedProd) @[MulAddRecFN.scala 148:22]
    node T_89 = bits(CAlignDist, 7, 7) @[primitives.scala 56:25]
    node T_90 = bits(CAlignDist, 6, 0) @[primitives.scala 57:26]
    node T_91 = bits(T_90, 6, 6) @[primitives.scala 56:25]
    node T_92 = bits(T_90, 5, 0) @[primitives.scala 57:26]
    node T_95 = dshr(asSInt(UInt<65>("h010000000000000000")), T_92) @[primitives.scala 68:52]
    node T_96 = bits(T_95, 63, 31) @[primitives.scala 69:26]
    node T_97 = bits(T_96, 31, 0) @[Bitwise.scala 65:18]
    node T_100 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 58:47]
    node T_101 = xor(UInt<32>("h0ffffffff"), T_100) @[Bitwise.scala 58:21]
    node T_102 = shr(T_97, 16) @[Bitwise.scala 59:21]
    node T_103 = and(T_102, T_101) @[Bitwise.scala 59:31]
    node T_104 = bits(T_97, 15, 0) @[Bitwise.scala 59:46]
    node T_105 = shl(T_104, 16) @[Bitwise.scala 59:65]
    node T_106 = not(T_101) @[Bitwise.scala 59:77]
    node T_107 = and(T_105, T_106) @[Bitwise.scala 59:75]
    node T_108 = or(T_103, T_107) @[Bitwise.scala 59:39]
    node T_109 = bits(T_101, 23, 0) @[Bitwise.scala 58:28]
    node T_110 = shl(T_109, 8) @[Bitwise.scala 58:47]
    node T_111 = xor(T_101, T_110) @[Bitwise.scala 58:21]
    node T_112 = shr(T_108, 8) @[Bitwise.scala 59:21]
    node T_113 = and(T_112, T_111) @[Bitwise.scala 59:31]
    node T_114 = bits(T_108, 23, 0) @[Bitwise.scala 59:46]
    node T_115 = shl(T_114, 8) @[Bitwise.scala 59:65]
    node T_116 = not(T_111) @[Bitwise.scala 59:77]
    node T_117 = and(T_115, T_116) @[Bitwise.scala 59:75]
    node T_118 = or(T_113, T_117) @[Bitwise.scala 59:39]
    node T_119 = bits(T_111, 27, 0) @[Bitwise.scala 58:28]
    node T_120 = shl(T_119, 4) @[Bitwise.scala 58:47]
    node T_121 = xor(T_111, T_120) @[Bitwise.scala 58:21]
    node T_122 = shr(T_118, 4) @[Bitwise.scala 59:21]
    node T_123 = and(T_122, T_121) @[Bitwise.scala 59:31]
    node T_124 = bits(T_118, 27, 0) @[Bitwise.scala 59:46]
    node T_125 = shl(T_124, 4) @[Bitwise.scala 59:65]
    node T_126 = not(T_121) @[Bitwise.scala 59:77]
    node T_127 = and(T_125, T_126) @[Bitwise.scala 59:75]
    node T_128 = or(T_123, T_127) @[Bitwise.scala 59:39]
    node T_129 = bits(T_121, 29, 0) @[Bitwise.scala 58:28]
    node T_130 = shl(T_129, 2) @[Bitwise.scala 58:47]
    node T_131 = xor(T_121, T_130) @[Bitwise.scala 58:21]
    node T_132 = shr(T_128, 2) @[Bitwise.scala 59:21]
    node T_133 = and(T_132, T_131) @[Bitwise.scala 59:31]
    node T_134 = bits(T_128, 29, 0) @[Bitwise.scala 59:46]
    node T_135 = shl(T_134, 2) @[Bitwise.scala 59:65]
    node T_136 = not(T_131) @[Bitwise.scala 59:77]
    node T_137 = and(T_135, T_136) @[Bitwise.scala 59:75]
    node T_138 = or(T_133, T_137) @[Bitwise.scala 59:39]
    node T_139 = bits(T_131, 30, 0) @[Bitwise.scala 58:28]
    node T_140 = shl(T_139, 1) @[Bitwise.scala 58:47]
    node T_141 = xor(T_131, T_140) @[Bitwise.scala 58:21]
    node T_142 = shr(T_138, 1) @[Bitwise.scala 59:21]
    node T_143 = and(T_142, T_141) @[Bitwise.scala 59:31]
    node T_144 = bits(T_138, 30, 0) @[Bitwise.scala 59:46]
    node T_145 = shl(T_144, 1) @[Bitwise.scala 59:65]
    node T_146 = not(T_141) @[Bitwise.scala 59:77]
    node T_147 = and(T_145, T_146) @[Bitwise.scala 59:75]
    node T_148 = or(T_143, T_147) @[Bitwise.scala 59:39]
    node T_149 = bits(T_96, 32, 32) @[Bitwise.scala 65:44]
    node T_150 = cat(T_148, T_149) @[Cat.scala 20:58]
    node T_151 = not(T_150) @[primitives.scala 65:36]
    node T_152 = mux(T_91, UInt<1>("h00"), T_151) @[primitives.scala 65:21]
    node T_153 = not(T_152) @[primitives.scala 65:17]
    node T_155 = cat(T_153, UInt<20>("h0fffff")) @[Cat.scala 20:58]
    node T_156 = bits(T_90, 6, 6) @[primitives.scala 56:25]
    node T_157 = bits(T_90, 5, 0) @[primitives.scala 57:26]
    node T_159 = dshr(asSInt(UInt<65>("h010000000000000000")), T_157) @[primitives.scala 68:52]
    node T_160 = bits(T_159, 19, 0) @[primitives.scala 69:26]
    node T_161 = bits(T_160, 15, 0) @[Bitwise.scala 65:18]
    node T_164 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47]
    node T_165 = xor(UInt<16>("h0ffff"), T_164) @[Bitwise.scala 58:21]
    node T_166 = shr(T_161, 8) @[Bitwise.scala 59:21]
    node T_167 = and(T_166, T_165) @[Bitwise.scala 59:31]
    node T_168 = bits(T_161, 7, 0) @[Bitwise.scala 59:46]
    node T_169 = shl(T_168, 8) @[Bitwise.scala 59:65]
    node T_170 = not(T_165) @[Bitwise.scala 59:77]
    node T_171 = and(T_169, T_170) @[Bitwise.scala 59:75]
    node T_172 = or(T_167, T_171) @[Bitwise.scala 59:39]
    node T_173 = bits(T_165, 11, 0) @[Bitwise.scala 58:28]
    node T_174 = shl(T_173, 4) @[Bitwise.scala 58:47]
    node T_175 = xor(T_165, T_174) @[Bitwise.scala 58:21]
    node T_176 = shr(T_172, 4) @[Bitwise.scala 59:21]
    node T_177 = and(T_176, T_175) @[Bitwise.scala 59:31]
    node T_178 = bits(T_172, 11, 0) @[Bitwise.scala 59:46]
    node T_179 = shl(T_178, 4) @[Bitwise.scala 59:65]
    node T_180 = not(T_175) @[Bitwise.scala 59:77]
    node T_181 = and(T_179, T_180) @[Bitwise.scala 59:75]
    node T_182 = or(T_177, T_181) @[Bitwise.scala 59:39]
    node T_183 = bits(T_175, 13, 0) @[Bitwise.scala 58:28]
    node T_184 = shl(T_183, 2) @[Bitwise.scala 58:47]
    node T_185 = xor(T_175, T_184) @[Bitwise.scala 58:21]
    node T_186 = shr(T_182, 2) @[Bitwise.scala 59:21]
    node T_187 = and(T_186, T_185) @[Bitwise.scala 59:31]
    node T_188 = bits(T_182, 13, 0) @[Bitwise.scala 59:46]
    node T_189 = shl(T_188, 2) @[Bitwise.scala 59:65]
    node T_190 = not(T_185) @[Bitwise.scala 59:77]
    node T_191 = and(T_189, T_190) @[Bitwise.scala 59:75]
    node T_192 = or(T_187, T_191) @[Bitwise.scala 59:39]
    node T_193 = bits(T_185, 14, 0) @[Bitwise.scala 58:28]
    node T_194 = shl(T_193, 1) @[Bitwise.scala 58:47]
    node T_195 = xor(T_185, T_194) @[Bitwise.scala 58:21]
    node T_196 = shr(T_192, 1) @[Bitwise.scala 59:21]
    node T_197 = and(T_196, T_195) @[Bitwise.scala 59:31]
    node T_198 = bits(T_192, 14, 0) @[Bitwise.scala 59:46]
    node T_199 = shl(T_198, 1) @[Bitwise.scala 59:65]
    node T_200 = not(T_195) @[Bitwise.scala 59:77]
    node T_201 = and(T_199, T_200) @[Bitwise.scala 59:75]
    node T_202 = or(T_197, T_201) @[Bitwise.scala 59:39]
    node T_203 = bits(T_160, 19, 16) @[Bitwise.scala 65:44]
    node T_204 = bits(T_203, 1, 0) @[Bitwise.scala 65:18]
    node T_205 = bits(T_204, 0, 0) @[Bitwise.scala 65:18]
    node T_206 = bits(T_204, 1, 1) @[Bitwise.scala 65:44]
    node T_207 = cat(T_205, T_206) @[Cat.scala 20:58]
    node T_208 = bits(T_203, 3, 2) @[Bitwise.scala 65:44]
    node T_209 = bits(T_208, 0, 0) @[Bitwise.scala 65:18]
    node T_210 = bits(T_208, 1, 1) @[Bitwise.scala 65:44]
    node T_211 = cat(T_209, T_210) @[Cat.scala 20:58]
    node T_212 = cat(T_207, T_211) @[Cat.scala 20:58]
    node T_213 = cat(T_202, T_212) @[Cat.scala 20:58]
    node T_215 = mux(T_156, T_213, UInt<1>("h00")) @[primitives.scala 59:20]
    node CExtraMask = mux(T_89, T_155, T_215) @[primitives.scala 61:20]
    node T_216 = not(sigC) @[MulAddRecFN.scala 151:34]
    node negSigC = mux(doSubMags, T_216, sigC) @[MulAddRecFN.scala 151:22]
    node T_217 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15]
    node T_220 = mux(T_217, UInt<108>("h0fffffffffffffffffffffffffff"), UInt<108>("h00")) @[Bitwise.scala 33:12]
    node T_221 = cat(doSubMags, negSigC) @[Cat.scala 20:58]
    node T_222 = cat(T_221, T_220) @[Cat.scala 20:58]
    node T_223 = asSInt(T_222) @[MulAddRecFN.scala 154:64]
    node T_224 = dshr(T_223, CAlignDist) @[MulAddRecFN.scala 154:70]
    node T_225 = and(sigC, CExtraMask) @[MulAddRecFN.scala 156:19]
    node T_227 = neq(T_225, UInt<1>("h00")) @[MulAddRecFN.scala 156:33]
    node T_228 = xor(T_227, doSubMags) @[MulAddRecFN.scala 156:37]
    node T_229 = asUInt(T_224) @[Cat.scala 20:58]
    node T_230 = cat(T_229, T_228) @[Cat.scala 20:58]
    node alignedNegSigC = bits(T_230, 161, 0) @[MulAddRecFN.scala 157:10]
    io.mulAddA <= sigA @[MulAddRecFN.scala 159:16]
    io.mulAddB <= sigB @[MulAddRecFN.scala 160:16]
    node T_231 = bits(alignedNegSigC, 106, 1) @[MulAddRecFN.scala 161:33]
    io.mulAddC <= T_231 @[MulAddRecFN.scala 161:16]
    node T_232 = bits(expA, 11, 9) @[MulAddRecFN.scala 163:44]
    io.toPostMul.highExpA <= T_232 @[MulAddRecFN.scala 163:37]
    node T_233 = bits(fractA, 51, 51) @[MulAddRecFN.scala 164:46]
    io.toPostMul.isNaN_isQuietNaNA <= T_233 @[MulAddRecFN.scala 164:37]
    node T_234 = bits(expB, 11, 9) @[MulAddRecFN.scala 165:44]
    io.toPostMul.highExpB <= T_234 @[MulAddRecFN.scala 165:37]
    node T_235 = bits(fractB, 51, 51) @[MulAddRecFN.scala 166:46]
    io.toPostMul.isNaN_isQuietNaNB <= T_235 @[MulAddRecFN.scala 166:37]
    io.toPostMul.signProd <= signProd @[MulAddRecFN.scala 167:37]
    io.toPostMul.isZeroProd <= isZeroProd @[MulAddRecFN.scala 168:37]
    io.toPostMul.opSignC <= opSignC @[MulAddRecFN.scala 169:37]
    node T_236 = bits(expC, 11, 9) @[MulAddRecFN.scala 170:44]
    io.toPostMul.highExpC <= T_236 @[MulAddRecFN.scala 170:37]
    node T_237 = bits(fractC, 51, 51) @[MulAddRecFN.scala 171:46]
    io.toPostMul.isNaN_isQuietNaNC <= T_237 @[MulAddRecFN.scala 171:37]
    io.toPostMul.isCDominant <= isCDominant @[MulAddRecFN.scala 172:37]
    io.toPostMul.CAlignDist_0 <= CAlignDist_0 @[MulAddRecFN.scala 173:37]
    io.toPostMul.CAlignDist <= CAlignDist @[MulAddRecFN.scala 174:37]
    node T_238 = bits(alignedNegSigC, 0, 0) @[MulAddRecFN.scala 175:54]
    io.toPostMul.bit0AlignedNegSigC <= T_238 @[MulAddRecFN.scala 175:37]
    node T_239 = bits(alignedNegSigC, 161, 107) @[MulAddRecFN.scala 177:23]
    io.toPostMul.highAlignedNegSigC <= T_239 @[MulAddRecFN.scala 176:37]
    io.toPostMul.sExpSum <= sExpSum @[MulAddRecFN.scala 178:37]
    io.toPostMul.roundingMode <= io.roundingMode @[MulAddRecFN.scala 179:37]
    
  module MulAddRecFN_postMul_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip fromPreMul : {highExpA : UInt<3>, isNaN_isQuietNaNA : UInt<1>, highExpB : UInt<3>, isNaN_isQuietNaNB : UInt<1>, signProd : UInt<1>, isZeroProd : UInt<1>, opSignC : UInt<1>, highExpC : UInt<3>, isNaN_isQuietNaNC : UInt<1>, isCDominant : UInt<1>, CAlignDist_0 : UInt<1>, CAlignDist : UInt<8>, bit0AlignedNegSigC : UInt<1>, highAlignedNegSigC : UInt<55>, sExpSum : UInt<14>, roundingMode : UInt<2>}, flip mulAddResult : UInt<107>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    node isZeroA = eq(io.fromPreMul.highExpA, UInt<1>("h00")) @[MulAddRecFN.scala 207:46]
    node T_38 = bits(io.fromPreMul.highExpA, 2, 1) @[MulAddRecFN.scala 208:45]
    node isSpecialA = eq(T_38, UInt<2>("h03")) @[MulAddRecFN.scala 208:52]
    node T_40 = bits(io.fromPreMul.highExpA, 0, 0) @[MulAddRecFN.scala 209:56]
    node T_42 = eq(T_40, UInt<1>("h00")) @[MulAddRecFN.scala 209:32]
    node isInfA = and(isSpecialA, T_42) @[MulAddRecFN.scala 209:29]
    node T_43 = bits(io.fromPreMul.highExpA, 0, 0) @[MulAddRecFN.scala 210:56]
    node isNaNA = and(isSpecialA, T_43) @[MulAddRecFN.scala 210:29]
    node T_45 = eq(io.fromPreMul.isNaN_isQuietNaNA, UInt<1>("h00")) @[MulAddRecFN.scala 211:31]
    node isSigNaNA = and(isNaNA, T_45) @[MulAddRecFN.scala 211:28]
    node isZeroB = eq(io.fromPreMul.highExpB, UInt<1>("h00")) @[MulAddRecFN.scala 213:46]
    node T_47 = bits(io.fromPreMul.highExpB, 2, 1) @[MulAddRecFN.scala 214:45]
    node isSpecialB = eq(T_47, UInt<2>("h03")) @[MulAddRecFN.scala 214:52]
    node T_49 = bits(io.fromPreMul.highExpB, 0, 0) @[MulAddRecFN.scala 215:56]
    node T_51 = eq(T_49, UInt<1>("h00")) @[MulAddRecFN.scala 215:32]
    node isInfB = and(isSpecialB, T_51) @[MulAddRecFN.scala 215:29]
    node T_52 = bits(io.fromPreMul.highExpB, 0, 0) @[MulAddRecFN.scala 216:56]
    node isNaNB = and(isSpecialB, T_52) @[MulAddRecFN.scala 216:29]
    node T_54 = eq(io.fromPreMul.isNaN_isQuietNaNB, UInt<1>("h00")) @[MulAddRecFN.scala 217:31]
    node isSigNaNB = and(isNaNB, T_54) @[MulAddRecFN.scala 217:28]
    node isZeroC = eq(io.fromPreMul.highExpC, UInt<1>("h00")) @[MulAddRecFN.scala 219:46]
    node T_56 = bits(io.fromPreMul.highExpC, 2, 1) @[MulAddRecFN.scala 220:45]
    node isSpecialC = eq(T_56, UInt<2>("h03")) @[MulAddRecFN.scala 220:52]
    node T_58 = bits(io.fromPreMul.highExpC, 0, 0) @[MulAddRecFN.scala 221:56]
    node T_60 = eq(T_58, UInt<1>("h00")) @[MulAddRecFN.scala 221:32]
    node isInfC = and(isSpecialC, T_60) @[MulAddRecFN.scala 221:29]
    node T_61 = bits(io.fromPreMul.highExpC, 0, 0) @[MulAddRecFN.scala 222:56]
    node isNaNC = and(isSpecialC, T_61) @[MulAddRecFN.scala 222:29]
    node T_63 = eq(io.fromPreMul.isNaN_isQuietNaNC, UInt<1>("h00")) @[MulAddRecFN.scala 223:31]
    node isSigNaNC = and(isNaNC, T_63) @[MulAddRecFN.scala 223:28]
    node roundingMode_nearest_even = eq(io.fromPreMul.roundingMode, UInt<2>("h00")) @[MulAddRecFN.scala 226:37]
    node roundingMode_minMag = eq(io.fromPreMul.roundingMode, UInt<2>("h01")) @[MulAddRecFN.scala 227:59]
    node roundingMode_min = eq(io.fromPreMul.roundingMode, UInt<2>("h02")) @[MulAddRecFN.scala 228:59]
    node roundingMode_max = eq(io.fromPreMul.roundingMode, UInt<2>("h03")) @[MulAddRecFN.scala 229:59]
    node signZeroNotEqOpSigns = mux(roundingMode_min, UInt<1>("h01"), UInt<1>("h00")) @[MulAddRecFN.scala 231:35]
    node doSubMags = xor(io.fromPreMul.signProd, io.fromPreMul.opSignC) @[MulAddRecFN.scala 232:44]
    node T_66 = bits(io.mulAddResult, 106, 106) @[MulAddRecFN.scala 237:32]
    node T_68 = add(io.fromPreMul.highAlignedNegSigC, UInt<1>("h01")) @[MulAddRecFN.scala 238:50]
    node T_69 = tail(T_68, 1) @[MulAddRecFN.scala 238:50]
    node T_70 = mux(T_66, T_69, io.fromPreMul.highAlignedNegSigC) @[MulAddRecFN.scala 237:16]
    node T_71 = bits(io.mulAddResult, 105, 0) @[MulAddRecFN.scala 241:28]
    node T_72 = cat(T_70, T_71) @[Cat.scala 20:58]
    node sigSum = cat(T_72, io.fromPreMul.bit0AlignedNegSigC) @[Cat.scala 20:58]
    node T_74 = bits(sigSum, 108, 1) @[MulAddRecFN.scala 248:38]
    node T_75 = xor(UInt<108>("h00"), T_74) @[MulAddRecFN.scala 191:27]
    node T_76 = or(UInt<108>("h00"), T_74) @[MulAddRecFN.scala 191:37]
    node T_77 = shl(T_76, 1) @[MulAddRecFN.scala 191:41]
    node T_78 = xor(T_75, T_77) @[MulAddRecFN.scala 191:32]
    node T_80 = bits(T_78, 107, 0) @[primitives.scala 79:35]
    node T_81 = bits(T_80, 107, 64) @[CircuitMath.scala 26:17]
    node T_82 = bits(T_80, 63, 0) @[CircuitMath.scala 27:17]
    node T_84 = neq(T_81, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_85 = bits(T_81, 43, 32) @[CircuitMath.scala 26:17]
    node T_86 = bits(T_81, 31, 0) @[CircuitMath.scala 27:17]
    node T_88 = neq(T_85, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_89 = bits(T_85, 11, 8) @[CircuitMath.scala 26:17]
    node T_90 = bits(T_85, 7, 0) @[CircuitMath.scala 27:17]
    node T_92 = neq(T_89, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_93 = bits(T_89, 3, 3) @[CircuitMath.scala 23:12]
    node T_95 = bits(T_89, 2, 2) @[CircuitMath.scala 23:12]
    node T_97 = bits(T_89, 1, 1) @[CircuitMath.scala 21:8]
    node T_98 = shl(T_97, 0) @[CircuitMath.scala 23:10]
    node T_99 = mux(T_95, UInt<2>("h02"), T_98) @[CircuitMath.scala 23:10]
    node T_100 = mux(T_93, UInt<2>("h03"), T_99) @[CircuitMath.scala 23:10]
    node T_101 = bits(T_90, 7, 4) @[CircuitMath.scala 26:17]
    node T_102 = bits(T_90, 3, 0) @[CircuitMath.scala 27:17]
    node T_104 = neq(T_101, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_105 = bits(T_101, 3, 3) @[CircuitMath.scala 23:12]
    node T_107 = bits(T_101, 2, 2) @[CircuitMath.scala 23:12]
    node T_109 = bits(T_101, 1, 1) @[CircuitMath.scala 21:8]
    node T_110 = shl(T_109, 0) @[CircuitMath.scala 23:10]
    node T_111 = mux(T_107, UInt<2>("h02"), T_110) @[CircuitMath.scala 23:10]
    node T_112 = mux(T_105, UInt<2>("h03"), T_111) @[CircuitMath.scala 23:10]
    node T_113 = bits(T_102, 3, 3) @[CircuitMath.scala 23:12]
    node T_115 = bits(T_102, 2, 2) @[CircuitMath.scala 23:12]
    node T_117 = bits(T_102, 1, 1) @[CircuitMath.scala 21:8]
    node T_118 = shl(T_117, 0) @[CircuitMath.scala 23:10]
    node T_119 = mux(T_115, UInt<2>("h02"), T_118) @[CircuitMath.scala 23:10]
    node T_120 = mux(T_113, UInt<2>("h03"), T_119) @[CircuitMath.scala 23:10]
    node T_121 = mux(T_104, T_112, T_120) @[CircuitMath.scala 29:21]
    node T_122 = cat(T_104, T_121) @[Cat.scala 20:58]
    node T_123 = mux(T_92, T_100, T_122) @[CircuitMath.scala 29:21]
    node T_124 = cat(T_92, T_123) @[Cat.scala 20:58]
    node T_125 = bits(T_86, 31, 16) @[CircuitMath.scala 26:17]
    node T_126 = bits(T_86, 15, 0) @[CircuitMath.scala 27:17]
    node T_128 = neq(T_125, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_129 = bits(T_125, 15, 8) @[CircuitMath.scala 26:17]
    node T_130 = bits(T_125, 7, 0) @[CircuitMath.scala 27:17]
    node T_132 = neq(T_129, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_133 = bits(T_129, 7, 4) @[CircuitMath.scala 26:17]
    node T_134 = bits(T_129, 3, 0) @[CircuitMath.scala 27:17]
    node T_136 = neq(T_133, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_137 = bits(T_133, 3, 3) @[CircuitMath.scala 23:12]
    node T_139 = bits(T_133, 2, 2) @[CircuitMath.scala 23:12]
    node T_141 = bits(T_133, 1, 1) @[CircuitMath.scala 21:8]
    node T_142 = shl(T_141, 0) @[CircuitMath.scala 23:10]
    node T_143 = mux(T_139, UInt<2>("h02"), T_142) @[CircuitMath.scala 23:10]
    node T_144 = mux(T_137, UInt<2>("h03"), T_143) @[CircuitMath.scala 23:10]
    node T_145 = bits(T_134, 3, 3) @[CircuitMath.scala 23:12]
    node T_147 = bits(T_134, 2, 2) @[CircuitMath.scala 23:12]
    node T_149 = bits(T_134, 1, 1) @[CircuitMath.scala 21:8]
    node T_150 = shl(T_149, 0) @[CircuitMath.scala 23:10]
    node T_151 = mux(T_147, UInt<2>("h02"), T_150) @[CircuitMath.scala 23:10]
    node T_152 = mux(T_145, UInt<2>("h03"), T_151) @[CircuitMath.scala 23:10]
    node T_153 = mux(T_136, T_144, T_152) @[CircuitMath.scala 29:21]
    node T_154 = cat(T_136, T_153) @[Cat.scala 20:58]
    node T_155 = bits(T_130, 7, 4) @[CircuitMath.scala 26:17]
    node T_156 = bits(T_130, 3, 0) @[CircuitMath.scala 27:17]
    node T_158 = neq(T_155, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_159 = bits(T_155, 3, 3) @[CircuitMath.scala 23:12]
    node T_161 = bits(T_155, 2, 2) @[CircuitMath.scala 23:12]
    node T_163 = bits(T_155, 1, 1) @[CircuitMath.scala 21:8]
    node T_164 = shl(T_163, 0) @[CircuitMath.scala 23:10]
    node T_165 = mux(T_161, UInt<2>("h02"), T_164) @[CircuitMath.scala 23:10]
    node T_166 = mux(T_159, UInt<2>("h03"), T_165) @[CircuitMath.scala 23:10]
    node T_167 = bits(T_156, 3, 3) @[CircuitMath.scala 23:12]
    node T_169 = bits(T_156, 2, 2) @[CircuitMath.scala 23:12]
    node T_171 = bits(T_156, 1, 1) @[CircuitMath.scala 21:8]
    node T_172 = shl(T_171, 0) @[CircuitMath.scala 23:10]
    node T_173 = mux(T_169, UInt<2>("h02"), T_172) @[CircuitMath.scala 23:10]
    node T_174 = mux(T_167, UInt<2>("h03"), T_173) @[CircuitMath.scala 23:10]
    node T_175 = mux(T_158, T_166, T_174) @[CircuitMath.scala 29:21]
    node T_176 = cat(T_158, T_175) @[Cat.scala 20:58]
    node T_177 = mux(T_132, T_154, T_176) @[CircuitMath.scala 29:21]
    node T_178 = cat(T_132, T_177) @[Cat.scala 20:58]
    node T_179 = bits(T_126, 15, 8) @[CircuitMath.scala 26:17]
    node T_180 = bits(T_126, 7, 0) @[CircuitMath.scala 27:17]
    node T_182 = neq(T_179, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_183 = bits(T_179, 7, 4) @[CircuitMath.scala 26:17]
    node T_184 = bits(T_179, 3, 0) @[CircuitMath.scala 27:17]
    node T_186 = neq(T_183, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_187 = bits(T_183, 3, 3) @[CircuitMath.scala 23:12]
    node T_189 = bits(T_183, 2, 2) @[CircuitMath.scala 23:12]
    node T_191 = bits(T_183, 1, 1) @[CircuitMath.scala 21:8]
    node T_192 = shl(T_191, 0) @[CircuitMath.scala 23:10]
    node T_193 = mux(T_189, UInt<2>("h02"), T_192) @[CircuitMath.scala 23:10]
    node T_194 = mux(T_187, UInt<2>("h03"), T_193) @[CircuitMath.scala 23:10]
    node T_195 = bits(T_184, 3, 3) @[CircuitMath.scala 23:12]
    node T_197 = bits(T_184, 2, 2) @[CircuitMath.scala 23:12]
    node T_199 = bits(T_184, 1, 1) @[CircuitMath.scala 21:8]
    node T_200 = shl(T_199, 0) @[CircuitMath.scala 23:10]
    node T_201 = mux(T_197, UInt<2>("h02"), T_200) @[CircuitMath.scala 23:10]
    node T_202 = mux(T_195, UInt<2>("h03"), T_201) @[CircuitMath.scala 23:10]
    node T_203 = mux(T_186, T_194, T_202) @[CircuitMath.scala 29:21]
    node T_204 = cat(T_186, T_203) @[Cat.scala 20:58]
    node T_205 = bits(T_180, 7, 4) @[CircuitMath.scala 26:17]
    node T_206 = bits(T_180, 3, 0) @[CircuitMath.scala 27:17]
    node T_208 = neq(T_205, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_209 = bits(T_205, 3, 3) @[CircuitMath.scala 23:12]
    node T_211 = bits(T_205, 2, 2) @[CircuitMath.scala 23:12]
    node T_213 = bits(T_205, 1, 1) @[CircuitMath.scala 21:8]
    node T_214 = shl(T_213, 0) @[CircuitMath.scala 23:10]
    node T_215 = mux(T_211, UInt<2>("h02"), T_214) @[CircuitMath.scala 23:10]
    node T_216 = mux(T_209, UInt<2>("h03"), T_215) @[CircuitMath.scala 23:10]
    node T_217 = bits(T_206, 3, 3) @[CircuitMath.scala 23:12]
    node T_219 = bits(T_206, 2, 2) @[CircuitMath.scala 23:12]
    node T_221 = bits(T_206, 1, 1) @[CircuitMath.scala 21:8]
    node T_222 = shl(T_221, 0) @[CircuitMath.scala 23:10]
    node T_223 = mux(T_219, UInt<2>("h02"), T_222) @[CircuitMath.scala 23:10]
    node T_224 = mux(T_217, UInt<2>("h03"), T_223) @[CircuitMath.scala 23:10]
    node T_225 = mux(T_208, T_216, T_224) @[CircuitMath.scala 29:21]
    node T_226 = cat(T_208, T_225) @[Cat.scala 20:58]
    node T_227 = mux(T_182, T_204, T_226) @[CircuitMath.scala 29:21]
    node T_228 = cat(T_182, T_227) @[Cat.scala 20:58]
    node T_229 = mux(T_128, T_178, T_228) @[CircuitMath.scala 29:21]
    node T_230 = cat(T_128, T_229) @[Cat.scala 20:58]
    node T_231 = mux(T_88, T_124, T_230) @[CircuitMath.scala 29:21]
    node T_232 = cat(T_88, T_231) @[Cat.scala 20:58]
    node T_233 = bits(T_82, 63, 32) @[CircuitMath.scala 26:17]
    node T_234 = bits(T_82, 31, 0) @[CircuitMath.scala 27:17]
    node T_236 = neq(T_233, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_237 = bits(T_233, 31, 16) @[CircuitMath.scala 26:17]
    node T_238 = bits(T_233, 15, 0) @[CircuitMath.scala 27:17]
    node T_240 = neq(T_237, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_241 = bits(T_237, 15, 8) @[CircuitMath.scala 26:17]
    node T_242 = bits(T_237, 7, 0) @[CircuitMath.scala 27:17]
    node T_244 = neq(T_241, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_245 = bits(T_241, 7, 4) @[CircuitMath.scala 26:17]
    node T_246 = bits(T_241, 3, 0) @[CircuitMath.scala 27:17]
    node T_248 = neq(T_245, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_249 = bits(T_245, 3, 3) @[CircuitMath.scala 23:12]
    node T_251 = bits(T_245, 2, 2) @[CircuitMath.scala 23:12]
    node T_253 = bits(T_245, 1, 1) @[CircuitMath.scala 21:8]
    node T_254 = shl(T_253, 0) @[CircuitMath.scala 23:10]
    node T_255 = mux(T_251, UInt<2>("h02"), T_254) @[CircuitMath.scala 23:10]
    node T_256 = mux(T_249, UInt<2>("h03"), T_255) @[CircuitMath.scala 23:10]
    node T_257 = bits(T_246, 3, 3) @[CircuitMath.scala 23:12]
    node T_259 = bits(T_246, 2, 2) @[CircuitMath.scala 23:12]
    node T_261 = bits(T_246, 1, 1) @[CircuitMath.scala 21:8]
    node T_262 = shl(T_261, 0) @[CircuitMath.scala 23:10]
    node T_263 = mux(T_259, UInt<2>("h02"), T_262) @[CircuitMath.scala 23:10]
    node T_264 = mux(T_257, UInt<2>("h03"), T_263) @[CircuitMath.scala 23:10]
    node T_265 = mux(T_248, T_256, T_264) @[CircuitMath.scala 29:21]
    node T_266 = cat(T_248, T_265) @[Cat.scala 20:58]
    node T_267 = bits(T_242, 7, 4) @[CircuitMath.scala 26:17]
    node T_268 = bits(T_242, 3, 0) @[CircuitMath.scala 27:17]
    node T_270 = neq(T_267, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_271 = bits(T_267, 3, 3) @[CircuitMath.scala 23:12]
    node T_273 = bits(T_267, 2, 2) @[CircuitMath.scala 23:12]
    node T_275 = bits(T_267, 1, 1) @[CircuitMath.scala 21:8]
    node T_276 = shl(T_275, 0) @[CircuitMath.scala 23:10]
    node T_277 = mux(T_273, UInt<2>("h02"), T_276) @[CircuitMath.scala 23:10]
    node T_278 = mux(T_271, UInt<2>("h03"), T_277) @[CircuitMath.scala 23:10]
    node T_279 = bits(T_268, 3, 3) @[CircuitMath.scala 23:12]
    node T_281 = bits(T_268, 2, 2) @[CircuitMath.scala 23:12]
    node T_283 = bits(T_268, 1, 1) @[CircuitMath.scala 21:8]
    node T_284 = shl(T_283, 0) @[CircuitMath.scala 23:10]
    node T_285 = mux(T_281, UInt<2>("h02"), T_284) @[CircuitMath.scala 23:10]
    node T_286 = mux(T_279, UInt<2>("h03"), T_285) @[CircuitMath.scala 23:10]
    node T_287 = mux(T_270, T_278, T_286) @[CircuitMath.scala 29:21]
    node T_288 = cat(T_270, T_287) @[Cat.scala 20:58]
    node T_289 = mux(T_244, T_266, T_288) @[CircuitMath.scala 29:21]
    node T_290 = cat(T_244, T_289) @[Cat.scala 20:58]
    node T_291 = bits(T_238, 15, 8) @[CircuitMath.scala 26:17]
    node T_292 = bits(T_238, 7, 0) @[CircuitMath.scala 27:17]
    node T_294 = neq(T_291, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_295 = bits(T_291, 7, 4) @[CircuitMath.scala 26:17]
    node T_296 = bits(T_291, 3, 0) @[CircuitMath.scala 27:17]
    node T_298 = neq(T_295, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_299 = bits(T_295, 3, 3) @[CircuitMath.scala 23:12]
    node T_301 = bits(T_295, 2, 2) @[CircuitMath.scala 23:12]
    node T_303 = bits(T_295, 1, 1) @[CircuitMath.scala 21:8]
    node T_304 = shl(T_303, 0) @[CircuitMath.scala 23:10]
    node T_305 = mux(T_301, UInt<2>("h02"), T_304) @[CircuitMath.scala 23:10]
    node T_306 = mux(T_299, UInt<2>("h03"), T_305) @[CircuitMath.scala 23:10]
    node T_307 = bits(T_296, 3, 3) @[CircuitMath.scala 23:12]
    node T_309 = bits(T_296, 2, 2) @[CircuitMath.scala 23:12]
    node T_311 = bits(T_296, 1, 1) @[CircuitMath.scala 21:8]
    node T_312 = shl(T_311, 0) @[CircuitMath.scala 23:10]
    node T_313 = mux(T_309, UInt<2>("h02"), T_312) @[CircuitMath.scala 23:10]
    node T_314 = mux(T_307, UInt<2>("h03"), T_313) @[CircuitMath.scala 23:10]
    node T_315 = mux(T_298, T_306, T_314) @[CircuitMath.scala 29:21]
    node T_316 = cat(T_298, T_315) @[Cat.scala 20:58]
    node T_317 = bits(T_292, 7, 4) @[CircuitMath.scala 26:17]
    node T_318 = bits(T_292, 3, 0) @[CircuitMath.scala 27:17]
    node T_320 = neq(T_317, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_321 = bits(T_317, 3, 3) @[CircuitMath.scala 23:12]
    node T_323 = bits(T_317, 2, 2) @[CircuitMath.scala 23:12]
    node T_325 = bits(T_317, 1, 1) @[CircuitMath.scala 21:8]
    node T_326 = shl(T_325, 0) @[CircuitMath.scala 23:10]
    node T_327 = mux(T_323, UInt<2>("h02"), T_326) @[CircuitMath.scala 23:10]
    node T_328 = mux(T_321, UInt<2>("h03"), T_327) @[CircuitMath.scala 23:10]
    node T_329 = bits(T_318, 3, 3) @[CircuitMath.scala 23:12]
    node T_331 = bits(T_318, 2, 2) @[CircuitMath.scala 23:12]
    node T_333 = bits(T_318, 1, 1) @[CircuitMath.scala 21:8]
    node T_334 = shl(T_333, 0) @[CircuitMath.scala 23:10]
    node T_335 = mux(T_331, UInt<2>("h02"), T_334) @[CircuitMath.scala 23:10]
    node T_336 = mux(T_329, UInt<2>("h03"), T_335) @[CircuitMath.scala 23:10]
    node T_337 = mux(T_320, T_328, T_336) @[CircuitMath.scala 29:21]
    node T_338 = cat(T_320, T_337) @[Cat.scala 20:58]
    node T_339 = mux(T_294, T_316, T_338) @[CircuitMath.scala 29:21]
    node T_340 = cat(T_294, T_339) @[Cat.scala 20:58]
    node T_341 = mux(T_240, T_290, T_340) @[CircuitMath.scala 29:21]
    node T_342 = cat(T_240, T_341) @[Cat.scala 20:58]
    node T_343 = bits(T_234, 31, 16) @[CircuitMath.scala 26:17]
    node T_344 = bits(T_234, 15, 0) @[CircuitMath.scala 27:17]
    node T_346 = neq(T_343, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_347 = bits(T_343, 15, 8) @[CircuitMath.scala 26:17]
    node T_348 = bits(T_343, 7, 0) @[CircuitMath.scala 27:17]
    node T_350 = neq(T_347, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_351 = bits(T_347, 7, 4) @[CircuitMath.scala 26:17]
    node T_352 = bits(T_347, 3, 0) @[CircuitMath.scala 27:17]
    node T_354 = neq(T_351, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_355 = bits(T_351, 3, 3) @[CircuitMath.scala 23:12]
    node T_357 = bits(T_351, 2, 2) @[CircuitMath.scala 23:12]
    node T_359 = bits(T_351, 1, 1) @[CircuitMath.scala 21:8]
    node T_360 = shl(T_359, 0) @[CircuitMath.scala 23:10]
    node T_361 = mux(T_357, UInt<2>("h02"), T_360) @[CircuitMath.scala 23:10]
    node T_362 = mux(T_355, UInt<2>("h03"), T_361) @[CircuitMath.scala 23:10]
    node T_363 = bits(T_352, 3, 3) @[CircuitMath.scala 23:12]
    node T_365 = bits(T_352, 2, 2) @[CircuitMath.scala 23:12]
    node T_367 = bits(T_352, 1, 1) @[CircuitMath.scala 21:8]
    node T_368 = shl(T_367, 0) @[CircuitMath.scala 23:10]
    node T_369 = mux(T_365, UInt<2>("h02"), T_368) @[CircuitMath.scala 23:10]
    node T_370 = mux(T_363, UInt<2>("h03"), T_369) @[CircuitMath.scala 23:10]
    node T_371 = mux(T_354, T_362, T_370) @[CircuitMath.scala 29:21]
    node T_372 = cat(T_354, T_371) @[Cat.scala 20:58]
    node T_373 = bits(T_348, 7, 4) @[CircuitMath.scala 26:17]
    node T_374 = bits(T_348, 3, 0) @[CircuitMath.scala 27:17]
    node T_376 = neq(T_373, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_377 = bits(T_373, 3, 3) @[CircuitMath.scala 23:12]
    node T_379 = bits(T_373, 2, 2) @[CircuitMath.scala 23:12]
    node T_381 = bits(T_373, 1, 1) @[CircuitMath.scala 21:8]
    node T_382 = shl(T_381, 0) @[CircuitMath.scala 23:10]
    node T_383 = mux(T_379, UInt<2>("h02"), T_382) @[CircuitMath.scala 23:10]
    node T_384 = mux(T_377, UInt<2>("h03"), T_383) @[CircuitMath.scala 23:10]
    node T_385 = bits(T_374, 3, 3) @[CircuitMath.scala 23:12]
    node T_387 = bits(T_374, 2, 2) @[CircuitMath.scala 23:12]
    node T_389 = bits(T_374, 1, 1) @[CircuitMath.scala 21:8]
    node T_390 = shl(T_389, 0) @[CircuitMath.scala 23:10]
    node T_391 = mux(T_387, UInt<2>("h02"), T_390) @[CircuitMath.scala 23:10]
    node T_392 = mux(T_385, UInt<2>("h03"), T_391) @[CircuitMath.scala 23:10]
    node T_393 = mux(T_376, T_384, T_392) @[CircuitMath.scala 29:21]
    node T_394 = cat(T_376, T_393) @[Cat.scala 20:58]
    node T_395 = mux(T_350, T_372, T_394) @[CircuitMath.scala 29:21]
    node T_396 = cat(T_350, T_395) @[Cat.scala 20:58]
    node T_397 = bits(T_344, 15, 8) @[CircuitMath.scala 26:17]
    node T_398 = bits(T_344, 7, 0) @[CircuitMath.scala 27:17]
    node T_400 = neq(T_397, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_401 = bits(T_397, 7, 4) @[CircuitMath.scala 26:17]
    node T_402 = bits(T_397, 3, 0) @[CircuitMath.scala 27:17]
    node T_404 = neq(T_401, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_405 = bits(T_401, 3, 3) @[CircuitMath.scala 23:12]
    node T_407 = bits(T_401, 2, 2) @[CircuitMath.scala 23:12]
    node T_409 = bits(T_401, 1, 1) @[CircuitMath.scala 21:8]
    node T_410 = shl(T_409, 0) @[CircuitMath.scala 23:10]
    node T_411 = mux(T_407, UInt<2>("h02"), T_410) @[CircuitMath.scala 23:10]
    node T_412 = mux(T_405, UInt<2>("h03"), T_411) @[CircuitMath.scala 23:10]
    node T_413 = bits(T_402, 3, 3) @[CircuitMath.scala 23:12]
    node T_415 = bits(T_402, 2, 2) @[CircuitMath.scala 23:12]
    node T_417 = bits(T_402, 1, 1) @[CircuitMath.scala 21:8]
    node T_418 = shl(T_417, 0) @[CircuitMath.scala 23:10]
    node T_419 = mux(T_415, UInt<2>("h02"), T_418) @[CircuitMath.scala 23:10]
    node T_420 = mux(T_413, UInt<2>("h03"), T_419) @[CircuitMath.scala 23:10]
    node T_421 = mux(T_404, T_412, T_420) @[CircuitMath.scala 29:21]
    node T_422 = cat(T_404, T_421) @[Cat.scala 20:58]
    node T_423 = bits(T_398, 7, 4) @[CircuitMath.scala 26:17]
    node T_424 = bits(T_398, 3, 0) @[CircuitMath.scala 27:17]
    node T_426 = neq(T_423, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_427 = bits(T_423, 3, 3) @[CircuitMath.scala 23:12]
    node T_429 = bits(T_423, 2, 2) @[CircuitMath.scala 23:12]
    node T_431 = bits(T_423, 1, 1) @[CircuitMath.scala 21:8]
    node T_432 = shl(T_431, 0) @[CircuitMath.scala 23:10]
    node T_433 = mux(T_429, UInt<2>("h02"), T_432) @[CircuitMath.scala 23:10]
    node T_434 = mux(T_427, UInt<2>("h03"), T_433) @[CircuitMath.scala 23:10]
    node T_435 = bits(T_424, 3, 3) @[CircuitMath.scala 23:12]
    node T_437 = bits(T_424, 2, 2) @[CircuitMath.scala 23:12]
    node T_439 = bits(T_424, 1, 1) @[CircuitMath.scala 21:8]
    node T_440 = shl(T_439, 0) @[CircuitMath.scala 23:10]
    node T_441 = mux(T_437, UInt<2>("h02"), T_440) @[CircuitMath.scala 23:10]
    node T_442 = mux(T_435, UInt<2>("h03"), T_441) @[CircuitMath.scala 23:10]
    node T_443 = mux(T_426, T_434, T_442) @[CircuitMath.scala 29:21]
    node T_444 = cat(T_426, T_443) @[Cat.scala 20:58]
    node T_445 = mux(T_400, T_422, T_444) @[CircuitMath.scala 29:21]
    node T_446 = cat(T_400, T_445) @[Cat.scala 20:58]
    node T_447 = mux(T_346, T_396, T_446) @[CircuitMath.scala 29:21]
    node T_448 = cat(T_346, T_447) @[Cat.scala 20:58]
    node T_449 = mux(T_236, T_342, T_448) @[CircuitMath.scala 29:21]
    node T_450 = cat(T_236, T_449) @[Cat.scala 20:58]
    node T_451 = mux(T_84, T_232, T_450) @[CircuitMath.scala 29:21]
    node T_452 = cat(T_84, T_451) @[Cat.scala 20:58]
    node T_453 = sub(UInt<8>("h0a0"), T_452) @[primitives.scala 79:25]
    node estNormPos_dist = tail(T_453, 1) @[primitives.scala 79:25]
    node T_454 = bits(sigSum, 75, 44) @[MulAddRecFN.scala 252:19]
    node T_456 = neq(T_454, UInt<1>("h00")) @[MulAddRecFN.scala 254:15]
    node T_457 = bits(sigSum, 43, 0) @[MulAddRecFN.scala 255:19]
    node T_459 = neq(T_457, UInt<1>("h00")) @[MulAddRecFN.scala 255:57]
    node firstReduceSigSum = cat(T_456, T_459) @[Cat.scala 20:58]
    node complSigSum = not(sigSum) @[MulAddRecFN.scala 257:23]
    node T_460 = bits(complSigSum, 75, 44) @[MulAddRecFN.scala 259:24]
    node T_462 = neq(T_460, UInt<1>("h00")) @[MulAddRecFN.scala 261:15]
    node T_463 = bits(complSigSum, 43, 0) @[MulAddRecFN.scala 262:24]
    node T_465 = neq(T_463, UInt<1>("h00")) @[MulAddRecFN.scala 262:62]
    node firstReduceComplSigSum = cat(T_462, T_465) @[Cat.scala 20:58]
    node T_466 = or(io.fromPreMul.CAlignDist_0, doSubMags) @[MulAddRecFN.scala 266:40]
    node T_468 = sub(io.fromPreMul.CAlignDist, UInt<1>("h01")) @[MulAddRecFN.scala 268:39]
    node T_469 = tail(T_468, 1) @[MulAddRecFN.scala 268:39]
    node T_470 = bits(T_469, 5, 0) @[MulAddRecFN.scala 268:49]
    node CDom_estNormDist = mux(T_466, io.fromPreMul.CAlignDist, T_470) @[MulAddRecFN.scala 266:12]
    node T_472 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 271:13]
    node T_473 = bits(CDom_estNormDist, 5, 5) @[MulAddRecFN.scala 271:46]
    node T_475 = eq(T_473, UInt<1>("h00")) @[MulAddRecFN.scala 271:28]
    node T_476 = and(T_472, T_475) @[MulAddRecFN.scala 271:25]
    node T_477 = bits(sigSum, 161, 76) @[MulAddRecFN.scala 272:23]
    node T_479 = neq(firstReduceSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 273:35]
    node T_480 = cat(T_477, T_479) @[Cat.scala 20:58]
    node T_482 = mux(T_476, T_480, UInt<1>("h00")) @[MulAddRecFN.scala 271:12]
    node T_484 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 277:13]
    node T_485 = bits(CDom_estNormDist, 5, 5) @[MulAddRecFN.scala 277:44]
    node T_486 = and(T_484, T_485) @[MulAddRecFN.scala 277:25]
    node T_487 = bits(sigSum, 129, 44) @[MulAddRecFN.scala 278:23]
    node T_488 = bits(firstReduceSigSum, 0, 0) @[MulAddRecFN.scala 282:34]
    node T_489 = cat(T_487, T_488) @[Cat.scala 20:58]
    node T_491 = mux(T_486, T_489, UInt<1>("h00")) @[MulAddRecFN.scala 277:12]
    node T_492 = or(T_482, T_491) @[MulAddRecFN.scala 276:11]
    node T_493 = bits(CDom_estNormDist, 5, 5) @[MulAddRecFN.scala 286:44]
    node T_495 = eq(T_493, UInt<1>("h00")) @[MulAddRecFN.scala 286:26]
    node T_496 = and(doSubMags, T_495) @[MulAddRecFN.scala 286:23]
    node T_497 = bits(complSigSum, 161, 76) @[MulAddRecFN.scala 287:28]
    node T_499 = neq(firstReduceComplSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 288:40]
    node T_500 = cat(T_497, T_499) @[Cat.scala 20:58]
    node T_502 = mux(T_496, T_500, UInt<1>("h00")) @[MulAddRecFN.scala 286:12]
    node T_503 = or(T_492, T_502) @[MulAddRecFN.scala 285:11]
    node T_504 = bits(CDom_estNormDist, 5, 5) @[MulAddRecFN.scala 292:42]
    node T_505 = and(doSubMags, T_504) @[MulAddRecFN.scala 292:23]
    node T_506 = bits(complSigSum, 129, 44) @[MulAddRecFN.scala 293:28]
    node T_507 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 297:39]
    node T_508 = cat(T_506, T_507) @[Cat.scala 20:58]
    node T_510 = mux(T_505, T_508, UInt<1>("h00")) @[MulAddRecFN.scala 292:12]
    node CDom_firstNormAbsSigSum = or(T_503, T_510) @[MulAddRecFN.scala 291:11]
    node T_511 = bits(sigSum, 108, 44) @[MulAddRecFN.scala 308:23]
    node T_512 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 310:45]
    node T_514 = eq(T_512, UInt<1>("h00")) @[MulAddRecFN.scala 310:21]
    node T_515 = bits(firstReduceSigSum, 0, 0) @[MulAddRecFN.scala 311:38]
    node T_516 = mux(doSubMags, T_514, T_515) @[MulAddRecFN.scala 309:20]
    node T_517 = cat(T_511, T_516) @[Cat.scala 20:58]
    node T_518 = bits(sigSum, 97, 1) @[MulAddRecFN.scala 314:24]
    node T_519 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 316:37]
    node T_520 = bits(sigSum, 1, 1) @[MulAddRecFN.scala 318:32]
    node T_521 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15]
    node T_524 = mux(T_521, UInt<86>("h03fffffffffffffffffffff"), UInt<86>("h00")) @[Bitwise.scala 33:12]
    node T_525 = cat(T_520, T_524) @[Cat.scala 20:58]
    node T_526 = mux(T_519, T_517, T_525) @[MulAddRecFN.scala 316:21]
    node T_527 = bits(sigSum, 97, 12) @[MulAddRecFN.scala 324:28]
    node T_528 = bits(complSigSum, 11, 1) @[MulAddRecFN.scala 329:39]
    node T_530 = eq(T_528, UInt<1>("h00")) @[MulAddRecFN.scala 329:77]
    node T_531 = bits(sigSum, 11, 1) @[MulAddRecFN.scala 331:34]
    node T_533 = neq(T_531, UInt<1>("h00")) @[MulAddRecFN.scala 331:72]
    node T_534 = mux(doSubMags, T_530, T_533) @[MulAddRecFN.scala 328:26]
    node T_535 = cat(T_527, T_534) @[Cat.scala 20:58]
    node T_536 = bits(estNormPos_dist, 6, 6) @[MulAddRecFN.scala 338:28]
    node T_537 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 339:33]
    node T_538 = bits(sigSum, 65, 1) @[MulAddRecFN.scala 340:28]
    node T_539 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15]
    node T_542 = mux(T_539, UInt<22>("h03fffff"), UInt<22>("h00")) @[Bitwise.scala 33:12]
    node T_543 = cat(T_538, T_542) @[Cat.scala 20:58]
    node T_544 = mux(T_537, T_543, T_535) @[MulAddRecFN.scala 339:17]
    node T_545 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 345:33]
    node T_546 = bits(sigSum, 33, 1) @[MulAddRecFN.scala 347:28]
    node T_547 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15]
    node T_550 = mux(T_547, UInt<54>("h03fffffffffffff"), UInt<54>("h00")) @[Bitwise.scala 33:12]
    node T_551 = cat(T_546, T_550) @[Cat.scala 20:58]
    node T_552 = mux(T_545, T_526, T_551) @[MulAddRecFN.scala 345:17]
    node notCDom_pos_firstNormAbsSigSum = mux(T_536, T_544, T_552) @[MulAddRecFN.scala 338:12]
    node T_553 = bits(complSigSum, 107, 44) @[MulAddRecFN.scala 360:28]
    node T_554 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 361:39]
    node T_555 = cat(T_553, T_554) @[Cat.scala 20:58]
    node T_556 = bits(complSigSum, 97, 1) @[MulAddRecFN.scala 363:29]
    node T_557 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 365:37]
    node T_558 = bits(complSigSum, 2, 1) @[MulAddRecFN.scala 367:33]
    node T_559 = shl(T_558, 86) @[MulAddRecFN.scala 367:68]
    node T_560 = mux(T_557, T_555, T_559) @[MulAddRecFN.scala 365:21]
    node T_561 = bits(complSigSum, 98, 12) @[MulAddRecFN.scala 372:33]
    node T_562 = bits(complSigSum, 11, 1) @[MulAddRecFN.scala 376:33]
    node T_564 = neq(T_562, UInt<1>("h00")) @[MulAddRecFN.scala 376:71]
    node T_565 = cat(T_561, T_564) @[Cat.scala 20:58]
    node T_566 = bits(estNormPos_dist, 6, 6) @[MulAddRecFN.scala 379:28]
    node T_567 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 380:33]
    node T_568 = bits(complSigSum, 66, 1) @[MulAddRecFN.scala 381:29]
    node T_569 = shl(T_568, 22) @[MulAddRecFN.scala 381:64]
    node T_570 = mux(T_567, T_569, T_565) @[MulAddRecFN.scala 380:17]
    node T_571 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 385:33]
    node T_572 = bits(complSigSum, 34, 1) @[MulAddRecFN.scala 387:29]
    node T_573 = shl(T_572, 54) @[MulAddRecFN.scala 387:64]
    node T_574 = mux(T_571, T_560, T_573) @[MulAddRecFN.scala 385:17]
    node notCDom_neg_cFirstNormAbsSigSum = mux(T_566, T_570, T_574) @[MulAddRecFN.scala 379:12]
    node notCDom_signSigSum = bits(sigSum, 109, 109) @[MulAddRecFN.scala 392:36]
    node T_576 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 395:26]
    node T_577 = and(doSubMags, T_576) @[MulAddRecFN.scala 395:23]
    node doNegSignSum = mux(io.fromPreMul.isCDominant, T_577, notCDom_signSigSum) @[MulAddRecFN.scala 394:12]
    node T_578 = mux(notCDom_signSigSum, estNormPos_dist, estNormPos_dist) @[MulAddRecFN.scala 401:16]
    node estNormDist = mux(io.fromPreMul.isCDominant, CDom_estNormDist, T_578) @[MulAddRecFN.scala 399:12]
    node T_579 = mux(io.fromPreMul.isCDominant, CDom_firstNormAbsSigSum, notCDom_neg_cFirstNormAbsSigSum) @[MulAddRecFN.scala 408:16]
    node T_580 = mux(io.fromPreMul.isCDominant, CDom_firstNormAbsSigSum, notCDom_pos_firstNormAbsSigSum) @[MulAddRecFN.scala 412:16]
    node cFirstNormAbsSigSum = mux(notCDom_signSigSum, T_579, T_580) @[MulAddRecFN.scala 407:12]
    node T_582 = eq(io.fromPreMul.isCDominant, UInt<1>("h00")) @[MulAddRecFN.scala 418:9]
    node T_584 = eq(notCDom_signSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 418:40]
    node T_585 = and(T_582, T_584) @[MulAddRecFN.scala 418:37]
    node doIncrSig = and(T_585, doSubMags) @[MulAddRecFN.scala 418:61]
    node estNormDist_5 = bits(estNormDist, 4, 0) @[MulAddRecFN.scala 419:36]
    node normTo2ShiftDist = not(estNormDist_5) @[MulAddRecFN.scala 420:28]
    node T_587 = dshr(asSInt(UInt<33>("h0100000000")), normTo2ShiftDist) @[primitives.scala 68:52]
    node T_588 = bits(T_587, 31, 1) @[primitives.scala 69:26]
    node T_589 = bits(T_588, 15, 0) @[Bitwise.scala 65:18]
    node T_592 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47]
    node T_593 = xor(UInt<16>("h0ffff"), T_592) @[Bitwise.scala 58:21]
    node T_594 = shr(T_589, 8) @[Bitwise.scala 59:21]
    node T_595 = and(T_594, T_593) @[Bitwise.scala 59:31]
    node T_596 = bits(T_589, 7, 0) @[Bitwise.scala 59:46]
    node T_597 = shl(T_596, 8) @[Bitwise.scala 59:65]
    node T_598 = not(T_593) @[Bitwise.scala 59:77]
    node T_599 = and(T_597, T_598) @[Bitwise.scala 59:75]
    node T_600 = or(T_595, T_599) @[Bitwise.scala 59:39]
    node T_601 = bits(T_593, 11, 0) @[Bitwise.scala 58:28]
    node T_602 = shl(T_601, 4) @[Bitwise.scala 58:47]
    node T_603 = xor(T_593, T_602) @[Bitwise.scala 58:21]
    node T_604 = shr(T_600, 4) @[Bitwise.scala 59:21]
    node T_605 = and(T_604, T_603) @[Bitwise.scala 59:31]
    node T_606 = bits(T_600, 11, 0) @[Bitwise.scala 59:46]
    node T_607 = shl(T_606, 4) @[Bitwise.scala 59:65]
    node T_608 = not(T_603) @[Bitwise.scala 59:77]
    node T_609 = and(T_607, T_608) @[Bitwise.scala 59:75]
    node T_610 = or(T_605, T_609) @[Bitwise.scala 59:39]
    node T_611 = bits(T_603, 13, 0) @[Bitwise.scala 58:28]
    node T_612 = shl(T_611, 2) @[Bitwise.scala 58:47]
    node T_613 = xor(T_603, T_612) @[Bitwise.scala 58:21]
    node T_614 = shr(T_610, 2) @[Bitwise.scala 59:21]
    node T_615 = and(T_614, T_613) @[Bitwise.scala 59:31]
    node T_616 = bits(T_610, 13, 0) @[Bitwise.scala 59:46]
    node T_617 = shl(T_616, 2) @[Bitwise.scala 59:65]
    node T_618 = not(T_613) @[Bitwise.scala 59:77]
    node T_619 = and(T_617, T_618) @[Bitwise.scala 59:75]
    node T_620 = or(T_615, T_619) @[Bitwise.scala 59:39]
    node T_621 = bits(T_613, 14, 0) @[Bitwise.scala 58:28]
    node T_622 = shl(T_621, 1) @[Bitwise.scala 58:47]
    node T_623 = xor(T_613, T_622) @[Bitwise.scala 58:21]
    node T_624 = shr(T_620, 1) @[Bitwise.scala 59:21]
    node T_625 = and(T_624, T_623) @[Bitwise.scala 59:31]
    node T_626 = bits(T_620, 14, 0) @[Bitwise.scala 59:46]
    node T_627 = shl(T_626, 1) @[Bitwise.scala 59:65]
    node T_628 = not(T_623) @[Bitwise.scala 59:77]
    node T_629 = and(T_627, T_628) @[Bitwise.scala 59:75]
    node T_630 = or(T_625, T_629) @[Bitwise.scala 59:39]
    node T_631 = bits(T_588, 30, 16) @[Bitwise.scala 65:44]
    node T_632 = bits(T_631, 7, 0) @[Bitwise.scala 65:18]
    node T_635 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 58:47]
    node T_636 = xor(UInt<8>("h0ff"), T_635) @[Bitwise.scala 58:21]
    node T_637 = shr(T_632, 4) @[Bitwise.scala 59:21]
    node T_638 = and(T_637, T_636) @[Bitwise.scala 59:31]
    node T_639 = bits(T_632, 3, 0) @[Bitwise.scala 59:46]
    node T_640 = shl(T_639, 4) @[Bitwise.scala 59:65]
    node T_641 = not(T_636) @[Bitwise.scala 59:77]
    node T_642 = and(T_640, T_641) @[Bitwise.scala 59:75]
    node T_643 = or(T_638, T_642) @[Bitwise.scala 59:39]
    node T_644 = bits(T_636, 5, 0) @[Bitwise.scala 58:28]
    node T_645 = shl(T_644, 2) @[Bitwise.scala 58:47]
    node T_646 = xor(T_636, T_645) @[Bitwise.scala 58:21]
    node T_647 = shr(T_643, 2) @[Bitwise.scala 59:21]
    node T_648 = and(T_647, T_646) @[Bitwise.scala 59:31]
    node T_649 = bits(T_643, 5, 0) @[Bitwise.scala 59:46]
    node T_650 = shl(T_649, 2) @[Bitwise.scala 59:65]
    node T_651 = not(T_646) @[Bitwise.scala 59:77]
    node T_652 = and(T_650, T_651) @[Bitwise.scala 59:75]
    node T_653 = or(T_648, T_652) @[Bitwise.scala 59:39]
    node T_654 = bits(T_646, 6, 0) @[Bitwise.scala 58:28]
    node T_655 = shl(T_654, 1) @[Bitwise.scala 58:47]
    node T_656 = xor(T_646, T_655) @[Bitwise.scala 58:21]
    node T_657 = shr(T_653, 1) @[Bitwise.scala 59:21]
    node T_658 = and(T_657, T_656) @[Bitwise.scala 59:31]
    node T_659 = bits(T_653, 6, 0) @[Bitwise.scala 59:46]
    node T_660 = shl(T_659, 1) @[Bitwise.scala 59:65]
    node T_661 = not(T_656) @[Bitwise.scala 59:77]
    node T_662 = and(T_660, T_661) @[Bitwise.scala 59:75]
    node T_663 = or(T_658, T_662) @[Bitwise.scala 59:39]
    node T_664 = bits(T_631, 14, 8) @[Bitwise.scala 65:44]
    node T_665 = bits(T_664, 3, 0) @[Bitwise.scala 65:18]
    node T_666 = bits(T_665, 1, 0) @[Bitwise.scala 65:18]
    node T_667 = bits(T_666, 0, 0) @[Bitwise.scala 65:18]
    node T_668 = bits(T_666, 1, 1) @[Bitwise.scala 65:44]
    node T_669 = cat(T_667, T_668) @[Cat.scala 20:58]
    node T_670 = bits(T_665, 3, 2) @[Bitwise.scala 65:44]
    node T_671 = bits(T_670, 0, 0) @[Bitwise.scala 65:18]
    node T_672 = bits(T_670, 1, 1) @[Bitwise.scala 65:44]
    node T_673 = cat(T_671, T_672) @[Cat.scala 20:58]
    node T_674 = cat(T_669, T_673) @[Cat.scala 20:58]
    node T_675 = bits(T_664, 6, 4) @[Bitwise.scala 65:44]
    node T_676 = bits(T_675, 1, 0) @[Bitwise.scala 65:18]
    node T_677 = bits(T_676, 0, 0) @[Bitwise.scala 65:18]
    node T_678 = bits(T_676, 1, 1) @[Bitwise.scala 65:44]
    node T_679 = cat(T_677, T_678) @[Cat.scala 20:58]
    node T_680 = bits(T_675, 2, 2) @[Bitwise.scala 65:44]
    node T_681 = cat(T_679, T_680) @[Cat.scala 20:58]
    node T_682 = cat(T_674, T_681) @[Cat.scala 20:58]
    node T_683 = cat(T_663, T_682) @[Cat.scala 20:58]
    node T_684 = cat(T_630, T_683) @[Cat.scala 20:58]
    node absSigSumExtraMask = cat(T_684, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_686 = bits(cFirstNormAbsSigSum, 87, 1) @[MulAddRecFN.scala 424:32]
    node T_687 = dshr(T_686, normTo2ShiftDist) @[MulAddRecFN.scala 424:65]
    node T_688 = bits(cFirstNormAbsSigSum, 31, 0) @[MulAddRecFN.scala 427:39]
    node T_689 = not(T_688) @[MulAddRecFN.scala 427:19]
    node T_690 = and(T_689, absSigSumExtraMask) @[MulAddRecFN.scala 427:62]
    node T_692 = eq(T_690, UInt<1>("h00")) @[MulAddRecFN.scala 428:43]
    node T_693 = bits(cFirstNormAbsSigSum, 31, 0) @[MulAddRecFN.scala 430:38]
    node T_694 = and(T_693, absSigSumExtraMask) @[MulAddRecFN.scala 430:61]
    node T_696 = neq(T_694, UInt<1>("h00")) @[MulAddRecFN.scala 431:43]
    node T_697 = mux(doIncrSig, T_692, T_696) @[MulAddRecFN.scala 426:16]
    node T_698 = cat(T_687, T_697) @[Cat.scala 20:58]
    node sigX3 = bits(T_698, 56, 0) @[MulAddRecFN.scala 434:10]
    node T_699 = bits(sigX3, 56, 55) @[MulAddRecFN.scala 436:29]
    node sigX3Shift1 = eq(T_699, UInt<1>("h00")) @[MulAddRecFN.scala 436:58]
    node T_701 = sub(io.fromPreMul.sExpSum, estNormDist) @[MulAddRecFN.scala 437:40]
    node sExpX3 = tail(T_701, 1) @[MulAddRecFN.scala 437:40]
    node T_702 = bits(sigX3, 56, 54) @[MulAddRecFN.scala 439:25]
    node isZeroY = eq(T_702, UInt<1>("h00")) @[MulAddRecFN.scala 439:54]
    node T_704 = xor(io.fromPreMul.signProd, doNegSignSum) @[MulAddRecFN.scala 444:36]
    node signY = mux(isZeroY, signZeroNotEqOpSigns, T_704) @[MulAddRecFN.scala 442:12]
    node sExpX3_13 = bits(sExpX3, 12, 0) @[MulAddRecFN.scala 446:27]
    node T_705 = bits(sExpX3, 13, 13) @[MulAddRecFN.scala 448:34]
    node T_706 = bits(T_705, 0, 0) @[Bitwise.scala 33:15]
    node T_709 = mux(T_706, UInt<56>("h0ffffffffffffff"), UInt<56>("h00")) @[Bitwise.scala 33:12]
    node T_710 = not(sExpX3_13) @[primitives.scala 50:21]
    node T_711 = bits(T_710, 12, 12) @[primitives.scala 56:25]
    node T_712 = bits(T_710, 11, 0) @[primitives.scala 57:26]
    node T_713 = bits(T_712, 11, 11) @[primitives.scala 56:25]
    node T_714 = bits(T_712, 10, 0) @[primitives.scala 57:26]
    node T_715 = bits(T_714, 10, 10) @[primitives.scala 56:25]
    node T_716 = bits(T_714, 9, 0) @[primitives.scala 57:26]
    node T_717 = bits(T_716, 9, 9) @[primitives.scala 56:25]
    node T_718 = bits(T_716, 8, 0) @[primitives.scala 57:26]
    node T_720 = bits(T_718, 8, 8) @[primitives.scala 56:25]
    node T_721 = bits(T_718, 7, 0) @[primitives.scala 57:26]
    node T_723 = bits(T_721, 7, 7) @[primitives.scala 56:25]
    node T_724 = bits(T_721, 6, 0) @[primitives.scala 57:26]
    node T_726 = bits(T_724, 6, 6) @[primitives.scala 56:25]
    node T_727 = bits(T_724, 5, 0) @[primitives.scala 57:26]
    node T_730 = dshr(asSInt(UInt<65>("h010000000000000000")), T_727) @[primitives.scala 68:52]
    node T_731 = bits(T_730, 63, 14) @[primitives.scala 69:26]
    node T_732 = bits(T_731, 31, 0) @[Bitwise.scala 65:18]
    node T_735 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 58:47]
    node T_736 = xor(UInt<32>("h0ffffffff"), T_735) @[Bitwise.scala 58:21]
    node T_737 = shr(T_732, 16) @[Bitwise.scala 59:21]
    node T_738 = and(T_737, T_736) @[Bitwise.scala 59:31]
    node T_739 = bits(T_732, 15, 0) @[Bitwise.scala 59:46]
    node T_740 = shl(T_739, 16) @[Bitwise.scala 59:65]
    node T_741 = not(T_736) @[Bitwise.scala 59:77]
    node T_742 = and(T_740, T_741) @[Bitwise.scala 59:75]
    node T_743 = or(T_738, T_742) @[Bitwise.scala 59:39]
    node T_744 = bits(T_736, 23, 0) @[Bitwise.scala 58:28]
    node T_745 = shl(T_744, 8) @[Bitwise.scala 58:47]
    node T_746 = xor(T_736, T_745) @[Bitwise.scala 58:21]
    node T_747 = shr(T_743, 8) @[Bitwise.scala 59:21]
    node T_748 = and(T_747, T_746) @[Bitwise.scala 59:31]
    node T_749 = bits(T_743, 23, 0) @[Bitwise.scala 59:46]
    node T_750 = shl(T_749, 8) @[Bitwise.scala 59:65]
    node T_751 = not(T_746) @[Bitwise.scala 59:77]
    node T_752 = and(T_750, T_751) @[Bitwise.scala 59:75]
    node T_753 = or(T_748, T_752) @[Bitwise.scala 59:39]
    node T_754 = bits(T_746, 27, 0) @[Bitwise.scala 58:28]
    node T_755 = shl(T_754, 4) @[Bitwise.scala 58:47]
    node T_756 = xor(T_746, T_755) @[Bitwise.scala 58:21]
    node T_757 = shr(T_753, 4) @[Bitwise.scala 59:21]
    node T_758 = and(T_757, T_756) @[Bitwise.scala 59:31]
    node T_759 = bits(T_753, 27, 0) @[Bitwise.scala 59:46]
    node T_760 = shl(T_759, 4) @[Bitwise.scala 59:65]
    node T_761 = not(T_756) @[Bitwise.scala 59:77]
    node T_762 = and(T_760, T_761) @[Bitwise.scala 59:75]
    node T_763 = or(T_758, T_762) @[Bitwise.scala 59:39]
    node T_764 = bits(T_756, 29, 0) @[Bitwise.scala 58:28]
    node T_765 = shl(T_764, 2) @[Bitwise.scala 58:47]
    node T_766 = xor(T_756, T_765) @[Bitwise.scala 58:21]
    node T_767 = shr(T_763, 2) @[Bitwise.scala 59:21]
    node T_768 = and(T_767, T_766) @[Bitwise.scala 59:31]
    node T_769 = bits(T_763, 29, 0) @[Bitwise.scala 59:46]
    node T_770 = shl(T_769, 2) @[Bitwise.scala 59:65]
    node T_771 = not(T_766) @[Bitwise.scala 59:77]
    node T_772 = and(T_770, T_771) @[Bitwise.scala 59:75]
    node T_773 = or(T_768, T_772) @[Bitwise.scala 59:39]
    node T_774 = bits(T_766, 30, 0) @[Bitwise.scala 58:28]
    node T_775 = shl(T_774, 1) @[Bitwise.scala 58:47]
    node T_776 = xor(T_766, T_775) @[Bitwise.scala 58:21]
    node T_777 = shr(T_773, 1) @[Bitwise.scala 59:21]
    node T_778 = and(T_777, T_776) @[Bitwise.scala 59:31]
    node T_779 = bits(T_773, 30, 0) @[Bitwise.scala 59:46]
    node T_780 = shl(T_779, 1) @[Bitwise.scala 59:65]
    node T_781 = not(T_776) @[Bitwise.scala 59:77]
    node T_782 = and(T_780, T_781) @[Bitwise.scala 59:75]
    node T_783 = or(T_778, T_782) @[Bitwise.scala 59:39]
    node T_784 = bits(T_731, 49, 32) @[Bitwise.scala 65:44]
    node T_785 = bits(T_784, 15, 0) @[Bitwise.scala 65:18]
    node T_788 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47]
    node T_789 = xor(UInt<16>("h0ffff"), T_788) @[Bitwise.scala 58:21]
    node T_790 = shr(T_785, 8) @[Bitwise.scala 59:21]
    node T_791 = and(T_790, T_789) @[Bitwise.scala 59:31]
    node T_792 = bits(T_785, 7, 0) @[Bitwise.scala 59:46]
    node T_793 = shl(T_792, 8) @[Bitwise.scala 59:65]
    node T_794 = not(T_789) @[Bitwise.scala 59:77]
    node T_795 = and(T_793, T_794) @[Bitwise.scala 59:75]
    node T_796 = or(T_791, T_795) @[Bitwise.scala 59:39]
    node T_797 = bits(T_789, 11, 0) @[Bitwise.scala 58:28]
    node T_798 = shl(T_797, 4) @[Bitwise.scala 58:47]
    node T_799 = xor(T_789, T_798) @[Bitwise.scala 58:21]
    node T_800 = shr(T_796, 4) @[Bitwise.scala 59:21]
    node T_801 = and(T_800, T_799) @[Bitwise.scala 59:31]
    node T_802 = bits(T_796, 11, 0) @[Bitwise.scala 59:46]
    node T_803 = shl(T_802, 4) @[Bitwise.scala 59:65]
    node T_804 = not(T_799) @[Bitwise.scala 59:77]
    node T_805 = and(T_803, T_804) @[Bitwise.scala 59:75]
    node T_806 = or(T_801, T_805) @[Bitwise.scala 59:39]
    node T_807 = bits(T_799, 13, 0) @[Bitwise.scala 58:28]
    node T_808 = shl(T_807, 2) @[Bitwise.scala 58:47]
    node T_809 = xor(T_799, T_808) @[Bitwise.scala 58:21]
    node T_810 = shr(T_806, 2) @[Bitwise.scala 59:21]
    node T_811 = and(T_810, T_809) @[Bitwise.scala 59:31]
    node T_812 = bits(T_806, 13, 0) @[Bitwise.scala 59:46]
    node T_813 = shl(T_812, 2) @[Bitwise.scala 59:65]
    node T_814 = not(T_809) @[Bitwise.scala 59:77]
    node T_815 = and(T_813, T_814) @[Bitwise.scala 59:75]
    node T_816 = or(T_811, T_815) @[Bitwise.scala 59:39]
    node T_817 = bits(T_809, 14, 0) @[Bitwise.scala 58:28]
    node T_818 = shl(T_817, 1) @[Bitwise.scala 58:47]
    node T_819 = xor(T_809, T_818) @[Bitwise.scala 58:21]
    node T_820 = shr(T_816, 1) @[Bitwise.scala 59:21]
    node T_821 = and(T_820, T_819) @[Bitwise.scala 59:31]
    node T_822 = bits(T_816, 14, 0) @[Bitwise.scala 59:46]
    node T_823 = shl(T_822, 1) @[Bitwise.scala 59:65]
    node T_824 = not(T_819) @[Bitwise.scala 59:77]
    node T_825 = and(T_823, T_824) @[Bitwise.scala 59:75]
    node T_826 = or(T_821, T_825) @[Bitwise.scala 59:39]
    node T_827 = bits(T_784, 17, 16) @[Bitwise.scala 65:44]
    node T_828 = bits(T_827, 0, 0) @[Bitwise.scala 65:18]
    node T_829 = bits(T_827, 1, 1) @[Bitwise.scala 65:44]
    node T_830 = cat(T_828, T_829) @[Cat.scala 20:58]
    node T_831 = cat(T_826, T_830) @[Cat.scala 20:58]
    node T_832 = cat(T_783, T_831) @[Cat.scala 20:58]
    node T_833 = not(T_832) @[primitives.scala 65:36]
    node T_834 = mux(T_726, UInt<1>("h00"), T_833) @[primitives.scala 65:21]
    node T_835 = not(T_834) @[primitives.scala 65:17]
    node T_836 = not(T_835) @[primitives.scala 65:36]
    node T_837 = mux(T_723, UInt<1>("h00"), T_836) @[primitives.scala 65:21]
    node T_838 = not(T_837) @[primitives.scala 65:17]
    node T_839 = not(T_838) @[primitives.scala 65:36]
    node T_840 = mux(T_720, UInt<1>("h00"), T_839) @[primitives.scala 65:21]
    node T_841 = not(T_840) @[primitives.scala 65:17]
    node T_842 = not(T_841) @[primitives.scala 65:36]
    node T_843 = mux(T_717, UInt<1>("h00"), T_842) @[primitives.scala 65:21]
    node T_844 = not(T_843) @[primitives.scala 65:17]
    node T_846 = cat(T_844, UInt<4>("h0f")) @[Cat.scala 20:58]
    node T_847 = bits(T_716, 9, 9) @[primitives.scala 56:25]
    node T_848 = bits(T_716, 8, 0) @[primitives.scala 57:26]
    node T_849 = bits(T_848, 8, 8) @[primitives.scala 56:25]
    node T_850 = bits(T_848, 7, 0) @[primitives.scala 57:26]
    node T_851 = bits(T_850, 7, 7) @[primitives.scala 56:25]
    node T_852 = bits(T_850, 6, 0) @[primitives.scala 57:26]
    node T_853 = bits(T_852, 6, 6) @[primitives.scala 56:25]
    node T_854 = bits(T_852, 5, 0) @[primitives.scala 57:26]
    node T_856 = dshr(asSInt(UInt<65>("h010000000000000000")), T_854) @[primitives.scala 68:52]
    node T_857 = bits(T_856, 3, 0) @[primitives.scala 69:26]
    node T_858 = bits(T_857, 1, 0) @[Bitwise.scala 65:18]
    node T_859 = bits(T_858, 0, 0) @[Bitwise.scala 65:18]
    node T_860 = bits(T_858, 1, 1) @[Bitwise.scala 65:44]
    node T_861 = cat(T_859, T_860) @[Cat.scala 20:58]
    node T_862 = bits(T_857, 3, 2) @[Bitwise.scala 65:44]
    node T_863 = bits(T_862, 0, 0) @[Bitwise.scala 65:18]
    node T_864 = bits(T_862, 1, 1) @[Bitwise.scala 65:44]
    node T_865 = cat(T_863, T_864) @[Cat.scala 20:58]
    node T_866 = cat(T_861, T_865) @[Cat.scala 20:58]
    node T_868 = mux(T_853, T_866, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_870 = mux(T_851, T_868, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_872 = mux(T_849, T_870, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_874 = mux(T_847, T_872, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_875 = mux(T_715, T_846, T_874) @[primitives.scala 61:20]
    node T_877 = mux(T_713, T_875, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_879 = mux(T_711, T_877, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_880 = bits(sigX3, 55, 55) @[MulAddRecFN.scala 450:26]
    node T_881 = or(T_879, T_880) @[MulAddRecFN.scala 449:75]
    node T_883 = cat(T_881, UInt<2>("h03")) @[Cat.scala 20:58]
    node roundMask = or(T_709, T_883) @[MulAddRecFN.scala 448:50]
    node T_884 = shr(roundMask, 1) @[MulAddRecFN.scala 454:35]
    node T_885 = not(T_884) @[MulAddRecFN.scala 454:24]
    node roundPosMask = and(T_885, roundMask) @[MulAddRecFN.scala 454:40]
    node T_886 = and(sigX3, roundPosMask) @[MulAddRecFN.scala 455:30]
    node roundPosBit = neq(T_886, UInt<1>("h00")) @[MulAddRecFN.scala 455:46]
    node T_888 = shr(roundMask, 1) @[MulAddRecFN.scala 456:45]
    node T_889 = and(sigX3, T_888) @[MulAddRecFN.scala 456:34]
    node anyRoundExtra = neq(T_889, UInt<1>("h00")) @[MulAddRecFN.scala 456:50]
    node T_891 = not(sigX3) @[MulAddRecFN.scala 457:27]
    node T_892 = shr(roundMask, 1) @[MulAddRecFN.scala 457:45]
    node T_893 = and(T_891, T_892) @[MulAddRecFN.scala 457:34]
    node allRoundExtra = eq(T_893, UInt<1>("h00")) @[MulAddRecFN.scala 457:50]
    node anyRound = or(roundPosBit, anyRoundExtra) @[MulAddRecFN.scala 458:32]
    node allRound = and(roundPosBit, allRoundExtra) @[MulAddRecFN.scala 459:32]
    node roundDirectUp = mux(signY, roundingMode_min, roundingMode_max) @[MulAddRecFN.scala 460:28]
    node T_896 = eq(doIncrSig, UInt<1>("h00")) @[MulAddRecFN.scala 462:10]
    node T_897 = and(T_896, roundingMode_nearest_even) @[MulAddRecFN.scala 462:22]
    node T_898 = and(T_897, roundPosBit) @[MulAddRecFN.scala 462:51]
    node T_899 = and(T_898, anyRoundExtra) @[MulAddRecFN.scala 463:60]
    node T_901 = eq(doIncrSig, UInt<1>("h00")) @[MulAddRecFN.scala 464:10]
    node T_902 = and(T_901, roundDirectUp) @[MulAddRecFN.scala 464:22]
    node T_903 = and(T_902, anyRound) @[MulAddRecFN.scala 464:49]
    node T_904 = or(T_899, T_903) @[MulAddRecFN.scala 463:78]
    node T_905 = and(doIncrSig, allRound) @[MulAddRecFN.scala 465:49]
    node T_906 = or(T_904, T_905) @[MulAddRecFN.scala 464:65]
    node T_907 = and(doIncrSig, roundingMode_nearest_even) @[MulAddRecFN.scala 466:20]
    node T_908 = and(T_907, roundPosBit) @[MulAddRecFN.scala 466:49]
    node T_909 = or(T_906, T_908) @[MulAddRecFN.scala 465:65]
    node T_910 = and(doIncrSig, roundDirectUp) @[MulAddRecFN.scala 467:20]
    node T_912 = and(T_910, UInt<1>("h01")) @[MulAddRecFN.scala 467:49]
    node roundUp = or(T_909, T_912) @[MulAddRecFN.scala 466:65]
    node T_914 = eq(roundPosBit, UInt<1>("h00")) @[MulAddRecFN.scala 470:42]
    node T_915 = and(roundingMode_nearest_even, T_914) @[MulAddRecFN.scala 470:39]
    node T_916 = and(T_915, allRoundExtra) @[MulAddRecFN.scala 470:56]
    node T_917 = and(roundingMode_nearest_even, roundPosBit) @[MulAddRecFN.scala 471:39]
    node T_919 = eq(anyRoundExtra, UInt<1>("h00")) @[MulAddRecFN.scala 471:59]
    node T_920 = and(T_917, T_919) @[MulAddRecFN.scala 471:56]
    node roundEven = mux(doIncrSig, T_916, T_920) @[MulAddRecFN.scala 469:12]
    node T_922 = eq(allRound, UInt<1>("h00")) @[MulAddRecFN.scala 473:39]
    node roundInexact = mux(doIncrSig, T_922, anyRound) @[MulAddRecFN.scala 473:27]
    node T_923 = or(sigX3, roundMask) @[MulAddRecFN.scala 475:18]
    node T_924 = shr(T_923, 2) @[MulAddRecFN.scala 475:30]
    node T_926 = add(T_924, UInt<1>("h01")) @[MulAddRecFN.scala 475:35]
    node T_927 = tail(T_926, 1) @[MulAddRecFN.scala 475:35]
    node roundUp_sigY3 = bits(T_927, 54, 0) @[MulAddRecFN.scala 475:45]
    node T_929 = eq(roundUp, UInt<1>("h00")) @[MulAddRecFN.scala 477:13]
    node T_931 = eq(roundEven, UInt<1>("h00")) @[MulAddRecFN.scala 477:26]
    node T_932 = and(T_929, T_931) @[MulAddRecFN.scala 477:23]
    node T_933 = not(roundMask) @[MulAddRecFN.scala 477:48]
    node T_934 = and(sigX3, T_933) @[MulAddRecFN.scala 477:46]
    node T_935 = shr(T_934, 2) @[MulAddRecFN.scala 477:59]
    node T_937 = mux(T_932, T_935, UInt<1>("h00")) @[MulAddRecFN.scala 477:12]
    node T_939 = mux(roundUp, roundUp_sigY3, UInt<1>("h00")) @[MulAddRecFN.scala 478:12]
    node T_940 = or(T_937, T_939) @[MulAddRecFN.scala 477:79]
    node T_941 = shr(roundMask, 1) @[MulAddRecFN.scala 479:64]
    node T_942 = not(T_941) @[MulAddRecFN.scala 479:53]
    node T_943 = and(roundUp_sigY3, T_942) @[MulAddRecFN.scala 479:51]
    node T_945 = mux(roundEven, T_943, UInt<1>("h00")) @[MulAddRecFN.scala 479:12]
    node sigY3 = or(T_940, T_945) @[MulAddRecFN.scala 478:79]
    node T_946 = bits(sigY3, 54, 54) @[MulAddRecFN.scala 482:18]
    node T_948 = add(sExpX3, UInt<1>("h01")) @[MulAddRecFN.scala 482:41]
    node T_949 = tail(T_948, 1) @[MulAddRecFN.scala 482:41]
    node T_951 = mux(T_946, T_949, UInt<1>("h00")) @[MulAddRecFN.scala 482:12]
    node T_952 = bits(sigY3, 53, 53) @[MulAddRecFN.scala 483:18]
    node T_954 = mux(T_952, sExpX3, UInt<1>("h00")) @[MulAddRecFN.scala 483:12]
    node T_955 = or(T_951, T_954) @[MulAddRecFN.scala 482:61]
    node T_956 = bits(sigY3, 54, 53) @[MulAddRecFN.scala 484:19]
    node T_958 = eq(T_956, UInt<1>("h00")) @[MulAddRecFN.scala 484:44]
    node T_960 = sub(sExpX3, UInt<1>("h01")) @[MulAddRecFN.scala 485:20]
    node T_961 = tail(T_960, 1) @[MulAddRecFN.scala 485:20]
    node T_963 = mux(T_958, T_961, UInt<1>("h00")) @[MulAddRecFN.scala 484:12]
    node sExpY = or(T_955, T_963) @[MulAddRecFN.scala 483:61]
    node expY = bits(sExpY, 11, 0) @[MulAddRecFN.scala 488:21]
    node T_964 = bits(sigY3, 51, 0) @[MulAddRecFN.scala 490:31]
    node T_965 = bits(sigY3, 52, 1) @[MulAddRecFN.scala 490:55]
    node fractY = mux(sigX3Shift1, T_964, T_965) @[MulAddRecFN.scala 490:12]
    node T_966 = bits(sExpY, 12, 10) @[MulAddRecFN.scala 492:27]
    node overflowY = eq(T_966, UInt<2>("h03")) @[MulAddRecFN.scala 492:56]
    node T_969 = eq(isZeroY, UInt<1>("h00")) @[MulAddRecFN.scala 495:9]
    node T_970 = bits(sExpY, 12, 12) @[MulAddRecFN.scala 496:19]
    node T_971 = bits(sExpY, 11, 0) @[MulAddRecFN.scala 496:43]
    node T_973 = lt(T_971, UInt<10>("h03ce")) @[MulAddRecFN.scala 496:57]
    node T_974 = or(T_970, T_973) @[MulAddRecFN.scala 496:34]
    node totalUnderflowY = and(T_969, T_974) @[MulAddRecFN.scala 495:19]
    node T_975 = bits(sExpX3, 13, 13) @[MulAddRecFN.scala 499:20]
    node T_978 = mux(sigX3Shift1, UInt<11>("h0402"), UInt<11>("h0401")) @[MulAddRecFN.scala 501:26]
    node T_979 = leq(sExpX3_13, T_978) @[MulAddRecFN.scala 500:29]
    node T_980 = or(T_975, T_979) @[MulAddRecFN.scala 499:35]
    node underflowY = and(roundInexact, T_980) @[MulAddRecFN.scala 498:22]
    node T_981 = and(roundingMode_min, signY) @[MulAddRecFN.scala 506:27]
    node T_983 = eq(signY, UInt<1>("h00")) @[MulAddRecFN.scala 506:61]
    node T_984 = and(roundingMode_max, T_983) @[MulAddRecFN.scala 506:58]
    node roundMagUp = or(T_981, T_984) @[MulAddRecFN.scala 506:37]
    node overflowY_roundMagUp = or(roundingMode_nearest_even, roundMagUp) @[MulAddRecFN.scala 507:58]
    node mulSpecial = or(isSpecialA, isSpecialB) @[MulAddRecFN.scala 511:33]
    node addSpecial = or(mulSpecial, isSpecialC) @[MulAddRecFN.scala 512:33]
    node notSpecial_addZeros = and(io.fromPreMul.isZeroProd, isZeroC) @[MulAddRecFN.scala 513:56]
    node T_986 = eq(addSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 514:22]
    node T_988 = eq(notSpecial_addZeros, UInt<1>("h00")) @[MulAddRecFN.scala 514:38]
    node commonCase = and(T_986, T_988) @[MulAddRecFN.scala 514:35]
    node T_989 = and(isInfA, isZeroB) @[MulAddRecFN.scala 517:17]
    node T_990 = and(isZeroA, isInfB) @[MulAddRecFN.scala 517:41]
    node T_991 = or(T_989, T_990) @[MulAddRecFN.scala 517:29]
    node T_993 = eq(isNaNA, UInt<1>("h00")) @[MulAddRecFN.scala 518:14]
    node T_995 = eq(isNaNB, UInt<1>("h00")) @[MulAddRecFN.scala 518:26]
    node T_996 = and(T_993, T_995) @[MulAddRecFN.scala 518:23]
    node T_997 = or(isInfA, isInfB) @[MulAddRecFN.scala 518:46]
    node T_998 = and(T_996, T_997) @[MulAddRecFN.scala 518:35]
    node T_999 = and(T_998, isInfC) @[MulAddRecFN.scala 518:57]
    node T_1000 = and(T_999, doSubMags) @[MulAddRecFN.scala 518:67]
    node notSigNaN_invalid = or(T_991, T_1000) @[MulAddRecFN.scala 517:52]
    node T_1001 = or(isSigNaNA, isSigNaNB) @[MulAddRecFN.scala 519:29]
    node T_1002 = or(T_1001, isSigNaNC) @[MulAddRecFN.scala 519:42]
    node invalid = or(T_1002, notSigNaN_invalid) @[MulAddRecFN.scala 519:55]
    node overflow = and(commonCase, overflowY) @[MulAddRecFN.scala 520:32]
    node underflow = and(commonCase, underflowY) @[MulAddRecFN.scala 521:32]
    node T_1003 = and(commonCase, roundInexact) @[MulAddRecFN.scala 522:43]
    node inexact = or(overflow, T_1003) @[MulAddRecFN.scala 522:28]
    node T_1004 = or(notSpecial_addZeros, isZeroY) @[MulAddRecFN.scala 525:29]
    node notSpecial_isZeroOut = or(T_1004, totalUnderflowY) @[MulAddRecFN.scala 525:40]
    node T_1005 = and(commonCase, totalUnderflowY) @[MulAddRecFN.scala 526:41]
    node pegMinFiniteMagOut = and(T_1005, roundMagUp) @[MulAddRecFN.scala 526:60]
    node T_1007 = eq(overflowY_roundMagUp, UInt<1>("h00")) @[MulAddRecFN.scala 527:42]
    node pegMaxFiniteMagOut = and(overflow, T_1007) @[MulAddRecFN.scala 527:39]
    node T_1008 = or(isInfA, isInfB) @[MulAddRecFN.scala 529:16]
    node T_1009 = or(T_1008, isInfC) @[MulAddRecFN.scala 529:26]
    node T_1010 = and(overflow, overflowY_roundMagUp) @[MulAddRecFN.scala 529:49]
    node notNaN_isInfOut = or(T_1009, T_1010) @[MulAddRecFN.scala 529:36]
    node T_1011 = or(isNaNA, isNaNB) @[MulAddRecFN.scala 530:27]
    node T_1012 = or(T_1011, isNaNC) @[MulAddRecFN.scala 530:37]
    node isNaNOut = or(T_1012, notSigNaN_invalid) @[MulAddRecFN.scala 530:47]
    node T_1014 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 533:10]
    node T_1015 = and(T_1014, io.fromPreMul.opSignC) @[MulAddRecFN.scala 533:51]
    node T_1017 = eq(isSpecialC, UInt<1>("h00")) @[MulAddRecFN.scala 534:24]
    node T_1018 = and(mulSpecial, T_1017) @[MulAddRecFN.scala 534:21]
    node T_1019 = and(T_1018, io.fromPreMul.signProd) @[MulAddRecFN.scala 534:51]
    node T_1020 = or(T_1015, T_1019) @[MulAddRecFN.scala 533:78]
    node T_1022 = eq(mulSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 535:10]
    node T_1023 = and(T_1022, isSpecialC) @[MulAddRecFN.scala 535:23]
    node T_1024 = and(T_1023, io.fromPreMul.opSignC) @[MulAddRecFN.scala 535:51]
    node T_1025 = or(T_1020, T_1024) @[MulAddRecFN.scala 534:78]
    node T_1027 = eq(mulSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 536:10]
    node T_1028 = and(T_1027, notSpecial_addZeros) @[MulAddRecFN.scala 536:23]
    node T_1029 = and(T_1028, doSubMags) @[MulAddRecFN.scala 536:46]
    node T_1030 = and(T_1029, signZeroNotEqOpSigns) @[MulAddRecFN.scala 536:59]
    node uncommonCaseSignOut = or(T_1025, T_1030) @[MulAddRecFN.scala 535:78]
    node T_1032 = eq(isNaNOut, UInt<1>("h00")) @[MulAddRecFN.scala 538:20]
    node T_1033 = and(T_1032, uncommonCaseSignOut) @[MulAddRecFN.scala 538:31]
    node T_1034 = and(commonCase, signY) @[MulAddRecFN.scala 538:70]
    node signOut = or(T_1033, T_1034) @[MulAddRecFN.scala 538:55]
    node T_1037 = mux(notSpecial_isZeroOut, UInt<12>("h0e00"), UInt<12>("h00")) @[MulAddRecFN.scala 541:18]
    node T_1038 = not(T_1037) @[MulAddRecFN.scala 541:14]
    node T_1039 = and(expY, T_1038) @[MulAddRecFN.scala 540:15]
    node T_1041 = not(UInt<12>("h03ce")) @[MulAddRecFN.scala 546:19]
    node T_1043 = mux(pegMinFiniteMagOut, T_1041, UInt<12>("h00")) @[MulAddRecFN.scala 545:18]
    node T_1044 = not(T_1043) @[MulAddRecFN.scala 545:14]
    node T_1045 = and(T_1039, T_1044) @[MulAddRecFN.scala 544:17]
    node T_1048 = mux(pegMaxFiniteMagOut, UInt<12>("h0400"), UInt<12>("h00")) @[MulAddRecFN.scala 549:18]
    node T_1049 = not(T_1048) @[MulAddRecFN.scala 549:14]
    node T_1050 = and(T_1045, T_1049) @[MulAddRecFN.scala 548:17]
    node T_1053 = mux(notNaN_isInfOut, UInt<10>("h0200"), UInt<12>("h00")) @[MulAddRecFN.scala 553:18]
    node T_1054 = not(T_1053) @[MulAddRecFN.scala 553:14]
    node T_1055 = and(T_1050, T_1054) @[MulAddRecFN.scala 552:17]
    node T_1058 = mux(pegMinFiniteMagOut, UInt<10>("h03ce"), UInt<12>("h00")) @[MulAddRecFN.scala 557:16]
    node T_1059 = or(T_1055, T_1058) @[MulAddRecFN.scala 556:18]
    node T_1062 = mux(pegMaxFiniteMagOut, UInt<12>("h0bff"), UInt<12>("h00")) @[MulAddRecFN.scala 558:16]
    node T_1063 = or(T_1059, T_1062) @[MulAddRecFN.scala 557:74]
    node T_1066 = mux(notNaN_isInfOut, UInt<12>("h0c00"), UInt<12>("h00")) @[MulAddRecFN.scala 562:16]
    node T_1067 = or(T_1063, T_1066) @[MulAddRecFN.scala 561:15]
    node T_1070 = mux(isNaNOut, UInt<12>("h0e00"), UInt<12>("h00")) @[MulAddRecFN.scala 566:16]
    node expOut = or(T_1067, T_1070) @[MulAddRecFN.scala 565:15]
    node T_1071 = and(totalUnderflowY, roundMagUp) @[MulAddRecFN.scala 568:30]
    node T_1072 = or(T_1071, isNaNOut) @[MulAddRecFN.scala 568:45]
    node T_1074 = shl(UInt<1>("h01"), 51) @[MulAddRecFN.scala 569:34]
    node T_1076 = mux(isNaNOut, T_1074, UInt<1>("h00")) @[MulAddRecFN.scala 569:16]
    node T_1077 = mux(T_1072, T_1076, fractY) @[MulAddRecFN.scala 568:12]
    node T_1078 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 33:15]
    node T_1081 = mux(T_1078, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 33:12]
    node fractOut = or(T_1077, T_1081) @[MulAddRecFN.scala 571:11]
    node T_1082 = cat(signOut, expOut) @[Cat.scala 20:58]
    node T_1083 = cat(T_1082, fractOut) @[Cat.scala 20:58]
    io.out <= T_1083 @[MulAddRecFN.scala 574:12]
    node T_1085 = cat(underflow, inexact) @[Cat.scala 20:58]
    node T_1086 = cat(invalid, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_1087 = cat(T_1086, overflow) @[Cat.scala 20:58]
    node T_1088 = cat(T_1087, T_1085) @[Cat.scala 20:58]
    io.exceptionFlags <= T_1088 @[MulAddRecFN.scala 575:23]
    
  module MulAddRecFN_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip op : UInt<2>, flip a : UInt<65>, flip b : UInt<65>, flip c : UInt<65>, flip roundingMode : UInt<2>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    inst mulAddRecFN_preMul of MulAddRecFN_preMul_1 @[MulAddRecFN.scala 598:15]
    mulAddRecFN_preMul.io is invalid
    mulAddRecFN_preMul.clk <= clk
    mulAddRecFN_preMul.reset <= reset
    inst mulAddRecFN_postMul of MulAddRecFN_postMul_1 @[MulAddRecFN.scala 600:15]
    mulAddRecFN_postMul.io is invalid
    mulAddRecFN_postMul.clk <= clk
    mulAddRecFN_postMul.reset <= reset
    mulAddRecFN_preMul.io.op <= io.op @[MulAddRecFN.scala 602:30]
    mulAddRecFN_preMul.io.a <= io.a @[MulAddRecFN.scala 603:30]
    mulAddRecFN_preMul.io.b <= io.b @[MulAddRecFN.scala 604:30]
    mulAddRecFN_preMul.io.c <= io.c @[MulAddRecFN.scala 605:30]
    mulAddRecFN_preMul.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 606:40]
    mulAddRecFN_postMul.io.fromPreMul <- mulAddRecFN_preMul.io.toPostMul @[MulAddRecFN.scala 608:39]
    node T_7 = mul(mulAddRecFN_preMul.io.mulAddA, mulAddRecFN_preMul.io.mulAddB) @[MulAddRecFN.scala 610:39]
    node T_9 = cat(UInt<1>("h00"), mulAddRecFN_preMul.io.mulAddC) @[Cat.scala 20:58]
    node T_10 = add(T_7, T_9) @[MulAddRecFN.scala 610:71]
    node T_11 = tail(T_10, 1) @[MulAddRecFN.scala 610:71]
    mulAddRecFN_postMul.io.mulAddResult <= T_11 @[MulAddRecFN.scala 609:41]
    io.out <= mulAddRecFN_postMul.io.out @[MulAddRecFN.scala 613:12]
    io.exceptionFlags <= mulAddRecFN_postMul.io.exceptionFlags @[MulAddRecFN.scala 614:23]
    
  module FPUFMAPipe_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}
    
    io is invalid
    node one = shl(UInt<1>("h01"), 63) @[fpu.scala 462:21]
    node T_131 = bits(io.in.bits.in1, 64, 64) @[fpu.scala 463:29]
    node T_132 = bits(io.in.bits.in2, 64, 64) @[fpu.scala 463:53]
    node T_133 = xor(T_131, T_132) @[fpu.scala 463:37]
    node zero = shl(T_133, 64) @[fpu.scala 463:62]
    reg valid : UInt<1>, clk
    valid <= io.in.valid
    reg in : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    when io.in.valid : @[fpu.scala 467:22]
      in <- io.in.bits @[fpu.scala 468:8]
      node T_179 = bits(io.in.bits.cmd, 1, 1) @[fpu.scala 471:33]
      node T_180 = or(io.in.bits.ren3, io.in.bits.swap23) @[fpu.scala 471:48]
      node T_181 = and(T_179, T_180) @[fpu.scala 471:37]
      node T_182 = bits(io.in.bits.cmd, 0, 0) @[fpu.scala 471:78]
      node T_183 = cat(T_181, T_182) @[Cat.scala 20:58]
      in.cmd <= T_183 @[fpu.scala 471:12]
      when io.in.bits.swap23 : @[fpu.scala 472:23]
        in.in2 <= one @[fpu.scala 472:32]
        skip @[fpu.scala 472:23]
      node T_184 = or(io.in.bits.ren3, io.in.bits.swap23) @[fpu.scala 473:21]
      node T_186 = eq(T_184, UInt<1>("h00")) @[Conditional.scala 18:11]
      when T_186 : @[Conditional.scala 18:15]
        in.in3 <= zero @[fpu.scala 473:45]
        skip @[Conditional.scala 18:15]
      skip @[fpu.scala 467:22]
    inst fma of MulAddRecFN_1 @[fpu.scala 476:19]
    fma.io is invalid
    fma.clk <= clk
    fma.reset <= reset
    fma.io.op <= in.cmd @[fpu.scala 477:13]
    fma.io.roundingMode <= in.rm @[fpu.scala 478:23]
    fma.io.a <= in.in1 @[fpu.scala 479:12]
    fma.io.b <= in.in2 @[fpu.scala 480:12]
    fma.io.c <= in.in3 @[fpu.scala 481:12]
    wire res : {data : UInt<65>, exc : UInt<5>} @[fpu.scala 483:17]
    res is invalid @[fpu.scala 483:17]
    node T_193 = cat(UInt<1>("h00"), fma.io.out) @[Cat.scala 20:58]
    res.data <= T_193 @[fpu.scala 484:12]
    res.exc <= fma.io.exceptionFlags @[fpu.scala 485:11]
    reg T_196 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_196 <= valid
    reg T_197 : {data : UInt<65>, exc : UInt<5>}, clk
    when valid : @[Reg.scala 29:19]
      T_197 <- res @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg T_202 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_202 <= T_196
    reg T_203 : {data : UInt<65>, exc : UInt<5>}, clk
    when T_196 : @[Reg.scala 29:19]
      T_203 <- T_197 @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg T_208 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_208 <= T_202
    reg T_209 : {data : UInt<65>, exc : UInt<5>}, clk
    when T_202 : @[Reg.scala 29:19]
      T_209 <- T_203 @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    wire T_220 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 39:21]
    T_220 is invalid @[Valid.scala 39:21]
    T_220.valid <= T_208 @[Valid.scala 40:17]
    T_220.bits <- T_209 @[Valid.scala 41:16]
    io.out <- T_220 @[fpu.scala 486:10]
    
  module DivSqrtRecF64_mulAddZ31 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inReady_div : UInt<1>, inReady_sqrt : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<65>, flip b : UInt<65>, flip roundingMode : UInt<2>, outValid_div : UInt<1>, outValid_sqrt : UInt<1>, out : UInt<65>, exceptionFlags : UInt<5>, usingMulAdd : UInt<4>, latchMulAddA_0 : UInt<1>, mulAddA_0 : UInt<54>, latchMulAddB_0 : UInt<1>, mulAddB_0 : UInt<54>, mulAddC_2 : UInt<105>, flip mulAddResult_3 : UInt<105>}
    
    io is invalid
    reg valid_PA : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg sqrtOp_PA : UInt<1>, clk
    reg sign_PA : UInt<1>, clk
    reg specialCodeB_PA : UInt<3>, clk
    reg fractB_51_PA : UInt<1>, clk
    reg roundingMode_PA : UInt<2>, clk
    reg specialCodeA_PA : UInt<3>, clk
    reg fractA_51_PA : UInt<1>, clk
    reg exp_PA : UInt<14>, clk
    reg fractB_other_PA : UInt<51>, clk
    reg fractA_other_PA : UInt<51>, clk
    reg valid_PB : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg sqrtOp_PB : UInt<1>, clk
    reg sign_PB : UInt<1>, clk
    reg specialCodeA_PB : UInt<3>, clk
    reg fractA_51_PB : UInt<1>, clk
    reg specialCodeB_PB : UInt<3>, clk
    reg fractB_51_PB : UInt<1>, clk
    reg roundingMode_PB : UInt<2>, clk
    reg exp_PB : UInt<14>, clk
    reg fractA_0_PB : UInt<1>, clk
    reg fractB_other_PB : UInt<51>, clk
    reg valid_PC : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg sqrtOp_PC : UInt<1>, clk
    reg sign_PC : UInt<1>, clk
    reg specialCodeA_PC : UInt<3>, clk
    reg fractA_51_PC : UInt<1>, clk
    reg specialCodeB_PC : UInt<3>, clk
    reg fractB_51_PC : UInt<1>, clk
    reg roundingMode_PC : UInt<2>, clk
    reg exp_PC : UInt<14>, clk
    reg fractA_0_PC : UInt<1>, clk
    reg fractB_other_PC : UInt<51>, clk
    reg cycleNum_A : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg cycleNum_B : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg cycleNum_C : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg cycleNum_E : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg fractR0_A : UInt<9>, clk
    reg hiSqrR0_A_sqrt : UInt<10>, clk
    reg partNegSigma0_A : UInt<21>, clk
    reg nextMulAdd9A_A : UInt<9>, clk
    reg nextMulAdd9B_A : UInt<9>, clk
    reg ER1_B_sqrt : UInt<17>, clk
    reg ESqrR1_B_sqrt : UInt<32>, clk
    reg sigX1_B : UInt<58>, clk
    reg sqrSigma1_C : UInt<33>, clk
    reg sigXN_C : UInt<58>, clk
    reg u_C_sqrt : UInt<31>, clk
    reg E_E_div : UInt<1>, clk
    reg sigT_E : UInt<53>, clk
    reg extraT_E : UInt<1>, clk
    reg isNegRemT_E : UInt<1>, clk
    reg trueEqX_E1 : UInt<1>, clk
    wire ready_PA : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 143:24]
    ready_PA is invalid @[DivSqrtRecF64_mulAddZ31.scala 143:24]
    wire ready_PB : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 144:24]
    ready_PB is invalid @[DivSqrtRecF64_mulAddZ31.scala 144:24]
    wire ready_PC : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 145:24]
    ready_PC is invalid @[DivSqrtRecF64_mulAddZ31.scala 145:24]
    wire leaving_PA : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 146:26]
    leaving_PA is invalid @[DivSqrtRecF64_mulAddZ31.scala 146:26]
    wire leaving_PB : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 147:26]
    leaving_PB is invalid @[DivSqrtRecF64_mulAddZ31.scala 147:26]
    wire leaving_PC : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 148:26]
    leaving_PC is invalid @[DivSqrtRecF64_mulAddZ31.scala 148:26]
    wire cyc_B10_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 150:28]
    cyc_B10_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 150:28]
    wire cyc_B9_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 151:28]
    cyc_B9_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 151:28]
    wire cyc_B8_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 152:28]
    cyc_B8_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 152:28]
    wire cyc_B7_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 153:28]
    cyc_B7_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 153:28]
    wire cyc_B6 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 155:22]
    cyc_B6 is invalid @[DivSqrtRecF64_mulAddZ31.scala 155:22]
    wire cyc_B5 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 156:22]
    cyc_B5 is invalid @[DivSqrtRecF64_mulAddZ31.scala 156:22]
    wire cyc_B4 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 157:22]
    cyc_B4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 157:22]
    wire cyc_B3 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 158:22]
    cyc_B3 is invalid @[DivSqrtRecF64_mulAddZ31.scala 158:22]
    wire cyc_B2 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 159:22]
    cyc_B2 is invalid @[DivSqrtRecF64_mulAddZ31.scala 159:22]
    wire cyc_B1 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 160:22]
    cyc_B1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 160:22]
    wire cyc_B6_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 162:26]
    cyc_B6_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 162:26]
    wire cyc_B5_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 163:26]
    cyc_B5_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 163:26]
    wire cyc_B4_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 164:26]
    cyc_B4_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 164:26]
    wire cyc_B3_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 165:26]
    cyc_B3_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 165:26]
    wire cyc_B2_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 166:26]
    cyc_B2_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 166:26]
    wire cyc_B1_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 167:26]
    cyc_B1_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 167:26]
    wire cyc_B6_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 169:27]
    cyc_B6_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 169:27]
    wire cyc_B5_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 170:27]
    cyc_B5_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 170:27]
    wire cyc_B4_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 171:27]
    cyc_B4_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 171:27]
    wire cyc_B3_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 172:27]
    cyc_B3_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 172:27]
    wire cyc_B2_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 173:27]
    cyc_B2_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 173:27]
    wire cyc_B1_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 174:27]
    cyc_B1_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 174:27]
    wire cyc_C5 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 176:22]
    cyc_C5 is invalid @[DivSqrtRecF64_mulAddZ31.scala 176:22]
    wire cyc_C4 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 177:22]
    cyc_C4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 177:22]
    wire valid_normalCase_leaving_PB : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 178:22]
    valid_normalCase_leaving_PB is invalid @[DivSqrtRecF64_mulAddZ31.scala 178:22]
    wire cyc_C2 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 179:22]
    cyc_C2 is invalid @[DivSqrtRecF64_mulAddZ31.scala 179:22]
    wire cyc_C1 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 180:22]
    cyc_C1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 180:22]
    wire cyc_E4 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 182:22]
    cyc_E4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 182:22]
    wire cyc_E3 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 183:22]
    cyc_E3 is invalid @[DivSqrtRecF64_mulAddZ31.scala 183:22]
    wire cyc_E2 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 184:22]
    cyc_E2 is invalid @[DivSqrtRecF64_mulAddZ31.scala 184:22]
    wire cyc_E1 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 185:22]
    cyc_E1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 185:22]
    wire zSigma1_B4 : UInt @[DivSqrtRecF64_mulAddZ31.scala 187:34]
    zSigma1_B4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 187:34]
    wire sigXNU_B3_CX : UInt @[DivSqrtRecF64_mulAddZ31.scala 188:34]
    sigXNU_B3_CX is invalid @[DivSqrtRecF64_mulAddZ31.scala 188:34]
    wire zComplSigT_C1_sqrt : UInt @[DivSqrtRecF64_mulAddZ31.scala 189:34]
    zComplSigT_C1_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 189:34]
    wire zComplSigT_C1 : UInt @[DivSqrtRecF64_mulAddZ31.scala 190:34]
    zComplSigT_C1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 190:34]
    node T_113 = eq(cyc_B7_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 197:21]
    node T_114 = and(ready_PA, T_113) @[DivSqrtRecF64_mulAddZ31.scala 197:18]
    node T_116 = eq(cyc_B6_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 197:38]
    node T_117 = and(T_114, T_116) @[DivSqrtRecF64_mulAddZ31.scala 197:35]
    node T_119 = eq(cyc_B5_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 197:55]
    node T_120 = and(T_117, T_119) @[DivSqrtRecF64_mulAddZ31.scala 197:52]
    node T_122 = eq(cyc_B4_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 198:13]
    node T_123 = and(T_120, T_122) @[DivSqrtRecF64_mulAddZ31.scala 197:69]
    node T_125 = eq(cyc_B3, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 198:30]
    node T_126 = and(T_123, T_125) @[DivSqrtRecF64_mulAddZ31.scala 198:27]
    node T_128 = eq(cyc_B2, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 198:42]
    node T_129 = and(T_126, T_128) @[DivSqrtRecF64_mulAddZ31.scala 198:39]
    node T_131 = eq(cyc_B1_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 198:54]
    node T_132 = and(T_129, T_131) @[DivSqrtRecF64_mulAddZ31.scala 198:51]
    node T_134 = eq(cyc_C5, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 199:13]
    node T_135 = and(T_132, T_134) @[DivSqrtRecF64_mulAddZ31.scala 198:68]
    node T_137 = eq(cyc_C4, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 199:25]
    node T_138 = and(T_135, T_137) @[DivSqrtRecF64_mulAddZ31.scala 199:22]
    io.inReady_div <= T_138 @[DivSqrtRecF64_mulAddZ31.scala 195:20]
    node T_140 = eq(cyc_B6_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 201:21]
    node T_141 = and(ready_PA, T_140) @[DivSqrtRecF64_mulAddZ31.scala 201:18]
    node T_143 = eq(cyc_B5_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 201:38]
    node T_144 = and(T_141, T_143) @[DivSqrtRecF64_mulAddZ31.scala 201:35]
    node T_146 = eq(cyc_B4_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 201:55]
    node T_147 = and(T_144, T_146) @[DivSqrtRecF64_mulAddZ31.scala 201:52]
    node T_149 = eq(cyc_B2_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 202:13]
    node T_150 = and(T_147, T_149) @[DivSqrtRecF64_mulAddZ31.scala 201:69]
    node T_152 = eq(cyc_B1_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 202:29]
    node T_153 = and(T_150, T_152) @[DivSqrtRecF64_mulAddZ31.scala 202:26]
    io.inReady_sqrt <= T_153 @[DivSqrtRecF64_mulAddZ31.scala 200:21]
    node T_154 = and(io.inReady_div, io.inValid) @[DivSqrtRecF64_mulAddZ31.scala 203:38]
    node T_156 = eq(io.sqrtOp, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 203:55]
    node cyc_S_div = and(T_154, T_156) @[DivSqrtRecF64_mulAddZ31.scala 203:52]
    node T_157 = and(io.inReady_sqrt, io.inValid) @[DivSqrtRecF64_mulAddZ31.scala 204:38]
    node cyc_S_sqrt = and(T_157, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 204:52]
    node cyc_S = or(cyc_S_div, cyc_S_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 205:27]
    node signA_S = bits(io.a, 64, 64) @[DivSqrtRecF64_mulAddZ31.scala 207:24]
    node expA_S = bits(io.a, 63, 52) @[DivSqrtRecF64_mulAddZ31.scala 208:24]
    node fractA_S = bits(io.a, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 209:24]
    node specialCodeA_S = bits(expA_S, 11, 9) @[DivSqrtRecF64_mulAddZ31.scala 210:32]
    node isZeroA_S = eq(specialCodeA_S, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 211:40]
    node T_159 = bits(specialCodeA_S, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 212:39]
    node isSpecialA_S = eq(T_159, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 212:46]
    node signB_S = bits(io.b, 64, 64) @[DivSqrtRecF64_mulAddZ31.scala 214:24]
    node expB_S = bits(io.b, 63, 52) @[DivSqrtRecF64_mulAddZ31.scala 215:24]
    node fractB_S = bits(io.b, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 216:24]
    node specialCodeB_S = bits(expB_S, 11, 9) @[DivSqrtRecF64_mulAddZ31.scala 217:32]
    node isZeroB_S = eq(specialCodeB_S, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 218:40]
    node T_162 = bits(specialCodeB_S, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 219:39]
    node isSpecialB_S = eq(T_162, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 219:46]
    node T_164 = xor(signA_S, signB_S) @[DivSqrtRecF64_mulAddZ31.scala 221:50]
    node sign_S = mux(io.sqrtOp, signB_S, T_164) @[DivSqrtRecF64_mulAddZ31.scala 221:21]
    node T_166 = eq(isSpecialA_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 224:9]
    node T_168 = eq(isSpecialB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 224:27]
    node T_169 = and(T_166, T_168) @[DivSqrtRecF64_mulAddZ31.scala 224:24]
    node T_171 = eq(isZeroA_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 224:45]
    node T_172 = and(T_169, T_171) @[DivSqrtRecF64_mulAddZ31.scala 224:42]
    node T_174 = eq(isZeroB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 224:60]
    node normalCase_S_div = and(T_172, T_174) @[DivSqrtRecF64_mulAddZ31.scala 224:57]
    node T_176 = eq(isSpecialB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 225:29]
    node T_178 = eq(isZeroB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 225:47]
    node T_179 = and(T_176, T_178) @[DivSqrtRecF64_mulAddZ31.scala 225:44]
    node T_181 = eq(signB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 225:62]
    node normalCase_S_sqrt = and(T_179, T_181) @[DivSqrtRecF64_mulAddZ31.scala 225:59]
    node normalCase_S = mux(io.sqrtOp, normalCase_S_sqrt, normalCase_S_div) @[DivSqrtRecF64_mulAddZ31.scala 226:27]
    node entering_PA_normalCase_div = and(cyc_S_div, normalCase_S_div) @[DivSqrtRecF64_mulAddZ31.scala 228:50]
    node entering_PA_normalCase_sqrt = and(cyc_S_sqrt, normalCase_S_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 229:50]
    node entering_PA_normalCase = or(entering_PA_normalCase_div, entering_PA_normalCase_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 231:36]
    node T_183 = eq(ready_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 233:58]
    node T_184 = or(valid_PA, T_183) @[DivSqrtRecF64_mulAddZ31.scala 233:55]
    node T_185 = and(cyc_S, T_184) @[DivSqrtRecF64_mulAddZ31.scala 233:42]
    node entering_PA = or(entering_PA_normalCase, T_185) @[DivSqrtRecF64_mulAddZ31.scala 233:32]
    node T_187 = eq(normalCase_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 235:18]
    node T_188 = and(cyc_S, T_187) @[DivSqrtRecF64_mulAddZ31.scala 235:15]
    node T_190 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 235:36]
    node T_191 = and(T_188, T_190) @[DivSqrtRecF64_mulAddZ31.scala 235:33]
    node T_193 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 236:29]
    node T_195 = eq(ready_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 236:43]
    node T_196 = and(T_193, T_195) @[DivSqrtRecF64_mulAddZ31.scala 236:40]
    node T_197 = or(leaving_PB, T_196) @[DivSqrtRecF64_mulAddZ31.scala 236:25]
    node entering_PB_S = and(T_191, T_197) @[DivSqrtRecF64_mulAddZ31.scala 235:47]
    node T_199 = eq(normalCase_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 238:18]
    node T_200 = and(cyc_S, T_199) @[DivSqrtRecF64_mulAddZ31.scala 238:15]
    node T_202 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 238:36]
    node T_203 = and(T_200, T_202) @[DivSqrtRecF64_mulAddZ31.scala 238:33]
    node T_205 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 238:50]
    node T_206 = and(T_203, T_205) @[DivSqrtRecF64_mulAddZ31.scala 238:47]
    node entering_PC_S = and(T_206, ready_PC) @[DivSqrtRecF64_mulAddZ31.scala 238:61]
    node T_207 = or(entering_PA, leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 240:23]
    when T_207 : @[DivSqrtRecF64_mulAddZ31.scala 240:38]
      valid_PA <= entering_PA @[DivSqrtRecF64_mulAddZ31.scala 241:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 240:38]
    when entering_PA : @[DivSqrtRecF64_mulAddZ31.scala 243:24]
      sqrtOp_PA <= io.sqrtOp @[DivSqrtRecF64_mulAddZ31.scala 244:25]
      sign_PA <= sign_S @[DivSqrtRecF64_mulAddZ31.scala 245:25]
      specialCodeB_PA <= specialCodeB_S @[DivSqrtRecF64_mulAddZ31.scala 246:25]
      node T_208 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 247:36]
      fractB_51_PA <= T_208 @[DivSqrtRecF64_mulAddZ31.scala 247:25]
      roundingMode_PA <= io.roundingMode @[DivSqrtRecF64_mulAddZ31.scala 248:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 243:24]
    node T_210 = eq(io.sqrtOp, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 250:26]
    node T_211 = and(entering_PA, T_210) @[DivSqrtRecF64_mulAddZ31.scala 250:23]
    when T_211 : @[DivSqrtRecF64_mulAddZ31.scala 250:39]
      specialCodeA_PA <= specialCodeA_S @[DivSqrtRecF64_mulAddZ31.scala 251:25]
      node T_212 = bits(fractA_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 252:36]
      fractA_51_PA <= T_212 @[DivSqrtRecF64_mulAddZ31.scala 252:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 250:39]
    when entering_PA_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 254:35]
      node T_213 = bits(expB_S, 11, 11) @[DivSqrtRecF64_mulAddZ31.scala 258:44]
      node T_214 = bits(T_213, 0, 0) @[Bitwise.scala 33:15]
      node T_217 = mux(T_214, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12]
      node T_218 = bits(expB_S, 10, 0) @[DivSqrtRecF64_mulAddZ31.scala 258:58]
      node T_219 = not(T_218) @[DivSqrtRecF64_mulAddZ31.scala 258:51]
      node T_220 = cat(T_217, T_219) @[Cat.scala 20:58]
      node T_221 = add(expA_S, T_220) @[DivSqrtRecF64_mulAddZ31.scala 258:24]
      node T_222 = tail(T_221, 1) @[DivSqrtRecF64_mulAddZ31.scala 258:24]
      node T_223 = mux(io.sqrtOp, expB_S, T_222) @[DivSqrtRecF64_mulAddZ31.scala 256:16]
      exp_PA <= T_223 @[DivSqrtRecF64_mulAddZ31.scala 255:16]
      node T_224 = bits(fractB_S, 50, 0) @[DivSqrtRecF64_mulAddZ31.scala 260:36]
      fractB_other_PA <= T_224 @[DivSqrtRecF64_mulAddZ31.scala 260:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 254:35]
    when entering_PA_normalCase_div : @[DivSqrtRecF64_mulAddZ31.scala 262:39]
      node T_225 = bits(fractA_S, 50, 0) @[DivSqrtRecF64_mulAddZ31.scala 263:36]
      fractA_other_PA <= T_225 @[DivSqrtRecF64_mulAddZ31.scala 263:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 262:39]
    node isZeroA_PA = eq(specialCodeA_PA, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 266:42]
    node T_227 = bits(specialCodeA_PA, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 267:41]
    node isSpecialA_PA = eq(T_227, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 267:48]
    node T_230 = cat(UInt<1>("h01"), fractA_51_PA) @[Cat.scala 20:58]
    node sigA_PA = cat(T_230, fractA_other_PA) @[Cat.scala 20:58]
    node isZeroB_PA = eq(specialCodeB_PA, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 270:42]
    node T_232 = bits(specialCodeB_PA, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 271:41]
    node isSpecialB_PA = eq(T_232, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 271:48]
    node T_235 = cat(UInt<1>("h01"), fractB_51_PA) @[Cat.scala 20:58]
    node sigB_PA = cat(T_235, fractB_other_PA) @[Cat.scala 20:58]
    node T_237 = eq(isSpecialB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 276:13]
    node T_239 = eq(isZeroB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 276:32]
    node T_240 = and(T_237, T_239) @[DivSqrtRecF64_mulAddZ31.scala 276:29]
    node T_242 = eq(sign_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 276:48]
    node T_243 = and(T_240, T_242) @[DivSqrtRecF64_mulAddZ31.scala 276:45]
    node T_245 = eq(isSpecialA_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:13]
    node T_247 = eq(isSpecialB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:32]
    node T_248 = and(T_245, T_247) @[DivSqrtRecF64_mulAddZ31.scala 277:29]
    node T_250 = eq(isZeroA_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:51]
    node T_251 = and(T_248, T_250) @[DivSqrtRecF64_mulAddZ31.scala 277:48]
    node T_253 = eq(isZeroB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:67]
    node T_254 = and(T_251, T_253) @[DivSqrtRecF64_mulAddZ31.scala 277:64]
    node normalCase_PA = mux(sqrtOp_PA, T_243, T_254) @[DivSqrtRecF64_mulAddZ31.scala 275:12]
    node valid_normalCase_leaving_PA = or(cyc_B4_div, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 280:50]
    node valid_leaving_PA = mux(normalCase_PA, valid_normalCase_leaving_PA, ready_PB) @[DivSqrtRecF64_mulAddZ31.scala 282:12]
    node T_255 = and(valid_PA, valid_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 283:28]
    leaving_PA <= T_255 @[DivSqrtRecF64_mulAddZ31.scala 283:16]
    node T_257 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 284:17]
    node T_258 = or(T_257, valid_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 284:28]
    ready_PA <= T_258 @[DivSqrtRecF64_mulAddZ31.scala 284:14]
    node T_259 = and(valid_PA, normalCase_PA) @[DivSqrtRecF64_mulAddZ31.scala 287:18]
    node entering_PB_normalCase = and(T_259, valid_normalCase_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 287:35]
    node entering_PB = or(entering_PB_S, leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 288:37]
    node T_260 = or(entering_PB, leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 290:23]
    when T_260 : @[DivSqrtRecF64_mulAddZ31.scala 290:38]
      valid_PB <= entering_PB @[DivSqrtRecF64_mulAddZ31.scala 291:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 290:38]
    when entering_PB : @[DivSqrtRecF64_mulAddZ31.scala 293:24]
      node T_261 = mux(valid_PA, sqrtOp_PA, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 294:31]
      sqrtOp_PB <= T_261 @[DivSqrtRecF64_mulAddZ31.scala 294:25]
      node T_262 = mux(valid_PA, sign_PA, sign_S) @[DivSqrtRecF64_mulAddZ31.scala 295:31]
      sign_PB <= T_262 @[DivSqrtRecF64_mulAddZ31.scala 295:25]
      node T_263 = mux(valid_PA, specialCodeA_PA, specialCodeA_S) @[DivSqrtRecF64_mulAddZ31.scala 296:31]
      specialCodeA_PB <= T_263 @[DivSqrtRecF64_mulAddZ31.scala 296:25]
      node T_264 = bits(fractA_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 297:67]
      node T_265 = mux(valid_PA, fractA_51_PA, T_264) @[DivSqrtRecF64_mulAddZ31.scala 297:31]
      fractA_51_PB <= T_265 @[DivSqrtRecF64_mulAddZ31.scala 297:25]
      node T_266 = mux(valid_PA, specialCodeB_PA, specialCodeB_S) @[DivSqrtRecF64_mulAddZ31.scala 298:31]
      specialCodeB_PB <= T_266 @[DivSqrtRecF64_mulAddZ31.scala 298:25]
      node T_267 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 299:67]
      node T_268 = mux(valid_PA, fractB_51_PA, T_267) @[DivSqrtRecF64_mulAddZ31.scala 299:31]
      fractB_51_PB <= T_268 @[DivSqrtRecF64_mulAddZ31.scala 299:25]
      node T_269 = mux(valid_PA, roundingMode_PA, io.roundingMode) @[DivSqrtRecF64_mulAddZ31.scala 300:31]
      roundingMode_PB <= T_269 @[DivSqrtRecF64_mulAddZ31.scala 300:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 293:24]
    when entering_PB_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 302:35]
      exp_PB <= exp_PA @[DivSqrtRecF64_mulAddZ31.scala 303:25]
      node T_270 = bits(fractA_other_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 304:43]
      fractA_0_PB <= T_270 @[DivSqrtRecF64_mulAddZ31.scala 304:25]
      fractB_other_PB <= fractB_other_PA @[DivSqrtRecF64_mulAddZ31.scala 305:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 302:35]
    node isZeroA_PB = eq(specialCodeA_PB, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 308:42]
    node T_272 = bits(specialCodeA_PB, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 309:41]
    node isSpecialA_PB = eq(T_272, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 309:48]
    node isZeroB_PB = eq(specialCodeB_PB, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 310:42]
    node T_275 = bits(specialCodeB_PB, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 311:41]
    node isSpecialB_PB = eq(T_275, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 311:48]
    node T_278 = eq(isSpecialB_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 314:13]
    node T_280 = eq(isZeroB_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 314:32]
    node T_281 = and(T_278, T_280) @[DivSqrtRecF64_mulAddZ31.scala 314:29]
    node T_283 = eq(sign_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 314:48]
    node T_284 = and(T_281, T_283) @[DivSqrtRecF64_mulAddZ31.scala 314:45]
    node T_286 = eq(isSpecialA_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 315:13]
    node T_288 = eq(isSpecialB_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 315:32]
    node T_289 = and(T_286, T_288) @[DivSqrtRecF64_mulAddZ31.scala 315:29]
    node T_291 = eq(isZeroA_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 315:51]
    node T_292 = and(T_289, T_291) @[DivSqrtRecF64_mulAddZ31.scala 315:48]
    node T_294 = eq(isZeroB_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 315:67]
    node T_295 = and(T_292, T_294) @[DivSqrtRecF64_mulAddZ31.scala 315:64]
    node normalCase_PB = mux(sqrtOp_PB, T_284, T_295) @[DivSqrtRecF64_mulAddZ31.scala 313:12]
    node valid_leaving_PB = mux(normalCase_PB, valid_normalCase_leaving_PB, ready_PC) @[DivSqrtRecF64_mulAddZ31.scala 320:12]
    node T_296 = and(valid_PB, valid_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 321:28]
    leaving_PB <= T_296 @[DivSqrtRecF64_mulAddZ31.scala 321:16]
    node T_298 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 322:17]
    node T_299 = or(T_298, valid_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 322:28]
    ready_PB <= T_299 @[DivSqrtRecF64_mulAddZ31.scala 322:14]
    node T_300 = and(valid_PB, normalCase_PB) @[DivSqrtRecF64_mulAddZ31.scala 325:18]
    node entering_PC_normalCase = and(T_300, valid_normalCase_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 325:35]
    node entering_PC = or(entering_PC_S, leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 326:37]
    node T_301 = or(entering_PC, leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 328:23]
    when T_301 : @[DivSqrtRecF64_mulAddZ31.scala 328:38]
      valid_PC <= entering_PC @[DivSqrtRecF64_mulAddZ31.scala 329:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 328:38]
    when entering_PC : @[DivSqrtRecF64_mulAddZ31.scala 331:24]
      node T_302 = mux(valid_PB, sqrtOp_PB, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 332:31]
      sqrtOp_PC <= T_302 @[DivSqrtRecF64_mulAddZ31.scala 332:25]
      node T_303 = mux(valid_PB, sign_PB, sign_S) @[DivSqrtRecF64_mulAddZ31.scala 333:31]
      sign_PC <= T_303 @[DivSqrtRecF64_mulAddZ31.scala 333:25]
      node T_304 = mux(valid_PB, specialCodeA_PB, specialCodeA_S) @[DivSqrtRecF64_mulAddZ31.scala 334:31]
      specialCodeA_PC <= T_304 @[DivSqrtRecF64_mulAddZ31.scala 334:25]
      node T_305 = bits(fractA_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 335:67]
      node T_306 = mux(valid_PB, fractA_51_PB, T_305) @[DivSqrtRecF64_mulAddZ31.scala 335:31]
      fractA_51_PC <= T_306 @[DivSqrtRecF64_mulAddZ31.scala 335:25]
      node T_307 = mux(valid_PB, specialCodeB_PB, specialCodeB_S) @[DivSqrtRecF64_mulAddZ31.scala 336:31]
      specialCodeB_PC <= T_307 @[DivSqrtRecF64_mulAddZ31.scala 336:25]
      node T_308 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 337:67]
      node T_309 = mux(valid_PB, fractB_51_PB, T_308) @[DivSqrtRecF64_mulAddZ31.scala 337:31]
      fractB_51_PC <= T_309 @[DivSqrtRecF64_mulAddZ31.scala 337:25]
      node T_310 = mux(valid_PB, roundingMode_PB, io.roundingMode) @[DivSqrtRecF64_mulAddZ31.scala 338:31]
      roundingMode_PC <= T_310 @[DivSqrtRecF64_mulAddZ31.scala 338:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 331:24]
    when entering_PC_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 340:35]
      exp_PC <= exp_PB @[DivSqrtRecF64_mulAddZ31.scala 341:25]
      fractA_0_PC <= fractA_0_PB @[DivSqrtRecF64_mulAddZ31.scala 342:25]
      fractB_other_PC <= fractB_other_PB @[DivSqrtRecF64_mulAddZ31.scala 343:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 340:35]
    node isZeroA_PC = eq(specialCodeA_PC, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 346:42]
    node T_312 = bits(specialCodeA_PC, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 347:41]
    node isSpecialA_PC = eq(T_312, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 347:48]
    node T_314 = bits(specialCodeA_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 348:59]
    node T_316 = eq(T_314, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 348:42]
    node isInfA_PC = and(isSpecialA_PC, T_316) @[DivSqrtRecF64_mulAddZ31.scala 348:39]
    node T_317 = bits(specialCodeA_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 349:59]
    node isNaNA_PC = and(isSpecialA_PC, T_317) @[DivSqrtRecF64_mulAddZ31.scala 349:39]
    node T_319 = eq(fractA_51_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 350:38]
    node isSigNaNA_PC = and(isNaNA_PC, T_319) @[DivSqrtRecF64_mulAddZ31.scala 350:35]
    node isZeroB_PC = eq(specialCodeB_PC, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 352:42]
    node T_321 = bits(specialCodeB_PC, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 353:41]
    node isSpecialB_PC = eq(T_321, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 353:48]
    node T_323 = bits(specialCodeB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 354:59]
    node T_325 = eq(T_323, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 354:42]
    node isInfB_PC = and(isSpecialB_PC, T_325) @[DivSqrtRecF64_mulAddZ31.scala 354:39]
    node T_326 = bits(specialCodeB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 355:59]
    node isNaNB_PC = and(isSpecialB_PC, T_326) @[DivSqrtRecF64_mulAddZ31.scala 355:39]
    node T_328 = eq(fractB_51_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 356:38]
    node isSigNaNB_PC = and(isNaNB_PC, T_328) @[DivSqrtRecF64_mulAddZ31.scala 356:35]
    node T_330 = cat(UInt<1>("h01"), fractB_51_PC) @[Cat.scala 20:58]
    node sigB_PC = cat(T_330, fractB_other_PC) @[Cat.scala 20:58]
    node T_332 = eq(isSpecialB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 360:24]
    node T_334 = eq(isZeroB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 360:43]
    node T_335 = and(T_332, T_334) @[DivSqrtRecF64_mulAddZ31.scala 360:40]
    node T_337 = eq(sign_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 360:59]
    node T_338 = and(T_335, T_337) @[DivSqrtRecF64_mulAddZ31.scala 360:56]
    node T_340 = eq(isSpecialA_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 361:13]
    node T_342 = eq(isSpecialB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 361:32]
    node T_343 = and(T_340, T_342) @[DivSqrtRecF64_mulAddZ31.scala 361:29]
    node T_345 = eq(isZeroA_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 361:51]
    node T_346 = and(T_343, T_345) @[DivSqrtRecF64_mulAddZ31.scala 361:48]
    node T_348 = eq(isZeroB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 361:67]
    node T_349 = and(T_346, T_348) @[DivSqrtRecF64_mulAddZ31.scala 361:64]
    node normalCase_PC = mux(sqrtOp_PC, T_338, T_349) @[DivSqrtRecF64_mulAddZ31.scala 360:12]
    node T_351 = add(exp_PC, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 363:27]
    node expP2_PC = tail(T_351, 1) @[DivSqrtRecF64_mulAddZ31.scala 363:27]
    node T_352 = bits(exp_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 365:19]
    node T_353 = bits(expP2_PC, 13, 1) @[DivSqrtRecF64_mulAddZ31.scala 366:25]
    node T_355 = cat(T_353, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_356 = bits(exp_PC, 13, 1) @[DivSqrtRecF64_mulAddZ31.scala 367:23]
    node T_358 = cat(T_356, UInt<1>("h01")) @[Cat.scala 20:58]
    node expP1_PC = mux(T_352, T_355, T_358) @[DivSqrtRecF64_mulAddZ31.scala 365:12]
    node roundingMode_near_even_PC = eq(roundingMode_PC, UInt<2>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 370:54]
    node roundingMode_minMag_PC = eq(roundingMode_PC, UInt<2>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 371:54]
    node roundingMode_min_PC = eq(roundingMode_PC, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 372:54]
    node roundingMode_max_PC = eq(roundingMode_PC, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 373:54]
    node roundMagUp_PC = mux(sign_PC, roundingMode_min_PC, roundingMode_max_PC) @[DivSqrtRecF64_mulAddZ31.scala 376:12]
    node overflowY_roundMagUp_PC = or(roundingMode_near_even_PC, roundMagUp_PC) @[DivSqrtRecF64_mulAddZ31.scala 377:61]
    node T_360 = eq(roundMagUp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 378:27]
    node T_362 = eq(roundingMode_near_even_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 378:46]
    node roundMagDown_PC = and(T_360, T_362) @[DivSqrtRecF64_mulAddZ31.scala 378:43]
    node T_364 = eq(normalCase_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 380:28]
    node valid_leaving_PC = or(T_364, cyc_E1) @[DivSqrtRecF64_mulAddZ31.scala 380:44]
    node T_365 = and(valid_PC, valid_leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 381:28]
    leaving_PC <= T_365 @[DivSqrtRecF64_mulAddZ31.scala 381:16]
    node T_367 = eq(valid_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 382:17]
    node T_368 = or(T_367, valid_leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 382:28]
    ready_PC <= T_368 @[DivSqrtRecF64_mulAddZ31.scala 382:14]
    node T_370 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 383:39]
    node T_371 = and(leaving_PC, T_370) @[DivSqrtRecF64_mulAddZ31.scala 383:36]
    io.outValid_div <= T_371 @[DivSqrtRecF64_mulAddZ31.scala 383:22]
    node T_372 = and(leaving_PC, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 384:36]
    io.outValid_sqrt <= T_372 @[DivSqrtRecF64_mulAddZ31.scala 384:22]
    node T_374 = neq(cycleNum_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 388:49]
    node T_375 = or(entering_PA_normalCase, T_374) @[DivSqrtRecF64_mulAddZ31.scala 388:34]
    when T_375 : @[DivSqrtRecF64_mulAddZ31.scala 388:63]
      node T_378 = mux(entering_PA_normalCase_div, UInt<2>("h03"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 390:16]
      node T_381 = mux(entering_PA_normalCase_sqrt, UInt<3>("h06"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 391:16]
      node T_382 = or(T_378, T_381) @[DivSqrtRecF64_mulAddZ31.scala 390:74]
      node T_384 = eq(entering_PA_normalCase, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 392:17]
      node T_386 = sub(cycleNum_A, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 392:54]
      node T_387 = tail(T_386, 1) @[DivSqrtRecF64_mulAddZ31.scala 392:54]
      node T_389 = mux(T_384, T_387, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 392:16]
      node T_390 = or(T_382, T_389) @[DivSqrtRecF64_mulAddZ31.scala 391:74]
      cycleNum_A <= T_390 @[DivSqrtRecF64_mulAddZ31.scala 389:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 388:63]
    node cyc_A6_sqrt = eq(cycleNum_A, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 396:35]
    node cyc_A5_sqrt = eq(cycleNum_A, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 397:35]
    node cyc_A4_sqrt = eq(cycleNum_A, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 398:35]
    node cyc_A4 = or(cyc_A4_sqrt, entering_PA_normalCase_div) @[DivSqrtRecF64_mulAddZ31.scala 402:30]
    node cyc_A3 = eq(cycleNum_A, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 403:30]
    node cyc_A2 = eq(cycleNum_A, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 404:30]
    node cyc_A1 = eq(cycleNum_A, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 405:30]
    node T_398 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 407:32]
    node cyc_A3_div = and(cyc_A3, T_398) @[DivSqrtRecF64_mulAddZ31.scala 407:29]
    node T_400 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 408:32]
    node cyc_A2_div = and(cyc_A2, T_400) @[DivSqrtRecF64_mulAddZ31.scala 408:29]
    node T_402 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 409:32]
    node cyc_A1_div = and(cyc_A1, T_402) @[DivSqrtRecF64_mulAddZ31.scala 409:29]
    node cyc_A3_sqrt = and(cyc_A3, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 411:30]
    node cyc_A2_sqrt = and(cyc_A2, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 412:30]
    node cyc_A1_sqrt = and(cyc_A1, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 413:30]
    node T_404 = neq(cycleNum_B, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 415:33]
    node T_405 = or(cyc_A1, T_404) @[DivSqrtRecF64_mulAddZ31.scala 415:18]
    when T_405 : @[DivSqrtRecF64_mulAddZ31.scala 415:47]
      node T_408 = mux(sqrtOp_PA, UInt<4>("h0a"), UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 418:20]
      node T_410 = sub(cycleNum_B, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 419:28]
      node T_411 = tail(T_410, 1) @[DivSqrtRecF64_mulAddZ31.scala 419:28]
      node T_412 = mux(cyc_A1, T_408, T_411) @[DivSqrtRecF64_mulAddZ31.scala 417:16]
      cycleNum_B <= T_412 @[DivSqrtRecF64_mulAddZ31.scala 416:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 415:47]
    node T_414 = eq(cycleNum_B, UInt<4>("h0a")) @[DivSqrtRecF64_mulAddZ31.scala 423:33]
    cyc_B10_sqrt <= T_414 @[DivSqrtRecF64_mulAddZ31.scala 423:18]
    node T_416 = eq(cycleNum_B, UInt<4>("h09")) @[DivSqrtRecF64_mulAddZ31.scala 424:33]
    cyc_B9_sqrt <= T_416 @[DivSqrtRecF64_mulAddZ31.scala 424:18]
    node T_418 = eq(cycleNum_B, UInt<4>("h08")) @[DivSqrtRecF64_mulAddZ31.scala 425:33]
    cyc_B8_sqrt <= T_418 @[DivSqrtRecF64_mulAddZ31.scala 425:18]
    node T_420 = eq(cycleNum_B, UInt<3>("h07")) @[DivSqrtRecF64_mulAddZ31.scala 426:33]
    cyc_B7_sqrt <= T_420 @[DivSqrtRecF64_mulAddZ31.scala 426:18]
    node T_422 = eq(cycleNum_B, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 428:27]
    cyc_B6 <= T_422 @[DivSqrtRecF64_mulAddZ31.scala 428:12]
    node T_424 = eq(cycleNum_B, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 429:27]
    cyc_B5 <= T_424 @[DivSqrtRecF64_mulAddZ31.scala 429:12]
    node T_426 = eq(cycleNum_B, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 430:27]
    cyc_B4 <= T_426 @[DivSqrtRecF64_mulAddZ31.scala 430:12]
    node T_428 = eq(cycleNum_B, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 431:27]
    cyc_B3 <= T_428 @[DivSqrtRecF64_mulAddZ31.scala 431:12]
    node T_430 = eq(cycleNum_B, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 432:27]
    cyc_B2 <= T_430 @[DivSqrtRecF64_mulAddZ31.scala 432:12]
    node T_432 = eq(cycleNum_B, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 433:27]
    cyc_B1 <= T_432 @[DivSqrtRecF64_mulAddZ31.scala 433:12]
    node T_433 = and(cyc_B6, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 435:26]
    node T_435 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 435:41]
    node T_436 = and(T_433, T_435) @[DivSqrtRecF64_mulAddZ31.scala 435:38]
    cyc_B6_div <= T_436 @[DivSqrtRecF64_mulAddZ31.scala 435:16]
    node T_437 = and(cyc_B5, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 436:26]
    node T_439 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 436:41]
    node T_440 = and(T_437, T_439) @[DivSqrtRecF64_mulAddZ31.scala 436:38]
    cyc_B5_div <= T_440 @[DivSqrtRecF64_mulAddZ31.scala 436:16]
    node T_441 = and(cyc_B4, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 437:26]
    node T_443 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 437:41]
    node T_444 = and(T_441, T_443) @[DivSqrtRecF64_mulAddZ31.scala 437:38]
    cyc_B4_div <= T_444 @[DivSqrtRecF64_mulAddZ31.scala 437:16]
    node T_446 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 438:29]
    node T_447 = and(cyc_B3, T_446) @[DivSqrtRecF64_mulAddZ31.scala 438:26]
    cyc_B3_div <= T_447 @[DivSqrtRecF64_mulAddZ31.scala 438:16]
    node T_449 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 439:29]
    node T_450 = and(cyc_B2, T_449) @[DivSqrtRecF64_mulAddZ31.scala 439:26]
    cyc_B2_div <= T_450 @[DivSqrtRecF64_mulAddZ31.scala 439:16]
    node T_452 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 440:29]
    node T_453 = and(cyc_B1, T_452) @[DivSqrtRecF64_mulAddZ31.scala 440:26]
    cyc_B1_div <= T_453 @[DivSqrtRecF64_mulAddZ31.scala 440:16]
    node T_454 = and(cyc_B6, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 442:27]
    node T_455 = and(T_454, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 442:39]
    cyc_B6_sqrt <= T_455 @[DivSqrtRecF64_mulAddZ31.scala 442:17]
    node T_456 = and(cyc_B5, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 443:27]
    node T_457 = and(T_456, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 443:39]
    cyc_B5_sqrt <= T_457 @[DivSqrtRecF64_mulAddZ31.scala 443:17]
    node T_458 = and(cyc_B4, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 444:27]
    node T_459 = and(T_458, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 444:39]
    cyc_B4_sqrt <= T_459 @[DivSqrtRecF64_mulAddZ31.scala 444:17]
    node T_460 = and(cyc_B3, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 445:27]
    cyc_B3_sqrt <= T_460 @[DivSqrtRecF64_mulAddZ31.scala 445:17]
    node T_461 = and(cyc_B2, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 446:27]
    cyc_B2_sqrt <= T_461 @[DivSqrtRecF64_mulAddZ31.scala 446:17]
    node T_462 = and(cyc_B1, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 447:27]
    cyc_B1_sqrt <= T_462 @[DivSqrtRecF64_mulAddZ31.scala 447:17]
    node T_464 = neq(cycleNum_C, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 449:33]
    node T_465 = or(cyc_B1, T_464) @[DivSqrtRecF64_mulAddZ31.scala 449:18]
    when T_465 : @[DivSqrtRecF64_mulAddZ31.scala 449:47]
      node T_468 = mux(sqrtOp_PB, UInt<3>("h06"), UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 451:28]
      node T_470 = sub(cycleNum_C, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 451:70]
      node T_471 = tail(T_470, 1) @[DivSqrtRecF64_mulAddZ31.scala 451:70]
      node T_472 = mux(cyc_B1, T_468, T_471) @[DivSqrtRecF64_mulAddZ31.scala 451:16]
      cycleNum_C <= T_472 @[DivSqrtRecF64_mulAddZ31.scala 450:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 449:47]
    node cyc_C6_sqrt = eq(cycleNum_C, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 454:35]
    node T_475 = eq(cycleNum_C, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 456:27]
    cyc_C5 <= T_475 @[DivSqrtRecF64_mulAddZ31.scala 456:12]
    node T_477 = eq(cycleNum_C, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 457:27]
    cyc_C4 <= T_477 @[DivSqrtRecF64_mulAddZ31.scala 457:12]
    node T_479 = eq(cycleNum_C, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 458:27]
    valid_normalCase_leaving_PB <= T_479 @[DivSqrtRecF64_mulAddZ31.scala 458:12]
    node T_481 = eq(cycleNum_C, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 459:27]
    cyc_C2 <= T_481 @[DivSqrtRecF64_mulAddZ31.scala 459:12]
    node T_483 = eq(cycleNum_C, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 460:27]
    cyc_C1 <= T_483 @[DivSqrtRecF64_mulAddZ31.scala 460:12]
    node T_485 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 462:32]
    node cyc_C5_div = and(cyc_C5, T_485) @[DivSqrtRecF64_mulAddZ31.scala 462:29]
    node T_487 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 463:32]
    node cyc_C4_div = and(cyc_C4, T_487) @[DivSqrtRecF64_mulAddZ31.scala 463:29]
    node T_489 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 464:32]
    node cyc_C3_div = and(valid_normalCase_leaving_PB, T_489) @[DivSqrtRecF64_mulAddZ31.scala 464:29]
    node T_491 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 465:32]
    node cyc_C2_div = and(cyc_C2, T_491) @[DivSqrtRecF64_mulAddZ31.scala 465:29]
    node T_493 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 466:32]
    node cyc_C1_div = and(cyc_C1, T_493) @[DivSqrtRecF64_mulAddZ31.scala 466:29]
    node cyc_C5_sqrt = and(cyc_C5, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 468:30]
    node cyc_C4_sqrt = and(cyc_C4, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 469:30]
    node cyc_C3_sqrt = and(valid_normalCase_leaving_PB, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 470:30]
    node cyc_C2_sqrt = and(cyc_C2, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 471:30]
    node cyc_C1_sqrt = and(cyc_C1, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 472:30]
    node T_495 = neq(cycleNum_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 474:33]
    node T_496 = or(cyc_C1, T_495) @[DivSqrtRecF64_mulAddZ31.scala 474:18]
    when T_496 : @[DivSqrtRecF64_mulAddZ31.scala 474:47]
      node T_499 = sub(cycleNum_E, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 475:55]
      node T_500 = tail(T_499, 1) @[DivSqrtRecF64_mulAddZ31.scala 475:55]
      node T_501 = mux(cyc_C1, UInt<3>("h04"), T_500) @[DivSqrtRecF64_mulAddZ31.scala 475:26]
      cycleNum_E <= T_501 @[DivSqrtRecF64_mulAddZ31.scala 475:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 474:47]
    node T_503 = eq(cycleNum_E, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 478:27]
    cyc_E4 <= T_503 @[DivSqrtRecF64_mulAddZ31.scala 478:12]
    node T_505 = eq(cycleNum_E, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 479:27]
    cyc_E3 <= T_505 @[DivSqrtRecF64_mulAddZ31.scala 479:12]
    node T_507 = eq(cycleNum_E, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 480:27]
    cyc_E2 <= T_507 @[DivSqrtRecF64_mulAddZ31.scala 480:12]
    node T_509 = eq(cycleNum_E, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 481:27]
    cyc_E1 <= T_509 @[DivSqrtRecF64_mulAddZ31.scala 481:12]
    node T_511 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 483:32]
    node cyc_E4_div = and(cyc_E4, T_511) @[DivSqrtRecF64_mulAddZ31.scala 483:29]
    node T_513 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 484:32]
    node cyc_E3_div = and(cyc_E3, T_513) @[DivSqrtRecF64_mulAddZ31.scala 484:29]
    node T_515 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 485:32]
    node cyc_E2_div = and(cyc_E2, T_515) @[DivSqrtRecF64_mulAddZ31.scala 485:29]
    node T_517 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 486:32]
    node cyc_E1_div = and(cyc_E1, T_517) @[DivSqrtRecF64_mulAddZ31.scala 486:29]
    node cyc_E4_sqrt = and(cyc_E4, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 488:30]
    node cyc_E3_sqrt = and(cyc_E3, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 489:30]
    node cyc_E2_sqrt = and(cyc_E2, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 490:30]
    node cyc_E1_sqrt = and(cyc_E1, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 491:30]
    node zFractB_A4_div = mux(entering_PA_normalCase_div, fractB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 496:29]
    node T_519 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 498:53]
    node T_521 = eq(T_519, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 498:62]
    node zLinPiece_0_A4_div = and(entering_PA_normalCase_div, T_521) @[DivSqrtRecF64_mulAddZ31.scala 498:41]
    node T_522 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 499:53]
    node T_524 = eq(T_522, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 499:62]
    node zLinPiece_1_A4_div = and(entering_PA_normalCase_div, T_524) @[DivSqrtRecF64_mulAddZ31.scala 499:41]
    node T_525 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 500:53]
    node T_527 = eq(T_525, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 500:62]
    node zLinPiece_2_A4_div = and(entering_PA_normalCase_div, T_527) @[DivSqrtRecF64_mulAddZ31.scala 500:41]
    node T_528 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 501:53]
    node T_530 = eq(T_528, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 501:62]
    node zLinPiece_3_A4_div = and(entering_PA_normalCase_div, T_530) @[DivSqrtRecF64_mulAddZ31.scala 501:41]
    node T_531 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 502:53]
    node T_533 = eq(T_531, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 502:62]
    node zLinPiece_4_A4_div = and(entering_PA_normalCase_div, T_533) @[DivSqrtRecF64_mulAddZ31.scala 502:41]
    node T_534 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 503:53]
    node T_536 = eq(T_534, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 503:62]
    node zLinPiece_5_A4_div = and(entering_PA_normalCase_div, T_536) @[DivSqrtRecF64_mulAddZ31.scala 503:41]
    node T_537 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 504:53]
    node T_539 = eq(T_537, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 504:62]
    node zLinPiece_6_A4_div = and(entering_PA_normalCase_div, T_539) @[DivSqrtRecF64_mulAddZ31.scala 504:41]
    node T_540 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 505:53]
    node T_542 = eq(T_540, UInt<3>("h07")) @[DivSqrtRecF64_mulAddZ31.scala 505:62]
    node zLinPiece_7_A4_div = and(entering_PA_normalCase_div, T_542) @[DivSqrtRecF64_mulAddZ31.scala 505:41]
    node T_545 = mux(zLinPiece_0_A4_div, UInt<9>("h01c7"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 507:12]
    node T_548 = mux(zLinPiece_1_A4_div, UInt<9>("h016c"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 508:12]
    node T_549 = or(T_545, T_548) @[DivSqrtRecF64_mulAddZ31.scala 507:59]
    node T_552 = mux(zLinPiece_2_A4_div, UInt<9>("h012a"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 509:12]
    node T_553 = or(T_549, T_552) @[DivSqrtRecF64_mulAddZ31.scala 508:59]
    node T_556 = mux(zLinPiece_3_A4_div, UInt<9>("h0f8"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 510:12]
    node T_557 = or(T_553, T_556) @[DivSqrtRecF64_mulAddZ31.scala 509:59]
    node T_560 = mux(zLinPiece_4_A4_div, UInt<9>("h0d2"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 511:12]
    node T_561 = or(T_557, T_560) @[DivSqrtRecF64_mulAddZ31.scala 510:59]
    node T_564 = mux(zLinPiece_5_A4_div, UInt<9>("h0b4"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 512:12]
    node T_565 = or(T_561, T_564) @[DivSqrtRecF64_mulAddZ31.scala 511:59]
    node T_568 = mux(zLinPiece_6_A4_div, UInt<9>("h09c"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 513:12]
    node T_569 = or(T_565, T_568) @[DivSqrtRecF64_mulAddZ31.scala 512:59]
    node T_572 = mux(zLinPiece_7_A4_div, UInt<9>("h089"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 514:12]
    node zK1_A4_div = or(T_569, T_572) @[DivSqrtRecF64_mulAddZ31.scala 513:59]
    node T_574 = not(UInt<12>("h0fe3")) @[DivSqrtRecF64_mulAddZ31.scala 516:33]
    node T_576 = mux(zLinPiece_0_A4_div, T_574, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 516:12]
    node T_578 = not(UInt<12>("h0c5d")) @[DivSqrtRecF64_mulAddZ31.scala 517:33]
    node T_580 = mux(zLinPiece_1_A4_div, T_578, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 517:12]
    node T_581 = or(T_576, T_580) @[DivSqrtRecF64_mulAddZ31.scala 516:61]
    node T_583 = not(UInt<12>("h098a")) @[DivSqrtRecF64_mulAddZ31.scala 518:33]
    node T_585 = mux(zLinPiece_2_A4_div, T_583, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 518:12]
    node T_586 = or(T_581, T_585) @[DivSqrtRecF64_mulAddZ31.scala 517:61]
    node T_588 = not(UInt<12>("h0739")) @[DivSqrtRecF64_mulAddZ31.scala 519:33]
    node T_590 = mux(zLinPiece_3_A4_div, T_588, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 519:12]
    node T_591 = or(T_586, T_590) @[DivSqrtRecF64_mulAddZ31.scala 518:61]
    node T_593 = not(UInt<12>("h054b")) @[DivSqrtRecF64_mulAddZ31.scala 520:33]
    node T_595 = mux(zLinPiece_4_A4_div, T_593, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 520:12]
    node T_596 = or(T_591, T_595) @[DivSqrtRecF64_mulAddZ31.scala 519:61]
    node T_598 = not(UInt<12>("h03a9")) @[DivSqrtRecF64_mulAddZ31.scala 521:33]
    node T_600 = mux(zLinPiece_5_A4_div, T_598, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 521:12]
    node T_601 = or(T_596, T_600) @[DivSqrtRecF64_mulAddZ31.scala 520:61]
    node T_603 = not(UInt<12>("h0242")) @[DivSqrtRecF64_mulAddZ31.scala 522:33]
    node T_605 = mux(zLinPiece_6_A4_div, T_603, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 522:12]
    node T_606 = or(T_601, T_605) @[DivSqrtRecF64_mulAddZ31.scala 521:61]
    node T_608 = not(UInt<12>("h010b")) @[DivSqrtRecF64_mulAddZ31.scala 523:33]
    node T_610 = mux(zLinPiece_7_A4_div, T_608, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 523:12]
    node zComplFractK0_A4_div = or(T_606, T_610) @[DivSqrtRecF64_mulAddZ31.scala 522:61]
    node zFractB_A7_sqrt = mux(entering_PA_normalCase_sqrt, fractB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 525:30]
    node T_612 = bits(expB_S, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 527:55]
    node T_614 = eq(T_612, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 527:47]
    node T_615 = and(entering_PA_normalCase_sqrt, T_614) @[DivSqrtRecF64_mulAddZ31.scala 527:44]
    node T_616 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 527:72]
    node T_618 = eq(T_616, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 527:62]
    node zQuadPiece_0_A7_sqrt = and(T_615, T_618) @[DivSqrtRecF64_mulAddZ31.scala 527:59]
    node T_619 = bits(expB_S, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 528:55]
    node T_621 = eq(T_619, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 528:47]
    node T_622 = and(entering_PA_normalCase_sqrt, T_621) @[DivSqrtRecF64_mulAddZ31.scala 528:44]
    node T_623 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 528:72]
    node zQuadPiece_1_A7_sqrt = and(T_622, T_623) @[DivSqrtRecF64_mulAddZ31.scala 528:59]
    node T_624 = bits(expB_S, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 529:55]
    node T_625 = and(entering_PA_normalCase_sqrt, T_624) @[DivSqrtRecF64_mulAddZ31.scala 529:44]
    node T_626 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 529:72]
    node T_628 = eq(T_626, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 529:62]
    node zQuadPiece_2_A7_sqrt = and(T_625, T_628) @[DivSqrtRecF64_mulAddZ31.scala 529:59]
    node T_629 = bits(expB_S, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 530:55]
    node T_630 = and(entering_PA_normalCase_sqrt, T_629) @[DivSqrtRecF64_mulAddZ31.scala 530:44]
    node T_631 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 530:72]
    node zQuadPiece_3_A7_sqrt = and(T_630, T_631) @[DivSqrtRecF64_mulAddZ31.scala 530:59]
    node T_634 = mux(zQuadPiece_0_A7_sqrt, UInt<9>("h01c8"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 532:12]
    node T_637 = mux(zQuadPiece_1_A7_sqrt, UInt<9>("h0c1"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 533:12]
    node T_638 = or(T_634, T_637) @[DivSqrtRecF64_mulAddZ31.scala 532:61]
    node T_641 = mux(zQuadPiece_2_A7_sqrt, UInt<9>("h0143"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 534:12]
    node T_642 = or(T_638, T_641) @[DivSqrtRecF64_mulAddZ31.scala 533:61]
    node T_645 = mux(zQuadPiece_3_A7_sqrt, UInt<9>("h089"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 535:12]
    node zK2_A7_sqrt = or(T_642, T_645) @[DivSqrtRecF64_mulAddZ31.scala 534:61]
    node T_647 = not(UInt<10>("h03d0")) @[DivSqrtRecF64_mulAddZ31.scala 537:35]
    node T_649 = mux(zQuadPiece_0_A7_sqrt, T_647, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 537:12]
    node T_651 = not(UInt<10>("h0220")) @[DivSqrtRecF64_mulAddZ31.scala 538:35]
    node T_653 = mux(zQuadPiece_1_A7_sqrt, T_651, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 538:12]
    node T_654 = or(T_649, T_653) @[DivSqrtRecF64_mulAddZ31.scala 537:63]
    node T_656 = not(UInt<10>("h02b2")) @[DivSqrtRecF64_mulAddZ31.scala 539:35]
    node T_658 = mux(zQuadPiece_2_A7_sqrt, T_656, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 539:12]
    node T_659 = or(T_654, T_658) @[DivSqrtRecF64_mulAddZ31.scala 538:63]
    node T_661 = not(UInt<10>("h0181")) @[DivSqrtRecF64_mulAddZ31.scala 540:35]
    node T_663 = mux(zQuadPiece_3_A7_sqrt, T_661, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 540:12]
    node zComplK1_A7_sqrt = or(T_659, T_663) @[DivSqrtRecF64_mulAddZ31.scala 539:63]
    node T_664 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 542:55]
    node T_666 = eq(T_664, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 542:47]
    node T_667 = and(cyc_A6_sqrt, T_666) @[DivSqrtRecF64_mulAddZ31.scala 542:44]
    node T_668 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 542:71]
    node T_670 = eq(T_668, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 542:62]
    node zQuadPiece_0_A6_sqrt = and(T_667, T_670) @[DivSqrtRecF64_mulAddZ31.scala 542:59]
    node T_671 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 543:55]
    node T_673 = eq(T_671, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 543:47]
    node T_674 = and(cyc_A6_sqrt, T_673) @[DivSqrtRecF64_mulAddZ31.scala 543:44]
    node T_675 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 543:71]
    node zQuadPiece_1_A6_sqrt = and(T_674, T_675) @[DivSqrtRecF64_mulAddZ31.scala 543:59]
    node T_676 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 544:55]
    node T_677 = and(cyc_A6_sqrt, T_676) @[DivSqrtRecF64_mulAddZ31.scala 544:44]
    node T_678 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 544:71]
    node T_680 = eq(T_678, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 544:62]
    node zQuadPiece_2_A6_sqrt = and(T_677, T_680) @[DivSqrtRecF64_mulAddZ31.scala 544:59]
    node T_681 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 545:55]
    node T_682 = and(cyc_A6_sqrt, T_681) @[DivSqrtRecF64_mulAddZ31.scala 545:44]
    node T_683 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 545:71]
    node zQuadPiece_3_A6_sqrt = and(T_682, T_683) @[DivSqrtRecF64_mulAddZ31.scala 545:59]
    node T_685 = not(UInt<13>("h01fe5")) @[DivSqrtRecF64_mulAddZ31.scala 547:35]
    node T_687 = mux(zQuadPiece_0_A6_sqrt, T_685, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 547:12]
    node T_689 = not(UInt<13>("h01435")) @[DivSqrtRecF64_mulAddZ31.scala 548:35]
    node T_691 = mux(zQuadPiece_1_A6_sqrt, T_689, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 548:12]
    node T_692 = or(T_687, T_691) @[DivSqrtRecF64_mulAddZ31.scala 547:64]
    node T_694 = not(UInt<13>("h0d2c")) @[DivSqrtRecF64_mulAddZ31.scala 549:35]
    node T_696 = mux(zQuadPiece_2_A6_sqrt, T_694, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 549:12]
    node T_697 = or(T_692, T_696) @[DivSqrtRecF64_mulAddZ31.scala 548:64]
    node T_699 = not(UInt<13>("h04e8")) @[DivSqrtRecF64_mulAddZ31.scala 550:35]
    node T_701 = mux(zQuadPiece_3_A6_sqrt, T_699, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 550:12]
    node zComplFractK0_A6_sqrt = or(T_697, T_701) @[DivSqrtRecF64_mulAddZ31.scala 549:64]
    node T_702 = bits(zFractB_A4_div, 48, 40) @[DivSqrtRecF64_mulAddZ31.scala 553:23]
    node T_703 = or(T_702, zK2_A7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 553:32]
    node T_705 = eq(cyc_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 554:17]
    node T_707 = mux(T_705, nextMulAdd9A_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 554:16]
    node mulAdd9A_A = or(T_703, T_707) @[DivSqrtRecF64_mulAddZ31.scala 553:46]
    node T_708 = bits(zFractB_A7_sqrt, 50, 42) @[DivSqrtRecF64_mulAddZ31.scala 556:37]
    node T_709 = or(zK1_A4_div, T_708) @[DivSqrtRecF64_mulAddZ31.scala 556:20]
    node T_711 = eq(cyc_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 557:17]
    node T_713 = mux(T_711, nextMulAdd9B_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 557:16]
    node mulAdd9B_A = or(T_709, T_713) @[DivSqrtRecF64_mulAddZ31.scala 556:46]
    node T_714 = bits(entering_PA_normalCase_sqrt, 0, 0) @[Bitwise.scala 33:15]
    node T_717 = mux(T_714, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12]
    node T_718 = cat(zComplK1_A7_sqrt, T_717) @[Cat.scala 20:58]
    node T_719 = bits(cyc_A6_sqrt, 0, 0) @[Bitwise.scala 33:15]
    node T_722 = mux(T_719, UInt<6>("h03f"), UInt<6>("h00")) @[Bitwise.scala 33:12]
    node T_723 = cat(cyc_A6_sqrt, zComplFractK0_A6_sqrt) @[Cat.scala 20:58]
    node T_724 = cat(T_723, T_722) @[Cat.scala 20:58]
    node T_725 = or(T_718, T_724) @[DivSqrtRecF64_mulAddZ31.scala 559:71]
    node T_726 = bits(entering_PA_normalCase_div, 0, 0) @[Bitwise.scala 33:15]
    node T_729 = mux(T_726, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_730 = cat(entering_PA_normalCase_div, zComplFractK0_A4_div) @[Cat.scala 20:58]
    node T_731 = cat(T_730, T_729) @[Cat.scala 20:58]
    node T_732 = or(T_725, T_731) @[DivSqrtRecF64_mulAddZ31.scala 560:71]
    node T_734 = shl(fractR0_A, 10) @[DivSqrtRecF64_mulAddZ31.scala 563:54]
    node T_735 = add(UInt<20>("h040000"), T_734) @[DivSqrtRecF64_mulAddZ31.scala 563:42]
    node T_736 = tail(T_735, 1) @[DivSqrtRecF64_mulAddZ31.scala 563:42]
    node T_738 = mux(cyc_A5_sqrt, T_736, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 563:12]
    node T_739 = or(T_732, T_738) @[DivSqrtRecF64_mulAddZ31.scala 561:71]
    node T_740 = bits(hiSqrR0_A_sqrt, 9, 9) @[DivSqrtRecF64_mulAddZ31.scala 564:44]
    node T_742 = eq(T_740, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 564:28]
    node T_743 = and(cyc_A4_sqrt, T_742) @[DivSqrtRecF64_mulAddZ31.scala 564:25]
    node T_746 = mux(T_743, UInt<11>("h0400"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 564:12]
    node T_747 = or(T_739, T_746) @[DivSqrtRecF64_mulAddZ31.scala 563:70]
    node T_748 = bits(hiSqrR0_A_sqrt, 9, 9) @[DivSqrtRecF64_mulAddZ31.scala 565:43]
    node T_749 = and(cyc_A4_sqrt, T_748) @[DivSqrtRecF64_mulAddZ31.scala 565:26]
    node T_750 = or(T_749, cyc_A3_div) @[DivSqrtRecF64_mulAddZ31.scala 565:48]
    node T_751 = bits(sigB_PA, 46, 26) @[DivSqrtRecF64_mulAddZ31.scala 566:20]
    node T_753 = add(T_751, UInt<11>("h0400")) @[DivSqrtRecF64_mulAddZ31.scala 566:29]
    node T_754 = tail(T_753, 1) @[DivSqrtRecF64_mulAddZ31.scala 566:29]
    node T_756 = mux(T_750, T_754, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 565:12]
    node T_757 = or(T_747, T_756) @[DivSqrtRecF64_mulAddZ31.scala 564:71]
    node T_758 = or(cyc_A3_sqrt, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 569:25]
    node T_760 = mux(T_758, partNegSigma0_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 569:12]
    node T_761 = or(T_757, T_760) @[DivSqrtRecF64_mulAddZ31.scala 568:11]
    node T_762 = shl(fractR0_A, 16) @[DivSqrtRecF64_mulAddZ31.scala 570:45]
    node T_764 = mux(cyc_A1_sqrt, T_762, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 570:12]
    node T_765 = or(T_761, T_764) @[DivSqrtRecF64_mulAddZ31.scala 569:62]
    node T_766 = shl(fractR0_A, 15) @[DivSqrtRecF64_mulAddZ31.scala 571:45]
    node T_768 = mux(cyc_A1_div, T_766, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 571:12]
    node mulAdd9C_A = or(T_765, T_768) @[DivSqrtRecF64_mulAddZ31.scala 570:62]
    node T_769 = mul(mulAdd9A_A, mulAdd9B_A) @[DivSqrtRecF64_mulAddZ31.scala 573:20]
    node T_771 = bits(mulAdd9C_A, 17, 0) @[DivSqrtRecF64_mulAddZ31.scala 573:61]
    node T_772 = cat(UInt<1>("h00"), T_771) @[Cat.scala 20:58]
    node T_773 = add(T_769, T_772) @[DivSqrtRecF64_mulAddZ31.scala 573:33]
    node loMulAdd9Out_A = tail(T_773, 1) @[DivSqrtRecF64_mulAddZ31.scala 573:33]
    node T_774 = bits(loMulAdd9Out_A, 18, 18) @[DivSqrtRecF64_mulAddZ31.scala 575:31]
    node T_775 = bits(mulAdd9C_A, 24, 18) @[DivSqrtRecF64_mulAddZ31.scala 576:27]
    node T_777 = add(T_775, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 576:36]
    node T_778 = tail(T_777, 1) @[DivSqrtRecF64_mulAddZ31.scala 576:36]
    node T_779 = bits(mulAdd9C_A, 24, 18) @[DivSqrtRecF64_mulAddZ31.scala 577:27]
    node T_780 = mux(T_774, T_778, T_779) @[DivSqrtRecF64_mulAddZ31.scala 575:16]
    node T_781 = bits(loMulAdd9Out_A, 17, 0) @[DivSqrtRecF64_mulAddZ31.scala 579:27]
    node mulAdd9Out_A = cat(T_780, T_781) @[Cat.scala 20:58]
    node T_782 = bits(mulAdd9Out_A, 19, 19) @[DivSqrtRecF64_mulAddZ31.scala 583:40]
    node T_783 = and(cyc_A6_sqrt, T_782) @[DivSqrtRecF64_mulAddZ31.scala 583:25]
    node T_784 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 584:13]
    node T_785 = shr(T_784, 10) @[DivSqrtRecF64_mulAddZ31.scala 584:26]
    node T_787 = mux(T_783, T_785, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 583:12]
    node zFractR0_A6_sqrt = bits(T_787, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 586:10]
    node T_788 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 590:35]
    node T_789 = shl(mulAdd9Out_A, 1) @[DivSqrtRecF64_mulAddZ31.scala 590:52]
    node sqrR0_A5_sqrt = mux(T_788, T_789, mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 590:28]
    node T_790 = bits(mulAdd9Out_A, 20, 20) @[DivSqrtRecF64_mulAddZ31.scala 592:39]
    node T_791 = and(entering_PA_normalCase_div, T_790) @[DivSqrtRecF64_mulAddZ31.scala 592:24]
    node T_792 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 593:13]
    node T_793 = shr(T_792, 11) @[DivSqrtRecF64_mulAddZ31.scala 593:26]
    node T_795 = mux(T_791, T_793, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 592:12]
    node zFractR0_A4_div = bits(T_795, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 595:10]
    node T_796 = bits(mulAdd9Out_A, 11, 11) @[DivSqrtRecF64_mulAddZ31.scala 598:35]
    node T_797 = and(cyc_A2, T_796) @[DivSqrtRecF64_mulAddZ31.scala 598:20]
    node T_798 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 598:41]
    node T_799 = shr(T_798, 2) @[DivSqrtRecF64_mulAddZ31.scala 598:54]
    node T_801 = mux(T_797, T_799, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 598:12]
    node zSigma0_A2 = bits(T_801, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 598:67]
    node T_802 = shr(mulAdd9Out_A, 10) @[DivSqrtRecF64_mulAddZ31.scala 601:36]
    node T_803 = shr(mulAdd9Out_A, 9) @[DivSqrtRecF64_mulAddZ31.scala 601:54]
    node T_804 = mux(sqrtOp_PA, T_802, T_803) @[DivSqrtRecF64_mulAddZ31.scala 601:12]
    node fractR1_A1 = bits(T_804, 14, 0) @[DivSqrtRecF64_mulAddZ31.scala 601:58]
    node r1_A1 = cat(UInt<1>("h01"), fractR1_A1) @[Cat.scala 20:58]
    node T_806 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 603:33]
    node T_807 = shl(r1_A1, 1) @[DivSqrtRecF64_mulAddZ31.scala 603:43]
    node ER1_A1_sqrt = mux(T_806, T_807, r1_A1) @[DivSqrtRecF64_mulAddZ31.scala 603:26]
    node T_808 = or(cyc_A6_sqrt, entering_PA_normalCase_div) @[DivSqrtRecF64_mulAddZ31.scala 605:23]
    when T_808 : @[DivSqrtRecF64_mulAddZ31.scala 605:38]
      node T_809 = or(zFractR0_A6_sqrt, zFractR0_A4_div) @[DivSqrtRecF64_mulAddZ31.scala 606:39]
      fractR0_A <= T_809 @[DivSqrtRecF64_mulAddZ31.scala 606:19]
      skip @[DivSqrtRecF64_mulAddZ31.scala 605:38]
    when cyc_A5_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 609:24]
      node T_810 = shr(sqrR0_A5_sqrt, 10) @[DivSqrtRecF64_mulAddZ31.scala 610:40]
      hiSqrR0_A_sqrt <= T_810 @[DivSqrtRecF64_mulAddZ31.scala 610:24]
      skip @[DivSqrtRecF64_mulAddZ31.scala 609:24]
    node T_811 = or(cyc_A4_sqrt, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 613:23]
    when T_811 : @[DivSqrtRecF64_mulAddZ31.scala 613:34]
      node T_812 = shr(mulAdd9Out_A, 9) @[DivSqrtRecF64_mulAddZ31.scala 616:56]
      node T_813 = mux(cyc_A4_sqrt, mulAdd9Out_A, T_812) @[DivSqrtRecF64_mulAddZ31.scala 616:16]
      node T_814 = bits(T_813, 20, 0) @[DivSqrtRecF64_mulAddZ31.scala 616:60]
      partNegSigma0_A <= T_814 @[DivSqrtRecF64_mulAddZ31.scala 615:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 613:34]
    node T_815 = or(entering_PA_normalCase_sqrt, cyc_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 620:21]
    node T_816 = or(T_815, cyc_A5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 620:36]
    node T_817 = or(T_816, cyc_A4) @[DivSqrtRecF64_mulAddZ31.scala 620:51]
    node T_818 = or(T_817, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 620:61]
    node T_819 = or(T_818, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 620:71]
    when T_819 : @[DivSqrtRecF64_mulAddZ31.scala 621:7]
      node T_820 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 623:40]
      node T_821 = shr(T_820, 11) @[DivSqrtRecF64_mulAddZ31.scala 623:53]
      node T_823 = mux(entering_PA_normalCase_sqrt, T_821, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 623:16]
      node T_824 = or(T_823, zFractR0_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 623:68]
      node T_825 = bits(sigB_PA, 43, 35) @[DivSqrtRecF64_mulAddZ31.scala 625:47]
      node T_827 = mux(cyc_A4_sqrt, T_825, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 625:16]
      node T_828 = or(T_824, T_827) @[DivSqrtRecF64_mulAddZ31.scala 624:68]
      node T_829 = bits(zFractB_A4_div, 43, 35) @[DivSqrtRecF64_mulAddZ31.scala 626:27]
      node T_830 = or(T_828, T_829) @[DivSqrtRecF64_mulAddZ31.scala 625:68]
      node T_831 = or(cyc_A5_sqrt, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 627:29]
      node T_832 = bits(sigB_PA, 52, 44) @[DivSqrtRecF64_mulAddZ31.scala 627:47]
      node T_834 = mux(T_831, T_832, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 627:16]
      node T_835 = or(T_830, T_834) @[DivSqrtRecF64_mulAddZ31.scala 626:68]
      node T_836 = or(T_835, zSigma0_A2) @[DivSqrtRecF64_mulAddZ31.scala 627:68]
      nextMulAdd9A_A <= T_836 @[DivSqrtRecF64_mulAddZ31.scala 622:24]
      skip @[DivSqrtRecF64_mulAddZ31.scala 621:7]
    node T_837 = or(entering_PA_normalCase_sqrt, cyc_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 630:23]
    node T_838 = or(T_837, cyc_A5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 630:38]
    node T_839 = or(T_838, cyc_A4) @[DivSqrtRecF64_mulAddZ31.scala 630:53]
    node T_840 = or(T_839, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 630:63]
    when T_840 : @[DivSqrtRecF64_mulAddZ31.scala 630:74]
      node T_841 = bits(zFractB_A7_sqrt, 50, 42) @[DivSqrtRecF64_mulAddZ31.scala 632:28]
      node T_842 = or(T_841, zFractR0_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 632:73]
      node T_843 = bits(sqrR0_A5_sqrt, 9, 1) @[DivSqrtRecF64_mulAddZ31.scala 634:43]
      node T_845 = mux(cyc_A5_sqrt, T_843, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 634:16]
      node T_846 = or(T_842, T_845) @[DivSqrtRecF64_mulAddZ31.scala 633:73]
      node T_847 = or(T_846, zFractR0_A4_div) @[DivSqrtRecF64_mulAddZ31.scala 634:73]
      node T_848 = bits(hiSqrR0_A_sqrt, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 636:44]
      node T_850 = mux(cyc_A4_sqrt, T_848, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 636:16]
      node T_851 = or(T_847, T_850) @[DivSqrtRecF64_mulAddZ31.scala 635:73]
      node T_853 = bits(fractR0_A, 8, 1) @[DivSqrtRecF64_mulAddZ31.scala 637:55]
      node T_854 = cat(UInt<1>("h01"), T_853) @[Cat.scala 20:58]
      node T_856 = mux(cyc_A2, T_854, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 637:16]
      node T_857 = or(T_851, T_856) @[DivSqrtRecF64_mulAddZ31.scala 636:73]
      nextMulAdd9B_A <= T_857 @[DivSqrtRecF64_mulAddZ31.scala 631:24]
      skip @[DivSqrtRecF64_mulAddZ31.scala 630:74]
    when cyc_A1_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 640:24]
      ER1_B_sqrt <= ER1_A1_sqrt @[DivSqrtRecF64_mulAddZ31.scala 641:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 640:24]
    node T_858 = or(cyc_A1, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 647:16]
    node T_859 = or(T_858, cyc_B6_div) @[DivSqrtRecF64_mulAddZ31.scala 647:31]
    node T_860 = or(T_859, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 647:45]
    node T_861 = or(T_860, cyc_B3) @[DivSqrtRecF64_mulAddZ31.scala 647:55]
    node T_862 = or(T_861, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 647:65]
    node T_863 = or(T_862, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 648:25]
    node T_864 = or(T_863, cyc_C1) @[DivSqrtRecF64_mulAddZ31.scala 648:35]
    io.latchMulAddA_0 <= T_864 @[DivSqrtRecF64_mulAddZ31.scala 646:23]
    node T_865 = shl(ER1_A1_sqrt, 36) @[DivSqrtRecF64_mulAddZ31.scala 650:51]
    node T_867 = mux(cyc_A1_sqrt, T_865, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 650:12]
    node T_868 = or(cyc_B7_sqrt, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 651:25]
    node T_870 = mux(T_868, sigB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 651:12]
    node T_871 = or(T_867, T_870) @[DivSqrtRecF64_mulAddZ31.scala 650:67]
    node T_873 = mux(cyc_B6_div, sigA_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 652:12]
    node T_874 = or(T_871, T_873) @[DivSqrtRecF64_mulAddZ31.scala 651:67]
    node T_875 = bits(zSigma1_B4, 45, 12) @[DivSqrtRecF64_mulAddZ31.scala 653:19]
    node T_876 = or(T_874, T_875) @[DivSqrtRecF64_mulAddZ31.scala 652:67]
    node T_877 = or(cyc_B3, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 655:20]
    node T_878 = bits(sigXNU_B3_CX, 57, 12) @[DivSqrtRecF64_mulAddZ31.scala 655:48]
    node T_880 = mux(T_877, T_878, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 655:12]
    node T_881 = or(T_876, T_880) @[DivSqrtRecF64_mulAddZ31.scala 653:67]
    node T_882 = bits(sigXN_C, 57, 25) @[DivSqrtRecF64_mulAddZ31.scala 656:43]
    node T_883 = shl(T_882, 13) @[DivSqrtRecF64_mulAddZ31.scala 656:51]
    node T_885 = mux(cyc_C4_div, T_883, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 656:12]
    node T_886 = or(T_881, T_885) @[DivSqrtRecF64_mulAddZ31.scala 655:67]
    node T_887 = shl(u_C_sqrt, 15) @[DivSqrtRecF64_mulAddZ31.scala 657:44]
    node T_889 = mux(cyc_C4_sqrt, T_887, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 657:12]
    node T_890 = or(T_886, T_889) @[DivSqrtRecF64_mulAddZ31.scala 656:67]
    node T_892 = mux(cyc_C1_div, sigB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 658:12]
    node T_893 = or(T_890, T_892) @[DivSqrtRecF64_mulAddZ31.scala 657:67]
    node T_894 = or(T_893, zComplSigT_C1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 658:67]
    io.mulAddA_0 <= T_894 @[DivSqrtRecF64_mulAddZ31.scala 649:18]
    node T_895 = or(cyc_A1, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 661:16]
    node T_896 = or(T_895, cyc_B6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 661:31]
    node T_897 = or(T_896, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 661:46]
    node T_898 = or(T_897, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 661:56]
    node T_899 = or(T_898, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 662:25]
    node T_900 = or(T_899, cyc_C1) @[DivSqrtRecF64_mulAddZ31.scala 662:35]
    io.latchMulAddB_0 <= T_900 @[DivSqrtRecF64_mulAddZ31.scala 660:23]
    node T_901 = shl(r1_A1, 36) @[DivSqrtRecF64_mulAddZ31.scala 664:31]
    node T_903 = mux(cyc_A1, T_901, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 664:12]
    node T_904 = shl(ESqrR1_B_sqrt, 19) @[DivSqrtRecF64_mulAddZ31.scala 665:39]
    node T_906 = mux(cyc_B7_sqrt, T_904, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 665:12]
    node T_907 = or(T_903, T_906) @[DivSqrtRecF64_mulAddZ31.scala 664:55]
    node T_908 = shl(ER1_B_sqrt, 36) @[DivSqrtRecF64_mulAddZ31.scala 666:36]
    node T_910 = mux(cyc_B6_sqrt, T_908, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 666:12]
    node T_911 = or(T_907, T_910) @[DivSqrtRecF64_mulAddZ31.scala 665:55]
    node T_912 = or(T_911, zSigma1_B4) @[DivSqrtRecF64_mulAddZ31.scala 666:55]
    node T_913 = bits(sqrSigma1_C, 30, 1) @[DivSqrtRecF64_mulAddZ31.scala 668:37]
    node T_915 = mux(cyc_C6_sqrt, T_913, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 668:12]
    node T_916 = or(T_912, T_915) @[DivSqrtRecF64_mulAddZ31.scala 667:55]
    node T_918 = mux(cyc_C4, sqrSigma1_C, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 669:12]
    node T_919 = or(T_916, T_918) @[DivSqrtRecF64_mulAddZ31.scala 668:55]
    node T_920 = or(T_919, zComplSigT_C1) @[DivSqrtRecF64_mulAddZ31.scala 669:55]
    io.mulAddB_0 <= T_920 @[DivSqrtRecF64_mulAddZ31.scala 663:18]
    node T_921 = or(cyc_A4, cyc_A3_div) @[DivSqrtRecF64_mulAddZ31.scala 672:20]
    node T_922 = or(T_921, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 672:34]
    node T_923 = or(T_922, cyc_B10_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 672:48]
    node T_924 = or(T_923, cyc_B9_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 673:30]
    node T_925 = or(T_924, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 673:45]
    node T_926 = or(T_925, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 673:60]
    node T_927 = or(T_926, cyc_B5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 673:70]
    node T_928 = or(T_927, cyc_B3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 674:29]
    node T_929 = or(T_928, cyc_B2_div) @[DivSqrtRecF64_mulAddZ31.scala 674:44]
    node T_930 = or(T_929, cyc_B1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 674:58]
    node T_931 = or(T_930, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 674:73]
    node T_932 = or(cyc_A3, cyc_A2_div) @[DivSqrtRecF64_mulAddZ31.scala 676:20]
    node T_933 = or(T_932, cyc_B9_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 676:34]
    node T_934 = or(T_933, cyc_B8_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 677:29]
    node T_935 = or(T_934, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 677:44]
    node T_936 = or(T_935, cyc_B5) @[DivSqrtRecF64_mulAddZ31.scala 677:54]
    node T_937 = or(T_936, cyc_B4_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 677:64]
    node T_938 = or(T_937, cyc_B2_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 678:29]
    node T_939 = or(T_938, cyc_B1_div) @[DivSqrtRecF64_mulAddZ31.scala 678:44]
    node T_940 = or(T_939, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 678:58]
    node T_941 = or(T_940, valid_normalCase_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 678:73]
    node T_942 = or(cyc_A2, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 680:20]
    node T_943 = or(T_942, cyc_B8_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 680:34]
    node T_944 = or(T_943, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 681:29]
    node T_945 = or(T_944, cyc_B5) @[DivSqrtRecF64_mulAddZ31.scala 681:44]
    node T_946 = or(T_945, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 681:54]
    node T_947 = or(T_946, cyc_B3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 681:64]
    node T_948 = or(T_947, cyc_B1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 682:29]
    node T_949 = or(T_948, cyc_C5) @[DivSqrtRecF64_mulAddZ31.scala 682:44]
    node T_950 = or(T_949, cyc_C2) @[DivSqrtRecF64_mulAddZ31.scala 682:54]
    node T_951 = or(io.latchMulAddA_0, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 684:31]
    node T_952 = or(T_951, cyc_B2_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 684:41]
    node T_953 = cat(T_950, T_952) @[Cat.scala 20:58]
    node T_954 = cat(T_931, T_941) @[Cat.scala 20:58]
    node T_955 = cat(T_954, T_953) @[Cat.scala 20:58]
    io.usingMulAdd <= T_955 @[DivSqrtRecF64_mulAddZ31.scala 671:20]
    node T_956 = shl(sigX1_B, 47) @[DivSqrtRecF64_mulAddZ31.scala 688:45]
    node T_958 = mux(cyc_B1, T_956, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 688:12]
    node T_959 = shl(sigX1_B, 46) @[DivSqrtRecF64_mulAddZ31.scala 689:45]
    node T_961 = mux(cyc_C6_sqrt, T_959, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 689:12]
    node T_962 = or(T_958, T_961) @[DivSqrtRecF64_mulAddZ31.scala 688:64]
    node T_963 = or(cyc_C4_sqrt, cyc_C2) @[DivSqrtRecF64_mulAddZ31.scala 690:25]
    node T_964 = shl(sigXN_C, 47) @[DivSqrtRecF64_mulAddZ31.scala 690:45]
    node T_966 = mux(T_963, T_964, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 690:12]
    node T_967 = or(T_962, T_966) @[DivSqrtRecF64_mulAddZ31.scala 689:64]
    node T_969 = eq(E_E_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 691:27]
    node T_970 = and(cyc_E3_div, T_969) @[DivSqrtRecF64_mulAddZ31.scala 691:24]
    node T_971 = shl(fractA_0_PC, 53) @[DivSqrtRecF64_mulAddZ31.scala 691:49]
    node T_973 = mux(T_970, T_971, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 691:12]
    node T_974 = or(T_967, T_973) @[DivSqrtRecF64_mulAddZ31.scala 690:64]
    node T_975 = bits(exp_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 693:24]
    node T_976 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 694:29]
    node T_978 = cat(T_976, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_979 = bits(sigB_PC, 1, 1) @[DivSqrtRecF64_mulAddZ31.scala 695:29]
    node T_980 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 695:42]
    node T_981 = xor(T_979, T_980) @[DivSqrtRecF64_mulAddZ31.scala 695:33]
    node T_982 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 695:54]
    node T_983 = cat(T_981, T_982) @[Cat.scala 20:58]
    node T_984 = mux(T_975, T_978, T_983) @[DivSqrtRecF64_mulAddZ31.scala 693:17]
    node T_986 = eq(extraT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 696:22]
    node T_988 = cat(T_986, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_989 = xor(T_984, T_988) @[DivSqrtRecF64_mulAddZ31.scala 696:16]
    node T_990 = shl(T_989, 54) @[DivSqrtRecF64_mulAddZ31.scala 697:14]
    node T_992 = mux(cyc_E3_sqrt, T_990, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 692:12]
    node T_993 = or(T_974, T_992) @[DivSqrtRecF64_mulAddZ31.scala 691:64]
    io.mulAddC_2 <= T_993 @[DivSqrtRecF64_mulAddZ31.scala 687:18]
    node ESqrR1_B8_sqrt = bits(io.mulAddResult_3, 103, 72) @[DivSqrtRecF64_mulAddZ31.scala 701:43]
    node T_994 = bits(io.mulAddResult_3, 90, 45) @[DivSqrtRecF64_mulAddZ31.scala 702:49]
    node T_995 = not(T_994) @[DivSqrtRecF64_mulAddZ31.scala 702:31]
    node T_997 = mux(cyc_B4, T_995, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 702:22]
    zSigma1_B4 <= T_997 @[DivSqrtRecF64_mulAddZ31.scala 702:16]
    node sqrSigma1_B1 = bits(io.mulAddResult_3, 79, 47) @[DivSqrtRecF64_mulAddZ31.scala 703:41]
    node T_998 = bits(io.mulAddResult_3, 104, 47) @[DivSqrtRecF64_mulAddZ31.scala 704:38]
    sigXNU_B3_CX <= T_998 @[DivSqrtRecF64_mulAddZ31.scala 704:18]
    node T_999 = bits(io.mulAddResult_3, 104, 104) @[DivSqrtRecF64_mulAddZ31.scala 705:39]
    node E_C1_div = eq(T_999, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 705:20]
    node T_1002 = eq(E_C1_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 707:28]
    node T_1003 = and(cyc_C1_div, T_1002) @[DivSqrtRecF64_mulAddZ31.scala 707:25]
    node T_1004 = or(T_1003, cyc_C1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 707:40]
    node T_1005 = bits(io.mulAddResult_3, 104, 51) @[DivSqrtRecF64_mulAddZ31.scala 708:31]
    node T_1006 = not(T_1005) @[DivSqrtRecF64_mulAddZ31.scala 708:13]
    node T_1008 = mux(T_1004, T_1006, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 707:12]
    node T_1009 = and(cyc_C1_div, E_C1_div) @[DivSqrtRecF64_mulAddZ31.scala 711:24]
    node T_1011 = bits(io.mulAddResult_3, 102, 50) @[DivSqrtRecF64_mulAddZ31.scala 712:47]
    node T_1012 = not(T_1011) @[DivSqrtRecF64_mulAddZ31.scala 712:29]
    node T_1013 = cat(UInt<1>("h00"), T_1012) @[Cat.scala 20:58]
    node T_1015 = mux(T_1009, T_1013, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 711:12]
    node T_1016 = or(T_1008, T_1015) @[DivSqrtRecF64_mulAddZ31.scala 710:11]
    zComplSigT_C1 <= T_1016 @[DivSqrtRecF64_mulAddZ31.scala 706:19]
    node T_1017 = bits(io.mulAddResult_3, 104, 51) @[DivSqrtRecF64_mulAddZ31.scala 716:44]
    node T_1018 = not(T_1017) @[DivSqrtRecF64_mulAddZ31.scala 716:26]
    node T_1020 = mux(cyc_C1_sqrt, T_1018, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 716:12]
    zComplSigT_C1_sqrt <= T_1020 @[DivSqrtRecF64_mulAddZ31.scala 715:24]
    node sigT_C1 = not(zComplSigT_C1) @[DivSqrtRecF64_mulAddZ31.scala 720:19]
    node remT_E2 = bits(io.mulAddResult_3, 55, 0) @[DivSqrtRecF64_mulAddZ31.scala 721:36]
    when cyc_B8_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 723:24]
      ESqrR1_B_sqrt <= ESqrR1_B8_sqrt @[DivSqrtRecF64_mulAddZ31.scala 724:23]
      skip @[DivSqrtRecF64_mulAddZ31.scala 723:24]
    when cyc_B3 : @[DivSqrtRecF64_mulAddZ31.scala 726:19]
      sigX1_B <= sigXNU_B3_CX @[DivSqrtRecF64_mulAddZ31.scala 727:17]
      skip @[DivSqrtRecF64_mulAddZ31.scala 726:19]
    when cyc_B1 : @[DivSqrtRecF64_mulAddZ31.scala 729:19]
      sqrSigma1_C <= sqrSigma1_B1 @[DivSqrtRecF64_mulAddZ31.scala 730:21]
      skip @[DivSqrtRecF64_mulAddZ31.scala 729:19]
    node T_1021 = or(cyc_C6_sqrt, cyc_C5_div) @[DivSqrtRecF64_mulAddZ31.scala 733:23]
    node T_1022 = or(T_1021, cyc_C3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 733:37]
    when T_1022 : @[DivSqrtRecF64_mulAddZ31.scala 733:53]
      sigXN_C <= sigXNU_B3_CX @[DivSqrtRecF64_mulAddZ31.scala 734:17]
      skip @[DivSqrtRecF64_mulAddZ31.scala 733:53]
    when cyc_C5_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 736:24]
      node T_1023 = bits(sigXNU_B3_CX, 56, 26) @[DivSqrtRecF64_mulAddZ31.scala 737:33]
      u_C_sqrt <= T_1023 @[DivSqrtRecF64_mulAddZ31.scala 737:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 736:24]
    when cyc_C1 : @[DivSqrtRecF64_mulAddZ31.scala 739:19]
      E_E_div <= E_C1_div @[DivSqrtRecF64_mulAddZ31.scala 740:18]
      node T_1024 = bits(sigT_C1, 53, 1) @[DivSqrtRecF64_mulAddZ31.scala 741:28]
      sigT_E <= T_1024 @[DivSqrtRecF64_mulAddZ31.scala 741:18]
      node T_1025 = bits(sigT_C1, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 742:28]
      extraT_E <= T_1025 @[DivSqrtRecF64_mulAddZ31.scala 742:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 739:19]
    when cyc_E2 : @[DivSqrtRecF64_mulAddZ31.scala 745:19]
      node T_1026 = bits(remT_E2, 55, 55) @[DivSqrtRecF64_mulAddZ31.scala 746:47]
      node T_1027 = bits(remT_E2, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 746:61]
      node T_1028 = mux(sqrtOp_PC, T_1026, T_1027) @[DivSqrtRecF64_mulAddZ31.scala 746:27]
      isNegRemT_E <= T_1028 @[DivSqrtRecF64_mulAddZ31.scala 746:21]
      node T_1029 = bits(remT_E2, 53, 0) @[DivSqrtRecF64_mulAddZ31.scala 748:21]
      node T_1031 = eq(T_1029, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 748:29]
      node T_1033 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 749:18]
      node T_1034 = bits(remT_E2, 55, 54) @[DivSqrtRecF64_mulAddZ31.scala 749:41]
      node T_1036 = eq(T_1034, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 749:50]
      node T_1037 = or(T_1033, T_1036) @[DivSqrtRecF64_mulAddZ31.scala 749:30]
      node T_1038 = and(T_1031, T_1037) @[DivSqrtRecF64_mulAddZ31.scala 748:42]
      trueEqX_E1 <= T_1038 @[DivSqrtRecF64_mulAddZ31.scala 747:22]
      skip @[DivSqrtRecF64_mulAddZ31.scala 745:19]
    node T_1040 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 755:13]
    node T_1041 = and(T_1040, E_E_div) @[DivSqrtRecF64_mulAddZ31.scala 755:25]
    node T_1043 = mux(T_1041, exp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 755:12]
    node T_1045 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 756:13]
    node T_1047 = eq(E_E_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 756:28]
    node T_1048 = and(T_1045, T_1047) @[DivSqrtRecF64_mulAddZ31.scala 756:25]
    node T_1050 = mux(T_1048, expP1_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 756:12]
    node T_1051 = or(T_1043, T_1050) @[DivSqrtRecF64_mulAddZ31.scala 755:76]
    node T_1052 = shr(exp_PC, 1) @[DivSqrtRecF64_mulAddZ31.scala 757:42]
    node T_1054 = add(T_1052, UInt<12>("h0400")) @[DivSqrtRecF64_mulAddZ31.scala 757:47]
    node T_1055 = tail(T_1054, 1) @[DivSqrtRecF64_mulAddZ31.scala 757:47]
    node T_1057 = mux(sqrtOp_PC, T_1055, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 757:12]
    node sExpX_E = or(T_1051, T_1057) @[DivSqrtRecF64_mulAddZ31.scala 756:76]
    node posExpX_E = bits(sExpX_E, 12, 0) @[DivSqrtRecF64_mulAddZ31.scala 759:28]
    node T_1058 = not(posExpX_E) @[primitives.scala 50:21]
    node T_1059 = bits(T_1058, 12, 12) @[primitives.scala 56:25]
    node T_1060 = bits(T_1058, 11, 0) @[primitives.scala 57:26]
    node T_1061 = bits(T_1060, 11, 11) @[primitives.scala 56:25]
    node T_1062 = bits(T_1060, 10, 0) @[primitives.scala 57:26]
    node T_1063 = bits(T_1062, 10, 10) @[primitives.scala 56:25]
    node T_1064 = bits(T_1062, 9, 0) @[primitives.scala 57:26]
    node T_1065 = bits(T_1064, 9, 9) @[primitives.scala 56:25]
    node T_1066 = bits(T_1064, 8, 0) @[primitives.scala 57:26]
    node T_1068 = bits(T_1066, 8, 8) @[primitives.scala 56:25]
    node T_1069 = bits(T_1066, 7, 0) @[primitives.scala 57:26]
    node T_1071 = bits(T_1069, 7, 7) @[primitives.scala 56:25]
    node T_1072 = bits(T_1069, 6, 0) @[primitives.scala 57:26]
    node T_1074 = bits(T_1072, 6, 6) @[primitives.scala 56:25]
    node T_1075 = bits(T_1072, 5, 0) @[primitives.scala 57:26]
    node T_1078 = dshr(asSInt(UInt<65>("h010000000000000000")), T_1075) @[primitives.scala 68:52]
    node T_1079 = bits(T_1078, 63, 14) @[primitives.scala 69:26]
    node T_1080 = bits(T_1079, 31, 0) @[Bitwise.scala 65:18]
    node T_1083 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 58:47]
    node T_1084 = xor(UInt<32>("h0ffffffff"), T_1083) @[Bitwise.scala 58:21]
    node T_1085 = shr(T_1080, 16) @[Bitwise.scala 59:21]
    node T_1086 = and(T_1085, T_1084) @[Bitwise.scala 59:31]
    node T_1087 = bits(T_1080, 15, 0) @[Bitwise.scala 59:46]
    node T_1088 = shl(T_1087, 16) @[Bitwise.scala 59:65]
    node T_1089 = not(T_1084) @[Bitwise.scala 59:77]
    node T_1090 = and(T_1088, T_1089) @[Bitwise.scala 59:75]
    node T_1091 = or(T_1086, T_1090) @[Bitwise.scala 59:39]
    node T_1092 = bits(T_1084, 23, 0) @[Bitwise.scala 58:28]
    node T_1093 = shl(T_1092, 8) @[Bitwise.scala 58:47]
    node T_1094 = xor(T_1084, T_1093) @[Bitwise.scala 58:21]
    node T_1095 = shr(T_1091, 8) @[Bitwise.scala 59:21]
    node T_1096 = and(T_1095, T_1094) @[Bitwise.scala 59:31]
    node T_1097 = bits(T_1091, 23, 0) @[Bitwise.scala 59:46]
    node T_1098 = shl(T_1097, 8) @[Bitwise.scala 59:65]
    node T_1099 = not(T_1094) @[Bitwise.scala 59:77]
    node T_1100 = and(T_1098, T_1099) @[Bitwise.scala 59:75]
    node T_1101 = or(T_1096, T_1100) @[Bitwise.scala 59:39]
    node T_1102 = bits(T_1094, 27, 0) @[Bitwise.scala 58:28]
    node T_1103 = shl(T_1102, 4) @[Bitwise.scala 58:47]
    node T_1104 = xor(T_1094, T_1103) @[Bitwise.scala 58:21]
    node T_1105 = shr(T_1101, 4) @[Bitwise.scala 59:21]
    node T_1106 = and(T_1105, T_1104) @[Bitwise.scala 59:31]
    node T_1107 = bits(T_1101, 27, 0) @[Bitwise.scala 59:46]
    node T_1108 = shl(T_1107, 4) @[Bitwise.scala 59:65]
    node T_1109 = not(T_1104) @[Bitwise.scala 59:77]
    node T_1110 = and(T_1108, T_1109) @[Bitwise.scala 59:75]
    node T_1111 = or(T_1106, T_1110) @[Bitwise.scala 59:39]
    node T_1112 = bits(T_1104, 29, 0) @[Bitwise.scala 58:28]
    node T_1113 = shl(T_1112, 2) @[Bitwise.scala 58:47]
    node T_1114 = xor(T_1104, T_1113) @[Bitwise.scala 58:21]
    node T_1115 = shr(T_1111, 2) @[Bitwise.scala 59:21]
    node T_1116 = and(T_1115, T_1114) @[Bitwise.scala 59:31]
    node T_1117 = bits(T_1111, 29, 0) @[Bitwise.scala 59:46]
    node T_1118 = shl(T_1117, 2) @[Bitwise.scala 59:65]
    node T_1119 = not(T_1114) @[Bitwise.scala 59:77]
    node T_1120 = and(T_1118, T_1119) @[Bitwise.scala 59:75]
    node T_1121 = or(T_1116, T_1120) @[Bitwise.scala 59:39]
    node T_1122 = bits(T_1114, 30, 0) @[Bitwise.scala 58:28]
    node T_1123 = shl(T_1122, 1) @[Bitwise.scala 58:47]
    node T_1124 = xor(T_1114, T_1123) @[Bitwise.scala 58:21]
    node T_1125 = shr(T_1121, 1) @[Bitwise.scala 59:21]
    node T_1126 = and(T_1125, T_1124) @[Bitwise.scala 59:31]
    node T_1127 = bits(T_1121, 30, 0) @[Bitwise.scala 59:46]
    node T_1128 = shl(T_1127, 1) @[Bitwise.scala 59:65]
    node T_1129 = not(T_1124) @[Bitwise.scala 59:77]
    node T_1130 = and(T_1128, T_1129) @[Bitwise.scala 59:75]
    node T_1131 = or(T_1126, T_1130) @[Bitwise.scala 59:39]
    node T_1132 = bits(T_1079, 49, 32) @[Bitwise.scala 65:44]
    node T_1133 = bits(T_1132, 15, 0) @[Bitwise.scala 65:18]
    node T_1136 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47]
    node T_1137 = xor(UInt<16>("h0ffff"), T_1136) @[Bitwise.scala 58:21]
    node T_1138 = shr(T_1133, 8) @[Bitwise.scala 59:21]
    node T_1139 = and(T_1138, T_1137) @[Bitwise.scala 59:31]
    node T_1140 = bits(T_1133, 7, 0) @[Bitwise.scala 59:46]
    node T_1141 = shl(T_1140, 8) @[Bitwise.scala 59:65]
    node T_1142 = not(T_1137) @[Bitwise.scala 59:77]
    node T_1143 = and(T_1141, T_1142) @[Bitwise.scala 59:75]
    node T_1144 = or(T_1139, T_1143) @[Bitwise.scala 59:39]
    node T_1145 = bits(T_1137, 11, 0) @[Bitwise.scala 58:28]
    node T_1146 = shl(T_1145, 4) @[Bitwise.scala 58:47]
    node T_1147 = xor(T_1137, T_1146) @[Bitwise.scala 58:21]
    node T_1148 = shr(T_1144, 4) @[Bitwise.scala 59:21]
    node T_1149 = and(T_1148, T_1147) @[Bitwise.scala 59:31]
    node T_1150 = bits(T_1144, 11, 0) @[Bitwise.scala 59:46]
    node T_1151 = shl(T_1150, 4) @[Bitwise.scala 59:65]
    node T_1152 = not(T_1147) @[Bitwise.scala 59:77]
    node T_1153 = and(T_1151, T_1152) @[Bitwise.scala 59:75]
    node T_1154 = or(T_1149, T_1153) @[Bitwise.scala 59:39]
    node T_1155 = bits(T_1147, 13, 0) @[Bitwise.scala 58:28]
    node T_1156 = shl(T_1155, 2) @[Bitwise.scala 58:47]
    node T_1157 = xor(T_1147, T_1156) @[Bitwise.scala 58:21]
    node T_1158 = shr(T_1154, 2) @[Bitwise.scala 59:21]
    node T_1159 = and(T_1158, T_1157) @[Bitwise.scala 59:31]
    node T_1160 = bits(T_1154, 13, 0) @[Bitwise.scala 59:46]
    node T_1161 = shl(T_1160, 2) @[Bitwise.scala 59:65]
    node T_1162 = not(T_1157) @[Bitwise.scala 59:77]
    node T_1163 = and(T_1161, T_1162) @[Bitwise.scala 59:75]
    node T_1164 = or(T_1159, T_1163) @[Bitwise.scala 59:39]
    node T_1165 = bits(T_1157, 14, 0) @[Bitwise.scala 58:28]
    node T_1166 = shl(T_1165, 1) @[Bitwise.scala 58:47]
    node T_1167 = xor(T_1157, T_1166) @[Bitwise.scala 58:21]
    node T_1168 = shr(T_1164, 1) @[Bitwise.scala 59:21]
    node T_1169 = and(T_1168, T_1167) @[Bitwise.scala 59:31]
    node T_1170 = bits(T_1164, 14, 0) @[Bitwise.scala 59:46]
    node T_1171 = shl(T_1170, 1) @[Bitwise.scala 59:65]
    node T_1172 = not(T_1167) @[Bitwise.scala 59:77]
    node T_1173 = and(T_1171, T_1172) @[Bitwise.scala 59:75]
    node T_1174 = or(T_1169, T_1173) @[Bitwise.scala 59:39]
    node T_1175 = bits(T_1132, 17, 16) @[Bitwise.scala 65:44]
    node T_1176 = bits(T_1175, 0, 0) @[Bitwise.scala 65:18]
    node T_1177 = bits(T_1175, 1, 1) @[Bitwise.scala 65:44]
    node T_1178 = cat(T_1176, T_1177) @[Cat.scala 20:58]
    node T_1179 = cat(T_1174, T_1178) @[Cat.scala 20:58]
    node T_1180 = cat(T_1131, T_1179) @[Cat.scala 20:58]
    node T_1181 = not(T_1180) @[primitives.scala 65:36]
    node T_1182 = mux(T_1074, UInt<1>("h00"), T_1181) @[primitives.scala 65:21]
    node T_1183 = not(T_1182) @[primitives.scala 65:17]
    node T_1184 = not(T_1183) @[primitives.scala 65:36]
    node T_1185 = mux(T_1071, UInt<1>("h00"), T_1184) @[primitives.scala 65:21]
    node T_1186 = not(T_1185) @[primitives.scala 65:17]
    node T_1187 = not(T_1186) @[primitives.scala 65:36]
    node T_1188 = mux(T_1068, UInt<1>("h00"), T_1187) @[primitives.scala 65:21]
    node T_1189 = not(T_1188) @[primitives.scala 65:17]
    node T_1190 = not(T_1189) @[primitives.scala 65:36]
    node T_1191 = mux(T_1065, UInt<1>("h00"), T_1190) @[primitives.scala 65:21]
    node T_1192 = not(T_1191) @[primitives.scala 65:17]
    node T_1194 = cat(T_1192, UInt<3>("h07")) @[Cat.scala 20:58]
    node T_1195 = bits(T_1064, 9, 9) @[primitives.scala 56:25]
    node T_1196 = bits(T_1064, 8, 0) @[primitives.scala 57:26]
    node T_1197 = bits(T_1196, 8, 8) @[primitives.scala 56:25]
    node T_1198 = bits(T_1196, 7, 0) @[primitives.scala 57:26]
    node T_1199 = bits(T_1198, 7, 7) @[primitives.scala 56:25]
    node T_1200 = bits(T_1198, 6, 0) @[primitives.scala 57:26]
    node T_1201 = bits(T_1200, 6, 6) @[primitives.scala 56:25]
    node T_1202 = bits(T_1200, 5, 0) @[primitives.scala 57:26]
    node T_1204 = dshr(asSInt(UInt<65>("h010000000000000000")), T_1202) @[primitives.scala 68:52]
    node T_1205 = bits(T_1204, 2, 0) @[primitives.scala 69:26]
    node T_1206 = bits(T_1205, 1, 0) @[Bitwise.scala 65:18]
    node T_1207 = bits(T_1206, 0, 0) @[Bitwise.scala 65:18]
    node T_1208 = bits(T_1206, 1, 1) @[Bitwise.scala 65:44]
    node T_1209 = cat(T_1207, T_1208) @[Cat.scala 20:58]
    node T_1210 = bits(T_1205, 2, 2) @[Bitwise.scala 65:44]
    node T_1211 = cat(T_1209, T_1210) @[Cat.scala 20:58]
    node T_1213 = mux(T_1201, T_1211, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_1215 = mux(T_1199, T_1213, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_1217 = mux(T_1197, T_1215, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_1219 = mux(T_1195, T_1217, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_1220 = mux(T_1063, T_1194, T_1219) @[primitives.scala 61:20]
    node T_1222 = mux(T_1061, T_1220, UInt<1>("h00")) @[primitives.scala 59:20]
    node roundMask_E = mux(T_1059, T_1222, UInt<1>("h00")) @[primitives.scala 59:20]
    node T_1225 = cat(UInt<1>("h00"), roundMask_E) @[Cat.scala 20:58]
    node T_1226 = not(T_1225) @[DivSqrtRecF64_mulAddZ31.scala 763:9]
    node T_1228 = cat(roundMask_E, UInt<1>("h01")) @[Cat.scala 20:58]
    node incrPosMask_E = and(T_1226, T_1228) @[DivSqrtRecF64_mulAddZ31.scala 763:39]
    node T_1229 = shr(incrPosMask_E, 1) @[DivSqrtRecF64_mulAddZ31.scala 765:51]
    node T_1230 = and(sigT_E, T_1229) @[DivSqrtRecF64_mulAddZ31.scala 765:36]
    node hiRoundPosBitT_E = neq(T_1230, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 765:56]
    node T_1232 = shr(roundMask_E, 1) @[DivSqrtRecF64_mulAddZ31.scala 766:55]
    node T_1233 = and(sigT_E, T_1232) @[DivSqrtRecF64_mulAddZ31.scala 766:42]
    node all0sHiRoundExtraT_E = eq(T_1233, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 766:60]
    node T_1235 = not(sigT_E) @[DivSqrtRecF64_mulAddZ31.scala 767:34]
    node T_1236 = shr(roundMask_E, 1) @[DivSqrtRecF64_mulAddZ31.scala 767:55]
    node T_1237 = and(T_1235, T_1236) @[DivSqrtRecF64_mulAddZ31.scala 767:42]
    node all1sHiRoundExtraT_E = eq(T_1237, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 767:60]
    node T_1239 = bits(roundMask_E, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 769:23]
    node T_1241 = eq(T_1239, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 769:10]
    node T_1242 = or(T_1241, hiRoundPosBitT_E) @[DivSqrtRecF64_mulAddZ31.scala 769:27]
    node all1sHiRoundT_E = and(T_1242, all1sHiRoundExtraT_E) @[DivSqrtRecF64_mulAddZ31.scala 769:48]
    node T_1244 = add(UInt<54>("h00"), sigT_E) @[DivSqrtRecF64_mulAddZ31.scala 773:33]
    node T_1245 = tail(T_1244, 1) @[DivSqrtRecF64_mulAddZ31.scala 773:33]
    node T_1246 = add(T_1245, roundMagUp_PC) @[DivSqrtRecF64_mulAddZ31.scala 773:42]
    node sigAdjT_E = tail(T_1246, 1) @[DivSqrtRecF64_mulAddZ31.scala 773:42]
    node T_1248 = not(roundMask_E) @[DivSqrtRecF64_mulAddZ31.scala 774:47]
    node T_1249 = cat(UInt<1>("h01"), T_1248) @[Cat.scala 20:58]
    node sigY0_E = and(sigAdjT_E, T_1249) @[DivSqrtRecF64_mulAddZ31.scala 774:29]
    node T_1251 = cat(UInt<1>("h00"), roundMask_E) @[Cat.scala 20:58]
    node T_1252 = or(sigAdjT_E, T_1251) @[DivSqrtRecF64_mulAddZ31.scala 775:30]
    node T_1254 = add(T_1252, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 775:62]
    node sigY1_E = tail(T_1254, 1) @[DivSqrtRecF64_mulAddZ31.scala 775:62]
    node T_1256 = eq(isNegRemT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 783:24]
    node T_1258 = eq(trueEqX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 783:41]
    node T_1259 = and(T_1256, T_1258) @[DivSqrtRecF64_mulAddZ31.scala 783:38]
    node trueLtX_E1 = mux(sqrtOp_PC, T_1259, isNegRemT_E) @[DivSqrtRecF64_mulAddZ31.scala 783:12]
    node T_1260 = bits(roundMask_E, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 793:25]
    node T_1262 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 793:32]
    node T_1263 = and(T_1260, T_1262) @[DivSqrtRecF64_mulAddZ31.scala 793:29]
    node T_1264 = and(T_1263, all1sHiRoundExtraT_E) @[DivSqrtRecF64_mulAddZ31.scala 793:45]
    node T_1265 = and(T_1264, extraT_E) @[DivSqrtRecF64_mulAddZ31.scala 793:69]
    node hiRoundPosBit_E1 = xor(hiRoundPosBitT_E, T_1265) @[DivSqrtRecF64_mulAddZ31.scala 792:26]
    node T_1267 = eq(trueEqX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 795:28]
    node T_1269 = eq(extraT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 795:44]
    node T_1270 = or(T_1267, T_1269) @[DivSqrtRecF64_mulAddZ31.scala 795:41]
    node T_1272 = eq(all1sHiRoundExtraT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 795:58]
    node anyRoundExtra_E1 = or(T_1270, T_1272) @[DivSqrtRecF64_mulAddZ31.scala 795:55]
    node T_1273 = and(roundingMode_near_even_PC, hiRoundPosBit_E1) @[DivSqrtRecF64_mulAddZ31.scala 797:39]
    node T_1275 = eq(anyRoundExtra_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 798:17]
    node T_1276 = and(T_1273, T_1275) @[DivSqrtRecF64_mulAddZ31.scala 797:59]
    node roundEvenMask_E1 = mux(T_1276, incrPosMask_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 797:12]
    node T_1278 = and(roundMagDown_PC, extraT_E) @[DivSqrtRecF64_mulAddZ31.scala 804:30]
    node T_1280 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 804:45]
    node T_1281 = and(T_1278, T_1280) @[DivSqrtRecF64_mulAddZ31.scala 804:42]
    node T_1282 = and(T_1281, all1sHiRoundT_E) @[DivSqrtRecF64_mulAddZ31.scala 804:58]
    node T_1284 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 806:32]
    node T_1285 = and(extraT_E, T_1284) @[DivSqrtRecF64_mulAddZ31.scala 806:29]
    node T_1287 = eq(trueEqX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 806:48]
    node T_1288 = and(T_1285, T_1287) @[DivSqrtRecF64_mulAddZ31.scala 806:45]
    node T_1290 = eq(all1sHiRoundT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 807:23]
    node T_1291 = or(T_1288, T_1290) @[DivSqrtRecF64_mulAddZ31.scala 806:62]
    node T_1292 = and(roundMagUp_PC, T_1291) @[DivSqrtRecF64_mulAddZ31.scala 805:28]
    node T_1293 = or(T_1282, T_1292) @[DivSqrtRecF64_mulAddZ31.scala 804:78]
    node T_1295 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 810:37]
    node T_1296 = or(extraT_E, T_1295) @[DivSqrtRecF64_mulAddZ31.scala 810:34]
    node T_1297 = bits(roundMask_E, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 810:67]
    node T_1299 = eq(T_1297, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 810:54]
    node T_1300 = and(T_1296, T_1299) @[DivSqrtRecF64_mulAddZ31.scala 810:51]
    node T_1301 = or(hiRoundPosBitT_E, T_1300) @[DivSqrtRecF64_mulAddZ31.scala 809:36]
    node T_1303 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 811:36]
    node T_1304 = and(extraT_E, T_1303) @[DivSqrtRecF64_mulAddZ31.scala 811:33]
    node T_1305 = and(T_1304, all1sHiRoundExtraT_E) @[DivSqrtRecF64_mulAddZ31.scala 811:49]
    node T_1306 = or(T_1301, T_1305) @[DivSqrtRecF64_mulAddZ31.scala 810:72]
    node T_1307 = and(roundingMode_near_even_PC, T_1306) @[DivSqrtRecF64_mulAddZ31.scala 808:40]
    node T_1308 = or(T_1293, T_1307) @[DivSqrtRecF64_mulAddZ31.scala 807:43]
    node T_1309 = mux(T_1308, sigY1_E, sigY0_E) @[DivSqrtRecF64_mulAddZ31.scala 804:12]
    node T_1310 = not(roundEvenMask_E1) @[DivSqrtRecF64_mulAddZ31.scala 814:13]
    node sigY_E1 = and(T_1309, T_1310) @[DivSqrtRecF64_mulAddZ31.scala 814:11]
    node fractY_E1 = bits(sigY_E1, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 815:28]
    node inexactY_E1 = or(hiRoundPosBit_E1, anyRoundExtra_E1) @[DivSqrtRecF64_mulAddZ31.scala 816:40]
    node T_1311 = bits(sigY_E1, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 818:22]
    node T_1313 = eq(T_1311, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 818:13]
    node T_1315 = mux(T_1313, sExpX_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 818:12]
    node T_1316 = bits(sigY_E1, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 819:20]
    node T_1318 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 819:28]
    node T_1319 = and(T_1316, T_1318) @[DivSqrtRecF64_mulAddZ31.scala 819:25]
    node T_1320 = and(T_1319, E_E_div) @[DivSqrtRecF64_mulAddZ31.scala 819:40]
    node T_1322 = mux(T_1320, expP1_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 819:12]
    node T_1323 = or(T_1315, T_1322) @[DivSqrtRecF64_mulAddZ31.scala 818:73]
    node T_1324 = bits(sigY_E1, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 820:20]
    node T_1326 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 820:28]
    node T_1327 = and(T_1324, T_1326) @[DivSqrtRecF64_mulAddZ31.scala 820:25]
    node T_1329 = eq(E_E_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 820:43]
    node T_1330 = and(T_1327, T_1329) @[DivSqrtRecF64_mulAddZ31.scala 820:40]
    node T_1332 = mux(T_1330, expP2_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 820:12]
    node T_1333 = or(T_1323, T_1332) @[DivSqrtRecF64_mulAddZ31.scala 819:73]
    node T_1334 = bits(sigY_E1, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 821:20]
    node T_1335 = and(T_1334, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 821:25]
    node T_1336 = shr(expP2_PC, 1) @[DivSqrtRecF64_mulAddZ31.scala 822:22]
    node T_1338 = add(T_1336, UInt<12>("h0400")) @[DivSqrtRecF64_mulAddZ31.scala 822:27]
    node T_1339 = tail(T_1338, 1) @[DivSqrtRecF64_mulAddZ31.scala 822:27]
    node T_1341 = mux(T_1335, T_1339, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 821:12]
    node sExpY_E1 = or(T_1333, T_1341) @[DivSqrtRecF64_mulAddZ31.scala 820:73]
    node expY_E1 = bits(sExpY_E1, 11, 0) @[DivSqrtRecF64_mulAddZ31.scala 825:27]
    node T_1342 = bits(sExpY_E1, 13, 13) @[DivSqrtRecF64_mulAddZ31.scala 827:34]
    node T_1344 = eq(T_1342, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 827:24]
    node T_1346 = bits(sExpY_E1, 12, 10) @[DivSqrtRecF64_mulAddZ31.scala 827:70]
    node T_1347 = leq(UInt<3>("h03"), T_1346) @[DivSqrtRecF64_mulAddZ31.scala 827:59]
    node overflowY_E1 = and(T_1344, T_1347) @[DivSqrtRecF64_mulAddZ31.scala 827:39]
    node T_1348 = bits(sExpY_E1, 13, 13) @[DivSqrtRecF64_mulAddZ31.scala 830:17]
    node T_1349 = bits(sExpY_E1, 12, 0) @[DivSqrtRecF64_mulAddZ31.scala 830:34]
    node T_1351 = lt(T_1349, UInt<13>("h03ce")) @[DivSqrtRecF64_mulAddZ31.scala 830:42]
    node totalUnderflowY_E1 = or(T_1348, T_1351) @[DivSqrtRecF64_mulAddZ31.scala 830:22]
    node T_1353 = leq(posExpX_E, UInt<13>("h0401")) @[DivSqrtRecF64_mulAddZ31.scala 833:25]
    node T_1354 = and(T_1353, inexactY_E1) @[DivSqrtRecF64_mulAddZ31.scala 833:56]
    node underflowY_E1 = or(totalUnderflowY_E1, T_1354) @[DivSqrtRecF64_mulAddZ31.scala 832:28]
    node T_1356 = eq(isNaNB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 839:13]
    node T_1358 = eq(isZeroB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 839:28]
    node T_1359 = and(T_1356, T_1358) @[DivSqrtRecF64_mulAddZ31.scala 839:25]
    node T_1360 = and(T_1359, sign_PC) @[DivSqrtRecF64_mulAddZ31.scala 839:41]
    node T_1361 = and(isZeroA_PC, isZeroB_PC) @[DivSqrtRecF64_mulAddZ31.scala 840:25]
    node T_1362 = and(isInfA_PC, isInfB_PC) @[DivSqrtRecF64_mulAddZ31.scala 840:54]
    node T_1363 = or(T_1361, T_1362) @[DivSqrtRecF64_mulAddZ31.scala 840:40]
    node notSigNaN_invalid_PC = mux(sqrtOp_PC, T_1360, T_1363) @[DivSqrtRecF64_mulAddZ31.scala 838:12]
    node T_1365 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 843:10]
    node T_1366 = and(T_1365, isSigNaNA_PC) @[DivSqrtRecF64_mulAddZ31.scala 843:22]
    node T_1367 = or(T_1366, isSigNaNB_PC) @[DivSqrtRecF64_mulAddZ31.scala 843:39]
    node invalid_PC = or(T_1367, notSigNaN_invalid_PC) @[DivSqrtRecF64_mulAddZ31.scala 843:55]
    node T_1369 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 845:9]
    node T_1371 = eq(isSpecialA_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 845:24]
    node T_1372 = and(T_1369, T_1371) @[DivSqrtRecF64_mulAddZ31.scala 845:21]
    node T_1374 = eq(isZeroA_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 845:43]
    node T_1375 = and(T_1372, T_1374) @[DivSqrtRecF64_mulAddZ31.scala 845:40]
    node infinity_PC = and(T_1375, isZeroB_PC) @[DivSqrtRecF64_mulAddZ31.scala 845:56]
    node overflow_E1 = and(normalCase_PC, overflowY_E1) @[DivSqrtRecF64_mulAddZ31.scala 847:37]
    node underflow_E1 = and(normalCase_PC, underflowY_E1) @[DivSqrtRecF64_mulAddZ31.scala 848:38]
    node T_1376 = or(overflow_E1, underflow_E1) @[DivSqrtRecF64_mulAddZ31.scala 852:21]
    node T_1377 = and(normalCase_PC, inexactY_E1) @[DivSqrtRecF64_mulAddZ31.scala 852:55]
    node inexact_E1 = or(T_1376, T_1377) @[DivSqrtRecF64_mulAddZ31.scala 852:37]
    node T_1378 = or(isZeroA_PC, isInfB_PC) @[DivSqrtRecF64_mulAddZ31.scala 857:24]
    node T_1380 = eq(roundMagUp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 857:63]
    node T_1381 = and(totalUnderflowY_E1, T_1380) @[DivSqrtRecF64_mulAddZ31.scala 857:60]
    node T_1382 = or(T_1378, T_1381) @[DivSqrtRecF64_mulAddZ31.scala 857:37]
    node notSpecial_isZeroOut_E1 = mux(sqrtOp_PC, isZeroB_PC, T_1382) @[DivSqrtRecF64_mulAddZ31.scala 855:12]
    node T_1383 = and(normalCase_PC, totalUnderflowY_E1) @[DivSqrtRecF64_mulAddZ31.scala 860:23]
    node pegMinFiniteMagOut_E1 = and(T_1383, roundMagUp_PC) @[DivSqrtRecF64_mulAddZ31.scala 860:45]
    node T_1385 = eq(overflowY_roundMagUp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 861:48]
    node pegMaxFiniteMagOut_E1 = and(overflow_E1, T_1385) @[DivSqrtRecF64_mulAddZ31.scala 861:45]
    node T_1386 = or(isInfA_PC, isZeroB_PC) @[DivSqrtRecF64_mulAddZ31.scala 865:23]
    node T_1387 = and(overflow_E1, overflowY_roundMagUp_PC) @[DivSqrtRecF64_mulAddZ31.scala 865:53]
    node T_1388 = or(T_1386, T_1387) @[DivSqrtRecF64_mulAddZ31.scala 865:37]
    node notNaN_isInfOut_E1 = mux(sqrtOp_PC, isInfB_PC, T_1388) @[DivSqrtRecF64_mulAddZ31.scala 863:12]
    node T_1390 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 868:10]
    node T_1391 = and(T_1390, isNaNA_PC) @[DivSqrtRecF64_mulAddZ31.scala 868:22]
    node T_1392 = or(T_1391, isNaNB_PC) @[DivSqrtRecF64_mulAddZ31.scala 868:36]
    node isNaNOut_PC = or(T_1392, notSigNaN_invalid_PC) @[DivSqrtRecF64_mulAddZ31.scala 868:49]
    node T_1394 = eq(isNaNOut_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 871:9]
    node T_1395 = and(isZeroB_PC, sign_PC) @[DivSqrtRecF64_mulAddZ31.scala 871:52]
    node T_1396 = mux(sqrtOp_PC, T_1395, sign_PC) @[DivSqrtRecF64_mulAddZ31.scala 871:29]
    node signOut_PC = and(T_1394, T_1396) @[DivSqrtRecF64_mulAddZ31.scala 871:23]
    node T_1398 = not(UInt<12>("h01ff")) @[DivSqrtRecF64_mulAddZ31.scala 875:19]
    node T_1400 = mux(notSpecial_isZeroOut_E1, T_1398, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 874:18]
    node T_1401 = not(T_1400) @[DivSqrtRecF64_mulAddZ31.scala 874:14]
    node T_1402 = and(expY_E1, T_1401) @[DivSqrtRecF64_mulAddZ31.scala 873:18]
    node T_1404 = not(UInt<12>("h03ce")) @[DivSqrtRecF64_mulAddZ31.scala 879:19]
    node T_1406 = mux(pegMinFiniteMagOut_E1, T_1404, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 878:18]
    node T_1407 = not(T_1406) @[DivSqrtRecF64_mulAddZ31.scala 878:14]
    node T_1408 = and(T_1402, T_1407) @[DivSqrtRecF64_mulAddZ31.scala 877:16]
    node T_1410 = not(UInt<12>("h0bff")) @[DivSqrtRecF64_mulAddZ31.scala 883:19]
    node T_1412 = mux(pegMaxFiniteMagOut_E1, T_1410, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 882:18]
    node T_1413 = not(T_1412) @[DivSqrtRecF64_mulAddZ31.scala 882:14]
    node T_1414 = and(T_1408, T_1413) @[DivSqrtRecF64_mulAddZ31.scala 881:16]
    node T_1416 = not(UInt<12>("h0dff")) @[DivSqrtRecF64_mulAddZ31.scala 887:19]
    node T_1418 = mux(notNaN_isInfOut_E1, T_1416, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 886:18]
    node T_1419 = not(T_1418) @[DivSqrtRecF64_mulAddZ31.scala 886:14]
    node T_1420 = and(T_1414, T_1419) @[DivSqrtRecF64_mulAddZ31.scala 885:16]
    node T_1423 = mux(pegMinFiniteMagOut_E1, UInt<12>("h03ce"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 890:16]
    node T_1424 = or(T_1420, T_1423) @[DivSqrtRecF64_mulAddZ31.scala 889:17]
    node T_1427 = mux(pegMaxFiniteMagOut_E1, UInt<12>("h0bff"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 891:16]
    node T_1428 = or(T_1424, T_1427) @[DivSqrtRecF64_mulAddZ31.scala 890:76]
    node T_1431 = mux(notNaN_isInfOut_E1, UInt<12>("h0c00"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 892:16]
    node T_1432 = or(T_1428, T_1431) @[DivSqrtRecF64_mulAddZ31.scala 891:76]
    node T_1435 = mux(isNaNOut_PC, UInt<12>("h0e00"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 893:16]
    node expOut_E1 = or(T_1432, T_1435) @[DivSqrtRecF64_mulAddZ31.scala 892:76]
    node T_1436 = or(notSpecial_isZeroOut_E1, totalUnderflowY_E1) @[DivSqrtRecF64_mulAddZ31.scala 895:37]
    node T_1437 = or(T_1436, isNaNOut_PC) @[DivSqrtRecF64_mulAddZ31.scala 895:59]
    node T_1439 = shl(UInt<1>("h01"), 51) @[DivSqrtRecF64_mulAddZ31.scala 896:37]
    node T_1441 = mux(isNaNOut_PC, T_1439, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 896:16]
    node T_1442 = mux(T_1437, T_1441, fractY_E1) @[DivSqrtRecF64_mulAddZ31.scala 895:12]
    node T_1443 = bits(pegMaxFiniteMagOut_E1, 0, 0) @[Bitwise.scala 33:15]
    node T_1446 = mux(T_1443, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 33:12]
    node fractOut_E1 = or(T_1442, T_1446) @[DivSqrtRecF64_mulAddZ31.scala 898:11]
    node T_1447 = cat(signOut_PC, expOut_E1) @[Cat.scala 20:58]
    node T_1448 = cat(T_1447, fractOut_E1) @[Cat.scala 20:58]
    io.out <= T_1448 @[DivSqrtRecF64_mulAddZ31.scala 900:12]
    node T_1449 = cat(underflow_E1, inexact_E1) @[Cat.scala 20:58]
    node T_1450 = cat(invalid_PC, infinity_PC) @[Cat.scala 20:58]
    node T_1451 = cat(T_1450, overflow_E1) @[Cat.scala 20:58]
    node T_1452 = cat(T_1451, T_1449) @[Cat.scala 20:58]
    io.exceptionFlags <= T_1452 @[DivSqrtRecF64_mulAddZ31.scala 902:23]
    
  module Mul54 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip val_s0 : UInt<1>, flip latch_a_s0 : UInt<1>, flip a_s0 : UInt<54>, flip latch_b_s0 : UInt<1>, flip b_s0 : UInt<54>, flip c_s2 : UInt<105>, result_s3 : UInt<105>}
    
    io is invalid
    reg val_s1 : UInt<1>, clk
    reg val_s2 : UInt<1>, clk
    reg reg_a_s1 : UInt<54>, clk
    reg reg_b_s1 : UInt<54>, clk
    reg reg_a_s2 : UInt<54>, clk
    reg reg_b_s2 : UInt<54>, clk
    reg reg_result_s3 : UInt<105>, clk
    val_s1 <= io.val_s0 @[DivSqrtRecF64.scala 104:12]
    val_s2 <= val_s1 @[DivSqrtRecF64.scala 105:12]
    when io.val_s0 : @[DivSqrtRecF64.scala 107:22]
      when io.latch_a_s0 : @[DivSqrtRecF64.scala 108:30]
        reg_a_s1 <= io.a_s0 @[DivSqrtRecF64.scala 109:22]
        skip @[DivSqrtRecF64.scala 108:30]
      when io.latch_b_s0 : @[DivSqrtRecF64.scala 111:30]
        reg_b_s1 <= io.b_s0 @[DivSqrtRecF64.scala 112:22]
        skip @[DivSqrtRecF64.scala 111:30]
      skip @[DivSqrtRecF64.scala 107:22]
    when val_s1 : @[DivSqrtRecF64.scala 116:19]
      reg_a_s2 <= reg_a_s1 @[DivSqrtRecF64.scala 117:18]
      reg_b_s2 <= reg_b_s1 @[DivSqrtRecF64.scala 118:18]
      skip @[DivSqrtRecF64.scala 116:19]
    when val_s2 : @[DivSqrtRecF64.scala 121:19]
      node T_14 = mul(reg_a_s2, reg_b_s2) @[DivSqrtRecF64.scala 122:36]
      node T_15 = bits(T_14, 104, 0) @[DivSqrtRecF64.scala 122:47]
      node T_16 = add(T_15, io.c_s2) @[DivSqrtRecF64.scala 122:55]
      node T_17 = tail(T_16, 1) @[DivSqrtRecF64.scala 122:55]
      reg_result_s3 <= T_17 @[DivSqrtRecF64.scala 122:23]
      skip @[DivSqrtRecF64.scala 121:19]
    io.result_s3 <= reg_result_s3 @[DivSqrtRecF64.scala 125:18]
    
  module DivSqrtRecF64 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inReady_div : UInt<1>, inReady_sqrt : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<65>, flip b : UInt<65>, flip roundingMode : UInt<2>, outValid_div : UInt<1>, outValid_sqrt : UInt<1>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    inst ds of DivSqrtRecF64_mulAddZ31 @[DivSqrtRecF64.scala 59:20]
    ds.io is invalid
    ds.clk <= clk
    ds.reset <= reset
    io.inReady_div <= ds.io.inReady_div @[DivSqrtRecF64.scala 61:20]
    io.inReady_sqrt <= ds.io.inReady_sqrt @[DivSqrtRecF64.scala 62:21]
    ds.io.inValid <= io.inValid @[DivSqrtRecF64.scala 63:19]
    ds.io.sqrtOp <= io.sqrtOp @[DivSqrtRecF64.scala 64:18]
    ds.io.a <= io.a @[DivSqrtRecF64.scala 65:13]
    ds.io.b <= io.b @[DivSqrtRecF64.scala 66:13]
    ds.io.roundingMode <= io.roundingMode @[DivSqrtRecF64.scala 67:24]
    io.outValid_div <= ds.io.outValid_div @[DivSqrtRecF64.scala 68:21]
    io.outValid_sqrt <= ds.io.outValid_sqrt @[DivSqrtRecF64.scala 69:22]
    io.out <= ds.io.out @[DivSqrtRecF64.scala 70:12]
    io.exceptionFlags <= ds.io.exceptionFlags @[DivSqrtRecF64.scala 71:23]
    inst mul of Mul54 @[DivSqrtRecF64.scala 73:21]
    mul.io is invalid
    mul.clk <= clk
    mul.reset <= reset
    node T_11 = bits(ds.io.usingMulAdd, 0, 0) @[DivSqrtRecF64.scala 75:39]
    mul.io.val_s0 <= T_11 @[DivSqrtRecF64.scala 75:19]
    mul.io.latch_a_s0 <= ds.io.latchMulAddA_0 @[DivSqrtRecF64.scala 76:23]
    mul.io.a_s0 <= ds.io.mulAddA_0 @[DivSqrtRecF64.scala 77:17]
    mul.io.latch_b_s0 <= ds.io.latchMulAddB_0 @[DivSqrtRecF64.scala 78:23]
    mul.io.b_s0 <= ds.io.mulAddB_0 @[DivSqrtRecF64.scala 79:17]
    mul.io.c_s2 <= ds.io.mulAddC_2 @[DivSqrtRecF64.scala 80:17]
    ds.io.mulAddResult_3 <= mul.io.result_s3 @[DivSqrtRecF64.scala 81:26]
    
  module RecFNToRecFN_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<65>, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_4 = bits(io.in, 63, 52) @[rawFNFromRecFN.scala 50:21]
    node T_5 = bits(T_4, 11, 9) @[rawFNFromRecFN.scala 51:29]
    node T_7 = eq(T_5, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54]
    node T_8 = bits(T_4, 11, 10) @[rawFNFromRecFN.scala 52:29]
    node T_10 = eq(T_8, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54]
    wire T_18 : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[rawFNFromRecFN.scala 54:23]
    T_18 is invalid @[rawFNFromRecFN.scala 54:23]
    node T_25 = bits(io.in, 64, 64) @[rawFNFromRecFN.scala 55:23]
    T_18.sign <= T_25 @[rawFNFromRecFN.scala 55:18]
    node T_26 = bits(T_4, 9, 9) @[rawFNFromRecFN.scala 56:40]
    node T_27 = and(T_10, T_26) @[rawFNFromRecFN.scala 56:32]
    T_18.isNaN <= T_27 @[rawFNFromRecFN.scala 56:19]
    node T_28 = bits(T_4, 9, 9) @[rawFNFromRecFN.scala 57:40]
    node T_30 = eq(T_28, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35]
    node T_31 = and(T_10, T_30) @[rawFNFromRecFN.scala 57:32]
    T_18.isInf <= T_31 @[rawFNFromRecFN.scala 57:19]
    T_18.isZero <= T_7 @[rawFNFromRecFN.scala 58:20]
    node T_32 = cvt(T_4) @[rawFNFromRecFN.scala 59:25]
    T_18.sExp <= T_32 @[rawFNFromRecFN.scala 59:18]
    node T_35 = eq(T_7, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36]
    node T_36 = bits(io.in, 51, 0) @[rawFNFromRecFN.scala 60:48]
    node T_38 = cat(T_36, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_39 = cat(UInt<1>("h00"), T_35) @[Cat.scala 20:58]
    node T_40 = cat(T_39, T_38) @[Cat.scala 20:58]
    T_18.sig <= T_40 @[rawFNFromRecFN.scala 60:17]
    node T_42 = add(T_18.sExp, asSInt(UInt<12>("h0900"))) @[resizeRawFN.scala 49:31]
    wire outRawFloat : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<10>, sig : UInt<27>} @[resizeRawFN.scala 51:23]
    outRawFloat is invalid @[resizeRawFN.scala 51:23]
    outRawFloat.sign <= T_18.sign @[resizeRawFN.scala 52:20]
    outRawFloat.isNaN <= T_18.isNaN @[resizeRawFN.scala 53:20]
    outRawFloat.isInf <= T_18.isInf @[resizeRawFN.scala 54:20]
    outRawFloat.isZero <= T_18.isZero @[resizeRawFN.scala 55:20]
    node T_57 = lt(T_42, asSInt(UInt<1>("h00"))) @[resizeRawFN.scala 60:31]
    node T_58 = bits(T_42, 12, 9) @[resizeRawFN.scala 61:33]
    node T_60 = neq(T_58, UInt<1>("h00")) @[resizeRawFN.scala 61:65]
    node T_65 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
    node T_67 = cat(T_65, UInt<2>("h00")) @[Cat.scala 20:58]
    node T_68 = bits(T_42, 8, 0) @[resizeRawFN.scala 63:33]
    node T_69 = mux(T_60, T_67, T_68) @[resizeRawFN.scala 61:25]
    node T_70 = cat(T_57, T_69) @[Cat.scala 20:58]
    node T_71 = asSInt(T_70) @[resizeRawFN.scala 65:20]
    outRawFloat.sExp <= T_71 @[resizeRawFN.scala 56:18]
    node T_72 = bits(T_18.sig, 55, 30) @[resizeRawFN.scala 71:28]
    node T_73 = bits(T_18.sig, 29, 0) @[resizeRawFN.scala 72:28]
    node T_75 = neq(T_73, UInt<1>("h00")) @[resizeRawFN.scala 72:56]
    node T_76 = cat(T_72, T_75) @[Cat.scala 20:58]
    outRawFloat.sig <= T_76 @[resizeRawFN.scala 67:17]
    node T_77 = bits(outRawFloat.sig, 24, 24) @[RoundRawFNToRecFN.scala 61:57]
    node T_79 = eq(T_77, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49]
    node invalidExc = and(outRawFloat.isNaN, T_79) @[RoundRawFNToRecFN.scala 61:46]
    inst RoundRawFNToRecFN_1_1 of RoundRawFNToRecFN @[RecFNToRecFN.scala 102:19]
    RoundRawFNToRecFN_1_1.io is invalid
    RoundRawFNToRecFN_1_1.clk <= clk
    RoundRawFNToRecFN_1_1.reset <= reset
    RoundRawFNToRecFN_1_1.io.invalidExc <= invalidExc @[RecFNToRecFN.scala 103:41]
    RoundRawFNToRecFN_1_1.io.infiniteExc <= UInt<1>("h00") @[RecFNToRecFN.scala 104:42]
    RoundRawFNToRecFN_1_1.io.in <- outRawFloat @[RecFNToRecFN.scala 105:33]
    RoundRawFNToRecFN_1_1.io.roundingMode <= io.roundingMode @[RecFNToRecFN.scala 106:43]
    io.out <= RoundRawFNToRecFN_1_1.io.out @[RecFNToRecFN.scala 107:16]
    io.exceptionFlags <= RoundRawFNToRecFN_1_1.io.exceptionFlags @[RecFNToRecFN.scala 108:27]
    
  module FPU : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip inst : UInt<32>, flip fromint_data : UInt<64>, flip fcsr_rm : UInt<3>, fcsr_flags : {valid : UInt<1>, bits : UInt<5>}, store_data : UInt<64>, toint_data : UInt<64>, flip dmem_resp_val : UInt<1>, flip dmem_resp_type : UInt<3>, flip dmem_resp_tag : UInt<5>, flip dmem_resp_data : UInt<64>, flip valid : UInt<1>, fcsr_rdy : UInt<1>, nack_mem : UInt<1>, illegal_rm : UInt<1>, flip killx : UInt<1>, flip killm : UInt<1>, dec : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, sboard_set : UInt<1>, sboard_clr : UInt<1>, sboard_clra : UInt<5>, flip cp_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, cp_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}
    
    io is invalid
    reg ex_reg_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    ex_reg_valid <= io.valid
    node req_valid = or(ex_reg_valid, io.cp_req.valid) @[fpu.scala 493:32]
    reg ex_reg_inst : UInt<32>, clk
    when io.valid : @[Reg.scala 29:19]
      ex_reg_inst <= io.inst @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node ex_cp_valid = and(io.cp_req.ready, io.cp_req.valid) @[Decoupled.scala 21:42]
    node T_194 = eq(io.killx, UInt<1>("h00")) @[fpu.scala 496:48]
    node T_195 = and(ex_reg_valid, T_194) @[fpu.scala 496:45]
    node T_196 = or(T_195, ex_cp_valid) @[fpu.scala 496:58]
    reg mem_reg_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    mem_reg_valid <= T_196
    reg mem_reg_inst : UInt<32>, clk
    when ex_reg_valid : @[Reg.scala 29:19]
      mem_reg_inst <= ex_reg_inst @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg mem_cp_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    mem_cp_valid <= ex_cp_valid
    node T_199 = or(io.killm, io.nack_mem) @[fpu.scala 499:25]
    node T_201 = eq(mem_cp_valid, UInt<1>("h00")) @[fpu.scala 499:44]
    node killm = and(T_199, T_201) @[fpu.scala 499:41]
    node T_203 = eq(killm, UInt<1>("h00")) @[fpu.scala 500:49]
    node T_204 = or(T_203, mem_cp_valid) @[fpu.scala 500:56]
    node T_205 = and(mem_reg_valid, T_204) @[fpu.scala 500:45]
    reg wb_reg_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wb_reg_valid <= T_205
    reg wb_cp_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wb_cp_valid <= mem_cp_valid
    inst fp_decoder of FPUDecoder @[fpu.scala 503:26]
    fp_decoder.io is invalid
    fp_decoder.clk <= clk
    fp_decoder.reset <= reset
    fp_decoder.io.inst <= io.inst @[fpu.scala 504:22]
    wire cp_ctrl : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>} @[fpu.scala 506:21]
    cp_ctrl is invalid @[fpu.scala 506:21]
    cp_ctrl <- io.cp_req.bits @[fpu.scala 507:11]
    io.cp_resp.valid <= UInt<1>("h00") @[fpu.scala 508:20]
    io.cp_resp.bits.data <= UInt<1>("h00") @[fpu.scala 509:24]
    reg T_245 : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, clk
    when io.valid : @[Reg.scala 29:19]
      T_245 <- fp_decoder.io.sigs @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node ex_ctrl = mux(ex_cp_valid, cp_ctrl, T_245) @[fpu.scala 512:20]
    reg mem_ctrl : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, clk
    when req_valid : @[Reg.scala 29:19]
      mem_ctrl <- ex_ctrl @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg wb_ctrl : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, clk
    when mem_reg_valid : @[Reg.scala 29:19]
      wb_ctrl <- mem_ctrl @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg load_wb : UInt<1>, clk
    load_wb <= io.dmem_resp_val
    node T_314 = bits(io.dmem_resp_type, 0, 0) @[fpu.scala 518:52]
    node T_316 = eq(T_314, UInt<1>("h00")) @[fpu.scala 518:34]
    reg load_wb_single : UInt<1>, clk
    when io.dmem_resp_val : @[Reg.scala 29:19]
      load_wb_single <= T_316 @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg load_wb_data : UInt<64>, clk
    when io.dmem_resp_val : @[Reg.scala 29:19]
      load_wb_data <= io.dmem_resp_data @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg load_wb_tag : UInt<5>, clk
    when io.dmem_resp_val : @[Reg.scala 29:19]
      load_wb_tag <= io.dmem_resp_tag @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_317 = bits(load_wb_data, 31, 31) @[recFNFromFN.scala 47:22]
    node T_318 = bits(load_wb_data, 30, 23) @[recFNFromFN.scala 48:23]
    node T_319 = bits(load_wb_data, 22, 0) @[recFNFromFN.scala 49:25]
    node T_321 = eq(T_318, UInt<1>("h00")) @[recFNFromFN.scala 51:34]
    node T_323 = eq(T_319, UInt<1>("h00")) @[recFNFromFN.scala 52:38]
    node T_324 = and(T_321, T_323) @[recFNFromFN.scala 53:34]
    node T_325 = shl(T_319, 9) @[recFNFromFN.scala 56:26]
    node T_326 = bits(T_325, 31, 16) @[CircuitMath.scala 26:17]
    node T_327 = bits(T_325, 15, 0) @[CircuitMath.scala 27:17]
    node T_329 = neq(T_326, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_330 = bits(T_326, 15, 8) @[CircuitMath.scala 26:17]
    node T_331 = bits(T_326, 7, 0) @[CircuitMath.scala 27:17]
    node T_333 = neq(T_330, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_334 = bits(T_330, 7, 4) @[CircuitMath.scala 26:17]
    node T_335 = bits(T_330, 3, 0) @[CircuitMath.scala 27:17]
    node T_337 = neq(T_334, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_338 = bits(T_334, 3, 3) @[CircuitMath.scala 23:12]
    node T_340 = bits(T_334, 2, 2) @[CircuitMath.scala 23:12]
    node T_342 = bits(T_334, 1, 1) @[CircuitMath.scala 21:8]
    node T_343 = shl(T_342, 0) @[CircuitMath.scala 23:10]
    node T_344 = mux(T_340, UInt<2>("h02"), T_343) @[CircuitMath.scala 23:10]
    node T_345 = mux(T_338, UInt<2>("h03"), T_344) @[CircuitMath.scala 23:10]
    node T_346 = bits(T_335, 3, 3) @[CircuitMath.scala 23:12]
    node T_348 = bits(T_335, 2, 2) @[CircuitMath.scala 23:12]
    node T_350 = bits(T_335, 1, 1) @[CircuitMath.scala 21:8]
    node T_351 = shl(T_350, 0) @[CircuitMath.scala 23:10]
    node T_352 = mux(T_348, UInt<2>("h02"), T_351) @[CircuitMath.scala 23:10]
    node T_353 = mux(T_346, UInt<2>("h03"), T_352) @[CircuitMath.scala 23:10]
    node T_354 = mux(T_337, T_345, T_353) @[CircuitMath.scala 29:21]
    node T_355 = cat(T_337, T_354) @[Cat.scala 20:58]
    node T_356 = bits(T_331, 7, 4) @[CircuitMath.scala 26:17]
    node T_357 = bits(T_331, 3, 0) @[CircuitMath.scala 27:17]
    node T_359 = neq(T_356, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_360 = bits(T_356, 3, 3) @[CircuitMath.scala 23:12]
    node T_362 = bits(T_356, 2, 2) @[CircuitMath.scala 23:12]
    node T_364 = bits(T_356, 1, 1) @[CircuitMath.scala 21:8]
    node T_365 = shl(T_364, 0) @[CircuitMath.scala 23:10]
    node T_366 = mux(T_362, UInt<2>("h02"), T_365) @[CircuitMath.scala 23:10]
    node T_367 = mux(T_360, UInt<2>("h03"), T_366) @[CircuitMath.scala 23:10]
    node T_368 = bits(T_357, 3, 3) @[CircuitMath.scala 23:12]
    node T_370 = bits(T_357, 2, 2) @[CircuitMath.scala 23:12]
    node T_372 = bits(T_357, 1, 1) @[CircuitMath.scala 21:8]
    node T_373 = shl(T_372, 0) @[CircuitMath.scala 23:10]
    node T_374 = mux(T_370, UInt<2>("h02"), T_373) @[CircuitMath.scala 23:10]
    node T_375 = mux(T_368, UInt<2>("h03"), T_374) @[CircuitMath.scala 23:10]
    node T_376 = mux(T_359, T_367, T_375) @[CircuitMath.scala 29:21]
    node T_377 = cat(T_359, T_376) @[Cat.scala 20:58]
    node T_378 = mux(T_333, T_355, T_377) @[CircuitMath.scala 29:21]
    node T_379 = cat(T_333, T_378) @[Cat.scala 20:58]
    node T_380 = bits(T_327, 15, 8) @[CircuitMath.scala 26:17]
    node T_381 = bits(T_327, 7, 0) @[CircuitMath.scala 27:17]
    node T_383 = neq(T_380, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_384 = bits(T_380, 7, 4) @[CircuitMath.scala 26:17]
    node T_385 = bits(T_380, 3, 0) @[CircuitMath.scala 27:17]
    node T_387 = neq(T_384, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_388 = bits(T_384, 3, 3) @[CircuitMath.scala 23:12]
    node T_390 = bits(T_384, 2, 2) @[CircuitMath.scala 23:12]
    node T_392 = bits(T_384, 1, 1) @[CircuitMath.scala 21:8]
    node T_393 = shl(T_392, 0) @[CircuitMath.scala 23:10]
    node T_394 = mux(T_390, UInt<2>("h02"), T_393) @[CircuitMath.scala 23:10]
    node T_395 = mux(T_388, UInt<2>("h03"), T_394) @[CircuitMath.scala 23:10]
    node T_396 = bits(T_385, 3, 3) @[CircuitMath.scala 23:12]
    node T_398 = bits(T_385, 2, 2) @[CircuitMath.scala 23:12]
    node T_400 = bits(T_385, 1, 1) @[CircuitMath.scala 21:8]
    node T_401 = shl(T_400, 0) @[CircuitMath.scala 23:10]
    node T_402 = mux(T_398, UInt<2>("h02"), T_401) @[CircuitMath.scala 23:10]
    node T_403 = mux(T_396, UInt<2>("h03"), T_402) @[CircuitMath.scala 23:10]
    node T_404 = mux(T_387, T_395, T_403) @[CircuitMath.scala 29:21]
    node T_405 = cat(T_387, T_404) @[Cat.scala 20:58]
    node T_406 = bits(T_381, 7, 4) @[CircuitMath.scala 26:17]
    node T_407 = bits(T_381, 3, 0) @[CircuitMath.scala 27:17]
    node T_409 = neq(T_406, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_410 = bits(T_406, 3, 3) @[CircuitMath.scala 23:12]
    node T_412 = bits(T_406, 2, 2) @[CircuitMath.scala 23:12]
    node T_414 = bits(T_406, 1, 1) @[CircuitMath.scala 21:8]
    node T_415 = shl(T_414, 0) @[CircuitMath.scala 23:10]
    node T_416 = mux(T_412, UInt<2>("h02"), T_415) @[CircuitMath.scala 23:10]
    node T_417 = mux(T_410, UInt<2>("h03"), T_416) @[CircuitMath.scala 23:10]
    node T_418 = bits(T_407, 3, 3) @[CircuitMath.scala 23:12]
    node T_420 = bits(T_407, 2, 2) @[CircuitMath.scala 23:12]
    node T_422 = bits(T_407, 1, 1) @[CircuitMath.scala 21:8]
    node T_423 = shl(T_422, 0) @[CircuitMath.scala 23:10]
    node T_424 = mux(T_420, UInt<2>("h02"), T_423) @[CircuitMath.scala 23:10]
    node T_425 = mux(T_418, UInt<2>("h03"), T_424) @[CircuitMath.scala 23:10]
    node T_426 = mux(T_409, T_417, T_425) @[CircuitMath.scala 29:21]
    node T_427 = cat(T_409, T_426) @[Cat.scala 20:58]
    node T_428 = mux(T_383, T_405, T_427) @[CircuitMath.scala 29:21]
    node T_429 = cat(T_383, T_428) @[Cat.scala 20:58]
    node T_430 = mux(T_329, T_379, T_429) @[CircuitMath.scala 29:21]
    node T_431 = cat(T_329, T_430) @[Cat.scala 20:58]
    node T_432 = not(T_431) @[recFNFromFN.scala 56:13]
    node T_433 = dshl(T_319, T_432) @[recFNFromFN.scala 58:25]
    node T_434 = bits(T_433, 21, 0) @[recFNFromFN.scala 58:37]
    node T_436 = cat(T_434, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_441 = mux(UInt<1>("h01"), UInt<9>("h01ff"), UInt<9>("h00")) @[Bitwise.scala 33:12]
    node T_442 = xor(T_432, T_441) @[recFNFromFN.scala 62:27]
    node T_443 = mux(T_321, T_442, T_318) @[recFNFromFN.scala 61:16]
    node T_447 = mux(T_321, UInt<2>("h02"), UInt<1>("h01")) @[recFNFromFN.scala 64:47]
    node T_448 = or(UInt<8>("h080"), T_447) @[recFNFromFN.scala 64:42]
    node T_449 = add(T_443, T_448) @[recFNFromFN.scala 64:15]
    node T_450 = tail(T_449, 1) @[recFNFromFN.scala 64:15]
    node T_451 = bits(T_450, 8, 7) @[recFNFromFN.scala 67:25]
    node T_453 = eq(T_451, UInt<2>("h03")) @[recFNFromFN.scala 67:50]
    node T_455 = eq(T_323, UInt<1>("h00")) @[recFNFromFN.scala 68:17]
    node T_456 = and(T_453, T_455) @[recFNFromFN.scala 67:63]
    node T_457 = bits(T_324, 0, 0) @[Bitwise.scala 33:15]
    node T_460 = mux(T_457, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12]
    node T_461 = shl(T_460, 6) @[recFNFromFN.scala 71:45]
    node T_462 = not(T_461) @[recFNFromFN.scala 71:28]
    node T_463 = and(T_450, T_462) @[recFNFromFN.scala 71:26]
    node T_464 = shl(T_456, 6) @[recFNFromFN.scala 72:22]
    node T_465 = or(T_463, T_464) @[recFNFromFN.scala 71:64]
    node T_466 = mux(T_321, T_436, T_319) @[recFNFromFN.scala 73:27]
    node T_467 = cat(T_317, T_465) @[Cat.scala 20:58]
    node rec_s = cat(T_467, T_466) @[Cat.scala 20:58]
    node T_468 = bits(load_wb_data, 63, 63) @[recFNFromFN.scala 47:22]
    node T_469 = bits(load_wb_data, 62, 52) @[recFNFromFN.scala 48:23]
    node T_470 = bits(load_wb_data, 51, 0) @[recFNFromFN.scala 49:25]
    node T_472 = eq(T_469, UInt<1>("h00")) @[recFNFromFN.scala 51:34]
    node T_474 = eq(T_470, UInt<1>("h00")) @[recFNFromFN.scala 52:38]
    node T_475 = and(T_472, T_474) @[recFNFromFN.scala 53:34]
    node T_476 = shl(T_470, 12) @[recFNFromFN.scala 56:26]
    node T_477 = bits(T_476, 63, 32) @[CircuitMath.scala 26:17]
    node T_478 = bits(T_476, 31, 0) @[CircuitMath.scala 27:17]
    node T_480 = neq(T_477, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_481 = bits(T_477, 31, 16) @[CircuitMath.scala 26:17]
    node T_482 = bits(T_477, 15, 0) @[CircuitMath.scala 27:17]
    node T_484 = neq(T_481, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_485 = bits(T_481, 15, 8) @[CircuitMath.scala 26:17]
    node T_486 = bits(T_481, 7, 0) @[CircuitMath.scala 27:17]
    node T_488 = neq(T_485, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_489 = bits(T_485, 7, 4) @[CircuitMath.scala 26:17]
    node T_490 = bits(T_485, 3, 0) @[CircuitMath.scala 27:17]
    node T_492 = neq(T_489, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_493 = bits(T_489, 3, 3) @[CircuitMath.scala 23:12]
    node T_495 = bits(T_489, 2, 2) @[CircuitMath.scala 23:12]
    node T_497 = bits(T_489, 1, 1) @[CircuitMath.scala 21:8]
    node T_498 = shl(T_497, 0) @[CircuitMath.scala 23:10]
    node T_499 = mux(T_495, UInt<2>("h02"), T_498) @[CircuitMath.scala 23:10]
    node T_500 = mux(T_493, UInt<2>("h03"), T_499) @[CircuitMath.scala 23:10]
    node T_501 = bits(T_490, 3, 3) @[CircuitMath.scala 23:12]
    node T_503 = bits(T_490, 2, 2) @[CircuitMath.scala 23:12]
    node T_505 = bits(T_490, 1, 1) @[CircuitMath.scala 21:8]
    node T_506 = shl(T_505, 0) @[CircuitMath.scala 23:10]
    node T_507 = mux(T_503, UInt<2>("h02"), T_506) @[CircuitMath.scala 23:10]
    node T_508 = mux(T_501, UInt<2>("h03"), T_507) @[CircuitMath.scala 23:10]
    node T_509 = mux(T_492, T_500, T_508) @[CircuitMath.scala 29:21]
    node T_510 = cat(T_492, T_509) @[Cat.scala 20:58]
    node T_511 = bits(T_486, 7, 4) @[CircuitMath.scala 26:17]
    node T_512 = bits(T_486, 3, 0) @[CircuitMath.scala 27:17]
    node T_514 = neq(T_511, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_515 = bits(T_511, 3, 3) @[CircuitMath.scala 23:12]
    node T_517 = bits(T_511, 2, 2) @[CircuitMath.scala 23:12]
    node T_519 = bits(T_511, 1, 1) @[CircuitMath.scala 21:8]
    node T_520 = shl(T_519, 0) @[CircuitMath.scala 23:10]
    node T_521 = mux(T_517, UInt<2>("h02"), T_520) @[CircuitMath.scala 23:10]
    node T_522 = mux(T_515, UInt<2>("h03"), T_521) @[CircuitMath.scala 23:10]
    node T_523 = bits(T_512, 3, 3) @[CircuitMath.scala 23:12]
    node T_525 = bits(T_512, 2, 2) @[CircuitMath.scala 23:12]
    node T_527 = bits(T_512, 1, 1) @[CircuitMath.scala 21:8]
    node T_528 = shl(T_527, 0) @[CircuitMath.scala 23:10]
    node T_529 = mux(T_525, UInt<2>("h02"), T_528) @[CircuitMath.scala 23:10]
    node T_530 = mux(T_523, UInt<2>("h03"), T_529) @[CircuitMath.scala 23:10]
    node T_531 = mux(T_514, T_522, T_530) @[CircuitMath.scala 29:21]
    node T_532 = cat(T_514, T_531) @[Cat.scala 20:58]
    node T_533 = mux(T_488, T_510, T_532) @[CircuitMath.scala 29:21]
    node T_534 = cat(T_488, T_533) @[Cat.scala 20:58]
    node T_535 = bits(T_482, 15, 8) @[CircuitMath.scala 26:17]
    node T_536 = bits(T_482, 7, 0) @[CircuitMath.scala 27:17]
    node T_538 = neq(T_535, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_539 = bits(T_535, 7, 4) @[CircuitMath.scala 26:17]
    node T_540 = bits(T_535, 3, 0) @[CircuitMath.scala 27:17]
    node T_542 = neq(T_539, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_543 = bits(T_539, 3, 3) @[CircuitMath.scala 23:12]
    node T_545 = bits(T_539, 2, 2) @[CircuitMath.scala 23:12]
    node T_547 = bits(T_539, 1, 1) @[CircuitMath.scala 21:8]
    node T_548 = shl(T_547, 0) @[CircuitMath.scala 23:10]
    node T_549 = mux(T_545, UInt<2>("h02"), T_548) @[CircuitMath.scala 23:10]
    node T_550 = mux(T_543, UInt<2>("h03"), T_549) @[CircuitMath.scala 23:10]
    node T_551 = bits(T_540, 3, 3) @[CircuitMath.scala 23:12]
    node T_553 = bits(T_540, 2, 2) @[CircuitMath.scala 23:12]
    node T_555 = bits(T_540, 1, 1) @[CircuitMath.scala 21:8]
    node T_556 = shl(T_555, 0) @[CircuitMath.scala 23:10]
    node T_557 = mux(T_553, UInt<2>("h02"), T_556) @[CircuitMath.scala 23:10]
    node T_558 = mux(T_551, UInt<2>("h03"), T_557) @[CircuitMath.scala 23:10]
    node T_559 = mux(T_542, T_550, T_558) @[CircuitMath.scala 29:21]
    node T_560 = cat(T_542, T_559) @[Cat.scala 20:58]
    node T_561 = bits(T_536, 7, 4) @[CircuitMath.scala 26:17]
    node T_562 = bits(T_536, 3, 0) @[CircuitMath.scala 27:17]
    node T_564 = neq(T_561, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_565 = bits(T_561, 3, 3) @[CircuitMath.scala 23:12]
    node T_567 = bits(T_561, 2, 2) @[CircuitMath.scala 23:12]
    node T_569 = bits(T_561, 1, 1) @[CircuitMath.scala 21:8]
    node T_570 = shl(T_569, 0) @[CircuitMath.scala 23:10]
    node T_571 = mux(T_567, UInt<2>("h02"), T_570) @[CircuitMath.scala 23:10]
    node T_572 = mux(T_565, UInt<2>("h03"), T_571) @[CircuitMath.scala 23:10]
    node T_573 = bits(T_562, 3, 3) @[CircuitMath.scala 23:12]
    node T_575 = bits(T_562, 2, 2) @[CircuitMath.scala 23:12]
    node T_577 = bits(T_562, 1, 1) @[CircuitMath.scala 21:8]
    node T_578 = shl(T_577, 0) @[CircuitMath.scala 23:10]
    node T_579 = mux(T_575, UInt<2>("h02"), T_578) @[CircuitMath.scala 23:10]
    node T_580 = mux(T_573, UInt<2>("h03"), T_579) @[CircuitMath.scala 23:10]
    node T_581 = mux(T_564, T_572, T_580) @[CircuitMath.scala 29:21]
    node T_582 = cat(T_564, T_581) @[Cat.scala 20:58]
    node T_583 = mux(T_538, T_560, T_582) @[CircuitMath.scala 29:21]
    node T_584 = cat(T_538, T_583) @[Cat.scala 20:58]
    node T_585 = mux(T_484, T_534, T_584) @[CircuitMath.scala 29:21]
    node T_586 = cat(T_484, T_585) @[Cat.scala 20:58]
    node T_587 = bits(T_478, 31, 16) @[CircuitMath.scala 26:17]
    node T_588 = bits(T_478, 15, 0) @[CircuitMath.scala 27:17]
    node T_590 = neq(T_587, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_591 = bits(T_587, 15, 8) @[CircuitMath.scala 26:17]
    node T_592 = bits(T_587, 7, 0) @[CircuitMath.scala 27:17]
    node T_594 = neq(T_591, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_595 = bits(T_591, 7, 4) @[CircuitMath.scala 26:17]
    node T_596 = bits(T_591, 3, 0) @[CircuitMath.scala 27:17]
    node T_598 = neq(T_595, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_599 = bits(T_595, 3, 3) @[CircuitMath.scala 23:12]
    node T_601 = bits(T_595, 2, 2) @[CircuitMath.scala 23:12]
    node T_603 = bits(T_595, 1, 1) @[CircuitMath.scala 21:8]
    node T_604 = shl(T_603, 0) @[CircuitMath.scala 23:10]
    node T_605 = mux(T_601, UInt<2>("h02"), T_604) @[CircuitMath.scala 23:10]
    node T_606 = mux(T_599, UInt<2>("h03"), T_605) @[CircuitMath.scala 23:10]
    node T_607 = bits(T_596, 3, 3) @[CircuitMath.scala 23:12]
    node T_609 = bits(T_596, 2, 2) @[CircuitMath.scala 23:12]
    node T_611 = bits(T_596, 1, 1) @[CircuitMath.scala 21:8]
    node T_612 = shl(T_611, 0) @[CircuitMath.scala 23:10]
    node T_613 = mux(T_609, UInt<2>("h02"), T_612) @[CircuitMath.scala 23:10]
    node T_614 = mux(T_607, UInt<2>("h03"), T_613) @[CircuitMath.scala 23:10]
    node T_615 = mux(T_598, T_606, T_614) @[CircuitMath.scala 29:21]
    node T_616 = cat(T_598, T_615) @[Cat.scala 20:58]
    node T_617 = bits(T_592, 7, 4) @[CircuitMath.scala 26:17]
    node T_618 = bits(T_592, 3, 0) @[CircuitMath.scala 27:17]
    node T_620 = neq(T_617, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_621 = bits(T_617, 3, 3) @[CircuitMath.scala 23:12]
    node T_623 = bits(T_617, 2, 2) @[CircuitMath.scala 23:12]
    node T_625 = bits(T_617, 1, 1) @[CircuitMath.scala 21:8]
    node T_626 = shl(T_625, 0) @[CircuitMath.scala 23:10]
    node T_627 = mux(T_623, UInt<2>("h02"), T_626) @[CircuitMath.scala 23:10]
    node T_628 = mux(T_621, UInt<2>("h03"), T_627) @[CircuitMath.scala 23:10]
    node T_629 = bits(T_618, 3, 3) @[CircuitMath.scala 23:12]
    node T_631 = bits(T_618, 2, 2) @[CircuitMath.scala 23:12]
    node T_633 = bits(T_618, 1, 1) @[CircuitMath.scala 21:8]
    node T_634 = shl(T_633, 0) @[CircuitMath.scala 23:10]
    node T_635 = mux(T_631, UInt<2>("h02"), T_634) @[CircuitMath.scala 23:10]
    node T_636 = mux(T_629, UInt<2>("h03"), T_635) @[CircuitMath.scala 23:10]
    node T_637 = mux(T_620, T_628, T_636) @[CircuitMath.scala 29:21]
    node T_638 = cat(T_620, T_637) @[Cat.scala 20:58]
    node T_639 = mux(T_594, T_616, T_638) @[CircuitMath.scala 29:21]
    node T_640 = cat(T_594, T_639) @[Cat.scala 20:58]
    node T_641 = bits(T_588, 15, 8) @[CircuitMath.scala 26:17]
    node T_642 = bits(T_588, 7, 0) @[CircuitMath.scala 27:17]
    node T_644 = neq(T_641, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_645 = bits(T_641, 7, 4) @[CircuitMath.scala 26:17]
    node T_646 = bits(T_641, 3, 0) @[CircuitMath.scala 27:17]
    node T_648 = neq(T_645, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_649 = bits(T_645, 3, 3) @[CircuitMath.scala 23:12]
    node T_651 = bits(T_645, 2, 2) @[CircuitMath.scala 23:12]
    node T_653 = bits(T_645, 1, 1) @[CircuitMath.scala 21:8]
    node T_654 = shl(T_653, 0) @[CircuitMath.scala 23:10]
    node T_655 = mux(T_651, UInt<2>("h02"), T_654) @[CircuitMath.scala 23:10]
    node T_656 = mux(T_649, UInt<2>("h03"), T_655) @[CircuitMath.scala 23:10]
    node T_657 = bits(T_646, 3, 3) @[CircuitMath.scala 23:12]
    node T_659 = bits(T_646, 2, 2) @[CircuitMath.scala 23:12]
    node T_661 = bits(T_646, 1, 1) @[CircuitMath.scala 21:8]
    node T_662 = shl(T_661, 0) @[CircuitMath.scala 23:10]
    node T_663 = mux(T_659, UInt<2>("h02"), T_662) @[CircuitMath.scala 23:10]
    node T_664 = mux(T_657, UInt<2>("h03"), T_663) @[CircuitMath.scala 23:10]
    node T_665 = mux(T_648, T_656, T_664) @[CircuitMath.scala 29:21]
    node T_666 = cat(T_648, T_665) @[Cat.scala 20:58]
    node T_667 = bits(T_642, 7, 4) @[CircuitMath.scala 26:17]
    node T_668 = bits(T_642, 3, 0) @[CircuitMath.scala 27:17]
    node T_670 = neq(T_667, UInt<1>("h00")) @[CircuitMath.scala 28:22]
    node T_671 = bits(T_667, 3, 3) @[CircuitMath.scala 23:12]
    node T_673 = bits(T_667, 2, 2) @[CircuitMath.scala 23:12]
    node T_675 = bits(T_667, 1, 1) @[CircuitMath.scala 21:8]
    node T_676 = shl(T_675, 0) @[CircuitMath.scala 23:10]
    node T_677 = mux(T_673, UInt<2>("h02"), T_676) @[CircuitMath.scala 23:10]
    node T_678 = mux(T_671, UInt<2>("h03"), T_677) @[CircuitMath.scala 23:10]
    node T_679 = bits(T_668, 3, 3) @[CircuitMath.scala 23:12]
    node T_681 = bits(T_668, 2, 2) @[CircuitMath.scala 23:12]
    node T_683 = bits(T_668, 1, 1) @[CircuitMath.scala 21:8]
    node T_684 = shl(T_683, 0) @[CircuitMath.scala 23:10]
    node T_685 = mux(T_681, UInt<2>("h02"), T_684) @[CircuitMath.scala 23:10]
    node T_686 = mux(T_679, UInt<2>("h03"), T_685) @[CircuitMath.scala 23:10]
    node T_687 = mux(T_670, T_678, T_686) @[CircuitMath.scala 29:21]
    node T_688 = cat(T_670, T_687) @[Cat.scala 20:58]
    node T_689 = mux(T_644, T_666, T_688) @[CircuitMath.scala 29:21]
    node T_690 = cat(T_644, T_689) @[Cat.scala 20:58]
    node T_691 = mux(T_590, T_640, T_690) @[CircuitMath.scala 29:21]
    node T_692 = cat(T_590, T_691) @[Cat.scala 20:58]
    node T_693 = mux(T_480, T_586, T_692) @[CircuitMath.scala 29:21]
    node T_694 = cat(T_480, T_693) @[Cat.scala 20:58]
    node T_695 = not(T_694) @[recFNFromFN.scala 56:13]
    node T_696 = dshl(T_470, T_695) @[recFNFromFN.scala 58:25]
    node T_697 = bits(T_696, 50, 0) @[recFNFromFN.scala 58:37]
    node T_699 = cat(T_697, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_704 = mux(UInt<1>("h01"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 33:12]
    node T_705 = xor(T_695, T_704) @[recFNFromFN.scala 62:27]
    node T_706 = mux(T_472, T_705, T_469) @[recFNFromFN.scala 61:16]
    node T_710 = mux(T_472, UInt<2>("h02"), UInt<1>("h01")) @[recFNFromFN.scala 64:47]
    node T_711 = or(UInt<11>("h0400"), T_710) @[recFNFromFN.scala 64:42]
    node T_712 = add(T_706, T_711) @[recFNFromFN.scala 64:15]
    node T_713 = tail(T_712, 1) @[recFNFromFN.scala 64:15]
    node T_714 = bits(T_713, 11, 10) @[recFNFromFN.scala 67:25]
    node T_716 = eq(T_714, UInt<2>("h03")) @[recFNFromFN.scala 67:50]
    node T_718 = eq(T_474, UInt<1>("h00")) @[recFNFromFN.scala 68:17]
    node T_719 = and(T_716, T_718) @[recFNFromFN.scala 67:63]
    node T_720 = bits(T_475, 0, 0) @[Bitwise.scala 33:15]
    node T_723 = mux(T_720, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12]
    node T_724 = shl(T_723, 9) @[recFNFromFN.scala 71:45]
    node T_725 = not(T_724) @[recFNFromFN.scala 71:28]
    node T_726 = and(T_713, T_725) @[recFNFromFN.scala 71:26]
    node T_727 = shl(T_719, 9) @[recFNFromFN.scala 72:22]
    node T_728 = or(T_726, T_727) @[recFNFromFN.scala 71:64]
    node T_729 = mux(T_472, T_699, T_470) @[recFNFromFN.scala 73:27]
    node T_730 = cat(T_468, T_728) @[Cat.scala 20:58]
    node T_731 = cat(T_730, T_729) @[Cat.scala 20:58]
    node T_733 = cat(UInt<32>("h0ffffffff"), rec_s) @[Cat.scala 20:58]
    node load_wb_data_recoded = mux(load_wb_single, T_733, T_731) @[fpu.scala 526:10]
    cmem regfile : UInt<65>[32] @[fpu.scala 530:20]
    when load_wb : @[fpu.scala 531:18]
      infer mport T_736 = regfile[load_wb_tag], clk
      T_736 <= load_wb_data_recoded @[fpu.scala 532:26]
      skip @[fpu.scala 531:18]
    reg ex_ra1 : UInt, clk
    reg ex_ra2 : UInt, clk
    reg ex_ra3 : UInt, clk
    when io.valid : @[fpu.scala 538:19]
      when fp_decoder.io.sigs.ren1 : @[fpu.scala 539:25]
        node T_741 = eq(fp_decoder.io.sigs.swap12, UInt<1>("h00")) @[fpu.scala 540:13]
        when T_741 : @[fpu.scala 540:30]
          node T_742 = bits(io.inst, 19, 15) @[fpu.scala 540:49]
          ex_ra1 <= T_742 @[fpu.scala 540:39]
          skip @[fpu.scala 540:30]
        when fp_decoder.io.sigs.swap12 : @[fpu.scala 541:29]
          node T_743 = bits(io.inst, 19, 15) @[fpu.scala 541:48]
          ex_ra2 <= T_743 @[fpu.scala 541:38]
          skip @[fpu.scala 541:29]
        skip @[fpu.scala 539:25]
      when fp_decoder.io.sigs.ren2 : @[fpu.scala 543:25]
        when fp_decoder.io.sigs.swap12 : @[fpu.scala 544:29]
          node T_744 = bits(io.inst, 24, 20) @[fpu.scala 544:48]
          ex_ra1 <= T_744 @[fpu.scala 544:38]
          skip @[fpu.scala 544:29]
        when fp_decoder.io.sigs.swap23 : @[fpu.scala 545:29]
          node T_745 = bits(io.inst, 24, 20) @[fpu.scala 545:48]
          ex_ra3 <= T_745 @[fpu.scala 545:38]
          skip @[fpu.scala 545:29]
        node T_747 = eq(fp_decoder.io.sigs.swap12, UInt<1>("h00")) @[fpu.scala 546:13]
        node T_749 = eq(fp_decoder.io.sigs.swap23, UInt<1>("h00")) @[fpu.scala 546:32]
        node T_750 = and(T_747, T_749) @[fpu.scala 546:29]
        when T_750 : @[fpu.scala 546:49]
          node T_751 = bits(io.inst, 24, 20) @[fpu.scala 546:68]
          ex_ra2 <= T_751 @[fpu.scala 546:58]
          skip @[fpu.scala 546:49]
        skip @[fpu.scala 543:25]
      when fp_decoder.io.sigs.ren3 : @[fpu.scala 548:25]
        node T_752 = bits(io.inst, 31, 27) @[fpu.scala 548:44]
        ex_ra3 <= T_752 @[fpu.scala 548:34]
        skip @[fpu.scala 548:25]
      skip @[fpu.scala 538:19]
    node T_753 = bits(ex_reg_inst, 14, 12) @[fpu.scala 550:30]
    node T_755 = eq(T_753, UInt<3>("h07")) @[fpu.scala 550:38]
    node T_756 = bits(ex_reg_inst, 14, 12) @[fpu.scala 550:74]
    node ex_rm = mux(T_755, io.fcsr_rm, T_756) @[fpu.scala 550:18]
    wire req : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>} @[fpu.scala 552:17]
    req is invalid @[fpu.scala 552:17]
    req <- ex_ctrl @[fpu.scala 553:7]
    req.rm <= ex_rm @[fpu.scala 554:10]
    infer mport T_802 = regfile[ex_ra1], clk
    req.in1 <= T_802 @[fpu.scala 555:11]
    infer mport T_803 = regfile[ex_ra2], clk
    req.in2 <= T_803 @[fpu.scala 556:11]
    infer mport T_804 = regfile[ex_ra3], clk
    req.in3 <= T_804 @[fpu.scala 557:11]
    node T_805 = bits(ex_reg_inst, 21, 20) @[fpu.scala 558:25]
    req.typ <= T_805 @[fpu.scala 558:11]
    when ex_cp_valid : @[fpu.scala 559:22]
      req <- io.cp_req.bits @[fpu.scala 560:9]
      when io.cp_req.bits.swap23 : @[fpu.scala 561:34]
        req.in2 <= io.cp_req.bits.in3 @[fpu.scala 562:15]
        req.in3 <= io.cp_req.bits.in2 @[fpu.scala 563:15]
        skip @[fpu.scala 561:34]
      skip @[fpu.scala 559:22]
    inst sfma of FPUFMAPipe @[fpu.scala 567:20]
    sfma.io is invalid
    sfma.clk <= clk
    sfma.reset <= reset
    node T_806 = and(req_valid, ex_ctrl.fma) @[fpu.scala 568:33]
    node T_807 = and(T_806, ex_ctrl.single) @[fpu.scala 568:48]
    sfma.io.in.valid <= T_807 @[fpu.scala 568:20]
    sfma.io.in.bits <- req @[fpu.scala 569:19]
    inst fpiu of FPToInt @[fpu.scala 571:20]
    fpiu.io is invalid
    fpiu.clk <= clk
    fpiu.reset <= reset
    node T_808 = or(ex_ctrl.toint, ex_ctrl.div) @[fpu.scala 572:51]
    node T_809 = or(T_808, ex_ctrl.sqrt) @[fpu.scala 572:66]
    node T_812 = and(ex_ctrl.cmd, UInt<4>("h0d")) @[fpu.scala 572:97]
    node T_813 = eq(UInt<5>("h05"), T_812) @[fpu.scala 572:97]
    node T_814 = or(T_809, T_813) @[fpu.scala 572:82]
    node T_815 = and(req_valid, T_814) @[fpu.scala 572:33]
    fpiu.io.in.valid <= T_815 @[fpu.scala 572:20]
    fpiu.io.in.bits <- req @[fpu.scala 573:19]
    io.store_data <= fpiu.io.out.bits.store @[fpu.scala 574:17]
    io.toint_data <= fpiu.io.out.bits.toint @[fpu.scala 575:17]
    node T_816 = and(fpiu.io.out.valid, mem_cp_valid) @[fpu.scala 576:26]
    node T_817 = and(T_816, mem_ctrl.toint) @[fpu.scala 576:42]
    when T_817 : @[fpu.scala 576:60]
      io.cp_resp.bits.data <= fpiu.io.out.bits.toint @[fpu.scala 577:26]
      io.cp_resp.valid <= UInt<1>("h01") @[fpu.scala 578:22]
      skip @[fpu.scala 576:60]
    inst ifpu of IntToFP @[fpu.scala 581:20]
    ifpu.io is invalid
    ifpu.clk <= clk
    ifpu.reset <= reset
    node T_819 = and(req_valid, ex_ctrl.fromint) @[fpu.scala 582:33]
    ifpu.io.in.valid <= T_819 @[fpu.scala 582:20]
    ifpu.io.in.bits <- req @[fpu.scala 583:19]
    node T_820 = mux(ex_cp_valid, io.cp_req.bits.in1, io.fromint_data) @[fpu.scala 584:29]
    ifpu.io.in.bits.in1 <= T_820 @[fpu.scala 584:23]
    inst fpmu of FPToFP @[fpu.scala 586:20]
    fpmu.io is invalid
    fpmu.clk <= clk
    fpmu.reset <= reset
    node T_821 = and(req_valid, ex_ctrl.fastpipe) @[fpu.scala 587:33]
    fpmu.io.in.valid <= T_821 @[fpu.scala 587:20]
    fpmu.io.in.bits <- req @[fpu.scala 588:19]
    fpmu.io.lt <= fpiu.io.out.bits.lt @[fpu.scala 589:14]
    reg divSqrt_wen : UInt<1>, clk
    divSqrt_wen <= UInt<1>("h00")
    wire divSqrt_inReady : UInt<1>
    divSqrt_inReady is invalid
    divSqrt_inReady <= UInt<1>("h00")
    reg divSqrt_waddr : UInt<5>, clk
    wire divSqrt_wdata : UInt<65> @[fpu.scala 594:27]
    divSqrt_wdata is invalid @[fpu.scala 594:27]
    wire divSqrt_flags : UInt<5> @[fpu.scala 595:27]
    divSqrt_flags is invalid @[fpu.scala 595:27]
    reg divSqrt_in_flight : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg divSqrt_killed : UInt<1>, clk
    inst FPUFMAPipe_1_1 of FPUFMAPipe_1 @[fpu.scala 606:28]
    FPUFMAPipe_1_1.io is invalid
    FPUFMAPipe_1_1.clk <= clk
    FPUFMAPipe_1_1.reset <= reset
    node T_829 = and(req_valid, ex_ctrl.fma) @[fpu.scala 607:41]
    node T_831 = eq(ex_ctrl.single, UInt<1>("h00")) @[fpu.scala 607:59]
    node T_832 = and(T_829, T_831) @[fpu.scala 607:56]
    FPUFMAPipe_1_1.io.in.valid <= T_832 @[fpu.scala 607:28]
    FPUFMAPipe_1_1.io.in.bits <- req @[fpu.scala 608:27]
    node T_835 = mux(mem_ctrl.fastpipe, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_838 = mux(mem_ctrl.fromint, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_839 = and(mem_ctrl.fma, mem_ctrl.single) @[fpu.scala 604:56]
    node T_842 = mux(T_839, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_844 = eq(mem_ctrl.single, UInt<1>("h00")) @[fpu.scala 609:65]
    node T_845 = and(mem_ctrl.fma, T_844) @[fpu.scala 609:62]
    node T_848 = mux(T_845, UInt<3>("h04"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_849 = or(T_835, T_838) @[fpu.scala 613:78]
    node T_850 = or(T_849, T_842) @[fpu.scala 613:78]
    node memLatencyMask = or(T_850, T_848) @[fpu.scala 613:78]
    reg wen : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg wbInfo : {rd : UInt<5>, single : UInt<1>, cp : UInt<1>, pipeid : UInt<2>}[3], clk
    node T_907 = or(mem_ctrl.fma, mem_ctrl.fastpipe) @[fpu.scala 629:48]
    node T_908 = or(T_907, mem_ctrl.fromint) @[fpu.scala 629:69]
    node mem_wen = and(mem_reg_valid, T_908) @[fpu.scala 629:31]
    node T_911 = mux(ex_ctrl.fastpipe, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_914 = mux(ex_ctrl.fromint, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_915 = and(ex_ctrl.fma, ex_ctrl.single) @[fpu.scala 604:56]
    node T_918 = mux(T_915, UInt<3>("h04"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_920 = eq(ex_ctrl.single, UInt<1>("h00")) @[fpu.scala 609:65]
    node T_921 = and(ex_ctrl.fma, T_920) @[fpu.scala 609:62]
    node T_924 = mux(T_921, UInt<4>("h08"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_925 = or(T_911, T_914) @[fpu.scala 613:78]
    node T_926 = or(T_925, T_918) @[fpu.scala 613:78]
    node T_927 = or(T_926, T_924) @[fpu.scala 613:78]
    node T_928 = and(memLatencyMask, T_927) @[fpu.scala 630:62]
    node T_930 = neq(T_928, UInt<1>("h00")) @[fpu.scala 630:89]
    node T_931 = and(mem_wen, T_930) @[fpu.scala 630:43]
    node T_934 = mux(ex_ctrl.fastpipe, UInt<3>("h04"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_937 = mux(ex_ctrl.fromint, UInt<3>("h04"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_938 = and(ex_ctrl.fma, ex_ctrl.single) @[fpu.scala 604:56]
    node T_941 = mux(T_938, UInt<4>("h08"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_943 = eq(ex_ctrl.single, UInt<1>("h00")) @[fpu.scala 609:65]
    node T_944 = and(ex_ctrl.fma, T_943) @[fpu.scala 609:62]
    node T_947 = mux(T_944, UInt<5>("h010"), UInt<1>("h00")) @[fpu.scala 613:23]
    node T_948 = or(T_934, T_937) @[fpu.scala 613:78]
    node T_949 = or(T_948, T_941) @[fpu.scala 613:78]
    node T_950 = or(T_949, T_947) @[fpu.scala 613:78]
    node T_951 = and(wen, T_950) @[fpu.scala 630:101]
    node T_953 = neq(T_951, UInt<1>("h00")) @[fpu.scala 630:128]
    node T_954 = or(T_931, T_953) @[fpu.scala 630:93]
    reg write_port_busy : UInt<1>, clk
    when req_valid : @[Reg.scala 29:19]
      write_port_busy <= T_954 @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_955 = bits(wen, 1, 1) @[fpu.scala 633:14]
    when T_955 : @[fpu.scala 633:21]
      wbInfo[0] <- wbInfo[1] @[fpu.scala 633:33]
      skip @[fpu.scala 633:21]
    node T_956 = bits(wen, 2, 2) @[fpu.scala 633:14]
    when T_956 : @[fpu.scala 633:21]
      wbInfo[1] <- wbInfo[2] @[fpu.scala 633:33]
      skip @[fpu.scala 633:21]
    node T_957 = shr(wen, 1) @[fpu.scala 635:14]
    wen <= T_957 @[fpu.scala 635:7]
    when mem_wen : @[fpu.scala 636:18]
      node T_959 = eq(killm, UInt<1>("h00")) @[fpu.scala 637:11]
      when T_959 : @[fpu.scala 637:19]
        node T_960 = shr(wen, 1) @[fpu.scala 638:18]
        node T_961 = or(T_960, memLatencyMask) @[fpu.scala 638:23]
        wen <= T_961 @[fpu.scala 638:11]
        skip @[fpu.scala 637:19]
      node T_963 = eq(write_port_busy, UInt<1>("h00")) @[fpu.scala 641:13]
      node T_964 = bits(memLatencyMask, 0, 0) @[fpu.scala 641:47]
      node T_965 = and(T_963, T_964) @[fpu.scala 641:30]
      when T_965 : @[fpu.scala 641:52]
        wbInfo[0].cp <= mem_cp_valid @[fpu.scala 642:22]
        wbInfo[0].single <= mem_ctrl.single @[fpu.scala 643:26]
        node T_968 = mux(mem_ctrl.fastpipe, UInt<1>("h00"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_971 = mux(mem_ctrl.fromint, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_972 = and(mem_ctrl.fma, mem_ctrl.single) @[fpu.scala 604:56]
        node T_975 = mux(T_972, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_977 = eq(mem_ctrl.single, UInt<1>("h00")) @[fpu.scala 609:65]
        node T_978 = and(mem_ctrl.fma, T_977) @[fpu.scala 609:62]
        node T_981 = mux(T_978, UInt<2>("h03"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_982 = or(T_968, T_971) @[fpu.scala 615:108]
        node T_983 = or(T_982, T_975) @[fpu.scala 615:108]
        node T_984 = or(T_983, T_981) @[fpu.scala 615:108]
        wbInfo[0].pipeid <= T_984 @[fpu.scala 644:26]
        node T_985 = bits(mem_reg_inst, 11, 7) @[fpu.scala 645:37]
        wbInfo[0].rd <= T_985 @[fpu.scala 645:22]
        skip @[fpu.scala 641:52]
      node T_987 = eq(write_port_busy, UInt<1>("h00")) @[fpu.scala 641:13]
      node T_988 = bits(memLatencyMask, 1, 1) @[fpu.scala 641:47]
      node T_989 = and(T_987, T_988) @[fpu.scala 641:30]
      when T_989 : @[fpu.scala 641:52]
        wbInfo[1].cp <= mem_cp_valid @[fpu.scala 642:22]
        wbInfo[1].single <= mem_ctrl.single @[fpu.scala 643:26]
        node T_992 = mux(mem_ctrl.fastpipe, UInt<1>("h00"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_995 = mux(mem_ctrl.fromint, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_996 = and(mem_ctrl.fma, mem_ctrl.single) @[fpu.scala 604:56]
        node T_999 = mux(T_996, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_1001 = eq(mem_ctrl.single, UInt<1>("h00")) @[fpu.scala 609:65]
        node T_1002 = and(mem_ctrl.fma, T_1001) @[fpu.scala 609:62]
        node T_1005 = mux(T_1002, UInt<2>("h03"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_1006 = or(T_992, T_995) @[fpu.scala 615:108]
        node T_1007 = or(T_1006, T_999) @[fpu.scala 615:108]
        node T_1008 = or(T_1007, T_1005) @[fpu.scala 615:108]
        wbInfo[1].pipeid <= T_1008 @[fpu.scala 644:26]
        node T_1009 = bits(mem_reg_inst, 11, 7) @[fpu.scala 645:37]
        wbInfo[1].rd <= T_1009 @[fpu.scala 645:22]
        skip @[fpu.scala 641:52]
      node T_1011 = eq(write_port_busy, UInt<1>("h00")) @[fpu.scala 641:13]
      node T_1012 = bits(memLatencyMask, 2, 2) @[fpu.scala 641:47]
      node T_1013 = and(T_1011, T_1012) @[fpu.scala 641:30]
      when T_1013 : @[fpu.scala 641:52]
        wbInfo[2].cp <= mem_cp_valid @[fpu.scala 642:22]
        wbInfo[2].single <= mem_ctrl.single @[fpu.scala 643:26]
        node T_1016 = mux(mem_ctrl.fastpipe, UInt<1>("h00"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_1019 = mux(mem_ctrl.fromint, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_1020 = and(mem_ctrl.fma, mem_ctrl.single) @[fpu.scala 604:56]
        node T_1023 = mux(T_1020, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_1025 = eq(mem_ctrl.single, UInt<1>("h00")) @[fpu.scala 609:65]
        node T_1026 = and(mem_ctrl.fma, T_1025) @[fpu.scala 609:62]
        node T_1029 = mux(T_1026, UInt<2>("h03"), UInt<1>("h00")) @[fpu.scala 615:63]
        node T_1030 = or(T_1016, T_1019) @[fpu.scala 615:108]
        node T_1031 = or(T_1030, T_1023) @[fpu.scala 615:108]
        node T_1032 = or(T_1031, T_1029) @[fpu.scala 615:108]
        wbInfo[2].pipeid <= T_1032 @[fpu.scala 644:26]
        node T_1033 = bits(mem_reg_inst, 11, 7) @[fpu.scala 645:37]
        wbInfo[2].rd <= T_1033 @[fpu.scala 645:22]
        skip @[fpu.scala 641:52]
      skip @[fpu.scala 636:18]
    node waddr = mux(divSqrt_wen, divSqrt_waddr, wbInfo[0].rd) @[fpu.scala 650:18]
    node T_1035 = and(wbInfo[0].pipeid, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1037 = geq(wbInfo[0].pipeid, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1039 = and(T_1035, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1041 = geq(T_1035, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1042 = mux(T_1041, FPUFMAPipe_1_1.io.out.bits.data, sfma.io.out.bits.data) @[Package.scala 19:12]
    node T_1044 = and(T_1035, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1046 = geq(T_1035, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1047 = mux(T_1046, ifpu.io.out.bits.data, fpmu.io.out.bits.data) @[Package.scala 19:12]
    node T_1048 = mux(T_1037, T_1042, T_1047) @[Package.scala 19:12]
    node wdata = mux(divSqrt_wen, divSqrt_wdata, T_1048) @[fpu.scala 651:18]
    node T_1050 = and(wbInfo[0].pipeid, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1052 = geq(wbInfo[0].pipeid, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1054 = and(T_1050, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1056 = geq(T_1050, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1057 = mux(T_1056, FPUFMAPipe_1_1.io.out.bits.exc, sfma.io.out.bits.exc) @[Package.scala 19:12]
    node T_1059 = and(T_1050, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1061 = geq(T_1050, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1062 = mux(T_1061, ifpu.io.out.bits.exc, fpmu.io.out.bits.exc) @[Package.scala 19:12]
    node wexc = mux(T_1052, T_1057, T_1062) @[Package.scala 19:12]
    node T_1064 = eq(wbInfo[0].cp, UInt<1>("h00")) @[fpu.scala 653:10]
    node T_1065 = bits(wen, 0, 0) @[fpu.scala 653:30]
    node T_1066 = and(T_1064, T_1065) @[fpu.scala 653:24]
    node T_1067 = or(T_1066, divSqrt_wen) @[fpu.scala 653:35]
    when T_1067 : @[fpu.scala 653:51]
      infer mport T_1068 = regfile[waddr], clk
      T_1068 <= wdata @[fpu.scala 654:20]
      skip @[fpu.scala 653:51]
    node T_1069 = bits(wen, 0, 0) @[fpu.scala 666:28]
    node T_1070 = and(wbInfo[0].cp, T_1069) @[fpu.scala 666:22]
    when T_1070 : @[fpu.scala 666:33]
      io.cp_resp.bits.data <= wdata @[fpu.scala 667:26]
      io.cp_resp.valid <= UInt<1>("h01") @[fpu.scala 668:22]
      skip @[fpu.scala 666:33]
    node T_1073 = eq(ex_reg_valid, UInt<1>("h00")) @[fpu.scala 670:22]
    io.cp_req.ready <= T_1073 @[fpu.scala 670:19]
    node wb_toint_valid = and(wb_reg_valid, wb_ctrl.toint) @[fpu.scala 672:37]
    reg wb_toint_exc : UInt<5>, clk
    when mem_ctrl.toint : @[Reg.scala 29:19]
      wb_toint_exc <= fpiu.io.out.bits.exc @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_1074 = or(wb_toint_valid, divSqrt_wen) @[fpu.scala 674:41]
    node T_1075 = bits(wen, 0, 0) @[fpu.scala 674:62]
    node T_1076 = or(T_1074, T_1075) @[fpu.scala 674:56]
    io.fcsr_flags.valid <= T_1076 @[fpu.scala 674:23]
    node T_1078 = mux(wb_toint_valid, wb_toint_exc, UInt<1>("h00")) @[fpu.scala 676:8]
    node T_1080 = mux(divSqrt_wen, divSqrt_flags, UInt<1>("h00")) @[fpu.scala 677:8]
    node T_1081 = or(T_1078, T_1080) @[fpu.scala 676:48]
    node T_1082 = bits(wen, 0, 0) @[fpu.scala 678:12]
    node T_1084 = mux(T_1082, wexc, UInt<1>("h00")) @[fpu.scala 678:8]
    node T_1085 = or(T_1081, T_1084) @[fpu.scala 677:46]
    io.fcsr_flags.bits <= T_1085 @[fpu.scala 675:22]
    node T_1086 = or(mem_ctrl.div, mem_ctrl.sqrt) @[fpu.scala 680:51]
    node T_1087 = and(mem_reg_valid, T_1086) @[fpu.scala 680:34]
    node T_1089 = eq(divSqrt_inReady, UInt<1>("h00")) @[fpu.scala 680:73]
    node T_1091 = neq(wen, UInt<1>("h00")) @[fpu.scala 680:97]
    node T_1092 = or(T_1089, T_1091) @[fpu.scala 680:90]
    node units_busy = and(T_1087, T_1092) @[fpu.scala 680:69]
    node T_1093 = and(ex_reg_valid, ex_ctrl.wflags) @[fpu.scala 681:33]
    node T_1094 = and(mem_reg_valid, mem_ctrl.wflags) @[fpu.scala 681:68]
    node T_1095 = or(T_1093, T_1094) @[fpu.scala 681:51]
    node T_1096 = and(wb_reg_valid, wb_ctrl.toint) @[fpu.scala 681:103]
    node T_1097 = or(T_1095, T_1096) @[fpu.scala 681:87]
    node T_1099 = neq(wen, UInt<1>("h00")) @[fpu.scala 681:127]
    node T_1100 = or(T_1097, T_1099) @[fpu.scala 681:120]
    node T_1101 = or(T_1100, divSqrt_in_flight) @[fpu.scala 681:131]
    node T_1103 = eq(T_1101, UInt<1>("h00")) @[fpu.scala 681:18]
    io.fcsr_rdy <= T_1103 @[fpu.scala 681:15]
    node T_1104 = or(units_busy, write_port_busy) @[fpu.scala 682:29]
    node T_1105 = or(T_1104, divSqrt_in_flight) @[fpu.scala 682:48]
    io.nack_mem <= T_1105 @[fpu.scala 682:15]
    io.dec <- fp_decoder.io.sigs @[fpu.scala 683:10]
    node T_1107 = eq(wb_cp_valid, UInt<1>("h00")) @[fpu.scala 685:36]
    node T_1108 = and(wb_reg_valid, T_1107) @[fpu.scala 685:33]
    node T_1110 = eq(mem_ctrl.single, UInt<1>("h00")) @[fpu.scala 609:65]
    node T_1111 = and(mem_ctrl.fma, T_1110) @[fpu.scala 609:62]
    node T_1113 = or(UInt<1>("h00"), T_1111) @[fpu.scala 684:123]
    node T_1114 = or(T_1113, mem_ctrl.div) @[fpu.scala 685:96]
    node T_1115 = or(T_1114, mem_ctrl.sqrt) @[fpu.scala 685:112]
    reg T_1116 : UInt<1>, clk
    T_1116 <= T_1115
    node T_1117 = and(T_1108, T_1116) @[fpu.scala 685:49]
    io.sboard_set <= T_1117 @[fpu.scala 685:17]
    node T_1119 = eq(wb_cp_valid, UInt<1>("h00")) @[fpu.scala 686:20]
    node T_1120 = bits(wen, 0, 0) @[fpu.scala 686:56]
    node T_1122 = eq(wbInfo[0].pipeid, UInt<2>("h03")) @[fpu.scala 686:99]
    node T_1124 = or(UInt<1>("h00"), T_1122) @[fpu.scala 684:123]
    node T_1125 = and(T_1120, T_1124) @[fpu.scala 686:60]
    node T_1126 = or(divSqrt_wen, T_1125) @[fpu.scala 686:49]
    node T_1127 = and(T_1119, T_1126) @[fpu.scala 686:33]
    io.sboard_clr <= T_1127 @[fpu.scala 686:17]
    io.sboard_clra <= waddr @[fpu.scala 687:18]
    node T_1128 = bits(ex_rm, 2, 2) @[fpu.scala 689:25]
    node T_1129 = and(T_1128, ex_ctrl.round) @[fpu.scala 689:29]
    io.illegal_rm <= T_1129 @[fpu.scala 689:17]
    divSqrt_wdata <= UInt<1>("h00") @[fpu.scala 691:17]
    divSqrt_flags <= UInt<1>("h00") @[fpu.scala 692:17]
    reg T_1133 : UInt<1>, clk
    reg T_1135 : UInt, clk
    reg T_1137 : UInt, clk
    reg T_1139 : UInt, clk
    inst DivSqrtRecF64_1 of DivSqrtRecF64 @[fpu.scala 700:25]
    DivSqrtRecF64_1.io is invalid
    DivSqrtRecF64_1.clk <= clk
    DivSqrtRecF64_1.reset <= reset
    node T_1140 = mux(DivSqrtRecF64_1.io.sqrtOp, DivSqrtRecF64_1.io.inReady_sqrt, DivSqrtRecF64_1.io.inReady_div) @[fpu.scala 701:27]
    divSqrt_inReady <= T_1140 @[fpu.scala 701:21]
    node T_1141 = or(DivSqrtRecF64_1.io.outValid_div, DivSqrtRecF64_1.io.outValid_sqrt) @[fpu.scala 702:52]
    node T_1142 = or(mem_ctrl.div, mem_ctrl.sqrt) @[fpu.scala 703:58]
    node T_1143 = and(mem_reg_valid, T_1142) @[fpu.scala 703:41]
    node T_1145 = eq(divSqrt_in_flight, UInt<1>("h00")) @[fpu.scala 703:79]
    node T_1146 = and(T_1143, T_1145) @[fpu.scala 703:76]
    DivSqrtRecF64_1.io.inValid <= T_1146 @[fpu.scala 703:24]
    DivSqrtRecF64_1.io.sqrtOp <= mem_ctrl.sqrt @[fpu.scala 704:23]
    DivSqrtRecF64_1.io.a <= fpiu.io.as_double.in1 @[fpu.scala 705:18]
    DivSqrtRecF64_1.io.b <= fpiu.io.as_double.in2 @[fpu.scala 706:18]
    DivSqrtRecF64_1.io.roundingMode <= fpiu.io.as_double.rm @[fpu.scala 707:29]
    node T_1147 = and(DivSqrtRecF64_1.io.inValid, divSqrt_inReady) @[fpu.scala 709:30]
    when T_1147 : @[fpu.scala 709:50]
      divSqrt_in_flight <= UInt<1>("h01") @[fpu.scala 710:25]
      divSqrt_killed <= killm @[fpu.scala 711:22]
      T_1133 <= mem_ctrl.single @[fpu.scala 712:22]
      node T_1149 = bits(mem_reg_inst, 11, 7) @[fpu.scala 713:36]
      divSqrt_waddr <= T_1149 @[fpu.scala 713:21]
      T_1135 <= DivSqrtRecF64_1.io.roundingMode @[fpu.scala 714:18]
      skip @[fpu.scala 709:50]
    when T_1141 : @[fpu.scala 717:29]
      node T_1151 = eq(divSqrt_killed, UInt<1>("h00")) @[fpu.scala 718:22]
      divSqrt_wen <= T_1151 @[fpu.scala 718:19]
      T_1139 <= DivSqrtRecF64_1.io.out @[fpu.scala 719:28]
      divSqrt_in_flight <= UInt<1>("h00") @[fpu.scala 720:25]
      T_1137 <= DivSqrtRecF64_1.io.exceptionFlags @[fpu.scala 721:28]
      skip @[fpu.scala 717:29]
    inst RecFNToRecFN_2_1 of RecFNToRecFN_2 @[fpu.scala 724:34]
    RecFNToRecFN_2_1.io is invalid
    RecFNToRecFN_2_1.clk <= clk
    RecFNToRecFN_2_1.reset <= reset
    RecFNToRecFN_2_1.io.in <= T_1139 @[fpu.scala 725:28]
    RecFNToRecFN_2_1.io.roundingMode <= T_1135 @[fpu.scala 726:38]
    node T_1153 = mux(T_1133, RecFNToRecFN_2_1.io.out, T_1139) @[fpu.scala 727:25]
    divSqrt_wdata <= T_1153 @[fpu.scala 727:19]
    node T_1155 = mux(T_1133, RecFNToRecFN_2_1.io.exceptionFlags, UInt<1>("h00")) @[fpu.scala 728:48]
    node T_1156 = or(T_1137, T_1155) @[fpu.scala 728:43]
    divSqrt_flags <= T_1156 @[fpu.scala 728:19]
    
  module ClientUncachedTileLinkIOArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    io.out <- io.in[0] @[Arbiters.scala 181:19]
    
  module RRArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    node T_220 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<1>, clk
    when T_220 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node T_223 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_224 = or(T_223, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_226 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_228 = eq(T_223, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_230 = eq(T_224, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_231 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_232 = or(T_231, T_228) @[Arbiter.scala 64:50]
    node T_233 = and(T_226, grantMask_1) @[Arbiter.scala 64:34]
    node T_234 = or(T_233, T_230) @[Arbiter.scala 64:50]
    node T_235 = and(T_232, io.out.ready) @[Arbiter.scala 52:21]
    io.in[0].ready <= T_235 @[Arbiter.scala 52:16]
    node T_236 = and(T_234, io.out.ready) @[Arbiter.scala 52:21]
    io.in[1].ready <= T_236 @[Arbiter.scala 52:16]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module PTW : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip requestor : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}[2], mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, dpath : {flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, isa : UInt<32>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}
    
    io is invalid
    reg state : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg count : UInt<2>, clk
    reg s1_kill : UInt<1>, clk
    s1_kill <= UInt<1>("h00")
    reg r_req : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}, clk
    reg r_req_dest : UInt, clk
    reg r_pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}, clk
    node T_2207 = shr(r_req.addr, 18) @[ptw.scala 86:58]
    node vpn_idxs_0 = bits(T_2207, 8, 0) @[ptw.scala 86:88]
    node T_2208 = shr(r_req.addr, 9) @[ptw.scala 86:58]
    node vpn_idxs_1 = bits(T_2208, 8, 0) @[ptw.scala 86:88]
    node T_2209 = shr(r_req.addr, 0) @[ptw.scala 86:58]
    node vpn_idxs_2 = bits(T_2209, 8, 0) @[ptw.scala 86:88]
    node T_2211 = and(count, UInt<1>("h01")) @[Package.scala 18:26]
    node T_2213 = geq(count, UInt<2>("h02")) @[Package.scala 19:17]
    node T_2215 = and(T_2211, UInt<1>("h00")) @[Package.scala 18:26]
    node T_2217 = geq(T_2211, UInt<1>("h01")) @[Package.scala 19:17]
    node T_2218 = mux(T_2217, vpn_idxs_1, vpn_idxs_0) @[Package.scala 19:12]
    node vpn_idx = mux(T_2213, vpn_idxs_2, T_2218) @[Package.scala 19:12]
    inst arb of RRArbiter @[ptw.scala 89:19]
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in[0] <- io.requestor[0].req @[ptw.scala 90:13]
    arb.io.in[1] <- io.requestor[1].req @[ptw.scala 90:13]
    node T_2226 = eq(state, UInt<3>("h00")) @[ptw.scala 91:29]
    arb.io.out.ready <= T_2226 @[ptw.scala 91:20]
    wire T_2251 : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[ptw.scala 94:33]
    T_2251 is invalid @[ptw.scala 94:33]
    node T_2263 = bits(io.mem.resp.bits.data, 0, 0) @[ptw.scala 94:33]
    T_2251.v <= T_2263 @[ptw.scala 94:33]
    node T_2264 = bits(io.mem.resp.bits.data, 1, 1) @[ptw.scala 94:33]
    T_2251.r <= T_2264 @[ptw.scala 94:33]
    node T_2265 = bits(io.mem.resp.bits.data, 2, 2) @[ptw.scala 94:33]
    T_2251.w <= T_2265 @[ptw.scala 94:33]
    node T_2266 = bits(io.mem.resp.bits.data, 3, 3) @[ptw.scala 94:33]
    T_2251.x <= T_2266 @[ptw.scala 94:33]
    node T_2267 = bits(io.mem.resp.bits.data, 4, 4) @[ptw.scala 94:33]
    T_2251.u <= T_2267 @[ptw.scala 94:33]
    node T_2268 = bits(io.mem.resp.bits.data, 5, 5) @[ptw.scala 94:33]
    T_2251.g <= T_2268 @[ptw.scala 94:33]
    node T_2269 = bits(io.mem.resp.bits.data, 6, 6) @[ptw.scala 94:33]
    T_2251.a <= T_2269 @[ptw.scala 94:33]
    node T_2270 = bits(io.mem.resp.bits.data, 7, 7) @[ptw.scala 94:33]
    T_2251.d <= T_2270 @[ptw.scala 94:33]
    node T_2271 = bits(io.mem.resp.bits.data, 9, 8) @[ptw.scala 94:33]
    T_2251.reserved_for_software <= T_2271 @[ptw.scala 94:33]
    node T_2272 = bits(io.mem.resp.bits.data, 47, 10) @[ptw.scala 94:33]
    T_2251.ppn <= T_2272 @[ptw.scala 94:33]
    node T_2273 = bits(io.mem.resp.bits.data, 63, 48) @[ptw.scala 94:33]
    T_2251.reserved_for_hardware <= T_2273 @[ptw.scala 94:33]
    wire T_2298 : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[ptw.scala 95:45]
    T_2298 is invalid @[ptw.scala 95:45]
    node T_2310 = bits(io.mem.resp.bits.data, 0, 0) @[ptw.scala 95:45]
    T_2298.v <= T_2310 @[ptw.scala 95:45]
    node T_2311 = bits(io.mem.resp.bits.data, 1, 1) @[ptw.scala 95:45]
    T_2298.r <= T_2311 @[ptw.scala 95:45]
    node T_2312 = bits(io.mem.resp.bits.data, 2, 2) @[ptw.scala 95:45]
    T_2298.w <= T_2312 @[ptw.scala 95:45]
    node T_2313 = bits(io.mem.resp.bits.data, 3, 3) @[ptw.scala 95:45]
    T_2298.x <= T_2313 @[ptw.scala 95:45]
    node T_2314 = bits(io.mem.resp.bits.data, 4, 4) @[ptw.scala 95:45]
    T_2298.u <= T_2314 @[ptw.scala 95:45]
    node T_2315 = bits(io.mem.resp.bits.data, 5, 5) @[ptw.scala 95:45]
    T_2298.g <= T_2315 @[ptw.scala 95:45]
    node T_2316 = bits(io.mem.resp.bits.data, 6, 6) @[ptw.scala 95:45]
    T_2298.a <= T_2316 @[ptw.scala 95:45]
    node T_2317 = bits(io.mem.resp.bits.data, 7, 7) @[ptw.scala 95:45]
    T_2298.d <= T_2317 @[ptw.scala 95:45]
    node T_2318 = bits(io.mem.resp.bits.data, 9, 8) @[ptw.scala 95:45]
    T_2298.reserved_for_software <= T_2318 @[ptw.scala 95:45]
    node T_2319 = bits(io.mem.resp.bits.data, 47, 10) @[ptw.scala 95:45]
    T_2298.ppn <= T_2319 @[ptw.scala 95:45]
    node T_2320 = bits(io.mem.resp.bits.data, 63, 48) @[ptw.scala 95:45]
    T_2298.reserved_for_hardware <= T_2320 @[ptw.scala 95:45]
    wire pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}
    pte is invalid
    pte <- T_2298
    node T_2332 = bits(T_2251.ppn, 19, 0) @[ptw.scala 96:23]
    pte.ppn <= T_2332 @[ptw.scala 96:13]
    node T_2333 = shr(T_2251.ppn, 20) @[ptw.scala 97:20]
    node T_2335 = neq(T_2333, UInt<1>("h00")) @[ptw.scala 97:32]
    when T_2335 : @[ptw.scala 97:39]
      pte.v <= UInt<1>("h00") @[ptw.scala 97:47]
      skip @[ptw.scala 97:39]
    node T_2337 = cat(r_pte.ppn, vpn_idx) @[Cat.scala 20:58]
    node pte_addr = shl(T_2337, 3) @[ptw.scala 100:42]
    node T_2338 = and(arb.io.out.ready, arb.io.out.valid) @[Decoupled.scala 21:42]
    when T_2338 : @[ptw.scala 102:28]
      r_req <- arb.io.out.bits @[ptw.scala 103:11]
      r_req_dest <= arb.io.chosen @[ptw.scala 104:16]
      r_pte.ppn <= io.dpath.ptbr.ppn @[ptw.scala 105:15]
      skip @[ptw.scala 102:28]
    reg T_2340 : UInt<8>, clk
    reg T_2342 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_2349 : UInt<32>[8], clk
    reg T_2357 : UInt<20>[8], clk
    node T_2359 = eq(T_2349[0], pte_addr) @[ptw.scala 115:27]
    node T_2360 = eq(T_2349[1], pte_addr) @[ptw.scala 115:27]
    node T_2361 = eq(T_2349[2], pte_addr) @[ptw.scala 115:27]
    node T_2362 = eq(T_2349[3], pte_addr) @[ptw.scala 115:27]
    node T_2363 = eq(T_2349[4], pte_addr) @[ptw.scala 115:27]
    node T_2364 = eq(T_2349[5], pte_addr) @[ptw.scala 115:27]
    node T_2365 = eq(T_2349[6], pte_addr) @[ptw.scala 115:27]
    node T_2366 = eq(T_2349[7], pte_addr) @[ptw.scala 115:27]
    node T_2367 = cat(T_2360, T_2359) @[Cat.scala 20:58]
    node T_2368 = cat(T_2362, T_2361) @[Cat.scala 20:58]
    node T_2369 = cat(T_2368, T_2367) @[Cat.scala 20:58]
    node T_2370 = cat(T_2364, T_2363) @[Cat.scala 20:58]
    node T_2371 = cat(T_2366, T_2365) @[Cat.scala 20:58]
    node T_2372 = cat(T_2371, T_2370) @[Cat.scala 20:58]
    node T_2373 = cat(T_2372, T_2369) @[Cat.scala 20:58]
    node T_2374 = and(T_2373, T_2342) @[ptw.scala 115:48]
    node T_2376 = neq(T_2374, UInt<1>("h00")) @[ptw.scala 116:20]
    node T_2378 = eq(pte.r, UInt<1>("h00")) @[ptw.scala 52:36]
    node T_2379 = and(pte.v, T_2378) @[ptw.scala 52:33]
    node T_2381 = eq(pte.w, UInt<1>("h00")) @[ptw.scala 52:42]
    node T_2382 = and(T_2379, T_2381) @[ptw.scala 52:39]
    node T_2384 = eq(pte.x, UInt<1>("h00")) @[ptw.scala 52:48]
    node T_2385 = and(T_2382, T_2384) @[ptw.scala 52:45]
    node T_2386 = and(io.mem.resp.valid, T_2385) @[ptw.scala 117:29]
    node T_2388 = eq(T_2376, UInt<1>("h00")) @[ptw.scala 117:47]
    node T_2389 = and(T_2386, T_2388) @[ptw.scala 117:44]
    when T_2389 : @[ptw.scala 117:53]
      node T_2390 = not(T_2342) @[ptw.scala 118:25]
      node T_2392 = eq(T_2390, UInt<1>("h00")) @[ptw.scala 118:25]
      node T_2394 = dshr(T_2340, UInt<1>("h01")) @[Cache.scala 105:27]
      node T_2395 = bits(T_2394, 0, 0) @[Cache.scala 105:27]
      node T_2396 = cat(UInt<1>("h01"), T_2395) @[Cat.scala 20:58]
      node T_2397 = dshr(T_2340, T_2396) @[Cache.scala 105:27]
      node T_2398 = bits(T_2397, 0, 0) @[Cache.scala 105:27]
      node T_2399 = cat(T_2396, T_2398) @[Cat.scala 20:58]
      node T_2400 = dshr(T_2340, T_2399) @[Cache.scala 105:27]
      node T_2401 = bits(T_2400, 0, 0) @[Cache.scala 105:27]
      node T_2402 = cat(T_2399, T_2401) @[Cat.scala 20:58]
      node T_2403 = bits(T_2402, 2, 0) @[Cache.scala 106:8]
      node T_2404 = not(T_2342) @[ptw.scala 118:61]
      node T_2405 = bits(T_2404, 0, 0) @[OneHot.scala 35:40]
      node T_2406 = bits(T_2404, 1, 1) @[OneHot.scala 35:40]
      node T_2407 = bits(T_2404, 2, 2) @[OneHot.scala 35:40]
      node T_2408 = bits(T_2404, 3, 3) @[OneHot.scala 35:40]
      node T_2409 = bits(T_2404, 4, 4) @[OneHot.scala 35:40]
      node T_2410 = bits(T_2404, 5, 5) @[OneHot.scala 35:40]
      node T_2411 = bits(T_2404, 6, 6) @[OneHot.scala 35:40]
      node T_2412 = bits(T_2404, 7, 7) @[OneHot.scala 35:40]
      node T_2421 = mux(T_2411, UInt<3>("h06"), UInt<3>("h07")) @[Mux.scala 31:69]
      node T_2422 = mux(T_2410, UInt<3>("h05"), T_2421) @[Mux.scala 31:69]
      node T_2423 = mux(T_2409, UInt<3>("h04"), T_2422) @[Mux.scala 31:69]
      node T_2424 = mux(T_2408, UInt<2>("h03"), T_2423) @[Mux.scala 31:69]
      node T_2425 = mux(T_2407, UInt<2>("h02"), T_2424) @[Mux.scala 31:69]
      node T_2426 = mux(T_2406, UInt<1>("h01"), T_2425) @[Mux.scala 31:69]
      node T_2427 = mux(T_2405, UInt<1>("h00"), T_2426) @[Mux.scala 31:69]
      node T_2428 = mux(T_2392, T_2403, T_2427) @[ptw.scala 118:18]
      node T_2430 = dshl(UInt<1>("h01"), T_2428) @[OneHot.scala 44:15]
      node T_2431 = or(T_2342, T_2430) @[ptw.scala 119:22]
      T_2342 <= T_2431 @[ptw.scala 119:13]
      T_2349[T_2428] <= pte_addr @[ptw.scala 120:15]
      T_2357[T_2428] <= pte.ppn @[ptw.scala 121:15]
      skip @[ptw.scala 117:53]
    node T_2432 = eq(state, UInt<3>("h01")) @[ptw.scala 123:24]
    node T_2433 = and(T_2376, T_2432) @[ptw.scala 123:15]
    when T_2433 : @[ptw.scala 123:35]
      node T_2434 = bits(T_2374, 7, 4) @[OneHot.scala 22:18]
      node T_2435 = bits(T_2374, 3, 0) @[OneHot.scala 23:18]
      node T_2437 = neq(T_2434, UInt<1>("h00")) @[OneHot.scala 24:14]
      node T_2438 = or(T_2434, T_2435) @[OneHot.scala 24:28]
      node T_2439 = bits(T_2438, 3, 2) @[OneHot.scala 22:18]
      node T_2440 = bits(T_2438, 1, 0) @[OneHot.scala 23:18]
      node T_2442 = neq(T_2439, UInt<1>("h00")) @[OneHot.scala 24:14]
      node T_2443 = or(T_2439, T_2440) @[OneHot.scala 24:28]
      node T_2444 = bits(T_2443, 1, 1) @[CircuitMath.scala 21:8]
      node T_2445 = cat(T_2442, T_2444) @[Cat.scala 20:58]
      node T_2446 = cat(T_2437, T_2445) @[Cat.scala 20:58]
      node T_2448 = bits(T_2446, 2, 2) @[Cache.scala 95:20]
      node T_2450 = eq(T_2448, UInt<1>("h00")) @[Cache.scala 96:43]
      node T_2452 = dshl(UInt<1>("h01"), UInt<1>("h01")) @[Cache.scala 96:37]
      node T_2453 = or(T_2340, T_2452) @[Cache.scala 96:37]
      node T_2454 = not(T_2340) @[Cache.scala 96:37]
      node T_2455 = or(T_2454, T_2452) @[Cache.scala 96:37]
      node T_2456 = not(T_2455) @[Cache.scala 96:37]
      node T_2457 = mux(T_2450, T_2453, T_2456) @[Cache.scala 96:37]
      node T_2458 = cat(UInt<1>("h01"), T_2448) @[Cat.scala 20:58]
      node T_2459 = bits(T_2446, 1, 1) @[Cache.scala 95:20]
      node T_2461 = eq(T_2459, UInt<1>("h00")) @[Cache.scala 96:43]
      node T_2463 = dshl(UInt<1>("h01"), T_2458) @[Cache.scala 96:37]
      node T_2464 = or(T_2457, T_2463) @[Cache.scala 96:37]
      node T_2465 = not(T_2457) @[Cache.scala 96:37]
      node T_2466 = or(T_2465, T_2463) @[Cache.scala 96:37]
      node T_2467 = not(T_2466) @[Cache.scala 96:37]
      node T_2468 = mux(T_2461, T_2464, T_2467) @[Cache.scala 96:37]
      node T_2469 = cat(T_2458, T_2459) @[Cat.scala 20:58]
      node T_2470 = bits(T_2446, 0, 0) @[Cache.scala 95:20]
      node T_2472 = eq(T_2470, UInt<1>("h00")) @[Cache.scala 96:43]
      node T_2474 = dshl(UInt<1>("h01"), T_2469) @[Cache.scala 96:37]
      node T_2475 = or(T_2468, T_2474) @[Cache.scala 96:37]
      node T_2476 = not(T_2468) @[Cache.scala 96:37]
      node T_2477 = or(T_2476, T_2474) @[Cache.scala 96:37]
      node T_2478 = not(T_2477) @[Cache.scala 96:37]
      node T_2479 = mux(T_2472, T_2475, T_2478) @[Cache.scala 96:37]
      node T_2480 = cat(T_2469, T_2470) @[Cat.scala 20:58]
      T_2340 <= T_2479 @[Cache.scala 89:15]
      skip @[ptw.scala 123:35]
    when io.dpath.invalidate : @[ptw.scala 124:32]
      T_2342 <= UInt<1>("h00") @[ptw.scala 124:40]
      skip @[ptw.scala 124:32]
    node T_2483 = lt(count, UInt<2>("h02")) @[ptw.scala 126:19]
    node pte_cache_hit = and(T_2376, T_2483) @[ptw.scala 126:10]
    node T_2484 = bits(T_2374, 0, 0) @[Mux.scala 20:36]
    node T_2485 = bits(T_2374, 1, 1) @[Mux.scala 20:36]
    node T_2486 = bits(T_2374, 2, 2) @[Mux.scala 20:36]
    node T_2487 = bits(T_2374, 3, 3) @[Mux.scala 20:36]
    node T_2488 = bits(T_2374, 4, 4) @[Mux.scala 20:36]
    node T_2489 = bits(T_2374, 5, 5) @[Mux.scala 20:36]
    node T_2490 = bits(T_2374, 6, 6) @[Mux.scala 20:36]
    node T_2491 = bits(T_2374, 7, 7) @[Mux.scala 20:36]
    node T_2493 = mux(T_2484, T_2357[0], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2495 = mux(T_2485, T_2357[1], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2497 = mux(T_2486, T_2357[2], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2499 = mux(T_2487, T_2357[3], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2501 = mux(T_2488, T_2357[4], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2503 = mux(T_2489, T_2357[5], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2505 = mux(T_2490, T_2357[6], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2507 = mux(T_2491, T_2357[7], UInt<1>("h00")) @[Mux.scala 18:72]
    node T_2509 = or(T_2493, T_2495) @[Mux.scala 18:72]
    node T_2510 = or(T_2509, T_2497) @[Mux.scala 18:72]
    node T_2511 = or(T_2510, T_2499) @[Mux.scala 18:72]
    node T_2512 = or(T_2511, T_2501) @[Mux.scala 18:72]
    node T_2513 = or(T_2512, T_2503) @[Mux.scala 18:72]
    node T_2514 = or(T_2513, T_2505) @[Mux.scala 18:72]
    node T_2515 = or(T_2514, T_2507) @[Mux.scala 18:72]
    wire pte_cache_data : UInt<20>
    pte_cache_data is invalid
    pte_cache_data <= T_2515 @[Mux.scala 18:72]
    wire T_2541 : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[ptw.scala 129:47]
    T_2541 is invalid @[ptw.scala 129:47]
    wire T_2554 : UInt<64>
    T_2554 is invalid
    T_2554 <= UInt<1>("h00")
    node T_2555 = bits(T_2554, 0, 0) @[ptw.scala 129:47]
    T_2541.v <= T_2555 @[ptw.scala 129:47]
    node T_2556 = bits(T_2554, 1, 1) @[ptw.scala 129:47]
    T_2541.r <= T_2556 @[ptw.scala 129:47]
    node T_2557 = bits(T_2554, 2, 2) @[ptw.scala 129:47]
    T_2541.w <= T_2557 @[ptw.scala 129:47]
    node T_2558 = bits(T_2554, 3, 3) @[ptw.scala 129:47]
    T_2541.x <= T_2558 @[ptw.scala 129:47]
    node T_2559 = bits(T_2554, 4, 4) @[ptw.scala 129:47]
    T_2541.u <= T_2559 @[ptw.scala 129:47]
    node T_2560 = bits(T_2554, 5, 5) @[ptw.scala 129:47]
    T_2541.g <= T_2560 @[ptw.scala 129:47]
    node T_2561 = bits(T_2554, 6, 6) @[ptw.scala 129:47]
    T_2541.a <= T_2561 @[ptw.scala 129:47]
    node T_2562 = bits(T_2554, 7, 7) @[ptw.scala 129:47]
    T_2541.d <= T_2562 @[ptw.scala 129:47]
    node T_2563 = bits(T_2554, 9, 8) @[ptw.scala 129:47]
    T_2541.reserved_for_software <= T_2563 @[ptw.scala 129:47]
    node T_2564 = bits(T_2554, 47, 10) @[ptw.scala 129:47]
    T_2541.ppn <= T_2564 @[ptw.scala 129:47]
    node T_2565 = bits(T_2554, 63, 48) @[ptw.scala 129:47]
    T_2541.reserved_for_hardware <= T_2565 @[ptw.scala 129:47]
    wire pte_wdata : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}
    pte_wdata is invalid
    pte_wdata <- T_2541
    pte_wdata.a <= UInt<1>("h01") @[ptw.scala 130:15]
    pte_wdata.d <= r_req.store @[ptw.scala 131:15]
    node T_2578 = eq(state, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2579 = eq(state, UInt<3>("h04")) @[Package.scala 7:47]
    node T_2580 = or(T_2578, T_2579) @[Package.scala 7:62]
    io.mem.req.valid <= T_2580 @[ptw.scala 133:24]
    io.mem.req.bits.phys <= UInt<1>("h01") @[ptw.scala 134:24]
    node T_2582 = eq(state, UInt<3>("h04")) @[ptw.scala 135:37]
    node T_2583 = mux(T_2582, UInt<5>("h0a"), UInt<5>("h00")) @[ptw.scala 135:30]
    io.mem.req.bits.cmd <= T_2583 @[ptw.scala 135:24]
    io.mem.req.bits.typ <= UInt<2>("h03") @[ptw.scala 136:24]
    io.mem.req.bits.addr <= pte_addr @[ptw.scala 137:24]
    node T_2585 = cat(pte_wdata.r, pte_wdata.v) @[ptw.scala 138:31]
    node T_2586 = cat(pte_wdata.u, pte_wdata.x) @[ptw.scala 138:31]
    node T_2587 = cat(T_2586, pte_wdata.w) @[ptw.scala 138:31]
    node T_2588 = cat(T_2587, T_2585) @[ptw.scala 138:31]
    node T_2589 = cat(pte_wdata.d, pte_wdata.a) @[ptw.scala 138:31]
    node T_2590 = cat(T_2589, pte_wdata.g) @[ptw.scala 138:31]
    node T_2591 = cat(pte_wdata.reserved_for_hardware, pte_wdata.ppn) @[ptw.scala 138:31]
    node T_2592 = cat(T_2591, pte_wdata.reserved_for_software) @[ptw.scala 138:31]
    node T_2593 = cat(T_2592, T_2590) @[ptw.scala 138:31]
    node T_2594 = cat(T_2593, T_2588) @[ptw.scala 138:31]
    io.mem.s1_data <= T_2594 @[ptw.scala 138:18]
    io.mem.s1_kill <= s1_kill @[ptw.scala 139:18]
    io.mem.invalidate_lr <= UInt<1>("h00") @[ptw.scala 140:24]
    node T_2596 = shr(pte_addr, 30) @[ptw.scala 142:62]
    node T_2597 = bits(r_req.addr, 17, 0) @[ptw.scala 142:117]
    node resp_ppns_0 = cat(T_2596, T_2597) @[Cat.scala 20:58]
    node T_2598 = shr(pte_addr, 21) @[ptw.scala 142:62]
    node T_2599 = bits(r_req.addr, 8, 0) @[ptw.scala 142:117]
    node resp_ppns_1 = cat(T_2598, T_2599) @[Cat.scala 20:58]
    node resp_ppns_2 = shr(pte_addr, 12) @[ptw.scala 142:165]
    node T_2600 = eq(state, UInt<3>("h07")) @[ptw.scala 144:41]
    node T_2602 = eq(r_req_dest, UInt<1>("h00")) @[ptw.scala 144:67]
    node T_2603 = and(T_2600, T_2602) @[ptw.scala 144:52]
    io.requestor[0].resp.valid <= T_2603 @[ptw.scala 144:32]
    io.requestor[0].resp.bits.pte <- r_pte @[ptw.scala 145:35]
    node T_2605 = and(count, UInt<1>("h01")) @[Package.scala 18:26]
    node T_2607 = geq(count, UInt<2>("h02")) @[Package.scala 19:17]
    node T_2609 = and(T_2605, UInt<1>("h00")) @[Package.scala 18:26]
    node T_2611 = geq(T_2605, UInt<1>("h01")) @[Package.scala 19:17]
    node T_2612 = mux(T_2611, resp_ppns_1, resp_ppns_0) @[Package.scala 19:12]
    node T_2613 = mux(T_2607, resp_ppns_2, T_2612) @[Package.scala 19:12]
    io.requestor[0].resp.bits.pte.ppn <= T_2613 @[ptw.scala 146:39]
    io.requestor[0].ptbr <- io.dpath.ptbr @[ptw.scala 147:26]
    io.requestor[0].invalidate <= io.dpath.invalidate @[ptw.scala 148:32]
    io.requestor[0].status <- io.dpath.status @[ptw.scala 149:28]
    node T_2614 = eq(state, UInt<3>("h07")) @[ptw.scala 144:41]
    node T_2616 = eq(r_req_dest, UInt<1>("h01")) @[ptw.scala 144:67]
    node T_2617 = and(T_2614, T_2616) @[ptw.scala 144:52]
    io.requestor[1].resp.valid <= T_2617 @[ptw.scala 144:32]
    io.requestor[1].resp.bits.pte <- r_pte @[ptw.scala 145:35]
    node T_2619 = and(count, UInt<1>("h01")) @[Package.scala 18:26]
    node T_2621 = geq(count, UInt<2>("h02")) @[Package.scala 19:17]
    node T_2623 = and(T_2619, UInt<1>("h00")) @[Package.scala 18:26]
    node T_2625 = geq(T_2619, UInt<1>("h01")) @[Package.scala 19:17]
    node T_2626 = mux(T_2625, resp_ppns_1, resp_ppns_0) @[Package.scala 19:12]
    node T_2627 = mux(T_2621, resp_ppns_2, T_2626) @[Package.scala 19:12]
    io.requestor[1].resp.bits.pte.ppn <= T_2627 @[ptw.scala 146:39]
    io.requestor[1].ptbr <- io.dpath.ptbr @[ptw.scala 147:26]
    io.requestor[1].invalidate <= io.dpath.invalidate @[ptw.scala 148:32]
    io.requestor[1].status <- io.dpath.status @[ptw.scala 149:28]
    node T_2628 = eq(UInt<3>("h00"), state) @[Conditional.scala 24:42]
    when T_2628 : @[Conditional.scala 24:73]
      when arb.io.out.valid : @[ptw.scala 155:31]
        state <= UInt<3>("h01") @[ptw.scala 156:15]
        skip @[ptw.scala 155:31]
      count <= UInt<1>("h00") @[ptw.scala 158:13]
      skip @[Conditional.scala 24:73]
    node T_2630 = eq(UInt<3>("h01"), state) @[Conditional.scala 24:42]
    when T_2630 : @[Conditional.scala 24:73]
      when pte_cache_hit : @[ptw.scala 161:28]
        s1_kill <= UInt<1>("h01") @[ptw.scala 162:17]
        state <= UInt<3>("h01") @[ptw.scala 163:15]
        node T_2633 = add(count, UInt<1>("h01")) @[ptw.scala 164:24]
        node T_2634 = tail(T_2633, 1) @[ptw.scala 164:24]
        count <= T_2634 @[ptw.scala 164:15]
        r_pte.ppn <= pte_cache_data @[ptw.scala 165:19]
        skip @[ptw.scala 161:28]
      node T_2636 = eq(pte_cache_hit, UInt<1>("h00")) @[ptw.scala 161:28]
      node T_2637 = and(T_2636, io.mem.req.ready) @[ptw.scala 166:37]
      when T_2637 : @[ptw.scala 166:37]
        state <= UInt<3>("h02") @[ptw.scala 167:15]
        skip @[ptw.scala 166:37]
      skip @[Conditional.scala 24:73]
    node T_2638 = eq(UInt<3>("h02"), state) @[Conditional.scala 24:42]
    when T_2638 : @[Conditional.scala 24:73]
      state <= UInt<3>("h03") @[ptw.scala 171:13]
      when io.mem.xcpt.pf.ld : @[ptw.scala 172:32]
        r_pte.v <= UInt<1>("h00") @[ptw.scala 173:17]
        state <= UInt<3>("h07") @[ptw.scala 174:15]
        skip @[ptw.scala 172:32]
      skip @[Conditional.scala 24:73]
    node T_2640 = eq(UInt<3>("h03"), state) @[Conditional.scala 24:42]
    when T_2640 : @[Conditional.scala 24:73]
      when io.mem.s2_nack : @[ptw.scala 178:29]
        state <= UInt<3>("h01") @[ptw.scala 179:15]
        skip @[ptw.scala 178:29]
      when io.mem.resp.valid : @[ptw.scala 181:32]
        state <= UInt<3>("h07") @[ptw.scala 182:15]
        node T_2641 = and(pte.x, r_req.mxr) @[ptw.scala 62:63]
        node T_2642 = or(pte.r, T_2641) @[ptw.scala 62:57]
        node T_2643 = mux(r_req.store, pte.w, T_2642) @[ptw.scala 62:40]
        node T_2644 = mux(r_req.fetch, pte.x, T_2643) @[ptw.scala 62:22]
        node T_2646 = eq(r_req.pum, UInt<1>("h00")) @[ptw.scala 63:26]
        node T_2647 = bits(r_req.prv, 0, 0) @[ptw.scala 63:43]
        node T_2648 = mux(pte.u, T_2646, T_2647) @[ptw.scala 63:22]
        node T_2650 = eq(pte.w, UInt<1>("h00")) @[ptw.scala 53:47]
        node T_2651 = and(pte.x, T_2650) @[ptw.scala 53:44]
        node T_2652 = or(pte.r, T_2651) @[ptw.scala 53:38]
        node T_2653 = and(pte.v, T_2652) @[ptw.scala 53:32]
        node T_2654 = and(T_2653, T_2648) @[ptw.scala 64:12]
        node T_2655 = and(T_2654, T_2644) @[ptw.scala 64:23]
        node T_2657 = eq(pte.a, UInt<1>("h00")) @[ptw.scala 183:40]
        node T_2659 = eq(pte.d, UInt<1>("h00")) @[ptw.scala 183:66]
        node T_2660 = and(r_req.store, T_2659) @[ptw.scala 183:63]
        node T_2661 = or(T_2657, T_2660) @[ptw.scala 183:47]
        node T_2662 = and(T_2655, T_2661) @[ptw.scala 183:36]
        when T_2662 : @[ptw.scala 183:76]
          state <= UInt<3>("h04") @[ptw.scala 184:17]
          skip @[ptw.scala 183:76]
        node T_2664 = eq(T_2662, UInt<1>("h00")) @[ptw.scala 183:76]
        when T_2664 : @[ptw.scala 185:21]
          r_pte <- pte @[ptw.scala 186:17]
          skip @[ptw.scala 185:21]
        node T_2666 = eq(pte.r, UInt<1>("h00")) @[ptw.scala 52:36]
        node T_2667 = and(pte.v, T_2666) @[ptw.scala 52:33]
        node T_2669 = eq(pte.w, UInt<1>("h00")) @[ptw.scala 52:42]
        node T_2670 = and(T_2667, T_2669) @[ptw.scala 52:39]
        node T_2672 = eq(pte.x, UInt<1>("h00")) @[ptw.scala 52:48]
        node T_2673 = and(T_2670, T_2672) @[ptw.scala 52:45]
        node T_2675 = lt(count, UInt<2>("h02")) @[ptw.scala 188:36]
        node T_2676 = and(T_2673, T_2675) @[ptw.scala 188:27]
        when T_2676 : @[ptw.scala 188:50]
          state <= UInt<3>("h01") @[ptw.scala 189:17]
          node T_2678 = add(count, UInt<1>("h01")) @[ptw.scala 190:26]
          node T_2679 = tail(T_2678, 1) @[ptw.scala 190:26]
          count <= T_2679 @[ptw.scala 190:17]
          skip @[ptw.scala 188:50]
        skip @[ptw.scala 181:32]
      skip @[Conditional.scala 24:73]
    node T_2680 = eq(UInt<3>("h04"), state) @[Conditional.scala 24:42]
    when T_2680 : @[Conditional.scala 24:73]
      when io.mem.req.ready : @[ptw.scala 195:31]
        state <= UInt<3>("h05") @[ptw.scala 196:15]
        skip @[ptw.scala 195:31]
      skip @[Conditional.scala 24:73]
    node T_2681 = eq(UInt<3>("h05"), state) @[Conditional.scala 24:42]
    when T_2681 : @[Conditional.scala 24:73]
      state <= UInt<3>("h06") @[ptw.scala 200:13]
      when io.mem.xcpt.pf.st : @[ptw.scala 201:32]
        r_pte.v <= UInt<1>("h00") @[ptw.scala 202:17]
        state <= UInt<3>("h07") @[ptw.scala 203:15]
        skip @[ptw.scala 201:32]
      skip @[Conditional.scala 24:73]
    node T_2683 = eq(UInt<3>("h06"), state) @[Conditional.scala 24:42]
    when T_2683 : @[Conditional.scala 24:73]
      when io.mem.s2_nack : @[ptw.scala 207:29]
        state <= UInt<3>("h04") @[ptw.scala 208:15]
        skip @[ptw.scala 207:29]
      when io.mem.resp.valid : @[ptw.scala 210:32]
        state <= UInt<3>("h01") @[ptw.scala 211:15]
        skip @[ptw.scala 210:32]
      skip @[Conditional.scala 24:73]
    node T_2684 = eq(UInt<3>("h07"), state) @[Conditional.scala 24:42]
    when T_2684 : @[Conditional.scala 24:73]
      state <= UInt<3>("h00") @[ptw.scala 215:13]
      skip @[Conditional.scala 24:73]
    
  module HellaCacheArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip requestor : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}[2], mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<7>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}}
    
    io is invalid
    reg T_6368 : UInt, clk
    reg T_6369 : UInt, clk
    T_6369 <= T_6368
    node T_6370 = or(io.requestor[0].invalidate_lr, io.requestor[1].invalidate_lr) @[arbiter.scala 22:71]
    io.mem.invalidate_lr <= T_6370 @[arbiter.scala 22:26]
    node T_6371 = or(io.requestor[0].req.valid, io.requestor[1].req.valid) @[arbiter.scala 23:63]
    io.mem.req.valid <= T_6371 @[arbiter.scala 23:22]
    io.requestor[0].req.ready <= io.mem.req.ready @[arbiter.scala 24:31]
    node T_6373 = eq(io.requestor[0].req.valid, UInt<1>("h00")) @[arbiter.scala 26:67]
    node T_6374 = and(io.requestor[0].req.ready, T_6373) @[arbiter.scala 26:64]
    io.requestor[1].req.ready <= T_6374 @[arbiter.scala 26:33]
    io.mem.req.bits.cmd <= io.requestor[1].req.bits.cmd @[arbiter.scala 31:29]
    io.mem.req.bits.typ <= io.requestor[1].req.bits.typ @[arbiter.scala 32:29]
    io.mem.req.bits.addr <= io.requestor[1].req.bits.addr @[arbiter.scala 33:30]
    io.mem.req.bits.phys <= io.requestor[1].req.bits.phys @[arbiter.scala 34:30]
    node T_6376 = cat(io.requestor[1].req.bits.tag, UInt<1>("h01")) @[Cat.scala 20:58]
    io.mem.req.bits.tag <= T_6376 @[arbiter.scala 35:29]
    T_6368 <= UInt<1>("h01") @[arbiter.scala 36:15]
    io.mem.s1_kill <= io.requestor[1].s1_kill @[arbiter.scala 39:24]
    io.mem.s1_data <= io.requestor[1].s1_data @[arbiter.scala 40:24]
    when io.requestor[0].req.valid : @[arbiter.scala 47:26]
      io.mem.req.bits.cmd <= io.requestor[0].req.bits.cmd @[arbiter.scala 31:29]
      io.mem.req.bits.typ <= io.requestor[0].req.bits.typ @[arbiter.scala 32:29]
      io.mem.req.bits.addr <= io.requestor[0].req.bits.addr @[arbiter.scala 33:30]
      io.mem.req.bits.phys <= io.requestor[0].req.bits.phys @[arbiter.scala 34:30]
      node T_6379 = cat(io.requestor[0].req.bits.tag, UInt<1>("h00")) @[Cat.scala 20:58]
      io.mem.req.bits.tag <= T_6379 @[arbiter.scala 35:29]
      T_6368 <= UInt<1>("h00") @[arbiter.scala 36:15]
      skip @[arbiter.scala 47:26]
    node T_6382 = eq(T_6368, UInt<1>("h00")) @[arbiter.scala 48:21]
    when T_6382 : @[arbiter.scala 48:34]
      io.mem.s1_kill <= io.requestor[0].s1_kill @[arbiter.scala 39:24]
      io.mem.s1_data <= io.requestor[0].s1_data @[arbiter.scala 40:24]
      skip @[arbiter.scala 48:34]
    node T_6383 = bits(io.mem.resp.bits.tag, 0, 0) @[arbiter.scala 54:41]
    node T_6385 = eq(T_6383, UInt<1>("h00")) @[arbiter.scala 54:57]
    node T_6386 = and(io.mem.resp.valid, T_6385) @[arbiter.scala 55:39]
    io.requestor[0].resp.valid <= T_6386 @[arbiter.scala 55:18]
    io.requestor[0].xcpt <- io.mem.xcpt @[arbiter.scala 56:28]
    io.requestor[0].ordered <= io.mem.ordered @[arbiter.scala 57:31]
    node T_6388 = eq(T_6369, UInt<1>("h00")) @[arbiter.scala 58:58]
    node T_6389 = and(io.mem.s2_nack, T_6388) @[arbiter.scala 58:49]
    io.requestor[0].s2_nack <= T_6389 @[arbiter.scala 58:31]
    io.requestor[0].resp.bits <- io.mem.resp.bits @[arbiter.scala 59:17]
    node T_6390 = shr(io.mem.resp.bits.tag, 1) @[arbiter.scala 60:45]
    io.requestor[0].resp.bits.tag <= T_6390 @[arbiter.scala 60:21]
    io.requestor[0].replay_next <= io.mem.replay_next @[arbiter.scala 62:35]
    node T_6391 = bits(io.mem.resp.bits.tag, 0, 0) @[arbiter.scala 54:41]
    node T_6393 = eq(T_6391, UInt<1>("h01")) @[arbiter.scala 54:57]
    node T_6394 = and(io.mem.resp.valid, T_6393) @[arbiter.scala 55:39]
    io.requestor[1].resp.valid <= T_6394 @[arbiter.scala 55:18]
    io.requestor[1].xcpt <- io.mem.xcpt @[arbiter.scala 56:28]
    io.requestor[1].ordered <= io.mem.ordered @[arbiter.scala 57:31]
    node T_6396 = eq(T_6369, UInt<1>("h01")) @[arbiter.scala 58:58]
    node T_6397 = and(io.mem.s2_nack, T_6396) @[arbiter.scala 58:49]
    io.requestor[1].s2_nack <= T_6397 @[arbiter.scala 58:31]
    io.requestor[1].resp.bits <- io.mem.resp.bits @[arbiter.scala 59:17]
    node T_6398 = shr(io.mem.resp.bits.tag, 1) @[arbiter.scala 60:45]
    io.requestor[1].resp.bits.tag <= T_6398 @[arbiter.scala 60:21]
    io.requestor[1].replay_next <= io.mem.replay_next @[arbiter.scala 62:35]
    
  module RocketTile : 
    input clk : Clock
    input reset : UInt<1>
    output io : {cached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}[1], uncached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], flip hartid : UInt<64>, flip interrupts : {debug : UInt<1>, mtip : UInt<1>, msip : UInt<1>, meip : UInt<1>, seip : UInt<1>}}
    
    io is invalid
    inst core of Rocket @[tile.scala 49:20]
    core.io is invalid
    core.clk <= clk
    core.reset <= reset
    inst icache of Frontend @[tile.scala 50:22]
    icache.io is invalid
    icache.clk <= clk
    icache.reset <= reset
    inst DCache_1 of DCache @[nbdcache.scala 1240:32]
    DCache_1.io is invalid
    DCache_1.clk <= clk
    DCache_1.reset <= reset
    core.io.interrupts <- io.interrupts @[tile.scala 58:22]
    core.io.hartid <= io.hartid @[tile.scala 59:18]
    icache.io.cpu <- core.io.imem @[tile.scala 60:17]
    inst fpuOpt of FPU @[tile.scala 62:43]
    fpuOpt.io is invalid
    fpuOpt.clk <= clk
    fpuOpt.reset <= reset
    core.io.fpu <- fpuOpt.io @[tile.scala 63:37]
    inst uncachedArb of ClientUncachedTileLinkIOArbiter @[tile.scala 110:27]
    uncachedArb.io is invalid
    uncachedArb.clk <= clk
    uncachedArb.reset <= reset
    uncachedArb.io.in[0] <- icache.io.mem @[tile.scala 111:21]
    io.uncached[0] <- uncachedArb.io.out @[tile.scala 115:15]
    io.cached[0] <- DCache_1.io.mem @[tile.scala 116:13]
    inst PTW_1 of PTW @[tile.scala 122:21]
    PTW_1.io is invalid
    PTW_1.clk <= clk
    PTW_1.reset <= reset
    PTW_1.io.requestor[0] <- icache.io.ptw @[tile.scala 123:22]
    PTW_1.io.requestor[1] <- DCache_1.io.ptw @[tile.scala 123:22]
    core.io.ptw <- PTW_1.io.dpath @[tile.scala 125:17]
    inst dcArb of HellaCacheArbiter @[tile.scala 135:21]
    dcArb.io is invalid
    dcArb.clk <= clk
    dcArb.reset <= reset
    dcArb.io.requestor[0] <- PTW_1.io.mem @[tile.scala 136:22]
    dcArb.io.requestor[1] <- core.io.dmem @[tile.scala 136:22]
    DCache_1.io.cpu <- dcArb.io.mem @[tile.scala 137:14]
    fpuOpt.io.cp_req.valid <= UInt<1>("h00") @[tile.scala 141:27]
    fpuOpt.io.cp_resp.ready <= UInt<1>("h00") @[tile.scala 142:28]
    
  module Queue_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}[1] @[Decoupled.scala 175:16]
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 180:33]
    node T_1022 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_1022) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_1023 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_1023
    node T_1024 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_1024
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_1025 = ram[UInt<1>("h00")], clk
      T_1025 <- io.enq.bits @[Decoupled.scala 187:24]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      skip @[Decoupled.scala 190:17]
    node T_1139 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_1139 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_1141 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_1141 @[Decoupled.scala 197:16]
    node T_1143 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_1143 @[Decoupled.scala 198:16]
    infer mport T_1144 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_1144 @[Decoupled.scala 199:15]
    node T_1256 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_1256, 1) @[Decoupled.scala 214:32]
    node T_1257 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_1258 = cat(T_1257, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_1258 @[Decoupled.scala 216:14]
    
  module Queue_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}[1] @[Decoupled.scala 175:16]
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 180:33]
    node T_977 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_977) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_978 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_978
    node T_979 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_979
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_980 = ram[UInt<1>("h00")], clk
      T_980 <- io.enq.bits @[Decoupled.scala 187:24]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      skip @[Decoupled.scala 190:17]
    node T_1089 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_1089 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_1091 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_1091 @[Decoupled.scala 197:16]
    node T_1093 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_1093 @[Decoupled.scala 198:16]
    infer mport T_1094 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_1094 @[Decoupled.scala 199:15]
    node T_1201 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_1201, 1) @[Decoupled.scala 214:32]
    node T_1202 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_1203 = cat(T_1202, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_1203 @[Decoupled.scala 216:14]
    
  module Queue_4 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}[2] @[Decoupled.scala 175:16]
    reg T_1010 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_1012 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_1010, T_1012) @[Decoupled.scala 180:33]
    node T_1015 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_1015) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_1016 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_1016
    node T_1017 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_1017
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_1018 = ram[T_1010], clk
      T_1018 <- io.enq.bits @[Decoupled.scala 187:24]
      node T_1130 = eq(T_1010, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_1132 = add(T_1010, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1133 = tail(T_1132, 1) @[Counter.scala 21:22]
      T_1010 <= T_1133 @[Counter.scala 21:13]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      node T_1135 = eq(T_1012, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_1137 = add(T_1012, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1138 = tail(T_1137, 1) @[Counter.scala 21:22]
      T_1012 <= T_1138 @[Counter.scala 21:13]
      skip @[Decoupled.scala 190:17]
    node T_1139 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_1139 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_1141 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_1141 @[Decoupled.scala 197:16]
    node T_1143 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_1143 @[Decoupled.scala 198:16]
    infer mport T_1144 = ram[T_1012], clk
    io.deq.bits <- T_1144 @[Decoupled.scala 199:15]
    node T_1255 = sub(T_1010, T_1012) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_1255, 1) @[Decoupled.scala 214:32]
    node T_1256 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_1257 = cat(T_1256, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_1257 @[Decoupled.scala 216:14]
    
  module Queue_5 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}[2] @[Decoupled.scala 175:16]
    reg T_1010 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_1012 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_1010, T_1012) @[Decoupled.scala 180:33]
    node T_1015 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_1015) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_1016 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_1016
    node T_1017 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_1017
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_1018 = ram[T_1010], clk
      T_1018 <- io.enq.bits @[Decoupled.scala 187:24]
      node T_1130 = eq(T_1010, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_1132 = add(T_1010, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1133 = tail(T_1132, 1) @[Counter.scala 21:22]
      T_1010 <= T_1133 @[Counter.scala 21:13]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      node T_1135 = eq(T_1012, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_1137 = add(T_1012, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1138 = tail(T_1137, 1) @[Counter.scala 21:22]
      T_1012 <= T_1138 @[Counter.scala 21:13]
      skip @[Decoupled.scala 190:17]
    node T_1139 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_1139 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_1141 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_1141 @[Decoupled.scala 197:16]
    node T_1143 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_1143 @[Decoupled.scala 198:16]
    infer mport T_1144 = ram[T_1012], clk
    io.deq.bits <- T_1144 @[Decoupled.scala 199:15]
    node T_1255 = sub(T_1010, T_1012) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_1255, 1) @[Decoupled.scala 214:32]
    node T_1256 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_1257 = cat(T_1256, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_1257 @[Decoupled.scala 216:14]
    
  module TileLinkEnqueuer : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}, manager : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    inst Queue_2_1 of Queue_2 @[Decoupled.scala 241:19]
    Queue_2_1.io is invalid
    Queue_2_1.clk <= clk
    Queue_2_1.reset <= reset
    Queue_2_1.io.enq.valid <= io.client.acquire.valid @[Decoupled.scala 242:20]
    Queue_2_1.io.enq.bits <- io.client.acquire.bits @[Decoupled.scala 243:19]
    io.client.acquire.ready <= Queue_2_1.io.enq.ready @[Decoupled.scala 244:15]
    io.manager.acquire <- Queue_2_1.io.deq @[Enqueuer.scala 17:22]
    inst Queue_3_1 of Queue_3 @[Decoupled.scala 241:19]
    Queue_3_1.io is invalid
    Queue_3_1.clk <= clk
    Queue_3_1.reset <= reset
    Queue_3_1.io.enq.valid <= io.manager.probe.valid @[Decoupled.scala 242:20]
    Queue_3_1.io.enq.bits <- io.manager.probe.bits @[Decoupled.scala 243:19]
    io.manager.probe.ready <= Queue_3_1.io.enq.ready @[Decoupled.scala 244:15]
    io.client.probe <- Queue_3_1.io.deq @[Enqueuer.scala 18:22]
    inst Queue_4_1 of Queue_4 @[Decoupled.scala 241:19]
    Queue_4_1.io is invalid
    Queue_4_1.clk <= clk
    Queue_4_1.reset <= reset
    Queue_4_1.io.enq.valid <= io.client.release.valid @[Decoupled.scala 242:20]
    Queue_4_1.io.enq.bits <- io.client.release.bits @[Decoupled.scala 243:19]
    io.client.release.ready <= Queue_4_1.io.enq.ready @[Decoupled.scala 244:15]
    io.manager.release <- Queue_4_1.io.deq @[Enqueuer.scala 19:22]
    inst Queue_5_1 of Queue_5 @[Decoupled.scala 241:19]
    Queue_5_1.io is invalid
    Queue_5_1.clk <= clk
    Queue_5_1.reset <= reset
    Queue_5_1.io.enq.valid <= io.manager.grant.valid @[Decoupled.scala 242:20]
    Queue_5_1.io.enq.bits <- io.manager.grant.bits @[Decoupled.scala 243:19]
    io.manager.grant.ready <= Queue_5_1.io.enq.ready @[Decoupled.scala 244:15]
    io.client.grant <- Queue_5_1.io.deq @[Enqueuer.scala 20:22]
    io.manager.finish <- io.client.finish @[Enqueuer.scala 21:22]
    
  module ClientTileLinkNetworkPort : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}, network : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    wire acq_with_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}} @[Network.scala 259:19]
    acq_with_header is invalid @[Network.scala 259:19]
    acq_with_header.bits.payload <- io.client.acquire.bits @[Network.scala 260:22]
    acq_with_header.bits.header.src <= UInt<1>("h00") @[Network.scala 261:25]
    node T_3894 = shl(io.client.acquire.bits.addr_block, 6) @[Coreplex.scala 91:59]
    node T_3896 = leq(UInt<32>("h080000000"), T_3894) @[addrmap.scala 26:46]
    node T_3898 = lt(T_3894, UInt<32>("h090000000")) @[addrmap.scala 26:56]
    node T_3899 = and(T_3896, T_3898) @[addrmap.scala 26:51]
    node T_3902 = mux(T_3899, UInt<1>("h00"), UInt<1>("h01")) @[Coreplex.scala 92:10]
    acq_with_header.bits.header.dst <= T_3902 @[Network.scala 262:25]
    acq_with_header.valid <= io.client.acquire.valid @[Network.scala 263:15]
    io.client.acquire.ready <= acq_with_header.ready @[Network.scala 264:14]
    wire rel_with_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 259:19]
    rel_with_header is invalid @[Network.scala 259:19]
    rel_with_header.bits.payload <- io.client.release.bits @[Network.scala 260:22]
    rel_with_header.bits.header.src <= UInt<1>("h00") @[Network.scala 261:25]
    node T_4464 = shl(io.client.release.bits.addr_block, 6) @[Coreplex.scala 91:59]
    node T_4466 = leq(UInt<32>("h080000000"), T_4464) @[addrmap.scala 26:46]
    node T_4468 = lt(T_4464, UInt<32>("h090000000")) @[addrmap.scala 26:56]
    node T_4469 = and(T_4466, T_4468) @[addrmap.scala 26:51]
    node T_4472 = mux(T_4469, UInt<1>("h00"), UInt<1>("h01")) @[Coreplex.scala 92:10]
    rel_with_header.bits.header.dst <= T_4472 @[Network.scala 262:25]
    rel_with_header.valid <= io.client.release.valid @[Network.scala 263:15]
    io.client.release.ready <= rel_with_header.ready @[Network.scala 264:14]
    wire fin_with_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}} @[Network.scala 246:19]
    fin_with_header is invalid @[Network.scala 246:19]
    fin_with_header.bits.payload <- io.client.finish.bits @[Network.scala 247:22]
    fin_with_header.bits.header.src <= UInt<1>("h00") @[Network.scala 248:25]
    fin_with_header.bits.header.dst <= io.client.finish.bits.manager_id @[Network.scala 249:25]
    fin_with_header.valid <= io.client.finish.valid @[Network.scala 250:15]
    io.client.finish.ready <= fin_with_header.ready @[Network.scala 251:14]
    wire prb_without_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}} @[Network.scala 94:19]
    prb_without_header is invalid @[Network.scala 94:19]
    prb_without_header.valid <= io.network.probe.valid @[Network.scala 95:15]
    prb_without_header.bits <- io.network.probe.bits.payload @[Network.scala 96:14]
    io.network.probe.ready <= prb_without_header.ready @[Network.scala 97:14]
    wire gnt_without_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}} @[Network.scala 94:19]
    gnt_without_header is invalid @[Network.scala 94:19]
    gnt_without_header.valid <= io.network.grant.valid @[Network.scala 95:15]
    gnt_without_header.bits <- io.network.grant.bits.payload @[Network.scala 96:14]
    io.network.grant.ready <= gnt_without_header.ready @[Network.scala 97:14]
    io.network.acquire <- acq_with_header @[Network.scala 202:22]
    io.network.release <- rel_with_header @[Network.scala 203:22]
    io.network.finish <- fin_with_header @[Network.scala 204:21]
    io.client.probe <- prb_without_header @[Network.scala 205:19]
    io.client.grant.bits.manager_id <= io.network.grant.bits.header.src @[Network.scala 206:35]
    io.client.grant <- gnt_without_header @[Network.scala 207:19]
    
  module TileLinkEnqueuer_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}, manager : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    inst Queue_6_1 of Queue_2 @[Decoupled.scala 241:19]
    Queue_6_1.io is invalid
    Queue_6_1.clk <= clk
    Queue_6_1.reset <= reset
    Queue_6_1.io.enq.valid <= io.client.acquire.valid @[Decoupled.scala 242:20]
    Queue_6_1.io.enq.bits <- io.client.acquire.bits @[Decoupled.scala 243:19]
    io.client.acquire.ready <= Queue_6_1.io.enq.ready @[Decoupled.scala 244:15]
    io.manager.acquire <- Queue_6_1.io.deq @[Enqueuer.scala 17:22]
    inst Queue_7_1 of Queue_3 @[Decoupled.scala 241:19]
    Queue_7_1.io is invalid
    Queue_7_1.clk <= clk
    Queue_7_1.reset <= reset
    Queue_7_1.io.enq.valid <= io.manager.probe.valid @[Decoupled.scala 242:20]
    Queue_7_1.io.enq.bits <- io.manager.probe.bits @[Decoupled.scala 243:19]
    io.manager.probe.ready <= Queue_7_1.io.enq.ready @[Decoupled.scala 244:15]
    io.client.probe <- Queue_7_1.io.deq @[Enqueuer.scala 18:22]
    inst Queue_8_1 of Queue_4 @[Decoupled.scala 241:19]
    Queue_8_1.io is invalid
    Queue_8_1.clk <= clk
    Queue_8_1.reset <= reset
    Queue_8_1.io.enq.valid <= io.client.release.valid @[Decoupled.scala 242:20]
    Queue_8_1.io.enq.bits <- io.client.release.bits @[Decoupled.scala 243:19]
    io.client.release.ready <= Queue_8_1.io.enq.ready @[Decoupled.scala 244:15]
    io.manager.release <- Queue_8_1.io.deq @[Enqueuer.scala 19:22]
    inst Queue_9_1 of Queue_5 @[Decoupled.scala 241:19]
    Queue_9_1.io is invalid
    Queue_9_1.clk <= clk
    Queue_9_1.reset <= reset
    Queue_9_1.io.enq.valid <= io.manager.grant.valid @[Decoupled.scala 242:20]
    Queue_9_1.io.enq.bits <- io.manager.grant.bits @[Decoupled.scala 243:19]
    io.manager.grant.ready <= Queue_9_1.io.enq.ready @[Decoupled.scala 244:15]
    io.client.grant <- Queue_9_1.io.deq @[Enqueuer.scala 20:22]
    io.manager.finish <- io.client.finish @[Enqueuer.scala 21:22]
    
  module FinishQueue_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {manager_xact_id : UInt<4>, manager_id : UInt<1>}[2] @[Decoupled.scala 175:16]
    reg T_218 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_220 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_218, T_220) @[Decoupled.scala 180:33]
    node T_223 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_223) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_224 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_224
    node T_225 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_225
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_226 = ram[T_218], clk
      T_226 <- io.enq.bits @[Decoupled.scala 187:24]
      node T_250 = eq(T_218, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_252 = add(T_218, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_253 = tail(T_252, 1) @[Counter.scala 21:22]
      T_218 <= T_253 @[Counter.scala 21:13]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      node T_255 = eq(T_220, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_257 = add(T_220, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_258 = tail(T_257, 1) @[Counter.scala 21:22]
      T_220 <= T_258 @[Counter.scala 21:13]
      skip @[Decoupled.scala 190:17]
    node T_259 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_259 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_261 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_261 @[Decoupled.scala 197:16]
    node T_263 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_263 @[Decoupled.scala 198:16]
    infer mport T_264 = ram[T_220], clk
    io.deq.bits <- T_264 @[Decoupled.scala 199:15]
    node T_287 = sub(T_218, T_220) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_287, 1) @[Decoupled.scala 214:32]
    node T_288 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_289 = cat(T_288, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_289 @[Decoupled.scala 216:14]
    
  module FinishUnit : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, refill : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, ready : UInt<1>}
    
    io is invalid
    node T_1035 = and(io.grant.ready, io.grant.valid) @[Decoupled.scala 21:42]
    wire T_1044 : UInt<3>[1] @[Definitions.scala 853:34]
    T_1044 is invalid @[Definitions.scala 853:34]
    T_1044[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_1046 = eq(io.grant.bits.payload.g_type, T_1044[0]) @[Package.scala 7:47]
    node T_1047 = eq(io.grant.bits.payload.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_1048 = mux(io.grant.bits.payload.is_builtin_type, T_1046, T_1047) @[Definitions.scala 274:33]
    node T_1049 = and(UInt<1>("h01"), T_1048) @[Definitions.scala 274:27]
    node T_1050 = and(T_1035, T_1049) @[Counters.scala 36:47]
    reg T_1052 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_1050 : @[Counter.scala 43:17]
      node T_1054 = eq(T_1052, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1056 = add(T_1052, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1057 = tail(T_1056, 1) @[Counter.scala 21:22]
      T_1052 <= T_1057 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_1058 = and(T_1050, T_1054) @[Counter.scala 44:20]
    node T_1059 = mux(T_1049, T_1052, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_1060 = mux(T_1049, T_1058, T_1035) @[Counters.scala 38:19]
    inst FinishQueue_1_1 of FinishQueue_1 @[Network.scala 158:19]
    FinishQueue_1_1.io is invalid
    FinishQueue_1_1.clk <= clk
    FinishQueue_1_1.reset <= reset
    node T_1084 = and(io.grant.ready, io.grant.valid) @[Decoupled.scala 21:42]
    node T_1087 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_1089 = eq(io.grant.bits.payload.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_1090 = and(io.grant.bits.payload.is_builtin_type, T_1089) @[Definitions.scala 277:59]
    node T_1092 = eq(T_1090, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_1093 = and(T_1087, T_1092) @[Definitions.scala 278:89]
    node T_1094 = and(T_1084, T_1093) @[Network.scala 159:39]
    wire T_1102 : UInt<3>[1] @[Definitions.scala 853:34]
    T_1102 is invalid @[Definitions.scala 853:34]
    T_1102[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_1104 = eq(io.grant.bits.payload.g_type, T_1102[0]) @[Package.scala 7:47]
    node T_1105 = eq(io.grant.bits.payload.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_1106 = mux(io.grant.bits.payload.is_builtin_type, T_1104, T_1105) @[Definitions.scala 274:33]
    node T_1107 = and(UInt<1>("h01"), T_1106) @[Definitions.scala 274:27]
    node T_1109 = eq(T_1107, UInt<1>("h00")) @[Network.scala 159:62]
    node T_1110 = or(T_1109, T_1060) @[Network.scala 159:84]
    node T_1111 = and(T_1094, T_1110) @[Network.scala 159:58]
    FinishQueue_1_1.io.enq.valid <= T_1111 @[Network.scala 159:20]
    wire T_1134 : {manager_xact_id : UInt<4>} @[Definitions.scala 798:17]
    T_1134 is invalid @[Definitions.scala 798:17]
    T_1134.manager_xact_id <= io.grant.bits.payload.manager_xact_id @[Definitions.scala 799:23]
    FinishQueue_1_1.io.enq.bits <- T_1134 @[Network.scala 160:19]
    FinishQueue_1_1.io.enq.bits.manager_id <= io.grant.bits.header.src @[Network.scala 161:30]
    io.finish.bits.header.src <= UInt<1>("h01") @[Network.scala 163:31]
    io.finish.bits.header.dst <= FinishQueue_1_1.io.deq.bits.manager_id @[Network.scala 164:31]
    io.finish.bits.payload <- FinishQueue_1_1.io.deq.bits @[Network.scala 165:28]
    io.finish.valid <= FinishQueue_1_1.io.deq.valid @[Network.scala 166:21]
    FinishQueue_1_1.io.deq.ready <= io.finish.ready @[Network.scala 167:20]
    node T_1159 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_1161 = eq(io.grant.bits.payload.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_1162 = and(io.grant.bits.payload.is_builtin_type, T_1161) @[Definitions.scala 277:59]
    node T_1164 = eq(T_1162, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_1165 = and(T_1159, T_1164) @[Definitions.scala 278:89]
    node T_1167 = eq(T_1165, UInt<1>("h00")) @[Network.scala 169:43]
    node T_1168 = or(FinishQueue_1_1.io.enq.ready, T_1167) @[Network.scala 169:40]
    node T_1169 = and(T_1168, io.grant.valid) @[Network.scala 169:61]
    io.refill.valid <= T_1169 @[Network.scala 169:21]
    io.refill.bits <- io.grant.bits.payload @[Network.scala 170:20]
    node T_1172 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_1174 = eq(io.grant.bits.payload.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_1175 = and(io.grant.bits.payload.is_builtin_type, T_1174) @[Definitions.scala 277:59]
    node T_1177 = eq(T_1175, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_1178 = and(T_1172, T_1177) @[Definitions.scala 278:89]
    node T_1180 = eq(T_1178, UInt<1>("h00")) @[Network.scala 171:42]
    node T_1181 = or(FinishQueue_1_1.io.enq.ready, T_1180) @[Network.scala 171:39]
    node T_1182 = and(T_1181, io.refill.ready) @[Network.scala 171:60]
    io.grant.ready <= T_1182 @[Network.scala 171:20]
    io.ready <= FinishQueue_1_1.io.enq.ready @[Network.scala 172:14]
    
  module ClientUncachedTileLinkNetworkPort : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, network : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    inst finisher of FinishUnit @[Network.scala 226:24]
    finisher.io is invalid
    finisher.clk <= clk
    finisher.reset <= reset
    finisher.io.grant <- io.network.grant @[Network.scala 227:21]
    io.network.finish <- finisher.io.finish @[Network.scala 228:21]
    wire acq_with_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}} @[Network.scala 259:19]
    acq_with_header is invalid @[Network.scala 259:19]
    acq_with_header.bits.payload <- io.client.acquire.bits @[Network.scala 260:22]
    acq_with_header.bits.header.src <= UInt<1>("h01") @[Network.scala 261:25]
    node T_3330 = shl(io.client.acquire.bits.addr_block, 6) @[Coreplex.scala 91:59]
    node T_3332 = leq(UInt<32>("h080000000"), T_3330) @[addrmap.scala 26:46]
    node T_3334 = lt(T_3330, UInt<32>("h090000000")) @[addrmap.scala 26:56]
    node T_3335 = and(T_3332, T_3334) @[addrmap.scala 26:51]
    node T_3338 = mux(T_3335, UInt<1>("h00"), UInt<1>("h01")) @[Coreplex.scala 92:10]
    acq_with_header.bits.header.dst <= T_3338 @[Network.scala 262:25]
    acq_with_header.valid <= io.client.acquire.valid @[Network.scala 263:15]
    io.client.acquire.ready <= acq_with_header.ready @[Network.scala 264:14]
    io.network.acquire.bits <- acq_with_header.bits @[Network.scala 233:27]
    node T_3339 = and(acq_with_header.valid, finisher.io.ready) @[Network.scala 234:53]
    io.network.acquire.valid <= T_3339 @[Network.scala 234:28]
    node T_3340 = and(io.network.acquire.ready, finisher.io.ready) @[Network.scala 235:53]
    acq_with_header.ready <= T_3340 @[Network.scala 235:25]
    io.client.grant <- finisher.io.refill @[Network.scala 236:19]
    io.network.probe.ready <= UInt<1>("h00") @[Network.scala 237:26]
    io.network.release.valid <= UInt<1>("h00") @[Network.scala 238:28]
    
  module ManagerTileLinkNetworkPort : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip manager : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip network : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    wire T_6043 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}} @[Network.scala 300:19]
    T_6043 is invalid @[Network.scala 300:19]
    T_6043.bits.payload <- io.manager.grant.bits @[Network.scala 301:22]
    T_6043.bits.header.src <= UInt<1>("h00") @[Network.scala 302:25]
    T_6043.bits.header.dst <= io.manager.grant.bits.client_id @[Network.scala 303:25]
    T_6043.valid <= io.manager.grant.valid @[Network.scala 304:15]
    io.manager.grant.ready <= T_6043.ready @[Network.scala 305:14]
    io.network.grant <- T_6043 @[Network.scala 285:20]
    wire T_6598 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}} @[Network.scala 300:19]
    T_6598 is invalid @[Network.scala 300:19]
    T_6598.bits.payload <- io.manager.probe.bits @[Network.scala 301:22]
    T_6598.bits.header.src <= UInt<1>("h00") @[Network.scala 302:25]
    T_6598.bits.header.dst <= io.manager.probe.bits.client_id @[Network.scala 303:25]
    T_6598.valid <= io.manager.probe.valid @[Network.scala 304:15]
    io.manager.probe.ready <= T_6598.ready @[Network.scala 305:14]
    io.network.probe <- T_6598 @[Network.scala 286:20]
    wire T_6877 : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}} @[Network.scala 94:19]
    T_6877 is invalid @[Network.scala 94:19]
    T_6877.valid <= io.network.acquire.valid @[Network.scala 95:15]
    T_6877.bits <- io.network.acquire.bits.payload @[Network.scala 96:14]
    io.network.acquire.ready <= T_6877.ready @[Network.scala 97:14]
    io.manager.acquire <- T_6877 @[Network.scala 287:22]
    io.manager.acquire.bits.client_id <= io.network.acquire.bits.header.src @[Network.scala 288:37]
    wire T_6993 : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}} @[Network.scala 94:19]
    T_6993 is invalid @[Network.scala 94:19]
    T_6993.valid <= io.network.release.valid @[Network.scala 95:15]
    T_6993.bits <- io.network.release.bits.payload @[Network.scala 96:14]
    io.network.release.ready <= T_6993.ready @[Network.scala 97:14]
    io.manager.release <- T_6993 @[Network.scala 289:22]
    io.manager.release.bits.client_id <= io.network.release.bits.header.src @[Network.scala 290:37]
    wire T_7097 : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}} @[Network.scala 94:19]
    T_7097 is invalid @[Network.scala 94:19]
    T_7097.valid <= io.network.finish.valid @[Network.scala 95:15]
    T_7097.bits <- io.network.finish.bits.payload @[Network.scala 96:14]
    io.network.finish.ready <= T_7097.ready @[Network.scala 97:14]
    io.manager.finish <- T_7097 @[Network.scala 291:21]
    
  module TileLinkEnqueuer_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}, manager : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    io.manager.acquire <- io.client.acquire @[Enqueuer.scala 17:22]
    io.client.probe <- io.manager.probe @[Enqueuer.scala 18:22]
    io.manager.release <- io.client.release @[Enqueuer.scala 19:22]
    io.client.grant <- io.manager.grant @[Enqueuer.scala 20:22]
    io.manager.finish <- io.client.finish @[Enqueuer.scala 21:22]
    
  module ManagerTileLinkNetworkPort_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip manager : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip network : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    wire T_6043 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}} @[Network.scala 300:19]
    T_6043 is invalid @[Network.scala 300:19]
    T_6043.bits.payload <- io.manager.grant.bits @[Network.scala 301:22]
    T_6043.bits.header.src <= UInt<1>("h01") @[Network.scala 302:25]
    T_6043.bits.header.dst <= io.manager.grant.bits.client_id @[Network.scala 303:25]
    T_6043.valid <= io.manager.grant.valid @[Network.scala 304:15]
    io.manager.grant.ready <= T_6043.ready @[Network.scala 305:14]
    io.network.grant <- T_6043 @[Network.scala 285:20]
    wire T_6598 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}} @[Network.scala 300:19]
    T_6598 is invalid @[Network.scala 300:19]
    T_6598.bits.payload <- io.manager.probe.bits @[Network.scala 301:22]
    T_6598.bits.header.src <= UInt<1>("h01") @[Network.scala 302:25]
    T_6598.bits.header.dst <= io.manager.probe.bits.client_id @[Network.scala 303:25]
    T_6598.valid <= io.manager.probe.valid @[Network.scala 304:15]
    io.manager.probe.ready <= T_6598.ready @[Network.scala 305:14]
    io.network.probe <- T_6598 @[Network.scala 286:20]
    wire T_6877 : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}} @[Network.scala 94:19]
    T_6877 is invalid @[Network.scala 94:19]
    T_6877.valid <= io.network.acquire.valid @[Network.scala 95:15]
    T_6877.bits <- io.network.acquire.bits.payload @[Network.scala 96:14]
    io.network.acquire.ready <= T_6877.ready @[Network.scala 97:14]
    io.manager.acquire <- T_6877 @[Network.scala 287:22]
    io.manager.acquire.bits.client_id <= io.network.acquire.bits.header.src @[Network.scala 288:37]
    wire T_6993 : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}} @[Network.scala 94:19]
    T_6993 is invalid @[Network.scala 94:19]
    T_6993.valid <= io.network.release.valid @[Network.scala 95:15]
    T_6993.bits <- io.network.release.bits.payload @[Network.scala 96:14]
    io.network.release.ready <= T_6993.ready @[Network.scala 97:14]
    io.manager.release <- T_6993 @[Network.scala 289:22]
    io.manager.release.bits.client_id <= io.network.release.bits.header.src @[Network.scala 290:37]
    wire T_7097 : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}} @[Network.scala 94:19]
    T_7097 is invalid @[Network.scala 94:19]
    T_7097.valid <= io.network.finish.valid @[Network.scala 95:15]
    T_7097.bits <- io.network.finish.bits.payload @[Network.scala 96:14]
    io.network.finish.ready <= T_7097.ready @[Network.scala 97:14]
    io.manager.finish <- T_7097 @[Network.scala 291:21]
    
  module LockingRRArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_1134 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1136 : UInt, clk
    node T_1138 = neq(T_1134, UInt<1>("h00")) @[Arbiter.scala 39:34]
    node T_1140 = and(UInt<1>("h01"), io.out.bits.payload.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1147 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1147 is invalid @[Definitions.scala 355:35]
    T_1147[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1149 = eq(io.out.bits.payload.a_type, T_1147[0]) @[Package.scala 7:47]
    node T_1150 = and(T_1140, T_1149) @[Definitions.scala 231:89]
    node T_1151 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_1152 = and(T_1151, T_1150) @[Arbiter.scala 42:25]
    when T_1152 : @[Arbiter.scala 42:39]
      T_1136 <= io.chosen @[Arbiter.scala 43:15]
      node T_1154 = eq(T_1134, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1156 = add(T_1134, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1157 = tail(T_1156, 1) @[Counter.scala 21:22]
      T_1134 <= T_1157 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_1138 : @[Arbiter.scala 47:19]
      io.chosen <= T_1136 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_1159 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<2>, clk
    when T_1159 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node T_1164 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_1165 = or(T_1164, validMask_2) @[Arbiter.scala 23:72]
    node T_1166 = or(T_1165, validMask_3) @[Arbiter.scala 23:72]
    node T_1167 = or(T_1166, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_1168 = or(T_1167, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_1169 = or(T_1168, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_1171 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1173 = eq(T_1164, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1175 = eq(T_1165, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1177 = eq(T_1166, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1179 = eq(T_1167, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1181 = eq(T_1168, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1183 = eq(T_1169, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1184 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_1185 = or(T_1184, T_1177) @[Arbiter.scala 64:50]
    node T_1186 = and(T_1171, grantMask_1) @[Arbiter.scala 64:34]
    node T_1187 = or(T_1186, T_1179) @[Arbiter.scala 64:50]
    node T_1188 = and(T_1173, grantMask_2) @[Arbiter.scala 64:34]
    node T_1189 = or(T_1188, T_1181) @[Arbiter.scala 64:50]
    node T_1190 = and(T_1175, grantMask_3) @[Arbiter.scala 64:34]
    node T_1191 = or(T_1190, T_1183) @[Arbiter.scala 64:50]
    node T_1193 = eq(T_1136, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_1194 = mux(T_1138, T_1193, T_1185) @[Arbiter.scala 49:22]
    node T_1195 = and(T_1194, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_1195 @[Arbiter.scala 49:16]
    node T_1197 = eq(T_1136, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_1198 = mux(T_1138, T_1197, T_1187) @[Arbiter.scala 49:22]
    node T_1199 = and(T_1198, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_1199 @[Arbiter.scala 49:16]
    node T_1201 = eq(T_1136, UInt<2>("h02")) @[Arbiter.scala 49:39]
    node T_1202 = mux(T_1138, T_1201, T_1189) @[Arbiter.scala 49:22]
    node T_1203 = and(T_1202, io.out.ready) @[Arbiter.scala 49:55]
    io.in[2].ready <= T_1203 @[Arbiter.scala 49:16]
    node T_1205 = eq(T_1136, UInt<2>("h03")) @[Arbiter.scala 49:39]
    node T_1206 = mux(T_1138, T_1205, T_1191) @[Arbiter.scala 49:22]
    node T_1207 = and(T_1206, io.out.ready) @[Arbiter.scala 49:55]
    io.in[3].ready <= T_1207 @[Arbiter.scala 49:16]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module BasicBus : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter @[Network.scala 37:19]
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13]
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20]
    node T_1529 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65]
    node T_1530 = and(arb.io.out.valid, T_1529) @[Network.scala 42:35]
    io.out[0].valid <= T_1530 @[Network.scala 42:15]
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1532 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65]
    node T_1533 = and(arb.io.out.valid, T_1532) @[Network.scala 42:35]
    io.out[1].valid <= T_1533 @[Network.scala 42:15]
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1535 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65]
    node T_1536 = and(arb.io.out.valid, T_1535) @[Network.scala 42:35]
    io.out[2].valid <= T_1536 @[Network.scala 42:15]
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1538 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65]
    node T_1539 = and(arb.io.out.valid, T_1538) @[Network.scala 42:35]
    io.out[3].valid <= T_1539 @[Network.scala 42:15]
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14]
    
  module LockingRRArbiter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_1100 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1102 : UInt, clk
    node T_1104 = neq(T_1100, UInt<1>("h00")) @[Arbiter.scala 39:34]
    node T_1106 = eq(io.out.bits.payload.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_1107 = eq(io.out.bits.payload.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_1108 = eq(io.out.bits.payload.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_1109 = or(T_1106, T_1107) @[Package.scala 7:62]
    node T_1110 = or(T_1109, T_1108) @[Package.scala 7:62]
    node T_1111 = and(UInt<1>("h01"), T_1110) @[Definitions.scala 256:64]
    node T_1112 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_1113 = and(T_1112, T_1111) @[Arbiter.scala 42:25]
    when T_1113 : @[Arbiter.scala 42:39]
      T_1102 <= io.chosen @[Arbiter.scala 43:15]
      node T_1115 = eq(T_1100, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1117 = add(T_1100, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1118 = tail(T_1117, 1) @[Counter.scala 21:22]
      T_1100 <= T_1118 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_1104 : @[Arbiter.scala 47:19]
      io.chosen <= T_1102 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_1120 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<2>, clk
    when T_1120 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node T_1125 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_1126 = or(T_1125, validMask_2) @[Arbiter.scala 23:72]
    node T_1127 = or(T_1126, validMask_3) @[Arbiter.scala 23:72]
    node T_1128 = or(T_1127, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_1129 = or(T_1128, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_1130 = or(T_1129, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_1132 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1134 = eq(T_1125, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1136 = eq(T_1126, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1138 = eq(T_1127, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1140 = eq(T_1128, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1142 = eq(T_1129, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1144 = eq(T_1130, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1145 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_1146 = or(T_1145, T_1138) @[Arbiter.scala 64:50]
    node T_1147 = and(T_1132, grantMask_1) @[Arbiter.scala 64:34]
    node T_1148 = or(T_1147, T_1140) @[Arbiter.scala 64:50]
    node T_1149 = and(T_1134, grantMask_2) @[Arbiter.scala 64:34]
    node T_1150 = or(T_1149, T_1142) @[Arbiter.scala 64:50]
    node T_1151 = and(T_1136, grantMask_3) @[Arbiter.scala 64:34]
    node T_1152 = or(T_1151, T_1144) @[Arbiter.scala 64:50]
    node T_1154 = eq(T_1102, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_1155 = mux(T_1104, T_1154, T_1146) @[Arbiter.scala 49:22]
    node T_1156 = and(T_1155, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_1156 @[Arbiter.scala 49:16]
    node T_1158 = eq(T_1102, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_1159 = mux(T_1104, T_1158, T_1148) @[Arbiter.scala 49:22]
    node T_1160 = and(T_1159, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_1160 @[Arbiter.scala 49:16]
    node T_1162 = eq(T_1102, UInt<2>("h02")) @[Arbiter.scala 49:39]
    node T_1163 = mux(T_1104, T_1162, T_1150) @[Arbiter.scala 49:22]
    node T_1164 = and(T_1163, io.out.ready) @[Arbiter.scala 49:55]
    io.in[2].ready <= T_1164 @[Arbiter.scala 49:16]
    node T_1166 = eq(T_1102, UInt<2>("h03")) @[Arbiter.scala 49:39]
    node T_1167 = mux(T_1104, T_1166, T_1152) @[Arbiter.scala 49:22]
    node T_1168 = and(T_1167, io.out.ready) @[Arbiter.scala 49:55]
    io.in[3].ready <= T_1168 @[Arbiter.scala 49:16]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module BasicBus_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter_1 @[Network.scala 37:19]
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13]
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20]
    node T_1483 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65]
    node T_1484 = and(arb.io.out.valid, T_1483) @[Network.scala 42:35]
    io.out[0].valid <= T_1484 @[Network.scala 42:15]
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1486 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65]
    node T_1487 = and(arb.io.out.valid, T_1486) @[Network.scala 42:35]
    io.out[1].valid <= T_1487 @[Network.scala 42:15]
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1489 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65]
    node T_1490 = and(arb.io.out.valid, T_1489) @[Network.scala 42:35]
    io.out[2].valid <= T_1490 @[Network.scala 42:15]
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1492 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65]
    node T_1493 = and(arb.io.out.valid, T_1492) @[Network.scala 42:35]
    io.out[3].valid <= T_1493 @[Network.scala 42:15]
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14]
    
  module LockingRRArbiter_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    node T_964 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<2>, clk
    when T_964 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node T_969 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_970 = or(T_969, validMask_2) @[Arbiter.scala 23:72]
    node T_971 = or(T_970, validMask_3) @[Arbiter.scala 23:72]
    node T_972 = or(T_971, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_973 = or(T_972, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_974 = or(T_973, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_976 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_978 = eq(T_969, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_980 = eq(T_970, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_982 = eq(T_971, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_984 = eq(T_972, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_986 = eq(T_973, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_988 = eq(T_974, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_989 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_990 = or(T_989, T_982) @[Arbiter.scala 64:50]
    node T_991 = and(T_976, grantMask_1) @[Arbiter.scala 64:34]
    node T_992 = or(T_991, T_984) @[Arbiter.scala 64:50]
    node T_993 = and(T_978, grantMask_2) @[Arbiter.scala 64:34]
    node T_994 = or(T_993, T_986) @[Arbiter.scala 64:50]
    node T_995 = and(T_980, grantMask_3) @[Arbiter.scala 64:34]
    node T_996 = or(T_995, T_988) @[Arbiter.scala 64:50]
    node T_997 = and(T_990, io.out.ready) @[Arbiter.scala 52:21]
    io.in[0].ready <= T_997 @[Arbiter.scala 52:16]
    node T_998 = and(T_992, io.out.ready) @[Arbiter.scala 52:21]
    io.in[1].ready <= T_998 @[Arbiter.scala 52:16]
    node T_999 = and(T_994, io.out.ready) @[Arbiter.scala 52:21]
    io.in[2].ready <= T_999 @[Arbiter.scala 52:16]
    node T_1000 = and(T_996, io.out.ready) @[Arbiter.scala 52:21]
    io.in[3].ready <= T_1000 @[Arbiter.scala 52:16]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module BasicBus_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter_2 @[Network.scala 37:19]
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13]
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20]
    node T_1299 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65]
    node T_1300 = and(arb.io.out.valid, T_1299) @[Network.scala 42:35]
    io.out[0].valid <= T_1300 @[Network.scala 42:15]
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1302 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65]
    node T_1303 = and(arb.io.out.valid, T_1302) @[Network.scala 42:35]
    io.out[1].valid <= T_1303 @[Network.scala 42:15]
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1305 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65]
    node T_1306 = and(arb.io.out.valid, T_1305) @[Network.scala 42:35]
    io.out[2].valid <= T_1306 @[Network.scala 42:15]
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1308 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65]
    node T_1309 = and(arb.io.out.valid, T_1308) @[Network.scala 42:35]
    io.out[3].valid <= T_1309 @[Network.scala 42:15]
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14]
    
  module LockingRRArbiter_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_1100 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1102 : UInt, clk
    node T_1104 = neq(T_1100, UInt<1>("h00")) @[Arbiter.scala 39:34]
    wire T_1112 : UInt<3>[1] @[Definitions.scala 853:34]
    T_1112 is invalid @[Definitions.scala 853:34]
    T_1112[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_1114 = eq(io.out.bits.payload.g_type, T_1112[0]) @[Package.scala 7:47]
    node T_1115 = eq(io.out.bits.payload.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_1116 = mux(io.out.bits.payload.is_builtin_type, T_1114, T_1115) @[Definitions.scala 274:33]
    node T_1117 = and(UInt<1>("h01"), T_1116) @[Definitions.scala 274:27]
    node T_1118 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_1119 = and(T_1118, T_1117) @[Arbiter.scala 42:25]
    when T_1119 : @[Arbiter.scala 42:39]
      T_1102 <= io.chosen @[Arbiter.scala 43:15]
      node T_1121 = eq(T_1100, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1123 = add(T_1100, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1124 = tail(T_1123, 1) @[Counter.scala 21:22]
      T_1100 <= T_1124 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_1104 : @[Arbiter.scala 47:19]
      io.chosen <= T_1102 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_1126 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<2>, clk
    when T_1126 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node T_1131 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_1132 = or(T_1131, validMask_2) @[Arbiter.scala 23:72]
    node T_1133 = or(T_1132, validMask_3) @[Arbiter.scala 23:72]
    node T_1134 = or(T_1133, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_1135 = or(T_1134, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_1136 = or(T_1135, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_1138 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1140 = eq(T_1131, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1142 = eq(T_1132, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1144 = eq(T_1133, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1146 = eq(T_1134, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1148 = eq(T_1135, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1150 = eq(T_1136, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1151 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_1152 = or(T_1151, T_1144) @[Arbiter.scala 64:50]
    node T_1153 = and(T_1138, grantMask_1) @[Arbiter.scala 64:34]
    node T_1154 = or(T_1153, T_1146) @[Arbiter.scala 64:50]
    node T_1155 = and(T_1140, grantMask_2) @[Arbiter.scala 64:34]
    node T_1156 = or(T_1155, T_1148) @[Arbiter.scala 64:50]
    node T_1157 = and(T_1142, grantMask_3) @[Arbiter.scala 64:34]
    node T_1158 = or(T_1157, T_1150) @[Arbiter.scala 64:50]
    node T_1160 = eq(T_1102, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_1161 = mux(T_1104, T_1160, T_1152) @[Arbiter.scala 49:22]
    node T_1162 = and(T_1161, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_1162 @[Arbiter.scala 49:16]
    node T_1164 = eq(T_1102, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_1165 = mux(T_1104, T_1164, T_1154) @[Arbiter.scala 49:22]
    node T_1166 = and(T_1165, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_1166 @[Arbiter.scala 49:16]
    node T_1168 = eq(T_1102, UInt<2>("h02")) @[Arbiter.scala 49:39]
    node T_1169 = mux(T_1104, T_1168, T_1156) @[Arbiter.scala 49:22]
    node T_1170 = and(T_1169, io.out.ready) @[Arbiter.scala 49:55]
    io.in[2].ready <= T_1170 @[Arbiter.scala 49:16]
    node T_1172 = eq(T_1102, UInt<2>("h03")) @[Arbiter.scala 49:39]
    node T_1173 = mux(T_1104, T_1172, T_1158) @[Arbiter.scala 49:22]
    node T_1174 = and(T_1173, io.out.ready) @[Arbiter.scala 49:55]
    io.in[3].ready <= T_1174 @[Arbiter.scala 49:16]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module BasicBus_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter_3 @[Network.scala 37:19]
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13]
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20]
    node T_1483 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65]
    node T_1484 = and(arb.io.out.valid, T_1483) @[Network.scala 42:35]
    io.out[0].valid <= T_1484 @[Network.scala 42:15]
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1486 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65]
    node T_1487 = and(arb.io.out.valid, T_1486) @[Network.scala 42:35]
    io.out[1].valid <= T_1487 @[Network.scala 42:15]
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1489 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65]
    node T_1490 = and(arb.io.out.valid, T_1489) @[Network.scala 42:35]
    io.out[2].valid <= T_1490 @[Network.scala 42:15]
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1492 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65]
    node T_1493 = and(arb.io.out.valid, T_1492) @[Network.scala 42:35]
    io.out[3].valid <= T_1493 @[Network.scala 42:15]
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14]
    
  module LockingRRArbiter_4 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    node T_930 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<2>, clk
    when T_930 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node T_935 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_936 = or(T_935, validMask_2) @[Arbiter.scala 23:72]
    node T_937 = or(T_936, validMask_3) @[Arbiter.scala 23:72]
    node T_938 = or(T_937, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_939 = or(T_938, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_940 = or(T_939, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_942 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_944 = eq(T_935, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_946 = eq(T_936, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_948 = eq(T_937, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_950 = eq(T_938, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_952 = eq(T_939, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_954 = eq(T_940, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_955 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_956 = or(T_955, T_948) @[Arbiter.scala 64:50]
    node T_957 = and(T_942, grantMask_1) @[Arbiter.scala 64:34]
    node T_958 = or(T_957, T_950) @[Arbiter.scala 64:50]
    node T_959 = and(T_944, grantMask_2) @[Arbiter.scala 64:34]
    node T_960 = or(T_959, T_952) @[Arbiter.scala 64:50]
    node T_961 = and(T_946, grantMask_3) @[Arbiter.scala 64:34]
    node T_962 = or(T_961, T_954) @[Arbiter.scala 64:50]
    node T_963 = and(T_956, io.out.ready) @[Arbiter.scala 52:21]
    io.in[0].ready <= T_963 @[Arbiter.scala 52:16]
    node T_964 = and(T_958, io.out.ready) @[Arbiter.scala 52:21]
    io.in[1].ready <= T_964 @[Arbiter.scala 52:16]
    node T_965 = and(T_960, io.out.ready) @[Arbiter.scala 52:21]
    io.in[2].ready <= T_965 @[Arbiter.scala 52:16]
    node T_966 = and(T_962, io.out.ready) @[Arbiter.scala 52:21]
    io.in[3].ready <= T_966 @[Arbiter.scala 52:16]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module BasicBus_4 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter_4 @[Network.scala 37:19]
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13]
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20]
    node T_1253 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65]
    node T_1254 = and(arb.io.out.valid, T_1253) @[Network.scala 42:35]
    io.out[0].valid <= T_1254 @[Network.scala 42:15]
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1256 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65]
    node T_1257 = and(arb.io.out.valid, T_1256) @[Network.scala 42:35]
    io.out[1].valid <= T_1257 @[Network.scala 42:15]
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1259 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65]
    node T_1260 = and(arb.io.out.valid, T_1259) @[Network.scala 42:35]
    io.out[2].valid <= T_1260 @[Network.scala 42:15]
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14]
    node T_1262 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65]
    node T_1263 = and(arb.io.out.valid, T_1262) @[Network.scala 42:35]
    io.out[3].valid <= T_1263 @[Network.scala 42:15]
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14]
    
  module PortedTileLinkCrossbar : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip clients_cached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}[1], flip clients_uncached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], flip managers : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}[2]}
    
    io is invalid
    inst TileLinkEnqueuer_4 of TileLinkEnqueuer @[Interconnect.scala 46:22]
    TileLinkEnqueuer_4.io is invalid
    TileLinkEnqueuer_4.clk <= clk
    TileLinkEnqueuer_4.reset <= reset
    inst ClientTileLinkNetworkPort_1 of ClientTileLinkNetworkPort @[Interconnect.scala 49:28]
    ClientTileLinkNetworkPort_1.io is invalid
    ClientTileLinkNetworkPort_1.clk <= clk
    ClientTileLinkNetworkPort_1.reset <= reset
    ClientTileLinkNetworkPort_1.io.client <- io.clients_cached[0] @[Interconnect.scala 50:26]
    TileLinkEnqueuer_4.io.client <- ClientTileLinkNetworkPort_1.io.network @[Interconnect.scala 51:24]
    inst TileLinkEnqueuer_1_1 of TileLinkEnqueuer_1 @[Interconnect.scala 46:22]
    TileLinkEnqueuer_1_1.io is invalid
    TileLinkEnqueuer_1_1.clk <= clk
    TileLinkEnqueuer_1_1.reset <= reset
    inst ClientUncachedTileLinkNetworkPort_1 of ClientUncachedTileLinkNetworkPort @[Interconnect.scala 55:28]
    ClientUncachedTileLinkNetworkPort_1.io is invalid
    ClientUncachedTileLinkNetworkPort_1.clk <= clk
    ClientUncachedTileLinkNetworkPort_1.reset <= reset
    ClientUncachedTileLinkNetworkPort_1.io.client <- io.clients_uncached[0] @[Interconnect.scala 56:26]
    TileLinkEnqueuer_1_1.io.client <- ClientUncachedTileLinkNetworkPort_1.io.network @[Interconnect.scala 57:24]
    inst ManagerTileLinkNetworkPort_2 of ManagerTileLinkNetworkPort @[Interconnect.scala 66:24]
    ManagerTileLinkNetworkPort_2.io is invalid
    ManagerTileLinkNetworkPort_2.clk <= clk
    ManagerTileLinkNetworkPort_2.reset <= reset
    inst TileLinkEnqueuer_2_1 of TileLinkEnqueuer_2 @[Interconnect.scala 67:22]
    TileLinkEnqueuer_2_1.io is invalid
    TileLinkEnqueuer_2_1.clk <= clk
    TileLinkEnqueuer_2_1.reset <= reset
    ManagerTileLinkNetworkPort_2.io.manager <- io.managers[0] @[Interconnect.scala 68:23]
    ManagerTileLinkNetworkPort_2.io.network <- TileLinkEnqueuer_2_1.io.manager @[Interconnect.scala 69:23]
    inst ManagerTileLinkNetworkPort_1_1 of ManagerTileLinkNetworkPort_1 @[Interconnect.scala 66:24]
    ManagerTileLinkNetworkPort_1_1.io is invalid
    ManagerTileLinkNetworkPort_1_1.clk <= clk
    ManagerTileLinkNetworkPort_1_1.reset <= reset
    inst TileLinkEnqueuer_3_1 of TileLinkEnqueuer_2 @[Interconnect.scala 67:22]
    TileLinkEnqueuer_3_1.io is invalid
    TileLinkEnqueuer_3_1.clk <= clk
    TileLinkEnqueuer_3_1.reset <= reset
    ManagerTileLinkNetworkPort_1_1.io.manager <- io.managers[1] @[Interconnect.scala 68:23]
    ManagerTileLinkNetworkPort_1_1.io.network <- TileLinkEnqueuer_3_1.io.manager @[Interconnect.scala 69:23]
    inst acqNet of BasicBus @[Interconnect.scala 114:22]
    acqNet.io is invalid
    acqNet.clk <= clk
    acqNet.reset <= reset
    inst relNet of BasicBus_1 @[Interconnect.scala 115:22]
    relNet.io is invalid
    relNet.clk <= clk
    relNet.reset <= reset
    inst prbNet of BasicBus_2 @[Interconnect.scala 116:22]
    prbNet.io is invalid
    prbNet.clk <= clk
    prbNet.reset <= reset
    inst gntNet of BasicBus_3 @[Interconnect.scala 117:22]
    gntNet.io is invalid
    gntNet.clk <= clk
    gntNet.reset <= reset
    inst ackNet of BasicBus_4 @[Interconnect.scala 118:22]
    ackNet.io is invalid
    ackNet.clk <= clk
    ackNet.reset <= reset
    wire T_12724 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}} @[Network.scala 105:19]
    T_12724 is invalid @[Network.scala 105:19]
    T_12724.bits.header <- acqNet.io.out[0].bits.header @[Network.scala 106:21]
    T_12724.bits.payload <- acqNet.io.out[0].bits.payload @[Network.scala 107:22]
    T_12724.valid <= acqNet.io.out[0].valid @[Network.scala 108:15]
    acqNet.io.out[0].ready <= T_12724.ready @[Network.scala 109:14]
    node T_12952 = sub(acqNet.io.out[0].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47]
    node T_12953 = tail(T_12952, 1) @[Interconnect.scala 129:47]
    T_12724.bits.header.src <= T_12953 @[Interconnect.scala 129:25]
    TileLinkEnqueuer_2_1.io.client.acquire.valid <= T_12724.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_2_1.io.client.acquire.bits <- T_12724.bits @[Interconnect.scala 161:17]
    T_12724.ready <= TileLinkEnqueuer_2_1.io.client.acquire.ready @[Interconnect.scala 162:13]
    acqNet.io.in[0].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_13294 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}} @[Network.scala 105:19]
    T_13294 is invalid @[Network.scala 105:19]
    T_13294.bits.header <- acqNet.io.out[1].bits.header @[Network.scala 106:21]
    T_13294.bits.payload <- acqNet.io.out[1].bits.payload @[Network.scala 107:22]
    T_13294.valid <= acqNet.io.out[1].valid @[Network.scala 108:15]
    acqNet.io.out[1].ready <= T_13294.ready @[Network.scala 109:14]
    node T_13522 = sub(acqNet.io.out[1].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47]
    node T_13523 = tail(T_13522, 1) @[Interconnect.scala 129:47]
    T_13294.bits.header.src <= T_13523 @[Interconnect.scala 129:25]
    TileLinkEnqueuer_3_1.io.client.acquire.valid <= T_13294.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_3_1.io.client.acquire.bits <- T_13294.bits @[Interconnect.scala 161:17]
    T_13294.ready <= TileLinkEnqueuer_3_1.io.client.acquire.ready @[Interconnect.scala 162:13]
    acqNet.io.in[1].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_13624 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}} @[Network.scala 117:19]
    T_13624 is invalid @[Network.scala 117:19]
    T_13624.bits.header <- TileLinkEnqueuer_4.io.manager.acquire.bits.header @[Network.scala 118:21]
    T_13624.bits.payload <- TileLinkEnqueuer_4.io.manager.acquire.bits.payload @[Network.scala 119:22]
    T_13624.valid <= TileLinkEnqueuer_4.io.manager.acquire.valid @[Network.scala 120:15]
    TileLinkEnqueuer_4.io.manager.acquire.ready <= T_13624.ready @[Network.scala 121:14]
    node T_13692 = add(TileLinkEnqueuer_4.io.manager.acquire.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47]
    node T_13693 = tail(T_13692, 1) @[Interconnect.scala 144:47]
    T_13624.bits.header.src <= T_13693 @[Interconnect.scala 144:25]
    acqNet.io.in[2].valid <= T_13624.valid @[Interconnect.scala 152:19]
    acqNet.io.in[2].bits <- T_13624.bits @[Interconnect.scala 153:18]
    T_13624.ready <= acqNet.io.in[2].ready @[Interconnect.scala 154:13]
    acqNet.io.out[2].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_13794 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}} @[Network.scala 117:19]
    T_13794 is invalid @[Network.scala 117:19]
    T_13794.bits.header <- TileLinkEnqueuer_1_1.io.manager.acquire.bits.header @[Network.scala 118:21]
    T_13794.bits.payload <- TileLinkEnqueuer_1_1.io.manager.acquire.bits.payload @[Network.scala 119:22]
    T_13794.valid <= TileLinkEnqueuer_1_1.io.manager.acquire.valid @[Network.scala 120:15]
    TileLinkEnqueuer_1_1.io.manager.acquire.ready <= T_13794.ready @[Network.scala 121:14]
    node T_13862 = add(TileLinkEnqueuer_1_1.io.manager.acquire.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47]
    node T_13863 = tail(T_13862, 1) @[Interconnect.scala 144:47]
    T_13794.bits.header.src <= T_13863 @[Interconnect.scala 144:25]
    acqNet.io.in[3].valid <= T_13794.valid @[Interconnect.scala 152:19]
    acqNet.io.in[3].bits <- T_13794.bits @[Interconnect.scala 153:18]
    T_13794.ready <= acqNet.io.in[3].ready @[Interconnect.scala 154:13]
    acqNet.io.out[3].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_14201 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 105:19]
    T_14201 is invalid @[Network.scala 105:19]
    T_14201.bits.header <- relNet.io.out[0].bits.header @[Network.scala 106:21]
    T_14201.bits.payload <- relNet.io.out[0].bits.payload @[Network.scala 107:22]
    T_14201.valid <= relNet.io.out[0].valid @[Network.scala 108:15]
    relNet.io.out[0].ready <= T_14201.ready @[Network.scala 109:14]
    node T_14427 = sub(relNet.io.out[0].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47]
    node T_14428 = tail(T_14427, 1) @[Interconnect.scala 129:47]
    T_14201.bits.header.src <= T_14428 @[Interconnect.scala 129:25]
    TileLinkEnqueuer_2_1.io.client.release.valid <= T_14201.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_2_1.io.client.release.bits <- T_14201.bits @[Interconnect.scala 161:17]
    T_14201.ready <= TileLinkEnqueuer_2_1.io.client.release.ready @[Interconnect.scala 162:13]
    relNet.io.in[0].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_14766 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 105:19]
    T_14766 is invalid @[Network.scala 105:19]
    T_14766.bits.header <- relNet.io.out[1].bits.header @[Network.scala 106:21]
    T_14766.bits.payload <- relNet.io.out[1].bits.payload @[Network.scala 107:22]
    T_14766.valid <= relNet.io.out[1].valid @[Network.scala 108:15]
    relNet.io.out[1].ready <= T_14766.ready @[Network.scala 109:14]
    node T_14992 = sub(relNet.io.out[1].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47]
    node T_14993 = tail(T_14992, 1) @[Interconnect.scala 129:47]
    T_14766.bits.header.src <= T_14993 @[Interconnect.scala 129:25]
    TileLinkEnqueuer_3_1.io.client.release.valid <= T_14766.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_3_1.io.client.release.bits <- T_14766.bits @[Interconnect.scala 161:17]
    T_14766.ready <= TileLinkEnqueuer_3_1.io.client.release.ready @[Interconnect.scala 162:13]
    relNet.io.in[1].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_15091 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 117:19]
    T_15091 is invalid @[Network.scala 117:19]
    T_15091.bits.header <- TileLinkEnqueuer_4.io.manager.release.bits.header @[Network.scala 118:21]
    T_15091.bits.payload <- TileLinkEnqueuer_4.io.manager.release.bits.payload @[Network.scala 119:22]
    T_15091.valid <= TileLinkEnqueuer_4.io.manager.release.valid @[Network.scala 120:15]
    TileLinkEnqueuer_4.io.manager.release.ready <= T_15091.ready @[Network.scala 121:14]
    node T_15157 = add(TileLinkEnqueuer_4.io.manager.release.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47]
    node T_15158 = tail(T_15157, 1) @[Interconnect.scala 144:47]
    T_15091.bits.header.src <= T_15158 @[Interconnect.scala 144:25]
    relNet.io.in[2].valid <= T_15091.valid @[Interconnect.scala 152:19]
    relNet.io.in[2].bits <- T_15091.bits @[Interconnect.scala 153:18]
    T_15091.ready <= relNet.io.in[2].ready @[Interconnect.scala 154:13]
    relNet.io.out[2].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_15256 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 117:19]
    T_15256 is invalid @[Network.scala 117:19]
    T_15256.bits.header <- TileLinkEnqueuer_1_1.io.manager.release.bits.header @[Network.scala 118:21]
    T_15256.bits.payload <- TileLinkEnqueuer_1_1.io.manager.release.bits.payload @[Network.scala 119:22]
    T_15256.valid <= TileLinkEnqueuer_1_1.io.manager.release.valid @[Network.scala 120:15]
    TileLinkEnqueuer_1_1.io.manager.release.ready <= T_15256.ready @[Network.scala 121:14]
    node T_15322 = add(TileLinkEnqueuer_1_1.io.manager.release.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47]
    node T_15323 = tail(T_15322, 1) @[Interconnect.scala 144:47]
    T_15256.bits.header.src <= T_15323 @[Interconnect.scala 144:25]
    relNet.io.in[3].valid <= T_15256.valid @[Interconnect.scala 152:19]
    relNet.io.in[3].bits <- T_15256.bits @[Interconnect.scala 153:18]
    T_15256.ready <= relNet.io.in[3].ready @[Interconnect.scala 154:13]
    relNet.io.out[3].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_15409 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}} @[Network.scala 117:19]
    T_15409 is invalid @[Network.scala 117:19]
    T_15409.bits.header <- TileLinkEnqueuer_2_1.io.client.probe.bits.header @[Network.scala 118:21]
    T_15409.bits.payload <- TileLinkEnqueuer_2_1.io.client.probe.bits.payload @[Network.scala 119:22]
    T_15409.valid <= TileLinkEnqueuer_2_1.io.client.probe.valid @[Network.scala 120:15]
    TileLinkEnqueuer_2_1.io.client.probe.ready <= T_15409.ready @[Network.scala 121:14]
    node T_15467 = add(TileLinkEnqueuer_2_1.io.client.probe.bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 139:47]
    node T_15468 = tail(T_15467, 1) @[Interconnect.scala 139:47]
    T_15409.bits.header.dst <= T_15468 @[Interconnect.scala 139:25]
    prbNet.io.in[0].valid <= T_15409.valid @[Interconnect.scala 152:19]
    prbNet.io.in[0].bits <- T_15409.bits @[Interconnect.scala 153:18]
    T_15409.ready <= prbNet.io.in[0].ready @[Interconnect.scala 154:13]
    prbNet.io.out[0].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_15554 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}} @[Network.scala 117:19]
    T_15554 is invalid @[Network.scala 117:19]
    T_15554.bits.header <- TileLinkEnqueuer_3_1.io.client.probe.bits.header @[Network.scala 118:21]
    T_15554.bits.payload <- TileLinkEnqueuer_3_1.io.client.probe.bits.payload @[Network.scala 119:22]
    T_15554.valid <= TileLinkEnqueuer_3_1.io.client.probe.valid @[Network.scala 120:15]
    TileLinkEnqueuer_3_1.io.client.probe.ready <= T_15554.ready @[Network.scala 121:14]
    node T_15612 = add(TileLinkEnqueuer_3_1.io.client.probe.bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 139:47]
    node T_15613 = tail(T_15612, 1) @[Interconnect.scala 139:47]
    T_15554.bits.header.dst <= T_15613 @[Interconnect.scala 139:25]
    prbNet.io.in[1].valid <= T_15554.valid @[Interconnect.scala 152:19]
    prbNet.io.in[1].bits <- T_15554.bits @[Interconnect.scala 153:18]
    T_15554.ready <= prbNet.io.in[1].ready @[Interconnect.scala 154:13]
    prbNet.io.out[1].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_15939 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}} @[Network.scala 105:19]
    T_15939 is invalid @[Network.scala 105:19]
    T_15939.bits.header <- prbNet.io.out[2].bits.header @[Network.scala 106:21]
    T_15939.bits.payload <- prbNet.io.out[2].bits.payload @[Network.scala 107:22]
    T_15939.valid <= prbNet.io.out[2].valid @[Network.scala 108:15]
    prbNet.io.out[2].ready <= T_15939.ready @[Network.scala 109:14]
    node T_16157 = sub(prbNet.io.out[2].bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 134:47]
    node T_16158 = tail(T_16157, 1) @[Interconnect.scala 134:47]
    T_15939.bits.header.dst <= T_16158 @[Interconnect.scala 134:25]
    TileLinkEnqueuer_4.io.manager.probe.valid <= T_15939.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_4.io.manager.probe.bits <- T_15939.bits @[Interconnect.scala 161:17]
    T_15939.ready <= TileLinkEnqueuer_4.io.manager.probe.ready @[Interconnect.scala 162:13]
    prbNet.io.in[2].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_16484 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}} @[Network.scala 105:19]
    T_16484 is invalid @[Network.scala 105:19]
    T_16484.bits.header <- prbNet.io.out[3].bits.header @[Network.scala 106:21]
    T_16484.bits.payload <- prbNet.io.out[3].bits.payload @[Network.scala 107:22]
    T_16484.valid <= prbNet.io.out[3].valid @[Network.scala 108:15]
    prbNet.io.out[3].ready <= T_16484.ready @[Network.scala 109:14]
    node T_16702 = sub(prbNet.io.out[3].bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 134:47]
    node T_16703 = tail(T_16702, 1) @[Interconnect.scala 134:47]
    T_16484.bits.header.dst <= T_16703 @[Interconnect.scala 134:25]
    TileLinkEnqueuer_1_1.io.manager.probe.valid <= T_16484.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_1_1.io.manager.probe.bits <- T_16484.bits @[Interconnect.scala 161:17]
    T_16484.ready <= TileLinkEnqueuer_1_1.io.manager.probe.ready @[Interconnect.scala 162:13]
    prbNet.io.in[3].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_16801 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}} @[Network.scala 117:19]
    T_16801 is invalid @[Network.scala 117:19]
    T_16801.bits.header <- TileLinkEnqueuer_2_1.io.client.grant.bits.header @[Network.scala 118:21]
    T_16801.bits.payload <- TileLinkEnqueuer_2_1.io.client.grant.bits.payload @[Network.scala 119:22]
    T_16801.valid <= TileLinkEnqueuer_2_1.io.client.grant.valid @[Network.scala 120:15]
    TileLinkEnqueuer_2_1.io.client.grant.ready <= T_16801.ready @[Network.scala 121:14]
    node T_16867 = add(TileLinkEnqueuer_2_1.io.client.grant.bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 139:47]
    node T_16868 = tail(T_16867, 1) @[Interconnect.scala 139:47]
    T_16801.bits.header.dst <= T_16868 @[Interconnect.scala 139:25]
    gntNet.io.in[0].valid <= T_16801.valid @[Interconnect.scala 152:19]
    gntNet.io.in[0].bits <- T_16801.bits @[Interconnect.scala 153:18]
    T_16801.ready <= gntNet.io.in[0].ready @[Interconnect.scala 154:13]
    gntNet.io.out[0].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_16966 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}} @[Network.scala 117:19]
    T_16966 is invalid @[Network.scala 117:19]
    T_16966.bits.header <- TileLinkEnqueuer_3_1.io.client.grant.bits.header @[Network.scala 118:21]
    T_16966.bits.payload <- TileLinkEnqueuer_3_1.io.client.grant.bits.payload @[Network.scala 119:22]
    T_16966.valid <= TileLinkEnqueuer_3_1.io.client.grant.valid @[Network.scala 120:15]
    TileLinkEnqueuer_3_1.io.client.grant.ready <= T_16966.ready @[Network.scala 121:14]
    node T_17032 = add(TileLinkEnqueuer_3_1.io.client.grant.bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 139:47]
    node T_17033 = tail(T_17032, 1) @[Interconnect.scala 139:47]
    T_16966.bits.header.dst <= T_17033 @[Interconnect.scala 139:25]
    gntNet.io.in[1].valid <= T_16966.valid @[Interconnect.scala 152:19]
    gntNet.io.in[1].bits <- T_16966.bits @[Interconnect.scala 153:18]
    T_16966.ready <= gntNet.io.in[1].ready @[Interconnect.scala 154:13]
    gntNet.io.out[1].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_17371 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}} @[Network.scala 105:19]
    T_17371 is invalid @[Network.scala 105:19]
    T_17371.bits.header <- gntNet.io.out[2].bits.header @[Network.scala 106:21]
    T_17371.bits.payload <- gntNet.io.out[2].bits.payload @[Network.scala 107:22]
    T_17371.valid <= gntNet.io.out[2].valid @[Network.scala 108:15]
    gntNet.io.out[2].ready <= T_17371.ready @[Network.scala 109:14]
    node T_17597 = sub(gntNet.io.out[2].bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 134:47]
    node T_17598 = tail(T_17597, 1) @[Interconnect.scala 134:47]
    T_17371.bits.header.dst <= T_17598 @[Interconnect.scala 134:25]
    TileLinkEnqueuer_4.io.manager.grant.valid <= T_17371.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_4.io.manager.grant.bits <- T_17371.bits @[Interconnect.scala 161:17]
    T_17371.ready <= TileLinkEnqueuer_4.io.manager.grant.ready @[Interconnect.scala 162:13]
    gntNet.io.in[2].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_17936 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}} @[Network.scala 105:19]
    T_17936 is invalid @[Network.scala 105:19]
    T_17936.bits.header <- gntNet.io.out[3].bits.header @[Network.scala 106:21]
    T_17936.bits.payload <- gntNet.io.out[3].bits.payload @[Network.scala 107:22]
    T_17936.valid <= gntNet.io.out[3].valid @[Network.scala 108:15]
    gntNet.io.out[3].ready <= T_17936.ready @[Network.scala 109:14]
    node T_18162 = sub(gntNet.io.out[3].bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 134:47]
    node T_18163 = tail(T_18162, 1) @[Interconnect.scala 134:47]
    T_17936.bits.header.dst <= T_18163 @[Interconnect.scala 134:25]
    TileLinkEnqueuer_1_1.io.manager.grant.valid <= T_17936.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_1_1.io.manager.grant.bits <- T_17936.bits @[Interconnect.scala 161:17]
    T_17936.ready <= TileLinkEnqueuer_1_1.io.manager.grant.ready @[Interconnect.scala 162:13]
    gntNet.io.in[3].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_18486 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}} @[Network.scala 105:19]
    T_18486 is invalid @[Network.scala 105:19]
    T_18486.bits.header <- ackNet.io.out[0].bits.header @[Network.scala 106:21]
    T_18486.bits.payload <- ackNet.io.out[0].bits.payload @[Network.scala 107:22]
    T_18486.valid <= ackNet.io.out[0].valid @[Network.scala 108:15]
    ackNet.io.out[0].ready <= T_18486.ready @[Network.scala 109:14]
    node T_18702 = sub(ackNet.io.out[0].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47]
    node T_18703 = tail(T_18702, 1) @[Interconnect.scala 129:47]
    T_18486.bits.header.src <= T_18703 @[Interconnect.scala 129:25]
    TileLinkEnqueuer_2_1.io.client.finish.valid <= T_18486.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_2_1.io.client.finish.bits <- T_18486.bits @[Interconnect.scala 161:17]
    T_18486.ready <= TileLinkEnqueuer_2_1.io.client.finish.ready @[Interconnect.scala 162:13]
    ackNet.io.in[0].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_19026 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}} @[Network.scala 105:19]
    T_19026 is invalid @[Network.scala 105:19]
    T_19026.bits.header <- ackNet.io.out[1].bits.header @[Network.scala 106:21]
    T_19026.bits.payload <- ackNet.io.out[1].bits.payload @[Network.scala 107:22]
    T_19026.valid <= ackNet.io.out[1].valid @[Network.scala 108:15]
    ackNet.io.out[1].ready <= T_19026.ready @[Network.scala 109:14]
    node T_19242 = sub(ackNet.io.out[1].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47]
    node T_19243 = tail(T_19242, 1) @[Interconnect.scala 129:47]
    T_19026.bits.header.src <= T_19243 @[Interconnect.scala 129:25]
    TileLinkEnqueuer_3_1.io.client.finish.valid <= T_19026.valid @[Interconnect.scala 160:18]
    TileLinkEnqueuer_3_1.io.client.finish.bits <- T_19026.bits @[Interconnect.scala 161:17]
    T_19026.ready <= TileLinkEnqueuer_3_1.io.client.finish.ready @[Interconnect.scala 162:13]
    ackNet.io.in[1].valid <= UInt<1>("h00") @[Interconnect.scala 163:19]
    wire T_19326 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}} @[Network.scala 117:19]
    T_19326 is invalid @[Network.scala 117:19]
    T_19326.bits.header <- TileLinkEnqueuer_4.io.manager.finish.bits.header @[Network.scala 118:21]
    T_19326.bits.payload <- TileLinkEnqueuer_4.io.manager.finish.bits.payload @[Network.scala 119:22]
    T_19326.valid <= TileLinkEnqueuer_4.io.manager.finish.valid @[Network.scala 120:15]
    TileLinkEnqueuer_4.io.manager.finish.ready <= T_19326.ready @[Network.scala 121:14]
    node T_19382 = add(TileLinkEnqueuer_4.io.manager.finish.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47]
    node T_19383 = tail(T_19382, 1) @[Interconnect.scala 144:47]
    T_19326.bits.header.src <= T_19383 @[Interconnect.scala 144:25]
    ackNet.io.in[2].valid <= T_19326.valid @[Interconnect.scala 152:19]
    ackNet.io.in[2].bits <- T_19326.bits @[Interconnect.scala 153:18]
    T_19326.ready <= ackNet.io.in[2].ready @[Interconnect.scala 154:13]
    ackNet.io.out[2].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    wire T_19466 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}} @[Network.scala 117:19]
    T_19466 is invalid @[Network.scala 117:19]
    T_19466.bits.header <- TileLinkEnqueuer_1_1.io.manager.finish.bits.header @[Network.scala 118:21]
    T_19466.bits.payload <- TileLinkEnqueuer_1_1.io.manager.finish.bits.payload @[Network.scala 119:22]
    T_19466.valid <= TileLinkEnqueuer_1_1.io.manager.finish.valid @[Network.scala 120:15]
    TileLinkEnqueuer_1_1.io.manager.finish.ready <= T_19466.ready @[Network.scala 121:14]
    node T_19522 = add(TileLinkEnqueuer_1_1.io.manager.finish.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47]
    node T_19523 = tail(T_19522, 1) @[Interconnect.scala 144:47]
    T_19466.bits.header.src <= T_19523 @[Interconnect.scala 144:25]
    ackNet.io.in[3].valid <= T_19466.valid @[Interconnect.scala 152:19]
    ackNet.io.in[3].bits <- T_19466.bits @[Interconnect.scala 153:18]
    T_19466.ready <= ackNet.io.in[3].ready @[Interconnect.scala 154:13]
    ackNet.io.out[3].ready <= UInt<1>("h00") @[Interconnect.scala 155:20]
    
  module BufferedBroadcastVoluntaryReleaseTracker : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30]
    all_pending_done is invalid @[Trackers.scala 86:30]
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30]
    vol_ignt_counter is invalid @[Trackers.scala 241:30]
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30]
    vol_ognt_counter is invalid @[Trackers.scala 306:30]
    node T_78 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61]
    node T_79 = or(pending_orel_send, T_78) @[Trackers.scala 307:40]
    node scoreboard_2 = or(T_79, vol_ognt_counter.pending) @[Trackers.scala 307:65]
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_103 : {sharers : UInt<1>} @[Metadata.scala 309:20]
    T_103 is invalid @[Metadata.scala 309:20]
    T_103.sharers <= UInt<1>("h00") @[Metadata.scala 311:18]
    wire T_149 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_149 is invalid @[Metadata.scala 158:20]
    T_149.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17]
    coh is invalid @[Metadata.scala 337:17]
    coh.inner <- T_103 @[Metadata.scala 338:13]
    coh.outer <- T_149 @[Metadata.scala 339:13]
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    node T_1519 = eq(state, UInt<4>("h00")) @[Broadcast.scala 81:18]
    node T_1520 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_1521 = and(T_1519, T_1520) @[Broadcast.scala 81:29]
    node T_1522 = and(T_1521, io.alloc.irel.should) @[Broadcast.scala 81:56]
    node T_1524 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Broadcast.scala 81:83]
    node T_1525 = and(T_1522, T_1524) @[Broadcast.scala 81:80]
    node T_1527 = eq(T_1525, UInt<1>("h00")) @[Broadcast.scala 81:10]
    node T_1528 = or(T_1527, reset) @[Broadcast.scala 81:9]
    node T_1530 = eq(T_1528, UInt<1>("h00")) @[Broadcast.scala 81:9]
    when T_1530 : @[Broadcast.scala 81:9]
      printf(clk, UInt<1>(1), "Assertion failed: VoluntaryReleaseTracker accepted Release that wasn't voluntary!\n    at Broadcast.scala:81 assert(!(state === s_idle && io.inner.release.fire() && io.alloc.irel.should && !io.irel().isVoluntary()),\n") @[Broadcast.scala 81:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 81:9]
      skip @[Broadcast.scala 81:9]
    wire T_1544 : UInt<64>[8] @[Trackers.scala 150:54]
    T_1544 is invalid @[Trackers.scala 150:54]
    T_1544[0] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1544[1] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1544[2] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1544[3] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1544[4] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1544[5] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1544[6] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1544[7] <= UInt<64>("h00") @[Trackers.scala 150:54]
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1544))
    node T_1552 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37]
    node T_1553 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1554 = and(T_1552, T_1553) @[Trackers.scala 428:49]
    io.alloc.iacq.matches <= T_1554 @[Trackers.scala 428:27]
    node T_1555 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37]
    node T_1556 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1557 = and(T_1555, T_1556) @[Trackers.scala 429:49]
    io.alloc.irel.matches <= T_1557 @[Trackers.scala 429:27]
    node T_1558 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37]
    node T_1559 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1560 = and(T_1558, T_1559) @[Trackers.scala 430:49]
    io.alloc.oprb.matches <= T_1560 @[Trackers.scala 430:27]
    node T_1561 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32]
    node T_1562 = and(T_1561, UInt<1>("h00")) @[Trackers.scala 431:43]
    io.alloc.iacq.can <= T_1562 @[Trackers.scala 431:23]
    node T_1563 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32]
    node T_1564 = and(T_1563, UInt<1>("h01")) @[Trackers.scala 432:43]
    io.alloc.irel.can <= T_1564 @[Trackers.scala 432:23]
    node T_1565 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32]
    node T_1566 = and(T_1565, UInt<1>("h00")) @[Trackers.scala 433:43]
    io.alloc.oprb.can <= T_1566 @[Trackers.scala 433:23]
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25]
    node T_1567 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28]
    io.alloc.idle <= T_1567 @[Trackers.scala 435:19]
    node T_1568 = or(scoreboard_2, vol_ognt_counter.pending) @[Broadcast.scala 117:46]
    node T_1570 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_1571 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19]
    node T_1572 = mux(T_1571, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12]
    node T_1573 = and(T_1572, io.inner.release.bits.voluntary) @[Trackers.scala 254:76]
    node T_1576 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_1577 = and(T_1573, T_1576) @[Trackers.scala 254:95]
    node T_1578 = and(T_1570, T_1577) @[Counters.scala 92:62]
    node T_1580 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_1581 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_1582 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_1583 = or(T_1580, T_1581) @[Package.scala 7:62]
    node T_1584 = or(T_1583, T_1582) @[Package.scala 7:62]
    node T_1585 = and(UInt<1>("h01"), T_1584) @[Definitions.scala 256:64]
    node T_1586 = and(T_1578, T_1585) @[Counters.scala 36:47]
    reg T_1588 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_1586 : @[Counter.scala 43:17]
      node T_1590 = eq(T_1588, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1592 = add(T_1588, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1593 = tail(T_1592, 1) @[Counter.scala 21:22]
      T_1588 <= T_1593 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_1594 = and(T_1586, T_1590) @[Counter.scala 44:20]
    node T_1595 = mux(T_1585, T_1588, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_1596 = mux(T_1585, T_1594, T_1578) @[Counters.scala 38:19]
    node T_1597 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_1598 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40]
    node T_1600 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_1601 = and(io.inner.grant.bits.is_builtin_type, T_1600) @[Definitions.scala 277:59]
    node T_1602 = and(T_1598, T_1601) @[Trackers.scala 256:52]
    node T_1603 = and(T_1597, T_1602) @[Counters.scala 93:64]
    wire T_1611 : UInt<3>[1] @[Definitions.scala 853:34]
    T_1611 is invalid @[Definitions.scala 853:34]
    T_1611[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_1613 = eq(io.inner.grant.bits.g_type, T_1611[0]) @[Package.scala 7:47]
    node T_1614 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_1615 = mux(io.inner.grant.bits.is_builtin_type, T_1613, T_1614) @[Definitions.scala 274:33]
    node T_1616 = and(UInt<1>("h01"), T_1615) @[Definitions.scala 274:27]
    node T_1617 = and(T_1603, T_1616) @[Counters.scala 36:47]
    reg T_1619 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_1617 : @[Counter.scala 43:17]
      node T_1621 = eq(T_1619, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1623 = add(T_1619, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1624 = tail(T_1623, 1) @[Counter.scala 21:22]
      T_1619 <= T_1624 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_1625 = and(T_1617, T_1621) @[Counter.scala 44:20]
    node T_1626 = mux(T_1616, T_1619, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_1627 = mux(T_1616, T_1625, T_1603) @[Counters.scala 38:19]
    reg T_1629 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1631 = eq(T_1627, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_1632 = and(T_1596, T_1631) @[Counters.scala 32:14]
    when T_1632 : @[Counters.scala 32:24]
      node T_1634 = add(T_1629, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_1635 = tail(T_1634, 1) @[Counters.scala 32:37]
      T_1629 <= T_1635 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_1637 = eq(T_1596, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_1638 = and(T_1627, T_1637) @[Counters.scala 33:16]
    when T_1638 : @[Counters.scala 33:24]
      node T_1640 = sub(T_1629, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_1641 = tail(T_1640, 1) @[Counters.scala 33:37]
      T_1629 <= T_1641 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_1643 = gt(T_1629, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ignt_counter.pending <= T_1643 @[Counters.scala 95:20]
    vol_ignt_counter.up.idx <= T_1595 @[Counters.scala 96:19]
    vol_ignt_counter.up.done <= T_1596 @[Counters.scala 97:20]
    vol_ignt_counter.down.idx <= T_1626 @[Counters.scala 98:21]
    vol_ignt_counter.down.done <= T_1627 @[Counters.scala 99:22]
    node T_1644 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_1645 = and(T_1644, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_1646 = and(T_1645, io.inner.release.valid) @[Trackers.scala 245:75]
    when T_1646 : @[Trackers.scala 259:30]
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23]
      node T_1648 = not(UInt<8>("h00")) @[Trackers.scala 264:28]
      pending_irel_data <= T_1648 @[Trackers.scala 264:25]
      state <= UInt<4>("h07") @[Trackers.scala 265:13]
      skip @[Trackers.scala 259:30]
    node T_1649 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_1650 = and(T_1649, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_1651 = and(T_1650, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_1653 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1654 = and(T_1653, io.inner.release.bits.voluntary) @[Trackers.scala 644:61]
    node T_1656 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 646:45]
    node T_1657 = and(T_1654, T_1656) @[Trackers.scala 645:51]
    node T_1658 = or(UInt<1>("h00"), T_1657) @[Trackers.scala 246:47]
    node T_1659 = and(T_1658, io.inner.release.valid) @[Trackers.scala 246:66]
    node T_1660 = or(T_1651, T_1659) @[Trackers.scala 268:41]
    node T_1661 = and(T_1660, io.inner.release.ready) @[Trackers.scala 268:61]
    when T_1661 : @[Trackers.scala 269:22]
      node T_1663 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_1664 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_1665 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_1666 = or(T_1663, T_1664) @[Package.scala 7:62]
      node T_1667 = or(T_1666, T_1665) @[Package.scala 7:62]
      node T_1668 = and(UInt<1>("h01"), T_1667) @[Definitions.scala 256:64]
      node T_1670 = eq(T_1668, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_1672 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_1673 = or(T_1670, T_1672) @[Definitions.scala 141:57]
      when T_1673 : @[Trackers.scala 270:32]
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40]
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30]
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27]
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38]
          skip @[Trackers.scala 271:40]
        node T_1675 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_1676 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_1677 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_1678 = or(T_1675, T_1676) @[Package.scala 7:62]
        node T_1679 = or(T_1678, T_1677) @[Package.scala 7:62]
        node T_1680 = and(UInt<1>("h01"), T_1679) @[Definitions.scala 256:64]
        node T_1681 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_1682 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_1683 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_1684 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_1685 = or(T_1682, T_1683) @[Package.scala 7:62]
        node T_1686 = or(T_1685, T_1684) @[Package.scala 7:62]
        node T_1687 = and(T_1681, T_1686) @[Trackers.scala 122:38]
        node T_1688 = bits(T_1687, 0, 0) @[Bitwise.scala 33:15]
        node T_1691 = mux(T_1688, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_1692 = not(T_1691) @[Trackers.scala 92:5]
        node T_1694 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_1695 = not(T_1694) @[Trackers.scala 92:34]
        node T_1696 = or(T_1692, T_1695) @[Trackers.scala 92:32]
        node T_1698 = mux(T_1680, T_1696, UInt<1>("h00")) @[Trackers.scala 278:33]
        pending_irel_data <= T_1698 @[Trackers.scala 278:27]
        skip @[Trackers.scala 270:32]
      node T_1700 = eq(T_1673, UInt<1>("h00")) @[Trackers.scala 270:32]
      when T_1700 : @[Trackers.scala 281:20]
        node T_1701 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_1702 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_1703 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_1704 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_1705 = or(T_1702, T_1703) @[Package.scala 7:62]
        node T_1706 = or(T_1705, T_1704) @[Package.scala 7:62]
        node T_1707 = and(T_1701, T_1706) @[Trackers.scala 122:38]
        node T_1708 = bits(T_1707, 0, 0) @[Bitwise.scala 33:15]
        node T_1711 = mux(T_1708, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_1712 = not(T_1711) @[Trackers.scala 92:5]
        node T_1714 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_1715 = not(T_1714) @[Trackers.scala 92:34]
        node T_1716 = or(T_1712, T_1715) @[Trackers.scala 92:32]
        node T_1717 = and(pending_irel_data, T_1716) @[Trackers.scala 282:49]
        pending_irel_data <= T_1717 @[Trackers.scala 282:27]
        skip @[Trackers.scala 281:20]
      skip @[Trackers.scala 269:22]
    node T_1718 = eq(state, UInt<4>("h03")) @[Package.scala 7:47]
    node T_1719 = eq(state, UInt<4>("h04")) @[Package.scala 7:47]
    node T_1720 = eq(state, UInt<4>("h05")) @[Package.scala 7:47]
    node T_1721 = eq(state, UInt<4>("h07")) @[Package.scala 7:47]
    node T_1722 = or(T_1718, T_1719) @[Package.scala 7:62]
    node T_1723 = or(T_1722, T_1720) @[Package.scala 7:62]
    node T_1724 = or(T_1723, T_1721) @[Package.scala 7:62]
    node T_1725 = and(T_1724, vol_ignt_counter.pending) @[Trackers.scala 292:87]
    node T_1727 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51]
    node T_1728 = or(T_1727, T_1568) @[Trackers.scala 294:55]
    node T_1730 = eq(T_1728, UInt<1>("h00")) @[Trackers.scala 294:31]
    node T_1731 = and(T_1725, T_1730) @[Trackers.scala 293:56]
    io.inner.grant.valid <= T_1731 @[Trackers.scala 292:26]
    wire T_1763 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 773:19]
    T_1763 is invalid @[Definitions.scala 773:19]
    T_1763.client_id <= xact_vol_ir_src @[Definitions.scala 774:19]
    T_1763.voluntary <= UInt<1>("h01") @[Definitions.scala 775:19]
    T_1763.r_type <= xact_vol_ir_r_type @[Definitions.scala 776:16]
    T_1763.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 777:24]
    T_1763.addr_block <= xact_addr_block @[Definitions.scala 778:20]
    T_1763.addr_beat <= UInt<1>("h00") @[Definitions.scala 779:19]
    T_1763.data <= UInt<1>("h00") @[Definitions.scala 780:14]
    wire T_1824 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_1824 is invalid @[Definitions.scala 882:19]
    T_1824.client_id <= T_1763.client_id @[Definitions.scala 883:19]
    T_1824.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 884:25]
    T_1824.g_type <= UInt<3>("h00") @[Definitions.scala 885:16]
    T_1824.client_xact_id <= T_1763.client_xact_id @[Definitions.scala 886:24]
    T_1824.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 887:25]
    T_1824.addr_beat <= UInt<1>("h00") @[Definitions.scala 888:19]
    T_1824.data <= UInt<1>("h00") @[Definitions.scala 889:14]
    io.inner.grant.bits <- T_1824 @[Trackers.scala 296:25]
    node scoreboard_0 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38]
    node T_1853 = eq(state, UInt<4>("h00")) @[Broadcast.scala 120:35]
    node T_1855 = or(T_1853, UInt<1>("h00")) @[Broadcast.scala 120:46]
    node T_1856 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1857 = and(T_1856, io.inner.release.bits.voluntary) @[Trackers.scala 644:61]
    node T_1859 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 646:45]
    node T_1860 = and(T_1857, T_1859) @[Trackers.scala 645:51]
    node T_1861 = or(T_1855, T_1860) @[Broadcast.scala 120:64]
    io.inner.release.ready <= T_1861 @[Broadcast.scala 120:26]
    node T_1862 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    when T_1862 : @[Broadcast.scala 122:33]
      data_buffer[io.inner.release.bits.addr_beat] <= io.inner.release.bits.data @[Broadcast.scala 122:68]
      skip @[Broadcast.scala 122:33]
    node T_1863 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 36:32]
    node T_1864 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 36:49]
    node T_1865 = or(T_1863, T_1864) @[Consts.scala 36:42]
    node T_1867 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 33:40]
    node T_1868 = or(UInt<1>("h00"), T_1867) @[Consts.scala 33:33]
    node T_1869 = or(T_1865, T_1868) @[Consts.scala 36:59]
    node T_1870 = mux(T_1869, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23]
    wire T_1893 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_1893 is invalid @[Metadata.scala 158:20]
    T_1893.state <= T_1870 @[Metadata.scala 159:16]
    node T_1915 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_1916 = and(T_1915, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_1917 = and(T_1916, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_1921 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17]
    node T_1922 = or(T_1921, io.alloc.irel.should) @[Trackers.scala 331:28]
    when T_1922 : @[Trackers.scala 331:53]
      node T_1924 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_1925 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_1926 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_1927 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_1928 = or(T_1925, T_1926) @[Package.scala 7:62]
      node T_1929 = or(T_1928, T_1927) @[Package.scala 7:62]
      node T_1930 = and(T_1924, T_1929) @[Trackers.scala 101:37]
      node T_1931 = and(T_1930, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_1932 = bits(T_1931, 0, 0) @[Bitwise.scala 33:15]
      node T_1935 = mux(T_1932, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1937 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1938 = and(T_1935, T_1937) @[Trackers.scala 89:31]
      node T_1939 = or(pending_orel_data, T_1938) @[Trackers.scala 332:47]
      node T_1940 = or(T_1939, UInt<1>("h00")) @[Trackers.scala 333:58]
      node T_1941 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
      node T_1942 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_1943 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_1944 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_1945 = or(T_1942, T_1943) @[Package.scala 7:62]
      node T_1946 = or(T_1945, T_1944) @[Package.scala 7:62]
      node T_1947 = and(T_1941, T_1946) @[Trackers.scala 122:38]
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15]
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1952 = not(T_1951) @[Trackers.scala 92:5]
      node T_1954 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1955 = not(T_1954) @[Trackers.scala 92:34]
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32]
      node T_1957 = and(T_1940, T_1956) @[Trackers.scala 334:34]
      pending_orel_data <= T_1957 @[Trackers.scala 332:25]
      skip @[Trackers.scala 331:53]
    when T_1917 : @[Trackers.scala 337:33]
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53]
      skip @[Trackers.scala 337:33]
    node T_1959 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    when T_1959 : @[Trackers.scala 338:36]
      node T_1961 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_1962 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_1963 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_1964 = or(T_1961, T_1962) @[Package.scala 7:62]
      node T_1965 = or(T_1964, T_1963) @[Package.scala 7:62]
      node T_1966 = and(UInt<1>("h01"), T_1965) @[Definitions.scala 256:64]
      node T_1968 = eq(T_1966, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_1970 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_1971 = or(T_1968, T_1970) @[Definitions.scala 141:57]
      when T_1971 : @[Trackers.scala 339:44]
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59]
        skip @[Trackers.scala 339:44]
      node T_1974 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_1975 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_1976 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_1977 = or(T_1974, T_1975) @[Package.scala 7:62]
      node T_1978 = or(T_1977, T_1976) @[Package.scala 7:62]
      node T_1979 = and(UInt<1>("h01"), T_1978) @[Definitions.scala 256:64]
      node T_1981 = eq(T_1979, UInt<1>("h00")) @[Definitions.scala 142:36]
      node T_1983 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
      node T_1984 = or(T_1981, T_1983) @[Definitions.scala 142:56]
      when T_1984 : @[Trackers.scala 340:44]
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59]
        skip @[Trackers.scala 340:44]
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25]
      skip @[Trackers.scala 338:36]
    node T_1988 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_1991 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_1992 = and(io.outer.release.bits.voluntary, T_1991) @[Trackers.scala 348:51]
    node T_1993 = and(T_1988, T_1992) @[Counters.scala 92:62]
    node T_1995 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_1996 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_1997 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_1998 = or(T_1995, T_1996) @[Package.scala 7:62]
    node T_1999 = or(T_1998, T_1997) @[Package.scala 7:62]
    node T_2000 = and(UInt<1>("h01"), T_1999) @[Definitions.scala 256:64]
    node T_2001 = and(T_1993, T_2000) @[Counters.scala 36:47]
    reg T_2003 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2001 : @[Counter.scala 43:17]
      node T_2005 = eq(T_2003, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2007 = add(T_2003, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2008 = tail(T_2007, 1) @[Counter.scala 21:22]
      T_2003 <= T_2008 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2009 = and(T_2001, T_2005) @[Counter.scala 44:20]
    node T_2010 = mux(T_2000, T_2003, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2011 = mux(T_2000, T_2009, T_1993) @[Counters.scala 38:19]
    node T_2012 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2014 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2015 = and(io.outer.grant.bits.is_builtin_type, T_2014) @[Definitions.scala 277:59]
    node T_2016 = and(T_2012, T_2015) @[Counters.scala 93:64]
    wire T_2024 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2024 is invalid @[Definitions.scala 853:34]
    T_2024[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2026 = eq(io.outer.grant.bits.g_type, T_2024[0]) @[Package.scala 7:47]
    node T_2027 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2028 = mux(io.outer.grant.bits.is_builtin_type, T_2026, T_2027) @[Definitions.scala 274:33]
    node T_2029 = and(UInt<1>("h01"), T_2028) @[Definitions.scala 274:27]
    node T_2030 = and(T_2016, T_2029) @[Counters.scala 36:47]
    reg T_2032 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2030 : @[Counter.scala 43:17]
      node T_2034 = eq(T_2032, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2036 = add(T_2032, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2037 = tail(T_2036, 1) @[Counter.scala 21:22]
      T_2032 <= T_2037 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2038 = and(T_2030, T_2034) @[Counter.scala 44:20]
    node T_2039 = mux(T_2029, T_2032, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2040 = mux(T_2029, T_2038, T_2016) @[Counters.scala 38:19]
    reg T_2042 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2044 = eq(T_2040, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2045 = and(T_2011, T_2044) @[Counters.scala 32:14]
    when T_2045 : @[Counters.scala 32:24]
      node T_2047 = add(T_2042, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2048 = tail(T_2047, 1) @[Counters.scala 32:37]
      T_2042 <= T_2048 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2050 = eq(T_2011, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2051 = and(T_2040, T_2050) @[Counters.scala 33:16]
    when T_2051 : @[Counters.scala 33:24]
      node T_2053 = sub(T_2042, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2054 = tail(T_2053, 1) @[Counters.scala 33:37]
      T_2042 <= T_2054 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2056 = gt(T_2042, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ognt_counter.pending <= T_2056 @[Counters.scala 95:20]
    vol_ognt_counter.up.idx <= T_2010 @[Counters.scala 96:19]
    vol_ognt_counter.up.done <= T_2011 @[Counters.scala 97:20]
    vol_ognt_counter.down.idx <= T_2039 @[Counters.scala 98:21]
    vol_ognt_counter.down.done <= T_2040 @[Counters.scala 99:22]
    node T_2058 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31]
    node T_2059 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14]
    node T_2060 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2061 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2062 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2063 = or(T_2060, T_2061) @[Package.scala 7:62]
    node T_2064 = or(T_2063, T_2062) @[Package.scala 7:62]
    node T_2065 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26]
    node T_2066 = bits(T_2065, 0, 0) @[Trackers.scala 353:26]
    node T_2067 = mux(T_2064, T_2066, pending_orel_send) @[Trackers.scala 352:32]
    node T_2068 = and(T_2059, T_2067) @[Trackers.scala 352:26]
    node T_2069 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13]
    node T_2070 = and(T_2069, io.alloc.irel.matches) @[Trackers.scala 356:24]
    node T_2071 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2072 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2073 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2074 = or(T_2071, T_2072) @[Package.scala 7:62]
    node T_2075 = or(T_2074, T_2073) @[Package.scala 7:62]
    node T_2076 = and(T_2070, T_2075) @[Trackers.scala 356:49]
    node T_2077 = and(T_2076, io.inner.release.valid) @[Trackers.scala 357:29]
    node T_2078 = mux(UInt<1>("h01"), T_2068, T_2077) @[Trackers.scala 351:49]
    node T_2079 = and(T_2058, T_2078) @[Trackers.scala 351:43]
    io.outer.release.valid <= T_2079 @[Trackers.scala 351:28]
    node T_2082 = eq(T_1893.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2083 = mux(T_2082, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_2084 = mux(T_2082, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_2085 = mux(T_2082, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_2086 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2087 = mux(T_2086, T_2085, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_2088 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2089 = mux(T_2088, T_2084, T_2087) @[Mux.scala 46:16]
    node T_2090 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2091 = mux(T_2090, T_2083, T_2089) @[Mux.scala 46:16]
    wire T_2119 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_2119 is invalid @[Definitions.scala 754:19]
    T_2119.r_type <= T_2091 @[Definitions.scala 755:16]
    T_2119.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_2119.addr_block <= xact_addr_block @[Definitions.scala 757:20]
    T_2119.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 758:19]
    T_2119.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 759:14]
    T_2119.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    io.outer.release.bits <- T_2119 @[Trackers.scala 359:27]
    when vol_ognt_counter.pending : @[Trackers.scala 365:37]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60]
      skip @[Trackers.scala 365:37]
    node T_2148 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60]
    node T_2149 = or(T_2148, vol_ignt_counter.pending) @[Trackers.scala 50:60]
    node T_2150 = or(T_2149, scoreboard_2) @[Trackers.scala 50:60]
    node T_2151 = or(T_2150, vol_ognt_counter.pending) @[Trackers.scala 50:60]
    node T_2153 = eq(T_2151, UInt<1>("h00")) @[Trackers.scala 50:25]
    all_pending_done <= T_2153 @[Trackers.scala 50:22]
    node T_2154 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16]
    node T_2155 = and(T_2154, all_pending_done) @[Trackers.scala 51:27]
    when T_2155 : @[Trackers.scala 51:48]
      state <= UInt<4>("h00") @[Trackers.scala 52:13]
      skip @[Trackers.scala 51:48]
    
  module Queue_10 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>}[2] @[Decoupled.scala 175:16]
    reg T_245 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_247 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_245, T_247) @[Decoupled.scala 180:33]
    node T_250 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_250) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_251 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_251
    node T_252 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_252
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_253 = ram[T_245], clk
      T_253 <- io.enq.bits @[Decoupled.scala 187:24]
      node T_280 = eq(T_245, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_282 = add(T_245, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_283 = tail(T_282, 1) @[Counter.scala 21:22]
      T_245 <= T_283 @[Counter.scala 21:13]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      node T_285 = eq(T_247, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_287 = add(T_247, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_288 = tail(T_287, 1) @[Counter.scala 21:22]
      T_247 <= T_288 @[Counter.scala 21:13]
      skip @[Decoupled.scala 190:17]
    node T_289 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_289 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_291 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_291 @[Decoupled.scala 197:16]
    node T_293 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_293 @[Decoupled.scala 198:16]
    infer mport T_294 = ram[T_247], clk
    io.deq.bits <- T_294 @[Decoupled.scala 199:15]
    node T_320 = sub(T_245, T_247) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_320, 1) @[Decoupled.scala 214:32]
    node T_321 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_322 = cat(T_321, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_322 @[Decoupled.scala 216:14]
    
  module BufferedBroadcastAcquireTracker : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30]
    all_pending_done is invalid @[Trackers.scala 86:30]
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28]
    xact_addr_beat is invalid @[Trackers.scala 215:28]
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23]
    xact_iacq is invalid @[Trackers.scala 216:23]
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30]
    vol_ignt_counter is invalid @[Trackers.scala 241:30]
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26]
    scoreboard_6 is invalid @[Trackers.scala 454:26]
    wire ignt_data_idx : UInt @[Trackers.scala 455:27]
    ignt_data_idx is invalid @[Trackers.scala 455:27]
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28]
    ignt_data_done is invalid @[Trackers.scala 456:28]
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26]
    ifin_counter is invalid @[Trackers.scala 457:26]
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26]
    ognt_counter is invalid @[Trackers.scala 577:26]
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40]
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30]
    vol_ognt_counter is invalid @[Trackers.scala 306:30]
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61]
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40]
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65]
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20]
    T_195 is invalid @[Metadata.scala 309:20]
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18]
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_241 is invalid @[Metadata.scala 158:20]
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17]
    coh is invalid @[Metadata.scala 337:17]
    coh.inner <- T_195 @[Metadata.scala 338:13]
    coh.outer <- T_241 @[Metadata.scala 339:13]
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18]
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29]
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56]
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1623 is invalid @[Definitions.scala 355:35]
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Package.scala 7:47]
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89]
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80]
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1636 is invalid @[Definitions.scala 355:35]
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Package.scala 7:47]
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89]
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57]
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37]
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34]
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10]
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9]
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9]
    when T_1652 : @[Broadcast.scala 98:9]
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9]
      skip @[Broadcast.scala 98:9]
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18]
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29]
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28]
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28]
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73]
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58]
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45]
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10]
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9]
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9]
    when T_1666 : @[Broadcast.scala 102:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9]
      skip @[Broadcast.scala 102:9]
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18]
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29]
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28]
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56]
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45]
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10]
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9]
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9]
    when T_1677 : @[Broadcast.scala 105:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9]
      skip @[Broadcast.scala 105:9]
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54]
    T_1691 is invalid @[Trackers.scala 150:54]
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54]
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55]
    T_1709 is invalid @[Trackers.scala 179:55]
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55]
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56]
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56]
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56]
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56]
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56]
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56]
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56]
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56]
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56]
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23]
    data_valid is invalid @[Trackers.scala 180:23]
    data_valid[0] <= T_1716 @[Trackers.scala 180:23]
    data_valid[1] <= T_1719 @[Trackers.scala 180:23]
    data_valid[2] <= T_1722 @[Trackers.scala 180:23]
    data_valid[3] <= T_1725 @[Trackers.scala 180:23]
    data_valid[4] <= T_1728 @[Trackers.scala 180:23]
    data_valid[5] <= T_1731 @[Trackers.scala 180:23]
    data_valid[6] <= T_1734 @[Trackers.scala 180:23]
    data_valid[7] <= T_1737 @[Trackers.scala 180:23]
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37]
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49]
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27]
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37]
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49]
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27]
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37]
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49]
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27]
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32]
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43]
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23]
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32]
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43]
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23]
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32]
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43]
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23]
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25]
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28]
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19]
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61]
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53]
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67]
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44]
    inst ignt_q of Queue_10 @[Trackers.scala 450:27]
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29]
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48]
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64]
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1812 is invalid @[Definitions.scala 355:35]
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Package.scala 7:47]
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89]
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57]
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54]
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47]
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25]
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24]
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21]
    xact_iacq <- T_1823 @[Trackers.scala 480:15]
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20]
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37]
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18]
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17]
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28]
    when T_1852 : @[Trackers.scala 485:53]
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1862 is invalid @[Definitions.scala 354:26]
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Package.scala 7:47]
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Package.scala 7:47]
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Package.scala 7:47]
      node T_1867 = or(T_1864, T_1865) @[Package.scala 7:62]
      node T_1868 = or(T_1867, T_1866) @[Package.scala 7:62]
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55]
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38]
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15]
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1875 = not(T_1874) @[Trackers.scala 92:5]
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1878 = not(T_1877) @[Trackers.scala 92:34]
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32]
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45]
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35]
      T_1890 is invalid @[Definitions.scala 355:35]
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Package.scala 7:47]
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89]
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28]
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36]
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45]
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8]
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60]
      pending_put_data <= T_1907 @[Trackers.scala 486:24]
      skip @[Trackers.scala 485:53]
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_1910 : @[Trackers.scala 492:30]
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23]
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39]
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45]
      xact_allocate <= T_1912 @[Trackers.scala 494:21]
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65]
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28]
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54]
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54]
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36]
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17]
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36]
      xact_op_code <= T_1924 @[Trackers.scala 496:20]
      node T_1925 = bits(io.inner.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22]
      node T_1926 = bits(io.inner.acquire.bits.union, 7, 6) @[Definitions.scala 176:38]
      xact_op_size <= T_1926 @[Trackers.scala 498:20]
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54]
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1939 is invalid @[Definitions.scala 354:26]
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Package.scala 7:47]
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Package.scala 7:47]
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Package.scala 7:47]
      node T_1944 = or(T_1941, T_1942) @[Package.scala 7:62]
      node T_1945 = or(T_1944, T_1943) @[Package.scala 7:62]
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55]
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38]
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15]
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1952 = not(T_1951) @[Trackers.scala 92:5]
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1955 = not(T_1954) @[Trackers.scala 92:34]
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32]
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30]
      pending_put_data <= T_1958 @[Trackers.scala 500:24]
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25]
      state <= UInt<4>("h05") @[Trackers.scala 505:13]
      skip @[Trackers.scala 492:30]
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37]
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35]
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46]
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61]
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53]
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1976 is invalid @[Definitions.scala 355:35]
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Package.scala 7:47]
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89]
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49]
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64]
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26]
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46]
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46]
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16]
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16]
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16]
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16]
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16]
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16]
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16]
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8]
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 694:19]
    T_2030 is invalid @[Definitions.scala 694:19]
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 695:19]
    T_2030.p_type <= T_2005 @[Definitions.scala 696:16]
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 697:20]
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9]
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8]
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30]
    T_2065 is invalid @[Trackers.scala 393:30]
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2074 = not(T_2073) @[Trackers.scala 98:5]
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15]
    node T_2077 = not(T_2076) @[Trackers.scala 98:40]
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38]
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38]
    pending_iprbs <= T_2079 @[Trackers.scala 395:21]
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37]
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72]
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55]
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28]
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27]
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17]
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22]
      T_2091 <= T_2096 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20]
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 38:19]
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44]
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59]
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56]
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 93:64]
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2110 = or(T_2107, T_2108) @[Package.scala 7:62]
    node T_2111 = or(T_2110, T_2109) @[Package.scala 7:62]
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64]
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 36:47]
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17]
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22]
      T_2115 <= T_2120 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20]
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 38:19]
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 32:14]
    when T_2128 : @[Counters.scala 32:24]
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2131 = tail(T_2130, 1) @[Counters.scala 32:37]
      T_2125 <= T_2131 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 33:16]
    when T_2134 : @[Counters.scala 33:24]
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2137 = tail(T_2136, 1) @[Counters.scala 33:37]
      T_2125 <= T_2137 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 95:27]
    T_2065.pending <= T_2139 @[Counters.scala 95:20]
    T_2065.up.idx <= T_2098 @[Counters.scala 96:19]
    T_2065.up.done <= T_2099 @[Counters.scala 97:20]
    T_2065.down.idx <= T_2122 @[Counters.scala 98:21]
    T_2065.down.done <= T_2123 @[Counters.scala 99:22]
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18]
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55]
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59]
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39]
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36]
    when T_2146 : @[Trackers.scala 406:85]
      state <= T_2056 @[Trackers.scala 407:15]
      skip @[Trackers.scala 406:85]
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19]
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12]
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76]
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95]
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 92:62]
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2161 = or(T_2158, T_2159) @[Package.scala 7:62]
    node T_2162 = or(T_2161, T_2160) @[Package.scala 7:62]
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64]
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 36:47]
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17]
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22]
      T_2166 <= T_2171 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20]
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 38:19]
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40]
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59]
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52]
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 93:64]
    wire T_2189 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2189 is invalid @[Definitions.scala 853:34]
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Package.scala 7:47]
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33]
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27]
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 36:47]
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17]
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22]
      T_2197 <= T_2202 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20]
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 38:19]
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 32:14]
    when T_2210 : @[Counters.scala 32:24]
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2213 = tail(T_2212, 1) @[Counters.scala 32:37]
      T_2207 <= T_2213 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 33:16]
    when T_2216 : @[Counters.scala 33:24]
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2219 = tail(T_2218, 1) @[Counters.scala 33:37]
      T_2207 <= T_2219 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 95:20]
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 96:19]
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 97:20]
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 98:21]
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 99:22]
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75]
    when T_2224 : @[Trackers.scala 259:30]
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23]
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28]
      pending_irel_data <= T_2226 @[Trackers.scala 264:25]
      state <= UInt<4>("h07") @[Trackers.scala 265:13]
      skip @[Trackers.scala 259:30]
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2232 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2233 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2234 = or(T_2232, T_2233) @[Package.scala 7:62]
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50]
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63]
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44]
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49]
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49]
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60]
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40]
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47]
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2261 = or(T_2258, T_2259) @[Package.scala 7:62]
    node T_2262 = or(T_2261, T_2260) @[Package.scala 7:62]
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39]
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19]
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52]
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61]
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51]
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47]
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66]
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41]
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61]
    when T_2277 : @[Trackers.scala 269:22]
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2282 = or(T_2279, T_2280) @[Package.scala 7:62]
      node T_2283 = or(T_2282, T_2281) @[Package.scala 7:62]
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64]
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57]
      when T_2289 : @[Trackers.scala 270:32]
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40]
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30]
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27]
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38]
          skip @[Trackers.scala 271:40]
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2294 = or(T_2291, T_2292) @[Package.scala 7:62]
        node T_2295 = or(T_2294, T_2293) @[Package.scala 7:62]
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64]
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2301 = or(T_2298, T_2299) @[Package.scala 7:62]
        node T_2302 = or(T_2301, T_2300) @[Package.scala 7:62]
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38]
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15]
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2308 = not(T_2307) @[Trackers.scala 92:5]
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2311 = not(T_2310) @[Trackers.scala 92:34]
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32]
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33]
        pending_irel_data <= T_2314 @[Trackers.scala 278:27]
        skip @[Trackers.scala 270:32]
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32]
      when T_2316 : @[Trackers.scala 281:20]
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2321 = or(T_2318, T_2319) @[Package.scala 7:62]
        node T_2322 = or(T_2321, T_2320) @[Package.scala 7:62]
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38]
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15]
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2328 = not(T_2327) @[Trackers.scala 92:5]
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2331 = not(T_2330) @[Trackers.scala 92:34]
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32]
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49]
        pending_irel_data <= T_2333 @[Trackers.scala 282:27]
        skip @[Trackers.scala 281:20]
      skip @[Trackers.scala 269:22]
    node T_2334 = eq(state, UInt<4>("h03")) @[Package.scala 7:47]
    node T_2335 = eq(state, UInt<4>("h04")) @[Package.scala 7:47]
    node T_2336 = eq(state, UInt<4>("h05")) @[Package.scala 7:47]
    node T_2337 = eq(state, UInt<4>("h07")) @[Package.scala 7:47]
    node T_2338 = or(T_2334, T_2335) @[Package.scala 7:62]
    node T_2339 = or(T_2338, T_2336) @[Package.scala 7:62]
    node T_2340 = or(T_2339, T_2337) @[Package.scala 7:62]
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87]
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51]
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55]
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31]
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56]
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26]
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 773:19]
    T_2379 is invalid @[Definitions.scala 773:19]
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 774:19]
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 775:19]
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 776:16]
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 777:24]
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 778:20]
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 779:19]
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 780:14]
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_2440 is invalid @[Definitions.scala 882:19]
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 883:19]
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 884:25]
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 885:16]
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 886:24]
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 887:25]
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 888:19]
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 889:14]
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25]
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38]
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2471 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2472 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2473 = or(T_2471, T_2472) @[Package.scala 7:62]
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50]
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63]
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44]
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49]
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49]
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60]
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40]
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47]
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2500 = or(T_2497, T_2498) @[Package.scala 7:62]
    node T_2501 = or(T_2500, T_2499) @[Package.scala 7:62]
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39]
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19]
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52]
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61]
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51]
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44]
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26]
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2518 = or(T_2515, T_2516) @[Package.scala 7:62]
    node T_2519 = or(T_2518, T_2517) @[Package.scala 7:62]
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20]
    when T_2520 : @[Trackers.scala 166:42]
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15]
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15]
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15]
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15]
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15]
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15]
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15]
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15]
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58]
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58]
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58]
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58]
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58]
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58]
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58]
      node T_2568 = not(T_2567) @[Trackers.scala 195:27]
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34]
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46]
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23]
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24]
      skip @[Trackers.scala 166:42]
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 36:42]
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 33:33]
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 36:59]
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23]
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_2604 is invalid @[Metadata.scala 158:20]
    T_2604.state <= T_2581 @[Metadata.scala 159:16]
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17]
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28]
    when T_2631 : @[Trackers.scala 331:53]
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2637 = or(T_2634, T_2635) @[Package.scala 7:62]
      node T_2638 = or(T_2637, T_2636) @[Package.scala 7:62]
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37]
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15]
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31]
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47]
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58]
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2654 = or(T_2651, T_2652) @[Package.scala 7:62]
      node T_2655 = or(T_2654, T_2653) @[Package.scala 7:62]
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38]
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15]
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2661 = not(T_2660) @[Trackers.scala 92:5]
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2664 = not(T_2663) @[Trackers.scala 92:34]
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32]
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34]
      pending_orel_data <= T_2666 @[Trackers.scala 332:25]
      skip @[Trackers.scala 331:53]
    when UInt<1>("h00") : @[Trackers.scala 337:33]
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53]
      skip @[Trackers.scala 337:33]
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    when T_2668 : @[Trackers.scala 338:36]
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2673 = or(T_2670, T_2671) @[Package.scala 7:62]
      node T_2674 = or(T_2673, T_2672) @[Package.scala 7:62]
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64]
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57]
      when T_2680 : @[Trackers.scala 339:44]
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59]
        skip @[Trackers.scala 339:44]
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2686 = or(T_2683, T_2684) @[Package.scala 7:62]
      node T_2687 = or(T_2686, T_2685) @[Package.scala 7:62]
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64]
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36]
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56]
      when T_2693 : @[Trackers.scala 340:44]
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59]
        skip @[Trackers.scala 340:44]
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25]
      skip @[Trackers.scala 338:36]
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51]
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 92:62]
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2707 = or(T_2704, T_2705) @[Package.scala 7:62]
    node T_2708 = or(T_2707, T_2706) @[Package.scala 7:62]
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64]
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 36:47]
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17]
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22]
      T_2712 <= T_2717 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20]
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 38:19]
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59]
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 93:64]
    wire T_2733 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2733 is invalid @[Definitions.scala 853:34]
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Package.scala 7:47]
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33]
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27]
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 36:47]
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17]
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22]
      T_2741 <= T_2746 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20]
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 38:19]
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 32:14]
    when T_2754 : @[Counters.scala 32:24]
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2757 = tail(T_2756, 1) @[Counters.scala 32:37]
      T_2751 <= T_2757 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 33:16]
    when T_2760 : @[Counters.scala 33:24]
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2763 = tail(T_2762, 1) @[Counters.scala 33:37]
      T_2751 <= T_2763 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 95:20]
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 96:19]
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 97:20]
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 98:21]
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 99:22]
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31]
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14]
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2772 = or(T_2769, T_2770) @[Package.scala 7:62]
    node T_2773 = or(T_2772, T_2771) @[Package.scala 7:62]
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26]
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26]
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32]
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26]
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13]
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24]
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2783 = or(T_2780, T_2781) @[Package.scala 7:62]
    node T_2784 = or(T_2783, T_2782) @[Package.scala 7:62]
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49]
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29]
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49]
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43]
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28]
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16]
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16]
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_2828 is invalid @[Definitions.scala 754:19]
    T_2828.r_type <= T_2800 @[Definitions.scala 755:16]
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 757:20]
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 758:19]
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 759:14]
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27]
    when vol_ognt_counter.pending : @[Trackers.scala 365:37]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60]
      skip @[Trackers.scala 365:37]
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15]
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35]
    T_2871 is invalid @[Definitions.scala 355:35]
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Package.scala 7:47]
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89]
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 36:47]
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17]
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22]
      T_2877 <= T_2882 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20]
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 37:18]
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 38:19]
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59]
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33]
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 93:64]
    wire T_2900 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2900 is invalid @[Definitions.scala 853:34]
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Package.scala 7:47]
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33]
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27]
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 36:47]
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17]
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22]
      T_2908 <= T_2913 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20]
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 37:18]
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 38:19]
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 32:14]
    when T_2921 : @[Counters.scala 32:24]
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2924 = tail(T_2923, 1) @[Counters.scala 32:37]
      T_2918 <= T_2924 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 33:16]
    when T_2927 : @[Counters.scala 33:24]
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2930 = tail(T_2929, 1) @[Counters.scala 33:37]
      T_2918 <= T_2930 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 95:27]
    ognt_counter.pending <= T_2932 @[Counters.scala 95:20]
    ognt_counter.up.idx <= T_2884 @[Counters.scala 96:19]
    ognt_counter.up.done <= T_2885 @[Counters.scala 97:20]
    ognt_counter.down.idx <= T_2915 @[Counters.scala 98:21]
    ognt_counter.down.done <= T_2916 @[Counters.scala 99:22]
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13]
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36]
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33]
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30]
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30]
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13]
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26]
    T_2949 is invalid @[Definitions.scala 354:26]
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Package.scala 7:47]
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Package.scala 7:47]
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Package.scala 7:47]
    node T_2954 = or(T_2951, T_2952) @[Package.scala 7:62]
    node T_2955 = or(T_2954, T_2953) @[Package.scala 7:62]
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55]
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30]
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61]
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53]
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39]
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51]
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26]
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14]
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24]
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57]
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28]
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 36:42]
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 33:29]
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 33:33]
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 36:59]
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 37:47]
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 37:64]
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8]
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58]
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3015 is invalid @[Definitions.scala 417:19]
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 418:25]
    T_3015.a_type <= T_2982 @[Definitions.scala 419:16]
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    T_3015.union <= T_2984 @[Definitions.scala 424:15]
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 386:49]
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 386:61]
    node T_3070 = or(UInt<2>("h00"), xact_op_size) @[Definitions.scala 387:61]
    node T_3071 = bits(T_3070, 1, 0) @[Definitions.scala 387:76]
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 388:36]
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 388:45]
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 389:46]
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 389:54]
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58]
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58]
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58]
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16]
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16]
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16]
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16]
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16]
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16]
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3140 is invalid @[Definitions.scala 417:19]
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 419:16]
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 422:19]
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 423:14]
    T_3140.union <= T_3111 @[Definitions.scala 424:15]
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10]
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27]
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16]
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36]
    when T_3197 : @[Trackers.scala 632:61]
      state <= UInt<4>("h07") @[Trackers.scala 632:69]
      skip @[Trackers.scala 632:61]
    when ognt_counter.pending : @[Trackers.scala 634:33]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56]
      skip @[Trackers.scala 634:33]
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    wire T_3207 : UInt<3>[2] @[Definitions.scala 852:26]
    T_3207 is invalid @[Definitions.scala 852:26]
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Package.scala 7:47]
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Package.scala 7:47]
    node T_3211 = or(T_3209, T_3210) @[Package.scala 7:62]
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42]
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20]
    when T_3214 : @[Trackers.scala 172:42]
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15]
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15]
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15]
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15]
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15]
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15]
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15]
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15]
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58]
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58]
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58]
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58]
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58]
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58]
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58]
      node T_3262 = not(T_3261) @[Trackers.scala 195:27]
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34]
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46]
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23]
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24]
      skip @[Trackers.scala 172:42]
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37]
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61]
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59]
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89]
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 92:62]
    wire T_3291 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3291 is invalid @[Definitions.scala 853:34]
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Package.scala 7:47]
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33]
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27]
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 36:47]
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17]
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22]
      T_3299 <= T_3304 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20]
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 38:19]
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 21:42]
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 93:64]
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17]
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22]
      T_3314 <= T_3319 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20]
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 38:19]
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 32:14]
    when T_3327 : @[Counters.scala 32:24]
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_3330 = tail(T_3329, 1) @[Counters.scala 32:37]
      T_3324 <= T_3330 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 33:16]
    when T_3333 : @[Counters.scala 33:24]
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_3336 = tail(T_3335, 1) @[Counters.scala 33:37]
      T_3324 <= T_3336 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 95:27]
    ifin_counter.pending <= T_3338 @[Counters.scala 95:20]
    ifin_counter.up.idx <= T_3306 @[Counters.scala 96:19]
    ifin_counter.up.done <= T_3307 @[Counters.scala 97:20]
    ifin_counter.down.idx <= T_3321 @[Counters.scala 98:21]
    ifin_counter.down.done <= T_3322 @[Counters.scala 99:22]
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10]
    when T_3343 : @[Trackers.scala 525:31]
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_3349 = or(T_3346, T_3347) @[Package.scala 7:62]
      node T_3350 = or(T_3349, T_3348) @[Package.scala 7:62]
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37]
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15]
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31]
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46]
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
      wire T_3370 : UInt<3>[2] @[Definitions.scala 852:26]
      T_3370 is invalid @[Definitions.scala 852:26]
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Package.scala 7:47]
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Package.scala 7:47]
      node T_3374 = or(T_3372, T_3373) @[Package.scala 7:62]
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42]
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37]
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15]
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31]
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77]
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75]
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25]
      skip @[Trackers.scala 525:31]
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33]
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33]
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44]
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44]
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49]
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25]
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16]
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16]
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16]
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16]
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16]
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16]
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8]
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_3455 is invalid @[Definitions.scala 882:19]
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 883:19]
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 884:25]
    T_3455.g_type <= T_3426 @[Definitions.scala 885:16]
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 886:24]
    T_3455.manager_xact_id <= UInt<1>("h01") @[Definitions.scala 887:25]
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 888:19]
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 889:14]
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    wire T_3491 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3491 is invalid @[Definitions.scala 853:34]
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Package.scala 7:47]
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33]
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27]
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 36:47]
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17]
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22]
      T_3499 <= T_3504 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20]
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 37:18]
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 38:19]
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19]
    ignt_data_done <= T_3507 @[Trackers.scala 552:20]
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25]
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10]
    when T_3510 : @[Trackers.scala 554:37]
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27]
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27]
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37]
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19]
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30]
      when T_3512 : @[Trackers.scala 558:47]
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33]
        wire T_3522 : UInt<3>[2] @[Definitions.scala 852:26]
        T_3522 is invalid @[Definitions.scala 852:26]
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Package.scala 7:47]
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Package.scala 7:47]
        node T_3526 = or(T_3524, T_3525) @[Package.scala 7:62]
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42]
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32]
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32]
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16]
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14]
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51]
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30]
        skip @[Trackers.scala 558:47]
      skip @[Trackers.scala 554:37]
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36]
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27]
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_3537 : @[Broadcast.scala 196:28]
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29]
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46]
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44]
      pending_iprbs <= T_3541 @[Trackers.scala 383:21]
      skip @[Broadcast.scala 196:28]
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61]
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53]
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47]
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66]
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54]
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26]
    T_3562 is invalid @[Definitions.scala 354:26]
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Package.scala 7:47]
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Package.scala 7:47]
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Package.scala 7:47]
    node T_3567 = or(T_3564, T_3565) @[Package.scala 7:62]
    node T_3568 = or(T_3567, T_3566) @[Package.scala 7:62]
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55]
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20]
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41]
    when T_3571 : @[Trackers.scala 183:51]
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54]
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54]
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54]
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56]
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8]
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51]
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51]
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51]
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51]
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51]
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51]
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51]
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51]
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15]
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15]
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15]
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15]
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15]
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15]
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15]
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15]
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58]
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58]
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58]
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58]
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58]
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58]
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58]
      node T_3655 = not(T_3654) @[Trackers.scala 186:29]
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35]
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64]
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56]
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25]
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54]
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54]
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54]
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56]
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8]
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45]
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26]
      skip @[Trackers.scala 183:51]
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60]
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60]
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60]
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60]
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60]
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60]
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25]
    all_pending_done <= T_3706 @[Trackers.scala 50:22]
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16]
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27]
    when T_3708 : @[Trackers.scala 51:48]
      state <= UInt<4>("h00") @[Trackers.scala 52:13]
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35]
      skip @[Trackers.scala 51:48]
    
  module BufferedBroadcastAcquireTracker_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30]
    all_pending_done is invalid @[Trackers.scala 86:30]
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28]
    xact_addr_beat is invalid @[Trackers.scala 215:28]
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23]
    xact_iacq is invalid @[Trackers.scala 216:23]
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30]
    vol_ignt_counter is invalid @[Trackers.scala 241:30]
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26]
    scoreboard_6 is invalid @[Trackers.scala 454:26]
    wire ignt_data_idx : UInt @[Trackers.scala 455:27]
    ignt_data_idx is invalid @[Trackers.scala 455:27]
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28]
    ignt_data_done is invalid @[Trackers.scala 456:28]
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26]
    ifin_counter is invalid @[Trackers.scala 457:26]
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26]
    ognt_counter is invalid @[Trackers.scala 577:26]
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40]
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30]
    vol_ognt_counter is invalid @[Trackers.scala 306:30]
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61]
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40]
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65]
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20]
    T_195 is invalid @[Metadata.scala 309:20]
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18]
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_241 is invalid @[Metadata.scala 158:20]
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17]
    coh is invalid @[Metadata.scala 337:17]
    coh.inner <- T_195 @[Metadata.scala 338:13]
    coh.outer <- T_241 @[Metadata.scala 339:13]
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18]
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29]
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56]
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1623 is invalid @[Definitions.scala 355:35]
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Package.scala 7:47]
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89]
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80]
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1636 is invalid @[Definitions.scala 355:35]
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Package.scala 7:47]
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89]
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57]
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37]
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34]
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10]
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9]
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9]
    when T_1652 : @[Broadcast.scala 98:9]
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9]
      skip @[Broadcast.scala 98:9]
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18]
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29]
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28]
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28]
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73]
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58]
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45]
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10]
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9]
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9]
    when T_1666 : @[Broadcast.scala 102:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9]
      skip @[Broadcast.scala 102:9]
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18]
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29]
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28]
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56]
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45]
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10]
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9]
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9]
    when T_1677 : @[Broadcast.scala 105:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9]
      skip @[Broadcast.scala 105:9]
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54]
    T_1691 is invalid @[Trackers.scala 150:54]
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54]
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55]
    T_1709 is invalid @[Trackers.scala 179:55]
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55]
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56]
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56]
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56]
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56]
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56]
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56]
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56]
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56]
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56]
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23]
    data_valid is invalid @[Trackers.scala 180:23]
    data_valid[0] <= T_1716 @[Trackers.scala 180:23]
    data_valid[1] <= T_1719 @[Trackers.scala 180:23]
    data_valid[2] <= T_1722 @[Trackers.scala 180:23]
    data_valid[3] <= T_1725 @[Trackers.scala 180:23]
    data_valid[4] <= T_1728 @[Trackers.scala 180:23]
    data_valid[5] <= T_1731 @[Trackers.scala 180:23]
    data_valid[6] <= T_1734 @[Trackers.scala 180:23]
    data_valid[7] <= T_1737 @[Trackers.scala 180:23]
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37]
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49]
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27]
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37]
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49]
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27]
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37]
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49]
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27]
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32]
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43]
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23]
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32]
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43]
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23]
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32]
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43]
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23]
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25]
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28]
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19]
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61]
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53]
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67]
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44]
    inst ignt_q of Queue_10 @[Trackers.scala 450:27]
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29]
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48]
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64]
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1812 is invalid @[Definitions.scala 355:35]
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Package.scala 7:47]
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89]
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57]
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54]
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47]
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25]
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24]
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21]
    xact_iacq <- T_1823 @[Trackers.scala 480:15]
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20]
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37]
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18]
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17]
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28]
    when T_1852 : @[Trackers.scala 485:53]
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1862 is invalid @[Definitions.scala 354:26]
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Package.scala 7:47]
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Package.scala 7:47]
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Package.scala 7:47]
      node T_1867 = or(T_1864, T_1865) @[Package.scala 7:62]
      node T_1868 = or(T_1867, T_1866) @[Package.scala 7:62]
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55]
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38]
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15]
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1875 = not(T_1874) @[Trackers.scala 92:5]
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1878 = not(T_1877) @[Trackers.scala 92:34]
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32]
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45]
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35]
      T_1890 is invalid @[Definitions.scala 355:35]
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Package.scala 7:47]
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89]
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28]
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36]
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45]
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8]
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60]
      pending_put_data <= T_1907 @[Trackers.scala 486:24]
      skip @[Trackers.scala 485:53]
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_1910 : @[Trackers.scala 492:30]
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23]
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39]
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45]
      xact_allocate <= T_1912 @[Trackers.scala 494:21]
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65]
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28]
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54]
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54]
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36]
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17]
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36]
      xact_op_code <= T_1924 @[Trackers.scala 496:20]
      node T_1925 = bits(io.inner.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22]
      node T_1926 = bits(io.inner.acquire.bits.union, 7, 6) @[Definitions.scala 176:38]
      xact_op_size <= T_1926 @[Trackers.scala 498:20]
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54]
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1939 is invalid @[Definitions.scala 354:26]
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Package.scala 7:47]
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Package.scala 7:47]
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Package.scala 7:47]
      node T_1944 = or(T_1941, T_1942) @[Package.scala 7:62]
      node T_1945 = or(T_1944, T_1943) @[Package.scala 7:62]
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55]
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38]
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15]
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1952 = not(T_1951) @[Trackers.scala 92:5]
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1955 = not(T_1954) @[Trackers.scala 92:34]
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32]
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30]
      pending_put_data <= T_1958 @[Trackers.scala 500:24]
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25]
      state <= UInt<4>("h05") @[Trackers.scala 505:13]
      skip @[Trackers.scala 492:30]
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37]
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35]
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46]
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61]
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53]
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1976 is invalid @[Definitions.scala 355:35]
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Package.scala 7:47]
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89]
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49]
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64]
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26]
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46]
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46]
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16]
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16]
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16]
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16]
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16]
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16]
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16]
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8]
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 694:19]
    T_2030 is invalid @[Definitions.scala 694:19]
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 695:19]
    T_2030.p_type <= T_2005 @[Definitions.scala 696:16]
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 697:20]
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9]
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8]
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30]
    T_2065 is invalid @[Trackers.scala 393:30]
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2074 = not(T_2073) @[Trackers.scala 98:5]
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15]
    node T_2077 = not(T_2076) @[Trackers.scala 98:40]
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38]
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38]
    pending_iprbs <= T_2079 @[Trackers.scala 395:21]
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37]
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72]
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55]
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28]
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27]
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17]
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22]
      T_2091 <= T_2096 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20]
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 38:19]
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44]
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59]
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56]
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 93:64]
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2110 = or(T_2107, T_2108) @[Package.scala 7:62]
    node T_2111 = or(T_2110, T_2109) @[Package.scala 7:62]
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64]
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 36:47]
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17]
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22]
      T_2115 <= T_2120 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20]
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 38:19]
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 32:14]
    when T_2128 : @[Counters.scala 32:24]
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2131 = tail(T_2130, 1) @[Counters.scala 32:37]
      T_2125 <= T_2131 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 33:16]
    when T_2134 : @[Counters.scala 33:24]
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2137 = tail(T_2136, 1) @[Counters.scala 33:37]
      T_2125 <= T_2137 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 95:27]
    T_2065.pending <= T_2139 @[Counters.scala 95:20]
    T_2065.up.idx <= T_2098 @[Counters.scala 96:19]
    T_2065.up.done <= T_2099 @[Counters.scala 97:20]
    T_2065.down.idx <= T_2122 @[Counters.scala 98:21]
    T_2065.down.done <= T_2123 @[Counters.scala 99:22]
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18]
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55]
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59]
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39]
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36]
    when T_2146 : @[Trackers.scala 406:85]
      state <= T_2056 @[Trackers.scala 407:15]
      skip @[Trackers.scala 406:85]
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19]
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12]
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76]
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95]
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 92:62]
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2161 = or(T_2158, T_2159) @[Package.scala 7:62]
    node T_2162 = or(T_2161, T_2160) @[Package.scala 7:62]
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64]
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 36:47]
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17]
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22]
      T_2166 <= T_2171 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20]
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 38:19]
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40]
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59]
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52]
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 93:64]
    wire T_2189 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2189 is invalid @[Definitions.scala 853:34]
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Package.scala 7:47]
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33]
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27]
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 36:47]
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17]
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22]
      T_2197 <= T_2202 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20]
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 38:19]
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 32:14]
    when T_2210 : @[Counters.scala 32:24]
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2213 = tail(T_2212, 1) @[Counters.scala 32:37]
      T_2207 <= T_2213 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 33:16]
    when T_2216 : @[Counters.scala 33:24]
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2219 = tail(T_2218, 1) @[Counters.scala 33:37]
      T_2207 <= T_2219 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 95:20]
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 96:19]
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 97:20]
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 98:21]
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 99:22]
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75]
    when T_2224 : @[Trackers.scala 259:30]
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23]
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28]
      pending_irel_data <= T_2226 @[Trackers.scala 264:25]
      state <= UInt<4>("h07") @[Trackers.scala 265:13]
      skip @[Trackers.scala 259:30]
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2232 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2233 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2234 = or(T_2232, T_2233) @[Package.scala 7:62]
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50]
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63]
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44]
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49]
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49]
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60]
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40]
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47]
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2261 = or(T_2258, T_2259) @[Package.scala 7:62]
    node T_2262 = or(T_2261, T_2260) @[Package.scala 7:62]
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39]
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19]
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52]
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61]
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51]
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47]
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66]
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41]
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61]
    when T_2277 : @[Trackers.scala 269:22]
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2282 = or(T_2279, T_2280) @[Package.scala 7:62]
      node T_2283 = or(T_2282, T_2281) @[Package.scala 7:62]
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64]
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57]
      when T_2289 : @[Trackers.scala 270:32]
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40]
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30]
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27]
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38]
          skip @[Trackers.scala 271:40]
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2294 = or(T_2291, T_2292) @[Package.scala 7:62]
        node T_2295 = or(T_2294, T_2293) @[Package.scala 7:62]
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64]
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2301 = or(T_2298, T_2299) @[Package.scala 7:62]
        node T_2302 = or(T_2301, T_2300) @[Package.scala 7:62]
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38]
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15]
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2308 = not(T_2307) @[Trackers.scala 92:5]
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2311 = not(T_2310) @[Trackers.scala 92:34]
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32]
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33]
        pending_irel_data <= T_2314 @[Trackers.scala 278:27]
        skip @[Trackers.scala 270:32]
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32]
      when T_2316 : @[Trackers.scala 281:20]
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2321 = or(T_2318, T_2319) @[Package.scala 7:62]
        node T_2322 = or(T_2321, T_2320) @[Package.scala 7:62]
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38]
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15]
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2328 = not(T_2327) @[Trackers.scala 92:5]
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2331 = not(T_2330) @[Trackers.scala 92:34]
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32]
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49]
        pending_irel_data <= T_2333 @[Trackers.scala 282:27]
        skip @[Trackers.scala 281:20]
      skip @[Trackers.scala 269:22]
    node T_2334 = eq(state, UInt<4>("h03")) @[Package.scala 7:47]
    node T_2335 = eq(state, UInt<4>("h04")) @[Package.scala 7:47]
    node T_2336 = eq(state, UInt<4>("h05")) @[Package.scala 7:47]
    node T_2337 = eq(state, UInt<4>("h07")) @[Package.scala 7:47]
    node T_2338 = or(T_2334, T_2335) @[Package.scala 7:62]
    node T_2339 = or(T_2338, T_2336) @[Package.scala 7:62]
    node T_2340 = or(T_2339, T_2337) @[Package.scala 7:62]
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87]
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51]
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55]
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31]
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56]
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26]
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 773:19]
    T_2379 is invalid @[Definitions.scala 773:19]
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 774:19]
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 775:19]
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 776:16]
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 777:24]
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 778:20]
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 779:19]
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 780:14]
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_2440 is invalid @[Definitions.scala 882:19]
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 883:19]
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 884:25]
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 885:16]
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 886:24]
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 887:25]
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 888:19]
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 889:14]
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25]
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38]
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2471 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2472 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2473 = or(T_2471, T_2472) @[Package.scala 7:62]
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50]
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63]
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44]
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49]
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49]
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60]
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40]
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47]
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2500 = or(T_2497, T_2498) @[Package.scala 7:62]
    node T_2501 = or(T_2500, T_2499) @[Package.scala 7:62]
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39]
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19]
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52]
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61]
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51]
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44]
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26]
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2518 = or(T_2515, T_2516) @[Package.scala 7:62]
    node T_2519 = or(T_2518, T_2517) @[Package.scala 7:62]
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20]
    when T_2520 : @[Trackers.scala 166:42]
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15]
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15]
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15]
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15]
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15]
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15]
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15]
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15]
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58]
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58]
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58]
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58]
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58]
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58]
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58]
      node T_2568 = not(T_2567) @[Trackers.scala 195:27]
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34]
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46]
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23]
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24]
      skip @[Trackers.scala 166:42]
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 36:42]
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 33:33]
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 36:59]
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23]
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_2604 is invalid @[Metadata.scala 158:20]
    T_2604.state <= T_2581 @[Metadata.scala 159:16]
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17]
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28]
    when T_2631 : @[Trackers.scala 331:53]
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2637 = or(T_2634, T_2635) @[Package.scala 7:62]
      node T_2638 = or(T_2637, T_2636) @[Package.scala 7:62]
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37]
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15]
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31]
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47]
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58]
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2654 = or(T_2651, T_2652) @[Package.scala 7:62]
      node T_2655 = or(T_2654, T_2653) @[Package.scala 7:62]
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38]
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15]
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2661 = not(T_2660) @[Trackers.scala 92:5]
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2664 = not(T_2663) @[Trackers.scala 92:34]
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32]
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34]
      pending_orel_data <= T_2666 @[Trackers.scala 332:25]
      skip @[Trackers.scala 331:53]
    when UInt<1>("h00") : @[Trackers.scala 337:33]
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53]
      skip @[Trackers.scala 337:33]
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    when T_2668 : @[Trackers.scala 338:36]
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2673 = or(T_2670, T_2671) @[Package.scala 7:62]
      node T_2674 = or(T_2673, T_2672) @[Package.scala 7:62]
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64]
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57]
      when T_2680 : @[Trackers.scala 339:44]
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59]
        skip @[Trackers.scala 339:44]
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2686 = or(T_2683, T_2684) @[Package.scala 7:62]
      node T_2687 = or(T_2686, T_2685) @[Package.scala 7:62]
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64]
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36]
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56]
      when T_2693 : @[Trackers.scala 340:44]
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59]
        skip @[Trackers.scala 340:44]
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25]
      skip @[Trackers.scala 338:36]
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51]
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 92:62]
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2707 = or(T_2704, T_2705) @[Package.scala 7:62]
    node T_2708 = or(T_2707, T_2706) @[Package.scala 7:62]
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64]
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 36:47]
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17]
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22]
      T_2712 <= T_2717 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20]
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 38:19]
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59]
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 93:64]
    wire T_2733 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2733 is invalid @[Definitions.scala 853:34]
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Package.scala 7:47]
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33]
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27]
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 36:47]
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17]
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22]
      T_2741 <= T_2746 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20]
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 38:19]
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 32:14]
    when T_2754 : @[Counters.scala 32:24]
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2757 = tail(T_2756, 1) @[Counters.scala 32:37]
      T_2751 <= T_2757 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 33:16]
    when T_2760 : @[Counters.scala 33:24]
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2763 = tail(T_2762, 1) @[Counters.scala 33:37]
      T_2751 <= T_2763 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 95:20]
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 96:19]
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 97:20]
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 98:21]
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 99:22]
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31]
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14]
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2772 = or(T_2769, T_2770) @[Package.scala 7:62]
    node T_2773 = or(T_2772, T_2771) @[Package.scala 7:62]
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26]
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26]
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32]
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26]
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13]
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24]
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2783 = or(T_2780, T_2781) @[Package.scala 7:62]
    node T_2784 = or(T_2783, T_2782) @[Package.scala 7:62]
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49]
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29]
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49]
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43]
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28]
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16]
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16]
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_2828 is invalid @[Definitions.scala 754:19]
    T_2828.r_type <= T_2800 @[Definitions.scala 755:16]
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 757:20]
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 758:19]
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 759:14]
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27]
    when vol_ognt_counter.pending : @[Trackers.scala 365:37]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60]
      skip @[Trackers.scala 365:37]
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15]
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35]
    T_2871 is invalid @[Definitions.scala 355:35]
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Package.scala 7:47]
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89]
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 36:47]
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17]
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22]
      T_2877 <= T_2882 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20]
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 37:18]
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 38:19]
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59]
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33]
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 93:64]
    wire T_2900 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2900 is invalid @[Definitions.scala 853:34]
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Package.scala 7:47]
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33]
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27]
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 36:47]
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17]
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22]
      T_2908 <= T_2913 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20]
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 37:18]
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 38:19]
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 32:14]
    when T_2921 : @[Counters.scala 32:24]
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2924 = tail(T_2923, 1) @[Counters.scala 32:37]
      T_2918 <= T_2924 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 33:16]
    when T_2927 : @[Counters.scala 33:24]
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2930 = tail(T_2929, 1) @[Counters.scala 33:37]
      T_2918 <= T_2930 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 95:27]
    ognt_counter.pending <= T_2932 @[Counters.scala 95:20]
    ognt_counter.up.idx <= T_2884 @[Counters.scala 96:19]
    ognt_counter.up.done <= T_2885 @[Counters.scala 97:20]
    ognt_counter.down.idx <= T_2915 @[Counters.scala 98:21]
    ognt_counter.down.done <= T_2916 @[Counters.scala 99:22]
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13]
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36]
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33]
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30]
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30]
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13]
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26]
    T_2949 is invalid @[Definitions.scala 354:26]
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Package.scala 7:47]
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Package.scala 7:47]
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Package.scala 7:47]
    node T_2954 = or(T_2951, T_2952) @[Package.scala 7:62]
    node T_2955 = or(T_2954, T_2953) @[Package.scala 7:62]
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55]
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30]
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61]
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53]
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39]
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51]
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26]
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14]
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24]
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57]
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28]
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 36:42]
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 33:29]
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 33:33]
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 36:59]
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 37:47]
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 37:64]
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8]
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58]
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3015 is invalid @[Definitions.scala 417:19]
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 418:25]
    T_3015.a_type <= T_2982 @[Definitions.scala 419:16]
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    T_3015.union <= T_2984 @[Definitions.scala 424:15]
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 386:49]
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 386:61]
    node T_3070 = or(UInt<2>("h00"), xact_op_size) @[Definitions.scala 387:61]
    node T_3071 = bits(T_3070, 1, 0) @[Definitions.scala 387:76]
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 388:36]
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 388:45]
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 389:46]
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 389:54]
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58]
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58]
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58]
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16]
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16]
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16]
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16]
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16]
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16]
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3140 is invalid @[Definitions.scala 417:19]
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 419:16]
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 422:19]
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 423:14]
    T_3140.union <= T_3111 @[Definitions.scala 424:15]
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10]
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27]
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16]
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36]
    when T_3197 : @[Trackers.scala 632:61]
      state <= UInt<4>("h07") @[Trackers.scala 632:69]
      skip @[Trackers.scala 632:61]
    when ognt_counter.pending : @[Trackers.scala 634:33]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56]
      skip @[Trackers.scala 634:33]
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    wire T_3207 : UInt<3>[2] @[Definitions.scala 852:26]
    T_3207 is invalid @[Definitions.scala 852:26]
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Package.scala 7:47]
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Package.scala 7:47]
    node T_3211 = or(T_3209, T_3210) @[Package.scala 7:62]
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42]
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20]
    when T_3214 : @[Trackers.scala 172:42]
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15]
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15]
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15]
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15]
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15]
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15]
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15]
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15]
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58]
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58]
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58]
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58]
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58]
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58]
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58]
      node T_3262 = not(T_3261) @[Trackers.scala 195:27]
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34]
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46]
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23]
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24]
      skip @[Trackers.scala 172:42]
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37]
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61]
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59]
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89]
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 92:62]
    wire T_3291 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3291 is invalid @[Definitions.scala 853:34]
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Package.scala 7:47]
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33]
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27]
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 36:47]
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17]
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22]
      T_3299 <= T_3304 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20]
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 38:19]
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 21:42]
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 93:64]
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17]
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22]
      T_3314 <= T_3319 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20]
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 38:19]
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 32:14]
    when T_3327 : @[Counters.scala 32:24]
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_3330 = tail(T_3329, 1) @[Counters.scala 32:37]
      T_3324 <= T_3330 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 33:16]
    when T_3333 : @[Counters.scala 33:24]
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_3336 = tail(T_3335, 1) @[Counters.scala 33:37]
      T_3324 <= T_3336 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 95:27]
    ifin_counter.pending <= T_3338 @[Counters.scala 95:20]
    ifin_counter.up.idx <= T_3306 @[Counters.scala 96:19]
    ifin_counter.up.done <= T_3307 @[Counters.scala 97:20]
    ifin_counter.down.idx <= T_3321 @[Counters.scala 98:21]
    ifin_counter.down.done <= T_3322 @[Counters.scala 99:22]
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10]
    when T_3343 : @[Trackers.scala 525:31]
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_3349 = or(T_3346, T_3347) @[Package.scala 7:62]
      node T_3350 = or(T_3349, T_3348) @[Package.scala 7:62]
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37]
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15]
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31]
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46]
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
      wire T_3370 : UInt<3>[2] @[Definitions.scala 852:26]
      T_3370 is invalid @[Definitions.scala 852:26]
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Package.scala 7:47]
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Package.scala 7:47]
      node T_3374 = or(T_3372, T_3373) @[Package.scala 7:62]
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42]
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37]
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15]
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31]
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77]
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75]
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25]
      skip @[Trackers.scala 525:31]
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33]
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33]
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44]
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44]
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49]
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25]
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16]
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16]
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16]
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16]
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16]
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16]
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8]
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_3455 is invalid @[Definitions.scala 882:19]
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 883:19]
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 884:25]
    T_3455.g_type <= T_3426 @[Definitions.scala 885:16]
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 886:24]
    T_3455.manager_xact_id <= UInt<2>("h02") @[Definitions.scala 887:25]
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 888:19]
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 889:14]
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    wire T_3491 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3491 is invalid @[Definitions.scala 853:34]
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Package.scala 7:47]
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33]
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27]
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 36:47]
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17]
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22]
      T_3499 <= T_3504 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20]
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 37:18]
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 38:19]
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19]
    ignt_data_done <= T_3507 @[Trackers.scala 552:20]
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25]
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10]
    when T_3510 : @[Trackers.scala 554:37]
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27]
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27]
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37]
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19]
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30]
      when T_3512 : @[Trackers.scala 558:47]
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33]
        wire T_3522 : UInt<3>[2] @[Definitions.scala 852:26]
        T_3522 is invalid @[Definitions.scala 852:26]
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Package.scala 7:47]
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Package.scala 7:47]
        node T_3526 = or(T_3524, T_3525) @[Package.scala 7:62]
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42]
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32]
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32]
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16]
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14]
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51]
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30]
        skip @[Trackers.scala 558:47]
      skip @[Trackers.scala 554:37]
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36]
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27]
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_3537 : @[Broadcast.scala 196:28]
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29]
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46]
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44]
      pending_iprbs <= T_3541 @[Trackers.scala 383:21]
      skip @[Broadcast.scala 196:28]
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61]
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53]
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47]
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66]
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54]
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26]
    T_3562 is invalid @[Definitions.scala 354:26]
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Package.scala 7:47]
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Package.scala 7:47]
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Package.scala 7:47]
    node T_3567 = or(T_3564, T_3565) @[Package.scala 7:62]
    node T_3568 = or(T_3567, T_3566) @[Package.scala 7:62]
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55]
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20]
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41]
    when T_3571 : @[Trackers.scala 183:51]
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54]
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54]
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54]
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56]
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8]
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51]
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51]
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51]
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51]
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51]
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51]
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51]
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51]
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15]
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15]
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15]
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15]
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15]
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15]
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15]
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15]
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58]
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58]
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58]
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58]
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58]
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58]
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58]
      node T_3655 = not(T_3654) @[Trackers.scala 186:29]
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35]
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64]
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56]
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25]
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54]
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54]
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54]
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56]
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8]
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45]
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26]
      skip @[Trackers.scala 183:51]
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60]
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60]
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60]
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60]
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60]
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60]
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25]
    all_pending_done <= T_3706 @[Trackers.scala 50:22]
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16]
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27]
    when T_3708 : @[Trackers.scala 51:48]
      state <= UInt<4>("h00") @[Trackers.scala 52:13]
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35]
      skip @[Trackers.scala 51:48]
    
  module BufferedBroadcastAcquireTracker_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30]
    all_pending_done is invalid @[Trackers.scala 86:30]
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28]
    xact_addr_beat is invalid @[Trackers.scala 215:28]
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23]
    xact_iacq is invalid @[Trackers.scala 216:23]
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30]
    vol_ignt_counter is invalid @[Trackers.scala 241:30]
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26]
    scoreboard_6 is invalid @[Trackers.scala 454:26]
    wire ignt_data_idx : UInt @[Trackers.scala 455:27]
    ignt_data_idx is invalid @[Trackers.scala 455:27]
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28]
    ignt_data_done is invalid @[Trackers.scala 456:28]
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26]
    ifin_counter is invalid @[Trackers.scala 457:26]
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26]
    ognt_counter is invalid @[Trackers.scala 577:26]
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40]
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30]
    vol_ognt_counter is invalid @[Trackers.scala 306:30]
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61]
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40]
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65]
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20]
    T_195 is invalid @[Metadata.scala 309:20]
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18]
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_241 is invalid @[Metadata.scala 158:20]
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17]
    coh is invalid @[Metadata.scala 337:17]
    coh.inner <- T_195 @[Metadata.scala 338:13]
    coh.outer <- T_241 @[Metadata.scala 339:13]
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18]
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29]
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56]
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1623 is invalid @[Definitions.scala 355:35]
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Package.scala 7:47]
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89]
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80]
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1636 is invalid @[Definitions.scala 355:35]
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Package.scala 7:47]
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89]
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57]
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37]
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34]
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10]
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9]
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9]
    when T_1652 : @[Broadcast.scala 98:9]
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9]
      skip @[Broadcast.scala 98:9]
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18]
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29]
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28]
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28]
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73]
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58]
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45]
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10]
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9]
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9]
    when T_1666 : @[Broadcast.scala 102:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9]
      skip @[Broadcast.scala 102:9]
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18]
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29]
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28]
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56]
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45]
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10]
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9]
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9]
    when T_1677 : @[Broadcast.scala 105:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9]
      skip @[Broadcast.scala 105:9]
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54]
    T_1691 is invalid @[Trackers.scala 150:54]
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54]
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55]
    T_1709 is invalid @[Trackers.scala 179:55]
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55]
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56]
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56]
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56]
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56]
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56]
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56]
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56]
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56]
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56]
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23]
    data_valid is invalid @[Trackers.scala 180:23]
    data_valid[0] <= T_1716 @[Trackers.scala 180:23]
    data_valid[1] <= T_1719 @[Trackers.scala 180:23]
    data_valid[2] <= T_1722 @[Trackers.scala 180:23]
    data_valid[3] <= T_1725 @[Trackers.scala 180:23]
    data_valid[4] <= T_1728 @[Trackers.scala 180:23]
    data_valid[5] <= T_1731 @[Trackers.scala 180:23]
    data_valid[6] <= T_1734 @[Trackers.scala 180:23]
    data_valid[7] <= T_1737 @[Trackers.scala 180:23]
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37]
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49]
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27]
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37]
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49]
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27]
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37]
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49]
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27]
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32]
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43]
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23]
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32]
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43]
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23]
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32]
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43]
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23]
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25]
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28]
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19]
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61]
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53]
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67]
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44]
    inst ignt_q of Queue_10 @[Trackers.scala 450:27]
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29]
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48]
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64]
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1812 is invalid @[Definitions.scala 355:35]
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Package.scala 7:47]
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89]
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57]
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54]
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47]
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25]
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24]
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21]
    xact_iacq <- T_1823 @[Trackers.scala 480:15]
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20]
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37]
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18]
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17]
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28]
    when T_1852 : @[Trackers.scala 485:53]
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1862 is invalid @[Definitions.scala 354:26]
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Package.scala 7:47]
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Package.scala 7:47]
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Package.scala 7:47]
      node T_1867 = or(T_1864, T_1865) @[Package.scala 7:62]
      node T_1868 = or(T_1867, T_1866) @[Package.scala 7:62]
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55]
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38]
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15]
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1875 = not(T_1874) @[Trackers.scala 92:5]
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1878 = not(T_1877) @[Trackers.scala 92:34]
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32]
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45]
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35]
      T_1890 is invalid @[Definitions.scala 355:35]
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Package.scala 7:47]
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89]
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28]
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36]
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45]
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8]
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60]
      pending_put_data <= T_1907 @[Trackers.scala 486:24]
      skip @[Trackers.scala 485:53]
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_1910 : @[Trackers.scala 492:30]
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23]
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39]
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45]
      xact_allocate <= T_1912 @[Trackers.scala 494:21]
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65]
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28]
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54]
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54]
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36]
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17]
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36]
      xact_op_code <= T_1924 @[Trackers.scala 496:20]
      node T_1925 = bits(io.inner.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22]
      node T_1926 = bits(io.inner.acquire.bits.union, 7, 6) @[Definitions.scala 176:38]
      xact_op_size <= T_1926 @[Trackers.scala 498:20]
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54]
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1939 is invalid @[Definitions.scala 354:26]
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Package.scala 7:47]
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Package.scala 7:47]
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Package.scala 7:47]
      node T_1944 = or(T_1941, T_1942) @[Package.scala 7:62]
      node T_1945 = or(T_1944, T_1943) @[Package.scala 7:62]
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55]
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38]
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15]
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1952 = not(T_1951) @[Trackers.scala 92:5]
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1955 = not(T_1954) @[Trackers.scala 92:34]
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32]
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30]
      pending_put_data <= T_1958 @[Trackers.scala 500:24]
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25]
      state <= UInt<4>("h05") @[Trackers.scala 505:13]
      skip @[Trackers.scala 492:30]
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37]
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35]
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46]
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61]
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53]
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1976 is invalid @[Definitions.scala 355:35]
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Package.scala 7:47]
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89]
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49]
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64]
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26]
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46]
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46]
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16]
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16]
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16]
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16]
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16]
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16]
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16]
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8]
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 694:19]
    T_2030 is invalid @[Definitions.scala 694:19]
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 695:19]
    T_2030.p_type <= T_2005 @[Definitions.scala 696:16]
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 697:20]
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9]
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8]
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30]
    T_2065 is invalid @[Trackers.scala 393:30]
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2074 = not(T_2073) @[Trackers.scala 98:5]
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15]
    node T_2077 = not(T_2076) @[Trackers.scala 98:40]
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38]
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38]
    pending_iprbs <= T_2079 @[Trackers.scala 395:21]
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37]
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72]
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55]
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28]
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27]
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17]
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22]
      T_2091 <= T_2096 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20]
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 38:19]
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44]
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59]
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56]
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 93:64]
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2110 = or(T_2107, T_2108) @[Package.scala 7:62]
    node T_2111 = or(T_2110, T_2109) @[Package.scala 7:62]
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64]
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 36:47]
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17]
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22]
      T_2115 <= T_2120 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20]
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 38:19]
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 32:14]
    when T_2128 : @[Counters.scala 32:24]
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2131 = tail(T_2130, 1) @[Counters.scala 32:37]
      T_2125 <= T_2131 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 33:16]
    when T_2134 : @[Counters.scala 33:24]
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2137 = tail(T_2136, 1) @[Counters.scala 33:37]
      T_2125 <= T_2137 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 95:27]
    T_2065.pending <= T_2139 @[Counters.scala 95:20]
    T_2065.up.idx <= T_2098 @[Counters.scala 96:19]
    T_2065.up.done <= T_2099 @[Counters.scala 97:20]
    T_2065.down.idx <= T_2122 @[Counters.scala 98:21]
    T_2065.down.done <= T_2123 @[Counters.scala 99:22]
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18]
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55]
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59]
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39]
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36]
    when T_2146 : @[Trackers.scala 406:85]
      state <= T_2056 @[Trackers.scala 407:15]
      skip @[Trackers.scala 406:85]
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19]
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12]
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76]
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95]
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 92:62]
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2161 = or(T_2158, T_2159) @[Package.scala 7:62]
    node T_2162 = or(T_2161, T_2160) @[Package.scala 7:62]
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64]
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 36:47]
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17]
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22]
      T_2166 <= T_2171 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20]
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 38:19]
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40]
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59]
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52]
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 93:64]
    wire T_2189 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2189 is invalid @[Definitions.scala 853:34]
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Package.scala 7:47]
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33]
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27]
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 36:47]
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17]
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22]
      T_2197 <= T_2202 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20]
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 38:19]
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 32:14]
    when T_2210 : @[Counters.scala 32:24]
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2213 = tail(T_2212, 1) @[Counters.scala 32:37]
      T_2207 <= T_2213 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 33:16]
    when T_2216 : @[Counters.scala 33:24]
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2219 = tail(T_2218, 1) @[Counters.scala 33:37]
      T_2207 <= T_2219 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 95:20]
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 96:19]
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 97:20]
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 98:21]
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 99:22]
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75]
    when T_2224 : @[Trackers.scala 259:30]
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23]
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28]
      pending_irel_data <= T_2226 @[Trackers.scala 264:25]
      state <= UInt<4>("h07") @[Trackers.scala 265:13]
      skip @[Trackers.scala 259:30]
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2232 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2233 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2234 = or(T_2232, T_2233) @[Package.scala 7:62]
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50]
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63]
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44]
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49]
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49]
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60]
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40]
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47]
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2261 = or(T_2258, T_2259) @[Package.scala 7:62]
    node T_2262 = or(T_2261, T_2260) @[Package.scala 7:62]
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39]
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19]
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52]
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61]
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51]
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47]
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66]
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41]
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61]
    when T_2277 : @[Trackers.scala 269:22]
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2282 = or(T_2279, T_2280) @[Package.scala 7:62]
      node T_2283 = or(T_2282, T_2281) @[Package.scala 7:62]
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64]
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57]
      when T_2289 : @[Trackers.scala 270:32]
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40]
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30]
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27]
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38]
          skip @[Trackers.scala 271:40]
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2294 = or(T_2291, T_2292) @[Package.scala 7:62]
        node T_2295 = or(T_2294, T_2293) @[Package.scala 7:62]
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64]
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2301 = or(T_2298, T_2299) @[Package.scala 7:62]
        node T_2302 = or(T_2301, T_2300) @[Package.scala 7:62]
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38]
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15]
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2308 = not(T_2307) @[Trackers.scala 92:5]
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2311 = not(T_2310) @[Trackers.scala 92:34]
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32]
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33]
        pending_irel_data <= T_2314 @[Trackers.scala 278:27]
        skip @[Trackers.scala 270:32]
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32]
      when T_2316 : @[Trackers.scala 281:20]
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2321 = or(T_2318, T_2319) @[Package.scala 7:62]
        node T_2322 = or(T_2321, T_2320) @[Package.scala 7:62]
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38]
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15]
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2328 = not(T_2327) @[Trackers.scala 92:5]
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2331 = not(T_2330) @[Trackers.scala 92:34]
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32]
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49]
        pending_irel_data <= T_2333 @[Trackers.scala 282:27]
        skip @[Trackers.scala 281:20]
      skip @[Trackers.scala 269:22]
    node T_2334 = eq(state, UInt<4>("h03")) @[Package.scala 7:47]
    node T_2335 = eq(state, UInt<4>("h04")) @[Package.scala 7:47]
    node T_2336 = eq(state, UInt<4>("h05")) @[Package.scala 7:47]
    node T_2337 = eq(state, UInt<4>("h07")) @[Package.scala 7:47]
    node T_2338 = or(T_2334, T_2335) @[Package.scala 7:62]
    node T_2339 = or(T_2338, T_2336) @[Package.scala 7:62]
    node T_2340 = or(T_2339, T_2337) @[Package.scala 7:62]
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87]
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51]
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55]
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31]
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56]
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26]
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 773:19]
    T_2379 is invalid @[Definitions.scala 773:19]
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 774:19]
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 775:19]
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 776:16]
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 777:24]
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 778:20]
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 779:19]
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 780:14]
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_2440 is invalid @[Definitions.scala 882:19]
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 883:19]
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 884:25]
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 885:16]
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 886:24]
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 887:25]
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 888:19]
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 889:14]
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25]
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38]
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2471 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2472 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2473 = or(T_2471, T_2472) @[Package.scala 7:62]
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50]
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63]
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44]
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49]
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49]
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60]
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40]
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47]
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2500 = or(T_2497, T_2498) @[Package.scala 7:62]
    node T_2501 = or(T_2500, T_2499) @[Package.scala 7:62]
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39]
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19]
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52]
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61]
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51]
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44]
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26]
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2518 = or(T_2515, T_2516) @[Package.scala 7:62]
    node T_2519 = or(T_2518, T_2517) @[Package.scala 7:62]
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20]
    when T_2520 : @[Trackers.scala 166:42]
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15]
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15]
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15]
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15]
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15]
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15]
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15]
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15]
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58]
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58]
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58]
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58]
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58]
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58]
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58]
      node T_2568 = not(T_2567) @[Trackers.scala 195:27]
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34]
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46]
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23]
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24]
      skip @[Trackers.scala 166:42]
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 36:42]
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 33:33]
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 36:59]
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23]
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_2604 is invalid @[Metadata.scala 158:20]
    T_2604.state <= T_2581 @[Metadata.scala 159:16]
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17]
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28]
    when T_2631 : @[Trackers.scala 331:53]
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2637 = or(T_2634, T_2635) @[Package.scala 7:62]
      node T_2638 = or(T_2637, T_2636) @[Package.scala 7:62]
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37]
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15]
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31]
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47]
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58]
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2654 = or(T_2651, T_2652) @[Package.scala 7:62]
      node T_2655 = or(T_2654, T_2653) @[Package.scala 7:62]
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38]
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15]
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2661 = not(T_2660) @[Trackers.scala 92:5]
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2664 = not(T_2663) @[Trackers.scala 92:34]
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32]
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34]
      pending_orel_data <= T_2666 @[Trackers.scala 332:25]
      skip @[Trackers.scala 331:53]
    when UInt<1>("h00") : @[Trackers.scala 337:33]
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53]
      skip @[Trackers.scala 337:33]
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    when T_2668 : @[Trackers.scala 338:36]
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2673 = or(T_2670, T_2671) @[Package.scala 7:62]
      node T_2674 = or(T_2673, T_2672) @[Package.scala 7:62]
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64]
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57]
      when T_2680 : @[Trackers.scala 339:44]
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59]
        skip @[Trackers.scala 339:44]
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2686 = or(T_2683, T_2684) @[Package.scala 7:62]
      node T_2687 = or(T_2686, T_2685) @[Package.scala 7:62]
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64]
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36]
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56]
      when T_2693 : @[Trackers.scala 340:44]
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59]
        skip @[Trackers.scala 340:44]
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25]
      skip @[Trackers.scala 338:36]
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51]
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 92:62]
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2707 = or(T_2704, T_2705) @[Package.scala 7:62]
    node T_2708 = or(T_2707, T_2706) @[Package.scala 7:62]
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64]
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 36:47]
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17]
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22]
      T_2712 <= T_2717 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20]
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 38:19]
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59]
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 93:64]
    wire T_2733 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2733 is invalid @[Definitions.scala 853:34]
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Package.scala 7:47]
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33]
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27]
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 36:47]
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17]
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22]
      T_2741 <= T_2746 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20]
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 38:19]
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 32:14]
    when T_2754 : @[Counters.scala 32:24]
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2757 = tail(T_2756, 1) @[Counters.scala 32:37]
      T_2751 <= T_2757 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 33:16]
    when T_2760 : @[Counters.scala 33:24]
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2763 = tail(T_2762, 1) @[Counters.scala 33:37]
      T_2751 <= T_2763 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 95:20]
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 96:19]
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 97:20]
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 98:21]
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 99:22]
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31]
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14]
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2772 = or(T_2769, T_2770) @[Package.scala 7:62]
    node T_2773 = or(T_2772, T_2771) @[Package.scala 7:62]
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26]
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26]
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32]
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26]
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13]
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24]
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2783 = or(T_2780, T_2781) @[Package.scala 7:62]
    node T_2784 = or(T_2783, T_2782) @[Package.scala 7:62]
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49]
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29]
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49]
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43]
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28]
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16]
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16]
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_2828 is invalid @[Definitions.scala 754:19]
    T_2828.r_type <= T_2800 @[Definitions.scala 755:16]
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 757:20]
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 758:19]
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 759:14]
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27]
    when vol_ognt_counter.pending : @[Trackers.scala 365:37]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60]
      skip @[Trackers.scala 365:37]
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15]
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35]
    T_2871 is invalid @[Definitions.scala 355:35]
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Package.scala 7:47]
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89]
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 36:47]
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17]
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22]
      T_2877 <= T_2882 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20]
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 37:18]
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 38:19]
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59]
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33]
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 93:64]
    wire T_2900 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2900 is invalid @[Definitions.scala 853:34]
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Package.scala 7:47]
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33]
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27]
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 36:47]
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17]
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22]
      T_2908 <= T_2913 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20]
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 37:18]
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 38:19]
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 32:14]
    when T_2921 : @[Counters.scala 32:24]
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2924 = tail(T_2923, 1) @[Counters.scala 32:37]
      T_2918 <= T_2924 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 33:16]
    when T_2927 : @[Counters.scala 33:24]
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2930 = tail(T_2929, 1) @[Counters.scala 33:37]
      T_2918 <= T_2930 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 95:27]
    ognt_counter.pending <= T_2932 @[Counters.scala 95:20]
    ognt_counter.up.idx <= T_2884 @[Counters.scala 96:19]
    ognt_counter.up.done <= T_2885 @[Counters.scala 97:20]
    ognt_counter.down.idx <= T_2915 @[Counters.scala 98:21]
    ognt_counter.down.done <= T_2916 @[Counters.scala 99:22]
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13]
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36]
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33]
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30]
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30]
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13]
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26]
    T_2949 is invalid @[Definitions.scala 354:26]
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Package.scala 7:47]
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Package.scala 7:47]
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Package.scala 7:47]
    node T_2954 = or(T_2951, T_2952) @[Package.scala 7:62]
    node T_2955 = or(T_2954, T_2953) @[Package.scala 7:62]
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55]
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30]
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61]
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53]
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39]
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51]
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26]
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14]
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24]
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57]
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28]
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 36:42]
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 33:29]
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 33:33]
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 36:59]
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 37:47]
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 37:64]
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8]
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58]
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3015 is invalid @[Definitions.scala 417:19]
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 418:25]
    T_3015.a_type <= T_2982 @[Definitions.scala 419:16]
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    T_3015.union <= T_2984 @[Definitions.scala 424:15]
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 386:49]
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 386:61]
    node T_3070 = or(UInt<2>("h00"), xact_op_size) @[Definitions.scala 387:61]
    node T_3071 = bits(T_3070, 1, 0) @[Definitions.scala 387:76]
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 388:36]
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 388:45]
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 389:46]
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 389:54]
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58]
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58]
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58]
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16]
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16]
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16]
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16]
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16]
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16]
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3140 is invalid @[Definitions.scala 417:19]
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 419:16]
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 422:19]
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 423:14]
    T_3140.union <= T_3111 @[Definitions.scala 424:15]
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10]
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27]
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16]
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36]
    when T_3197 : @[Trackers.scala 632:61]
      state <= UInt<4>("h07") @[Trackers.scala 632:69]
      skip @[Trackers.scala 632:61]
    when ognt_counter.pending : @[Trackers.scala 634:33]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56]
      skip @[Trackers.scala 634:33]
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    wire T_3207 : UInt<3>[2] @[Definitions.scala 852:26]
    T_3207 is invalid @[Definitions.scala 852:26]
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Package.scala 7:47]
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Package.scala 7:47]
    node T_3211 = or(T_3209, T_3210) @[Package.scala 7:62]
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42]
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20]
    when T_3214 : @[Trackers.scala 172:42]
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15]
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15]
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15]
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15]
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15]
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15]
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15]
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15]
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58]
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58]
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58]
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58]
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58]
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58]
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58]
      node T_3262 = not(T_3261) @[Trackers.scala 195:27]
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34]
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46]
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23]
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24]
      skip @[Trackers.scala 172:42]
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37]
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61]
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59]
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89]
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 92:62]
    wire T_3291 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3291 is invalid @[Definitions.scala 853:34]
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Package.scala 7:47]
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33]
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27]
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 36:47]
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17]
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22]
      T_3299 <= T_3304 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20]
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 38:19]
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 21:42]
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 93:64]
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17]
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22]
      T_3314 <= T_3319 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20]
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 38:19]
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 32:14]
    when T_3327 : @[Counters.scala 32:24]
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_3330 = tail(T_3329, 1) @[Counters.scala 32:37]
      T_3324 <= T_3330 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 33:16]
    when T_3333 : @[Counters.scala 33:24]
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_3336 = tail(T_3335, 1) @[Counters.scala 33:37]
      T_3324 <= T_3336 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 95:27]
    ifin_counter.pending <= T_3338 @[Counters.scala 95:20]
    ifin_counter.up.idx <= T_3306 @[Counters.scala 96:19]
    ifin_counter.up.done <= T_3307 @[Counters.scala 97:20]
    ifin_counter.down.idx <= T_3321 @[Counters.scala 98:21]
    ifin_counter.down.done <= T_3322 @[Counters.scala 99:22]
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10]
    when T_3343 : @[Trackers.scala 525:31]
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_3349 = or(T_3346, T_3347) @[Package.scala 7:62]
      node T_3350 = or(T_3349, T_3348) @[Package.scala 7:62]
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37]
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15]
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31]
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46]
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
      wire T_3370 : UInt<3>[2] @[Definitions.scala 852:26]
      T_3370 is invalid @[Definitions.scala 852:26]
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Package.scala 7:47]
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Package.scala 7:47]
      node T_3374 = or(T_3372, T_3373) @[Package.scala 7:62]
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42]
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37]
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15]
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31]
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77]
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75]
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25]
      skip @[Trackers.scala 525:31]
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33]
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33]
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44]
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44]
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49]
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25]
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16]
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16]
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16]
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16]
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16]
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16]
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8]
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_3455 is invalid @[Definitions.scala 882:19]
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 883:19]
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 884:25]
    T_3455.g_type <= T_3426 @[Definitions.scala 885:16]
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 886:24]
    T_3455.manager_xact_id <= UInt<2>("h03") @[Definitions.scala 887:25]
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 888:19]
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 889:14]
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    wire T_3491 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3491 is invalid @[Definitions.scala 853:34]
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Package.scala 7:47]
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33]
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27]
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 36:47]
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17]
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22]
      T_3499 <= T_3504 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20]
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 37:18]
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 38:19]
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19]
    ignt_data_done <= T_3507 @[Trackers.scala 552:20]
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25]
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10]
    when T_3510 : @[Trackers.scala 554:37]
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27]
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27]
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37]
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19]
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30]
      when T_3512 : @[Trackers.scala 558:47]
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33]
        wire T_3522 : UInt<3>[2] @[Definitions.scala 852:26]
        T_3522 is invalid @[Definitions.scala 852:26]
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Package.scala 7:47]
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Package.scala 7:47]
        node T_3526 = or(T_3524, T_3525) @[Package.scala 7:62]
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42]
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32]
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32]
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16]
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14]
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51]
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30]
        skip @[Trackers.scala 558:47]
      skip @[Trackers.scala 554:37]
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36]
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27]
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_3537 : @[Broadcast.scala 196:28]
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29]
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46]
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44]
      pending_iprbs <= T_3541 @[Trackers.scala 383:21]
      skip @[Broadcast.scala 196:28]
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61]
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53]
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47]
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66]
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54]
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26]
    T_3562 is invalid @[Definitions.scala 354:26]
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Package.scala 7:47]
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Package.scala 7:47]
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Package.scala 7:47]
    node T_3567 = or(T_3564, T_3565) @[Package.scala 7:62]
    node T_3568 = or(T_3567, T_3566) @[Package.scala 7:62]
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55]
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20]
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41]
    when T_3571 : @[Trackers.scala 183:51]
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54]
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54]
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54]
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56]
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8]
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51]
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51]
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51]
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51]
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51]
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51]
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51]
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51]
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15]
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15]
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15]
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15]
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15]
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15]
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15]
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15]
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58]
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58]
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58]
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58]
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58]
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58]
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58]
      node T_3655 = not(T_3654) @[Trackers.scala 186:29]
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35]
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64]
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56]
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25]
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54]
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54]
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54]
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56]
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8]
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45]
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26]
      skip @[Trackers.scala 183:51]
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60]
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60]
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60]
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60]
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60]
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60]
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25]
    all_pending_done <= T_3706 @[Trackers.scala 50:22]
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16]
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27]
    when T_3708 : @[Trackers.scala 51:48]
      state <= UInt<4>("h00") @[Trackers.scala 52:13]
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35]
      skip @[Trackers.scala 51:48]
    
  module BufferedBroadcastAcquireTracker_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30]
    all_pending_done is invalid @[Trackers.scala 86:30]
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28]
    xact_addr_beat is invalid @[Trackers.scala 215:28]
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23]
    xact_iacq is invalid @[Trackers.scala 216:23]
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30]
    vol_ignt_counter is invalid @[Trackers.scala 241:30]
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26]
    scoreboard_6 is invalid @[Trackers.scala 454:26]
    wire ignt_data_idx : UInt @[Trackers.scala 455:27]
    ignt_data_idx is invalid @[Trackers.scala 455:27]
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28]
    ignt_data_done is invalid @[Trackers.scala 456:28]
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26]
    ifin_counter is invalid @[Trackers.scala 457:26]
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26]
    ognt_counter is invalid @[Trackers.scala 577:26]
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40]
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30]
    vol_ognt_counter is invalid @[Trackers.scala 306:30]
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61]
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40]
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65]
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20]
    T_195 is invalid @[Metadata.scala 309:20]
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18]
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_241 is invalid @[Metadata.scala 158:20]
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17]
    coh is invalid @[Metadata.scala 337:17]
    coh.inner <- T_195 @[Metadata.scala 338:13]
    coh.outer <- T_241 @[Metadata.scala 339:13]
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18]
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29]
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56]
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1623 is invalid @[Definitions.scala 355:35]
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Package.scala 7:47]
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89]
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80]
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1636 is invalid @[Definitions.scala 355:35]
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Package.scala 7:47]
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89]
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57]
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37]
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34]
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10]
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9]
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9]
    when T_1652 : @[Broadcast.scala 98:9]
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9]
      skip @[Broadcast.scala 98:9]
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18]
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29]
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28]
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28]
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73]
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58]
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45]
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10]
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9]
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9]
    when T_1666 : @[Broadcast.scala 102:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9]
      skip @[Broadcast.scala 102:9]
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18]
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29]
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28]
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56]
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45]
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10]
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9]
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9]
    when T_1677 : @[Broadcast.scala 105:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9]
      skip @[Broadcast.scala 105:9]
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54]
    T_1691 is invalid @[Trackers.scala 150:54]
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54]
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55]
    T_1709 is invalid @[Trackers.scala 179:55]
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55]
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56]
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56]
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56]
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56]
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56]
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56]
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56]
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56]
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56]
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23]
    data_valid is invalid @[Trackers.scala 180:23]
    data_valid[0] <= T_1716 @[Trackers.scala 180:23]
    data_valid[1] <= T_1719 @[Trackers.scala 180:23]
    data_valid[2] <= T_1722 @[Trackers.scala 180:23]
    data_valid[3] <= T_1725 @[Trackers.scala 180:23]
    data_valid[4] <= T_1728 @[Trackers.scala 180:23]
    data_valid[5] <= T_1731 @[Trackers.scala 180:23]
    data_valid[6] <= T_1734 @[Trackers.scala 180:23]
    data_valid[7] <= T_1737 @[Trackers.scala 180:23]
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37]
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49]
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27]
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37]
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49]
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27]
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37]
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49]
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27]
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32]
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43]
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23]
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32]
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43]
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23]
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32]
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43]
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23]
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25]
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28]
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19]
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61]
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53]
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67]
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44]
    inst ignt_q of Queue_10 @[Trackers.scala 450:27]
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29]
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48]
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64]
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1812 is invalid @[Definitions.scala 355:35]
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Package.scala 7:47]
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89]
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57]
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54]
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47]
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25]
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24]
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21]
    xact_iacq <- T_1823 @[Trackers.scala 480:15]
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20]
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37]
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18]
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17]
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28]
    when T_1852 : @[Trackers.scala 485:53]
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1862 is invalid @[Definitions.scala 354:26]
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Package.scala 7:47]
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Package.scala 7:47]
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Package.scala 7:47]
      node T_1867 = or(T_1864, T_1865) @[Package.scala 7:62]
      node T_1868 = or(T_1867, T_1866) @[Package.scala 7:62]
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55]
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38]
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15]
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1875 = not(T_1874) @[Trackers.scala 92:5]
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1878 = not(T_1877) @[Trackers.scala 92:34]
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32]
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45]
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35]
      T_1890 is invalid @[Definitions.scala 355:35]
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Package.scala 7:47]
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89]
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28]
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36]
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45]
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8]
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60]
      pending_put_data <= T_1907 @[Trackers.scala 486:24]
      skip @[Trackers.scala 485:53]
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_1910 : @[Trackers.scala 492:30]
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23]
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39]
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45]
      xact_allocate <= T_1912 @[Trackers.scala 494:21]
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65]
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28]
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54]
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54]
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36]
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17]
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36]
      xact_op_code <= T_1924 @[Trackers.scala 496:20]
      node T_1925 = bits(io.inner.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22]
      node T_1926 = bits(io.inner.acquire.bits.union, 7, 6) @[Definitions.scala 176:38]
      xact_op_size <= T_1926 @[Trackers.scala 498:20]
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54]
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1939 is invalid @[Definitions.scala 354:26]
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Package.scala 7:47]
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Package.scala 7:47]
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Package.scala 7:47]
      node T_1944 = or(T_1941, T_1942) @[Package.scala 7:62]
      node T_1945 = or(T_1944, T_1943) @[Package.scala 7:62]
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55]
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38]
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15]
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1952 = not(T_1951) @[Trackers.scala 92:5]
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1955 = not(T_1954) @[Trackers.scala 92:34]
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32]
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30]
      pending_put_data <= T_1958 @[Trackers.scala 500:24]
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25]
      state <= UInt<4>("h05") @[Trackers.scala 505:13]
      skip @[Trackers.scala 492:30]
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37]
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35]
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46]
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61]
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53]
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1976 is invalid @[Definitions.scala 355:35]
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Package.scala 7:47]
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89]
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49]
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64]
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26]
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46]
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46]
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16]
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16]
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16]
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16]
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16]
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16]
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16]
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8]
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 694:19]
    T_2030 is invalid @[Definitions.scala 694:19]
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 695:19]
    T_2030.p_type <= T_2005 @[Definitions.scala 696:16]
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 697:20]
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9]
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8]
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30]
    T_2065 is invalid @[Trackers.scala 393:30]
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2074 = not(T_2073) @[Trackers.scala 98:5]
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15]
    node T_2077 = not(T_2076) @[Trackers.scala 98:40]
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38]
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38]
    pending_iprbs <= T_2079 @[Trackers.scala 395:21]
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37]
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72]
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55]
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28]
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27]
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17]
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22]
      T_2091 <= T_2096 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20]
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 38:19]
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44]
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59]
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56]
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 93:64]
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2110 = or(T_2107, T_2108) @[Package.scala 7:62]
    node T_2111 = or(T_2110, T_2109) @[Package.scala 7:62]
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64]
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 36:47]
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17]
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22]
      T_2115 <= T_2120 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20]
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 38:19]
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 32:14]
    when T_2128 : @[Counters.scala 32:24]
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2131 = tail(T_2130, 1) @[Counters.scala 32:37]
      T_2125 <= T_2131 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 33:16]
    when T_2134 : @[Counters.scala 33:24]
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2137 = tail(T_2136, 1) @[Counters.scala 33:37]
      T_2125 <= T_2137 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 95:27]
    T_2065.pending <= T_2139 @[Counters.scala 95:20]
    T_2065.up.idx <= T_2098 @[Counters.scala 96:19]
    T_2065.up.done <= T_2099 @[Counters.scala 97:20]
    T_2065.down.idx <= T_2122 @[Counters.scala 98:21]
    T_2065.down.done <= T_2123 @[Counters.scala 99:22]
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18]
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55]
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59]
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39]
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36]
    when T_2146 : @[Trackers.scala 406:85]
      state <= T_2056 @[Trackers.scala 407:15]
      skip @[Trackers.scala 406:85]
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19]
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12]
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76]
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95]
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 92:62]
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2161 = or(T_2158, T_2159) @[Package.scala 7:62]
    node T_2162 = or(T_2161, T_2160) @[Package.scala 7:62]
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64]
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 36:47]
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17]
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22]
      T_2166 <= T_2171 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20]
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 38:19]
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40]
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59]
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52]
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 93:64]
    wire T_2189 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2189 is invalid @[Definitions.scala 853:34]
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Package.scala 7:47]
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33]
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27]
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 36:47]
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17]
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22]
      T_2197 <= T_2202 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20]
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 38:19]
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 32:14]
    when T_2210 : @[Counters.scala 32:24]
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2213 = tail(T_2212, 1) @[Counters.scala 32:37]
      T_2207 <= T_2213 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 33:16]
    when T_2216 : @[Counters.scala 33:24]
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2219 = tail(T_2218, 1) @[Counters.scala 33:37]
      T_2207 <= T_2219 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 95:20]
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 96:19]
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 97:20]
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 98:21]
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 99:22]
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75]
    when T_2224 : @[Trackers.scala 259:30]
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23]
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28]
      pending_irel_data <= T_2226 @[Trackers.scala 264:25]
      state <= UInt<4>("h07") @[Trackers.scala 265:13]
      skip @[Trackers.scala 259:30]
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2232 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2233 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2234 = or(T_2232, T_2233) @[Package.scala 7:62]
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50]
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63]
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44]
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49]
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49]
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60]
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40]
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47]
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2261 = or(T_2258, T_2259) @[Package.scala 7:62]
    node T_2262 = or(T_2261, T_2260) @[Package.scala 7:62]
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39]
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19]
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52]
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61]
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51]
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47]
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66]
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41]
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61]
    when T_2277 : @[Trackers.scala 269:22]
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2282 = or(T_2279, T_2280) @[Package.scala 7:62]
      node T_2283 = or(T_2282, T_2281) @[Package.scala 7:62]
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64]
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57]
      when T_2289 : @[Trackers.scala 270:32]
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40]
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30]
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27]
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38]
          skip @[Trackers.scala 271:40]
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2294 = or(T_2291, T_2292) @[Package.scala 7:62]
        node T_2295 = or(T_2294, T_2293) @[Package.scala 7:62]
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64]
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2301 = or(T_2298, T_2299) @[Package.scala 7:62]
        node T_2302 = or(T_2301, T_2300) @[Package.scala 7:62]
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38]
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15]
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2308 = not(T_2307) @[Trackers.scala 92:5]
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2311 = not(T_2310) @[Trackers.scala 92:34]
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32]
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33]
        pending_irel_data <= T_2314 @[Trackers.scala 278:27]
        skip @[Trackers.scala 270:32]
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32]
      when T_2316 : @[Trackers.scala 281:20]
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2321 = or(T_2318, T_2319) @[Package.scala 7:62]
        node T_2322 = or(T_2321, T_2320) @[Package.scala 7:62]
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38]
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15]
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2328 = not(T_2327) @[Trackers.scala 92:5]
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2331 = not(T_2330) @[Trackers.scala 92:34]
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32]
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49]
        pending_irel_data <= T_2333 @[Trackers.scala 282:27]
        skip @[Trackers.scala 281:20]
      skip @[Trackers.scala 269:22]
    node T_2334 = eq(state, UInt<4>("h03")) @[Package.scala 7:47]
    node T_2335 = eq(state, UInt<4>("h04")) @[Package.scala 7:47]
    node T_2336 = eq(state, UInt<4>("h05")) @[Package.scala 7:47]
    node T_2337 = eq(state, UInt<4>("h07")) @[Package.scala 7:47]
    node T_2338 = or(T_2334, T_2335) @[Package.scala 7:62]
    node T_2339 = or(T_2338, T_2336) @[Package.scala 7:62]
    node T_2340 = or(T_2339, T_2337) @[Package.scala 7:62]
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87]
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51]
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55]
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31]
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56]
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26]
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 773:19]
    T_2379 is invalid @[Definitions.scala 773:19]
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 774:19]
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 775:19]
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 776:16]
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 777:24]
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 778:20]
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 779:19]
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 780:14]
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_2440 is invalid @[Definitions.scala 882:19]
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 883:19]
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 884:25]
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 885:16]
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 886:24]
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 887:25]
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 888:19]
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 889:14]
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25]
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38]
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2471 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2472 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2473 = or(T_2471, T_2472) @[Package.scala 7:62]
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50]
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63]
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44]
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49]
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49]
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60]
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40]
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47]
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2500 = or(T_2497, T_2498) @[Package.scala 7:62]
    node T_2501 = or(T_2500, T_2499) @[Package.scala 7:62]
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39]
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19]
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52]
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61]
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51]
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44]
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26]
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2518 = or(T_2515, T_2516) @[Package.scala 7:62]
    node T_2519 = or(T_2518, T_2517) @[Package.scala 7:62]
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20]
    when T_2520 : @[Trackers.scala 166:42]
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15]
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15]
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15]
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15]
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15]
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15]
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15]
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15]
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58]
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58]
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58]
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58]
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58]
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58]
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58]
      node T_2568 = not(T_2567) @[Trackers.scala 195:27]
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34]
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46]
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23]
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24]
      skip @[Trackers.scala 166:42]
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 36:42]
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 33:33]
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 36:59]
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23]
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_2604 is invalid @[Metadata.scala 158:20]
    T_2604.state <= T_2581 @[Metadata.scala 159:16]
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17]
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28]
    when T_2631 : @[Trackers.scala 331:53]
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2637 = or(T_2634, T_2635) @[Package.scala 7:62]
      node T_2638 = or(T_2637, T_2636) @[Package.scala 7:62]
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37]
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15]
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31]
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47]
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58]
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2654 = or(T_2651, T_2652) @[Package.scala 7:62]
      node T_2655 = or(T_2654, T_2653) @[Package.scala 7:62]
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38]
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15]
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2661 = not(T_2660) @[Trackers.scala 92:5]
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2664 = not(T_2663) @[Trackers.scala 92:34]
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32]
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34]
      pending_orel_data <= T_2666 @[Trackers.scala 332:25]
      skip @[Trackers.scala 331:53]
    when UInt<1>("h00") : @[Trackers.scala 337:33]
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53]
      skip @[Trackers.scala 337:33]
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    when T_2668 : @[Trackers.scala 338:36]
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2673 = or(T_2670, T_2671) @[Package.scala 7:62]
      node T_2674 = or(T_2673, T_2672) @[Package.scala 7:62]
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64]
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57]
      when T_2680 : @[Trackers.scala 339:44]
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59]
        skip @[Trackers.scala 339:44]
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2686 = or(T_2683, T_2684) @[Package.scala 7:62]
      node T_2687 = or(T_2686, T_2685) @[Package.scala 7:62]
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64]
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36]
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56]
      when T_2693 : @[Trackers.scala 340:44]
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59]
        skip @[Trackers.scala 340:44]
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25]
      skip @[Trackers.scala 338:36]
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51]
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 92:62]
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2707 = or(T_2704, T_2705) @[Package.scala 7:62]
    node T_2708 = or(T_2707, T_2706) @[Package.scala 7:62]
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64]
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 36:47]
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17]
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22]
      T_2712 <= T_2717 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20]
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 38:19]
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59]
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 93:64]
    wire T_2733 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2733 is invalid @[Definitions.scala 853:34]
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Package.scala 7:47]
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33]
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27]
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 36:47]
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17]
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22]
      T_2741 <= T_2746 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20]
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 38:19]
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 32:14]
    when T_2754 : @[Counters.scala 32:24]
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2757 = tail(T_2756, 1) @[Counters.scala 32:37]
      T_2751 <= T_2757 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 33:16]
    when T_2760 : @[Counters.scala 33:24]
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2763 = tail(T_2762, 1) @[Counters.scala 33:37]
      T_2751 <= T_2763 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 95:20]
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 96:19]
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 97:20]
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 98:21]
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 99:22]
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31]
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14]
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2772 = or(T_2769, T_2770) @[Package.scala 7:62]
    node T_2773 = or(T_2772, T_2771) @[Package.scala 7:62]
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26]
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26]
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32]
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26]
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13]
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24]
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2783 = or(T_2780, T_2781) @[Package.scala 7:62]
    node T_2784 = or(T_2783, T_2782) @[Package.scala 7:62]
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49]
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29]
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49]
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43]
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28]
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16]
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16]
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_2828 is invalid @[Definitions.scala 754:19]
    T_2828.r_type <= T_2800 @[Definitions.scala 755:16]
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 757:20]
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 758:19]
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 759:14]
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27]
    when vol_ognt_counter.pending : @[Trackers.scala 365:37]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60]
      skip @[Trackers.scala 365:37]
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15]
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35]
    T_2871 is invalid @[Definitions.scala 355:35]
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Package.scala 7:47]
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89]
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 36:47]
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17]
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22]
      T_2877 <= T_2882 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20]
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 37:18]
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 38:19]
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59]
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33]
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 93:64]
    wire T_2900 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2900 is invalid @[Definitions.scala 853:34]
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Package.scala 7:47]
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33]
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27]
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 36:47]
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17]
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22]
      T_2908 <= T_2913 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20]
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 37:18]
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 38:19]
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 32:14]
    when T_2921 : @[Counters.scala 32:24]
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2924 = tail(T_2923, 1) @[Counters.scala 32:37]
      T_2918 <= T_2924 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 33:16]
    when T_2927 : @[Counters.scala 33:24]
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2930 = tail(T_2929, 1) @[Counters.scala 33:37]
      T_2918 <= T_2930 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 95:27]
    ognt_counter.pending <= T_2932 @[Counters.scala 95:20]
    ognt_counter.up.idx <= T_2884 @[Counters.scala 96:19]
    ognt_counter.up.done <= T_2885 @[Counters.scala 97:20]
    ognt_counter.down.idx <= T_2915 @[Counters.scala 98:21]
    ognt_counter.down.done <= T_2916 @[Counters.scala 99:22]
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13]
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36]
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33]
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30]
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30]
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13]
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26]
    T_2949 is invalid @[Definitions.scala 354:26]
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Package.scala 7:47]
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Package.scala 7:47]
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Package.scala 7:47]
    node T_2954 = or(T_2951, T_2952) @[Package.scala 7:62]
    node T_2955 = or(T_2954, T_2953) @[Package.scala 7:62]
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55]
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30]
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61]
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53]
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39]
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51]
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26]
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14]
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24]
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57]
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28]
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 36:42]
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 33:29]
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 33:33]
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 36:59]
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 37:47]
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 37:64]
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8]
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58]
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3015 is invalid @[Definitions.scala 417:19]
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 418:25]
    T_3015.a_type <= T_2982 @[Definitions.scala 419:16]
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    T_3015.union <= T_2984 @[Definitions.scala 424:15]
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 386:49]
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 386:61]
    node T_3070 = or(UInt<2>("h00"), xact_op_size) @[Definitions.scala 387:61]
    node T_3071 = bits(T_3070, 1, 0) @[Definitions.scala 387:76]
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 388:36]
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 388:45]
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 389:46]
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 389:54]
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58]
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58]
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58]
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16]
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16]
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16]
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16]
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16]
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16]
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3140 is invalid @[Definitions.scala 417:19]
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 419:16]
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 422:19]
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 423:14]
    T_3140.union <= T_3111 @[Definitions.scala 424:15]
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10]
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27]
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16]
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36]
    when T_3197 : @[Trackers.scala 632:61]
      state <= UInt<4>("h07") @[Trackers.scala 632:69]
      skip @[Trackers.scala 632:61]
    when ognt_counter.pending : @[Trackers.scala 634:33]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56]
      skip @[Trackers.scala 634:33]
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    wire T_3207 : UInt<3>[2] @[Definitions.scala 852:26]
    T_3207 is invalid @[Definitions.scala 852:26]
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Package.scala 7:47]
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Package.scala 7:47]
    node T_3211 = or(T_3209, T_3210) @[Package.scala 7:62]
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42]
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20]
    when T_3214 : @[Trackers.scala 172:42]
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15]
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15]
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15]
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15]
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15]
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15]
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15]
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15]
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58]
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58]
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58]
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58]
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58]
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58]
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58]
      node T_3262 = not(T_3261) @[Trackers.scala 195:27]
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34]
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46]
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23]
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24]
      skip @[Trackers.scala 172:42]
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37]
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61]
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59]
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89]
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 92:62]
    wire T_3291 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3291 is invalid @[Definitions.scala 853:34]
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Package.scala 7:47]
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33]
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27]
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 36:47]
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17]
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22]
      T_3299 <= T_3304 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20]
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 38:19]
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 21:42]
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 93:64]
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17]
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22]
      T_3314 <= T_3319 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20]
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 38:19]
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 32:14]
    when T_3327 : @[Counters.scala 32:24]
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_3330 = tail(T_3329, 1) @[Counters.scala 32:37]
      T_3324 <= T_3330 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 33:16]
    when T_3333 : @[Counters.scala 33:24]
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_3336 = tail(T_3335, 1) @[Counters.scala 33:37]
      T_3324 <= T_3336 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 95:27]
    ifin_counter.pending <= T_3338 @[Counters.scala 95:20]
    ifin_counter.up.idx <= T_3306 @[Counters.scala 96:19]
    ifin_counter.up.done <= T_3307 @[Counters.scala 97:20]
    ifin_counter.down.idx <= T_3321 @[Counters.scala 98:21]
    ifin_counter.down.done <= T_3322 @[Counters.scala 99:22]
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10]
    when T_3343 : @[Trackers.scala 525:31]
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_3349 = or(T_3346, T_3347) @[Package.scala 7:62]
      node T_3350 = or(T_3349, T_3348) @[Package.scala 7:62]
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37]
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15]
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31]
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46]
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
      wire T_3370 : UInt<3>[2] @[Definitions.scala 852:26]
      T_3370 is invalid @[Definitions.scala 852:26]
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Package.scala 7:47]
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Package.scala 7:47]
      node T_3374 = or(T_3372, T_3373) @[Package.scala 7:62]
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42]
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37]
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15]
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31]
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77]
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75]
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25]
      skip @[Trackers.scala 525:31]
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33]
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33]
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44]
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44]
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49]
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25]
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16]
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16]
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16]
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16]
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16]
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16]
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8]
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_3455 is invalid @[Definitions.scala 882:19]
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 883:19]
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 884:25]
    T_3455.g_type <= T_3426 @[Definitions.scala 885:16]
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 886:24]
    T_3455.manager_xact_id <= UInt<3>("h04") @[Definitions.scala 887:25]
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 888:19]
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 889:14]
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    wire T_3491 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3491 is invalid @[Definitions.scala 853:34]
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Package.scala 7:47]
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33]
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27]
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 36:47]
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17]
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22]
      T_3499 <= T_3504 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20]
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 37:18]
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 38:19]
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19]
    ignt_data_done <= T_3507 @[Trackers.scala 552:20]
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25]
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10]
    when T_3510 : @[Trackers.scala 554:37]
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27]
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27]
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37]
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19]
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30]
      when T_3512 : @[Trackers.scala 558:47]
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33]
        wire T_3522 : UInt<3>[2] @[Definitions.scala 852:26]
        T_3522 is invalid @[Definitions.scala 852:26]
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Package.scala 7:47]
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Package.scala 7:47]
        node T_3526 = or(T_3524, T_3525) @[Package.scala 7:62]
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42]
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32]
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32]
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16]
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14]
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51]
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30]
        skip @[Trackers.scala 558:47]
      skip @[Trackers.scala 554:37]
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36]
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27]
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_3537 : @[Broadcast.scala 196:28]
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29]
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46]
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44]
      pending_iprbs <= T_3541 @[Trackers.scala 383:21]
      skip @[Broadcast.scala 196:28]
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61]
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53]
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47]
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66]
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54]
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26]
    T_3562 is invalid @[Definitions.scala 354:26]
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Package.scala 7:47]
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Package.scala 7:47]
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Package.scala 7:47]
    node T_3567 = or(T_3564, T_3565) @[Package.scala 7:62]
    node T_3568 = or(T_3567, T_3566) @[Package.scala 7:62]
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55]
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20]
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41]
    when T_3571 : @[Trackers.scala 183:51]
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54]
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54]
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54]
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56]
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8]
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51]
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51]
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51]
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51]
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51]
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51]
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51]
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51]
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15]
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15]
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15]
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15]
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15]
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15]
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15]
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15]
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58]
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58]
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58]
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58]
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58]
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58]
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58]
      node T_3655 = not(T_3654) @[Trackers.scala 186:29]
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35]
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64]
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56]
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25]
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54]
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54]
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54]
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56]
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8]
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45]
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26]
      skip @[Trackers.scala 183:51]
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60]
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60]
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60]
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60]
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60]
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60]
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25]
    all_pending_done <= T_3706 @[Trackers.scala 50:22]
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16]
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27]
    when T_3708 : @[Trackers.scala 51:48]
      state <= UInt<4>("h00") @[Trackers.scala 52:13]
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35]
      skip @[Trackers.scala 51:48]
    
  module BufferedBroadcastAcquireTracker_4 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30]
    all_pending_done is invalid @[Trackers.scala 86:30]
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28]
    xact_addr_beat is invalid @[Trackers.scala 215:28]
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23]
    xact_iacq is invalid @[Trackers.scala 216:23]
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30]
    vol_ignt_counter is invalid @[Trackers.scala 241:30]
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26]
    scoreboard_6 is invalid @[Trackers.scala 454:26]
    wire ignt_data_idx : UInt @[Trackers.scala 455:27]
    ignt_data_idx is invalid @[Trackers.scala 455:27]
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28]
    ignt_data_done is invalid @[Trackers.scala 456:28]
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26]
    ifin_counter is invalid @[Trackers.scala 457:26]
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26]
    ognt_counter is invalid @[Trackers.scala 577:26]
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40]
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30]
    vol_ognt_counter is invalid @[Trackers.scala 306:30]
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61]
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40]
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65]
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20]
    T_195 is invalid @[Metadata.scala 309:20]
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18]
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_241 is invalid @[Metadata.scala 158:20]
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17]
    coh is invalid @[Metadata.scala 337:17]
    coh.inner <- T_195 @[Metadata.scala 338:13]
    coh.outer <- T_241 @[Metadata.scala 339:13]
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18]
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29]
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56]
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1623 is invalid @[Definitions.scala 355:35]
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Package.scala 7:47]
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89]
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80]
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1636 is invalid @[Definitions.scala 355:35]
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Package.scala 7:47]
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89]
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57]
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37]
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34]
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10]
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9]
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9]
    when T_1652 : @[Broadcast.scala 98:9]
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9]
      skip @[Broadcast.scala 98:9]
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18]
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29]
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28]
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28]
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73]
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58]
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45]
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10]
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9]
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9]
    when T_1666 : @[Broadcast.scala 102:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9]
      skip @[Broadcast.scala 102:9]
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18]
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29]
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28]
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56]
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45]
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10]
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9]
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9]
    when T_1677 : @[Broadcast.scala 105:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9]
      skip @[Broadcast.scala 105:9]
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54]
    T_1691 is invalid @[Trackers.scala 150:54]
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54]
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55]
    T_1709 is invalid @[Trackers.scala 179:55]
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55]
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56]
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56]
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56]
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56]
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56]
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56]
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56]
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56]
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56]
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23]
    data_valid is invalid @[Trackers.scala 180:23]
    data_valid[0] <= T_1716 @[Trackers.scala 180:23]
    data_valid[1] <= T_1719 @[Trackers.scala 180:23]
    data_valid[2] <= T_1722 @[Trackers.scala 180:23]
    data_valid[3] <= T_1725 @[Trackers.scala 180:23]
    data_valid[4] <= T_1728 @[Trackers.scala 180:23]
    data_valid[5] <= T_1731 @[Trackers.scala 180:23]
    data_valid[6] <= T_1734 @[Trackers.scala 180:23]
    data_valid[7] <= T_1737 @[Trackers.scala 180:23]
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37]
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49]
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27]
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37]
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49]
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27]
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37]
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49]
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27]
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32]
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43]
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23]
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32]
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43]
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23]
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32]
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43]
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23]
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25]
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28]
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19]
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61]
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53]
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67]
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44]
    inst ignt_q of Queue_10 @[Trackers.scala 450:27]
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29]
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48]
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64]
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1812 is invalid @[Definitions.scala 355:35]
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Package.scala 7:47]
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89]
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57]
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54]
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47]
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25]
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24]
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21]
    xact_iacq <- T_1823 @[Trackers.scala 480:15]
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20]
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37]
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18]
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17]
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28]
    when T_1852 : @[Trackers.scala 485:53]
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1862 is invalid @[Definitions.scala 354:26]
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Package.scala 7:47]
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Package.scala 7:47]
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Package.scala 7:47]
      node T_1867 = or(T_1864, T_1865) @[Package.scala 7:62]
      node T_1868 = or(T_1867, T_1866) @[Package.scala 7:62]
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55]
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38]
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15]
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1875 = not(T_1874) @[Trackers.scala 92:5]
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1878 = not(T_1877) @[Trackers.scala 92:34]
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32]
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45]
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35]
      T_1890 is invalid @[Definitions.scala 355:35]
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Package.scala 7:47]
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89]
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28]
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36]
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45]
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8]
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60]
      pending_put_data <= T_1907 @[Trackers.scala 486:24]
      skip @[Trackers.scala 485:53]
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_1910 : @[Trackers.scala 492:30]
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23]
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39]
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45]
      xact_allocate <= T_1912 @[Trackers.scala 494:21]
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65]
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28]
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54]
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54]
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36]
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17]
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36]
      xact_op_code <= T_1924 @[Trackers.scala 496:20]
      node T_1925 = bits(io.inner.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22]
      node T_1926 = bits(io.inner.acquire.bits.union, 7, 6) @[Definitions.scala 176:38]
      xact_op_size <= T_1926 @[Trackers.scala 498:20]
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54]
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1939 is invalid @[Definitions.scala 354:26]
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Package.scala 7:47]
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Package.scala 7:47]
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Package.scala 7:47]
      node T_1944 = or(T_1941, T_1942) @[Package.scala 7:62]
      node T_1945 = or(T_1944, T_1943) @[Package.scala 7:62]
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55]
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38]
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15]
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1952 = not(T_1951) @[Trackers.scala 92:5]
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1955 = not(T_1954) @[Trackers.scala 92:34]
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32]
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30]
      pending_put_data <= T_1958 @[Trackers.scala 500:24]
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25]
      state <= UInt<4>("h05") @[Trackers.scala 505:13]
      skip @[Trackers.scala 492:30]
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37]
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35]
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46]
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61]
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53]
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1976 is invalid @[Definitions.scala 355:35]
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Package.scala 7:47]
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89]
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49]
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64]
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26]
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46]
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46]
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16]
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16]
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16]
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16]
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16]
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16]
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16]
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8]
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 694:19]
    T_2030 is invalid @[Definitions.scala 694:19]
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 695:19]
    T_2030.p_type <= T_2005 @[Definitions.scala 696:16]
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 697:20]
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9]
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8]
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30]
    T_2065 is invalid @[Trackers.scala 393:30]
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2074 = not(T_2073) @[Trackers.scala 98:5]
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15]
    node T_2077 = not(T_2076) @[Trackers.scala 98:40]
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38]
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38]
    pending_iprbs <= T_2079 @[Trackers.scala 395:21]
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37]
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72]
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55]
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28]
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27]
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17]
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22]
      T_2091 <= T_2096 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20]
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 38:19]
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44]
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59]
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56]
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 93:64]
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2110 = or(T_2107, T_2108) @[Package.scala 7:62]
    node T_2111 = or(T_2110, T_2109) @[Package.scala 7:62]
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64]
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 36:47]
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17]
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22]
      T_2115 <= T_2120 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20]
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 38:19]
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 32:14]
    when T_2128 : @[Counters.scala 32:24]
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2131 = tail(T_2130, 1) @[Counters.scala 32:37]
      T_2125 <= T_2131 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 33:16]
    when T_2134 : @[Counters.scala 33:24]
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2137 = tail(T_2136, 1) @[Counters.scala 33:37]
      T_2125 <= T_2137 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 95:27]
    T_2065.pending <= T_2139 @[Counters.scala 95:20]
    T_2065.up.idx <= T_2098 @[Counters.scala 96:19]
    T_2065.up.done <= T_2099 @[Counters.scala 97:20]
    T_2065.down.idx <= T_2122 @[Counters.scala 98:21]
    T_2065.down.done <= T_2123 @[Counters.scala 99:22]
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18]
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55]
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59]
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39]
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36]
    when T_2146 : @[Trackers.scala 406:85]
      state <= T_2056 @[Trackers.scala 407:15]
      skip @[Trackers.scala 406:85]
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19]
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12]
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76]
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95]
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 92:62]
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2161 = or(T_2158, T_2159) @[Package.scala 7:62]
    node T_2162 = or(T_2161, T_2160) @[Package.scala 7:62]
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64]
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 36:47]
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17]
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22]
      T_2166 <= T_2171 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20]
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 38:19]
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40]
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59]
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52]
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 93:64]
    wire T_2189 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2189 is invalid @[Definitions.scala 853:34]
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Package.scala 7:47]
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33]
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27]
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 36:47]
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17]
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22]
      T_2197 <= T_2202 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20]
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 38:19]
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 32:14]
    when T_2210 : @[Counters.scala 32:24]
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2213 = tail(T_2212, 1) @[Counters.scala 32:37]
      T_2207 <= T_2213 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 33:16]
    when T_2216 : @[Counters.scala 33:24]
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2219 = tail(T_2218, 1) @[Counters.scala 33:37]
      T_2207 <= T_2219 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 95:20]
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 96:19]
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 97:20]
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 98:21]
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 99:22]
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75]
    when T_2224 : @[Trackers.scala 259:30]
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23]
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28]
      pending_irel_data <= T_2226 @[Trackers.scala 264:25]
      state <= UInt<4>("h07") @[Trackers.scala 265:13]
      skip @[Trackers.scala 259:30]
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2232 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2233 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2234 = or(T_2232, T_2233) @[Package.scala 7:62]
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50]
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63]
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44]
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49]
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49]
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60]
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40]
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47]
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2261 = or(T_2258, T_2259) @[Package.scala 7:62]
    node T_2262 = or(T_2261, T_2260) @[Package.scala 7:62]
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39]
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19]
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52]
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61]
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51]
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47]
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66]
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41]
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61]
    when T_2277 : @[Trackers.scala 269:22]
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2282 = or(T_2279, T_2280) @[Package.scala 7:62]
      node T_2283 = or(T_2282, T_2281) @[Package.scala 7:62]
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64]
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57]
      when T_2289 : @[Trackers.scala 270:32]
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40]
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30]
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27]
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38]
          skip @[Trackers.scala 271:40]
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2294 = or(T_2291, T_2292) @[Package.scala 7:62]
        node T_2295 = or(T_2294, T_2293) @[Package.scala 7:62]
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64]
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2301 = or(T_2298, T_2299) @[Package.scala 7:62]
        node T_2302 = or(T_2301, T_2300) @[Package.scala 7:62]
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38]
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15]
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2308 = not(T_2307) @[Trackers.scala 92:5]
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2311 = not(T_2310) @[Trackers.scala 92:34]
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32]
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33]
        pending_irel_data <= T_2314 @[Trackers.scala 278:27]
        skip @[Trackers.scala 270:32]
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32]
      when T_2316 : @[Trackers.scala 281:20]
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2321 = or(T_2318, T_2319) @[Package.scala 7:62]
        node T_2322 = or(T_2321, T_2320) @[Package.scala 7:62]
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38]
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15]
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2328 = not(T_2327) @[Trackers.scala 92:5]
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2331 = not(T_2330) @[Trackers.scala 92:34]
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32]
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49]
        pending_irel_data <= T_2333 @[Trackers.scala 282:27]
        skip @[Trackers.scala 281:20]
      skip @[Trackers.scala 269:22]
    node T_2334 = eq(state, UInt<4>("h03")) @[Package.scala 7:47]
    node T_2335 = eq(state, UInt<4>("h04")) @[Package.scala 7:47]
    node T_2336 = eq(state, UInt<4>("h05")) @[Package.scala 7:47]
    node T_2337 = eq(state, UInt<4>("h07")) @[Package.scala 7:47]
    node T_2338 = or(T_2334, T_2335) @[Package.scala 7:62]
    node T_2339 = or(T_2338, T_2336) @[Package.scala 7:62]
    node T_2340 = or(T_2339, T_2337) @[Package.scala 7:62]
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87]
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51]
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55]
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31]
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56]
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26]
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 773:19]
    T_2379 is invalid @[Definitions.scala 773:19]
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 774:19]
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 775:19]
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 776:16]
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 777:24]
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 778:20]
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 779:19]
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 780:14]
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_2440 is invalid @[Definitions.scala 882:19]
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 883:19]
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 884:25]
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 885:16]
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 886:24]
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 887:25]
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 888:19]
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 889:14]
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25]
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38]
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2471 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2472 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2473 = or(T_2471, T_2472) @[Package.scala 7:62]
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50]
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63]
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44]
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49]
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49]
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60]
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40]
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47]
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2500 = or(T_2497, T_2498) @[Package.scala 7:62]
    node T_2501 = or(T_2500, T_2499) @[Package.scala 7:62]
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39]
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19]
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52]
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61]
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51]
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44]
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26]
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2518 = or(T_2515, T_2516) @[Package.scala 7:62]
    node T_2519 = or(T_2518, T_2517) @[Package.scala 7:62]
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20]
    when T_2520 : @[Trackers.scala 166:42]
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15]
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15]
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15]
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15]
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15]
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15]
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15]
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15]
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58]
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58]
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58]
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58]
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58]
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58]
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58]
      node T_2568 = not(T_2567) @[Trackers.scala 195:27]
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34]
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46]
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23]
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24]
      skip @[Trackers.scala 166:42]
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 36:42]
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 33:33]
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 36:59]
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23]
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_2604 is invalid @[Metadata.scala 158:20]
    T_2604.state <= T_2581 @[Metadata.scala 159:16]
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17]
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28]
    when T_2631 : @[Trackers.scala 331:53]
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2637 = or(T_2634, T_2635) @[Package.scala 7:62]
      node T_2638 = or(T_2637, T_2636) @[Package.scala 7:62]
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37]
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15]
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31]
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47]
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58]
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2654 = or(T_2651, T_2652) @[Package.scala 7:62]
      node T_2655 = or(T_2654, T_2653) @[Package.scala 7:62]
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38]
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15]
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2661 = not(T_2660) @[Trackers.scala 92:5]
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2664 = not(T_2663) @[Trackers.scala 92:34]
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32]
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34]
      pending_orel_data <= T_2666 @[Trackers.scala 332:25]
      skip @[Trackers.scala 331:53]
    when UInt<1>("h00") : @[Trackers.scala 337:33]
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53]
      skip @[Trackers.scala 337:33]
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    when T_2668 : @[Trackers.scala 338:36]
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2673 = or(T_2670, T_2671) @[Package.scala 7:62]
      node T_2674 = or(T_2673, T_2672) @[Package.scala 7:62]
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64]
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57]
      when T_2680 : @[Trackers.scala 339:44]
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59]
        skip @[Trackers.scala 339:44]
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2686 = or(T_2683, T_2684) @[Package.scala 7:62]
      node T_2687 = or(T_2686, T_2685) @[Package.scala 7:62]
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64]
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36]
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56]
      when T_2693 : @[Trackers.scala 340:44]
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59]
        skip @[Trackers.scala 340:44]
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25]
      skip @[Trackers.scala 338:36]
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51]
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 92:62]
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2707 = or(T_2704, T_2705) @[Package.scala 7:62]
    node T_2708 = or(T_2707, T_2706) @[Package.scala 7:62]
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64]
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 36:47]
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17]
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22]
      T_2712 <= T_2717 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20]
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 38:19]
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59]
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 93:64]
    wire T_2733 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2733 is invalid @[Definitions.scala 853:34]
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Package.scala 7:47]
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33]
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27]
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 36:47]
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17]
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22]
      T_2741 <= T_2746 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20]
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 38:19]
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 32:14]
    when T_2754 : @[Counters.scala 32:24]
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2757 = tail(T_2756, 1) @[Counters.scala 32:37]
      T_2751 <= T_2757 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 33:16]
    when T_2760 : @[Counters.scala 33:24]
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2763 = tail(T_2762, 1) @[Counters.scala 33:37]
      T_2751 <= T_2763 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 95:20]
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 96:19]
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 97:20]
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 98:21]
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 99:22]
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31]
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14]
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2772 = or(T_2769, T_2770) @[Package.scala 7:62]
    node T_2773 = or(T_2772, T_2771) @[Package.scala 7:62]
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26]
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26]
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32]
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26]
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13]
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24]
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2783 = or(T_2780, T_2781) @[Package.scala 7:62]
    node T_2784 = or(T_2783, T_2782) @[Package.scala 7:62]
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49]
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29]
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49]
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43]
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28]
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16]
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16]
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_2828 is invalid @[Definitions.scala 754:19]
    T_2828.r_type <= T_2800 @[Definitions.scala 755:16]
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 757:20]
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 758:19]
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 759:14]
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27]
    when vol_ognt_counter.pending : @[Trackers.scala 365:37]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60]
      skip @[Trackers.scala 365:37]
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15]
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35]
    T_2871 is invalid @[Definitions.scala 355:35]
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Package.scala 7:47]
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89]
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 36:47]
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17]
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22]
      T_2877 <= T_2882 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20]
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 37:18]
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 38:19]
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59]
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33]
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 93:64]
    wire T_2900 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2900 is invalid @[Definitions.scala 853:34]
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Package.scala 7:47]
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33]
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27]
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 36:47]
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17]
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22]
      T_2908 <= T_2913 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20]
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 37:18]
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 38:19]
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 32:14]
    when T_2921 : @[Counters.scala 32:24]
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2924 = tail(T_2923, 1) @[Counters.scala 32:37]
      T_2918 <= T_2924 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 33:16]
    when T_2927 : @[Counters.scala 33:24]
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2930 = tail(T_2929, 1) @[Counters.scala 33:37]
      T_2918 <= T_2930 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 95:27]
    ognt_counter.pending <= T_2932 @[Counters.scala 95:20]
    ognt_counter.up.idx <= T_2884 @[Counters.scala 96:19]
    ognt_counter.up.done <= T_2885 @[Counters.scala 97:20]
    ognt_counter.down.idx <= T_2915 @[Counters.scala 98:21]
    ognt_counter.down.done <= T_2916 @[Counters.scala 99:22]
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13]
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36]
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33]
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30]
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30]
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13]
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26]
    T_2949 is invalid @[Definitions.scala 354:26]
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Package.scala 7:47]
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Package.scala 7:47]
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Package.scala 7:47]
    node T_2954 = or(T_2951, T_2952) @[Package.scala 7:62]
    node T_2955 = or(T_2954, T_2953) @[Package.scala 7:62]
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55]
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30]
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61]
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53]
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39]
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51]
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26]
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14]
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24]
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57]
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28]
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 36:42]
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 33:29]
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 33:33]
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 36:59]
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 37:47]
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 37:64]
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8]
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58]
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3015 is invalid @[Definitions.scala 417:19]
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 418:25]
    T_3015.a_type <= T_2982 @[Definitions.scala 419:16]
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    T_3015.union <= T_2984 @[Definitions.scala 424:15]
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 386:49]
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 386:61]
    node T_3070 = or(UInt<2>("h00"), xact_op_size) @[Definitions.scala 387:61]
    node T_3071 = bits(T_3070, 1, 0) @[Definitions.scala 387:76]
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 388:36]
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 388:45]
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 389:46]
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 389:54]
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58]
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58]
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58]
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16]
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16]
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16]
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16]
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16]
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16]
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3140 is invalid @[Definitions.scala 417:19]
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 419:16]
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 422:19]
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 423:14]
    T_3140.union <= T_3111 @[Definitions.scala 424:15]
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10]
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27]
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16]
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36]
    when T_3197 : @[Trackers.scala 632:61]
      state <= UInt<4>("h07") @[Trackers.scala 632:69]
      skip @[Trackers.scala 632:61]
    when ognt_counter.pending : @[Trackers.scala 634:33]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56]
      skip @[Trackers.scala 634:33]
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    wire T_3207 : UInt<3>[2] @[Definitions.scala 852:26]
    T_3207 is invalid @[Definitions.scala 852:26]
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Package.scala 7:47]
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Package.scala 7:47]
    node T_3211 = or(T_3209, T_3210) @[Package.scala 7:62]
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42]
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20]
    when T_3214 : @[Trackers.scala 172:42]
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15]
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15]
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15]
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15]
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15]
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15]
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15]
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15]
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58]
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58]
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58]
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58]
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58]
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58]
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58]
      node T_3262 = not(T_3261) @[Trackers.scala 195:27]
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34]
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46]
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23]
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24]
      skip @[Trackers.scala 172:42]
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37]
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61]
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59]
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89]
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 92:62]
    wire T_3291 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3291 is invalid @[Definitions.scala 853:34]
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Package.scala 7:47]
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33]
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27]
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 36:47]
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17]
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22]
      T_3299 <= T_3304 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20]
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 38:19]
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 21:42]
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 93:64]
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17]
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22]
      T_3314 <= T_3319 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20]
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 38:19]
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 32:14]
    when T_3327 : @[Counters.scala 32:24]
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_3330 = tail(T_3329, 1) @[Counters.scala 32:37]
      T_3324 <= T_3330 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 33:16]
    when T_3333 : @[Counters.scala 33:24]
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_3336 = tail(T_3335, 1) @[Counters.scala 33:37]
      T_3324 <= T_3336 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 95:27]
    ifin_counter.pending <= T_3338 @[Counters.scala 95:20]
    ifin_counter.up.idx <= T_3306 @[Counters.scala 96:19]
    ifin_counter.up.done <= T_3307 @[Counters.scala 97:20]
    ifin_counter.down.idx <= T_3321 @[Counters.scala 98:21]
    ifin_counter.down.done <= T_3322 @[Counters.scala 99:22]
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10]
    when T_3343 : @[Trackers.scala 525:31]
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_3349 = or(T_3346, T_3347) @[Package.scala 7:62]
      node T_3350 = or(T_3349, T_3348) @[Package.scala 7:62]
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37]
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15]
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31]
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46]
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
      wire T_3370 : UInt<3>[2] @[Definitions.scala 852:26]
      T_3370 is invalid @[Definitions.scala 852:26]
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Package.scala 7:47]
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Package.scala 7:47]
      node T_3374 = or(T_3372, T_3373) @[Package.scala 7:62]
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42]
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37]
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15]
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31]
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77]
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75]
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25]
      skip @[Trackers.scala 525:31]
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33]
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33]
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44]
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44]
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49]
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25]
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16]
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16]
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16]
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16]
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16]
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16]
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8]
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_3455 is invalid @[Definitions.scala 882:19]
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 883:19]
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 884:25]
    T_3455.g_type <= T_3426 @[Definitions.scala 885:16]
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 886:24]
    T_3455.manager_xact_id <= UInt<3>("h05") @[Definitions.scala 887:25]
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 888:19]
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 889:14]
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    wire T_3491 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3491 is invalid @[Definitions.scala 853:34]
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Package.scala 7:47]
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33]
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27]
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 36:47]
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17]
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22]
      T_3499 <= T_3504 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20]
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 37:18]
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 38:19]
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19]
    ignt_data_done <= T_3507 @[Trackers.scala 552:20]
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25]
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10]
    when T_3510 : @[Trackers.scala 554:37]
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27]
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27]
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37]
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19]
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30]
      when T_3512 : @[Trackers.scala 558:47]
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33]
        wire T_3522 : UInt<3>[2] @[Definitions.scala 852:26]
        T_3522 is invalid @[Definitions.scala 852:26]
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Package.scala 7:47]
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Package.scala 7:47]
        node T_3526 = or(T_3524, T_3525) @[Package.scala 7:62]
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42]
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32]
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32]
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16]
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14]
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51]
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30]
        skip @[Trackers.scala 558:47]
      skip @[Trackers.scala 554:37]
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36]
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27]
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_3537 : @[Broadcast.scala 196:28]
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29]
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46]
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44]
      pending_iprbs <= T_3541 @[Trackers.scala 383:21]
      skip @[Broadcast.scala 196:28]
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61]
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53]
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47]
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66]
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54]
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26]
    T_3562 is invalid @[Definitions.scala 354:26]
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Package.scala 7:47]
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Package.scala 7:47]
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Package.scala 7:47]
    node T_3567 = or(T_3564, T_3565) @[Package.scala 7:62]
    node T_3568 = or(T_3567, T_3566) @[Package.scala 7:62]
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55]
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20]
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41]
    when T_3571 : @[Trackers.scala 183:51]
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54]
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54]
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54]
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56]
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8]
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51]
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51]
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51]
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51]
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51]
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51]
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51]
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51]
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15]
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15]
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15]
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15]
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15]
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15]
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15]
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15]
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58]
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58]
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58]
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58]
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58]
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58]
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58]
      node T_3655 = not(T_3654) @[Trackers.scala 186:29]
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35]
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64]
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56]
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25]
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54]
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54]
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54]
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56]
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8]
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45]
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26]
      skip @[Trackers.scala 183:51]
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60]
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60]
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60]
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60]
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60]
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60]
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25]
    all_pending_done <= T_3706 @[Trackers.scala 50:22]
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16]
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27]
    when T_3708 : @[Trackers.scala 51:48]
      state <= UInt<4>("h00") @[Trackers.scala 52:13]
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35]
      skip @[Trackers.scala 51:48]
    
  module BufferedBroadcastAcquireTracker_5 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30]
    all_pending_done is invalid @[Trackers.scala 86:30]
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28]
    xact_addr_beat is invalid @[Trackers.scala 215:28]
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23]
    xact_iacq is invalid @[Trackers.scala 216:23]
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30]
    vol_ignt_counter is invalid @[Trackers.scala 241:30]
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26]
    scoreboard_6 is invalid @[Trackers.scala 454:26]
    wire ignt_data_idx : UInt @[Trackers.scala 455:27]
    ignt_data_idx is invalid @[Trackers.scala 455:27]
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28]
    ignt_data_done is invalid @[Trackers.scala 456:28]
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26]
    ifin_counter is invalid @[Trackers.scala 457:26]
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26]
    ognt_counter is invalid @[Trackers.scala 577:26]
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40]
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30]
    vol_ognt_counter is invalid @[Trackers.scala 306:30]
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61]
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40]
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65]
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20]
    T_195 is invalid @[Metadata.scala 309:20]
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18]
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_241 is invalid @[Metadata.scala 158:20]
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17]
    coh is invalid @[Metadata.scala 337:17]
    coh.inner <- T_195 @[Metadata.scala 338:13]
    coh.outer <- T_241 @[Metadata.scala 339:13]
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18]
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29]
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56]
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1623 is invalid @[Definitions.scala 355:35]
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Package.scala 7:47]
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89]
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80]
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1636 is invalid @[Definitions.scala 355:35]
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Package.scala 7:47]
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89]
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57]
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37]
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34]
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10]
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9]
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9]
    when T_1652 : @[Broadcast.scala 98:9]
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9]
      skip @[Broadcast.scala 98:9]
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18]
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29]
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28]
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28]
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73]
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58]
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45]
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10]
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9]
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9]
    when T_1666 : @[Broadcast.scala 102:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9]
      skip @[Broadcast.scala 102:9]
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18]
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29]
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28]
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56]
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45]
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10]
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9]
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9]
    when T_1677 : @[Broadcast.scala 105:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9]
      skip @[Broadcast.scala 105:9]
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54]
    T_1691 is invalid @[Trackers.scala 150:54]
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54]
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55]
    T_1709 is invalid @[Trackers.scala 179:55]
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55]
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56]
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56]
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56]
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56]
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56]
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56]
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56]
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56]
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56]
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23]
    data_valid is invalid @[Trackers.scala 180:23]
    data_valid[0] <= T_1716 @[Trackers.scala 180:23]
    data_valid[1] <= T_1719 @[Trackers.scala 180:23]
    data_valid[2] <= T_1722 @[Trackers.scala 180:23]
    data_valid[3] <= T_1725 @[Trackers.scala 180:23]
    data_valid[4] <= T_1728 @[Trackers.scala 180:23]
    data_valid[5] <= T_1731 @[Trackers.scala 180:23]
    data_valid[6] <= T_1734 @[Trackers.scala 180:23]
    data_valid[7] <= T_1737 @[Trackers.scala 180:23]
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37]
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49]
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27]
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37]
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49]
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27]
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37]
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49]
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27]
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32]
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43]
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23]
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32]
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43]
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23]
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32]
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43]
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23]
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25]
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28]
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19]
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61]
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53]
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67]
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44]
    inst ignt_q of Queue_10 @[Trackers.scala 450:27]
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29]
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48]
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64]
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1812 is invalid @[Definitions.scala 355:35]
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Package.scala 7:47]
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89]
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57]
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54]
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47]
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25]
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24]
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21]
    xact_iacq <- T_1823 @[Trackers.scala 480:15]
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20]
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37]
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18]
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17]
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28]
    when T_1852 : @[Trackers.scala 485:53]
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1862 is invalid @[Definitions.scala 354:26]
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Package.scala 7:47]
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Package.scala 7:47]
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Package.scala 7:47]
      node T_1867 = or(T_1864, T_1865) @[Package.scala 7:62]
      node T_1868 = or(T_1867, T_1866) @[Package.scala 7:62]
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55]
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38]
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15]
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1875 = not(T_1874) @[Trackers.scala 92:5]
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1878 = not(T_1877) @[Trackers.scala 92:34]
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32]
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45]
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35]
      T_1890 is invalid @[Definitions.scala 355:35]
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Package.scala 7:47]
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89]
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28]
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36]
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45]
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8]
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60]
      pending_put_data <= T_1907 @[Trackers.scala 486:24]
      skip @[Trackers.scala 485:53]
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_1910 : @[Trackers.scala 492:30]
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23]
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39]
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45]
      xact_allocate <= T_1912 @[Trackers.scala 494:21]
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65]
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28]
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54]
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54]
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36]
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17]
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36]
      xact_op_code <= T_1924 @[Trackers.scala 496:20]
      node T_1925 = bits(io.inner.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22]
      node T_1926 = bits(io.inner.acquire.bits.union, 7, 6) @[Definitions.scala 176:38]
      xact_op_size <= T_1926 @[Trackers.scala 498:20]
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54]
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1939 is invalid @[Definitions.scala 354:26]
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Package.scala 7:47]
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Package.scala 7:47]
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Package.scala 7:47]
      node T_1944 = or(T_1941, T_1942) @[Package.scala 7:62]
      node T_1945 = or(T_1944, T_1943) @[Package.scala 7:62]
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55]
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38]
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15]
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1952 = not(T_1951) @[Trackers.scala 92:5]
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1955 = not(T_1954) @[Trackers.scala 92:34]
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32]
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30]
      pending_put_data <= T_1958 @[Trackers.scala 500:24]
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25]
      state <= UInt<4>("h05") @[Trackers.scala 505:13]
      skip @[Trackers.scala 492:30]
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37]
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35]
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46]
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61]
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53]
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1976 is invalid @[Definitions.scala 355:35]
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Package.scala 7:47]
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89]
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49]
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64]
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26]
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46]
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46]
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16]
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16]
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16]
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16]
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16]
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16]
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16]
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8]
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 694:19]
    T_2030 is invalid @[Definitions.scala 694:19]
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 695:19]
    T_2030.p_type <= T_2005 @[Definitions.scala 696:16]
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 697:20]
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9]
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8]
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30]
    T_2065 is invalid @[Trackers.scala 393:30]
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2074 = not(T_2073) @[Trackers.scala 98:5]
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15]
    node T_2077 = not(T_2076) @[Trackers.scala 98:40]
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38]
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38]
    pending_iprbs <= T_2079 @[Trackers.scala 395:21]
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37]
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72]
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55]
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28]
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27]
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17]
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22]
      T_2091 <= T_2096 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20]
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 38:19]
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44]
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59]
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56]
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 93:64]
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2110 = or(T_2107, T_2108) @[Package.scala 7:62]
    node T_2111 = or(T_2110, T_2109) @[Package.scala 7:62]
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64]
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 36:47]
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17]
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22]
      T_2115 <= T_2120 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20]
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 38:19]
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 32:14]
    when T_2128 : @[Counters.scala 32:24]
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2131 = tail(T_2130, 1) @[Counters.scala 32:37]
      T_2125 <= T_2131 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 33:16]
    when T_2134 : @[Counters.scala 33:24]
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2137 = tail(T_2136, 1) @[Counters.scala 33:37]
      T_2125 <= T_2137 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 95:27]
    T_2065.pending <= T_2139 @[Counters.scala 95:20]
    T_2065.up.idx <= T_2098 @[Counters.scala 96:19]
    T_2065.up.done <= T_2099 @[Counters.scala 97:20]
    T_2065.down.idx <= T_2122 @[Counters.scala 98:21]
    T_2065.down.done <= T_2123 @[Counters.scala 99:22]
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18]
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55]
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59]
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39]
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36]
    when T_2146 : @[Trackers.scala 406:85]
      state <= T_2056 @[Trackers.scala 407:15]
      skip @[Trackers.scala 406:85]
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19]
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12]
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76]
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95]
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 92:62]
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2161 = or(T_2158, T_2159) @[Package.scala 7:62]
    node T_2162 = or(T_2161, T_2160) @[Package.scala 7:62]
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64]
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 36:47]
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17]
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22]
      T_2166 <= T_2171 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20]
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 38:19]
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40]
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59]
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52]
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 93:64]
    wire T_2189 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2189 is invalid @[Definitions.scala 853:34]
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Package.scala 7:47]
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33]
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27]
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 36:47]
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17]
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22]
      T_2197 <= T_2202 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20]
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 38:19]
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 32:14]
    when T_2210 : @[Counters.scala 32:24]
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2213 = tail(T_2212, 1) @[Counters.scala 32:37]
      T_2207 <= T_2213 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 33:16]
    when T_2216 : @[Counters.scala 33:24]
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2219 = tail(T_2218, 1) @[Counters.scala 33:37]
      T_2207 <= T_2219 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 95:20]
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 96:19]
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 97:20]
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 98:21]
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 99:22]
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75]
    when T_2224 : @[Trackers.scala 259:30]
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23]
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28]
      pending_irel_data <= T_2226 @[Trackers.scala 264:25]
      state <= UInt<4>("h07") @[Trackers.scala 265:13]
      skip @[Trackers.scala 259:30]
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2232 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2233 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2234 = or(T_2232, T_2233) @[Package.scala 7:62]
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50]
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63]
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44]
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49]
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49]
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60]
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40]
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47]
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2261 = or(T_2258, T_2259) @[Package.scala 7:62]
    node T_2262 = or(T_2261, T_2260) @[Package.scala 7:62]
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39]
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19]
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52]
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61]
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51]
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47]
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66]
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41]
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61]
    when T_2277 : @[Trackers.scala 269:22]
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2282 = or(T_2279, T_2280) @[Package.scala 7:62]
      node T_2283 = or(T_2282, T_2281) @[Package.scala 7:62]
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64]
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57]
      when T_2289 : @[Trackers.scala 270:32]
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40]
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30]
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27]
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38]
          skip @[Trackers.scala 271:40]
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2294 = or(T_2291, T_2292) @[Package.scala 7:62]
        node T_2295 = or(T_2294, T_2293) @[Package.scala 7:62]
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64]
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2301 = or(T_2298, T_2299) @[Package.scala 7:62]
        node T_2302 = or(T_2301, T_2300) @[Package.scala 7:62]
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38]
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15]
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2308 = not(T_2307) @[Trackers.scala 92:5]
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2311 = not(T_2310) @[Trackers.scala 92:34]
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32]
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33]
        pending_irel_data <= T_2314 @[Trackers.scala 278:27]
        skip @[Trackers.scala 270:32]
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32]
      when T_2316 : @[Trackers.scala 281:20]
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2321 = or(T_2318, T_2319) @[Package.scala 7:62]
        node T_2322 = or(T_2321, T_2320) @[Package.scala 7:62]
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38]
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15]
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2328 = not(T_2327) @[Trackers.scala 92:5]
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2331 = not(T_2330) @[Trackers.scala 92:34]
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32]
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49]
        pending_irel_data <= T_2333 @[Trackers.scala 282:27]
        skip @[Trackers.scala 281:20]
      skip @[Trackers.scala 269:22]
    node T_2334 = eq(state, UInt<4>("h03")) @[Package.scala 7:47]
    node T_2335 = eq(state, UInt<4>("h04")) @[Package.scala 7:47]
    node T_2336 = eq(state, UInt<4>("h05")) @[Package.scala 7:47]
    node T_2337 = eq(state, UInt<4>("h07")) @[Package.scala 7:47]
    node T_2338 = or(T_2334, T_2335) @[Package.scala 7:62]
    node T_2339 = or(T_2338, T_2336) @[Package.scala 7:62]
    node T_2340 = or(T_2339, T_2337) @[Package.scala 7:62]
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87]
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51]
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55]
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31]
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56]
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26]
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 773:19]
    T_2379 is invalid @[Definitions.scala 773:19]
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 774:19]
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 775:19]
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 776:16]
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 777:24]
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 778:20]
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 779:19]
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 780:14]
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_2440 is invalid @[Definitions.scala 882:19]
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 883:19]
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 884:25]
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 885:16]
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 886:24]
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 887:25]
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 888:19]
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 889:14]
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25]
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38]
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2471 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2472 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2473 = or(T_2471, T_2472) @[Package.scala 7:62]
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50]
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63]
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44]
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49]
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49]
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60]
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40]
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47]
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2500 = or(T_2497, T_2498) @[Package.scala 7:62]
    node T_2501 = or(T_2500, T_2499) @[Package.scala 7:62]
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39]
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19]
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52]
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61]
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51]
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44]
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26]
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2518 = or(T_2515, T_2516) @[Package.scala 7:62]
    node T_2519 = or(T_2518, T_2517) @[Package.scala 7:62]
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20]
    when T_2520 : @[Trackers.scala 166:42]
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15]
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15]
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15]
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15]
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15]
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15]
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15]
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15]
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58]
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58]
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58]
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58]
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58]
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58]
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58]
      node T_2568 = not(T_2567) @[Trackers.scala 195:27]
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34]
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46]
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23]
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24]
      skip @[Trackers.scala 166:42]
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 36:42]
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 33:33]
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 36:59]
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23]
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_2604 is invalid @[Metadata.scala 158:20]
    T_2604.state <= T_2581 @[Metadata.scala 159:16]
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17]
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28]
    when T_2631 : @[Trackers.scala 331:53]
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2637 = or(T_2634, T_2635) @[Package.scala 7:62]
      node T_2638 = or(T_2637, T_2636) @[Package.scala 7:62]
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37]
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15]
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31]
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47]
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58]
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2654 = or(T_2651, T_2652) @[Package.scala 7:62]
      node T_2655 = or(T_2654, T_2653) @[Package.scala 7:62]
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38]
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15]
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2661 = not(T_2660) @[Trackers.scala 92:5]
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2664 = not(T_2663) @[Trackers.scala 92:34]
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32]
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34]
      pending_orel_data <= T_2666 @[Trackers.scala 332:25]
      skip @[Trackers.scala 331:53]
    when UInt<1>("h00") : @[Trackers.scala 337:33]
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53]
      skip @[Trackers.scala 337:33]
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    when T_2668 : @[Trackers.scala 338:36]
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2673 = or(T_2670, T_2671) @[Package.scala 7:62]
      node T_2674 = or(T_2673, T_2672) @[Package.scala 7:62]
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64]
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57]
      when T_2680 : @[Trackers.scala 339:44]
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59]
        skip @[Trackers.scala 339:44]
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2686 = or(T_2683, T_2684) @[Package.scala 7:62]
      node T_2687 = or(T_2686, T_2685) @[Package.scala 7:62]
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64]
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36]
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56]
      when T_2693 : @[Trackers.scala 340:44]
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59]
        skip @[Trackers.scala 340:44]
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25]
      skip @[Trackers.scala 338:36]
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51]
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 92:62]
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2707 = or(T_2704, T_2705) @[Package.scala 7:62]
    node T_2708 = or(T_2707, T_2706) @[Package.scala 7:62]
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64]
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 36:47]
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17]
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22]
      T_2712 <= T_2717 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20]
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 38:19]
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59]
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 93:64]
    wire T_2733 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2733 is invalid @[Definitions.scala 853:34]
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Package.scala 7:47]
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33]
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27]
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 36:47]
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17]
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22]
      T_2741 <= T_2746 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20]
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 38:19]
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 32:14]
    when T_2754 : @[Counters.scala 32:24]
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2757 = tail(T_2756, 1) @[Counters.scala 32:37]
      T_2751 <= T_2757 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 33:16]
    when T_2760 : @[Counters.scala 33:24]
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2763 = tail(T_2762, 1) @[Counters.scala 33:37]
      T_2751 <= T_2763 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 95:20]
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 96:19]
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 97:20]
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 98:21]
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 99:22]
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31]
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14]
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2772 = or(T_2769, T_2770) @[Package.scala 7:62]
    node T_2773 = or(T_2772, T_2771) @[Package.scala 7:62]
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26]
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26]
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32]
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26]
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13]
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24]
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2783 = or(T_2780, T_2781) @[Package.scala 7:62]
    node T_2784 = or(T_2783, T_2782) @[Package.scala 7:62]
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49]
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29]
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49]
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43]
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28]
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16]
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16]
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_2828 is invalid @[Definitions.scala 754:19]
    T_2828.r_type <= T_2800 @[Definitions.scala 755:16]
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 757:20]
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 758:19]
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 759:14]
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27]
    when vol_ognt_counter.pending : @[Trackers.scala 365:37]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60]
      skip @[Trackers.scala 365:37]
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15]
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35]
    T_2871 is invalid @[Definitions.scala 355:35]
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Package.scala 7:47]
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89]
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 36:47]
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17]
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22]
      T_2877 <= T_2882 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20]
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 37:18]
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 38:19]
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59]
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33]
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 93:64]
    wire T_2900 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2900 is invalid @[Definitions.scala 853:34]
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Package.scala 7:47]
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33]
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27]
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 36:47]
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17]
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22]
      T_2908 <= T_2913 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20]
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 37:18]
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 38:19]
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 32:14]
    when T_2921 : @[Counters.scala 32:24]
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2924 = tail(T_2923, 1) @[Counters.scala 32:37]
      T_2918 <= T_2924 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 33:16]
    when T_2927 : @[Counters.scala 33:24]
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2930 = tail(T_2929, 1) @[Counters.scala 33:37]
      T_2918 <= T_2930 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 95:27]
    ognt_counter.pending <= T_2932 @[Counters.scala 95:20]
    ognt_counter.up.idx <= T_2884 @[Counters.scala 96:19]
    ognt_counter.up.done <= T_2885 @[Counters.scala 97:20]
    ognt_counter.down.idx <= T_2915 @[Counters.scala 98:21]
    ognt_counter.down.done <= T_2916 @[Counters.scala 99:22]
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13]
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36]
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33]
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30]
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30]
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13]
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26]
    T_2949 is invalid @[Definitions.scala 354:26]
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Package.scala 7:47]
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Package.scala 7:47]
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Package.scala 7:47]
    node T_2954 = or(T_2951, T_2952) @[Package.scala 7:62]
    node T_2955 = or(T_2954, T_2953) @[Package.scala 7:62]
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55]
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30]
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61]
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53]
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39]
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51]
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26]
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14]
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24]
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57]
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28]
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 36:42]
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 33:29]
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 33:33]
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 36:59]
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 37:47]
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 37:64]
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8]
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58]
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3015 is invalid @[Definitions.scala 417:19]
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 418:25]
    T_3015.a_type <= T_2982 @[Definitions.scala 419:16]
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    T_3015.union <= T_2984 @[Definitions.scala 424:15]
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 386:49]
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 386:61]
    node T_3070 = or(UInt<2>("h00"), xact_op_size) @[Definitions.scala 387:61]
    node T_3071 = bits(T_3070, 1, 0) @[Definitions.scala 387:76]
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 388:36]
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 388:45]
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 389:46]
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 389:54]
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58]
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58]
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58]
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16]
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16]
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16]
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16]
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16]
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16]
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3140 is invalid @[Definitions.scala 417:19]
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 419:16]
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 422:19]
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 423:14]
    T_3140.union <= T_3111 @[Definitions.scala 424:15]
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10]
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27]
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16]
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36]
    when T_3197 : @[Trackers.scala 632:61]
      state <= UInt<4>("h07") @[Trackers.scala 632:69]
      skip @[Trackers.scala 632:61]
    when ognt_counter.pending : @[Trackers.scala 634:33]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56]
      skip @[Trackers.scala 634:33]
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    wire T_3207 : UInt<3>[2] @[Definitions.scala 852:26]
    T_3207 is invalid @[Definitions.scala 852:26]
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Package.scala 7:47]
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Package.scala 7:47]
    node T_3211 = or(T_3209, T_3210) @[Package.scala 7:62]
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42]
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20]
    when T_3214 : @[Trackers.scala 172:42]
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15]
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15]
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15]
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15]
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15]
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15]
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15]
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15]
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58]
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58]
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58]
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58]
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58]
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58]
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58]
      node T_3262 = not(T_3261) @[Trackers.scala 195:27]
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34]
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46]
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23]
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24]
      skip @[Trackers.scala 172:42]
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37]
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61]
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59]
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89]
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 92:62]
    wire T_3291 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3291 is invalid @[Definitions.scala 853:34]
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Package.scala 7:47]
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33]
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27]
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 36:47]
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17]
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22]
      T_3299 <= T_3304 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20]
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 38:19]
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 21:42]
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 93:64]
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17]
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22]
      T_3314 <= T_3319 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20]
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 38:19]
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 32:14]
    when T_3327 : @[Counters.scala 32:24]
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_3330 = tail(T_3329, 1) @[Counters.scala 32:37]
      T_3324 <= T_3330 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 33:16]
    when T_3333 : @[Counters.scala 33:24]
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_3336 = tail(T_3335, 1) @[Counters.scala 33:37]
      T_3324 <= T_3336 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 95:27]
    ifin_counter.pending <= T_3338 @[Counters.scala 95:20]
    ifin_counter.up.idx <= T_3306 @[Counters.scala 96:19]
    ifin_counter.up.done <= T_3307 @[Counters.scala 97:20]
    ifin_counter.down.idx <= T_3321 @[Counters.scala 98:21]
    ifin_counter.down.done <= T_3322 @[Counters.scala 99:22]
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10]
    when T_3343 : @[Trackers.scala 525:31]
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_3349 = or(T_3346, T_3347) @[Package.scala 7:62]
      node T_3350 = or(T_3349, T_3348) @[Package.scala 7:62]
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37]
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15]
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31]
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46]
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
      wire T_3370 : UInt<3>[2] @[Definitions.scala 852:26]
      T_3370 is invalid @[Definitions.scala 852:26]
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Package.scala 7:47]
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Package.scala 7:47]
      node T_3374 = or(T_3372, T_3373) @[Package.scala 7:62]
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42]
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37]
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15]
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31]
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77]
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75]
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25]
      skip @[Trackers.scala 525:31]
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33]
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33]
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44]
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44]
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49]
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25]
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16]
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16]
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16]
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16]
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16]
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16]
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8]
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_3455 is invalid @[Definitions.scala 882:19]
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 883:19]
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 884:25]
    T_3455.g_type <= T_3426 @[Definitions.scala 885:16]
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 886:24]
    T_3455.manager_xact_id <= UInt<3>("h06") @[Definitions.scala 887:25]
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 888:19]
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 889:14]
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    wire T_3491 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3491 is invalid @[Definitions.scala 853:34]
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Package.scala 7:47]
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33]
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27]
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 36:47]
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17]
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22]
      T_3499 <= T_3504 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20]
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 37:18]
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 38:19]
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19]
    ignt_data_done <= T_3507 @[Trackers.scala 552:20]
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25]
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10]
    when T_3510 : @[Trackers.scala 554:37]
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27]
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27]
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37]
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19]
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30]
      when T_3512 : @[Trackers.scala 558:47]
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33]
        wire T_3522 : UInt<3>[2] @[Definitions.scala 852:26]
        T_3522 is invalid @[Definitions.scala 852:26]
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Package.scala 7:47]
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Package.scala 7:47]
        node T_3526 = or(T_3524, T_3525) @[Package.scala 7:62]
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42]
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32]
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32]
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16]
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14]
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51]
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30]
        skip @[Trackers.scala 558:47]
      skip @[Trackers.scala 554:37]
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36]
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27]
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_3537 : @[Broadcast.scala 196:28]
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29]
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46]
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44]
      pending_iprbs <= T_3541 @[Trackers.scala 383:21]
      skip @[Broadcast.scala 196:28]
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61]
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53]
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47]
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66]
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54]
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26]
    T_3562 is invalid @[Definitions.scala 354:26]
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Package.scala 7:47]
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Package.scala 7:47]
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Package.scala 7:47]
    node T_3567 = or(T_3564, T_3565) @[Package.scala 7:62]
    node T_3568 = or(T_3567, T_3566) @[Package.scala 7:62]
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55]
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20]
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41]
    when T_3571 : @[Trackers.scala 183:51]
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54]
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54]
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54]
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56]
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8]
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51]
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51]
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51]
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51]
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51]
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51]
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51]
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51]
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15]
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15]
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15]
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15]
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15]
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15]
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15]
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15]
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58]
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58]
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58]
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58]
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58]
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58]
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58]
      node T_3655 = not(T_3654) @[Trackers.scala 186:29]
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35]
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64]
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56]
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25]
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54]
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54]
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54]
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56]
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8]
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45]
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26]
      skip @[Trackers.scala 183:51]
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60]
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60]
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60]
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60]
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60]
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60]
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25]
    all_pending_done <= T_3706 @[Trackers.scala 50:22]
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16]
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27]
    when T_3708 : @[Trackers.scala 51:48]
      state <= UInt<4>("h00") @[Trackers.scala 52:13]
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35]
      skip @[Trackers.scala 51:48]
    
  module BufferedBroadcastAcquireTracker_6 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30]
    all_pending_done is invalid @[Trackers.scala 86:30]
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28]
    xact_addr_beat is invalid @[Trackers.scala 215:28]
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23]
    xact_iacq is invalid @[Trackers.scala 216:23]
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30]
    vol_ignt_counter is invalid @[Trackers.scala 241:30]
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26]
    scoreboard_6 is invalid @[Trackers.scala 454:26]
    wire ignt_data_idx : UInt @[Trackers.scala 455:27]
    ignt_data_idx is invalid @[Trackers.scala 455:27]
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28]
    ignt_data_done is invalid @[Trackers.scala 456:28]
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26]
    ifin_counter is invalid @[Trackers.scala 457:26]
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26]
    ognt_counter is invalid @[Trackers.scala 577:26]
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40]
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30]
    vol_ognt_counter is invalid @[Trackers.scala 306:30]
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61]
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40]
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65]
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20]
    T_195 is invalid @[Metadata.scala 309:20]
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18]
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_241 is invalid @[Metadata.scala 158:20]
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16]
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17]
    coh is invalid @[Metadata.scala 337:17]
    coh.inner <- T_195 @[Metadata.scala 338:13]
    coh.outer <- T_241 @[Metadata.scala 339:13]
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50]
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45]
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18]
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29]
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56]
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1623 is invalid @[Definitions.scala 355:35]
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Package.scala 7:47]
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89]
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80]
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1636 is invalid @[Definitions.scala 355:35]
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Package.scala 7:47]
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89]
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57]
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37]
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34]
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10]
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9]
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9]
    when T_1652 : @[Broadcast.scala 98:9]
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9]
      skip @[Broadcast.scala 98:9]
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18]
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29]
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28]
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28]
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73]
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58]
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45]
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10]
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9]
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9]
    when T_1666 : @[Broadcast.scala 102:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9]
      skip @[Broadcast.scala 102:9]
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18]
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29]
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28]
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56]
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45]
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10]
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9]
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9]
    when T_1677 : @[Broadcast.scala 105:9]
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9]
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9]
      skip @[Broadcast.scala 105:9]
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54]
    T_1691 is invalid @[Trackers.scala 150:54]
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54]
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54]
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55]
    T_1709 is invalid @[Trackers.scala 179:55]
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55]
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55]
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56]
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56]
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56]
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56]
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56]
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56]
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56]
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56]
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56]
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56]
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23]
    data_valid is invalid @[Trackers.scala 180:23]
    data_valid[0] <= T_1716 @[Trackers.scala 180:23]
    data_valid[1] <= T_1719 @[Trackers.scala 180:23]
    data_valid[2] <= T_1722 @[Trackers.scala 180:23]
    data_valid[3] <= T_1725 @[Trackers.scala 180:23]
    data_valid[4] <= T_1728 @[Trackers.scala 180:23]
    data_valid[5] <= T_1731 @[Trackers.scala 180:23]
    data_valid[6] <= T_1734 @[Trackers.scala 180:23]
    data_valid[7] <= T_1737 @[Trackers.scala 180:23]
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37]
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49]
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27]
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37]
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49]
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27]
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37]
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49]
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27]
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32]
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43]
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23]
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32]
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43]
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23]
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32]
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43]
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23]
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25]
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28]
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19]
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61]
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53]
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67]
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44]
    inst ignt_q of Queue_10 @[Trackers.scala 450:27]
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29]
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48]
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64]
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1812 is invalid @[Definitions.scala 355:35]
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Package.scala 7:47]
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89]
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57]
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54]
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47]
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25]
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24]
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21]
    xact_iacq <- T_1823 @[Trackers.scala 480:15]
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20]
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37]
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18]
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17]
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28]
    when T_1852 : @[Trackers.scala 485:53]
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1862 is invalid @[Definitions.scala 354:26]
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Package.scala 7:47]
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Package.scala 7:47]
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Package.scala 7:47]
      node T_1867 = or(T_1864, T_1865) @[Package.scala 7:62]
      node T_1868 = or(T_1867, T_1866) @[Package.scala 7:62]
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55]
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38]
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15]
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1875 = not(T_1874) @[Trackers.scala 92:5]
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1878 = not(T_1877) @[Trackers.scala 92:34]
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32]
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45]
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35]
      T_1890 is invalid @[Definitions.scala 355:35]
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Package.scala 7:47]
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89]
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28]
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36]
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45]
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12]
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58]
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8]
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60]
      pending_put_data <= T_1907 @[Trackers.scala 486:24]
      skip @[Trackers.scala 485:53]
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_1910 : @[Trackers.scala 492:30]
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23]
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39]
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45]
      xact_allocate <= T_1912 @[Trackers.scala 494:21]
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65]
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28]
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54]
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54]
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36]
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17]
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36]
      xact_op_code <= T_1924 @[Trackers.scala 496:20]
      node T_1925 = bits(io.inner.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22]
      node T_1926 = bits(io.inner.acquire.bits.union, 7, 6) @[Definitions.scala 176:38]
      xact_op_size <= T_1926 @[Trackers.scala 498:20]
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54]
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26]
      T_1939 is invalid @[Definitions.scala 354:26]
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Package.scala 7:47]
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Package.scala 7:47]
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Package.scala 7:47]
      node T_1944 = or(T_1941, T_1942) @[Package.scala 7:62]
      node T_1945 = or(T_1944, T_1943) @[Package.scala 7:62]
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55]
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38]
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15]
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_1952 = not(T_1951) @[Trackers.scala 92:5]
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15]
      node T_1955 = not(T_1954) @[Trackers.scala 92:34]
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32]
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30]
      pending_put_data <= T_1958 @[Trackers.scala 500:24]
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25]
      state <= UInt<4>("h05") @[Trackers.scala 505:13]
      skip @[Trackers.scala 492:30]
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37]
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35]
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46]
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61]
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53]
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1976 is invalid @[Definitions.scala 355:35]
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Package.scala 7:47]
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89]
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49]
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64]
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26]
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46]
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46]
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16]
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16]
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16]
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16]
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16]
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16]
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16]
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8]
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 694:19]
    T_2030 is invalid @[Definitions.scala 694:19]
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 695:19]
    T_2030.p_type <= T_2005 @[Definitions.scala 696:16]
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 697:20]
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9]
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8]
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30]
    T_2065 is invalid @[Trackers.scala 393:30]
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2074 = not(T_2073) @[Trackers.scala 98:5]
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15]
    node T_2077 = not(T_2076) @[Trackers.scala 98:40]
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38]
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38]
    pending_iprbs <= T_2079 @[Trackers.scala 395:21]
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37]
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72]
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55]
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28]
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27]
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 21:42]
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17]
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22]
      T_2091 <= T_2096 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20]
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 38:19]
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44]
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59]
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56]
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 93:64]
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2110 = or(T_2107, T_2108) @[Package.scala 7:62]
    node T_2111 = or(T_2110, T_2109) @[Package.scala 7:62]
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64]
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 36:47]
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17]
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22]
      T_2115 <= T_2120 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20]
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 38:19]
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 32:14]
    when T_2128 : @[Counters.scala 32:24]
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2131 = tail(T_2130, 1) @[Counters.scala 32:37]
      T_2125 <= T_2131 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 33:16]
    when T_2134 : @[Counters.scala 33:24]
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2137 = tail(T_2136, 1) @[Counters.scala 33:37]
      T_2125 <= T_2137 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 95:27]
    T_2065.pending <= T_2139 @[Counters.scala 95:20]
    T_2065.up.idx <= T_2098 @[Counters.scala 96:19]
    T_2065.up.done <= T_2099 @[Counters.scala 97:20]
    T_2065.down.idx <= T_2122 @[Counters.scala 98:21]
    T_2065.down.done <= T_2123 @[Counters.scala 99:22]
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18]
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55]
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59]
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39]
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36]
    when T_2146 : @[Trackers.scala 406:85]
      state <= T_2056 @[Trackers.scala 407:15]
      skip @[Trackers.scala 406:85]
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19]
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12]
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76]
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95]
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 92:62]
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2161 = or(T_2158, T_2159) @[Package.scala 7:62]
    node T_2162 = or(T_2161, T_2160) @[Package.scala 7:62]
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64]
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 36:47]
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17]
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22]
      T_2166 <= T_2171 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20]
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 38:19]
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40]
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59]
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52]
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 93:64]
    wire T_2189 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2189 is invalid @[Definitions.scala 853:34]
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Package.scala 7:47]
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33]
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27]
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 36:47]
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17]
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22]
      T_2197 <= T_2202 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20]
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 38:19]
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 32:14]
    when T_2210 : @[Counters.scala 32:24]
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2213 = tail(T_2212, 1) @[Counters.scala 32:37]
      T_2207 <= T_2213 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 33:16]
    when T_2216 : @[Counters.scala 33:24]
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2219 = tail(T_2218, 1) @[Counters.scala 33:37]
      T_2207 <= T_2219 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 95:20]
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 96:19]
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 97:20]
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 98:21]
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 99:22]
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75]
    when T_2224 : @[Trackers.scala 259:30]
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23]
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28]
      pending_irel_data <= T_2226 @[Trackers.scala 264:25]
      state <= UInt<4>("h07") @[Trackers.scala 265:13]
      skip @[Trackers.scala 259:30]
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40]
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51]
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75]
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2232 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2233 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2234 = or(T_2232, T_2233) @[Package.scala 7:62]
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50]
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63]
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44]
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49]
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49]
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60]
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40]
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47]
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2261 = or(T_2258, T_2259) @[Package.scala 7:62]
    node T_2262 = or(T_2261, T_2260) @[Package.scala 7:62]
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39]
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19]
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52]
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61]
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51]
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47]
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66]
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41]
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61]
    when T_2277 : @[Trackers.scala 269:22]
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2282 = or(T_2279, T_2280) @[Package.scala 7:62]
      node T_2283 = or(T_2282, T_2281) @[Package.scala 7:62]
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64]
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57]
      when T_2289 : @[Trackers.scala 270:32]
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40]
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30]
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27]
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38]
          skip @[Trackers.scala 271:40]
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2294 = or(T_2291, T_2292) @[Package.scala 7:62]
        node T_2295 = or(T_2294, T_2293) @[Package.scala 7:62]
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64]
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2301 = or(T_2298, T_2299) @[Package.scala 7:62]
        node T_2302 = or(T_2301, T_2300) @[Package.scala 7:62]
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38]
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15]
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2308 = not(T_2307) @[Trackers.scala 92:5]
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2311 = not(T_2310) @[Trackers.scala 92:34]
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32]
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33]
        pending_irel_data <= T_2314 @[Trackers.scala 278:27]
        skip @[Trackers.scala 270:32]
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32]
      when T_2316 : @[Trackers.scala 281:20]
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
        node T_2321 = or(T_2318, T_2319) @[Package.scala 7:62]
        node T_2322 = or(T_2321, T_2320) @[Package.scala 7:62]
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38]
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15]
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
        node T_2328 = not(T_2327) @[Trackers.scala 92:5]
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
        node T_2331 = not(T_2330) @[Trackers.scala 92:34]
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32]
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49]
        pending_irel_data <= T_2333 @[Trackers.scala 282:27]
        skip @[Trackers.scala 281:20]
      skip @[Trackers.scala 269:22]
    node T_2334 = eq(state, UInt<4>("h03")) @[Package.scala 7:47]
    node T_2335 = eq(state, UInt<4>("h04")) @[Package.scala 7:47]
    node T_2336 = eq(state, UInt<4>("h05")) @[Package.scala 7:47]
    node T_2337 = eq(state, UInt<4>("h07")) @[Package.scala 7:47]
    node T_2338 = or(T_2334, T_2335) @[Package.scala 7:62]
    node T_2339 = or(T_2338, T_2336) @[Package.scala 7:62]
    node T_2340 = or(T_2339, T_2337) @[Package.scala 7:62]
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87]
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51]
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55]
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31]
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56]
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26]
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 773:19]
    T_2379 is invalid @[Definitions.scala 773:19]
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 774:19]
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 775:19]
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 776:16]
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 777:24]
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 778:20]
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 779:19]
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 780:14]
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_2440 is invalid @[Definitions.scala 882:19]
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 883:19]
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 884:25]
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 885:16]
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 886:24]
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 887:25]
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 888:19]
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 889:14]
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25]
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38]
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61]
    node T_2471 = eq(state, UInt<4>("h00")) @[Package.scala 7:47]
    node T_2472 = eq(state, UInt<4>("h08")) @[Package.scala 7:47]
    node T_2473 = or(T_2471, T_2472) @[Package.scala 7:62]
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26]
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50]
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26]
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63]
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26]
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44]
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26]
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49]
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26]
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49]
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60]
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60]
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40]
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64]
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47]
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2500 = or(T_2497, T_2498) @[Package.scala 7:62]
    node T_2501 = or(T_2500, T_2499) @[Package.scala 7:62]
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39]
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19]
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26]
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52]
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47]
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26]
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61]
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32]
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51]
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44]
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26]
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2518 = or(T_2515, T_2516) @[Package.scala 7:62]
    node T_2519 = or(T_2518, T_2517) @[Package.scala 7:62]
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20]
    when T_2520 : @[Trackers.scala 166:42]
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15]
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15]
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15]
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15]
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15]
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15]
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15]
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15]
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58]
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58]
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58]
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58]
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58]
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58]
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58]
      node T_2568 = not(T_2567) @[Trackers.scala 195:27]
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34]
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46]
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23]
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24]
      skip @[Trackers.scala 166:42]
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 36:42]
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 33:33]
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 36:59]
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23]
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20]
    T_2604 is invalid @[Metadata.scala 158:20]
    T_2604.state <= T_2581 @[Metadata.scala 159:16]
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17]
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28]
    when T_2631 : @[Trackers.scala 331:53]
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2637 = or(T_2634, T_2635) @[Package.scala 7:62]
      node T_2638 = or(T_2637, T_2636) @[Package.scala 7:62]
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37]
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15]
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31]
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47]
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58]
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2654 = or(T_2651, T_2652) @[Package.scala 7:62]
      node T_2655 = or(T_2654, T_2653) @[Package.scala 7:62]
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38]
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15]
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_2661 = not(T_2660) @[Trackers.scala 92:5]
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_2664 = not(T_2663) @[Trackers.scala 92:34]
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32]
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34]
      pending_orel_data <= T_2666 @[Trackers.scala 332:25]
      skip @[Trackers.scala 331:53]
    when UInt<1>("h00") : @[Trackers.scala 337:33]
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53]
      skip @[Trackers.scala 337:33]
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    when T_2668 : @[Trackers.scala 338:36]
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2673 = or(T_2670, T_2671) @[Package.scala 7:62]
      node T_2674 = or(T_2673, T_2672) @[Package.scala 7:62]
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64]
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37]
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57]
      when T_2680 : @[Trackers.scala 339:44]
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59]
        skip @[Trackers.scala 339:44]
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_2686 = or(T_2683, T_2684) @[Package.scala 7:62]
      node T_2687 = or(T_2686, T_2685) @[Package.scala 7:62]
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64]
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36]
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56]
      when T_2693 : @[Trackers.scala 340:44]
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59]
        skip @[Trackers.scala 340:44]
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25]
      skip @[Trackers.scala 338:36]
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 21:42]
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37]
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51]
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 92:62]
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2707 = or(T_2704, T_2705) @[Package.scala 7:62]
    node T_2708 = or(T_2707, T_2706) @[Package.scala 7:62]
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64]
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 36:47]
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17]
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22]
      T_2712 <= T_2717 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20]
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 38:19]
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59]
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 93:64]
    wire T_2733 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2733 is invalid @[Definitions.scala 853:34]
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Package.scala 7:47]
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33]
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27]
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 36:47]
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17]
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22]
      T_2741 <= T_2746 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20]
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 38:19]
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 32:14]
    when T_2754 : @[Counters.scala 32:24]
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2757 = tail(T_2756, 1) @[Counters.scala 32:37]
      T_2751 <= T_2757 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 33:16]
    when T_2760 : @[Counters.scala 33:24]
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2763 = tail(T_2762, 1) @[Counters.scala 33:37]
      T_2751 <= T_2763 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 95:27]
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 95:20]
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 96:19]
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 97:20]
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 98:21]
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 99:22]
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31]
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14]
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2772 = or(T_2769, T_2770) @[Package.scala 7:62]
    node T_2773 = or(T_2772, T_2771) @[Package.scala 7:62]
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26]
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26]
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32]
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26]
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13]
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24]
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_2783 = or(T_2780, T_2781) @[Package.scala 7:62]
    node T_2784 = or(T_2783, T_2782) @[Package.scala 7:62]
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49]
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29]
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49]
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43]
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28]
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Package.scala 7:47]
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23]
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23]
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23]
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16]
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16]
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19]
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16]
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 754:19]
    T_2828 is invalid @[Definitions.scala 754:19]
    T_2828.r_type <= T_2800 @[Definitions.scala 755:16]
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 756:24]
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 757:20]
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 758:19]
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 759:14]
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 760:19]
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27]
    when vol_ognt_counter.pending : @[Trackers.scala 365:37]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60]
      skip @[Trackers.scala 365:37]
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15]
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 92:62]
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35]
    T_2871 is invalid @[Definitions.scala 355:35]
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Package.scala 7:47]
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89]
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 36:47]
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17]
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22]
      T_2877 <= T_2882 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20]
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 37:18]
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 38:19]
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59]
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33]
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 93:64]
    wire T_2900 : UInt<3>[1] @[Definitions.scala 853:34]
    T_2900 is invalid @[Definitions.scala 853:34]
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Package.scala 7:47]
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33]
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27]
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 36:47]
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17]
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22]
      T_2908 <= T_2913 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20]
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 37:18]
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 38:19]
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 32:14]
    when T_2921 : @[Counters.scala 32:24]
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_2924 = tail(T_2923, 1) @[Counters.scala 32:37]
      T_2918 <= T_2924 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 33:16]
    when T_2927 : @[Counters.scala 33:24]
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_2930 = tail(T_2929, 1) @[Counters.scala 33:37]
      T_2918 <= T_2930 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 95:27]
    ognt_counter.pending <= T_2932 @[Counters.scala 95:20]
    ognt_counter.up.idx <= T_2884 @[Counters.scala 96:19]
    ognt_counter.up.done <= T_2885 @[Counters.scala 97:20]
    ognt_counter.down.idx <= T_2915 @[Counters.scala 98:21]
    ognt_counter.down.done <= T_2916 @[Counters.scala 99:22]
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13]
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36]
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33]
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30]
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30]
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13]
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26]
    T_2949 is invalid @[Definitions.scala 354:26]
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Package.scala 7:47]
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Package.scala 7:47]
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Package.scala 7:47]
    node T_2954 = or(T_2951, T_2952) @[Package.scala 7:62]
    node T_2955 = or(T_2954, T_2953) @[Package.scala 7:62]
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55]
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30]
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61]
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53]
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39]
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51]
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26]
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14]
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24]
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57]
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28]
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 36:32]
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 36:49]
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 36:42]
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 33:29]
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 33:40]
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 33:33]
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 36:59]
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 37:54]
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 37:47]
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 37:71]
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 37:64]
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8]
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58]
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3015 is invalid @[Definitions.scala 417:19]
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 418:25]
    T_3015.a_type <= T_2982 @[Definitions.scala 419:16]
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 422:19]
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 423:14]
    T_3015.union <= T_2984 @[Definitions.scala 424:15]
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 386:49]
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 386:61]
    node T_3070 = or(UInt<2>("h00"), xact_op_size) @[Definitions.scala 387:61]
    node T_3071 = bits(T_3070, 1, 0) @[Definitions.scala 387:76]
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 388:36]
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 388:45]
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 389:46]
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 389:54]
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58]
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58]
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58]
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58]
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16]
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16]
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16]
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16]
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16]
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19]
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16]
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_3140 is invalid @[Definitions.scala 417:19]
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 419:16]
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 420:24]
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 421:20]
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 422:19]
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 423:14]
    T_3140.union <= T_3111 @[Definitions.scala 424:15]
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10]
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27]
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16]
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36]
    when T_3197 : @[Trackers.scala 632:61]
      state <= UInt<4>("h07") @[Trackers.scala 632:69]
      skip @[Trackers.scala 632:61]
    when ognt_counter.pending : @[Trackers.scala 634:33]
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56]
      skip @[Trackers.scala 634:33]
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
    wire T_3207 : UInt<3>[2] @[Definitions.scala 852:26]
    T_3207 is invalid @[Definitions.scala 852:26]
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Package.scala 7:47]
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Package.scala 7:47]
    node T_3211 = or(T_3209, T_3210) @[Package.scala 7:62]
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42]
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20]
    when T_3214 : @[Trackers.scala 172:42]
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51]
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51]
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51]
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51]
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51]
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51]
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51]
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51]
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15]
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15]
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15]
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15]
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15]
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15]
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15]
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15]
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58]
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58]
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58]
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58]
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58]
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58]
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58]
      node T_3262 = not(T_3261) @[Trackers.scala 195:27]
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34]
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55]
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46]
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23]
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27]
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24]
      skip @[Trackers.scala 172:42]
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37]
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61]
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59]
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89]
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 92:62]
    wire T_3291 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3291 is invalid @[Definitions.scala 853:34]
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Package.scala 7:47]
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33]
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27]
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 36:47]
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17]
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22]
      T_3299 <= T_3304 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20]
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 38:19]
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 21:42]
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 93:64]
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 36:47]
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17]
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22]
      T_3314 <= T_3319 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20]
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 37:18]
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 38:19]
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 32:17]
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 32:14]
    when T_3327 : @[Counters.scala 32:24]
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 32:37]
      node T_3330 = tail(T_3329, 1) @[Counters.scala 32:37]
      T_3324 <= T_3330 @[Counters.scala 32:30]
      skip @[Counters.scala 32:24]
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 33:19]
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 33:16]
    when T_3333 : @[Counters.scala 33:24]
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 33:37]
      node T_3336 = tail(T_3335, 1) @[Counters.scala 33:37]
      T_3324 <= T_3336 @[Counters.scala 33:30]
      skip @[Counters.scala 33:24]
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 95:27]
    ifin_counter.pending <= T_3338 @[Counters.scala 95:20]
    ifin_counter.up.idx <= T_3306 @[Counters.scala 96:19]
    ifin_counter.up.done <= T_3307 @[Counters.scala 97:20]
    ifin_counter.down.idx <= T_3321 @[Counters.scala 98:21]
    ifin_counter.down.done <= T_3322 @[Counters.scala 99:22]
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10]
    when T_3343 : @[Trackers.scala 525:31]
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 21:42]
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
      node T_3349 = or(T_3346, T_3347) @[Package.scala 7:62]
      node T_3350 = or(T_3349, T_3348) @[Package.scala 7:62]
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37]
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15]
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31]
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46]
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 21:42]
      wire T_3370 : UInt<3>[2] @[Definitions.scala 852:26]
      T_3370 is invalid @[Definitions.scala 852:26]
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Package.scala 7:47]
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Package.scala 7:47]
      node T_3374 = or(T_3372, T_3373) @[Package.scala 7:62]
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42]
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37]
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58]
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15]
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15]
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31]
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77]
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75]
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25]
      skip @[Trackers.scala 525:31]
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33]
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33]
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44]
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44]
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49]
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25]
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16]
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16]
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16]
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16]
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16]
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16]
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8]
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 882:19]
    T_3455 is invalid @[Definitions.scala 882:19]
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 883:19]
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 884:25]
    T_3455.g_type <= T_3426 @[Definitions.scala 885:16]
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 886:24]
    T_3455.manager_xact_id <= UInt<3>("h07") @[Definitions.scala 887:25]
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 888:19]
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 889:14]
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    wire T_3491 : UInt<3>[1] @[Definitions.scala 853:34]
    T_3491 is invalid @[Definitions.scala 853:34]
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Package.scala 7:47]
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33]
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27]
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 36:47]
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17]
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22]
      T_3499 <= T_3504 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20]
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 37:18]
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 38:19]
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19]
    ignt_data_done <= T_3507 @[Trackers.scala 552:20]
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25]
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10]
    when T_3510 : @[Trackers.scala 554:37]
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27]
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27]
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37]
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19]
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30]
      when T_3512 : @[Trackers.scala 558:47]
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33]
        wire T_3522 : UInt<3>[2] @[Definitions.scala 852:26]
        T_3522 is invalid @[Definitions.scala 852:26]
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 852:26]
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 852:26]
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Package.scala 7:47]
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Package.scala 7:47]
        node T_3526 = or(T_3524, T_3525) @[Package.scala 7:62]
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42]
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32]
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32]
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16]
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14]
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51]
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30]
        skip @[Trackers.scala 558:47]
      skip @[Trackers.scala 554:37]
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36]
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27]
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75]
    when T_3537 : @[Broadcast.scala 196:28]
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29]
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46]
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44]
      pending_iprbs <= T_3541 @[Trackers.scala 383:21]
      skip @[Broadcast.scala 196:28]
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40]
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51]
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75]
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31]
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28]
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61]
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53]
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47]
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66]
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54]
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 21:42]
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26]
    T_3562 is invalid @[Definitions.scala 354:26]
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Package.scala 7:47]
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Package.scala 7:47]
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Package.scala 7:47]
    node T_3567 = or(T_3564, T_3565) @[Package.scala 7:62]
    node T_3568 = or(T_3567, T_3566) @[Package.scala 7:62]
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55]
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20]
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41]
    when T_3571 : @[Trackers.scala 183:51]
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54]
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54]
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54]
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56]
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8]
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51]
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51]
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51]
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51]
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51]
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51]
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51]
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51]
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15]
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15]
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15]
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15]
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15]
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15]
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15]
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15]
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58]
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58]
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58]
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58]
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58]
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58]
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58]
      node T_3655 = not(T_3654) @[Trackers.scala 186:29]
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35]
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64]
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56]
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25]
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54]
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54]
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54]
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56]
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30]
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8]
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45]
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26]
      skip @[Trackers.scala 183:51]
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60]
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60]
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60]
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60]
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60]
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60]
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60]
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25]
    all_pending_done <= T_3706 @[Trackers.scala 50:22]
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16]
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27]
    when T_3708 : @[Trackers.scala 51:48]
      state <= UInt<4>("h00") @[Trackers.scala 52:13]
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35]
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35]
      skip @[Trackers.scala 51:48]
    
  module LockingRRArbiter_5 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}[8], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, chosen : UInt<3>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<3>("h07")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_1462 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1464 : UInt, clk
    node T_1466 = neq(T_1462, UInt<1>("h00")) @[Arbiter.scala 39:34]
    node T_1468 = and(UInt<1>("h01"), io.out.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1475 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1475 is invalid @[Definitions.scala 355:35]
    T_1475[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1477 = eq(io.out.bits.a_type, T_1475[0]) @[Package.scala 7:47]
    node T_1478 = and(T_1468, T_1477) @[Definitions.scala 231:89]
    node T_1479 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_1480 = and(T_1479, T_1478) @[Arbiter.scala 42:25]
    when T_1480 : @[Arbiter.scala 42:39]
      T_1464 <= io.chosen @[Arbiter.scala 43:15]
      node T_1482 = eq(T_1462, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1484 = add(T_1462, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1485 = tail(T_1484, 1) @[Counter.scala 21:22]
      T_1462 <= T_1485 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_1466 : @[Arbiter.scala 47:19]
      io.chosen <= T_1464 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_1487 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<3>, clk
    when T_1487 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_4 = gt(UInt<3>("h04"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_5 = gt(UInt<3>("h05"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_6 = gt(UInt<3>("h06"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_7 = gt(UInt<3>("h07"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node validMask_4 = and(io.in[4].valid, grantMask_4) @[Arbiter.scala 60:75]
    node validMask_5 = and(io.in[5].valid, grantMask_5) @[Arbiter.scala 60:75]
    node validMask_6 = and(io.in[6].valid, grantMask_6) @[Arbiter.scala 60:75]
    node validMask_7 = and(io.in[7].valid, grantMask_7) @[Arbiter.scala 60:75]
    node T_1496 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_1497 = or(T_1496, validMask_2) @[Arbiter.scala 23:72]
    node T_1498 = or(T_1497, validMask_3) @[Arbiter.scala 23:72]
    node T_1499 = or(T_1498, validMask_4) @[Arbiter.scala 23:72]
    node T_1500 = or(T_1499, validMask_5) @[Arbiter.scala 23:72]
    node T_1501 = or(T_1500, validMask_6) @[Arbiter.scala 23:72]
    node T_1502 = or(T_1501, validMask_7) @[Arbiter.scala 23:72]
    node T_1503 = or(T_1502, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_1504 = or(T_1503, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_1505 = or(T_1504, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_1506 = or(T_1505, io.in[3].valid) @[Arbiter.scala 23:72]
    node T_1507 = or(T_1506, io.in[4].valid) @[Arbiter.scala 23:72]
    node T_1508 = or(T_1507, io.in[5].valid) @[Arbiter.scala 23:72]
    node T_1509 = or(T_1508, io.in[6].valid) @[Arbiter.scala 23:72]
    node T_1511 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1513 = eq(T_1496, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1515 = eq(T_1497, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1517 = eq(T_1498, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1519 = eq(T_1499, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1521 = eq(T_1500, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1523 = eq(T_1501, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1525 = eq(T_1502, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1527 = eq(T_1503, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1529 = eq(T_1504, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1531 = eq(T_1505, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1533 = eq(T_1506, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1535 = eq(T_1507, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1537 = eq(T_1508, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1539 = eq(T_1509, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1540 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_1541 = or(T_1540, T_1525) @[Arbiter.scala 64:50]
    node T_1542 = and(T_1511, grantMask_1) @[Arbiter.scala 64:34]
    node T_1543 = or(T_1542, T_1527) @[Arbiter.scala 64:50]
    node T_1544 = and(T_1513, grantMask_2) @[Arbiter.scala 64:34]
    node T_1545 = or(T_1544, T_1529) @[Arbiter.scala 64:50]
    node T_1546 = and(T_1515, grantMask_3) @[Arbiter.scala 64:34]
    node T_1547 = or(T_1546, T_1531) @[Arbiter.scala 64:50]
    node T_1548 = and(T_1517, grantMask_4) @[Arbiter.scala 64:34]
    node T_1549 = or(T_1548, T_1533) @[Arbiter.scala 64:50]
    node T_1550 = and(T_1519, grantMask_5) @[Arbiter.scala 64:34]
    node T_1551 = or(T_1550, T_1535) @[Arbiter.scala 64:50]
    node T_1552 = and(T_1521, grantMask_6) @[Arbiter.scala 64:34]
    node T_1553 = or(T_1552, T_1537) @[Arbiter.scala 64:50]
    node T_1554 = and(T_1523, grantMask_7) @[Arbiter.scala 64:34]
    node T_1555 = or(T_1554, T_1539) @[Arbiter.scala 64:50]
    node T_1557 = eq(T_1464, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_1558 = mux(T_1466, T_1557, T_1541) @[Arbiter.scala 49:22]
    node T_1559 = and(T_1558, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_1559 @[Arbiter.scala 49:16]
    node T_1561 = eq(T_1464, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_1562 = mux(T_1466, T_1561, T_1543) @[Arbiter.scala 49:22]
    node T_1563 = and(T_1562, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_1563 @[Arbiter.scala 49:16]
    node T_1565 = eq(T_1464, UInt<2>("h02")) @[Arbiter.scala 49:39]
    node T_1566 = mux(T_1466, T_1565, T_1545) @[Arbiter.scala 49:22]
    node T_1567 = and(T_1566, io.out.ready) @[Arbiter.scala 49:55]
    io.in[2].ready <= T_1567 @[Arbiter.scala 49:16]
    node T_1569 = eq(T_1464, UInt<2>("h03")) @[Arbiter.scala 49:39]
    node T_1570 = mux(T_1466, T_1569, T_1547) @[Arbiter.scala 49:22]
    node T_1571 = and(T_1570, io.out.ready) @[Arbiter.scala 49:55]
    io.in[3].ready <= T_1571 @[Arbiter.scala 49:16]
    node T_1573 = eq(T_1464, UInt<3>("h04")) @[Arbiter.scala 49:39]
    node T_1574 = mux(T_1466, T_1573, T_1549) @[Arbiter.scala 49:22]
    node T_1575 = and(T_1574, io.out.ready) @[Arbiter.scala 49:55]
    io.in[4].ready <= T_1575 @[Arbiter.scala 49:16]
    node T_1577 = eq(T_1464, UInt<3>("h05")) @[Arbiter.scala 49:39]
    node T_1578 = mux(T_1466, T_1577, T_1551) @[Arbiter.scala 49:22]
    node T_1579 = and(T_1578, io.out.ready) @[Arbiter.scala 49:55]
    io.in[5].ready <= T_1579 @[Arbiter.scala 49:16]
    node T_1581 = eq(T_1464, UInt<3>("h06")) @[Arbiter.scala 49:39]
    node T_1582 = mux(T_1466, T_1581, T_1553) @[Arbiter.scala 49:22]
    node T_1583 = and(T_1582, io.out.ready) @[Arbiter.scala 49:55]
    io.in[6].ready <= T_1583 @[Arbiter.scala 49:16]
    node T_1585 = eq(T_1464, UInt<3>("h07")) @[Arbiter.scala 49:39]
    node T_1586 = mux(T_1466, T_1585, T_1555) @[Arbiter.scala 49:22]
    node T_1587 = and(T_1586, io.out.ready) @[Arbiter.scala 49:55]
    io.in[7].ready <= T_1587 @[Arbiter.scala 49:16]
    when io.in[6].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h06") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[5].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h05") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[4].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h04") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[3].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h03") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_7 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h07") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_6 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h06") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_5 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h05") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_4 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h04") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module LockingRRArbiter_6 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}[8], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, chosen : UInt<3>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<3>("h07")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_1412 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1414 : UInt, clk
    node T_1416 = neq(T_1412, UInt<1>("h00")) @[Arbiter.scala 39:34]
    node T_1418 = eq(io.out.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_1419 = eq(io.out.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_1420 = eq(io.out.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_1421 = or(T_1418, T_1419) @[Package.scala 7:62]
    node T_1422 = or(T_1421, T_1420) @[Package.scala 7:62]
    node T_1423 = and(UInt<1>("h01"), T_1422) @[Definitions.scala 256:64]
    node T_1424 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_1425 = and(T_1424, T_1423) @[Arbiter.scala 42:25]
    when T_1425 : @[Arbiter.scala 42:39]
      T_1414 <= io.chosen @[Arbiter.scala 43:15]
      node T_1427 = eq(T_1412, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1429 = add(T_1412, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1430 = tail(T_1429, 1) @[Counter.scala 21:22]
      T_1412 <= T_1430 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_1416 : @[Arbiter.scala 47:19]
      io.chosen <= T_1414 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_1432 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<3>, clk
    when T_1432 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_4 = gt(UInt<3>("h04"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_5 = gt(UInt<3>("h05"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_6 = gt(UInt<3>("h06"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_7 = gt(UInt<3>("h07"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node validMask_4 = and(io.in[4].valid, grantMask_4) @[Arbiter.scala 60:75]
    node validMask_5 = and(io.in[5].valid, grantMask_5) @[Arbiter.scala 60:75]
    node validMask_6 = and(io.in[6].valid, grantMask_6) @[Arbiter.scala 60:75]
    node validMask_7 = and(io.in[7].valid, grantMask_7) @[Arbiter.scala 60:75]
    node T_1441 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_1442 = or(T_1441, validMask_2) @[Arbiter.scala 23:72]
    node T_1443 = or(T_1442, validMask_3) @[Arbiter.scala 23:72]
    node T_1444 = or(T_1443, validMask_4) @[Arbiter.scala 23:72]
    node T_1445 = or(T_1444, validMask_5) @[Arbiter.scala 23:72]
    node T_1446 = or(T_1445, validMask_6) @[Arbiter.scala 23:72]
    node T_1447 = or(T_1446, validMask_7) @[Arbiter.scala 23:72]
    node T_1448 = or(T_1447, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_1449 = or(T_1448, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_1450 = or(T_1449, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_1451 = or(T_1450, io.in[3].valid) @[Arbiter.scala 23:72]
    node T_1452 = or(T_1451, io.in[4].valid) @[Arbiter.scala 23:72]
    node T_1453 = or(T_1452, io.in[5].valid) @[Arbiter.scala 23:72]
    node T_1454 = or(T_1453, io.in[6].valid) @[Arbiter.scala 23:72]
    node T_1456 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1458 = eq(T_1441, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1460 = eq(T_1442, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1462 = eq(T_1443, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1464 = eq(T_1444, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1466 = eq(T_1445, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1468 = eq(T_1446, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1470 = eq(T_1447, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1472 = eq(T_1448, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1474 = eq(T_1449, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1476 = eq(T_1450, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1478 = eq(T_1451, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1480 = eq(T_1452, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1482 = eq(T_1453, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1484 = eq(T_1454, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1485 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_1486 = or(T_1485, T_1470) @[Arbiter.scala 64:50]
    node T_1487 = and(T_1456, grantMask_1) @[Arbiter.scala 64:34]
    node T_1488 = or(T_1487, T_1472) @[Arbiter.scala 64:50]
    node T_1489 = and(T_1458, grantMask_2) @[Arbiter.scala 64:34]
    node T_1490 = or(T_1489, T_1474) @[Arbiter.scala 64:50]
    node T_1491 = and(T_1460, grantMask_3) @[Arbiter.scala 64:34]
    node T_1492 = or(T_1491, T_1476) @[Arbiter.scala 64:50]
    node T_1493 = and(T_1462, grantMask_4) @[Arbiter.scala 64:34]
    node T_1494 = or(T_1493, T_1478) @[Arbiter.scala 64:50]
    node T_1495 = and(T_1464, grantMask_5) @[Arbiter.scala 64:34]
    node T_1496 = or(T_1495, T_1480) @[Arbiter.scala 64:50]
    node T_1497 = and(T_1466, grantMask_6) @[Arbiter.scala 64:34]
    node T_1498 = or(T_1497, T_1482) @[Arbiter.scala 64:50]
    node T_1499 = and(T_1468, grantMask_7) @[Arbiter.scala 64:34]
    node T_1500 = or(T_1499, T_1484) @[Arbiter.scala 64:50]
    node T_1502 = eq(T_1414, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_1503 = mux(T_1416, T_1502, T_1486) @[Arbiter.scala 49:22]
    node T_1504 = and(T_1503, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_1504 @[Arbiter.scala 49:16]
    node T_1506 = eq(T_1414, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_1507 = mux(T_1416, T_1506, T_1488) @[Arbiter.scala 49:22]
    node T_1508 = and(T_1507, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_1508 @[Arbiter.scala 49:16]
    node T_1510 = eq(T_1414, UInt<2>("h02")) @[Arbiter.scala 49:39]
    node T_1511 = mux(T_1416, T_1510, T_1490) @[Arbiter.scala 49:22]
    node T_1512 = and(T_1511, io.out.ready) @[Arbiter.scala 49:55]
    io.in[2].ready <= T_1512 @[Arbiter.scala 49:16]
    node T_1514 = eq(T_1414, UInt<2>("h03")) @[Arbiter.scala 49:39]
    node T_1515 = mux(T_1416, T_1514, T_1492) @[Arbiter.scala 49:22]
    node T_1516 = and(T_1515, io.out.ready) @[Arbiter.scala 49:55]
    io.in[3].ready <= T_1516 @[Arbiter.scala 49:16]
    node T_1518 = eq(T_1414, UInt<3>("h04")) @[Arbiter.scala 49:39]
    node T_1519 = mux(T_1416, T_1518, T_1494) @[Arbiter.scala 49:22]
    node T_1520 = and(T_1519, io.out.ready) @[Arbiter.scala 49:55]
    io.in[4].ready <= T_1520 @[Arbiter.scala 49:16]
    node T_1522 = eq(T_1414, UInt<3>("h05")) @[Arbiter.scala 49:39]
    node T_1523 = mux(T_1416, T_1522, T_1496) @[Arbiter.scala 49:22]
    node T_1524 = and(T_1523, io.out.ready) @[Arbiter.scala 49:55]
    io.in[5].ready <= T_1524 @[Arbiter.scala 49:16]
    node T_1526 = eq(T_1414, UInt<3>("h06")) @[Arbiter.scala 49:39]
    node T_1527 = mux(T_1416, T_1526, T_1498) @[Arbiter.scala 49:22]
    node T_1528 = and(T_1527, io.out.ready) @[Arbiter.scala 49:55]
    io.in[6].ready <= T_1528 @[Arbiter.scala 49:16]
    node T_1530 = eq(T_1414, UInt<3>("h07")) @[Arbiter.scala 49:39]
    node T_1531 = mux(T_1416, T_1530, T_1500) @[Arbiter.scala 49:22]
    node T_1532 = and(T_1531, io.out.ready) @[Arbiter.scala 49:55]
    io.in[7].ready <= T_1532 @[Arbiter.scala 49:16]
    when io.in[6].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h06") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[5].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h05") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[4].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h04") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[3].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h03") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_7 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h07") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_6 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h06") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_5 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h05") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_4 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h04") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module ClientTileLinkIOArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}[8], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}}
    
    io is invalid
    inst LockingRRArbiter_5_1 of LockingRRArbiter_5 @[Arbiters.scala 41:21]
    LockingRRArbiter_5_1.io is invalid
    LockingRRArbiter_5_1.clk <= clk
    LockingRRArbiter_5_1.reset <= reset
    LockingRRArbiter_5_1.io.in[0].valid <= io.in[0].acquire.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_5_1.io.in[0].bits <- io.in[0].acquire.bits @[Arbiters.scala 44:16]
    node T_12220 = cat(io.in[0].acquire.bits.client_xact_id, UInt<3>("h00")) @[Cat.scala 20:58]
    LockingRRArbiter_5_1.io.in[0].bits.client_xact_id <= T_12220 @[Arbiters.scala 45:31]
    io.in[0].acquire.ready <= LockingRRArbiter_5_1.io.in[0].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_5_1.io.in[1].valid <= io.in[1].acquire.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_5_1.io.in[1].bits <- io.in[1].acquire.bits @[Arbiters.scala 44:16]
    node T_12222 = cat(io.in[1].acquire.bits.client_xact_id, UInt<3>("h01")) @[Cat.scala 20:58]
    LockingRRArbiter_5_1.io.in[1].bits.client_xact_id <= T_12222 @[Arbiters.scala 45:31]
    io.in[1].acquire.ready <= LockingRRArbiter_5_1.io.in[1].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_5_1.io.in[2].valid <= io.in[2].acquire.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_5_1.io.in[2].bits <- io.in[2].acquire.bits @[Arbiters.scala 44:16]
    node T_12224 = cat(io.in[2].acquire.bits.client_xact_id, UInt<3>("h02")) @[Cat.scala 20:58]
    LockingRRArbiter_5_1.io.in[2].bits.client_xact_id <= T_12224 @[Arbiters.scala 45:31]
    io.in[2].acquire.ready <= LockingRRArbiter_5_1.io.in[2].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_5_1.io.in[3].valid <= io.in[3].acquire.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_5_1.io.in[3].bits <- io.in[3].acquire.bits @[Arbiters.scala 44:16]
    node T_12226 = cat(io.in[3].acquire.bits.client_xact_id, UInt<3>("h03")) @[Cat.scala 20:58]
    LockingRRArbiter_5_1.io.in[3].bits.client_xact_id <= T_12226 @[Arbiters.scala 45:31]
    io.in[3].acquire.ready <= LockingRRArbiter_5_1.io.in[3].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_5_1.io.in[4].valid <= io.in[4].acquire.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_5_1.io.in[4].bits <- io.in[4].acquire.bits @[Arbiters.scala 44:16]
    node T_12228 = cat(io.in[4].acquire.bits.client_xact_id, UInt<3>("h04")) @[Cat.scala 20:58]
    LockingRRArbiter_5_1.io.in[4].bits.client_xact_id <= T_12228 @[Arbiters.scala 45:31]
    io.in[4].acquire.ready <= LockingRRArbiter_5_1.io.in[4].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_5_1.io.in[5].valid <= io.in[5].acquire.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_5_1.io.in[5].bits <- io.in[5].acquire.bits @[Arbiters.scala 44:16]
    node T_12230 = cat(io.in[5].acquire.bits.client_xact_id, UInt<3>("h05")) @[Cat.scala 20:58]
    LockingRRArbiter_5_1.io.in[5].bits.client_xact_id <= T_12230 @[Arbiters.scala 45:31]
    io.in[5].acquire.ready <= LockingRRArbiter_5_1.io.in[5].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_5_1.io.in[6].valid <= io.in[6].acquire.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_5_1.io.in[6].bits <- io.in[6].acquire.bits @[Arbiters.scala 44:16]
    node T_12232 = cat(io.in[6].acquire.bits.client_xact_id, UInt<3>("h06")) @[Cat.scala 20:58]
    LockingRRArbiter_5_1.io.in[6].bits.client_xact_id <= T_12232 @[Arbiters.scala 45:31]
    io.in[6].acquire.ready <= LockingRRArbiter_5_1.io.in[6].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_5_1.io.in[7].valid <= io.in[7].acquire.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_5_1.io.in[7].bits <- io.in[7].acquire.bits @[Arbiters.scala 44:16]
    node T_12234 = cat(io.in[7].acquire.bits.client_xact_id, UInt<3>("h07")) @[Cat.scala 20:58]
    LockingRRArbiter_5_1.io.in[7].bits.client_xact_id <= T_12234 @[Arbiters.scala 45:31]
    io.in[7].acquire.ready <= LockingRRArbiter_5_1.io.in[7].ready @[Arbiters.scala 46:17]
    io.out.acquire <- LockingRRArbiter_5_1.io.out @[Arbiters.scala 48:10]
    inst LockingRRArbiter_6_1 of LockingRRArbiter_6 @[Arbiters.scala 41:21]
    LockingRRArbiter_6_1.io is invalid
    LockingRRArbiter_6_1.clk <= clk
    LockingRRArbiter_6_1.reset <= reset
    LockingRRArbiter_6_1.io.in[0].valid <= io.in[0].release.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_6_1.io.in[0].bits <- io.in[0].release.bits @[Arbiters.scala 44:16]
    node T_12236 = cat(io.in[0].release.bits.client_xact_id, UInt<3>("h00")) @[Cat.scala 20:58]
    LockingRRArbiter_6_1.io.in[0].bits.client_xact_id <= T_12236 @[Arbiters.scala 45:31]
    io.in[0].release.ready <= LockingRRArbiter_6_1.io.in[0].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_6_1.io.in[1].valid <= io.in[1].release.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_6_1.io.in[1].bits <- io.in[1].release.bits @[Arbiters.scala 44:16]
    node T_12238 = cat(io.in[1].release.bits.client_xact_id, UInt<3>("h01")) @[Cat.scala 20:58]
    LockingRRArbiter_6_1.io.in[1].bits.client_xact_id <= T_12238 @[Arbiters.scala 45:31]
    io.in[1].release.ready <= LockingRRArbiter_6_1.io.in[1].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_6_1.io.in[2].valid <= io.in[2].release.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_6_1.io.in[2].bits <- io.in[2].release.bits @[Arbiters.scala 44:16]
    node T_12240 = cat(io.in[2].release.bits.client_xact_id, UInt<3>("h02")) @[Cat.scala 20:58]
    LockingRRArbiter_6_1.io.in[2].bits.client_xact_id <= T_12240 @[Arbiters.scala 45:31]
    io.in[2].release.ready <= LockingRRArbiter_6_1.io.in[2].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_6_1.io.in[3].valid <= io.in[3].release.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_6_1.io.in[3].bits <- io.in[3].release.bits @[Arbiters.scala 44:16]
    node T_12242 = cat(io.in[3].release.bits.client_xact_id, UInt<3>("h03")) @[Cat.scala 20:58]
    LockingRRArbiter_6_1.io.in[3].bits.client_xact_id <= T_12242 @[Arbiters.scala 45:31]
    io.in[3].release.ready <= LockingRRArbiter_6_1.io.in[3].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_6_1.io.in[4].valid <= io.in[4].release.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_6_1.io.in[4].bits <- io.in[4].release.bits @[Arbiters.scala 44:16]
    node T_12244 = cat(io.in[4].release.bits.client_xact_id, UInt<3>("h04")) @[Cat.scala 20:58]
    LockingRRArbiter_6_1.io.in[4].bits.client_xact_id <= T_12244 @[Arbiters.scala 45:31]
    io.in[4].release.ready <= LockingRRArbiter_6_1.io.in[4].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_6_1.io.in[5].valid <= io.in[5].release.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_6_1.io.in[5].bits <- io.in[5].release.bits @[Arbiters.scala 44:16]
    node T_12246 = cat(io.in[5].release.bits.client_xact_id, UInt<3>("h05")) @[Cat.scala 20:58]
    LockingRRArbiter_6_1.io.in[5].bits.client_xact_id <= T_12246 @[Arbiters.scala 45:31]
    io.in[5].release.ready <= LockingRRArbiter_6_1.io.in[5].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_6_1.io.in[6].valid <= io.in[6].release.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_6_1.io.in[6].bits <- io.in[6].release.bits @[Arbiters.scala 44:16]
    node T_12248 = cat(io.in[6].release.bits.client_xact_id, UInt<3>("h06")) @[Cat.scala 20:58]
    LockingRRArbiter_6_1.io.in[6].bits.client_xact_id <= T_12248 @[Arbiters.scala 45:31]
    io.in[6].release.ready <= LockingRRArbiter_6_1.io.in[6].ready @[Arbiters.scala 46:17]
    LockingRRArbiter_6_1.io.in[7].valid <= io.in[7].release.valid @[Arbiters.scala 43:17]
    LockingRRArbiter_6_1.io.in[7].bits <- io.in[7].release.bits @[Arbiters.scala 44:16]
    node T_12250 = cat(io.in[7].release.bits.client_xact_id, UInt<3>("h07")) @[Cat.scala 20:58]
    LockingRRArbiter_6_1.io.in[7].bits.client_xact_id <= T_12250 @[Arbiters.scala 45:31]
    io.in[7].release.ready <= LockingRRArbiter_6_1.io.in[7].ready @[Arbiters.scala 46:17]
    io.out.release <- LockingRRArbiter_6_1.io.out @[Arbiters.scala 48:10]
    io.in[0].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23]
    io.in[1].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23]
    io.in[2].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23]
    io.in[3].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23]
    io.in[4].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23]
    io.in[5].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23]
    io.in[6].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23]
    io.in[7].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23]
    io.in[0].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22]
    io.in[1].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22]
    io.in[2].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22]
    io.in[3].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22]
    io.in[4].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22]
    io.in[5].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22]
    io.in[6].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22]
    io.in[7].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22]
    node T_12251 = and(io.in[0].probe.ready, io.in[1].probe.ready) @[Arbiters.scala 98:45]
    node T_12252 = and(T_12251, io.in[2].probe.ready) @[Arbiters.scala 98:45]
    node T_12253 = and(T_12252, io.in[3].probe.ready) @[Arbiters.scala 98:45]
    node T_12254 = and(T_12253, io.in[4].probe.ready) @[Arbiters.scala 98:45]
    node T_12255 = and(T_12254, io.in[5].probe.ready) @[Arbiters.scala 98:45]
    node T_12256 = and(T_12255, io.in[6].probe.ready) @[Arbiters.scala 98:45]
    node T_12257 = and(T_12256, io.in[7].probe.ready) @[Arbiters.scala 98:45]
    io.out.probe.ready <= T_12257 @[Arbiters.scala 98:16]
    io.out.grant.ready <= UInt<1>("h00") @[Arbiters.scala 83:16]
    io.in[0].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21]
    node T_12260 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59]
    node T_12262 = eq(T_12260, UInt<1>("h00")) @[Arbiters.scala 86:31]
    when T_12262 : @[Arbiters.scala 86:44]
      io.in[0].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23]
      io.out.grant.ready <= io.in[0].grant.ready @[Arbiters.scala 88:20]
      skip @[Arbiters.scala 86:44]
    io.in[0].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20]
    node T_12263 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25]
    io.in[0].grant.bits.client_xact_id <= T_12263 @[Arbiters.scala 91:35]
    io.in[1].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21]
    node T_12265 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59]
    node T_12267 = eq(T_12265, UInt<1>("h01")) @[Arbiters.scala 86:31]
    when T_12267 : @[Arbiters.scala 86:44]
      io.in[1].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23]
      io.out.grant.ready <= io.in[1].grant.ready @[Arbiters.scala 88:20]
      skip @[Arbiters.scala 86:44]
    io.in[1].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20]
    node T_12268 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25]
    io.in[1].grant.bits.client_xact_id <= T_12268 @[Arbiters.scala 91:35]
    io.in[2].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21]
    node T_12270 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59]
    node T_12272 = eq(T_12270, UInt<2>("h02")) @[Arbiters.scala 86:31]
    when T_12272 : @[Arbiters.scala 86:44]
      io.in[2].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23]
      io.out.grant.ready <= io.in[2].grant.ready @[Arbiters.scala 88:20]
      skip @[Arbiters.scala 86:44]
    io.in[2].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20]
    node T_12273 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25]
    io.in[2].grant.bits.client_xact_id <= T_12273 @[Arbiters.scala 91:35]
    io.in[3].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21]
    node T_12275 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59]
    node T_12277 = eq(T_12275, UInt<2>("h03")) @[Arbiters.scala 86:31]
    when T_12277 : @[Arbiters.scala 86:44]
      io.in[3].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23]
      io.out.grant.ready <= io.in[3].grant.ready @[Arbiters.scala 88:20]
      skip @[Arbiters.scala 86:44]
    io.in[3].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20]
    node T_12278 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25]
    io.in[3].grant.bits.client_xact_id <= T_12278 @[Arbiters.scala 91:35]
    io.in[4].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21]
    node T_12280 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59]
    node T_12282 = eq(T_12280, UInt<3>("h04")) @[Arbiters.scala 86:31]
    when T_12282 : @[Arbiters.scala 86:44]
      io.in[4].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23]
      io.out.grant.ready <= io.in[4].grant.ready @[Arbiters.scala 88:20]
      skip @[Arbiters.scala 86:44]
    io.in[4].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20]
    node T_12283 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25]
    io.in[4].grant.bits.client_xact_id <= T_12283 @[Arbiters.scala 91:35]
    io.in[5].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21]
    node T_12285 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59]
    node T_12287 = eq(T_12285, UInt<3>("h05")) @[Arbiters.scala 86:31]
    when T_12287 : @[Arbiters.scala 86:44]
      io.in[5].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23]
      io.out.grant.ready <= io.in[5].grant.ready @[Arbiters.scala 88:20]
      skip @[Arbiters.scala 86:44]
    io.in[5].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20]
    node T_12288 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25]
    io.in[5].grant.bits.client_xact_id <= T_12288 @[Arbiters.scala 91:35]
    io.in[6].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21]
    node T_12290 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59]
    node T_12292 = eq(T_12290, UInt<3>("h06")) @[Arbiters.scala 86:31]
    when T_12292 : @[Arbiters.scala 86:44]
      io.in[6].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23]
      io.out.grant.ready <= io.in[6].grant.ready @[Arbiters.scala 88:20]
      skip @[Arbiters.scala 86:44]
    io.in[6].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20]
    node T_12293 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25]
    io.in[6].grant.bits.client_xact_id <= T_12293 @[Arbiters.scala 91:35]
    io.in[7].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21]
    node T_12295 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59]
    node T_12297 = eq(T_12295, UInt<3>("h07")) @[Arbiters.scala 86:31]
    when T_12297 : @[Arbiters.scala 86:44]
      io.in[7].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23]
      io.out.grant.ready <= io.in[7].grant.ready @[Arbiters.scala 88:20]
      skip @[Arbiters.scala 86:44]
    io.in[7].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20]
    node T_12298 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25]
    io.in[7].grant.bits.client_xact_id <= T_12298 @[Arbiters.scala 91:35]
    
  module LockingRRArbiter_7 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}[8], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, chosen : UInt<3>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<3>("h07")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_1262 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1264 : UInt, clk
    node T_1266 = neq(T_1262, UInt<1>("h00")) @[Arbiter.scala 39:34]
    node T_1268 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_1269 = and(T_1268, UInt<1>("h00")) @[Arbiter.scala 42:25]
    when T_1269 : @[Arbiter.scala 42:39]
      T_1264 <= io.chosen @[Arbiter.scala 43:15]
      node T_1271 = eq(T_1262, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1273 = add(T_1262, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1274 = tail(T_1273, 1) @[Counter.scala 21:22]
      T_1262 <= T_1274 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_1266 : @[Arbiter.scala 47:19]
      io.chosen <= T_1264 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_1276 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<3>, clk
    when T_1276 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_4 = gt(UInt<3>("h04"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_5 = gt(UInt<3>("h05"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_6 = gt(UInt<3>("h06"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_7 = gt(UInt<3>("h07"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node validMask_4 = and(io.in[4].valid, grantMask_4) @[Arbiter.scala 60:75]
    node validMask_5 = and(io.in[5].valid, grantMask_5) @[Arbiter.scala 60:75]
    node validMask_6 = and(io.in[6].valid, grantMask_6) @[Arbiter.scala 60:75]
    node validMask_7 = and(io.in[7].valid, grantMask_7) @[Arbiter.scala 60:75]
    node T_1285 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_1286 = or(T_1285, validMask_2) @[Arbiter.scala 23:72]
    node T_1287 = or(T_1286, validMask_3) @[Arbiter.scala 23:72]
    node T_1288 = or(T_1287, validMask_4) @[Arbiter.scala 23:72]
    node T_1289 = or(T_1288, validMask_5) @[Arbiter.scala 23:72]
    node T_1290 = or(T_1289, validMask_6) @[Arbiter.scala 23:72]
    node T_1291 = or(T_1290, validMask_7) @[Arbiter.scala 23:72]
    node T_1292 = or(T_1291, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_1293 = or(T_1292, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_1294 = or(T_1293, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_1295 = or(T_1294, io.in[3].valid) @[Arbiter.scala 23:72]
    node T_1296 = or(T_1295, io.in[4].valid) @[Arbiter.scala 23:72]
    node T_1297 = or(T_1296, io.in[5].valid) @[Arbiter.scala 23:72]
    node T_1298 = or(T_1297, io.in[6].valid) @[Arbiter.scala 23:72]
    node T_1300 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1302 = eq(T_1285, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1304 = eq(T_1286, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1306 = eq(T_1287, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1308 = eq(T_1288, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1310 = eq(T_1289, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1312 = eq(T_1290, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1314 = eq(T_1291, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1316 = eq(T_1292, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1318 = eq(T_1293, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1320 = eq(T_1294, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1322 = eq(T_1295, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1324 = eq(T_1296, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1326 = eq(T_1297, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1328 = eq(T_1298, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1329 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_1330 = or(T_1329, T_1314) @[Arbiter.scala 64:50]
    node T_1331 = and(T_1300, grantMask_1) @[Arbiter.scala 64:34]
    node T_1332 = or(T_1331, T_1316) @[Arbiter.scala 64:50]
    node T_1333 = and(T_1302, grantMask_2) @[Arbiter.scala 64:34]
    node T_1334 = or(T_1333, T_1318) @[Arbiter.scala 64:50]
    node T_1335 = and(T_1304, grantMask_3) @[Arbiter.scala 64:34]
    node T_1336 = or(T_1335, T_1320) @[Arbiter.scala 64:50]
    node T_1337 = and(T_1306, grantMask_4) @[Arbiter.scala 64:34]
    node T_1338 = or(T_1337, T_1322) @[Arbiter.scala 64:50]
    node T_1339 = and(T_1308, grantMask_5) @[Arbiter.scala 64:34]
    node T_1340 = or(T_1339, T_1324) @[Arbiter.scala 64:50]
    node T_1341 = and(T_1310, grantMask_6) @[Arbiter.scala 64:34]
    node T_1342 = or(T_1341, T_1326) @[Arbiter.scala 64:50]
    node T_1343 = and(T_1312, grantMask_7) @[Arbiter.scala 64:34]
    node T_1344 = or(T_1343, T_1328) @[Arbiter.scala 64:50]
    node T_1346 = eq(T_1264, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_1347 = mux(T_1266, T_1346, T_1330) @[Arbiter.scala 49:22]
    node T_1348 = and(T_1347, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_1348 @[Arbiter.scala 49:16]
    node T_1350 = eq(T_1264, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_1351 = mux(T_1266, T_1350, T_1332) @[Arbiter.scala 49:22]
    node T_1352 = and(T_1351, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_1352 @[Arbiter.scala 49:16]
    node T_1354 = eq(T_1264, UInt<2>("h02")) @[Arbiter.scala 49:39]
    node T_1355 = mux(T_1266, T_1354, T_1334) @[Arbiter.scala 49:22]
    node T_1356 = and(T_1355, io.out.ready) @[Arbiter.scala 49:55]
    io.in[2].ready <= T_1356 @[Arbiter.scala 49:16]
    node T_1358 = eq(T_1264, UInt<2>("h03")) @[Arbiter.scala 49:39]
    node T_1359 = mux(T_1266, T_1358, T_1336) @[Arbiter.scala 49:22]
    node T_1360 = and(T_1359, io.out.ready) @[Arbiter.scala 49:55]
    io.in[3].ready <= T_1360 @[Arbiter.scala 49:16]
    node T_1362 = eq(T_1264, UInt<3>("h04")) @[Arbiter.scala 49:39]
    node T_1363 = mux(T_1266, T_1362, T_1338) @[Arbiter.scala 49:22]
    node T_1364 = and(T_1363, io.out.ready) @[Arbiter.scala 49:55]
    io.in[4].ready <= T_1364 @[Arbiter.scala 49:16]
    node T_1366 = eq(T_1264, UInt<3>("h05")) @[Arbiter.scala 49:39]
    node T_1367 = mux(T_1266, T_1366, T_1340) @[Arbiter.scala 49:22]
    node T_1368 = and(T_1367, io.out.ready) @[Arbiter.scala 49:55]
    io.in[5].ready <= T_1368 @[Arbiter.scala 49:16]
    node T_1370 = eq(T_1264, UInt<3>("h06")) @[Arbiter.scala 49:39]
    node T_1371 = mux(T_1266, T_1370, T_1342) @[Arbiter.scala 49:22]
    node T_1372 = and(T_1371, io.out.ready) @[Arbiter.scala 49:55]
    io.in[6].ready <= T_1372 @[Arbiter.scala 49:16]
    node T_1374 = eq(T_1264, UInt<3>("h07")) @[Arbiter.scala 49:39]
    node T_1375 = mux(T_1266, T_1374, T_1344) @[Arbiter.scala 49:22]
    node T_1376 = and(T_1375, io.out.ready) @[Arbiter.scala 49:55]
    io.in[7].ready <= T_1376 @[Arbiter.scala 49:16]
    when io.in[6].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h06") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[5].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h05") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[4].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h04") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[3].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h03") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_7 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h07") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_6 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h06") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_5 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h05") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_4 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h04") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module LockingRRArbiter_8 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}[8], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, chosen : UInt<3>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<3>("h07")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_1462 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1464 : UInt, clk
    node T_1466 = neq(T_1462, UInt<1>("h00")) @[Arbiter.scala 39:34]
    wire T_1474 : UInt<3>[1] @[Definitions.scala 853:34]
    T_1474 is invalid @[Definitions.scala 853:34]
    T_1474[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_1476 = eq(io.out.bits.g_type, T_1474[0]) @[Package.scala 7:47]
    node T_1477 = eq(io.out.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_1478 = mux(io.out.bits.is_builtin_type, T_1476, T_1477) @[Definitions.scala 274:33]
    node T_1479 = and(UInt<1>("h01"), T_1478) @[Definitions.scala 274:27]
    node T_1480 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_1481 = and(T_1480, T_1479) @[Arbiter.scala 42:25]
    when T_1481 : @[Arbiter.scala 42:39]
      T_1464 <= io.chosen @[Arbiter.scala 43:15]
      node T_1483 = eq(T_1462, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1485 = add(T_1462, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1486 = tail(T_1485, 1) @[Counter.scala 21:22]
      T_1462 <= T_1486 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_1466 : @[Arbiter.scala 47:19]
      io.chosen <= T_1464 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_1488 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<3>, clk
    when T_1488 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_4 = gt(UInt<3>("h04"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_5 = gt(UInt<3>("h05"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_6 = gt(UInt<3>("h06"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_7 = gt(UInt<3>("h07"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75]
    node validMask_4 = and(io.in[4].valid, grantMask_4) @[Arbiter.scala 60:75]
    node validMask_5 = and(io.in[5].valid, grantMask_5) @[Arbiter.scala 60:75]
    node validMask_6 = and(io.in[6].valid, grantMask_6) @[Arbiter.scala 60:75]
    node validMask_7 = and(io.in[7].valid, grantMask_7) @[Arbiter.scala 60:75]
    node T_1497 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_1498 = or(T_1497, validMask_2) @[Arbiter.scala 23:72]
    node T_1499 = or(T_1498, validMask_3) @[Arbiter.scala 23:72]
    node T_1500 = or(T_1499, validMask_4) @[Arbiter.scala 23:72]
    node T_1501 = or(T_1500, validMask_5) @[Arbiter.scala 23:72]
    node T_1502 = or(T_1501, validMask_6) @[Arbiter.scala 23:72]
    node T_1503 = or(T_1502, validMask_7) @[Arbiter.scala 23:72]
    node T_1504 = or(T_1503, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_1505 = or(T_1504, io.in[1].valid) @[Arbiter.scala 23:72]
    node T_1506 = or(T_1505, io.in[2].valid) @[Arbiter.scala 23:72]
    node T_1507 = or(T_1506, io.in[3].valid) @[Arbiter.scala 23:72]
    node T_1508 = or(T_1507, io.in[4].valid) @[Arbiter.scala 23:72]
    node T_1509 = or(T_1508, io.in[5].valid) @[Arbiter.scala 23:72]
    node T_1510 = or(T_1509, io.in[6].valid) @[Arbiter.scala 23:72]
    node T_1512 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1514 = eq(T_1497, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1516 = eq(T_1498, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1518 = eq(T_1499, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1520 = eq(T_1500, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1522 = eq(T_1501, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1524 = eq(T_1502, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1526 = eq(T_1503, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1528 = eq(T_1504, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1530 = eq(T_1505, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1532 = eq(T_1506, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1534 = eq(T_1507, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1536 = eq(T_1508, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1538 = eq(T_1509, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1540 = eq(T_1510, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_1541 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_1542 = or(T_1541, T_1526) @[Arbiter.scala 64:50]
    node T_1543 = and(T_1512, grantMask_1) @[Arbiter.scala 64:34]
    node T_1544 = or(T_1543, T_1528) @[Arbiter.scala 64:50]
    node T_1545 = and(T_1514, grantMask_2) @[Arbiter.scala 64:34]
    node T_1546 = or(T_1545, T_1530) @[Arbiter.scala 64:50]
    node T_1547 = and(T_1516, grantMask_3) @[Arbiter.scala 64:34]
    node T_1548 = or(T_1547, T_1532) @[Arbiter.scala 64:50]
    node T_1549 = and(T_1518, grantMask_4) @[Arbiter.scala 64:34]
    node T_1550 = or(T_1549, T_1534) @[Arbiter.scala 64:50]
    node T_1551 = and(T_1520, grantMask_5) @[Arbiter.scala 64:34]
    node T_1552 = or(T_1551, T_1536) @[Arbiter.scala 64:50]
    node T_1553 = and(T_1522, grantMask_6) @[Arbiter.scala 64:34]
    node T_1554 = or(T_1553, T_1538) @[Arbiter.scala 64:50]
    node T_1555 = and(T_1524, grantMask_7) @[Arbiter.scala 64:34]
    node T_1556 = or(T_1555, T_1540) @[Arbiter.scala 64:50]
    node T_1558 = eq(T_1464, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_1559 = mux(T_1466, T_1558, T_1542) @[Arbiter.scala 49:22]
    node T_1560 = and(T_1559, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_1560 @[Arbiter.scala 49:16]
    node T_1562 = eq(T_1464, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_1563 = mux(T_1466, T_1562, T_1544) @[Arbiter.scala 49:22]
    node T_1564 = and(T_1563, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_1564 @[Arbiter.scala 49:16]
    node T_1566 = eq(T_1464, UInt<2>("h02")) @[Arbiter.scala 49:39]
    node T_1567 = mux(T_1466, T_1566, T_1546) @[Arbiter.scala 49:22]
    node T_1568 = and(T_1567, io.out.ready) @[Arbiter.scala 49:55]
    io.in[2].ready <= T_1568 @[Arbiter.scala 49:16]
    node T_1570 = eq(T_1464, UInt<2>("h03")) @[Arbiter.scala 49:39]
    node T_1571 = mux(T_1466, T_1570, T_1548) @[Arbiter.scala 49:22]
    node T_1572 = and(T_1571, io.out.ready) @[Arbiter.scala 49:55]
    io.in[3].ready <= T_1572 @[Arbiter.scala 49:16]
    node T_1574 = eq(T_1464, UInt<3>("h04")) @[Arbiter.scala 49:39]
    node T_1575 = mux(T_1466, T_1574, T_1550) @[Arbiter.scala 49:22]
    node T_1576 = and(T_1575, io.out.ready) @[Arbiter.scala 49:55]
    io.in[4].ready <= T_1576 @[Arbiter.scala 49:16]
    node T_1578 = eq(T_1464, UInt<3>("h05")) @[Arbiter.scala 49:39]
    node T_1579 = mux(T_1466, T_1578, T_1552) @[Arbiter.scala 49:22]
    node T_1580 = and(T_1579, io.out.ready) @[Arbiter.scala 49:55]
    io.in[5].ready <= T_1580 @[Arbiter.scala 49:16]
    node T_1582 = eq(T_1464, UInt<3>("h06")) @[Arbiter.scala 49:39]
    node T_1583 = mux(T_1466, T_1582, T_1554) @[Arbiter.scala 49:22]
    node T_1584 = and(T_1583, io.out.ready) @[Arbiter.scala 49:55]
    io.in[6].ready <= T_1584 @[Arbiter.scala 49:16]
    node T_1586 = eq(T_1464, UInt<3>("h07")) @[Arbiter.scala 49:39]
    node T_1587 = mux(T_1466, T_1586, T_1556) @[Arbiter.scala 49:22]
    node T_1588 = and(T_1587, io.out.ready) @[Arbiter.scala 49:55]
    io.in[7].ready <= T_1588 @[Arbiter.scala 49:16]
    when io.in[6].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h06") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[5].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h05") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[4].valid : @[Arbiter.scala 69:27]
      choice <= UInt<3>("h04") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[3].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h03") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[2].valid : @[Arbiter.scala 69:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[1].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_7 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h07") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_6 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h06") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_5 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h05") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_4 : @[Arbiter.scala 71:25]
      choice <= UInt<3>("h04") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_3 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_2 : @[Arbiter.scala 71:25]
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module L2BroadcastHub : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}}
    
    io is invalid
    inst trackerList_0 of BufferedBroadcastVoluntaryReleaseTracker @[Broadcast.scala 17:13]
    trackerList_0.io is invalid
    trackerList_0.clk <= clk
    trackerList_0.reset <= reset
    inst trackerList_1 of BufferedBroadcastAcquireTracker @[Broadcast.scala 20:13]
    trackerList_1.io is invalid
    trackerList_1.clk <= clk
    trackerList_1.reset <= reset
    inst trackerList_2 of BufferedBroadcastAcquireTracker_1 @[Broadcast.scala 20:13]
    trackerList_2.io is invalid
    trackerList_2.clk <= clk
    trackerList_2.reset <= reset
    inst trackerList_3 of BufferedBroadcastAcquireTracker_2 @[Broadcast.scala 20:13]
    trackerList_3.io is invalid
    trackerList_3.clk <= clk
    trackerList_3.reset <= reset
    inst trackerList_4 of BufferedBroadcastAcquireTracker_3 @[Broadcast.scala 20:13]
    trackerList_4.io is invalid
    trackerList_4.clk <= clk
    trackerList_4.reset <= reset
    inst trackerList_5 of BufferedBroadcastAcquireTracker_4 @[Broadcast.scala 20:13]
    trackerList_5.io is invalid
    trackerList_5.clk <= clk
    trackerList_5.reset <= reset
    inst trackerList_6 of BufferedBroadcastAcquireTracker_5 @[Broadcast.scala 20:13]
    trackerList_6.io is invalid
    trackerList_6.clk <= clk
    trackerList_6.reset <= reset
    inst trackerList_7 of BufferedBroadcastAcquireTracker_6 @[Broadcast.scala 20:13]
    trackerList_7.io is invalid
    trackerList_7.clk <= clk
    trackerList_7.reset <= reset
    trackerList_0.io.incoherent <= io.incoherent @[Broadcast.scala 24:48]
    trackerList_1.io.incoherent <= io.incoherent @[Broadcast.scala 24:48]
    trackerList_2.io.incoherent <= io.incoherent @[Broadcast.scala 24:48]
    trackerList_3.io.incoherent <= io.incoherent @[Broadcast.scala 24:48]
    trackerList_4.io.incoherent <= io.incoherent @[Broadcast.scala 24:48]
    trackerList_5.io.incoherent <= io.incoherent @[Broadcast.scala 24:48]
    trackerList_6.io.incoherent <= io.incoherent @[Broadcast.scala 24:48]
    trackerList_7.io.incoherent <= io.incoherent @[Broadcast.scala 24:48]
    inst outer_arb of ClientTileLinkIOArbiter @[Broadcast.scala 28:25]
    outer_arb.io is invalid
    outer_arb.clk <= clk
    outer_arb.reset <= reset
    outer_arb.io.in[0] <- trackerList_0.io.outer @[Broadcast.scala 30:19]
    outer_arb.io.in[1] <- trackerList_1.io.outer @[Broadcast.scala 30:19]
    outer_arb.io.in[2] <- trackerList_2.io.outer @[Broadcast.scala 30:19]
    outer_arb.io.in[3] <- trackerList_3.io.outer @[Broadcast.scala 30:19]
    outer_arb.io.in[4] <- trackerList_4.io.outer @[Broadcast.scala 30:19]
    outer_arb.io.in[5] <- trackerList_5.io.outer @[Broadcast.scala 30:19]
    outer_arb.io.in[6] <- trackerList_6.io.outer @[Broadcast.scala 30:19]
    outer_arb.io.in[7] <- trackerList_7.io.outer @[Broadcast.scala 30:19]
    io.outer <- outer_arb.io.out @[Broadcast.scala 31:12]
    node T_1215 = and(io.inner.acquire.valid, io.inner.release.valid) @[Broadcast.scala 35:28]
    node T_1216 = eq(io.inner.release.bits.addr_block, io.inner.acquire.bits.addr_block) @[Definitions.scala 116:63]
    node irel_vs_iacq_conflict = and(T_1215, T_1216) @[Broadcast.scala 36:28]
    node T_1218 = eq(irel_vs_iacq_conflict, UInt<1>("h00")) @[Broadcast.scala 43:26]
    node T_1219 = cat(trackerList_1.io.inner.acquire.ready, trackerList_0.io.inner.acquire.ready) @[Cat.scala 20:58]
    node T_1220 = cat(trackerList_3.io.inner.acquire.ready, trackerList_2.io.inner.acquire.ready) @[Cat.scala 20:58]
    node T_1221 = cat(T_1220, T_1219) @[Cat.scala 20:58]
    node T_1222 = cat(trackerList_5.io.inner.acquire.ready, trackerList_4.io.inner.acquire.ready) @[Cat.scala 20:58]
    node T_1223 = cat(trackerList_7.io.inner.acquire.ready, trackerList_6.io.inner.acquire.ready) @[Cat.scala 20:58]
    node T_1224 = cat(T_1223, T_1222) @[Cat.scala 20:58]
    node T_1225 = cat(T_1224, T_1221) @[Cat.scala 20:58]
    node T_1226 = cat(trackerList_1.io.alloc.iacq.can, trackerList_0.io.alloc.iacq.can) @[Cat.scala 20:58]
    node T_1227 = cat(trackerList_3.io.alloc.iacq.can, trackerList_2.io.alloc.iacq.can) @[Cat.scala 20:58]
    node T_1228 = cat(T_1227, T_1226) @[Cat.scala 20:58]
    node T_1229 = cat(trackerList_5.io.alloc.iacq.can, trackerList_4.io.alloc.iacq.can) @[Cat.scala 20:58]
    node T_1230 = cat(trackerList_7.io.alloc.iacq.can, trackerList_6.io.alloc.iacq.can) @[Cat.scala 20:58]
    node T_1231 = cat(T_1230, T_1229) @[Cat.scala 20:58]
    node T_1232 = cat(T_1231, T_1228) @[Cat.scala 20:58]
    node T_1233 = bits(T_1232, 0, 0) @[OneHot.scala 63:71]
    node T_1234 = bits(T_1232, 1, 1) @[OneHot.scala 63:71]
    node T_1235 = bits(T_1232, 2, 2) @[OneHot.scala 63:71]
    node T_1236 = bits(T_1232, 3, 3) @[OneHot.scala 63:71]
    node T_1237 = bits(T_1232, 4, 4) @[OneHot.scala 63:71]
    node T_1238 = bits(T_1232, 5, 5) @[OneHot.scala 63:71]
    node T_1239 = bits(T_1232, 6, 6) @[OneHot.scala 63:71]
    node T_1240 = bits(T_1232, 7, 7) @[OneHot.scala 63:71]
    node T_1251 = mux(T_1240, UInt<8>("h080"), UInt<8>("h00")) @[Mux.scala 31:69]
    node T_1252 = mux(T_1239, UInt<8>("h040"), T_1251) @[Mux.scala 31:69]
    node T_1253 = mux(T_1238, UInt<8>("h020"), T_1252) @[Mux.scala 31:69]
    node T_1254 = mux(T_1237, UInt<8>("h010"), T_1253) @[Mux.scala 31:69]
    node T_1255 = mux(T_1236, UInt<8>("h08"), T_1254) @[Mux.scala 31:69]
    node T_1256 = mux(T_1235, UInt<8>("h04"), T_1255) @[Mux.scala 31:69]
    node T_1257 = mux(T_1234, UInt<8>("h02"), T_1256) @[Mux.scala 31:69]
    node T_1258 = mux(T_1233, UInt<8>("h01"), T_1257) @[Mux.scala 31:69]
    node T_1259 = cat(trackerList_1.io.alloc.iacq.matches, trackerList_0.io.alloc.iacq.matches) @[Cat.scala 20:58]
    node T_1260 = cat(trackerList_3.io.alloc.iacq.matches, trackerList_2.io.alloc.iacq.matches) @[Cat.scala 20:58]
    node T_1261 = cat(T_1260, T_1259) @[Cat.scala 20:58]
    node T_1262 = cat(trackerList_5.io.alloc.iacq.matches, trackerList_4.io.alloc.iacq.matches) @[Cat.scala 20:58]
    node T_1263 = cat(trackerList_7.io.alloc.iacq.matches, trackerList_6.io.alloc.iacq.matches) @[Cat.scala 20:58]
    node T_1264 = cat(T_1263, T_1262) @[Cat.scala 20:58]
    node T_1265 = cat(T_1264, T_1261) @[Cat.scala 20:58]
    node T_1267 = neq(T_1265, UInt<1>("h00")) @[Agents.scala 91:34]
    node T_1269 = eq(T_1267, UInt<1>("h00")) @[Agents.scala 91:22]
    node T_1271 = mux(T_1269, T_1232, T_1265) @[Agents.scala 94:21]
    node T_1272 = and(T_1271, T_1225) @[Agents.scala 94:62]
    node T_1274 = neq(T_1272, UInt<1>("h00")) @[Agents.scala 94:76]
    node T_1275 = and(T_1274, T_1218) @[Agents.scala 94:80]
    node T_1276 = and(T_1275, UInt<1>("h01")) @[Agents.scala 94:92]
    io.inner.acquire.ready <= T_1276 @[Agents.scala 94:14]
    node T_1277 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1278 = and(T_1277, T_1218) @[Agents.scala 96:41]
    trackerList_0.io.inner.acquire.valid <= T_1278 @[Agents.scala 96:17]
    trackerList_0.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 97:16]
    node T_1279 = bits(T_1258, 0, 0) @[Agents.scala 99:40]
    node T_1280 = and(T_1279, T_1269) @[Agents.scala 99:44]
    node T_1281 = and(T_1280, T_1218) @[Agents.scala 99:58]
    trackerList_0.io.alloc.iacq.should <= T_1281 @[Agents.scala 99:20]
    node T_1282 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1283 = and(T_1282, T_1218) @[Agents.scala 96:41]
    trackerList_1.io.inner.acquire.valid <= T_1283 @[Agents.scala 96:17]
    trackerList_1.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 97:16]
    node T_1284 = bits(T_1258, 1, 1) @[Agents.scala 99:40]
    node T_1285 = and(T_1284, T_1269) @[Agents.scala 99:44]
    node T_1286 = and(T_1285, T_1218) @[Agents.scala 99:58]
    trackerList_1.io.alloc.iacq.should <= T_1286 @[Agents.scala 99:20]
    node T_1287 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1288 = and(T_1287, T_1218) @[Agents.scala 96:41]
    trackerList_2.io.inner.acquire.valid <= T_1288 @[Agents.scala 96:17]
    trackerList_2.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 97:16]
    node T_1289 = bits(T_1258, 2, 2) @[Agents.scala 99:40]
    node T_1290 = and(T_1289, T_1269) @[Agents.scala 99:44]
    node T_1291 = and(T_1290, T_1218) @[Agents.scala 99:58]
    trackerList_2.io.alloc.iacq.should <= T_1291 @[Agents.scala 99:20]
    node T_1292 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1293 = and(T_1292, T_1218) @[Agents.scala 96:41]
    trackerList_3.io.inner.acquire.valid <= T_1293 @[Agents.scala 96:17]
    trackerList_3.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 97:16]
    node T_1294 = bits(T_1258, 3, 3) @[Agents.scala 99:40]
    node T_1295 = and(T_1294, T_1269) @[Agents.scala 99:44]
    node T_1296 = and(T_1295, T_1218) @[Agents.scala 99:58]
    trackerList_3.io.alloc.iacq.should <= T_1296 @[Agents.scala 99:20]
    node T_1297 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1298 = and(T_1297, T_1218) @[Agents.scala 96:41]
    trackerList_4.io.inner.acquire.valid <= T_1298 @[Agents.scala 96:17]
    trackerList_4.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 97:16]
    node T_1299 = bits(T_1258, 4, 4) @[Agents.scala 99:40]
    node T_1300 = and(T_1299, T_1269) @[Agents.scala 99:44]
    node T_1301 = and(T_1300, T_1218) @[Agents.scala 99:58]
    trackerList_4.io.alloc.iacq.should <= T_1301 @[Agents.scala 99:20]
    node T_1302 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1303 = and(T_1302, T_1218) @[Agents.scala 96:41]
    trackerList_5.io.inner.acquire.valid <= T_1303 @[Agents.scala 96:17]
    trackerList_5.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 97:16]
    node T_1304 = bits(T_1258, 5, 5) @[Agents.scala 99:40]
    node T_1305 = and(T_1304, T_1269) @[Agents.scala 99:44]
    node T_1306 = and(T_1305, T_1218) @[Agents.scala 99:58]
    trackerList_5.io.alloc.iacq.should <= T_1306 @[Agents.scala 99:20]
    node T_1307 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1308 = and(T_1307, T_1218) @[Agents.scala 96:41]
    trackerList_6.io.inner.acquire.valid <= T_1308 @[Agents.scala 96:17]
    trackerList_6.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 97:16]
    node T_1309 = bits(T_1258, 6, 6) @[Agents.scala 99:40]
    node T_1310 = and(T_1309, T_1269) @[Agents.scala 99:44]
    node T_1311 = and(T_1310, T_1218) @[Agents.scala 99:58]
    trackerList_6.io.alloc.iacq.should <= T_1311 @[Agents.scala 99:20]
    node T_1312 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1313 = and(T_1312, T_1218) @[Agents.scala 96:41]
    trackerList_7.io.inner.acquire.valid <= T_1313 @[Agents.scala 96:17]
    trackerList_7.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 97:16]
    node T_1314 = bits(T_1258, 7, 7) @[Agents.scala 99:40]
    node T_1315 = and(T_1314, T_1269) @[Agents.scala 99:44]
    node T_1316 = and(T_1315, T_1218) @[Agents.scala 99:58]
    trackerList_7.io.alloc.iacq.should <= T_1316 @[Agents.scala 99:20]
    node T_1317 = cat(trackerList_1.io.inner.release.ready, trackerList_0.io.inner.release.ready) @[Cat.scala 20:58]
    node T_1318 = cat(trackerList_3.io.inner.release.ready, trackerList_2.io.inner.release.ready) @[Cat.scala 20:58]
    node T_1319 = cat(T_1318, T_1317) @[Cat.scala 20:58]
    node T_1320 = cat(trackerList_5.io.inner.release.ready, trackerList_4.io.inner.release.ready) @[Cat.scala 20:58]
    node T_1321 = cat(trackerList_7.io.inner.release.ready, trackerList_6.io.inner.release.ready) @[Cat.scala 20:58]
    node T_1322 = cat(T_1321, T_1320) @[Cat.scala 20:58]
    node T_1323 = cat(T_1322, T_1319) @[Cat.scala 20:58]
    node T_1324 = cat(trackerList_1.io.alloc.irel.can, trackerList_0.io.alloc.irel.can) @[Cat.scala 20:58]
    node T_1325 = cat(trackerList_3.io.alloc.irel.can, trackerList_2.io.alloc.irel.can) @[Cat.scala 20:58]
    node T_1326 = cat(T_1325, T_1324) @[Cat.scala 20:58]
    node T_1327 = cat(trackerList_5.io.alloc.irel.can, trackerList_4.io.alloc.irel.can) @[Cat.scala 20:58]
    node T_1328 = cat(trackerList_7.io.alloc.irel.can, trackerList_6.io.alloc.irel.can) @[Cat.scala 20:58]
    node T_1329 = cat(T_1328, T_1327) @[Cat.scala 20:58]
    node T_1330 = cat(T_1329, T_1326) @[Cat.scala 20:58]
    node T_1331 = bits(T_1330, 0, 0) @[OneHot.scala 63:71]
    node T_1332 = bits(T_1330, 1, 1) @[OneHot.scala 63:71]
    node T_1333 = bits(T_1330, 2, 2) @[OneHot.scala 63:71]
    node T_1334 = bits(T_1330, 3, 3) @[OneHot.scala 63:71]
    node T_1335 = bits(T_1330, 4, 4) @[OneHot.scala 63:71]
    node T_1336 = bits(T_1330, 5, 5) @[OneHot.scala 63:71]
    node T_1337 = bits(T_1330, 6, 6) @[OneHot.scala 63:71]
    node T_1338 = bits(T_1330, 7, 7) @[OneHot.scala 63:71]
    node T_1349 = mux(T_1338, UInt<8>("h080"), UInt<8>("h00")) @[Mux.scala 31:69]
    node T_1350 = mux(T_1337, UInt<8>("h040"), T_1349) @[Mux.scala 31:69]
    node T_1351 = mux(T_1336, UInt<8>("h020"), T_1350) @[Mux.scala 31:69]
    node T_1352 = mux(T_1335, UInt<8>("h010"), T_1351) @[Mux.scala 31:69]
    node T_1353 = mux(T_1334, UInt<8>("h08"), T_1352) @[Mux.scala 31:69]
    node T_1354 = mux(T_1333, UInt<8>("h04"), T_1353) @[Mux.scala 31:69]
    node T_1355 = mux(T_1332, UInt<8>("h02"), T_1354) @[Mux.scala 31:69]
    node T_1356 = mux(T_1331, UInt<8>("h01"), T_1355) @[Mux.scala 31:69]
    node T_1357 = cat(trackerList_1.io.alloc.irel.matches, trackerList_0.io.alloc.irel.matches) @[Cat.scala 20:58]
    node T_1358 = cat(trackerList_3.io.alloc.irel.matches, trackerList_2.io.alloc.irel.matches) @[Cat.scala 20:58]
    node T_1359 = cat(T_1358, T_1357) @[Cat.scala 20:58]
    node T_1360 = cat(trackerList_5.io.alloc.irel.matches, trackerList_4.io.alloc.irel.matches) @[Cat.scala 20:58]
    node T_1361 = cat(trackerList_7.io.alloc.irel.matches, trackerList_6.io.alloc.irel.matches) @[Cat.scala 20:58]
    node T_1362 = cat(T_1361, T_1360) @[Cat.scala 20:58]
    node T_1363 = cat(T_1362, T_1359) @[Cat.scala 20:58]
    node T_1365 = neq(T_1363, UInt<1>("h00")) @[Agents.scala 91:34]
    node T_1367 = eq(T_1365, UInt<1>("h00")) @[Agents.scala 91:22]
    node T_1370 = mux(T_1367, T_1330, T_1363) @[Agents.scala 94:21]
    node T_1371 = and(T_1370, T_1323) @[Agents.scala 94:62]
    node T_1373 = neq(T_1371, UInt<1>("h00")) @[Agents.scala 94:76]
    node T_1374 = and(T_1373, UInt<1>("h01")) @[Agents.scala 94:80]
    node T_1375 = and(T_1374, UInt<1>("h01")) @[Agents.scala 94:92]
    io.inner.release.ready <= T_1375 @[Agents.scala 94:14]
    node T_1376 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1377 = and(T_1376, UInt<1>("h01")) @[Agents.scala 96:41]
    trackerList_0.io.inner.release.valid <= T_1377 @[Agents.scala 96:17]
    trackerList_0.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 97:16]
    node T_1378 = bits(T_1356, 0, 0) @[Agents.scala 99:40]
    node T_1379 = and(T_1378, T_1367) @[Agents.scala 99:44]
    node T_1380 = and(T_1379, UInt<1>("h01")) @[Agents.scala 99:58]
    trackerList_0.io.alloc.irel.should <= T_1380 @[Agents.scala 99:20]
    node T_1381 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1382 = and(T_1381, UInt<1>("h01")) @[Agents.scala 96:41]
    trackerList_1.io.inner.release.valid <= T_1382 @[Agents.scala 96:17]
    trackerList_1.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 97:16]
    node T_1383 = bits(T_1356, 1, 1) @[Agents.scala 99:40]
    node T_1384 = and(T_1383, T_1367) @[Agents.scala 99:44]
    node T_1385 = and(T_1384, UInt<1>("h01")) @[Agents.scala 99:58]
    trackerList_1.io.alloc.irel.should <= T_1385 @[Agents.scala 99:20]
    node T_1386 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1387 = and(T_1386, UInt<1>("h01")) @[Agents.scala 96:41]
    trackerList_2.io.inner.release.valid <= T_1387 @[Agents.scala 96:17]
    trackerList_2.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 97:16]
    node T_1388 = bits(T_1356, 2, 2) @[Agents.scala 99:40]
    node T_1389 = and(T_1388, T_1367) @[Agents.scala 99:44]
    node T_1390 = and(T_1389, UInt<1>("h01")) @[Agents.scala 99:58]
    trackerList_2.io.alloc.irel.should <= T_1390 @[Agents.scala 99:20]
    node T_1391 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1392 = and(T_1391, UInt<1>("h01")) @[Agents.scala 96:41]
    trackerList_3.io.inner.release.valid <= T_1392 @[Agents.scala 96:17]
    trackerList_3.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 97:16]
    node T_1393 = bits(T_1356, 3, 3) @[Agents.scala 99:40]
    node T_1394 = and(T_1393, T_1367) @[Agents.scala 99:44]
    node T_1395 = and(T_1394, UInt<1>("h01")) @[Agents.scala 99:58]
    trackerList_3.io.alloc.irel.should <= T_1395 @[Agents.scala 99:20]
    node T_1396 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1397 = and(T_1396, UInt<1>("h01")) @[Agents.scala 96:41]
    trackerList_4.io.inner.release.valid <= T_1397 @[Agents.scala 96:17]
    trackerList_4.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 97:16]
    node T_1398 = bits(T_1356, 4, 4) @[Agents.scala 99:40]
    node T_1399 = and(T_1398, T_1367) @[Agents.scala 99:44]
    node T_1400 = and(T_1399, UInt<1>("h01")) @[Agents.scala 99:58]
    trackerList_4.io.alloc.irel.should <= T_1400 @[Agents.scala 99:20]
    node T_1401 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1402 = and(T_1401, UInt<1>("h01")) @[Agents.scala 96:41]
    trackerList_5.io.inner.release.valid <= T_1402 @[Agents.scala 96:17]
    trackerList_5.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 97:16]
    node T_1403 = bits(T_1356, 5, 5) @[Agents.scala 99:40]
    node T_1404 = and(T_1403, T_1367) @[Agents.scala 99:44]
    node T_1405 = and(T_1404, UInt<1>("h01")) @[Agents.scala 99:58]
    trackerList_5.io.alloc.irel.should <= T_1405 @[Agents.scala 99:20]
    node T_1406 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1407 = and(T_1406, UInt<1>("h01")) @[Agents.scala 96:41]
    trackerList_6.io.inner.release.valid <= T_1407 @[Agents.scala 96:17]
    trackerList_6.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 97:16]
    node T_1408 = bits(T_1356, 6, 6) @[Agents.scala 99:40]
    node T_1409 = and(T_1408, T_1367) @[Agents.scala 99:44]
    node T_1410 = and(T_1409, UInt<1>("h01")) @[Agents.scala 99:58]
    trackerList_6.io.alloc.irel.should <= T_1410 @[Agents.scala 99:20]
    node T_1411 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 96:29]
    node T_1412 = and(T_1411, UInt<1>("h01")) @[Agents.scala 96:41]
    trackerList_7.io.inner.release.valid <= T_1412 @[Agents.scala 96:17]
    trackerList_7.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 97:16]
    node T_1413 = bits(T_1356, 7, 7) @[Agents.scala 99:40]
    node T_1414 = and(T_1413, T_1367) @[Agents.scala 99:44]
    node T_1415 = and(T_1414, UInt<1>("h01")) @[Agents.scala 99:58]
    trackerList_7.io.alloc.irel.should <= T_1415 @[Agents.scala 99:20]
    inst LockingRRArbiter_7_1 of LockingRRArbiter_7 @[Agents.scala 53:21]
    LockingRRArbiter_7_1.io is invalid
    LockingRRArbiter_7_1.clk <= clk
    LockingRRArbiter_7_1.reset <= reset
    io.inner.probe <- LockingRRArbiter_7_1.io.out @[Agents.scala 54:9]
    LockingRRArbiter_7_1.io.in[0] <- trackerList_0.io.inner.probe @[Agents.scala 55:15]
    LockingRRArbiter_7_1.io.in[1] <- trackerList_1.io.inner.probe @[Agents.scala 55:15]
    LockingRRArbiter_7_1.io.in[2] <- trackerList_2.io.inner.probe @[Agents.scala 55:15]
    LockingRRArbiter_7_1.io.in[3] <- trackerList_3.io.inner.probe @[Agents.scala 55:15]
    LockingRRArbiter_7_1.io.in[4] <- trackerList_4.io.inner.probe @[Agents.scala 55:15]
    LockingRRArbiter_7_1.io.in[5] <- trackerList_5.io.inner.probe @[Agents.scala 55:15]
    LockingRRArbiter_7_1.io.in[6] <- trackerList_6.io.inner.probe @[Agents.scala 55:15]
    LockingRRArbiter_7_1.io.in[7] <- trackerList_7.io.inner.probe @[Agents.scala 55:15]
    inst LockingRRArbiter_8_1 of LockingRRArbiter_8 @[Agents.scala 53:21]
    LockingRRArbiter_8_1.io is invalid
    LockingRRArbiter_8_1.clk <= clk
    LockingRRArbiter_8_1.reset <= reset
    io.inner.grant <- LockingRRArbiter_8_1.io.out @[Agents.scala 54:9]
    LockingRRArbiter_8_1.io.in[0] <- trackerList_0.io.inner.grant @[Agents.scala 55:15]
    LockingRRArbiter_8_1.io.in[1] <- trackerList_1.io.inner.grant @[Agents.scala 55:15]
    LockingRRArbiter_8_1.io.in[2] <- trackerList_2.io.inner.grant @[Agents.scala 55:15]
    LockingRRArbiter_8_1.io.in[3] <- trackerList_3.io.inner.grant @[Agents.scala 55:15]
    LockingRRArbiter_8_1.io.in[4] <- trackerList_4.io.inner.grant @[Agents.scala 55:15]
    LockingRRArbiter_8_1.io.in[5] <- trackerList_5.io.inner.grant @[Agents.scala 55:15]
    LockingRRArbiter_8_1.io.in[6] <- trackerList_6.io.inner.grant @[Agents.scala 55:15]
    LockingRRArbiter_8_1.io.in[7] <- trackerList_7.io.inner.grant @[Agents.scala 55:15]
    trackerList_0.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 62:21]
    trackerList_1.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 62:21]
    trackerList_2.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 62:21]
    trackerList_3.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 62:21]
    trackerList_4.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 62:21]
    trackerList_5.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 62:21]
    trackerList_6.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 62:21]
    trackerList_7.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 62:21]
    node T_1417 = eq(io.inner.finish.bits.manager_xact_id, UInt<1>("h00")) @[Agents.scala 63:70]
    node T_1418 = and(io.inner.finish.valid, T_1417) @[Agents.scala 63:63]
    trackerList_0.io.inner.finish.valid <= T_1418 @[Agents.scala 63:51]
    node T_1420 = eq(io.inner.finish.bits.manager_xact_id, UInt<1>("h01")) @[Agents.scala 63:70]
    node T_1421 = and(io.inner.finish.valid, T_1420) @[Agents.scala 63:63]
    trackerList_1.io.inner.finish.valid <= T_1421 @[Agents.scala 63:51]
    node T_1423 = eq(io.inner.finish.bits.manager_xact_id, UInt<2>("h02")) @[Agents.scala 63:70]
    node T_1424 = and(io.inner.finish.valid, T_1423) @[Agents.scala 63:63]
    trackerList_2.io.inner.finish.valid <= T_1424 @[Agents.scala 63:51]
    node T_1426 = eq(io.inner.finish.bits.manager_xact_id, UInt<2>("h03")) @[Agents.scala 63:70]
    node T_1427 = and(io.inner.finish.valid, T_1426) @[Agents.scala 63:63]
    trackerList_3.io.inner.finish.valid <= T_1427 @[Agents.scala 63:51]
    node T_1429 = eq(io.inner.finish.bits.manager_xact_id, UInt<3>("h04")) @[Agents.scala 63:70]
    node T_1430 = and(io.inner.finish.valid, T_1429) @[Agents.scala 63:63]
    trackerList_4.io.inner.finish.valid <= T_1430 @[Agents.scala 63:51]
    node T_1432 = eq(io.inner.finish.bits.manager_xact_id, UInt<3>("h05")) @[Agents.scala 63:70]
    node T_1433 = and(io.inner.finish.valid, T_1432) @[Agents.scala 63:63]
    trackerList_5.io.inner.finish.valid <= T_1433 @[Agents.scala 63:51]
    node T_1435 = eq(io.inner.finish.bits.manager_xact_id, UInt<3>("h06")) @[Agents.scala 63:70]
    node T_1436 = and(io.inner.finish.valid, T_1435) @[Agents.scala 63:63]
    trackerList_6.io.inner.finish.valid <= T_1436 @[Agents.scala 63:51]
    node T_1438 = eq(io.inner.finish.bits.manager_xact_id, UInt<3>("h07")) @[Agents.scala 63:70]
    node T_1439 = and(io.inner.finish.valid, T_1438) @[Agents.scala 63:63]
    trackerList_7.io.inner.finish.valid <= T_1439 @[Agents.scala 63:51]
    node T_1441 = and(io.inner.finish.bits.manager_xact_id, UInt<2>("h03")) @[Package.scala 18:26]
    node T_1443 = geq(io.inner.finish.bits.manager_xact_id, UInt<3>("h04")) @[Package.scala 19:17]
    node T_1445 = and(T_1441, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1447 = geq(T_1441, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1449 = and(T_1445, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1451 = geq(T_1445, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1452 = mux(T_1451, trackerList_7.io.inner.finish.ready, trackerList_6.io.inner.finish.ready) @[Package.scala 19:12]
    node T_1454 = and(T_1445, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1456 = geq(T_1445, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1457 = mux(T_1456, trackerList_5.io.inner.finish.ready, trackerList_4.io.inner.finish.ready) @[Package.scala 19:12]
    node T_1458 = mux(T_1447, T_1452, T_1457) @[Package.scala 19:12]
    node T_1460 = and(T_1441, UInt<1>("h01")) @[Package.scala 18:26]
    node T_1462 = geq(T_1441, UInt<2>("h02")) @[Package.scala 19:17]
    node T_1464 = and(T_1460, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1466 = geq(T_1460, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1467 = mux(T_1466, trackerList_3.io.inner.finish.ready, trackerList_2.io.inner.finish.ready) @[Package.scala 19:12]
    node T_1469 = and(T_1460, UInt<1>("h00")) @[Package.scala 18:26]
    node T_1471 = geq(T_1460, UInt<1>("h01")) @[Package.scala 19:17]
    node T_1472 = mux(T_1471, trackerList_1.io.inner.finish.ready, trackerList_0.io.inner.finish.ready) @[Package.scala 19:12]
    node T_1473 = mux(T_1462, T_1467, T_1472) @[Package.scala 19:12]
    node T_1474 = mux(T_1443, T_1458, T_1473) @[Package.scala 19:12]
    io.inner.finish.ready <= T_1474 @[Agents.scala 64:14]
    io.outer.probe.ready <= UInt<1>("h00") @[Agents.scala 159:26]
    io.outer.finish.valid <= UInt<1>("h00") @[Agents.scala 160:27]
    node T_1478 = eq(io.outer.probe.valid, UInt<1>("h00")) @[Agents.scala 161:12]
    node T_1479 = or(T_1478, reset) @[Agents.scala 161:11]
    node T_1481 = eq(T_1479, UInt<1>("h00")) @[Agents.scala 161:11]
    when T_1481 : @[Agents.scala 161:11]
      printf(clk, UInt<1>(1), "Assertion failed: L2 agent got illegal probe\n    at Agents.scala:161 assert(!io.outer.probe.valid, \"L2 agent got illegal probe\")\n") @[Agents.scala 161:11]
      stop(clk, UInt<1>(1), 1) @[Agents.scala 161:11]
      skip @[Agents.scala 161:11]
    
  module MMIOTileLinkManager : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    io.inner.probe.valid <= UInt<1>("h00") @[Mmio.scala 17:24]
    io.inner.release.ready <= UInt<1>("h00") @[Mmio.scala 18:26]
    node T_880 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_882 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_889 : UInt<3>[1] @[Definitions.scala 355:35]
    T_889 is invalid @[Definitions.scala 355:35]
    T_889[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_891 = eq(io.outer.acquire.bits.a_type, T_889[0]) @[Package.scala 7:47]
    node T_892 = and(T_882, T_891) @[Definitions.scala 231:89]
    node multibeat_fire = and(T_880, T_892) @[Mmio.scala 20:48]
    node T_894 = eq(io.outer.acquire.bits.addr_beat, UInt<1>("h00")) @[Mmio.scala 21:63]
    node multibeat_start = and(multibeat_fire, T_894) @[Mmio.scala 21:40]
    node T_896 = eq(io.outer.acquire.bits.addr_beat, UInt<3>("h07")) @[Mmio.scala 22:61]
    node multibeat_end = and(multibeat_fire, T_896) @[Mmio.scala 22:38]
    reg xact_pending : UInt<9>, clk with : (reset => (reset, UInt<9>("h00")))
    node T_898 = not(xact_pending) @[Mmio.scala 29:37]
    node T_899 = bits(T_898, 0, 0) @[OneHot.scala 35:40]
    node T_900 = bits(T_898, 1, 1) @[OneHot.scala 35:40]
    node T_901 = bits(T_898, 2, 2) @[OneHot.scala 35:40]
    node T_902 = bits(T_898, 3, 3) @[OneHot.scala 35:40]
    node T_903 = bits(T_898, 4, 4) @[OneHot.scala 35:40]
    node T_904 = bits(T_898, 5, 5) @[OneHot.scala 35:40]
    node T_905 = bits(T_898, 6, 6) @[OneHot.scala 35:40]
    node T_906 = bits(T_898, 7, 7) @[OneHot.scala 35:40]
    node T_907 = bits(T_898, 8, 8) @[OneHot.scala 35:40]
    node T_917 = mux(T_906, UInt<3>("h07"), UInt<4>("h08")) @[Mux.scala 31:69]
    node T_918 = mux(T_905, UInt<3>("h06"), T_917) @[Mux.scala 31:69]
    node T_919 = mux(T_904, UInt<3>("h05"), T_918) @[Mux.scala 31:69]
    node T_920 = mux(T_903, UInt<3>("h04"), T_919) @[Mux.scala 31:69]
    node T_921 = mux(T_902, UInt<2>("h03"), T_920) @[Mux.scala 31:69]
    node T_922 = mux(T_901, UInt<2>("h02"), T_921) @[Mux.scala 31:69]
    node T_923 = mux(T_900, UInt<1>("h01"), T_922) @[Mux.scala 31:69]
    node xact_id_sel = mux(T_899, UInt<1>("h00"), T_923) @[Mux.scala 31:69]
    reg xact_id_reg : UInt<4>, clk
    when multibeat_start : @[Reg.scala 29:19]
      xact_id_reg <= xact_id_sel @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    reg xact_multibeat : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node outer_xact_id = mux(xact_multibeat, xact_id_reg, xact_id_sel) @[Mmio.scala 32:26]
    node T_925 = not(xact_pending) @[Mmio.scala 33:33]
    node T_927 = eq(T_925, UInt<1>("h00")) @[Mmio.scala 33:33]
    node xact_free = eq(T_927, UInt<1>("h00")) @[Mmio.scala 33:19]
    reg xact_buffer : {client_id : UInt<1>, client_xact_id : UInt<1>}[9], clk
    node T_1464 = and(io.outer.acquire.ready, xact_free) @[Mmio.scala 36:52]
    io.inner.acquire.ready <= T_1464 @[Mmio.scala 36:26]
    node T_1465 = and(io.inner.acquire.valid, xact_free) @[Mmio.scala 37:52]
    io.outer.acquire.valid <= T_1465 @[Mmio.scala 37:26]
    io.outer.acquire.bits <- io.inner.acquire.bits @[Mmio.scala 38:26]
    io.outer.acquire.bits.client_xact_id <= outer_xact_id @[Mmio.scala 39:40]
    node T_1466 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_1468 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1475 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1475 is invalid @[Definitions.scala 355:35]
    T_1475[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1477 = eq(io.outer.acquire.bits.a_type, T_1475[0]) @[Package.scala 7:47]
    node T_1478 = and(T_1468, T_1477) @[Definitions.scala 231:89]
    node T_1480 = eq(T_1478, UInt<1>("h00")) @[Mmio.scala 42:5]
    node T_1482 = eq(io.outer.acquire.bits.addr_beat, UInt<3>("h07")) @[Mmio.scala 42:44]
    node T_1483 = or(T_1480, T_1482) @[Mmio.scala 42:28]
    node T_1484 = and(T_1466, T_1483) @[Mmio.scala 45:19]
    node T_1486 = dshl(UInt<1>("h01"), io.outer.acquire.bits.client_xact_id) @[OneHot.scala 44:15]
    node T_1488 = mux(T_1484, T_1486, UInt<1>("h00")) @[Mmio.scala 45:8]
    node T_1489 = or(xact_pending, T_1488) @[Mmio.scala 54:33]
    node T_1490 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 21:42]
    node T_1492 = dshl(UInt<1>("h01"), io.inner.finish.bits.manager_xact_id) @[OneHot.scala 44:15]
    node T_1494 = mux(T_1490, T_1492, UInt<1>("h00")) @[Mmio.scala 52:9]
    node T_1495 = not(T_1494) @[Mmio.scala 52:5]
    node T_1496 = and(T_1489, T_1495) @[Mmio.scala 54:73]
    node T_1497 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 21:42]
    wire T_1505 : UInt<3>[1] @[Definitions.scala 853:34]
    T_1505 is invalid @[Definitions.scala 853:34]
    T_1505[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_1507 = eq(io.inner.grant.bits.g_type, T_1505[0]) @[Package.scala 7:47]
    node T_1508 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_1509 = mux(io.inner.grant.bits.is_builtin_type, T_1507, T_1508) @[Definitions.scala 274:33]
    node T_1510 = and(UInt<1>("h01"), T_1509) @[Definitions.scala 274:27]
    node T_1512 = eq(T_1510, UInt<1>("h00")) @[Mmio.scala 42:5]
    node T_1514 = eq(io.inner.grant.bits.addr_beat, UInt<3>("h07")) @[Mmio.scala 42:44]
    node T_1515 = or(T_1512, T_1514) @[Mmio.scala 42:28]
    node T_1516 = and(T_1497, T_1515) @[Mmio.scala 48:20]
    node T_1519 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43]
    node T_1521 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70]
    node T_1522 = and(io.inner.grant.bits.is_builtin_type, T_1521) @[Definitions.scala 277:59]
    node T_1524 = eq(T_1522, UInt<1>("h00")) @[Definitions.scala 278:92]
    node T_1525 = and(T_1519, T_1524) @[Definitions.scala 278:89]
    node T_1527 = eq(T_1525, UInt<1>("h00")) @[Mmio.scala 48:46]
    node T_1528 = and(T_1516, T_1527) @[Mmio.scala 48:43]
    node T_1530 = dshl(UInt<1>("h01"), io.inner.grant.bits.manager_xact_id) @[OneHot.scala 44:15]
    node T_1532 = mux(T_1528, T_1530, UInt<1>("h00")) @[Mmio.scala 48:9]
    node T_1533 = not(T_1532) @[Mmio.scala 48:5]
    node T_1534 = and(T_1496, T_1533) @[Mmio.scala 55:73]
    xact_pending <= T_1534 @[Mmio.scala 54:16]
    node T_1535 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 21:42]
    node T_1537 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1544 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1544 is invalid @[Definitions.scala 355:35]
    T_1544[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1546 = eq(io.outer.acquire.bits.a_type, T_1544[0]) @[Package.scala 7:47]
    node T_1547 = and(T_1537, T_1546) @[Definitions.scala 231:89]
    node T_1549 = eq(T_1547, UInt<1>("h00")) @[Mmio.scala 42:5]
    node T_1551 = eq(io.outer.acquire.bits.addr_beat, UInt<3>("h07")) @[Mmio.scala 42:44]
    node T_1552 = or(T_1549, T_1551) @[Mmio.scala 42:28]
    node T_1553 = and(T_1535, T_1552) @[Mmio.scala 58:33]
    when T_1553 : @[Mmio.scala 58:71]
      xact_buffer[outer_xact_id] <- io.inner.acquire.bits @[Mmio.scala 59:32]
      skip @[Mmio.scala 58:71]
    when multibeat_start : @[Mmio.scala 62:26]
      xact_multibeat <= UInt<1>("h01") @[Mmio.scala 62:43]
      skip @[Mmio.scala 62:26]
    when multibeat_end : @[Mmio.scala 63:26]
      xact_multibeat <= UInt<1>("h00") @[Mmio.scala 63:43]
      skip @[Mmio.scala 63:26]
    io.outer.grant.ready <= io.inner.grant.ready @[Mmio.scala 66:24]
    io.inner.grant.valid <= io.outer.grant.valid @[Mmio.scala 67:24]
    io.inner.grant.bits <- io.outer.grant.bits @[Mmio.scala 68:24]
    io.inner.grant.bits.client_id <= xact_buffer[io.outer.grant.bits.client_xact_id].client_id @[Mmio.scala 69:33]
    io.inner.grant.bits.client_xact_id <= xact_buffer[io.outer.grant.bits.client_xact_id].client_xact_id @[Mmio.scala 70:38]
    io.inner.grant.bits.manager_xact_id <= io.outer.grant.bits.client_xact_id @[Mmio.scala 71:39]
    io.inner.finish.ready <= UInt<1>("h01") @[Mmio.scala 72:25]
    
  module ClientUncachedTileLinkIOArbiter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    io.out <- io.in[0] @[Arbiters.scala 181:19]
    
  module TileLinkMemoryInterconnect : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1]}
    
    io is invalid
    inst ClientUncachedTileLinkIOArbiter_1_1 of ClientUncachedTileLinkIOArbiter_1 @[Interconnect.scala 309:28]
    ClientUncachedTileLinkIOArbiter_1_1.io is invalid
    ClientUncachedTileLinkIOArbiter_1_1.clk <= clk
    ClientUncachedTileLinkIOArbiter_1_1.reset <= reset
    ClientUncachedTileLinkIOArbiter_1_1.io.in[0] <- io.in[0] @[Interconnect.scala 310:22]
    io.out[0] <- ClientUncachedTileLinkIOArbiter_1_1.io.out @[Interconnect.scala 299:11]
    node T_3009 = dshr(ClientUncachedTileLinkIOArbiter_1_1.io.out.acquire.bits.addr_block, UInt<1>("h00")) @[Interconnect.scala 300:68]
    io.out[0].acquire.bits.addr_block <= T_3009 @[Interconnect.scala 300:35]
    
  module LockingRRArbiter_9 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_766 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_768 : UInt, clk
    node T_770 = neq(T_766, UInt<1>("h00")) @[Arbiter.scala 39:34]
    node T_772 = and(UInt<1>("h01"), io.out.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_779 : UInt<3>[1] @[Definitions.scala 355:35]
    T_779 is invalid @[Definitions.scala 355:35]
    T_779[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_781 = eq(io.out.bits.a_type, T_779[0]) @[Package.scala 7:47]
    node T_782 = and(T_772, T_781) @[Definitions.scala 231:89]
    node T_783 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_784 = and(T_783, T_782) @[Arbiter.scala 42:25]
    when T_784 : @[Arbiter.scala 42:39]
      T_768 <= io.chosen @[Arbiter.scala 43:15]
      node T_786 = eq(T_766, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_788 = add(T_766, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_789 = tail(T_788, 1) @[Counter.scala 21:22]
      T_766 <= T_789 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_770 : @[Arbiter.scala 47:19]
      io.chosen <= T_768 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_791 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<1>, clk
    when T_791 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node T_794 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_795 = or(T_794, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_797 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_799 = eq(T_794, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_801 = eq(T_795, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_802 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_803 = or(T_802, T_799) @[Arbiter.scala 64:50]
    node T_804 = and(T_797, grantMask_1) @[Arbiter.scala 64:34]
    node T_805 = or(T_804, T_801) @[Arbiter.scala 64:50]
    node T_807 = eq(T_768, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_808 = mux(T_770, T_807, T_803) @[Arbiter.scala 49:22]
    node T_809 = and(T_808, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_809 @[Arbiter.scala 49:16]
    node T_811 = eq(T_768, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_812 = mux(T_770, T_811, T_805) @[Arbiter.scala 49:22]
    node T_813 = and(T_812, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_813 @[Arbiter.scala 49:16]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module ReorderQueue : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<1>, tag : UInt<4>}}, deq : {flip valid : UInt<1>, flip tag : UInt<4>, data : UInt<1>, matches : UInt<1>}}
    
    io is invalid
    cmem T_31 : UInt<1>[16] @[ReorderQueue.scala 67:23]
    wire T_53 : UInt<1>[16] @[ReorderQueue.scala 68:53]
    T_53 is invalid @[ReorderQueue.scala 68:53]
    T_53[0] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[1] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[2] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[3] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[4] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[5] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[6] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[7] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[8] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[9] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[10] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[11] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[12] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[13] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[14] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_53[15] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    reg T_57 : UInt<1>[16], clk with : (reset => (reset, T_53))
    io.enq.ready <= T_57[io.enq.bits.tag] @[ReorderQueue.scala 70:18]
    infer mport T_59 = T_31[io.deq.tag], clk
    io.deq.data <= T_59 @[ReorderQueue.scala 71:17]
    node T_61 = eq(T_57[io.deq.tag], UInt<1>("h00")) @[ReorderQueue.scala 72:23]
    io.deq.matches <= T_61 @[ReorderQueue.scala 72:20]
    node T_62 = and(io.enq.valid, io.enq.ready) @[ReorderQueue.scala 74:24]
    when T_62 : @[ReorderQueue.scala 74:41]
      infer mport T_63 = T_31[io.enq.bits.tag], clk
      T_63 <= io.enq.bits.data @[ReorderQueue.scala 75:33]
      T_57[io.enq.bits.tag] <= UInt<1>("h00") @[ReorderQueue.scala 76:33]
      skip @[ReorderQueue.scala 74:41]
    when io.deq.valid : @[ReorderQueue.scala 79:25]
      T_57[io.deq.tag] <= UInt<1>("h01") @[ReorderQueue.scala 80:28]
      skip @[ReorderQueue.scala 79:25]
    
  module ClientTileLinkIOUnwrapper : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    inst acqArb of LockingRRArbiter_9 @[Tilelink.scala 57:22]
    acqArb.io is invalid
    acqArb.clk <= clk
    acqArb.reset <= reset
    inst acqRoq of ReorderQueue @[Tilelink.scala 60:22]
    acqRoq.io is invalid
    acqRoq.clk <= clk
    acqRoq.reset <= reset
    inst relRoq of ReorderQueue @[Tilelink.scala 61:22]
    relRoq.io is invalid
    relRoq.clk <= clk
    relRoq.reset <= reset
    node T_1359 = and(UInt<1>("h01"), io.in.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_1366 : UInt<3>[1] @[Definitions.scala 355:35]
    T_1366 is invalid @[Definitions.scala 355:35]
    T_1366[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_1368 = eq(io.in.acquire.bits.a_type, T_1366[0]) @[Package.scala 7:47]
    node T_1369 = and(T_1359, T_1368) @[Definitions.scala 231:89]
    node T_1371 = eq(T_1369, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1373 = eq(io.in.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node acq_roq_enq = or(T_1371, T_1373) @[Definitions.scala 141:57]
    node T_1375 = eq(io.in.release.bits.r_type, UInt<3>("h00")) @[Package.scala 7:47]
    node T_1376 = eq(io.in.release.bits.r_type, UInt<3>("h01")) @[Package.scala 7:47]
    node T_1377 = eq(io.in.release.bits.r_type, UInt<3>("h02")) @[Package.scala 7:47]
    node T_1378 = or(T_1375, T_1376) @[Package.scala 7:62]
    node T_1379 = or(T_1378, T_1377) @[Package.scala 7:62]
    node T_1380 = and(UInt<1>("h01"), T_1379) @[Definitions.scala 256:64]
    node T_1382 = eq(T_1380, UInt<1>("h00")) @[Definitions.scala 141:37]
    node T_1384 = eq(io.in.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71]
    node rel_roq_enq = or(T_1382, T_1384) @[Definitions.scala 141:57]
    node T_1386 = eq(acq_roq_enq, UInt<1>("h00")) @[Tilelink.scala 70:23]
    node acq_roq_ready = or(T_1386, acqRoq.io.enq.ready) @[Tilelink.scala 70:36]
    node T_1388 = eq(rel_roq_enq, UInt<1>("h00")) @[Tilelink.scala 71:23]
    node rel_roq_ready = or(T_1388, relRoq.io.enq.ready) @[Tilelink.scala 71:36]
    node T_1389 = and(io.in.acquire.valid, acqArb.io.in[0].ready) @[Misc.scala 26:53]
    node T_1390 = and(T_1389, acq_roq_enq) @[Misc.scala 26:53]
    acqRoq.io.enq.valid <= T_1390 @[Tilelink.scala 83:23]
    acqRoq.io.enq.bits.data <= io.in.acquire.bits.is_builtin_type @[Tilelink.scala 84:27]
    acqRoq.io.enq.bits.tag <= io.in.acquire.bits.client_xact_id @[Tilelink.scala 85:26]
    node T_1391 = and(io.in.acquire.valid, acq_roq_ready) @[Misc.scala 26:53]
    acqArb.io.in[0].valid <= T_1391 @[Tilelink.scala 87:25]
    node T_1394 = mux(io.in.acquire.bits.is_builtin_type, io.in.acquire.bits.a_type, UInt<3>("h01")) @[Tilelink.scala 90:17]
    wire T_1423 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_1423 is invalid @[Definitions.scala 417:19]
    T_1423.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_1423.a_type <= T_1394 @[Definitions.scala 419:16]
    T_1423.client_xact_id <= io.in.acquire.bits.client_xact_id @[Definitions.scala 420:24]
    T_1423.addr_block <= io.in.acquire.bits.addr_block @[Definitions.scala 421:20]
    T_1423.addr_beat <= io.in.acquire.bits.addr_beat @[Definitions.scala 422:19]
    T_1423.data <= io.in.acquire.bits.data @[Definitions.scala 423:14]
    T_1423.union <= io.in.acquire.bits.union @[Definitions.scala 424:15]
    acqArb.io.in[0].bits <- T_1423 @[Tilelink.scala 88:24]
    node T_1451 = and(acq_roq_ready, acqArb.io.in[0].ready) @[Misc.scala 26:53]
    io.in.acquire.ready <= T_1451 @[Tilelink.scala 97:23]
    node T_1452 = and(io.in.release.valid, acqArb.io.in[1].ready) @[Misc.scala 26:53]
    node T_1453 = and(T_1452, rel_roq_enq) @[Misc.scala 26:53]
    relRoq.io.enq.valid <= T_1453 @[Tilelink.scala 99:23]
    relRoq.io.enq.bits.data <= io.in.release.bits.voluntary @[Tilelink.scala 100:27]
    relRoq.io.enq.bits.tag <= io.in.release.bits.client_xact_id @[Tilelink.scala 101:26]
    node T_1454 = and(io.in.release.valid, rel_roq_ready) @[Misc.scala 26:53]
    acqArb.io.in[1].valid <= T_1454 @[Tilelink.scala 103:25]
    node T_1478 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
    node T_1504 = or(UInt<3>("h00"), UInt<1>("h00")) @[Definitions.scala 386:49]
    node T_1505 = bits(T_1504, 2, 0) @[Definitions.scala 386:61]
    node T_1507 = or(UInt<2>("h00"), UInt<1>("h00")) @[Definitions.scala 387:61]
    node T_1508 = bits(T_1507, 1, 0) @[Definitions.scala 387:76]
    node T_1510 = or(UInt<5>("h00"), UInt<1>("h00")) @[Definitions.scala 388:36]
    node T_1511 = bits(T_1510, 4, 0) @[Definitions.scala 388:45]
    node T_1513 = or(UInt<8>("h00"), T_1478) @[Definitions.scala 389:46]
    node T_1514 = bits(T_1513, 7, 0) @[Definitions.scala 389:54]
    node T_1517 = cat(T_1511, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1518 = cat(T_1505, T_1508) @[Cat.scala 20:58]
    node T_1519 = cat(T_1518, T_1517) @[Cat.scala 20:58]
    node T_1521 = cat(T_1508, T_1511) @[Cat.scala 20:58]
    node T_1522 = cat(T_1521, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1524 = cat(T_1514, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1526 = cat(T_1514, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1528 = cat(T_1511, UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1529 = cat(T_1505, T_1508) @[Cat.scala 20:58]
    node T_1530 = cat(T_1529, T_1528) @[Cat.scala 20:58]
    node T_1532 = cat(UInt<5>("h00"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1534 = cat(UInt<5>("h01"), UInt<1>("h01")) @[Cat.scala 20:58]
    node T_1535 = eq(UInt<3>("h06"), UInt<3>("h03")) @[Mux.scala 46:19]
    node T_1536 = mux(T_1535, T_1534, UInt<1>("h00")) @[Mux.scala 46:16]
    node T_1537 = eq(UInt<3>("h05"), UInt<3>("h03")) @[Mux.scala 46:19]
    node T_1538 = mux(T_1537, T_1532, T_1536) @[Mux.scala 46:16]
    node T_1539 = eq(UInt<3>("h04"), UInt<3>("h03")) @[Mux.scala 46:19]
    node T_1540 = mux(T_1539, T_1530, T_1538) @[Mux.scala 46:16]
    node T_1541 = eq(UInt<3>("h03"), UInt<3>("h03")) @[Mux.scala 46:19]
    node T_1542 = mux(T_1541, T_1526, T_1540) @[Mux.scala 46:16]
    node T_1543 = eq(UInt<3>("h02"), UInt<3>("h03")) @[Mux.scala 46:19]
    node T_1544 = mux(T_1543, T_1524, T_1542) @[Mux.scala 46:16]
    node T_1545 = eq(UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:19]
    node T_1546 = mux(T_1545, T_1522, T_1544) @[Mux.scala 46:16]
    node T_1547 = eq(UInt<3>("h00"), UInt<3>("h03")) @[Mux.scala 46:19]
    node T_1548 = mux(T_1547, T_1519, T_1546) @[Mux.scala 46:16]
    wire T_1577 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>} @[Definitions.scala 417:19]
    T_1577 is invalid @[Definitions.scala 417:19]
    T_1577.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 418:25]
    T_1577.a_type <= UInt<3>("h03") @[Definitions.scala 419:16]
    T_1577.client_xact_id <= io.in.release.bits.client_xact_id @[Definitions.scala 420:24]
    T_1577.addr_block <= io.in.release.bits.addr_block @[Definitions.scala 421:20]
    T_1577.addr_beat <= io.in.release.bits.addr_beat @[Definitions.scala 422:19]
    T_1577.data <= io.in.release.bits.data @[Definitions.scala 423:14]
    T_1577.union <= T_1548 @[Definitions.scala 424:15]
    acqArb.io.in[1].bits <- T_1577 @[Tilelink.scala 104:24]
    node T_1605 = and(rel_roq_ready, acqArb.io.in[1].ready) @[Misc.scala 26:53]
    io.in.release.ready <= T_1605 @[Tilelink.scala 109:23]
    io.out.acquire <- acqArb.io.out @[Tilelink.scala 111:18]
    node T_1606 = and(io.out.grant.ready, io.out.grant.valid) @[Decoupled.scala 21:42]
    wire T_1614 : UInt<3>[1] @[Definitions.scala 853:34]
    T_1614 is invalid @[Definitions.scala 853:34]
    T_1614[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_1616 = eq(io.out.grant.bits.g_type, T_1614[0]) @[Package.scala 7:47]
    node T_1617 = eq(io.out.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_1618 = mux(io.out.grant.bits.is_builtin_type, T_1616, T_1617) @[Definitions.scala 274:33]
    node T_1619 = and(UInt<1>("h01"), T_1618) @[Definitions.scala 274:27]
    node T_1621 = eq(T_1619, UInt<1>("h00")) @[Definitions.scala 142:36]
    node T_1623 = eq(io.out.grant.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69]
    node T_1624 = or(T_1621, T_1623) @[Definitions.scala 142:56]
    node grant_deq_roq = and(T_1606, T_1624) @[Tilelink.scala 113:43]
    node T_1625 = and(acqRoq.io.deq.matches, grant_deq_roq) @[Tilelink.scala 115:48]
    acqRoq.io.deq.valid <= T_1625 @[Tilelink.scala 115:23]
    acqRoq.io.deq.tag <= io.out.grant.bits.client_xact_id @[Tilelink.scala 116:21]
    node T_1627 = eq(acqRoq.io.deq.matches, UInt<1>("h00")) @[Tilelink.scala 118:26]
    node T_1628 = and(T_1627, grant_deq_roq) @[Tilelink.scala 118:49]
    relRoq.io.deq.valid <= T_1628 @[Tilelink.scala 118:23]
    relRoq.io.deq.tag <= io.out.grant.bits.client_xact_id @[Tilelink.scala 119:21]
    node T_1630 = eq(grant_deq_roq, UInt<1>("h00")) @[Tilelink.scala 121:10]
    node T_1631 = or(T_1630, acqRoq.io.deq.matches) @[Tilelink.scala 121:25]
    node T_1632 = or(T_1631, relRoq.io.deq.matches) @[Tilelink.scala 121:50]
    node T_1633 = or(T_1632, reset) @[Tilelink.scala 121:9]
    node T_1635 = eq(T_1633, UInt<1>("h00")) @[Tilelink.scala 121:9]
    when T_1635 : @[Tilelink.scala 121:9]
      printf(clk, UInt<1>(1), "Assertion failed: TileLink Unwrapper: client_xact_id mismatch\n    at Tilelink.scala:121 assert(!grant_deq_roq || acqRoq.io.deq.matches || relRoq.io.deq.matches,\n") @[Tilelink.scala 121:9]
      stop(clk, UInt<1>(1), 1) @[Tilelink.scala 121:9]
      skip @[Tilelink.scala 121:9]
    node T_1636 = mux(acqRoq.io.deq.data, io.out.grant.bits.g_type, UInt<1>("h00")) @[Tilelink.scala 129:17]
    wire acq_grant : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 863:19]
    acq_grant is invalid @[Definitions.scala 863:19]
    acq_grant.is_builtin_type <= acqRoq.io.deq.data @[Definitions.scala 864:25]
    acq_grant.g_type <= T_1636 @[Definitions.scala 865:16]
    acq_grant.client_xact_id <= io.out.grant.bits.client_xact_id @[Definitions.scala 866:24]
    acq_grant.manager_xact_id <= io.out.grant.bits.manager_xact_id @[Definitions.scala 867:25]
    acq_grant.addr_beat <= io.out.grant.bits.addr_beat @[Definitions.scala 868:19]
    acq_grant.data <= io.out.grant.bits.data @[Definitions.scala 869:14]
    node T_1691 = eq(io.in.release.valid, UInt<1>("h00")) @[Tilelink.scala 135:10]
    node T_1692 = or(T_1691, io.in.release.bits.voluntary) @[Tilelink.scala 135:31]
    node T_1693 = or(T_1692, reset) @[Tilelink.scala 135:9]
    node T_1695 = eq(T_1693, UInt<1>("h00")) @[Tilelink.scala 135:9]
    when T_1695 : @[Tilelink.scala 135:9]
      printf(clk, UInt<1>(1), "Assertion failed: Unwrapper can only process voluntary releases.\n    at Tilelink.scala:135 assert(!io.in.release.valid || io.in.release.bits.isVoluntary(), \"Unwrapper can only process voluntary releases.\")\n") @[Tilelink.scala 135:9]
      stop(clk, UInt<1>(1), 1) @[Tilelink.scala 135:9]
      skip @[Tilelink.scala 135:9]
    wire rel_grant : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 863:19]
    rel_grant is invalid @[Definitions.scala 863:19]
    rel_grant.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 864:25]
    rel_grant.g_type <= UInt<3>("h00") @[Definitions.scala 865:16]
    rel_grant.client_xact_id <= io.out.grant.bits.client_xact_id @[Definitions.scala 866:24]
    rel_grant.manager_xact_id <= io.out.grant.bits.manager_xact_id @[Definitions.scala 867:25]
    rel_grant.addr_beat <= io.out.grant.bits.addr_beat @[Definitions.scala 868:19]
    rel_grant.data <= io.out.grant.bits.data @[Definitions.scala 869:14]
    io.in.grant.valid <= io.out.grant.valid @[Tilelink.scala 144:21]
    node T_1751 = mux(acqRoq.io.deq.matches, acq_grant, rel_grant) @[Tilelink.scala 145:26]
    io.in.grant.bits <- T_1751 @[Tilelink.scala 145:20]
    io.out.grant.ready <= io.in.grant.ready @[Tilelink.scala 146:22]
    io.in.probe.valid <= UInt<1>("h00") @[Tilelink.scala 148:21]
    io.in.finish.ready <= UInt<1>("h00") @[Tilelink.scala 149:22]
    
  module ClientTileLinkEnqueuer : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip inner : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}}
    
    io is invalid
    io.outer.acquire <- io.inner.acquire @[Enqueuer.scala 58:20]
    io.inner.probe <- io.outer.probe @[Enqueuer.scala 59:20]
    io.outer.release <- io.inner.release @[Enqueuer.scala 60:20]
    io.inner.grant <- io.outer.grant @[Enqueuer.scala 61:20]
    io.outer.finish <- io.inner.finish @[Enqueuer.scala 62:20]
    
  module Queue_17 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}[1] @[Decoupled.scala 175:16]
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 180:33]
    node T_266 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_266) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_267 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_267
    node T_268 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_268
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_269 = ram[UInt<1>("h00")], clk
      T_269 <- io.enq.bits @[Decoupled.scala 187:24]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      skip @[Decoupled.scala 190:17]
    node T_299 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_299 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_301 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_301 @[Decoupled.scala 197:16]
    node T_303 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_303 @[Decoupled.scala 198:16]
    infer mport T_304 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_304 @[Decoupled.scala 199:15]
    node T_332 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_332, 1) @[Decoupled.scala 214:32]
    node T_333 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_334 = cat(T_333, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_334 @[Decoupled.scala 216:14]
    
  module Queue_18 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}[1] @[Decoupled.scala 175:16]
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 180:33]
    node T_257 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_257) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_258 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_258
    node T_259 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_259
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_260 = ram[UInt<1>("h00")], clk
      T_260 <- io.enq.bits @[Decoupled.scala 187:24]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      skip @[Decoupled.scala 190:17]
    node T_289 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_289 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_291 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_291 @[Decoupled.scala 197:16]
    node T_293 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_293 @[Decoupled.scala 198:16]
    infer mport T_294 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_294 @[Decoupled.scala 199:15]
    node T_321 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_321, 1) @[Decoupled.scala 214:32]
    node T_322 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_323 = cat(T_322, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_323 @[Decoupled.scala 216:14]
    
  module ClientUncachedTileLinkEnqueuer : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip inner : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    inst Queue_17_1 of Queue_17 @[Decoupled.scala 241:19]
    Queue_17_1.io is invalid
    Queue_17_1.clk <= clk
    Queue_17_1.reset <= reset
    Queue_17_1.io.enq.valid <= io.inner.acquire.valid @[Decoupled.scala 242:20]
    Queue_17_1.io.enq.bits <- io.inner.acquire.bits @[Decoupled.scala 243:19]
    io.inner.acquire.ready <= Queue_17_1.io.enq.ready @[Decoupled.scala 244:15]
    io.outer.acquire <- Queue_17_1.io.deq @[Enqueuer.scala 71:20]
    inst Queue_18_1 of Queue_18 @[Decoupled.scala 241:19]
    Queue_18_1.io is invalid
    Queue_18_1.clk <= clk
    Queue_18_1.reset <= reset
    Queue_18_1.io.enq.valid <= io.outer.grant.valid @[Decoupled.scala 242:20]
    Queue_18_1.io.enq.bits <- io.outer.grant.bits @[Decoupled.scala 243:19]
    io.outer.grant.ready <= Queue_18_1.io.enq.ready @[Decoupled.scala 244:15]
    io.inner.grant <- Queue_18_1.io.deq @[Enqueuer.scala 72:20]
    
  module LockingRRArbiter_10 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_610 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_612 : UInt, clk
    node T_614 = neq(T_610, UInt<1>("h00")) @[Arbiter.scala 39:34]
    wire T_622 : UInt<3>[1] @[Definitions.scala 853:34]
    T_622 is invalid @[Definitions.scala 853:34]
    T_622[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_624 = eq(io.out.bits.g_type, T_622[0]) @[Package.scala 7:47]
    node T_625 = eq(io.out.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_626 = mux(io.out.bits.is_builtin_type, T_624, T_625) @[Definitions.scala 274:33]
    node T_627 = and(UInt<1>("h01"), T_626) @[Definitions.scala 274:27]
    node T_628 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_629 = and(T_628, T_627) @[Arbiter.scala 42:25]
    when T_629 : @[Arbiter.scala 42:39]
      T_612 <= io.chosen @[Arbiter.scala 43:15]
      node T_631 = eq(T_610, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_633 = add(T_610, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_634 = tail(T_633, 1) @[Counter.scala 21:22]
      T_610 <= T_634 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_614 : @[Arbiter.scala 47:19]
      io.chosen <= T_612 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_636 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<1>, clk
    when T_636 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75]
    node T_639 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72]
    node T_640 = or(T_639, io.in[0].valid) @[Arbiter.scala 23:72]
    node T_642 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_644 = eq(T_639, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_646 = eq(T_640, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_647 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_648 = or(T_647, T_644) @[Arbiter.scala 64:50]
    node T_649 = and(T_642, grantMask_1) @[Arbiter.scala 64:34]
    node T_650 = or(T_649, T_646) @[Arbiter.scala 64:50]
    node T_652 = eq(T_612, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_653 = mux(T_614, T_652, T_648) @[Arbiter.scala 49:22]
    node T_654 = and(T_653, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_654 @[Arbiter.scala 49:16]
    node T_656 = eq(T_612, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_657 = mux(T_614, T_656, T_650) @[Arbiter.scala 49:22]
    node T_658 = and(T_657, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_658 @[Arbiter.scala 49:16]
    when io.in[0].valid : @[Arbiter.scala 69:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36]
      skip @[Arbiter.scala 69:27]
    when validMask_1 : @[Arbiter.scala 71:25]
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34]
      skip @[Arbiter.scala 71:25]
    
  module ClientUncachedTileLinkIORouter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[2]}
    
    io is invalid
    wire T_1449 : UInt<3>[2] @[Definitions.scala 357:30]
    T_1449 is invalid @[Definitions.scala 357:30]
    T_1449[0] <= UInt<3>("h00") @[Definitions.scala 357:30]
    T_1449[1] <= UInt<3>("h04") @[Definitions.scala 357:30]
    node T_1451 = eq(io.in.acquire.bits.a_type, T_1449[0]) @[Package.scala 7:47]
    node T_1452 = eq(io.in.acquire.bits.a_type, T_1449[1]) @[Package.scala 7:47]
    node T_1453 = or(T_1451, T_1452) @[Package.scala 7:62]
    node T_1454 = and(io.in.acquire.bits.is_builtin_type, T_1453) @[Definitions.scala 300:27]
    node T_1455 = bits(io.in.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
    node T_1457 = mux(T_1454, T_1455, UInt<3>("h00")) @[Definitions.scala 300:10]
    node T_1458 = cat(io.in.acquire.bits.addr_block, io.in.acquire.bits.addr_beat) @[Cat.scala 20:58]
    node T_1459 = cat(T_1458, T_1457) @[Cat.scala 20:58]
    node T_1461 = leq(UInt<1>("h00"), T_1459) @[addrmap.scala 26:46]
    node T_1463 = lt(T_1459, UInt<13>("h01000")) @[addrmap.scala 26:56]
    node T_1464 = and(T_1461, T_1463) @[addrmap.scala 26:51]
    node T_1466 = leq(UInt<31>("h040000000"), T_1459) @[addrmap.scala 26:46]
    node T_1468 = lt(T_1459, UInt<31>("h044000000")) @[addrmap.scala 26:56]
    node T_1469 = and(T_1466, T_1468) @[addrmap.scala 26:51]
    node T_1470 = or(T_1464, T_1469) @[addrmap.scala 157:54]
    node T_1472 = leq(UInt<13>("h01000"), T_1459) @[addrmap.scala 26:46]
    node T_1474 = lt(T_1459, UInt<14>("h02000")) @[addrmap.scala 26:56]
    node T_1475 = and(T_1472, T_1474) @[addrmap.scala 26:51]
    node T_1477 = leq(UInt<31>("h044000000"), T_1459) @[addrmap.scala 26:46]
    node T_1479 = lt(T_1459, UInt<31>("h044010000")) @[addrmap.scala 26:56]
    node T_1480 = and(T_1477, T_1479) @[addrmap.scala 26:51]
    node T_1481 = or(T_1475, T_1480) @[addrmap.scala 157:54]
    node acq_route = cat(T_1481, T_1470) @[Cat.scala 20:58]
    io.in.acquire.ready <= UInt<1>("h00") @[Interconnect.scala 206:23]
    node T_1483 = bits(acq_route, 0, 0) @[Interconnect.scala 209:58]
    node T_1484 = and(io.in.acquire.valid, T_1483) @[Interconnect.scala 209:46]
    io.out[0].acquire.valid <= T_1484 @[Interconnect.scala 209:23]
    io.out[0].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22]
    node T_1485 = bits(acq_route, 0, 0) @[Interconnect.scala 211:20]
    when T_1485 : @[Interconnect.scala 211:25]
      io.in.acquire.ready <= io.out[0].acquire.ready @[Interconnect.scala 211:47]
      skip @[Interconnect.scala 211:25]
    node T_1486 = bits(acq_route, 1, 1) @[Interconnect.scala 209:58]
    node T_1487 = and(io.in.acquire.valid, T_1486) @[Interconnect.scala 209:46]
    io.out[1].acquire.valid <= T_1487 @[Interconnect.scala 209:23]
    io.out[1].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22]
    node T_1488 = bits(acq_route, 1, 1) @[Interconnect.scala 211:20]
    when T_1488 : @[Interconnect.scala 211:25]
      io.in.acquire.ready <= io.out[1].acquire.ready @[Interconnect.scala 211:47]
      skip @[Interconnect.scala 211:25]
    inst gnt_arb of LockingRRArbiter_10 @[Interconnect.scala 214:23]
    gnt_arb.io is invalid
    gnt_arb.clk <= clk
    gnt_arb.reset <= reset
    gnt_arb.io.in[0] <- io.out[0].grant @[Interconnect.scala 216:17]
    gnt_arb.io.in[1] <- io.out[1].grant @[Interconnect.scala 216:17]
    io.in.grant <- gnt_arb.io.out @[Interconnect.scala 217:15]
    node T_1512 = eq(io.in.acquire.valid, UInt<1>("h00")) @[Interconnect.scala 219:10]
    node T_1514 = neq(acq_route, UInt<1>("h00")) @[Interconnect.scala 219:44]
    node T_1515 = or(T_1512, T_1514) @[Interconnect.scala 219:31]
    node T_1516 = or(T_1515, reset) @[Interconnect.scala 219:9]
    node T_1518 = eq(T_1516, UInt<1>("h00")) @[Interconnect.scala 219:9]
    when T_1518 : @[Interconnect.scala 219:9]
      printf(clk, UInt<1>(1), "Assertion failed: No valid route\n    at Interconnect.scala:219 assert(!io.in.acquire.valid || acq_route.orR, \"No valid route\")\n") @[Interconnect.scala 219:9]
      stop(clk, UInt<1>(1), 1) @[Interconnect.scala 219:9]
      skip @[Interconnect.scala 219:9]
    
  module ClientUncachedTileLinkIOCrossbar : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[2]}
    
    io is invalid
    inst ClientUncachedTileLinkIORouter_1 of ClientUncachedTileLinkIORouter @[Interconnect.scala 235:24]
    ClientUncachedTileLinkIORouter_1.io is invalid
    ClientUncachedTileLinkIORouter_1.clk <= clk
    ClientUncachedTileLinkIORouter_1.reset <= reset
    ClientUncachedTileLinkIORouter_1.io.in <- io.in[0] @[Interconnect.scala 236:18]
    io.out <= ClientUncachedTileLinkIORouter_1.io.out @[Interconnect.scala 237:12]
    
  module ClientUncachedTileLinkIORouter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[2]}
    
    io is invalid
    wire T_1449 : UInt<3>[2] @[Definitions.scala 357:30]
    T_1449 is invalid @[Definitions.scala 357:30]
    T_1449[0] <= UInt<3>("h00") @[Definitions.scala 357:30]
    T_1449[1] <= UInt<3>("h04") @[Definitions.scala 357:30]
    node T_1451 = eq(io.in.acquire.bits.a_type, T_1449[0]) @[Package.scala 7:47]
    node T_1452 = eq(io.in.acquire.bits.a_type, T_1449[1]) @[Package.scala 7:47]
    node T_1453 = or(T_1451, T_1452) @[Package.scala 7:62]
    node T_1454 = and(io.in.acquire.bits.is_builtin_type, T_1453) @[Definitions.scala 300:27]
    node T_1455 = bits(io.in.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
    node T_1457 = mux(T_1454, T_1455, UInt<3>("h00")) @[Definitions.scala 300:10]
    node T_1458 = cat(io.in.acquire.bits.addr_block, io.in.acquire.bits.addr_beat) @[Cat.scala 20:58]
    node T_1459 = cat(T_1458, T_1457) @[Cat.scala 20:58]
    node T_1461 = leq(UInt<1>("h00"), T_1459) @[addrmap.scala 26:46]
    node T_1463 = lt(T_1459, UInt<13>("h01000")) @[addrmap.scala 26:56]
    node T_1464 = and(T_1461, T_1463) @[addrmap.scala 26:51]
    node T_1466 = leq(UInt<31>("h040000000"), T_1459) @[addrmap.scala 26:46]
    node T_1468 = lt(T_1459, UInt<31>("h044000000")) @[addrmap.scala 26:56]
    node T_1469 = and(T_1466, T_1468) @[addrmap.scala 26:51]
    node acq_route = cat(T_1469, T_1464) @[Cat.scala 20:58]
    io.in.acquire.ready <= UInt<1>("h00") @[Interconnect.scala 206:23]
    node T_1471 = bits(acq_route, 0, 0) @[Interconnect.scala 209:58]
    node T_1472 = and(io.in.acquire.valid, T_1471) @[Interconnect.scala 209:46]
    io.out[0].acquire.valid <= T_1472 @[Interconnect.scala 209:23]
    io.out[0].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22]
    node T_1473 = bits(acq_route, 0, 0) @[Interconnect.scala 211:20]
    when T_1473 : @[Interconnect.scala 211:25]
      io.in.acquire.ready <= io.out[0].acquire.ready @[Interconnect.scala 211:47]
      skip @[Interconnect.scala 211:25]
    node T_1474 = bits(acq_route, 1, 1) @[Interconnect.scala 209:58]
    node T_1475 = and(io.in.acquire.valid, T_1474) @[Interconnect.scala 209:46]
    io.out[1].acquire.valid <= T_1475 @[Interconnect.scala 209:23]
    io.out[1].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22]
    node T_1476 = bits(acq_route, 1, 1) @[Interconnect.scala 211:20]
    when T_1476 : @[Interconnect.scala 211:25]
      io.in.acquire.ready <= io.out[1].acquire.ready @[Interconnect.scala 211:47]
      skip @[Interconnect.scala 211:25]
    inst gnt_arb of LockingRRArbiter_10 @[Interconnect.scala 214:23]
    gnt_arb.io is invalid
    gnt_arb.clk <= clk
    gnt_arb.reset <= reset
    gnt_arb.io.in[0] <- io.out[0].grant @[Interconnect.scala 216:17]
    gnt_arb.io.in[1] <- io.out[1].grant @[Interconnect.scala 216:17]
    io.in.grant <- gnt_arb.io.out @[Interconnect.scala 217:15]
    node T_1500 = eq(io.in.acquire.valid, UInt<1>("h00")) @[Interconnect.scala 219:10]
    node T_1502 = neq(acq_route, UInt<1>("h00")) @[Interconnect.scala 219:44]
    node T_1503 = or(T_1500, T_1502) @[Interconnect.scala 219:31]
    node T_1504 = or(T_1503, reset) @[Interconnect.scala 219:9]
    node T_1506 = eq(T_1504, UInt<1>("h00")) @[Interconnect.scala 219:9]
    when T_1506 : @[Interconnect.scala 219:9]
      printf(clk, UInt<1>(1), "Assertion failed: No valid route\n    at Interconnect.scala:219 assert(!io.in.acquire.valid || acq_route.orR, \"No valid route\")\n") @[Interconnect.scala 219:9]
      stop(clk, UInt<1>(1), 1) @[Interconnect.scala 219:9]
      skip @[Interconnect.scala 219:9]
    
  module ClientUncachedTileLinkIOCrossbar_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[2]}
    
    io is invalid
    inst ClientUncachedTileLinkIORouter_1_1 of ClientUncachedTileLinkIORouter_1 @[Interconnect.scala 235:24]
    ClientUncachedTileLinkIORouter_1_1.io is invalid
    ClientUncachedTileLinkIORouter_1_1.clk <= clk
    ClientUncachedTileLinkIORouter_1_1.reset <= reset
    ClientUncachedTileLinkIORouter_1_1.io.in <- io.in[0] @[Interconnect.scala 236:18]
    io.out <= ClientUncachedTileLinkIORouter_1_1.io.out @[Interconnect.scala 237:12]
    
  module TileLinkRecursiveInterconnect_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[2]}
    
    io is invalid
    inst xbar of ClientUncachedTileLinkIOCrossbar_1 @[Interconnect.scala 269:20]
    xbar.io is invalid
    xbar.clk <= clk
    xbar.reset <= reset
    xbar.io.in <= io.in @[Interconnect.scala 270:14]
    io.out[0] <- xbar.io.out[0] @[Interconnect.scala 272:10]
    io.out[1] <- xbar.io.out[1] @[Interconnect.scala 272:10]
    
  module TileLinkRecursiveInterconnect : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[3]}
    
    io is invalid
    inst xbar of ClientUncachedTileLinkIOCrossbar @[Interconnect.scala 269:20]
    xbar.io is invalid
    xbar.clk <= clk
    xbar.reset <= reset
    xbar.io.in <= io.in @[Interconnect.scala 270:14]
    inst TileLinkRecursiveInterconnect_1_1 of TileLinkRecursiveInterconnect_1 @[Interconnect.scala 280:26]
    TileLinkRecursiveInterconnect_1_1.io is invalid
    TileLinkRecursiveInterconnect_1_1.clk <= clk
    TileLinkRecursiveInterconnect_1_1.reset <= reset
    TileLinkRecursiveInterconnect_1_1.io.in[0] <- xbar.io.out[0] @[Interconnect.scala 281:25]
    io.out[0] <- TileLinkRecursiveInterconnect_1_1.io.out[0] @[Interconnect.scala 272:10]
    io.out[1] <- TileLinkRecursiveInterconnect_1_1.io.out[1] @[Interconnect.scala 272:10]
    io.out[2] <- xbar.io.out[1] @[Interconnect.scala 272:10]
    
  module Queue_19 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}[1] @[Decoupled.scala 175:16]
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 180:33]
    node T_221 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_221) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_222 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_222
    node T_223 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_223
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_224 = ram[UInt<1>("h00")], clk
      T_224 <- io.enq.bits @[Decoupled.scala 187:24]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      skip @[Decoupled.scala 190:17]
    node T_249 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_249 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_251 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_251 @[Decoupled.scala 197:16]
    node T_253 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_253 @[Decoupled.scala 198:16]
    infer mport T_254 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_254 @[Decoupled.scala 199:15]
    node T_277 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_277, 1) @[Decoupled.scala 214:32]
    node T_278 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_279 = cat(T_278, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_279 @[Decoupled.scala 216:14]
    
  module PLIC : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip devices : {valid : UInt<1>, flip ready : UInt<1>, flip complete : UInt<1>}[2], harts : UInt<1>[2], flip tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    wire T_477 : UInt<1>[3] @[Plic.scala 71:44]
    T_477 is invalid @[Plic.scala 71:44]
    T_477[0] <= UInt<1>("h01") @[Plic.scala 71:44]
    T_477[1] <= UInt<1>("h01") @[Plic.scala 71:44]
    T_477[2] <= UInt<1>("h01") @[Plic.scala 71:44]
    wire priority : UInt<1>[3]
    priority is invalid
    priority <= T_477
    wire T_489 : UInt<1>[2] @[Plic.scala 74:40]
    T_489 is invalid @[Plic.scala 74:40]
    T_489[0] <= UInt<1>("h00") @[Plic.scala 74:40]
    T_489[1] <= UInt<1>("h00") @[Plic.scala 74:40]
    wire threshold : UInt<1>[2]
    threshold is invalid
    threshold <= T_489
    wire T_502 : UInt<1>[3] @[Plic.scala 75:50]
    T_502 is invalid @[Plic.scala 75:50]
    T_502[0] <= UInt<1>("h00") @[Plic.scala 75:50]
    T_502[1] <= UInt<1>("h00") @[Plic.scala 75:50]
    T_502[2] <= UInt<1>("h00") @[Plic.scala 75:50]
    reg pending : UInt<1>[3], clk with : (reset => (reset, T_502))
    reg enables : UInt<1>[3][2], clk
    node T_545 = eq(pending[1], UInt<1>("h00")) @[Plic.scala 79:16]
    io.devices[0].ready <= T_545 @[Plic.scala 79:13]
    io.devices[0].complete <= UInt<1>("h00") @[Plic.scala 80:16]
    when io.devices[0].valid : @[Plic.scala 81:20]
      pending[1] <= UInt<1>("h01") @[Plic.scala 81:24]
      skip @[Plic.scala 81:20]
    node T_549 = eq(pending[2], UInt<1>("h00")) @[Plic.scala 79:16]
    io.devices[1].ready <= T_549 @[Plic.scala 79:13]
    io.devices[1].complete <= UInt<1>("h00") @[Plic.scala 80:16]
    when io.devices[1].valid : @[Plic.scala 81:20]
      pending[2] <= UInt<1>("h01") @[Plic.scala 81:24]
      skip @[Plic.scala 81:20]
    wire maxDevs : UInt<2>[2] @[Plic.scala 94:21]
    maxDevs is invalid @[Plic.scala 94:21]
    node T_559 = and(pending[1], enables[0][1]) @[Plic.scala 98:21]
    node T_560 = cat(T_559, priority[1]) @[Cat.scala 20:58]
    node T_561 = and(pending[2], enables[0][2]) @[Plic.scala 98:21]
    node T_562 = cat(T_561, priority[2]) @[Cat.scala 20:58]
    node T_564 = shl(UInt<1>("h01"), 1) @[Plic.scala 99:45]
    node T_567 = geq(T_564, T_560) @[Plic.scala 89:29]
    node T_568 = mux(T_567, T_564, T_560) @[Plic.scala 90:11]
    node T_570 = add(UInt<1>("h01"), UInt<1>("h00")) @[Plic.scala 90:73]
    node T_571 = tail(T_570, 1) @[Plic.scala 90:73]
    node T_572 = mux(T_567, UInt<1>("h00"), T_571) @[Plic.scala 90:43]
    node T_574 = geq(T_568, T_562) @[Plic.scala 89:29]
    node T_575 = mux(T_574, T_568, T_562) @[Plic.scala 90:11]
    node T_577 = add(UInt<2>("h02"), UInt<1>("h00")) @[Plic.scala 90:73]
    node T_578 = tail(T_577, 1) @[Plic.scala 90:73]
    node T_579 = mux(T_574, T_572, T_578) @[Plic.scala 90:43]
    reg T_580 : UInt, clk
    T_580 <= T_579
    maxDevs[0] <= T_580 @[Plic.scala 101:19]
    reg T_581 : UInt, clk
    T_581 <= T_575
    node T_583 = cat(UInt<1>("h01"), threshold[0]) @[Cat.scala 20:58]
    node T_584 = gt(T_581, T_583) @[Plic.scala 102:42]
    io.harts[0] <= T_584 @[Plic.scala 102:20]
    node T_585 = and(pending[1], enables[1][1]) @[Plic.scala 98:21]
    node T_586 = cat(T_585, priority[1]) @[Cat.scala 20:58]
    node T_587 = and(pending[2], enables[1][2]) @[Plic.scala 98:21]
    node T_588 = cat(T_587, priority[2]) @[Cat.scala 20:58]
    node T_590 = shl(UInt<1>("h01"), 1) @[Plic.scala 99:45]
    node T_593 = geq(T_590, T_586) @[Plic.scala 89:29]
    node T_594 = mux(T_593, T_590, T_586) @[Plic.scala 90:11]
    node T_596 = add(UInt<1>("h01"), UInt<1>("h00")) @[Plic.scala 90:73]
    node T_597 = tail(T_596, 1) @[Plic.scala 90:73]
    node T_598 = mux(T_593, UInt<1>("h00"), T_597) @[Plic.scala 90:43]
    node T_600 = geq(T_594, T_588) @[Plic.scala 89:29]
    node T_601 = mux(T_600, T_594, T_588) @[Plic.scala 90:11]
    node T_603 = add(UInt<2>("h02"), UInt<1>("h00")) @[Plic.scala 90:73]
    node T_604 = tail(T_603, 1) @[Plic.scala 90:73]
    node T_605 = mux(T_600, T_598, T_604) @[Plic.scala 90:43]
    reg T_606 : UInt, clk
    T_606 <= T_605
    maxDevs[1] <= T_606 @[Plic.scala 101:19]
    reg T_607 : UInt, clk
    T_607 <= T_601
    node T_609 = cat(UInt<1>("h01"), threshold[1]) @[Cat.scala 20:58]
    node T_610 = gt(T_607, T_609) @[Plic.scala 102:42]
    io.harts[1] <= T_610 @[Plic.scala 102:20]
    inst acq of Queue_19 @[Decoupled.scala 241:19]
    acq.io is invalid
    acq.clk <= clk
    acq.reset <= reset
    acq.io.enq.valid <= io.tl.acquire.valid @[Decoupled.scala 242:20]
    acq.io.enq.bits <- io.tl.acquire.bits @[Decoupled.scala 243:19]
    io.tl.acquire.ready <= acq.io.enq.ready @[Decoupled.scala 244:15]
    node T_634 = and(acq.io.deq.ready, acq.io.deq.valid) @[Decoupled.scala 21:42]
    node T_636 = eq(acq.io.deq.bits.a_type, UInt<3>("h00")) @[Definitions.scala 212:64]
    node T_637 = and(acq.io.deq.bits.is_builtin_type, T_636) @[Definitions.scala 212:54]
    node read = and(T_634, T_637) @[Plic.scala 106:25]
    node T_638 = and(acq.io.deq.ready, acq.io.deq.valid) @[Decoupled.scala 21:42]
    node T_640 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
    node T_641 = and(acq.io.deq.bits.is_builtin_type, T_640) @[Definitions.scala 212:54]
    node write = and(T_638, T_641) @[Plic.scala 107:26]
    node T_642 = and(acq.io.deq.ready, acq.io.deq.valid) @[Decoupled.scala 21:42]
    node T_644 = eq(T_642, UInt<1>("h00")) @[Plic.scala 108:10]
    node T_645 = or(T_644, read) @[Plic.scala 108:22]
    node T_646 = or(T_645, write) @[Plic.scala 108:30]
    node T_647 = or(T_646, reset) @[Plic.scala 108:9]
    node T_649 = eq(T_647, UInt<1>("h00")) @[Plic.scala 108:9]
    when T_649 : @[Plic.scala 108:9]
      printf(clk, UInt<1>(1), "Assertion failed: unsupported PLIC operation\n    at Plic.scala:108 assert(!acq.fire() || read || write, \"unsupported PLIC operation\")\n") @[Plic.scala 108:9]
      stop(clk, UInt<1>(1), 1) @[Plic.scala 108:9]
      skip @[Plic.scala 108:9]
    wire T_657 : UInt<3>[2] @[Definitions.scala 357:30]
    T_657 is invalid @[Definitions.scala 357:30]
    T_657[0] <= UInt<3>("h00") @[Definitions.scala 357:30]
    T_657[1] <= UInt<3>("h04") @[Definitions.scala 357:30]
    node T_659 = eq(acq.io.deq.bits.a_type, T_657[0]) @[Package.scala 7:47]
    node T_660 = eq(acq.io.deq.bits.a_type, T_657[1]) @[Package.scala 7:47]
    node T_661 = or(T_659, T_660) @[Package.scala 7:62]
    node T_662 = and(acq.io.deq.bits.is_builtin_type, T_661) @[Definitions.scala 300:27]
    node T_663 = bits(acq.io.deq.bits.union, 10, 8) @[Definitions.scala 178:40]
    node T_665 = mux(T_662, T_663, UInt<3>("h00")) @[Definitions.scala 300:10]
    node T_666 = cat(acq.io.deq.bits.addr_block, acq.io.deq.bits.addr_beat) @[Cat.scala 20:58]
    node T_667 = cat(T_666, T_665) @[Cat.scala 20:58]
    node addr = bits(T_667, 25, 0) @[Plic.scala 109:34]
    node T_669 = sub(addr, UInt<22>("h0200000")) @[Plic.scala 113:16]
    node T_670 = tail(T_669, 1) @[Plic.scala 113:16]
    node claimant = bits(T_670, 12, 12) @[Plic.scala 113:31]
    wire hart : UInt
    hart is invalid
    hart <= claimant
    wire rdata : UInt<64>
    rdata is invalid
    rdata <= UInt<64>("h00")
    node T_676 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
    node T_677 = and(acq.io.deq.bits.is_builtin_type, T_676) @[Definitions.scala 212:54]
    node T_694 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
    node T_696 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
    node T_697 = and(acq.io.deq.bits.is_builtin_type, T_696) @[Definitions.scala 212:54]
    node T_699 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
    node T_700 = and(acq.io.deq.bits.is_builtin_type, T_699) @[Definitions.scala 212:54]
    node T_701 = or(T_697, T_700) @[Definitions.scala 190:56]
    node T_702 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25]
    node T_704 = mux(T_701, T_702, UInt<1>("h00")) @[Definitions.scala 192:30]
    node T_705 = mux(T_677, T_694, T_704) @[Definitions.scala 192:8]
    node T_706 = bits(T_705, 0, 0) @[Bitwise.scala 13:51]
    node T_707 = bits(T_705, 1, 1) @[Bitwise.scala 13:51]
    node T_708 = bits(T_705, 2, 2) @[Bitwise.scala 13:51]
    node T_709 = bits(T_705, 3, 3) @[Bitwise.scala 13:51]
    node T_710 = bits(T_705, 4, 4) @[Bitwise.scala 13:51]
    node T_711 = bits(T_705, 5, 5) @[Bitwise.scala 13:51]
    node T_712 = bits(T_705, 6, 6) @[Bitwise.scala 13:51]
    node T_713 = bits(T_705, 7, 7) @[Bitwise.scala 13:51]
    node T_714 = bits(T_706, 0, 0) @[Bitwise.scala 33:15]
    node T_717 = mux(T_714, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_718 = bits(T_707, 0, 0) @[Bitwise.scala 33:15]
    node T_721 = mux(T_718, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_722 = bits(T_708, 0, 0) @[Bitwise.scala 33:15]
    node T_725 = mux(T_722, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_726 = bits(T_709, 0, 0) @[Bitwise.scala 33:15]
    node T_729 = mux(T_726, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_730 = bits(T_710, 0, 0) @[Bitwise.scala 33:15]
    node T_733 = mux(T_730, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_734 = bits(T_711, 0, 0) @[Bitwise.scala 33:15]
    node T_737 = mux(T_734, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_738 = bits(T_712, 0, 0) @[Bitwise.scala 33:15]
    node T_741 = mux(T_738, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_742 = bits(T_713, 0, 0) @[Bitwise.scala 33:15]
    node T_745 = mux(T_742, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_746 = cat(T_721, T_717) @[Cat.scala 20:58]
    node T_747 = cat(T_729, T_725) @[Cat.scala 20:58]
    node T_748 = cat(T_747, T_746) @[Cat.scala 20:58]
    node T_749 = cat(T_737, T_733) @[Cat.scala 20:58]
    node T_750 = cat(T_745, T_741) @[Cat.scala 20:58]
    node T_751 = cat(T_750, T_749) @[Cat.scala 20:58]
    node T_752 = cat(T_751, T_748) @[Cat.scala 20:58]
    node T_753 = and(acq.io.deq.bits.data, T_752) @[Plic.scala 118:37]
    node T_755 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
    node T_756 = and(acq.io.deq.bits.is_builtin_type, T_755) @[Definitions.scala 212:54]
    node T_773 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
    node T_775 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
    node T_776 = and(acq.io.deq.bits.is_builtin_type, T_775) @[Definitions.scala 212:54]
    node T_778 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
    node T_779 = and(acq.io.deq.bits.is_builtin_type, T_778) @[Definitions.scala 212:54]
    node T_780 = or(T_776, T_779) @[Definitions.scala 190:56]
    node T_781 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25]
    node T_783 = mux(T_780, T_781, UInt<1>("h00")) @[Definitions.scala 192:30]
    node T_784 = mux(T_756, T_773, T_783) @[Definitions.scala 192:8]
    node T_785 = bits(T_784, 0, 0) @[Bitwise.scala 13:51]
    node T_786 = bits(T_784, 1, 1) @[Bitwise.scala 13:51]
    node T_787 = bits(T_784, 2, 2) @[Bitwise.scala 13:51]
    node T_788 = bits(T_784, 3, 3) @[Bitwise.scala 13:51]
    node T_789 = bits(T_784, 4, 4) @[Bitwise.scala 13:51]
    node T_790 = bits(T_784, 5, 5) @[Bitwise.scala 13:51]
    node T_791 = bits(T_784, 6, 6) @[Bitwise.scala 13:51]
    node T_792 = bits(T_784, 7, 7) @[Bitwise.scala 13:51]
    node T_793 = bits(T_785, 0, 0) @[Bitwise.scala 33:15]
    node T_796 = mux(T_793, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_797 = bits(T_786, 0, 0) @[Bitwise.scala 33:15]
    node T_800 = mux(T_797, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_801 = bits(T_787, 0, 0) @[Bitwise.scala 33:15]
    node T_804 = mux(T_801, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_805 = bits(T_788, 0, 0) @[Bitwise.scala 33:15]
    node T_808 = mux(T_805, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_809 = bits(T_789, 0, 0) @[Bitwise.scala 33:15]
    node T_812 = mux(T_809, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_813 = bits(T_790, 0, 0) @[Bitwise.scala 33:15]
    node T_816 = mux(T_813, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_817 = bits(T_791, 0, 0) @[Bitwise.scala 33:15]
    node T_820 = mux(T_817, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_821 = bits(T_792, 0, 0) @[Bitwise.scala 33:15]
    node T_824 = mux(T_821, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_825 = cat(T_800, T_796) @[Cat.scala 20:58]
    node T_826 = cat(T_808, T_804) @[Cat.scala 20:58]
    node T_827 = cat(T_826, T_825) @[Cat.scala 20:58]
    node T_828 = cat(T_816, T_812) @[Cat.scala 20:58]
    node T_829 = cat(T_824, T_820) @[Cat.scala 20:58]
    node T_830 = cat(T_829, T_828) @[Cat.scala 20:58]
    node T_831 = cat(T_830, T_827) @[Cat.scala 20:58]
    node T_832 = not(T_831) @[Plic.scala 118:73]
    node T_833 = and(rdata, T_832) @[Plic.scala 118:71]
    node masked_wdata = or(T_753, T_833) @[Plic.scala 118:62]
    node T_835 = geq(addr, UInt<22>("h0200000")) @[Plic.scala 120:36]
    when T_835 : @[Plic.scala 120:53]
      node T_838 = cat(maxDevs[claimant], UInt<31>("h00")) @[Cat.scala 20:58]
      node T_839 = cat(T_838, threshold[claimant]) @[Cat.scala 20:58]
      node T_841 = mul(UInt<1>("h00"), UInt<7>("h040")) @[Plic.scala 124:110]
      node T_842 = dshr(T_839, T_841) @[Plic.scala 124:101]
      rdata <= T_842 @[Plic.scala 124:11]
      node T_843 = bits(addr, 2, 2) @[Plic.scala 126:23]
      node T_844 = and(read, T_843) @[Plic.scala 126:16]
      when T_844 : @[Plic.scala 126:52]
        pending[maxDevs[claimant]] <= UInt<1>("h00") @[Plic.scala 127:25]
        skip @[Plic.scala 126:52]
      when write : @[Plic.scala 129:18]
        node T_847 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
        node T_848 = and(acq.io.deq.bits.is_builtin_type, T_847) @[Definitions.scala 212:54]
        node T_865 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
        node T_867 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
        node T_868 = and(acq.io.deq.bits.is_builtin_type, T_867) @[Definitions.scala 212:54]
        node T_870 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
        node T_871 = and(acq.io.deq.bits.is_builtin_type, T_870) @[Definitions.scala 212:54]
        node T_872 = or(T_868, T_871) @[Definitions.scala 190:56]
        node T_873 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25]
        node T_875 = mux(T_872, T_873, UInt<1>("h00")) @[Definitions.scala 192:30]
        node T_876 = mux(T_848, T_865, T_875) @[Definitions.scala 192:8]
        node T_877 = bits(T_876, 4, 4) @[Plic.scala 130:64]
        when T_877 : @[Plic.scala 130:120]
          node T_878 = shr(acq.io.deq.bits.data, 32) @[Plic.scala 131:34]
          node T_879 = bits(T_878, 1, 0) @[Plic.scala 131:74]
          when enables[hart][T_879] : @[Plic.scala 132:31]
            node T_881 = sub(T_879, UInt<1>("h01")) @[Plic.scala 132:47]
            node T_882 = tail(T_881, 1) @[Plic.scala 132:47]
            io.devices[T_882].complete <= UInt<1>("h01") @[Plic.scala 132:60]
            skip @[Plic.scala 132:31]
          skip @[Plic.scala 130:120]
        node T_888 = eq(T_877, UInt<1>("h00")) @[Plic.scala 130:120]
        when T_888 : @[Plic.scala 133:19]
          skip @[Plic.scala 133:19]
        skip @[Plic.scala 129:18]
      skip @[Plic.scala 120:53]
    node T_890 = geq(addr, UInt<14>("h02000")) @[Plic.scala 137:20]
    node T_892 = eq(T_835, UInt<1>("h00")) @[Plic.scala 120:53]
    node T_893 = and(T_892, T_890) @[Plic.scala 137:39]
    when T_893 : @[Plic.scala 137:39]
      node T_895 = sub(addr, UInt<14>("h02000")) @[Plic.scala 139:33]
      node T_896 = tail(T_895, 1) @[Plic.scala 139:33]
      node T_897 = bits(T_896, 7, 7) @[Plic.scala 139:50]
      hart <= T_897 @[Plic.scala 141:10]
      node T_900 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Plic.scala 146:18]
      when T_900 : @[Plic.scala 146:36]
        node T_901 = cat(enables[hart][2], enables[hart][1]) @[Cat.scala 20:58]
        node T_902 = cat(T_901, enables[hart][0]) @[Cat.scala 20:58]
        rdata <= T_902 @[Plic.scala 147:15]
        when write : @[Plic.scala 149:24]
          node T_906 = bits(masked_wdata, 0, 0) @[Plic.scala 149:66]
          enables[T_897][0] <= T_906 @[Plic.scala 149:51]
          skip @[Plic.scala 149:24]
        when write : @[Plic.scala 149:24]
          node T_910 = bits(masked_wdata, 1, 1) @[Plic.scala 149:66]
          enables[T_897][1] <= T_910 @[Plic.scala 149:51]
          skip @[Plic.scala 149:24]
        when write : @[Plic.scala 149:24]
          node T_914 = bits(masked_wdata, 2, 2) @[Plic.scala 149:66]
          enables[T_897][2] <= T_914 @[Plic.scala 149:51]
          skip @[Plic.scala 149:24]
        skip @[Plic.scala 146:36]
      skip @[Plic.scala 137:39]
    node T_916 = geq(addr, UInt<13>("h01000")) @[Plic.scala 153:20]
    node T_918 = eq(T_835, UInt<1>("h00")) @[Plic.scala 120:53]
    node T_920 = eq(T_890, UInt<1>("h00")) @[Plic.scala 137:39]
    node T_921 = and(T_918, T_920) @[Plic.scala 137:39]
    node T_922 = and(T_921, T_916) @[Plic.scala 153:40]
    when T_922 : @[Plic.scala 153:40]
      node T_924 = cat(pending[2], pending[1]) @[Plic.scala 157:22]
      node T_925 = cat(T_924, pending[0]) @[Plic.scala 157:22]
      node T_927 = mul(UInt<1>("h00"), UInt<7>("h040")) @[Plic.scala 157:38]
      node T_928 = dshr(T_925, T_927) @[Plic.scala 157:29]
      rdata <= T_928 @[Plic.scala 157:11]
      skip @[Plic.scala 153:40]
    node T_930 = eq(T_835, UInt<1>("h00")) @[Plic.scala 120:53]
    node T_932 = eq(T_890, UInt<1>("h00")) @[Plic.scala 137:39]
    node T_933 = and(T_930, T_932) @[Plic.scala 137:39]
    node T_935 = eq(T_916, UInt<1>("h00")) @[Plic.scala 153:40]
    node T_936 = and(T_933, T_935) @[Plic.scala 153:40]
    when T_936 : @[Plic.scala 158:15]
      node T_937 = bits(addr, 3, 3) @[Plic.scala 162:16]
      node T_939 = eq(T_937, UInt<1>("h00")) @[Plic.scala 164:18]
      when T_939 : @[Plic.scala 164:37]
        node T_941 = cat(UInt<31>("h00"), priority[0]) @[Cat.scala 20:58]
        node T_943 = cat(UInt<31>("h00"), priority[1]) @[Cat.scala 20:58]
        node T_944 = cat(T_943, T_941) @[Cat.scala 20:58]
        rdata <= T_944 @[Plic.scala 165:15]
        skip @[Plic.scala 164:37]
      node T_946 = eq(T_937, UInt<1>("h01")) @[Plic.scala 164:18]
      when T_946 : @[Plic.scala 164:37]
        node T_948 = cat(UInt<31>("h00"), priority[2]) @[Cat.scala 20:58]
        rdata <= T_948 @[Plic.scala 165:15]
        skip @[Plic.scala 164:37]
      skip @[Plic.scala 158:15]
    priority[0] <= UInt<1>("h00") @[Plic.scala 173:15]
    pending[0] <= UInt<1>("h00") @[Plic.scala 174:14]
    enables[0][0] <= UInt<1>("h00") @[Plic.scala 176:10]
    enables[1][0] <= UInt<1>("h00") @[Plic.scala 176:10]
    io.tl.grant.valid <= acq.io.deq.valid @[Plic.scala 178:21]
    acq.io.deq.ready <= io.tl.grant.ready @[Plic.scala 179:13]
    node T_969 = eq(UInt<3>("h06"), acq.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_970 = mux(T_969, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_971 = eq(UInt<3>("h05"), acq.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_972 = mux(T_971, UInt<3>("h01"), T_970) @[Mux.scala 46:16]
    node T_973 = eq(UInt<3>("h04"), acq.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_974 = mux(T_973, UInt<3>("h04"), T_972) @[Mux.scala 46:16]
    node T_975 = eq(UInt<3>("h03"), acq.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_976 = mux(T_975, UInt<3>("h03"), T_974) @[Mux.scala 46:16]
    node T_977 = eq(UInt<3>("h02"), acq.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_978 = mux(T_977, UInt<3>("h03"), T_976) @[Mux.scala 46:16]
    node T_979 = eq(UInt<3>("h01"), acq.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_980 = mux(T_979, UInt<3>("h05"), T_978) @[Mux.scala 46:16]
    node T_981 = eq(UInt<3>("h00"), acq.io.deq.bits.a_type) @[Mux.scala 46:19]
    node T_982 = mux(T_981, UInt<3>("h04"), T_980) @[Mux.scala 46:16]
    wire T_1007 : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 863:19]
    T_1007 is invalid @[Definitions.scala 863:19]
    T_1007.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 864:25]
    T_1007.g_type <= T_982 @[Definitions.scala 865:16]
    T_1007.client_xact_id <= acq.io.deq.bits.client_xact_id @[Definitions.scala 866:24]
    T_1007.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 867:25]
    T_1007.addr_beat <= UInt<1>("h00") @[Definitions.scala 868:19]
    T_1007.data <= rdata @[Definitions.scala 869:14]
    io.tl.grant.bits <- T_1007 @[Plic.scala 180:20]
    
  module LevelGateway : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip interrupt : UInt<1>, plic : {valid : UInt<1>, flip ready : UInt<1>, flip complete : UInt<1>}}
    
    io is invalid
    reg inFlight : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_6 = and(io.interrupt, io.plic.ready) @[Plic.scala 25:22]
    when T_6 : @[Plic.scala 25:40]
      inFlight <= UInt<1>("h01") @[Plic.scala 25:51]
      skip @[Plic.scala 25:40]
    when io.plic.complete : @[Plic.scala 26:27]
      inFlight <= UInt<1>("h00") @[Plic.scala 26:38]
      skip @[Plic.scala 26:27]
    node T_10 = eq(inFlight, UInt<1>("h00")) @[Plic.scala 27:36]
    node T_11 = and(io.interrupt, T_10) @[Plic.scala 27:33]
    io.plic.valid <= T_11 @[Plic.scala 27:17]
    
  module DebugModule : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip db : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<5>, data : UInt<34>, op : UInt<2>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<34>, resp : UInt<2>}}}, debugInterrupts : UInt<1>[1], flip tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, ndreset : UInt<1>, fullreset : UInt<1>}
    
    io is invalid
    wire CONTROLReset : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>} @[Debug.scala 424:26]
    CONTROLReset is invalid @[Debug.scala 424:26]
    wire CONTROLWrEn : UInt<1> @[Debug.scala 425:25]
    CONTROLWrEn is invalid @[Debug.scala 425:25]
    reg CONTROLReg : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>}, clk
    wire CONTROLWrData : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>} @[Debug.scala 427:28]
    CONTROLWrData is invalid @[Debug.scala 427:28]
    wire CONTROLRdData : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>} @[Debug.scala 428:28]
    CONTROLRdData is invalid @[Debug.scala 428:28]
    reg ndresetCtrReg : UInt<1>, clk
    wire DMINFORdData : {reserved0 : UInt<2>, abussize : UInt<7>, serialcount : UInt<4>, access128 : UInt<1>, access64 : UInt<1>, access32 : UInt<1>, access16 : UInt<1>, accesss8 : UInt<1>, dramsize : UInt<6>, haltsum : UInt<1>, reserved1 : UInt<3>, authenticated : UInt<1>, authbusy : UInt<1>, authtype : UInt<2>, version : UInt<2>} @[Debug.scala 431:27]
    DMINFORdData is invalid @[Debug.scala 431:27]
    wire HALTSUMRdData : {serialfull : UInt<1>, serialvalid : UInt<1>, acks : UInt<32>} @[Debug.scala 433:28]
    HALTSUMRdData is invalid @[Debug.scala 433:28]
    wire RAMWrData : {interrupt : UInt<1>, haltnot : UInt<1>, data : UInt<32>} @[Debug.scala 435:24]
    RAMWrData is invalid @[Debug.scala 435:24]
    wire RAMRdData : {interrupt : UInt<1>, haltnot : UInt<1>, data : UInt<32>} @[Debug.scala 436:24]
    RAMRdData is invalid @[Debug.scala 436:24]
    wire SETHALTNOTWrEn : UInt<1> @[Debug.scala 440:28]
    SETHALTNOTWrEn is invalid @[Debug.scala 440:28]
    wire SETHALTNOTWrData : UInt<10> @[Debug.scala 441:30]
    SETHALTNOTWrData is invalid @[Debug.scala 441:30]
    wire CLEARDEBINTWrEn : UInt<1> @[Debug.scala 442:29]
    CLEARDEBINTWrEn is invalid @[Debug.scala 442:29]
    wire CLEARDEBINTWrData : UInt<10> @[Debug.scala 443:31]
    CLEARDEBINTWrData is invalid @[Debug.scala 443:31]
    wire T_655 : UInt<1>[1] @[Debug.scala 447:57]
    T_655 is invalid @[Debug.scala 447:57]
    T_655[0] <= UInt<1>("h00") @[Debug.scala 447:57]
    reg interruptRegs : UInt<1>[1], clk with : (reset => (reset, T_655))
    wire T_666 : UInt<1>[1] @[Debug.scala 449:59]
    T_666 is invalid @[Debug.scala 449:59]
    T_666[0] <= UInt<1>("h00") @[Debug.scala 449:59]
    reg haltnotRegs : UInt<1>[1], clk with : (reset => (reset, T_666))
    wire haltnotStatus : UInt<32>[1] @[Debug.scala 452:27]
    haltnotStatus is invalid @[Debug.scala 452:27]
    wire rdHaltnotStatus : UInt<32> @[Debug.scala 453:29]
    rdHaltnotStatus is invalid @[Debug.scala 453:29]
    node haltnotSummary = neq(haltnotStatus[0], UInt<1>("h00")) @[Debug.scala 455:48]
    cmem ramMem : UInt<64>[8] @[Debug.scala 471:22]
    wire ramAddr : UInt<3> @[Debug.scala 472:23]
    ramAddr is invalid @[Debug.scala 472:23]
    wire ramRdData : UInt<64> @[Debug.scala 473:23]
    ramRdData is invalid @[Debug.scala 473:23]
    wire ramWrData : UInt<64> @[Debug.scala 474:23]
    ramWrData is invalid @[Debug.scala 474:23]
    wire ramWrMask : UInt<64> @[Debug.scala 475:23]
    ramWrMask is invalid @[Debug.scala 475:23]
    wire ramWrEn : UInt<1> @[Debug.scala 476:23]
    ramWrEn is invalid @[Debug.scala 476:23]
    wire dbRamAddr : UInt<4> @[Debug.scala 478:25]
    dbRamAddr is invalid @[Debug.scala 478:25]
    wire dbRamRdData : UInt<32> @[Debug.scala 479:26]
    dbRamRdData is invalid @[Debug.scala 479:26]
    wire dbRamWrData : UInt<32> @[Debug.scala 480:25]
    dbRamWrData is invalid @[Debug.scala 480:25]
    wire dbRamWrEn : UInt<1> @[Debug.scala 481:25]
    dbRamWrEn is invalid @[Debug.scala 481:25]
    wire dbRamRdEn : UInt<1> @[Debug.scala 482:25]
    dbRamRdEn is invalid @[Debug.scala 482:25]
    wire sbRamAddr : UInt<3> @[Debug.scala 484:25]
    sbRamAddr is invalid @[Debug.scala 484:25]
    wire sbRamRdData : UInt<64> @[Debug.scala 485:26]
    sbRamRdData is invalid @[Debug.scala 485:26]
    wire sbRamWrData : UInt<64> @[Debug.scala 486:25]
    sbRamWrData is invalid @[Debug.scala 486:25]
    wire sbRamWrEn : UInt<1> @[Debug.scala 487:25]
    sbRamWrEn is invalid @[Debug.scala 487:25]
    wire sbRamRdEn : UInt<1> @[Debug.scala 488:25]
    sbRamRdEn is invalid @[Debug.scala 488:25]
    wire sbRomRdData : UInt<64> @[Debug.scala 490:31]
    sbRomRdData is invalid @[Debug.scala 490:31]
    wire dbRdEn : UInt<1> @[Debug.scala 495:22]
    dbRdEn is invalid @[Debug.scala 495:22]
    wire dbWrEn : UInt<1> @[Debug.scala 496:22]
    dbWrEn is invalid @[Debug.scala 496:22]
    wire dbRdData : UInt<34> @[Debug.scala 497:22]
    dbRdData is invalid @[Debug.scala 497:22]
    reg dbStateReg : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire dbResult : {data : UInt<34>, resp : UInt<2>} @[Debug.scala 502:23]
    dbResult is invalid @[Debug.scala 502:23]
    wire dbReq : {addr : UInt<5>, data : UInt<34>, op : UInt<2>} @[Debug.scala 504:23]
    dbReq is invalid @[Debug.scala 504:23]
    reg dbRespReg : {data : UInt<34>, resp : UInt<2>}, clk
    wire rdCondWrFailure : UInt<1> @[Debug.scala 507:29]
    rdCondWrFailure is invalid @[Debug.scala 507:29]
    wire dbWrNeeded : UInt<1> @[Debug.scala 508:24]
    dbWrNeeded is invalid @[Debug.scala 508:24]
    wire sbAddr : UInt<12> @[Debug.scala 511:22]
    sbAddr is invalid @[Debug.scala 511:22]
    wire sbRdData : UInt<64> @[Debug.scala 512:22]
    sbRdData is invalid @[Debug.scala 512:22]
    wire sbWrData : UInt<64> @[Debug.scala 513:22]
    sbWrData is invalid @[Debug.scala 513:22]
    wire sbWrMask : UInt<64> @[Debug.scala 514:22]
    sbWrMask is invalid @[Debug.scala 514:22]
    wire sbWrEn : UInt<1> @[Debug.scala 515:22]
    sbWrEn is invalid @[Debug.scala 515:22]
    wire sbRdEn : UInt<1> @[Debug.scala 516:22]
    sbRdEn is invalid @[Debug.scala 516:22]
    wire stallFromDb : UInt<1> @[Debug.scala 518:25]
    stallFromDb is invalid @[Debug.scala 518:25]
    wire stallFromSb : UInt<1> @[Debug.scala 519:25]
    stallFromSb is invalid @[Debug.scala 519:25]
    io.debugInterrupts[0] <= interruptRegs[0] @[Debug.scala 525:35]
    when CONTROLWrEn : @[Debug.scala 535:24]
      node T_720 = eq(CONTROLWrData.hartid, UInt<1>("h00")) @[Debug.scala 536:34]
      when T_720 : @[Debug.scala 536:55]
        node T_721 = or(interruptRegs[0], CONTROLWrData.interrupt) @[Debug.scala 537:62]
        interruptRegs[0] <= T_721 @[Debug.scala 537:34]
        skip @[Debug.scala 536:55]
      skip @[Debug.scala 535:24]
    node T_723 = eq(CONTROLWrEn, UInt<1>("h00")) @[Debug.scala 535:24]
    node T_724 = and(T_723, dbRamWrEn) @[Debug.scala 539:28]
    when T_724 : @[Debug.scala 539:28]
      node T_726 = eq(CONTROLReg.hartid, UInt<1>("h00")) @[Debug.scala 540:31]
      when T_726 : @[Debug.scala 540:51]
        node T_727 = or(interruptRegs[0], RAMWrData.interrupt) @[Debug.scala 541:63]
        interruptRegs[0] <= T_727 @[Debug.scala 541:34]
        skip @[Debug.scala 540:51]
      skip @[Debug.scala 539:28]
    node T_729 = eq(CONTROLWrEn, UInt<1>("h00")) @[Debug.scala 535:24]
    node T_731 = eq(dbRamWrEn, UInt<1>("h00")) @[Debug.scala 539:28]
    node T_732 = and(T_729, T_731) @[Debug.scala 539:28]
    node T_733 = and(T_732, CLEARDEBINTWrEn) @[Debug.scala 543:33]
    when T_733 : @[Debug.scala 543:33]
      node T_735 = eq(CLEARDEBINTWrData, UInt<10>("h00")) @[Debug.scala 544:31]
      when T_735 : @[Debug.scala 544:71]
        interruptRegs[0] <= UInt<1>("h00") @[Debug.scala 545:34]
        skip @[Debug.scala 544:71]
      skip @[Debug.scala 543:33]
    when SETHALTNOTWrEn : @[Debug.scala 561:26]
      node T_738 = eq(SETHALTNOTWrData, UInt<10>("h00")) @[Debug.scala 562:30]
      when T_738 : @[Debug.scala 562:70]
        haltnotRegs[0] <= UInt<1>("h01") @[Debug.scala 563:32]
        skip @[Debug.scala 562:70]
      skip @[Debug.scala 561:26]
    node T_741 = eq(SETHALTNOTWrEn, UInt<1>("h00")) @[Debug.scala 561:26]
    node T_742 = and(T_741, CONTROLWrEn) @[Debug.scala 565:31]
    when T_742 : @[Debug.scala 565:31]
      node T_744 = eq(CONTROLWrData.hartid, UInt<1>("h00")) @[Debug.scala 566:34]
      when T_744 : @[Debug.scala 566:55]
        node T_745 = and(haltnotRegs[0], CONTROLWrData.haltnot) @[Debug.scala 567:58]
        haltnotRegs[0] <= T_745 @[Debug.scala 567:32]
        skip @[Debug.scala 566:55]
      skip @[Debug.scala 565:31]
    node T_747 = eq(SETHALTNOTWrEn, UInt<1>("h00")) @[Debug.scala 561:26]
    node T_749 = eq(CONTROLWrEn, UInt<1>("h00")) @[Debug.scala 565:31]
    node T_750 = and(T_747, T_749) @[Debug.scala 565:31]
    node T_751 = and(T_750, dbRamWrEn) @[Debug.scala 569:28]
    when T_751 : @[Debug.scala 569:28]
      node T_753 = eq(CONTROLReg.hartid, UInt<1>("h00")) @[Debug.scala 570:31]
      when T_753 : @[Debug.scala 570:51]
        node T_754 = and(haltnotRegs[0], RAMWrData.haltnot) @[Debug.scala 571:59]
        haltnotRegs[0] <= T_754 @[Debug.scala 571:32]
        skip @[Debug.scala 570:51]
      skip @[Debug.scala 569:28]
    haltnotStatus[0] <= haltnotRegs[0] @[Debug.scala 577:23]
    CONTROLReset.interrupt <= UInt<1>("h00") @[Debug.scala 584:30]
    CONTROLReset.haltnot <= UInt<1>("h00") @[Debug.scala 585:30]
    CONTROLReset.reserved0 <= UInt<1>("h00") @[Debug.scala 586:30]
    CONTROLReset.buserror <= UInt<1>("h00") @[Debug.scala 587:30]
    CONTROLReset.serial <= UInt<1>("h00") @[Debug.scala 588:30]
    CONTROLReset.autoincrement <= UInt<1>("h00") @[Debug.scala 589:30]
    CONTROLReset.access <= UInt<2>("h02") @[Debug.scala 590:30]
    CONTROLReset.hartid <= UInt<1>("h00") @[Debug.scala 591:30]
    CONTROLReset.ndreset <= UInt<1>("h00") @[Debug.scala 592:30]
    CONTROLReset.fullreset <= UInt<1>("h00") @[Debug.scala 593:30]
    DMINFORdData.reserved0 <= UInt<1>("h00") @[Debug.scala 598:30]
    DMINFORdData.abussize <= UInt<1>("h00") @[Debug.scala 599:30]
    DMINFORdData.serialcount <= UInt<1>("h00") @[Debug.scala 600:30]
    DMINFORdData.access128 <= UInt<1>("h00") @[Debug.scala 601:30]
    DMINFORdData.access64 <= UInt<1>("h00") @[Debug.scala 602:30]
    DMINFORdData.access32 <= UInt<1>("h00") @[Debug.scala 603:30]
    DMINFORdData.access16 <= UInt<1>("h00") @[Debug.scala 604:30]
    DMINFORdData.accesss8 <= UInt<1>("h00") @[Debug.scala 605:30]
    DMINFORdData.dramsize <= UInt<4>("h0f") @[Debug.scala 606:30]
    DMINFORdData.haltsum <= UInt<1>("h00") @[Debug.scala 607:30]
    DMINFORdData.reserved1 <= UInt<1>("h00") @[Debug.scala 608:30]
    DMINFORdData.authenticated <= UInt<1>("h01") @[Debug.scala 609:30]
    DMINFORdData.authbusy <= UInt<1>("h00") @[Debug.scala 610:30]
    DMINFORdData.authtype <= UInt<1>("h00") @[Debug.scala 611:30]
    DMINFORdData.version <= UInt<1>("h01") @[Debug.scala 612:30]
    HALTSUMRdData.serialfull <= UInt<1>("h00") @[Debug.scala 614:29]
    HALTSUMRdData.serialvalid <= UInt<1>("h00") @[Debug.scala 615:29]
    HALTSUMRdData.acks <= haltnotSummary @[Debug.scala 616:29]
    dbReq <- io.db.req.bits @[Debug.scala 622:9]
    node T_782 = bits(dbReq.addr, 3, 0) @[Debug.scala 626:28]
    dbRamAddr <= T_782 @[Debug.scala 626:15]
    dbRamWrData <= dbReq.data @[Debug.scala 627:15]
    node T_783 = bits(sbAddr, 5, 3) @[Debug.scala 628:24]
    sbRamAddr <= T_783 @[Debug.scala 628:15]
    sbRamWrData <= sbWrData @[Debug.scala 629:15]
    node T_788 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    node T_793 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    wire T_799 : UInt<32>[2] @[Debug.scala 632:77]
    T_799 is invalid @[Debug.scala 632:77]
    T_799[0] <= T_788 @[Debug.scala 632:77]
    T_799[1] <= T_793 @[Debug.scala 632:77]
    wire dbRamWrMask : UInt<32>[2]
    dbRamWrMask is invalid
    dbRamWrMask <= T_799
    node T_804 = bits(dbRamAddr, 0, 0) @[Debug.scala 636:29]
    node T_805 = bits(ramRdData, 31, 0) @[Debug.scala 638:16]
    node T_806 = bits(ramRdData, 63, 32) @[Debug.scala 638:16]
    wire T_812 : UInt<32>[2] @[Debug.scala 637:73]
    T_812 is invalid @[Debug.scala 637:73]
    T_812[0] <= T_805 @[Debug.scala 637:73]
    T_812[1] <= T_806 @[Debug.scala 637:73]
    wire T_821 : UInt<32>[2] @[Debug.scala 640:66]
    T_821 is invalid @[Debug.scala 640:66]
    T_821[0] <= UInt<32>("h00") @[Debug.scala 640:66]
    T_821[1] <= UInt<32>("h00") @[Debug.scala 640:66]
    dbRamWrMask <= T_821 @[Debug.scala 640:17]
    node T_827 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12]
    dbRamWrMask[T_804] <= T_827 @[Debug.scala 641:27]
    dbRamRdData <= T_812[T_804] @[Debug.scala 642:17]
    sbRamRdData <= ramRdData @[Debug.scala 647:15]
    node T_828 = cat(dbRamWrMask[1], dbRamWrMask[0]) @[Debug.scala 649:53]
    node T_829 = mux(sbRamWrEn, sbWrMask, T_828) @[Debug.scala 649:19]
    ramWrMask <= T_829 @[Debug.scala 649:13]
    node T_830 = or(dbRamWrEn, dbRamRdEn) @[Debug.scala 651:24]
    node T_831 = or(sbRamRdEn, sbRamWrEn) @[Debug.scala 651:50]
    node T_832 = and(T_830, T_831) @[Debug.scala 651:37]
    node T_834 = eq(T_832, UInt<1>("h00")) @[Debug.scala 651:11]
    node T_835 = or(T_834, reset) @[Debug.scala 651:10]
    node T_837 = eq(T_835, UInt<1>("h00")) @[Debug.scala 651:10]
    when T_837 : @[Debug.scala 651:10]
      printf(clk, UInt<1>(1), "Assertion failed: Stall logic should have prevented concurrent SB/DB RAM Access\n    at Debug.scala:651 assert (!((dbRamWrEn | dbRamRdEn) & (sbRamRdEn | sbRamWrEn)), \"Stall logic should have prevented concurrent SB/DB RAM Access\")\n") @[Debug.scala 651:10]
      stop(clk, UInt<1>(1), 1) @[Debug.scala 651:10]
      skip @[Debug.scala 651:10]
    node dbRamWrDataVec = cat(dbRamWrData, dbRamWrData) @[Cat.scala 20:58]
    node T_838 = and(ramWrMask, sbRamWrData) @[Debug.scala 656:16]
    node T_839 = not(ramWrMask) @[Debug.scala 656:37]
    node T_840 = and(T_839, ramRdData) @[Debug.scala 656:48]
    node T_841 = or(T_838, T_840) @[Debug.scala 656:34]
    node T_842 = and(ramWrMask, dbRamWrDataVec) @[Debug.scala 657:16]
    node T_843 = not(ramWrMask) @[Debug.scala 657:37]
    node T_844 = and(T_843, ramRdData) @[Debug.scala 657:48]
    node T_845 = or(T_842, T_844) @[Debug.scala 657:34]
    node T_846 = mux(sbRamWrEn, T_841, T_845) @[Debug.scala 655:19]
    ramWrData <= T_846 @[Debug.scala 655:13]
    node T_847 = or(sbRamWrEn, sbRamRdEn) @[Debug.scala 659:30]
    node T_848 = shr(dbRamAddr, 1) @[Debug.scala 660:15]
    node T_849 = mux(T_847, sbRamAddr, T_848) @[Debug.scala 659:19]
    ramAddr <= T_849 @[Debug.scala 659:13]
    infer mport T_850 = ramMem[ramAddr], clk
    ramRdData <= T_850 @[Debug.scala 662:13]
    when ramWrEn : @[Debug.scala 663:18]
      infer mport T_851 = ramMem[ramAddr], clk
      T_851 <= ramWrData @[Debug.scala 663:36]
      skip @[Debug.scala 663:18]
    node T_852 = or(sbRamWrEn, dbRamWrEn) @[Debug.scala 665:24]
    ramWrEn <= T_852 @[Debug.scala 665:11]
    wire T_875 : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>} @[Debug.scala 681:48]
    T_875 is invalid @[Debug.scala 681:48]
    node T_886 = bits(dbReq.data, 0, 0) @[Debug.scala 681:48]
    T_875.fullreset <= T_886 @[Debug.scala 681:48]
    node T_887 = bits(dbReq.data, 1, 1) @[Debug.scala 681:48]
    T_875.ndreset <= T_887 @[Debug.scala 681:48]
    node T_888 = bits(dbReq.data, 11, 2) @[Debug.scala 681:48]
    T_875.hartid <= T_888 @[Debug.scala 681:48]
    node T_889 = bits(dbReq.data, 14, 12) @[Debug.scala 681:48]
    T_875.access <= T_889 @[Debug.scala 681:48]
    node T_890 = bits(dbReq.data, 15, 15) @[Debug.scala 681:48]
    T_875.autoincrement <= T_890 @[Debug.scala 681:48]
    node T_891 = bits(dbReq.data, 18, 16) @[Debug.scala 681:48]
    T_875.serial <= T_891 @[Debug.scala 681:48]
    node T_892 = bits(dbReq.data, 21, 19) @[Debug.scala 681:48]
    T_875.buserror <= T_892 @[Debug.scala 681:48]
    node T_893 = bits(dbReq.data, 31, 22) @[Debug.scala 681:48]
    T_875.reserved0 <= T_893 @[Debug.scala 681:48]
    node T_894 = bits(dbReq.data, 32, 32) @[Debug.scala 681:48]
    T_875.haltnot <= T_894 @[Debug.scala 681:48]
    node T_895 = bits(dbReq.data, 33, 33) @[Debug.scala 681:48]
    T_875.interrupt <= T_895 @[Debug.scala 681:48]
    CONTROLWrData <- T_875 @[Debug.scala 681:17]
    wire T_904 : {interrupt : UInt<1>, haltnot : UInt<1>, data : UInt<32>} @[Debug.scala 682:44]
    T_904 is invalid @[Debug.scala 682:44]
    node T_908 = bits(dbReq.data, 31, 0) @[Debug.scala 682:44]
    T_904.data <= T_908 @[Debug.scala 682:44]
    node T_909 = bits(dbReq.data, 32, 32) @[Debug.scala 682:44]
    T_904.haltnot <= T_909 @[Debug.scala 682:44]
    node T_910 = bits(dbReq.data, 33, 33) @[Debug.scala 682:44]
    T_904.interrupt <= T_910 @[Debug.scala 682:44]
    RAMWrData <- T_904 @[Debug.scala 682:17]
    dbRamWrEn <= UInt<1>("h00") @[Debug.scala 684:14]
    CONTROLWrEn <= UInt<1>("h00") @[Debug.scala 685:15]
    node T_913 = shr(dbReq.addr, 4) @[Debug.scala 686:21]
    node T_915 = eq(T_913, UInt<1>("h00")) @[Debug.scala 686:27]
    when T_915 : @[Debug.scala 686:40]
      dbRamWrEn <= dbWrEn @[Debug.scala 687:15]
      skip @[Debug.scala 686:40]
    node T_917 = eq(dbReq.addr, UInt<5>("h010")) @[Debug.scala 688:27]
    node T_919 = eq(T_915, UInt<1>("h00")) @[Debug.scala 686:40]
    node T_920 = and(T_919, T_917) @[Debug.scala 688:42]
    when T_920 : @[Debug.scala 688:42]
      CONTROLWrEn <= dbWrEn @[Debug.scala 689:18]
      skip @[Debug.scala 688:42]
    node T_922 = eq(T_915, UInt<1>("h00")) @[Debug.scala 686:40]
    node T_924 = eq(T_917, UInt<1>("h00")) @[Debug.scala 688:42]
    node T_925 = and(T_922, T_924) @[Debug.scala 688:42]
    when T_925 : @[Debug.scala 690:15]
      skip @[Debug.scala 690:15]
    when reset : @[Debug.scala 694:16]
      CONTROLReg <- CONTROLReset @[Debug.scala 695:16]
      ndresetCtrReg <= UInt<1>("h00") @[Debug.scala 696:19]
      skip @[Debug.scala 694:16]
    node T_928 = eq(reset, UInt<1>("h00")) @[Debug.scala 694:16]
    node T_929 = and(T_928, CONTROLWrEn) @[Debug.scala 697:28]
    when T_929 : @[Debug.scala 697:28]
      CONTROLReg.hartid <= CONTROLWrData.hartid @[Debug.scala 709:30]
      node T_930 = or(CONTROLReg.fullreset, CONTROLWrData.fullreset) @[Debug.scala 710:54]
      CONTROLReg.fullreset <= T_930 @[Debug.scala 710:30]
      when CONTROLWrData.ndreset : @[Debug.scala 711:33]
        ndresetCtrReg <= UInt<1>("h01") @[Debug.scala 712:21]
        skip @[Debug.scala 711:33]
      node T_933 = eq(CONTROLWrData.ndreset, UInt<1>("h00")) @[Debug.scala 711:33]
      when T_933 : @[Debug.scala 713:17]
        node T_935 = eq(ndresetCtrReg, UInt<1>("h00")) @[Debug.scala 714:42]
        node T_938 = sub(ndresetCtrReg, UInt<1>("h01")) @[Debug.scala 714:79]
        node T_939 = tail(T_938, 1) @[Debug.scala 714:79]
        node T_940 = mux(T_935, UInt<1>("h00"), T_939) @[Debug.scala 714:27]
        ndresetCtrReg <= T_940 @[Debug.scala 714:21]
        skip @[Debug.scala 713:17]
      skip @[Debug.scala 697:28]
    node T_942 = eq(reset, UInt<1>("h00")) @[Debug.scala 694:16]
    node T_944 = eq(CONTROLWrEn, UInt<1>("h00")) @[Debug.scala 697:28]
    node T_945 = and(T_942, T_944) @[Debug.scala 697:28]
    when T_945 : @[Debug.scala 716:15]
      node T_947 = eq(ndresetCtrReg, UInt<1>("h00")) @[Debug.scala 717:40]
      node T_950 = sub(ndresetCtrReg, UInt<1>("h01")) @[Debug.scala 717:77]
      node T_951 = tail(T_950, 1) @[Debug.scala 717:77]
      node T_952 = mux(T_947, UInt<1>("h00"), T_951) @[Debug.scala 717:25]
      ndresetCtrReg <= T_952 @[Debug.scala 717:19]
      skip @[Debug.scala 716:15]
    CONTROLRdData <- CONTROLReg @[Debug.scala 723:17]
    CONTROLRdData.interrupt <= interruptRegs[CONTROLReg.hartid] @[Debug.scala 724:27]
    CONTROLRdData.haltnot <= haltnotRegs[CONTROLReg.hartid] @[Debug.scala 725:27]
    node T_954 = neq(ndresetCtrReg, UInt<1>("h00")) @[Debug.scala 726:44]
    CONTROLRdData.ndreset <= T_954 @[Debug.scala 726:27]
    RAMRdData.interrupt <= interruptRegs[CONTROLReg.hartid] @[Debug.scala 728:23]
    RAMRdData.haltnot <= haltnotRegs[CONTROLReg.hartid] @[Debug.scala 729:23]
    RAMRdData.data <= dbRamRdData @[Debug.scala 730:23]
    dbRdData <= UInt<1>("h00") @[Debug.scala 732:12]
    rdHaltnotStatus <= UInt<1>("h00") @[Debug.scala 736:19]
    node T_958 = eq(dbReq.addr, UInt<1>("h00")) @[Debug.scala 738:22]
    when T_958 : @[Debug.scala 738:36]
      rdHaltnotStatus <= haltnotStatus[0] @[Debug.scala 739:23]
      skip @[Debug.scala 738:36]
    dbRamRdEn <= UInt<1>("h00") @[Debug.scala 743:13]
    node T_960 = shr(dbReq.addr, 4) @[Debug.scala 744:21]
    node T_962 = eq(T_960, UInt<1>("h00")) @[Debug.scala 744:27]
    when T_962 : @[Debug.scala 744:40]
      node T_963 = cat(RAMRdData.interrupt, RAMRdData.haltnot) @[Debug.scala 745:28]
      node T_964 = cat(T_963, RAMRdData.data) @[Debug.scala 745:28]
      dbRdData <= T_964 @[Debug.scala 745:15]
      dbRamRdEn <= dbRdEn @[Debug.scala 746:15]
      skip @[Debug.scala 744:40]
    node T_966 = eq(dbReq.addr, UInt<5>("h010")) @[Debug.scala 747:26]
    node T_968 = eq(T_962, UInt<1>("h00")) @[Debug.scala 744:40]
    node T_969 = and(T_968, T_966) @[Debug.scala 747:41]
    when T_969 : @[Debug.scala 747:41]
      node T_970 = cat(CONTROLRdData.ndreset, CONTROLRdData.fullreset) @[Debug.scala 748:31]
      node T_971 = cat(CONTROLRdData.autoincrement, CONTROLRdData.access) @[Debug.scala 748:31]
      node T_972 = cat(T_971, CONTROLRdData.hartid) @[Debug.scala 748:31]
      node T_973 = cat(T_972, T_970) @[Debug.scala 748:31]
      node T_974 = cat(CONTROLRdData.buserror, CONTROLRdData.serial) @[Debug.scala 748:31]
      node T_975 = cat(CONTROLRdData.interrupt, CONTROLRdData.haltnot) @[Debug.scala 748:31]
      node T_976 = cat(T_975, CONTROLRdData.reserved0) @[Debug.scala 748:31]
      node T_977 = cat(T_976, T_974) @[Debug.scala 748:31]
      node T_978 = cat(T_977, T_973) @[Debug.scala 748:31]
      dbRdData <= T_978 @[Debug.scala 748:14]
      skip @[Debug.scala 747:41]
    node T_980 = eq(dbReq.addr, UInt<5>("h011")) @[Debug.scala 749:26]
    node T_982 = eq(T_962, UInt<1>("h00")) @[Debug.scala 744:40]
    node T_984 = eq(T_966, UInt<1>("h00")) @[Debug.scala 747:41]
    node T_985 = and(T_982, T_984) @[Debug.scala 747:41]
    node T_986 = and(T_985, T_980) @[Debug.scala 749:38]
    when T_986 : @[Debug.scala 749:38]
      node T_987 = cat(DMINFORdData.authbusy, DMINFORdData.authtype) @[Debug.scala 750:30]
      node T_988 = cat(T_987, DMINFORdData.version) @[Debug.scala 750:30]
      node T_989 = cat(DMINFORdData.reserved1, DMINFORdData.authenticated) @[Debug.scala 750:30]
      node T_990 = cat(DMINFORdData.dramsize, DMINFORdData.haltsum) @[Debug.scala 750:30]
      node T_991 = cat(T_990, T_989) @[Debug.scala 750:30]
      node T_992 = cat(T_991, T_988) @[Debug.scala 750:30]
      node T_993 = cat(DMINFORdData.access16, DMINFORdData.accesss8) @[Debug.scala 750:30]
      node T_994 = cat(DMINFORdData.access64, DMINFORdData.access32) @[Debug.scala 750:30]
      node T_995 = cat(T_994, T_993) @[Debug.scala 750:30]
      node T_996 = cat(DMINFORdData.serialcount, DMINFORdData.access128) @[Debug.scala 750:30]
      node T_997 = cat(DMINFORdData.reserved0, DMINFORdData.abussize) @[Debug.scala 750:30]
      node T_998 = cat(T_997, T_996) @[Debug.scala 750:30]
      node T_999 = cat(T_998, T_995) @[Debug.scala 750:30]
      node T_1000 = cat(T_999, T_992) @[Debug.scala 750:30]
      dbRdData <= T_1000 @[Debug.scala 750:14]
      skip @[Debug.scala 749:38]
    node T_1002 = eq(dbReq.addr, UInt<5>("h01b")) @[Debug.scala 751:26]
    node T_1004 = eq(T_962, UInt<1>("h00")) @[Debug.scala 744:40]
    node T_1006 = eq(T_966, UInt<1>("h00")) @[Debug.scala 747:41]
    node T_1007 = and(T_1004, T_1006) @[Debug.scala 747:41]
    node T_1009 = eq(T_980, UInt<1>("h00")) @[Debug.scala 749:38]
    node T_1010 = and(T_1007, T_1009) @[Debug.scala 749:38]
    node T_1011 = and(T_1010, T_1002) @[Debug.scala 751:39]
    when T_1011 : @[Debug.scala 751:39]
      dbRdData <= UInt<1>("h00") @[Debug.scala 755:16]
      skip @[Debug.scala 751:39]
    node T_1013 = shr(dbReq.addr, 2) @[Debug.scala 757:27]
    node T_1015 = eq(T_1013, UInt<3>("h07")) @[Debug.scala 757:33]
    node T_1017 = eq(T_962, UInt<1>("h00")) @[Debug.scala 744:40]
    node T_1019 = eq(T_966, UInt<1>("h00")) @[Debug.scala 747:41]
    node T_1020 = and(T_1017, T_1019) @[Debug.scala 747:41]
    node T_1022 = eq(T_980, UInt<1>("h00")) @[Debug.scala 749:38]
    node T_1023 = and(T_1020, T_1022) @[Debug.scala 749:38]
    node T_1025 = eq(T_1002, UInt<1>("h00")) @[Debug.scala 751:39]
    node T_1026 = and(T_1023, T_1025) @[Debug.scala 751:39]
    node T_1027 = and(T_1026, T_1015) @[Debug.scala 757:46]
    when T_1027 : @[Debug.scala 757:46]
      dbRdData <= rdHaltnotStatus @[Debug.scala 758:14]
      skip @[Debug.scala 757:46]
    node T_1029 = eq(T_962, UInt<1>("h00")) @[Debug.scala 744:40]
    node T_1031 = eq(T_966, UInt<1>("h00")) @[Debug.scala 747:41]
    node T_1032 = and(T_1029, T_1031) @[Debug.scala 747:41]
    node T_1034 = eq(T_980, UInt<1>("h00")) @[Debug.scala 749:38]
    node T_1035 = and(T_1032, T_1034) @[Debug.scala 749:38]
    node T_1037 = eq(T_1002, UInt<1>("h00")) @[Debug.scala 751:39]
    node T_1038 = and(T_1035, T_1037) @[Debug.scala 751:39]
    node T_1040 = eq(T_1015, UInt<1>("h00")) @[Debug.scala 757:46]
    node T_1041 = and(T_1038, T_1040) @[Debug.scala 757:46]
    when T_1041 : @[Debug.scala 759:16]
      dbRdData <= UInt<1>("h00") @[Debug.scala 774:14]
      skip @[Debug.scala 759:16]
    node T_1043 = bits(dbRdData, 33, 33) @[Debug.scala 778:30]
    node T_1045 = eq(dbReq.op, UInt<2>("h03")) @[Debug.scala 779:13]
    node T_1046 = and(T_1043, T_1045) @[Debug.scala 778:48]
    rdCondWrFailure <= T_1046 @[Debug.scala 778:19]
    node T_1048 = eq(dbReq.op, UInt<2>("h02")) @[Debug.scala 781:27]
    node T_1050 = eq(dbReq.op, UInt<2>("h03")) @[Debug.scala 782:14]
    node T_1051 = not(rdCondWrFailure) @[Debug.scala 782:44]
    node T_1052 = and(T_1050, T_1051) @[Debug.scala 782:41]
    node T_1053 = or(T_1048, T_1052) @[Debug.scala 781:49]
    dbWrNeeded <= T_1053 @[Debug.scala 781:14]
    node T_1056 = mux(rdCondWrFailure, UInt<2>("h01"), UInt<2>("h00")) @[Debug.scala 785:23]
    dbResult.resp <= T_1056 @[Debug.scala 785:17]
    dbResult.data <= dbRdData @[Debug.scala 788:17]
    node T_1058 = eq(stallFromSb, UInt<1>("h00")) @[Debug.scala 792:22]
    node T_1059 = eq(dbStateReg, UInt<1>("h00")) @[Debug.scala 792:51]
    node T_1060 = eq(dbStateReg, UInt<1>("h01")) @[Debug.scala 793:17]
    node T_1061 = and(io.db.resp.ready, io.db.resp.valid) @[Decoupled.scala 21:42]
    node T_1062 = and(T_1060, T_1061) @[Debug.scala 793:31]
    node T_1063 = or(T_1059, T_1062) @[Debug.scala 792:67]
    node T_1064 = and(T_1058, T_1063) @[Debug.scala 792:35]
    io.db.req.ready <= T_1064 @[Debug.scala 792:19]
    node T_1065 = eq(dbStateReg, UInt<1>("h01")) @[Debug.scala 795:35]
    io.db.resp.valid <= T_1065 @[Debug.scala 795:20]
    io.db.resp.bits <- dbRespReg @[Debug.scala 796:20]
    node T_1066 = and(io.db.req.ready, io.db.req.valid) @[Decoupled.scala 21:42]
    dbRdEn <= T_1066 @[Debug.scala 798:10]
    node T_1067 = and(io.db.req.ready, io.db.req.valid) @[Decoupled.scala 21:42]
    node T_1068 = and(dbWrNeeded, T_1067) @[Debug.scala 799:24]
    dbWrEn <= T_1068 @[Debug.scala 799:10]
    node T_1069 = eq(dbStateReg, UInt<1>("h00")) @[Debug.scala 804:20]
    when T_1069 : @[Debug.scala 804:35]
      node T_1070 = and(io.db.req.ready, io.db.req.valid) @[Decoupled.scala 21:42]
      when T_1070 : @[Debug.scala 805:28]
        dbStateReg <= UInt<1>("h01") @[Debug.scala 806:18]
        dbRespReg <- dbResult @[Debug.scala 807:17]
        skip @[Debug.scala 805:28]
      skip @[Debug.scala 804:35]
    node T_1071 = eq(dbStateReg, UInt<1>("h01")) @[Debug.scala 809:27]
    node T_1073 = eq(T_1069, UInt<1>("h00")) @[Debug.scala 804:35]
    node T_1074 = and(T_1073, T_1071) @[Debug.scala 809:41]
    when T_1074 : @[Debug.scala 809:41]
      node T_1075 = and(io.db.req.ready, io.db.req.valid) @[Decoupled.scala 21:42]
      when T_1075 : @[Debug.scala 810:28]
        dbStateReg <= UInt<1>("h01") @[Debug.scala 811:18]
        dbRespReg <- dbResult @[Debug.scala 812:17]
        skip @[Debug.scala 810:28]
      node T_1076 = and(io.db.resp.ready, io.db.resp.valid) @[Decoupled.scala 21:42]
      node T_1078 = eq(T_1075, UInt<1>("h00")) @[Debug.scala 810:28]
      node T_1079 = and(T_1078, T_1076) @[Debug.scala 813:35]
      when T_1079 : @[Debug.scala 813:35]
        dbStateReg <= UInt<1>("h00") @[Debug.scala 814:18]
        skip @[Debug.scala 813:35]
      skip @[Debug.scala 809:41]
    sbRomRdData <= UInt<1>("h00") @[Debug.scala 823:15]
    wire T_1101 : UInt<64>[15] @[Debug.scala 829:40]
    T_1101 is invalid @[Debug.scala 829:40]
    T_1101[0] <= UInt<64>("h0c0006f03c0006f") @[Debug.scala 829:40]
    T_1101[1] <= UInt<64>("h080006ffff00413") @[Debug.scala 829:40]
    T_1101[2] <= UInt<64>("h0ff0000f00000413") @[Debug.scala 829:40]
    T_1101[3] <= UInt<64>("h042802e2343803483") @[Debug.scala 829:40]
    T_1101[4] <= UInt<64>("h010802023f1402473") @[Debug.scala 829:40]
    T_1101[5] <= UInt<64>("h08474137b002473") @[Debug.scala 829:40]
    T_1101[6] <= UInt<64>("h07b20247302041a63") @[Debug.scala 829:40]
    T_1101[7] <= UInt<64>("h07b2410737b200073") @[Debug.scala 829:40]
    T_1101[8] <= UInt<64>("h01c0474137b002473") @[Debug.scala 829:40]
    T_1101[9] <= UInt<64>("h041663f4040413") @[Debug.scala 829:40]
    T_1101[10] <= UInt<64>("h04000006742903c23") @[Debug.scala 829:40]
    T_1101[11] <= UInt<64>("h010802623f1402473") @[Debug.scala 829:40]
    T_1101[12] <= UInt<64>("h07b0024737b046073") @[Debug.scala 829:40]
    T_1101[13] <= UInt<64>("h0fe040ce302047413") @[Debug.scala 829:40]
    T_1101[14] <= UInt<64>("h0fe1ff06f") @[Debug.scala 829:40]
    wire T_1104 : UInt @[Debug.scala 834:27]
    T_1104 is invalid @[Debug.scala 834:27]
    node T_1105 = bits(sbAddr, 6, 3) @[Debug.scala 839:28]
    T_1104 <= T_1105 @[Debug.scala 839:19]
    sbRomRdData <= T_1101[T_1104] @[Debug.scala 841:17]
    sbRamWrEn <= UInt<1>("h00") @[Debug.scala 852:14]
    SETHALTNOTWrEn <= UInt<1>("h00") @[Debug.scala 853:18]
    CLEARDEBINTWrEn <= UInt<1>("h00") @[Debug.scala 854:19]
    node T_1109 = bits(sbWrData, 31, 0) @[Debug.scala 872:71]
    node T_1110 = bits(sbWrData, 63, 32) @[Debug.scala 872:71]
    wire T_1116 : UInt<32>[2] @[Debug.scala 872:56]
    T_1116 is invalid @[Debug.scala 872:56]
    T_1116[0] <= T_1109 @[Debug.scala 872:56]
    T_1116[1] <= T_1110 @[Debug.scala 872:56]
    node T_1118 = bits(sbWrMask, 31, 0) @[Debug.scala 873:72]
    node T_1119 = bits(sbWrMask, 63, 32) @[Debug.scala 873:72]
    wire T_1125 : UInt<32>[2] @[Debug.scala 873:56]
    T_1125 is invalid @[Debug.scala 873:56]
    T_1125[0] <= T_1118 @[Debug.scala 873:56]
    T_1125[1] <= T_1119 @[Debug.scala 873:56]
    SETHALTNOTWrData <= T_1116[UInt<1>("h01")] @[Debug.scala 878:23]
    CLEARDEBINTWrData <= T_1116[UInt<1>("h00")] @[Debug.scala 879:23]
    node T_1131 = bits(sbAddr, 11, 8) @[Debug.scala 881:17]
    node T_1133 = eq(T_1131, UInt<3>("h04")) @[Debug.scala 881:24]
    when T_1133 : @[Debug.scala 881:36]
      sbRamWrEn <= sbWrEn @[Debug.scala 882:17]
      sbRamRdEn <= sbRdEn @[Debug.scala 883:17]
      skip @[Debug.scala 881:36]
    node T_1134 = bits(sbAddr, 11, 3) @[Debug.scala 886:29]
    node T_1137 = eq(T_1134, UInt<9>("h021")) @[Debug.scala 886:63]
    node T_1141 = neq(T_1125[UInt<1>("h01")], UInt<1>("h00")) @[Debug.scala 887:60]
    node T_1142 = and(T_1137, T_1141) @[Debug.scala 886:109]
    node T_1143 = and(T_1142, sbWrEn) @[Debug.scala 887:64]
    SETHALTNOTWrEn <= T_1143 @[Debug.scala 886:20]
    node T_1144 = bits(sbAddr, 11, 3) @[Debug.scala 890:30]
    node T_1147 = eq(T_1144, UInt<9>("h020")) @[Debug.scala 890:64]
    node T_1151 = neq(T_1125[UInt<1>("h00")], UInt<1>("h00")) @[Debug.scala 891:61]
    node T_1152 = and(T_1147, T_1151) @[Debug.scala 890:111]
    node T_1153 = and(T_1152, sbWrEn) @[Debug.scala 891:65]
    CLEARDEBINTWrEn <= T_1153 @[Debug.scala 890:21]
    sbRdData <= UInt<1>("h00") @[Debug.scala 899:12]
    sbRamRdEn <= UInt<1>("h00") @[Debug.scala 900:13]
    dbRamRdEn <= UInt<1>("h00") @[Debug.scala 902:13]
    node T_1157 = bits(sbAddr, 11, 8) @[Debug.scala 903:15]
    node T_1159 = eq(T_1157, UInt<3>("h04")) @[Debug.scala 903:23]
    when T_1159 : @[Debug.scala 903:36]
      sbRdData <= sbRamRdData @[Debug.scala 904:15]
      sbRamRdEn <= sbRdEn @[Debug.scala 905:15]
      skip @[Debug.scala 903:36]
    node T_1160 = bits(sbAddr, 11, 8) @[Debug.scala 906:21]
    node T_1163 = eq(T_1160, UInt<4>("h08")) @[Package.scala 7:47]
    node T_1164 = eq(T_1160, UInt<4>("h09")) @[Package.scala 7:47]
    node T_1165 = or(T_1163, T_1164) @[Package.scala 7:62]
    node T_1167 = eq(T_1159, UInt<1>("h00")) @[Debug.scala 903:36]
    node T_1168 = and(T_1167, T_1165) @[Debug.scala 906:54]
    when T_1168 : @[Debug.scala 906:54]
      sbRdData <= sbRomRdData @[Debug.scala 908:16]
      skip @[Debug.scala 906:54]
    node T_1170 = eq(T_1159, UInt<1>("h00")) @[Debug.scala 903:36]
    node T_1172 = eq(T_1165, UInt<1>("h00")) @[Debug.scala 906:54]
    node T_1173 = and(T_1170, T_1172) @[Debug.scala 906:54]
    when T_1173 : @[Debug.scala 912:16]
      sbRdData <= UInt<1>("h00") @[Debug.scala 914:14]
      skip @[Debug.scala 912:16]
    reg sbAcqReg : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}, clk
    reg sbAcqValidReg : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1202 = eq(sbAcqReg.a_type, UInt<3>("h00")) @[Definitions.scala 212:64]
    node sbReg_get = and(sbAcqReg.is_builtin_type, T_1202) @[Definitions.scala 212:54]
    node T_1203 = eq(sbAcqReg.a_type, UInt<3>("h01")) @[Definitions.scala 212:64]
    node sbReg_getblk = and(sbAcqReg.is_builtin_type, T_1203) @[Definitions.scala 212:54]
    node T_1204 = eq(sbAcqReg.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
    node sbReg_put = and(sbAcqReg.is_builtin_type, T_1204) @[Definitions.scala 212:54]
    node T_1205 = eq(sbAcqReg.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
    node sbReg_putblk = and(sbAcqReg.is_builtin_type, T_1205) @[Definitions.scala 212:54]
    node sbMultibeat = and(sbReg_getblk, sbAcqValidReg) @[Debug.scala 927:34]
    node T_1207 = add(sbAcqReg.addr_beat, UInt<1>("h01")) @[Debug.scala 929:39]
    node sbBeatInc1 = tail(T_1207, 1) @[Debug.scala 929:39]
    node sbLast = eq(sbAcqReg.addr_beat, UInt<3>("h07")) @[Debug.scala 931:36]
    wire T_1216 : UInt<3>[2] @[Definitions.scala 357:30]
    T_1216 is invalid @[Definitions.scala 357:30]
    T_1216[0] <= UInt<3>("h00") @[Definitions.scala 357:30]
    T_1216[1] <= UInt<3>("h04") @[Definitions.scala 357:30]
    node T_1218 = eq(sbAcqReg.a_type, T_1216[0]) @[Package.scala 7:47]
    node T_1219 = eq(sbAcqReg.a_type, T_1216[1]) @[Package.scala 7:47]
    node T_1220 = or(T_1218, T_1219) @[Package.scala 7:62]
    node T_1221 = and(sbAcqReg.is_builtin_type, T_1220) @[Definitions.scala 300:27]
    node T_1222 = bits(sbAcqReg.union, 10, 8) @[Definitions.scala 178:40]
    node T_1224 = mux(T_1221, T_1222, UInt<3>("h00")) @[Definitions.scala 300:10]
    node T_1225 = cat(sbAcqReg.addr_block, sbAcqReg.addr_beat) @[Cat.scala 20:58]
    node T_1226 = cat(T_1225, T_1224) @[Cat.scala 20:58]
    sbAddr <= T_1226 @[Debug.scala 933:10]
    node T_1227 = or(sbReg_get, sbReg_getblk) @[Debug.scala 934:42]
    node T_1228 = and(sbAcqValidReg, T_1227) @[Debug.scala 934:28]
    sbRdEn <= T_1228 @[Debug.scala 934:10]
    node T_1229 = or(sbReg_put, sbReg_putblk) @[Debug.scala 935:42]
    node T_1230 = and(sbAcqValidReg, T_1229) @[Debug.scala 935:28]
    sbWrEn <= T_1230 @[Debug.scala 935:10]
    sbWrData <= sbAcqReg.data @[Debug.scala 936:12]
    node T_1232 = eq(sbAcqReg.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
    node T_1233 = and(sbAcqReg.is_builtin_type, T_1232) @[Definitions.scala 212:54]
    node T_1250 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
    node T_1252 = eq(sbAcqReg.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
    node T_1253 = and(sbAcqReg.is_builtin_type, T_1252) @[Definitions.scala 212:54]
    node T_1255 = eq(sbAcqReg.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
    node T_1256 = and(sbAcqReg.is_builtin_type, T_1255) @[Definitions.scala 212:54]
    node T_1257 = or(T_1253, T_1256) @[Definitions.scala 190:56]
    node T_1258 = bits(sbAcqReg.union, 8, 1) @[Definitions.scala 191:25]
    node T_1260 = mux(T_1257, T_1258, UInt<1>("h00")) @[Definitions.scala 192:30]
    node T_1261 = mux(T_1233, T_1250, T_1260) @[Definitions.scala 192:8]
    node T_1262 = bits(T_1261, 0, 0) @[Bitwise.scala 13:51]
    node T_1263 = bits(T_1261, 1, 1) @[Bitwise.scala 13:51]
    node T_1264 = bits(T_1261, 2, 2) @[Bitwise.scala 13:51]
    node T_1265 = bits(T_1261, 3, 3) @[Bitwise.scala 13:51]
    node T_1266 = bits(T_1261, 4, 4) @[Bitwise.scala 13:51]
    node T_1267 = bits(T_1261, 5, 5) @[Bitwise.scala 13:51]
    node T_1268 = bits(T_1261, 6, 6) @[Bitwise.scala 13:51]
    node T_1269 = bits(T_1261, 7, 7) @[Bitwise.scala 13:51]
    node T_1270 = bits(T_1262, 0, 0) @[Bitwise.scala 33:15]
    node T_1273 = mux(T_1270, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1274 = bits(T_1263, 0, 0) @[Bitwise.scala 33:15]
    node T_1277 = mux(T_1274, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1278 = bits(T_1264, 0, 0) @[Bitwise.scala 33:15]
    node T_1281 = mux(T_1278, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1282 = bits(T_1265, 0, 0) @[Bitwise.scala 33:15]
    node T_1285 = mux(T_1282, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1286 = bits(T_1266, 0, 0) @[Bitwise.scala 33:15]
    node T_1289 = mux(T_1286, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1290 = bits(T_1267, 0, 0) @[Bitwise.scala 33:15]
    node T_1293 = mux(T_1290, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1294 = bits(T_1268, 0, 0) @[Bitwise.scala 33:15]
    node T_1297 = mux(T_1294, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1298 = bits(T_1269, 0, 0) @[Bitwise.scala 33:15]
    node T_1301 = mux(T_1298, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
    node T_1302 = cat(T_1277, T_1273) @[Cat.scala 20:58]
    node T_1303 = cat(T_1285, T_1281) @[Cat.scala 20:58]
    node T_1304 = cat(T_1303, T_1302) @[Cat.scala 20:58]
    node T_1305 = cat(T_1293, T_1289) @[Cat.scala 20:58]
    node T_1306 = cat(T_1301, T_1297) @[Cat.scala 20:58]
    node T_1307 = cat(T_1306, T_1305) @[Cat.scala 20:58]
    node T_1308 = cat(T_1307, T_1304) @[Cat.scala 20:58]
    sbWrMask <= T_1308 @[Debug.scala 937:12]
    node T_1309 = and(io.tl.acquire.ready, io.tl.acquire.valid) @[Decoupled.scala 21:42]
    when T_1309 : @[Debug.scala 942:30]
      sbAcqReg <- io.tl.acquire.bits @[Debug.scala 943:20]
      sbAcqValidReg <= UInt<1>("h01") @[Debug.scala 944:20]
      skip @[Debug.scala 942:30]
    node T_1311 = and(io.tl.grant.ready, io.tl.grant.valid) @[Decoupled.scala 21:42]
    node T_1313 = eq(T_1309, UInt<1>("h00")) @[Debug.scala 942:30]
    node T_1314 = and(T_1313, T_1311) @[Debug.scala 945:36]
    when T_1314 : @[Debug.scala 945:36]
      when sbMultibeat : @[Debug.scala 946:23]
        sbAcqReg.addr_beat <= sbBeatInc1 @[Debug.scala 947:26]
        when sbLast : @[Debug.scala 948:21]
          sbAcqValidReg <= UInt<1>("h00") @[Debug.scala 949:23]
          skip @[Debug.scala 948:21]
        skip @[Debug.scala 946:23]
      node T_1317 = eq(sbMultibeat, UInt<1>("h00")) @[Debug.scala 946:23]
      when T_1317 : @[Debug.scala 951:19]
        sbAcqValidReg <= UInt<1>("h00") @[Debug.scala 952:21]
        skip @[Debug.scala 951:19]
      skip @[Debug.scala 945:36]
    io.tl.grant.valid <= sbAcqValidReg @[Debug.scala 957:21]
    node T_1335 = eq(UInt<3>("h06"), sbAcqReg.a_type) @[Mux.scala 46:19]
    node T_1336 = mux(T_1335, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16]
    node T_1337 = eq(UInt<3>("h05"), sbAcqReg.a_type) @[Mux.scala 46:19]
    node T_1338 = mux(T_1337, UInt<3>("h01"), T_1336) @[Mux.scala 46:16]
    node T_1339 = eq(UInt<3>("h04"), sbAcqReg.a_type) @[Mux.scala 46:19]
    node T_1340 = mux(T_1339, UInt<3>("h04"), T_1338) @[Mux.scala 46:16]
    node T_1341 = eq(UInt<3>("h03"), sbAcqReg.a_type) @[Mux.scala 46:19]
    node T_1342 = mux(T_1341, UInt<3>("h03"), T_1340) @[Mux.scala 46:16]
    node T_1343 = eq(UInt<3>("h02"), sbAcqReg.a_type) @[Mux.scala 46:19]
    node T_1344 = mux(T_1343, UInt<3>("h03"), T_1342) @[Mux.scala 46:16]
    node T_1345 = eq(UInt<3>("h01"), sbAcqReg.a_type) @[Mux.scala 46:19]
    node T_1346 = mux(T_1345, UInt<3>("h05"), T_1344) @[Mux.scala 46:16]
    node T_1347 = eq(UInt<3>("h00"), sbAcqReg.a_type) @[Mux.scala 46:19]
    node T_1348 = mux(T_1347, UInt<3>("h04"), T_1346) @[Mux.scala 46:16]
    wire T_1372 : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 863:19]
    T_1372 is invalid @[Definitions.scala 863:19]
    T_1372.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 864:25]
    T_1372.g_type <= T_1348 @[Definitions.scala 865:16]
    T_1372.client_xact_id <= sbAcqReg.client_xact_id @[Definitions.scala 866:24]
    T_1372.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 867:25]
    T_1372.addr_beat <= sbAcqReg.addr_beat @[Definitions.scala 868:19]
    T_1372.data <= sbRdData @[Definitions.scala 869:14]
    io.tl.grant.bits <- T_1372 @[Debug.scala 958:20]
    stallFromDb <= UInt<1>("h00") @[Debug.scala 967:15]
    node T_1395 = or(sbRamRdEn, sbRamWrEn) @[Debug.scala 969:28]
    stallFromSb <= T_1395 @[Debug.scala 969:15]
    node T_1397 = eq(sbLast, UInt<1>("h00")) @[Debug.scala 973:32]
    node T_1398 = and(sbMultibeat, T_1397) @[Debug.scala 973:30]
    node T_1400 = eq(io.tl.grant.ready, UInt<1>("h00")) @[Debug.scala 973:67]
    node T_1401 = and(io.tl.grant.valid, T_1400) @[Debug.scala 973:64]
    node T_1402 = or(T_1398, T_1401) @[Debug.scala 973:41]
    node sbStall = or(T_1402, stallFromDb) @[Debug.scala 973:87]
    node T_1404 = eq(sbStall, UInt<1>("h00")) @[Debug.scala 975:26]
    io.tl.acquire.ready <= T_1404 @[Debug.scala 975:23]
    node T_1406 = neq(ndresetCtrReg, UInt<1>("h00")) @[Debug.scala 981:33]
    io.ndreset <= T_1406 @[Debug.scala 981:16]
    io.fullreset <= CONTROLReg.fullreset @[Debug.scala 982:16]
    
  module DefaultCoreplex : 
    input clk : Clock
    input reset : UInt<1>
    output io : {master : {mem : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], mmio : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}, flip slave : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], flip interrupts : UInt<1>[2], flip debug : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<5>, data : UInt<34>, op : UInt<2>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<34>, resp : UInt<2>}}}, flip clint_1 : {mtip : UInt<1>, msip : UInt<1>}[1]}
    
    io is invalid
    wire tileResets : UInt<1>[1] @[Coreplex.scala 69:24]
    tileResets is invalid @[Coreplex.scala 69:24]
    inst tileList_0 of RocketTile @[Configs.scala 104:17]
    tileList_0.io is invalid
    tileList_0.clk <= clk
    tileList_0.reset <= tileResets[0]
    inst PortedTileLinkCrossbar_1 of PortedTileLinkCrossbar @[Coreplex.scala 95:27]
    PortedTileLinkCrossbar_1.io is invalid
    PortedTileLinkCrossbar_1.clk <= clk
    PortedTileLinkCrossbar_1.reset <= reset
    inst L2BroadcastHub_1 of L2BroadcastHub @[Configs.scala 74:15]
    L2BroadcastHub_1.io is invalid
    L2BroadcastHub_1.clk <= clk
    L2BroadcastHub_1.reset <= reset
    L2BroadcastHub_1.io.incoherent[0] <= UInt<1>("h00") @[Coreplex.scala 99:54]
    inst MMIOTileLinkManager_1 of MMIOTileLinkManager @[Coreplex.scala 101:29]
    MMIOTileLinkManager_1.io is invalid
    MMIOTileLinkManager_1.clk <= clk
    MMIOTileLinkManager_1.reset <= reset
    PortedTileLinkCrossbar_1.io.clients_cached[0] <- tileList_0.io.cached[0] @[Coreplex.scala 109:33]
    PortedTileLinkCrossbar_1.io.clients_uncached[0] <- tileList_0.io.uncached[0] @[Coreplex.scala 110:35]
    PortedTileLinkCrossbar_1.io.managers[0] <- L2BroadcastHub_1.io.inner @[Coreplex.scala 111:27]
    PortedTileLinkCrossbar_1.io.managers[1] <- MMIOTileLinkManager_1.io.inner @[Coreplex.scala 111:27]
    inst TileLinkMemoryInterconnect_1 of TileLinkMemoryInterconnect @[Coreplex.scala 114:24]
    TileLinkMemoryInterconnect_1.io is invalid
    TileLinkMemoryInterconnect_1.clk <= clk
    TileLinkMemoryInterconnect_1.reset <= reset
    inst ClientTileLinkIOUnwrapper_1 of ClientTileLinkIOUnwrapper @[Coreplex.scala 119:26]
    ClientTileLinkIOUnwrapper_1.io is invalid
    ClientTileLinkIOUnwrapper_1.clk <= clk
    ClientTileLinkIOUnwrapper_1.reset <= reset
    inst ClientTileLinkEnqueuer_1 of ClientTileLinkEnqueuer @[Enqueuer.scala 35:19]
    ClientTileLinkEnqueuer_1.io is invalid
    ClientTileLinkEnqueuer_1.clk <= clk
    ClientTileLinkEnqueuer_1.reset <= reset
    ClientTileLinkEnqueuer_1.io.inner <- L2BroadcastHub_1.io.outer @[Enqueuer.scala 36:16]
    ClientTileLinkIOUnwrapper_1.io.in <- ClientTileLinkEnqueuer_1.io.outer @[Coreplex.scala 120:20]
    TileLinkMemoryInterconnect_1.io.in[0] <- ClientTileLinkIOUnwrapper_1.io.out @[Tilelink.scala 175:9]
    io.master.mem <= TileLinkMemoryInterconnect_1.io.out @[Coreplex.scala 124:19]
    inst ClientUncachedTileLinkEnqueuer_1 of ClientUncachedTileLinkEnqueuer @[Enqueuer.scala 43:19]
    ClientUncachedTileLinkEnqueuer_1.io is invalid
    ClientUncachedTileLinkEnqueuer_1.clk <= clk
    ClientUncachedTileLinkEnqueuer_1.reset <= reset
    ClientUncachedTileLinkEnqueuer_1.io.inner <- MMIOTileLinkManager_1.io.outer @[Enqueuer.scala 44:16]
    inst TileLinkRecursiveInterconnect_2 of TileLinkRecursiveInterconnect @[Coreplex.scala 133:29]
    TileLinkRecursiveInterconnect_2.io is invalid
    TileLinkRecursiveInterconnect_2.clk <= clk
    TileLinkRecursiveInterconnect_2.reset <= reset
    TileLinkRecursiveInterconnect_2.io.in[0] <- ClientUncachedTileLinkEnqueuer_1.io.outer @[Coreplex.scala 134:28]
    inst PLIC_1 of PLIC @[Coreplex.scala 136:22]
    PLIC_1.io is invalid
    PLIC_1.clk <= clk
    PLIC_1.reset <= reset
    PLIC_1.io.tl <- TileLinkRecursiveInterconnect_2.io.out[1] @[Coreplex.scala 137:16]
    inst LevelGateway_2 of LevelGateway @[Coreplex.scala 139:27]
    LevelGateway_2.io is invalid
    LevelGateway_2.clk <= clk
    LevelGateway_2.reset <= reset
    LevelGateway_2.io.interrupt <= io.interrupts[0] @[Coreplex.scala 140:28]
    PLIC_1.io.devices[0] <- LevelGateway_2.io.plic @[Coreplex.scala 141:26]
    inst LevelGateway_1_1 of LevelGateway @[Coreplex.scala 139:27]
    LevelGateway_1_1.io is invalid
    LevelGateway_1_1.clk <= clk
    LevelGateway_1_1.reset <= reset
    LevelGateway_1_1.io.interrupt <= io.interrupts[1] @[Coreplex.scala 140:28]
    PLIC_1.io.devices[1] <- LevelGateway_1_1.io.plic @[Coreplex.scala 141:26]
    inst DebugModule_1 of DebugModule @[Coreplex.scala 144:29]
    DebugModule_1.io is invalid
    DebugModule_1.clk <= clk
    DebugModule_1.reset <= reset
    DebugModule_1.io.tl <- TileLinkRecursiveInterconnect_2.io.out[0] @[Coreplex.scala 145:23]
    DebugModule_1.io.db <- io.debug @[Coreplex.scala 146:23]
    tileResets[0] <= reset @[Coreplex.scala 150:17]
    tileList_0.io.interrupts <- io.clint_1[0] @[Coreplex.scala 151:26]
    tileList_0.io.interrupts.meip <= PLIC_1.io.harts[0] @[Coreplex.scala 152:31]
    tileList_0.io.interrupts.seip <= PLIC_1.io.harts[1] @[Coreplex.scala 153:41]
    tileList_0.io.interrupts.debug <= DebugModule_1.io.debugInterrupts[0] @[Coreplex.scala 154:32]
    tileList_0.io.hartid <= UInt<1>("h00") @[Coreplex.scala 155:22]
    io.master.mmio <- TileLinkRecursiveInterconnect_2.io.out[2] @[Coreplex.scala 162:32]
    
  module LockingRRArbiter_12 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}[1], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h00")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_518 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_520 : UInt, clk
    node T_522 = neq(T_518, UInt<1>("h00")) @[Arbiter.scala 39:34]
    wire T_530 : UInt<3>[1] @[Definitions.scala 853:34]
    T_530 is invalid @[Definitions.scala 853:34]
    T_530[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_532 = eq(io.out.bits.g_type, T_530[0]) @[Package.scala 7:47]
    node T_533 = eq(io.out.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_534 = mux(io.out.bits.is_builtin_type, T_532, T_533) @[Definitions.scala 274:33]
    node T_535 = and(UInt<1>("h01"), T_534) @[Definitions.scala 274:27]
    node T_536 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_537 = and(T_536, T_535) @[Arbiter.scala 42:25]
    when T_537 : @[Arbiter.scala 42:39]
      T_520 <= io.chosen @[Arbiter.scala 43:15]
      node T_539 = eq(T_518, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_541 = add(T_518, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_542 = tail(T_541, 1) @[Counter.scala 21:22]
      T_518 <= T_542 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_522 : @[Arbiter.scala 47:19]
      io.chosen <= T_520 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_544 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    reg lastGrant : UInt<1>, clk
    when T_544 : @[Reg.scala 29:19]
      lastGrant <= io.chosen @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75]
    node T_547 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_548 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34]
    node T_549 = or(T_548, T_547) @[Arbiter.scala 64:50]
    node T_551 = eq(T_520, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_552 = mux(T_522, T_551, T_549) @[Arbiter.scala 49:22]
    node T_553 = and(T_552, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_553 @[Arbiter.scala 49:16]
    
  module ClientUncachedTileLinkIORouter_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1]}
    
    io is invalid
    wire T_1246 : UInt<3>[2] @[Definitions.scala 357:30]
    T_1246 is invalid @[Definitions.scala 357:30]
    T_1246[0] <= UInt<3>("h00") @[Definitions.scala 357:30]
    T_1246[1] <= UInt<3>("h04") @[Definitions.scala 357:30]
    node T_1248 = eq(io.in.acquire.bits.a_type, T_1246[0]) @[Package.scala 7:47]
    node T_1249 = eq(io.in.acquire.bits.a_type, T_1246[1]) @[Package.scala 7:47]
    node T_1250 = or(T_1248, T_1249) @[Package.scala 7:62]
    node T_1251 = and(io.in.acquire.bits.is_builtin_type, T_1250) @[Definitions.scala 300:27]
    node T_1252 = bits(io.in.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
    node T_1254 = mux(T_1251, T_1252, UInt<3>("h00")) @[Definitions.scala 300:10]
    node T_1255 = cat(io.in.acquire.bits.addr_block, io.in.acquire.bits.addr_beat) @[Cat.scala 20:58]
    node T_1256 = cat(T_1255, T_1254) @[Cat.scala 20:58]
    node T_1258 = leq(UInt<13>("h01000"), T_1256) @[addrmap.scala 26:46]
    node T_1260 = lt(T_1256, UInt<14>("h02000")) @[addrmap.scala 26:56]
    node T_1261 = and(T_1258, T_1260) @[addrmap.scala 26:51]
    node T_1263 = leq(UInt<31>("h044000000"), T_1256) @[addrmap.scala 26:46]
    node T_1265 = lt(T_1256, UInt<31>("h044010000")) @[addrmap.scala 26:56]
    node T_1266 = and(T_1263, T_1265) @[addrmap.scala 26:51]
    node acq_route = or(T_1261, T_1266) @[addrmap.scala 157:54]
    io.in.acquire.ready <= UInt<1>("h00") @[Interconnect.scala 206:23]
    node T_1268 = bits(acq_route, 0, 0) @[Interconnect.scala 209:58]
    node T_1269 = and(io.in.acquire.valid, T_1268) @[Interconnect.scala 209:46]
    io.out[0].acquire.valid <= T_1269 @[Interconnect.scala 209:23]
    io.out[0].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22]
    node T_1270 = bits(acq_route, 0, 0) @[Interconnect.scala 211:20]
    when T_1270 : @[Interconnect.scala 211:25]
      io.in.acquire.ready <= io.out[0].acquire.ready @[Interconnect.scala 211:47]
      skip @[Interconnect.scala 211:25]
    inst gnt_arb of LockingRRArbiter_12 @[Interconnect.scala 214:23]
    gnt_arb.io is invalid
    gnt_arb.clk <= clk
    gnt_arb.reset <= reset
    gnt_arb.io.in[0] <- io.out[0].grant @[Interconnect.scala 216:17]
    io.in.grant <- gnt_arb.io.out @[Interconnect.scala 217:15]
    node T_1294 = eq(io.in.acquire.valid, UInt<1>("h00")) @[Interconnect.scala 219:10]
    node T_1296 = neq(acq_route, UInt<1>("h00")) @[Interconnect.scala 219:44]
    node T_1297 = or(T_1294, T_1296) @[Interconnect.scala 219:31]
    node T_1298 = or(T_1297, reset) @[Interconnect.scala 219:9]
    node T_1300 = eq(T_1298, UInt<1>("h00")) @[Interconnect.scala 219:9]
    when T_1300 : @[Interconnect.scala 219:9]
      printf(clk, UInt<1>(1), "Assertion failed: No valid route\n    at Interconnect.scala:219 assert(!io.in.acquire.valid || acq_route.orR, \"No valid route\")\n") @[Interconnect.scala 219:9]
      stop(clk, UInt<1>(1), 1) @[Interconnect.scala 219:9]
      skip @[Interconnect.scala 219:9]
    
  module ClientUncachedTileLinkIOCrossbar_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1]}
    
    io is invalid
    inst ClientUncachedTileLinkIORouter_2_1 of ClientUncachedTileLinkIORouter_2 @[Interconnect.scala 235:24]
    ClientUncachedTileLinkIORouter_2_1.io is invalid
    ClientUncachedTileLinkIORouter_2_1.clk <= clk
    ClientUncachedTileLinkIORouter_2_1.reset <= reset
    ClientUncachedTileLinkIORouter_2_1.io.in <- io.in[0] @[Interconnect.scala 236:18]
    io.out <= ClientUncachedTileLinkIORouter_2_1.io.out @[Interconnect.scala 237:12]
    
  module TileLinkRecursiveInterconnect_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1]}
    
    io is invalid
    inst xbar of ClientUncachedTileLinkIOCrossbar_2 @[Interconnect.scala 269:20]
    xbar.io is invalid
    xbar.clk <= clk
    xbar.reset <= reset
    xbar.io.in <= io.in @[Interconnect.scala 270:14]
    io.out[0] <- xbar.io.out[0] @[Interconnect.scala 272:10]
    
  module ReorderQueue_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : {addr_beat : UInt<3>, subblock : UInt<1>}, tag : UInt<4>}}, deq : {flip valid : UInt<1>, flip tag : UInt<4>, data : {addr_beat : UInt<3>, subblock : UInt<1>}, matches : UInt<1>}}
    
    io is invalid
    cmem T_229 : {addr_beat : UInt<3>, subblock : UInt<1>}[16] @[ReorderQueue.scala 67:23]
    wire T_251 : UInt<1>[16] @[ReorderQueue.scala 68:53]
    T_251 is invalid @[ReorderQueue.scala 68:53]
    T_251[0] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[1] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[2] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[3] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[4] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[5] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[6] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[7] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[8] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[9] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[10] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[11] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[12] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[13] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[14] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    T_251[15] <= UInt<1>("h01") @[ReorderQueue.scala 68:53]
    reg T_255 : UInt<1>[16], clk with : (reset => (reset, T_251))
    io.enq.ready <= T_255[io.enq.bits.tag] @[ReorderQueue.scala 70:18]
    infer mport T_257 = T_229[io.deq.tag], clk
    io.deq.data <- T_257 @[ReorderQueue.scala 71:17]
    node T_281 = eq(T_255[io.deq.tag], UInt<1>("h00")) @[ReorderQueue.scala 72:23]
    io.deq.matches <= T_281 @[ReorderQueue.scala 72:20]
    node T_282 = and(io.enq.valid, io.enq.ready) @[ReorderQueue.scala 74:24]
    when T_282 : @[ReorderQueue.scala 74:41]
      infer mport T_283 = T_229[io.enq.bits.tag], clk
      T_283 <- io.enq.bits.data @[ReorderQueue.scala 75:33]
      T_255[io.enq.bits.tag] <= UInt<1>("h00") @[ReorderQueue.scala 76:33]
      skip @[ReorderQueue.scala 74:41]
    when io.deq.valid : @[ReorderQueue.scala 79:25]
      T_255[io.deq.tag] <= UInt<1>("h01") @[ReorderQueue.scala 80:28]
      skip @[ReorderQueue.scala 79:25]
    
  module IdMapper : 
    input clk : Clock
    input reset : UInt<1>
    output io : {req : {flip valid : UInt<1>, ready : UInt<1>, flip in_id : UInt<4>, out_id : UInt<5>}, resp : {flip valid : UInt<1>, matches : UInt<1>, flip out_id : UInt<5>, in_id : UInt<4>}}
    
    io is invalid
    io.req.ready <= UInt<1>("h01") @[Nasti.scala 33:18]
    io.req.out_id <= io.req.in_id @[Nasti.scala 34:19]
    io.resp.matches <= UInt<1>("h01") @[Nasti.scala 35:21]
    io.resp.in_id <= io.resp.out_id @[Nasti.scala 36:19]
    
  module LockingArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 32:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16]
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15]
    reg T_766 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_768 : UInt, clk
    node T_770 = neq(T_766, UInt<1>("h00")) @[Arbiter.scala 39:34]
    wire T_778 : UInt<3>[1] @[Definitions.scala 853:34]
    T_778 is invalid @[Definitions.scala 853:34]
    T_778[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_780 = eq(io.out.bits.g_type, T_778[0]) @[Package.scala 7:47]
    node T_781 = eq(io.out.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_782 = mux(io.out.bits.is_builtin_type, T_780, T_781) @[Definitions.scala 274:33]
    node T_783 = and(UInt<1>("h01"), T_782) @[Definitions.scala 274:27]
    node T_784 = and(io.out.ready, io.out.valid) @[Decoupled.scala 21:42]
    node T_785 = and(T_784, T_783) @[Arbiter.scala 42:25]
    when T_785 : @[Arbiter.scala 42:39]
      T_768 <= io.chosen @[Arbiter.scala 43:15]
      node T_787 = eq(T_766, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_789 = add(T_766, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_790 = tail(T_789, 1) @[Counter.scala 21:22]
      T_766 <= T_790 @[Counter.scala 21:13]
      skip @[Arbiter.scala 42:39]
    when T_770 : @[Arbiter.scala 47:19]
      io.chosen <= T_768 @[Arbiter.scala 47:31]
      skip @[Arbiter.scala 47:19]
    node T_793 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 23:82]
    node T_795 = eq(T_768, UInt<1>("h00")) @[Arbiter.scala 49:39]
    node T_796 = mux(T_770, T_795, UInt<1>("h01")) @[Arbiter.scala 49:22]
    node T_797 = and(T_796, io.out.ready) @[Arbiter.scala 49:55]
    io.in[0].ready <= T_797 @[Arbiter.scala 49:16]
    node T_799 = eq(T_768, UInt<1>("h01")) @[Arbiter.scala 49:39]
    node T_800 = mux(T_770, T_799, T_793) @[Arbiter.scala 49:22]
    node T_801 = and(T_800, io.out.ready) @[Arbiter.scala 49:55]
    io.in[1].ready <= T_801 @[Arbiter.scala 49:16]
    when io.in[0].valid : @[Arbiter.scala 80:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 80:36]
      skip @[Arbiter.scala 80:27]
    
  module NastiIOTileLinkIOConverter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, nasti : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
    
    io is invalid
    wire T_688 : UInt<3>[3] @[Definitions.scala 354:26]
    T_688 is invalid @[Definitions.scala 354:26]
    T_688[0] <= UInt<3>("h02") @[Definitions.scala 354:26]
    T_688[1] <= UInt<3>("h03") @[Definitions.scala 354:26]
    T_688[2] <= UInt<3>("h04") @[Definitions.scala 354:26]
    node T_690 = eq(io.tl.acquire.bits.a_type, T_688[0]) @[Package.scala 7:47]
    node T_691 = eq(io.tl.acquire.bits.a_type, T_688[1]) @[Package.scala 7:47]
    node T_692 = eq(io.tl.acquire.bits.a_type, T_688[2]) @[Package.scala 7:47]
    node T_693 = or(T_690, T_691) @[Package.scala 7:62]
    node T_694 = or(T_693, T_692) @[Package.scala 7:62]
    node has_data = and(io.tl.acquire.bits.is_builtin_type, T_694) @[Definitions.scala 228:55]
    wire T_703 : UInt<3>[3] @[Definitions.scala 356:29]
    T_703 is invalid @[Definitions.scala 356:29]
    T_703[0] <= UInt<3>("h02") @[Definitions.scala 356:29]
    T_703[1] <= UInt<3>("h00") @[Definitions.scala 356:29]
    T_703[2] <= UInt<3>("h04") @[Definitions.scala 356:29]
    node T_705 = eq(io.tl.acquire.bits.a_type, T_703[0]) @[Package.scala 7:47]
    node T_706 = eq(io.tl.acquire.bits.a_type, T_703[1]) @[Package.scala 7:47]
    node T_707 = eq(io.tl.acquire.bits.a_type, T_703[2]) @[Package.scala 7:47]
    node T_708 = or(T_705, T_706) @[Package.scala 7:62]
    node T_709 = or(T_708, T_707) @[Package.scala 7:62]
    node is_subblock = and(io.tl.acquire.bits.is_builtin_type, T_709) @[Definitions.scala 215:62]
    node T_711 = and(UInt<1>("h01"), io.tl.acquire.bits.is_builtin_type) @[Definitions.scala 231:70]
    wire T_718 : UInt<3>[1] @[Definitions.scala 355:35]
    T_718 is invalid @[Definitions.scala 355:35]
    T_718[0] <= UInt<3>("h03") @[Definitions.scala 355:35]
    node T_720 = eq(io.tl.acquire.bits.a_type, T_718[0]) @[Package.scala 7:47]
    node is_multibeat = and(T_711, T_720) @[Definitions.scala 231:89]
    node T_721 = and(io.tl.acquire.ready, io.tl.acquire.valid) @[Decoupled.scala 21:42]
    node T_722 = and(T_721, is_multibeat) @[Nasti.scala 87:26]
    reg tl_cnt_out : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_722 : @[Counter.scala 43:17]
      node T_725 = eq(tl_cnt_out, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_727 = add(tl_cnt_out, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_728 = tail(T_727, 1) @[Counter.scala 21:22]
      tl_cnt_out <= T_728 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node tl_wrap_out = and(T_722, T_725) @[Counter.scala 44:20]
    node T_730 = eq(has_data, UInt<1>("h00")) @[Nasti.scala 89:42]
    node get_valid = and(io.tl.acquire.valid, T_730) @[Nasti.scala 89:39]
    node put_valid = and(io.tl.acquire.valid, has_data) @[Nasti.scala 90:39]
    inst roq of ReorderQueue_2 @[Nasti.scala 95:19]
    roq.io is invalid
    roq.clk <= clk
    roq.reset <= reset
    inst get_id_mapper of IdMapper @[Nasti.scala 98:29]
    get_id_mapper.io is invalid
    get_id_mapper.clk <= clk
    get_id_mapper.reset <= reset
    inst put_id_mapper of IdMapper @[Nasti.scala 99:29]
    put_id_mapper.io is invalid
    put_id_mapper.clk <= clk
    put_id_mapper.reset <= reset
    node T_755 = eq(io.tl.acquire.bits.addr_beat, UInt<1>("h00")) @[Nasti.scala 102:65]
    node put_id_mask = or(is_subblock, T_755) @[Nasti.scala 102:33]
    node T_757 = eq(put_id_mask, UInt<1>("h00")) @[Nasti.scala 103:52]
    node put_id_ready = or(put_id_mapper.io.req.ready, T_757) @[Nasti.scala 103:49]
    reg w_inflight : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg w_id_reg : UInt<5>, clk with : (reset => (reset, UInt<5>("h00")))
    node w_id = mux(w_inflight, w_id_reg, put_id_mapper.io.req.out_id) @[Nasti.scala 114:17]
    node aw_ready = or(w_inflight, io.nasti.aw.ready) @[Nasti.scala 118:29]
    node T_760 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 21:42]
    node T_762 = eq(roq.io.deq.data.subblock, UInt<1>("h00")) @[Nasti.scala 126:26]
    node T_763 = and(T_760, T_762) @[Nasti.scala 126:23]
    reg nasti_cnt_out : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_763 : @[Counter.scala 43:17]
      node T_766 = eq(nasti_cnt_out, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_768 = add(nasti_cnt_out, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_769 = tail(T_768, 1) @[Counter.scala 21:22]
      nasti_cnt_out <= T_769 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node nasti_wrap_out = and(T_763, T_766) @[Counter.scala 44:20]
    node T_770 = and(get_valid, io.nasti.ar.ready) @[Misc.scala 26:53]
    node T_771 = and(T_770, get_id_mapper.io.req.ready) @[Misc.scala 26:53]
    roq.io.enq.valid <= T_771 @[Nasti.scala 128:20]
    roq.io.enq.bits.tag <= io.nasti.ar.bits.id @[Nasti.scala 129:23]
    roq.io.enq.bits.data.addr_beat <= io.tl.acquire.bits.addr_beat @[Nasti.scala 130:34]
    roq.io.enq.bits.data.subblock <= is_subblock @[Nasti.scala 131:33]
    node T_772 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 21:42]
    node T_773 = or(nasti_wrap_out, roq.io.deq.data.subblock) @[Nasti.scala 132:60]
    node T_774 = and(T_772, T_773) @[Nasti.scala 132:41]
    roq.io.deq.valid <= T_774 @[Nasti.scala 132:20]
    roq.io.deq.tag <= io.nasti.r.bits.id @[Nasti.scala 133:18]
    node T_775 = and(get_valid, roq.io.enq.ready) @[Misc.scala 26:53]
    node T_776 = and(T_775, io.nasti.ar.ready) @[Misc.scala 26:53]
    get_id_mapper.io.req.valid <= T_776 @[Nasti.scala 135:30]
    get_id_mapper.io.req.in_id <= io.tl.acquire.bits.client_xact_id @[Nasti.scala 136:30]
    node T_777 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 21:42]
    node T_778 = and(T_777, io.nasti.r.bits.last) @[Nasti.scala 137:52]
    get_id_mapper.io.resp.valid <= T_778 @[Nasti.scala 137:31]
    get_id_mapper.io.resp.out_id <= io.nasti.r.bits.id @[Nasti.scala 138:32]
    node T_779 = and(put_valid, aw_ready) @[Misc.scala 26:53]
    node T_780 = and(T_779, io.nasti.w.ready) @[Misc.scala 26:53]
    node T_781 = and(T_780, put_id_mask) @[Misc.scala 26:53]
    put_id_mapper.io.req.valid <= T_781 @[Nasti.scala 140:30]
    put_id_mapper.io.req.in_id <= io.tl.acquire.bits.client_xact_id @[Nasti.scala 141:30]
    node T_782 = and(io.nasti.b.ready, io.nasti.b.valid) @[Decoupled.scala 21:42]
    put_id_mapper.io.resp.valid <= T_782 @[Nasti.scala 142:31]
    put_id_mapper.io.resp.out_id <= io.nasti.b.bits.id @[Nasti.scala 143:32]
    node T_783 = and(get_valid, roq.io.enq.ready) @[Misc.scala 26:53]
    node T_784 = and(T_783, get_id_mapper.io.req.ready) @[Misc.scala 26:53]
    io.nasti.ar.valid <= T_784 @[Nasti.scala 146:21]
    wire T_792 : UInt<3>[2] @[Definitions.scala 357:30]
    T_792 is invalid @[Definitions.scala 357:30]
    T_792[0] <= UInt<3>("h00") @[Definitions.scala 357:30]
    T_792[1] <= UInt<3>("h04") @[Definitions.scala 357:30]
    node T_794 = eq(io.tl.acquire.bits.a_type, T_792[0]) @[Package.scala 7:47]
    node T_795 = eq(io.tl.acquire.bits.a_type, T_792[1]) @[Package.scala 7:47]
    node T_796 = or(T_794, T_795) @[Package.scala 7:62]
    node T_797 = and(io.tl.acquire.bits.is_builtin_type, T_796) @[Definitions.scala 300:27]
    node T_798 = bits(io.tl.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
    node T_800 = mux(T_797, T_798, UInt<3>("h00")) @[Definitions.scala 300:10]
    node T_801 = cat(io.tl.acquire.bits.addr_block, io.tl.acquire.bits.addr_beat) @[Cat.scala 20:58]
    node T_802 = cat(T_801, T_800) @[Cat.scala 20:58]
    node T_803 = bits(io.tl.acquire.bits.union, 7, 6) @[Definitions.scala 176:38]
    node T_805 = mux(is_subblock, T_803, UInt<2>("h03")) @[Nasti.scala 150:15]
    node T_808 = mux(is_subblock, UInt<1>("h00"), UInt<3>("h07")) @[Nasti.scala 153:14]
    wire T_832 : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 177:18]
    T_832 is invalid @[nasti.scala 177:18]
    T_832.id <= get_id_mapper.io.req.out_id @[nasti.scala 178:11]
    T_832.addr <= T_802 @[nasti.scala 179:13]
    T_832.len <= T_808 @[nasti.scala 180:12]
    T_832.size <= T_805 @[nasti.scala 181:13]
    T_832.burst <= UInt<2>("h01") @[nasti.scala 182:14]
    T_832.lock <= UInt<1>("h00") @[nasti.scala 183:13]
    T_832.cache <= UInt<4>("h00") @[nasti.scala 184:14]
    node T_848 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_849 = cat(T_848, UInt<1>("h00")) @[Cat.scala 20:58]
    T_832.prot <= T_849 @[nasti.scala 185:13]
    T_832.qos <= UInt<1>("h00") @[nasti.scala 186:12]
    T_832.region <= UInt<1>("h00") @[nasti.scala 187:15]
    T_832.user <= UInt<1>("h00") @[nasti.scala 188:13]
    io.nasti.ar.bits <- T_832 @[Nasti.scala 147:20]
    node T_854 = eq(io.tl.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
    node T_855 = and(io.tl.acquire.bits.is_builtin_type, T_854) @[Definitions.scala 212:54]
    node T_877 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
    node T_879 = eq(io.tl.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
    node T_880 = and(io.tl.acquire.bits.is_builtin_type, T_879) @[Definitions.scala 212:54]
    node T_882 = eq(io.tl.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
    node T_883 = and(io.tl.acquire.bits.is_builtin_type, T_882) @[Definitions.scala 212:54]
    node T_884 = or(T_880, T_883) @[Definitions.scala 190:56]
    node T_885 = bits(io.tl.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
    node T_887 = mux(T_884, T_885, UInt<1>("h00")) @[Definitions.scala 192:30]
    node T_888 = mux(T_855, T_877, T_887) @[Definitions.scala 192:8]
    node T_889 = not(T_888) @[Nasti.scala 172:23]
    node all_inside_0_0 = bits(T_889, 0, 0) @[Nasti.scala 172:52]
    node all_inside_0_1 = bits(T_889, 1, 1) @[Nasti.scala 172:52]
    node all_inside_0_2 = bits(T_889, 2, 2) @[Nasti.scala 172:52]
    node all_inside_0_3 = bits(T_889, 3, 3) @[Nasti.scala 172:52]
    node all_inside_0_4 = bits(T_889, 4, 4) @[Nasti.scala 172:52]
    node all_inside_0_5 = bits(T_889, 5, 5) @[Nasti.scala 172:52]
    node all_inside_0_6 = bits(T_889, 6, 6) @[Nasti.scala 172:52]
    node all_inside_0_7 = bits(T_889, 7, 7) @[Nasti.scala 172:52]
    node T_890 = and(all_inside_0_0, all_inside_0_1) @[Nasti.scala 160:72]
    node T_891 = and(all_inside_0_2, all_inside_0_3) @[Nasti.scala 160:72]
    node T_892 = and(all_inside_0_4, all_inside_0_5) @[Nasti.scala 160:72]
    node T_893 = and(all_inside_0_6, all_inside_0_7) @[Nasti.scala 160:72]
    node T_894 = and(T_890, T_891) @[Nasti.scala 160:72]
    node T_895 = and(T_892, T_893) @[Nasti.scala 160:72]
    node T_896 = and(T_894, T_895) @[Nasti.scala 160:72]
    node T_900 = and(UInt<1>("h01"), T_895) @[Nasti.scala 162:72]
    node T_901 = and(UInt<1>("h01"), T_894) @[Nasti.scala 162:72]
    node T_902 = or(T_900, T_901) @[Nasti.scala 165:49]
    node T_903 = cat(UInt<1>("h00"), T_901) @[Cat.scala 20:58]
    node T_905 = mux(T_902, UInt<2>("h02"), UInt<2>("h03")) @[Nasti.scala 167:21]
    node T_906 = and(T_900, T_891) @[Nasti.scala 162:72]
    node T_907 = and(T_900, T_890) @[Nasti.scala 162:72]
    node T_908 = and(T_901, T_893) @[Nasti.scala 162:72]
    node T_909 = and(T_901, T_892) @[Nasti.scala 162:72]
    node T_910 = or(T_907, T_909) @[Nasti.scala 164:49]
    node T_911 = or(T_906, T_907) @[Nasti.scala 165:49]
    node T_912 = or(T_911, T_908) @[Nasti.scala 165:49]
    node T_913 = or(T_912, T_909) @[Nasti.scala 165:49]
    node T_914 = cat(T_903, T_910) @[Cat.scala 20:58]
    node T_916 = mux(T_913, UInt<1>("h01"), T_905) @[Nasti.scala 167:21]
    node T_917 = and(T_906, all_inside_0_1) @[Nasti.scala 162:72]
    node T_918 = and(T_906, all_inside_0_0) @[Nasti.scala 162:72]
    node T_919 = and(T_907, all_inside_0_3) @[Nasti.scala 162:72]
    node T_920 = and(T_907, all_inside_0_2) @[Nasti.scala 162:72]
    node T_921 = and(T_908, all_inside_0_5) @[Nasti.scala 162:72]
    node T_922 = and(T_908, all_inside_0_4) @[Nasti.scala 162:72]
    node T_923 = and(T_909, all_inside_0_7) @[Nasti.scala 162:72]
    node T_924 = and(T_909, all_inside_0_6) @[Nasti.scala 162:72]
    node T_925 = or(T_918, T_920) @[Nasti.scala 164:49]
    node T_926 = or(T_925, T_922) @[Nasti.scala 164:49]
    node T_927 = or(T_926, T_924) @[Nasti.scala 164:49]
    node T_928 = or(T_917, T_918) @[Nasti.scala 165:49]
    node T_929 = or(T_928, T_919) @[Nasti.scala 165:49]
    node T_930 = or(T_929, T_920) @[Nasti.scala 165:49]
    node T_931 = or(T_930, T_921) @[Nasti.scala 165:49]
    node T_932 = or(T_931, T_922) @[Nasti.scala 165:49]
    node T_933 = or(T_932, T_923) @[Nasti.scala 165:49]
    node T_934 = or(T_933, T_924) @[Nasti.scala 165:49]
    node put_offset = cat(T_914, T_927) @[Cat.scala 20:58]
    node put_size = mux(T_934, UInt<1>("h00"), T_916) @[Nasti.scala 167:21]
    node T_937 = eq(w_inflight, UInt<1>("h00")) @[Nasti.scala 175:50]
    node T_938 = and(put_valid, io.nasti.w.ready) @[Misc.scala 26:53]
    node T_939 = and(T_938, put_id_ready) @[Misc.scala 26:53]
    node T_940 = and(T_939, T_937) @[Misc.scala 26:53]
    io.nasti.aw.valid <= T_940 @[Nasti.scala 175:21]
    wire T_948 : UInt<3>[2] @[Definitions.scala 357:30]
    T_948 is invalid @[Definitions.scala 357:30]
    T_948[0] <= UInt<3>("h00") @[Definitions.scala 357:30]
    T_948[1] <= UInt<3>("h04") @[Definitions.scala 357:30]
    node T_950 = eq(io.tl.acquire.bits.a_type, T_948[0]) @[Package.scala 7:47]
    node T_951 = eq(io.tl.acquire.bits.a_type, T_948[1]) @[Package.scala 7:47]
    node T_952 = or(T_950, T_951) @[Package.scala 7:62]
    node T_953 = and(io.tl.acquire.bits.is_builtin_type, T_952) @[Definitions.scala 300:27]
    node T_954 = bits(io.tl.acquire.bits.union, 10, 8) @[Definitions.scala 178:40]
    node T_956 = mux(T_953, T_954, UInt<3>("h00")) @[Definitions.scala 300:10]
    node T_957 = cat(io.tl.acquire.bits.addr_block, io.tl.acquire.bits.addr_beat) @[Cat.scala 20:58]
    node T_958 = cat(T_957, T_956) @[Cat.scala 20:58]
    node T_960 = mux(is_multibeat, UInt<1>("h00"), put_offset) @[Nasti.scala 179:15]
    node T_961 = or(T_958, T_960) @[Nasti.scala 178:43]
    node T_963 = mux(is_multibeat, UInt<2>("h03"), put_size) @[Nasti.scala 180:15]
    node T_966 = mux(is_multibeat, UInt<3>("h07"), UInt<1>("h00")) @[Nasti.scala 181:14]
    wire T_979 : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 157:18]
    T_979 is invalid @[nasti.scala 157:18]
    T_979.id <= put_id_mapper.io.req.out_id @[nasti.scala 158:11]
    T_979.addr <= T_961 @[nasti.scala 159:13]
    T_979.len <= T_966 @[nasti.scala 160:12]
    T_979.size <= T_963 @[nasti.scala 161:13]
    T_979.burst <= UInt<2>("h01") @[nasti.scala 162:14]
    T_979.lock <= UInt<1>("h00") @[nasti.scala 163:13]
    T_979.cache <= UInt<4>("h00") @[nasti.scala 164:14]
    node T_995 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 20:58]
    node T_996 = cat(T_995, UInt<1>("h00")) @[Cat.scala 20:58]
    T_979.prot <= T_996 @[nasti.scala 165:13]
    T_979.qos <= UInt<4>("h00") @[nasti.scala 166:12]
    T_979.region <= UInt<4>("h00") @[nasti.scala 167:15]
    T_979.user <= UInt<1>("h00") @[nasti.scala 168:13]
    io.nasti.aw.bits <- T_979 @[Nasti.scala 176:20]
    node T_1000 = and(put_valid, aw_ready) @[Misc.scala 26:53]
    node T_1001 = and(T_1000, put_id_ready) @[Misc.scala 26:53]
    io.nasti.w.valid <= T_1001 @[Nasti.scala 183:20]
    node T_1003 = eq(io.tl.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64]
    node T_1004 = and(io.tl.acquire.bits.is_builtin_type, T_1003) @[Definitions.scala 212:54]
    node T_1026 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 401:97]
    node T_1028 = eq(io.tl.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64]
    node T_1029 = and(io.tl.acquire.bits.is_builtin_type, T_1028) @[Definitions.scala 212:54]
    node T_1031 = eq(io.tl.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64]
    node T_1032 = and(io.tl.acquire.bits.is_builtin_type, T_1031) @[Definitions.scala 212:54]
    node T_1033 = or(T_1029, T_1032) @[Definitions.scala 190:56]
    node T_1034 = bits(io.tl.acquire.bits.union, 8, 1) @[Definitions.scala 191:25]
    node T_1036 = mux(T_1033, T_1034, UInt<1>("h00")) @[Definitions.scala 192:30]
    node T_1037 = mux(T_1004, T_1026, T_1036) @[Definitions.scala 192:8]
    node T_1039 = eq(tl_cnt_out, UInt<3>("h07")) @[Nasti.scala 189:18]
    node T_1041 = eq(is_multibeat, UInt<1>("h00")) @[Nasti.scala 189:45]
    node T_1042 = mux(w_inflight, T_1039, T_1041) @[Nasti.scala 188:15]
    wire T_1049 : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>} @[nasti.scala 197:17]
    T_1049 is invalid @[nasti.scala 197:17]
    T_1049.strb <= T_1037 @[nasti.scala 198:12]
    T_1049.data <= io.tl.acquire.bits.data @[nasti.scala 199:12]
    T_1049.last <= T_1042 @[nasti.scala 200:12]
    T_1049.id <= w_id @[nasti.scala 201:12]
    T_1049.user <= UInt<1>("h00") @[nasti.scala 202:12]
    io.nasti.w.bits <- T_1049 @[Nasti.scala 184:19]
    node T_1056 = and(aw_ready, io.nasti.w.ready) @[Misc.scala 26:53]
    node T_1057 = and(T_1056, put_id_ready) @[Misc.scala 26:53]
    node T_1058 = and(roq.io.enq.ready, io.nasti.ar.ready) @[Misc.scala 26:53]
    node T_1059 = and(T_1058, get_id_mapper.io.req.ready) @[Misc.scala 26:53]
    node T_1060 = mux(has_data, T_1057, T_1059) @[Nasti.scala 191:29]
    io.tl.acquire.ready <= T_1060 @[Nasti.scala 191:23]
    node T_1062 = eq(w_inflight, UInt<1>("h00")) @[Nasti.scala 195:9]
    node T_1063 = and(io.tl.acquire.ready, io.tl.acquire.valid) @[Decoupled.scala 21:42]
    node T_1064 = and(T_1062, T_1063) @[Nasti.scala 195:21]
    node T_1065 = and(T_1064, is_multibeat) @[Nasti.scala 195:45]
    when T_1065 : @[Nasti.scala 195:62]
      w_inflight <= UInt<1>("h01") @[Nasti.scala 196:16]
      w_id_reg <= w_id @[Nasti.scala 197:14]
      skip @[Nasti.scala 195:62]
    when w_inflight : @[Nasti.scala 200:21]
      when tl_wrap_out : @[Nasti.scala 201:24]
        w_inflight <= UInt<1>("h00") @[Nasti.scala 201:37]
        skip @[Nasti.scala 201:24]
      skip @[Nasti.scala 200:21]
    node T_1068 = and(io.tl.grant.ready, io.tl.grant.valid) @[Decoupled.scala 21:42]
    wire T_1076 : UInt<3>[1] @[Definitions.scala 853:34]
    T_1076 is invalid @[Definitions.scala 853:34]
    T_1076[0] <= UInt<3>("h05") @[Definitions.scala 853:34]
    node T_1078 = eq(io.tl.grant.bits.g_type, T_1076[0]) @[Package.scala 7:47]
    node T_1079 = eq(io.tl.grant.bits.g_type, UInt<1>("h00")) @[Package.scala 7:47]
    node T_1080 = mux(io.tl.grant.bits.is_builtin_type, T_1078, T_1079) @[Definitions.scala 274:33]
    node T_1081 = and(UInt<1>("h01"), T_1080) @[Definitions.scala 274:27]
    node T_1082 = and(T_1068, T_1081) @[Nasti.scala 206:24]
    reg tl_cnt_in : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_1082 : @[Counter.scala 43:17]
      node T_1085 = eq(tl_cnt_in, UInt<3>("h07")) @[Counter.scala 20:24]
      node T_1087 = add(tl_cnt_in, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_1088 = tail(T_1087, 1) @[Counter.scala 21:22]
      tl_cnt_in <= T_1088 @[Counter.scala 21:13]
      skip @[Counter.scala 43:17]
    node tl_wrap_in = and(T_1082, T_1085) @[Counter.scala 44:20]
    inst gnt_arb of LockingArbiter @[Nasti.scala 207:23]
    gnt_arb.io is invalid
    gnt_arb.clk <= clk
    gnt_arb.reset <= reset
    io.tl.grant <- gnt_arb.io.out @[Nasti.scala 209:15]
    gnt_arb.io.in[0].valid <= io.nasti.r.valid @[Nasti.scala 211:26]
    io.nasti.r.ready <= gnt_arb.io.in[0].ready @[Nasti.scala 212:20]
    node T_1120 = mux(roq.io.deq.data.subblock, UInt<3>("h04"), UInt<3>("h05")) @[Nasti.scala 215:17]
    node T_1122 = mux(roq.io.deq.data.subblock, roq.io.deq.data.addr_beat, tl_cnt_in) @[Nasti.scala 219:20]
    wire T_1150 : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 863:19]
    T_1150 is invalid @[Definitions.scala 863:19]
    T_1150.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 864:25]
    T_1150.g_type <= T_1120 @[Definitions.scala 865:16]
    T_1150.client_xact_id <= get_id_mapper.io.resp.in_id @[Definitions.scala 866:24]
    T_1150.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 867:25]
    T_1150.addr_beat <= T_1122 @[Definitions.scala 868:19]
    T_1150.data <= io.nasti.r.bits.data @[Definitions.scala 869:14]
    gnt_arb.io.in[0].bits <- T_1150 @[Nasti.scala 213:25]
    node T_1178 = eq(roq.io.deq.valid, UInt<1>("h00")) @[Nasti.scala 222:10]
    node T_1179 = or(T_1178, roq.io.deq.matches) @[Nasti.scala 222:28]
    node T_1180 = or(T_1179, reset) @[Nasti.scala 222:9]
    node T_1182 = eq(T_1180, UInt<1>("h00")) @[Nasti.scala 222:9]
    when T_1182 : @[Nasti.scala 222:9]
      printf(clk, UInt<1>(1), "Assertion failed: TL -> NASTI converter ReorderQueue: NASTI tag error\n    at Nasti.scala:222 assert(!roq.io.deq.valid || roq.io.deq.matches,\n") @[Nasti.scala 222:9]
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 222:9]
      skip @[Nasti.scala 222:9]
    node T_1184 = eq(gnt_arb.io.in[0].valid, UInt<1>("h00")) @[Nasti.scala 224:10]
    node T_1185 = or(T_1184, get_id_mapper.io.resp.matches) @[Nasti.scala 224:34]
    node T_1186 = or(T_1185, reset) @[Nasti.scala 224:9]
    node T_1188 = eq(T_1186, UInt<1>("h00")) @[Nasti.scala 224:9]
    when T_1188 : @[Nasti.scala 224:9]
      printf(clk, UInt<1>(1), "Assertion failed: TL -> NASTI ID Mapper: NASTI tag error\n    at Nasti.scala:224 assert(!gnt_arb.io.in(0).valid || get_id_mapper.io.resp.matches,\n") @[Nasti.scala 224:9]
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 224:9]
      skip @[Nasti.scala 224:9]
    gnt_arb.io.in[1].valid <= io.nasti.b.valid @[Nasti.scala 227:26]
    io.nasti.b.ready <= gnt_arb.io.in[1].ready @[Nasti.scala 228:20]
    wire T_1221 : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 863:19]
    T_1221 is invalid @[Definitions.scala 863:19]
    T_1221.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 864:25]
    T_1221.g_type <= UInt<3>("h03") @[Definitions.scala 865:16]
    T_1221.client_xact_id <= put_id_mapper.io.resp.in_id @[Definitions.scala 866:24]
    T_1221.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 867:25]
    T_1221.addr_beat <= UInt<1>("h00") @[Definitions.scala 868:19]
    T_1221.data <= UInt<1>("h00") @[Definitions.scala 869:14]
    gnt_arb.io.in[1].bits <- T_1221 @[Nasti.scala 229:25]
    node T_1249 = eq(gnt_arb.io.in[1].valid, UInt<1>("h00")) @[Nasti.scala 236:10]
    node T_1250 = or(T_1249, put_id_mapper.io.resp.matches) @[Nasti.scala 236:34]
    node T_1251 = or(T_1250, reset) @[Nasti.scala 236:9]
    node T_1253 = eq(T_1251, UInt<1>("h00")) @[Nasti.scala 236:9]
    when T_1253 : @[Nasti.scala 236:9]
      printf(clk, UInt<1>(1), "Assertion failed: NASTI tag error\n    at Nasti.scala:236 assert(!gnt_arb.io.in(1).valid || put_id_mapper.io.resp.matches, \"NASTI tag error\")\n") @[Nasti.scala 236:9]
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 236:9]
      skip @[Nasti.scala 236:9]
    node T_1255 = eq(io.nasti.r.valid, UInt<1>("h00")) @[Nasti.scala 238:10]
    node T_1256 = eq(io.nasti.r.bits.resp, UInt<2>("h00")) @[Nasti.scala 238:52]
    node T_1257 = or(T_1255, T_1256) @[Nasti.scala 238:28]
    node T_1258 = or(T_1257, reset) @[Nasti.scala 238:9]
    node T_1260 = eq(T_1258, UInt<1>("h00")) @[Nasti.scala 238:9]
    when T_1260 : @[Nasti.scala 238:9]
      printf(clk, UInt<1>(1), "Assertion failed: NASTI read error\n    at Nasti.scala:238 assert(!io.nasti.r.valid || io.nasti.r.bits.resp === RESP_OKAY, \"NASTI read error\")\n") @[Nasti.scala 238:9]
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 238:9]
      skip @[Nasti.scala 238:9]
    node T_1262 = eq(io.nasti.b.valid, UInt<1>("h00")) @[Nasti.scala 239:10]
    node T_1263 = eq(io.nasti.b.bits.resp, UInt<2>("h00")) @[Nasti.scala 239:52]
    node T_1264 = or(T_1262, T_1263) @[Nasti.scala 239:28]
    node T_1265 = or(T_1264, reset) @[Nasti.scala 239:9]
    node T_1267 = eq(T_1265, UInt<1>("h00")) @[Nasti.scala 239:9]
    when T_1267 : @[Nasti.scala 239:9]
      printf(clk, UInt<1>(1), "Assertion failed: NASTI write error\n    at Nasti.scala:239 assert(!io.nasti.b.valid || io.nasti.b.bits.resp === RESP_OKAY, \"NASTI write error\")\n") @[Nasti.scala 239:9]
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 239:9]
      skip @[Nasti.scala 239:9]
    
  module Queue_20 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}[1] @[Decoupled.scala 175:16]
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 180:33]
    node T_122 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_122) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_123 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_123
    node T_124 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_124
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_125 = ram[UInt<1>("h00")], clk
      T_125 <- io.enq.bits @[Decoupled.scala 187:24]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      skip @[Decoupled.scala 190:17]
    node T_139 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_139 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_141 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_141 @[Decoupled.scala 197:16]
    node T_143 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_143 @[Decoupled.scala 198:16]
    infer mport T_144 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_144 @[Decoupled.scala 199:15]
    node T_156 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_156, 1) @[Decoupled.scala 214:32]
    node T_157 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_158 = cat(T_157, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_158 @[Decoupled.scala 216:14]
    
  module Queue_22 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}[2] @[Decoupled.scala 175:16]
    reg T_65 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_67 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_65, T_67) @[Decoupled.scala 180:33]
    node T_70 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_70) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_71 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_71
    node T_72 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_72
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_73 = ram[T_65], clk
      T_73 <- io.enq.bits @[Decoupled.scala 187:24]
      node T_80 = eq(T_65, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_82 = add(T_65, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_83 = tail(T_82, 1) @[Counter.scala 21:22]
      T_65 <= T_83 @[Counter.scala 21:13]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      node T_85 = eq(T_67, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_87 = add(T_67, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_88 = tail(T_87, 1) @[Counter.scala 21:22]
      T_67 <= T_88 @[Counter.scala 21:13]
      skip @[Decoupled.scala 190:17]
    node T_89 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_89 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_91 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_91 @[Decoupled.scala 197:16]
    node T_93 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_93 @[Decoupled.scala 198:16]
    infer mport T_94 = ram[T_67], clk
    io.deq.bits <- T_94 @[Decoupled.scala 199:15]
    node T_100 = sub(T_65, T_67) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_100, 1) @[Decoupled.scala 214:32]
    node T_101 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_102 = cat(T_101, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_102 @[Decoupled.scala 216:14]
    
  module Queue_23 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}[2] @[Decoupled.scala 175:16]
    reg T_65 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_67 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_65, T_67) @[Decoupled.scala 180:33]
    node T_70 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_70) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_71 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_71
    node T_72 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_72
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_73 = ram[T_65], clk
      T_73 <- io.enq.bits @[Decoupled.scala 187:24]
      node T_80 = eq(T_65, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_82 = add(T_65, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_83 = tail(T_82, 1) @[Counter.scala 21:22]
      T_65 <= T_83 @[Counter.scala 21:13]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      node T_85 = eq(T_67, UInt<1>("h01")) @[Counter.scala 20:24]
      node T_87 = add(T_67, UInt<1>("h01")) @[Counter.scala 21:22]
      node T_88 = tail(T_87, 1) @[Counter.scala 21:22]
      T_67 <= T_88 @[Counter.scala 21:13]
      skip @[Decoupled.scala 190:17]
    node T_89 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_89 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_91 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_91 @[Decoupled.scala 197:16]
    node T_93 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_93 @[Decoupled.scala 198:16]
    infer mport T_94 = ram[T_67], clk
    io.deq.bits <- T_94 @[Decoupled.scala 199:15]
    node T_100 = sub(T_65, T_67) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_100, 1) @[Decoupled.scala 214:32]
    node T_101 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_102 = cat(T_101, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_102 @[Decoupled.scala 216:14]
    
  module Queue_24 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}[1] @[Decoupled.scala 175:16]
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 180:33]
    node T_50 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 181:28]
    node empty = and(ptr_match, T_50) @[Decoupled.scala 181:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 182:24]
    node T_51 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 21:42]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_51
    node T_52 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 21:42]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_52
    when do_enq : @[Decoupled.scala 186:17]
      infer mport T_53 = ram[UInt<1>("h00")], clk
      T_53 <- io.enq.bits @[Decoupled.scala 187:24]
      skip @[Decoupled.scala 186:17]
    when do_deq : @[Decoupled.scala 190:17]
      skip @[Decoupled.scala 190:17]
    node T_59 = neq(do_enq, do_deq) @[Decoupled.scala 193:16]
    when T_59 : @[Decoupled.scala 193:27]
      maybe_full <= do_enq @[Decoupled.scala 194:16]
      skip @[Decoupled.scala 193:27]
    node T_61 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 197:19]
    io.deq.valid <= T_61 @[Decoupled.scala 197:16]
    node T_63 = eq(full, UInt<1>("h00")) @[Decoupled.scala 198:19]
    io.enq.ready <= T_63 @[Decoupled.scala 198:16]
    infer mport T_64 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_64 @[Decoupled.scala 199:15]
    node T_68 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 214:32]
    node ptr_diff = tail(T_68, 1) @[Decoupled.scala 214:32]
    node T_69 = and(maybe_full, ptr_match) @[Decoupled.scala 216:32]
    node T_70 = cat(T_69, ptr_diff) @[Cat.scala 20:58]
    io.count <= T_70 @[Decoupled.scala 216:14]
    
  module ExampleTop : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip debug : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<5>, data : UInt<34>, op : UInt<2>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<34>, resp : UInt<2>}}}, flip interrupts : UInt<1>[2], mem_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[1], mem_ahb : {htrans : UInt<2>, hmastlock : UInt<1>, haddr : UInt<32>, hwrite : UInt<1>, hburst : UInt<3>, hsize : UInt<3>, hprot : UInt<4>, hwdata : UInt<64>, flip hrdata : UInt<64>, flip hready : UInt<1>, flip hresp : UInt<1>}[0], mem_tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], mmio_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[0], mmio_ahb : {htrans : UInt<2>, hmastlock : UInt<1>, haddr : UInt<32>, hwrite : UInt<1>, hburst : UInt<3>, hsize : UInt<3>, hprot : UInt<4>, hwdata : UInt<64>, flip hrdata : UInt<64>, flip hready : UInt<1>, flip hresp : UInt<1>}[0], mmio_tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<11>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], flip bus_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[0]}
    
    io is invalid
    inst TLXbar_1 of TLXbar @[LazyModule.scala 33:13]
    TLXbar_1.io is invalid
    TLXbar_1.clk <= clk
    TLXbar_1.reset <= reset
    inst TLLegacy_1 of TLLegacy @[LazyModule.scala 33:13]
    TLLegacy_1.io is invalid
    TLLegacy_1.clk <= clk
    TLLegacy_1.reset <= reset
    inst TLHintHandler_1 of TLHintHandler @[LazyModule.scala 33:13]
    TLHintHandler_1.io is invalid
    TLHintHandler_1.clk <= clk
    TLHintHandler_1.reset <= reset
    inst TLWidthWidget_2 of TLWidthWidget @[LazyModule.scala 33:13]
    TLWidthWidget_2.io is invalid
    TLWidthWidget_2.clk <= clk
    TLWidthWidget_2.reset <= reset
    inst TLBuffer_1 of TLBuffer @[LazyModule.scala 33:13]
    TLBuffer_1.io is invalid
    TLBuffer_1.clk <= clk
    TLBuffer_1.reset <= reset
    inst bootrom_1 of bootrom @[LazyModule.scala 33:13]
    bootrom_1.io is invalid
    bootrom_1.clk <= clk
    bootrom_1.reset <= reset
    inst TLFragmenter_2 of TLFragmenter @[LazyModule.scala 33:13]
    TLFragmenter_2.io is invalid
    TLFragmenter_2.clk <= clk
    TLFragmenter_2.reset <= reset
    inst clint_1 of clint @[LazyModule.scala 33:13]
    clint_1.io is invalid
    clint_1.clk <= clk
    clint_1.reset <= reset
    inst TLWidthWidget_1_1 of TLWidthWidget_1 @[LazyModule.scala 33:13]
    TLWidthWidget_1_1.io is invalid
    TLWidthWidget_1_1.clk <= clk
    TLWidthWidget_1_1.reset <= reset
    inst TLFragmenter_1_1 of TLFragmenter_1 @[LazyModule.scala 33:13]
    TLFragmenter_1_1.io is invalid
    TLFragmenter_1_1.clk <= clk
    TLFragmenter_1_1.reset <= reset
    when TLLegacy_1.io.out[0].a.valid : @[Top.scala 53:60]
      node T = leq(TLLegacy_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_1 = or(T, reset) @[Top.scala 53:60]
      node T_3 = eq(T_1, UInt<1>("h00")) @[Top.scala 53:60]
      when T_3 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Top.scala:53:60)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_5 = xor(UInt<1>("h00"), TLLegacy_1.io.out[0].a.bits.source) @[Parameters.scala 37:23]
      node T_6 = not(T_5) @[Parameters.scala 37:9]
      node T_8 = or(T_6, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_9 = not(T_8) @[Parameters.scala 37:7]
      node T_11 = eq(T_9, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_17 : UInt<1>[1] @[Parameters.scala 326:27]
      T_17 is invalid @[Parameters.scala 326:27]
      T_17[0] <= T_11 @[Parameters.scala 326:27]
      node T_20 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_21 = dshl(T_20, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_22 = bits(T_21, 7, 0) @[package.scala 11:76]
      node T_23 = not(T_22) @[package.scala 11:40]
      node T_24 = shr(T_23, 3) @[Edges.scala 15:47]
      node T_25 = and(TLLegacy_1.io.out[0].a.bits.addr_hi, T_24) @[Edges.scala 16:16]
      node T_27 = eq(T_25, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_29 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_30 = dshl(T_29, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_31 = bits(T_30, 2, 0) @[package.scala 11:76]
      node T_32 = not(T_31) @[package.scala 11:40]
      node T_33 = bits(TLLegacy_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_34 = bits(TLLegacy_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_36 = neq(T_34, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_38 = eq(T_36, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_39 = or(T_33, T_34) @[Edges.scala 63:32]
      node T_40 = bits(T_39, 3, 2) @[Edges.scala 61:22]
      node T_41 = bits(T_39, 1, 0) @[Edges.scala 62:22]
      node T_43 = neq(T_41, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_45 = eq(T_43, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_46 = or(T_40, T_41) @[Edges.scala 63:32]
      node T_47 = bits(T_46, 0, 0) @[Edges.scala 58:14]
      node T_48 = not(T_47) @[Edges.scala 58:9]
      node T_49 = cat(T_45, T_48) @[Cat.scala 20:58]
      node T_50 = cat(T_38, T_49) @[Cat.scala 20:58]
      node T_51 = not(T_32) @[Edges.scala 66:39]
      node T_52 = and(T_50, T_51) @[Edges.scala 66:37]
      node T_54 = bits(TLLegacy_1.io.out[0].a.bits.size, 1, 0) @[OneHot.scala 46:21]
      node T_55 = dshl(UInt<1>("h01"), T_54) @[OneHot.scala 46:16]
      node T_56 = bits(T_55, 2, 0) @[OneHot.scala 46:41]
      node T_58 = geq(TLLegacy_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
      node T_60 = bits(T_56, 2, 2) @[Edges.scala 36:26]
      node T_61 = bits(T_52, 2, 2) @[Edges.scala 37:26]
      node T_63 = eq(T_61, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_64 = and(UInt<1>("h01"), T_63) @[Edges.scala 41:27]
      node T_65 = and(T_60, T_64) @[Edges.scala 42:38]
      node T_66 = or(T_58, T_65) @[Edges.scala 42:29]
      node T_67 = and(UInt<1>("h01"), T_61) @[Edges.scala 41:27]
      node T_68 = and(T_60, T_67) @[Edges.scala 42:38]
      node T_69 = or(T_58, T_68) @[Edges.scala 42:29]
      node T_70 = bits(T_56, 1, 1) @[Edges.scala 36:26]
      node T_71 = bits(T_52, 1, 1) @[Edges.scala 37:26]
      node T_73 = eq(T_71, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_74 = and(T_64, T_73) @[Edges.scala 41:27]
      node T_75 = and(T_70, T_74) @[Edges.scala 42:38]
      node T_76 = or(T_66, T_75) @[Edges.scala 42:29]
      node T_77 = and(T_64, T_71) @[Edges.scala 41:27]
      node T_78 = and(T_70, T_77) @[Edges.scala 42:38]
      node T_79 = or(T_66, T_78) @[Edges.scala 42:29]
      node T_80 = and(T_67, T_73) @[Edges.scala 41:27]
      node T_81 = and(T_70, T_80) @[Edges.scala 42:38]
      node T_82 = or(T_69, T_81) @[Edges.scala 42:29]
      node T_83 = and(T_67, T_71) @[Edges.scala 41:27]
      node T_84 = and(T_70, T_83) @[Edges.scala 42:38]
      node T_85 = or(T_69, T_84) @[Edges.scala 42:29]
      node T_86 = bits(T_56, 0, 0) @[Edges.scala 36:26]
      node T_87 = bits(T_52, 0, 0) @[Edges.scala 37:26]
      node T_89 = eq(T_87, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_90 = and(T_74, T_89) @[Edges.scala 41:27]
      node T_91 = and(T_86, T_90) @[Edges.scala 42:38]
      node T_92 = or(T_76, T_91) @[Edges.scala 42:29]
      node T_93 = and(T_74, T_87) @[Edges.scala 41:27]
      node T_94 = and(T_86, T_93) @[Edges.scala 42:38]
      node T_95 = or(T_76, T_94) @[Edges.scala 42:29]
      node T_96 = and(T_77, T_89) @[Edges.scala 41:27]
      node T_97 = and(T_86, T_96) @[Edges.scala 42:38]
      node T_98 = or(T_79, T_97) @[Edges.scala 42:29]
      node T_99 = and(T_77, T_87) @[Edges.scala 41:27]
      node T_100 = and(T_86, T_99) @[Edges.scala 42:38]
      node T_101 = or(T_79, T_100) @[Edges.scala 42:29]
      node T_102 = and(T_80, T_89) @[Edges.scala 41:27]
      node T_103 = and(T_86, T_102) @[Edges.scala 42:38]
      node T_104 = or(T_82, T_103) @[Edges.scala 42:29]
      node T_105 = and(T_80, T_87) @[Edges.scala 41:27]
      node T_106 = and(T_86, T_105) @[Edges.scala 42:38]
      node T_107 = or(T_82, T_106) @[Edges.scala 42:29]
      node T_108 = and(T_83, T_89) @[Edges.scala 41:27]
      node T_109 = and(T_86, T_108) @[Edges.scala 42:38]
      node T_110 = or(T_85, T_109) @[Edges.scala 42:29]
      node T_111 = and(T_83, T_87) @[Edges.scala 41:27]
      node T_112 = and(T_86, T_111) @[Edges.scala 42:38]
      node T_113 = or(T_85, T_112) @[Edges.scala 42:29]
      node T_114 = cat(T_95, T_92) @[Cat.scala 20:58]
      node T_115 = cat(T_101, T_98) @[Cat.scala 20:58]
      node T_116 = cat(T_115, T_114) @[Cat.scala 20:58]
      node T_117 = cat(T_107, T_104) @[Cat.scala 20:58]
      node T_118 = cat(T_113, T_110) @[Cat.scala 20:58]
      node T_119 = cat(T_118, T_117) @[Cat.scala 20:58]
      node T_120 = cat(T_119, T_116) @[Cat.scala 20:58]
      node T_121 = eq(TLLegacy_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Top.scala 53:60]
      when T_121 : @[Top.scala 53:60]
        node T_123 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_124 = dshl(T_123, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_125 = bits(T_124, 2, 0) @[package.scala 11:76]
        node T_126 = not(T_125) @[package.scala 11:40]
        node T_127 = bits(TLLegacy_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_128 = bits(TLLegacy_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_130 = neq(T_128, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_132 = eq(T_130, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_133 = or(T_127, T_128) @[Edges.scala 63:32]
        node T_134 = bits(T_133, 3, 2) @[Edges.scala 61:22]
        node T_135 = bits(T_133, 1, 0) @[Edges.scala 62:22]
        node T_137 = neq(T_135, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_139 = eq(T_137, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_140 = or(T_134, T_135) @[Edges.scala 63:32]
        node T_141 = bits(T_140, 0, 0) @[Edges.scala 58:14]
        node T_142 = not(T_141) @[Edges.scala 58:9]
        node T_143 = cat(T_139, T_142) @[Cat.scala 20:58]
        node T_144 = cat(T_132, T_143) @[Cat.scala 20:58]
        node T_145 = not(T_126) @[Edges.scala 66:39]
        node T_146 = and(T_144, T_145) @[Edges.scala 66:37]
        node T_147 = cat(TLLegacy_1.io.out[0].a.bits.addr_hi, T_146) @[Cat.scala 20:58]
        node T_149 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_151 = eq(T_149, UInt<1>("h00")) @[Top.scala 53:60]
        when T_151 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_152 = or(T_17[0], reset) @[Top.scala 53:60]
        node T_154 = eq(T_152, UInt<1>("h00")) @[Top.scala 53:60]
        when T_154 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_156 = geq(TLLegacy_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_157 = or(T_156, reset) @[Top.scala 53:60]
        node T_159 = eq(T_157, UInt<1>("h00")) @[Top.scala 53:60]
        when T_159 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_160 = or(T_27, reset) @[Top.scala 53:60]
        node T_162 = eq(T_160, UInt<1>("h00")) @[Top.scala 53:60]
        when T_162 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_175 = leq(TLLegacy_1.io.out[0].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_176 = or(T_175, reset) @[Top.scala 53:60]
        node T_178 = eq(T_176, UInt<1>("h00")) @[Top.scala 53:60]
        when T_178 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Top.scala:53:60)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_179 = not(TLLegacy_1.io.out[0].a.bits.mask) @[Top.scala 53:60]
        node T_181 = eq(T_179, UInt<1>("h00")) @[Top.scala 53:60]
        node T_182 = or(T_181, reset) @[Top.scala 53:60]
        node T_184 = eq(T_182, UInt<1>("h00")) @[Top.scala 53:60]
        when T_184 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_185 = eq(TLLegacy_1.io.out[0].a.bits.opcode, UInt<3>("h04")) @[Top.scala 53:60]
      when T_185 : @[Top.scala 53:60]
        node T_187 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_188 = dshl(T_187, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_189 = bits(T_188, 2, 0) @[package.scala 11:76]
        node T_190 = not(T_189) @[package.scala 11:40]
        node T_191 = bits(TLLegacy_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_192 = bits(TLLegacy_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_194 = neq(T_192, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_196 = eq(T_194, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_197 = or(T_191, T_192) @[Edges.scala 63:32]
        node T_198 = bits(T_197, 3, 2) @[Edges.scala 61:22]
        node T_199 = bits(T_197, 1, 0) @[Edges.scala 62:22]
        node T_201 = neq(T_199, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_203 = eq(T_201, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_204 = or(T_198, T_199) @[Edges.scala 63:32]
        node T_205 = bits(T_204, 0, 0) @[Edges.scala 58:14]
        node T_206 = not(T_205) @[Edges.scala 58:9]
        node T_207 = cat(T_203, T_206) @[Cat.scala 20:58]
        node T_208 = cat(T_196, T_207) @[Cat.scala 20:58]
        node T_209 = not(T_190) @[Edges.scala 66:39]
        node T_210 = and(T_208, T_209) @[Edges.scala 66:37]
        node T_211 = cat(TLLegacy_1.io.out[0].a.bits.addr_hi, T_210) @[Cat.scala 20:58]
        node T_213 = leq(UInt<1>("h00"), TLLegacy_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_215 = leq(TLLegacy_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_216 = and(T_213, T_215) @[Parameters.scala 61:37]
        node T_217 = or(T_216, reset) @[Top.scala 53:60]
        node T_219 = eq(T_217, UInt<1>("h00")) @[Top.scala 53:60]
        when T_219 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_220 = or(T_17[0], reset) @[Top.scala 53:60]
        node T_222 = eq(T_220, UInt<1>("h00")) @[Top.scala 53:60]
        when T_222 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_223 = or(T_27, reset) @[Top.scala 53:60]
        node T_225 = eq(T_223, UInt<1>("h00")) @[Top.scala 53:60]
        when T_225 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_227 = eq(TLLegacy_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_228 = or(T_227, reset) @[Top.scala 53:60]
        node T_230 = eq(T_228, UInt<1>("h00")) @[Top.scala 53:60]
        when T_230 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_231 = eq(TLLegacy_1.io.out[0].a.bits.mask, T_120) @[Top.scala 53:60]
        node T_232 = or(T_231, reset) @[Top.scala 53:60]
        node T_234 = eq(T_232, UInt<1>("h00")) @[Top.scala 53:60]
        when T_234 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_235 = eq(TLLegacy_1.io.out[0].a.bits.opcode, UInt<1>("h00")) @[Top.scala 53:60]
      when T_235 : @[Top.scala 53:60]
        node T_237 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_238 = dshl(T_237, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_239 = bits(T_238, 2, 0) @[package.scala 11:76]
        node T_240 = not(T_239) @[package.scala 11:40]
        node T_241 = bits(TLLegacy_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_242 = bits(TLLegacy_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_244 = neq(T_242, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_246 = eq(T_244, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_247 = or(T_241, T_242) @[Edges.scala 63:32]
        node T_248 = bits(T_247, 3, 2) @[Edges.scala 61:22]
        node T_249 = bits(T_247, 1, 0) @[Edges.scala 62:22]
        node T_251 = neq(T_249, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_253 = eq(T_251, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_254 = or(T_248, T_249) @[Edges.scala 63:32]
        node T_255 = bits(T_254, 0, 0) @[Edges.scala 58:14]
        node T_256 = not(T_255) @[Edges.scala 58:9]
        node T_257 = cat(T_253, T_256) @[Cat.scala 20:58]
        node T_258 = cat(T_246, T_257) @[Cat.scala 20:58]
        node T_259 = not(T_240) @[Edges.scala 66:39]
        node T_260 = and(T_258, T_259) @[Edges.scala 66:37]
        node T_261 = cat(TLLegacy_1.io.out[0].a.bits.addr_hi, T_260) @[Cat.scala 20:58]
        node T_263 = xor(T_261, UInt<13>("h01000")) @[Parameters.scala 89:31]
        node T_264 = cvt(T_263) @[Parameters.scala 89:49]
        node T_266 = and(T_264, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
        node T_267 = asSInt(T_266) @[Parameters.scala 89:52]
        node T_269 = eq(T_267, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        node T_271 = xor(T_261, UInt<31>("h044000000")) @[Parameters.scala 89:31]
        node T_272 = cvt(T_271) @[Parameters.scala 89:49]
        node T_274 = and(T_272, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
        node T_275 = asSInt(T_274) @[Parameters.scala 89:52]
        node T_277 = eq(T_275, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        wire T_283 : UInt<1>[2] @[Parameters.scala 227:36]
        T_283 is invalid @[Parameters.scala 227:36]
        T_283[0] <= T_269 @[Parameters.scala 227:36]
        T_283[1] <= T_277 @[Parameters.scala 227:36]
        node T_287 = leq(UInt<1>("h00"), TLLegacy_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_289 = leq(TLLegacy_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_290 = and(T_287, T_289) @[Parameters.scala 61:37]
        node T_292 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
        node T_293 = mux(T_283[0], T_292, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_295 = shl(T_290, 0) @[Mux.scala 18:72]
        node T_296 = mux(T_283[1], T_295, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_298 = or(T_293, T_296) @[Mux.scala 18:72]
        wire T_299 : UInt<1>
        T_299 is invalid
        T_299 <= T_298 @[Mux.scala 18:72]
        node T_300 = or(T_299, reset) @[Top.scala 53:60]
        node T_302 = eq(T_300, UInt<1>("h00")) @[Top.scala 53:60]
        when T_302 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_303 = or(T_17[0], reset) @[Top.scala 53:60]
        node T_305 = eq(T_303, UInt<1>("h00")) @[Top.scala 53:60]
        when T_305 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_306 = or(T_27, reset) @[Top.scala 53:60]
        node T_308 = eq(T_306, UInt<1>("h00")) @[Top.scala 53:60]
        when T_308 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_310 = eq(TLLegacy_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_311 = or(T_310, reset) @[Top.scala 53:60]
        node T_313 = eq(T_311, UInt<1>("h00")) @[Top.scala 53:60]
        when T_313 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_314 = eq(TLLegacy_1.io.out[0].a.bits.mask, T_120) @[Top.scala 53:60]
        node T_315 = or(T_314, reset) @[Top.scala 53:60]
        node T_317 = eq(T_315, UInt<1>("h00")) @[Top.scala 53:60]
        when T_317 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_318 = eq(TLLegacy_1.io.out[0].a.bits.opcode, UInt<1>("h01")) @[Top.scala 53:60]
      when T_318 : @[Top.scala 53:60]
        node T_320 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_321 = dshl(T_320, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_322 = bits(T_321, 2, 0) @[package.scala 11:76]
        node T_323 = not(T_322) @[package.scala 11:40]
        node T_324 = bits(TLLegacy_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_325 = bits(TLLegacy_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_327 = neq(T_325, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_329 = eq(T_327, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_330 = or(T_324, T_325) @[Edges.scala 63:32]
        node T_331 = bits(T_330, 3, 2) @[Edges.scala 61:22]
        node T_332 = bits(T_330, 1, 0) @[Edges.scala 62:22]
        node T_334 = neq(T_332, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_336 = eq(T_334, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_337 = or(T_331, T_332) @[Edges.scala 63:32]
        node T_338 = bits(T_337, 0, 0) @[Edges.scala 58:14]
        node T_339 = not(T_338) @[Edges.scala 58:9]
        node T_340 = cat(T_336, T_339) @[Cat.scala 20:58]
        node T_341 = cat(T_329, T_340) @[Cat.scala 20:58]
        node T_342 = not(T_323) @[Edges.scala 66:39]
        node T_343 = and(T_341, T_342) @[Edges.scala 66:37]
        node T_344 = cat(TLLegacy_1.io.out[0].a.bits.addr_hi, T_343) @[Cat.scala 20:58]
        node T_346 = xor(T_344, UInt<13>("h01000")) @[Parameters.scala 89:31]
        node T_347 = cvt(T_346) @[Parameters.scala 89:49]
        node T_349 = and(T_347, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
        node T_350 = asSInt(T_349) @[Parameters.scala 89:52]
        node T_352 = eq(T_350, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        node T_354 = xor(T_344, UInt<31>("h044000000")) @[Parameters.scala 89:31]
        node T_355 = cvt(T_354) @[Parameters.scala 89:49]
        node T_357 = and(T_355, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
        node T_358 = asSInt(T_357) @[Parameters.scala 89:52]
        node T_360 = eq(T_358, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        wire T_366 : UInt<1>[2] @[Parameters.scala 227:36]
        T_366 is invalid @[Parameters.scala 227:36]
        T_366[0] <= T_352 @[Parameters.scala 227:36]
        T_366[1] <= T_360 @[Parameters.scala 227:36]
        node T_370 = leq(UInt<1>("h00"), TLLegacy_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_372 = leq(TLLegacy_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_373 = and(T_370, T_372) @[Parameters.scala 61:37]
        node T_375 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
        node T_376 = mux(T_366[0], T_375, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_378 = shl(T_373, 0) @[Mux.scala 18:72]
        node T_379 = mux(T_366[1], T_378, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_381 = or(T_376, T_379) @[Mux.scala 18:72]
        wire T_382 : UInt<1>
        T_382 is invalid
        T_382 <= T_381 @[Mux.scala 18:72]
        node T_383 = or(T_382, reset) @[Top.scala 53:60]
        node T_385 = eq(T_383, UInt<1>("h00")) @[Top.scala 53:60]
        when T_385 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_386 = or(T_17[0], reset) @[Top.scala 53:60]
        node T_388 = eq(T_386, UInt<1>("h00")) @[Top.scala 53:60]
        when T_388 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_389 = or(T_27, reset) @[Top.scala 53:60]
        node T_391 = eq(T_389, UInt<1>("h00")) @[Top.scala 53:60]
        when T_391 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_393 = eq(TLLegacy_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_394 = or(T_393, reset) @[Top.scala 53:60]
        node T_396 = eq(T_394, UInt<1>("h00")) @[Top.scala 53:60]
        when T_396 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_397 = not(T_120) @[Top.scala 53:60]
        node T_398 = and(TLLegacy_1.io.out[0].a.bits.mask, T_397) @[Top.scala 53:60]
        node T_400 = eq(T_398, UInt<1>("h00")) @[Top.scala 53:60]
        node T_401 = or(T_400, reset) @[Top.scala 53:60]
        node T_403 = eq(T_401, UInt<1>("h00")) @[Top.scala 53:60]
        when T_403 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_404 = eq(TLLegacy_1.io.out[0].a.bits.opcode, UInt<2>("h02")) @[Top.scala 53:60]
      when T_404 : @[Top.scala 53:60]
        node T_406 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_407 = dshl(T_406, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_408 = bits(T_407, 2, 0) @[package.scala 11:76]
        node T_409 = not(T_408) @[package.scala 11:40]
        node T_410 = bits(TLLegacy_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_411 = bits(TLLegacy_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_413 = neq(T_411, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_415 = eq(T_413, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_416 = or(T_410, T_411) @[Edges.scala 63:32]
        node T_417 = bits(T_416, 3, 2) @[Edges.scala 61:22]
        node T_418 = bits(T_416, 1, 0) @[Edges.scala 62:22]
        node T_420 = neq(T_418, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_422 = eq(T_420, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_423 = or(T_417, T_418) @[Edges.scala 63:32]
        node T_424 = bits(T_423, 0, 0) @[Edges.scala 58:14]
        node T_425 = not(T_424) @[Edges.scala 58:9]
        node T_426 = cat(T_422, T_425) @[Cat.scala 20:58]
        node T_427 = cat(T_415, T_426) @[Cat.scala 20:58]
        node T_428 = not(T_409) @[Edges.scala 66:39]
        node T_429 = and(T_427, T_428) @[Edges.scala 66:37]
        node T_430 = cat(TLLegacy_1.io.out[0].a.bits.addr_hi, T_429) @[Cat.scala 20:58]
        node T_432 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_434 = eq(T_432, UInt<1>("h00")) @[Top.scala 53:60]
        when T_434 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_435 = or(T_17[0], reset) @[Top.scala 53:60]
        node T_437 = eq(T_435, UInt<1>("h00")) @[Top.scala 53:60]
        when T_437 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_438 = or(T_27, reset) @[Top.scala 53:60]
        node T_440 = eq(T_438, UInt<1>("h00")) @[Top.scala 53:60]
        when T_440 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_450 = leq(TLLegacy_1.io.out[0].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_451 = or(T_450, reset) @[Top.scala 53:60]
        node T_453 = eq(T_451, UInt<1>("h00")) @[Top.scala 53:60]
        when T_453 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Top.scala:53:60)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_454 = eq(TLLegacy_1.io.out[0].a.bits.mask, T_120) @[Top.scala 53:60]
        node T_455 = or(T_454, reset) @[Top.scala 53:60]
        node T_457 = eq(T_455, UInt<1>("h00")) @[Top.scala 53:60]
        when T_457 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_458 = eq(TLLegacy_1.io.out[0].a.bits.opcode, UInt<2>("h03")) @[Top.scala 53:60]
      when T_458 : @[Top.scala 53:60]
        node T_460 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_461 = dshl(T_460, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_462 = bits(T_461, 2, 0) @[package.scala 11:76]
        node T_463 = not(T_462) @[package.scala 11:40]
        node T_464 = bits(TLLegacy_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_465 = bits(TLLegacy_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_467 = neq(T_465, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_469 = eq(T_467, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_470 = or(T_464, T_465) @[Edges.scala 63:32]
        node T_471 = bits(T_470, 3, 2) @[Edges.scala 61:22]
        node T_472 = bits(T_470, 1, 0) @[Edges.scala 62:22]
        node T_474 = neq(T_472, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_476 = eq(T_474, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_477 = or(T_471, T_472) @[Edges.scala 63:32]
        node T_478 = bits(T_477, 0, 0) @[Edges.scala 58:14]
        node T_479 = not(T_478) @[Edges.scala 58:9]
        node T_480 = cat(T_476, T_479) @[Cat.scala 20:58]
        node T_481 = cat(T_469, T_480) @[Cat.scala 20:58]
        node T_482 = not(T_463) @[Edges.scala 66:39]
        node T_483 = and(T_481, T_482) @[Edges.scala 66:37]
        node T_484 = cat(TLLegacy_1.io.out[0].a.bits.addr_hi, T_483) @[Cat.scala 20:58]
        node T_486 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_488 = eq(T_486, UInt<1>("h00")) @[Top.scala 53:60]
        when T_488 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_489 = or(T_17[0], reset) @[Top.scala 53:60]
        node T_491 = eq(T_489, UInt<1>("h00")) @[Top.scala 53:60]
        when T_491 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_492 = or(T_27, reset) @[Top.scala 53:60]
        node T_494 = eq(T_492, UInt<1>("h00")) @[Top.scala 53:60]
        when T_494 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_495 = leq(TLLegacy_1.io.out[0].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_496 = or(T_495, reset) @[Top.scala 53:60]
        node T_498 = eq(T_496, UInt<1>("h00")) @[Top.scala 53:60]
        when T_498 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Top.scala:53:60)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_499 = eq(TLLegacy_1.io.out[0].a.bits.mask, T_120) @[Top.scala 53:60]
        node T_500 = or(T_499, reset) @[Top.scala 53:60]
        node T_502 = eq(T_500, UInt<1>("h00")) @[Top.scala 53:60]
        when T_502 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_503 = eq(TLLegacy_1.io.out[0].a.bits.opcode, UInt<3>("h05")) @[Top.scala 53:60]
      when T_503 : @[Top.scala 53:60]
        node T_505 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_506 = dshl(T_505, TLLegacy_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_507 = bits(T_506, 2, 0) @[package.scala 11:76]
        node T_508 = not(T_507) @[package.scala 11:40]
        node T_509 = bits(TLLegacy_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_510 = bits(TLLegacy_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_512 = neq(T_510, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_514 = eq(T_512, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_515 = or(T_509, T_510) @[Edges.scala 63:32]
        node T_516 = bits(T_515, 3, 2) @[Edges.scala 61:22]
        node T_517 = bits(T_515, 1, 0) @[Edges.scala 62:22]
        node T_519 = neq(T_517, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_521 = eq(T_519, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_522 = or(T_516, T_517) @[Edges.scala 63:32]
        node T_523 = bits(T_522, 0, 0) @[Edges.scala 58:14]
        node T_524 = not(T_523) @[Edges.scala 58:9]
        node T_525 = cat(T_521, T_524) @[Cat.scala 20:58]
        node T_526 = cat(T_514, T_525) @[Cat.scala 20:58]
        node T_527 = not(T_508) @[Edges.scala 66:39]
        node T_528 = and(T_526, T_527) @[Edges.scala 66:37]
        node T_529 = cat(TLLegacy_1.io.out[0].a.bits.addr_hi, T_528) @[Cat.scala 20:58]
        node T_531 = leq(UInt<1>("h00"), TLLegacy_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_533 = leq(TLLegacy_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_534 = and(T_531, T_533) @[Parameters.scala 61:37]
        node T_535 = or(T_534, reset) @[Top.scala 53:60]
        node T_537 = eq(T_535, UInt<1>("h00")) @[Top.scala 53:60]
        when T_537 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_538 = or(T_17[0], reset) @[Top.scala 53:60]
        node T_540 = eq(T_538, UInt<1>("h00")) @[Top.scala 53:60]
        when T_540 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_541 = or(T_27, reset) @[Top.scala 53:60]
        node T_543 = eq(T_541, UInt<1>("h00")) @[Top.scala 53:60]
        when T_543 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_544 = eq(TLLegacy_1.io.out[0].a.bits.mask, T_120) @[Top.scala 53:60]
        node T_545 = or(T_544, reset) @[Top.scala 53:60]
        node T_547 = eq(T_545, UInt<1>("h00")) @[Top.scala 53:60]
        when T_547 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    when TLLegacy_1.io.out[0].b.valid : @[Top.scala 53:60]
      node T_548 = leq(TLLegacy_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_549 = or(T_548, reset) @[Top.scala 53:60]
      node T_551 = eq(T_549, UInt<1>("h00")) @[Top.scala 53:60]
      when T_551 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Top.scala:53:60)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_553 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_554 = dshl(T_553, TLLegacy_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_555 = bits(T_554, 2, 0) @[package.scala 11:76]
      node T_556 = not(T_555) @[package.scala 11:40]
      node T_557 = bits(TLLegacy_1.io.out[0].b.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_558 = bits(TLLegacy_1.io.out[0].b.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_560 = neq(T_558, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_562 = eq(T_560, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_563 = or(T_557, T_558) @[Edges.scala 63:32]
      node T_564 = bits(T_563, 3, 2) @[Edges.scala 61:22]
      node T_565 = bits(T_563, 1, 0) @[Edges.scala 62:22]
      node T_567 = neq(T_565, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_569 = eq(T_567, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_570 = or(T_564, T_565) @[Edges.scala 63:32]
      node T_571 = bits(T_570, 0, 0) @[Edges.scala 58:14]
      node T_572 = not(T_571) @[Edges.scala 58:9]
      node T_573 = cat(T_569, T_572) @[Cat.scala 20:58]
      node T_574 = cat(T_562, T_573) @[Cat.scala 20:58]
      node T_575 = not(T_556) @[Edges.scala 66:39]
      node T_576 = and(T_574, T_575) @[Edges.scala 66:37]
      node T_577 = cat(TLLegacy_1.io.out[0].b.bits.addr_hi, T_576) @[Cat.scala 20:58]
      node T_579 = xor(T_577, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_580 = cvt(T_579) @[Parameters.scala 89:49]
      node T_582 = and(T_580, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_583 = asSInt(T_582) @[Parameters.scala 89:52]
      node T_585 = eq(T_583, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      node T_587 = xor(T_577, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_588 = cvt(T_587) @[Parameters.scala 89:49]
      node T_590 = and(T_588, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_591 = asSInt(T_590) @[Parameters.scala 89:52]
      node T_593 = eq(T_591, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_599 : UInt<1>[2] @[Parameters.scala 227:36]
      T_599 is invalid @[Parameters.scala 227:36]
      T_599[0] <= T_585 @[Parameters.scala 227:36]
      T_599[1] <= T_593 @[Parameters.scala 227:36]
      node T_601 = or(T_599[0], T_599[1]) @[Parameters.scala 238:64]
      node T_603 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_604 = dshl(T_603, TLLegacy_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_605 = bits(T_604, 7, 0) @[package.scala 11:76]
      node T_606 = not(T_605) @[package.scala 11:40]
      node T_607 = shr(T_606, 3) @[Edges.scala 15:47]
      node T_608 = and(TLLegacy_1.io.out[0].b.bits.addr_hi, T_607) @[Edges.scala 16:16]
      node T_610 = eq(T_608, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_612 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_613 = dshl(T_612, TLLegacy_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_614 = bits(T_613, 2, 0) @[package.scala 11:76]
      node T_615 = not(T_614) @[package.scala 11:40]
      node T_616 = bits(TLLegacy_1.io.out[0].b.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_617 = bits(TLLegacy_1.io.out[0].b.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_619 = neq(T_617, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_621 = eq(T_619, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_622 = or(T_616, T_617) @[Edges.scala 63:32]
      node T_623 = bits(T_622, 3, 2) @[Edges.scala 61:22]
      node T_624 = bits(T_622, 1, 0) @[Edges.scala 62:22]
      node T_626 = neq(T_624, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_628 = eq(T_626, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_629 = or(T_623, T_624) @[Edges.scala 63:32]
      node T_630 = bits(T_629, 0, 0) @[Edges.scala 58:14]
      node T_631 = not(T_630) @[Edges.scala 58:9]
      node T_632 = cat(T_628, T_631) @[Cat.scala 20:58]
      node T_633 = cat(T_621, T_632) @[Cat.scala 20:58]
      node T_634 = not(T_615) @[Edges.scala 66:39]
      node T_635 = and(T_633, T_634) @[Edges.scala 66:37]
      node T_637 = bits(TLLegacy_1.io.out[0].b.bits.size, 1, 0) @[OneHot.scala 46:21]
      node T_638 = dshl(UInt<1>("h01"), T_637) @[OneHot.scala 46:16]
      node T_639 = bits(T_638, 2, 0) @[OneHot.scala 46:41]
      node T_641 = geq(TLLegacy_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
      node T_643 = bits(T_639, 2, 2) @[Edges.scala 36:26]
      node T_644 = bits(T_635, 2, 2) @[Edges.scala 37:26]
      node T_646 = eq(T_644, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_647 = and(UInt<1>("h01"), T_646) @[Edges.scala 41:27]
      node T_648 = and(T_643, T_647) @[Edges.scala 42:38]
      node T_649 = or(T_641, T_648) @[Edges.scala 42:29]
      node T_650 = and(UInt<1>("h01"), T_644) @[Edges.scala 41:27]
      node T_651 = and(T_643, T_650) @[Edges.scala 42:38]
      node T_652 = or(T_641, T_651) @[Edges.scala 42:29]
      node T_653 = bits(T_639, 1, 1) @[Edges.scala 36:26]
      node T_654 = bits(T_635, 1, 1) @[Edges.scala 37:26]
      node T_656 = eq(T_654, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_657 = and(T_647, T_656) @[Edges.scala 41:27]
      node T_658 = and(T_653, T_657) @[Edges.scala 42:38]
      node T_659 = or(T_649, T_658) @[Edges.scala 42:29]
      node T_660 = and(T_647, T_654) @[Edges.scala 41:27]
      node T_661 = and(T_653, T_660) @[Edges.scala 42:38]
      node T_662 = or(T_649, T_661) @[Edges.scala 42:29]
      node T_663 = and(T_650, T_656) @[Edges.scala 41:27]
      node T_664 = and(T_653, T_663) @[Edges.scala 42:38]
      node T_665 = or(T_652, T_664) @[Edges.scala 42:29]
      node T_666 = and(T_650, T_654) @[Edges.scala 41:27]
      node T_667 = and(T_653, T_666) @[Edges.scala 42:38]
      node T_668 = or(T_652, T_667) @[Edges.scala 42:29]
      node T_669 = bits(T_639, 0, 0) @[Edges.scala 36:26]
      node T_670 = bits(T_635, 0, 0) @[Edges.scala 37:26]
      node T_672 = eq(T_670, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_673 = and(T_657, T_672) @[Edges.scala 41:27]
      node T_674 = and(T_669, T_673) @[Edges.scala 42:38]
      node T_675 = or(T_659, T_674) @[Edges.scala 42:29]
      node T_676 = and(T_657, T_670) @[Edges.scala 41:27]
      node T_677 = and(T_669, T_676) @[Edges.scala 42:38]
      node T_678 = or(T_659, T_677) @[Edges.scala 42:29]
      node T_679 = and(T_660, T_672) @[Edges.scala 41:27]
      node T_680 = and(T_669, T_679) @[Edges.scala 42:38]
      node T_681 = or(T_662, T_680) @[Edges.scala 42:29]
      node T_682 = and(T_660, T_670) @[Edges.scala 41:27]
      node T_683 = and(T_669, T_682) @[Edges.scala 42:38]
      node T_684 = or(T_662, T_683) @[Edges.scala 42:29]
      node T_685 = and(T_663, T_672) @[Edges.scala 41:27]
      node T_686 = and(T_669, T_685) @[Edges.scala 42:38]
      node T_687 = or(T_665, T_686) @[Edges.scala 42:29]
      node T_688 = and(T_663, T_670) @[Edges.scala 41:27]
      node T_689 = and(T_669, T_688) @[Edges.scala 42:38]
      node T_690 = or(T_665, T_689) @[Edges.scala 42:29]
      node T_691 = and(T_666, T_672) @[Edges.scala 41:27]
      node T_692 = and(T_669, T_691) @[Edges.scala 42:38]
      node T_693 = or(T_668, T_692) @[Edges.scala 42:29]
      node T_694 = and(T_666, T_670) @[Edges.scala 41:27]
      node T_695 = and(T_669, T_694) @[Edges.scala 42:38]
      node T_696 = or(T_668, T_695) @[Edges.scala 42:29]
      node T_697 = cat(T_678, T_675) @[Cat.scala 20:58]
      node T_698 = cat(T_684, T_681) @[Cat.scala 20:58]
      node T_699 = cat(T_698, T_697) @[Cat.scala 20:58]
      node T_700 = cat(T_690, T_687) @[Cat.scala 20:58]
      node T_701 = cat(T_696, T_693) @[Cat.scala 20:58]
      node T_702 = cat(T_701, T_700) @[Cat.scala 20:58]
      node T_703 = cat(T_702, T_699) @[Cat.scala 20:58]
      node T_704 = eq(TLLegacy_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Top.scala 53:60]
      when T_704 : @[Top.scala 53:60]
        node T_706 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_708 = eq(T_706, UInt<1>("h00")) @[Top.scala 53:60]
        when T_708 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Top.scala:53:60)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_709 = or(T_601, reset) @[Top.scala 53:60]
        node T_711 = eq(T_709, UInt<1>("h00")) @[Top.scala 53:60]
        when T_711 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_713 = geq(TLLegacy_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_714 = or(T_713, reset) @[Top.scala 53:60]
        node T_716 = eq(T_714, UInt<1>("h00")) @[Top.scala 53:60]
        when T_716 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_717 = or(T_610, reset) @[Top.scala 53:60]
        node T_719 = eq(T_717, UInt<1>("h00")) @[Top.scala 53:60]
        when T_719 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_720 = leq(TLLegacy_1.io.out[0].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_721 = or(T_720, reset) @[Top.scala 53:60]
        node T_723 = eq(T_721, UInt<1>("h00")) @[Top.scala 53:60]
        when T_723 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Top.scala:53:60)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_724 = not(TLLegacy_1.io.out[0].b.bits.mask) @[Top.scala 53:60]
        node T_726 = eq(T_724, UInt<1>("h00")) @[Top.scala 53:60]
        node T_727 = or(T_726, reset) @[Top.scala 53:60]
        node T_729 = eq(T_727, UInt<1>("h00")) @[Top.scala 53:60]
        when T_729 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_730 = eq(TLLegacy_1.io.out[0].b.bits.opcode, UInt<3>("h04")) @[Top.scala 53:60]
      when T_730 : @[Top.scala 53:60]
        node T_732 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_734 = eq(T_732, UInt<1>("h00")) @[Top.scala 53:60]
        when T_734 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Top.scala:53:60)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_735 = or(T_601, reset) @[Top.scala 53:60]
        node T_737 = eq(T_735, UInt<1>("h00")) @[Top.scala 53:60]
        when T_737 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_738 = or(T_610, reset) @[Top.scala 53:60]
        node T_740 = eq(T_738, UInt<1>("h00")) @[Top.scala 53:60]
        when T_740 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_742 = eq(TLLegacy_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_743 = or(T_742, reset) @[Top.scala 53:60]
        node T_745 = eq(T_743, UInt<1>("h00")) @[Top.scala 53:60]
        when T_745 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_746 = eq(TLLegacy_1.io.out[0].b.bits.mask, T_703) @[Top.scala 53:60]
        node T_747 = or(T_746, reset) @[Top.scala 53:60]
        node T_749 = eq(T_747, UInt<1>("h00")) @[Top.scala 53:60]
        when T_749 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_750 = eq(TLLegacy_1.io.out[0].b.bits.opcode, UInt<1>("h00")) @[Top.scala 53:60]
      when T_750 : @[Top.scala 53:60]
        node T_752 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_754 = eq(T_752, UInt<1>("h00")) @[Top.scala 53:60]
        when T_754 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Top.scala:53:60)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_755 = or(T_601, reset) @[Top.scala 53:60]
        node T_757 = eq(T_755, UInt<1>("h00")) @[Top.scala 53:60]
        when T_757 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_758 = or(T_610, reset) @[Top.scala 53:60]
        node T_760 = eq(T_758, UInt<1>("h00")) @[Top.scala 53:60]
        when T_760 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_762 = eq(TLLegacy_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_763 = or(T_762, reset) @[Top.scala 53:60]
        node T_765 = eq(T_763, UInt<1>("h00")) @[Top.scala 53:60]
        when T_765 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_766 = eq(TLLegacy_1.io.out[0].b.bits.mask, T_703) @[Top.scala 53:60]
        node T_767 = or(T_766, reset) @[Top.scala 53:60]
        node T_769 = eq(T_767, UInt<1>("h00")) @[Top.scala 53:60]
        when T_769 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_770 = eq(TLLegacy_1.io.out[0].b.bits.opcode, UInt<1>("h01")) @[Top.scala 53:60]
      when T_770 : @[Top.scala 53:60]
        node T_772 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_774 = eq(T_772, UInt<1>("h00")) @[Top.scala 53:60]
        when T_774 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Top.scala:53:60)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_775 = or(T_601, reset) @[Top.scala 53:60]
        node T_777 = eq(T_775, UInt<1>("h00")) @[Top.scala 53:60]
        when T_777 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_778 = or(T_610, reset) @[Top.scala 53:60]
        node T_780 = eq(T_778, UInt<1>("h00")) @[Top.scala 53:60]
        when T_780 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_782 = eq(TLLegacy_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_783 = or(T_782, reset) @[Top.scala 53:60]
        node T_785 = eq(T_783, UInt<1>("h00")) @[Top.scala 53:60]
        when T_785 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_786 = not(T_703) @[Top.scala 53:60]
        node T_787 = and(TLLegacy_1.io.out[0].b.bits.mask, T_786) @[Top.scala 53:60]
        node T_789 = eq(T_787, UInt<1>("h00")) @[Top.scala 53:60]
        node T_790 = or(T_789, reset) @[Top.scala 53:60]
        node T_792 = eq(T_790, UInt<1>("h00")) @[Top.scala 53:60]
        when T_792 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_793 = eq(TLLegacy_1.io.out[0].b.bits.opcode, UInt<2>("h02")) @[Top.scala 53:60]
      when T_793 : @[Top.scala 53:60]
        node T_795 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_797 = eq(T_795, UInt<1>("h00")) @[Top.scala 53:60]
        when T_797 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Top.scala:53:60)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_798 = or(T_601, reset) @[Top.scala 53:60]
        node T_800 = eq(T_798, UInt<1>("h00")) @[Top.scala 53:60]
        when T_800 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_801 = or(T_610, reset) @[Top.scala 53:60]
        node T_803 = eq(T_801, UInt<1>("h00")) @[Top.scala 53:60]
        when T_803 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_804 = leq(TLLegacy_1.io.out[0].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_805 = or(T_804, reset) @[Top.scala 53:60]
        node T_807 = eq(T_805, UInt<1>("h00")) @[Top.scala 53:60]
        when T_807 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Top.scala:53:60)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_808 = eq(TLLegacy_1.io.out[0].b.bits.mask, T_703) @[Top.scala 53:60]
        node T_809 = or(T_808, reset) @[Top.scala 53:60]
        node T_811 = eq(T_809, UInt<1>("h00")) @[Top.scala 53:60]
        when T_811 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_812 = eq(TLLegacy_1.io.out[0].b.bits.opcode, UInt<2>("h03")) @[Top.scala 53:60]
      when T_812 : @[Top.scala 53:60]
        node T_814 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_816 = eq(T_814, UInt<1>("h00")) @[Top.scala 53:60]
        when T_816 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Top.scala:53:60)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_817 = or(T_601, reset) @[Top.scala 53:60]
        node T_819 = eq(T_817, UInt<1>("h00")) @[Top.scala 53:60]
        when T_819 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_820 = or(T_610, reset) @[Top.scala 53:60]
        node T_822 = eq(T_820, UInt<1>("h00")) @[Top.scala 53:60]
        when T_822 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_823 = leq(TLLegacy_1.io.out[0].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_824 = or(T_823, reset) @[Top.scala 53:60]
        node T_826 = eq(T_824, UInt<1>("h00")) @[Top.scala 53:60]
        when T_826 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Top.scala:53:60)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_827 = eq(TLLegacy_1.io.out[0].b.bits.mask, T_703) @[Top.scala 53:60]
        node T_828 = or(T_827, reset) @[Top.scala 53:60]
        node T_830 = eq(T_828, UInt<1>("h00")) @[Top.scala 53:60]
        when T_830 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_831 = eq(TLLegacy_1.io.out[0].b.bits.opcode, UInt<3>("h05")) @[Top.scala 53:60]
      when T_831 : @[Top.scala 53:60]
        node T_833 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_835 = eq(T_833, UInt<1>("h00")) @[Top.scala 53:60]
        when T_835 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Top.scala:53:60)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_836 = or(T_601, reset) @[Top.scala 53:60]
        node T_838 = eq(T_836, UInt<1>("h00")) @[Top.scala 53:60]
        when T_838 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_839 = or(T_610, reset) @[Top.scala 53:60]
        node T_841 = eq(T_839, UInt<1>("h00")) @[Top.scala 53:60]
        when T_841 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_842 = eq(TLLegacy_1.io.out[0].b.bits.mask, T_703) @[Top.scala 53:60]
        node T_843 = or(T_842, reset) @[Top.scala 53:60]
        node T_845 = eq(T_843, UInt<1>("h00")) @[Top.scala 53:60]
        when T_845 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Top.scala:53:60)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    when TLLegacy_1.io.out[0].c.valid : @[Top.scala 53:60]
      node T_846 = leq(TLLegacy_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_847 = or(T_846, reset) @[Top.scala 53:60]
      node T_849 = eq(T_847, UInt<1>("h00")) @[Top.scala 53:60]
      when T_849 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Top.scala:53:60)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_851 = xor(UInt<1>("h00"), TLLegacy_1.io.out[0].c.bits.source) @[Parameters.scala 37:23]
      node T_852 = not(T_851) @[Parameters.scala 37:9]
      node T_854 = or(T_852, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_855 = not(T_854) @[Parameters.scala 37:7]
      node T_857 = eq(T_855, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_863 : UInt<1>[1] @[Parameters.scala 326:27]
      T_863 is invalid @[Parameters.scala 326:27]
      T_863[0] <= T_857 @[Parameters.scala 326:27]
      node T_866 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_867 = dshl(T_866, TLLegacy_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_868 = bits(T_867, 7, 0) @[package.scala 11:76]
      node T_869 = not(T_868) @[package.scala 11:40]
      node T_870 = shr(T_869, 3) @[Edges.scala 15:47]
      node T_871 = and(TLLegacy_1.io.out[0].c.bits.addr_hi, T_870) @[Edges.scala 16:16]
      node T_873 = eq(T_871, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_875 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_876 = dshl(T_875, TLLegacy_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_877 = bits(T_876, 7, 0) @[package.scala 11:76]
      node T_878 = not(T_877) @[package.scala 11:40]
      node T_879 = and(TLLegacy_1.io.out[0].c.bits.addr_lo, T_878) @[Edges.scala 23:16]
      node T_881 = eq(T_879, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_882 = and(T_873, T_881) @[Top.scala 53:60]
      node T_883 = cat(TLLegacy_1.io.out[0].c.bits.addr_hi, TLLegacy_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_885 = xor(T_883, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_886 = cvt(T_885) @[Parameters.scala 89:49]
      node T_888 = and(T_886, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_889 = asSInt(T_888) @[Parameters.scala 89:52]
      node T_891 = eq(T_889, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      node T_893 = xor(T_883, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_894 = cvt(T_893) @[Parameters.scala 89:49]
      node T_896 = and(T_894, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_897 = asSInt(T_896) @[Parameters.scala 89:52]
      node T_899 = eq(T_897, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_905 : UInt<1>[2] @[Parameters.scala 227:36]
      T_905 is invalid @[Parameters.scala 227:36]
      T_905[0] <= T_891 @[Parameters.scala 227:36]
      T_905[1] <= T_899 @[Parameters.scala 227:36]
      node T_907 = or(T_905[0], T_905[1]) @[Parameters.scala 238:64]
      node T_908 = eq(TLLegacy_1.io.out[0].c.bits.opcode, UInt<3>("h04")) @[Top.scala 53:60]
      when T_908 : @[Top.scala 53:60]
        node T_909 = or(T_907, reset) @[Top.scala 53:60]
        node T_911 = eq(T_909, UInt<1>("h00")) @[Top.scala 53:60]
        when T_911 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_912 = or(T_863[0], reset) @[Top.scala 53:60]
        node T_914 = eq(T_912, UInt<1>("h00")) @[Top.scala 53:60]
        when T_914 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_916 = geq(TLLegacy_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_917 = or(T_916, reset) @[Top.scala 53:60]
        node T_919 = eq(T_917, UInt<1>("h00")) @[Top.scala 53:60]
        when T_919 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_920 = or(T_882, reset) @[Top.scala 53:60]
        node T_922 = eq(T_920, UInt<1>("h00")) @[Top.scala 53:60]
        when T_922 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_923 = leq(TLLegacy_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_924 = or(T_923, reset) @[Top.scala 53:60]
        node T_926 = eq(T_924, UInt<1>("h00")) @[Top.scala 53:60]
        when T_926 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Top.scala:53:60)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_928 = eq(TLLegacy_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:60]
        node T_929 = or(T_928, reset) @[Top.scala 53:60]
        node T_931 = eq(T_929, UInt<1>("h00")) @[Top.scala 53:60]
        when T_931 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Top.scala:53:60)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_932 = eq(TLLegacy_1.io.out[0].c.bits.opcode, UInt<3>("h05")) @[Top.scala 53:60]
      when T_932 : @[Top.scala 53:60]
        node T_933 = or(T_907, reset) @[Top.scala 53:60]
        node T_935 = eq(T_933, UInt<1>("h00")) @[Top.scala 53:60]
        when T_935 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_936 = or(T_863[0], reset) @[Top.scala 53:60]
        node T_938 = eq(T_936, UInt<1>("h00")) @[Top.scala 53:60]
        when T_938 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_940 = geq(TLLegacy_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_941 = or(T_940, reset) @[Top.scala 53:60]
        node T_943 = eq(T_941, UInt<1>("h00")) @[Top.scala 53:60]
        when T_943 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_944 = or(T_882, reset) @[Top.scala 53:60]
        node T_946 = eq(T_944, UInt<1>("h00")) @[Top.scala 53:60]
        when T_946 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_947 = leq(TLLegacy_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_948 = or(T_947, reset) @[Top.scala 53:60]
        node T_950 = eq(T_948, UInt<1>("h00")) @[Top.scala 53:60]
        when T_950 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Top.scala:53:60)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_952 = eq(TLLegacy_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:60]
        node T_953 = or(T_952, reset) @[Top.scala 53:60]
        node T_955 = eq(T_953, UInt<1>("h00")) @[Top.scala 53:60]
        when T_955 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Top.scala:53:60)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_956 = eq(TLLegacy_1.io.out[0].c.bits.opcode, UInt<3>("h06")) @[Top.scala 53:60]
      when T_956 : @[Top.scala 53:60]
        node T_957 = cat(TLLegacy_1.io.out[0].c.bits.addr_hi, TLLegacy_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_959 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_961 = eq(T_959, UInt<1>("h00")) @[Top.scala 53:60]
        when T_961 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_962 = or(T_863[0], reset) @[Top.scala 53:60]
        node T_964 = eq(T_962, UInt<1>("h00")) @[Top.scala 53:60]
        when T_964 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_966 = geq(TLLegacy_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_967 = or(T_966, reset) @[Top.scala 53:60]
        node T_969 = eq(T_967, UInt<1>("h00")) @[Top.scala 53:60]
        when T_969 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_970 = or(T_882, reset) @[Top.scala 53:60]
        node T_972 = eq(T_970, UInt<1>("h00")) @[Top.scala 53:60]
        when T_972 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_973 = leq(TLLegacy_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_974 = or(T_973, reset) @[Top.scala 53:60]
        node T_976 = eq(T_974, UInt<1>("h00")) @[Top.scala 53:60]
        when T_976 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Top.scala:53:60)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_978 = eq(TLLegacy_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:60]
        node T_979 = or(T_978, reset) @[Top.scala 53:60]
        node T_981 = eq(T_979, UInt<1>("h00")) @[Top.scala 53:60]
        when T_981 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Top.scala:53:60)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_982 = eq(TLLegacy_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Top.scala 53:60]
      when T_982 : @[Top.scala 53:60]
        node T_983 = cat(TLLegacy_1.io.out[0].c.bits.addr_hi, TLLegacy_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_985 = or(UInt<1>("h00"), reset) @[Top.scala 53:60]
        node T_987 = eq(T_985, UInt<1>("h00")) @[Top.scala 53:60]
        when T_987 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Top.scala:53:60)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_988 = or(T_863[0], reset) @[Top.scala 53:60]
        node T_990 = eq(T_988, UInt<1>("h00")) @[Top.scala 53:60]
        when T_990 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_992 = geq(TLLegacy_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_993 = or(T_992, reset) @[Top.scala 53:60]
        node T_995 = eq(T_993, UInt<1>("h00")) @[Top.scala 53:60]
        when T_995 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_996 = or(T_882, reset) @[Top.scala 53:60]
        node T_998 = eq(T_996, UInt<1>("h00")) @[Top.scala 53:60]
        when T_998 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_999 = leq(TLLegacy_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_1000 = or(T_999, reset) @[Top.scala 53:60]
        node T_1002 = eq(T_1000, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1002 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Top.scala:53:60)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1004 = eq(TLLegacy_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1005 = or(T_1004, reset) @[Top.scala 53:60]
        node T_1007 = eq(T_1005, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1007 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Top.scala:53:60)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1008 = eq(TLLegacy_1.io.out[0].c.bits.opcode, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1008 : @[Top.scala 53:60]
        node T_1009 = or(T_907, reset) @[Top.scala 53:60]
        node T_1011 = eq(T_1009, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1011 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1012 = or(T_863[0], reset) @[Top.scala 53:60]
        node T_1014 = eq(T_1012, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1014 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1015 = or(T_882, reset) @[Top.scala 53:60]
        node T_1017 = eq(T_1015, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1017 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1019 = eq(TLLegacy_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1020 = or(T_1019, reset) @[Top.scala 53:60]
        node T_1022 = eq(T_1020, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1022 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1023 = eq(TLLegacy_1.io.out[0].c.bits.opcode, UInt<1>("h01")) @[Top.scala 53:60]
      when T_1023 : @[Top.scala 53:60]
        node T_1024 = or(T_907, reset) @[Top.scala 53:60]
        node T_1026 = eq(T_1024, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1026 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1027 = or(T_863[0], reset) @[Top.scala 53:60]
        node T_1029 = eq(T_1027, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1029 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1030 = or(T_882, reset) @[Top.scala 53:60]
        node T_1032 = eq(T_1030, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1032 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1034 = eq(TLLegacy_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1035 = or(T_1034, reset) @[Top.scala 53:60]
        node T_1037 = eq(T_1035, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1037 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1038 = eq(TLLegacy_1.io.out[0].c.bits.opcode, UInt<2>("h02")) @[Top.scala 53:60]
      when T_1038 : @[Top.scala 53:60]
        node T_1039 = or(T_907, reset) @[Top.scala 53:60]
        node T_1041 = eq(T_1039, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1041 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Top.scala:53:60)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1042 = or(T_863[0], reset) @[Top.scala 53:60]
        node T_1044 = eq(T_1042, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1044 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1045 = or(T_882, reset) @[Top.scala 53:60]
        node T_1047 = eq(T_1045, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1047 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1049 = eq(TLLegacy_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1050 = or(T_1049, reset) @[Top.scala 53:60]
        node T_1052 = eq(T_1050, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1052 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1054 = eq(TLLegacy_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1055 = or(T_1054, reset) @[Top.scala 53:60]
        node T_1057 = eq(T_1055, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1057 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Top.scala:53:60)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    when TLLegacy_1.io.out[0].d.valid : @[Top.scala 53:60]
      node T_1058 = leq(TLLegacy_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_1059 = or(T_1058, reset) @[Top.scala 53:60]
      node T_1061 = eq(T_1059, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1061 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Top.scala:53:60)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1063 = xor(UInt<1>("h00"), TLLegacy_1.io.out[0].d.bits.source) @[Parameters.scala 37:23]
      node T_1064 = not(T_1063) @[Parameters.scala 37:9]
      node T_1066 = or(T_1064, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_1067 = not(T_1066) @[Parameters.scala 37:7]
      node T_1069 = eq(T_1067, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_1075 : UInt<1>[1] @[Parameters.scala 326:27]
      T_1075 is invalid @[Parameters.scala 326:27]
      T_1075[0] <= T_1069 @[Parameters.scala 326:27]
      node T_1078 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_1079 = dshl(T_1078, TLLegacy_1.io.out[0].d.bits.size) @[package.scala 11:71]
      node T_1080 = bits(T_1079, 7, 0) @[package.scala 11:76]
      node T_1081 = not(T_1080) @[package.scala 11:40]
      node T_1082 = and(TLLegacy_1.io.out[0].d.bits.addr_lo, T_1081) @[Edges.scala 23:16]
      node T_1084 = eq(T_1082, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_1086 = eq(UInt<1>("h01"), TLLegacy_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      node T_1088 = eq(UInt<1>("h00"), TLLegacy_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      wire T_1094 : UInt<1>[2] @[Parameters.scala 220:31]
      T_1094 is invalid @[Parameters.scala 220:31]
      T_1094[0] <= T_1086 @[Parameters.scala 220:31]
      T_1094[1] <= T_1088 @[Parameters.scala 220:31]
      node T_1096 = or(T_1094[0], T_1094[1]) @[Parameters.scala 240:54]
      node T_1097 = eq(TLLegacy_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Top.scala 53:60]
      when T_1097 : @[Top.scala 53:60]
        node T_1098 = or(T_1075[0], reset) @[Top.scala 53:60]
        node T_1100 = eq(T_1098, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1100 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1101 = or(T_1084, reset) @[Top.scala 53:60]
        node T_1103 = eq(T_1101, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1103 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1104 = or(T_1096, reset) @[Top.scala 53:60]
        node T_1106 = eq(T_1104, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1106 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Top.scala:53:60)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1108 = geq(TLLegacy_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_1109 = or(T_1108, reset) @[Top.scala 53:60]
        node T_1111 = eq(T_1109, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1111 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1113 = eq(TLLegacy_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1114 = or(T_1113, reset) @[Top.scala 53:60]
        node T_1116 = eq(T_1114, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1116 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1118 = eq(TLLegacy_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1119 = or(T_1118, reset) @[Top.scala 53:60]
        node T_1121 = eq(T_1119, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1121 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Top.scala:53:60)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1122 = eq(TLLegacy_1.io.out[0].d.bits.opcode, UInt<3>("h04")) @[Top.scala 53:60]
      when T_1122 : @[Top.scala 53:60]
        node T_1123 = or(T_1075[0], reset) @[Top.scala 53:60]
        node T_1125 = eq(T_1123, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1125 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1126 = or(T_1084, reset) @[Top.scala 53:60]
        node T_1128 = eq(T_1126, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1128 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1129 = or(T_1096, reset) @[Top.scala 53:60]
        node T_1131 = eq(T_1129, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1131 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Top.scala:53:60)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1133 = geq(TLLegacy_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_1134 = or(T_1133, reset) @[Top.scala 53:60]
        node T_1136 = eq(T_1134, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1136 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1137 = leq(TLLegacy_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_1138 = or(T_1137, reset) @[Top.scala 53:60]
        node T_1140 = eq(T_1138, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1140 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Top.scala:53:60)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1141 = eq(TLLegacy_1.io.out[0].d.bits.opcode, UInt<3>("h05")) @[Top.scala 53:60]
      when T_1141 : @[Top.scala 53:60]
        node T_1142 = or(T_1075[0], reset) @[Top.scala 53:60]
        node T_1144 = eq(T_1142, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1144 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1145 = or(T_1084, reset) @[Top.scala 53:60]
        node T_1147 = eq(T_1145, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1147 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1148 = or(T_1096, reset) @[Top.scala 53:60]
        node T_1150 = eq(T_1148, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1150 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Top.scala:53:60)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1152 = geq(TLLegacy_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Top.scala 53:60]
        node T_1153 = or(T_1152, reset) @[Top.scala 53:60]
        node T_1155 = eq(T_1153, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1155 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Top.scala:53:60)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1156 = leq(TLLegacy_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_1157 = or(T_1156, reset) @[Top.scala 53:60]
        node T_1159 = eq(T_1157, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1159 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Top.scala:53:60)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1160 = eq(TLLegacy_1.io.out[0].d.bits.opcode, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1160 : @[Top.scala 53:60]
        node T_1161 = or(T_1075[0], reset) @[Top.scala 53:60]
        node T_1163 = eq(T_1161, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1163 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1164 = or(T_1084, reset) @[Top.scala 53:60]
        node T_1166 = eq(T_1164, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1166 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1167 = or(T_1096, reset) @[Top.scala 53:60]
        node T_1169 = eq(T_1167, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1169 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Top.scala:53:60)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1171 = eq(TLLegacy_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1172 = or(T_1171, reset) @[Top.scala 53:60]
        node T_1174 = eq(T_1172, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1174 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1175 = eq(TLLegacy_1.io.out[0].d.bits.opcode, UInt<1>("h01")) @[Top.scala 53:60]
      when T_1175 : @[Top.scala 53:60]
        node T_1176 = or(T_1075[0], reset) @[Top.scala 53:60]
        node T_1178 = eq(T_1176, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1178 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1179 = or(T_1084, reset) @[Top.scala 53:60]
        node T_1181 = eq(T_1179, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1181 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1182 = or(T_1096, reset) @[Top.scala 53:60]
        node T_1184 = eq(T_1182, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1184 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Top.scala:53:60)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1186 = eq(TLLegacy_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1187 = or(T_1186, reset) @[Top.scala 53:60]
        node T_1189 = eq(T_1187, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1189 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1190 = eq(TLLegacy_1.io.out[0].d.bits.opcode, UInt<2>("h02")) @[Top.scala 53:60]
      when T_1190 : @[Top.scala 53:60]
        node T_1191 = or(T_1075[0], reset) @[Top.scala 53:60]
        node T_1193 = eq(T_1191, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1193 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Top.scala:53:60)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1194 = or(T_1084, reset) @[Top.scala 53:60]
        node T_1196 = eq(T_1194, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1196 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Top.scala:53:60)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1197 = or(T_1096, reset) @[Top.scala 53:60]
        node T_1199 = eq(T_1197, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1199 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Top.scala:53:60)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1201 = eq(TLLegacy_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1202 = or(T_1201, reset) @[Top.scala 53:60]
        node T_1204 = eq(T_1202, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1204 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Top.scala:53:60)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        node T_1206 = eq(TLLegacy_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Top.scala 53:60]
        node T_1207 = or(T_1206, reset) @[Top.scala 53:60]
        node T_1209 = eq(T_1207, UInt<1>("h00")) @[Top.scala 53:60]
        when T_1209 : @[Top.scala 53:60]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Top.scala:53:60)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Top.scala 53:60]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
          skip @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    when TLLegacy_1.io.out[0].e.valid : @[Top.scala 53:60]
      node T_1211 = eq(UInt<1>("h01"), TLLegacy_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      node T_1213 = eq(UInt<1>("h00"), TLLegacy_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      wire T_1219 : UInt<1>[2] @[Parameters.scala 220:31]
      T_1219 is invalid @[Parameters.scala 220:31]
      T_1219[0] <= T_1211 @[Parameters.scala 220:31]
      T_1219[1] <= T_1213 @[Parameters.scala 220:31]
      node T_1221 = or(T_1219[0], T_1219[1]) @[Parameters.scala 240:54]
      node T_1222 = or(T_1221, reset) @[Top.scala 53:60]
      node T_1224 = eq(T_1222, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1224 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Top.scala:53:60)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1226 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_1228 : UInt, clk
    reg T_1230 : UInt, clk
    reg T_1232 : UInt, clk
    reg T_1234 : UInt, clk
    reg T_1236 : UInt, clk
    node T_1238 = neq(T_1226, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1239 = and(TLLegacy_1.io.out[0].a.valid, T_1238) @[Top.scala 53:60]
    when T_1239 : @[Top.scala 53:60]
      node T_1240 = eq(TLLegacy_1.io.out[0].a.bits.opcode, T_1228) @[Top.scala 53:60]
      node T_1241 = or(T_1240, reset) @[Top.scala 53:60]
      node T_1243 = eq(T_1241, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1243 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1244 = eq(TLLegacy_1.io.out[0].a.bits.param, T_1230) @[Top.scala 53:60]
      node T_1245 = or(T_1244, reset) @[Top.scala 53:60]
      node T_1247 = eq(T_1245, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1247 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1248 = eq(TLLegacy_1.io.out[0].a.bits.size, T_1232) @[Top.scala 53:60]
      node T_1249 = or(T_1248, reset) @[Top.scala 53:60]
      node T_1251 = eq(T_1249, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1251 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1252 = eq(TLLegacy_1.io.out[0].a.bits.source, T_1234) @[Top.scala 53:60]
      node T_1253 = or(T_1252, reset) @[Top.scala 53:60]
      node T_1255 = eq(T_1253, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1255 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1256 = eq(TLLegacy_1.io.out[0].a.bits.addr_hi, T_1236) @[Top.scala 53:60]
      node T_1257 = or(T_1256, reset) @[Top.scala 53:60]
      node T_1259 = eq(T_1257, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1259 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    node T_1260 = and(TLLegacy_1.io.out[0].a.ready, TLLegacy_1.io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_1260 : @[Top.scala 53:60]
      node T_1262 = sub(T_1226, UInt<1>("h01")) @[Top.scala 53:60]
      node T_1263 = tail(T_1262, 1) @[Top.scala 53:60]
      T_1226 <= T_1263 @[Top.scala 53:60]
      node T_1265 = eq(T_1226, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1265 : @[Top.scala 53:60]
        node T_1266 = bits(TLLegacy_1.io.out[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_1268 = eq(T_1266, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_1270 = leq(TLLegacy_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_1272 = bits(TLLegacy_1.io.out[0].a.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_1273 = dshl(UInt<1>("h01"), T_1272) @[OneHot.scala 46:16]
        node T_1274 = bits(T_1273, 8, 0) @[OneHot.scala 46:41]
        node T_1275 = shr(T_1274, 3) @[Edges.scala 209:50]
        node T_1276 = or(T_1275, T_1270) @[Edges.scala 210:29]
        node T_1278 = mux(T_1268, T_1276, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_1280 = sub(T_1278, UInt<1>("h01")) @[Top.scala 53:60]
        node T_1281 = tail(T_1280, 1) @[Top.scala 53:60]
        T_1226 <= T_1281 @[Top.scala 53:60]
        T_1228 <= TLLegacy_1.io.out[0].a.bits.opcode @[Top.scala 53:60]
        T_1230 <= TLLegacy_1.io.out[0].a.bits.param @[Top.scala 53:60]
        T_1232 <= TLLegacy_1.io.out[0].a.bits.size @[Top.scala 53:60]
        T_1234 <= TLLegacy_1.io.out[0].a.bits.source @[Top.scala 53:60]
        T_1236 <= TLLegacy_1.io.out[0].a.bits.addr_hi @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1283 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_1285 : UInt, clk
    reg T_1287 : UInt, clk
    reg T_1289 : UInt, clk
    reg T_1291 : UInt, clk
    reg T_1293 : UInt, clk
    node T_1295 = neq(T_1283, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1296 = and(TLLegacy_1.io.out[0].b.valid, T_1295) @[Top.scala 53:60]
    when T_1296 : @[Top.scala 53:60]
      node T_1297 = eq(TLLegacy_1.io.out[0].b.bits.opcode, T_1285) @[Top.scala 53:60]
      node T_1298 = or(T_1297, reset) @[Top.scala 53:60]
      node T_1300 = eq(T_1298, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1300 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1301 = eq(TLLegacy_1.io.out[0].b.bits.param, T_1287) @[Top.scala 53:60]
      node T_1302 = or(T_1301, reset) @[Top.scala 53:60]
      node T_1304 = eq(T_1302, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1304 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1305 = eq(TLLegacy_1.io.out[0].b.bits.size, T_1289) @[Top.scala 53:60]
      node T_1306 = or(T_1305, reset) @[Top.scala 53:60]
      node T_1308 = eq(T_1306, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1308 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1309 = eq(TLLegacy_1.io.out[0].b.bits.source, T_1291) @[Top.scala 53:60]
      node T_1310 = or(T_1309, reset) @[Top.scala 53:60]
      node T_1312 = eq(T_1310, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1312 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1313 = eq(TLLegacy_1.io.out[0].b.bits.addr_hi, T_1293) @[Top.scala 53:60]
      node T_1314 = or(T_1313, reset) @[Top.scala 53:60]
      node T_1316 = eq(T_1314, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1316 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    node T_1317 = and(TLLegacy_1.io.out[0].b.ready, TLLegacy_1.io.out[0].b.valid) @[Decoupled.scala 21:42]
    when T_1317 : @[Top.scala 53:60]
      node T_1319 = sub(T_1283, UInt<1>("h01")) @[Top.scala 53:60]
      node T_1320 = tail(T_1319, 1) @[Top.scala 53:60]
      T_1283 <= T_1320 @[Top.scala 53:60]
      node T_1322 = eq(T_1283, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1322 : @[Top.scala 53:60]
        node T_1323 = bits(TLLegacy_1.io.out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_1325 = eq(T_1323, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_1328 = leq(TLLegacy_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_1330 = bits(TLLegacy_1.io.out[0].b.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_1331 = dshl(UInt<1>("h01"), T_1330) @[OneHot.scala 46:16]
        node T_1332 = bits(T_1331, 8, 0) @[OneHot.scala 46:41]
        node T_1333 = shr(T_1332, 3) @[Edges.scala 209:50]
        node T_1334 = or(T_1333, T_1328) @[Edges.scala 210:29]
        node T_1336 = mux(UInt<1>("h00"), T_1334, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_1338 = sub(T_1336, UInt<1>("h01")) @[Top.scala 53:60]
        node T_1339 = tail(T_1338, 1) @[Top.scala 53:60]
        T_1283 <= T_1339 @[Top.scala 53:60]
        T_1285 <= TLLegacy_1.io.out[0].b.bits.opcode @[Top.scala 53:60]
        T_1287 <= TLLegacy_1.io.out[0].b.bits.param @[Top.scala 53:60]
        T_1289 <= TLLegacy_1.io.out[0].b.bits.size @[Top.scala 53:60]
        T_1291 <= TLLegacy_1.io.out[0].b.bits.source @[Top.scala 53:60]
        T_1293 <= TLLegacy_1.io.out[0].b.bits.addr_hi @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1341 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_1343 : UInt, clk
    reg T_1345 : UInt, clk
    reg T_1347 : UInt, clk
    reg T_1349 : UInt, clk
    reg T_1351 : UInt, clk
    reg T_1353 : UInt, clk
    node T_1355 = neq(T_1341, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1356 = and(TLLegacy_1.io.out[0].c.valid, T_1355) @[Top.scala 53:60]
    when T_1356 : @[Top.scala 53:60]
      node T_1357 = eq(TLLegacy_1.io.out[0].c.bits.opcode, T_1343) @[Top.scala 53:60]
      node T_1358 = or(T_1357, reset) @[Top.scala 53:60]
      node T_1360 = eq(T_1358, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1360 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1361 = eq(TLLegacy_1.io.out[0].c.bits.param, T_1345) @[Top.scala 53:60]
      node T_1362 = or(T_1361, reset) @[Top.scala 53:60]
      node T_1364 = eq(T_1362, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1364 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1365 = eq(TLLegacy_1.io.out[0].c.bits.size, T_1347) @[Top.scala 53:60]
      node T_1366 = or(T_1365, reset) @[Top.scala 53:60]
      node T_1368 = eq(T_1366, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1368 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1369 = eq(TLLegacy_1.io.out[0].c.bits.source, T_1349) @[Top.scala 53:60]
      node T_1370 = or(T_1369, reset) @[Top.scala 53:60]
      node T_1372 = eq(T_1370, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1372 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1373 = eq(TLLegacy_1.io.out[0].c.bits.addr_hi, T_1351) @[Top.scala 53:60]
      node T_1374 = or(T_1373, reset) @[Top.scala 53:60]
      node T_1376 = eq(T_1374, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1376 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1377 = eq(TLLegacy_1.io.out[0].c.bits.addr_lo, T_1353) @[Top.scala 53:60]
      node T_1378 = or(T_1377, reset) @[Top.scala 53:60]
      node T_1380 = eq(T_1378, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1380 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    node T_1381 = and(TLLegacy_1.io.out[0].c.ready, TLLegacy_1.io.out[0].c.valid) @[Decoupled.scala 21:42]
    when T_1381 : @[Top.scala 53:60]
      node T_1383 = sub(T_1341, UInt<1>("h01")) @[Top.scala 53:60]
      node T_1384 = tail(T_1383, 1) @[Top.scala 53:60]
      T_1341 <= T_1384 @[Top.scala 53:60]
      node T_1386 = eq(T_1341, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1386 : @[Top.scala 53:60]
        node T_1387 = bits(TLLegacy_1.io.out[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_1390 = leq(TLLegacy_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_1392 = bits(TLLegacy_1.io.out[0].c.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_1393 = dshl(UInt<1>("h01"), T_1392) @[OneHot.scala 46:16]
        node T_1394 = bits(T_1393, 8, 0) @[OneHot.scala 46:41]
        node T_1395 = shr(T_1394, 3) @[Edges.scala 209:50]
        node T_1396 = or(T_1395, T_1390) @[Edges.scala 210:29]
        node T_1398 = mux(UInt<1>("h00"), T_1396, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_1400 = sub(T_1398, UInt<1>("h01")) @[Top.scala 53:60]
        node T_1401 = tail(T_1400, 1) @[Top.scala 53:60]
        T_1341 <= T_1401 @[Top.scala 53:60]
        T_1343 <= TLLegacy_1.io.out[0].c.bits.opcode @[Top.scala 53:60]
        T_1345 <= TLLegacy_1.io.out[0].c.bits.param @[Top.scala 53:60]
        T_1347 <= TLLegacy_1.io.out[0].c.bits.size @[Top.scala 53:60]
        T_1349 <= TLLegacy_1.io.out[0].c.bits.source @[Top.scala 53:60]
        T_1351 <= TLLegacy_1.io.out[0].c.bits.addr_hi @[Top.scala 53:60]
        T_1353 <= TLLegacy_1.io.out[0].c.bits.addr_lo @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1403 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_1405 : UInt, clk
    reg T_1407 : UInt, clk
    reg T_1409 : UInt, clk
    reg T_1411 : UInt, clk
    reg T_1413 : UInt, clk
    reg T_1415 : UInt, clk
    node T_1417 = neq(T_1403, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1418 = and(TLLegacy_1.io.out[0].d.valid, T_1417) @[Top.scala 53:60]
    when T_1418 : @[Top.scala 53:60]
      node T_1419 = eq(TLLegacy_1.io.out[0].d.bits.opcode, T_1405) @[Top.scala 53:60]
      node T_1420 = or(T_1419, reset) @[Top.scala 53:60]
      node T_1422 = eq(T_1420, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1422 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1423 = eq(TLLegacy_1.io.out[0].d.bits.param, T_1407) @[Top.scala 53:60]
      node T_1424 = or(T_1423, reset) @[Top.scala 53:60]
      node T_1426 = eq(T_1424, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1426 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1427 = eq(TLLegacy_1.io.out[0].d.bits.size, T_1409) @[Top.scala 53:60]
      node T_1428 = or(T_1427, reset) @[Top.scala 53:60]
      node T_1430 = eq(T_1428, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1430 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1431 = eq(TLLegacy_1.io.out[0].d.bits.source, T_1411) @[Top.scala 53:60]
      node T_1432 = or(T_1431, reset) @[Top.scala 53:60]
      node T_1434 = eq(T_1432, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1434 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1435 = eq(TLLegacy_1.io.out[0].d.bits.sink, T_1413) @[Top.scala 53:60]
      node T_1436 = or(T_1435, reset) @[Top.scala 53:60]
      node T_1438 = eq(T_1436, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1438 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1439 = eq(TLLegacy_1.io.out[0].d.bits.addr_lo, T_1415) @[Top.scala 53:60]
      node T_1440 = or(T_1439, reset) @[Top.scala 53:60]
      node T_1442 = eq(T_1440, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1442 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Top.scala:53:60)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    node T_1443 = and(TLLegacy_1.io.out[0].d.ready, TLLegacy_1.io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_1443 : @[Top.scala 53:60]
      node T_1445 = sub(T_1403, UInt<1>("h01")) @[Top.scala 53:60]
      node T_1446 = tail(T_1445, 1) @[Top.scala 53:60]
      T_1403 <= T_1446 @[Top.scala 53:60]
      node T_1448 = eq(T_1403, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1448 : @[Top.scala 53:60]
        node T_1449 = bits(TLLegacy_1.io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_1451 = leq(TLLegacy_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_1453 = bits(TLLegacy_1.io.out[0].d.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_1454 = dshl(UInt<1>("h01"), T_1453) @[OneHot.scala 46:16]
        node T_1455 = bits(T_1454, 8, 0) @[OneHot.scala 46:41]
        node T_1456 = shr(T_1455, 3) @[Edges.scala 209:50]
        node T_1457 = or(T_1456, T_1451) @[Edges.scala 210:29]
        node T_1459 = mux(T_1449, T_1457, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_1461 = sub(T_1459, UInt<1>("h01")) @[Top.scala 53:60]
        node T_1462 = tail(T_1461, 1) @[Top.scala 53:60]
        T_1403 <= T_1462 @[Top.scala 53:60]
        T_1405 <= TLLegacy_1.io.out[0].d.bits.opcode @[Top.scala 53:60]
        T_1407 <= TLLegacy_1.io.out[0].d.bits.param @[Top.scala 53:60]
        T_1409 <= TLLegacy_1.io.out[0].d.bits.size @[Top.scala 53:60]
        T_1411 <= TLLegacy_1.io.out[0].d.bits.source @[Top.scala 53:60]
        T_1413 <= TLLegacy_1.io.out[0].d.bits.sink @[Top.scala 53:60]
        T_1415 <= TLLegacy_1.io.out[0].d.bits.addr_lo @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1464 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1464 <= TLLegacy_1.io.out[0].a.valid
    reg T_1466 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1466 <= TLLegacy_1.io.out[0].a.ready
    reg T_1467 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}, clk
    T_1467 <- TLLegacy_1.io.out[0].a.bits
    node T_1475 = cat(TLLegacy_1.io.out[0].a.bits.addr_hi, TLLegacy_1.io.out[0].a.bits.mask) @[Top.scala 53:60]
    node T_1476 = cat(T_1475, TLLegacy_1.io.out[0].a.bits.data) @[Top.scala 53:60]
    node T_1477 = cat(TLLegacy_1.io.out[0].a.bits.size, TLLegacy_1.io.out[0].a.bits.source) @[Top.scala 53:60]
    node T_1478 = cat(TLLegacy_1.io.out[0].a.bits.opcode, TLLegacy_1.io.out[0].a.bits.param) @[Top.scala 53:60]
    node T_1479 = cat(T_1478, T_1477) @[Top.scala 53:60]
    node T_1480 = cat(T_1479, T_1476) @[Top.scala 53:60]
    node T_1481 = cat(T_1467.addr_hi, T_1467.mask) @[Top.scala 53:60]
    node T_1482 = cat(T_1481, T_1467.data) @[Top.scala 53:60]
    node T_1483 = cat(T_1467.size, T_1467.source) @[Top.scala 53:60]
    node T_1484 = cat(T_1467.opcode, T_1467.param) @[Top.scala 53:60]
    node T_1485 = cat(T_1484, T_1483) @[Top.scala 53:60]
    node T_1486 = cat(T_1485, T_1482) @[Top.scala 53:60]
    node T_1487 = eq(T_1480, T_1486) @[Top.scala 53:60]
    node T_1489 = eq(T_1466, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1490 = and(T_1464, T_1489) @[Top.scala 53:60]
    when T_1490 : @[Top.scala 53:60]
      node T_1491 = or(TLLegacy_1.io.out[0].a.valid, reset) @[Top.scala 53:60]
      node T_1493 = eq(T_1491, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1493 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:60)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1494 = or(T_1487, reset) @[Top.scala 53:60]
      node T_1496 = eq(T_1494, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1496 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:60)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1498 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1498 <= TLLegacy_1.io.out[0].b.valid
    reg T_1500 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1500 <= TLLegacy_1.io.out[0].b.ready
    reg T_1501 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}, clk
    T_1501 <- TLLegacy_1.io.out[0].b.bits
    node T_1509 = cat(TLLegacy_1.io.out[0].b.bits.addr_hi, TLLegacy_1.io.out[0].b.bits.mask) @[Top.scala 53:60]
    node T_1510 = cat(T_1509, TLLegacy_1.io.out[0].b.bits.data) @[Top.scala 53:60]
    node T_1511 = cat(TLLegacy_1.io.out[0].b.bits.size, TLLegacy_1.io.out[0].b.bits.source) @[Top.scala 53:60]
    node T_1512 = cat(TLLegacy_1.io.out[0].b.bits.opcode, TLLegacy_1.io.out[0].b.bits.param) @[Top.scala 53:60]
    node T_1513 = cat(T_1512, T_1511) @[Top.scala 53:60]
    node T_1514 = cat(T_1513, T_1510) @[Top.scala 53:60]
    node T_1515 = cat(T_1501.addr_hi, T_1501.mask) @[Top.scala 53:60]
    node T_1516 = cat(T_1515, T_1501.data) @[Top.scala 53:60]
    node T_1517 = cat(T_1501.size, T_1501.source) @[Top.scala 53:60]
    node T_1518 = cat(T_1501.opcode, T_1501.param) @[Top.scala 53:60]
    node T_1519 = cat(T_1518, T_1517) @[Top.scala 53:60]
    node T_1520 = cat(T_1519, T_1516) @[Top.scala 53:60]
    node T_1521 = eq(T_1514, T_1520) @[Top.scala 53:60]
    node T_1523 = eq(T_1500, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1524 = and(T_1498, T_1523) @[Top.scala 53:60]
    when T_1524 : @[Top.scala 53:60]
      node T_1525 = or(TLLegacy_1.io.out[0].b.valid, reset) @[Top.scala 53:60]
      node T_1527 = eq(T_1525, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1527 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:60)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1528 = or(T_1521, reset) @[Top.scala 53:60]
      node T_1530 = eq(T_1528, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1530 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:60)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1532 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1532 <= TLLegacy_1.io.out[0].c.valid
    reg T_1534 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1534 <= TLLegacy_1.io.out[0].c.ready
    reg T_1535 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}, clk
    T_1535 <- TLLegacy_1.io.out[0].c.bits
    node T_1544 = cat(TLLegacy_1.io.out[0].c.bits.data, TLLegacy_1.io.out[0].c.bits.error) @[Top.scala 53:60]
    node T_1545 = cat(TLLegacy_1.io.out[0].c.bits.addr_hi, TLLegacy_1.io.out[0].c.bits.addr_lo) @[Top.scala 53:60]
    node T_1546 = cat(T_1545, T_1544) @[Top.scala 53:60]
    node T_1547 = cat(TLLegacy_1.io.out[0].c.bits.size, TLLegacy_1.io.out[0].c.bits.source) @[Top.scala 53:60]
    node T_1548 = cat(TLLegacy_1.io.out[0].c.bits.opcode, TLLegacy_1.io.out[0].c.bits.param) @[Top.scala 53:60]
    node T_1549 = cat(T_1548, T_1547) @[Top.scala 53:60]
    node T_1550 = cat(T_1549, T_1546) @[Top.scala 53:60]
    node T_1551 = cat(T_1535.data, T_1535.error) @[Top.scala 53:60]
    node T_1552 = cat(T_1535.addr_hi, T_1535.addr_lo) @[Top.scala 53:60]
    node T_1553 = cat(T_1552, T_1551) @[Top.scala 53:60]
    node T_1554 = cat(T_1535.size, T_1535.source) @[Top.scala 53:60]
    node T_1555 = cat(T_1535.opcode, T_1535.param) @[Top.scala 53:60]
    node T_1556 = cat(T_1555, T_1554) @[Top.scala 53:60]
    node T_1557 = cat(T_1556, T_1553) @[Top.scala 53:60]
    node T_1558 = eq(T_1550, T_1557) @[Top.scala 53:60]
    node T_1560 = eq(T_1534, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1561 = and(T_1532, T_1560) @[Top.scala 53:60]
    when T_1561 : @[Top.scala 53:60]
      node T_1562 = or(TLLegacy_1.io.out[0].c.valid, reset) @[Top.scala 53:60]
      node T_1564 = eq(T_1562, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1564 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:60)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1565 = or(T_1558, reset) @[Top.scala 53:60]
      node T_1567 = eq(T_1565, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1567 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:60)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1569 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1569 <= TLLegacy_1.io.out[0].d.valid
    reg T_1571 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1571 <= TLLegacy_1.io.out[0].d.ready
    reg T_1572 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}, clk
    T_1572 <- TLLegacy_1.io.out[0].d.bits
    node T_1581 = cat(TLLegacy_1.io.out[0].d.bits.data, TLLegacy_1.io.out[0].d.bits.error) @[Top.scala 53:60]
    node T_1582 = cat(TLLegacy_1.io.out[0].d.bits.sink, TLLegacy_1.io.out[0].d.bits.addr_lo) @[Top.scala 53:60]
    node T_1583 = cat(T_1582, T_1581) @[Top.scala 53:60]
    node T_1584 = cat(TLLegacy_1.io.out[0].d.bits.size, TLLegacy_1.io.out[0].d.bits.source) @[Top.scala 53:60]
    node T_1585 = cat(TLLegacy_1.io.out[0].d.bits.opcode, TLLegacy_1.io.out[0].d.bits.param) @[Top.scala 53:60]
    node T_1586 = cat(T_1585, T_1584) @[Top.scala 53:60]
    node T_1587 = cat(T_1586, T_1583) @[Top.scala 53:60]
    node T_1588 = cat(T_1572.data, T_1572.error) @[Top.scala 53:60]
    node T_1589 = cat(T_1572.sink, T_1572.addr_lo) @[Top.scala 53:60]
    node T_1590 = cat(T_1589, T_1588) @[Top.scala 53:60]
    node T_1591 = cat(T_1572.size, T_1572.source) @[Top.scala 53:60]
    node T_1592 = cat(T_1572.opcode, T_1572.param) @[Top.scala 53:60]
    node T_1593 = cat(T_1592, T_1591) @[Top.scala 53:60]
    node T_1594 = cat(T_1593, T_1590) @[Top.scala 53:60]
    node T_1595 = eq(T_1587, T_1594) @[Top.scala 53:60]
    node T_1597 = eq(T_1571, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1598 = and(T_1569, T_1597) @[Top.scala 53:60]
    when T_1598 : @[Top.scala 53:60]
      node T_1599 = or(TLLegacy_1.io.out[0].d.valid, reset) @[Top.scala 53:60]
      node T_1601 = eq(T_1599, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1601 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:60)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1602 = or(T_1595, reset) @[Top.scala 53:60]
      node T_1604 = eq(T_1602, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1604 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:60)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    reg T_1606 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1606 <= TLLegacy_1.io.out[0].e.valid
    reg T_1608 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_1608 <= TLLegacy_1.io.out[0].e.ready
    reg T_1609 : {sink : UInt<1>}, clk
    T_1609 <- TLLegacy_1.io.out[0].e.bits
    node T_1611 = eq(TLLegacy_1.io.out[0].e.bits.sink, T_1609.sink) @[Top.scala 53:60]
    node T_1613 = eq(T_1608, UInt<1>("h00")) @[Top.scala 53:60]
    node T_1614 = and(T_1606, T_1613) @[Top.scala 53:60]
    when T_1614 : @[Top.scala 53:60]
      node T_1615 = or(TLLegacy_1.io.out[0].e.valid, reset) @[Top.scala 53:60]
      node T_1617 = eq(T_1615, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1617 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:60)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      node T_1618 = or(T_1611, reset) @[Top.scala 53:60]
      node T_1620 = eq(T_1618, UInt<1>("h00")) @[Top.scala 53:60]
      when T_1620 : @[Top.scala 53:60]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:60)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:60]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:60]
        skip @[Top.scala 53:60]
      skip @[Top.scala 53:60]
    TLHintHandler_1.io.in[0] <- TLLegacy_1.io.out[0] @[Top.scala 53:60]
    when TLHintHandler_1.io.out[0].a.valid : @[Top.scala 53:46]
      node T_1621 = leq(TLHintHandler_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_1622 = or(T_1621, reset) @[Top.scala 53:46]
      node T_1624 = eq(T_1622, UInt<1>("h00")) @[Top.scala 53:46]
      when T_1624 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Top.scala:53:46)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_1626 = xor(UInt<1>("h00"), TLHintHandler_1.io.out[0].a.bits.source) @[Parameters.scala 37:23]
      node T_1627 = not(T_1626) @[Parameters.scala 37:9]
      node T_1629 = or(T_1627, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_1630 = not(T_1629) @[Parameters.scala 37:7]
      node T_1632 = eq(T_1630, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_1638 : UInt<1>[1] @[Parameters.scala 326:27]
      T_1638 is invalid @[Parameters.scala 326:27]
      T_1638[0] <= T_1632 @[Parameters.scala 326:27]
      node T_1641 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_1642 = dshl(T_1641, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_1643 = bits(T_1642, 7, 0) @[package.scala 11:76]
      node T_1644 = not(T_1643) @[package.scala 11:40]
      node T_1645 = shr(T_1644, 3) @[Edges.scala 15:47]
      node T_1646 = and(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_1645) @[Edges.scala 16:16]
      node T_1648 = eq(T_1646, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_1650 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_1651 = dshl(T_1650, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_1652 = bits(T_1651, 2, 0) @[package.scala 11:76]
      node T_1653 = not(T_1652) @[package.scala 11:40]
      node T_1654 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_1655 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_1657 = neq(T_1655, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_1659 = eq(T_1657, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_1660 = or(T_1654, T_1655) @[Edges.scala 63:32]
      node T_1661 = bits(T_1660, 3, 2) @[Edges.scala 61:22]
      node T_1662 = bits(T_1660, 1, 0) @[Edges.scala 62:22]
      node T_1664 = neq(T_1662, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_1666 = eq(T_1664, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_1667 = or(T_1661, T_1662) @[Edges.scala 63:32]
      node T_1668 = bits(T_1667, 0, 0) @[Edges.scala 58:14]
      node T_1669 = not(T_1668) @[Edges.scala 58:9]
      node T_1670 = cat(T_1666, T_1669) @[Cat.scala 20:58]
      node T_1671 = cat(T_1659, T_1670) @[Cat.scala 20:58]
      node T_1672 = not(T_1653) @[Edges.scala 66:39]
      node T_1673 = and(T_1671, T_1672) @[Edges.scala 66:37]
      node T_1675 = bits(TLHintHandler_1.io.out[0].a.bits.size, 1, 0) @[OneHot.scala 46:21]
      node T_1676 = dshl(UInt<1>("h01"), T_1675) @[OneHot.scala 46:16]
      node T_1677 = bits(T_1676, 2, 0) @[OneHot.scala 46:41]
      node T_1679 = geq(TLHintHandler_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
      node T_1681 = bits(T_1677, 2, 2) @[Edges.scala 36:26]
      node T_1682 = bits(T_1673, 2, 2) @[Edges.scala 37:26]
      node T_1684 = eq(T_1682, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_1685 = and(UInt<1>("h01"), T_1684) @[Edges.scala 41:27]
      node T_1686 = and(T_1681, T_1685) @[Edges.scala 42:38]
      node T_1687 = or(T_1679, T_1686) @[Edges.scala 42:29]
      node T_1688 = and(UInt<1>("h01"), T_1682) @[Edges.scala 41:27]
      node T_1689 = and(T_1681, T_1688) @[Edges.scala 42:38]
      node T_1690 = or(T_1679, T_1689) @[Edges.scala 42:29]
      node T_1691 = bits(T_1677, 1, 1) @[Edges.scala 36:26]
      node T_1692 = bits(T_1673, 1, 1) @[Edges.scala 37:26]
      node T_1694 = eq(T_1692, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_1695 = and(T_1685, T_1694) @[Edges.scala 41:27]
      node T_1696 = and(T_1691, T_1695) @[Edges.scala 42:38]
      node T_1697 = or(T_1687, T_1696) @[Edges.scala 42:29]
      node T_1698 = and(T_1685, T_1692) @[Edges.scala 41:27]
      node T_1699 = and(T_1691, T_1698) @[Edges.scala 42:38]
      node T_1700 = or(T_1687, T_1699) @[Edges.scala 42:29]
      node T_1701 = and(T_1688, T_1694) @[Edges.scala 41:27]
      node T_1702 = and(T_1691, T_1701) @[Edges.scala 42:38]
      node T_1703 = or(T_1690, T_1702) @[Edges.scala 42:29]
      node T_1704 = and(T_1688, T_1692) @[Edges.scala 41:27]
      node T_1705 = and(T_1691, T_1704) @[Edges.scala 42:38]
      node T_1706 = or(T_1690, T_1705) @[Edges.scala 42:29]
      node T_1707 = bits(T_1677, 0, 0) @[Edges.scala 36:26]
      node T_1708 = bits(T_1673, 0, 0) @[Edges.scala 37:26]
      node T_1710 = eq(T_1708, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_1711 = and(T_1695, T_1710) @[Edges.scala 41:27]
      node T_1712 = and(T_1707, T_1711) @[Edges.scala 42:38]
      node T_1713 = or(T_1697, T_1712) @[Edges.scala 42:29]
      node T_1714 = and(T_1695, T_1708) @[Edges.scala 41:27]
      node T_1715 = and(T_1707, T_1714) @[Edges.scala 42:38]
      node T_1716 = or(T_1697, T_1715) @[Edges.scala 42:29]
      node T_1717 = and(T_1698, T_1710) @[Edges.scala 41:27]
      node T_1718 = and(T_1707, T_1717) @[Edges.scala 42:38]
      node T_1719 = or(T_1700, T_1718) @[Edges.scala 42:29]
      node T_1720 = and(T_1698, T_1708) @[Edges.scala 41:27]
      node T_1721 = and(T_1707, T_1720) @[Edges.scala 42:38]
      node T_1722 = or(T_1700, T_1721) @[Edges.scala 42:29]
      node T_1723 = and(T_1701, T_1710) @[Edges.scala 41:27]
      node T_1724 = and(T_1707, T_1723) @[Edges.scala 42:38]
      node T_1725 = or(T_1703, T_1724) @[Edges.scala 42:29]
      node T_1726 = and(T_1701, T_1708) @[Edges.scala 41:27]
      node T_1727 = and(T_1707, T_1726) @[Edges.scala 42:38]
      node T_1728 = or(T_1703, T_1727) @[Edges.scala 42:29]
      node T_1729 = and(T_1704, T_1710) @[Edges.scala 41:27]
      node T_1730 = and(T_1707, T_1729) @[Edges.scala 42:38]
      node T_1731 = or(T_1706, T_1730) @[Edges.scala 42:29]
      node T_1732 = and(T_1704, T_1708) @[Edges.scala 41:27]
      node T_1733 = and(T_1707, T_1732) @[Edges.scala 42:38]
      node T_1734 = or(T_1706, T_1733) @[Edges.scala 42:29]
      node T_1735 = cat(T_1716, T_1713) @[Cat.scala 20:58]
      node T_1736 = cat(T_1722, T_1719) @[Cat.scala 20:58]
      node T_1737 = cat(T_1736, T_1735) @[Cat.scala 20:58]
      node T_1738 = cat(T_1728, T_1725) @[Cat.scala 20:58]
      node T_1739 = cat(T_1734, T_1731) @[Cat.scala 20:58]
      node T_1740 = cat(T_1739, T_1738) @[Cat.scala 20:58]
      node T_1741 = cat(T_1740, T_1737) @[Cat.scala 20:58]
      node T_1742 = eq(TLHintHandler_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Top.scala 53:46]
      when T_1742 : @[Top.scala 53:46]
        node T_1744 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_1745 = dshl(T_1744, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_1746 = bits(T_1745, 2, 0) @[package.scala 11:76]
        node T_1747 = not(T_1746) @[package.scala 11:40]
        node T_1748 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_1749 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_1751 = neq(T_1749, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_1753 = eq(T_1751, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_1754 = or(T_1748, T_1749) @[Edges.scala 63:32]
        node T_1755 = bits(T_1754, 3, 2) @[Edges.scala 61:22]
        node T_1756 = bits(T_1754, 1, 0) @[Edges.scala 62:22]
        node T_1758 = neq(T_1756, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_1760 = eq(T_1758, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_1761 = or(T_1755, T_1756) @[Edges.scala 63:32]
        node T_1762 = bits(T_1761, 0, 0) @[Edges.scala 58:14]
        node T_1763 = not(T_1762) @[Edges.scala 58:9]
        node T_1764 = cat(T_1760, T_1763) @[Cat.scala 20:58]
        node T_1765 = cat(T_1753, T_1764) @[Cat.scala 20:58]
        node T_1766 = not(T_1747) @[Edges.scala 66:39]
        node T_1767 = and(T_1765, T_1766) @[Edges.scala 66:37]
        node T_1768 = cat(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_1767) @[Cat.scala 20:58]
        node T_1770 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_1772 = eq(T_1770, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1772 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1773 = or(T_1638[0], reset) @[Top.scala 53:46]
        node T_1775 = eq(T_1773, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1775 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1777 = geq(TLHintHandler_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_1778 = or(T_1777, reset) @[Top.scala 53:46]
        node T_1780 = eq(T_1778, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1780 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1781 = or(T_1648, reset) @[Top.scala 53:46]
        node T_1783 = eq(T_1781, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1783 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1784 = leq(TLHintHandler_1.io.out[0].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_1785 = or(T_1784, reset) @[Top.scala 53:46]
        node T_1787 = eq(T_1785, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1787 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Top.scala:53:46)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1788 = not(TLHintHandler_1.io.out[0].a.bits.mask) @[Top.scala 53:46]
        node T_1790 = eq(T_1788, UInt<1>("h00")) @[Top.scala 53:46]
        node T_1791 = or(T_1790, reset) @[Top.scala 53:46]
        node T_1793 = eq(T_1791, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1793 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_1794 = eq(TLHintHandler_1.io.out[0].a.bits.opcode, UInt<3>("h04")) @[Top.scala 53:46]
      when T_1794 : @[Top.scala 53:46]
        node T_1796 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_1797 = dshl(T_1796, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_1798 = bits(T_1797, 2, 0) @[package.scala 11:76]
        node T_1799 = not(T_1798) @[package.scala 11:40]
        node T_1800 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_1801 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_1803 = neq(T_1801, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_1805 = eq(T_1803, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_1806 = or(T_1800, T_1801) @[Edges.scala 63:32]
        node T_1807 = bits(T_1806, 3, 2) @[Edges.scala 61:22]
        node T_1808 = bits(T_1806, 1, 0) @[Edges.scala 62:22]
        node T_1810 = neq(T_1808, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_1812 = eq(T_1810, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_1813 = or(T_1807, T_1808) @[Edges.scala 63:32]
        node T_1814 = bits(T_1813, 0, 0) @[Edges.scala 58:14]
        node T_1815 = not(T_1814) @[Edges.scala 58:9]
        node T_1816 = cat(T_1812, T_1815) @[Cat.scala 20:58]
        node T_1817 = cat(T_1805, T_1816) @[Cat.scala 20:58]
        node T_1818 = not(T_1799) @[Edges.scala 66:39]
        node T_1819 = and(T_1817, T_1818) @[Edges.scala 66:37]
        node T_1820 = cat(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_1819) @[Cat.scala 20:58]
        node T_1822 = leq(UInt<1>("h00"), TLHintHandler_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_1824 = leq(TLHintHandler_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_1825 = and(T_1822, T_1824) @[Parameters.scala 61:37]
        node T_1826 = or(T_1825, reset) @[Top.scala 53:46]
        node T_1828 = eq(T_1826, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1828 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1829 = or(T_1638[0], reset) @[Top.scala 53:46]
        node T_1831 = eq(T_1829, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1831 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1832 = or(T_1648, reset) @[Top.scala 53:46]
        node T_1834 = eq(T_1832, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1834 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1836 = eq(TLHintHandler_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_1837 = or(T_1836, reset) @[Top.scala 53:46]
        node T_1839 = eq(T_1837, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1839 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1840 = eq(TLHintHandler_1.io.out[0].a.bits.mask, T_1741) @[Top.scala 53:46]
        node T_1841 = or(T_1840, reset) @[Top.scala 53:46]
        node T_1843 = eq(T_1841, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1843 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_1844 = eq(TLHintHandler_1.io.out[0].a.bits.opcode, UInt<1>("h00")) @[Top.scala 53:46]
      when T_1844 : @[Top.scala 53:46]
        node T_1846 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_1847 = dshl(T_1846, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_1848 = bits(T_1847, 2, 0) @[package.scala 11:76]
        node T_1849 = not(T_1848) @[package.scala 11:40]
        node T_1850 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_1851 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_1853 = neq(T_1851, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_1855 = eq(T_1853, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_1856 = or(T_1850, T_1851) @[Edges.scala 63:32]
        node T_1857 = bits(T_1856, 3, 2) @[Edges.scala 61:22]
        node T_1858 = bits(T_1856, 1, 0) @[Edges.scala 62:22]
        node T_1860 = neq(T_1858, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_1862 = eq(T_1860, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_1863 = or(T_1857, T_1858) @[Edges.scala 63:32]
        node T_1864 = bits(T_1863, 0, 0) @[Edges.scala 58:14]
        node T_1865 = not(T_1864) @[Edges.scala 58:9]
        node T_1866 = cat(T_1862, T_1865) @[Cat.scala 20:58]
        node T_1867 = cat(T_1855, T_1866) @[Cat.scala 20:58]
        node T_1868 = not(T_1849) @[Edges.scala 66:39]
        node T_1869 = and(T_1867, T_1868) @[Edges.scala 66:37]
        node T_1870 = cat(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_1869) @[Cat.scala 20:58]
        node T_1872 = xor(T_1870, UInt<13>("h01000")) @[Parameters.scala 89:31]
        node T_1873 = cvt(T_1872) @[Parameters.scala 89:49]
        node T_1875 = and(T_1873, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
        node T_1876 = asSInt(T_1875) @[Parameters.scala 89:52]
        node T_1878 = eq(T_1876, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        node T_1880 = xor(T_1870, UInt<31>("h044000000")) @[Parameters.scala 89:31]
        node T_1881 = cvt(T_1880) @[Parameters.scala 89:49]
        node T_1883 = and(T_1881, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
        node T_1884 = asSInt(T_1883) @[Parameters.scala 89:52]
        node T_1886 = eq(T_1884, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        wire T_1892 : UInt<1>[2] @[Parameters.scala 227:36]
        T_1892 is invalid @[Parameters.scala 227:36]
        T_1892[0] <= T_1878 @[Parameters.scala 227:36]
        T_1892[1] <= T_1886 @[Parameters.scala 227:36]
        node T_1896 = leq(UInt<1>("h00"), TLHintHandler_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_1898 = leq(TLHintHandler_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_1899 = and(T_1896, T_1898) @[Parameters.scala 61:37]
        node T_1901 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
        node T_1902 = mux(T_1892[0], T_1901, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_1904 = shl(T_1899, 0) @[Mux.scala 18:72]
        node T_1905 = mux(T_1892[1], T_1904, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_1907 = or(T_1902, T_1905) @[Mux.scala 18:72]
        wire T_1908 : UInt<1>
        T_1908 is invalid
        T_1908 <= T_1907 @[Mux.scala 18:72]
        node T_1909 = or(T_1908, reset) @[Top.scala 53:46]
        node T_1911 = eq(T_1909, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1911 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1912 = or(T_1638[0], reset) @[Top.scala 53:46]
        node T_1914 = eq(T_1912, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1914 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1915 = or(T_1648, reset) @[Top.scala 53:46]
        node T_1917 = eq(T_1915, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1917 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1919 = eq(TLHintHandler_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_1920 = or(T_1919, reset) @[Top.scala 53:46]
        node T_1922 = eq(T_1920, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1922 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1923 = eq(TLHintHandler_1.io.out[0].a.bits.mask, T_1741) @[Top.scala 53:46]
        node T_1924 = or(T_1923, reset) @[Top.scala 53:46]
        node T_1926 = eq(T_1924, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1926 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_1927 = eq(TLHintHandler_1.io.out[0].a.bits.opcode, UInt<1>("h01")) @[Top.scala 53:46]
      when T_1927 : @[Top.scala 53:46]
        node T_1929 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_1930 = dshl(T_1929, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_1931 = bits(T_1930, 2, 0) @[package.scala 11:76]
        node T_1932 = not(T_1931) @[package.scala 11:40]
        node T_1933 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_1934 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_1936 = neq(T_1934, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_1938 = eq(T_1936, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_1939 = or(T_1933, T_1934) @[Edges.scala 63:32]
        node T_1940 = bits(T_1939, 3, 2) @[Edges.scala 61:22]
        node T_1941 = bits(T_1939, 1, 0) @[Edges.scala 62:22]
        node T_1943 = neq(T_1941, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_1945 = eq(T_1943, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_1946 = or(T_1940, T_1941) @[Edges.scala 63:32]
        node T_1947 = bits(T_1946, 0, 0) @[Edges.scala 58:14]
        node T_1948 = not(T_1947) @[Edges.scala 58:9]
        node T_1949 = cat(T_1945, T_1948) @[Cat.scala 20:58]
        node T_1950 = cat(T_1938, T_1949) @[Cat.scala 20:58]
        node T_1951 = not(T_1932) @[Edges.scala 66:39]
        node T_1952 = and(T_1950, T_1951) @[Edges.scala 66:37]
        node T_1953 = cat(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_1952) @[Cat.scala 20:58]
        node T_1955 = xor(T_1953, UInt<13>("h01000")) @[Parameters.scala 89:31]
        node T_1956 = cvt(T_1955) @[Parameters.scala 89:49]
        node T_1958 = and(T_1956, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
        node T_1959 = asSInt(T_1958) @[Parameters.scala 89:52]
        node T_1961 = eq(T_1959, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        node T_1963 = xor(T_1953, UInt<31>("h044000000")) @[Parameters.scala 89:31]
        node T_1964 = cvt(T_1963) @[Parameters.scala 89:49]
        node T_1966 = and(T_1964, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
        node T_1967 = asSInt(T_1966) @[Parameters.scala 89:52]
        node T_1969 = eq(T_1967, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        wire T_1975 : UInt<1>[2] @[Parameters.scala 227:36]
        T_1975 is invalid @[Parameters.scala 227:36]
        T_1975[0] <= T_1961 @[Parameters.scala 227:36]
        T_1975[1] <= T_1969 @[Parameters.scala 227:36]
        node T_1979 = leq(UInt<1>("h00"), TLHintHandler_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_1981 = leq(TLHintHandler_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_1982 = and(T_1979, T_1981) @[Parameters.scala 61:37]
        node T_1984 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
        node T_1985 = mux(T_1975[0], T_1984, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_1987 = shl(T_1982, 0) @[Mux.scala 18:72]
        node T_1988 = mux(T_1975[1], T_1987, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_1990 = or(T_1985, T_1988) @[Mux.scala 18:72]
        wire T_1991 : UInt<1>
        T_1991 is invalid
        T_1991 <= T_1990 @[Mux.scala 18:72]
        node T_1992 = or(T_1991, reset) @[Top.scala 53:46]
        node T_1994 = eq(T_1992, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1994 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1995 = or(T_1638[0], reset) @[Top.scala 53:46]
        node T_1997 = eq(T_1995, UInt<1>("h00")) @[Top.scala 53:46]
        when T_1997 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_1998 = or(T_1648, reset) @[Top.scala 53:46]
        node T_2000 = eq(T_1998, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2000 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2002 = eq(TLHintHandler_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2003 = or(T_2002, reset) @[Top.scala 53:46]
        node T_2005 = eq(T_2003, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2005 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2006 = not(T_1741) @[Top.scala 53:46]
        node T_2007 = and(TLHintHandler_1.io.out[0].a.bits.mask, T_2006) @[Top.scala 53:46]
        node T_2009 = eq(T_2007, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2010 = or(T_2009, reset) @[Top.scala 53:46]
        node T_2012 = eq(T_2010, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2012 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2013 = eq(TLHintHandler_1.io.out[0].a.bits.opcode, UInt<2>("h02")) @[Top.scala 53:46]
      when T_2013 : @[Top.scala 53:46]
        node T_2015 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_2016 = dshl(T_2015, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_2017 = bits(T_2016, 2, 0) @[package.scala 11:76]
        node T_2018 = not(T_2017) @[package.scala 11:40]
        node T_2019 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_2020 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_2022 = neq(T_2020, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_2024 = eq(T_2022, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_2025 = or(T_2019, T_2020) @[Edges.scala 63:32]
        node T_2026 = bits(T_2025, 3, 2) @[Edges.scala 61:22]
        node T_2027 = bits(T_2025, 1, 0) @[Edges.scala 62:22]
        node T_2029 = neq(T_2027, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_2031 = eq(T_2029, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_2032 = or(T_2026, T_2027) @[Edges.scala 63:32]
        node T_2033 = bits(T_2032, 0, 0) @[Edges.scala 58:14]
        node T_2034 = not(T_2033) @[Edges.scala 58:9]
        node T_2035 = cat(T_2031, T_2034) @[Cat.scala 20:58]
        node T_2036 = cat(T_2024, T_2035) @[Cat.scala 20:58]
        node T_2037 = not(T_2018) @[Edges.scala 66:39]
        node T_2038 = and(T_2036, T_2037) @[Edges.scala 66:37]
        node T_2039 = cat(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_2038) @[Cat.scala 20:58]
        node T_2041 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2043 = eq(T_2041, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2043 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2044 = or(T_1638[0], reset) @[Top.scala 53:46]
        node T_2046 = eq(T_2044, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2046 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2047 = or(T_1648, reset) @[Top.scala 53:46]
        node T_2049 = eq(T_2047, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2049 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2050 = leq(TLHintHandler_1.io.out[0].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_2051 = or(T_2050, reset) @[Top.scala 53:46]
        node T_2053 = eq(T_2051, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2053 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Top.scala:53:46)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2054 = eq(TLHintHandler_1.io.out[0].a.bits.mask, T_1741) @[Top.scala 53:46]
        node T_2055 = or(T_2054, reset) @[Top.scala 53:46]
        node T_2057 = eq(T_2055, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2057 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2058 = eq(TLHintHandler_1.io.out[0].a.bits.opcode, UInt<2>("h03")) @[Top.scala 53:46]
      when T_2058 : @[Top.scala 53:46]
        node T_2060 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_2061 = dshl(T_2060, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_2062 = bits(T_2061, 2, 0) @[package.scala 11:76]
        node T_2063 = not(T_2062) @[package.scala 11:40]
        node T_2064 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_2065 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_2067 = neq(T_2065, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_2069 = eq(T_2067, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_2070 = or(T_2064, T_2065) @[Edges.scala 63:32]
        node T_2071 = bits(T_2070, 3, 2) @[Edges.scala 61:22]
        node T_2072 = bits(T_2070, 1, 0) @[Edges.scala 62:22]
        node T_2074 = neq(T_2072, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_2076 = eq(T_2074, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_2077 = or(T_2071, T_2072) @[Edges.scala 63:32]
        node T_2078 = bits(T_2077, 0, 0) @[Edges.scala 58:14]
        node T_2079 = not(T_2078) @[Edges.scala 58:9]
        node T_2080 = cat(T_2076, T_2079) @[Cat.scala 20:58]
        node T_2081 = cat(T_2069, T_2080) @[Cat.scala 20:58]
        node T_2082 = not(T_2063) @[Edges.scala 66:39]
        node T_2083 = and(T_2081, T_2082) @[Edges.scala 66:37]
        node T_2084 = cat(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_2083) @[Cat.scala 20:58]
        node T_2086 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2088 = eq(T_2086, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2088 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2089 = or(T_1638[0], reset) @[Top.scala 53:46]
        node T_2091 = eq(T_2089, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2091 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2092 = or(T_1648, reset) @[Top.scala 53:46]
        node T_2094 = eq(T_2092, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2094 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2095 = leq(TLHintHandler_1.io.out[0].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_2096 = or(T_2095, reset) @[Top.scala 53:46]
        node T_2098 = eq(T_2096, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2098 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Top.scala:53:46)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2099 = eq(TLHintHandler_1.io.out[0].a.bits.mask, T_1741) @[Top.scala 53:46]
        node T_2100 = or(T_2099, reset) @[Top.scala 53:46]
        node T_2102 = eq(T_2100, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2102 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2103 = eq(TLHintHandler_1.io.out[0].a.bits.opcode, UInt<3>("h05")) @[Top.scala 53:46]
      when T_2103 : @[Top.scala 53:46]
        node T_2105 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_2106 = dshl(T_2105, TLHintHandler_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_2107 = bits(T_2106, 2, 0) @[package.scala 11:76]
        node T_2108 = not(T_2107) @[package.scala 11:40]
        node T_2109 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_2110 = bits(TLHintHandler_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_2112 = neq(T_2110, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_2114 = eq(T_2112, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_2115 = or(T_2109, T_2110) @[Edges.scala 63:32]
        node T_2116 = bits(T_2115, 3, 2) @[Edges.scala 61:22]
        node T_2117 = bits(T_2115, 1, 0) @[Edges.scala 62:22]
        node T_2119 = neq(T_2117, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_2121 = eq(T_2119, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_2122 = or(T_2116, T_2117) @[Edges.scala 63:32]
        node T_2123 = bits(T_2122, 0, 0) @[Edges.scala 58:14]
        node T_2124 = not(T_2123) @[Edges.scala 58:9]
        node T_2125 = cat(T_2121, T_2124) @[Cat.scala 20:58]
        node T_2126 = cat(T_2114, T_2125) @[Cat.scala 20:58]
        node T_2127 = not(T_2108) @[Edges.scala 66:39]
        node T_2128 = and(T_2126, T_2127) @[Edges.scala 66:37]
        node T_2129 = cat(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_2128) @[Cat.scala 20:58]
        node T_2131 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2133 = eq(T_2131, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2133 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2134 = or(T_1638[0], reset) @[Top.scala 53:46]
        node T_2136 = eq(T_2134, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2136 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2137 = or(T_1648, reset) @[Top.scala 53:46]
        node T_2139 = eq(T_2137, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2139 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2140 = eq(TLHintHandler_1.io.out[0].a.bits.mask, T_1741) @[Top.scala 53:46]
        node T_2141 = or(T_2140, reset) @[Top.scala 53:46]
        node T_2143 = eq(T_2141, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2143 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    when TLHintHandler_1.io.out[0].b.valid : @[Top.scala 53:46]
      node T_2144 = leq(TLHintHandler_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_2145 = or(T_2144, reset) @[Top.scala 53:46]
      node T_2147 = eq(T_2145, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2147 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Top.scala:53:46)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2149 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_2150 = dshl(T_2149, TLHintHandler_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_2151 = bits(T_2150, 2, 0) @[package.scala 11:76]
      node T_2152 = not(T_2151) @[package.scala 11:40]
      node T_2153 = bits(TLHintHandler_1.io.out[0].b.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_2154 = bits(TLHintHandler_1.io.out[0].b.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_2156 = neq(T_2154, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_2158 = eq(T_2156, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_2159 = or(T_2153, T_2154) @[Edges.scala 63:32]
      node T_2160 = bits(T_2159, 3, 2) @[Edges.scala 61:22]
      node T_2161 = bits(T_2159, 1, 0) @[Edges.scala 62:22]
      node T_2163 = neq(T_2161, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_2165 = eq(T_2163, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_2166 = or(T_2160, T_2161) @[Edges.scala 63:32]
      node T_2167 = bits(T_2166, 0, 0) @[Edges.scala 58:14]
      node T_2168 = not(T_2167) @[Edges.scala 58:9]
      node T_2169 = cat(T_2165, T_2168) @[Cat.scala 20:58]
      node T_2170 = cat(T_2158, T_2169) @[Cat.scala 20:58]
      node T_2171 = not(T_2152) @[Edges.scala 66:39]
      node T_2172 = and(T_2170, T_2171) @[Edges.scala 66:37]
      node T_2173 = cat(TLHintHandler_1.io.out[0].b.bits.addr_hi, T_2172) @[Cat.scala 20:58]
      node T_2175 = xor(T_2173, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_2176 = cvt(T_2175) @[Parameters.scala 89:49]
      node T_2178 = and(T_2176, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_2179 = asSInt(T_2178) @[Parameters.scala 89:52]
      node T_2181 = eq(T_2179, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      node T_2183 = xor(T_2173, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_2184 = cvt(T_2183) @[Parameters.scala 89:49]
      node T_2186 = and(T_2184, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_2187 = asSInt(T_2186) @[Parameters.scala 89:52]
      node T_2189 = eq(T_2187, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_2195 : UInt<1>[2] @[Parameters.scala 227:36]
      T_2195 is invalid @[Parameters.scala 227:36]
      T_2195[0] <= T_2181 @[Parameters.scala 227:36]
      T_2195[1] <= T_2189 @[Parameters.scala 227:36]
      node T_2197 = or(T_2195[0], T_2195[1]) @[Parameters.scala 238:64]
      node T_2199 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_2200 = dshl(T_2199, TLHintHandler_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_2201 = bits(T_2200, 7, 0) @[package.scala 11:76]
      node T_2202 = not(T_2201) @[package.scala 11:40]
      node T_2203 = shr(T_2202, 3) @[Edges.scala 15:47]
      node T_2204 = and(TLHintHandler_1.io.out[0].b.bits.addr_hi, T_2203) @[Edges.scala 16:16]
      node T_2206 = eq(T_2204, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_2208 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_2209 = dshl(T_2208, TLHintHandler_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_2210 = bits(T_2209, 2, 0) @[package.scala 11:76]
      node T_2211 = not(T_2210) @[package.scala 11:40]
      node T_2212 = bits(TLHintHandler_1.io.out[0].b.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_2213 = bits(TLHintHandler_1.io.out[0].b.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_2215 = neq(T_2213, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_2217 = eq(T_2215, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_2218 = or(T_2212, T_2213) @[Edges.scala 63:32]
      node T_2219 = bits(T_2218, 3, 2) @[Edges.scala 61:22]
      node T_2220 = bits(T_2218, 1, 0) @[Edges.scala 62:22]
      node T_2222 = neq(T_2220, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_2224 = eq(T_2222, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_2225 = or(T_2219, T_2220) @[Edges.scala 63:32]
      node T_2226 = bits(T_2225, 0, 0) @[Edges.scala 58:14]
      node T_2227 = not(T_2226) @[Edges.scala 58:9]
      node T_2228 = cat(T_2224, T_2227) @[Cat.scala 20:58]
      node T_2229 = cat(T_2217, T_2228) @[Cat.scala 20:58]
      node T_2230 = not(T_2211) @[Edges.scala 66:39]
      node T_2231 = and(T_2229, T_2230) @[Edges.scala 66:37]
      node T_2233 = bits(TLHintHandler_1.io.out[0].b.bits.size, 1, 0) @[OneHot.scala 46:21]
      node T_2234 = dshl(UInt<1>("h01"), T_2233) @[OneHot.scala 46:16]
      node T_2235 = bits(T_2234, 2, 0) @[OneHot.scala 46:41]
      node T_2237 = geq(TLHintHandler_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
      node T_2239 = bits(T_2235, 2, 2) @[Edges.scala 36:26]
      node T_2240 = bits(T_2231, 2, 2) @[Edges.scala 37:26]
      node T_2242 = eq(T_2240, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_2243 = and(UInt<1>("h01"), T_2242) @[Edges.scala 41:27]
      node T_2244 = and(T_2239, T_2243) @[Edges.scala 42:38]
      node T_2245 = or(T_2237, T_2244) @[Edges.scala 42:29]
      node T_2246 = and(UInt<1>("h01"), T_2240) @[Edges.scala 41:27]
      node T_2247 = and(T_2239, T_2246) @[Edges.scala 42:38]
      node T_2248 = or(T_2237, T_2247) @[Edges.scala 42:29]
      node T_2249 = bits(T_2235, 1, 1) @[Edges.scala 36:26]
      node T_2250 = bits(T_2231, 1, 1) @[Edges.scala 37:26]
      node T_2252 = eq(T_2250, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_2253 = and(T_2243, T_2252) @[Edges.scala 41:27]
      node T_2254 = and(T_2249, T_2253) @[Edges.scala 42:38]
      node T_2255 = or(T_2245, T_2254) @[Edges.scala 42:29]
      node T_2256 = and(T_2243, T_2250) @[Edges.scala 41:27]
      node T_2257 = and(T_2249, T_2256) @[Edges.scala 42:38]
      node T_2258 = or(T_2245, T_2257) @[Edges.scala 42:29]
      node T_2259 = and(T_2246, T_2252) @[Edges.scala 41:27]
      node T_2260 = and(T_2249, T_2259) @[Edges.scala 42:38]
      node T_2261 = or(T_2248, T_2260) @[Edges.scala 42:29]
      node T_2262 = and(T_2246, T_2250) @[Edges.scala 41:27]
      node T_2263 = and(T_2249, T_2262) @[Edges.scala 42:38]
      node T_2264 = or(T_2248, T_2263) @[Edges.scala 42:29]
      node T_2265 = bits(T_2235, 0, 0) @[Edges.scala 36:26]
      node T_2266 = bits(T_2231, 0, 0) @[Edges.scala 37:26]
      node T_2268 = eq(T_2266, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_2269 = and(T_2253, T_2268) @[Edges.scala 41:27]
      node T_2270 = and(T_2265, T_2269) @[Edges.scala 42:38]
      node T_2271 = or(T_2255, T_2270) @[Edges.scala 42:29]
      node T_2272 = and(T_2253, T_2266) @[Edges.scala 41:27]
      node T_2273 = and(T_2265, T_2272) @[Edges.scala 42:38]
      node T_2274 = or(T_2255, T_2273) @[Edges.scala 42:29]
      node T_2275 = and(T_2256, T_2268) @[Edges.scala 41:27]
      node T_2276 = and(T_2265, T_2275) @[Edges.scala 42:38]
      node T_2277 = or(T_2258, T_2276) @[Edges.scala 42:29]
      node T_2278 = and(T_2256, T_2266) @[Edges.scala 41:27]
      node T_2279 = and(T_2265, T_2278) @[Edges.scala 42:38]
      node T_2280 = or(T_2258, T_2279) @[Edges.scala 42:29]
      node T_2281 = and(T_2259, T_2268) @[Edges.scala 41:27]
      node T_2282 = and(T_2265, T_2281) @[Edges.scala 42:38]
      node T_2283 = or(T_2261, T_2282) @[Edges.scala 42:29]
      node T_2284 = and(T_2259, T_2266) @[Edges.scala 41:27]
      node T_2285 = and(T_2265, T_2284) @[Edges.scala 42:38]
      node T_2286 = or(T_2261, T_2285) @[Edges.scala 42:29]
      node T_2287 = and(T_2262, T_2268) @[Edges.scala 41:27]
      node T_2288 = and(T_2265, T_2287) @[Edges.scala 42:38]
      node T_2289 = or(T_2264, T_2288) @[Edges.scala 42:29]
      node T_2290 = and(T_2262, T_2266) @[Edges.scala 41:27]
      node T_2291 = and(T_2265, T_2290) @[Edges.scala 42:38]
      node T_2292 = or(T_2264, T_2291) @[Edges.scala 42:29]
      node T_2293 = cat(T_2274, T_2271) @[Cat.scala 20:58]
      node T_2294 = cat(T_2280, T_2277) @[Cat.scala 20:58]
      node T_2295 = cat(T_2294, T_2293) @[Cat.scala 20:58]
      node T_2296 = cat(T_2286, T_2283) @[Cat.scala 20:58]
      node T_2297 = cat(T_2292, T_2289) @[Cat.scala 20:58]
      node T_2298 = cat(T_2297, T_2296) @[Cat.scala 20:58]
      node T_2299 = cat(T_2298, T_2295) @[Cat.scala 20:58]
      node T_2300 = eq(TLHintHandler_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Top.scala 53:46]
      when T_2300 : @[Top.scala 53:46]
        node T_2302 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2304 = eq(T_2302, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2304 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Top.scala:53:46)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2305 = or(T_2197, reset) @[Top.scala 53:46]
        node T_2307 = eq(T_2305, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2307 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2309 = geq(TLHintHandler_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_2310 = or(T_2309, reset) @[Top.scala 53:46]
        node T_2312 = eq(T_2310, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2312 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2313 = or(T_2206, reset) @[Top.scala 53:46]
        node T_2315 = eq(T_2313, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2315 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2316 = leq(TLHintHandler_1.io.out[0].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_2317 = or(T_2316, reset) @[Top.scala 53:46]
        node T_2319 = eq(T_2317, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2319 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Top.scala:53:46)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2320 = not(TLHintHandler_1.io.out[0].b.bits.mask) @[Top.scala 53:46]
        node T_2322 = eq(T_2320, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2323 = or(T_2322, reset) @[Top.scala 53:46]
        node T_2325 = eq(T_2323, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2325 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2326 = eq(TLHintHandler_1.io.out[0].b.bits.opcode, UInt<3>("h04")) @[Top.scala 53:46]
      when T_2326 : @[Top.scala 53:46]
        node T_2328 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2330 = eq(T_2328, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2330 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Top.scala:53:46)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2331 = or(T_2197, reset) @[Top.scala 53:46]
        node T_2333 = eq(T_2331, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2333 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2334 = or(T_2206, reset) @[Top.scala 53:46]
        node T_2336 = eq(T_2334, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2336 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2338 = eq(TLHintHandler_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2339 = or(T_2338, reset) @[Top.scala 53:46]
        node T_2341 = eq(T_2339, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2341 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2342 = eq(TLHintHandler_1.io.out[0].b.bits.mask, T_2299) @[Top.scala 53:46]
        node T_2343 = or(T_2342, reset) @[Top.scala 53:46]
        node T_2345 = eq(T_2343, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2345 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2346 = eq(TLHintHandler_1.io.out[0].b.bits.opcode, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2346 : @[Top.scala 53:46]
        node T_2348 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2350 = eq(T_2348, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2350 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Top.scala:53:46)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2351 = or(T_2197, reset) @[Top.scala 53:46]
        node T_2353 = eq(T_2351, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2353 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2354 = or(T_2206, reset) @[Top.scala 53:46]
        node T_2356 = eq(T_2354, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2356 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2358 = eq(TLHintHandler_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2359 = or(T_2358, reset) @[Top.scala 53:46]
        node T_2361 = eq(T_2359, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2361 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2362 = eq(TLHintHandler_1.io.out[0].b.bits.mask, T_2299) @[Top.scala 53:46]
        node T_2363 = or(T_2362, reset) @[Top.scala 53:46]
        node T_2365 = eq(T_2363, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2365 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2366 = eq(TLHintHandler_1.io.out[0].b.bits.opcode, UInt<1>("h01")) @[Top.scala 53:46]
      when T_2366 : @[Top.scala 53:46]
        node T_2368 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2370 = eq(T_2368, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2370 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Top.scala:53:46)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2371 = or(T_2197, reset) @[Top.scala 53:46]
        node T_2373 = eq(T_2371, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2373 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2374 = or(T_2206, reset) @[Top.scala 53:46]
        node T_2376 = eq(T_2374, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2376 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2378 = eq(TLHintHandler_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2379 = or(T_2378, reset) @[Top.scala 53:46]
        node T_2381 = eq(T_2379, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2381 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2382 = not(T_2299) @[Top.scala 53:46]
        node T_2383 = and(TLHintHandler_1.io.out[0].b.bits.mask, T_2382) @[Top.scala 53:46]
        node T_2385 = eq(T_2383, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2386 = or(T_2385, reset) @[Top.scala 53:46]
        node T_2388 = eq(T_2386, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2388 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2389 = eq(TLHintHandler_1.io.out[0].b.bits.opcode, UInt<2>("h02")) @[Top.scala 53:46]
      when T_2389 : @[Top.scala 53:46]
        node T_2391 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2393 = eq(T_2391, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2393 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Top.scala:53:46)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2394 = or(T_2197, reset) @[Top.scala 53:46]
        node T_2396 = eq(T_2394, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2396 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2397 = or(T_2206, reset) @[Top.scala 53:46]
        node T_2399 = eq(T_2397, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2399 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2400 = leq(TLHintHandler_1.io.out[0].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_2401 = or(T_2400, reset) @[Top.scala 53:46]
        node T_2403 = eq(T_2401, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2403 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Top.scala:53:46)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2404 = eq(TLHintHandler_1.io.out[0].b.bits.mask, T_2299) @[Top.scala 53:46]
        node T_2405 = or(T_2404, reset) @[Top.scala 53:46]
        node T_2407 = eq(T_2405, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2407 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2408 = eq(TLHintHandler_1.io.out[0].b.bits.opcode, UInt<2>("h03")) @[Top.scala 53:46]
      when T_2408 : @[Top.scala 53:46]
        node T_2410 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2412 = eq(T_2410, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2412 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Top.scala:53:46)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2413 = or(T_2197, reset) @[Top.scala 53:46]
        node T_2415 = eq(T_2413, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2415 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2416 = or(T_2206, reset) @[Top.scala 53:46]
        node T_2418 = eq(T_2416, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2418 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2419 = leq(TLHintHandler_1.io.out[0].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_2420 = or(T_2419, reset) @[Top.scala 53:46]
        node T_2422 = eq(T_2420, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2422 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Top.scala:53:46)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2423 = eq(TLHintHandler_1.io.out[0].b.bits.mask, T_2299) @[Top.scala 53:46]
        node T_2424 = or(T_2423, reset) @[Top.scala 53:46]
        node T_2426 = eq(T_2424, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2426 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2427 = eq(TLHintHandler_1.io.out[0].b.bits.opcode, UInt<3>("h05")) @[Top.scala 53:46]
      when T_2427 : @[Top.scala 53:46]
        node T_2429 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2431 = eq(T_2429, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2431 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Top.scala:53:46)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2432 = or(T_2197, reset) @[Top.scala 53:46]
        node T_2434 = eq(T_2432, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2434 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2435 = or(T_2206, reset) @[Top.scala 53:46]
        node T_2437 = eq(T_2435, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2437 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2438 = eq(TLHintHandler_1.io.out[0].b.bits.mask, T_2299) @[Top.scala 53:46]
        node T_2439 = or(T_2438, reset) @[Top.scala 53:46]
        node T_2441 = eq(T_2439, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2441 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Top.scala:53:46)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    when TLHintHandler_1.io.out[0].c.valid : @[Top.scala 53:46]
      node T_2442 = leq(TLHintHandler_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_2443 = or(T_2442, reset) @[Top.scala 53:46]
      node T_2445 = eq(T_2443, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2445 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Top.scala:53:46)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2447 = xor(UInt<1>("h00"), TLHintHandler_1.io.out[0].c.bits.source) @[Parameters.scala 37:23]
      node T_2448 = not(T_2447) @[Parameters.scala 37:9]
      node T_2450 = or(T_2448, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_2451 = not(T_2450) @[Parameters.scala 37:7]
      node T_2453 = eq(T_2451, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_2459 : UInt<1>[1] @[Parameters.scala 326:27]
      T_2459 is invalid @[Parameters.scala 326:27]
      T_2459[0] <= T_2453 @[Parameters.scala 326:27]
      node T_2462 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_2463 = dshl(T_2462, TLHintHandler_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_2464 = bits(T_2463, 7, 0) @[package.scala 11:76]
      node T_2465 = not(T_2464) @[package.scala 11:40]
      node T_2466 = shr(T_2465, 3) @[Edges.scala 15:47]
      node T_2467 = and(TLHintHandler_1.io.out[0].c.bits.addr_hi, T_2466) @[Edges.scala 16:16]
      node T_2469 = eq(T_2467, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_2471 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_2472 = dshl(T_2471, TLHintHandler_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_2473 = bits(T_2472, 7, 0) @[package.scala 11:76]
      node T_2474 = not(T_2473) @[package.scala 11:40]
      node T_2475 = and(TLHintHandler_1.io.out[0].c.bits.addr_lo, T_2474) @[Edges.scala 23:16]
      node T_2477 = eq(T_2475, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_2478 = and(T_2469, T_2477) @[Top.scala 53:46]
      node T_2479 = cat(TLHintHandler_1.io.out[0].c.bits.addr_hi, TLHintHandler_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_2481 = xor(T_2479, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_2482 = cvt(T_2481) @[Parameters.scala 89:49]
      node T_2484 = and(T_2482, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_2485 = asSInt(T_2484) @[Parameters.scala 89:52]
      node T_2487 = eq(T_2485, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      node T_2489 = xor(T_2479, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_2490 = cvt(T_2489) @[Parameters.scala 89:49]
      node T_2492 = and(T_2490, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_2493 = asSInt(T_2492) @[Parameters.scala 89:52]
      node T_2495 = eq(T_2493, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_2501 : UInt<1>[2] @[Parameters.scala 227:36]
      T_2501 is invalid @[Parameters.scala 227:36]
      T_2501[0] <= T_2487 @[Parameters.scala 227:36]
      T_2501[1] <= T_2495 @[Parameters.scala 227:36]
      node T_2503 = or(T_2501[0], T_2501[1]) @[Parameters.scala 238:64]
      node T_2504 = eq(TLHintHandler_1.io.out[0].c.bits.opcode, UInt<3>("h04")) @[Top.scala 53:46]
      when T_2504 : @[Top.scala 53:46]
        node T_2505 = or(T_2503, reset) @[Top.scala 53:46]
        node T_2507 = eq(T_2505, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2507 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2508 = or(T_2459[0], reset) @[Top.scala 53:46]
        node T_2510 = eq(T_2508, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2510 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2512 = geq(TLHintHandler_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_2513 = or(T_2512, reset) @[Top.scala 53:46]
        node T_2515 = eq(T_2513, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2515 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2516 = or(T_2478, reset) @[Top.scala 53:46]
        node T_2518 = eq(T_2516, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2518 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2519 = leq(TLHintHandler_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_2520 = or(T_2519, reset) @[Top.scala 53:46]
        node T_2522 = eq(T_2520, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2522 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Top.scala:53:46)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2524 = eq(TLHintHandler_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2525 = or(T_2524, reset) @[Top.scala 53:46]
        node T_2527 = eq(T_2525, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2527 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Top.scala:53:46)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2528 = eq(TLHintHandler_1.io.out[0].c.bits.opcode, UInt<3>("h05")) @[Top.scala 53:46]
      when T_2528 : @[Top.scala 53:46]
        node T_2529 = or(T_2503, reset) @[Top.scala 53:46]
        node T_2531 = eq(T_2529, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2531 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2532 = or(T_2459[0], reset) @[Top.scala 53:46]
        node T_2534 = eq(T_2532, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2534 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2536 = geq(TLHintHandler_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_2537 = or(T_2536, reset) @[Top.scala 53:46]
        node T_2539 = eq(T_2537, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2539 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2540 = or(T_2478, reset) @[Top.scala 53:46]
        node T_2542 = eq(T_2540, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2542 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2543 = leq(TLHintHandler_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_2544 = or(T_2543, reset) @[Top.scala 53:46]
        node T_2546 = eq(T_2544, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2546 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Top.scala:53:46)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2548 = eq(TLHintHandler_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2549 = or(T_2548, reset) @[Top.scala 53:46]
        node T_2551 = eq(T_2549, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2551 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Top.scala:53:46)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2552 = eq(TLHintHandler_1.io.out[0].c.bits.opcode, UInt<3>("h06")) @[Top.scala 53:46]
      when T_2552 : @[Top.scala 53:46]
        node T_2553 = cat(TLHintHandler_1.io.out[0].c.bits.addr_hi, TLHintHandler_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_2555 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2557 = eq(T_2555, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2557 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2558 = or(T_2459[0], reset) @[Top.scala 53:46]
        node T_2560 = eq(T_2558, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2560 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2562 = geq(TLHintHandler_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_2563 = or(T_2562, reset) @[Top.scala 53:46]
        node T_2565 = eq(T_2563, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2565 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2566 = or(T_2478, reset) @[Top.scala 53:46]
        node T_2568 = eq(T_2566, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2568 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2569 = leq(TLHintHandler_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_2570 = or(T_2569, reset) @[Top.scala 53:46]
        node T_2572 = eq(T_2570, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2572 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Top.scala:53:46)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2574 = eq(TLHintHandler_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2575 = or(T_2574, reset) @[Top.scala 53:46]
        node T_2577 = eq(T_2575, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2577 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Top.scala:53:46)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2578 = eq(TLHintHandler_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Top.scala 53:46]
      when T_2578 : @[Top.scala 53:46]
        node T_2579 = cat(TLHintHandler_1.io.out[0].c.bits.addr_hi, TLHintHandler_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_2581 = or(UInt<1>("h00"), reset) @[Top.scala 53:46]
        node T_2583 = eq(T_2581, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2583 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Top.scala:53:46)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2584 = or(T_2459[0], reset) @[Top.scala 53:46]
        node T_2586 = eq(T_2584, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2586 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2588 = geq(TLHintHandler_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_2589 = or(T_2588, reset) @[Top.scala 53:46]
        node T_2591 = eq(T_2589, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2591 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2592 = or(T_2478, reset) @[Top.scala 53:46]
        node T_2594 = eq(T_2592, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2594 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2595 = leq(TLHintHandler_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_2596 = or(T_2595, reset) @[Top.scala 53:46]
        node T_2598 = eq(T_2596, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2598 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Top.scala:53:46)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2600 = eq(TLHintHandler_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2601 = or(T_2600, reset) @[Top.scala 53:46]
        node T_2603 = eq(T_2601, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2603 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Top.scala:53:46)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2604 = eq(TLHintHandler_1.io.out[0].c.bits.opcode, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2604 : @[Top.scala 53:46]
        node T_2605 = or(T_2503, reset) @[Top.scala 53:46]
        node T_2607 = eq(T_2605, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2607 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2608 = or(T_2459[0], reset) @[Top.scala 53:46]
        node T_2610 = eq(T_2608, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2610 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2611 = or(T_2478, reset) @[Top.scala 53:46]
        node T_2613 = eq(T_2611, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2613 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2615 = eq(TLHintHandler_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2616 = or(T_2615, reset) @[Top.scala 53:46]
        node T_2618 = eq(T_2616, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2618 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2619 = eq(TLHintHandler_1.io.out[0].c.bits.opcode, UInt<1>("h01")) @[Top.scala 53:46]
      when T_2619 : @[Top.scala 53:46]
        node T_2620 = or(T_2503, reset) @[Top.scala 53:46]
        node T_2622 = eq(T_2620, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2622 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2623 = or(T_2459[0], reset) @[Top.scala 53:46]
        node T_2625 = eq(T_2623, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2625 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2626 = or(T_2478, reset) @[Top.scala 53:46]
        node T_2628 = eq(T_2626, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2628 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2630 = eq(TLHintHandler_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2631 = or(T_2630, reset) @[Top.scala 53:46]
        node T_2633 = eq(T_2631, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2633 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2634 = eq(TLHintHandler_1.io.out[0].c.bits.opcode, UInt<2>("h02")) @[Top.scala 53:46]
      when T_2634 : @[Top.scala 53:46]
        node T_2635 = or(T_2503, reset) @[Top.scala 53:46]
        node T_2637 = eq(T_2635, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2637 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Top.scala:53:46)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2638 = or(T_2459[0], reset) @[Top.scala 53:46]
        node T_2640 = eq(T_2638, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2640 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2641 = or(T_2478, reset) @[Top.scala 53:46]
        node T_2643 = eq(T_2641, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2643 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2645 = eq(TLHintHandler_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2646 = or(T_2645, reset) @[Top.scala 53:46]
        node T_2648 = eq(T_2646, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2648 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2650 = eq(TLHintHandler_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2651 = or(T_2650, reset) @[Top.scala 53:46]
        node T_2653 = eq(T_2651, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2653 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Top.scala:53:46)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    when TLHintHandler_1.io.out[0].d.valid : @[Top.scala 53:46]
      node T_2654 = leq(TLHintHandler_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_2655 = or(T_2654, reset) @[Top.scala 53:46]
      node T_2657 = eq(T_2655, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2657 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Top.scala:53:46)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2659 = xor(UInt<1>("h00"), TLHintHandler_1.io.out[0].d.bits.source) @[Parameters.scala 37:23]
      node T_2660 = not(T_2659) @[Parameters.scala 37:9]
      node T_2662 = or(T_2660, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_2663 = not(T_2662) @[Parameters.scala 37:7]
      node T_2665 = eq(T_2663, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_2671 : UInt<1>[1] @[Parameters.scala 326:27]
      T_2671 is invalid @[Parameters.scala 326:27]
      T_2671[0] <= T_2665 @[Parameters.scala 326:27]
      node T_2674 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_2675 = dshl(T_2674, TLHintHandler_1.io.out[0].d.bits.size) @[package.scala 11:71]
      node T_2676 = bits(T_2675, 7, 0) @[package.scala 11:76]
      node T_2677 = not(T_2676) @[package.scala 11:40]
      node T_2678 = and(TLHintHandler_1.io.out[0].d.bits.addr_lo, T_2677) @[Edges.scala 23:16]
      node T_2680 = eq(T_2678, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_2682 = eq(UInt<1>("h01"), TLHintHandler_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      node T_2684 = eq(UInt<1>("h00"), TLHintHandler_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      wire T_2690 : UInt<1>[2] @[Parameters.scala 220:31]
      T_2690 is invalid @[Parameters.scala 220:31]
      T_2690[0] <= T_2682 @[Parameters.scala 220:31]
      T_2690[1] <= T_2684 @[Parameters.scala 220:31]
      node T_2692 = or(T_2690[0], T_2690[1]) @[Parameters.scala 240:54]
      node T_2693 = eq(TLHintHandler_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Top.scala 53:46]
      when T_2693 : @[Top.scala 53:46]
        node T_2694 = or(T_2671[0], reset) @[Top.scala 53:46]
        node T_2696 = eq(T_2694, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2696 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2697 = or(T_2680, reset) @[Top.scala 53:46]
        node T_2699 = eq(T_2697, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2699 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2700 = or(T_2692, reset) @[Top.scala 53:46]
        node T_2702 = eq(T_2700, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2702 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Top.scala:53:46)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2704 = geq(TLHintHandler_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_2705 = or(T_2704, reset) @[Top.scala 53:46]
        node T_2707 = eq(T_2705, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2707 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2709 = eq(TLHintHandler_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2710 = or(T_2709, reset) @[Top.scala 53:46]
        node T_2712 = eq(T_2710, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2712 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2714 = eq(TLHintHandler_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2715 = or(T_2714, reset) @[Top.scala 53:46]
        node T_2717 = eq(T_2715, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2717 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Top.scala:53:46)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2718 = eq(TLHintHandler_1.io.out[0].d.bits.opcode, UInt<3>("h04")) @[Top.scala 53:46]
      when T_2718 : @[Top.scala 53:46]
        node T_2719 = or(T_2671[0], reset) @[Top.scala 53:46]
        node T_2721 = eq(T_2719, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2721 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2722 = or(T_2680, reset) @[Top.scala 53:46]
        node T_2724 = eq(T_2722, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2724 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2725 = or(T_2692, reset) @[Top.scala 53:46]
        node T_2727 = eq(T_2725, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2727 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Top.scala:53:46)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2729 = geq(TLHintHandler_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_2730 = or(T_2729, reset) @[Top.scala 53:46]
        node T_2732 = eq(T_2730, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2732 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2733 = leq(TLHintHandler_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_2734 = or(T_2733, reset) @[Top.scala 53:46]
        node T_2736 = eq(T_2734, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2736 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Top.scala:53:46)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2737 = eq(TLHintHandler_1.io.out[0].d.bits.opcode, UInt<3>("h05")) @[Top.scala 53:46]
      when T_2737 : @[Top.scala 53:46]
        node T_2738 = or(T_2671[0], reset) @[Top.scala 53:46]
        node T_2740 = eq(T_2738, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2740 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2741 = or(T_2680, reset) @[Top.scala 53:46]
        node T_2743 = eq(T_2741, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2743 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2744 = or(T_2692, reset) @[Top.scala 53:46]
        node T_2746 = eq(T_2744, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2746 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Top.scala:53:46)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2748 = geq(TLHintHandler_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Top.scala 53:46]
        node T_2749 = or(T_2748, reset) @[Top.scala 53:46]
        node T_2751 = eq(T_2749, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2751 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Top.scala:53:46)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2752 = leq(TLHintHandler_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_2753 = or(T_2752, reset) @[Top.scala 53:46]
        node T_2755 = eq(T_2753, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2755 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Top.scala:53:46)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2756 = eq(TLHintHandler_1.io.out[0].d.bits.opcode, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2756 : @[Top.scala 53:46]
        node T_2757 = or(T_2671[0], reset) @[Top.scala 53:46]
        node T_2759 = eq(T_2757, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2759 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2760 = or(T_2680, reset) @[Top.scala 53:46]
        node T_2762 = eq(T_2760, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2762 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2763 = or(T_2692, reset) @[Top.scala 53:46]
        node T_2765 = eq(T_2763, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2765 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Top.scala:53:46)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2767 = eq(TLHintHandler_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2768 = or(T_2767, reset) @[Top.scala 53:46]
        node T_2770 = eq(T_2768, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2770 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2771 = eq(TLHintHandler_1.io.out[0].d.bits.opcode, UInt<1>("h01")) @[Top.scala 53:46]
      when T_2771 : @[Top.scala 53:46]
        node T_2772 = or(T_2671[0], reset) @[Top.scala 53:46]
        node T_2774 = eq(T_2772, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2774 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2775 = or(T_2680, reset) @[Top.scala 53:46]
        node T_2777 = eq(T_2775, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2777 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2778 = or(T_2692, reset) @[Top.scala 53:46]
        node T_2780 = eq(T_2778, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2780 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Top.scala:53:46)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2782 = eq(TLHintHandler_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2783 = or(T_2782, reset) @[Top.scala 53:46]
        node T_2785 = eq(T_2783, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2785 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2786 = eq(TLHintHandler_1.io.out[0].d.bits.opcode, UInt<2>("h02")) @[Top.scala 53:46]
      when T_2786 : @[Top.scala 53:46]
        node T_2787 = or(T_2671[0], reset) @[Top.scala 53:46]
        node T_2789 = eq(T_2787, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2789 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Top.scala:53:46)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2790 = or(T_2680, reset) @[Top.scala 53:46]
        node T_2792 = eq(T_2790, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2792 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Top.scala:53:46)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2793 = or(T_2692, reset) @[Top.scala 53:46]
        node T_2795 = eq(T_2793, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2795 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Top.scala:53:46)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2797 = eq(TLHintHandler_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2798 = or(T_2797, reset) @[Top.scala 53:46]
        node T_2800 = eq(T_2798, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2800 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Top.scala:53:46)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        node T_2802 = eq(TLHintHandler_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Top.scala 53:46]
        node T_2803 = or(T_2802, reset) @[Top.scala 53:46]
        node T_2805 = eq(T_2803, UInt<1>("h00")) @[Top.scala 53:46]
        when T_2805 : @[Top.scala 53:46]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Top.scala:53:46)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Top.scala 53:46]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
          skip @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    when TLHintHandler_1.io.out[0].e.valid : @[Top.scala 53:46]
      node T_2807 = eq(UInt<1>("h01"), TLHintHandler_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      node T_2809 = eq(UInt<1>("h00"), TLHintHandler_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      wire T_2815 : UInt<1>[2] @[Parameters.scala 220:31]
      T_2815 is invalid @[Parameters.scala 220:31]
      T_2815[0] <= T_2807 @[Parameters.scala 220:31]
      T_2815[1] <= T_2809 @[Parameters.scala 220:31]
      node T_2817 = or(T_2815[0], T_2815[1]) @[Parameters.scala 240:54]
      node T_2818 = or(T_2817, reset) @[Top.scala 53:46]
      node T_2820 = eq(T_2818, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2820 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Top.scala:53:46)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_2822 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_2824 : UInt, clk
    reg T_2826 : UInt, clk
    reg T_2828 : UInt, clk
    reg T_2830 : UInt, clk
    reg T_2832 : UInt, clk
    node T_2834 = neq(T_2822, UInt<1>("h00")) @[Top.scala 53:46]
    node T_2835 = and(TLHintHandler_1.io.out[0].a.valid, T_2834) @[Top.scala 53:46]
    when T_2835 : @[Top.scala 53:46]
      node T_2836 = eq(TLHintHandler_1.io.out[0].a.bits.opcode, T_2824) @[Top.scala 53:46]
      node T_2837 = or(T_2836, reset) @[Top.scala 53:46]
      node T_2839 = eq(T_2837, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2839 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2840 = eq(TLHintHandler_1.io.out[0].a.bits.param, T_2826) @[Top.scala 53:46]
      node T_2841 = or(T_2840, reset) @[Top.scala 53:46]
      node T_2843 = eq(T_2841, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2843 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2844 = eq(TLHintHandler_1.io.out[0].a.bits.size, T_2828) @[Top.scala 53:46]
      node T_2845 = or(T_2844, reset) @[Top.scala 53:46]
      node T_2847 = eq(T_2845, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2847 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2848 = eq(TLHintHandler_1.io.out[0].a.bits.source, T_2830) @[Top.scala 53:46]
      node T_2849 = or(T_2848, reset) @[Top.scala 53:46]
      node T_2851 = eq(T_2849, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2851 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2852 = eq(TLHintHandler_1.io.out[0].a.bits.addr_hi, T_2832) @[Top.scala 53:46]
      node T_2853 = or(T_2852, reset) @[Top.scala 53:46]
      node T_2855 = eq(T_2853, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2855 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    node T_2856 = and(TLHintHandler_1.io.out[0].a.ready, TLHintHandler_1.io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_2856 : @[Top.scala 53:46]
      node T_2858 = sub(T_2822, UInt<1>("h01")) @[Top.scala 53:46]
      node T_2859 = tail(T_2858, 1) @[Top.scala 53:46]
      T_2822 <= T_2859 @[Top.scala 53:46]
      node T_2861 = eq(T_2822, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2861 : @[Top.scala 53:46]
        node T_2862 = bits(TLHintHandler_1.io.out[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_2864 = eq(T_2862, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_2866 = leq(TLHintHandler_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_2868 = bits(TLHintHandler_1.io.out[0].a.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_2869 = dshl(UInt<1>("h01"), T_2868) @[OneHot.scala 46:16]
        node T_2870 = bits(T_2869, 8, 0) @[OneHot.scala 46:41]
        node T_2871 = shr(T_2870, 3) @[Edges.scala 209:50]
        node T_2872 = or(T_2871, T_2866) @[Edges.scala 210:29]
        node T_2874 = mux(T_2864, T_2872, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_2876 = sub(T_2874, UInt<1>("h01")) @[Top.scala 53:46]
        node T_2877 = tail(T_2876, 1) @[Top.scala 53:46]
        T_2822 <= T_2877 @[Top.scala 53:46]
        T_2824 <= TLHintHandler_1.io.out[0].a.bits.opcode @[Top.scala 53:46]
        T_2826 <= TLHintHandler_1.io.out[0].a.bits.param @[Top.scala 53:46]
        T_2828 <= TLHintHandler_1.io.out[0].a.bits.size @[Top.scala 53:46]
        T_2830 <= TLHintHandler_1.io.out[0].a.bits.source @[Top.scala 53:46]
        T_2832 <= TLHintHandler_1.io.out[0].a.bits.addr_hi @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_2879 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_2881 : UInt, clk
    reg T_2883 : UInt, clk
    reg T_2885 : UInt, clk
    reg T_2887 : UInt, clk
    reg T_2889 : UInt, clk
    node T_2891 = neq(T_2879, UInt<1>("h00")) @[Top.scala 53:46]
    node T_2892 = and(TLHintHandler_1.io.out[0].b.valid, T_2891) @[Top.scala 53:46]
    when T_2892 : @[Top.scala 53:46]
      node T_2893 = eq(TLHintHandler_1.io.out[0].b.bits.opcode, T_2881) @[Top.scala 53:46]
      node T_2894 = or(T_2893, reset) @[Top.scala 53:46]
      node T_2896 = eq(T_2894, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2896 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2897 = eq(TLHintHandler_1.io.out[0].b.bits.param, T_2883) @[Top.scala 53:46]
      node T_2898 = or(T_2897, reset) @[Top.scala 53:46]
      node T_2900 = eq(T_2898, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2900 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2901 = eq(TLHintHandler_1.io.out[0].b.bits.size, T_2885) @[Top.scala 53:46]
      node T_2902 = or(T_2901, reset) @[Top.scala 53:46]
      node T_2904 = eq(T_2902, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2904 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2905 = eq(TLHintHandler_1.io.out[0].b.bits.source, T_2887) @[Top.scala 53:46]
      node T_2906 = or(T_2905, reset) @[Top.scala 53:46]
      node T_2908 = eq(T_2906, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2908 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2909 = eq(TLHintHandler_1.io.out[0].b.bits.addr_hi, T_2889) @[Top.scala 53:46]
      node T_2910 = or(T_2909, reset) @[Top.scala 53:46]
      node T_2912 = eq(T_2910, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2912 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    node T_2913 = and(TLHintHandler_1.io.out[0].b.ready, TLHintHandler_1.io.out[0].b.valid) @[Decoupled.scala 21:42]
    when T_2913 : @[Top.scala 53:46]
      node T_2915 = sub(T_2879, UInt<1>("h01")) @[Top.scala 53:46]
      node T_2916 = tail(T_2915, 1) @[Top.scala 53:46]
      T_2879 <= T_2916 @[Top.scala 53:46]
      node T_2918 = eq(T_2879, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2918 : @[Top.scala 53:46]
        node T_2919 = bits(TLHintHandler_1.io.out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_2921 = eq(T_2919, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_2924 = leq(TLHintHandler_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_2926 = bits(TLHintHandler_1.io.out[0].b.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_2927 = dshl(UInt<1>("h01"), T_2926) @[OneHot.scala 46:16]
        node T_2928 = bits(T_2927, 8, 0) @[OneHot.scala 46:41]
        node T_2929 = shr(T_2928, 3) @[Edges.scala 209:50]
        node T_2930 = or(T_2929, T_2924) @[Edges.scala 210:29]
        node T_2932 = mux(UInt<1>("h00"), T_2930, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_2934 = sub(T_2932, UInt<1>("h01")) @[Top.scala 53:46]
        node T_2935 = tail(T_2934, 1) @[Top.scala 53:46]
        T_2879 <= T_2935 @[Top.scala 53:46]
        T_2881 <= TLHintHandler_1.io.out[0].b.bits.opcode @[Top.scala 53:46]
        T_2883 <= TLHintHandler_1.io.out[0].b.bits.param @[Top.scala 53:46]
        T_2885 <= TLHintHandler_1.io.out[0].b.bits.size @[Top.scala 53:46]
        T_2887 <= TLHintHandler_1.io.out[0].b.bits.source @[Top.scala 53:46]
        T_2889 <= TLHintHandler_1.io.out[0].b.bits.addr_hi @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_2937 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_2939 : UInt, clk
    reg T_2941 : UInt, clk
    reg T_2943 : UInt, clk
    reg T_2945 : UInt, clk
    reg T_2947 : UInt, clk
    reg T_2949 : UInt, clk
    node T_2951 = neq(T_2937, UInt<1>("h00")) @[Top.scala 53:46]
    node T_2952 = and(TLHintHandler_1.io.out[0].c.valid, T_2951) @[Top.scala 53:46]
    when T_2952 : @[Top.scala 53:46]
      node T_2953 = eq(TLHintHandler_1.io.out[0].c.bits.opcode, T_2939) @[Top.scala 53:46]
      node T_2954 = or(T_2953, reset) @[Top.scala 53:46]
      node T_2956 = eq(T_2954, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2956 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2957 = eq(TLHintHandler_1.io.out[0].c.bits.param, T_2941) @[Top.scala 53:46]
      node T_2958 = or(T_2957, reset) @[Top.scala 53:46]
      node T_2960 = eq(T_2958, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2960 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2961 = eq(TLHintHandler_1.io.out[0].c.bits.size, T_2943) @[Top.scala 53:46]
      node T_2962 = or(T_2961, reset) @[Top.scala 53:46]
      node T_2964 = eq(T_2962, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2964 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2965 = eq(TLHintHandler_1.io.out[0].c.bits.source, T_2945) @[Top.scala 53:46]
      node T_2966 = or(T_2965, reset) @[Top.scala 53:46]
      node T_2968 = eq(T_2966, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2968 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2969 = eq(TLHintHandler_1.io.out[0].c.bits.addr_hi, T_2947) @[Top.scala 53:46]
      node T_2970 = or(T_2969, reset) @[Top.scala 53:46]
      node T_2972 = eq(T_2970, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2972 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_2973 = eq(TLHintHandler_1.io.out[0].c.bits.addr_lo, T_2949) @[Top.scala 53:46]
      node T_2974 = or(T_2973, reset) @[Top.scala 53:46]
      node T_2976 = eq(T_2974, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2976 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    node T_2977 = and(TLHintHandler_1.io.out[0].c.ready, TLHintHandler_1.io.out[0].c.valid) @[Decoupled.scala 21:42]
    when T_2977 : @[Top.scala 53:46]
      node T_2979 = sub(T_2937, UInt<1>("h01")) @[Top.scala 53:46]
      node T_2980 = tail(T_2979, 1) @[Top.scala 53:46]
      T_2937 <= T_2980 @[Top.scala 53:46]
      node T_2982 = eq(T_2937, UInt<1>("h00")) @[Top.scala 53:46]
      when T_2982 : @[Top.scala 53:46]
        node T_2983 = bits(TLHintHandler_1.io.out[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_2986 = leq(TLHintHandler_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_2988 = bits(TLHintHandler_1.io.out[0].c.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_2989 = dshl(UInt<1>("h01"), T_2988) @[OneHot.scala 46:16]
        node T_2990 = bits(T_2989, 8, 0) @[OneHot.scala 46:41]
        node T_2991 = shr(T_2990, 3) @[Edges.scala 209:50]
        node T_2992 = or(T_2991, T_2986) @[Edges.scala 210:29]
        node T_2994 = mux(UInt<1>("h00"), T_2992, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_2996 = sub(T_2994, UInt<1>("h01")) @[Top.scala 53:46]
        node T_2997 = tail(T_2996, 1) @[Top.scala 53:46]
        T_2937 <= T_2997 @[Top.scala 53:46]
        T_2939 <= TLHintHandler_1.io.out[0].c.bits.opcode @[Top.scala 53:46]
        T_2941 <= TLHintHandler_1.io.out[0].c.bits.param @[Top.scala 53:46]
        T_2943 <= TLHintHandler_1.io.out[0].c.bits.size @[Top.scala 53:46]
        T_2945 <= TLHintHandler_1.io.out[0].c.bits.source @[Top.scala 53:46]
        T_2947 <= TLHintHandler_1.io.out[0].c.bits.addr_hi @[Top.scala 53:46]
        T_2949 <= TLHintHandler_1.io.out[0].c.bits.addr_lo @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_2999 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_3001 : UInt, clk
    reg T_3003 : UInt, clk
    reg T_3005 : UInt, clk
    reg T_3007 : UInt, clk
    reg T_3009 : UInt, clk
    reg T_3011 : UInt, clk
    node T_3013 = neq(T_2999, UInt<1>("h00")) @[Top.scala 53:46]
    node T_3014 = and(TLHintHandler_1.io.out[0].d.valid, T_3013) @[Top.scala 53:46]
    when T_3014 : @[Top.scala 53:46]
      node T_3015 = eq(TLHintHandler_1.io.out[0].d.bits.opcode, T_3001) @[Top.scala 53:46]
      node T_3016 = or(T_3015, reset) @[Top.scala 53:46]
      node T_3018 = eq(T_3016, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3018 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3019 = eq(TLHintHandler_1.io.out[0].d.bits.param, T_3003) @[Top.scala 53:46]
      node T_3020 = or(T_3019, reset) @[Top.scala 53:46]
      node T_3022 = eq(T_3020, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3022 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3023 = eq(TLHintHandler_1.io.out[0].d.bits.size, T_3005) @[Top.scala 53:46]
      node T_3024 = or(T_3023, reset) @[Top.scala 53:46]
      node T_3026 = eq(T_3024, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3026 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3027 = eq(TLHintHandler_1.io.out[0].d.bits.source, T_3007) @[Top.scala 53:46]
      node T_3028 = or(T_3027, reset) @[Top.scala 53:46]
      node T_3030 = eq(T_3028, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3030 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3031 = eq(TLHintHandler_1.io.out[0].d.bits.sink, T_3009) @[Top.scala 53:46]
      node T_3032 = or(T_3031, reset) @[Top.scala 53:46]
      node T_3034 = eq(T_3032, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3034 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3035 = eq(TLHintHandler_1.io.out[0].d.bits.addr_lo, T_3011) @[Top.scala 53:46]
      node T_3036 = or(T_3035, reset) @[Top.scala 53:46]
      node T_3038 = eq(T_3036, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3038 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Top.scala:53:46)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    node T_3039 = and(TLHintHandler_1.io.out[0].d.ready, TLHintHandler_1.io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_3039 : @[Top.scala 53:46]
      node T_3041 = sub(T_2999, UInt<1>("h01")) @[Top.scala 53:46]
      node T_3042 = tail(T_3041, 1) @[Top.scala 53:46]
      T_2999 <= T_3042 @[Top.scala 53:46]
      node T_3044 = eq(T_2999, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3044 : @[Top.scala 53:46]
        node T_3045 = bits(TLHintHandler_1.io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_3047 = leq(TLHintHandler_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_3049 = bits(TLHintHandler_1.io.out[0].d.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_3050 = dshl(UInt<1>("h01"), T_3049) @[OneHot.scala 46:16]
        node T_3051 = bits(T_3050, 8, 0) @[OneHot.scala 46:41]
        node T_3052 = shr(T_3051, 3) @[Edges.scala 209:50]
        node T_3053 = or(T_3052, T_3047) @[Edges.scala 210:29]
        node T_3055 = mux(T_3045, T_3053, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_3057 = sub(T_3055, UInt<1>("h01")) @[Top.scala 53:46]
        node T_3058 = tail(T_3057, 1) @[Top.scala 53:46]
        T_2999 <= T_3058 @[Top.scala 53:46]
        T_3001 <= TLHintHandler_1.io.out[0].d.bits.opcode @[Top.scala 53:46]
        T_3003 <= TLHintHandler_1.io.out[0].d.bits.param @[Top.scala 53:46]
        T_3005 <= TLHintHandler_1.io.out[0].d.bits.size @[Top.scala 53:46]
        T_3007 <= TLHintHandler_1.io.out[0].d.bits.source @[Top.scala 53:46]
        T_3009 <= TLHintHandler_1.io.out[0].d.bits.sink @[Top.scala 53:46]
        T_3011 <= TLHintHandler_1.io.out[0].d.bits.addr_lo @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_3060 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3060 <= TLHintHandler_1.io.out[0].a.valid
    reg T_3062 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3062 <= TLHintHandler_1.io.out[0].a.ready
    reg T_3063 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}, clk
    T_3063 <- TLHintHandler_1.io.out[0].a.bits
    node T_3071 = cat(TLHintHandler_1.io.out[0].a.bits.addr_hi, TLHintHandler_1.io.out[0].a.bits.mask) @[Top.scala 53:46]
    node T_3072 = cat(T_3071, TLHintHandler_1.io.out[0].a.bits.data) @[Top.scala 53:46]
    node T_3073 = cat(TLHintHandler_1.io.out[0].a.bits.size, TLHintHandler_1.io.out[0].a.bits.source) @[Top.scala 53:46]
    node T_3074 = cat(TLHintHandler_1.io.out[0].a.bits.opcode, TLHintHandler_1.io.out[0].a.bits.param) @[Top.scala 53:46]
    node T_3075 = cat(T_3074, T_3073) @[Top.scala 53:46]
    node T_3076 = cat(T_3075, T_3072) @[Top.scala 53:46]
    node T_3077 = cat(T_3063.addr_hi, T_3063.mask) @[Top.scala 53:46]
    node T_3078 = cat(T_3077, T_3063.data) @[Top.scala 53:46]
    node T_3079 = cat(T_3063.size, T_3063.source) @[Top.scala 53:46]
    node T_3080 = cat(T_3063.opcode, T_3063.param) @[Top.scala 53:46]
    node T_3081 = cat(T_3080, T_3079) @[Top.scala 53:46]
    node T_3082 = cat(T_3081, T_3078) @[Top.scala 53:46]
    node T_3083 = eq(T_3076, T_3082) @[Top.scala 53:46]
    node T_3085 = eq(T_3062, UInt<1>("h00")) @[Top.scala 53:46]
    node T_3086 = and(T_3060, T_3085) @[Top.scala 53:46]
    when T_3086 : @[Top.scala 53:46]
      node T_3087 = or(TLHintHandler_1.io.out[0].a.valid, reset) @[Top.scala 53:46]
      node T_3089 = eq(T_3087, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3089 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:46)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3090 = or(T_3083, reset) @[Top.scala 53:46]
      node T_3092 = eq(T_3090, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3092 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:46)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_3094 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3094 <= TLHintHandler_1.io.out[0].b.valid
    reg T_3096 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3096 <= TLHintHandler_1.io.out[0].b.ready
    reg T_3097 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}, clk
    T_3097 <- TLHintHandler_1.io.out[0].b.bits
    node T_3105 = cat(TLHintHandler_1.io.out[0].b.bits.addr_hi, TLHintHandler_1.io.out[0].b.bits.mask) @[Top.scala 53:46]
    node T_3106 = cat(T_3105, TLHintHandler_1.io.out[0].b.bits.data) @[Top.scala 53:46]
    node T_3107 = cat(TLHintHandler_1.io.out[0].b.bits.size, TLHintHandler_1.io.out[0].b.bits.source) @[Top.scala 53:46]
    node T_3108 = cat(TLHintHandler_1.io.out[0].b.bits.opcode, TLHintHandler_1.io.out[0].b.bits.param) @[Top.scala 53:46]
    node T_3109 = cat(T_3108, T_3107) @[Top.scala 53:46]
    node T_3110 = cat(T_3109, T_3106) @[Top.scala 53:46]
    node T_3111 = cat(T_3097.addr_hi, T_3097.mask) @[Top.scala 53:46]
    node T_3112 = cat(T_3111, T_3097.data) @[Top.scala 53:46]
    node T_3113 = cat(T_3097.size, T_3097.source) @[Top.scala 53:46]
    node T_3114 = cat(T_3097.opcode, T_3097.param) @[Top.scala 53:46]
    node T_3115 = cat(T_3114, T_3113) @[Top.scala 53:46]
    node T_3116 = cat(T_3115, T_3112) @[Top.scala 53:46]
    node T_3117 = eq(T_3110, T_3116) @[Top.scala 53:46]
    node T_3119 = eq(T_3096, UInt<1>("h00")) @[Top.scala 53:46]
    node T_3120 = and(T_3094, T_3119) @[Top.scala 53:46]
    when T_3120 : @[Top.scala 53:46]
      node T_3121 = or(TLHintHandler_1.io.out[0].b.valid, reset) @[Top.scala 53:46]
      node T_3123 = eq(T_3121, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3123 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:46)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3124 = or(T_3117, reset) @[Top.scala 53:46]
      node T_3126 = eq(T_3124, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3126 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:46)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_3128 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3128 <= TLHintHandler_1.io.out[0].c.valid
    reg T_3130 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3130 <= TLHintHandler_1.io.out[0].c.ready
    reg T_3131 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}, clk
    T_3131 <- TLHintHandler_1.io.out[0].c.bits
    node T_3140 = cat(TLHintHandler_1.io.out[0].c.bits.data, TLHintHandler_1.io.out[0].c.bits.error) @[Top.scala 53:46]
    node T_3141 = cat(TLHintHandler_1.io.out[0].c.bits.addr_hi, TLHintHandler_1.io.out[0].c.bits.addr_lo) @[Top.scala 53:46]
    node T_3142 = cat(T_3141, T_3140) @[Top.scala 53:46]
    node T_3143 = cat(TLHintHandler_1.io.out[0].c.bits.size, TLHintHandler_1.io.out[0].c.bits.source) @[Top.scala 53:46]
    node T_3144 = cat(TLHintHandler_1.io.out[0].c.bits.opcode, TLHintHandler_1.io.out[0].c.bits.param) @[Top.scala 53:46]
    node T_3145 = cat(T_3144, T_3143) @[Top.scala 53:46]
    node T_3146 = cat(T_3145, T_3142) @[Top.scala 53:46]
    node T_3147 = cat(T_3131.data, T_3131.error) @[Top.scala 53:46]
    node T_3148 = cat(T_3131.addr_hi, T_3131.addr_lo) @[Top.scala 53:46]
    node T_3149 = cat(T_3148, T_3147) @[Top.scala 53:46]
    node T_3150 = cat(T_3131.size, T_3131.source) @[Top.scala 53:46]
    node T_3151 = cat(T_3131.opcode, T_3131.param) @[Top.scala 53:46]
    node T_3152 = cat(T_3151, T_3150) @[Top.scala 53:46]
    node T_3153 = cat(T_3152, T_3149) @[Top.scala 53:46]
    node T_3154 = eq(T_3146, T_3153) @[Top.scala 53:46]
    node T_3156 = eq(T_3130, UInt<1>("h00")) @[Top.scala 53:46]
    node T_3157 = and(T_3128, T_3156) @[Top.scala 53:46]
    when T_3157 : @[Top.scala 53:46]
      node T_3158 = or(TLHintHandler_1.io.out[0].c.valid, reset) @[Top.scala 53:46]
      node T_3160 = eq(T_3158, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3160 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:46)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3161 = or(T_3154, reset) @[Top.scala 53:46]
      node T_3163 = eq(T_3161, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3163 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:46)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_3165 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3165 <= TLHintHandler_1.io.out[0].d.valid
    reg T_3167 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3167 <= TLHintHandler_1.io.out[0].d.ready
    reg T_3168 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}, clk
    T_3168 <- TLHintHandler_1.io.out[0].d.bits
    node T_3177 = cat(TLHintHandler_1.io.out[0].d.bits.data, TLHintHandler_1.io.out[0].d.bits.error) @[Top.scala 53:46]
    node T_3178 = cat(TLHintHandler_1.io.out[0].d.bits.sink, TLHintHandler_1.io.out[0].d.bits.addr_lo) @[Top.scala 53:46]
    node T_3179 = cat(T_3178, T_3177) @[Top.scala 53:46]
    node T_3180 = cat(TLHintHandler_1.io.out[0].d.bits.size, TLHintHandler_1.io.out[0].d.bits.source) @[Top.scala 53:46]
    node T_3181 = cat(TLHintHandler_1.io.out[0].d.bits.opcode, TLHintHandler_1.io.out[0].d.bits.param) @[Top.scala 53:46]
    node T_3182 = cat(T_3181, T_3180) @[Top.scala 53:46]
    node T_3183 = cat(T_3182, T_3179) @[Top.scala 53:46]
    node T_3184 = cat(T_3168.data, T_3168.error) @[Top.scala 53:46]
    node T_3185 = cat(T_3168.sink, T_3168.addr_lo) @[Top.scala 53:46]
    node T_3186 = cat(T_3185, T_3184) @[Top.scala 53:46]
    node T_3187 = cat(T_3168.size, T_3168.source) @[Top.scala 53:46]
    node T_3188 = cat(T_3168.opcode, T_3168.param) @[Top.scala 53:46]
    node T_3189 = cat(T_3188, T_3187) @[Top.scala 53:46]
    node T_3190 = cat(T_3189, T_3186) @[Top.scala 53:46]
    node T_3191 = eq(T_3183, T_3190) @[Top.scala 53:46]
    node T_3193 = eq(T_3167, UInt<1>("h00")) @[Top.scala 53:46]
    node T_3194 = and(T_3165, T_3193) @[Top.scala 53:46]
    when T_3194 : @[Top.scala 53:46]
      node T_3195 = or(TLHintHandler_1.io.out[0].d.valid, reset) @[Top.scala 53:46]
      node T_3197 = eq(T_3195, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3197 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:46)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3198 = or(T_3191, reset) @[Top.scala 53:46]
      node T_3200 = eq(T_3198, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3200 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:46)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    reg T_3202 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3202 <= TLHintHandler_1.io.out[0].e.valid
    reg T_3204 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_3204 <= TLHintHandler_1.io.out[0].e.ready
    reg T_3205 : {sink : UInt<1>}, clk
    T_3205 <- TLHintHandler_1.io.out[0].e.bits
    node T_3207 = eq(TLHintHandler_1.io.out[0].e.bits.sink, T_3205.sink) @[Top.scala 53:46]
    node T_3209 = eq(T_3204, UInt<1>("h00")) @[Top.scala 53:46]
    node T_3210 = and(T_3202, T_3209) @[Top.scala 53:46]
    when T_3210 : @[Top.scala 53:46]
      node T_3211 = or(TLHintHandler_1.io.out[0].e.valid, reset) @[Top.scala 53:46]
      node T_3213 = eq(T_3211, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3213 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:46)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      node T_3214 = or(T_3207, reset) @[Top.scala 53:46]
      node T_3216 = eq(T_3214, UInt<1>("h00")) @[Top.scala 53:46]
      when T_3216 : @[Top.scala 53:46]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:46)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:46]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:46]
        skip @[Top.scala 53:46]
      skip @[Top.scala 53:46]
    TLWidthWidget_2.io.in[0] <- TLHintHandler_1.io.out[0] @[Top.scala 53:46]
    when TLWidthWidget_2.io.out[0].a.valid : @[Top.scala 53:32]
      node T_3217 = leq(TLWidthWidget_2.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_3218 = or(T_3217, reset) @[Top.scala 53:32]
      node T_3220 = eq(T_3218, UInt<1>("h00")) @[Top.scala 53:32]
      when T_3220 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Top.scala:53:32)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3222 = xor(UInt<1>("h00"), TLWidthWidget_2.io.out[0].a.bits.source) @[Parameters.scala 37:23]
      node T_3223 = not(T_3222) @[Parameters.scala 37:9]
      node T_3225 = or(T_3223, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_3226 = not(T_3225) @[Parameters.scala 37:7]
      node T_3228 = eq(T_3226, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_3234 : UInt<1>[1] @[Parameters.scala 326:27]
      T_3234 is invalid @[Parameters.scala 326:27]
      T_3234[0] <= T_3228 @[Parameters.scala 326:27]
      node T_3237 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_3238 = dshl(T_3237, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_3239 = bits(T_3238, 7, 0) @[package.scala 11:76]
      node T_3240 = not(T_3239) @[package.scala 11:40]
      node T_3241 = shr(T_3240, 2) @[Edges.scala 15:47]
      node T_3242 = and(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_3241) @[Edges.scala 16:16]
      node T_3244 = eq(T_3242, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_3246 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_3247 = dshl(T_3246, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_3248 = bits(T_3247, 1, 0) @[package.scala 11:76]
      node T_3249 = not(T_3248) @[package.scala 11:40]
      node T_3250 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_3251 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_3253 = neq(T_3251, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_3255 = eq(T_3253, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_3256 = or(T_3250, T_3251) @[Edges.scala 63:32]
      node T_3257 = bits(T_3256, 0, 0) @[Edges.scala 58:14]
      node T_3258 = not(T_3257) @[Edges.scala 58:9]
      node T_3259 = cat(T_3255, T_3258) @[Cat.scala 20:58]
      node T_3260 = not(T_3249) @[Edges.scala 66:39]
      node T_3261 = and(T_3259, T_3260) @[Edges.scala 66:37]
      node T_3263 = bits(TLWidthWidget_2.io.out[0].a.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_3264 = dshl(UInt<1>("h01"), T_3263) @[OneHot.scala 46:16]
      node T_3265 = bits(T_3264, 1, 0) @[OneHot.scala 46:41]
      node T_3267 = geq(TLWidthWidget_2.io.out[0].a.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_3269 = bits(T_3265, 1, 1) @[Edges.scala 36:26]
      node T_3270 = bits(T_3261, 1, 1) @[Edges.scala 37:26]
      node T_3272 = eq(T_3270, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_3273 = and(UInt<1>("h01"), T_3272) @[Edges.scala 41:27]
      node T_3274 = and(T_3269, T_3273) @[Edges.scala 42:38]
      node T_3275 = or(T_3267, T_3274) @[Edges.scala 42:29]
      node T_3276 = and(UInt<1>("h01"), T_3270) @[Edges.scala 41:27]
      node T_3277 = and(T_3269, T_3276) @[Edges.scala 42:38]
      node T_3278 = or(T_3267, T_3277) @[Edges.scala 42:29]
      node T_3279 = bits(T_3265, 0, 0) @[Edges.scala 36:26]
      node T_3280 = bits(T_3261, 0, 0) @[Edges.scala 37:26]
      node T_3282 = eq(T_3280, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_3283 = and(T_3273, T_3282) @[Edges.scala 41:27]
      node T_3284 = and(T_3279, T_3283) @[Edges.scala 42:38]
      node T_3285 = or(T_3275, T_3284) @[Edges.scala 42:29]
      node T_3286 = and(T_3273, T_3280) @[Edges.scala 41:27]
      node T_3287 = and(T_3279, T_3286) @[Edges.scala 42:38]
      node T_3288 = or(T_3275, T_3287) @[Edges.scala 42:29]
      node T_3289 = and(T_3276, T_3282) @[Edges.scala 41:27]
      node T_3290 = and(T_3279, T_3289) @[Edges.scala 42:38]
      node T_3291 = or(T_3278, T_3290) @[Edges.scala 42:29]
      node T_3292 = and(T_3276, T_3280) @[Edges.scala 41:27]
      node T_3293 = and(T_3279, T_3292) @[Edges.scala 42:38]
      node T_3294 = or(T_3278, T_3293) @[Edges.scala 42:29]
      node T_3295 = cat(T_3288, T_3285) @[Cat.scala 20:58]
      node T_3296 = cat(T_3294, T_3291) @[Cat.scala 20:58]
      node T_3297 = cat(T_3296, T_3295) @[Cat.scala 20:58]
      node T_3298 = eq(TLWidthWidget_2.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Top.scala 53:32]
      when T_3298 : @[Top.scala 53:32]
        node T_3300 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_3301 = dshl(T_3300, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_3302 = bits(T_3301, 1, 0) @[package.scala 11:76]
        node T_3303 = not(T_3302) @[package.scala 11:40]
        node T_3304 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_3305 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_3307 = neq(T_3305, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_3309 = eq(T_3307, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_3310 = or(T_3304, T_3305) @[Edges.scala 63:32]
        node T_3311 = bits(T_3310, 0, 0) @[Edges.scala 58:14]
        node T_3312 = not(T_3311) @[Edges.scala 58:9]
        node T_3313 = cat(T_3309, T_3312) @[Cat.scala 20:58]
        node T_3314 = not(T_3303) @[Edges.scala 66:39]
        node T_3315 = and(T_3313, T_3314) @[Edges.scala 66:37]
        node T_3316 = cat(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_3315) @[Cat.scala 20:58]
        node T_3318 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3320 = eq(T_3318, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3320 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3321 = or(T_3234[0], reset) @[Top.scala 53:32]
        node T_3323 = eq(T_3321, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3323 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3325 = geq(TLWidthWidget_2.io.out[0].a.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_3326 = or(T_3325, reset) @[Top.scala 53:32]
        node T_3328 = eq(T_3326, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3328 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3329 = or(T_3244, reset) @[Top.scala 53:32]
        node T_3331 = eq(T_3329, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3331 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3332 = leq(TLWidthWidget_2.io.out[0].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_3333 = or(T_3332, reset) @[Top.scala 53:32]
        node T_3335 = eq(T_3333, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3335 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Top.scala:53:32)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3336 = not(TLWidthWidget_2.io.out[0].a.bits.mask) @[Top.scala 53:32]
        node T_3338 = eq(T_3336, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3339 = or(T_3338, reset) @[Top.scala 53:32]
        node T_3341 = eq(T_3339, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3341 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3342 = eq(TLWidthWidget_2.io.out[0].a.bits.opcode, UInt<3>("h04")) @[Top.scala 53:32]
      when T_3342 : @[Top.scala 53:32]
        node T_3344 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_3345 = dshl(T_3344, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_3346 = bits(T_3345, 1, 0) @[package.scala 11:76]
        node T_3347 = not(T_3346) @[package.scala 11:40]
        node T_3348 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_3349 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_3351 = neq(T_3349, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_3353 = eq(T_3351, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_3354 = or(T_3348, T_3349) @[Edges.scala 63:32]
        node T_3355 = bits(T_3354, 0, 0) @[Edges.scala 58:14]
        node T_3356 = not(T_3355) @[Edges.scala 58:9]
        node T_3357 = cat(T_3353, T_3356) @[Cat.scala 20:58]
        node T_3358 = not(T_3347) @[Edges.scala 66:39]
        node T_3359 = and(T_3357, T_3358) @[Edges.scala 66:37]
        node T_3360 = cat(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_3359) @[Cat.scala 20:58]
        node T_3362 = leq(UInt<1>("h00"), TLWidthWidget_2.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_3364 = leq(TLWidthWidget_2.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_3365 = and(T_3362, T_3364) @[Parameters.scala 61:37]
        node T_3366 = or(T_3365, reset) @[Top.scala 53:32]
        node T_3368 = eq(T_3366, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3368 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3369 = or(T_3234[0], reset) @[Top.scala 53:32]
        node T_3371 = eq(T_3369, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3371 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3372 = or(T_3244, reset) @[Top.scala 53:32]
        node T_3374 = eq(T_3372, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3374 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3376 = eq(TLWidthWidget_2.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3377 = or(T_3376, reset) @[Top.scala 53:32]
        node T_3379 = eq(T_3377, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3379 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3380 = eq(TLWidthWidget_2.io.out[0].a.bits.mask, T_3297) @[Top.scala 53:32]
        node T_3381 = or(T_3380, reset) @[Top.scala 53:32]
        node T_3383 = eq(T_3381, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3383 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3384 = eq(TLWidthWidget_2.io.out[0].a.bits.opcode, UInt<1>("h00")) @[Top.scala 53:32]
      when T_3384 : @[Top.scala 53:32]
        node T_3386 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_3387 = dshl(T_3386, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_3388 = bits(T_3387, 1, 0) @[package.scala 11:76]
        node T_3389 = not(T_3388) @[package.scala 11:40]
        node T_3390 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_3391 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_3393 = neq(T_3391, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_3395 = eq(T_3393, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_3396 = or(T_3390, T_3391) @[Edges.scala 63:32]
        node T_3397 = bits(T_3396, 0, 0) @[Edges.scala 58:14]
        node T_3398 = not(T_3397) @[Edges.scala 58:9]
        node T_3399 = cat(T_3395, T_3398) @[Cat.scala 20:58]
        node T_3400 = not(T_3389) @[Edges.scala 66:39]
        node T_3401 = and(T_3399, T_3400) @[Edges.scala 66:37]
        node T_3402 = cat(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_3401) @[Cat.scala 20:58]
        node T_3404 = xor(T_3402, UInt<13>("h01000")) @[Parameters.scala 89:31]
        node T_3405 = cvt(T_3404) @[Parameters.scala 89:49]
        node T_3407 = and(T_3405, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
        node T_3408 = asSInt(T_3407) @[Parameters.scala 89:52]
        node T_3410 = eq(T_3408, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        node T_3412 = xor(T_3402, UInt<31>("h044000000")) @[Parameters.scala 89:31]
        node T_3413 = cvt(T_3412) @[Parameters.scala 89:49]
        node T_3415 = and(T_3413, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
        node T_3416 = asSInt(T_3415) @[Parameters.scala 89:52]
        node T_3418 = eq(T_3416, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        wire T_3424 : UInt<1>[2] @[Parameters.scala 227:36]
        T_3424 is invalid @[Parameters.scala 227:36]
        T_3424[0] <= T_3410 @[Parameters.scala 227:36]
        T_3424[1] <= T_3418 @[Parameters.scala 227:36]
        node T_3428 = leq(UInt<1>("h00"), TLWidthWidget_2.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_3430 = leq(TLWidthWidget_2.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_3431 = and(T_3428, T_3430) @[Parameters.scala 61:37]
        node T_3433 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
        node T_3434 = mux(T_3424[0], T_3433, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_3436 = shl(T_3431, 0) @[Mux.scala 18:72]
        node T_3437 = mux(T_3424[1], T_3436, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_3439 = or(T_3434, T_3437) @[Mux.scala 18:72]
        wire T_3440 : UInt<1>
        T_3440 is invalid
        T_3440 <= T_3439 @[Mux.scala 18:72]
        node T_3441 = or(T_3440, reset) @[Top.scala 53:32]
        node T_3443 = eq(T_3441, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3443 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3444 = or(T_3234[0], reset) @[Top.scala 53:32]
        node T_3446 = eq(T_3444, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3446 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3447 = or(T_3244, reset) @[Top.scala 53:32]
        node T_3449 = eq(T_3447, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3449 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3451 = eq(TLWidthWidget_2.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3452 = or(T_3451, reset) @[Top.scala 53:32]
        node T_3454 = eq(T_3452, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3454 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3455 = eq(TLWidthWidget_2.io.out[0].a.bits.mask, T_3297) @[Top.scala 53:32]
        node T_3456 = or(T_3455, reset) @[Top.scala 53:32]
        node T_3458 = eq(T_3456, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3458 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3459 = eq(TLWidthWidget_2.io.out[0].a.bits.opcode, UInt<1>("h01")) @[Top.scala 53:32]
      when T_3459 : @[Top.scala 53:32]
        node T_3461 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_3462 = dshl(T_3461, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_3463 = bits(T_3462, 1, 0) @[package.scala 11:76]
        node T_3464 = not(T_3463) @[package.scala 11:40]
        node T_3465 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_3466 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_3468 = neq(T_3466, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_3470 = eq(T_3468, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_3471 = or(T_3465, T_3466) @[Edges.scala 63:32]
        node T_3472 = bits(T_3471, 0, 0) @[Edges.scala 58:14]
        node T_3473 = not(T_3472) @[Edges.scala 58:9]
        node T_3474 = cat(T_3470, T_3473) @[Cat.scala 20:58]
        node T_3475 = not(T_3464) @[Edges.scala 66:39]
        node T_3476 = and(T_3474, T_3475) @[Edges.scala 66:37]
        node T_3477 = cat(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_3476) @[Cat.scala 20:58]
        node T_3479 = xor(T_3477, UInt<13>("h01000")) @[Parameters.scala 89:31]
        node T_3480 = cvt(T_3479) @[Parameters.scala 89:49]
        node T_3482 = and(T_3480, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
        node T_3483 = asSInt(T_3482) @[Parameters.scala 89:52]
        node T_3485 = eq(T_3483, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        node T_3487 = xor(T_3477, UInt<31>("h044000000")) @[Parameters.scala 89:31]
        node T_3488 = cvt(T_3487) @[Parameters.scala 89:49]
        node T_3490 = and(T_3488, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
        node T_3491 = asSInt(T_3490) @[Parameters.scala 89:52]
        node T_3493 = eq(T_3491, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        wire T_3499 : UInt<1>[2] @[Parameters.scala 227:36]
        T_3499 is invalid @[Parameters.scala 227:36]
        T_3499[0] <= T_3485 @[Parameters.scala 227:36]
        T_3499[1] <= T_3493 @[Parameters.scala 227:36]
        node T_3503 = leq(UInt<1>("h00"), TLWidthWidget_2.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_3505 = leq(TLWidthWidget_2.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_3506 = and(T_3503, T_3505) @[Parameters.scala 61:37]
        node T_3508 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
        node T_3509 = mux(T_3499[0], T_3508, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_3511 = shl(T_3506, 0) @[Mux.scala 18:72]
        node T_3512 = mux(T_3499[1], T_3511, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_3514 = or(T_3509, T_3512) @[Mux.scala 18:72]
        wire T_3515 : UInt<1>
        T_3515 is invalid
        T_3515 <= T_3514 @[Mux.scala 18:72]
        node T_3516 = or(T_3515, reset) @[Top.scala 53:32]
        node T_3518 = eq(T_3516, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3518 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3519 = or(T_3234[0], reset) @[Top.scala 53:32]
        node T_3521 = eq(T_3519, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3521 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3522 = or(T_3244, reset) @[Top.scala 53:32]
        node T_3524 = eq(T_3522, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3524 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3526 = eq(TLWidthWidget_2.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3527 = or(T_3526, reset) @[Top.scala 53:32]
        node T_3529 = eq(T_3527, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3529 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3530 = not(T_3297) @[Top.scala 53:32]
        node T_3531 = and(TLWidthWidget_2.io.out[0].a.bits.mask, T_3530) @[Top.scala 53:32]
        node T_3533 = eq(T_3531, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3534 = or(T_3533, reset) @[Top.scala 53:32]
        node T_3536 = eq(T_3534, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3536 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3537 = eq(TLWidthWidget_2.io.out[0].a.bits.opcode, UInt<2>("h02")) @[Top.scala 53:32]
      when T_3537 : @[Top.scala 53:32]
        node T_3539 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_3540 = dshl(T_3539, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_3541 = bits(T_3540, 1, 0) @[package.scala 11:76]
        node T_3542 = not(T_3541) @[package.scala 11:40]
        node T_3543 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_3544 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_3546 = neq(T_3544, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_3548 = eq(T_3546, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_3549 = or(T_3543, T_3544) @[Edges.scala 63:32]
        node T_3550 = bits(T_3549, 0, 0) @[Edges.scala 58:14]
        node T_3551 = not(T_3550) @[Edges.scala 58:9]
        node T_3552 = cat(T_3548, T_3551) @[Cat.scala 20:58]
        node T_3553 = not(T_3542) @[Edges.scala 66:39]
        node T_3554 = and(T_3552, T_3553) @[Edges.scala 66:37]
        node T_3555 = cat(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_3554) @[Cat.scala 20:58]
        node T_3557 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3559 = eq(T_3557, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3559 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3560 = or(T_3234[0], reset) @[Top.scala 53:32]
        node T_3562 = eq(T_3560, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3562 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3563 = or(T_3244, reset) @[Top.scala 53:32]
        node T_3565 = eq(T_3563, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3565 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3566 = leq(TLWidthWidget_2.io.out[0].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_3567 = or(T_3566, reset) @[Top.scala 53:32]
        node T_3569 = eq(T_3567, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3569 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Top.scala:53:32)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3570 = eq(TLWidthWidget_2.io.out[0].a.bits.mask, T_3297) @[Top.scala 53:32]
        node T_3571 = or(T_3570, reset) @[Top.scala 53:32]
        node T_3573 = eq(T_3571, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3573 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3574 = eq(TLWidthWidget_2.io.out[0].a.bits.opcode, UInt<2>("h03")) @[Top.scala 53:32]
      when T_3574 : @[Top.scala 53:32]
        node T_3576 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_3577 = dshl(T_3576, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_3578 = bits(T_3577, 1, 0) @[package.scala 11:76]
        node T_3579 = not(T_3578) @[package.scala 11:40]
        node T_3580 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_3581 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_3583 = neq(T_3581, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_3585 = eq(T_3583, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_3586 = or(T_3580, T_3581) @[Edges.scala 63:32]
        node T_3587 = bits(T_3586, 0, 0) @[Edges.scala 58:14]
        node T_3588 = not(T_3587) @[Edges.scala 58:9]
        node T_3589 = cat(T_3585, T_3588) @[Cat.scala 20:58]
        node T_3590 = not(T_3579) @[Edges.scala 66:39]
        node T_3591 = and(T_3589, T_3590) @[Edges.scala 66:37]
        node T_3592 = cat(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_3591) @[Cat.scala 20:58]
        node T_3594 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3596 = eq(T_3594, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3596 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3597 = or(T_3234[0], reset) @[Top.scala 53:32]
        node T_3599 = eq(T_3597, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3599 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3600 = or(T_3244, reset) @[Top.scala 53:32]
        node T_3602 = eq(T_3600, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3602 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3603 = leq(TLWidthWidget_2.io.out[0].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_3604 = or(T_3603, reset) @[Top.scala 53:32]
        node T_3606 = eq(T_3604, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3606 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Top.scala:53:32)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3607 = eq(TLWidthWidget_2.io.out[0].a.bits.mask, T_3297) @[Top.scala 53:32]
        node T_3608 = or(T_3607, reset) @[Top.scala 53:32]
        node T_3610 = eq(T_3608, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3610 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3611 = eq(TLWidthWidget_2.io.out[0].a.bits.opcode, UInt<3>("h05")) @[Top.scala 53:32]
      when T_3611 : @[Top.scala 53:32]
        node T_3613 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_3614 = dshl(T_3613, TLWidthWidget_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_3615 = bits(T_3614, 1, 0) @[package.scala 11:76]
        node T_3616 = not(T_3615) @[package.scala 11:40]
        node T_3617 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_3618 = bits(TLWidthWidget_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_3620 = neq(T_3618, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_3622 = eq(T_3620, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_3623 = or(T_3617, T_3618) @[Edges.scala 63:32]
        node T_3624 = bits(T_3623, 0, 0) @[Edges.scala 58:14]
        node T_3625 = not(T_3624) @[Edges.scala 58:9]
        node T_3626 = cat(T_3622, T_3625) @[Cat.scala 20:58]
        node T_3627 = not(T_3616) @[Edges.scala 66:39]
        node T_3628 = and(T_3626, T_3627) @[Edges.scala 66:37]
        node T_3629 = cat(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_3628) @[Cat.scala 20:58]
        node T_3631 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3633 = eq(T_3631, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3633 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3634 = or(T_3234[0], reset) @[Top.scala 53:32]
        node T_3636 = eq(T_3634, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3636 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3637 = or(T_3244, reset) @[Top.scala 53:32]
        node T_3639 = eq(T_3637, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3639 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3640 = eq(TLWidthWidget_2.io.out[0].a.bits.mask, T_3297) @[Top.scala 53:32]
        node T_3641 = or(T_3640, reset) @[Top.scala 53:32]
        node T_3643 = eq(T_3641, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3643 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    when TLWidthWidget_2.io.out[0].b.valid : @[Top.scala 53:32]
      node T_3644 = leq(TLWidthWidget_2.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_3645 = or(T_3644, reset) @[Top.scala 53:32]
      node T_3647 = eq(T_3645, UInt<1>("h00")) @[Top.scala 53:32]
      when T_3647 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Top.scala:53:32)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3649 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_3650 = dshl(T_3649, TLWidthWidget_2.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_3651 = bits(T_3650, 1, 0) @[package.scala 11:76]
      node T_3652 = not(T_3651) @[package.scala 11:40]
      node T_3653 = bits(TLWidthWidget_2.io.out[0].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_3654 = bits(TLWidthWidget_2.io.out[0].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_3656 = neq(T_3654, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_3658 = eq(T_3656, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_3659 = or(T_3653, T_3654) @[Edges.scala 63:32]
      node T_3660 = bits(T_3659, 0, 0) @[Edges.scala 58:14]
      node T_3661 = not(T_3660) @[Edges.scala 58:9]
      node T_3662 = cat(T_3658, T_3661) @[Cat.scala 20:58]
      node T_3663 = not(T_3652) @[Edges.scala 66:39]
      node T_3664 = and(T_3662, T_3663) @[Edges.scala 66:37]
      node T_3665 = cat(TLWidthWidget_2.io.out[0].b.bits.addr_hi, T_3664) @[Cat.scala 20:58]
      node T_3667 = xor(T_3665, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_3668 = cvt(T_3667) @[Parameters.scala 89:49]
      node T_3670 = and(T_3668, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_3671 = asSInt(T_3670) @[Parameters.scala 89:52]
      node T_3673 = eq(T_3671, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      node T_3675 = xor(T_3665, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_3676 = cvt(T_3675) @[Parameters.scala 89:49]
      node T_3678 = and(T_3676, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_3679 = asSInt(T_3678) @[Parameters.scala 89:52]
      node T_3681 = eq(T_3679, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_3687 : UInt<1>[2] @[Parameters.scala 227:36]
      T_3687 is invalid @[Parameters.scala 227:36]
      T_3687[0] <= T_3673 @[Parameters.scala 227:36]
      T_3687[1] <= T_3681 @[Parameters.scala 227:36]
      node T_3689 = or(T_3687[0], T_3687[1]) @[Parameters.scala 238:64]
      node T_3691 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_3692 = dshl(T_3691, TLWidthWidget_2.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_3693 = bits(T_3692, 7, 0) @[package.scala 11:76]
      node T_3694 = not(T_3693) @[package.scala 11:40]
      node T_3695 = shr(T_3694, 2) @[Edges.scala 15:47]
      node T_3696 = and(TLWidthWidget_2.io.out[0].b.bits.addr_hi, T_3695) @[Edges.scala 16:16]
      node T_3698 = eq(T_3696, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_3700 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_3701 = dshl(T_3700, TLWidthWidget_2.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_3702 = bits(T_3701, 1, 0) @[package.scala 11:76]
      node T_3703 = not(T_3702) @[package.scala 11:40]
      node T_3704 = bits(TLWidthWidget_2.io.out[0].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_3705 = bits(TLWidthWidget_2.io.out[0].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_3707 = neq(T_3705, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_3709 = eq(T_3707, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_3710 = or(T_3704, T_3705) @[Edges.scala 63:32]
      node T_3711 = bits(T_3710, 0, 0) @[Edges.scala 58:14]
      node T_3712 = not(T_3711) @[Edges.scala 58:9]
      node T_3713 = cat(T_3709, T_3712) @[Cat.scala 20:58]
      node T_3714 = not(T_3703) @[Edges.scala 66:39]
      node T_3715 = and(T_3713, T_3714) @[Edges.scala 66:37]
      node T_3717 = bits(TLWidthWidget_2.io.out[0].b.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_3718 = dshl(UInt<1>("h01"), T_3717) @[OneHot.scala 46:16]
      node T_3719 = bits(T_3718, 1, 0) @[OneHot.scala 46:41]
      node T_3721 = geq(TLWidthWidget_2.io.out[0].b.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_3723 = bits(T_3719, 1, 1) @[Edges.scala 36:26]
      node T_3724 = bits(T_3715, 1, 1) @[Edges.scala 37:26]
      node T_3726 = eq(T_3724, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_3727 = and(UInt<1>("h01"), T_3726) @[Edges.scala 41:27]
      node T_3728 = and(T_3723, T_3727) @[Edges.scala 42:38]
      node T_3729 = or(T_3721, T_3728) @[Edges.scala 42:29]
      node T_3730 = and(UInt<1>("h01"), T_3724) @[Edges.scala 41:27]
      node T_3731 = and(T_3723, T_3730) @[Edges.scala 42:38]
      node T_3732 = or(T_3721, T_3731) @[Edges.scala 42:29]
      node T_3733 = bits(T_3719, 0, 0) @[Edges.scala 36:26]
      node T_3734 = bits(T_3715, 0, 0) @[Edges.scala 37:26]
      node T_3736 = eq(T_3734, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_3737 = and(T_3727, T_3736) @[Edges.scala 41:27]
      node T_3738 = and(T_3733, T_3737) @[Edges.scala 42:38]
      node T_3739 = or(T_3729, T_3738) @[Edges.scala 42:29]
      node T_3740 = and(T_3727, T_3734) @[Edges.scala 41:27]
      node T_3741 = and(T_3733, T_3740) @[Edges.scala 42:38]
      node T_3742 = or(T_3729, T_3741) @[Edges.scala 42:29]
      node T_3743 = and(T_3730, T_3736) @[Edges.scala 41:27]
      node T_3744 = and(T_3733, T_3743) @[Edges.scala 42:38]
      node T_3745 = or(T_3732, T_3744) @[Edges.scala 42:29]
      node T_3746 = and(T_3730, T_3734) @[Edges.scala 41:27]
      node T_3747 = and(T_3733, T_3746) @[Edges.scala 42:38]
      node T_3748 = or(T_3732, T_3747) @[Edges.scala 42:29]
      node T_3749 = cat(T_3742, T_3739) @[Cat.scala 20:58]
      node T_3750 = cat(T_3748, T_3745) @[Cat.scala 20:58]
      node T_3751 = cat(T_3750, T_3749) @[Cat.scala 20:58]
      node T_3752 = eq(TLWidthWidget_2.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Top.scala 53:32]
      when T_3752 : @[Top.scala 53:32]
        node T_3754 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3756 = eq(T_3754, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3756 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Top.scala:53:32)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3757 = or(T_3689, reset) @[Top.scala 53:32]
        node T_3759 = eq(T_3757, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3759 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3761 = geq(TLWidthWidget_2.io.out[0].b.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_3762 = or(T_3761, reset) @[Top.scala 53:32]
        node T_3764 = eq(T_3762, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3764 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3765 = or(T_3698, reset) @[Top.scala 53:32]
        node T_3767 = eq(T_3765, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3767 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3768 = leq(TLWidthWidget_2.io.out[0].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_3769 = or(T_3768, reset) @[Top.scala 53:32]
        node T_3771 = eq(T_3769, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3771 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Top.scala:53:32)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3772 = not(TLWidthWidget_2.io.out[0].b.bits.mask) @[Top.scala 53:32]
        node T_3774 = eq(T_3772, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3775 = or(T_3774, reset) @[Top.scala 53:32]
        node T_3777 = eq(T_3775, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3777 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3778 = eq(TLWidthWidget_2.io.out[0].b.bits.opcode, UInt<3>("h04")) @[Top.scala 53:32]
      when T_3778 : @[Top.scala 53:32]
        node T_3780 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3782 = eq(T_3780, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3782 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Top.scala:53:32)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3783 = or(T_3689, reset) @[Top.scala 53:32]
        node T_3785 = eq(T_3783, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3785 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3786 = or(T_3698, reset) @[Top.scala 53:32]
        node T_3788 = eq(T_3786, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3788 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3790 = eq(TLWidthWidget_2.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3791 = or(T_3790, reset) @[Top.scala 53:32]
        node T_3793 = eq(T_3791, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3793 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3794 = eq(TLWidthWidget_2.io.out[0].b.bits.mask, T_3751) @[Top.scala 53:32]
        node T_3795 = or(T_3794, reset) @[Top.scala 53:32]
        node T_3797 = eq(T_3795, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3797 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3798 = eq(TLWidthWidget_2.io.out[0].b.bits.opcode, UInt<1>("h00")) @[Top.scala 53:32]
      when T_3798 : @[Top.scala 53:32]
        node T_3800 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3802 = eq(T_3800, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3802 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Top.scala:53:32)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3803 = or(T_3689, reset) @[Top.scala 53:32]
        node T_3805 = eq(T_3803, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3805 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3806 = or(T_3698, reset) @[Top.scala 53:32]
        node T_3808 = eq(T_3806, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3808 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3810 = eq(TLWidthWidget_2.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3811 = or(T_3810, reset) @[Top.scala 53:32]
        node T_3813 = eq(T_3811, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3813 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3814 = eq(TLWidthWidget_2.io.out[0].b.bits.mask, T_3751) @[Top.scala 53:32]
        node T_3815 = or(T_3814, reset) @[Top.scala 53:32]
        node T_3817 = eq(T_3815, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3817 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3818 = eq(TLWidthWidget_2.io.out[0].b.bits.opcode, UInt<1>("h01")) @[Top.scala 53:32]
      when T_3818 : @[Top.scala 53:32]
        node T_3820 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3822 = eq(T_3820, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3822 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Top.scala:53:32)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3823 = or(T_3689, reset) @[Top.scala 53:32]
        node T_3825 = eq(T_3823, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3825 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3826 = or(T_3698, reset) @[Top.scala 53:32]
        node T_3828 = eq(T_3826, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3828 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3830 = eq(TLWidthWidget_2.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3831 = or(T_3830, reset) @[Top.scala 53:32]
        node T_3833 = eq(T_3831, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3833 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3834 = not(T_3751) @[Top.scala 53:32]
        node T_3835 = and(TLWidthWidget_2.io.out[0].b.bits.mask, T_3834) @[Top.scala 53:32]
        node T_3837 = eq(T_3835, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3838 = or(T_3837, reset) @[Top.scala 53:32]
        node T_3840 = eq(T_3838, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3840 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3841 = eq(TLWidthWidget_2.io.out[0].b.bits.opcode, UInt<2>("h02")) @[Top.scala 53:32]
      when T_3841 : @[Top.scala 53:32]
        node T_3843 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3845 = eq(T_3843, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3845 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Top.scala:53:32)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3846 = or(T_3689, reset) @[Top.scala 53:32]
        node T_3848 = eq(T_3846, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3848 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3849 = or(T_3698, reset) @[Top.scala 53:32]
        node T_3851 = eq(T_3849, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3851 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3852 = leq(TLWidthWidget_2.io.out[0].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_3853 = or(T_3852, reset) @[Top.scala 53:32]
        node T_3855 = eq(T_3853, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3855 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Top.scala:53:32)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3856 = eq(TLWidthWidget_2.io.out[0].b.bits.mask, T_3751) @[Top.scala 53:32]
        node T_3857 = or(T_3856, reset) @[Top.scala 53:32]
        node T_3859 = eq(T_3857, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3859 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3860 = eq(TLWidthWidget_2.io.out[0].b.bits.opcode, UInt<2>("h03")) @[Top.scala 53:32]
      when T_3860 : @[Top.scala 53:32]
        node T_3862 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3864 = eq(T_3862, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3864 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Top.scala:53:32)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3865 = or(T_3689, reset) @[Top.scala 53:32]
        node T_3867 = eq(T_3865, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3867 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3868 = or(T_3698, reset) @[Top.scala 53:32]
        node T_3870 = eq(T_3868, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3870 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3871 = leq(TLWidthWidget_2.io.out[0].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_3872 = or(T_3871, reset) @[Top.scala 53:32]
        node T_3874 = eq(T_3872, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3874 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Top.scala:53:32)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3875 = eq(TLWidthWidget_2.io.out[0].b.bits.mask, T_3751) @[Top.scala 53:32]
        node T_3876 = or(T_3875, reset) @[Top.scala 53:32]
        node T_3878 = eq(T_3876, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3878 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3879 = eq(TLWidthWidget_2.io.out[0].b.bits.opcode, UInt<3>("h05")) @[Top.scala 53:32]
      when T_3879 : @[Top.scala 53:32]
        node T_3881 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_3883 = eq(T_3881, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3883 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Top.scala:53:32)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3884 = or(T_3689, reset) @[Top.scala 53:32]
        node T_3886 = eq(T_3884, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3886 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3887 = or(T_3698, reset) @[Top.scala 53:32]
        node T_3889 = eq(T_3887, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3889 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3890 = eq(TLWidthWidget_2.io.out[0].b.bits.mask, T_3751) @[Top.scala 53:32]
        node T_3891 = or(T_3890, reset) @[Top.scala 53:32]
        node T_3893 = eq(T_3891, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3893 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Top.scala:53:32)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    when TLWidthWidget_2.io.out[0].c.valid : @[Top.scala 53:32]
      node T_3894 = leq(TLWidthWidget_2.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_3895 = or(T_3894, reset) @[Top.scala 53:32]
      node T_3897 = eq(T_3895, UInt<1>("h00")) @[Top.scala 53:32]
      when T_3897 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Top.scala:53:32)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3899 = xor(UInt<1>("h00"), TLWidthWidget_2.io.out[0].c.bits.source) @[Parameters.scala 37:23]
      node T_3900 = not(T_3899) @[Parameters.scala 37:9]
      node T_3902 = or(T_3900, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_3903 = not(T_3902) @[Parameters.scala 37:7]
      node T_3905 = eq(T_3903, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_3911 : UInt<1>[1] @[Parameters.scala 326:27]
      T_3911 is invalid @[Parameters.scala 326:27]
      T_3911[0] <= T_3905 @[Parameters.scala 326:27]
      node T_3914 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_3915 = dshl(T_3914, TLWidthWidget_2.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_3916 = bits(T_3915, 7, 0) @[package.scala 11:76]
      node T_3917 = not(T_3916) @[package.scala 11:40]
      node T_3918 = shr(T_3917, 2) @[Edges.scala 15:47]
      node T_3919 = and(TLWidthWidget_2.io.out[0].c.bits.addr_hi, T_3918) @[Edges.scala 16:16]
      node T_3921 = eq(T_3919, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_3923 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_3924 = dshl(T_3923, TLWidthWidget_2.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_3925 = bits(T_3924, 7, 0) @[package.scala 11:76]
      node T_3926 = not(T_3925) @[package.scala 11:40]
      node T_3927 = and(TLWidthWidget_2.io.out[0].c.bits.addr_lo, T_3926) @[Edges.scala 23:16]
      node T_3929 = eq(T_3927, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_3930 = and(T_3921, T_3929) @[Top.scala 53:32]
      node T_3931 = cat(TLWidthWidget_2.io.out[0].c.bits.addr_hi, TLWidthWidget_2.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_3933 = xor(T_3931, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_3934 = cvt(T_3933) @[Parameters.scala 89:49]
      node T_3936 = and(T_3934, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_3937 = asSInt(T_3936) @[Parameters.scala 89:52]
      node T_3939 = eq(T_3937, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      node T_3941 = xor(T_3931, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_3942 = cvt(T_3941) @[Parameters.scala 89:49]
      node T_3944 = and(T_3942, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_3945 = asSInt(T_3944) @[Parameters.scala 89:52]
      node T_3947 = eq(T_3945, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_3953 : UInt<1>[2] @[Parameters.scala 227:36]
      T_3953 is invalid @[Parameters.scala 227:36]
      T_3953[0] <= T_3939 @[Parameters.scala 227:36]
      T_3953[1] <= T_3947 @[Parameters.scala 227:36]
      node T_3955 = or(T_3953[0], T_3953[1]) @[Parameters.scala 238:64]
      node T_3956 = eq(TLWidthWidget_2.io.out[0].c.bits.opcode, UInt<3>("h04")) @[Top.scala 53:32]
      when T_3956 : @[Top.scala 53:32]
        node T_3957 = or(T_3955, reset) @[Top.scala 53:32]
        node T_3959 = eq(T_3957, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3959 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3960 = or(T_3911[0], reset) @[Top.scala 53:32]
        node T_3962 = eq(T_3960, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3962 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3964 = geq(TLWidthWidget_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_3965 = or(T_3964, reset) @[Top.scala 53:32]
        node T_3967 = eq(T_3965, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3967 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3968 = or(T_3930, reset) @[Top.scala 53:32]
        node T_3970 = eq(T_3968, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3970 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3971 = leq(TLWidthWidget_2.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_3972 = or(T_3971, reset) @[Top.scala 53:32]
        node T_3974 = eq(T_3972, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3974 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Top.scala:53:32)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3976 = eq(TLWidthWidget_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:32]
        node T_3977 = or(T_3976, reset) @[Top.scala 53:32]
        node T_3979 = eq(T_3977, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3979 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Top.scala:53:32)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_3980 = eq(TLWidthWidget_2.io.out[0].c.bits.opcode, UInt<3>("h05")) @[Top.scala 53:32]
      when T_3980 : @[Top.scala 53:32]
        node T_3981 = or(T_3955, reset) @[Top.scala 53:32]
        node T_3983 = eq(T_3981, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3983 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3984 = or(T_3911[0], reset) @[Top.scala 53:32]
        node T_3986 = eq(T_3984, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3986 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3988 = geq(TLWidthWidget_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_3989 = or(T_3988, reset) @[Top.scala 53:32]
        node T_3991 = eq(T_3989, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3991 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3992 = or(T_3930, reset) @[Top.scala 53:32]
        node T_3994 = eq(T_3992, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3994 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_3995 = leq(TLWidthWidget_2.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_3996 = or(T_3995, reset) @[Top.scala 53:32]
        node T_3998 = eq(T_3996, UInt<1>("h00")) @[Top.scala 53:32]
        when T_3998 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Top.scala:53:32)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4000 = eq(TLWidthWidget_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4001 = or(T_4000, reset) @[Top.scala 53:32]
        node T_4003 = eq(T_4001, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4003 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Top.scala:53:32)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4004 = eq(TLWidthWidget_2.io.out[0].c.bits.opcode, UInt<3>("h06")) @[Top.scala 53:32]
      when T_4004 : @[Top.scala 53:32]
        node T_4005 = cat(TLWidthWidget_2.io.out[0].c.bits.addr_hi, TLWidthWidget_2.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_4007 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_4009 = eq(T_4007, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4009 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4010 = or(T_3911[0], reset) @[Top.scala 53:32]
        node T_4012 = eq(T_4010, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4012 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4014 = geq(TLWidthWidget_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_4015 = or(T_4014, reset) @[Top.scala 53:32]
        node T_4017 = eq(T_4015, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4017 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4018 = or(T_3930, reset) @[Top.scala 53:32]
        node T_4020 = eq(T_4018, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4020 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4021 = leq(TLWidthWidget_2.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_4022 = or(T_4021, reset) @[Top.scala 53:32]
        node T_4024 = eq(T_4022, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4024 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Top.scala:53:32)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4026 = eq(TLWidthWidget_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4027 = or(T_4026, reset) @[Top.scala 53:32]
        node T_4029 = eq(T_4027, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4029 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Top.scala:53:32)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4030 = eq(TLWidthWidget_2.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Top.scala 53:32]
      when T_4030 : @[Top.scala 53:32]
        node T_4031 = cat(TLWidthWidget_2.io.out[0].c.bits.addr_hi, TLWidthWidget_2.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_4033 = or(UInt<1>("h00"), reset) @[Top.scala 53:32]
        node T_4035 = eq(T_4033, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4035 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Top.scala:53:32)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4036 = or(T_3911[0], reset) @[Top.scala 53:32]
        node T_4038 = eq(T_4036, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4038 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4040 = geq(TLWidthWidget_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_4041 = or(T_4040, reset) @[Top.scala 53:32]
        node T_4043 = eq(T_4041, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4043 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4044 = or(T_3930, reset) @[Top.scala 53:32]
        node T_4046 = eq(T_4044, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4046 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4047 = leq(TLWidthWidget_2.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_4048 = or(T_4047, reset) @[Top.scala 53:32]
        node T_4050 = eq(T_4048, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4050 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Top.scala:53:32)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4052 = eq(TLWidthWidget_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4053 = or(T_4052, reset) @[Top.scala 53:32]
        node T_4055 = eq(T_4053, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4055 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Top.scala:53:32)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4056 = eq(TLWidthWidget_2.io.out[0].c.bits.opcode, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4056 : @[Top.scala 53:32]
        node T_4057 = or(T_3955, reset) @[Top.scala 53:32]
        node T_4059 = eq(T_4057, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4059 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4060 = or(T_3911[0], reset) @[Top.scala 53:32]
        node T_4062 = eq(T_4060, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4062 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4063 = or(T_3930, reset) @[Top.scala 53:32]
        node T_4065 = eq(T_4063, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4065 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4067 = eq(TLWidthWidget_2.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4068 = or(T_4067, reset) @[Top.scala 53:32]
        node T_4070 = eq(T_4068, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4070 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4071 = eq(TLWidthWidget_2.io.out[0].c.bits.opcode, UInt<1>("h01")) @[Top.scala 53:32]
      when T_4071 : @[Top.scala 53:32]
        node T_4072 = or(T_3955, reset) @[Top.scala 53:32]
        node T_4074 = eq(T_4072, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4074 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4075 = or(T_3911[0], reset) @[Top.scala 53:32]
        node T_4077 = eq(T_4075, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4077 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4078 = or(T_3930, reset) @[Top.scala 53:32]
        node T_4080 = eq(T_4078, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4080 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4082 = eq(TLWidthWidget_2.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4083 = or(T_4082, reset) @[Top.scala 53:32]
        node T_4085 = eq(T_4083, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4085 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4086 = eq(TLWidthWidget_2.io.out[0].c.bits.opcode, UInt<2>("h02")) @[Top.scala 53:32]
      when T_4086 : @[Top.scala 53:32]
        node T_4087 = or(T_3955, reset) @[Top.scala 53:32]
        node T_4089 = eq(T_4087, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4089 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Top.scala:53:32)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4090 = or(T_3911[0], reset) @[Top.scala 53:32]
        node T_4092 = eq(T_4090, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4092 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4093 = or(T_3930, reset) @[Top.scala 53:32]
        node T_4095 = eq(T_4093, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4095 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4097 = eq(TLWidthWidget_2.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4098 = or(T_4097, reset) @[Top.scala 53:32]
        node T_4100 = eq(T_4098, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4100 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4102 = eq(TLWidthWidget_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4103 = or(T_4102, reset) @[Top.scala 53:32]
        node T_4105 = eq(T_4103, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4105 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Top.scala:53:32)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    when TLWidthWidget_2.io.out[0].d.valid : @[Top.scala 53:32]
      node T_4106 = leq(TLWidthWidget_2.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_4107 = or(T_4106, reset) @[Top.scala 53:32]
      node T_4109 = eq(T_4107, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4109 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Top.scala:53:32)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4111 = xor(UInt<1>("h00"), TLWidthWidget_2.io.out[0].d.bits.source) @[Parameters.scala 37:23]
      node T_4112 = not(T_4111) @[Parameters.scala 37:9]
      node T_4114 = or(T_4112, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_4115 = not(T_4114) @[Parameters.scala 37:7]
      node T_4117 = eq(T_4115, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_4123 : UInt<1>[1] @[Parameters.scala 326:27]
      T_4123 is invalid @[Parameters.scala 326:27]
      T_4123[0] <= T_4117 @[Parameters.scala 326:27]
      node T_4126 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_4127 = dshl(T_4126, TLWidthWidget_2.io.out[0].d.bits.size) @[package.scala 11:71]
      node T_4128 = bits(T_4127, 7, 0) @[package.scala 11:76]
      node T_4129 = not(T_4128) @[package.scala 11:40]
      node T_4130 = and(TLWidthWidget_2.io.out[0].d.bits.addr_lo, T_4129) @[Edges.scala 23:16]
      node T_4132 = eq(T_4130, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_4134 = eq(UInt<1>("h01"), TLWidthWidget_2.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      node T_4136 = eq(UInt<1>("h00"), TLWidthWidget_2.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      wire T_4142 : UInt<1>[2] @[Parameters.scala 220:31]
      T_4142 is invalid @[Parameters.scala 220:31]
      T_4142[0] <= T_4134 @[Parameters.scala 220:31]
      T_4142[1] <= T_4136 @[Parameters.scala 220:31]
      node T_4144 = or(T_4142[0], T_4142[1]) @[Parameters.scala 240:54]
      node T_4145 = eq(TLWidthWidget_2.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Top.scala 53:32]
      when T_4145 : @[Top.scala 53:32]
        node T_4146 = or(T_4123[0], reset) @[Top.scala 53:32]
        node T_4148 = eq(T_4146, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4148 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4149 = or(T_4132, reset) @[Top.scala 53:32]
        node T_4151 = eq(T_4149, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4151 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4152 = or(T_4144, reset) @[Top.scala 53:32]
        node T_4154 = eq(T_4152, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4154 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Top.scala:53:32)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4156 = geq(TLWidthWidget_2.io.out[0].d.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_4157 = or(T_4156, reset) @[Top.scala 53:32]
        node T_4159 = eq(T_4157, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4159 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4161 = eq(TLWidthWidget_2.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4162 = or(T_4161, reset) @[Top.scala 53:32]
        node T_4164 = eq(T_4162, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4164 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4166 = eq(TLWidthWidget_2.io.out[0].d.bits.error, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4167 = or(T_4166, reset) @[Top.scala 53:32]
        node T_4169 = eq(T_4167, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4169 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Top.scala:53:32)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4170 = eq(TLWidthWidget_2.io.out[0].d.bits.opcode, UInt<3>("h04")) @[Top.scala 53:32]
      when T_4170 : @[Top.scala 53:32]
        node T_4171 = or(T_4123[0], reset) @[Top.scala 53:32]
        node T_4173 = eq(T_4171, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4173 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4174 = or(T_4132, reset) @[Top.scala 53:32]
        node T_4176 = eq(T_4174, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4176 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4177 = or(T_4144, reset) @[Top.scala 53:32]
        node T_4179 = eq(T_4177, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4179 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Top.scala:53:32)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4181 = geq(TLWidthWidget_2.io.out[0].d.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_4182 = or(T_4181, reset) @[Top.scala 53:32]
        node T_4184 = eq(T_4182, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4184 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4185 = leq(TLWidthWidget_2.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_4186 = or(T_4185, reset) @[Top.scala 53:32]
        node T_4188 = eq(T_4186, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4188 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Top.scala:53:32)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4189 = eq(TLWidthWidget_2.io.out[0].d.bits.opcode, UInt<3>("h05")) @[Top.scala 53:32]
      when T_4189 : @[Top.scala 53:32]
        node T_4190 = or(T_4123[0], reset) @[Top.scala 53:32]
        node T_4192 = eq(T_4190, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4192 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4193 = or(T_4132, reset) @[Top.scala 53:32]
        node T_4195 = eq(T_4193, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4195 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4196 = or(T_4144, reset) @[Top.scala 53:32]
        node T_4198 = eq(T_4196, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4198 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Top.scala:53:32)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4200 = geq(TLWidthWidget_2.io.out[0].d.bits.size, UInt<2>("h02")) @[Top.scala 53:32]
        node T_4201 = or(T_4200, reset) @[Top.scala 53:32]
        node T_4203 = eq(T_4201, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4203 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Top.scala:53:32)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4204 = leq(TLWidthWidget_2.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_4205 = or(T_4204, reset) @[Top.scala 53:32]
        node T_4207 = eq(T_4205, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4207 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Top.scala:53:32)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4208 = eq(TLWidthWidget_2.io.out[0].d.bits.opcode, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4208 : @[Top.scala 53:32]
        node T_4209 = or(T_4123[0], reset) @[Top.scala 53:32]
        node T_4211 = eq(T_4209, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4211 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4212 = or(T_4132, reset) @[Top.scala 53:32]
        node T_4214 = eq(T_4212, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4214 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4215 = or(T_4144, reset) @[Top.scala 53:32]
        node T_4217 = eq(T_4215, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4217 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Top.scala:53:32)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4219 = eq(TLWidthWidget_2.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4220 = or(T_4219, reset) @[Top.scala 53:32]
        node T_4222 = eq(T_4220, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4222 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4223 = eq(TLWidthWidget_2.io.out[0].d.bits.opcode, UInt<1>("h01")) @[Top.scala 53:32]
      when T_4223 : @[Top.scala 53:32]
        node T_4224 = or(T_4123[0], reset) @[Top.scala 53:32]
        node T_4226 = eq(T_4224, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4226 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4227 = or(T_4132, reset) @[Top.scala 53:32]
        node T_4229 = eq(T_4227, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4229 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4230 = or(T_4144, reset) @[Top.scala 53:32]
        node T_4232 = eq(T_4230, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4232 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Top.scala:53:32)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4234 = eq(TLWidthWidget_2.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4235 = or(T_4234, reset) @[Top.scala 53:32]
        node T_4237 = eq(T_4235, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4237 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4238 = eq(TLWidthWidget_2.io.out[0].d.bits.opcode, UInt<2>("h02")) @[Top.scala 53:32]
      when T_4238 : @[Top.scala 53:32]
        node T_4239 = or(T_4123[0], reset) @[Top.scala 53:32]
        node T_4241 = eq(T_4239, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4241 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Top.scala:53:32)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4242 = or(T_4132, reset) @[Top.scala 53:32]
        node T_4244 = eq(T_4242, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4244 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Top.scala:53:32)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4245 = or(T_4144, reset) @[Top.scala 53:32]
        node T_4247 = eq(T_4245, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4247 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Top.scala:53:32)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4249 = eq(TLWidthWidget_2.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4250 = or(T_4249, reset) @[Top.scala 53:32]
        node T_4252 = eq(T_4250, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4252 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Top.scala:53:32)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        node T_4254 = eq(TLWidthWidget_2.io.out[0].d.bits.error, UInt<1>("h00")) @[Top.scala 53:32]
        node T_4255 = or(T_4254, reset) @[Top.scala 53:32]
        node T_4257 = eq(T_4255, UInt<1>("h00")) @[Top.scala 53:32]
        when T_4257 : @[Top.scala 53:32]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Top.scala:53:32)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Top.scala 53:32]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
          skip @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    when TLWidthWidget_2.io.out[0].e.valid : @[Top.scala 53:32]
      node T_4259 = eq(UInt<1>("h01"), TLWidthWidget_2.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      node T_4261 = eq(UInt<1>("h00"), TLWidthWidget_2.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      wire T_4267 : UInt<1>[2] @[Parameters.scala 220:31]
      T_4267 is invalid @[Parameters.scala 220:31]
      T_4267[0] <= T_4259 @[Parameters.scala 220:31]
      T_4267[1] <= T_4261 @[Parameters.scala 220:31]
      node T_4269 = or(T_4267[0], T_4267[1]) @[Parameters.scala 240:54]
      node T_4270 = or(T_4269, reset) @[Top.scala 53:32]
      node T_4272 = eq(T_4270, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4272 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Top.scala:53:32)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4274 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_4276 : UInt, clk
    reg T_4278 : UInt, clk
    reg T_4280 : UInt, clk
    reg T_4282 : UInt, clk
    reg T_4284 : UInt, clk
    node T_4286 = neq(T_4274, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4287 = and(TLWidthWidget_2.io.out[0].a.valid, T_4286) @[Top.scala 53:32]
    when T_4287 : @[Top.scala 53:32]
      node T_4288 = eq(TLWidthWidget_2.io.out[0].a.bits.opcode, T_4276) @[Top.scala 53:32]
      node T_4289 = or(T_4288, reset) @[Top.scala 53:32]
      node T_4291 = eq(T_4289, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4291 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4292 = eq(TLWidthWidget_2.io.out[0].a.bits.param, T_4278) @[Top.scala 53:32]
      node T_4293 = or(T_4292, reset) @[Top.scala 53:32]
      node T_4295 = eq(T_4293, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4295 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4296 = eq(TLWidthWidget_2.io.out[0].a.bits.size, T_4280) @[Top.scala 53:32]
      node T_4297 = or(T_4296, reset) @[Top.scala 53:32]
      node T_4299 = eq(T_4297, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4299 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4300 = eq(TLWidthWidget_2.io.out[0].a.bits.source, T_4282) @[Top.scala 53:32]
      node T_4301 = or(T_4300, reset) @[Top.scala 53:32]
      node T_4303 = eq(T_4301, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4303 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4304 = eq(TLWidthWidget_2.io.out[0].a.bits.addr_hi, T_4284) @[Top.scala 53:32]
      node T_4305 = or(T_4304, reset) @[Top.scala 53:32]
      node T_4307 = eq(T_4305, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4307 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    node T_4308 = and(TLWidthWidget_2.io.out[0].a.ready, TLWidthWidget_2.io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_4308 : @[Top.scala 53:32]
      node T_4310 = sub(T_4274, UInt<1>("h01")) @[Top.scala 53:32]
      node T_4311 = tail(T_4310, 1) @[Top.scala 53:32]
      T_4274 <= T_4311 @[Top.scala 53:32]
      node T_4313 = eq(T_4274, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4313 : @[Top.scala 53:32]
        node T_4314 = bits(TLWidthWidget_2.io.out[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_4316 = eq(T_4314, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_4318 = leq(TLWidthWidget_2.io.out[0].a.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_4320 = bits(TLWidthWidget_2.io.out[0].a.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_4321 = dshl(UInt<1>("h01"), T_4320) @[OneHot.scala 46:16]
        node T_4322 = bits(T_4321, 8, 0) @[OneHot.scala 46:41]
        node T_4323 = shr(T_4322, 2) @[Edges.scala 209:50]
        node T_4324 = or(T_4323, T_4318) @[Edges.scala 210:29]
        node T_4326 = mux(T_4316, T_4324, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_4328 = sub(T_4326, UInt<1>("h01")) @[Top.scala 53:32]
        node T_4329 = tail(T_4328, 1) @[Top.scala 53:32]
        T_4274 <= T_4329 @[Top.scala 53:32]
        T_4276 <= TLWidthWidget_2.io.out[0].a.bits.opcode @[Top.scala 53:32]
        T_4278 <= TLWidthWidget_2.io.out[0].a.bits.param @[Top.scala 53:32]
        T_4280 <= TLWidthWidget_2.io.out[0].a.bits.size @[Top.scala 53:32]
        T_4282 <= TLWidthWidget_2.io.out[0].a.bits.source @[Top.scala 53:32]
        T_4284 <= TLWidthWidget_2.io.out[0].a.bits.addr_hi @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4331 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_4333 : UInt, clk
    reg T_4335 : UInt, clk
    reg T_4337 : UInt, clk
    reg T_4339 : UInt, clk
    reg T_4341 : UInt, clk
    node T_4343 = neq(T_4331, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4344 = and(TLWidthWidget_2.io.out[0].b.valid, T_4343) @[Top.scala 53:32]
    when T_4344 : @[Top.scala 53:32]
      node T_4345 = eq(TLWidthWidget_2.io.out[0].b.bits.opcode, T_4333) @[Top.scala 53:32]
      node T_4346 = or(T_4345, reset) @[Top.scala 53:32]
      node T_4348 = eq(T_4346, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4348 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4349 = eq(TLWidthWidget_2.io.out[0].b.bits.param, T_4335) @[Top.scala 53:32]
      node T_4350 = or(T_4349, reset) @[Top.scala 53:32]
      node T_4352 = eq(T_4350, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4352 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4353 = eq(TLWidthWidget_2.io.out[0].b.bits.size, T_4337) @[Top.scala 53:32]
      node T_4354 = or(T_4353, reset) @[Top.scala 53:32]
      node T_4356 = eq(T_4354, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4356 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4357 = eq(TLWidthWidget_2.io.out[0].b.bits.source, T_4339) @[Top.scala 53:32]
      node T_4358 = or(T_4357, reset) @[Top.scala 53:32]
      node T_4360 = eq(T_4358, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4360 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4361 = eq(TLWidthWidget_2.io.out[0].b.bits.addr_hi, T_4341) @[Top.scala 53:32]
      node T_4362 = or(T_4361, reset) @[Top.scala 53:32]
      node T_4364 = eq(T_4362, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4364 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    node T_4365 = and(TLWidthWidget_2.io.out[0].b.ready, TLWidthWidget_2.io.out[0].b.valid) @[Decoupled.scala 21:42]
    when T_4365 : @[Top.scala 53:32]
      node T_4367 = sub(T_4331, UInt<1>("h01")) @[Top.scala 53:32]
      node T_4368 = tail(T_4367, 1) @[Top.scala 53:32]
      T_4331 <= T_4368 @[Top.scala 53:32]
      node T_4370 = eq(T_4331, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4370 : @[Top.scala 53:32]
        node T_4371 = bits(TLWidthWidget_2.io.out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_4373 = eq(T_4371, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_4376 = leq(TLWidthWidget_2.io.out[0].b.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_4378 = bits(TLWidthWidget_2.io.out[0].b.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_4379 = dshl(UInt<1>("h01"), T_4378) @[OneHot.scala 46:16]
        node T_4380 = bits(T_4379, 8, 0) @[OneHot.scala 46:41]
        node T_4381 = shr(T_4380, 2) @[Edges.scala 209:50]
        node T_4382 = or(T_4381, T_4376) @[Edges.scala 210:29]
        node T_4384 = mux(UInt<1>("h00"), T_4382, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_4386 = sub(T_4384, UInt<1>("h01")) @[Top.scala 53:32]
        node T_4387 = tail(T_4386, 1) @[Top.scala 53:32]
        T_4331 <= T_4387 @[Top.scala 53:32]
        T_4333 <= TLWidthWidget_2.io.out[0].b.bits.opcode @[Top.scala 53:32]
        T_4335 <= TLWidthWidget_2.io.out[0].b.bits.param @[Top.scala 53:32]
        T_4337 <= TLWidthWidget_2.io.out[0].b.bits.size @[Top.scala 53:32]
        T_4339 <= TLWidthWidget_2.io.out[0].b.bits.source @[Top.scala 53:32]
        T_4341 <= TLWidthWidget_2.io.out[0].b.bits.addr_hi @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4389 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_4391 : UInt, clk
    reg T_4393 : UInt, clk
    reg T_4395 : UInt, clk
    reg T_4397 : UInt, clk
    reg T_4399 : UInt, clk
    reg T_4401 : UInt, clk
    node T_4403 = neq(T_4389, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4404 = and(TLWidthWidget_2.io.out[0].c.valid, T_4403) @[Top.scala 53:32]
    when T_4404 : @[Top.scala 53:32]
      node T_4405 = eq(TLWidthWidget_2.io.out[0].c.bits.opcode, T_4391) @[Top.scala 53:32]
      node T_4406 = or(T_4405, reset) @[Top.scala 53:32]
      node T_4408 = eq(T_4406, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4408 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4409 = eq(TLWidthWidget_2.io.out[0].c.bits.param, T_4393) @[Top.scala 53:32]
      node T_4410 = or(T_4409, reset) @[Top.scala 53:32]
      node T_4412 = eq(T_4410, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4412 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4413 = eq(TLWidthWidget_2.io.out[0].c.bits.size, T_4395) @[Top.scala 53:32]
      node T_4414 = or(T_4413, reset) @[Top.scala 53:32]
      node T_4416 = eq(T_4414, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4416 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4417 = eq(TLWidthWidget_2.io.out[0].c.bits.source, T_4397) @[Top.scala 53:32]
      node T_4418 = or(T_4417, reset) @[Top.scala 53:32]
      node T_4420 = eq(T_4418, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4420 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4421 = eq(TLWidthWidget_2.io.out[0].c.bits.addr_hi, T_4399) @[Top.scala 53:32]
      node T_4422 = or(T_4421, reset) @[Top.scala 53:32]
      node T_4424 = eq(T_4422, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4424 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4425 = eq(TLWidthWidget_2.io.out[0].c.bits.addr_lo, T_4401) @[Top.scala 53:32]
      node T_4426 = or(T_4425, reset) @[Top.scala 53:32]
      node T_4428 = eq(T_4426, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4428 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    node T_4429 = and(TLWidthWidget_2.io.out[0].c.ready, TLWidthWidget_2.io.out[0].c.valid) @[Decoupled.scala 21:42]
    when T_4429 : @[Top.scala 53:32]
      node T_4431 = sub(T_4389, UInt<1>("h01")) @[Top.scala 53:32]
      node T_4432 = tail(T_4431, 1) @[Top.scala 53:32]
      T_4389 <= T_4432 @[Top.scala 53:32]
      node T_4434 = eq(T_4389, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4434 : @[Top.scala 53:32]
        node T_4435 = bits(TLWidthWidget_2.io.out[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_4438 = leq(TLWidthWidget_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_4440 = bits(TLWidthWidget_2.io.out[0].c.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_4441 = dshl(UInt<1>("h01"), T_4440) @[OneHot.scala 46:16]
        node T_4442 = bits(T_4441, 8, 0) @[OneHot.scala 46:41]
        node T_4443 = shr(T_4442, 2) @[Edges.scala 209:50]
        node T_4444 = or(T_4443, T_4438) @[Edges.scala 210:29]
        node T_4446 = mux(UInt<1>("h00"), T_4444, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_4448 = sub(T_4446, UInt<1>("h01")) @[Top.scala 53:32]
        node T_4449 = tail(T_4448, 1) @[Top.scala 53:32]
        T_4389 <= T_4449 @[Top.scala 53:32]
        T_4391 <= TLWidthWidget_2.io.out[0].c.bits.opcode @[Top.scala 53:32]
        T_4393 <= TLWidthWidget_2.io.out[0].c.bits.param @[Top.scala 53:32]
        T_4395 <= TLWidthWidget_2.io.out[0].c.bits.size @[Top.scala 53:32]
        T_4397 <= TLWidthWidget_2.io.out[0].c.bits.source @[Top.scala 53:32]
        T_4399 <= TLWidthWidget_2.io.out[0].c.bits.addr_hi @[Top.scala 53:32]
        T_4401 <= TLWidthWidget_2.io.out[0].c.bits.addr_lo @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4451 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_4453 : UInt, clk
    reg T_4455 : UInt, clk
    reg T_4457 : UInt, clk
    reg T_4459 : UInt, clk
    reg T_4461 : UInt, clk
    reg T_4463 : UInt, clk
    node T_4465 = neq(T_4451, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4466 = and(TLWidthWidget_2.io.out[0].d.valid, T_4465) @[Top.scala 53:32]
    when T_4466 : @[Top.scala 53:32]
      node T_4467 = eq(TLWidthWidget_2.io.out[0].d.bits.opcode, T_4453) @[Top.scala 53:32]
      node T_4468 = or(T_4467, reset) @[Top.scala 53:32]
      node T_4470 = eq(T_4468, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4470 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4471 = eq(TLWidthWidget_2.io.out[0].d.bits.param, T_4455) @[Top.scala 53:32]
      node T_4472 = or(T_4471, reset) @[Top.scala 53:32]
      node T_4474 = eq(T_4472, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4474 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4475 = eq(TLWidthWidget_2.io.out[0].d.bits.size, T_4457) @[Top.scala 53:32]
      node T_4476 = or(T_4475, reset) @[Top.scala 53:32]
      node T_4478 = eq(T_4476, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4478 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4479 = eq(TLWidthWidget_2.io.out[0].d.bits.source, T_4459) @[Top.scala 53:32]
      node T_4480 = or(T_4479, reset) @[Top.scala 53:32]
      node T_4482 = eq(T_4480, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4482 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4483 = eq(TLWidthWidget_2.io.out[0].d.bits.sink, T_4461) @[Top.scala 53:32]
      node T_4484 = or(T_4483, reset) @[Top.scala 53:32]
      node T_4486 = eq(T_4484, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4486 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4487 = eq(TLWidthWidget_2.io.out[0].d.bits.addr_lo, T_4463) @[Top.scala 53:32]
      node T_4488 = or(T_4487, reset) @[Top.scala 53:32]
      node T_4490 = eq(T_4488, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4490 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Top.scala:53:32)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    node T_4491 = and(TLWidthWidget_2.io.out[0].d.ready, TLWidthWidget_2.io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_4491 : @[Top.scala 53:32]
      node T_4493 = sub(T_4451, UInt<1>("h01")) @[Top.scala 53:32]
      node T_4494 = tail(T_4493, 1) @[Top.scala 53:32]
      T_4451 <= T_4494 @[Top.scala 53:32]
      node T_4496 = eq(T_4451, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4496 : @[Top.scala 53:32]
        node T_4497 = bits(TLWidthWidget_2.io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_4499 = leq(TLWidthWidget_2.io.out[0].d.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_4501 = bits(TLWidthWidget_2.io.out[0].d.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_4502 = dshl(UInt<1>("h01"), T_4501) @[OneHot.scala 46:16]
        node T_4503 = bits(T_4502, 8, 0) @[OneHot.scala 46:41]
        node T_4504 = shr(T_4503, 2) @[Edges.scala 209:50]
        node T_4505 = or(T_4504, T_4499) @[Edges.scala 210:29]
        node T_4507 = mux(T_4497, T_4505, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_4509 = sub(T_4507, UInt<1>("h01")) @[Top.scala 53:32]
        node T_4510 = tail(T_4509, 1) @[Top.scala 53:32]
        T_4451 <= T_4510 @[Top.scala 53:32]
        T_4453 <= TLWidthWidget_2.io.out[0].d.bits.opcode @[Top.scala 53:32]
        T_4455 <= TLWidthWidget_2.io.out[0].d.bits.param @[Top.scala 53:32]
        T_4457 <= TLWidthWidget_2.io.out[0].d.bits.size @[Top.scala 53:32]
        T_4459 <= TLWidthWidget_2.io.out[0].d.bits.source @[Top.scala 53:32]
        T_4461 <= TLWidthWidget_2.io.out[0].d.bits.sink @[Top.scala 53:32]
        T_4463 <= TLWidthWidget_2.io.out[0].d.bits.addr_lo @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4512 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4512 <= TLWidthWidget_2.io.out[0].a.valid
    reg T_4514 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4514 <= TLWidthWidget_2.io.out[0].a.ready
    reg T_4515 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}, clk
    T_4515 <- TLWidthWidget_2.io.out[0].a.bits
    node T_4523 = cat(TLWidthWidget_2.io.out[0].a.bits.addr_hi, TLWidthWidget_2.io.out[0].a.bits.mask) @[Top.scala 53:32]
    node T_4524 = cat(T_4523, TLWidthWidget_2.io.out[0].a.bits.data) @[Top.scala 53:32]
    node T_4525 = cat(TLWidthWidget_2.io.out[0].a.bits.size, TLWidthWidget_2.io.out[0].a.bits.source) @[Top.scala 53:32]
    node T_4526 = cat(TLWidthWidget_2.io.out[0].a.bits.opcode, TLWidthWidget_2.io.out[0].a.bits.param) @[Top.scala 53:32]
    node T_4527 = cat(T_4526, T_4525) @[Top.scala 53:32]
    node T_4528 = cat(T_4527, T_4524) @[Top.scala 53:32]
    node T_4529 = cat(T_4515.addr_hi, T_4515.mask) @[Top.scala 53:32]
    node T_4530 = cat(T_4529, T_4515.data) @[Top.scala 53:32]
    node T_4531 = cat(T_4515.size, T_4515.source) @[Top.scala 53:32]
    node T_4532 = cat(T_4515.opcode, T_4515.param) @[Top.scala 53:32]
    node T_4533 = cat(T_4532, T_4531) @[Top.scala 53:32]
    node T_4534 = cat(T_4533, T_4530) @[Top.scala 53:32]
    node T_4535 = eq(T_4528, T_4534) @[Top.scala 53:32]
    node T_4537 = eq(T_4514, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4538 = and(T_4512, T_4537) @[Top.scala 53:32]
    when T_4538 : @[Top.scala 53:32]
      node T_4539 = or(TLWidthWidget_2.io.out[0].a.valid, reset) @[Top.scala 53:32]
      node T_4541 = eq(T_4539, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4541 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:32)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4542 = or(T_4535, reset) @[Top.scala 53:32]
      node T_4544 = eq(T_4542, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4544 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:32)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4546 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4546 <= TLWidthWidget_2.io.out[0].b.valid
    reg T_4548 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4548 <= TLWidthWidget_2.io.out[0].b.ready
    reg T_4549 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}, clk
    T_4549 <- TLWidthWidget_2.io.out[0].b.bits
    node T_4557 = cat(TLWidthWidget_2.io.out[0].b.bits.addr_hi, TLWidthWidget_2.io.out[0].b.bits.mask) @[Top.scala 53:32]
    node T_4558 = cat(T_4557, TLWidthWidget_2.io.out[0].b.bits.data) @[Top.scala 53:32]
    node T_4559 = cat(TLWidthWidget_2.io.out[0].b.bits.size, TLWidthWidget_2.io.out[0].b.bits.source) @[Top.scala 53:32]
    node T_4560 = cat(TLWidthWidget_2.io.out[0].b.bits.opcode, TLWidthWidget_2.io.out[0].b.bits.param) @[Top.scala 53:32]
    node T_4561 = cat(T_4560, T_4559) @[Top.scala 53:32]
    node T_4562 = cat(T_4561, T_4558) @[Top.scala 53:32]
    node T_4563 = cat(T_4549.addr_hi, T_4549.mask) @[Top.scala 53:32]
    node T_4564 = cat(T_4563, T_4549.data) @[Top.scala 53:32]
    node T_4565 = cat(T_4549.size, T_4549.source) @[Top.scala 53:32]
    node T_4566 = cat(T_4549.opcode, T_4549.param) @[Top.scala 53:32]
    node T_4567 = cat(T_4566, T_4565) @[Top.scala 53:32]
    node T_4568 = cat(T_4567, T_4564) @[Top.scala 53:32]
    node T_4569 = eq(T_4562, T_4568) @[Top.scala 53:32]
    node T_4571 = eq(T_4548, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4572 = and(T_4546, T_4571) @[Top.scala 53:32]
    when T_4572 : @[Top.scala 53:32]
      node T_4573 = or(TLWidthWidget_2.io.out[0].b.valid, reset) @[Top.scala 53:32]
      node T_4575 = eq(T_4573, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4575 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:32)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4576 = or(T_4569, reset) @[Top.scala 53:32]
      node T_4578 = eq(T_4576, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4578 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:32)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4580 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4580 <= TLWidthWidget_2.io.out[0].c.valid
    reg T_4582 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4582 <= TLWidthWidget_2.io.out[0].c.ready
    reg T_4583 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_4583 <- TLWidthWidget_2.io.out[0].c.bits
    node T_4592 = cat(TLWidthWidget_2.io.out[0].c.bits.data, TLWidthWidget_2.io.out[0].c.bits.error) @[Top.scala 53:32]
    node T_4593 = cat(TLWidthWidget_2.io.out[0].c.bits.addr_hi, TLWidthWidget_2.io.out[0].c.bits.addr_lo) @[Top.scala 53:32]
    node T_4594 = cat(T_4593, T_4592) @[Top.scala 53:32]
    node T_4595 = cat(TLWidthWidget_2.io.out[0].c.bits.size, TLWidthWidget_2.io.out[0].c.bits.source) @[Top.scala 53:32]
    node T_4596 = cat(TLWidthWidget_2.io.out[0].c.bits.opcode, TLWidthWidget_2.io.out[0].c.bits.param) @[Top.scala 53:32]
    node T_4597 = cat(T_4596, T_4595) @[Top.scala 53:32]
    node T_4598 = cat(T_4597, T_4594) @[Top.scala 53:32]
    node T_4599 = cat(T_4583.data, T_4583.error) @[Top.scala 53:32]
    node T_4600 = cat(T_4583.addr_hi, T_4583.addr_lo) @[Top.scala 53:32]
    node T_4601 = cat(T_4600, T_4599) @[Top.scala 53:32]
    node T_4602 = cat(T_4583.size, T_4583.source) @[Top.scala 53:32]
    node T_4603 = cat(T_4583.opcode, T_4583.param) @[Top.scala 53:32]
    node T_4604 = cat(T_4603, T_4602) @[Top.scala 53:32]
    node T_4605 = cat(T_4604, T_4601) @[Top.scala 53:32]
    node T_4606 = eq(T_4598, T_4605) @[Top.scala 53:32]
    node T_4608 = eq(T_4582, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4609 = and(T_4580, T_4608) @[Top.scala 53:32]
    when T_4609 : @[Top.scala 53:32]
      node T_4610 = or(TLWidthWidget_2.io.out[0].c.valid, reset) @[Top.scala 53:32]
      node T_4612 = eq(T_4610, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4612 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:32)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4613 = or(T_4606, reset) @[Top.scala 53:32]
      node T_4615 = eq(T_4613, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4615 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:32)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4617 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4617 <= TLWidthWidget_2.io.out[0].d.valid
    reg T_4619 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4619 <= TLWidthWidget_2.io.out[0].d.ready
    reg T_4620 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_4620 <- TLWidthWidget_2.io.out[0].d.bits
    node T_4629 = cat(TLWidthWidget_2.io.out[0].d.bits.data, TLWidthWidget_2.io.out[0].d.bits.error) @[Top.scala 53:32]
    node T_4630 = cat(TLWidthWidget_2.io.out[0].d.bits.sink, TLWidthWidget_2.io.out[0].d.bits.addr_lo) @[Top.scala 53:32]
    node T_4631 = cat(T_4630, T_4629) @[Top.scala 53:32]
    node T_4632 = cat(TLWidthWidget_2.io.out[0].d.bits.size, TLWidthWidget_2.io.out[0].d.bits.source) @[Top.scala 53:32]
    node T_4633 = cat(TLWidthWidget_2.io.out[0].d.bits.opcode, TLWidthWidget_2.io.out[0].d.bits.param) @[Top.scala 53:32]
    node T_4634 = cat(T_4633, T_4632) @[Top.scala 53:32]
    node T_4635 = cat(T_4634, T_4631) @[Top.scala 53:32]
    node T_4636 = cat(T_4620.data, T_4620.error) @[Top.scala 53:32]
    node T_4637 = cat(T_4620.sink, T_4620.addr_lo) @[Top.scala 53:32]
    node T_4638 = cat(T_4637, T_4636) @[Top.scala 53:32]
    node T_4639 = cat(T_4620.size, T_4620.source) @[Top.scala 53:32]
    node T_4640 = cat(T_4620.opcode, T_4620.param) @[Top.scala 53:32]
    node T_4641 = cat(T_4640, T_4639) @[Top.scala 53:32]
    node T_4642 = cat(T_4641, T_4638) @[Top.scala 53:32]
    node T_4643 = eq(T_4635, T_4642) @[Top.scala 53:32]
    node T_4645 = eq(T_4619, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4646 = and(T_4617, T_4645) @[Top.scala 53:32]
    when T_4646 : @[Top.scala 53:32]
      node T_4647 = or(TLWidthWidget_2.io.out[0].d.valid, reset) @[Top.scala 53:32]
      node T_4649 = eq(T_4647, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4649 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:32)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4650 = or(T_4643, reset) @[Top.scala 53:32]
      node T_4652 = eq(T_4650, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4652 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:32)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    reg T_4654 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4654 <= TLWidthWidget_2.io.out[0].e.valid
    reg T_4656 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_4656 <= TLWidthWidget_2.io.out[0].e.ready
    reg T_4657 : {sink : UInt<1>}, clk
    T_4657 <- TLWidthWidget_2.io.out[0].e.bits
    node T_4659 = eq(TLWidthWidget_2.io.out[0].e.bits.sink, T_4657.sink) @[Top.scala 53:32]
    node T_4661 = eq(T_4656, UInt<1>("h00")) @[Top.scala 53:32]
    node T_4662 = and(T_4654, T_4661) @[Top.scala 53:32]
    when T_4662 : @[Top.scala 53:32]
      node T_4663 = or(TLWidthWidget_2.io.out[0].e.valid, reset) @[Top.scala 53:32]
      node T_4665 = eq(T_4663, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4665 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:32)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      node T_4666 = or(T_4659, reset) @[Top.scala 53:32]
      node T_4668 = eq(T_4666, UInt<1>("h00")) @[Top.scala 53:32]
      when T_4668 : @[Top.scala 53:32]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:32)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:32]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:32]
        skip @[Top.scala 53:32]
      skip @[Top.scala 53:32]
    TLBuffer_1.io.in[0] <- TLWidthWidget_2.io.out[0] @[Top.scala 53:32]
    when TLBuffer_1.io.out[0].a.valid : @[Top.scala 53:21]
      node T_4669 = leq(TLBuffer_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_4670 = or(T_4669, reset) @[Top.scala 53:21]
      node T_4672 = eq(T_4670, UInt<1>("h00")) @[Top.scala 53:21]
      when T_4672 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Top.scala:53:21)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_4674 = xor(UInt<1>("h00"), TLBuffer_1.io.out[0].a.bits.source) @[Parameters.scala 37:23]
      node T_4675 = not(T_4674) @[Parameters.scala 37:9]
      node T_4677 = or(T_4675, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_4678 = not(T_4677) @[Parameters.scala 37:7]
      node T_4680 = eq(T_4678, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_4686 : UInt<1>[1] @[Parameters.scala 326:27]
      T_4686 is invalid @[Parameters.scala 326:27]
      T_4686[0] <= T_4680 @[Parameters.scala 326:27]
      node T_4689 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_4690 = dshl(T_4689, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_4691 = bits(T_4690, 7, 0) @[package.scala 11:76]
      node T_4692 = not(T_4691) @[package.scala 11:40]
      node T_4693 = shr(T_4692, 2) @[Edges.scala 15:47]
      node T_4694 = and(TLBuffer_1.io.out[0].a.bits.addr_hi, T_4693) @[Edges.scala 16:16]
      node T_4696 = eq(T_4694, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_4698 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_4699 = dshl(T_4698, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_4700 = bits(T_4699, 1, 0) @[package.scala 11:76]
      node T_4701 = not(T_4700) @[package.scala 11:40]
      node T_4702 = bits(TLBuffer_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_4703 = bits(TLBuffer_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_4705 = neq(T_4703, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_4707 = eq(T_4705, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_4708 = or(T_4702, T_4703) @[Edges.scala 63:32]
      node T_4709 = bits(T_4708, 0, 0) @[Edges.scala 58:14]
      node T_4710 = not(T_4709) @[Edges.scala 58:9]
      node T_4711 = cat(T_4707, T_4710) @[Cat.scala 20:58]
      node T_4712 = not(T_4701) @[Edges.scala 66:39]
      node T_4713 = and(T_4711, T_4712) @[Edges.scala 66:37]
      node T_4715 = bits(TLBuffer_1.io.out[0].a.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_4716 = dshl(UInt<1>("h01"), T_4715) @[OneHot.scala 46:16]
      node T_4717 = bits(T_4716, 1, 0) @[OneHot.scala 46:41]
      node T_4719 = geq(TLBuffer_1.io.out[0].a.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_4721 = bits(T_4717, 1, 1) @[Edges.scala 36:26]
      node T_4722 = bits(T_4713, 1, 1) @[Edges.scala 37:26]
      node T_4724 = eq(T_4722, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_4725 = and(UInt<1>("h01"), T_4724) @[Edges.scala 41:27]
      node T_4726 = and(T_4721, T_4725) @[Edges.scala 42:38]
      node T_4727 = or(T_4719, T_4726) @[Edges.scala 42:29]
      node T_4728 = and(UInt<1>("h01"), T_4722) @[Edges.scala 41:27]
      node T_4729 = and(T_4721, T_4728) @[Edges.scala 42:38]
      node T_4730 = or(T_4719, T_4729) @[Edges.scala 42:29]
      node T_4731 = bits(T_4717, 0, 0) @[Edges.scala 36:26]
      node T_4732 = bits(T_4713, 0, 0) @[Edges.scala 37:26]
      node T_4734 = eq(T_4732, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_4735 = and(T_4725, T_4734) @[Edges.scala 41:27]
      node T_4736 = and(T_4731, T_4735) @[Edges.scala 42:38]
      node T_4737 = or(T_4727, T_4736) @[Edges.scala 42:29]
      node T_4738 = and(T_4725, T_4732) @[Edges.scala 41:27]
      node T_4739 = and(T_4731, T_4738) @[Edges.scala 42:38]
      node T_4740 = or(T_4727, T_4739) @[Edges.scala 42:29]
      node T_4741 = and(T_4728, T_4734) @[Edges.scala 41:27]
      node T_4742 = and(T_4731, T_4741) @[Edges.scala 42:38]
      node T_4743 = or(T_4730, T_4742) @[Edges.scala 42:29]
      node T_4744 = and(T_4728, T_4732) @[Edges.scala 41:27]
      node T_4745 = and(T_4731, T_4744) @[Edges.scala 42:38]
      node T_4746 = or(T_4730, T_4745) @[Edges.scala 42:29]
      node T_4747 = cat(T_4740, T_4737) @[Cat.scala 20:58]
      node T_4748 = cat(T_4746, T_4743) @[Cat.scala 20:58]
      node T_4749 = cat(T_4748, T_4747) @[Cat.scala 20:58]
      node T_4750 = eq(TLBuffer_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Top.scala 53:21]
      when T_4750 : @[Top.scala 53:21]
        node T_4752 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_4753 = dshl(T_4752, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_4754 = bits(T_4753, 1, 0) @[package.scala 11:76]
        node T_4755 = not(T_4754) @[package.scala 11:40]
        node T_4756 = bits(TLBuffer_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_4757 = bits(TLBuffer_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_4759 = neq(T_4757, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_4761 = eq(T_4759, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_4762 = or(T_4756, T_4757) @[Edges.scala 63:32]
        node T_4763 = bits(T_4762, 0, 0) @[Edges.scala 58:14]
        node T_4764 = not(T_4763) @[Edges.scala 58:9]
        node T_4765 = cat(T_4761, T_4764) @[Cat.scala 20:58]
        node T_4766 = not(T_4755) @[Edges.scala 66:39]
        node T_4767 = and(T_4765, T_4766) @[Edges.scala 66:37]
        node T_4768 = cat(TLBuffer_1.io.out[0].a.bits.addr_hi, T_4767) @[Cat.scala 20:58]
        node T_4770 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_4772 = eq(T_4770, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4772 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4773 = or(T_4686[0], reset) @[Top.scala 53:21]
        node T_4775 = eq(T_4773, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4775 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4777 = geq(TLBuffer_1.io.out[0].a.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_4778 = or(T_4777, reset) @[Top.scala 53:21]
        node T_4780 = eq(T_4778, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4780 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4781 = or(T_4696, reset) @[Top.scala 53:21]
        node T_4783 = eq(T_4781, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4783 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4784 = leq(TLBuffer_1.io.out[0].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_4785 = or(T_4784, reset) @[Top.scala 53:21]
        node T_4787 = eq(T_4785, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4787 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Top.scala:53:21)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4788 = not(TLBuffer_1.io.out[0].a.bits.mask) @[Top.scala 53:21]
        node T_4790 = eq(T_4788, UInt<1>("h00")) @[Top.scala 53:21]
        node T_4791 = or(T_4790, reset) @[Top.scala 53:21]
        node T_4793 = eq(T_4791, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4793 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_4794 = eq(TLBuffer_1.io.out[0].a.bits.opcode, UInt<3>("h04")) @[Top.scala 53:21]
      when T_4794 : @[Top.scala 53:21]
        node T_4796 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_4797 = dshl(T_4796, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_4798 = bits(T_4797, 1, 0) @[package.scala 11:76]
        node T_4799 = not(T_4798) @[package.scala 11:40]
        node T_4800 = bits(TLBuffer_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_4801 = bits(TLBuffer_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_4803 = neq(T_4801, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_4805 = eq(T_4803, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_4806 = or(T_4800, T_4801) @[Edges.scala 63:32]
        node T_4807 = bits(T_4806, 0, 0) @[Edges.scala 58:14]
        node T_4808 = not(T_4807) @[Edges.scala 58:9]
        node T_4809 = cat(T_4805, T_4808) @[Cat.scala 20:58]
        node T_4810 = not(T_4799) @[Edges.scala 66:39]
        node T_4811 = and(T_4809, T_4810) @[Edges.scala 66:37]
        node T_4812 = cat(TLBuffer_1.io.out[0].a.bits.addr_hi, T_4811) @[Cat.scala 20:58]
        node T_4814 = leq(UInt<1>("h00"), TLBuffer_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_4816 = leq(TLBuffer_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_4817 = and(T_4814, T_4816) @[Parameters.scala 61:37]
        node T_4818 = or(T_4817, reset) @[Top.scala 53:21]
        node T_4820 = eq(T_4818, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4820 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4821 = or(T_4686[0], reset) @[Top.scala 53:21]
        node T_4823 = eq(T_4821, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4823 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4824 = or(T_4696, reset) @[Top.scala 53:21]
        node T_4826 = eq(T_4824, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4826 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4828 = eq(TLBuffer_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_4829 = or(T_4828, reset) @[Top.scala 53:21]
        node T_4831 = eq(T_4829, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4831 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4832 = eq(TLBuffer_1.io.out[0].a.bits.mask, T_4749) @[Top.scala 53:21]
        node T_4833 = or(T_4832, reset) @[Top.scala 53:21]
        node T_4835 = eq(T_4833, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4835 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_4836 = eq(TLBuffer_1.io.out[0].a.bits.opcode, UInt<1>("h00")) @[Top.scala 53:21]
      when T_4836 : @[Top.scala 53:21]
        node T_4838 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_4839 = dshl(T_4838, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_4840 = bits(T_4839, 1, 0) @[package.scala 11:76]
        node T_4841 = not(T_4840) @[package.scala 11:40]
        node T_4842 = bits(TLBuffer_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_4843 = bits(TLBuffer_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_4845 = neq(T_4843, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_4847 = eq(T_4845, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_4848 = or(T_4842, T_4843) @[Edges.scala 63:32]
        node T_4849 = bits(T_4848, 0, 0) @[Edges.scala 58:14]
        node T_4850 = not(T_4849) @[Edges.scala 58:9]
        node T_4851 = cat(T_4847, T_4850) @[Cat.scala 20:58]
        node T_4852 = not(T_4841) @[Edges.scala 66:39]
        node T_4853 = and(T_4851, T_4852) @[Edges.scala 66:37]
        node T_4854 = cat(TLBuffer_1.io.out[0].a.bits.addr_hi, T_4853) @[Cat.scala 20:58]
        node T_4856 = xor(T_4854, UInt<13>("h01000")) @[Parameters.scala 89:31]
        node T_4857 = cvt(T_4856) @[Parameters.scala 89:49]
        node T_4859 = and(T_4857, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
        node T_4860 = asSInt(T_4859) @[Parameters.scala 89:52]
        node T_4862 = eq(T_4860, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        node T_4864 = xor(T_4854, UInt<31>("h044000000")) @[Parameters.scala 89:31]
        node T_4865 = cvt(T_4864) @[Parameters.scala 89:49]
        node T_4867 = and(T_4865, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
        node T_4868 = asSInt(T_4867) @[Parameters.scala 89:52]
        node T_4870 = eq(T_4868, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        wire T_4876 : UInt<1>[2] @[Parameters.scala 227:36]
        T_4876 is invalid @[Parameters.scala 227:36]
        T_4876[0] <= T_4862 @[Parameters.scala 227:36]
        T_4876[1] <= T_4870 @[Parameters.scala 227:36]
        node T_4880 = leq(UInt<1>("h00"), TLBuffer_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_4882 = leq(TLBuffer_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_4883 = and(T_4880, T_4882) @[Parameters.scala 61:37]
        node T_4885 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
        node T_4886 = mux(T_4876[0], T_4885, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_4888 = shl(T_4883, 0) @[Mux.scala 18:72]
        node T_4889 = mux(T_4876[1], T_4888, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_4891 = or(T_4886, T_4889) @[Mux.scala 18:72]
        wire T_4892 : UInt<1>
        T_4892 is invalid
        T_4892 <= T_4891 @[Mux.scala 18:72]
        node T_4893 = or(T_4892, reset) @[Top.scala 53:21]
        node T_4895 = eq(T_4893, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4895 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4896 = or(T_4686[0], reset) @[Top.scala 53:21]
        node T_4898 = eq(T_4896, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4898 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4899 = or(T_4696, reset) @[Top.scala 53:21]
        node T_4901 = eq(T_4899, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4901 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4903 = eq(TLBuffer_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_4904 = or(T_4903, reset) @[Top.scala 53:21]
        node T_4906 = eq(T_4904, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4906 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4907 = eq(TLBuffer_1.io.out[0].a.bits.mask, T_4749) @[Top.scala 53:21]
        node T_4908 = or(T_4907, reset) @[Top.scala 53:21]
        node T_4910 = eq(T_4908, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4910 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_4911 = eq(TLBuffer_1.io.out[0].a.bits.opcode, UInt<1>("h01")) @[Top.scala 53:21]
      when T_4911 : @[Top.scala 53:21]
        node T_4913 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_4914 = dshl(T_4913, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_4915 = bits(T_4914, 1, 0) @[package.scala 11:76]
        node T_4916 = not(T_4915) @[package.scala 11:40]
        node T_4917 = bits(TLBuffer_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_4918 = bits(TLBuffer_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_4920 = neq(T_4918, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_4922 = eq(T_4920, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_4923 = or(T_4917, T_4918) @[Edges.scala 63:32]
        node T_4924 = bits(T_4923, 0, 0) @[Edges.scala 58:14]
        node T_4925 = not(T_4924) @[Edges.scala 58:9]
        node T_4926 = cat(T_4922, T_4925) @[Cat.scala 20:58]
        node T_4927 = not(T_4916) @[Edges.scala 66:39]
        node T_4928 = and(T_4926, T_4927) @[Edges.scala 66:37]
        node T_4929 = cat(TLBuffer_1.io.out[0].a.bits.addr_hi, T_4928) @[Cat.scala 20:58]
        node T_4931 = xor(T_4929, UInt<13>("h01000")) @[Parameters.scala 89:31]
        node T_4932 = cvt(T_4931) @[Parameters.scala 89:49]
        node T_4934 = and(T_4932, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
        node T_4935 = asSInt(T_4934) @[Parameters.scala 89:52]
        node T_4937 = eq(T_4935, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        node T_4939 = xor(T_4929, UInt<31>("h044000000")) @[Parameters.scala 89:31]
        node T_4940 = cvt(T_4939) @[Parameters.scala 89:49]
        node T_4942 = and(T_4940, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
        node T_4943 = asSInt(T_4942) @[Parameters.scala 89:52]
        node T_4945 = eq(T_4943, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
        wire T_4951 : UInt<1>[2] @[Parameters.scala 227:36]
        T_4951 is invalid @[Parameters.scala 227:36]
        T_4951[0] <= T_4937 @[Parameters.scala 227:36]
        T_4951[1] <= T_4945 @[Parameters.scala 227:36]
        node T_4955 = leq(UInt<1>("h00"), TLBuffer_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_4957 = leq(TLBuffer_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_4958 = and(T_4955, T_4957) @[Parameters.scala 61:37]
        node T_4960 = shl(UInt<1>("h00"), 0) @[Mux.scala 18:72]
        node T_4961 = mux(T_4951[0], T_4960, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_4963 = shl(T_4958, 0) @[Mux.scala 18:72]
        node T_4964 = mux(T_4951[1], T_4963, UInt<1>("h00")) @[Mux.scala 18:72]
        node T_4966 = or(T_4961, T_4964) @[Mux.scala 18:72]
        wire T_4967 : UInt<1>
        T_4967 is invalid
        T_4967 <= T_4966 @[Mux.scala 18:72]
        node T_4968 = or(T_4967, reset) @[Top.scala 53:21]
        node T_4970 = eq(T_4968, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4970 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4971 = or(T_4686[0], reset) @[Top.scala 53:21]
        node T_4973 = eq(T_4971, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4973 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4974 = or(T_4696, reset) @[Top.scala 53:21]
        node T_4976 = eq(T_4974, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4976 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4978 = eq(TLBuffer_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_4979 = or(T_4978, reset) @[Top.scala 53:21]
        node T_4981 = eq(T_4979, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4981 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_4982 = not(T_4749) @[Top.scala 53:21]
        node T_4983 = and(TLBuffer_1.io.out[0].a.bits.mask, T_4982) @[Top.scala 53:21]
        node T_4985 = eq(T_4983, UInt<1>("h00")) @[Top.scala 53:21]
        node T_4986 = or(T_4985, reset) @[Top.scala 53:21]
        node T_4988 = eq(T_4986, UInt<1>("h00")) @[Top.scala 53:21]
        when T_4988 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_4989 = eq(TLBuffer_1.io.out[0].a.bits.opcode, UInt<2>("h02")) @[Top.scala 53:21]
      when T_4989 : @[Top.scala 53:21]
        node T_4991 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_4992 = dshl(T_4991, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_4993 = bits(T_4992, 1, 0) @[package.scala 11:76]
        node T_4994 = not(T_4993) @[package.scala 11:40]
        node T_4995 = bits(TLBuffer_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_4996 = bits(TLBuffer_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_4998 = neq(T_4996, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_5000 = eq(T_4998, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_5001 = or(T_4995, T_4996) @[Edges.scala 63:32]
        node T_5002 = bits(T_5001, 0, 0) @[Edges.scala 58:14]
        node T_5003 = not(T_5002) @[Edges.scala 58:9]
        node T_5004 = cat(T_5000, T_5003) @[Cat.scala 20:58]
        node T_5005 = not(T_4994) @[Edges.scala 66:39]
        node T_5006 = and(T_5004, T_5005) @[Edges.scala 66:37]
        node T_5007 = cat(TLBuffer_1.io.out[0].a.bits.addr_hi, T_5006) @[Cat.scala 20:58]
        node T_5009 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5011 = eq(T_5009, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5011 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5012 = or(T_4686[0], reset) @[Top.scala 53:21]
        node T_5014 = eq(T_5012, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5014 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5015 = or(T_4696, reset) @[Top.scala 53:21]
        node T_5017 = eq(T_5015, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5017 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5018 = leq(TLBuffer_1.io.out[0].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_5019 = or(T_5018, reset) @[Top.scala 53:21]
        node T_5021 = eq(T_5019, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5021 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Top.scala:53:21)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5022 = eq(TLBuffer_1.io.out[0].a.bits.mask, T_4749) @[Top.scala 53:21]
        node T_5023 = or(T_5022, reset) @[Top.scala 53:21]
        node T_5025 = eq(T_5023, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5025 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5026 = eq(TLBuffer_1.io.out[0].a.bits.opcode, UInt<2>("h03")) @[Top.scala 53:21]
      when T_5026 : @[Top.scala 53:21]
        node T_5028 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_5029 = dshl(T_5028, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_5030 = bits(T_5029, 1, 0) @[package.scala 11:76]
        node T_5031 = not(T_5030) @[package.scala 11:40]
        node T_5032 = bits(TLBuffer_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_5033 = bits(TLBuffer_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_5035 = neq(T_5033, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_5037 = eq(T_5035, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_5038 = or(T_5032, T_5033) @[Edges.scala 63:32]
        node T_5039 = bits(T_5038, 0, 0) @[Edges.scala 58:14]
        node T_5040 = not(T_5039) @[Edges.scala 58:9]
        node T_5041 = cat(T_5037, T_5040) @[Cat.scala 20:58]
        node T_5042 = not(T_5031) @[Edges.scala 66:39]
        node T_5043 = and(T_5041, T_5042) @[Edges.scala 66:37]
        node T_5044 = cat(TLBuffer_1.io.out[0].a.bits.addr_hi, T_5043) @[Cat.scala 20:58]
        node T_5046 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5048 = eq(T_5046, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5048 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5049 = or(T_4686[0], reset) @[Top.scala 53:21]
        node T_5051 = eq(T_5049, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5051 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5052 = or(T_4696, reset) @[Top.scala 53:21]
        node T_5054 = eq(T_5052, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5054 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5055 = leq(TLBuffer_1.io.out[0].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_5056 = or(T_5055, reset) @[Top.scala 53:21]
        node T_5058 = eq(T_5056, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5058 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Top.scala:53:21)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5059 = eq(TLBuffer_1.io.out[0].a.bits.mask, T_4749) @[Top.scala 53:21]
        node T_5060 = or(T_5059, reset) @[Top.scala 53:21]
        node T_5062 = eq(T_5060, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5062 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5063 = eq(TLBuffer_1.io.out[0].a.bits.opcode, UInt<3>("h05")) @[Top.scala 53:21]
      when T_5063 : @[Top.scala 53:21]
        node T_5065 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_5066 = dshl(T_5065, TLBuffer_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_5067 = bits(T_5066, 1, 0) @[package.scala 11:76]
        node T_5068 = not(T_5067) @[package.scala 11:40]
        node T_5069 = bits(TLBuffer_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_5070 = bits(TLBuffer_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_5072 = neq(T_5070, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_5074 = eq(T_5072, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_5075 = or(T_5069, T_5070) @[Edges.scala 63:32]
        node T_5076 = bits(T_5075, 0, 0) @[Edges.scala 58:14]
        node T_5077 = not(T_5076) @[Edges.scala 58:9]
        node T_5078 = cat(T_5074, T_5077) @[Cat.scala 20:58]
        node T_5079 = not(T_5068) @[Edges.scala 66:39]
        node T_5080 = and(T_5078, T_5079) @[Edges.scala 66:37]
        node T_5081 = cat(TLBuffer_1.io.out[0].a.bits.addr_hi, T_5080) @[Cat.scala 20:58]
        node T_5083 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5085 = eq(T_5083, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5085 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5086 = or(T_4686[0], reset) @[Top.scala 53:21]
        node T_5088 = eq(T_5086, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5088 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5089 = or(T_4696, reset) @[Top.scala 53:21]
        node T_5091 = eq(T_5089, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5091 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5092 = eq(TLBuffer_1.io.out[0].a.bits.mask, T_4749) @[Top.scala 53:21]
        node T_5093 = or(T_5092, reset) @[Top.scala 53:21]
        node T_5095 = eq(T_5093, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5095 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    when TLBuffer_1.io.out[0].b.valid : @[Top.scala 53:21]
      node T_5096 = leq(TLBuffer_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_5097 = or(T_5096, reset) @[Top.scala 53:21]
      node T_5099 = eq(T_5097, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5099 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Top.scala:53:21)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5101 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_5102 = dshl(T_5101, TLBuffer_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_5103 = bits(T_5102, 1, 0) @[package.scala 11:76]
      node T_5104 = not(T_5103) @[package.scala 11:40]
      node T_5105 = bits(TLBuffer_1.io.out[0].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_5106 = bits(TLBuffer_1.io.out[0].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_5108 = neq(T_5106, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_5110 = eq(T_5108, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_5111 = or(T_5105, T_5106) @[Edges.scala 63:32]
      node T_5112 = bits(T_5111, 0, 0) @[Edges.scala 58:14]
      node T_5113 = not(T_5112) @[Edges.scala 58:9]
      node T_5114 = cat(T_5110, T_5113) @[Cat.scala 20:58]
      node T_5115 = not(T_5104) @[Edges.scala 66:39]
      node T_5116 = and(T_5114, T_5115) @[Edges.scala 66:37]
      node T_5117 = cat(TLBuffer_1.io.out[0].b.bits.addr_hi, T_5116) @[Cat.scala 20:58]
      node T_5119 = xor(T_5117, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_5120 = cvt(T_5119) @[Parameters.scala 89:49]
      node T_5122 = and(T_5120, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_5123 = asSInt(T_5122) @[Parameters.scala 89:52]
      node T_5125 = eq(T_5123, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      node T_5127 = xor(T_5117, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_5128 = cvt(T_5127) @[Parameters.scala 89:49]
      node T_5130 = and(T_5128, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_5131 = asSInt(T_5130) @[Parameters.scala 89:52]
      node T_5133 = eq(T_5131, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_5139 : UInt<1>[2] @[Parameters.scala 227:36]
      T_5139 is invalid @[Parameters.scala 227:36]
      T_5139[0] <= T_5125 @[Parameters.scala 227:36]
      T_5139[1] <= T_5133 @[Parameters.scala 227:36]
      node T_5141 = or(T_5139[0], T_5139[1]) @[Parameters.scala 238:64]
      node T_5143 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_5144 = dshl(T_5143, TLBuffer_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_5145 = bits(T_5144, 7, 0) @[package.scala 11:76]
      node T_5146 = not(T_5145) @[package.scala 11:40]
      node T_5147 = shr(T_5146, 2) @[Edges.scala 15:47]
      node T_5148 = and(TLBuffer_1.io.out[0].b.bits.addr_hi, T_5147) @[Edges.scala 16:16]
      node T_5150 = eq(T_5148, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_5152 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_5153 = dshl(T_5152, TLBuffer_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_5154 = bits(T_5153, 1, 0) @[package.scala 11:76]
      node T_5155 = not(T_5154) @[package.scala 11:40]
      node T_5156 = bits(TLBuffer_1.io.out[0].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_5157 = bits(TLBuffer_1.io.out[0].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_5159 = neq(T_5157, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_5161 = eq(T_5159, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_5162 = or(T_5156, T_5157) @[Edges.scala 63:32]
      node T_5163 = bits(T_5162, 0, 0) @[Edges.scala 58:14]
      node T_5164 = not(T_5163) @[Edges.scala 58:9]
      node T_5165 = cat(T_5161, T_5164) @[Cat.scala 20:58]
      node T_5166 = not(T_5155) @[Edges.scala 66:39]
      node T_5167 = and(T_5165, T_5166) @[Edges.scala 66:37]
      node T_5169 = bits(TLBuffer_1.io.out[0].b.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_5170 = dshl(UInt<1>("h01"), T_5169) @[OneHot.scala 46:16]
      node T_5171 = bits(T_5170, 1, 0) @[OneHot.scala 46:41]
      node T_5173 = geq(TLBuffer_1.io.out[0].b.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_5175 = bits(T_5171, 1, 1) @[Edges.scala 36:26]
      node T_5176 = bits(T_5167, 1, 1) @[Edges.scala 37:26]
      node T_5178 = eq(T_5176, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_5179 = and(UInt<1>("h01"), T_5178) @[Edges.scala 41:27]
      node T_5180 = and(T_5175, T_5179) @[Edges.scala 42:38]
      node T_5181 = or(T_5173, T_5180) @[Edges.scala 42:29]
      node T_5182 = and(UInt<1>("h01"), T_5176) @[Edges.scala 41:27]
      node T_5183 = and(T_5175, T_5182) @[Edges.scala 42:38]
      node T_5184 = or(T_5173, T_5183) @[Edges.scala 42:29]
      node T_5185 = bits(T_5171, 0, 0) @[Edges.scala 36:26]
      node T_5186 = bits(T_5167, 0, 0) @[Edges.scala 37:26]
      node T_5188 = eq(T_5186, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_5189 = and(T_5179, T_5188) @[Edges.scala 41:27]
      node T_5190 = and(T_5185, T_5189) @[Edges.scala 42:38]
      node T_5191 = or(T_5181, T_5190) @[Edges.scala 42:29]
      node T_5192 = and(T_5179, T_5186) @[Edges.scala 41:27]
      node T_5193 = and(T_5185, T_5192) @[Edges.scala 42:38]
      node T_5194 = or(T_5181, T_5193) @[Edges.scala 42:29]
      node T_5195 = and(T_5182, T_5188) @[Edges.scala 41:27]
      node T_5196 = and(T_5185, T_5195) @[Edges.scala 42:38]
      node T_5197 = or(T_5184, T_5196) @[Edges.scala 42:29]
      node T_5198 = and(T_5182, T_5186) @[Edges.scala 41:27]
      node T_5199 = and(T_5185, T_5198) @[Edges.scala 42:38]
      node T_5200 = or(T_5184, T_5199) @[Edges.scala 42:29]
      node T_5201 = cat(T_5194, T_5191) @[Cat.scala 20:58]
      node T_5202 = cat(T_5200, T_5197) @[Cat.scala 20:58]
      node T_5203 = cat(T_5202, T_5201) @[Cat.scala 20:58]
      node T_5204 = eq(TLBuffer_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Top.scala 53:21]
      when T_5204 : @[Top.scala 53:21]
        node T_5206 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5208 = eq(T_5206, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5208 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Top.scala:53:21)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5209 = or(T_5141, reset) @[Top.scala 53:21]
        node T_5211 = eq(T_5209, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5211 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5213 = geq(TLBuffer_1.io.out[0].b.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_5214 = or(T_5213, reset) @[Top.scala 53:21]
        node T_5216 = eq(T_5214, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5216 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5217 = or(T_5150, reset) @[Top.scala 53:21]
        node T_5219 = eq(T_5217, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5219 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5220 = leq(TLBuffer_1.io.out[0].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_5221 = or(T_5220, reset) @[Top.scala 53:21]
        node T_5223 = eq(T_5221, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5223 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Top.scala:53:21)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5224 = not(TLBuffer_1.io.out[0].b.bits.mask) @[Top.scala 53:21]
        node T_5226 = eq(T_5224, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5227 = or(T_5226, reset) @[Top.scala 53:21]
        node T_5229 = eq(T_5227, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5229 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5230 = eq(TLBuffer_1.io.out[0].b.bits.opcode, UInt<3>("h04")) @[Top.scala 53:21]
      when T_5230 : @[Top.scala 53:21]
        node T_5232 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5234 = eq(T_5232, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5234 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Top.scala:53:21)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5235 = or(T_5141, reset) @[Top.scala 53:21]
        node T_5237 = eq(T_5235, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5237 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5238 = or(T_5150, reset) @[Top.scala 53:21]
        node T_5240 = eq(T_5238, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5240 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5242 = eq(TLBuffer_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5243 = or(T_5242, reset) @[Top.scala 53:21]
        node T_5245 = eq(T_5243, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5245 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5246 = eq(TLBuffer_1.io.out[0].b.bits.mask, T_5203) @[Top.scala 53:21]
        node T_5247 = or(T_5246, reset) @[Top.scala 53:21]
        node T_5249 = eq(T_5247, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5249 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5250 = eq(TLBuffer_1.io.out[0].b.bits.opcode, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5250 : @[Top.scala 53:21]
        node T_5252 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5254 = eq(T_5252, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5254 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Top.scala:53:21)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5255 = or(T_5141, reset) @[Top.scala 53:21]
        node T_5257 = eq(T_5255, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5257 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5258 = or(T_5150, reset) @[Top.scala 53:21]
        node T_5260 = eq(T_5258, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5260 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5262 = eq(TLBuffer_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5263 = or(T_5262, reset) @[Top.scala 53:21]
        node T_5265 = eq(T_5263, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5265 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5266 = eq(TLBuffer_1.io.out[0].b.bits.mask, T_5203) @[Top.scala 53:21]
        node T_5267 = or(T_5266, reset) @[Top.scala 53:21]
        node T_5269 = eq(T_5267, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5269 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5270 = eq(TLBuffer_1.io.out[0].b.bits.opcode, UInt<1>("h01")) @[Top.scala 53:21]
      when T_5270 : @[Top.scala 53:21]
        node T_5272 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5274 = eq(T_5272, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5274 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Top.scala:53:21)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5275 = or(T_5141, reset) @[Top.scala 53:21]
        node T_5277 = eq(T_5275, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5277 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5278 = or(T_5150, reset) @[Top.scala 53:21]
        node T_5280 = eq(T_5278, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5280 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5282 = eq(TLBuffer_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5283 = or(T_5282, reset) @[Top.scala 53:21]
        node T_5285 = eq(T_5283, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5285 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5286 = not(T_5203) @[Top.scala 53:21]
        node T_5287 = and(TLBuffer_1.io.out[0].b.bits.mask, T_5286) @[Top.scala 53:21]
        node T_5289 = eq(T_5287, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5290 = or(T_5289, reset) @[Top.scala 53:21]
        node T_5292 = eq(T_5290, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5292 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5293 = eq(TLBuffer_1.io.out[0].b.bits.opcode, UInt<2>("h02")) @[Top.scala 53:21]
      when T_5293 : @[Top.scala 53:21]
        node T_5295 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5297 = eq(T_5295, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5297 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Top.scala:53:21)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5298 = or(T_5141, reset) @[Top.scala 53:21]
        node T_5300 = eq(T_5298, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5300 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5301 = or(T_5150, reset) @[Top.scala 53:21]
        node T_5303 = eq(T_5301, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5303 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5304 = leq(TLBuffer_1.io.out[0].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_5305 = or(T_5304, reset) @[Top.scala 53:21]
        node T_5307 = eq(T_5305, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5307 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Top.scala:53:21)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5308 = eq(TLBuffer_1.io.out[0].b.bits.mask, T_5203) @[Top.scala 53:21]
        node T_5309 = or(T_5308, reset) @[Top.scala 53:21]
        node T_5311 = eq(T_5309, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5311 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5312 = eq(TLBuffer_1.io.out[0].b.bits.opcode, UInt<2>("h03")) @[Top.scala 53:21]
      when T_5312 : @[Top.scala 53:21]
        node T_5314 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5316 = eq(T_5314, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5316 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Top.scala:53:21)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5317 = or(T_5141, reset) @[Top.scala 53:21]
        node T_5319 = eq(T_5317, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5319 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5320 = or(T_5150, reset) @[Top.scala 53:21]
        node T_5322 = eq(T_5320, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5322 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5323 = leq(TLBuffer_1.io.out[0].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_5324 = or(T_5323, reset) @[Top.scala 53:21]
        node T_5326 = eq(T_5324, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5326 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Top.scala:53:21)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5327 = eq(TLBuffer_1.io.out[0].b.bits.mask, T_5203) @[Top.scala 53:21]
        node T_5328 = or(T_5327, reset) @[Top.scala 53:21]
        node T_5330 = eq(T_5328, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5330 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5331 = eq(TLBuffer_1.io.out[0].b.bits.opcode, UInt<3>("h05")) @[Top.scala 53:21]
      when T_5331 : @[Top.scala 53:21]
        node T_5333 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5335 = eq(T_5333, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5335 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Top.scala:53:21)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5336 = or(T_5141, reset) @[Top.scala 53:21]
        node T_5338 = eq(T_5336, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5338 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5339 = or(T_5150, reset) @[Top.scala 53:21]
        node T_5341 = eq(T_5339, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5341 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5342 = eq(TLBuffer_1.io.out[0].b.bits.mask, T_5203) @[Top.scala 53:21]
        node T_5343 = or(T_5342, reset) @[Top.scala 53:21]
        node T_5345 = eq(T_5343, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5345 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Top.scala:53:21)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    when TLBuffer_1.io.out[0].c.valid : @[Top.scala 53:21]
      node T_5346 = leq(TLBuffer_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_5347 = or(T_5346, reset) @[Top.scala 53:21]
      node T_5349 = eq(T_5347, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5349 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Top.scala:53:21)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5351 = xor(UInt<1>("h00"), TLBuffer_1.io.out[0].c.bits.source) @[Parameters.scala 37:23]
      node T_5352 = not(T_5351) @[Parameters.scala 37:9]
      node T_5354 = or(T_5352, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_5355 = not(T_5354) @[Parameters.scala 37:7]
      node T_5357 = eq(T_5355, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_5363 : UInt<1>[1] @[Parameters.scala 326:27]
      T_5363 is invalid @[Parameters.scala 326:27]
      T_5363[0] <= T_5357 @[Parameters.scala 326:27]
      node T_5366 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_5367 = dshl(T_5366, TLBuffer_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_5368 = bits(T_5367, 7, 0) @[package.scala 11:76]
      node T_5369 = not(T_5368) @[package.scala 11:40]
      node T_5370 = shr(T_5369, 2) @[Edges.scala 15:47]
      node T_5371 = and(TLBuffer_1.io.out[0].c.bits.addr_hi, T_5370) @[Edges.scala 16:16]
      node T_5373 = eq(T_5371, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_5375 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_5376 = dshl(T_5375, TLBuffer_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_5377 = bits(T_5376, 7, 0) @[package.scala 11:76]
      node T_5378 = not(T_5377) @[package.scala 11:40]
      node T_5379 = and(TLBuffer_1.io.out[0].c.bits.addr_lo, T_5378) @[Edges.scala 23:16]
      node T_5381 = eq(T_5379, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_5382 = and(T_5373, T_5381) @[Top.scala 53:21]
      node T_5383 = cat(TLBuffer_1.io.out[0].c.bits.addr_hi, TLBuffer_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_5385 = xor(T_5383, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_5386 = cvt(T_5385) @[Parameters.scala 89:49]
      node T_5388 = and(T_5386, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_5389 = asSInt(T_5388) @[Parameters.scala 89:52]
      node T_5391 = eq(T_5389, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      node T_5393 = xor(T_5383, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_5394 = cvt(T_5393) @[Parameters.scala 89:49]
      node T_5396 = and(T_5394, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_5397 = asSInt(T_5396) @[Parameters.scala 89:52]
      node T_5399 = eq(T_5397, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_5405 : UInt<1>[2] @[Parameters.scala 227:36]
      T_5405 is invalid @[Parameters.scala 227:36]
      T_5405[0] <= T_5391 @[Parameters.scala 227:36]
      T_5405[1] <= T_5399 @[Parameters.scala 227:36]
      node T_5407 = or(T_5405[0], T_5405[1]) @[Parameters.scala 238:64]
      node T_5408 = eq(TLBuffer_1.io.out[0].c.bits.opcode, UInt<3>("h04")) @[Top.scala 53:21]
      when T_5408 : @[Top.scala 53:21]
        node T_5409 = or(T_5407, reset) @[Top.scala 53:21]
        node T_5411 = eq(T_5409, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5411 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5412 = or(T_5363[0], reset) @[Top.scala 53:21]
        node T_5414 = eq(T_5412, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5414 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5416 = geq(TLBuffer_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_5417 = or(T_5416, reset) @[Top.scala 53:21]
        node T_5419 = eq(T_5417, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5419 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5420 = or(T_5382, reset) @[Top.scala 53:21]
        node T_5422 = eq(T_5420, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5422 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5423 = leq(TLBuffer_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_5424 = or(T_5423, reset) @[Top.scala 53:21]
        node T_5426 = eq(T_5424, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5426 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Top.scala:53:21)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5428 = eq(TLBuffer_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5429 = or(T_5428, reset) @[Top.scala 53:21]
        node T_5431 = eq(T_5429, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5431 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Top.scala:53:21)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5432 = eq(TLBuffer_1.io.out[0].c.bits.opcode, UInt<3>("h05")) @[Top.scala 53:21]
      when T_5432 : @[Top.scala 53:21]
        node T_5433 = or(T_5407, reset) @[Top.scala 53:21]
        node T_5435 = eq(T_5433, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5435 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5436 = or(T_5363[0], reset) @[Top.scala 53:21]
        node T_5438 = eq(T_5436, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5438 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5440 = geq(TLBuffer_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_5441 = or(T_5440, reset) @[Top.scala 53:21]
        node T_5443 = eq(T_5441, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5443 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5444 = or(T_5382, reset) @[Top.scala 53:21]
        node T_5446 = eq(T_5444, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5446 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5447 = leq(TLBuffer_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_5448 = or(T_5447, reset) @[Top.scala 53:21]
        node T_5450 = eq(T_5448, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5450 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Top.scala:53:21)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5452 = eq(TLBuffer_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5453 = or(T_5452, reset) @[Top.scala 53:21]
        node T_5455 = eq(T_5453, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5455 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Top.scala:53:21)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5456 = eq(TLBuffer_1.io.out[0].c.bits.opcode, UInt<3>("h06")) @[Top.scala 53:21]
      when T_5456 : @[Top.scala 53:21]
        node T_5457 = cat(TLBuffer_1.io.out[0].c.bits.addr_hi, TLBuffer_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_5459 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5461 = eq(T_5459, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5461 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5462 = or(T_5363[0], reset) @[Top.scala 53:21]
        node T_5464 = eq(T_5462, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5464 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5466 = geq(TLBuffer_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_5467 = or(T_5466, reset) @[Top.scala 53:21]
        node T_5469 = eq(T_5467, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5469 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5470 = or(T_5382, reset) @[Top.scala 53:21]
        node T_5472 = eq(T_5470, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5472 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5473 = leq(TLBuffer_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_5474 = or(T_5473, reset) @[Top.scala 53:21]
        node T_5476 = eq(T_5474, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5476 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Top.scala:53:21)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5478 = eq(TLBuffer_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5479 = or(T_5478, reset) @[Top.scala 53:21]
        node T_5481 = eq(T_5479, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5481 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Top.scala:53:21)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5482 = eq(TLBuffer_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Top.scala 53:21]
      when T_5482 : @[Top.scala 53:21]
        node T_5483 = cat(TLBuffer_1.io.out[0].c.bits.addr_hi, TLBuffer_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_5485 = or(UInt<1>("h00"), reset) @[Top.scala 53:21]
        node T_5487 = eq(T_5485, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5487 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Top.scala:53:21)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5488 = or(T_5363[0], reset) @[Top.scala 53:21]
        node T_5490 = eq(T_5488, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5490 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5492 = geq(TLBuffer_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_5493 = or(T_5492, reset) @[Top.scala 53:21]
        node T_5495 = eq(T_5493, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5495 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5496 = or(T_5382, reset) @[Top.scala 53:21]
        node T_5498 = eq(T_5496, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5498 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5499 = leq(TLBuffer_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_5500 = or(T_5499, reset) @[Top.scala 53:21]
        node T_5502 = eq(T_5500, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5502 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Top.scala:53:21)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5504 = eq(TLBuffer_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5505 = or(T_5504, reset) @[Top.scala 53:21]
        node T_5507 = eq(T_5505, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5507 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Top.scala:53:21)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5508 = eq(TLBuffer_1.io.out[0].c.bits.opcode, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5508 : @[Top.scala 53:21]
        node T_5509 = or(T_5407, reset) @[Top.scala 53:21]
        node T_5511 = eq(T_5509, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5511 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5512 = or(T_5363[0], reset) @[Top.scala 53:21]
        node T_5514 = eq(T_5512, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5514 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5515 = or(T_5382, reset) @[Top.scala 53:21]
        node T_5517 = eq(T_5515, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5517 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5519 = eq(TLBuffer_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5520 = or(T_5519, reset) @[Top.scala 53:21]
        node T_5522 = eq(T_5520, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5522 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5523 = eq(TLBuffer_1.io.out[0].c.bits.opcode, UInt<1>("h01")) @[Top.scala 53:21]
      when T_5523 : @[Top.scala 53:21]
        node T_5524 = or(T_5407, reset) @[Top.scala 53:21]
        node T_5526 = eq(T_5524, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5526 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5527 = or(T_5363[0], reset) @[Top.scala 53:21]
        node T_5529 = eq(T_5527, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5529 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5530 = or(T_5382, reset) @[Top.scala 53:21]
        node T_5532 = eq(T_5530, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5532 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5534 = eq(TLBuffer_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5535 = or(T_5534, reset) @[Top.scala 53:21]
        node T_5537 = eq(T_5535, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5537 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5538 = eq(TLBuffer_1.io.out[0].c.bits.opcode, UInt<2>("h02")) @[Top.scala 53:21]
      when T_5538 : @[Top.scala 53:21]
        node T_5539 = or(T_5407, reset) @[Top.scala 53:21]
        node T_5541 = eq(T_5539, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5541 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Top.scala:53:21)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5542 = or(T_5363[0], reset) @[Top.scala 53:21]
        node T_5544 = eq(T_5542, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5544 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5545 = or(T_5382, reset) @[Top.scala 53:21]
        node T_5547 = eq(T_5545, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5547 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5549 = eq(TLBuffer_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5550 = or(T_5549, reset) @[Top.scala 53:21]
        node T_5552 = eq(T_5550, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5552 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5554 = eq(TLBuffer_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5555 = or(T_5554, reset) @[Top.scala 53:21]
        node T_5557 = eq(T_5555, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5557 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Top.scala:53:21)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    when TLBuffer_1.io.out[0].d.valid : @[Top.scala 53:21]
      node T_5558 = leq(TLBuffer_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_5559 = or(T_5558, reset) @[Top.scala 53:21]
      node T_5561 = eq(T_5559, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5561 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Top.scala:53:21)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5563 = xor(UInt<1>("h00"), TLBuffer_1.io.out[0].d.bits.source) @[Parameters.scala 37:23]
      node T_5564 = not(T_5563) @[Parameters.scala 37:9]
      node T_5566 = or(T_5564, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_5567 = not(T_5566) @[Parameters.scala 37:7]
      node T_5569 = eq(T_5567, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_5575 : UInt<1>[1] @[Parameters.scala 326:27]
      T_5575 is invalid @[Parameters.scala 326:27]
      T_5575[0] <= T_5569 @[Parameters.scala 326:27]
      node T_5578 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_5579 = dshl(T_5578, TLBuffer_1.io.out[0].d.bits.size) @[package.scala 11:71]
      node T_5580 = bits(T_5579, 7, 0) @[package.scala 11:76]
      node T_5581 = not(T_5580) @[package.scala 11:40]
      node T_5582 = and(TLBuffer_1.io.out[0].d.bits.addr_lo, T_5581) @[Edges.scala 23:16]
      node T_5584 = eq(T_5582, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_5586 = eq(UInt<1>("h01"), TLBuffer_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      node T_5588 = eq(UInt<1>("h00"), TLBuffer_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      wire T_5594 : UInt<1>[2] @[Parameters.scala 220:31]
      T_5594 is invalid @[Parameters.scala 220:31]
      T_5594[0] <= T_5586 @[Parameters.scala 220:31]
      T_5594[1] <= T_5588 @[Parameters.scala 220:31]
      node T_5596 = or(T_5594[0], T_5594[1]) @[Parameters.scala 240:54]
      node T_5597 = eq(TLBuffer_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Top.scala 53:21]
      when T_5597 : @[Top.scala 53:21]
        node T_5598 = or(T_5575[0], reset) @[Top.scala 53:21]
        node T_5600 = eq(T_5598, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5600 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5601 = or(T_5584, reset) @[Top.scala 53:21]
        node T_5603 = eq(T_5601, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5603 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5604 = or(T_5596, reset) @[Top.scala 53:21]
        node T_5606 = eq(T_5604, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5606 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Top.scala:53:21)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5608 = geq(TLBuffer_1.io.out[0].d.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_5609 = or(T_5608, reset) @[Top.scala 53:21]
        node T_5611 = eq(T_5609, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5611 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5613 = eq(TLBuffer_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5614 = or(T_5613, reset) @[Top.scala 53:21]
        node T_5616 = eq(T_5614, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5616 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5618 = eq(TLBuffer_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5619 = or(T_5618, reset) @[Top.scala 53:21]
        node T_5621 = eq(T_5619, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5621 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Top.scala:53:21)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5622 = eq(TLBuffer_1.io.out[0].d.bits.opcode, UInt<3>("h04")) @[Top.scala 53:21]
      when T_5622 : @[Top.scala 53:21]
        node T_5623 = or(T_5575[0], reset) @[Top.scala 53:21]
        node T_5625 = eq(T_5623, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5625 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5626 = or(T_5584, reset) @[Top.scala 53:21]
        node T_5628 = eq(T_5626, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5628 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5629 = or(T_5596, reset) @[Top.scala 53:21]
        node T_5631 = eq(T_5629, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5631 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Top.scala:53:21)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5633 = geq(TLBuffer_1.io.out[0].d.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_5634 = or(T_5633, reset) @[Top.scala 53:21]
        node T_5636 = eq(T_5634, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5636 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5637 = leq(TLBuffer_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_5638 = or(T_5637, reset) @[Top.scala 53:21]
        node T_5640 = eq(T_5638, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5640 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Top.scala:53:21)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5641 = eq(TLBuffer_1.io.out[0].d.bits.opcode, UInt<3>("h05")) @[Top.scala 53:21]
      when T_5641 : @[Top.scala 53:21]
        node T_5642 = or(T_5575[0], reset) @[Top.scala 53:21]
        node T_5644 = eq(T_5642, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5644 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5645 = or(T_5584, reset) @[Top.scala 53:21]
        node T_5647 = eq(T_5645, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5647 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5648 = or(T_5596, reset) @[Top.scala 53:21]
        node T_5650 = eq(T_5648, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5650 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Top.scala:53:21)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5652 = geq(TLBuffer_1.io.out[0].d.bits.size, UInt<2>("h02")) @[Top.scala 53:21]
        node T_5653 = or(T_5652, reset) @[Top.scala 53:21]
        node T_5655 = eq(T_5653, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5655 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Top.scala:53:21)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5656 = leq(TLBuffer_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_5657 = or(T_5656, reset) @[Top.scala 53:21]
        node T_5659 = eq(T_5657, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5659 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Top.scala:53:21)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5660 = eq(TLBuffer_1.io.out[0].d.bits.opcode, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5660 : @[Top.scala 53:21]
        node T_5661 = or(T_5575[0], reset) @[Top.scala 53:21]
        node T_5663 = eq(T_5661, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5663 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5664 = or(T_5584, reset) @[Top.scala 53:21]
        node T_5666 = eq(T_5664, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5666 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5667 = or(T_5596, reset) @[Top.scala 53:21]
        node T_5669 = eq(T_5667, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5669 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Top.scala:53:21)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5671 = eq(TLBuffer_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5672 = or(T_5671, reset) @[Top.scala 53:21]
        node T_5674 = eq(T_5672, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5674 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5675 = eq(TLBuffer_1.io.out[0].d.bits.opcode, UInt<1>("h01")) @[Top.scala 53:21]
      when T_5675 : @[Top.scala 53:21]
        node T_5676 = or(T_5575[0], reset) @[Top.scala 53:21]
        node T_5678 = eq(T_5676, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5678 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5679 = or(T_5584, reset) @[Top.scala 53:21]
        node T_5681 = eq(T_5679, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5681 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5682 = or(T_5596, reset) @[Top.scala 53:21]
        node T_5684 = eq(T_5682, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5684 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Top.scala:53:21)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5686 = eq(TLBuffer_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5687 = or(T_5686, reset) @[Top.scala 53:21]
        node T_5689 = eq(T_5687, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5689 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5690 = eq(TLBuffer_1.io.out[0].d.bits.opcode, UInt<2>("h02")) @[Top.scala 53:21]
      when T_5690 : @[Top.scala 53:21]
        node T_5691 = or(T_5575[0], reset) @[Top.scala 53:21]
        node T_5693 = eq(T_5691, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5693 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Top.scala:53:21)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5694 = or(T_5584, reset) @[Top.scala 53:21]
        node T_5696 = eq(T_5694, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5696 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Top.scala:53:21)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5697 = or(T_5596, reset) @[Top.scala 53:21]
        node T_5699 = eq(T_5697, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5699 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Top.scala:53:21)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5701 = eq(TLBuffer_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5702 = or(T_5701, reset) @[Top.scala 53:21]
        node T_5704 = eq(T_5702, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5704 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Top.scala:53:21)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        node T_5706 = eq(TLBuffer_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Top.scala 53:21]
        node T_5707 = or(T_5706, reset) @[Top.scala 53:21]
        node T_5709 = eq(T_5707, UInt<1>("h00")) @[Top.scala 53:21]
        when T_5709 : @[Top.scala 53:21]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Top.scala:53:21)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Top.scala 53:21]
          stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
          skip @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    when TLBuffer_1.io.out[0].e.valid : @[Top.scala 53:21]
      node T_5711 = eq(UInt<1>("h01"), TLBuffer_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      node T_5713 = eq(UInt<1>("h00"), TLBuffer_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      wire T_5719 : UInt<1>[2] @[Parameters.scala 220:31]
      T_5719 is invalid @[Parameters.scala 220:31]
      T_5719[0] <= T_5711 @[Parameters.scala 220:31]
      T_5719[1] <= T_5713 @[Parameters.scala 220:31]
      node T_5721 = or(T_5719[0], T_5719[1]) @[Parameters.scala 240:54]
      node T_5722 = or(T_5721, reset) @[Top.scala 53:21]
      node T_5724 = eq(T_5722, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5724 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Top.scala:53:21)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_5726 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_5728 : UInt, clk
    reg T_5730 : UInt, clk
    reg T_5732 : UInt, clk
    reg T_5734 : UInt, clk
    reg T_5736 : UInt, clk
    node T_5738 = neq(T_5726, UInt<1>("h00")) @[Top.scala 53:21]
    node T_5739 = and(TLBuffer_1.io.out[0].a.valid, T_5738) @[Top.scala 53:21]
    when T_5739 : @[Top.scala 53:21]
      node T_5740 = eq(TLBuffer_1.io.out[0].a.bits.opcode, T_5728) @[Top.scala 53:21]
      node T_5741 = or(T_5740, reset) @[Top.scala 53:21]
      node T_5743 = eq(T_5741, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5743 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5744 = eq(TLBuffer_1.io.out[0].a.bits.param, T_5730) @[Top.scala 53:21]
      node T_5745 = or(T_5744, reset) @[Top.scala 53:21]
      node T_5747 = eq(T_5745, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5747 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5748 = eq(TLBuffer_1.io.out[0].a.bits.size, T_5732) @[Top.scala 53:21]
      node T_5749 = or(T_5748, reset) @[Top.scala 53:21]
      node T_5751 = eq(T_5749, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5751 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5752 = eq(TLBuffer_1.io.out[0].a.bits.source, T_5734) @[Top.scala 53:21]
      node T_5753 = or(T_5752, reset) @[Top.scala 53:21]
      node T_5755 = eq(T_5753, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5755 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5756 = eq(TLBuffer_1.io.out[0].a.bits.addr_hi, T_5736) @[Top.scala 53:21]
      node T_5757 = or(T_5756, reset) @[Top.scala 53:21]
      node T_5759 = eq(T_5757, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5759 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    node T_5760 = and(TLBuffer_1.io.out[0].a.ready, TLBuffer_1.io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_5760 : @[Top.scala 53:21]
      node T_5762 = sub(T_5726, UInt<1>("h01")) @[Top.scala 53:21]
      node T_5763 = tail(T_5762, 1) @[Top.scala 53:21]
      T_5726 <= T_5763 @[Top.scala 53:21]
      node T_5765 = eq(T_5726, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5765 : @[Top.scala 53:21]
        node T_5766 = bits(TLBuffer_1.io.out[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_5768 = eq(T_5766, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_5770 = leq(TLBuffer_1.io.out[0].a.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_5772 = bits(TLBuffer_1.io.out[0].a.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_5773 = dshl(UInt<1>("h01"), T_5772) @[OneHot.scala 46:16]
        node T_5774 = bits(T_5773, 8, 0) @[OneHot.scala 46:41]
        node T_5775 = shr(T_5774, 2) @[Edges.scala 209:50]
        node T_5776 = or(T_5775, T_5770) @[Edges.scala 210:29]
        node T_5778 = mux(T_5768, T_5776, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_5780 = sub(T_5778, UInt<1>("h01")) @[Top.scala 53:21]
        node T_5781 = tail(T_5780, 1) @[Top.scala 53:21]
        T_5726 <= T_5781 @[Top.scala 53:21]
        T_5728 <= TLBuffer_1.io.out[0].a.bits.opcode @[Top.scala 53:21]
        T_5730 <= TLBuffer_1.io.out[0].a.bits.param @[Top.scala 53:21]
        T_5732 <= TLBuffer_1.io.out[0].a.bits.size @[Top.scala 53:21]
        T_5734 <= TLBuffer_1.io.out[0].a.bits.source @[Top.scala 53:21]
        T_5736 <= TLBuffer_1.io.out[0].a.bits.addr_hi @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_5783 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_5785 : UInt, clk
    reg T_5787 : UInt, clk
    reg T_5789 : UInt, clk
    reg T_5791 : UInt, clk
    reg T_5793 : UInt, clk
    node T_5795 = neq(T_5783, UInt<1>("h00")) @[Top.scala 53:21]
    node T_5796 = and(TLBuffer_1.io.out[0].b.valid, T_5795) @[Top.scala 53:21]
    when T_5796 : @[Top.scala 53:21]
      node T_5797 = eq(TLBuffer_1.io.out[0].b.bits.opcode, T_5785) @[Top.scala 53:21]
      node T_5798 = or(T_5797, reset) @[Top.scala 53:21]
      node T_5800 = eq(T_5798, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5800 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5801 = eq(TLBuffer_1.io.out[0].b.bits.param, T_5787) @[Top.scala 53:21]
      node T_5802 = or(T_5801, reset) @[Top.scala 53:21]
      node T_5804 = eq(T_5802, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5804 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5805 = eq(TLBuffer_1.io.out[0].b.bits.size, T_5789) @[Top.scala 53:21]
      node T_5806 = or(T_5805, reset) @[Top.scala 53:21]
      node T_5808 = eq(T_5806, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5808 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5809 = eq(TLBuffer_1.io.out[0].b.bits.source, T_5791) @[Top.scala 53:21]
      node T_5810 = or(T_5809, reset) @[Top.scala 53:21]
      node T_5812 = eq(T_5810, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5812 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5813 = eq(TLBuffer_1.io.out[0].b.bits.addr_hi, T_5793) @[Top.scala 53:21]
      node T_5814 = or(T_5813, reset) @[Top.scala 53:21]
      node T_5816 = eq(T_5814, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5816 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    node T_5817 = and(TLBuffer_1.io.out[0].b.ready, TLBuffer_1.io.out[0].b.valid) @[Decoupled.scala 21:42]
    when T_5817 : @[Top.scala 53:21]
      node T_5819 = sub(T_5783, UInt<1>("h01")) @[Top.scala 53:21]
      node T_5820 = tail(T_5819, 1) @[Top.scala 53:21]
      T_5783 <= T_5820 @[Top.scala 53:21]
      node T_5822 = eq(T_5783, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5822 : @[Top.scala 53:21]
        node T_5823 = bits(TLBuffer_1.io.out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_5825 = eq(T_5823, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_5828 = leq(TLBuffer_1.io.out[0].b.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_5830 = bits(TLBuffer_1.io.out[0].b.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_5831 = dshl(UInt<1>("h01"), T_5830) @[OneHot.scala 46:16]
        node T_5832 = bits(T_5831, 8, 0) @[OneHot.scala 46:41]
        node T_5833 = shr(T_5832, 2) @[Edges.scala 209:50]
        node T_5834 = or(T_5833, T_5828) @[Edges.scala 210:29]
        node T_5836 = mux(UInt<1>("h00"), T_5834, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_5838 = sub(T_5836, UInt<1>("h01")) @[Top.scala 53:21]
        node T_5839 = tail(T_5838, 1) @[Top.scala 53:21]
        T_5783 <= T_5839 @[Top.scala 53:21]
        T_5785 <= TLBuffer_1.io.out[0].b.bits.opcode @[Top.scala 53:21]
        T_5787 <= TLBuffer_1.io.out[0].b.bits.param @[Top.scala 53:21]
        T_5789 <= TLBuffer_1.io.out[0].b.bits.size @[Top.scala 53:21]
        T_5791 <= TLBuffer_1.io.out[0].b.bits.source @[Top.scala 53:21]
        T_5793 <= TLBuffer_1.io.out[0].b.bits.addr_hi @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_5841 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_5843 : UInt, clk
    reg T_5845 : UInt, clk
    reg T_5847 : UInt, clk
    reg T_5849 : UInt, clk
    reg T_5851 : UInt, clk
    reg T_5853 : UInt, clk
    node T_5855 = neq(T_5841, UInt<1>("h00")) @[Top.scala 53:21]
    node T_5856 = and(TLBuffer_1.io.out[0].c.valid, T_5855) @[Top.scala 53:21]
    when T_5856 : @[Top.scala 53:21]
      node T_5857 = eq(TLBuffer_1.io.out[0].c.bits.opcode, T_5843) @[Top.scala 53:21]
      node T_5858 = or(T_5857, reset) @[Top.scala 53:21]
      node T_5860 = eq(T_5858, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5860 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5861 = eq(TLBuffer_1.io.out[0].c.bits.param, T_5845) @[Top.scala 53:21]
      node T_5862 = or(T_5861, reset) @[Top.scala 53:21]
      node T_5864 = eq(T_5862, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5864 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5865 = eq(TLBuffer_1.io.out[0].c.bits.size, T_5847) @[Top.scala 53:21]
      node T_5866 = or(T_5865, reset) @[Top.scala 53:21]
      node T_5868 = eq(T_5866, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5868 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5869 = eq(TLBuffer_1.io.out[0].c.bits.source, T_5849) @[Top.scala 53:21]
      node T_5870 = or(T_5869, reset) @[Top.scala 53:21]
      node T_5872 = eq(T_5870, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5872 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5873 = eq(TLBuffer_1.io.out[0].c.bits.addr_hi, T_5851) @[Top.scala 53:21]
      node T_5874 = or(T_5873, reset) @[Top.scala 53:21]
      node T_5876 = eq(T_5874, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5876 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5877 = eq(TLBuffer_1.io.out[0].c.bits.addr_lo, T_5853) @[Top.scala 53:21]
      node T_5878 = or(T_5877, reset) @[Top.scala 53:21]
      node T_5880 = eq(T_5878, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5880 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    node T_5881 = and(TLBuffer_1.io.out[0].c.ready, TLBuffer_1.io.out[0].c.valid) @[Decoupled.scala 21:42]
    when T_5881 : @[Top.scala 53:21]
      node T_5883 = sub(T_5841, UInt<1>("h01")) @[Top.scala 53:21]
      node T_5884 = tail(T_5883, 1) @[Top.scala 53:21]
      T_5841 <= T_5884 @[Top.scala 53:21]
      node T_5886 = eq(T_5841, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5886 : @[Top.scala 53:21]
        node T_5887 = bits(TLBuffer_1.io.out[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_5890 = leq(TLBuffer_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_5892 = bits(TLBuffer_1.io.out[0].c.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_5893 = dshl(UInt<1>("h01"), T_5892) @[OneHot.scala 46:16]
        node T_5894 = bits(T_5893, 8, 0) @[OneHot.scala 46:41]
        node T_5895 = shr(T_5894, 2) @[Edges.scala 209:50]
        node T_5896 = or(T_5895, T_5890) @[Edges.scala 210:29]
        node T_5898 = mux(UInt<1>("h00"), T_5896, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_5900 = sub(T_5898, UInt<1>("h01")) @[Top.scala 53:21]
        node T_5901 = tail(T_5900, 1) @[Top.scala 53:21]
        T_5841 <= T_5901 @[Top.scala 53:21]
        T_5843 <= TLBuffer_1.io.out[0].c.bits.opcode @[Top.scala 53:21]
        T_5845 <= TLBuffer_1.io.out[0].c.bits.param @[Top.scala 53:21]
        T_5847 <= TLBuffer_1.io.out[0].c.bits.size @[Top.scala 53:21]
        T_5849 <= TLBuffer_1.io.out[0].c.bits.source @[Top.scala 53:21]
        T_5851 <= TLBuffer_1.io.out[0].c.bits.addr_hi @[Top.scala 53:21]
        T_5853 <= TLBuffer_1.io.out[0].c.bits.addr_lo @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_5903 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_5905 : UInt, clk
    reg T_5907 : UInt, clk
    reg T_5909 : UInt, clk
    reg T_5911 : UInt, clk
    reg T_5913 : UInt, clk
    reg T_5915 : UInt, clk
    node T_5917 = neq(T_5903, UInt<1>("h00")) @[Top.scala 53:21]
    node T_5918 = and(TLBuffer_1.io.out[0].d.valid, T_5917) @[Top.scala 53:21]
    when T_5918 : @[Top.scala 53:21]
      node T_5919 = eq(TLBuffer_1.io.out[0].d.bits.opcode, T_5905) @[Top.scala 53:21]
      node T_5920 = or(T_5919, reset) @[Top.scala 53:21]
      node T_5922 = eq(T_5920, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5922 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5923 = eq(TLBuffer_1.io.out[0].d.bits.param, T_5907) @[Top.scala 53:21]
      node T_5924 = or(T_5923, reset) @[Top.scala 53:21]
      node T_5926 = eq(T_5924, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5926 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5927 = eq(TLBuffer_1.io.out[0].d.bits.size, T_5909) @[Top.scala 53:21]
      node T_5928 = or(T_5927, reset) @[Top.scala 53:21]
      node T_5930 = eq(T_5928, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5930 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5931 = eq(TLBuffer_1.io.out[0].d.bits.source, T_5911) @[Top.scala 53:21]
      node T_5932 = or(T_5931, reset) @[Top.scala 53:21]
      node T_5934 = eq(T_5932, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5934 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5935 = eq(TLBuffer_1.io.out[0].d.bits.sink, T_5913) @[Top.scala 53:21]
      node T_5936 = or(T_5935, reset) @[Top.scala 53:21]
      node T_5938 = eq(T_5936, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5938 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5939 = eq(TLBuffer_1.io.out[0].d.bits.addr_lo, T_5915) @[Top.scala 53:21]
      node T_5940 = or(T_5939, reset) @[Top.scala 53:21]
      node T_5942 = eq(T_5940, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5942 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Top.scala:53:21)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    node T_5943 = and(TLBuffer_1.io.out[0].d.ready, TLBuffer_1.io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_5943 : @[Top.scala 53:21]
      node T_5945 = sub(T_5903, UInt<1>("h01")) @[Top.scala 53:21]
      node T_5946 = tail(T_5945, 1) @[Top.scala 53:21]
      T_5903 <= T_5946 @[Top.scala 53:21]
      node T_5948 = eq(T_5903, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5948 : @[Top.scala 53:21]
        node T_5949 = bits(TLBuffer_1.io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_5951 = leq(TLBuffer_1.io.out[0].d.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_5953 = bits(TLBuffer_1.io.out[0].d.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_5954 = dshl(UInt<1>("h01"), T_5953) @[OneHot.scala 46:16]
        node T_5955 = bits(T_5954, 8, 0) @[OneHot.scala 46:41]
        node T_5956 = shr(T_5955, 2) @[Edges.scala 209:50]
        node T_5957 = or(T_5956, T_5951) @[Edges.scala 210:29]
        node T_5959 = mux(T_5949, T_5957, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_5961 = sub(T_5959, UInt<1>("h01")) @[Top.scala 53:21]
        node T_5962 = tail(T_5961, 1) @[Top.scala 53:21]
        T_5903 <= T_5962 @[Top.scala 53:21]
        T_5905 <= TLBuffer_1.io.out[0].d.bits.opcode @[Top.scala 53:21]
        T_5907 <= TLBuffer_1.io.out[0].d.bits.param @[Top.scala 53:21]
        T_5909 <= TLBuffer_1.io.out[0].d.bits.size @[Top.scala 53:21]
        T_5911 <= TLBuffer_1.io.out[0].d.bits.source @[Top.scala 53:21]
        T_5913 <= TLBuffer_1.io.out[0].d.bits.sink @[Top.scala 53:21]
        T_5915 <= TLBuffer_1.io.out[0].d.bits.addr_lo @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_5964 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_5964 <= TLBuffer_1.io.out[0].a.valid
    reg T_5966 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_5966 <= TLBuffer_1.io.out[0].a.ready
    reg T_5967 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}, clk
    T_5967 <- TLBuffer_1.io.out[0].a.bits
    node T_5975 = cat(TLBuffer_1.io.out[0].a.bits.addr_hi, TLBuffer_1.io.out[0].a.bits.mask) @[Top.scala 53:21]
    node T_5976 = cat(T_5975, TLBuffer_1.io.out[0].a.bits.data) @[Top.scala 53:21]
    node T_5977 = cat(TLBuffer_1.io.out[0].a.bits.size, TLBuffer_1.io.out[0].a.bits.source) @[Top.scala 53:21]
    node T_5978 = cat(TLBuffer_1.io.out[0].a.bits.opcode, TLBuffer_1.io.out[0].a.bits.param) @[Top.scala 53:21]
    node T_5979 = cat(T_5978, T_5977) @[Top.scala 53:21]
    node T_5980 = cat(T_5979, T_5976) @[Top.scala 53:21]
    node T_5981 = cat(T_5967.addr_hi, T_5967.mask) @[Top.scala 53:21]
    node T_5982 = cat(T_5981, T_5967.data) @[Top.scala 53:21]
    node T_5983 = cat(T_5967.size, T_5967.source) @[Top.scala 53:21]
    node T_5984 = cat(T_5967.opcode, T_5967.param) @[Top.scala 53:21]
    node T_5985 = cat(T_5984, T_5983) @[Top.scala 53:21]
    node T_5986 = cat(T_5985, T_5982) @[Top.scala 53:21]
    node T_5987 = eq(T_5980, T_5986) @[Top.scala 53:21]
    node T_5989 = eq(T_5966, UInt<1>("h00")) @[Top.scala 53:21]
    node T_5990 = and(T_5964, T_5989) @[Top.scala 53:21]
    when T_5990 : @[Top.scala 53:21]
      node T_5991 = or(TLBuffer_1.io.out[0].a.valid, reset) @[Top.scala 53:21]
      node T_5993 = eq(T_5991, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5993 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:21)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_5994 = or(T_5987, reset) @[Top.scala 53:21]
      node T_5996 = eq(T_5994, UInt<1>("h00")) @[Top.scala 53:21]
      when T_5996 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:21)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_5998 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_5998 <= TLBuffer_1.io.out[0].b.valid
    reg T_6000 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_6000 <= TLBuffer_1.io.out[0].b.ready
    reg T_6001 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}, clk
    T_6001 <- TLBuffer_1.io.out[0].b.bits
    node T_6009 = cat(TLBuffer_1.io.out[0].b.bits.addr_hi, TLBuffer_1.io.out[0].b.bits.mask) @[Top.scala 53:21]
    node T_6010 = cat(T_6009, TLBuffer_1.io.out[0].b.bits.data) @[Top.scala 53:21]
    node T_6011 = cat(TLBuffer_1.io.out[0].b.bits.size, TLBuffer_1.io.out[0].b.bits.source) @[Top.scala 53:21]
    node T_6012 = cat(TLBuffer_1.io.out[0].b.bits.opcode, TLBuffer_1.io.out[0].b.bits.param) @[Top.scala 53:21]
    node T_6013 = cat(T_6012, T_6011) @[Top.scala 53:21]
    node T_6014 = cat(T_6013, T_6010) @[Top.scala 53:21]
    node T_6015 = cat(T_6001.addr_hi, T_6001.mask) @[Top.scala 53:21]
    node T_6016 = cat(T_6015, T_6001.data) @[Top.scala 53:21]
    node T_6017 = cat(T_6001.size, T_6001.source) @[Top.scala 53:21]
    node T_6018 = cat(T_6001.opcode, T_6001.param) @[Top.scala 53:21]
    node T_6019 = cat(T_6018, T_6017) @[Top.scala 53:21]
    node T_6020 = cat(T_6019, T_6016) @[Top.scala 53:21]
    node T_6021 = eq(T_6014, T_6020) @[Top.scala 53:21]
    node T_6023 = eq(T_6000, UInt<1>("h00")) @[Top.scala 53:21]
    node T_6024 = and(T_5998, T_6023) @[Top.scala 53:21]
    when T_6024 : @[Top.scala 53:21]
      node T_6025 = or(TLBuffer_1.io.out[0].b.valid, reset) @[Top.scala 53:21]
      node T_6027 = eq(T_6025, UInt<1>("h00")) @[Top.scala 53:21]
      when T_6027 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:21)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_6028 = or(T_6021, reset) @[Top.scala 53:21]
      node T_6030 = eq(T_6028, UInt<1>("h00")) @[Top.scala 53:21]
      when T_6030 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:21)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_6032 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_6032 <= TLBuffer_1.io.out[0].c.valid
    reg T_6034 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_6034 <= TLBuffer_1.io.out[0].c.ready
    reg T_6035 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_6035 <- TLBuffer_1.io.out[0].c.bits
    node T_6044 = cat(TLBuffer_1.io.out[0].c.bits.data, TLBuffer_1.io.out[0].c.bits.error) @[Top.scala 53:21]
    node T_6045 = cat(TLBuffer_1.io.out[0].c.bits.addr_hi, TLBuffer_1.io.out[0].c.bits.addr_lo) @[Top.scala 53:21]
    node T_6046 = cat(T_6045, T_6044) @[Top.scala 53:21]
    node T_6047 = cat(TLBuffer_1.io.out[0].c.bits.size, TLBuffer_1.io.out[0].c.bits.source) @[Top.scala 53:21]
    node T_6048 = cat(TLBuffer_1.io.out[0].c.bits.opcode, TLBuffer_1.io.out[0].c.bits.param) @[Top.scala 53:21]
    node T_6049 = cat(T_6048, T_6047) @[Top.scala 53:21]
    node T_6050 = cat(T_6049, T_6046) @[Top.scala 53:21]
    node T_6051 = cat(T_6035.data, T_6035.error) @[Top.scala 53:21]
    node T_6052 = cat(T_6035.addr_hi, T_6035.addr_lo) @[Top.scala 53:21]
    node T_6053 = cat(T_6052, T_6051) @[Top.scala 53:21]
    node T_6054 = cat(T_6035.size, T_6035.source) @[Top.scala 53:21]
    node T_6055 = cat(T_6035.opcode, T_6035.param) @[Top.scala 53:21]
    node T_6056 = cat(T_6055, T_6054) @[Top.scala 53:21]
    node T_6057 = cat(T_6056, T_6053) @[Top.scala 53:21]
    node T_6058 = eq(T_6050, T_6057) @[Top.scala 53:21]
    node T_6060 = eq(T_6034, UInt<1>("h00")) @[Top.scala 53:21]
    node T_6061 = and(T_6032, T_6060) @[Top.scala 53:21]
    when T_6061 : @[Top.scala 53:21]
      node T_6062 = or(TLBuffer_1.io.out[0].c.valid, reset) @[Top.scala 53:21]
      node T_6064 = eq(T_6062, UInt<1>("h00")) @[Top.scala 53:21]
      when T_6064 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:21)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_6065 = or(T_6058, reset) @[Top.scala 53:21]
      node T_6067 = eq(T_6065, UInt<1>("h00")) @[Top.scala 53:21]
      when T_6067 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:21)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_6069 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_6069 <= TLBuffer_1.io.out[0].d.valid
    reg T_6071 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_6071 <= TLBuffer_1.io.out[0].d.ready
    reg T_6072 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_6072 <- TLBuffer_1.io.out[0].d.bits
    node T_6081 = cat(TLBuffer_1.io.out[0].d.bits.data, TLBuffer_1.io.out[0].d.bits.error) @[Top.scala 53:21]
    node T_6082 = cat(TLBuffer_1.io.out[0].d.bits.sink, TLBuffer_1.io.out[0].d.bits.addr_lo) @[Top.scala 53:21]
    node T_6083 = cat(T_6082, T_6081) @[Top.scala 53:21]
    node T_6084 = cat(TLBuffer_1.io.out[0].d.bits.size, TLBuffer_1.io.out[0].d.bits.source) @[Top.scala 53:21]
    node T_6085 = cat(TLBuffer_1.io.out[0].d.bits.opcode, TLBuffer_1.io.out[0].d.bits.param) @[Top.scala 53:21]
    node T_6086 = cat(T_6085, T_6084) @[Top.scala 53:21]
    node T_6087 = cat(T_6086, T_6083) @[Top.scala 53:21]
    node T_6088 = cat(T_6072.data, T_6072.error) @[Top.scala 53:21]
    node T_6089 = cat(T_6072.sink, T_6072.addr_lo) @[Top.scala 53:21]
    node T_6090 = cat(T_6089, T_6088) @[Top.scala 53:21]
    node T_6091 = cat(T_6072.size, T_6072.source) @[Top.scala 53:21]
    node T_6092 = cat(T_6072.opcode, T_6072.param) @[Top.scala 53:21]
    node T_6093 = cat(T_6092, T_6091) @[Top.scala 53:21]
    node T_6094 = cat(T_6093, T_6090) @[Top.scala 53:21]
    node T_6095 = eq(T_6087, T_6094) @[Top.scala 53:21]
    node T_6097 = eq(T_6071, UInt<1>("h00")) @[Top.scala 53:21]
    node T_6098 = and(T_6069, T_6097) @[Top.scala 53:21]
    when T_6098 : @[Top.scala 53:21]
      node T_6099 = or(TLBuffer_1.io.out[0].d.valid, reset) @[Top.scala 53:21]
      node T_6101 = eq(T_6099, UInt<1>("h00")) @[Top.scala 53:21]
      when T_6101 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:21)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_6102 = or(T_6095, reset) @[Top.scala 53:21]
      node T_6104 = eq(T_6102, UInt<1>("h00")) @[Top.scala 53:21]
      when T_6104 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:21)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    reg T_6106 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_6106 <= TLBuffer_1.io.out[0].e.valid
    reg T_6108 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_6108 <= TLBuffer_1.io.out[0].e.ready
    reg T_6109 : {sink : UInt<1>}, clk
    T_6109 <- TLBuffer_1.io.out[0].e.bits
    node T_6111 = eq(TLBuffer_1.io.out[0].e.bits.sink, T_6109.sink) @[Top.scala 53:21]
    node T_6113 = eq(T_6108, UInt<1>("h00")) @[Top.scala 53:21]
    node T_6114 = and(T_6106, T_6113) @[Top.scala 53:21]
    when T_6114 : @[Top.scala 53:21]
      node T_6115 = or(TLBuffer_1.io.out[0].e.valid, reset) @[Top.scala 53:21]
      node T_6117 = eq(T_6115, UInt<1>("h00")) @[Top.scala 53:21]
      when T_6117 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Top.scala:53:21)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      node T_6118 = or(T_6111, reset) @[Top.scala 53:21]
      node T_6120 = eq(T_6118, UInt<1>("h00")) @[Top.scala 53:21]
      when T_6120 : @[Top.scala 53:21]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Top.scala:53:21)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Top.scala 53:21]
        stop(clk, UInt<1>(1), 1) @[Top.scala 53:21]
        skip @[Top.scala 53:21]
      skip @[Top.scala 53:21]
    TLXbar_1.io.in[0] <- TLBuffer_1.io.out[0] @[Top.scala 53:21]
    when TLXbar_1.io.out[0].a.valid : @[Periphery.scala 315:27]
      node T_6121 = leq(TLXbar_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_6122 = or(T_6121, reset) @[Periphery.scala 315:27]
      node T_6124 = eq(T_6122, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_6124 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Periphery.scala:315:27)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6126 = xor(UInt<1>("h00"), TLXbar_1.io.out[0].a.bits.source) @[Parameters.scala 37:23]
      node T_6127 = not(T_6126) @[Parameters.scala 37:9]
      node T_6129 = or(T_6127, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_6130 = not(T_6129) @[Parameters.scala 37:7]
      node T_6132 = eq(T_6130, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_6138 : UInt<1>[1] @[Parameters.scala 326:27]
      T_6138 is invalid @[Parameters.scala 326:27]
      T_6138[0] <= T_6132 @[Parameters.scala 326:27]
      node T_6141 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_6142 = dshl(T_6141, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_6143 = bits(T_6142, 7, 0) @[package.scala 11:76]
      node T_6144 = not(T_6143) @[package.scala 11:40]
      node T_6145 = shr(T_6144, 2) @[Edges.scala 15:47]
      node T_6146 = and(TLXbar_1.io.out[0].a.bits.addr_hi, T_6145) @[Edges.scala 16:16]
      node T_6148 = eq(T_6146, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_6150 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_6151 = dshl(T_6150, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_6152 = bits(T_6151, 1, 0) @[package.scala 11:76]
      node T_6153 = not(T_6152) @[package.scala 11:40]
      node T_6154 = bits(TLXbar_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_6155 = bits(TLXbar_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_6157 = neq(T_6155, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_6159 = eq(T_6157, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_6160 = or(T_6154, T_6155) @[Edges.scala 63:32]
      node T_6161 = bits(T_6160, 0, 0) @[Edges.scala 58:14]
      node T_6162 = not(T_6161) @[Edges.scala 58:9]
      node T_6163 = cat(T_6159, T_6162) @[Cat.scala 20:58]
      node T_6164 = not(T_6153) @[Edges.scala 66:39]
      node T_6165 = and(T_6163, T_6164) @[Edges.scala 66:37]
      node T_6167 = bits(TLXbar_1.io.out[0].a.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_6168 = dshl(UInt<1>("h01"), T_6167) @[OneHot.scala 46:16]
      node T_6169 = bits(T_6168, 1, 0) @[OneHot.scala 46:41]
      node T_6171 = geq(TLXbar_1.io.out[0].a.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_6173 = bits(T_6169, 1, 1) @[Edges.scala 36:26]
      node T_6174 = bits(T_6165, 1, 1) @[Edges.scala 37:26]
      node T_6176 = eq(T_6174, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_6177 = and(UInt<1>("h01"), T_6176) @[Edges.scala 41:27]
      node T_6178 = and(T_6173, T_6177) @[Edges.scala 42:38]
      node T_6179 = or(T_6171, T_6178) @[Edges.scala 42:29]
      node T_6180 = and(UInt<1>("h01"), T_6174) @[Edges.scala 41:27]
      node T_6181 = and(T_6173, T_6180) @[Edges.scala 42:38]
      node T_6182 = or(T_6171, T_6181) @[Edges.scala 42:29]
      node T_6183 = bits(T_6169, 0, 0) @[Edges.scala 36:26]
      node T_6184 = bits(T_6165, 0, 0) @[Edges.scala 37:26]
      node T_6186 = eq(T_6184, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_6187 = and(T_6177, T_6186) @[Edges.scala 41:27]
      node T_6188 = and(T_6183, T_6187) @[Edges.scala 42:38]
      node T_6189 = or(T_6179, T_6188) @[Edges.scala 42:29]
      node T_6190 = and(T_6177, T_6184) @[Edges.scala 41:27]
      node T_6191 = and(T_6183, T_6190) @[Edges.scala 42:38]
      node T_6192 = or(T_6179, T_6191) @[Edges.scala 42:29]
      node T_6193 = and(T_6180, T_6186) @[Edges.scala 41:27]
      node T_6194 = and(T_6183, T_6193) @[Edges.scala 42:38]
      node T_6195 = or(T_6182, T_6194) @[Edges.scala 42:29]
      node T_6196 = and(T_6180, T_6184) @[Edges.scala 41:27]
      node T_6197 = and(T_6183, T_6196) @[Edges.scala 42:38]
      node T_6198 = or(T_6182, T_6197) @[Edges.scala 42:29]
      node T_6199 = cat(T_6192, T_6189) @[Cat.scala 20:58]
      node T_6200 = cat(T_6198, T_6195) @[Cat.scala 20:58]
      node T_6201 = cat(T_6200, T_6199) @[Cat.scala 20:58]
      node T_6202 = eq(TLXbar_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Periphery.scala 315:27]
      when T_6202 : @[Periphery.scala 315:27]
        node T_6204 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_6205 = dshl(T_6204, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_6206 = bits(T_6205, 1, 0) @[package.scala 11:76]
        node T_6207 = not(T_6206) @[package.scala 11:40]
        node T_6208 = bits(TLXbar_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_6209 = bits(TLXbar_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_6211 = neq(T_6209, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_6213 = eq(T_6211, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_6214 = or(T_6208, T_6209) @[Edges.scala 63:32]
        node T_6215 = bits(T_6214, 0, 0) @[Edges.scala 58:14]
        node T_6216 = not(T_6215) @[Edges.scala 58:9]
        node T_6217 = cat(T_6213, T_6216) @[Cat.scala 20:58]
        node T_6218 = not(T_6207) @[Edges.scala 66:39]
        node T_6219 = and(T_6217, T_6218) @[Edges.scala 66:37]
        node T_6220 = cat(TLXbar_1.io.out[0].a.bits.addr_hi, T_6219) @[Cat.scala 20:58]
        node T_6222 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6224 = eq(T_6222, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6224 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6225 = or(T_6138[0], reset) @[Periphery.scala 315:27]
        node T_6227 = eq(T_6225, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6227 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6229 = geq(TLXbar_1.io.out[0].a.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_6230 = or(T_6229, reset) @[Periphery.scala 315:27]
        node T_6232 = eq(T_6230, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6232 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6233 = or(T_6148, reset) @[Periphery.scala 315:27]
        node T_6235 = eq(T_6233, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6235 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6236 = leq(TLXbar_1.io.out[0].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_6237 = or(T_6236, reset) @[Periphery.scala 315:27]
        node T_6239 = eq(T_6237, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6239 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Periphery.scala:315:27)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6240 = not(TLXbar_1.io.out[0].a.bits.mask) @[Periphery.scala 315:27]
        node T_6242 = eq(T_6240, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6243 = or(T_6242, reset) @[Periphery.scala 315:27]
        node T_6245 = eq(T_6243, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6245 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6246 = eq(TLXbar_1.io.out[0].a.bits.opcode, UInt<3>("h04")) @[Periphery.scala 315:27]
      when T_6246 : @[Periphery.scala 315:27]
        node T_6248 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_6249 = dshl(T_6248, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_6250 = bits(T_6249, 1, 0) @[package.scala 11:76]
        node T_6251 = not(T_6250) @[package.scala 11:40]
        node T_6252 = bits(TLXbar_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_6253 = bits(TLXbar_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_6255 = neq(T_6253, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_6257 = eq(T_6255, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_6258 = or(T_6252, T_6253) @[Edges.scala 63:32]
        node T_6259 = bits(T_6258, 0, 0) @[Edges.scala 58:14]
        node T_6260 = not(T_6259) @[Edges.scala 58:9]
        node T_6261 = cat(T_6257, T_6260) @[Cat.scala 20:58]
        node T_6262 = not(T_6251) @[Edges.scala 66:39]
        node T_6263 = and(T_6261, T_6262) @[Edges.scala 66:37]
        node T_6264 = cat(TLXbar_1.io.out[0].a.bits.addr_hi, T_6263) @[Cat.scala 20:58]
        node T_6266 = leq(UInt<1>("h00"), TLXbar_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_6268 = leq(TLXbar_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_6269 = and(T_6266, T_6268) @[Parameters.scala 61:37]
        node T_6270 = or(T_6269, reset) @[Periphery.scala 315:27]
        node T_6272 = eq(T_6270, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6272 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6273 = or(T_6138[0], reset) @[Periphery.scala 315:27]
        node T_6275 = eq(T_6273, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6275 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6276 = or(T_6148, reset) @[Periphery.scala 315:27]
        node T_6278 = eq(T_6276, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6278 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6280 = eq(TLXbar_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6281 = or(T_6280, reset) @[Periphery.scala 315:27]
        node T_6283 = eq(T_6281, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6283 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6284 = eq(TLXbar_1.io.out[0].a.bits.mask, T_6201) @[Periphery.scala 315:27]
        node T_6285 = or(T_6284, reset) @[Periphery.scala 315:27]
        node T_6287 = eq(T_6285, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6287 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6288 = eq(TLXbar_1.io.out[0].a.bits.opcode, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_6288 : @[Periphery.scala 315:27]
        node T_6290 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_6291 = dshl(T_6290, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_6292 = bits(T_6291, 1, 0) @[package.scala 11:76]
        node T_6293 = not(T_6292) @[package.scala 11:40]
        node T_6294 = bits(TLXbar_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_6295 = bits(TLXbar_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_6297 = neq(T_6295, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_6299 = eq(T_6297, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_6300 = or(T_6294, T_6295) @[Edges.scala 63:32]
        node T_6301 = bits(T_6300, 0, 0) @[Edges.scala 58:14]
        node T_6302 = not(T_6301) @[Edges.scala 58:9]
        node T_6303 = cat(T_6299, T_6302) @[Cat.scala 20:58]
        node T_6304 = not(T_6293) @[Edges.scala 66:39]
        node T_6305 = and(T_6303, T_6304) @[Edges.scala 66:37]
        node T_6306 = cat(TLXbar_1.io.out[0].a.bits.addr_hi, T_6305) @[Cat.scala 20:58]
        node T_6308 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6310 = eq(T_6308, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6310 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6311 = or(T_6138[0], reset) @[Periphery.scala 315:27]
        node T_6313 = eq(T_6311, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6313 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6314 = or(T_6148, reset) @[Periphery.scala 315:27]
        node T_6316 = eq(T_6314, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6316 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6318 = eq(TLXbar_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6319 = or(T_6318, reset) @[Periphery.scala 315:27]
        node T_6321 = eq(T_6319, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6321 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6322 = eq(TLXbar_1.io.out[0].a.bits.mask, T_6201) @[Periphery.scala 315:27]
        node T_6323 = or(T_6322, reset) @[Periphery.scala 315:27]
        node T_6325 = eq(T_6323, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6325 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6326 = eq(TLXbar_1.io.out[0].a.bits.opcode, UInt<1>("h01")) @[Periphery.scala 315:27]
      when T_6326 : @[Periphery.scala 315:27]
        node T_6328 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_6329 = dshl(T_6328, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_6330 = bits(T_6329, 1, 0) @[package.scala 11:76]
        node T_6331 = not(T_6330) @[package.scala 11:40]
        node T_6332 = bits(TLXbar_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_6333 = bits(TLXbar_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_6335 = neq(T_6333, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_6337 = eq(T_6335, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_6338 = or(T_6332, T_6333) @[Edges.scala 63:32]
        node T_6339 = bits(T_6338, 0, 0) @[Edges.scala 58:14]
        node T_6340 = not(T_6339) @[Edges.scala 58:9]
        node T_6341 = cat(T_6337, T_6340) @[Cat.scala 20:58]
        node T_6342 = not(T_6331) @[Edges.scala 66:39]
        node T_6343 = and(T_6341, T_6342) @[Edges.scala 66:37]
        node T_6344 = cat(TLXbar_1.io.out[0].a.bits.addr_hi, T_6343) @[Cat.scala 20:58]
        node T_6346 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6348 = eq(T_6346, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6348 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6349 = or(T_6138[0], reset) @[Periphery.scala 315:27]
        node T_6351 = eq(T_6349, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6351 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6352 = or(T_6148, reset) @[Periphery.scala 315:27]
        node T_6354 = eq(T_6352, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6354 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6356 = eq(TLXbar_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6357 = or(T_6356, reset) @[Periphery.scala 315:27]
        node T_6359 = eq(T_6357, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6359 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6360 = not(T_6201) @[Periphery.scala 315:27]
        node T_6361 = and(TLXbar_1.io.out[0].a.bits.mask, T_6360) @[Periphery.scala 315:27]
        node T_6363 = eq(T_6361, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6364 = or(T_6363, reset) @[Periphery.scala 315:27]
        node T_6366 = eq(T_6364, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6366 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6367 = eq(TLXbar_1.io.out[0].a.bits.opcode, UInt<2>("h02")) @[Periphery.scala 315:27]
      when T_6367 : @[Periphery.scala 315:27]
        node T_6369 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_6370 = dshl(T_6369, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_6371 = bits(T_6370, 1, 0) @[package.scala 11:76]
        node T_6372 = not(T_6371) @[package.scala 11:40]
        node T_6373 = bits(TLXbar_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_6374 = bits(TLXbar_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_6376 = neq(T_6374, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_6378 = eq(T_6376, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_6379 = or(T_6373, T_6374) @[Edges.scala 63:32]
        node T_6380 = bits(T_6379, 0, 0) @[Edges.scala 58:14]
        node T_6381 = not(T_6380) @[Edges.scala 58:9]
        node T_6382 = cat(T_6378, T_6381) @[Cat.scala 20:58]
        node T_6383 = not(T_6372) @[Edges.scala 66:39]
        node T_6384 = and(T_6382, T_6383) @[Edges.scala 66:37]
        node T_6385 = cat(TLXbar_1.io.out[0].a.bits.addr_hi, T_6384) @[Cat.scala 20:58]
        node T_6387 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6389 = eq(T_6387, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6389 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6390 = or(T_6138[0], reset) @[Periphery.scala 315:27]
        node T_6392 = eq(T_6390, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6392 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6393 = or(T_6148, reset) @[Periphery.scala 315:27]
        node T_6395 = eq(T_6393, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6395 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6396 = leq(TLXbar_1.io.out[0].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_6397 = or(T_6396, reset) @[Periphery.scala 315:27]
        node T_6399 = eq(T_6397, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6399 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:315:27)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6400 = eq(TLXbar_1.io.out[0].a.bits.mask, T_6201) @[Periphery.scala 315:27]
        node T_6401 = or(T_6400, reset) @[Periphery.scala 315:27]
        node T_6403 = eq(T_6401, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6403 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6404 = eq(TLXbar_1.io.out[0].a.bits.opcode, UInt<2>("h03")) @[Periphery.scala 315:27]
      when T_6404 : @[Periphery.scala 315:27]
        node T_6406 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_6407 = dshl(T_6406, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_6408 = bits(T_6407, 1, 0) @[package.scala 11:76]
        node T_6409 = not(T_6408) @[package.scala 11:40]
        node T_6410 = bits(TLXbar_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_6411 = bits(TLXbar_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_6413 = neq(T_6411, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_6415 = eq(T_6413, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_6416 = or(T_6410, T_6411) @[Edges.scala 63:32]
        node T_6417 = bits(T_6416, 0, 0) @[Edges.scala 58:14]
        node T_6418 = not(T_6417) @[Edges.scala 58:9]
        node T_6419 = cat(T_6415, T_6418) @[Cat.scala 20:58]
        node T_6420 = not(T_6409) @[Edges.scala 66:39]
        node T_6421 = and(T_6419, T_6420) @[Edges.scala 66:37]
        node T_6422 = cat(TLXbar_1.io.out[0].a.bits.addr_hi, T_6421) @[Cat.scala 20:58]
        node T_6424 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6426 = eq(T_6424, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6426 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6427 = or(T_6138[0], reset) @[Periphery.scala 315:27]
        node T_6429 = eq(T_6427, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6429 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6430 = or(T_6148, reset) @[Periphery.scala 315:27]
        node T_6432 = eq(T_6430, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6432 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6433 = leq(TLXbar_1.io.out[0].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_6434 = or(T_6433, reset) @[Periphery.scala 315:27]
        node T_6436 = eq(T_6434, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6436 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Periphery.scala:315:27)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6437 = eq(TLXbar_1.io.out[0].a.bits.mask, T_6201) @[Periphery.scala 315:27]
        node T_6438 = or(T_6437, reset) @[Periphery.scala 315:27]
        node T_6440 = eq(T_6438, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6440 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6441 = eq(TLXbar_1.io.out[0].a.bits.opcode, UInt<3>("h05")) @[Periphery.scala 315:27]
      when T_6441 : @[Periphery.scala 315:27]
        node T_6443 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_6444 = dshl(T_6443, TLXbar_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_6445 = bits(T_6444, 1, 0) @[package.scala 11:76]
        node T_6446 = not(T_6445) @[package.scala 11:40]
        node T_6447 = bits(TLXbar_1.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_6448 = bits(TLXbar_1.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_6450 = neq(T_6448, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_6452 = eq(T_6450, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_6453 = or(T_6447, T_6448) @[Edges.scala 63:32]
        node T_6454 = bits(T_6453, 0, 0) @[Edges.scala 58:14]
        node T_6455 = not(T_6454) @[Edges.scala 58:9]
        node T_6456 = cat(T_6452, T_6455) @[Cat.scala 20:58]
        node T_6457 = not(T_6446) @[Edges.scala 66:39]
        node T_6458 = and(T_6456, T_6457) @[Edges.scala 66:37]
        node T_6459 = cat(TLXbar_1.io.out[0].a.bits.addr_hi, T_6458) @[Cat.scala 20:58]
        node T_6461 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6463 = eq(T_6461, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6463 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6464 = or(T_6138[0], reset) @[Periphery.scala 315:27]
        node T_6466 = eq(T_6464, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6466 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6467 = or(T_6148, reset) @[Periphery.scala 315:27]
        node T_6469 = eq(T_6467, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6469 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6470 = eq(TLXbar_1.io.out[0].a.bits.mask, T_6201) @[Periphery.scala 315:27]
        node T_6471 = or(T_6470, reset) @[Periphery.scala 315:27]
        node T_6473 = eq(T_6471, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6473 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    when TLXbar_1.io.out[0].b.valid : @[Periphery.scala 315:27]
      node T_6474 = leq(TLXbar_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_6475 = or(T_6474, reset) @[Periphery.scala 315:27]
      node T_6477 = eq(T_6475, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_6477 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Periphery.scala:315:27)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6479 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_6480 = dshl(T_6479, TLXbar_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_6481 = bits(T_6480, 1, 0) @[package.scala 11:76]
      node T_6482 = not(T_6481) @[package.scala 11:40]
      node T_6483 = bits(TLXbar_1.io.out[0].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_6484 = bits(TLXbar_1.io.out[0].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_6486 = neq(T_6484, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_6488 = eq(T_6486, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_6489 = or(T_6483, T_6484) @[Edges.scala 63:32]
      node T_6490 = bits(T_6489, 0, 0) @[Edges.scala 58:14]
      node T_6491 = not(T_6490) @[Edges.scala 58:9]
      node T_6492 = cat(T_6488, T_6491) @[Cat.scala 20:58]
      node T_6493 = not(T_6482) @[Edges.scala 66:39]
      node T_6494 = and(T_6492, T_6493) @[Edges.scala 66:37]
      node T_6495 = cat(TLXbar_1.io.out[0].b.bits.addr_hi, T_6494) @[Cat.scala 20:58]
      node T_6497 = xor(T_6495, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_6498 = cvt(T_6497) @[Parameters.scala 89:49]
      node T_6500 = and(T_6498, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_6501 = asSInt(T_6500) @[Parameters.scala 89:52]
      node T_6503 = eq(T_6501, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_6509 : UInt<1>[1] @[Parameters.scala 227:36]
      T_6509 is invalid @[Parameters.scala 227:36]
      T_6509[0] <= T_6503 @[Parameters.scala 227:36]
      node T_6512 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_6513 = dshl(T_6512, TLXbar_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_6514 = bits(T_6513, 7, 0) @[package.scala 11:76]
      node T_6515 = not(T_6514) @[package.scala 11:40]
      node T_6516 = shr(T_6515, 2) @[Edges.scala 15:47]
      node T_6517 = and(TLXbar_1.io.out[0].b.bits.addr_hi, T_6516) @[Edges.scala 16:16]
      node T_6519 = eq(T_6517, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_6521 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_6522 = dshl(T_6521, TLXbar_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_6523 = bits(T_6522, 1, 0) @[package.scala 11:76]
      node T_6524 = not(T_6523) @[package.scala 11:40]
      node T_6525 = bits(TLXbar_1.io.out[0].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_6526 = bits(TLXbar_1.io.out[0].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_6528 = neq(T_6526, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_6530 = eq(T_6528, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_6531 = or(T_6525, T_6526) @[Edges.scala 63:32]
      node T_6532 = bits(T_6531, 0, 0) @[Edges.scala 58:14]
      node T_6533 = not(T_6532) @[Edges.scala 58:9]
      node T_6534 = cat(T_6530, T_6533) @[Cat.scala 20:58]
      node T_6535 = not(T_6524) @[Edges.scala 66:39]
      node T_6536 = and(T_6534, T_6535) @[Edges.scala 66:37]
      node T_6538 = bits(TLXbar_1.io.out[0].b.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_6539 = dshl(UInt<1>("h01"), T_6538) @[OneHot.scala 46:16]
      node T_6540 = bits(T_6539, 1, 0) @[OneHot.scala 46:41]
      node T_6542 = geq(TLXbar_1.io.out[0].b.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_6544 = bits(T_6540, 1, 1) @[Edges.scala 36:26]
      node T_6545 = bits(T_6536, 1, 1) @[Edges.scala 37:26]
      node T_6547 = eq(T_6545, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_6548 = and(UInt<1>("h01"), T_6547) @[Edges.scala 41:27]
      node T_6549 = and(T_6544, T_6548) @[Edges.scala 42:38]
      node T_6550 = or(T_6542, T_6549) @[Edges.scala 42:29]
      node T_6551 = and(UInt<1>("h01"), T_6545) @[Edges.scala 41:27]
      node T_6552 = and(T_6544, T_6551) @[Edges.scala 42:38]
      node T_6553 = or(T_6542, T_6552) @[Edges.scala 42:29]
      node T_6554 = bits(T_6540, 0, 0) @[Edges.scala 36:26]
      node T_6555 = bits(T_6536, 0, 0) @[Edges.scala 37:26]
      node T_6557 = eq(T_6555, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_6558 = and(T_6548, T_6557) @[Edges.scala 41:27]
      node T_6559 = and(T_6554, T_6558) @[Edges.scala 42:38]
      node T_6560 = or(T_6550, T_6559) @[Edges.scala 42:29]
      node T_6561 = and(T_6548, T_6555) @[Edges.scala 41:27]
      node T_6562 = and(T_6554, T_6561) @[Edges.scala 42:38]
      node T_6563 = or(T_6550, T_6562) @[Edges.scala 42:29]
      node T_6564 = and(T_6551, T_6557) @[Edges.scala 41:27]
      node T_6565 = and(T_6554, T_6564) @[Edges.scala 42:38]
      node T_6566 = or(T_6553, T_6565) @[Edges.scala 42:29]
      node T_6567 = and(T_6551, T_6555) @[Edges.scala 41:27]
      node T_6568 = and(T_6554, T_6567) @[Edges.scala 42:38]
      node T_6569 = or(T_6553, T_6568) @[Edges.scala 42:29]
      node T_6570 = cat(T_6563, T_6560) @[Cat.scala 20:58]
      node T_6571 = cat(T_6569, T_6566) @[Cat.scala 20:58]
      node T_6572 = cat(T_6571, T_6570) @[Cat.scala 20:58]
      node T_6573 = eq(TLXbar_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Periphery.scala 315:27]
      when T_6573 : @[Periphery.scala 315:27]
        node T_6575 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6577 = eq(T_6575, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6577 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Periphery.scala:315:27)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6578 = or(T_6509[0], reset) @[Periphery.scala 315:27]
        node T_6580 = eq(T_6578, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6580 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6582 = geq(TLXbar_1.io.out[0].b.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_6583 = or(T_6582, reset) @[Periphery.scala 315:27]
        node T_6585 = eq(T_6583, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6585 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6586 = or(T_6519, reset) @[Periphery.scala 315:27]
        node T_6588 = eq(T_6586, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6588 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6589 = leq(TLXbar_1.io.out[0].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_6590 = or(T_6589, reset) @[Periphery.scala 315:27]
        node T_6592 = eq(T_6590, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6592 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Periphery.scala:315:27)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6593 = not(TLXbar_1.io.out[0].b.bits.mask) @[Periphery.scala 315:27]
        node T_6595 = eq(T_6593, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6596 = or(T_6595, reset) @[Periphery.scala 315:27]
        node T_6598 = eq(T_6596, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6598 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6599 = eq(TLXbar_1.io.out[0].b.bits.opcode, UInt<3>("h04")) @[Periphery.scala 315:27]
      when T_6599 : @[Periphery.scala 315:27]
        node T_6601 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6603 = eq(T_6601, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6603 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Periphery.scala:315:27)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6604 = or(T_6509[0], reset) @[Periphery.scala 315:27]
        node T_6606 = eq(T_6604, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6606 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6607 = or(T_6519, reset) @[Periphery.scala 315:27]
        node T_6609 = eq(T_6607, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6609 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6611 = eq(TLXbar_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6612 = or(T_6611, reset) @[Periphery.scala 315:27]
        node T_6614 = eq(T_6612, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6614 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6615 = eq(TLXbar_1.io.out[0].b.bits.mask, T_6572) @[Periphery.scala 315:27]
        node T_6616 = or(T_6615, reset) @[Periphery.scala 315:27]
        node T_6618 = eq(T_6616, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6618 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6619 = eq(TLXbar_1.io.out[0].b.bits.opcode, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_6619 : @[Periphery.scala 315:27]
        node T_6621 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6623 = eq(T_6621, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6623 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Periphery.scala:315:27)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6624 = or(T_6509[0], reset) @[Periphery.scala 315:27]
        node T_6626 = eq(T_6624, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6626 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6627 = or(T_6519, reset) @[Periphery.scala 315:27]
        node T_6629 = eq(T_6627, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6629 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6631 = eq(TLXbar_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6632 = or(T_6631, reset) @[Periphery.scala 315:27]
        node T_6634 = eq(T_6632, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6634 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6635 = eq(TLXbar_1.io.out[0].b.bits.mask, T_6572) @[Periphery.scala 315:27]
        node T_6636 = or(T_6635, reset) @[Periphery.scala 315:27]
        node T_6638 = eq(T_6636, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6638 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6639 = eq(TLXbar_1.io.out[0].b.bits.opcode, UInt<1>("h01")) @[Periphery.scala 315:27]
      when T_6639 : @[Periphery.scala 315:27]
        node T_6641 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6643 = eq(T_6641, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6643 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Periphery.scala:315:27)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6644 = or(T_6509[0], reset) @[Periphery.scala 315:27]
        node T_6646 = eq(T_6644, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6646 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6647 = or(T_6519, reset) @[Periphery.scala 315:27]
        node T_6649 = eq(T_6647, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6649 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6651 = eq(TLXbar_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6652 = or(T_6651, reset) @[Periphery.scala 315:27]
        node T_6654 = eq(T_6652, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6654 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6655 = not(T_6572) @[Periphery.scala 315:27]
        node T_6656 = and(TLXbar_1.io.out[0].b.bits.mask, T_6655) @[Periphery.scala 315:27]
        node T_6658 = eq(T_6656, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6659 = or(T_6658, reset) @[Periphery.scala 315:27]
        node T_6661 = eq(T_6659, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6661 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6662 = eq(TLXbar_1.io.out[0].b.bits.opcode, UInt<2>("h02")) @[Periphery.scala 315:27]
      when T_6662 : @[Periphery.scala 315:27]
        node T_6664 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6666 = eq(T_6664, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6666 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Periphery.scala:315:27)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6667 = or(T_6509[0], reset) @[Periphery.scala 315:27]
        node T_6669 = eq(T_6667, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6669 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6670 = or(T_6519, reset) @[Periphery.scala 315:27]
        node T_6672 = eq(T_6670, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6672 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6673 = leq(TLXbar_1.io.out[0].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_6674 = or(T_6673, reset) @[Periphery.scala 315:27]
        node T_6676 = eq(T_6674, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6676 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:315:27)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6677 = eq(TLXbar_1.io.out[0].b.bits.mask, T_6572) @[Periphery.scala 315:27]
        node T_6678 = or(T_6677, reset) @[Periphery.scala 315:27]
        node T_6680 = eq(T_6678, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6680 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6681 = eq(TLXbar_1.io.out[0].b.bits.opcode, UInt<2>("h03")) @[Periphery.scala 315:27]
      when T_6681 : @[Periphery.scala 315:27]
        node T_6683 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6685 = eq(T_6683, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6685 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Periphery.scala:315:27)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6686 = or(T_6509[0], reset) @[Periphery.scala 315:27]
        node T_6688 = eq(T_6686, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6688 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6689 = or(T_6519, reset) @[Periphery.scala 315:27]
        node T_6691 = eq(T_6689, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6691 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6692 = leq(TLXbar_1.io.out[0].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_6693 = or(T_6692, reset) @[Periphery.scala 315:27]
        node T_6695 = eq(T_6693, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6695 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Periphery.scala:315:27)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6696 = eq(TLXbar_1.io.out[0].b.bits.mask, T_6572) @[Periphery.scala 315:27]
        node T_6697 = or(T_6696, reset) @[Periphery.scala 315:27]
        node T_6699 = eq(T_6697, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6699 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6700 = eq(TLXbar_1.io.out[0].b.bits.opcode, UInt<3>("h05")) @[Periphery.scala 315:27]
      when T_6700 : @[Periphery.scala 315:27]
        node T_6702 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6704 = eq(T_6702, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6704 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Periphery.scala:315:27)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6705 = or(T_6509[0], reset) @[Periphery.scala 315:27]
        node T_6707 = eq(T_6705, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6707 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6708 = or(T_6519, reset) @[Periphery.scala 315:27]
        node T_6710 = eq(T_6708, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6710 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6711 = eq(TLXbar_1.io.out[0].b.bits.mask, T_6572) @[Periphery.scala 315:27]
        node T_6712 = or(T_6711, reset) @[Periphery.scala 315:27]
        node T_6714 = eq(T_6712, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6714 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Periphery.scala:315:27)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    when TLXbar_1.io.out[0].c.valid : @[Periphery.scala 315:27]
      node T_6715 = leq(TLXbar_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_6716 = or(T_6715, reset) @[Periphery.scala 315:27]
      node T_6718 = eq(T_6716, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_6718 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Periphery.scala:315:27)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6720 = xor(UInt<1>("h00"), TLXbar_1.io.out[0].c.bits.source) @[Parameters.scala 37:23]
      node T_6721 = not(T_6720) @[Parameters.scala 37:9]
      node T_6723 = or(T_6721, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_6724 = not(T_6723) @[Parameters.scala 37:7]
      node T_6726 = eq(T_6724, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_6732 : UInt<1>[1] @[Parameters.scala 326:27]
      T_6732 is invalid @[Parameters.scala 326:27]
      T_6732[0] <= T_6726 @[Parameters.scala 326:27]
      node T_6735 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_6736 = dshl(T_6735, TLXbar_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_6737 = bits(T_6736, 7, 0) @[package.scala 11:76]
      node T_6738 = not(T_6737) @[package.scala 11:40]
      node T_6739 = shr(T_6738, 2) @[Edges.scala 15:47]
      node T_6740 = and(TLXbar_1.io.out[0].c.bits.addr_hi, T_6739) @[Edges.scala 16:16]
      node T_6742 = eq(T_6740, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_6744 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_6745 = dshl(T_6744, TLXbar_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_6746 = bits(T_6745, 7, 0) @[package.scala 11:76]
      node T_6747 = not(T_6746) @[package.scala 11:40]
      node T_6748 = and(TLXbar_1.io.out[0].c.bits.addr_lo, T_6747) @[Edges.scala 23:16]
      node T_6750 = eq(T_6748, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_6751 = and(T_6742, T_6750) @[Periphery.scala 315:27]
      node T_6752 = cat(TLXbar_1.io.out[0].c.bits.addr_hi, TLXbar_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_6754 = xor(T_6752, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_6755 = cvt(T_6754) @[Parameters.scala 89:49]
      node T_6757 = and(T_6755, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_6758 = asSInt(T_6757) @[Parameters.scala 89:52]
      node T_6760 = eq(T_6758, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_6766 : UInt<1>[1] @[Parameters.scala 227:36]
      T_6766 is invalid @[Parameters.scala 227:36]
      T_6766[0] <= T_6760 @[Parameters.scala 227:36]
      node T_6768 = eq(TLXbar_1.io.out[0].c.bits.opcode, UInt<3>("h04")) @[Periphery.scala 315:27]
      when T_6768 : @[Periphery.scala 315:27]
        node T_6769 = or(T_6766[0], reset) @[Periphery.scala 315:27]
        node T_6771 = eq(T_6769, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6771 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6772 = or(T_6732[0], reset) @[Periphery.scala 315:27]
        node T_6774 = eq(T_6772, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6774 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6776 = geq(TLXbar_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_6777 = or(T_6776, reset) @[Periphery.scala 315:27]
        node T_6779 = eq(T_6777, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6779 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6780 = or(T_6751, reset) @[Periphery.scala 315:27]
        node T_6782 = eq(T_6780, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6782 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6783 = leq(TLXbar_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_6784 = or(T_6783, reset) @[Periphery.scala 315:27]
        node T_6786 = eq(T_6784, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6786 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Periphery.scala:315:27)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6788 = eq(TLXbar_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6789 = or(T_6788, reset) @[Periphery.scala 315:27]
        node T_6791 = eq(T_6789, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6791 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Periphery.scala:315:27)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6792 = eq(TLXbar_1.io.out[0].c.bits.opcode, UInt<3>("h05")) @[Periphery.scala 315:27]
      when T_6792 : @[Periphery.scala 315:27]
        node T_6793 = or(T_6766[0], reset) @[Periphery.scala 315:27]
        node T_6795 = eq(T_6793, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6795 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6796 = or(T_6732[0], reset) @[Periphery.scala 315:27]
        node T_6798 = eq(T_6796, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6798 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6800 = geq(TLXbar_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_6801 = or(T_6800, reset) @[Periphery.scala 315:27]
        node T_6803 = eq(T_6801, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6803 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6804 = or(T_6751, reset) @[Periphery.scala 315:27]
        node T_6806 = eq(T_6804, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6806 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6807 = leq(TLXbar_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_6808 = or(T_6807, reset) @[Periphery.scala 315:27]
        node T_6810 = eq(T_6808, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6810 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Periphery.scala:315:27)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6812 = eq(TLXbar_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6813 = or(T_6812, reset) @[Periphery.scala 315:27]
        node T_6815 = eq(T_6813, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6815 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Periphery.scala:315:27)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6816 = eq(TLXbar_1.io.out[0].c.bits.opcode, UInt<3>("h06")) @[Periphery.scala 315:27]
      when T_6816 : @[Periphery.scala 315:27]
        node T_6817 = cat(TLXbar_1.io.out[0].c.bits.addr_hi, TLXbar_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_6819 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6821 = eq(T_6819, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6821 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6822 = or(T_6732[0], reset) @[Periphery.scala 315:27]
        node T_6824 = eq(T_6822, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6824 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6826 = geq(TLXbar_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_6827 = or(T_6826, reset) @[Periphery.scala 315:27]
        node T_6829 = eq(T_6827, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6829 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6830 = or(T_6751, reset) @[Periphery.scala 315:27]
        node T_6832 = eq(T_6830, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6832 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6833 = leq(TLXbar_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_6834 = or(T_6833, reset) @[Periphery.scala 315:27]
        node T_6836 = eq(T_6834, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6836 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Periphery.scala:315:27)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6838 = eq(TLXbar_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6839 = or(T_6838, reset) @[Periphery.scala 315:27]
        node T_6841 = eq(T_6839, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6841 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Periphery.scala:315:27)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6842 = eq(TLXbar_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Periphery.scala 315:27]
      when T_6842 : @[Periphery.scala 315:27]
        node T_6843 = cat(TLXbar_1.io.out[0].c.bits.addr_hi, TLXbar_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_6845 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:27]
        node T_6847 = eq(T_6845, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6847 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Periphery.scala:315:27)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6848 = or(T_6732[0], reset) @[Periphery.scala 315:27]
        node T_6850 = eq(T_6848, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6850 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6852 = geq(TLXbar_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_6853 = or(T_6852, reset) @[Periphery.scala 315:27]
        node T_6855 = eq(T_6853, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6855 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6856 = or(T_6751, reset) @[Periphery.scala 315:27]
        node T_6858 = eq(T_6856, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6858 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6859 = leq(TLXbar_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_6860 = or(T_6859, reset) @[Periphery.scala 315:27]
        node T_6862 = eq(T_6860, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6862 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Periphery.scala:315:27)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6864 = eq(TLXbar_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6865 = or(T_6864, reset) @[Periphery.scala 315:27]
        node T_6867 = eq(T_6865, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6867 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Periphery.scala:315:27)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6868 = eq(TLXbar_1.io.out[0].c.bits.opcode, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_6868 : @[Periphery.scala 315:27]
        node T_6869 = or(T_6766[0], reset) @[Periphery.scala 315:27]
        node T_6871 = eq(T_6869, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6871 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6872 = or(T_6732[0], reset) @[Periphery.scala 315:27]
        node T_6874 = eq(T_6872, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6874 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6875 = or(T_6751, reset) @[Periphery.scala 315:27]
        node T_6877 = eq(T_6875, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6877 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6879 = eq(TLXbar_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6880 = or(T_6879, reset) @[Periphery.scala 315:27]
        node T_6882 = eq(T_6880, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6882 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6883 = eq(TLXbar_1.io.out[0].c.bits.opcode, UInt<1>("h01")) @[Periphery.scala 315:27]
      when T_6883 : @[Periphery.scala 315:27]
        node T_6884 = or(T_6766[0], reset) @[Periphery.scala 315:27]
        node T_6886 = eq(T_6884, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6886 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6887 = or(T_6732[0], reset) @[Periphery.scala 315:27]
        node T_6889 = eq(T_6887, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6889 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6890 = or(T_6751, reset) @[Periphery.scala 315:27]
        node T_6892 = eq(T_6890, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6892 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6894 = eq(TLXbar_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6895 = or(T_6894, reset) @[Periphery.scala 315:27]
        node T_6897 = eq(T_6895, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6897 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6898 = eq(TLXbar_1.io.out[0].c.bits.opcode, UInt<2>("h02")) @[Periphery.scala 315:27]
      when T_6898 : @[Periphery.scala 315:27]
        node T_6899 = or(T_6766[0], reset) @[Periphery.scala 315:27]
        node T_6901 = eq(T_6899, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6901 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Periphery.scala:315:27)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6902 = or(T_6732[0], reset) @[Periphery.scala 315:27]
        node T_6904 = eq(T_6902, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6904 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6905 = or(T_6751, reset) @[Periphery.scala 315:27]
        node T_6907 = eq(T_6905, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6907 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6909 = eq(TLXbar_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6910 = or(T_6909, reset) @[Periphery.scala 315:27]
        node T_6912 = eq(T_6910, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6912 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6914 = eq(TLXbar_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6915 = or(T_6914, reset) @[Periphery.scala 315:27]
        node T_6917 = eq(T_6915, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6917 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Periphery.scala:315:27)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    when TLXbar_1.io.out[0].d.valid : @[Periphery.scala 315:27]
      node T_6918 = leq(TLXbar_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_6919 = or(T_6918, reset) @[Periphery.scala 315:27]
      node T_6921 = eq(T_6919, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_6921 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Periphery.scala:315:27)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6923 = xor(UInt<1>("h00"), TLXbar_1.io.out[0].d.bits.source) @[Parameters.scala 37:23]
      node T_6924 = not(T_6923) @[Parameters.scala 37:9]
      node T_6926 = or(T_6924, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_6927 = not(T_6926) @[Parameters.scala 37:7]
      node T_6929 = eq(T_6927, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_6935 : UInt<1>[1] @[Parameters.scala 326:27]
      T_6935 is invalid @[Parameters.scala 326:27]
      T_6935[0] <= T_6929 @[Parameters.scala 326:27]
      node T_6938 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_6939 = dshl(T_6938, TLXbar_1.io.out[0].d.bits.size) @[package.scala 11:71]
      node T_6940 = bits(T_6939, 7, 0) @[package.scala 11:76]
      node T_6941 = not(T_6940) @[package.scala 11:40]
      node T_6942 = and(TLXbar_1.io.out[0].d.bits.addr_lo, T_6941) @[Edges.scala 23:16]
      node T_6944 = eq(T_6942, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_6946 = eq(UInt<1>("h00"), TLXbar_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      wire T_6952 : UInt<1>[1] @[Parameters.scala 220:31]
      T_6952 is invalid @[Parameters.scala 220:31]
      T_6952[0] <= T_6946 @[Parameters.scala 220:31]
      node T_6954 = eq(TLXbar_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Periphery.scala 315:27]
      when T_6954 : @[Periphery.scala 315:27]
        node T_6955 = or(T_6935[0], reset) @[Periphery.scala 315:27]
        node T_6957 = eq(T_6955, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6957 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6958 = or(T_6944, reset) @[Periphery.scala 315:27]
        node T_6960 = eq(T_6958, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6960 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6961 = or(T_6952[0], reset) @[Periphery.scala 315:27]
        node T_6963 = eq(T_6961, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6963 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6965 = geq(TLXbar_1.io.out[0].d.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_6966 = or(T_6965, reset) @[Periphery.scala 315:27]
        node T_6968 = eq(T_6966, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6968 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6970 = eq(TLXbar_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6971 = or(T_6970, reset) @[Periphery.scala 315:27]
        node T_6973 = eq(T_6971, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6973 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6975 = eq(TLXbar_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_6976 = or(T_6975, reset) @[Periphery.scala 315:27]
        node T_6978 = eq(T_6976, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6978 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Periphery.scala:315:27)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6979 = eq(TLXbar_1.io.out[0].d.bits.opcode, UInt<3>("h04")) @[Periphery.scala 315:27]
      when T_6979 : @[Periphery.scala 315:27]
        node T_6980 = or(T_6935[0], reset) @[Periphery.scala 315:27]
        node T_6982 = eq(T_6980, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6982 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6983 = or(T_6944, reset) @[Periphery.scala 315:27]
        node T_6985 = eq(T_6983, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6985 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6986 = or(T_6952[0], reset) @[Periphery.scala 315:27]
        node T_6988 = eq(T_6986, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6988 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6990 = geq(TLXbar_1.io.out[0].d.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_6991 = or(T_6990, reset) @[Periphery.scala 315:27]
        node T_6993 = eq(T_6991, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6993 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_6994 = leq(TLXbar_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_6995 = or(T_6994, reset) @[Periphery.scala 315:27]
        node T_6997 = eq(T_6995, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_6997 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Periphery.scala:315:27)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_6998 = eq(TLXbar_1.io.out[0].d.bits.opcode, UInt<3>("h05")) @[Periphery.scala 315:27]
      when T_6998 : @[Periphery.scala 315:27]
        node T_6999 = or(T_6935[0], reset) @[Periphery.scala 315:27]
        node T_7001 = eq(T_6999, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7001 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7002 = or(T_6944, reset) @[Periphery.scala 315:27]
        node T_7004 = eq(T_7002, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7004 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7005 = or(T_6952[0], reset) @[Periphery.scala 315:27]
        node T_7007 = eq(T_7005, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7007 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7009 = geq(TLXbar_1.io.out[0].d.bits.size, UInt<2>("h02")) @[Periphery.scala 315:27]
        node T_7010 = or(T_7009, reset) @[Periphery.scala 315:27]
        node T_7012 = eq(T_7010, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7012 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Periphery.scala:315:27)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7013 = leq(TLXbar_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_7014 = or(T_7013, reset) @[Periphery.scala 315:27]
        node T_7016 = eq(T_7014, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7016 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Periphery.scala:315:27)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7017 = eq(TLXbar_1.io.out[0].d.bits.opcode, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7017 : @[Periphery.scala 315:27]
        node T_7018 = or(T_6935[0], reset) @[Periphery.scala 315:27]
        node T_7020 = eq(T_7018, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7020 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7021 = or(T_6944, reset) @[Periphery.scala 315:27]
        node T_7023 = eq(T_7021, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7023 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7024 = or(T_6952[0], reset) @[Periphery.scala 315:27]
        node T_7026 = eq(T_7024, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7026 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7028 = eq(TLXbar_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_7029 = or(T_7028, reset) @[Periphery.scala 315:27]
        node T_7031 = eq(T_7029, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7031 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7032 = eq(TLXbar_1.io.out[0].d.bits.opcode, UInt<1>("h01")) @[Periphery.scala 315:27]
      when T_7032 : @[Periphery.scala 315:27]
        node T_7033 = or(T_6935[0], reset) @[Periphery.scala 315:27]
        node T_7035 = eq(T_7033, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7035 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7036 = or(T_6944, reset) @[Periphery.scala 315:27]
        node T_7038 = eq(T_7036, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7038 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7039 = or(T_6952[0], reset) @[Periphery.scala 315:27]
        node T_7041 = eq(T_7039, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7041 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7043 = eq(TLXbar_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_7044 = or(T_7043, reset) @[Periphery.scala 315:27]
        node T_7046 = eq(T_7044, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7046 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7047 = eq(TLXbar_1.io.out[0].d.bits.opcode, UInt<2>("h02")) @[Periphery.scala 315:27]
      when T_7047 : @[Periphery.scala 315:27]
        node T_7048 = or(T_6935[0], reset) @[Periphery.scala 315:27]
        node T_7050 = eq(T_7048, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7050 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7051 = or(T_6944, reset) @[Periphery.scala 315:27]
        node T_7053 = eq(T_7051, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7053 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Periphery.scala:315:27)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7054 = or(T_6952[0], reset) @[Periphery.scala 315:27]
        node T_7056 = eq(T_7054, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7056 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7058 = eq(TLXbar_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_7059 = or(T_7058, reset) @[Periphery.scala 315:27]
        node T_7061 = eq(T_7059, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7061 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Periphery.scala:315:27)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        node T_7063 = eq(TLXbar_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Periphery.scala 315:27]
        node T_7064 = or(T_7063, reset) @[Periphery.scala 315:27]
        node T_7066 = eq(T_7064, UInt<1>("h00")) @[Periphery.scala 315:27]
        when T_7066 : @[Periphery.scala 315:27]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Periphery.scala:315:27)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 315:27]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
          skip @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    when TLXbar_1.io.out[0].e.valid : @[Periphery.scala 315:27]
      node T_7068 = eq(UInt<1>("h00"), TLXbar_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      wire T_7074 : UInt<1>[1] @[Parameters.scala 220:31]
      T_7074 is invalid @[Parameters.scala 220:31]
      T_7074[0] <= T_7068 @[Parameters.scala 220:31]
      node T_7076 = or(T_7074[0], reset) @[Periphery.scala 315:27]
      node T_7078 = eq(T_7076, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7078 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Periphery.scala:315:27)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7080 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_7082 : UInt, clk
    reg T_7084 : UInt, clk
    reg T_7086 : UInt, clk
    reg T_7088 : UInt, clk
    reg T_7090 : UInt, clk
    node T_7092 = neq(T_7080, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7093 = and(TLXbar_1.io.out[0].a.valid, T_7092) @[Periphery.scala 315:27]
    when T_7093 : @[Periphery.scala 315:27]
      node T_7094 = eq(TLXbar_1.io.out[0].a.bits.opcode, T_7082) @[Periphery.scala 315:27]
      node T_7095 = or(T_7094, reset) @[Periphery.scala 315:27]
      node T_7097 = eq(T_7095, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7097 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7098 = eq(TLXbar_1.io.out[0].a.bits.param, T_7084) @[Periphery.scala 315:27]
      node T_7099 = or(T_7098, reset) @[Periphery.scala 315:27]
      node T_7101 = eq(T_7099, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7101 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7102 = eq(TLXbar_1.io.out[0].a.bits.size, T_7086) @[Periphery.scala 315:27]
      node T_7103 = or(T_7102, reset) @[Periphery.scala 315:27]
      node T_7105 = eq(T_7103, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7105 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7106 = eq(TLXbar_1.io.out[0].a.bits.source, T_7088) @[Periphery.scala 315:27]
      node T_7107 = or(T_7106, reset) @[Periphery.scala 315:27]
      node T_7109 = eq(T_7107, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7109 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7110 = eq(TLXbar_1.io.out[0].a.bits.addr_hi, T_7090) @[Periphery.scala 315:27]
      node T_7111 = or(T_7110, reset) @[Periphery.scala 315:27]
      node T_7113 = eq(T_7111, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7113 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    node T_7114 = and(TLXbar_1.io.out[0].a.ready, TLXbar_1.io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_7114 : @[Periphery.scala 315:27]
      node T_7116 = sub(T_7080, UInt<1>("h01")) @[Periphery.scala 315:27]
      node T_7117 = tail(T_7116, 1) @[Periphery.scala 315:27]
      T_7080 <= T_7117 @[Periphery.scala 315:27]
      node T_7119 = eq(T_7080, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7119 : @[Periphery.scala 315:27]
        node T_7120 = bits(TLXbar_1.io.out[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_7122 = eq(T_7120, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_7125 = leq(TLXbar_1.io.out[0].a.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_7127 = bits(TLXbar_1.io.out[0].a.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_7128 = dshl(UInt<1>("h01"), T_7127) @[OneHot.scala 46:16]
        node T_7129 = bits(T_7128, 8, 0) @[OneHot.scala 46:41]
        node T_7130 = shr(T_7129, 2) @[Edges.scala 209:50]
        node T_7131 = or(T_7130, T_7125) @[Edges.scala 210:29]
        node T_7133 = mux(UInt<1>("h00"), T_7131, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_7135 = sub(T_7133, UInt<1>("h01")) @[Periphery.scala 315:27]
        node T_7136 = tail(T_7135, 1) @[Periphery.scala 315:27]
        T_7080 <= T_7136 @[Periphery.scala 315:27]
        T_7082 <= TLXbar_1.io.out[0].a.bits.opcode @[Periphery.scala 315:27]
        T_7084 <= TLXbar_1.io.out[0].a.bits.param @[Periphery.scala 315:27]
        T_7086 <= TLXbar_1.io.out[0].a.bits.size @[Periphery.scala 315:27]
        T_7088 <= TLXbar_1.io.out[0].a.bits.source @[Periphery.scala 315:27]
        T_7090 <= TLXbar_1.io.out[0].a.bits.addr_hi @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7138 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_7140 : UInt, clk
    reg T_7142 : UInt, clk
    reg T_7144 : UInt, clk
    reg T_7146 : UInt, clk
    reg T_7148 : UInt, clk
    node T_7150 = neq(T_7138, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7151 = and(TLXbar_1.io.out[0].b.valid, T_7150) @[Periphery.scala 315:27]
    when T_7151 : @[Periphery.scala 315:27]
      node T_7152 = eq(TLXbar_1.io.out[0].b.bits.opcode, T_7140) @[Periphery.scala 315:27]
      node T_7153 = or(T_7152, reset) @[Periphery.scala 315:27]
      node T_7155 = eq(T_7153, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7155 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7156 = eq(TLXbar_1.io.out[0].b.bits.param, T_7142) @[Periphery.scala 315:27]
      node T_7157 = or(T_7156, reset) @[Periphery.scala 315:27]
      node T_7159 = eq(T_7157, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7159 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7160 = eq(TLXbar_1.io.out[0].b.bits.size, T_7144) @[Periphery.scala 315:27]
      node T_7161 = or(T_7160, reset) @[Periphery.scala 315:27]
      node T_7163 = eq(T_7161, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7163 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7164 = eq(TLXbar_1.io.out[0].b.bits.source, T_7146) @[Periphery.scala 315:27]
      node T_7165 = or(T_7164, reset) @[Periphery.scala 315:27]
      node T_7167 = eq(T_7165, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7167 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7168 = eq(TLXbar_1.io.out[0].b.bits.addr_hi, T_7148) @[Periphery.scala 315:27]
      node T_7169 = or(T_7168, reset) @[Periphery.scala 315:27]
      node T_7171 = eq(T_7169, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7171 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    node T_7172 = and(TLXbar_1.io.out[0].b.ready, TLXbar_1.io.out[0].b.valid) @[Decoupled.scala 21:42]
    when T_7172 : @[Periphery.scala 315:27]
      node T_7174 = sub(T_7138, UInt<1>("h01")) @[Periphery.scala 315:27]
      node T_7175 = tail(T_7174, 1) @[Periphery.scala 315:27]
      T_7138 <= T_7175 @[Periphery.scala 315:27]
      node T_7177 = eq(T_7138, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7177 : @[Periphery.scala 315:27]
        node T_7178 = bits(TLXbar_1.io.out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_7180 = eq(T_7178, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_7183 = leq(TLXbar_1.io.out[0].b.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_7185 = bits(TLXbar_1.io.out[0].b.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_7186 = dshl(UInt<1>("h01"), T_7185) @[OneHot.scala 46:16]
        node T_7187 = bits(T_7186, 8, 0) @[OneHot.scala 46:41]
        node T_7188 = shr(T_7187, 2) @[Edges.scala 209:50]
        node T_7189 = or(T_7188, T_7183) @[Edges.scala 210:29]
        node T_7191 = mux(UInt<1>("h00"), T_7189, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_7193 = sub(T_7191, UInt<1>("h01")) @[Periphery.scala 315:27]
        node T_7194 = tail(T_7193, 1) @[Periphery.scala 315:27]
        T_7138 <= T_7194 @[Periphery.scala 315:27]
        T_7140 <= TLXbar_1.io.out[0].b.bits.opcode @[Periphery.scala 315:27]
        T_7142 <= TLXbar_1.io.out[0].b.bits.param @[Periphery.scala 315:27]
        T_7144 <= TLXbar_1.io.out[0].b.bits.size @[Periphery.scala 315:27]
        T_7146 <= TLXbar_1.io.out[0].b.bits.source @[Periphery.scala 315:27]
        T_7148 <= TLXbar_1.io.out[0].b.bits.addr_hi @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7196 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_7198 : UInt, clk
    reg T_7200 : UInt, clk
    reg T_7202 : UInt, clk
    reg T_7204 : UInt, clk
    reg T_7206 : UInt, clk
    reg T_7208 : UInt, clk
    node T_7210 = neq(T_7196, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7211 = and(TLXbar_1.io.out[0].c.valid, T_7210) @[Periphery.scala 315:27]
    when T_7211 : @[Periphery.scala 315:27]
      node T_7212 = eq(TLXbar_1.io.out[0].c.bits.opcode, T_7198) @[Periphery.scala 315:27]
      node T_7213 = or(T_7212, reset) @[Periphery.scala 315:27]
      node T_7215 = eq(T_7213, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7215 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7216 = eq(TLXbar_1.io.out[0].c.bits.param, T_7200) @[Periphery.scala 315:27]
      node T_7217 = or(T_7216, reset) @[Periphery.scala 315:27]
      node T_7219 = eq(T_7217, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7219 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7220 = eq(TLXbar_1.io.out[0].c.bits.size, T_7202) @[Periphery.scala 315:27]
      node T_7221 = or(T_7220, reset) @[Periphery.scala 315:27]
      node T_7223 = eq(T_7221, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7223 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7224 = eq(TLXbar_1.io.out[0].c.bits.source, T_7204) @[Periphery.scala 315:27]
      node T_7225 = or(T_7224, reset) @[Periphery.scala 315:27]
      node T_7227 = eq(T_7225, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7227 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7228 = eq(TLXbar_1.io.out[0].c.bits.addr_hi, T_7206) @[Periphery.scala 315:27]
      node T_7229 = or(T_7228, reset) @[Periphery.scala 315:27]
      node T_7231 = eq(T_7229, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7231 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7232 = eq(TLXbar_1.io.out[0].c.bits.addr_lo, T_7208) @[Periphery.scala 315:27]
      node T_7233 = or(T_7232, reset) @[Periphery.scala 315:27]
      node T_7235 = eq(T_7233, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7235 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    node T_7236 = and(TLXbar_1.io.out[0].c.ready, TLXbar_1.io.out[0].c.valid) @[Decoupled.scala 21:42]
    when T_7236 : @[Periphery.scala 315:27]
      node T_7238 = sub(T_7196, UInt<1>("h01")) @[Periphery.scala 315:27]
      node T_7239 = tail(T_7238, 1) @[Periphery.scala 315:27]
      T_7196 <= T_7239 @[Periphery.scala 315:27]
      node T_7241 = eq(T_7196, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7241 : @[Periphery.scala 315:27]
        node T_7242 = bits(TLXbar_1.io.out[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_7245 = leq(TLXbar_1.io.out[0].c.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_7247 = bits(TLXbar_1.io.out[0].c.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_7248 = dshl(UInt<1>("h01"), T_7247) @[OneHot.scala 46:16]
        node T_7249 = bits(T_7248, 8, 0) @[OneHot.scala 46:41]
        node T_7250 = shr(T_7249, 2) @[Edges.scala 209:50]
        node T_7251 = or(T_7250, T_7245) @[Edges.scala 210:29]
        node T_7253 = mux(UInt<1>("h00"), T_7251, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_7255 = sub(T_7253, UInt<1>("h01")) @[Periphery.scala 315:27]
        node T_7256 = tail(T_7255, 1) @[Periphery.scala 315:27]
        T_7196 <= T_7256 @[Periphery.scala 315:27]
        T_7198 <= TLXbar_1.io.out[0].c.bits.opcode @[Periphery.scala 315:27]
        T_7200 <= TLXbar_1.io.out[0].c.bits.param @[Periphery.scala 315:27]
        T_7202 <= TLXbar_1.io.out[0].c.bits.size @[Periphery.scala 315:27]
        T_7204 <= TLXbar_1.io.out[0].c.bits.source @[Periphery.scala 315:27]
        T_7206 <= TLXbar_1.io.out[0].c.bits.addr_hi @[Periphery.scala 315:27]
        T_7208 <= TLXbar_1.io.out[0].c.bits.addr_lo @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7258 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_7260 : UInt, clk
    reg T_7262 : UInt, clk
    reg T_7264 : UInt, clk
    reg T_7266 : UInt, clk
    reg T_7268 : UInt, clk
    reg T_7270 : UInt, clk
    node T_7272 = neq(T_7258, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7273 = and(TLXbar_1.io.out[0].d.valid, T_7272) @[Periphery.scala 315:27]
    when T_7273 : @[Periphery.scala 315:27]
      node T_7274 = eq(TLXbar_1.io.out[0].d.bits.opcode, T_7260) @[Periphery.scala 315:27]
      node T_7275 = or(T_7274, reset) @[Periphery.scala 315:27]
      node T_7277 = eq(T_7275, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7277 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7278 = eq(TLXbar_1.io.out[0].d.bits.param, T_7262) @[Periphery.scala 315:27]
      node T_7279 = or(T_7278, reset) @[Periphery.scala 315:27]
      node T_7281 = eq(T_7279, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7281 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7282 = eq(TLXbar_1.io.out[0].d.bits.size, T_7264) @[Periphery.scala 315:27]
      node T_7283 = or(T_7282, reset) @[Periphery.scala 315:27]
      node T_7285 = eq(T_7283, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7285 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7286 = eq(TLXbar_1.io.out[0].d.bits.source, T_7266) @[Periphery.scala 315:27]
      node T_7287 = or(T_7286, reset) @[Periphery.scala 315:27]
      node T_7289 = eq(T_7287, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7289 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7290 = eq(TLXbar_1.io.out[0].d.bits.sink, T_7268) @[Periphery.scala 315:27]
      node T_7291 = or(T_7290, reset) @[Periphery.scala 315:27]
      node T_7293 = eq(T_7291, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7293 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7294 = eq(TLXbar_1.io.out[0].d.bits.addr_lo, T_7270) @[Periphery.scala 315:27]
      node T_7295 = or(T_7294, reset) @[Periphery.scala 315:27]
      node T_7297 = eq(T_7295, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7297 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Periphery.scala:315:27)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    node T_7298 = and(TLXbar_1.io.out[0].d.ready, TLXbar_1.io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_7298 : @[Periphery.scala 315:27]
      node T_7300 = sub(T_7258, UInt<1>("h01")) @[Periphery.scala 315:27]
      node T_7301 = tail(T_7300, 1) @[Periphery.scala 315:27]
      T_7258 <= T_7301 @[Periphery.scala 315:27]
      node T_7303 = eq(T_7258, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7303 : @[Periphery.scala 315:27]
        node T_7304 = bits(TLXbar_1.io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_7307 = leq(TLXbar_1.io.out[0].d.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_7309 = bits(TLXbar_1.io.out[0].d.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_7310 = dshl(UInt<1>("h01"), T_7309) @[OneHot.scala 46:16]
        node T_7311 = bits(T_7310, 8, 0) @[OneHot.scala 46:41]
        node T_7312 = shr(T_7311, 2) @[Edges.scala 209:50]
        node T_7313 = or(T_7312, T_7307) @[Edges.scala 210:29]
        node T_7315 = mux(UInt<1>("h01"), T_7313, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_7317 = sub(T_7315, UInt<1>("h01")) @[Periphery.scala 315:27]
        node T_7318 = tail(T_7317, 1) @[Periphery.scala 315:27]
        T_7258 <= T_7318 @[Periphery.scala 315:27]
        T_7260 <= TLXbar_1.io.out[0].d.bits.opcode @[Periphery.scala 315:27]
        T_7262 <= TLXbar_1.io.out[0].d.bits.param @[Periphery.scala 315:27]
        T_7264 <= TLXbar_1.io.out[0].d.bits.size @[Periphery.scala 315:27]
        T_7266 <= TLXbar_1.io.out[0].d.bits.source @[Periphery.scala 315:27]
        T_7268 <= TLXbar_1.io.out[0].d.bits.sink @[Periphery.scala 315:27]
        T_7270 <= TLXbar_1.io.out[0].d.bits.addr_lo @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7320 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7320 <= TLXbar_1.io.out[0].a.valid
    reg T_7322 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7322 <= TLXbar_1.io.out[0].a.ready
    reg T_7323 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}, clk
    T_7323 <- TLXbar_1.io.out[0].a.bits
    node T_7331 = cat(TLXbar_1.io.out[0].a.bits.addr_hi, TLXbar_1.io.out[0].a.bits.mask) @[Periphery.scala 315:27]
    node T_7332 = cat(T_7331, TLXbar_1.io.out[0].a.bits.data) @[Periphery.scala 315:27]
    node T_7333 = cat(TLXbar_1.io.out[0].a.bits.size, TLXbar_1.io.out[0].a.bits.source) @[Periphery.scala 315:27]
    node T_7334 = cat(TLXbar_1.io.out[0].a.bits.opcode, TLXbar_1.io.out[0].a.bits.param) @[Periphery.scala 315:27]
    node T_7335 = cat(T_7334, T_7333) @[Periphery.scala 315:27]
    node T_7336 = cat(T_7335, T_7332) @[Periphery.scala 315:27]
    node T_7337 = cat(T_7323.addr_hi, T_7323.mask) @[Periphery.scala 315:27]
    node T_7338 = cat(T_7337, T_7323.data) @[Periphery.scala 315:27]
    node T_7339 = cat(T_7323.size, T_7323.source) @[Periphery.scala 315:27]
    node T_7340 = cat(T_7323.opcode, T_7323.param) @[Periphery.scala 315:27]
    node T_7341 = cat(T_7340, T_7339) @[Periphery.scala 315:27]
    node T_7342 = cat(T_7341, T_7338) @[Periphery.scala 315:27]
    node T_7343 = eq(T_7336, T_7342) @[Periphery.scala 315:27]
    node T_7345 = eq(T_7322, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7346 = and(T_7320, T_7345) @[Periphery.scala 315:27]
    when T_7346 : @[Periphery.scala 315:27]
      node T_7347 = or(TLXbar_1.io.out[0].a.valid, reset) @[Periphery.scala 315:27]
      node T_7349 = eq(T_7347, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7349 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:27)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7350 = or(T_7343, reset) @[Periphery.scala 315:27]
      node T_7352 = eq(T_7350, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7352 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:27)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7354 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7354 <= TLXbar_1.io.out[0].b.valid
    reg T_7356 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7356 <= TLXbar_1.io.out[0].b.ready
    reg T_7357 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}, clk
    T_7357 <- TLXbar_1.io.out[0].b.bits
    node T_7365 = cat(TLXbar_1.io.out[0].b.bits.addr_hi, TLXbar_1.io.out[0].b.bits.mask) @[Periphery.scala 315:27]
    node T_7366 = cat(T_7365, TLXbar_1.io.out[0].b.bits.data) @[Periphery.scala 315:27]
    node T_7367 = cat(TLXbar_1.io.out[0].b.bits.size, TLXbar_1.io.out[0].b.bits.source) @[Periphery.scala 315:27]
    node T_7368 = cat(TLXbar_1.io.out[0].b.bits.opcode, TLXbar_1.io.out[0].b.bits.param) @[Periphery.scala 315:27]
    node T_7369 = cat(T_7368, T_7367) @[Periphery.scala 315:27]
    node T_7370 = cat(T_7369, T_7366) @[Periphery.scala 315:27]
    node T_7371 = cat(T_7357.addr_hi, T_7357.mask) @[Periphery.scala 315:27]
    node T_7372 = cat(T_7371, T_7357.data) @[Periphery.scala 315:27]
    node T_7373 = cat(T_7357.size, T_7357.source) @[Periphery.scala 315:27]
    node T_7374 = cat(T_7357.opcode, T_7357.param) @[Periphery.scala 315:27]
    node T_7375 = cat(T_7374, T_7373) @[Periphery.scala 315:27]
    node T_7376 = cat(T_7375, T_7372) @[Periphery.scala 315:27]
    node T_7377 = eq(T_7370, T_7376) @[Periphery.scala 315:27]
    node T_7379 = eq(T_7356, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7380 = and(T_7354, T_7379) @[Periphery.scala 315:27]
    when T_7380 : @[Periphery.scala 315:27]
      node T_7381 = or(TLXbar_1.io.out[0].b.valid, reset) @[Periphery.scala 315:27]
      node T_7383 = eq(T_7381, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7383 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:27)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7384 = or(T_7377, reset) @[Periphery.scala 315:27]
      node T_7386 = eq(T_7384, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7386 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:27)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7388 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7388 <= TLXbar_1.io.out[0].c.valid
    reg T_7390 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7390 <= TLXbar_1.io.out[0].c.ready
    reg T_7391 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_7391 <- TLXbar_1.io.out[0].c.bits
    node T_7400 = cat(TLXbar_1.io.out[0].c.bits.data, TLXbar_1.io.out[0].c.bits.error) @[Periphery.scala 315:27]
    node T_7401 = cat(TLXbar_1.io.out[0].c.bits.addr_hi, TLXbar_1.io.out[0].c.bits.addr_lo) @[Periphery.scala 315:27]
    node T_7402 = cat(T_7401, T_7400) @[Periphery.scala 315:27]
    node T_7403 = cat(TLXbar_1.io.out[0].c.bits.size, TLXbar_1.io.out[0].c.bits.source) @[Periphery.scala 315:27]
    node T_7404 = cat(TLXbar_1.io.out[0].c.bits.opcode, TLXbar_1.io.out[0].c.bits.param) @[Periphery.scala 315:27]
    node T_7405 = cat(T_7404, T_7403) @[Periphery.scala 315:27]
    node T_7406 = cat(T_7405, T_7402) @[Periphery.scala 315:27]
    node T_7407 = cat(T_7391.data, T_7391.error) @[Periphery.scala 315:27]
    node T_7408 = cat(T_7391.addr_hi, T_7391.addr_lo) @[Periphery.scala 315:27]
    node T_7409 = cat(T_7408, T_7407) @[Periphery.scala 315:27]
    node T_7410 = cat(T_7391.size, T_7391.source) @[Periphery.scala 315:27]
    node T_7411 = cat(T_7391.opcode, T_7391.param) @[Periphery.scala 315:27]
    node T_7412 = cat(T_7411, T_7410) @[Periphery.scala 315:27]
    node T_7413 = cat(T_7412, T_7409) @[Periphery.scala 315:27]
    node T_7414 = eq(T_7406, T_7413) @[Periphery.scala 315:27]
    node T_7416 = eq(T_7390, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7417 = and(T_7388, T_7416) @[Periphery.scala 315:27]
    when T_7417 : @[Periphery.scala 315:27]
      node T_7418 = or(TLXbar_1.io.out[0].c.valid, reset) @[Periphery.scala 315:27]
      node T_7420 = eq(T_7418, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7420 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:27)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7421 = or(T_7414, reset) @[Periphery.scala 315:27]
      node T_7423 = eq(T_7421, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7423 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:27)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7425 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7425 <= TLXbar_1.io.out[0].d.valid
    reg T_7427 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7427 <= TLXbar_1.io.out[0].d.ready
    reg T_7428 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_7428 <- TLXbar_1.io.out[0].d.bits
    node T_7437 = cat(TLXbar_1.io.out[0].d.bits.data, TLXbar_1.io.out[0].d.bits.error) @[Periphery.scala 315:27]
    node T_7438 = cat(TLXbar_1.io.out[0].d.bits.sink, TLXbar_1.io.out[0].d.bits.addr_lo) @[Periphery.scala 315:27]
    node T_7439 = cat(T_7438, T_7437) @[Periphery.scala 315:27]
    node T_7440 = cat(TLXbar_1.io.out[0].d.bits.size, TLXbar_1.io.out[0].d.bits.source) @[Periphery.scala 315:27]
    node T_7441 = cat(TLXbar_1.io.out[0].d.bits.opcode, TLXbar_1.io.out[0].d.bits.param) @[Periphery.scala 315:27]
    node T_7442 = cat(T_7441, T_7440) @[Periphery.scala 315:27]
    node T_7443 = cat(T_7442, T_7439) @[Periphery.scala 315:27]
    node T_7444 = cat(T_7428.data, T_7428.error) @[Periphery.scala 315:27]
    node T_7445 = cat(T_7428.sink, T_7428.addr_lo) @[Periphery.scala 315:27]
    node T_7446 = cat(T_7445, T_7444) @[Periphery.scala 315:27]
    node T_7447 = cat(T_7428.size, T_7428.source) @[Periphery.scala 315:27]
    node T_7448 = cat(T_7428.opcode, T_7428.param) @[Periphery.scala 315:27]
    node T_7449 = cat(T_7448, T_7447) @[Periphery.scala 315:27]
    node T_7450 = cat(T_7449, T_7446) @[Periphery.scala 315:27]
    node T_7451 = eq(T_7443, T_7450) @[Periphery.scala 315:27]
    node T_7453 = eq(T_7427, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7454 = and(T_7425, T_7453) @[Periphery.scala 315:27]
    when T_7454 : @[Periphery.scala 315:27]
      node T_7455 = or(TLXbar_1.io.out[0].d.valid, reset) @[Periphery.scala 315:27]
      node T_7457 = eq(T_7455, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7457 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:27)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7458 = or(T_7451, reset) @[Periphery.scala 315:27]
      node T_7460 = eq(T_7458, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7460 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:27)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    reg T_7462 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7462 <= TLXbar_1.io.out[0].e.valid
    reg T_7464 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_7464 <= TLXbar_1.io.out[0].e.ready
    reg T_7465 : {sink : UInt<1>}, clk
    T_7465 <- TLXbar_1.io.out[0].e.bits
    node T_7467 = eq(TLXbar_1.io.out[0].e.bits.sink, T_7465.sink) @[Periphery.scala 315:27]
    node T_7469 = eq(T_7464, UInt<1>("h00")) @[Periphery.scala 315:27]
    node T_7470 = and(T_7462, T_7469) @[Periphery.scala 315:27]
    when T_7470 : @[Periphery.scala 315:27]
      node T_7471 = or(TLXbar_1.io.out[0].e.valid, reset) @[Periphery.scala 315:27]
      node T_7473 = eq(T_7471, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7473 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:27)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      node T_7474 = or(T_7467, reset) @[Periphery.scala 315:27]
      node T_7476 = eq(T_7474, UInt<1>("h00")) @[Periphery.scala 315:27]
      when T_7476 : @[Periphery.scala 315:27]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:27)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:27]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:27]
        skip @[Periphery.scala 315:27]
      skip @[Periphery.scala 315:27]
    TLFragmenter_2.io.in[0] <- TLXbar_1.io.out[0] @[Periphery.scala 315:27]
    when TLFragmenter_2.io.out[0].a.valid : @[Periphery.scala 315:12]
      node T_7477 = leq(TLFragmenter_2.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_7478 = or(T_7477, reset) @[Periphery.scala 315:12]
      node T_7480 = eq(T_7478, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_7480 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Periphery.scala:315:12)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7482 = xor(UInt<1>("h00"), TLFragmenter_2.io.out[0].a.bits.source) @[Parameters.scala 37:23]
      node T_7483 = not(T_7482) @[Parameters.scala 37:9]
      node T_7485 = or(T_7483, UInt<8>("h0ff")) @[Parameters.scala 37:28]
      node T_7486 = not(T_7485) @[Parameters.scala 37:7]
      node T_7488 = eq(T_7486, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_7494 : UInt<1>[1] @[Parameters.scala 326:27]
      T_7494 is invalid @[Parameters.scala 326:27]
      T_7494[0] <= T_7488 @[Parameters.scala 326:27]
      node T_7497 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_7498 = dshl(T_7497, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_7499 = bits(T_7498, 1, 0) @[package.scala 11:76]
      node T_7500 = not(T_7499) @[package.scala 11:40]
      node T_7501 = shr(T_7500, 2) @[Edges.scala 15:47]
      node T_7502 = and(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_7501) @[Edges.scala 16:16]
      node T_7504 = eq(T_7502, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_7506 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_7507 = dshl(T_7506, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_7508 = bits(T_7507, 1, 0) @[package.scala 11:76]
      node T_7509 = not(T_7508) @[package.scala 11:40]
      node T_7510 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_7511 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_7513 = neq(T_7511, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_7515 = eq(T_7513, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_7516 = or(T_7510, T_7511) @[Edges.scala 63:32]
      node T_7517 = bits(T_7516, 0, 0) @[Edges.scala 58:14]
      node T_7518 = not(T_7517) @[Edges.scala 58:9]
      node T_7519 = cat(T_7515, T_7518) @[Cat.scala 20:58]
      node T_7520 = not(T_7509) @[Edges.scala 66:39]
      node T_7521 = and(T_7519, T_7520) @[Edges.scala 66:37]
      node T_7523 = bits(TLFragmenter_2.io.out[0].a.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_7524 = dshl(UInt<1>("h01"), T_7523) @[OneHot.scala 46:16]
      node T_7525 = bits(T_7524, 1, 0) @[OneHot.scala 46:41]
      node T_7527 = geq(TLFragmenter_2.io.out[0].a.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_7529 = bits(T_7525, 1, 1) @[Edges.scala 36:26]
      node T_7530 = bits(T_7521, 1, 1) @[Edges.scala 37:26]
      node T_7532 = eq(T_7530, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_7533 = and(UInt<1>("h01"), T_7532) @[Edges.scala 41:27]
      node T_7534 = and(T_7529, T_7533) @[Edges.scala 42:38]
      node T_7535 = or(T_7527, T_7534) @[Edges.scala 42:29]
      node T_7536 = and(UInt<1>("h01"), T_7530) @[Edges.scala 41:27]
      node T_7537 = and(T_7529, T_7536) @[Edges.scala 42:38]
      node T_7538 = or(T_7527, T_7537) @[Edges.scala 42:29]
      node T_7539 = bits(T_7525, 0, 0) @[Edges.scala 36:26]
      node T_7540 = bits(T_7521, 0, 0) @[Edges.scala 37:26]
      node T_7542 = eq(T_7540, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_7543 = and(T_7533, T_7542) @[Edges.scala 41:27]
      node T_7544 = and(T_7539, T_7543) @[Edges.scala 42:38]
      node T_7545 = or(T_7535, T_7544) @[Edges.scala 42:29]
      node T_7546 = and(T_7533, T_7540) @[Edges.scala 41:27]
      node T_7547 = and(T_7539, T_7546) @[Edges.scala 42:38]
      node T_7548 = or(T_7535, T_7547) @[Edges.scala 42:29]
      node T_7549 = and(T_7536, T_7542) @[Edges.scala 41:27]
      node T_7550 = and(T_7539, T_7549) @[Edges.scala 42:38]
      node T_7551 = or(T_7538, T_7550) @[Edges.scala 42:29]
      node T_7552 = and(T_7536, T_7540) @[Edges.scala 41:27]
      node T_7553 = and(T_7539, T_7552) @[Edges.scala 42:38]
      node T_7554 = or(T_7538, T_7553) @[Edges.scala 42:29]
      node T_7555 = cat(T_7548, T_7545) @[Cat.scala 20:58]
      node T_7556 = cat(T_7554, T_7551) @[Cat.scala 20:58]
      node T_7557 = cat(T_7556, T_7555) @[Cat.scala 20:58]
      node T_7558 = eq(TLFragmenter_2.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Periphery.scala 315:12]
      when T_7558 : @[Periphery.scala 315:12]
        node T_7560 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_7561 = dshl(T_7560, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_7562 = bits(T_7561, 1, 0) @[package.scala 11:76]
        node T_7563 = not(T_7562) @[package.scala 11:40]
        node T_7564 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_7565 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_7567 = neq(T_7565, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_7569 = eq(T_7567, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_7570 = or(T_7564, T_7565) @[Edges.scala 63:32]
        node T_7571 = bits(T_7570, 0, 0) @[Edges.scala 58:14]
        node T_7572 = not(T_7571) @[Edges.scala 58:9]
        node T_7573 = cat(T_7569, T_7572) @[Cat.scala 20:58]
        node T_7574 = not(T_7563) @[Edges.scala 66:39]
        node T_7575 = and(T_7573, T_7574) @[Edges.scala 66:37]
        node T_7576 = cat(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_7575) @[Cat.scala 20:58]
        node T_7578 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7580 = eq(T_7578, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7580 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7581 = or(T_7494[0], reset) @[Periphery.scala 315:12]
        node T_7583 = eq(T_7581, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7583 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7585 = geq(TLFragmenter_2.io.out[0].a.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_7586 = or(T_7585, reset) @[Periphery.scala 315:12]
        node T_7588 = eq(T_7586, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7588 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7589 = or(T_7504, reset) @[Periphery.scala 315:12]
        node T_7591 = eq(T_7589, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7591 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7592 = leq(TLFragmenter_2.io.out[0].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_7593 = or(T_7592, reset) @[Periphery.scala 315:12]
        node T_7595 = eq(T_7593, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7595 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Periphery.scala:315:12)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7596 = not(TLFragmenter_2.io.out[0].a.bits.mask) @[Periphery.scala 315:12]
        node T_7598 = eq(T_7596, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_7599 = or(T_7598, reset) @[Periphery.scala 315:12]
        node T_7601 = eq(T_7599, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7601 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7602 = eq(TLFragmenter_2.io.out[0].a.bits.opcode, UInt<3>("h04")) @[Periphery.scala 315:12]
      when T_7602 : @[Periphery.scala 315:12]
        node T_7604 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_7605 = dshl(T_7604, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_7606 = bits(T_7605, 1, 0) @[package.scala 11:76]
        node T_7607 = not(T_7606) @[package.scala 11:40]
        node T_7608 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_7609 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_7611 = neq(T_7609, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_7613 = eq(T_7611, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_7614 = or(T_7608, T_7609) @[Edges.scala 63:32]
        node T_7615 = bits(T_7614, 0, 0) @[Edges.scala 58:14]
        node T_7616 = not(T_7615) @[Edges.scala 58:9]
        node T_7617 = cat(T_7613, T_7616) @[Cat.scala 20:58]
        node T_7618 = not(T_7607) @[Edges.scala 66:39]
        node T_7619 = and(T_7617, T_7618) @[Edges.scala 66:37]
        node T_7620 = cat(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_7619) @[Cat.scala 20:58]
        node T_7622 = leq(UInt<1>("h00"), TLFragmenter_2.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_7624 = leq(TLFragmenter_2.io.out[0].a.bits.size, UInt<2>("h02")) @[Parameters.scala 61:42]
        node T_7625 = and(T_7622, T_7624) @[Parameters.scala 61:37]
        node T_7626 = or(T_7625, reset) @[Periphery.scala 315:12]
        node T_7628 = eq(T_7626, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7628 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7629 = or(T_7494[0], reset) @[Periphery.scala 315:12]
        node T_7631 = eq(T_7629, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7631 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7632 = or(T_7504, reset) @[Periphery.scala 315:12]
        node T_7634 = eq(T_7632, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7634 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7636 = eq(TLFragmenter_2.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_7637 = or(T_7636, reset) @[Periphery.scala 315:12]
        node T_7639 = eq(T_7637, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7639 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7640 = eq(TLFragmenter_2.io.out[0].a.bits.mask, T_7557) @[Periphery.scala 315:12]
        node T_7641 = or(T_7640, reset) @[Periphery.scala 315:12]
        node T_7643 = eq(T_7641, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7643 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7644 = eq(TLFragmenter_2.io.out[0].a.bits.opcode, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_7644 : @[Periphery.scala 315:12]
        node T_7646 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_7647 = dshl(T_7646, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_7648 = bits(T_7647, 1, 0) @[package.scala 11:76]
        node T_7649 = not(T_7648) @[package.scala 11:40]
        node T_7650 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_7651 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_7653 = neq(T_7651, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_7655 = eq(T_7653, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_7656 = or(T_7650, T_7651) @[Edges.scala 63:32]
        node T_7657 = bits(T_7656, 0, 0) @[Edges.scala 58:14]
        node T_7658 = not(T_7657) @[Edges.scala 58:9]
        node T_7659 = cat(T_7655, T_7658) @[Cat.scala 20:58]
        node T_7660 = not(T_7649) @[Edges.scala 66:39]
        node T_7661 = and(T_7659, T_7660) @[Edges.scala 66:37]
        node T_7662 = cat(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_7661) @[Cat.scala 20:58]
        node T_7664 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7666 = eq(T_7664, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7666 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7667 = or(T_7494[0], reset) @[Periphery.scala 315:12]
        node T_7669 = eq(T_7667, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7669 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7670 = or(T_7504, reset) @[Periphery.scala 315:12]
        node T_7672 = eq(T_7670, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7672 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7674 = eq(TLFragmenter_2.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_7675 = or(T_7674, reset) @[Periphery.scala 315:12]
        node T_7677 = eq(T_7675, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7677 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7678 = eq(TLFragmenter_2.io.out[0].a.bits.mask, T_7557) @[Periphery.scala 315:12]
        node T_7679 = or(T_7678, reset) @[Periphery.scala 315:12]
        node T_7681 = eq(T_7679, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7681 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7682 = eq(TLFragmenter_2.io.out[0].a.bits.opcode, UInt<1>("h01")) @[Periphery.scala 315:12]
      when T_7682 : @[Periphery.scala 315:12]
        node T_7684 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_7685 = dshl(T_7684, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_7686 = bits(T_7685, 1, 0) @[package.scala 11:76]
        node T_7687 = not(T_7686) @[package.scala 11:40]
        node T_7688 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_7689 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_7691 = neq(T_7689, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_7693 = eq(T_7691, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_7694 = or(T_7688, T_7689) @[Edges.scala 63:32]
        node T_7695 = bits(T_7694, 0, 0) @[Edges.scala 58:14]
        node T_7696 = not(T_7695) @[Edges.scala 58:9]
        node T_7697 = cat(T_7693, T_7696) @[Cat.scala 20:58]
        node T_7698 = not(T_7687) @[Edges.scala 66:39]
        node T_7699 = and(T_7697, T_7698) @[Edges.scala 66:37]
        node T_7700 = cat(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_7699) @[Cat.scala 20:58]
        node T_7702 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7704 = eq(T_7702, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7704 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7705 = or(T_7494[0], reset) @[Periphery.scala 315:12]
        node T_7707 = eq(T_7705, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7707 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7708 = or(T_7504, reset) @[Periphery.scala 315:12]
        node T_7710 = eq(T_7708, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7710 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7712 = eq(TLFragmenter_2.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_7713 = or(T_7712, reset) @[Periphery.scala 315:12]
        node T_7715 = eq(T_7713, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7715 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7716 = not(T_7557) @[Periphery.scala 315:12]
        node T_7717 = and(TLFragmenter_2.io.out[0].a.bits.mask, T_7716) @[Periphery.scala 315:12]
        node T_7719 = eq(T_7717, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_7720 = or(T_7719, reset) @[Periphery.scala 315:12]
        node T_7722 = eq(T_7720, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7722 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7723 = eq(TLFragmenter_2.io.out[0].a.bits.opcode, UInt<2>("h02")) @[Periphery.scala 315:12]
      when T_7723 : @[Periphery.scala 315:12]
        node T_7725 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_7726 = dshl(T_7725, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_7727 = bits(T_7726, 1, 0) @[package.scala 11:76]
        node T_7728 = not(T_7727) @[package.scala 11:40]
        node T_7729 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_7730 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_7732 = neq(T_7730, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_7734 = eq(T_7732, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_7735 = or(T_7729, T_7730) @[Edges.scala 63:32]
        node T_7736 = bits(T_7735, 0, 0) @[Edges.scala 58:14]
        node T_7737 = not(T_7736) @[Edges.scala 58:9]
        node T_7738 = cat(T_7734, T_7737) @[Cat.scala 20:58]
        node T_7739 = not(T_7728) @[Edges.scala 66:39]
        node T_7740 = and(T_7738, T_7739) @[Edges.scala 66:37]
        node T_7741 = cat(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_7740) @[Cat.scala 20:58]
        node T_7743 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7745 = eq(T_7743, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7745 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7746 = or(T_7494[0], reset) @[Periphery.scala 315:12]
        node T_7748 = eq(T_7746, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7748 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7749 = or(T_7504, reset) @[Periphery.scala 315:12]
        node T_7751 = eq(T_7749, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7751 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7752 = leq(TLFragmenter_2.io.out[0].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_7753 = or(T_7752, reset) @[Periphery.scala 315:12]
        node T_7755 = eq(T_7753, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7755 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:315:12)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7756 = eq(TLFragmenter_2.io.out[0].a.bits.mask, T_7557) @[Periphery.scala 315:12]
        node T_7757 = or(T_7756, reset) @[Periphery.scala 315:12]
        node T_7759 = eq(T_7757, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7759 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7760 = eq(TLFragmenter_2.io.out[0].a.bits.opcode, UInt<2>("h03")) @[Periphery.scala 315:12]
      when T_7760 : @[Periphery.scala 315:12]
        node T_7762 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_7763 = dshl(T_7762, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_7764 = bits(T_7763, 1, 0) @[package.scala 11:76]
        node T_7765 = not(T_7764) @[package.scala 11:40]
        node T_7766 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_7767 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_7769 = neq(T_7767, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_7771 = eq(T_7769, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_7772 = or(T_7766, T_7767) @[Edges.scala 63:32]
        node T_7773 = bits(T_7772, 0, 0) @[Edges.scala 58:14]
        node T_7774 = not(T_7773) @[Edges.scala 58:9]
        node T_7775 = cat(T_7771, T_7774) @[Cat.scala 20:58]
        node T_7776 = not(T_7765) @[Edges.scala 66:39]
        node T_7777 = and(T_7775, T_7776) @[Edges.scala 66:37]
        node T_7778 = cat(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_7777) @[Cat.scala 20:58]
        node T_7780 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7782 = eq(T_7780, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7782 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7783 = or(T_7494[0], reset) @[Periphery.scala 315:12]
        node T_7785 = eq(T_7783, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7785 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7786 = or(T_7504, reset) @[Periphery.scala 315:12]
        node T_7788 = eq(T_7786, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7788 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7789 = leq(TLFragmenter_2.io.out[0].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_7790 = or(T_7789, reset) @[Periphery.scala 315:12]
        node T_7792 = eq(T_7790, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7792 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Periphery.scala:315:12)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7793 = eq(TLFragmenter_2.io.out[0].a.bits.mask, T_7557) @[Periphery.scala 315:12]
        node T_7794 = or(T_7793, reset) @[Periphery.scala 315:12]
        node T_7796 = eq(T_7794, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7796 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7797 = eq(TLFragmenter_2.io.out[0].a.bits.opcode, UInt<3>("h05")) @[Periphery.scala 315:12]
      when T_7797 : @[Periphery.scala 315:12]
        node T_7799 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_7800 = dshl(T_7799, TLFragmenter_2.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_7801 = bits(T_7800, 1, 0) @[package.scala 11:76]
        node T_7802 = not(T_7801) @[package.scala 11:40]
        node T_7803 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_7804 = bits(TLFragmenter_2.io.out[0].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_7806 = neq(T_7804, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_7808 = eq(T_7806, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_7809 = or(T_7803, T_7804) @[Edges.scala 63:32]
        node T_7810 = bits(T_7809, 0, 0) @[Edges.scala 58:14]
        node T_7811 = not(T_7810) @[Edges.scala 58:9]
        node T_7812 = cat(T_7808, T_7811) @[Cat.scala 20:58]
        node T_7813 = not(T_7802) @[Edges.scala 66:39]
        node T_7814 = and(T_7812, T_7813) @[Edges.scala 66:37]
        node T_7815 = cat(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_7814) @[Cat.scala 20:58]
        node T_7817 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7819 = eq(T_7817, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7819 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7820 = or(T_7494[0], reset) @[Periphery.scala 315:12]
        node T_7822 = eq(T_7820, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7822 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7823 = or(T_7504, reset) @[Periphery.scala 315:12]
        node T_7825 = eq(T_7823, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7825 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7826 = eq(TLFragmenter_2.io.out[0].a.bits.mask, T_7557) @[Periphery.scala 315:12]
        node T_7827 = or(T_7826, reset) @[Periphery.scala 315:12]
        node T_7829 = eq(T_7827, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7829 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    when TLFragmenter_2.io.out[0].b.valid : @[Periphery.scala 315:12]
      node T_7830 = leq(TLFragmenter_2.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_7831 = or(T_7830, reset) @[Periphery.scala 315:12]
      node T_7833 = eq(T_7831, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_7833 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Periphery.scala:315:12)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7835 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_7836 = dshl(T_7835, TLFragmenter_2.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_7837 = bits(T_7836, 1, 0) @[package.scala 11:76]
      node T_7838 = not(T_7837) @[package.scala 11:40]
      node T_7839 = bits(TLFragmenter_2.io.out[0].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_7840 = bits(TLFragmenter_2.io.out[0].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_7842 = neq(T_7840, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_7844 = eq(T_7842, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_7845 = or(T_7839, T_7840) @[Edges.scala 63:32]
      node T_7846 = bits(T_7845, 0, 0) @[Edges.scala 58:14]
      node T_7847 = not(T_7846) @[Edges.scala 58:9]
      node T_7848 = cat(T_7844, T_7847) @[Cat.scala 20:58]
      node T_7849 = not(T_7838) @[Edges.scala 66:39]
      node T_7850 = and(T_7848, T_7849) @[Edges.scala 66:37]
      node T_7851 = cat(TLFragmenter_2.io.out[0].b.bits.addr_hi, T_7850) @[Cat.scala 20:58]
      node T_7853 = xor(T_7851, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_7854 = cvt(T_7853) @[Parameters.scala 89:49]
      node T_7856 = and(T_7854, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_7857 = asSInt(T_7856) @[Parameters.scala 89:52]
      node T_7859 = eq(T_7857, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_7865 : UInt<1>[1] @[Parameters.scala 227:36]
      T_7865 is invalid @[Parameters.scala 227:36]
      T_7865[0] <= T_7859 @[Parameters.scala 227:36]
      node T_7868 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_7869 = dshl(T_7868, TLFragmenter_2.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_7870 = bits(T_7869, 1, 0) @[package.scala 11:76]
      node T_7871 = not(T_7870) @[package.scala 11:40]
      node T_7872 = shr(T_7871, 2) @[Edges.scala 15:47]
      node T_7873 = and(TLFragmenter_2.io.out[0].b.bits.addr_hi, T_7872) @[Edges.scala 16:16]
      node T_7875 = eq(T_7873, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_7877 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_7878 = dshl(T_7877, TLFragmenter_2.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_7879 = bits(T_7878, 1, 0) @[package.scala 11:76]
      node T_7880 = not(T_7879) @[package.scala 11:40]
      node T_7881 = bits(TLFragmenter_2.io.out[0].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_7882 = bits(TLFragmenter_2.io.out[0].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_7884 = neq(T_7882, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_7886 = eq(T_7884, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_7887 = or(T_7881, T_7882) @[Edges.scala 63:32]
      node T_7888 = bits(T_7887, 0, 0) @[Edges.scala 58:14]
      node T_7889 = not(T_7888) @[Edges.scala 58:9]
      node T_7890 = cat(T_7886, T_7889) @[Cat.scala 20:58]
      node T_7891 = not(T_7880) @[Edges.scala 66:39]
      node T_7892 = and(T_7890, T_7891) @[Edges.scala 66:37]
      node T_7894 = bits(TLFragmenter_2.io.out[0].b.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_7895 = dshl(UInt<1>("h01"), T_7894) @[OneHot.scala 46:16]
      node T_7896 = bits(T_7895, 1, 0) @[OneHot.scala 46:41]
      node T_7898 = geq(TLFragmenter_2.io.out[0].b.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_7900 = bits(T_7896, 1, 1) @[Edges.scala 36:26]
      node T_7901 = bits(T_7892, 1, 1) @[Edges.scala 37:26]
      node T_7903 = eq(T_7901, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_7904 = and(UInt<1>("h01"), T_7903) @[Edges.scala 41:27]
      node T_7905 = and(T_7900, T_7904) @[Edges.scala 42:38]
      node T_7906 = or(T_7898, T_7905) @[Edges.scala 42:29]
      node T_7907 = and(UInt<1>("h01"), T_7901) @[Edges.scala 41:27]
      node T_7908 = and(T_7900, T_7907) @[Edges.scala 42:38]
      node T_7909 = or(T_7898, T_7908) @[Edges.scala 42:29]
      node T_7910 = bits(T_7896, 0, 0) @[Edges.scala 36:26]
      node T_7911 = bits(T_7892, 0, 0) @[Edges.scala 37:26]
      node T_7913 = eq(T_7911, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_7914 = and(T_7904, T_7913) @[Edges.scala 41:27]
      node T_7915 = and(T_7910, T_7914) @[Edges.scala 42:38]
      node T_7916 = or(T_7906, T_7915) @[Edges.scala 42:29]
      node T_7917 = and(T_7904, T_7911) @[Edges.scala 41:27]
      node T_7918 = and(T_7910, T_7917) @[Edges.scala 42:38]
      node T_7919 = or(T_7906, T_7918) @[Edges.scala 42:29]
      node T_7920 = and(T_7907, T_7913) @[Edges.scala 41:27]
      node T_7921 = and(T_7910, T_7920) @[Edges.scala 42:38]
      node T_7922 = or(T_7909, T_7921) @[Edges.scala 42:29]
      node T_7923 = and(T_7907, T_7911) @[Edges.scala 41:27]
      node T_7924 = and(T_7910, T_7923) @[Edges.scala 42:38]
      node T_7925 = or(T_7909, T_7924) @[Edges.scala 42:29]
      node T_7926 = cat(T_7919, T_7916) @[Cat.scala 20:58]
      node T_7927 = cat(T_7925, T_7922) @[Cat.scala 20:58]
      node T_7928 = cat(T_7927, T_7926) @[Cat.scala 20:58]
      node T_7929 = eq(TLFragmenter_2.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Periphery.scala 315:12]
      when T_7929 : @[Periphery.scala 315:12]
        node T_7931 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7933 = eq(T_7931, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7933 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Periphery.scala:315:12)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7934 = or(T_7865[0], reset) @[Periphery.scala 315:12]
        node T_7936 = eq(T_7934, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7936 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7938 = geq(TLFragmenter_2.io.out[0].b.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_7939 = or(T_7938, reset) @[Periphery.scala 315:12]
        node T_7941 = eq(T_7939, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7941 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7942 = or(T_7875, reset) @[Periphery.scala 315:12]
        node T_7944 = eq(T_7942, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7944 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7945 = leq(TLFragmenter_2.io.out[0].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_7946 = or(T_7945, reset) @[Periphery.scala 315:12]
        node T_7948 = eq(T_7946, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7948 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Periphery.scala:315:12)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7949 = not(TLFragmenter_2.io.out[0].b.bits.mask) @[Periphery.scala 315:12]
        node T_7951 = eq(T_7949, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_7952 = or(T_7951, reset) @[Periphery.scala 315:12]
        node T_7954 = eq(T_7952, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7954 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7955 = eq(TLFragmenter_2.io.out[0].b.bits.opcode, UInt<3>("h04")) @[Periphery.scala 315:12]
      when T_7955 : @[Periphery.scala 315:12]
        node T_7957 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7959 = eq(T_7957, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7959 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Periphery.scala:315:12)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7960 = or(T_7865[0], reset) @[Periphery.scala 315:12]
        node T_7962 = eq(T_7960, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7962 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7963 = or(T_7875, reset) @[Periphery.scala 315:12]
        node T_7965 = eq(T_7963, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7965 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7967 = eq(TLFragmenter_2.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_7968 = or(T_7967, reset) @[Periphery.scala 315:12]
        node T_7970 = eq(T_7968, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7970 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7971 = eq(TLFragmenter_2.io.out[0].b.bits.mask, T_7928) @[Periphery.scala 315:12]
        node T_7972 = or(T_7971, reset) @[Periphery.scala 315:12]
        node T_7974 = eq(T_7972, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7974 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7975 = eq(TLFragmenter_2.io.out[0].b.bits.opcode, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_7975 : @[Periphery.scala 315:12]
        node T_7977 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7979 = eq(T_7977, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7979 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Periphery.scala:315:12)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7980 = or(T_7865[0], reset) @[Periphery.scala 315:12]
        node T_7982 = eq(T_7980, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7982 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7983 = or(T_7875, reset) @[Periphery.scala 315:12]
        node T_7985 = eq(T_7983, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7985 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7987 = eq(TLFragmenter_2.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_7988 = or(T_7987, reset) @[Periphery.scala 315:12]
        node T_7990 = eq(T_7988, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7990 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_7991 = eq(TLFragmenter_2.io.out[0].b.bits.mask, T_7928) @[Periphery.scala 315:12]
        node T_7992 = or(T_7991, reset) @[Periphery.scala 315:12]
        node T_7994 = eq(T_7992, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7994 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_7995 = eq(TLFragmenter_2.io.out[0].b.bits.opcode, UInt<1>("h01")) @[Periphery.scala 315:12]
      when T_7995 : @[Periphery.scala 315:12]
        node T_7997 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_7999 = eq(T_7997, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_7999 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Periphery.scala:315:12)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8000 = or(T_7865[0], reset) @[Periphery.scala 315:12]
        node T_8002 = eq(T_8000, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8002 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8003 = or(T_7875, reset) @[Periphery.scala 315:12]
        node T_8005 = eq(T_8003, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8005 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8007 = eq(TLFragmenter_2.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8008 = or(T_8007, reset) @[Periphery.scala 315:12]
        node T_8010 = eq(T_8008, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8010 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8011 = not(T_7928) @[Periphery.scala 315:12]
        node T_8012 = and(TLFragmenter_2.io.out[0].b.bits.mask, T_8011) @[Periphery.scala 315:12]
        node T_8014 = eq(T_8012, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8015 = or(T_8014, reset) @[Periphery.scala 315:12]
        node T_8017 = eq(T_8015, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8017 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8018 = eq(TLFragmenter_2.io.out[0].b.bits.opcode, UInt<2>("h02")) @[Periphery.scala 315:12]
      when T_8018 : @[Periphery.scala 315:12]
        node T_8020 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_8022 = eq(T_8020, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8022 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Periphery.scala:315:12)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8023 = or(T_7865[0], reset) @[Periphery.scala 315:12]
        node T_8025 = eq(T_8023, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8025 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8026 = or(T_7875, reset) @[Periphery.scala 315:12]
        node T_8028 = eq(T_8026, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8028 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8029 = leq(TLFragmenter_2.io.out[0].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_8030 = or(T_8029, reset) @[Periphery.scala 315:12]
        node T_8032 = eq(T_8030, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8032 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:315:12)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8033 = eq(TLFragmenter_2.io.out[0].b.bits.mask, T_7928) @[Periphery.scala 315:12]
        node T_8034 = or(T_8033, reset) @[Periphery.scala 315:12]
        node T_8036 = eq(T_8034, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8036 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8037 = eq(TLFragmenter_2.io.out[0].b.bits.opcode, UInt<2>("h03")) @[Periphery.scala 315:12]
      when T_8037 : @[Periphery.scala 315:12]
        node T_8039 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_8041 = eq(T_8039, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8041 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Periphery.scala:315:12)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8042 = or(T_7865[0], reset) @[Periphery.scala 315:12]
        node T_8044 = eq(T_8042, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8044 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8045 = or(T_7875, reset) @[Periphery.scala 315:12]
        node T_8047 = eq(T_8045, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8047 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8048 = leq(TLFragmenter_2.io.out[0].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_8049 = or(T_8048, reset) @[Periphery.scala 315:12]
        node T_8051 = eq(T_8049, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8051 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Periphery.scala:315:12)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8052 = eq(TLFragmenter_2.io.out[0].b.bits.mask, T_7928) @[Periphery.scala 315:12]
        node T_8053 = or(T_8052, reset) @[Periphery.scala 315:12]
        node T_8055 = eq(T_8053, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8055 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8056 = eq(TLFragmenter_2.io.out[0].b.bits.opcode, UInt<3>("h05")) @[Periphery.scala 315:12]
      when T_8056 : @[Periphery.scala 315:12]
        node T_8058 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_8060 = eq(T_8058, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8060 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Periphery.scala:315:12)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8061 = or(T_7865[0], reset) @[Periphery.scala 315:12]
        node T_8063 = eq(T_8061, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8063 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8064 = or(T_7875, reset) @[Periphery.scala 315:12]
        node T_8066 = eq(T_8064, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8066 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8067 = eq(TLFragmenter_2.io.out[0].b.bits.mask, T_7928) @[Periphery.scala 315:12]
        node T_8068 = or(T_8067, reset) @[Periphery.scala 315:12]
        node T_8070 = eq(T_8068, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8070 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Periphery.scala:315:12)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    when TLFragmenter_2.io.out[0].c.valid : @[Periphery.scala 315:12]
      node T_8071 = leq(TLFragmenter_2.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_8072 = or(T_8071, reset) @[Periphery.scala 315:12]
      node T_8074 = eq(T_8072, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8074 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Periphery.scala:315:12)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8076 = xor(UInt<1>("h00"), TLFragmenter_2.io.out[0].c.bits.source) @[Parameters.scala 37:23]
      node T_8077 = not(T_8076) @[Parameters.scala 37:9]
      node T_8079 = or(T_8077, UInt<8>("h0ff")) @[Parameters.scala 37:28]
      node T_8080 = not(T_8079) @[Parameters.scala 37:7]
      node T_8082 = eq(T_8080, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_8088 : UInt<1>[1] @[Parameters.scala 326:27]
      T_8088 is invalid @[Parameters.scala 326:27]
      T_8088[0] <= T_8082 @[Parameters.scala 326:27]
      node T_8091 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_8092 = dshl(T_8091, TLFragmenter_2.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_8093 = bits(T_8092, 1, 0) @[package.scala 11:76]
      node T_8094 = not(T_8093) @[package.scala 11:40]
      node T_8095 = shr(T_8094, 2) @[Edges.scala 15:47]
      node T_8096 = and(TLFragmenter_2.io.out[0].c.bits.addr_hi, T_8095) @[Edges.scala 16:16]
      node T_8098 = eq(T_8096, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_8100 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_8101 = dshl(T_8100, TLFragmenter_2.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_8102 = bits(T_8101, 1, 0) @[package.scala 11:76]
      node T_8103 = not(T_8102) @[package.scala 11:40]
      node T_8104 = and(TLFragmenter_2.io.out[0].c.bits.addr_lo, T_8103) @[Edges.scala 23:16]
      node T_8106 = eq(T_8104, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_8107 = and(T_8098, T_8106) @[Periphery.scala 315:12]
      node T_8108 = cat(TLFragmenter_2.io.out[0].c.bits.addr_hi, TLFragmenter_2.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_8110 = xor(T_8108, UInt<13>("h01000")) @[Parameters.scala 89:31]
      node T_8111 = cvt(T_8110) @[Parameters.scala 89:49]
      node T_8113 = and(T_8111, asSInt(UInt<13>("h01000"))) @[Parameters.scala 89:52]
      node T_8114 = asSInt(T_8113) @[Parameters.scala 89:52]
      node T_8116 = eq(T_8114, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_8122 : UInt<1>[1] @[Parameters.scala 227:36]
      T_8122 is invalid @[Parameters.scala 227:36]
      T_8122[0] <= T_8116 @[Parameters.scala 227:36]
      node T_8124 = eq(TLFragmenter_2.io.out[0].c.bits.opcode, UInt<3>("h04")) @[Periphery.scala 315:12]
      when T_8124 : @[Periphery.scala 315:12]
        node T_8125 = or(T_8122[0], reset) @[Periphery.scala 315:12]
        node T_8127 = eq(T_8125, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8127 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8128 = or(T_8088[0], reset) @[Periphery.scala 315:12]
        node T_8130 = eq(T_8128, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8130 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8132 = geq(TLFragmenter_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_8133 = or(T_8132, reset) @[Periphery.scala 315:12]
        node T_8135 = eq(T_8133, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8135 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8136 = or(T_8107, reset) @[Periphery.scala 315:12]
        node T_8138 = eq(T_8136, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8138 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8139 = leq(TLFragmenter_2.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_8140 = or(T_8139, reset) @[Periphery.scala 315:12]
        node T_8142 = eq(T_8140, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8142 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Periphery.scala:315:12)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8144 = eq(TLFragmenter_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8145 = or(T_8144, reset) @[Periphery.scala 315:12]
        node T_8147 = eq(T_8145, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8147 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Periphery.scala:315:12)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8148 = eq(TLFragmenter_2.io.out[0].c.bits.opcode, UInt<3>("h05")) @[Periphery.scala 315:12]
      when T_8148 : @[Periphery.scala 315:12]
        node T_8149 = or(T_8122[0], reset) @[Periphery.scala 315:12]
        node T_8151 = eq(T_8149, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8151 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8152 = or(T_8088[0], reset) @[Periphery.scala 315:12]
        node T_8154 = eq(T_8152, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8154 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8156 = geq(TLFragmenter_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_8157 = or(T_8156, reset) @[Periphery.scala 315:12]
        node T_8159 = eq(T_8157, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8159 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8160 = or(T_8107, reset) @[Periphery.scala 315:12]
        node T_8162 = eq(T_8160, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8162 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8163 = leq(TLFragmenter_2.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_8164 = or(T_8163, reset) @[Periphery.scala 315:12]
        node T_8166 = eq(T_8164, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8166 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Periphery.scala:315:12)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8168 = eq(TLFragmenter_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8169 = or(T_8168, reset) @[Periphery.scala 315:12]
        node T_8171 = eq(T_8169, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8171 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Periphery.scala:315:12)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8172 = eq(TLFragmenter_2.io.out[0].c.bits.opcode, UInt<3>("h06")) @[Periphery.scala 315:12]
      when T_8172 : @[Periphery.scala 315:12]
        node T_8173 = cat(TLFragmenter_2.io.out[0].c.bits.addr_hi, TLFragmenter_2.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_8175 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_8177 = eq(T_8175, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8177 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8178 = or(T_8088[0], reset) @[Periphery.scala 315:12]
        node T_8180 = eq(T_8178, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8180 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8182 = geq(TLFragmenter_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_8183 = or(T_8182, reset) @[Periphery.scala 315:12]
        node T_8185 = eq(T_8183, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8185 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8186 = or(T_8107, reset) @[Periphery.scala 315:12]
        node T_8188 = eq(T_8186, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8188 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8189 = leq(TLFragmenter_2.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_8190 = or(T_8189, reset) @[Periphery.scala 315:12]
        node T_8192 = eq(T_8190, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8192 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Periphery.scala:315:12)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8194 = eq(TLFragmenter_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8195 = or(T_8194, reset) @[Periphery.scala 315:12]
        node T_8197 = eq(T_8195, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8197 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Periphery.scala:315:12)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8198 = eq(TLFragmenter_2.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Periphery.scala 315:12]
      when T_8198 : @[Periphery.scala 315:12]
        node T_8199 = cat(TLFragmenter_2.io.out[0].c.bits.addr_hi, TLFragmenter_2.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_8201 = or(UInt<1>("h00"), reset) @[Periphery.scala 315:12]
        node T_8203 = eq(T_8201, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8203 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Periphery.scala:315:12)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8204 = or(T_8088[0], reset) @[Periphery.scala 315:12]
        node T_8206 = eq(T_8204, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8206 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8208 = geq(TLFragmenter_2.io.out[0].c.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_8209 = or(T_8208, reset) @[Periphery.scala 315:12]
        node T_8211 = eq(T_8209, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8211 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8212 = or(T_8107, reset) @[Periphery.scala 315:12]
        node T_8214 = eq(T_8212, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8214 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8215 = leq(TLFragmenter_2.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_8216 = or(T_8215, reset) @[Periphery.scala 315:12]
        node T_8218 = eq(T_8216, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8218 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Periphery.scala:315:12)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8220 = eq(TLFragmenter_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8221 = or(T_8220, reset) @[Periphery.scala 315:12]
        node T_8223 = eq(T_8221, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8223 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Periphery.scala:315:12)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8224 = eq(TLFragmenter_2.io.out[0].c.bits.opcode, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8224 : @[Periphery.scala 315:12]
        node T_8225 = or(T_8122[0], reset) @[Periphery.scala 315:12]
        node T_8227 = eq(T_8225, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8227 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8228 = or(T_8088[0], reset) @[Periphery.scala 315:12]
        node T_8230 = eq(T_8228, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8230 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8231 = or(T_8107, reset) @[Periphery.scala 315:12]
        node T_8233 = eq(T_8231, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8233 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8235 = eq(TLFragmenter_2.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8236 = or(T_8235, reset) @[Periphery.scala 315:12]
        node T_8238 = eq(T_8236, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8238 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8239 = eq(TLFragmenter_2.io.out[0].c.bits.opcode, UInt<1>("h01")) @[Periphery.scala 315:12]
      when T_8239 : @[Periphery.scala 315:12]
        node T_8240 = or(T_8122[0], reset) @[Periphery.scala 315:12]
        node T_8242 = eq(T_8240, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8242 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8243 = or(T_8088[0], reset) @[Periphery.scala 315:12]
        node T_8245 = eq(T_8243, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8245 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8246 = or(T_8107, reset) @[Periphery.scala 315:12]
        node T_8248 = eq(T_8246, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8248 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8250 = eq(TLFragmenter_2.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8251 = or(T_8250, reset) @[Periphery.scala 315:12]
        node T_8253 = eq(T_8251, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8253 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8254 = eq(TLFragmenter_2.io.out[0].c.bits.opcode, UInt<2>("h02")) @[Periphery.scala 315:12]
      when T_8254 : @[Periphery.scala 315:12]
        node T_8255 = or(T_8122[0], reset) @[Periphery.scala 315:12]
        node T_8257 = eq(T_8255, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8257 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Periphery.scala:315:12)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8258 = or(T_8088[0], reset) @[Periphery.scala 315:12]
        node T_8260 = eq(T_8258, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8260 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8261 = or(T_8107, reset) @[Periphery.scala 315:12]
        node T_8263 = eq(T_8261, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8263 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8265 = eq(TLFragmenter_2.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8266 = or(T_8265, reset) @[Periphery.scala 315:12]
        node T_8268 = eq(T_8266, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8268 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8270 = eq(TLFragmenter_2.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8271 = or(T_8270, reset) @[Periphery.scala 315:12]
        node T_8273 = eq(T_8271, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8273 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Periphery.scala:315:12)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    when TLFragmenter_2.io.out[0].d.valid : @[Periphery.scala 315:12]
      node T_8274 = leq(TLFragmenter_2.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_8275 = or(T_8274, reset) @[Periphery.scala 315:12]
      node T_8277 = eq(T_8275, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8277 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Periphery.scala:315:12)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8279 = xor(UInt<1>("h00"), TLFragmenter_2.io.out[0].d.bits.source) @[Parameters.scala 37:23]
      node T_8280 = not(T_8279) @[Parameters.scala 37:9]
      node T_8282 = or(T_8280, UInt<8>("h0ff")) @[Parameters.scala 37:28]
      node T_8283 = not(T_8282) @[Parameters.scala 37:7]
      node T_8285 = eq(T_8283, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_8291 : UInt<1>[1] @[Parameters.scala 326:27]
      T_8291 is invalid @[Parameters.scala 326:27]
      T_8291[0] <= T_8285 @[Parameters.scala 326:27]
      node T_8294 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_8295 = dshl(T_8294, TLFragmenter_2.io.out[0].d.bits.size) @[package.scala 11:71]
      node T_8296 = bits(T_8295, 1, 0) @[package.scala 11:76]
      node T_8297 = not(T_8296) @[package.scala 11:40]
      node T_8298 = and(TLFragmenter_2.io.out[0].d.bits.addr_lo, T_8297) @[Edges.scala 23:16]
      node T_8300 = eq(T_8298, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_8302 = eq(UInt<1>("h00"), TLFragmenter_2.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      wire T_8308 : UInt<1>[1] @[Parameters.scala 220:31]
      T_8308 is invalid @[Parameters.scala 220:31]
      T_8308[0] <= T_8302 @[Parameters.scala 220:31]
      node T_8310 = eq(TLFragmenter_2.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Periphery.scala 315:12]
      when T_8310 : @[Periphery.scala 315:12]
        node T_8311 = or(T_8291[0], reset) @[Periphery.scala 315:12]
        node T_8313 = eq(T_8311, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8313 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8314 = or(T_8300, reset) @[Periphery.scala 315:12]
        node T_8316 = eq(T_8314, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8316 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8317 = or(T_8308[0], reset) @[Periphery.scala 315:12]
        node T_8319 = eq(T_8317, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8319 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8321 = geq(TLFragmenter_2.io.out[0].d.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_8322 = or(T_8321, reset) @[Periphery.scala 315:12]
        node T_8324 = eq(T_8322, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8324 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8326 = eq(TLFragmenter_2.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8327 = or(T_8326, reset) @[Periphery.scala 315:12]
        node T_8329 = eq(T_8327, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8329 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8331 = eq(TLFragmenter_2.io.out[0].d.bits.error, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8332 = or(T_8331, reset) @[Periphery.scala 315:12]
        node T_8334 = eq(T_8332, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8334 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Periphery.scala:315:12)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8335 = eq(TLFragmenter_2.io.out[0].d.bits.opcode, UInt<3>("h04")) @[Periphery.scala 315:12]
      when T_8335 : @[Periphery.scala 315:12]
        node T_8336 = or(T_8291[0], reset) @[Periphery.scala 315:12]
        node T_8338 = eq(T_8336, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8338 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8339 = or(T_8300, reset) @[Periphery.scala 315:12]
        node T_8341 = eq(T_8339, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8341 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8342 = or(T_8308[0], reset) @[Periphery.scala 315:12]
        node T_8344 = eq(T_8342, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8344 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8346 = geq(TLFragmenter_2.io.out[0].d.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_8347 = or(T_8346, reset) @[Periphery.scala 315:12]
        node T_8349 = eq(T_8347, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8349 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8350 = leq(TLFragmenter_2.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_8351 = or(T_8350, reset) @[Periphery.scala 315:12]
        node T_8353 = eq(T_8351, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8353 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Periphery.scala:315:12)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8354 = eq(TLFragmenter_2.io.out[0].d.bits.opcode, UInt<3>("h05")) @[Periphery.scala 315:12]
      when T_8354 : @[Periphery.scala 315:12]
        node T_8355 = or(T_8291[0], reset) @[Periphery.scala 315:12]
        node T_8357 = eq(T_8355, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8357 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8358 = or(T_8300, reset) @[Periphery.scala 315:12]
        node T_8360 = eq(T_8358, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8360 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8361 = or(T_8308[0], reset) @[Periphery.scala 315:12]
        node T_8363 = eq(T_8361, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8363 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8365 = geq(TLFragmenter_2.io.out[0].d.bits.size, UInt<2>("h02")) @[Periphery.scala 315:12]
        node T_8366 = or(T_8365, reset) @[Periphery.scala 315:12]
        node T_8368 = eq(T_8366, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8368 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Periphery.scala:315:12)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8369 = leq(TLFragmenter_2.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_8370 = or(T_8369, reset) @[Periphery.scala 315:12]
        node T_8372 = eq(T_8370, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8372 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Periphery.scala:315:12)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8373 = eq(TLFragmenter_2.io.out[0].d.bits.opcode, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8373 : @[Periphery.scala 315:12]
        node T_8374 = or(T_8291[0], reset) @[Periphery.scala 315:12]
        node T_8376 = eq(T_8374, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8376 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8377 = or(T_8300, reset) @[Periphery.scala 315:12]
        node T_8379 = eq(T_8377, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8379 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8380 = or(T_8308[0], reset) @[Periphery.scala 315:12]
        node T_8382 = eq(T_8380, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8382 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8384 = eq(TLFragmenter_2.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8385 = or(T_8384, reset) @[Periphery.scala 315:12]
        node T_8387 = eq(T_8385, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8387 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8388 = eq(TLFragmenter_2.io.out[0].d.bits.opcode, UInt<1>("h01")) @[Periphery.scala 315:12]
      when T_8388 : @[Periphery.scala 315:12]
        node T_8389 = or(T_8291[0], reset) @[Periphery.scala 315:12]
        node T_8391 = eq(T_8389, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8391 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8392 = or(T_8300, reset) @[Periphery.scala 315:12]
        node T_8394 = eq(T_8392, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8394 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8395 = or(T_8308[0], reset) @[Periphery.scala 315:12]
        node T_8397 = eq(T_8395, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8397 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8399 = eq(TLFragmenter_2.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8400 = or(T_8399, reset) @[Periphery.scala 315:12]
        node T_8402 = eq(T_8400, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8402 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8403 = eq(TLFragmenter_2.io.out[0].d.bits.opcode, UInt<2>("h02")) @[Periphery.scala 315:12]
      when T_8403 : @[Periphery.scala 315:12]
        node T_8404 = or(T_8291[0], reset) @[Periphery.scala 315:12]
        node T_8406 = eq(T_8404, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8406 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8407 = or(T_8300, reset) @[Periphery.scala 315:12]
        node T_8409 = eq(T_8407, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8409 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Periphery.scala:315:12)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8410 = or(T_8308[0], reset) @[Periphery.scala 315:12]
        node T_8412 = eq(T_8410, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8412 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8414 = eq(TLFragmenter_2.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8415 = or(T_8414, reset) @[Periphery.scala 315:12]
        node T_8417 = eq(T_8415, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8417 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Periphery.scala:315:12)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        node T_8419 = eq(TLFragmenter_2.io.out[0].d.bits.error, UInt<1>("h00")) @[Periphery.scala 315:12]
        node T_8420 = or(T_8419, reset) @[Periphery.scala 315:12]
        node T_8422 = eq(T_8420, UInt<1>("h00")) @[Periphery.scala 315:12]
        when T_8422 : @[Periphery.scala 315:12]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Periphery.scala:315:12)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 315:12]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
          skip @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    when TLFragmenter_2.io.out[0].e.valid : @[Periphery.scala 315:12]
      node T_8424 = eq(UInt<1>("h00"), TLFragmenter_2.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      wire T_8430 : UInt<1>[1] @[Parameters.scala 220:31]
      T_8430 is invalid @[Parameters.scala 220:31]
      T_8430[0] <= T_8424 @[Parameters.scala 220:31]
      node T_8432 = or(T_8430[0], reset) @[Periphery.scala 315:12]
      node T_8434 = eq(T_8432, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8434 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Periphery.scala:315:12)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8436 : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg T_8438 : UInt, clk
    reg T_8440 : UInt, clk
    reg T_8442 : UInt, clk
    reg T_8444 : UInt, clk
    reg T_8446 : UInt, clk
    node T_8448 = neq(T_8436, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8449 = and(TLFragmenter_2.io.out[0].a.valid, T_8448) @[Periphery.scala 315:12]
    when T_8449 : @[Periphery.scala 315:12]
      node T_8450 = eq(TLFragmenter_2.io.out[0].a.bits.opcode, T_8438) @[Periphery.scala 315:12]
      node T_8451 = or(T_8450, reset) @[Periphery.scala 315:12]
      node T_8453 = eq(T_8451, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8453 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8454 = eq(TLFragmenter_2.io.out[0].a.bits.param, T_8440) @[Periphery.scala 315:12]
      node T_8455 = or(T_8454, reset) @[Periphery.scala 315:12]
      node T_8457 = eq(T_8455, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8457 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8458 = eq(TLFragmenter_2.io.out[0].a.bits.size, T_8442) @[Periphery.scala 315:12]
      node T_8459 = or(T_8458, reset) @[Periphery.scala 315:12]
      node T_8461 = eq(T_8459, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8461 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8462 = eq(TLFragmenter_2.io.out[0].a.bits.source, T_8444) @[Periphery.scala 315:12]
      node T_8463 = or(T_8462, reset) @[Periphery.scala 315:12]
      node T_8465 = eq(T_8463, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8465 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8466 = eq(TLFragmenter_2.io.out[0].a.bits.addr_hi, T_8446) @[Periphery.scala 315:12]
      node T_8467 = or(T_8466, reset) @[Periphery.scala 315:12]
      node T_8469 = eq(T_8467, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8469 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    node T_8470 = and(TLFragmenter_2.io.out[0].a.ready, TLFragmenter_2.io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_8470 : @[Periphery.scala 315:12]
      node T_8472 = sub(T_8436, UInt<1>("h01")) @[Periphery.scala 315:12]
      node T_8473 = tail(T_8472, 1) @[Periphery.scala 315:12]
      T_8436 <= T_8473 @[Periphery.scala 315:12]
      node T_8475 = eq(T_8436, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8475 : @[Periphery.scala 315:12]
        node T_8476 = bits(TLFragmenter_2.io.out[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_8478 = eq(T_8476, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_8482 = bits(TLFragmenter_2.io.out[0].a.bits.size, 1, 0) @[OneHot.scala 46:21]
        node T_8483 = dshl(UInt<1>("h01"), T_8482) @[OneHot.scala 46:16]
        node T_8484 = bits(T_8483, 2, 0) @[OneHot.scala 46:41]
        node T_8485 = shr(T_8484, 2) @[Edges.scala 209:50]
        node T_8486 = or(T_8485, UInt<1>("h01")) @[Edges.scala 210:29]
        node T_8488 = mux(UInt<1>("h00"), T_8486, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_8490 = sub(T_8488, UInt<1>("h01")) @[Periphery.scala 315:12]
        node T_8491 = tail(T_8490, 1) @[Periphery.scala 315:12]
        T_8436 <= T_8491 @[Periphery.scala 315:12]
        T_8438 <= TLFragmenter_2.io.out[0].a.bits.opcode @[Periphery.scala 315:12]
        T_8440 <= TLFragmenter_2.io.out[0].a.bits.param @[Periphery.scala 315:12]
        T_8442 <= TLFragmenter_2.io.out[0].a.bits.size @[Periphery.scala 315:12]
        T_8444 <= TLFragmenter_2.io.out[0].a.bits.source @[Periphery.scala 315:12]
        T_8446 <= TLFragmenter_2.io.out[0].a.bits.addr_hi @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8493 : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg T_8495 : UInt, clk
    reg T_8497 : UInt, clk
    reg T_8499 : UInt, clk
    reg T_8501 : UInt, clk
    reg T_8503 : UInt, clk
    node T_8505 = neq(T_8493, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8506 = and(TLFragmenter_2.io.out[0].b.valid, T_8505) @[Periphery.scala 315:12]
    when T_8506 : @[Periphery.scala 315:12]
      node T_8507 = eq(TLFragmenter_2.io.out[0].b.bits.opcode, T_8495) @[Periphery.scala 315:12]
      node T_8508 = or(T_8507, reset) @[Periphery.scala 315:12]
      node T_8510 = eq(T_8508, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8510 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8511 = eq(TLFragmenter_2.io.out[0].b.bits.param, T_8497) @[Periphery.scala 315:12]
      node T_8512 = or(T_8511, reset) @[Periphery.scala 315:12]
      node T_8514 = eq(T_8512, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8514 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8515 = eq(TLFragmenter_2.io.out[0].b.bits.size, T_8499) @[Periphery.scala 315:12]
      node T_8516 = or(T_8515, reset) @[Periphery.scala 315:12]
      node T_8518 = eq(T_8516, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8518 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8519 = eq(TLFragmenter_2.io.out[0].b.bits.source, T_8501) @[Periphery.scala 315:12]
      node T_8520 = or(T_8519, reset) @[Periphery.scala 315:12]
      node T_8522 = eq(T_8520, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8522 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8523 = eq(TLFragmenter_2.io.out[0].b.bits.addr_hi, T_8503) @[Periphery.scala 315:12]
      node T_8524 = or(T_8523, reset) @[Periphery.scala 315:12]
      node T_8526 = eq(T_8524, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8526 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    node T_8527 = and(TLFragmenter_2.io.out[0].b.ready, TLFragmenter_2.io.out[0].b.valid) @[Decoupled.scala 21:42]
    when T_8527 : @[Periphery.scala 315:12]
      node T_8529 = sub(T_8493, UInt<1>("h01")) @[Periphery.scala 315:12]
      node T_8530 = tail(T_8529, 1) @[Periphery.scala 315:12]
      T_8493 <= T_8530 @[Periphery.scala 315:12]
      node T_8532 = eq(T_8493, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8532 : @[Periphery.scala 315:12]
        node T_8533 = bits(TLFragmenter_2.io.out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_8535 = eq(T_8533, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_8539 = bits(TLFragmenter_2.io.out[0].b.bits.size, 1, 0) @[OneHot.scala 46:21]
        node T_8540 = dshl(UInt<1>("h01"), T_8539) @[OneHot.scala 46:16]
        node T_8541 = bits(T_8540, 2, 0) @[OneHot.scala 46:41]
        node T_8542 = shr(T_8541, 2) @[Edges.scala 209:50]
        node T_8543 = or(T_8542, UInt<1>("h01")) @[Edges.scala 210:29]
        node T_8545 = mux(UInt<1>("h00"), T_8543, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_8547 = sub(T_8545, UInt<1>("h01")) @[Periphery.scala 315:12]
        node T_8548 = tail(T_8547, 1) @[Periphery.scala 315:12]
        T_8493 <= T_8548 @[Periphery.scala 315:12]
        T_8495 <= TLFragmenter_2.io.out[0].b.bits.opcode @[Periphery.scala 315:12]
        T_8497 <= TLFragmenter_2.io.out[0].b.bits.param @[Periphery.scala 315:12]
        T_8499 <= TLFragmenter_2.io.out[0].b.bits.size @[Periphery.scala 315:12]
        T_8501 <= TLFragmenter_2.io.out[0].b.bits.source @[Periphery.scala 315:12]
        T_8503 <= TLFragmenter_2.io.out[0].b.bits.addr_hi @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8550 : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg T_8552 : UInt, clk
    reg T_8554 : UInt, clk
    reg T_8556 : UInt, clk
    reg T_8558 : UInt, clk
    reg T_8560 : UInt, clk
    reg T_8562 : UInt, clk
    node T_8564 = neq(T_8550, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8565 = and(TLFragmenter_2.io.out[0].c.valid, T_8564) @[Periphery.scala 315:12]
    when T_8565 : @[Periphery.scala 315:12]
      node T_8566 = eq(TLFragmenter_2.io.out[0].c.bits.opcode, T_8552) @[Periphery.scala 315:12]
      node T_8567 = or(T_8566, reset) @[Periphery.scala 315:12]
      node T_8569 = eq(T_8567, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8569 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8570 = eq(TLFragmenter_2.io.out[0].c.bits.param, T_8554) @[Periphery.scala 315:12]
      node T_8571 = or(T_8570, reset) @[Periphery.scala 315:12]
      node T_8573 = eq(T_8571, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8573 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8574 = eq(TLFragmenter_2.io.out[0].c.bits.size, T_8556) @[Periphery.scala 315:12]
      node T_8575 = or(T_8574, reset) @[Periphery.scala 315:12]
      node T_8577 = eq(T_8575, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8577 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8578 = eq(TLFragmenter_2.io.out[0].c.bits.source, T_8558) @[Periphery.scala 315:12]
      node T_8579 = or(T_8578, reset) @[Periphery.scala 315:12]
      node T_8581 = eq(T_8579, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8581 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8582 = eq(TLFragmenter_2.io.out[0].c.bits.addr_hi, T_8560) @[Periphery.scala 315:12]
      node T_8583 = or(T_8582, reset) @[Periphery.scala 315:12]
      node T_8585 = eq(T_8583, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8585 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8586 = eq(TLFragmenter_2.io.out[0].c.bits.addr_lo, T_8562) @[Periphery.scala 315:12]
      node T_8587 = or(T_8586, reset) @[Periphery.scala 315:12]
      node T_8589 = eq(T_8587, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8589 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    node T_8590 = and(TLFragmenter_2.io.out[0].c.ready, TLFragmenter_2.io.out[0].c.valid) @[Decoupled.scala 21:42]
    when T_8590 : @[Periphery.scala 315:12]
      node T_8592 = sub(T_8550, UInt<1>("h01")) @[Periphery.scala 315:12]
      node T_8593 = tail(T_8592, 1) @[Periphery.scala 315:12]
      T_8550 <= T_8593 @[Periphery.scala 315:12]
      node T_8595 = eq(T_8550, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8595 : @[Periphery.scala 315:12]
        node T_8596 = bits(TLFragmenter_2.io.out[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_8600 = bits(TLFragmenter_2.io.out[0].c.bits.size, 1, 0) @[OneHot.scala 46:21]
        node T_8601 = dshl(UInt<1>("h01"), T_8600) @[OneHot.scala 46:16]
        node T_8602 = bits(T_8601, 2, 0) @[OneHot.scala 46:41]
        node T_8603 = shr(T_8602, 2) @[Edges.scala 209:50]
        node T_8604 = or(T_8603, UInt<1>("h01")) @[Edges.scala 210:29]
        node T_8606 = mux(UInt<1>("h00"), T_8604, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_8608 = sub(T_8606, UInt<1>("h01")) @[Periphery.scala 315:12]
        node T_8609 = tail(T_8608, 1) @[Periphery.scala 315:12]
        T_8550 <= T_8609 @[Periphery.scala 315:12]
        T_8552 <= TLFragmenter_2.io.out[0].c.bits.opcode @[Periphery.scala 315:12]
        T_8554 <= TLFragmenter_2.io.out[0].c.bits.param @[Periphery.scala 315:12]
        T_8556 <= TLFragmenter_2.io.out[0].c.bits.size @[Periphery.scala 315:12]
        T_8558 <= TLFragmenter_2.io.out[0].c.bits.source @[Periphery.scala 315:12]
        T_8560 <= TLFragmenter_2.io.out[0].c.bits.addr_hi @[Periphery.scala 315:12]
        T_8562 <= TLFragmenter_2.io.out[0].c.bits.addr_lo @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8611 : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg T_8613 : UInt, clk
    reg T_8615 : UInt, clk
    reg T_8617 : UInt, clk
    reg T_8619 : UInt, clk
    reg T_8621 : UInt, clk
    reg T_8623 : UInt, clk
    node T_8625 = neq(T_8611, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8626 = and(TLFragmenter_2.io.out[0].d.valid, T_8625) @[Periphery.scala 315:12]
    when T_8626 : @[Periphery.scala 315:12]
      node T_8627 = eq(TLFragmenter_2.io.out[0].d.bits.opcode, T_8613) @[Periphery.scala 315:12]
      node T_8628 = or(T_8627, reset) @[Periphery.scala 315:12]
      node T_8630 = eq(T_8628, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8630 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8631 = eq(TLFragmenter_2.io.out[0].d.bits.param, T_8615) @[Periphery.scala 315:12]
      node T_8632 = or(T_8631, reset) @[Periphery.scala 315:12]
      node T_8634 = eq(T_8632, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8634 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8635 = eq(TLFragmenter_2.io.out[0].d.bits.size, T_8617) @[Periphery.scala 315:12]
      node T_8636 = or(T_8635, reset) @[Periphery.scala 315:12]
      node T_8638 = eq(T_8636, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8638 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8639 = eq(TLFragmenter_2.io.out[0].d.bits.source, T_8619) @[Periphery.scala 315:12]
      node T_8640 = or(T_8639, reset) @[Periphery.scala 315:12]
      node T_8642 = eq(T_8640, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8642 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8643 = eq(TLFragmenter_2.io.out[0].d.bits.sink, T_8621) @[Periphery.scala 315:12]
      node T_8644 = or(T_8643, reset) @[Periphery.scala 315:12]
      node T_8646 = eq(T_8644, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8646 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8647 = eq(TLFragmenter_2.io.out[0].d.bits.addr_lo, T_8623) @[Periphery.scala 315:12]
      node T_8648 = or(T_8647, reset) @[Periphery.scala 315:12]
      node T_8650 = eq(T_8648, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8650 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Periphery.scala:315:12)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    node T_8651 = and(TLFragmenter_2.io.out[0].d.ready, TLFragmenter_2.io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_8651 : @[Periphery.scala 315:12]
      node T_8653 = sub(T_8611, UInt<1>("h01")) @[Periphery.scala 315:12]
      node T_8654 = tail(T_8653, 1) @[Periphery.scala 315:12]
      T_8611 <= T_8654 @[Periphery.scala 315:12]
      node T_8656 = eq(T_8611, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8656 : @[Periphery.scala 315:12]
        node T_8657 = bits(TLFragmenter_2.io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_8661 = bits(TLFragmenter_2.io.out[0].d.bits.size, 1, 0) @[OneHot.scala 46:21]
        node T_8662 = dshl(UInt<1>("h01"), T_8661) @[OneHot.scala 46:16]
        node T_8663 = bits(T_8662, 2, 0) @[OneHot.scala 46:41]
        node T_8664 = shr(T_8663, 2) @[Edges.scala 209:50]
        node T_8665 = or(T_8664, UInt<1>("h01")) @[Edges.scala 210:29]
        node T_8667 = mux(UInt<1>("h01"), T_8665, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_8669 = sub(T_8667, UInt<1>("h01")) @[Periphery.scala 315:12]
        node T_8670 = tail(T_8669, 1) @[Periphery.scala 315:12]
        T_8611 <= T_8670 @[Periphery.scala 315:12]
        T_8613 <= TLFragmenter_2.io.out[0].d.bits.opcode @[Periphery.scala 315:12]
        T_8615 <= TLFragmenter_2.io.out[0].d.bits.param @[Periphery.scala 315:12]
        T_8617 <= TLFragmenter_2.io.out[0].d.bits.size @[Periphery.scala 315:12]
        T_8619 <= TLFragmenter_2.io.out[0].d.bits.source @[Periphery.scala 315:12]
        T_8621 <= TLFragmenter_2.io.out[0].d.bits.sink @[Periphery.scala 315:12]
        T_8623 <= TLFragmenter_2.io.out[0].d.bits.addr_lo @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8672 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8672 <= TLFragmenter_2.io.out[0].a.valid
    reg T_8674 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8674 <= TLFragmenter_2.io.out[0].a.ready
    reg T_8675 : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, mask : UInt<4>, data : UInt<32>}, clk
    T_8675 <- TLFragmenter_2.io.out[0].a.bits
    node T_8683 = cat(TLFragmenter_2.io.out[0].a.bits.addr_hi, TLFragmenter_2.io.out[0].a.bits.mask) @[Periphery.scala 315:12]
    node T_8684 = cat(T_8683, TLFragmenter_2.io.out[0].a.bits.data) @[Periphery.scala 315:12]
    node T_8685 = cat(TLFragmenter_2.io.out[0].a.bits.size, TLFragmenter_2.io.out[0].a.bits.source) @[Periphery.scala 315:12]
    node T_8686 = cat(TLFragmenter_2.io.out[0].a.bits.opcode, TLFragmenter_2.io.out[0].a.bits.param) @[Periphery.scala 315:12]
    node T_8687 = cat(T_8686, T_8685) @[Periphery.scala 315:12]
    node T_8688 = cat(T_8687, T_8684) @[Periphery.scala 315:12]
    node T_8689 = cat(T_8675.addr_hi, T_8675.mask) @[Periphery.scala 315:12]
    node T_8690 = cat(T_8689, T_8675.data) @[Periphery.scala 315:12]
    node T_8691 = cat(T_8675.size, T_8675.source) @[Periphery.scala 315:12]
    node T_8692 = cat(T_8675.opcode, T_8675.param) @[Periphery.scala 315:12]
    node T_8693 = cat(T_8692, T_8691) @[Periphery.scala 315:12]
    node T_8694 = cat(T_8693, T_8690) @[Periphery.scala 315:12]
    node T_8695 = eq(T_8688, T_8694) @[Periphery.scala 315:12]
    node T_8697 = eq(T_8674, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8698 = and(T_8672, T_8697) @[Periphery.scala 315:12]
    when T_8698 : @[Periphery.scala 315:12]
      node T_8699 = or(TLFragmenter_2.io.out[0].a.valid, reset) @[Periphery.scala 315:12]
      node T_8701 = eq(T_8699, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8701 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:12)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8702 = or(T_8695, reset) @[Periphery.scala 315:12]
      node T_8704 = eq(T_8702, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8704 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:12)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8706 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8706 <= TLFragmenter_2.io.out[0].b.valid
    reg T_8708 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8708 <= TLFragmenter_2.io.out[0].b.ready
    reg T_8709 : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, mask : UInt<4>, data : UInt<32>}, clk
    T_8709 <- TLFragmenter_2.io.out[0].b.bits
    node T_8717 = cat(TLFragmenter_2.io.out[0].b.bits.addr_hi, TLFragmenter_2.io.out[0].b.bits.mask) @[Periphery.scala 315:12]
    node T_8718 = cat(T_8717, TLFragmenter_2.io.out[0].b.bits.data) @[Periphery.scala 315:12]
    node T_8719 = cat(TLFragmenter_2.io.out[0].b.bits.size, TLFragmenter_2.io.out[0].b.bits.source) @[Periphery.scala 315:12]
    node T_8720 = cat(TLFragmenter_2.io.out[0].b.bits.opcode, TLFragmenter_2.io.out[0].b.bits.param) @[Periphery.scala 315:12]
    node T_8721 = cat(T_8720, T_8719) @[Periphery.scala 315:12]
    node T_8722 = cat(T_8721, T_8718) @[Periphery.scala 315:12]
    node T_8723 = cat(T_8709.addr_hi, T_8709.mask) @[Periphery.scala 315:12]
    node T_8724 = cat(T_8723, T_8709.data) @[Periphery.scala 315:12]
    node T_8725 = cat(T_8709.size, T_8709.source) @[Periphery.scala 315:12]
    node T_8726 = cat(T_8709.opcode, T_8709.param) @[Periphery.scala 315:12]
    node T_8727 = cat(T_8726, T_8725) @[Periphery.scala 315:12]
    node T_8728 = cat(T_8727, T_8724) @[Periphery.scala 315:12]
    node T_8729 = eq(T_8722, T_8728) @[Periphery.scala 315:12]
    node T_8731 = eq(T_8708, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8732 = and(T_8706, T_8731) @[Periphery.scala 315:12]
    when T_8732 : @[Periphery.scala 315:12]
      node T_8733 = or(TLFragmenter_2.io.out[0].b.valid, reset) @[Periphery.scala 315:12]
      node T_8735 = eq(T_8733, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8735 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:12)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8736 = or(T_8729, reset) @[Periphery.scala 315:12]
      node T_8738 = eq(T_8736, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8738 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:12)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8740 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8740 <= TLFragmenter_2.io.out[0].c.valid
    reg T_8742 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8742 <= TLFragmenter_2.io.out[0].c.ready
    reg T_8743 : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<8>, addr_hi : UInt<11>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_8743 <- TLFragmenter_2.io.out[0].c.bits
    node T_8752 = cat(TLFragmenter_2.io.out[0].c.bits.data, TLFragmenter_2.io.out[0].c.bits.error) @[Periphery.scala 315:12]
    node T_8753 = cat(TLFragmenter_2.io.out[0].c.bits.addr_hi, TLFragmenter_2.io.out[0].c.bits.addr_lo) @[Periphery.scala 315:12]
    node T_8754 = cat(T_8753, T_8752) @[Periphery.scala 315:12]
    node T_8755 = cat(TLFragmenter_2.io.out[0].c.bits.size, TLFragmenter_2.io.out[0].c.bits.source) @[Periphery.scala 315:12]
    node T_8756 = cat(TLFragmenter_2.io.out[0].c.bits.opcode, TLFragmenter_2.io.out[0].c.bits.param) @[Periphery.scala 315:12]
    node T_8757 = cat(T_8756, T_8755) @[Periphery.scala 315:12]
    node T_8758 = cat(T_8757, T_8754) @[Periphery.scala 315:12]
    node T_8759 = cat(T_8743.data, T_8743.error) @[Periphery.scala 315:12]
    node T_8760 = cat(T_8743.addr_hi, T_8743.addr_lo) @[Periphery.scala 315:12]
    node T_8761 = cat(T_8760, T_8759) @[Periphery.scala 315:12]
    node T_8762 = cat(T_8743.size, T_8743.source) @[Periphery.scala 315:12]
    node T_8763 = cat(T_8743.opcode, T_8743.param) @[Periphery.scala 315:12]
    node T_8764 = cat(T_8763, T_8762) @[Periphery.scala 315:12]
    node T_8765 = cat(T_8764, T_8761) @[Periphery.scala 315:12]
    node T_8766 = eq(T_8758, T_8765) @[Periphery.scala 315:12]
    node T_8768 = eq(T_8742, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8769 = and(T_8740, T_8768) @[Periphery.scala 315:12]
    when T_8769 : @[Periphery.scala 315:12]
      node T_8770 = or(TLFragmenter_2.io.out[0].c.valid, reset) @[Periphery.scala 315:12]
      node T_8772 = eq(T_8770, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8772 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:12)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8773 = or(T_8766, reset) @[Periphery.scala 315:12]
      node T_8775 = eq(T_8773, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8775 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:12)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8777 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8777 <= TLFragmenter_2.io.out[0].d.valid
    reg T_8779 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8779 <= TLFragmenter_2.io.out[0].d.ready
    reg T_8780 : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<8>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_8780 <- TLFragmenter_2.io.out[0].d.bits
    node T_8789 = cat(TLFragmenter_2.io.out[0].d.bits.data, TLFragmenter_2.io.out[0].d.bits.error) @[Periphery.scala 315:12]
    node T_8790 = cat(TLFragmenter_2.io.out[0].d.bits.sink, TLFragmenter_2.io.out[0].d.bits.addr_lo) @[Periphery.scala 315:12]
    node T_8791 = cat(T_8790, T_8789) @[Periphery.scala 315:12]
    node T_8792 = cat(TLFragmenter_2.io.out[0].d.bits.size, TLFragmenter_2.io.out[0].d.bits.source) @[Periphery.scala 315:12]
    node T_8793 = cat(TLFragmenter_2.io.out[0].d.bits.opcode, TLFragmenter_2.io.out[0].d.bits.param) @[Periphery.scala 315:12]
    node T_8794 = cat(T_8793, T_8792) @[Periphery.scala 315:12]
    node T_8795 = cat(T_8794, T_8791) @[Periphery.scala 315:12]
    node T_8796 = cat(T_8780.data, T_8780.error) @[Periphery.scala 315:12]
    node T_8797 = cat(T_8780.sink, T_8780.addr_lo) @[Periphery.scala 315:12]
    node T_8798 = cat(T_8797, T_8796) @[Periphery.scala 315:12]
    node T_8799 = cat(T_8780.size, T_8780.source) @[Periphery.scala 315:12]
    node T_8800 = cat(T_8780.opcode, T_8780.param) @[Periphery.scala 315:12]
    node T_8801 = cat(T_8800, T_8799) @[Periphery.scala 315:12]
    node T_8802 = cat(T_8801, T_8798) @[Periphery.scala 315:12]
    node T_8803 = eq(T_8795, T_8802) @[Periphery.scala 315:12]
    node T_8805 = eq(T_8779, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8806 = and(T_8777, T_8805) @[Periphery.scala 315:12]
    when T_8806 : @[Periphery.scala 315:12]
      node T_8807 = or(TLFragmenter_2.io.out[0].d.valid, reset) @[Periphery.scala 315:12]
      node T_8809 = eq(T_8807, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8809 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:12)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8810 = or(T_8803, reset) @[Periphery.scala 315:12]
      node T_8812 = eq(T_8810, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8812 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:12)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    reg T_8814 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8814 <= TLFragmenter_2.io.out[0].e.valid
    reg T_8816 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_8816 <= TLFragmenter_2.io.out[0].e.ready
    reg T_8817 : {sink : UInt<1>}, clk
    T_8817 <- TLFragmenter_2.io.out[0].e.bits
    node T_8819 = eq(TLFragmenter_2.io.out[0].e.bits.sink, T_8817.sink) @[Periphery.scala 315:12]
    node T_8821 = eq(T_8816, UInt<1>("h00")) @[Periphery.scala 315:12]
    node T_8822 = and(T_8814, T_8821) @[Periphery.scala 315:12]
    when T_8822 : @[Periphery.scala 315:12]
      node T_8823 = or(TLFragmenter_2.io.out[0].e.valid, reset) @[Periphery.scala 315:12]
      node T_8825 = eq(T_8823, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8825 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:315:12)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      node T_8826 = or(T_8819, reset) @[Periphery.scala 315:12]
      node T_8828 = eq(T_8826, UInt<1>("h00")) @[Periphery.scala 315:12]
      when T_8828 : @[Periphery.scala 315:12]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:315:12)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 315:12]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 315:12]
        skip @[Periphery.scala 315:12]
      skip @[Periphery.scala 315:12]
    bootrom_1.io.in[0] <- TLFragmenter_2.io.out[0] @[Periphery.scala 315:12]
    when TLXbar_1.io.out[1].a.valid : @[Periphery.scala 291:43]
      node T_8829 = leq(TLXbar_1.io.out[1].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_8830 = or(T_8829, reset) @[Periphery.scala 291:43]
      node T_8832 = eq(T_8830, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_8832 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Periphery.scala:291:43)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_8834 = xor(UInt<1>("h00"), TLXbar_1.io.out[1].a.bits.source) @[Parameters.scala 37:23]
      node T_8835 = not(T_8834) @[Parameters.scala 37:9]
      node T_8837 = or(T_8835, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_8838 = not(T_8837) @[Parameters.scala 37:7]
      node T_8840 = eq(T_8838, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_8846 : UInt<1>[1] @[Parameters.scala 326:27]
      T_8846 is invalid @[Parameters.scala 326:27]
      T_8846[0] <= T_8840 @[Parameters.scala 326:27]
      node T_8849 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_8850 = dshl(T_8849, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
      node T_8851 = bits(T_8850, 7, 0) @[package.scala 11:76]
      node T_8852 = not(T_8851) @[package.scala 11:40]
      node T_8853 = shr(T_8852, 2) @[Edges.scala 15:47]
      node T_8854 = and(TLXbar_1.io.out[1].a.bits.addr_hi, T_8853) @[Edges.scala 16:16]
      node T_8856 = eq(T_8854, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_8858 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_8859 = dshl(T_8858, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
      node T_8860 = bits(T_8859, 1, 0) @[package.scala 11:76]
      node T_8861 = not(T_8860) @[package.scala 11:40]
      node T_8862 = bits(TLXbar_1.io.out[1].a.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_8863 = bits(TLXbar_1.io.out[1].a.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_8865 = neq(T_8863, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_8867 = eq(T_8865, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_8868 = or(T_8862, T_8863) @[Edges.scala 63:32]
      node T_8869 = bits(T_8868, 0, 0) @[Edges.scala 58:14]
      node T_8870 = not(T_8869) @[Edges.scala 58:9]
      node T_8871 = cat(T_8867, T_8870) @[Cat.scala 20:58]
      node T_8872 = not(T_8861) @[Edges.scala 66:39]
      node T_8873 = and(T_8871, T_8872) @[Edges.scala 66:37]
      node T_8875 = bits(TLXbar_1.io.out[1].a.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_8876 = dshl(UInt<1>("h01"), T_8875) @[OneHot.scala 46:16]
      node T_8877 = bits(T_8876, 1, 0) @[OneHot.scala 46:41]
      node T_8879 = geq(TLXbar_1.io.out[1].a.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_8881 = bits(T_8877, 1, 1) @[Edges.scala 36:26]
      node T_8882 = bits(T_8873, 1, 1) @[Edges.scala 37:26]
      node T_8884 = eq(T_8882, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_8885 = and(UInt<1>("h01"), T_8884) @[Edges.scala 41:27]
      node T_8886 = and(T_8881, T_8885) @[Edges.scala 42:38]
      node T_8887 = or(T_8879, T_8886) @[Edges.scala 42:29]
      node T_8888 = and(UInt<1>("h01"), T_8882) @[Edges.scala 41:27]
      node T_8889 = and(T_8881, T_8888) @[Edges.scala 42:38]
      node T_8890 = or(T_8879, T_8889) @[Edges.scala 42:29]
      node T_8891 = bits(T_8877, 0, 0) @[Edges.scala 36:26]
      node T_8892 = bits(T_8873, 0, 0) @[Edges.scala 37:26]
      node T_8894 = eq(T_8892, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_8895 = and(T_8885, T_8894) @[Edges.scala 41:27]
      node T_8896 = and(T_8891, T_8895) @[Edges.scala 42:38]
      node T_8897 = or(T_8887, T_8896) @[Edges.scala 42:29]
      node T_8898 = and(T_8885, T_8892) @[Edges.scala 41:27]
      node T_8899 = and(T_8891, T_8898) @[Edges.scala 42:38]
      node T_8900 = or(T_8887, T_8899) @[Edges.scala 42:29]
      node T_8901 = and(T_8888, T_8894) @[Edges.scala 41:27]
      node T_8902 = and(T_8891, T_8901) @[Edges.scala 42:38]
      node T_8903 = or(T_8890, T_8902) @[Edges.scala 42:29]
      node T_8904 = and(T_8888, T_8892) @[Edges.scala 41:27]
      node T_8905 = and(T_8891, T_8904) @[Edges.scala 42:38]
      node T_8906 = or(T_8890, T_8905) @[Edges.scala 42:29]
      node T_8907 = cat(T_8900, T_8897) @[Cat.scala 20:58]
      node T_8908 = cat(T_8906, T_8903) @[Cat.scala 20:58]
      node T_8909 = cat(T_8908, T_8907) @[Cat.scala 20:58]
      node T_8910 = eq(TLXbar_1.io.out[1].a.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:43]
      when T_8910 : @[Periphery.scala 291:43]
        node T_8912 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_8913 = dshl(T_8912, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
        node T_8914 = bits(T_8913, 1, 0) @[package.scala 11:76]
        node T_8915 = not(T_8914) @[package.scala 11:40]
        node T_8916 = bits(TLXbar_1.io.out[1].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_8917 = bits(TLXbar_1.io.out[1].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_8919 = neq(T_8917, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_8921 = eq(T_8919, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_8922 = or(T_8916, T_8917) @[Edges.scala 63:32]
        node T_8923 = bits(T_8922, 0, 0) @[Edges.scala 58:14]
        node T_8924 = not(T_8923) @[Edges.scala 58:9]
        node T_8925 = cat(T_8921, T_8924) @[Cat.scala 20:58]
        node T_8926 = not(T_8915) @[Edges.scala 66:39]
        node T_8927 = and(T_8925, T_8926) @[Edges.scala 66:37]
        node T_8928 = cat(TLXbar_1.io.out[1].a.bits.addr_hi, T_8927) @[Cat.scala 20:58]
        node T_8930 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_8932 = eq(T_8930, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8932 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8933 = or(T_8846[0], reset) @[Periphery.scala 291:43]
        node T_8935 = eq(T_8933, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8935 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8937 = geq(TLXbar_1.io.out[1].a.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_8938 = or(T_8937, reset) @[Periphery.scala 291:43]
        node T_8940 = eq(T_8938, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8940 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8941 = or(T_8856, reset) @[Periphery.scala 291:43]
        node T_8943 = eq(T_8941, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8943 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8944 = leq(TLXbar_1.io.out[1].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_8945 = or(T_8944, reset) @[Periphery.scala 291:43]
        node T_8947 = eq(T_8945, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8947 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Periphery.scala:291:43)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8948 = not(TLXbar_1.io.out[1].a.bits.mask) @[Periphery.scala 291:43]
        node T_8950 = eq(T_8948, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_8951 = or(T_8950, reset) @[Periphery.scala 291:43]
        node T_8953 = eq(T_8951, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8953 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_8954 = eq(TLXbar_1.io.out[1].a.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:43]
      when T_8954 : @[Periphery.scala 291:43]
        node T_8956 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_8957 = dshl(T_8956, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
        node T_8958 = bits(T_8957, 1, 0) @[package.scala 11:76]
        node T_8959 = not(T_8958) @[package.scala 11:40]
        node T_8960 = bits(TLXbar_1.io.out[1].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_8961 = bits(TLXbar_1.io.out[1].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_8963 = neq(T_8961, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_8965 = eq(T_8963, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_8966 = or(T_8960, T_8961) @[Edges.scala 63:32]
        node T_8967 = bits(T_8966, 0, 0) @[Edges.scala 58:14]
        node T_8968 = not(T_8967) @[Edges.scala 58:9]
        node T_8969 = cat(T_8965, T_8968) @[Cat.scala 20:58]
        node T_8970 = not(T_8959) @[Edges.scala 66:39]
        node T_8971 = and(T_8969, T_8970) @[Edges.scala 66:37]
        node T_8972 = cat(TLXbar_1.io.out[1].a.bits.addr_hi, T_8971) @[Cat.scala 20:58]
        node T_8974 = leq(UInt<1>("h00"), TLXbar_1.io.out[1].a.bits.size) @[Parameters.scala 61:32]
        node T_8976 = leq(TLXbar_1.io.out[1].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_8977 = and(T_8974, T_8976) @[Parameters.scala 61:37]
        node T_8978 = or(T_8977, reset) @[Periphery.scala 291:43]
        node T_8980 = eq(T_8978, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8980 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8981 = or(T_8846[0], reset) @[Periphery.scala 291:43]
        node T_8983 = eq(T_8981, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8983 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8984 = or(T_8856, reset) @[Periphery.scala 291:43]
        node T_8986 = eq(T_8984, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8986 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8988 = eq(TLXbar_1.io.out[1].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_8989 = or(T_8988, reset) @[Periphery.scala 291:43]
        node T_8991 = eq(T_8989, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8991 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_8992 = eq(TLXbar_1.io.out[1].a.bits.mask, T_8909) @[Periphery.scala 291:43]
        node T_8993 = or(T_8992, reset) @[Periphery.scala 291:43]
        node T_8995 = eq(T_8993, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_8995 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_8996 = eq(TLXbar_1.io.out[1].a.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_8996 : @[Periphery.scala 291:43]
        node T_8998 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_8999 = dshl(T_8998, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
        node T_9000 = bits(T_8999, 1, 0) @[package.scala 11:76]
        node T_9001 = not(T_9000) @[package.scala 11:40]
        node T_9002 = bits(TLXbar_1.io.out[1].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_9003 = bits(TLXbar_1.io.out[1].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_9005 = neq(T_9003, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_9007 = eq(T_9005, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_9008 = or(T_9002, T_9003) @[Edges.scala 63:32]
        node T_9009 = bits(T_9008, 0, 0) @[Edges.scala 58:14]
        node T_9010 = not(T_9009) @[Edges.scala 58:9]
        node T_9011 = cat(T_9007, T_9010) @[Cat.scala 20:58]
        node T_9012 = not(T_9001) @[Edges.scala 66:39]
        node T_9013 = and(T_9011, T_9012) @[Edges.scala 66:37]
        node T_9014 = cat(TLXbar_1.io.out[1].a.bits.addr_hi, T_9013) @[Cat.scala 20:58]
        node T_9016 = leq(UInt<1>("h00"), TLXbar_1.io.out[1].a.bits.size) @[Parameters.scala 61:32]
        node T_9018 = leq(TLXbar_1.io.out[1].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_9019 = and(T_9016, T_9018) @[Parameters.scala 61:37]
        node T_9020 = or(T_9019, reset) @[Periphery.scala 291:43]
        node T_9022 = eq(T_9020, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9022 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9023 = or(T_8846[0], reset) @[Periphery.scala 291:43]
        node T_9025 = eq(T_9023, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9025 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9026 = or(T_8856, reset) @[Periphery.scala 291:43]
        node T_9028 = eq(T_9026, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9028 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9030 = eq(TLXbar_1.io.out[1].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9031 = or(T_9030, reset) @[Periphery.scala 291:43]
        node T_9033 = eq(T_9031, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9033 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9034 = eq(TLXbar_1.io.out[1].a.bits.mask, T_8909) @[Periphery.scala 291:43]
        node T_9035 = or(T_9034, reset) @[Periphery.scala 291:43]
        node T_9037 = eq(T_9035, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9037 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9038 = eq(TLXbar_1.io.out[1].a.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:43]
      when T_9038 : @[Periphery.scala 291:43]
        node T_9040 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_9041 = dshl(T_9040, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
        node T_9042 = bits(T_9041, 1, 0) @[package.scala 11:76]
        node T_9043 = not(T_9042) @[package.scala 11:40]
        node T_9044 = bits(TLXbar_1.io.out[1].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_9045 = bits(TLXbar_1.io.out[1].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_9047 = neq(T_9045, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_9049 = eq(T_9047, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_9050 = or(T_9044, T_9045) @[Edges.scala 63:32]
        node T_9051 = bits(T_9050, 0, 0) @[Edges.scala 58:14]
        node T_9052 = not(T_9051) @[Edges.scala 58:9]
        node T_9053 = cat(T_9049, T_9052) @[Cat.scala 20:58]
        node T_9054 = not(T_9043) @[Edges.scala 66:39]
        node T_9055 = and(T_9053, T_9054) @[Edges.scala 66:37]
        node T_9056 = cat(TLXbar_1.io.out[1].a.bits.addr_hi, T_9055) @[Cat.scala 20:58]
        node T_9058 = leq(UInt<1>("h00"), TLXbar_1.io.out[1].a.bits.size) @[Parameters.scala 61:32]
        node T_9060 = leq(TLXbar_1.io.out[1].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_9061 = and(T_9058, T_9060) @[Parameters.scala 61:37]
        node T_9062 = or(T_9061, reset) @[Periphery.scala 291:43]
        node T_9064 = eq(T_9062, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9064 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9065 = or(T_8846[0], reset) @[Periphery.scala 291:43]
        node T_9067 = eq(T_9065, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9067 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9068 = or(T_8856, reset) @[Periphery.scala 291:43]
        node T_9070 = eq(T_9068, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9070 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9072 = eq(TLXbar_1.io.out[1].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9073 = or(T_9072, reset) @[Periphery.scala 291:43]
        node T_9075 = eq(T_9073, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9075 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9076 = not(T_8909) @[Periphery.scala 291:43]
        node T_9077 = and(TLXbar_1.io.out[1].a.bits.mask, T_9076) @[Periphery.scala 291:43]
        node T_9079 = eq(T_9077, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9080 = or(T_9079, reset) @[Periphery.scala 291:43]
        node T_9082 = eq(T_9080, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9082 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9083 = eq(TLXbar_1.io.out[1].a.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:43]
      when T_9083 : @[Periphery.scala 291:43]
        node T_9085 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_9086 = dshl(T_9085, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
        node T_9087 = bits(T_9086, 1, 0) @[package.scala 11:76]
        node T_9088 = not(T_9087) @[package.scala 11:40]
        node T_9089 = bits(TLXbar_1.io.out[1].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_9090 = bits(TLXbar_1.io.out[1].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_9092 = neq(T_9090, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_9094 = eq(T_9092, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_9095 = or(T_9089, T_9090) @[Edges.scala 63:32]
        node T_9096 = bits(T_9095, 0, 0) @[Edges.scala 58:14]
        node T_9097 = not(T_9096) @[Edges.scala 58:9]
        node T_9098 = cat(T_9094, T_9097) @[Cat.scala 20:58]
        node T_9099 = not(T_9088) @[Edges.scala 66:39]
        node T_9100 = and(T_9098, T_9099) @[Edges.scala 66:37]
        node T_9101 = cat(TLXbar_1.io.out[1].a.bits.addr_hi, T_9100) @[Cat.scala 20:58]
        node T_9103 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9105 = eq(T_9103, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9105 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9106 = or(T_8846[0], reset) @[Periphery.scala 291:43]
        node T_9108 = eq(T_9106, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9108 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9109 = or(T_8856, reset) @[Periphery.scala 291:43]
        node T_9111 = eq(T_9109, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9111 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9112 = leq(TLXbar_1.io.out[1].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_9113 = or(T_9112, reset) @[Periphery.scala 291:43]
        node T_9115 = eq(T_9113, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9115 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:291:43)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9116 = eq(TLXbar_1.io.out[1].a.bits.mask, T_8909) @[Periphery.scala 291:43]
        node T_9117 = or(T_9116, reset) @[Periphery.scala 291:43]
        node T_9119 = eq(T_9117, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9119 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9120 = eq(TLXbar_1.io.out[1].a.bits.opcode, UInt<2>("h03")) @[Periphery.scala 291:43]
      when T_9120 : @[Periphery.scala 291:43]
        node T_9122 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_9123 = dshl(T_9122, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
        node T_9124 = bits(T_9123, 1, 0) @[package.scala 11:76]
        node T_9125 = not(T_9124) @[package.scala 11:40]
        node T_9126 = bits(TLXbar_1.io.out[1].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_9127 = bits(TLXbar_1.io.out[1].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_9129 = neq(T_9127, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_9131 = eq(T_9129, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_9132 = or(T_9126, T_9127) @[Edges.scala 63:32]
        node T_9133 = bits(T_9132, 0, 0) @[Edges.scala 58:14]
        node T_9134 = not(T_9133) @[Edges.scala 58:9]
        node T_9135 = cat(T_9131, T_9134) @[Cat.scala 20:58]
        node T_9136 = not(T_9125) @[Edges.scala 66:39]
        node T_9137 = and(T_9135, T_9136) @[Edges.scala 66:37]
        node T_9138 = cat(TLXbar_1.io.out[1].a.bits.addr_hi, T_9137) @[Cat.scala 20:58]
        node T_9140 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9142 = eq(T_9140, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9142 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9143 = or(T_8846[0], reset) @[Periphery.scala 291:43]
        node T_9145 = eq(T_9143, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9145 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9146 = or(T_8856, reset) @[Periphery.scala 291:43]
        node T_9148 = eq(T_9146, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9148 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9149 = leq(TLXbar_1.io.out[1].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_9150 = or(T_9149, reset) @[Periphery.scala 291:43]
        node T_9152 = eq(T_9150, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9152 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Periphery.scala:291:43)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9153 = eq(TLXbar_1.io.out[1].a.bits.mask, T_8909) @[Periphery.scala 291:43]
        node T_9154 = or(T_9153, reset) @[Periphery.scala 291:43]
        node T_9156 = eq(T_9154, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9156 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9157 = eq(TLXbar_1.io.out[1].a.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:43]
      when T_9157 : @[Periphery.scala 291:43]
        node T_9159 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
        node T_9160 = dshl(T_9159, TLXbar_1.io.out[1].a.bits.size) @[package.scala 11:71]
        node T_9161 = bits(T_9160, 1, 0) @[package.scala 11:76]
        node T_9162 = not(T_9161) @[package.scala 11:40]
        node T_9163 = bits(TLXbar_1.io.out[1].a.bits.mask, 3, 2) @[Edges.scala 61:22]
        node T_9164 = bits(TLXbar_1.io.out[1].a.bits.mask, 1, 0) @[Edges.scala 62:22]
        node T_9166 = neq(T_9164, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_9168 = eq(T_9166, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_9169 = or(T_9163, T_9164) @[Edges.scala 63:32]
        node T_9170 = bits(T_9169, 0, 0) @[Edges.scala 58:14]
        node T_9171 = not(T_9170) @[Edges.scala 58:9]
        node T_9172 = cat(T_9168, T_9171) @[Cat.scala 20:58]
        node T_9173 = not(T_9162) @[Edges.scala 66:39]
        node T_9174 = and(T_9172, T_9173) @[Edges.scala 66:37]
        node T_9175 = cat(TLXbar_1.io.out[1].a.bits.addr_hi, T_9174) @[Cat.scala 20:58]
        node T_9177 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9179 = eq(T_9177, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9179 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9180 = or(T_8846[0], reset) @[Periphery.scala 291:43]
        node T_9182 = eq(T_9180, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9182 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9183 = or(T_8856, reset) @[Periphery.scala 291:43]
        node T_9185 = eq(T_9183, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9185 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9186 = eq(TLXbar_1.io.out[1].a.bits.mask, T_8909) @[Periphery.scala 291:43]
        node T_9187 = or(T_9186, reset) @[Periphery.scala 291:43]
        node T_9189 = eq(T_9187, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9189 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    when TLXbar_1.io.out[1].b.valid : @[Periphery.scala 291:43]
      node T_9190 = leq(TLXbar_1.io.out[1].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_9191 = or(T_9190, reset) @[Periphery.scala 291:43]
      node T_9193 = eq(T_9191, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9193 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Periphery.scala:291:43)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9195 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_9196 = dshl(T_9195, TLXbar_1.io.out[1].b.bits.size) @[package.scala 11:71]
      node T_9197 = bits(T_9196, 1, 0) @[package.scala 11:76]
      node T_9198 = not(T_9197) @[package.scala 11:40]
      node T_9199 = bits(TLXbar_1.io.out[1].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_9200 = bits(TLXbar_1.io.out[1].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_9202 = neq(T_9200, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_9204 = eq(T_9202, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_9205 = or(T_9199, T_9200) @[Edges.scala 63:32]
      node T_9206 = bits(T_9205, 0, 0) @[Edges.scala 58:14]
      node T_9207 = not(T_9206) @[Edges.scala 58:9]
      node T_9208 = cat(T_9204, T_9207) @[Cat.scala 20:58]
      node T_9209 = not(T_9198) @[Edges.scala 66:39]
      node T_9210 = and(T_9208, T_9209) @[Edges.scala 66:37]
      node T_9211 = cat(TLXbar_1.io.out[1].b.bits.addr_hi, T_9210) @[Cat.scala 20:58]
      node T_9213 = xor(T_9211, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_9214 = cvt(T_9213) @[Parameters.scala 89:49]
      node T_9216 = and(T_9214, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_9217 = asSInt(T_9216) @[Parameters.scala 89:52]
      node T_9219 = eq(T_9217, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_9225 : UInt<1>[1] @[Parameters.scala 227:36]
      T_9225 is invalid @[Parameters.scala 227:36]
      T_9225[0] <= T_9219 @[Parameters.scala 227:36]
      node T_9228 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_9229 = dshl(T_9228, TLXbar_1.io.out[1].b.bits.size) @[package.scala 11:71]
      node T_9230 = bits(T_9229, 7, 0) @[package.scala 11:76]
      node T_9231 = not(T_9230) @[package.scala 11:40]
      node T_9232 = shr(T_9231, 2) @[Edges.scala 15:47]
      node T_9233 = and(TLXbar_1.io.out[1].b.bits.addr_hi, T_9232) @[Edges.scala 16:16]
      node T_9235 = eq(T_9233, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_9237 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 11:64]
      node T_9238 = dshl(T_9237, TLXbar_1.io.out[1].b.bits.size) @[package.scala 11:71]
      node T_9239 = bits(T_9238, 1, 0) @[package.scala 11:76]
      node T_9240 = not(T_9239) @[package.scala 11:40]
      node T_9241 = bits(TLXbar_1.io.out[1].b.bits.mask, 3, 2) @[Edges.scala 61:22]
      node T_9242 = bits(TLXbar_1.io.out[1].b.bits.mask, 1, 0) @[Edges.scala 62:22]
      node T_9244 = neq(T_9242, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_9246 = eq(T_9244, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_9247 = or(T_9241, T_9242) @[Edges.scala 63:32]
      node T_9248 = bits(T_9247, 0, 0) @[Edges.scala 58:14]
      node T_9249 = not(T_9248) @[Edges.scala 58:9]
      node T_9250 = cat(T_9246, T_9249) @[Cat.scala 20:58]
      node T_9251 = not(T_9240) @[Edges.scala 66:39]
      node T_9252 = and(T_9250, T_9251) @[Edges.scala 66:37]
      node T_9254 = bits(TLXbar_1.io.out[1].b.bits.size, 0, 0) @[OneHot.scala 46:21]
      node T_9255 = dshl(UInt<1>("h01"), T_9254) @[OneHot.scala 46:16]
      node T_9256 = bits(T_9255, 1, 0) @[OneHot.scala 46:41]
      node T_9258 = geq(TLXbar_1.io.out[1].b.bits.size, UInt<2>("h02")) @[Edges.scala 33:21]
      node T_9260 = bits(T_9256, 1, 1) @[Edges.scala 36:26]
      node T_9261 = bits(T_9252, 1, 1) @[Edges.scala 37:26]
      node T_9263 = eq(T_9261, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_9264 = and(UInt<1>("h01"), T_9263) @[Edges.scala 41:27]
      node T_9265 = and(T_9260, T_9264) @[Edges.scala 42:38]
      node T_9266 = or(T_9258, T_9265) @[Edges.scala 42:29]
      node T_9267 = and(UInt<1>("h01"), T_9261) @[Edges.scala 41:27]
      node T_9268 = and(T_9260, T_9267) @[Edges.scala 42:38]
      node T_9269 = or(T_9258, T_9268) @[Edges.scala 42:29]
      node T_9270 = bits(T_9256, 0, 0) @[Edges.scala 36:26]
      node T_9271 = bits(T_9252, 0, 0) @[Edges.scala 37:26]
      node T_9273 = eq(T_9271, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_9274 = and(T_9264, T_9273) @[Edges.scala 41:27]
      node T_9275 = and(T_9270, T_9274) @[Edges.scala 42:38]
      node T_9276 = or(T_9266, T_9275) @[Edges.scala 42:29]
      node T_9277 = and(T_9264, T_9271) @[Edges.scala 41:27]
      node T_9278 = and(T_9270, T_9277) @[Edges.scala 42:38]
      node T_9279 = or(T_9266, T_9278) @[Edges.scala 42:29]
      node T_9280 = and(T_9267, T_9273) @[Edges.scala 41:27]
      node T_9281 = and(T_9270, T_9280) @[Edges.scala 42:38]
      node T_9282 = or(T_9269, T_9281) @[Edges.scala 42:29]
      node T_9283 = and(T_9267, T_9271) @[Edges.scala 41:27]
      node T_9284 = and(T_9270, T_9283) @[Edges.scala 42:38]
      node T_9285 = or(T_9269, T_9284) @[Edges.scala 42:29]
      node T_9286 = cat(T_9279, T_9276) @[Cat.scala 20:58]
      node T_9287 = cat(T_9285, T_9282) @[Cat.scala 20:58]
      node T_9288 = cat(T_9287, T_9286) @[Cat.scala 20:58]
      node T_9289 = eq(TLXbar_1.io.out[1].b.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:43]
      when T_9289 : @[Periphery.scala 291:43]
        node T_9291 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9293 = eq(T_9291, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9293 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Periphery.scala:291:43)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9294 = or(T_9225[0], reset) @[Periphery.scala 291:43]
        node T_9296 = eq(T_9294, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9296 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9298 = geq(TLXbar_1.io.out[1].b.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_9299 = or(T_9298, reset) @[Periphery.scala 291:43]
        node T_9301 = eq(T_9299, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9301 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9302 = or(T_9235, reset) @[Periphery.scala 291:43]
        node T_9304 = eq(T_9302, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9304 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9305 = leq(TLXbar_1.io.out[1].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_9306 = or(T_9305, reset) @[Periphery.scala 291:43]
        node T_9308 = eq(T_9306, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9308 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Periphery.scala:291:43)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9309 = not(TLXbar_1.io.out[1].b.bits.mask) @[Periphery.scala 291:43]
        node T_9311 = eq(T_9309, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9312 = or(T_9311, reset) @[Periphery.scala 291:43]
        node T_9314 = eq(T_9312, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9314 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9315 = eq(TLXbar_1.io.out[1].b.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:43]
      when T_9315 : @[Periphery.scala 291:43]
        node T_9317 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9319 = eq(T_9317, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9319 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Periphery.scala:291:43)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9320 = or(T_9225[0], reset) @[Periphery.scala 291:43]
        node T_9322 = eq(T_9320, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9322 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9323 = or(T_9235, reset) @[Periphery.scala 291:43]
        node T_9325 = eq(T_9323, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9325 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9327 = eq(TLXbar_1.io.out[1].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9328 = or(T_9327, reset) @[Periphery.scala 291:43]
        node T_9330 = eq(T_9328, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9330 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9331 = eq(TLXbar_1.io.out[1].b.bits.mask, T_9288) @[Periphery.scala 291:43]
        node T_9332 = or(T_9331, reset) @[Periphery.scala 291:43]
        node T_9334 = eq(T_9332, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9334 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9335 = eq(TLXbar_1.io.out[1].b.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9335 : @[Periphery.scala 291:43]
        node T_9337 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9339 = eq(T_9337, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9339 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Periphery.scala:291:43)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9340 = or(T_9225[0], reset) @[Periphery.scala 291:43]
        node T_9342 = eq(T_9340, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9342 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9343 = or(T_9235, reset) @[Periphery.scala 291:43]
        node T_9345 = eq(T_9343, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9345 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9347 = eq(TLXbar_1.io.out[1].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9348 = or(T_9347, reset) @[Periphery.scala 291:43]
        node T_9350 = eq(T_9348, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9350 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9351 = eq(TLXbar_1.io.out[1].b.bits.mask, T_9288) @[Periphery.scala 291:43]
        node T_9352 = or(T_9351, reset) @[Periphery.scala 291:43]
        node T_9354 = eq(T_9352, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9354 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9355 = eq(TLXbar_1.io.out[1].b.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:43]
      when T_9355 : @[Periphery.scala 291:43]
        node T_9357 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9359 = eq(T_9357, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9359 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Periphery.scala:291:43)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9360 = or(T_9225[0], reset) @[Periphery.scala 291:43]
        node T_9362 = eq(T_9360, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9362 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9363 = or(T_9235, reset) @[Periphery.scala 291:43]
        node T_9365 = eq(T_9363, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9365 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9367 = eq(TLXbar_1.io.out[1].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9368 = or(T_9367, reset) @[Periphery.scala 291:43]
        node T_9370 = eq(T_9368, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9370 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9371 = not(T_9288) @[Periphery.scala 291:43]
        node T_9372 = and(TLXbar_1.io.out[1].b.bits.mask, T_9371) @[Periphery.scala 291:43]
        node T_9374 = eq(T_9372, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9375 = or(T_9374, reset) @[Periphery.scala 291:43]
        node T_9377 = eq(T_9375, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9377 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9378 = eq(TLXbar_1.io.out[1].b.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:43]
      when T_9378 : @[Periphery.scala 291:43]
        node T_9380 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9382 = eq(T_9380, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9382 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Periphery.scala:291:43)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9383 = or(T_9225[0], reset) @[Periphery.scala 291:43]
        node T_9385 = eq(T_9383, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9385 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9386 = or(T_9235, reset) @[Periphery.scala 291:43]
        node T_9388 = eq(T_9386, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9388 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9389 = leq(TLXbar_1.io.out[1].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_9390 = or(T_9389, reset) @[Periphery.scala 291:43]
        node T_9392 = eq(T_9390, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9392 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:291:43)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9393 = eq(TLXbar_1.io.out[1].b.bits.mask, T_9288) @[Periphery.scala 291:43]
        node T_9394 = or(T_9393, reset) @[Periphery.scala 291:43]
        node T_9396 = eq(T_9394, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9396 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9397 = eq(TLXbar_1.io.out[1].b.bits.opcode, UInt<2>("h03")) @[Periphery.scala 291:43]
      when T_9397 : @[Periphery.scala 291:43]
        node T_9399 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9401 = eq(T_9399, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9401 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Periphery.scala:291:43)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9402 = or(T_9225[0], reset) @[Periphery.scala 291:43]
        node T_9404 = eq(T_9402, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9404 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9405 = or(T_9235, reset) @[Periphery.scala 291:43]
        node T_9407 = eq(T_9405, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9407 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9408 = leq(TLXbar_1.io.out[1].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_9409 = or(T_9408, reset) @[Periphery.scala 291:43]
        node T_9411 = eq(T_9409, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9411 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Periphery.scala:291:43)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9412 = eq(TLXbar_1.io.out[1].b.bits.mask, T_9288) @[Periphery.scala 291:43]
        node T_9413 = or(T_9412, reset) @[Periphery.scala 291:43]
        node T_9415 = eq(T_9413, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9415 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9416 = eq(TLXbar_1.io.out[1].b.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:43]
      when T_9416 : @[Periphery.scala 291:43]
        node T_9418 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9420 = eq(T_9418, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9420 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Periphery.scala:291:43)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9421 = or(T_9225[0], reset) @[Periphery.scala 291:43]
        node T_9423 = eq(T_9421, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9423 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9424 = or(T_9235, reset) @[Periphery.scala 291:43]
        node T_9426 = eq(T_9424, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9426 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9427 = eq(TLXbar_1.io.out[1].b.bits.mask, T_9288) @[Periphery.scala 291:43]
        node T_9428 = or(T_9427, reset) @[Periphery.scala 291:43]
        node T_9430 = eq(T_9428, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9430 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Periphery.scala:291:43)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    when TLXbar_1.io.out[1].c.valid : @[Periphery.scala 291:43]
      node T_9431 = leq(TLXbar_1.io.out[1].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_9432 = or(T_9431, reset) @[Periphery.scala 291:43]
      node T_9434 = eq(T_9432, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9434 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Periphery.scala:291:43)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9436 = xor(UInt<1>("h00"), TLXbar_1.io.out[1].c.bits.source) @[Parameters.scala 37:23]
      node T_9437 = not(T_9436) @[Parameters.scala 37:9]
      node T_9439 = or(T_9437, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_9440 = not(T_9439) @[Parameters.scala 37:7]
      node T_9442 = eq(T_9440, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_9448 : UInt<1>[1] @[Parameters.scala 326:27]
      T_9448 is invalid @[Parameters.scala 326:27]
      T_9448[0] <= T_9442 @[Parameters.scala 326:27]
      node T_9451 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_9452 = dshl(T_9451, TLXbar_1.io.out[1].c.bits.size) @[package.scala 11:71]
      node T_9453 = bits(T_9452, 7, 0) @[package.scala 11:76]
      node T_9454 = not(T_9453) @[package.scala 11:40]
      node T_9455 = shr(T_9454, 2) @[Edges.scala 15:47]
      node T_9456 = and(TLXbar_1.io.out[1].c.bits.addr_hi, T_9455) @[Edges.scala 16:16]
      node T_9458 = eq(T_9456, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_9460 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_9461 = dshl(T_9460, TLXbar_1.io.out[1].c.bits.size) @[package.scala 11:71]
      node T_9462 = bits(T_9461, 7, 0) @[package.scala 11:76]
      node T_9463 = not(T_9462) @[package.scala 11:40]
      node T_9464 = and(TLXbar_1.io.out[1].c.bits.addr_lo, T_9463) @[Edges.scala 23:16]
      node T_9466 = eq(T_9464, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_9467 = and(T_9458, T_9466) @[Periphery.scala 291:43]
      node T_9468 = cat(TLXbar_1.io.out[1].c.bits.addr_hi, TLXbar_1.io.out[1].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_9470 = xor(T_9468, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_9471 = cvt(T_9470) @[Parameters.scala 89:49]
      node T_9473 = and(T_9471, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_9474 = asSInt(T_9473) @[Parameters.scala 89:52]
      node T_9476 = eq(T_9474, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_9482 : UInt<1>[1] @[Parameters.scala 227:36]
      T_9482 is invalid @[Parameters.scala 227:36]
      T_9482[0] <= T_9476 @[Parameters.scala 227:36]
      node T_9484 = eq(TLXbar_1.io.out[1].c.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:43]
      when T_9484 : @[Periphery.scala 291:43]
        node T_9485 = or(T_9482[0], reset) @[Periphery.scala 291:43]
        node T_9487 = eq(T_9485, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9487 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9488 = or(T_9448[0], reset) @[Periphery.scala 291:43]
        node T_9490 = eq(T_9488, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9490 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9492 = geq(TLXbar_1.io.out[1].c.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_9493 = or(T_9492, reset) @[Periphery.scala 291:43]
        node T_9495 = eq(T_9493, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9495 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9496 = or(T_9467, reset) @[Periphery.scala 291:43]
        node T_9498 = eq(T_9496, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9498 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9499 = leq(TLXbar_1.io.out[1].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_9500 = or(T_9499, reset) @[Periphery.scala 291:43]
        node T_9502 = eq(T_9500, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9502 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Periphery.scala:291:43)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9504 = eq(TLXbar_1.io.out[1].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9505 = or(T_9504, reset) @[Periphery.scala 291:43]
        node T_9507 = eq(T_9505, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9507 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Periphery.scala:291:43)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9508 = eq(TLXbar_1.io.out[1].c.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:43]
      when T_9508 : @[Periphery.scala 291:43]
        node T_9509 = or(T_9482[0], reset) @[Periphery.scala 291:43]
        node T_9511 = eq(T_9509, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9511 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9512 = or(T_9448[0], reset) @[Periphery.scala 291:43]
        node T_9514 = eq(T_9512, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9514 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9516 = geq(TLXbar_1.io.out[1].c.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_9517 = or(T_9516, reset) @[Periphery.scala 291:43]
        node T_9519 = eq(T_9517, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9519 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9520 = or(T_9467, reset) @[Periphery.scala 291:43]
        node T_9522 = eq(T_9520, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9522 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9523 = leq(TLXbar_1.io.out[1].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_9524 = or(T_9523, reset) @[Periphery.scala 291:43]
        node T_9526 = eq(T_9524, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9526 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Periphery.scala:291:43)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9528 = eq(TLXbar_1.io.out[1].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9529 = or(T_9528, reset) @[Periphery.scala 291:43]
        node T_9531 = eq(T_9529, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9531 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Periphery.scala:291:43)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9532 = eq(TLXbar_1.io.out[1].c.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:43]
      when T_9532 : @[Periphery.scala 291:43]
        node T_9533 = cat(TLXbar_1.io.out[1].c.bits.addr_hi, TLXbar_1.io.out[1].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_9535 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9537 = eq(T_9535, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9537 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9538 = or(T_9448[0], reset) @[Periphery.scala 291:43]
        node T_9540 = eq(T_9538, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9540 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9542 = geq(TLXbar_1.io.out[1].c.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_9543 = or(T_9542, reset) @[Periphery.scala 291:43]
        node T_9545 = eq(T_9543, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9545 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9546 = or(T_9467, reset) @[Periphery.scala 291:43]
        node T_9548 = eq(T_9546, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9548 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9549 = leq(TLXbar_1.io.out[1].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_9550 = or(T_9549, reset) @[Periphery.scala 291:43]
        node T_9552 = eq(T_9550, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9552 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Periphery.scala:291:43)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9554 = eq(TLXbar_1.io.out[1].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9555 = or(T_9554, reset) @[Periphery.scala 291:43]
        node T_9557 = eq(T_9555, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9557 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Periphery.scala:291:43)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9558 = eq(TLXbar_1.io.out[1].c.bits.opcode, UInt<3>("h07")) @[Periphery.scala 291:43]
      when T_9558 : @[Periphery.scala 291:43]
        node T_9559 = cat(TLXbar_1.io.out[1].c.bits.addr_hi, TLXbar_1.io.out[1].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_9561 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:43]
        node T_9563 = eq(T_9561, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9563 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Periphery.scala:291:43)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9564 = or(T_9448[0], reset) @[Periphery.scala 291:43]
        node T_9566 = eq(T_9564, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9566 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9568 = geq(TLXbar_1.io.out[1].c.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_9569 = or(T_9568, reset) @[Periphery.scala 291:43]
        node T_9571 = eq(T_9569, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9571 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9572 = or(T_9467, reset) @[Periphery.scala 291:43]
        node T_9574 = eq(T_9572, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9574 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9575 = leq(TLXbar_1.io.out[1].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_9576 = or(T_9575, reset) @[Periphery.scala 291:43]
        node T_9578 = eq(T_9576, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9578 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Periphery.scala:291:43)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9580 = eq(TLXbar_1.io.out[1].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9581 = or(T_9580, reset) @[Periphery.scala 291:43]
        node T_9583 = eq(T_9581, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9583 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Periphery.scala:291:43)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9584 = eq(TLXbar_1.io.out[1].c.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9584 : @[Periphery.scala 291:43]
        node T_9585 = or(T_9482[0], reset) @[Periphery.scala 291:43]
        node T_9587 = eq(T_9585, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9587 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9588 = or(T_9448[0], reset) @[Periphery.scala 291:43]
        node T_9590 = eq(T_9588, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9590 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9591 = or(T_9467, reset) @[Periphery.scala 291:43]
        node T_9593 = eq(T_9591, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9593 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9595 = eq(TLXbar_1.io.out[1].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9596 = or(T_9595, reset) @[Periphery.scala 291:43]
        node T_9598 = eq(T_9596, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9598 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9599 = eq(TLXbar_1.io.out[1].c.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:43]
      when T_9599 : @[Periphery.scala 291:43]
        node T_9600 = or(T_9482[0], reset) @[Periphery.scala 291:43]
        node T_9602 = eq(T_9600, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9602 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9603 = or(T_9448[0], reset) @[Periphery.scala 291:43]
        node T_9605 = eq(T_9603, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9605 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9606 = or(T_9467, reset) @[Periphery.scala 291:43]
        node T_9608 = eq(T_9606, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9608 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9610 = eq(TLXbar_1.io.out[1].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9611 = or(T_9610, reset) @[Periphery.scala 291:43]
        node T_9613 = eq(T_9611, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9613 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9614 = eq(TLXbar_1.io.out[1].c.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:43]
      when T_9614 : @[Periphery.scala 291:43]
        node T_9615 = or(T_9482[0], reset) @[Periphery.scala 291:43]
        node T_9617 = eq(T_9615, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9617 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Periphery.scala:291:43)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9618 = or(T_9448[0], reset) @[Periphery.scala 291:43]
        node T_9620 = eq(T_9618, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9620 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9621 = or(T_9467, reset) @[Periphery.scala 291:43]
        node T_9623 = eq(T_9621, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9623 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9625 = eq(TLXbar_1.io.out[1].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9626 = or(T_9625, reset) @[Periphery.scala 291:43]
        node T_9628 = eq(T_9626, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9628 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9630 = eq(TLXbar_1.io.out[1].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9631 = or(T_9630, reset) @[Periphery.scala 291:43]
        node T_9633 = eq(T_9631, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9633 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Periphery.scala:291:43)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    when TLXbar_1.io.out[1].d.valid : @[Periphery.scala 291:43]
      node T_9634 = leq(TLXbar_1.io.out[1].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_9635 = or(T_9634, reset) @[Periphery.scala 291:43]
      node T_9637 = eq(T_9635, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9637 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Periphery.scala:291:43)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9639 = xor(UInt<1>("h00"), TLXbar_1.io.out[1].d.bits.source) @[Parameters.scala 37:23]
      node T_9640 = not(T_9639) @[Parameters.scala 37:9]
      node T_9642 = or(T_9640, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_9643 = not(T_9642) @[Parameters.scala 37:7]
      node T_9645 = eq(T_9643, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_9651 : UInt<1>[1] @[Parameters.scala 326:27]
      T_9651 is invalid @[Parameters.scala 326:27]
      T_9651[0] <= T_9645 @[Parameters.scala 326:27]
      node T_9654 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_9655 = dshl(T_9654, TLXbar_1.io.out[1].d.bits.size) @[package.scala 11:71]
      node T_9656 = bits(T_9655, 7, 0) @[package.scala 11:76]
      node T_9657 = not(T_9656) @[package.scala 11:40]
      node T_9658 = and(TLXbar_1.io.out[1].d.bits.addr_lo, T_9657) @[Edges.scala 23:16]
      node T_9660 = eq(T_9658, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_9662 = eq(UInt<1>("h00"), TLXbar_1.io.out[1].d.bits.sink) @[Parameters.scala 35:39]
      wire T_9668 : UInt<1>[1] @[Parameters.scala 220:31]
      T_9668 is invalid @[Parameters.scala 220:31]
      T_9668[0] <= T_9662 @[Parameters.scala 220:31]
      node T_9670 = eq(TLXbar_1.io.out[1].d.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:43]
      when T_9670 : @[Periphery.scala 291:43]
        node T_9671 = or(T_9651[0], reset) @[Periphery.scala 291:43]
        node T_9673 = eq(T_9671, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9673 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9674 = or(T_9660, reset) @[Periphery.scala 291:43]
        node T_9676 = eq(T_9674, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9676 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9677 = or(T_9668[0], reset) @[Periphery.scala 291:43]
        node T_9679 = eq(T_9677, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9679 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9681 = geq(TLXbar_1.io.out[1].d.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_9682 = or(T_9681, reset) @[Periphery.scala 291:43]
        node T_9684 = eq(T_9682, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9684 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9686 = eq(TLXbar_1.io.out[1].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9687 = or(T_9686, reset) @[Periphery.scala 291:43]
        node T_9689 = eq(T_9687, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9689 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9691 = eq(TLXbar_1.io.out[1].d.bits.error, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9692 = or(T_9691, reset) @[Periphery.scala 291:43]
        node T_9694 = eq(T_9692, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9694 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Periphery.scala:291:43)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9695 = eq(TLXbar_1.io.out[1].d.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:43]
      when T_9695 : @[Periphery.scala 291:43]
        node T_9696 = or(T_9651[0], reset) @[Periphery.scala 291:43]
        node T_9698 = eq(T_9696, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9698 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9699 = or(T_9660, reset) @[Periphery.scala 291:43]
        node T_9701 = eq(T_9699, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9701 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9702 = or(T_9668[0], reset) @[Periphery.scala 291:43]
        node T_9704 = eq(T_9702, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9704 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9706 = geq(TLXbar_1.io.out[1].d.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_9707 = or(T_9706, reset) @[Periphery.scala 291:43]
        node T_9709 = eq(T_9707, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9709 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9710 = leq(TLXbar_1.io.out[1].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_9711 = or(T_9710, reset) @[Periphery.scala 291:43]
        node T_9713 = eq(T_9711, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9713 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Periphery.scala:291:43)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9714 = eq(TLXbar_1.io.out[1].d.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:43]
      when T_9714 : @[Periphery.scala 291:43]
        node T_9715 = or(T_9651[0], reset) @[Periphery.scala 291:43]
        node T_9717 = eq(T_9715, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9717 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9718 = or(T_9660, reset) @[Periphery.scala 291:43]
        node T_9720 = eq(T_9718, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9720 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9721 = or(T_9668[0], reset) @[Periphery.scala 291:43]
        node T_9723 = eq(T_9721, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9723 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9725 = geq(TLXbar_1.io.out[1].d.bits.size, UInt<2>("h02")) @[Periphery.scala 291:43]
        node T_9726 = or(T_9725, reset) @[Periphery.scala 291:43]
        node T_9728 = eq(T_9726, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9728 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Periphery.scala:291:43)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9729 = leq(TLXbar_1.io.out[1].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_9730 = or(T_9729, reset) @[Periphery.scala 291:43]
        node T_9732 = eq(T_9730, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9732 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Periphery.scala:291:43)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9733 = eq(TLXbar_1.io.out[1].d.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9733 : @[Periphery.scala 291:43]
        node T_9734 = or(T_9651[0], reset) @[Periphery.scala 291:43]
        node T_9736 = eq(T_9734, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9736 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9737 = or(T_9660, reset) @[Periphery.scala 291:43]
        node T_9739 = eq(T_9737, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9739 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9740 = or(T_9668[0], reset) @[Periphery.scala 291:43]
        node T_9742 = eq(T_9740, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9742 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9744 = eq(TLXbar_1.io.out[1].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9745 = or(T_9744, reset) @[Periphery.scala 291:43]
        node T_9747 = eq(T_9745, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9747 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9748 = eq(TLXbar_1.io.out[1].d.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:43]
      when T_9748 : @[Periphery.scala 291:43]
        node T_9749 = or(T_9651[0], reset) @[Periphery.scala 291:43]
        node T_9751 = eq(T_9749, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9751 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9752 = or(T_9660, reset) @[Periphery.scala 291:43]
        node T_9754 = eq(T_9752, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9754 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9755 = or(T_9668[0], reset) @[Periphery.scala 291:43]
        node T_9757 = eq(T_9755, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9757 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9759 = eq(TLXbar_1.io.out[1].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9760 = or(T_9759, reset) @[Periphery.scala 291:43]
        node T_9762 = eq(T_9760, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9762 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9763 = eq(TLXbar_1.io.out[1].d.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:43]
      when T_9763 : @[Periphery.scala 291:43]
        node T_9764 = or(T_9651[0], reset) @[Periphery.scala 291:43]
        node T_9766 = eq(T_9764, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9766 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9767 = or(T_9660, reset) @[Periphery.scala 291:43]
        node T_9769 = eq(T_9767, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9769 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Periphery.scala:291:43)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9770 = or(T_9668[0], reset) @[Periphery.scala 291:43]
        node T_9772 = eq(T_9770, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9772 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9774 = eq(TLXbar_1.io.out[1].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9775 = or(T_9774, reset) @[Periphery.scala 291:43]
        node T_9777 = eq(T_9775, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9777 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Periphery.scala:291:43)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        node T_9779 = eq(TLXbar_1.io.out[1].d.bits.error, UInt<1>("h00")) @[Periphery.scala 291:43]
        node T_9780 = or(T_9779, reset) @[Periphery.scala 291:43]
        node T_9782 = eq(T_9780, UInt<1>("h00")) @[Periphery.scala 291:43]
        when T_9782 : @[Periphery.scala 291:43]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Periphery.scala:291:43)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 291:43]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
          skip @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    when TLXbar_1.io.out[1].e.valid : @[Periphery.scala 291:43]
      node T_9784 = eq(UInt<1>("h00"), TLXbar_1.io.out[1].e.bits.sink) @[Parameters.scala 35:39]
      wire T_9790 : UInt<1>[1] @[Parameters.scala 220:31]
      T_9790 is invalid @[Parameters.scala 220:31]
      T_9790[0] <= T_9784 @[Parameters.scala 220:31]
      node T_9792 = or(T_9790[0], reset) @[Periphery.scala 291:43]
      node T_9794 = eq(T_9792, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9794 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Periphery.scala:291:43)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_9796 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_9798 : UInt, clk
    reg T_9800 : UInt, clk
    reg T_9802 : UInt, clk
    reg T_9804 : UInt, clk
    reg T_9806 : UInt, clk
    node T_9808 = neq(T_9796, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_9809 = and(TLXbar_1.io.out[1].a.valid, T_9808) @[Periphery.scala 291:43]
    when T_9809 : @[Periphery.scala 291:43]
      node T_9810 = eq(TLXbar_1.io.out[1].a.bits.opcode, T_9798) @[Periphery.scala 291:43]
      node T_9811 = or(T_9810, reset) @[Periphery.scala 291:43]
      node T_9813 = eq(T_9811, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9813 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9814 = eq(TLXbar_1.io.out[1].a.bits.param, T_9800) @[Periphery.scala 291:43]
      node T_9815 = or(T_9814, reset) @[Periphery.scala 291:43]
      node T_9817 = eq(T_9815, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9817 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9818 = eq(TLXbar_1.io.out[1].a.bits.size, T_9802) @[Periphery.scala 291:43]
      node T_9819 = or(T_9818, reset) @[Periphery.scala 291:43]
      node T_9821 = eq(T_9819, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9821 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9822 = eq(TLXbar_1.io.out[1].a.bits.source, T_9804) @[Periphery.scala 291:43]
      node T_9823 = or(T_9822, reset) @[Periphery.scala 291:43]
      node T_9825 = eq(T_9823, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9825 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9826 = eq(TLXbar_1.io.out[1].a.bits.addr_hi, T_9806) @[Periphery.scala 291:43]
      node T_9827 = or(T_9826, reset) @[Periphery.scala 291:43]
      node T_9829 = eq(T_9827, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9829 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    node T_9830 = and(TLXbar_1.io.out[1].a.ready, TLXbar_1.io.out[1].a.valid) @[Decoupled.scala 21:42]
    when T_9830 : @[Periphery.scala 291:43]
      node T_9832 = sub(T_9796, UInt<1>("h01")) @[Periphery.scala 291:43]
      node T_9833 = tail(T_9832, 1) @[Periphery.scala 291:43]
      T_9796 <= T_9833 @[Periphery.scala 291:43]
      node T_9835 = eq(T_9796, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9835 : @[Periphery.scala 291:43]
        node T_9836 = bits(TLXbar_1.io.out[1].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_9838 = eq(T_9836, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_9840 = leq(TLXbar_1.io.out[1].a.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_9842 = bits(TLXbar_1.io.out[1].a.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_9843 = dshl(UInt<1>("h01"), T_9842) @[OneHot.scala 46:16]
        node T_9844 = bits(T_9843, 8, 0) @[OneHot.scala 46:41]
        node T_9845 = shr(T_9844, 2) @[Edges.scala 209:50]
        node T_9846 = or(T_9845, T_9840) @[Edges.scala 210:29]
        node T_9848 = mux(T_9838, T_9846, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_9850 = sub(T_9848, UInt<1>("h01")) @[Periphery.scala 291:43]
        node T_9851 = tail(T_9850, 1) @[Periphery.scala 291:43]
        T_9796 <= T_9851 @[Periphery.scala 291:43]
        T_9798 <= TLXbar_1.io.out[1].a.bits.opcode @[Periphery.scala 291:43]
        T_9800 <= TLXbar_1.io.out[1].a.bits.param @[Periphery.scala 291:43]
        T_9802 <= TLXbar_1.io.out[1].a.bits.size @[Periphery.scala 291:43]
        T_9804 <= TLXbar_1.io.out[1].a.bits.source @[Periphery.scala 291:43]
        T_9806 <= TLXbar_1.io.out[1].a.bits.addr_hi @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_9853 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_9855 : UInt, clk
    reg T_9857 : UInt, clk
    reg T_9859 : UInt, clk
    reg T_9861 : UInt, clk
    reg T_9863 : UInt, clk
    node T_9865 = neq(T_9853, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_9866 = and(TLXbar_1.io.out[1].b.valid, T_9865) @[Periphery.scala 291:43]
    when T_9866 : @[Periphery.scala 291:43]
      node T_9867 = eq(TLXbar_1.io.out[1].b.bits.opcode, T_9855) @[Periphery.scala 291:43]
      node T_9868 = or(T_9867, reset) @[Periphery.scala 291:43]
      node T_9870 = eq(T_9868, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9870 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9871 = eq(TLXbar_1.io.out[1].b.bits.param, T_9857) @[Periphery.scala 291:43]
      node T_9872 = or(T_9871, reset) @[Periphery.scala 291:43]
      node T_9874 = eq(T_9872, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9874 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9875 = eq(TLXbar_1.io.out[1].b.bits.size, T_9859) @[Periphery.scala 291:43]
      node T_9876 = or(T_9875, reset) @[Periphery.scala 291:43]
      node T_9878 = eq(T_9876, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9878 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9879 = eq(TLXbar_1.io.out[1].b.bits.source, T_9861) @[Periphery.scala 291:43]
      node T_9880 = or(T_9879, reset) @[Periphery.scala 291:43]
      node T_9882 = eq(T_9880, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9882 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9883 = eq(TLXbar_1.io.out[1].b.bits.addr_hi, T_9863) @[Periphery.scala 291:43]
      node T_9884 = or(T_9883, reset) @[Periphery.scala 291:43]
      node T_9886 = eq(T_9884, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9886 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    node T_9887 = and(TLXbar_1.io.out[1].b.ready, TLXbar_1.io.out[1].b.valid) @[Decoupled.scala 21:42]
    when T_9887 : @[Periphery.scala 291:43]
      node T_9889 = sub(T_9853, UInt<1>("h01")) @[Periphery.scala 291:43]
      node T_9890 = tail(T_9889, 1) @[Periphery.scala 291:43]
      T_9853 <= T_9890 @[Periphery.scala 291:43]
      node T_9892 = eq(T_9853, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9892 : @[Periphery.scala 291:43]
        node T_9893 = bits(TLXbar_1.io.out[1].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_9895 = eq(T_9893, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_9898 = leq(TLXbar_1.io.out[1].b.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_9900 = bits(TLXbar_1.io.out[1].b.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_9901 = dshl(UInt<1>("h01"), T_9900) @[OneHot.scala 46:16]
        node T_9902 = bits(T_9901, 8, 0) @[OneHot.scala 46:41]
        node T_9903 = shr(T_9902, 2) @[Edges.scala 209:50]
        node T_9904 = or(T_9903, T_9898) @[Edges.scala 210:29]
        node T_9906 = mux(UInt<1>("h00"), T_9904, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_9908 = sub(T_9906, UInt<1>("h01")) @[Periphery.scala 291:43]
        node T_9909 = tail(T_9908, 1) @[Periphery.scala 291:43]
        T_9853 <= T_9909 @[Periphery.scala 291:43]
        T_9855 <= TLXbar_1.io.out[1].b.bits.opcode @[Periphery.scala 291:43]
        T_9857 <= TLXbar_1.io.out[1].b.bits.param @[Periphery.scala 291:43]
        T_9859 <= TLXbar_1.io.out[1].b.bits.size @[Periphery.scala 291:43]
        T_9861 <= TLXbar_1.io.out[1].b.bits.source @[Periphery.scala 291:43]
        T_9863 <= TLXbar_1.io.out[1].b.bits.addr_hi @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_9911 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_9913 : UInt, clk
    reg T_9915 : UInt, clk
    reg T_9917 : UInt, clk
    reg T_9919 : UInt, clk
    reg T_9921 : UInt, clk
    reg T_9923 : UInt, clk
    node T_9925 = neq(T_9911, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_9926 = and(TLXbar_1.io.out[1].c.valid, T_9925) @[Periphery.scala 291:43]
    when T_9926 : @[Periphery.scala 291:43]
      node T_9927 = eq(TLXbar_1.io.out[1].c.bits.opcode, T_9913) @[Periphery.scala 291:43]
      node T_9928 = or(T_9927, reset) @[Periphery.scala 291:43]
      node T_9930 = eq(T_9928, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9930 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9931 = eq(TLXbar_1.io.out[1].c.bits.param, T_9915) @[Periphery.scala 291:43]
      node T_9932 = or(T_9931, reset) @[Periphery.scala 291:43]
      node T_9934 = eq(T_9932, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9934 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9935 = eq(TLXbar_1.io.out[1].c.bits.size, T_9917) @[Periphery.scala 291:43]
      node T_9936 = or(T_9935, reset) @[Periphery.scala 291:43]
      node T_9938 = eq(T_9936, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9938 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9939 = eq(TLXbar_1.io.out[1].c.bits.source, T_9919) @[Periphery.scala 291:43]
      node T_9940 = or(T_9939, reset) @[Periphery.scala 291:43]
      node T_9942 = eq(T_9940, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9942 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9943 = eq(TLXbar_1.io.out[1].c.bits.addr_hi, T_9921) @[Periphery.scala 291:43]
      node T_9944 = or(T_9943, reset) @[Periphery.scala 291:43]
      node T_9946 = eq(T_9944, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9946 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9947 = eq(TLXbar_1.io.out[1].c.bits.addr_lo, T_9923) @[Periphery.scala 291:43]
      node T_9948 = or(T_9947, reset) @[Periphery.scala 291:43]
      node T_9950 = eq(T_9948, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9950 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    node T_9951 = and(TLXbar_1.io.out[1].c.ready, TLXbar_1.io.out[1].c.valid) @[Decoupled.scala 21:42]
    when T_9951 : @[Periphery.scala 291:43]
      node T_9953 = sub(T_9911, UInt<1>("h01")) @[Periphery.scala 291:43]
      node T_9954 = tail(T_9953, 1) @[Periphery.scala 291:43]
      T_9911 <= T_9954 @[Periphery.scala 291:43]
      node T_9956 = eq(T_9911, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9956 : @[Periphery.scala 291:43]
        node T_9957 = bits(TLXbar_1.io.out[1].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_9960 = leq(TLXbar_1.io.out[1].c.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_9962 = bits(TLXbar_1.io.out[1].c.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_9963 = dshl(UInt<1>("h01"), T_9962) @[OneHot.scala 46:16]
        node T_9964 = bits(T_9963, 8, 0) @[OneHot.scala 46:41]
        node T_9965 = shr(T_9964, 2) @[Edges.scala 209:50]
        node T_9966 = or(T_9965, T_9960) @[Edges.scala 210:29]
        node T_9968 = mux(UInt<1>("h00"), T_9966, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_9970 = sub(T_9968, UInt<1>("h01")) @[Periphery.scala 291:43]
        node T_9971 = tail(T_9970, 1) @[Periphery.scala 291:43]
        T_9911 <= T_9971 @[Periphery.scala 291:43]
        T_9913 <= TLXbar_1.io.out[1].c.bits.opcode @[Periphery.scala 291:43]
        T_9915 <= TLXbar_1.io.out[1].c.bits.param @[Periphery.scala 291:43]
        T_9917 <= TLXbar_1.io.out[1].c.bits.size @[Periphery.scala 291:43]
        T_9919 <= TLXbar_1.io.out[1].c.bits.source @[Periphery.scala 291:43]
        T_9921 <= TLXbar_1.io.out[1].c.bits.addr_hi @[Periphery.scala 291:43]
        T_9923 <= TLXbar_1.io.out[1].c.bits.addr_lo @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_9973 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_9975 : UInt, clk
    reg T_9977 : UInt, clk
    reg T_9979 : UInt, clk
    reg T_9981 : UInt, clk
    reg T_9983 : UInt, clk
    reg T_9985 : UInt, clk
    node T_9987 = neq(T_9973, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_9988 = and(TLXbar_1.io.out[1].d.valid, T_9987) @[Periphery.scala 291:43]
    when T_9988 : @[Periphery.scala 291:43]
      node T_9989 = eq(TLXbar_1.io.out[1].d.bits.opcode, T_9975) @[Periphery.scala 291:43]
      node T_9990 = or(T_9989, reset) @[Periphery.scala 291:43]
      node T_9992 = eq(T_9990, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9992 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9993 = eq(TLXbar_1.io.out[1].d.bits.param, T_9977) @[Periphery.scala 291:43]
      node T_9994 = or(T_9993, reset) @[Periphery.scala 291:43]
      node T_9996 = eq(T_9994, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_9996 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_9997 = eq(TLXbar_1.io.out[1].d.bits.size, T_9979) @[Periphery.scala 291:43]
      node T_9998 = or(T_9997, reset) @[Periphery.scala 291:43]
      node T_10000 = eq(T_9998, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10000 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_10001 = eq(TLXbar_1.io.out[1].d.bits.source, T_9981) @[Periphery.scala 291:43]
      node T_10002 = or(T_10001, reset) @[Periphery.scala 291:43]
      node T_10004 = eq(T_10002, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10004 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_10005 = eq(TLXbar_1.io.out[1].d.bits.sink, T_9983) @[Periphery.scala 291:43]
      node T_10006 = or(T_10005, reset) @[Periphery.scala 291:43]
      node T_10008 = eq(T_10006, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10008 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_10009 = eq(TLXbar_1.io.out[1].d.bits.addr_lo, T_9985) @[Periphery.scala 291:43]
      node T_10010 = or(T_10009, reset) @[Periphery.scala 291:43]
      node T_10012 = eq(T_10010, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10012 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Periphery.scala:291:43)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    node T_10013 = and(TLXbar_1.io.out[1].d.ready, TLXbar_1.io.out[1].d.valid) @[Decoupled.scala 21:42]
    when T_10013 : @[Periphery.scala 291:43]
      node T_10015 = sub(T_9973, UInt<1>("h01")) @[Periphery.scala 291:43]
      node T_10016 = tail(T_10015, 1) @[Periphery.scala 291:43]
      T_9973 <= T_10016 @[Periphery.scala 291:43]
      node T_10018 = eq(T_9973, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10018 : @[Periphery.scala 291:43]
        node T_10019 = bits(TLXbar_1.io.out[1].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_10021 = leq(TLXbar_1.io.out[1].d.bits.size, UInt<2>("h02")) @[Edges.scala 208:88]
        node T_10023 = bits(TLXbar_1.io.out[1].d.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_10024 = dshl(UInt<1>("h01"), T_10023) @[OneHot.scala 46:16]
        node T_10025 = bits(T_10024, 8, 0) @[OneHot.scala 46:41]
        node T_10026 = shr(T_10025, 2) @[Edges.scala 209:50]
        node T_10027 = or(T_10026, T_10021) @[Edges.scala 210:29]
        node T_10029 = mux(T_10019, T_10027, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_10031 = sub(T_10029, UInt<1>("h01")) @[Periphery.scala 291:43]
        node T_10032 = tail(T_10031, 1) @[Periphery.scala 291:43]
        T_9973 <= T_10032 @[Periphery.scala 291:43]
        T_9975 <= TLXbar_1.io.out[1].d.bits.opcode @[Periphery.scala 291:43]
        T_9977 <= TLXbar_1.io.out[1].d.bits.param @[Periphery.scala 291:43]
        T_9979 <= TLXbar_1.io.out[1].d.bits.size @[Periphery.scala 291:43]
        T_9981 <= TLXbar_1.io.out[1].d.bits.source @[Periphery.scala 291:43]
        T_9983 <= TLXbar_1.io.out[1].d.bits.sink @[Periphery.scala 291:43]
        T_9985 <= TLXbar_1.io.out[1].d.bits.addr_lo @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_10034 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10034 <= TLXbar_1.io.out[1].a.valid
    reg T_10036 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10036 <= TLXbar_1.io.out[1].a.ready
    reg T_10037 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}, clk
    T_10037 <- TLXbar_1.io.out[1].a.bits
    node T_10045 = cat(TLXbar_1.io.out[1].a.bits.addr_hi, TLXbar_1.io.out[1].a.bits.mask) @[Periphery.scala 291:43]
    node T_10046 = cat(T_10045, TLXbar_1.io.out[1].a.bits.data) @[Periphery.scala 291:43]
    node T_10047 = cat(TLXbar_1.io.out[1].a.bits.size, TLXbar_1.io.out[1].a.bits.source) @[Periphery.scala 291:43]
    node T_10048 = cat(TLXbar_1.io.out[1].a.bits.opcode, TLXbar_1.io.out[1].a.bits.param) @[Periphery.scala 291:43]
    node T_10049 = cat(T_10048, T_10047) @[Periphery.scala 291:43]
    node T_10050 = cat(T_10049, T_10046) @[Periphery.scala 291:43]
    node T_10051 = cat(T_10037.addr_hi, T_10037.mask) @[Periphery.scala 291:43]
    node T_10052 = cat(T_10051, T_10037.data) @[Periphery.scala 291:43]
    node T_10053 = cat(T_10037.size, T_10037.source) @[Periphery.scala 291:43]
    node T_10054 = cat(T_10037.opcode, T_10037.param) @[Periphery.scala 291:43]
    node T_10055 = cat(T_10054, T_10053) @[Periphery.scala 291:43]
    node T_10056 = cat(T_10055, T_10052) @[Periphery.scala 291:43]
    node T_10057 = eq(T_10050, T_10056) @[Periphery.scala 291:43]
    node T_10059 = eq(T_10036, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_10060 = and(T_10034, T_10059) @[Periphery.scala 291:43]
    when T_10060 : @[Periphery.scala 291:43]
      node T_10061 = or(TLXbar_1.io.out[1].a.valid, reset) @[Periphery.scala 291:43]
      node T_10063 = eq(T_10061, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10063 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:43)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_10064 = or(T_10057, reset) @[Periphery.scala 291:43]
      node T_10066 = eq(T_10064, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10066 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:43)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_10068 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10068 <= TLXbar_1.io.out[1].b.valid
    reg T_10070 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10070 <= TLXbar_1.io.out[1].b.ready
    reg T_10071 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, mask : UInt<4>, data : UInt<32>}, clk
    T_10071 <- TLXbar_1.io.out[1].b.bits
    node T_10079 = cat(TLXbar_1.io.out[1].b.bits.addr_hi, TLXbar_1.io.out[1].b.bits.mask) @[Periphery.scala 291:43]
    node T_10080 = cat(T_10079, TLXbar_1.io.out[1].b.bits.data) @[Periphery.scala 291:43]
    node T_10081 = cat(TLXbar_1.io.out[1].b.bits.size, TLXbar_1.io.out[1].b.bits.source) @[Periphery.scala 291:43]
    node T_10082 = cat(TLXbar_1.io.out[1].b.bits.opcode, TLXbar_1.io.out[1].b.bits.param) @[Periphery.scala 291:43]
    node T_10083 = cat(T_10082, T_10081) @[Periphery.scala 291:43]
    node T_10084 = cat(T_10083, T_10080) @[Periphery.scala 291:43]
    node T_10085 = cat(T_10071.addr_hi, T_10071.mask) @[Periphery.scala 291:43]
    node T_10086 = cat(T_10085, T_10071.data) @[Periphery.scala 291:43]
    node T_10087 = cat(T_10071.size, T_10071.source) @[Periphery.scala 291:43]
    node T_10088 = cat(T_10071.opcode, T_10071.param) @[Periphery.scala 291:43]
    node T_10089 = cat(T_10088, T_10087) @[Periphery.scala 291:43]
    node T_10090 = cat(T_10089, T_10086) @[Periphery.scala 291:43]
    node T_10091 = eq(T_10084, T_10090) @[Periphery.scala 291:43]
    node T_10093 = eq(T_10070, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_10094 = and(T_10068, T_10093) @[Periphery.scala 291:43]
    when T_10094 : @[Periphery.scala 291:43]
      node T_10095 = or(TLXbar_1.io.out[1].b.valid, reset) @[Periphery.scala 291:43]
      node T_10097 = eq(T_10095, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10097 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:43)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_10098 = or(T_10091, reset) @[Periphery.scala 291:43]
      node T_10100 = eq(T_10098, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10100 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:43)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_10102 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10102 <= TLXbar_1.io.out[1].c.valid
    reg T_10104 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10104 <= TLXbar_1.io.out[1].c.ready
    reg T_10105 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<29>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_10105 <- TLXbar_1.io.out[1].c.bits
    node T_10114 = cat(TLXbar_1.io.out[1].c.bits.data, TLXbar_1.io.out[1].c.bits.error) @[Periphery.scala 291:43]
    node T_10115 = cat(TLXbar_1.io.out[1].c.bits.addr_hi, TLXbar_1.io.out[1].c.bits.addr_lo) @[Periphery.scala 291:43]
    node T_10116 = cat(T_10115, T_10114) @[Periphery.scala 291:43]
    node T_10117 = cat(TLXbar_1.io.out[1].c.bits.size, TLXbar_1.io.out[1].c.bits.source) @[Periphery.scala 291:43]
    node T_10118 = cat(TLXbar_1.io.out[1].c.bits.opcode, TLXbar_1.io.out[1].c.bits.param) @[Periphery.scala 291:43]
    node T_10119 = cat(T_10118, T_10117) @[Periphery.scala 291:43]
    node T_10120 = cat(T_10119, T_10116) @[Periphery.scala 291:43]
    node T_10121 = cat(T_10105.data, T_10105.error) @[Periphery.scala 291:43]
    node T_10122 = cat(T_10105.addr_hi, T_10105.addr_lo) @[Periphery.scala 291:43]
    node T_10123 = cat(T_10122, T_10121) @[Periphery.scala 291:43]
    node T_10124 = cat(T_10105.size, T_10105.source) @[Periphery.scala 291:43]
    node T_10125 = cat(T_10105.opcode, T_10105.param) @[Periphery.scala 291:43]
    node T_10126 = cat(T_10125, T_10124) @[Periphery.scala 291:43]
    node T_10127 = cat(T_10126, T_10123) @[Periphery.scala 291:43]
    node T_10128 = eq(T_10120, T_10127) @[Periphery.scala 291:43]
    node T_10130 = eq(T_10104, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_10131 = and(T_10102, T_10130) @[Periphery.scala 291:43]
    when T_10131 : @[Periphery.scala 291:43]
      node T_10132 = or(TLXbar_1.io.out[1].c.valid, reset) @[Periphery.scala 291:43]
      node T_10134 = eq(T_10132, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10134 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:43)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_10135 = or(T_10128, reset) @[Periphery.scala 291:43]
      node T_10137 = eq(T_10135, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10137 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:43)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_10139 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10139 <= TLXbar_1.io.out[1].d.valid
    reg T_10141 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10141 <= TLXbar_1.io.out[1].d.ready
    reg T_10142 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<2>, data : UInt<32>, error : UInt<1>}, clk
    T_10142 <- TLXbar_1.io.out[1].d.bits
    node T_10151 = cat(TLXbar_1.io.out[1].d.bits.data, TLXbar_1.io.out[1].d.bits.error) @[Periphery.scala 291:43]
    node T_10152 = cat(TLXbar_1.io.out[1].d.bits.sink, TLXbar_1.io.out[1].d.bits.addr_lo) @[Periphery.scala 291:43]
    node T_10153 = cat(T_10152, T_10151) @[Periphery.scala 291:43]
    node T_10154 = cat(TLXbar_1.io.out[1].d.bits.size, TLXbar_1.io.out[1].d.bits.source) @[Periphery.scala 291:43]
    node T_10155 = cat(TLXbar_1.io.out[1].d.bits.opcode, TLXbar_1.io.out[1].d.bits.param) @[Periphery.scala 291:43]
    node T_10156 = cat(T_10155, T_10154) @[Periphery.scala 291:43]
    node T_10157 = cat(T_10156, T_10153) @[Periphery.scala 291:43]
    node T_10158 = cat(T_10142.data, T_10142.error) @[Periphery.scala 291:43]
    node T_10159 = cat(T_10142.sink, T_10142.addr_lo) @[Periphery.scala 291:43]
    node T_10160 = cat(T_10159, T_10158) @[Periphery.scala 291:43]
    node T_10161 = cat(T_10142.size, T_10142.source) @[Periphery.scala 291:43]
    node T_10162 = cat(T_10142.opcode, T_10142.param) @[Periphery.scala 291:43]
    node T_10163 = cat(T_10162, T_10161) @[Periphery.scala 291:43]
    node T_10164 = cat(T_10163, T_10160) @[Periphery.scala 291:43]
    node T_10165 = eq(T_10157, T_10164) @[Periphery.scala 291:43]
    node T_10167 = eq(T_10141, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_10168 = and(T_10139, T_10167) @[Periphery.scala 291:43]
    when T_10168 : @[Periphery.scala 291:43]
      node T_10169 = or(TLXbar_1.io.out[1].d.valid, reset) @[Periphery.scala 291:43]
      node T_10171 = eq(T_10169, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10171 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:43)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_10172 = or(T_10165, reset) @[Periphery.scala 291:43]
      node T_10174 = eq(T_10172, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10174 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:43)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    reg T_10176 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10176 <= TLXbar_1.io.out[1].e.valid
    reg T_10178 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_10178 <= TLXbar_1.io.out[1].e.ready
    reg T_10179 : {sink : UInt<1>}, clk
    T_10179 <- TLXbar_1.io.out[1].e.bits
    node T_10181 = eq(TLXbar_1.io.out[1].e.bits.sink, T_10179.sink) @[Periphery.scala 291:43]
    node T_10183 = eq(T_10178, UInt<1>("h00")) @[Periphery.scala 291:43]
    node T_10184 = and(T_10176, T_10183) @[Periphery.scala 291:43]
    when T_10184 : @[Periphery.scala 291:43]
      node T_10185 = or(TLXbar_1.io.out[1].e.valid, reset) @[Periphery.scala 291:43]
      node T_10187 = eq(T_10185, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10187 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:43)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      node T_10188 = or(T_10181, reset) @[Periphery.scala 291:43]
      node T_10190 = eq(T_10188, UInt<1>("h00")) @[Periphery.scala 291:43]
      when T_10190 : @[Periphery.scala 291:43]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:43)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:43]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:43]
        skip @[Periphery.scala 291:43]
      skip @[Periphery.scala 291:43]
    TLWidthWidget_1_1.io.in[0] <- TLXbar_1.io.out[1] @[Periphery.scala 291:43]
    when TLWidthWidget_1_1.io.out[0].a.valid : @[Periphery.scala 291:29]
      node T_10191 = leq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_10192 = or(T_10191, reset) @[Periphery.scala 291:29]
      node T_10194 = eq(T_10192, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_10194 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Periphery.scala:291:29)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10196 = xor(UInt<1>("h00"), TLWidthWidget_1_1.io.out[0].a.bits.source) @[Parameters.scala 37:23]
      node T_10197 = not(T_10196) @[Parameters.scala 37:9]
      node T_10199 = or(T_10197, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_10200 = not(T_10199) @[Parameters.scala 37:7]
      node T_10202 = eq(T_10200, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_10208 : UInt<1>[1] @[Parameters.scala 326:27]
      T_10208 is invalid @[Parameters.scala 326:27]
      T_10208[0] <= T_10202 @[Parameters.scala 326:27]
      node T_10211 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_10212 = dshl(T_10211, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_10213 = bits(T_10212, 7, 0) @[package.scala 11:76]
      node T_10214 = not(T_10213) @[package.scala 11:40]
      node T_10215 = shr(T_10214, 3) @[Edges.scala 15:47]
      node T_10216 = and(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_10215) @[Edges.scala 16:16]
      node T_10218 = eq(T_10216, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_10220 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_10221 = dshl(T_10220, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_10222 = bits(T_10221, 2, 0) @[package.scala 11:76]
      node T_10223 = not(T_10222) @[package.scala 11:40]
      node T_10224 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_10225 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_10227 = neq(T_10225, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_10229 = eq(T_10227, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_10230 = or(T_10224, T_10225) @[Edges.scala 63:32]
      node T_10231 = bits(T_10230, 3, 2) @[Edges.scala 61:22]
      node T_10232 = bits(T_10230, 1, 0) @[Edges.scala 62:22]
      node T_10234 = neq(T_10232, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_10236 = eq(T_10234, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_10237 = or(T_10231, T_10232) @[Edges.scala 63:32]
      node T_10238 = bits(T_10237, 0, 0) @[Edges.scala 58:14]
      node T_10239 = not(T_10238) @[Edges.scala 58:9]
      node T_10240 = cat(T_10236, T_10239) @[Cat.scala 20:58]
      node T_10241 = cat(T_10229, T_10240) @[Cat.scala 20:58]
      node T_10242 = not(T_10223) @[Edges.scala 66:39]
      node T_10243 = and(T_10241, T_10242) @[Edges.scala 66:37]
      node T_10245 = bits(TLWidthWidget_1_1.io.out[0].a.bits.size, 1, 0) @[OneHot.scala 46:21]
      node T_10246 = dshl(UInt<1>("h01"), T_10245) @[OneHot.scala 46:16]
      node T_10247 = bits(T_10246, 2, 0) @[OneHot.scala 46:41]
      node T_10249 = geq(TLWidthWidget_1_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
      node T_10251 = bits(T_10247, 2, 2) @[Edges.scala 36:26]
      node T_10252 = bits(T_10243, 2, 2) @[Edges.scala 37:26]
      node T_10254 = eq(T_10252, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_10255 = and(UInt<1>("h01"), T_10254) @[Edges.scala 41:27]
      node T_10256 = and(T_10251, T_10255) @[Edges.scala 42:38]
      node T_10257 = or(T_10249, T_10256) @[Edges.scala 42:29]
      node T_10258 = and(UInt<1>("h01"), T_10252) @[Edges.scala 41:27]
      node T_10259 = and(T_10251, T_10258) @[Edges.scala 42:38]
      node T_10260 = or(T_10249, T_10259) @[Edges.scala 42:29]
      node T_10261 = bits(T_10247, 1, 1) @[Edges.scala 36:26]
      node T_10262 = bits(T_10243, 1, 1) @[Edges.scala 37:26]
      node T_10264 = eq(T_10262, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_10265 = and(T_10255, T_10264) @[Edges.scala 41:27]
      node T_10266 = and(T_10261, T_10265) @[Edges.scala 42:38]
      node T_10267 = or(T_10257, T_10266) @[Edges.scala 42:29]
      node T_10268 = and(T_10255, T_10262) @[Edges.scala 41:27]
      node T_10269 = and(T_10261, T_10268) @[Edges.scala 42:38]
      node T_10270 = or(T_10257, T_10269) @[Edges.scala 42:29]
      node T_10271 = and(T_10258, T_10264) @[Edges.scala 41:27]
      node T_10272 = and(T_10261, T_10271) @[Edges.scala 42:38]
      node T_10273 = or(T_10260, T_10272) @[Edges.scala 42:29]
      node T_10274 = and(T_10258, T_10262) @[Edges.scala 41:27]
      node T_10275 = and(T_10261, T_10274) @[Edges.scala 42:38]
      node T_10276 = or(T_10260, T_10275) @[Edges.scala 42:29]
      node T_10277 = bits(T_10247, 0, 0) @[Edges.scala 36:26]
      node T_10278 = bits(T_10243, 0, 0) @[Edges.scala 37:26]
      node T_10280 = eq(T_10278, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_10281 = and(T_10265, T_10280) @[Edges.scala 41:27]
      node T_10282 = and(T_10277, T_10281) @[Edges.scala 42:38]
      node T_10283 = or(T_10267, T_10282) @[Edges.scala 42:29]
      node T_10284 = and(T_10265, T_10278) @[Edges.scala 41:27]
      node T_10285 = and(T_10277, T_10284) @[Edges.scala 42:38]
      node T_10286 = or(T_10267, T_10285) @[Edges.scala 42:29]
      node T_10287 = and(T_10268, T_10280) @[Edges.scala 41:27]
      node T_10288 = and(T_10277, T_10287) @[Edges.scala 42:38]
      node T_10289 = or(T_10270, T_10288) @[Edges.scala 42:29]
      node T_10290 = and(T_10268, T_10278) @[Edges.scala 41:27]
      node T_10291 = and(T_10277, T_10290) @[Edges.scala 42:38]
      node T_10292 = or(T_10270, T_10291) @[Edges.scala 42:29]
      node T_10293 = and(T_10271, T_10280) @[Edges.scala 41:27]
      node T_10294 = and(T_10277, T_10293) @[Edges.scala 42:38]
      node T_10295 = or(T_10273, T_10294) @[Edges.scala 42:29]
      node T_10296 = and(T_10271, T_10278) @[Edges.scala 41:27]
      node T_10297 = and(T_10277, T_10296) @[Edges.scala 42:38]
      node T_10298 = or(T_10273, T_10297) @[Edges.scala 42:29]
      node T_10299 = and(T_10274, T_10280) @[Edges.scala 41:27]
      node T_10300 = and(T_10277, T_10299) @[Edges.scala 42:38]
      node T_10301 = or(T_10276, T_10300) @[Edges.scala 42:29]
      node T_10302 = and(T_10274, T_10278) @[Edges.scala 41:27]
      node T_10303 = and(T_10277, T_10302) @[Edges.scala 42:38]
      node T_10304 = or(T_10276, T_10303) @[Edges.scala 42:29]
      node T_10305 = cat(T_10286, T_10283) @[Cat.scala 20:58]
      node T_10306 = cat(T_10292, T_10289) @[Cat.scala 20:58]
      node T_10307 = cat(T_10306, T_10305) @[Cat.scala 20:58]
      node T_10308 = cat(T_10298, T_10295) @[Cat.scala 20:58]
      node T_10309 = cat(T_10304, T_10301) @[Cat.scala 20:58]
      node T_10310 = cat(T_10309, T_10308) @[Cat.scala 20:58]
      node T_10311 = cat(T_10310, T_10307) @[Cat.scala 20:58]
      node T_10312 = eq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:29]
      when T_10312 : @[Periphery.scala 291:29]
        node T_10314 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_10315 = dshl(T_10314, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_10316 = bits(T_10315, 2, 0) @[package.scala 11:76]
        node T_10317 = not(T_10316) @[package.scala 11:40]
        node T_10318 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_10319 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_10321 = neq(T_10319, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10323 = eq(T_10321, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10324 = or(T_10318, T_10319) @[Edges.scala 63:32]
        node T_10325 = bits(T_10324, 3, 2) @[Edges.scala 61:22]
        node T_10326 = bits(T_10324, 1, 0) @[Edges.scala 62:22]
        node T_10328 = neq(T_10326, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10330 = eq(T_10328, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10331 = or(T_10325, T_10326) @[Edges.scala 63:32]
        node T_10332 = bits(T_10331, 0, 0) @[Edges.scala 58:14]
        node T_10333 = not(T_10332) @[Edges.scala 58:9]
        node T_10334 = cat(T_10330, T_10333) @[Cat.scala 20:58]
        node T_10335 = cat(T_10323, T_10334) @[Cat.scala 20:58]
        node T_10336 = not(T_10317) @[Edges.scala 66:39]
        node T_10337 = and(T_10335, T_10336) @[Edges.scala 66:37]
        node T_10338 = cat(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_10337) @[Cat.scala 20:58]
        node T_10340 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10342 = eq(T_10340, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10342 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10343 = or(T_10208[0], reset) @[Periphery.scala 291:29]
        node T_10345 = eq(T_10343, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10345 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10347 = geq(TLWidthWidget_1_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_10348 = or(T_10347, reset) @[Periphery.scala 291:29]
        node T_10350 = eq(T_10348, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10350 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10351 = or(T_10218, reset) @[Periphery.scala 291:29]
        node T_10353 = eq(T_10351, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10353 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10354 = leq(TLWidthWidget_1_1.io.out[0].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_10355 = or(T_10354, reset) @[Periphery.scala 291:29]
        node T_10357 = eq(T_10355, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10357 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Periphery.scala:291:29)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10358 = not(TLWidthWidget_1_1.io.out[0].a.bits.mask) @[Periphery.scala 291:29]
        node T_10360 = eq(T_10358, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10361 = or(T_10360, reset) @[Periphery.scala 291:29]
        node T_10363 = eq(T_10361, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10363 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10364 = eq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:29]
      when T_10364 : @[Periphery.scala 291:29]
        node T_10366 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_10367 = dshl(T_10366, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_10368 = bits(T_10367, 2, 0) @[package.scala 11:76]
        node T_10369 = not(T_10368) @[package.scala 11:40]
        node T_10370 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_10371 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_10373 = neq(T_10371, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10375 = eq(T_10373, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10376 = or(T_10370, T_10371) @[Edges.scala 63:32]
        node T_10377 = bits(T_10376, 3, 2) @[Edges.scala 61:22]
        node T_10378 = bits(T_10376, 1, 0) @[Edges.scala 62:22]
        node T_10380 = neq(T_10378, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10382 = eq(T_10380, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10383 = or(T_10377, T_10378) @[Edges.scala 63:32]
        node T_10384 = bits(T_10383, 0, 0) @[Edges.scala 58:14]
        node T_10385 = not(T_10384) @[Edges.scala 58:9]
        node T_10386 = cat(T_10382, T_10385) @[Cat.scala 20:58]
        node T_10387 = cat(T_10375, T_10386) @[Cat.scala 20:58]
        node T_10388 = not(T_10369) @[Edges.scala 66:39]
        node T_10389 = and(T_10387, T_10388) @[Edges.scala 66:37]
        node T_10390 = cat(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_10389) @[Cat.scala 20:58]
        node T_10392 = leq(UInt<1>("h00"), TLWidthWidget_1_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_10394 = leq(TLWidthWidget_1_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_10395 = and(T_10392, T_10394) @[Parameters.scala 61:37]
        node T_10396 = or(T_10395, reset) @[Periphery.scala 291:29]
        node T_10398 = eq(T_10396, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10398 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10399 = or(T_10208[0], reset) @[Periphery.scala 291:29]
        node T_10401 = eq(T_10399, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10401 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10402 = or(T_10218, reset) @[Periphery.scala 291:29]
        node T_10404 = eq(T_10402, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10404 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10406 = eq(TLWidthWidget_1_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10407 = or(T_10406, reset) @[Periphery.scala 291:29]
        node T_10409 = eq(T_10407, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10409 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10410 = eq(TLWidthWidget_1_1.io.out[0].a.bits.mask, T_10311) @[Periphery.scala 291:29]
        node T_10411 = or(T_10410, reset) @[Periphery.scala 291:29]
        node T_10413 = eq(T_10411, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10413 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10414 = eq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_10414 : @[Periphery.scala 291:29]
        node T_10416 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_10417 = dshl(T_10416, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_10418 = bits(T_10417, 2, 0) @[package.scala 11:76]
        node T_10419 = not(T_10418) @[package.scala 11:40]
        node T_10420 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_10421 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_10423 = neq(T_10421, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10425 = eq(T_10423, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10426 = or(T_10420, T_10421) @[Edges.scala 63:32]
        node T_10427 = bits(T_10426, 3, 2) @[Edges.scala 61:22]
        node T_10428 = bits(T_10426, 1, 0) @[Edges.scala 62:22]
        node T_10430 = neq(T_10428, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10432 = eq(T_10430, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10433 = or(T_10427, T_10428) @[Edges.scala 63:32]
        node T_10434 = bits(T_10433, 0, 0) @[Edges.scala 58:14]
        node T_10435 = not(T_10434) @[Edges.scala 58:9]
        node T_10436 = cat(T_10432, T_10435) @[Cat.scala 20:58]
        node T_10437 = cat(T_10425, T_10436) @[Cat.scala 20:58]
        node T_10438 = not(T_10419) @[Edges.scala 66:39]
        node T_10439 = and(T_10437, T_10438) @[Edges.scala 66:37]
        node T_10440 = cat(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_10439) @[Cat.scala 20:58]
        node T_10442 = leq(UInt<1>("h00"), TLWidthWidget_1_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_10444 = leq(TLWidthWidget_1_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_10445 = and(T_10442, T_10444) @[Parameters.scala 61:37]
        node T_10446 = or(T_10445, reset) @[Periphery.scala 291:29]
        node T_10448 = eq(T_10446, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10448 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10449 = or(T_10208[0], reset) @[Periphery.scala 291:29]
        node T_10451 = eq(T_10449, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10451 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10452 = or(T_10218, reset) @[Periphery.scala 291:29]
        node T_10454 = eq(T_10452, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10454 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10456 = eq(TLWidthWidget_1_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10457 = or(T_10456, reset) @[Periphery.scala 291:29]
        node T_10459 = eq(T_10457, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10459 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10460 = eq(TLWidthWidget_1_1.io.out[0].a.bits.mask, T_10311) @[Periphery.scala 291:29]
        node T_10461 = or(T_10460, reset) @[Periphery.scala 291:29]
        node T_10463 = eq(T_10461, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10463 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10464 = eq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:29]
      when T_10464 : @[Periphery.scala 291:29]
        node T_10466 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_10467 = dshl(T_10466, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_10468 = bits(T_10467, 2, 0) @[package.scala 11:76]
        node T_10469 = not(T_10468) @[package.scala 11:40]
        node T_10470 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_10471 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_10473 = neq(T_10471, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10475 = eq(T_10473, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10476 = or(T_10470, T_10471) @[Edges.scala 63:32]
        node T_10477 = bits(T_10476, 3, 2) @[Edges.scala 61:22]
        node T_10478 = bits(T_10476, 1, 0) @[Edges.scala 62:22]
        node T_10480 = neq(T_10478, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10482 = eq(T_10480, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10483 = or(T_10477, T_10478) @[Edges.scala 63:32]
        node T_10484 = bits(T_10483, 0, 0) @[Edges.scala 58:14]
        node T_10485 = not(T_10484) @[Edges.scala 58:9]
        node T_10486 = cat(T_10482, T_10485) @[Cat.scala 20:58]
        node T_10487 = cat(T_10475, T_10486) @[Cat.scala 20:58]
        node T_10488 = not(T_10469) @[Edges.scala 66:39]
        node T_10489 = and(T_10487, T_10488) @[Edges.scala 66:37]
        node T_10490 = cat(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_10489) @[Cat.scala 20:58]
        node T_10492 = leq(UInt<1>("h00"), TLWidthWidget_1_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_10494 = leq(TLWidthWidget_1_1.io.out[0].a.bits.size, UInt<4>("h08")) @[Parameters.scala 61:42]
        node T_10495 = and(T_10492, T_10494) @[Parameters.scala 61:37]
        node T_10496 = or(T_10495, reset) @[Periphery.scala 291:29]
        node T_10498 = eq(T_10496, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10498 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10499 = or(T_10208[0], reset) @[Periphery.scala 291:29]
        node T_10501 = eq(T_10499, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10501 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10502 = or(T_10218, reset) @[Periphery.scala 291:29]
        node T_10504 = eq(T_10502, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10504 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10506 = eq(TLWidthWidget_1_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10507 = or(T_10506, reset) @[Periphery.scala 291:29]
        node T_10509 = eq(T_10507, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10509 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10510 = not(T_10311) @[Periphery.scala 291:29]
        node T_10511 = and(TLWidthWidget_1_1.io.out[0].a.bits.mask, T_10510) @[Periphery.scala 291:29]
        node T_10513 = eq(T_10511, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10514 = or(T_10513, reset) @[Periphery.scala 291:29]
        node T_10516 = eq(T_10514, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10516 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10517 = eq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:29]
      when T_10517 : @[Periphery.scala 291:29]
        node T_10519 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_10520 = dshl(T_10519, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_10521 = bits(T_10520, 2, 0) @[package.scala 11:76]
        node T_10522 = not(T_10521) @[package.scala 11:40]
        node T_10523 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_10524 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_10526 = neq(T_10524, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10528 = eq(T_10526, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10529 = or(T_10523, T_10524) @[Edges.scala 63:32]
        node T_10530 = bits(T_10529, 3, 2) @[Edges.scala 61:22]
        node T_10531 = bits(T_10529, 1, 0) @[Edges.scala 62:22]
        node T_10533 = neq(T_10531, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10535 = eq(T_10533, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10536 = or(T_10530, T_10531) @[Edges.scala 63:32]
        node T_10537 = bits(T_10536, 0, 0) @[Edges.scala 58:14]
        node T_10538 = not(T_10537) @[Edges.scala 58:9]
        node T_10539 = cat(T_10535, T_10538) @[Cat.scala 20:58]
        node T_10540 = cat(T_10528, T_10539) @[Cat.scala 20:58]
        node T_10541 = not(T_10522) @[Edges.scala 66:39]
        node T_10542 = and(T_10540, T_10541) @[Edges.scala 66:37]
        node T_10543 = cat(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_10542) @[Cat.scala 20:58]
        node T_10545 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10547 = eq(T_10545, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10547 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10548 = or(T_10208[0], reset) @[Periphery.scala 291:29]
        node T_10550 = eq(T_10548, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10550 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10551 = or(T_10218, reset) @[Periphery.scala 291:29]
        node T_10553 = eq(T_10551, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10553 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10554 = leq(TLWidthWidget_1_1.io.out[0].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_10555 = or(T_10554, reset) @[Periphery.scala 291:29]
        node T_10557 = eq(T_10555, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10557 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:291:29)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10558 = eq(TLWidthWidget_1_1.io.out[0].a.bits.mask, T_10311) @[Periphery.scala 291:29]
        node T_10559 = or(T_10558, reset) @[Periphery.scala 291:29]
        node T_10561 = eq(T_10559, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10561 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10562 = eq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, UInt<2>("h03")) @[Periphery.scala 291:29]
      when T_10562 : @[Periphery.scala 291:29]
        node T_10564 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_10565 = dshl(T_10564, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_10566 = bits(T_10565, 2, 0) @[package.scala 11:76]
        node T_10567 = not(T_10566) @[package.scala 11:40]
        node T_10568 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_10569 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_10571 = neq(T_10569, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10573 = eq(T_10571, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10574 = or(T_10568, T_10569) @[Edges.scala 63:32]
        node T_10575 = bits(T_10574, 3, 2) @[Edges.scala 61:22]
        node T_10576 = bits(T_10574, 1, 0) @[Edges.scala 62:22]
        node T_10578 = neq(T_10576, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10580 = eq(T_10578, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10581 = or(T_10575, T_10576) @[Edges.scala 63:32]
        node T_10582 = bits(T_10581, 0, 0) @[Edges.scala 58:14]
        node T_10583 = not(T_10582) @[Edges.scala 58:9]
        node T_10584 = cat(T_10580, T_10583) @[Cat.scala 20:58]
        node T_10585 = cat(T_10573, T_10584) @[Cat.scala 20:58]
        node T_10586 = not(T_10567) @[Edges.scala 66:39]
        node T_10587 = and(T_10585, T_10586) @[Edges.scala 66:37]
        node T_10588 = cat(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_10587) @[Cat.scala 20:58]
        node T_10590 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10592 = eq(T_10590, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10592 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10593 = or(T_10208[0], reset) @[Periphery.scala 291:29]
        node T_10595 = eq(T_10593, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10595 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10596 = or(T_10218, reset) @[Periphery.scala 291:29]
        node T_10598 = eq(T_10596, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10598 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10599 = leq(TLWidthWidget_1_1.io.out[0].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_10600 = or(T_10599, reset) @[Periphery.scala 291:29]
        node T_10602 = eq(T_10600, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10602 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Periphery.scala:291:29)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10603 = eq(TLWidthWidget_1_1.io.out[0].a.bits.mask, T_10311) @[Periphery.scala 291:29]
        node T_10604 = or(T_10603, reset) @[Periphery.scala 291:29]
        node T_10606 = eq(T_10604, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10606 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10607 = eq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:29]
      when T_10607 : @[Periphery.scala 291:29]
        node T_10609 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_10610 = dshl(T_10609, TLWidthWidget_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_10611 = bits(T_10610, 2, 0) @[package.scala 11:76]
        node T_10612 = not(T_10611) @[package.scala 11:40]
        node T_10613 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_10614 = bits(TLWidthWidget_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_10616 = neq(T_10614, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10618 = eq(T_10616, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10619 = or(T_10613, T_10614) @[Edges.scala 63:32]
        node T_10620 = bits(T_10619, 3, 2) @[Edges.scala 61:22]
        node T_10621 = bits(T_10619, 1, 0) @[Edges.scala 62:22]
        node T_10623 = neq(T_10621, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_10625 = eq(T_10623, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_10626 = or(T_10620, T_10621) @[Edges.scala 63:32]
        node T_10627 = bits(T_10626, 0, 0) @[Edges.scala 58:14]
        node T_10628 = not(T_10627) @[Edges.scala 58:9]
        node T_10629 = cat(T_10625, T_10628) @[Cat.scala 20:58]
        node T_10630 = cat(T_10618, T_10629) @[Cat.scala 20:58]
        node T_10631 = not(T_10612) @[Edges.scala 66:39]
        node T_10632 = and(T_10630, T_10631) @[Edges.scala 66:37]
        node T_10633 = cat(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_10632) @[Cat.scala 20:58]
        node T_10635 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10637 = eq(T_10635, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10637 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10638 = or(T_10208[0], reset) @[Periphery.scala 291:29]
        node T_10640 = eq(T_10638, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10640 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10641 = or(T_10218, reset) @[Periphery.scala 291:29]
        node T_10643 = eq(T_10641, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10643 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10644 = eq(TLWidthWidget_1_1.io.out[0].a.bits.mask, T_10311) @[Periphery.scala 291:29]
        node T_10645 = or(T_10644, reset) @[Periphery.scala 291:29]
        node T_10647 = eq(T_10645, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10647 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    when TLWidthWidget_1_1.io.out[0].b.valid : @[Periphery.scala 291:29]
      node T_10648 = leq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_10649 = or(T_10648, reset) @[Periphery.scala 291:29]
      node T_10651 = eq(T_10649, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_10651 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Periphery.scala:291:29)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10653 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_10654 = dshl(T_10653, TLWidthWidget_1_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_10655 = bits(T_10654, 2, 0) @[package.scala 11:76]
      node T_10656 = not(T_10655) @[package.scala 11:40]
      node T_10657 = bits(TLWidthWidget_1_1.io.out[0].b.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_10658 = bits(TLWidthWidget_1_1.io.out[0].b.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_10660 = neq(T_10658, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_10662 = eq(T_10660, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_10663 = or(T_10657, T_10658) @[Edges.scala 63:32]
      node T_10664 = bits(T_10663, 3, 2) @[Edges.scala 61:22]
      node T_10665 = bits(T_10663, 1, 0) @[Edges.scala 62:22]
      node T_10667 = neq(T_10665, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_10669 = eq(T_10667, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_10670 = or(T_10664, T_10665) @[Edges.scala 63:32]
      node T_10671 = bits(T_10670, 0, 0) @[Edges.scala 58:14]
      node T_10672 = not(T_10671) @[Edges.scala 58:9]
      node T_10673 = cat(T_10669, T_10672) @[Cat.scala 20:58]
      node T_10674 = cat(T_10662, T_10673) @[Cat.scala 20:58]
      node T_10675 = not(T_10656) @[Edges.scala 66:39]
      node T_10676 = and(T_10674, T_10675) @[Edges.scala 66:37]
      node T_10677 = cat(TLWidthWidget_1_1.io.out[0].b.bits.addr_hi, T_10676) @[Cat.scala 20:58]
      node T_10679 = xor(T_10677, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_10680 = cvt(T_10679) @[Parameters.scala 89:49]
      node T_10682 = and(T_10680, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_10683 = asSInt(T_10682) @[Parameters.scala 89:52]
      node T_10685 = eq(T_10683, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_10691 : UInt<1>[1] @[Parameters.scala 227:36]
      T_10691 is invalid @[Parameters.scala 227:36]
      T_10691[0] <= T_10685 @[Parameters.scala 227:36]
      node T_10694 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_10695 = dshl(T_10694, TLWidthWidget_1_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_10696 = bits(T_10695, 7, 0) @[package.scala 11:76]
      node T_10697 = not(T_10696) @[package.scala 11:40]
      node T_10698 = shr(T_10697, 3) @[Edges.scala 15:47]
      node T_10699 = and(TLWidthWidget_1_1.io.out[0].b.bits.addr_hi, T_10698) @[Edges.scala 16:16]
      node T_10701 = eq(T_10699, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_10703 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_10704 = dshl(T_10703, TLWidthWidget_1_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_10705 = bits(T_10704, 2, 0) @[package.scala 11:76]
      node T_10706 = not(T_10705) @[package.scala 11:40]
      node T_10707 = bits(TLWidthWidget_1_1.io.out[0].b.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_10708 = bits(TLWidthWidget_1_1.io.out[0].b.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_10710 = neq(T_10708, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_10712 = eq(T_10710, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_10713 = or(T_10707, T_10708) @[Edges.scala 63:32]
      node T_10714 = bits(T_10713, 3, 2) @[Edges.scala 61:22]
      node T_10715 = bits(T_10713, 1, 0) @[Edges.scala 62:22]
      node T_10717 = neq(T_10715, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_10719 = eq(T_10717, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_10720 = or(T_10714, T_10715) @[Edges.scala 63:32]
      node T_10721 = bits(T_10720, 0, 0) @[Edges.scala 58:14]
      node T_10722 = not(T_10721) @[Edges.scala 58:9]
      node T_10723 = cat(T_10719, T_10722) @[Cat.scala 20:58]
      node T_10724 = cat(T_10712, T_10723) @[Cat.scala 20:58]
      node T_10725 = not(T_10706) @[Edges.scala 66:39]
      node T_10726 = and(T_10724, T_10725) @[Edges.scala 66:37]
      node T_10728 = bits(TLWidthWidget_1_1.io.out[0].b.bits.size, 1, 0) @[OneHot.scala 46:21]
      node T_10729 = dshl(UInt<1>("h01"), T_10728) @[OneHot.scala 46:16]
      node T_10730 = bits(T_10729, 2, 0) @[OneHot.scala 46:41]
      node T_10732 = geq(TLWidthWidget_1_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
      node T_10734 = bits(T_10730, 2, 2) @[Edges.scala 36:26]
      node T_10735 = bits(T_10726, 2, 2) @[Edges.scala 37:26]
      node T_10737 = eq(T_10735, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_10738 = and(UInt<1>("h01"), T_10737) @[Edges.scala 41:27]
      node T_10739 = and(T_10734, T_10738) @[Edges.scala 42:38]
      node T_10740 = or(T_10732, T_10739) @[Edges.scala 42:29]
      node T_10741 = and(UInt<1>("h01"), T_10735) @[Edges.scala 41:27]
      node T_10742 = and(T_10734, T_10741) @[Edges.scala 42:38]
      node T_10743 = or(T_10732, T_10742) @[Edges.scala 42:29]
      node T_10744 = bits(T_10730, 1, 1) @[Edges.scala 36:26]
      node T_10745 = bits(T_10726, 1, 1) @[Edges.scala 37:26]
      node T_10747 = eq(T_10745, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_10748 = and(T_10738, T_10747) @[Edges.scala 41:27]
      node T_10749 = and(T_10744, T_10748) @[Edges.scala 42:38]
      node T_10750 = or(T_10740, T_10749) @[Edges.scala 42:29]
      node T_10751 = and(T_10738, T_10745) @[Edges.scala 41:27]
      node T_10752 = and(T_10744, T_10751) @[Edges.scala 42:38]
      node T_10753 = or(T_10740, T_10752) @[Edges.scala 42:29]
      node T_10754 = and(T_10741, T_10747) @[Edges.scala 41:27]
      node T_10755 = and(T_10744, T_10754) @[Edges.scala 42:38]
      node T_10756 = or(T_10743, T_10755) @[Edges.scala 42:29]
      node T_10757 = and(T_10741, T_10745) @[Edges.scala 41:27]
      node T_10758 = and(T_10744, T_10757) @[Edges.scala 42:38]
      node T_10759 = or(T_10743, T_10758) @[Edges.scala 42:29]
      node T_10760 = bits(T_10730, 0, 0) @[Edges.scala 36:26]
      node T_10761 = bits(T_10726, 0, 0) @[Edges.scala 37:26]
      node T_10763 = eq(T_10761, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_10764 = and(T_10748, T_10763) @[Edges.scala 41:27]
      node T_10765 = and(T_10760, T_10764) @[Edges.scala 42:38]
      node T_10766 = or(T_10750, T_10765) @[Edges.scala 42:29]
      node T_10767 = and(T_10748, T_10761) @[Edges.scala 41:27]
      node T_10768 = and(T_10760, T_10767) @[Edges.scala 42:38]
      node T_10769 = or(T_10750, T_10768) @[Edges.scala 42:29]
      node T_10770 = and(T_10751, T_10763) @[Edges.scala 41:27]
      node T_10771 = and(T_10760, T_10770) @[Edges.scala 42:38]
      node T_10772 = or(T_10753, T_10771) @[Edges.scala 42:29]
      node T_10773 = and(T_10751, T_10761) @[Edges.scala 41:27]
      node T_10774 = and(T_10760, T_10773) @[Edges.scala 42:38]
      node T_10775 = or(T_10753, T_10774) @[Edges.scala 42:29]
      node T_10776 = and(T_10754, T_10763) @[Edges.scala 41:27]
      node T_10777 = and(T_10760, T_10776) @[Edges.scala 42:38]
      node T_10778 = or(T_10756, T_10777) @[Edges.scala 42:29]
      node T_10779 = and(T_10754, T_10761) @[Edges.scala 41:27]
      node T_10780 = and(T_10760, T_10779) @[Edges.scala 42:38]
      node T_10781 = or(T_10756, T_10780) @[Edges.scala 42:29]
      node T_10782 = and(T_10757, T_10763) @[Edges.scala 41:27]
      node T_10783 = and(T_10760, T_10782) @[Edges.scala 42:38]
      node T_10784 = or(T_10759, T_10783) @[Edges.scala 42:29]
      node T_10785 = and(T_10757, T_10761) @[Edges.scala 41:27]
      node T_10786 = and(T_10760, T_10785) @[Edges.scala 42:38]
      node T_10787 = or(T_10759, T_10786) @[Edges.scala 42:29]
      node T_10788 = cat(T_10769, T_10766) @[Cat.scala 20:58]
      node T_10789 = cat(T_10775, T_10772) @[Cat.scala 20:58]
      node T_10790 = cat(T_10789, T_10788) @[Cat.scala 20:58]
      node T_10791 = cat(T_10781, T_10778) @[Cat.scala 20:58]
      node T_10792 = cat(T_10787, T_10784) @[Cat.scala 20:58]
      node T_10793 = cat(T_10792, T_10791) @[Cat.scala 20:58]
      node T_10794 = cat(T_10793, T_10790) @[Cat.scala 20:58]
      node T_10795 = eq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:29]
      when T_10795 : @[Periphery.scala 291:29]
        node T_10797 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10799 = eq(T_10797, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10799 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Periphery.scala:291:29)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10800 = or(T_10691[0], reset) @[Periphery.scala 291:29]
        node T_10802 = eq(T_10800, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10802 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10804 = geq(TLWidthWidget_1_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_10805 = or(T_10804, reset) @[Periphery.scala 291:29]
        node T_10807 = eq(T_10805, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10807 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10808 = or(T_10701, reset) @[Periphery.scala 291:29]
        node T_10810 = eq(T_10808, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10810 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10811 = leq(TLWidthWidget_1_1.io.out[0].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_10812 = or(T_10811, reset) @[Periphery.scala 291:29]
        node T_10814 = eq(T_10812, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10814 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Periphery.scala:291:29)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10815 = not(TLWidthWidget_1_1.io.out[0].b.bits.mask) @[Periphery.scala 291:29]
        node T_10817 = eq(T_10815, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10818 = or(T_10817, reset) @[Periphery.scala 291:29]
        node T_10820 = eq(T_10818, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10820 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10821 = eq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:29]
      when T_10821 : @[Periphery.scala 291:29]
        node T_10823 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10825 = eq(T_10823, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10825 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Periphery.scala:291:29)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10826 = or(T_10691[0], reset) @[Periphery.scala 291:29]
        node T_10828 = eq(T_10826, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10828 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10829 = or(T_10701, reset) @[Periphery.scala 291:29]
        node T_10831 = eq(T_10829, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10831 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10833 = eq(TLWidthWidget_1_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10834 = or(T_10833, reset) @[Periphery.scala 291:29]
        node T_10836 = eq(T_10834, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10836 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10837 = eq(TLWidthWidget_1_1.io.out[0].b.bits.mask, T_10794) @[Periphery.scala 291:29]
        node T_10838 = or(T_10837, reset) @[Periphery.scala 291:29]
        node T_10840 = eq(T_10838, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10840 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10841 = eq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_10841 : @[Periphery.scala 291:29]
        node T_10843 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10845 = eq(T_10843, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10845 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Periphery.scala:291:29)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10846 = or(T_10691[0], reset) @[Periphery.scala 291:29]
        node T_10848 = eq(T_10846, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10848 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10849 = or(T_10701, reset) @[Periphery.scala 291:29]
        node T_10851 = eq(T_10849, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10851 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10853 = eq(TLWidthWidget_1_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10854 = or(T_10853, reset) @[Periphery.scala 291:29]
        node T_10856 = eq(T_10854, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10856 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10857 = eq(TLWidthWidget_1_1.io.out[0].b.bits.mask, T_10794) @[Periphery.scala 291:29]
        node T_10858 = or(T_10857, reset) @[Periphery.scala 291:29]
        node T_10860 = eq(T_10858, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10860 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10861 = eq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:29]
      when T_10861 : @[Periphery.scala 291:29]
        node T_10863 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10865 = eq(T_10863, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10865 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Periphery.scala:291:29)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10866 = or(T_10691[0], reset) @[Periphery.scala 291:29]
        node T_10868 = eq(T_10866, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10868 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10869 = or(T_10701, reset) @[Periphery.scala 291:29]
        node T_10871 = eq(T_10869, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10871 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10873 = eq(TLWidthWidget_1_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10874 = or(T_10873, reset) @[Periphery.scala 291:29]
        node T_10876 = eq(T_10874, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10876 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10877 = not(T_10794) @[Periphery.scala 291:29]
        node T_10878 = and(TLWidthWidget_1_1.io.out[0].b.bits.mask, T_10877) @[Periphery.scala 291:29]
        node T_10880 = eq(T_10878, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_10881 = or(T_10880, reset) @[Periphery.scala 291:29]
        node T_10883 = eq(T_10881, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10883 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10884 = eq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:29]
      when T_10884 : @[Periphery.scala 291:29]
        node T_10886 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10888 = eq(T_10886, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10888 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Periphery.scala:291:29)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10889 = or(T_10691[0], reset) @[Periphery.scala 291:29]
        node T_10891 = eq(T_10889, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10891 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10892 = or(T_10701, reset) @[Periphery.scala 291:29]
        node T_10894 = eq(T_10892, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10894 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10895 = leq(TLWidthWidget_1_1.io.out[0].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_10896 = or(T_10895, reset) @[Periphery.scala 291:29]
        node T_10898 = eq(T_10896, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10898 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:291:29)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10899 = eq(TLWidthWidget_1_1.io.out[0].b.bits.mask, T_10794) @[Periphery.scala 291:29]
        node T_10900 = or(T_10899, reset) @[Periphery.scala 291:29]
        node T_10902 = eq(T_10900, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10902 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10903 = eq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, UInt<2>("h03")) @[Periphery.scala 291:29]
      when T_10903 : @[Periphery.scala 291:29]
        node T_10905 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10907 = eq(T_10905, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10907 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Periphery.scala:291:29)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10908 = or(T_10691[0], reset) @[Periphery.scala 291:29]
        node T_10910 = eq(T_10908, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10910 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10911 = or(T_10701, reset) @[Periphery.scala 291:29]
        node T_10913 = eq(T_10911, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10913 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10914 = leq(TLWidthWidget_1_1.io.out[0].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_10915 = or(T_10914, reset) @[Periphery.scala 291:29]
        node T_10917 = eq(T_10915, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10917 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Periphery.scala:291:29)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10918 = eq(TLWidthWidget_1_1.io.out[0].b.bits.mask, T_10794) @[Periphery.scala 291:29]
        node T_10919 = or(T_10918, reset) @[Periphery.scala 291:29]
        node T_10921 = eq(T_10919, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10921 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10922 = eq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:29]
      when T_10922 : @[Periphery.scala 291:29]
        node T_10924 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_10926 = eq(T_10924, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10926 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Periphery.scala:291:29)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10927 = or(T_10691[0], reset) @[Periphery.scala 291:29]
        node T_10929 = eq(T_10927, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10929 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10930 = or(T_10701, reset) @[Periphery.scala 291:29]
        node T_10932 = eq(T_10930, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10932 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10933 = eq(TLWidthWidget_1_1.io.out[0].b.bits.mask, T_10794) @[Periphery.scala 291:29]
        node T_10934 = or(T_10933, reset) @[Periphery.scala 291:29]
        node T_10936 = eq(T_10934, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10936 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Periphery.scala:291:29)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    when TLWidthWidget_1_1.io.out[0].c.valid : @[Periphery.scala 291:29]
      node T_10937 = leq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_10938 = or(T_10937, reset) @[Periphery.scala 291:29]
      node T_10940 = eq(T_10938, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_10940 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Periphery.scala:291:29)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_10942 = xor(UInt<1>("h00"), TLWidthWidget_1_1.io.out[0].c.bits.source) @[Parameters.scala 37:23]
      node T_10943 = not(T_10942) @[Parameters.scala 37:9]
      node T_10945 = or(T_10943, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_10946 = not(T_10945) @[Parameters.scala 37:7]
      node T_10948 = eq(T_10946, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_10954 : UInt<1>[1] @[Parameters.scala 326:27]
      T_10954 is invalid @[Parameters.scala 326:27]
      T_10954[0] <= T_10948 @[Parameters.scala 326:27]
      node T_10957 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_10958 = dshl(T_10957, TLWidthWidget_1_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_10959 = bits(T_10958, 7, 0) @[package.scala 11:76]
      node T_10960 = not(T_10959) @[package.scala 11:40]
      node T_10961 = shr(T_10960, 3) @[Edges.scala 15:47]
      node T_10962 = and(TLWidthWidget_1_1.io.out[0].c.bits.addr_hi, T_10961) @[Edges.scala 16:16]
      node T_10964 = eq(T_10962, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_10966 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_10967 = dshl(T_10966, TLWidthWidget_1_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_10968 = bits(T_10967, 7, 0) @[package.scala 11:76]
      node T_10969 = not(T_10968) @[package.scala 11:40]
      node T_10970 = and(TLWidthWidget_1_1.io.out[0].c.bits.addr_lo, T_10969) @[Edges.scala 23:16]
      node T_10972 = eq(T_10970, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_10973 = and(T_10964, T_10972) @[Periphery.scala 291:29]
      node T_10974 = cat(TLWidthWidget_1_1.io.out[0].c.bits.addr_hi, TLWidthWidget_1_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_10976 = xor(T_10974, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_10977 = cvt(T_10976) @[Parameters.scala 89:49]
      node T_10979 = and(T_10977, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_10980 = asSInt(T_10979) @[Parameters.scala 89:52]
      node T_10982 = eq(T_10980, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_10988 : UInt<1>[1] @[Parameters.scala 227:36]
      T_10988 is invalid @[Parameters.scala 227:36]
      T_10988[0] <= T_10982 @[Parameters.scala 227:36]
      node T_10990 = eq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:29]
      when T_10990 : @[Periphery.scala 291:29]
        node T_10991 = or(T_10988[0], reset) @[Periphery.scala 291:29]
        node T_10993 = eq(T_10991, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10993 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10994 = or(T_10954[0], reset) @[Periphery.scala 291:29]
        node T_10996 = eq(T_10994, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_10996 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_10998 = geq(TLWidthWidget_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_10999 = or(T_10998, reset) @[Periphery.scala 291:29]
        node T_11001 = eq(T_10999, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11001 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11002 = or(T_10973, reset) @[Periphery.scala 291:29]
        node T_11004 = eq(T_11002, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11004 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11005 = leq(TLWidthWidget_1_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_11006 = or(T_11005, reset) @[Periphery.scala 291:29]
        node T_11008 = eq(T_11006, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11008 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Periphery.scala:291:29)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11010 = eq(TLWidthWidget_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11011 = or(T_11010, reset) @[Periphery.scala 291:29]
        node T_11013 = eq(T_11011, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11013 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Periphery.scala:291:29)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11014 = eq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:29]
      when T_11014 : @[Periphery.scala 291:29]
        node T_11015 = or(T_10988[0], reset) @[Periphery.scala 291:29]
        node T_11017 = eq(T_11015, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11017 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11018 = or(T_10954[0], reset) @[Periphery.scala 291:29]
        node T_11020 = eq(T_11018, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11020 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11022 = geq(TLWidthWidget_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_11023 = or(T_11022, reset) @[Periphery.scala 291:29]
        node T_11025 = eq(T_11023, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11025 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11026 = or(T_10973, reset) @[Periphery.scala 291:29]
        node T_11028 = eq(T_11026, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11028 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11029 = leq(TLWidthWidget_1_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_11030 = or(T_11029, reset) @[Periphery.scala 291:29]
        node T_11032 = eq(T_11030, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11032 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Periphery.scala:291:29)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11034 = eq(TLWidthWidget_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11035 = or(T_11034, reset) @[Periphery.scala 291:29]
        node T_11037 = eq(T_11035, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11037 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Periphery.scala:291:29)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11038 = eq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:29]
      when T_11038 : @[Periphery.scala 291:29]
        node T_11039 = cat(TLWidthWidget_1_1.io.out[0].c.bits.addr_hi, TLWidthWidget_1_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_11041 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_11043 = eq(T_11041, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11043 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11044 = or(T_10954[0], reset) @[Periphery.scala 291:29]
        node T_11046 = eq(T_11044, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11046 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11048 = geq(TLWidthWidget_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_11049 = or(T_11048, reset) @[Periphery.scala 291:29]
        node T_11051 = eq(T_11049, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11051 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11052 = or(T_10973, reset) @[Periphery.scala 291:29]
        node T_11054 = eq(T_11052, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11054 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11055 = leq(TLWidthWidget_1_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_11056 = or(T_11055, reset) @[Periphery.scala 291:29]
        node T_11058 = eq(T_11056, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11058 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Periphery.scala:291:29)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11060 = eq(TLWidthWidget_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11061 = or(T_11060, reset) @[Periphery.scala 291:29]
        node T_11063 = eq(T_11061, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11063 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Periphery.scala:291:29)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11064 = eq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Periphery.scala 291:29]
      when T_11064 : @[Periphery.scala 291:29]
        node T_11065 = cat(TLWidthWidget_1_1.io.out[0].c.bits.addr_hi, TLWidthWidget_1_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_11067 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:29]
        node T_11069 = eq(T_11067, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11069 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Periphery.scala:291:29)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11070 = or(T_10954[0], reset) @[Periphery.scala 291:29]
        node T_11072 = eq(T_11070, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11072 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11074 = geq(TLWidthWidget_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_11075 = or(T_11074, reset) @[Periphery.scala 291:29]
        node T_11077 = eq(T_11075, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11077 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11078 = or(T_10973, reset) @[Periphery.scala 291:29]
        node T_11080 = eq(T_11078, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11080 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11081 = leq(TLWidthWidget_1_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_11082 = or(T_11081, reset) @[Periphery.scala 291:29]
        node T_11084 = eq(T_11082, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11084 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Periphery.scala:291:29)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11086 = eq(TLWidthWidget_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11087 = or(T_11086, reset) @[Periphery.scala 291:29]
        node T_11089 = eq(T_11087, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11089 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Periphery.scala:291:29)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11090 = eq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11090 : @[Periphery.scala 291:29]
        node T_11091 = or(T_10988[0], reset) @[Periphery.scala 291:29]
        node T_11093 = eq(T_11091, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11093 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11094 = or(T_10954[0], reset) @[Periphery.scala 291:29]
        node T_11096 = eq(T_11094, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11096 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11097 = or(T_10973, reset) @[Periphery.scala 291:29]
        node T_11099 = eq(T_11097, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11099 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11101 = eq(TLWidthWidget_1_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11102 = or(T_11101, reset) @[Periphery.scala 291:29]
        node T_11104 = eq(T_11102, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11104 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11105 = eq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:29]
      when T_11105 : @[Periphery.scala 291:29]
        node T_11106 = or(T_10988[0], reset) @[Periphery.scala 291:29]
        node T_11108 = eq(T_11106, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11108 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11109 = or(T_10954[0], reset) @[Periphery.scala 291:29]
        node T_11111 = eq(T_11109, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11111 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11112 = or(T_10973, reset) @[Periphery.scala 291:29]
        node T_11114 = eq(T_11112, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11114 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11116 = eq(TLWidthWidget_1_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11117 = or(T_11116, reset) @[Periphery.scala 291:29]
        node T_11119 = eq(T_11117, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11119 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11120 = eq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:29]
      when T_11120 : @[Periphery.scala 291:29]
        node T_11121 = or(T_10988[0], reset) @[Periphery.scala 291:29]
        node T_11123 = eq(T_11121, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11123 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Periphery.scala:291:29)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11124 = or(T_10954[0], reset) @[Periphery.scala 291:29]
        node T_11126 = eq(T_11124, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11126 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11127 = or(T_10973, reset) @[Periphery.scala 291:29]
        node T_11129 = eq(T_11127, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11129 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11131 = eq(TLWidthWidget_1_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11132 = or(T_11131, reset) @[Periphery.scala 291:29]
        node T_11134 = eq(T_11132, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11134 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11136 = eq(TLWidthWidget_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11137 = or(T_11136, reset) @[Periphery.scala 291:29]
        node T_11139 = eq(T_11137, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11139 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Periphery.scala:291:29)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    when TLWidthWidget_1_1.io.out[0].d.valid : @[Periphery.scala 291:29]
      node T_11140 = leq(TLWidthWidget_1_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_11141 = or(T_11140, reset) @[Periphery.scala 291:29]
      node T_11143 = eq(T_11141, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11143 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Periphery.scala:291:29)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11145 = xor(UInt<1>("h00"), TLWidthWidget_1_1.io.out[0].d.bits.source) @[Parameters.scala 37:23]
      node T_11146 = not(T_11145) @[Parameters.scala 37:9]
      node T_11148 = or(T_11146, UInt<2>("h03")) @[Parameters.scala 37:28]
      node T_11149 = not(T_11148) @[Parameters.scala 37:7]
      node T_11151 = eq(T_11149, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_11157 : UInt<1>[1] @[Parameters.scala 326:27]
      T_11157 is invalid @[Parameters.scala 326:27]
      T_11157[0] <= T_11151 @[Parameters.scala 326:27]
      node T_11160 = asUInt(asSInt(UInt<8>("h0ff"))) @[package.scala 11:64]
      node T_11161 = dshl(T_11160, TLWidthWidget_1_1.io.out[0].d.bits.size) @[package.scala 11:71]
      node T_11162 = bits(T_11161, 7, 0) @[package.scala 11:76]
      node T_11163 = not(T_11162) @[package.scala 11:40]
      node T_11164 = and(TLWidthWidget_1_1.io.out[0].d.bits.addr_lo, T_11163) @[Edges.scala 23:16]
      node T_11166 = eq(T_11164, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_11168 = eq(UInt<1>("h00"), TLWidthWidget_1_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      wire T_11174 : UInt<1>[1] @[Parameters.scala 220:31]
      T_11174 is invalid @[Parameters.scala 220:31]
      T_11174[0] <= T_11168 @[Parameters.scala 220:31]
      node T_11176 = eq(TLWidthWidget_1_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:29]
      when T_11176 : @[Periphery.scala 291:29]
        node T_11177 = or(T_11157[0], reset) @[Periphery.scala 291:29]
        node T_11179 = eq(T_11177, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11179 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11180 = or(T_11166, reset) @[Periphery.scala 291:29]
        node T_11182 = eq(T_11180, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11182 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11183 = or(T_11174[0], reset) @[Periphery.scala 291:29]
        node T_11185 = eq(T_11183, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11185 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11187 = geq(TLWidthWidget_1_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_11188 = or(T_11187, reset) @[Periphery.scala 291:29]
        node T_11190 = eq(T_11188, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11190 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11192 = eq(TLWidthWidget_1_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11193 = or(T_11192, reset) @[Periphery.scala 291:29]
        node T_11195 = eq(T_11193, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11195 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11197 = eq(TLWidthWidget_1_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11198 = or(T_11197, reset) @[Periphery.scala 291:29]
        node T_11200 = eq(T_11198, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11200 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Periphery.scala:291:29)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11201 = eq(TLWidthWidget_1_1.io.out[0].d.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:29]
      when T_11201 : @[Periphery.scala 291:29]
        node T_11202 = or(T_11157[0], reset) @[Periphery.scala 291:29]
        node T_11204 = eq(T_11202, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11204 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11205 = or(T_11166, reset) @[Periphery.scala 291:29]
        node T_11207 = eq(T_11205, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11207 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11208 = or(T_11174[0], reset) @[Periphery.scala 291:29]
        node T_11210 = eq(T_11208, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11210 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11212 = geq(TLWidthWidget_1_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_11213 = or(T_11212, reset) @[Periphery.scala 291:29]
        node T_11215 = eq(T_11213, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11215 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11216 = leq(TLWidthWidget_1_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_11217 = or(T_11216, reset) @[Periphery.scala 291:29]
        node T_11219 = eq(T_11217, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11219 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Periphery.scala:291:29)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11220 = eq(TLWidthWidget_1_1.io.out[0].d.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:29]
      when T_11220 : @[Periphery.scala 291:29]
        node T_11221 = or(T_11157[0], reset) @[Periphery.scala 291:29]
        node T_11223 = eq(T_11221, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11223 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11224 = or(T_11166, reset) @[Periphery.scala 291:29]
        node T_11226 = eq(T_11224, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11226 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11227 = or(T_11174[0], reset) @[Periphery.scala 291:29]
        node T_11229 = eq(T_11227, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11229 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11231 = geq(TLWidthWidget_1_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Periphery.scala 291:29]
        node T_11232 = or(T_11231, reset) @[Periphery.scala 291:29]
        node T_11234 = eq(T_11232, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11234 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Periphery.scala:291:29)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11235 = leq(TLWidthWidget_1_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_11236 = or(T_11235, reset) @[Periphery.scala 291:29]
        node T_11238 = eq(T_11236, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11238 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Periphery.scala:291:29)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11239 = eq(TLWidthWidget_1_1.io.out[0].d.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11239 : @[Periphery.scala 291:29]
        node T_11240 = or(T_11157[0], reset) @[Periphery.scala 291:29]
        node T_11242 = eq(T_11240, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11242 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11243 = or(T_11166, reset) @[Periphery.scala 291:29]
        node T_11245 = eq(T_11243, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11245 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11246 = or(T_11174[0], reset) @[Periphery.scala 291:29]
        node T_11248 = eq(T_11246, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11248 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11250 = eq(TLWidthWidget_1_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11251 = or(T_11250, reset) @[Periphery.scala 291:29]
        node T_11253 = eq(T_11251, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11253 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11254 = eq(TLWidthWidget_1_1.io.out[0].d.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:29]
      when T_11254 : @[Periphery.scala 291:29]
        node T_11255 = or(T_11157[0], reset) @[Periphery.scala 291:29]
        node T_11257 = eq(T_11255, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11257 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11258 = or(T_11166, reset) @[Periphery.scala 291:29]
        node T_11260 = eq(T_11258, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11260 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11261 = or(T_11174[0], reset) @[Periphery.scala 291:29]
        node T_11263 = eq(T_11261, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11263 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11265 = eq(TLWidthWidget_1_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11266 = or(T_11265, reset) @[Periphery.scala 291:29]
        node T_11268 = eq(T_11266, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11268 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11269 = eq(TLWidthWidget_1_1.io.out[0].d.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:29]
      when T_11269 : @[Periphery.scala 291:29]
        node T_11270 = or(T_11157[0], reset) @[Periphery.scala 291:29]
        node T_11272 = eq(T_11270, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11272 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11273 = or(T_11166, reset) @[Periphery.scala 291:29]
        node T_11275 = eq(T_11273, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11275 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Periphery.scala:291:29)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11276 = or(T_11174[0], reset) @[Periphery.scala 291:29]
        node T_11278 = eq(T_11276, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11278 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11280 = eq(TLWidthWidget_1_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11281 = or(T_11280, reset) @[Periphery.scala 291:29]
        node T_11283 = eq(T_11281, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11283 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Periphery.scala:291:29)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        node T_11285 = eq(TLWidthWidget_1_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Periphery.scala 291:29]
        node T_11286 = or(T_11285, reset) @[Periphery.scala 291:29]
        node T_11288 = eq(T_11286, UInt<1>("h00")) @[Periphery.scala 291:29]
        when T_11288 : @[Periphery.scala 291:29]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Periphery.scala:291:29)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 291:29]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
          skip @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    when TLWidthWidget_1_1.io.out[0].e.valid : @[Periphery.scala 291:29]
      node T_11290 = eq(UInt<1>("h00"), TLWidthWidget_1_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      wire T_11296 : UInt<1>[1] @[Parameters.scala 220:31]
      T_11296 is invalid @[Parameters.scala 220:31]
      T_11296[0] <= T_11290 @[Parameters.scala 220:31]
      node T_11298 = or(T_11296[0], reset) @[Periphery.scala 291:29]
      node T_11300 = eq(T_11298, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11300 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Periphery.scala:291:29)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11302 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_11304 : UInt, clk
    reg T_11306 : UInt, clk
    reg T_11308 : UInt, clk
    reg T_11310 : UInt, clk
    reg T_11312 : UInt, clk
    node T_11314 = neq(T_11302, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11315 = and(TLWidthWidget_1_1.io.out[0].a.valid, T_11314) @[Periphery.scala 291:29]
    when T_11315 : @[Periphery.scala 291:29]
      node T_11316 = eq(TLWidthWidget_1_1.io.out[0].a.bits.opcode, T_11304) @[Periphery.scala 291:29]
      node T_11317 = or(T_11316, reset) @[Periphery.scala 291:29]
      node T_11319 = eq(T_11317, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11319 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11320 = eq(TLWidthWidget_1_1.io.out[0].a.bits.param, T_11306) @[Periphery.scala 291:29]
      node T_11321 = or(T_11320, reset) @[Periphery.scala 291:29]
      node T_11323 = eq(T_11321, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11323 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11324 = eq(TLWidthWidget_1_1.io.out[0].a.bits.size, T_11308) @[Periphery.scala 291:29]
      node T_11325 = or(T_11324, reset) @[Periphery.scala 291:29]
      node T_11327 = eq(T_11325, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11327 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11328 = eq(TLWidthWidget_1_1.io.out[0].a.bits.source, T_11310) @[Periphery.scala 291:29]
      node T_11329 = or(T_11328, reset) @[Periphery.scala 291:29]
      node T_11331 = eq(T_11329, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11331 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11332 = eq(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, T_11312) @[Periphery.scala 291:29]
      node T_11333 = or(T_11332, reset) @[Periphery.scala 291:29]
      node T_11335 = eq(T_11333, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11335 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    node T_11336 = and(TLWidthWidget_1_1.io.out[0].a.ready, TLWidthWidget_1_1.io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_11336 : @[Periphery.scala 291:29]
      node T_11338 = sub(T_11302, UInt<1>("h01")) @[Periphery.scala 291:29]
      node T_11339 = tail(T_11338, 1) @[Periphery.scala 291:29]
      T_11302 <= T_11339 @[Periphery.scala 291:29]
      node T_11341 = eq(T_11302, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11341 : @[Periphery.scala 291:29]
        node T_11342 = bits(TLWidthWidget_1_1.io.out[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_11344 = eq(T_11342, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_11346 = leq(TLWidthWidget_1_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_11348 = bits(TLWidthWidget_1_1.io.out[0].a.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_11349 = dshl(UInt<1>("h01"), T_11348) @[OneHot.scala 46:16]
        node T_11350 = bits(T_11349, 8, 0) @[OneHot.scala 46:41]
        node T_11351 = shr(T_11350, 3) @[Edges.scala 209:50]
        node T_11352 = or(T_11351, T_11346) @[Edges.scala 210:29]
        node T_11354 = mux(T_11344, T_11352, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_11356 = sub(T_11354, UInt<1>("h01")) @[Periphery.scala 291:29]
        node T_11357 = tail(T_11356, 1) @[Periphery.scala 291:29]
        T_11302 <= T_11357 @[Periphery.scala 291:29]
        T_11304 <= TLWidthWidget_1_1.io.out[0].a.bits.opcode @[Periphery.scala 291:29]
        T_11306 <= TLWidthWidget_1_1.io.out[0].a.bits.param @[Periphery.scala 291:29]
        T_11308 <= TLWidthWidget_1_1.io.out[0].a.bits.size @[Periphery.scala 291:29]
        T_11310 <= TLWidthWidget_1_1.io.out[0].a.bits.source @[Periphery.scala 291:29]
        T_11312 <= TLWidthWidget_1_1.io.out[0].a.bits.addr_hi @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11359 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_11361 : UInt, clk
    reg T_11363 : UInt, clk
    reg T_11365 : UInt, clk
    reg T_11367 : UInt, clk
    reg T_11369 : UInt, clk
    node T_11371 = neq(T_11359, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11372 = and(TLWidthWidget_1_1.io.out[0].b.valid, T_11371) @[Periphery.scala 291:29]
    when T_11372 : @[Periphery.scala 291:29]
      node T_11373 = eq(TLWidthWidget_1_1.io.out[0].b.bits.opcode, T_11361) @[Periphery.scala 291:29]
      node T_11374 = or(T_11373, reset) @[Periphery.scala 291:29]
      node T_11376 = eq(T_11374, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11376 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11377 = eq(TLWidthWidget_1_1.io.out[0].b.bits.param, T_11363) @[Periphery.scala 291:29]
      node T_11378 = or(T_11377, reset) @[Periphery.scala 291:29]
      node T_11380 = eq(T_11378, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11380 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11381 = eq(TLWidthWidget_1_1.io.out[0].b.bits.size, T_11365) @[Periphery.scala 291:29]
      node T_11382 = or(T_11381, reset) @[Periphery.scala 291:29]
      node T_11384 = eq(T_11382, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11384 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11385 = eq(TLWidthWidget_1_1.io.out[0].b.bits.source, T_11367) @[Periphery.scala 291:29]
      node T_11386 = or(T_11385, reset) @[Periphery.scala 291:29]
      node T_11388 = eq(T_11386, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11388 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11389 = eq(TLWidthWidget_1_1.io.out[0].b.bits.addr_hi, T_11369) @[Periphery.scala 291:29]
      node T_11390 = or(T_11389, reset) @[Periphery.scala 291:29]
      node T_11392 = eq(T_11390, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11392 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    node T_11393 = and(TLWidthWidget_1_1.io.out[0].b.ready, TLWidthWidget_1_1.io.out[0].b.valid) @[Decoupled.scala 21:42]
    when T_11393 : @[Periphery.scala 291:29]
      node T_11395 = sub(T_11359, UInt<1>("h01")) @[Periphery.scala 291:29]
      node T_11396 = tail(T_11395, 1) @[Periphery.scala 291:29]
      T_11359 <= T_11396 @[Periphery.scala 291:29]
      node T_11398 = eq(T_11359, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11398 : @[Periphery.scala 291:29]
        node T_11399 = bits(TLWidthWidget_1_1.io.out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_11401 = eq(T_11399, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_11404 = leq(TLWidthWidget_1_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_11406 = bits(TLWidthWidget_1_1.io.out[0].b.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_11407 = dshl(UInt<1>("h01"), T_11406) @[OneHot.scala 46:16]
        node T_11408 = bits(T_11407, 8, 0) @[OneHot.scala 46:41]
        node T_11409 = shr(T_11408, 3) @[Edges.scala 209:50]
        node T_11410 = or(T_11409, T_11404) @[Edges.scala 210:29]
        node T_11412 = mux(UInt<1>("h00"), T_11410, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_11414 = sub(T_11412, UInt<1>("h01")) @[Periphery.scala 291:29]
        node T_11415 = tail(T_11414, 1) @[Periphery.scala 291:29]
        T_11359 <= T_11415 @[Periphery.scala 291:29]
        T_11361 <= TLWidthWidget_1_1.io.out[0].b.bits.opcode @[Periphery.scala 291:29]
        T_11363 <= TLWidthWidget_1_1.io.out[0].b.bits.param @[Periphery.scala 291:29]
        T_11365 <= TLWidthWidget_1_1.io.out[0].b.bits.size @[Periphery.scala 291:29]
        T_11367 <= TLWidthWidget_1_1.io.out[0].b.bits.source @[Periphery.scala 291:29]
        T_11369 <= TLWidthWidget_1_1.io.out[0].b.bits.addr_hi @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11417 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_11419 : UInt, clk
    reg T_11421 : UInt, clk
    reg T_11423 : UInt, clk
    reg T_11425 : UInt, clk
    reg T_11427 : UInt, clk
    reg T_11429 : UInt, clk
    node T_11431 = neq(T_11417, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11432 = and(TLWidthWidget_1_1.io.out[0].c.valid, T_11431) @[Periphery.scala 291:29]
    when T_11432 : @[Periphery.scala 291:29]
      node T_11433 = eq(TLWidthWidget_1_1.io.out[0].c.bits.opcode, T_11419) @[Periphery.scala 291:29]
      node T_11434 = or(T_11433, reset) @[Periphery.scala 291:29]
      node T_11436 = eq(T_11434, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11436 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11437 = eq(TLWidthWidget_1_1.io.out[0].c.bits.param, T_11421) @[Periphery.scala 291:29]
      node T_11438 = or(T_11437, reset) @[Periphery.scala 291:29]
      node T_11440 = eq(T_11438, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11440 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11441 = eq(TLWidthWidget_1_1.io.out[0].c.bits.size, T_11423) @[Periphery.scala 291:29]
      node T_11442 = or(T_11441, reset) @[Periphery.scala 291:29]
      node T_11444 = eq(T_11442, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11444 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11445 = eq(TLWidthWidget_1_1.io.out[0].c.bits.source, T_11425) @[Periphery.scala 291:29]
      node T_11446 = or(T_11445, reset) @[Periphery.scala 291:29]
      node T_11448 = eq(T_11446, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11448 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11449 = eq(TLWidthWidget_1_1.io.out[0].c.bits.addr_hi, T_11427) @[Periphery.scala 291:29]
      node T_11450 = or(T_11449, reset) @[Periphery.scala 291:29]
      node T_11452 = eq(T_11450, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11452 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11453 = eq(TLWidthWidget_1_1.io.out[0].c.bits.addr_lo, T_11429) @[Periphery.scala 291:29]
      node T_11454 = or(T_11453, reset) @[Periphery.scala 291:29]
      node T_11456 = eq(T_11454, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11456 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    node T_11457 = and(TLWidthWidget_1_1.io.out[0].c.ready, TLWidthWidget_1_1.io.out[0].c.valid) @[Decoupled.scala 21:42]
    when T_11457 : @[Periphery.scala 291:29]
      node T_11459 = sub(T_11417, UInt<1>("h01")) @[Periphery.scala 291:29]
      node T_11460 = tail(T_11459, 1) @[Periphery.scala 291:29]
      T_11417 <= T_11460 @[Periphery.scala 291:29]
      node T_11462 = eq(T_11417, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11462 : @[Periphery.scala 291:29]
        node T_11463 = bits(TLWidthWidget_1_1.io.out[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_11466 = leq(TLWidthWidget_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_11468 = bits(TLWidthWidget_1_1.io.out[0].c.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_11469 = dshl(UInt<1>("h01"), T_11468) @[OneHot.scala 46:16]
        node T_11470 = bits(T_11469, 8, 0) @[OneHot.scala 46:41]
        node T_11471 = shr(T_11470, 3) @[Edges.scala 209:50]
        node T_11472 = or(T_11471, T_11466) @[Edges.scala 210:29]
        node T_11474 = mux(UInt<1>("h00"), T_11472, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_11476 = sub(T_11474, UInt<1>("h01")) @[Periphery.scala 291:29]
        node T_11477 = tail(T_11476, 1) @[Periphery.scala 291:29]
        T_11417 <= T_11477 @[Periphery.scala 291:29]
        T_11419 <= TLWidthWidget_1_1.io.out[0].c.bits.opcode @[Periphery.scala 291:29]
        T_11421 <= TLWidthWidget_1_1.io.out[0].c.bits.param @[Periphery.scala 291:29]
        T_11423 <= TLWidthWidget_1_1.io.out[0].c.bits.size @[Periphery.scala 291:29]
        T_11425 <= TLWidthWidget_1_1.io.out[0].c.bits.source @[Periphery.scala 291:29]
        T_11427 <= TLWidthWidget_1_1.io.out[0].c.bits.addr_hi @[Periphery.scala 291:29]
        T_11429 <= TLWidthWidget_1_1.io.out[0].c.bits.addr_lo @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11479 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_11481 : UInt, clk
    reg T_11483 : UInt, clk
    reg T_11485 : UInt, clk
    reg T_11487 : UInt, clk
    reg T_11489 : UInt, clk
    reg T_11491 : UInt, clk
    node T_11493 = neq(T_11479, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11494 = and(TLWidthWidget_1_1.io.out[0].d.valid, T_11493) @[Periphery.scala 291:29]
    when T_11494 : @[Periphery.scala 291:29]
      node T_11495 = eq(TLWidthWidget_1_1.io.out[0].d.bits.opcode, T_11481) @[Periphery.scala 291:29]
      node T_11496 = or(T_11495, reset) @[Periphery.scala 291:29]
      node T_11498 = eq(T_11496, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11498 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11499 = eq(TLWidthWidget_1_1.io.out[0].d.bits.param, T_11483) @[Periphery.scala 291:29]
      node T_11500 = or(T_11499, reset) @[Periphery.scala 291:29]
      node T_11502 = eq(T_11500, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11502 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11503 = eq(TLWidthWidget_1_1.io.out[0].d.bits.size, T_11485) @[Periphery.scala 291:29]
      node T_11504 = or(T_11503, reset) @[Periphery.scala 291:29]
      node T_11506 = eq(T_11504, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11506 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11507 = eq(TLWidthWidget_1_1.io.out[0].d.bits.source, T_11487) @[Periphery.scala 291:29]
      node T_11508 = or(T_11507, reset) @[Periphery.scala 291:29]
      node T_11510 = eq(T_11508, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11510 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11511 = eq(TLWidthWidget_1_1.io.out[0].d.bits.sink, T_11489) @[Periphery.scala 291:29]
      node T_11512 = or(T_11511, reset) @[Periphery.scala 291:29]
      node T_11514 = eq(T_11512, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11514 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11515 = eq(TLWidthWidget_1_1.io.out[0].d.bits.addr_lo, T_11491) @[Periphery.scala 291:29]
      node T_11516 = or(T_11515, reset) @[Periphery.scala 291:29]
      node T_11518 = eq(T_11516, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11518 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Periphery.scala:291:29)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    node T_11519 = and(TLWidthWidget_1_1.io.out[0].d.ready, TLWidthWidget_1_1.io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_11519 : @[Periphery.scala 291:29]
      node T_11521 = sub(T_11479, UInt<1>("h01")) @[Periphery.scala 291:29]
      node T_11522 = tail(T_11521, 1) @[Periphery.scala 291:29]
      T_11479 <= T_11522 @[Periphery.scala 291:29]
      node T_11524 = eq(T_11479, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11524 : @[Periphery.scala 291:29]
        node T_11525 = bits(TLWidthWidget_1_1.io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_11527 = leq(TLWidthWidget_1_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Edges.scala 208:88]
        node T_11529 = bits(TLWidthWidget_1_1.io.out[0].d.bits.size, 3, 0) @[OneHot.scala 46:21]
        node T_11530 = dshl(UInt<1>("h01"), T_11529) @[OneHot.scala 46:16]
        node T_11531 = bits(T_11530, 8, 0) @[OneHot.scala 46:41]
        node T_11532 = shr(T_11531, 3) @[Edges.scala 209:50]
        node T_11533 = or(T_11532, T_11527) @[Edges.scala 210:29]
        node T_11535 = mux(T_11525, T_11533, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_11537 = sub(T_11535, UInt<1>("h01")) @[Periphery.scala 291:29]
        node T_11538 = tail(T_11537, 1) @[Periphery.scala 291:29]
        T_11479 <= T_11538 @[Periphery.scala 291:29]
        T_11481 <= TLWidthWidget_1_1.io.out[0].d.bits.opcode @[Periphery.scala 291:29]
        T_11483 <= TLWidthWidget_1_1.io.out[0].d.bits.param @[Periphery.scala 291:29]
        T_11485 <= TLWidthWidget_1_1.io.out[0].d.bits.size @[Periphery.scala 291:29]
        T_11487 <= TLWidthWidget_1_1.io.out[0].d.bits.source @[Periphery.scala 291:29]
        T_11489 <= TLWidthWidget_1_1.io.out[0].d.bits.sink @[Periphery.scala 291:29]
        T_11491 <= TLWidthWidget_1_1.io.out[0].d.bits.addr_lo @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11540 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11540 <= TLWidthWidget_1_1.io.out[0].a.valid
    reg T_11542 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11542 <= TLWidthWidget_1_1.io.out[0].a.ready
    reg T_11543 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}, clk
    T_11543 <- TLWidthWidget_1_1.io.out[0].a.bits
    node T_11551 = cat(TLWidthWidget_1_1.io.out[0].a.bits.addr_hi, TLWidthWidget_1_1.io.out[0].a.bits.mask) @[Periphery.scala 291:29]
    node T_11552 = cat(T_11551, TLWidthWidget_1_1.io.out[0].a.bits.data) @[Periphery.scala 291:29]
    node T_11553 = cat(TLWidthWidget_1_1.io.out[0].a.bits.size, TLWidthWidget_1_1.io.out[0].a.bits.source) @[Periphery.scala 291:29]
    node T_11554 = cat(TLWidthWidget_1_1.io.out[0].a.bits.opcode, TLWidthWidget_1_1.io.out[0].a.bits.param) @[Periphery.scala 291:29]
    node T_11555 = cat(T_11554, T_11553) @[Periphery.scala 291:29]
    node T_11556 = cat(T_11555, T_11552) @[Periphery.scala 291:29]
    node T_11557 = cat(T_11543.addr_hi, T_11543.mask) @[Periphery.scala 291:29]
    node T_11558 = cat(T_11557, T_11543.data) @[Periphery.scala 291:29]
    node T_11559 = cat(T_11543.size, T_11543.source) @[Periphery.scala 291:29]
    node T_11560 = cat(T_11543.opcode, T_11543.param) @[Periphery.scala 291:29]
    node T_11561 = cat(T_11560, T_11559) @[Periphery.scala 291:29]
    node T_11562 = cat(T_11561, T_11558) @[Periphery.scala 291:29]
    node T_11563 = eq(T_11556, T_11562) @[Periphery.scala 291:29]
    node T_11565 = eq(T_11542, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11566 = and(T_11540, T_11565) @[Periphery.scala 291:29]
    when T_11566 : @[Periphery.scala 291:29]
      node T_11567 = or(TLWidthWidget_1_1.io.out[0].a.valid, reset) @[Periphery.scala 291:29]
      node T_11569 = eq(T_11567, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11569 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:29)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11570 = or(T_11563, reset) @[Periphery.scala 291:29]
      node T_11572 = eq(T_11570, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11572 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:29)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11574 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11574 <= TLWidthWidget_1_1.io.out[0].b.valid
    reg T_11576 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11576 <= TLWidthWidget_1_1.io.out[0].b.ready
    reg T_11577 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}, clk
    T_11577 <- TLWidthWidget_1_1.io.out[0].b.bits
    node T_11585 = cat(TLWidthWidget_1_1.io.out[0].b.bits.addr_hi, TLWidthWidget_1_1.io.out[0].b.bits.mask) @[Periphery.scala 291:29]
    node T_11586 = cat(T_11585, TLWidthWidget_1_1.io.out[0].b.bits.data) @[Periphery.scala 291:29]
    node T_11587 = cat(TLWidthWidget_1_1.io.out[0].b.bits.size, TLWidthWidget_1_1.io.out[0].b.bits.source) @[Periphery.scala 291:29]
    node T_11588 = cat(TLWidthWidget_1_1.io.out[0].b.bits.opcode, TLWidthWidget_1_1.io.out[0].b.bits.param) @[Periphery.scala 291:29]
    node T_11589 = cat(T_11588, T_11587) @[Periphery.scala 291:29]
    node T_11590 = cat(T_11589, T_11586) @[Periphery.scala 291:29]
    node T_11591 = cat(T_11577.addr_hi, T_11577.mask) @[Periphery.scala 291:29]
    node T_11592 = cat(T_11591, T_11577.data) @[Periphery.scala 291:29]
    node T_11593 = cat(T_11577.size, T_11577.source) @[Periphery.scala 291:29]
    node T_11594 = cat(T_11577.opcode, T_11577.param) @[Periphery.scala 291:29]
    node T_11595 = cat(T_11594, T_11593) @[Periphery.scala 291:29]
    node T_11596 = cat(T_11595, T_11592) @[Periphery.scala 291:29]
    node T_11597 = eq(T_11590, T_11596) @[Periphery.scala 291:29]
    node T_11599 = eq(T_11576, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11600 = and(T_11574, T_11599) @[Periphery.scala 291:29]
    when T_11600 : @[Periphery.scala 291:29]
      node T_11601 = or(TLWidthWidget_1_1.io.out[0].b.valid, reset) @[Periphery.scala 291:29]
      node T_11603 = eq(T_11601, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11603 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:29)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11604 = or(T_11597, reset) @[Periphery.scala 291:29]
      node T_11606 = eq(T_11604, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11606 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:29)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11608 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11608 <= TLWidthWidget_1_1.io.out[0].c.valid
    reg T_11610 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11610 <= TLWidthWidget_1_1.io.out[0].c.ready
    reg T_11611 : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<2>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}, clk
    T_11611 <- TLWidthWidget_1_1.io.out[0].c.bits
    node T_11620 = cat(TLWidthWidget_1_1.io.out[0].c.bits.data, TLWidthWidget_1_1.io.out[0].c.bits.error) @[Periphery.scala 291:29]
    node T_11621 = cat(TLWidthWidget_1_1.io.out[0].c.bits.addr_hi, TLWidthWidget_1_1.io.out[0].c.bits.addr_lo) @[Periphery.scala 291:29]
    node T_11622 = cat(T_11621, T_11620) @[Periphery.scala 291:29]
    node T_11623 = cat(TLWidthWidget_1_1.io.out[0].c.bits.size, TLWidthWidget_1_1.io.out[0].c.bits.source) @[Periphery.scala 291:29]
    node T_11624 = cat(TLWidthWidget_1_1.io.out[0].c.bits.opcode, TLWidthWidget_1_1.io.out[0].c.bits.param) @[Periphery.scala 291:29]
    node T_11625 = cat(T_11624, T_11623) @[Periphery.scala 291:29]
    node T_11626 = cat(T_11625, T_11622) @[Periphery.scala 291:29]
    node T_11627 = cat(T_11611.data, T_11611.error) @[Periphery.scala 291:29]
    node T_11628 = cat(T_11611.addr_hi, T_11611.addr_lo) @[Periphery.scala 291:29]
    node T_11629 = cat(T_11628, T_11627) @[Periphery.scala 291:29]
    node T_11630 = cat(T_11611.size, T_11611.source) @[Periphery.scala 291:29]
    node T_11631 = cat(T_11611.opcode, T_11611.param) @[Periphery.scala 291:29]
    node T_11632 = cat(T_11631, T_11630) @[Periphery.scala 291:29]
    node T_11633 = cat(T_11632, T_11629) @[Periphery.scala 291:29]
    node T_11634 = eq(T_11626, T_11633) @[Periphery.scala 291:29]
    node T_11636 = eq(T_11610, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11637 = and(T_11608, T_11636) @[Periphery.scala 291:29]
    when T_11637 : @[Periphery.scala 291:29]
      node T_11638 = or(TLWidthWidget_1_1.io.out[0].c.valid, reset) @[Periphery.scala 291:29]
      node T_11640 = eq(T_11638, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11640 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:29)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11641 = or(T_11634, reset) @[Periphery.scala 291:29]
      node T_11643 = eq(T_11641, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11643 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:29)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11645 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11645 <= TLWidthWidget_1_1.io.out[0].d.valid
    reg T_11647 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11647 <= TLWidthWidget_1_1.io.out[0].d.ready
    reg T_11648 : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<2>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}, clk
    T_11648 <- TLWidthWidget_1_1.io.out[0].d.bits
    node T_11657 = cat(TLWidthWidget_1_1.io.out[0].d.bits.data, TLWidthWidget_1_1.io.out[0].d.bits.error) @[Periphery.scala 291:29]
    node T_11658 = cat(TLWidthWidget_1_1.io.out[0].d.bits.sink, TLWidthWidget_1_1.io.out[0].d.bits.addr_lo) @[Periphery.scala 291:29]
    node T_11659 = cat(T_11658, T_11657) @[Periphery.scala 291:29]
    node T_11660 = cat(TLWidthWidget_1_1.io.out[0].d.bits.size, TLWidthWidget_1_1.io.out[0].d.bits.source) @[Periphery.scala 291:29]
    node T_11661 = cat(TLWidthWidget_1_1.io.out[0].d.bits.opcode, TLWidthWidget_1_1.io.out[0].d.bits.param) @[Periphery.scala 291:29]
    node T_11662 = cat(T_11661, T_11660) @[Periphery.scala 291:29]
    node T_11663 = cat(T_11662, T_11659) @[Periphery.scala 291:29]
    node T_11664 = cat(T_11648.data, T_11648.error) @[Periphery.scala 291:29]
    node T_11665 = cat(T_11648.sink, T_11648.addr_lo) @[Periphery.scala 291:29]
    node T_11666 = cat(T_11665, T_11664) @[Periphery.scala 291:29]
    node T_11667 = cat(T_11648.size, T_11648.source) @[Periphery.scala 291:29]
    node T_11668 = cat(T_11648.opcode, T_11648.param) @[Periphery.scala 291:29]
    node T_11669 = cat(T_11668, T_11667) @[Periphery.scala 291:29]
    node T_11670 = cat(T_11669, T_11666) @[Periphery.scala 291:29]
    node T_11671 = eq(T_11663, T_11670) @[Periphery.scala 291:29]
    node T_11673 = eq(T_11647, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11674 = and(T_11645, T_11673) @[Periphery.scala 291:29]
    when T_11674 : @[Periphery.scala 291:29]
      node T_11675 = or(TLWidthWidget_1_1.io.out[0].d.valid, reset) @[Periphery.scala 291:29]
      node T_11677 = eq(T_11675, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11677 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:29)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11678 = or(T_11671, reset) @[Periphery.scala 291:29]
      node T_11680 = eq(T_11678, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11680 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:29)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    reg T_11682 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11682 <= TLWidthWidget_1_1.io.out[0].e.valid
    reg T_11684 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_11684 <= TLWidthWidget_1_1.io.out[0].e.ready
    reg T_11685 : {sink : UInt<1>}, clk
    T_11685 <- TLWidthWidget_1_1.io.out[0].e.bits
    node T_11687 = eq(TLWidthWidget_1_1.io.out[0].e.bits.sink, T_11685.sink) @[Periphery.scala 291:29]
    node T_11689 = eq(T_11684, UInt<1>("h00")) @[Periphery.scala 291:29]
    node T_11690 = and(T_11682, T_11689) @[Periphery.scala 291:29]
    when T_11690 : @[Periphery.scala 291:29]
      node T_11691 = or(TLWidthWidget_1_1.io.out[0].e.valid, reset) @[Periphery.scala 291:29]
      node T_11693 = eq(T_11691, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11693 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:29)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      node T_11694 = or(T_11687, reset) @[Periphery.scala 291:29]
      node T_11696 = eq(T_11694, UInt<1>("h00")) @[Periphery.scala 291:29]
      when T_11696 : @[Periphery.scala 291:29]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:29)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:29]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:29]
        skip @[Periphery.scala 291:29]
      skip @[Periphery.scala 291:29]
    TLFragmenter_1_1.io.in[0] <- TLWidthWidget_1_1.io.out[0] @[Periphery.scala 291:29]
    when TLFragmenter_1_1.io.out[0].a.valid : @[Periphery.scala 291:14]
      node T_11697 = leq(TLFragmenter_1_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Bundles.scala 53:24]
      node T_11698 = or(T_11697, reset) @[Periphery.scala 291:14]
      node T_11700 = eq(T_11698, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_11700 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at Periphery.scala:291:14)\n    at Monitor.scala:19 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_11702 = xor(UInt<1>("h00"), TLFragmenter_1_1.io.out[0].a.bits.source) @[Parameters.scala 37:23]
      node T_11703 = not(T_11702) @[Parameters.scala 37:9]
      node T_11705 = or(T_11703, UInt<7>("h07f")) @[Parameters.scala 37:28]
      node T_11706 = not(T_11705) @[Parameters.scala 37:7]
      node T_11708 = eq(T_11706, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_11714 : UInt<1>[1] @[Parameters.scala 326:27]
      T_11714 is invalid @[Parameters.scala 326:27]
      T_11714[0] <= T_11708 @[Parameters.scala 326:27]
      node T_11717 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_11718 = dshl(T_11717, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_11719 = bits(T_11718, 2, 0) @[package.scala 11:76]
      node T_11720 = not(T_11719) @[package.scala 11:40]
      node T_11721 = shr(T_11720, 3) @[Edges.scala 15:47]
      node T_11722 = and(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_11721) @[Edges.scala 16:16]
      node T_11724 = eq(T_11722, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_11726 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_11727 = dshl(T_11726, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
      node T_11728 = bits(T_11727, 2, 0) @[package.scala 11:76]
      node T_11729 = not(T_11728) @[package.scala 11:40]
      node T_11730 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_11731 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_11733 = neq(T_11731, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_11735 = eq(T_11733, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_11736 = or(T_11730, T_11731) @[Edges.scala 63:32]
      node T_11737 = bits(T_11736, 3, 2) @[Edges.scala 61:22]
      node T_11738 = bits(T_11736, 1, 0) @[Edges.scala 62:22]
      node T_11740 = neq(T_11738, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_11742 = eq(T_11740, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_11743 = or(T_11737, T_11738) @[Edges.scala 63:32]
      node T_11744 = bits(T_11743, 0, 0) @[Edges.scala 58:14]
      node T_11745 = not(T_11744) @[Edges.scala 58:9]
      node T_11746 = cat(T_11742, T_11745) @[Cat.scala 20:58]
      node T_11747 = cat(T_11735, T_11746) @[Cat.scala 20:58]
      node T_11748 = not(T_11729) @[Edges.scala 66:39]
      node T_11749 = and(T_11747, T_11748) @[Edges.scala 66:37]
      node T_11751 = bits(TLFragmenter_1_1.io.out[0].a.bits.size, 1, 0) @[OneHot.scala 46:21]
      node T_11752 = dshl(UInt<1>("h01"), T_11751) @[OneHot.scala 46:16]
      node T_11753 = bits(T_11752, 2, 0) @[OneHot.scala 46:41]
      node T_11755 = geq(TLFragmenter_1_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
      node T_11757 = bits(T_11753, 2, 2) @[Edges.scala 36:26]
      node T_11758 = bits(T_11749, 2, 2) @[Edges.scala 37:26]
      node T_11760 = eq(T_11758, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_11761 = and(UInt<1>("h01"), T_11760) @[Edges.scala 41:27]
      node T_11762 = and(T_11757, T_11761) @[Edges.scala 42:38]
      node T_11763 = or(T_11755, T_11762) @[Edges.scala 42:29]
      node T_11764 = and(UInt<1>("h01"), T_11758) @[Edges.scala 41:27]
      node T_11765 = and(T_11757, T_11764) @[Edges.scala 42:38]
      node T_11766 = or(T_11755, T_11765) @[Edges.scala 42:29]
      node T_11767 = bits(T_11753, 1, 1) @[Edges.scala 36:26]
      node T_11768 = bits(T_11749, 1, 1) @[Edges.scala 37:26]
      node T_11770 = eq(T_11768, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_11771 = and(T_11761, T_11770) @[Edges.scala 41:27]
      node T_11772 = and(T_11767, T_11771) @[Edges.scala 42:38]
      node T_11773 = or(T_11763, T_11772) @[Edges.scala 42:29]
      node T_11774 = and(T_11761, T_11768) @[Edges.scala 41:27]
      node T_11775 = and(T_11767, T_11774) @[Edges.scala 42:38]
      node T_11776 = or(T_11763, T_11775) @[Edges.scala 42:29]
      node T_11777 = and(T_11764, T_11770) @[Edges.scala 41:27]
      node T_11778 = and(T_11767, T_11777) @[Edges.scala 42:38]
      node T_11779 = or(T_11766, T_11778) @[Edges.scala 42:29]
      node T_11780 = and(T_11764, T_11768) @[Edges.scala 41:27]
      node T_11781 = and(T_11767, T_11780) @[Edges.scala 42:38]
      node T_11782 = or(T_11766, T_11781) @[Edges.scala 42:29]
      node T_11783 = bits(T_11753, 0, 0) @[Edges.scala 36:26]
      node T_11784 = bits(T_11749, 0, 0) @[Edges.scala 37:26]
      node T_11786 = eq(T_11784, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_11787 = and(T_11771, T_11786) @[Edges.scala 41:27]
      node T_11788 = and(T_11783, T_11787) @[Edges.scala 42:38]
      node T_11789 = or(T_11773, T_11788) @[Edges.scala 42:29]
      node T_11790 = and(T_11771, T_11784) @[Edges.scala 41:27]
      node T_11791 = and(T_11783, T_11790) @[Edges.scala 42:38]
      node T_11792 = or(T_11773, T_11791) @[Edges.scala 42:29]
      node T_11793 = and(T_11774, T_11786) @[Edges.scala 41:27]
      node T_11794 = and(T_11783, T_11793) @[Edges.scala 42:38]
      node T_11795 = or(T_11776, T_11794) @[Edges.scala 42:29]
      node T_11796 = and(T_11774, T_11784) @[Edges.scala 41:27]
      node T_11797 = and(T_11783, T_11796) @[Edges.scala 42:38]
      node T_11798 = or(T_11776, T_11797) @[Edges.scala 42:29]
      node T_11799 = and(T_11777, T_11786) @[Edges.scala 41:27]
      node T_11800 = and(T_11783, T_11799) @[Edges.scala 42:38]
      node T_11801 = or(T_11779, T_11800) @[Edges.scala 42:29]
      node T_11802 = and(T_11777, T_11784) @[Edges.scala 41:27]
      node T_11803 = and(T_11783, T_11802) @[Edges.scala 42:38]
      node T_11804 = or(T_11779, T_11803) @[Edges.scala 42:29]
      node T_11805 = and(T_11780, T_11786) @[Edges.scala 41:27]
      node T_11806 = and(T_11783, T_11805) @[Edges.scala 42:38]
      node T_11807 = or(T_11782, T_11806) @[Edges.scala 42:29]
      node T_11808 = and(T_11780, T_11784) @[Edges.scala 41:27]
      node T_11809 = and(T_11783, T_11808) @[Edges.scala 42:38]
      node T_11810 = or(T_11782, T_11809) @[Edges.scala 42:29]
      node T_11811 = cat(T_11792, T_11789) @[Cat.scala 20:58]
      node T_11812 = cat(T_11798, T_11795) @[Cat.scala 20:58]
      node T_11813 = cat(T_11812, T_11811) @[Cat.scala 20:58]
      node T_11814 = cat(T_11804, T_11801) @[Cat.scala 20:58]
      node T_11815 = cat(T_11810, T_11807) @[Cat.scala 20:58]
      node T_11816 = cat(T_11815, T_11814) @[Cat.scala 20:58]
      node T_11817 = cat(T_11816, T_11813) @[Cat.scala 20:58]
      node T_11818 = eq(TLFragmenter_1_1.io.out[0].a.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:14]
      when T_11818 : @[Periphery.scala 291:14]
        node T_11820 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_11821 = dshl(T_11820, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_11822 = bits(T_11821, 2, 0) @[package.scala 11:76]
        node T_11823 = not(T_11822) @[package.scala 11:40]
        node T_11824 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_11825 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_11827 = neq(T_11825, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_11829 = eq(T_11827, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_11830 = or(T_11824, T_11825) @[Edges.scala 63:32]
        node T_11831 = bits(T_11830, 3, 2) @[Edges.scala 61:22]
        node T_11832 = bits(T_11830, 1, 0) @[Edges.scala 62:22]
        node T_11834 = neq(T_11832, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_11836 = eq(T_11834, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_11837 = or(T_11831, T_11832) @[Edges.scala 63:32]
        node T_11838 = bits(T_11837, 0, 0) @[Edges.scala 58:14]
        node T_11839 = not(T_11838) @[Edges.scala 58:9]
        node T_11840 = cat(T_11836, T_11839) @[Cat.scala 20:58]
        node T_11841 = cat(T_11829, T_11840) @[Cat.scala 20:58]
        node T_11842 = not(T_11823) @[Edges.scala 66:39]
        node T_11843 = and(T_11841, T_11842) @[Edges.scala 66:37]
        node T_11844 = cat(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_11843) @[Cat.scala 20:58]
        node T_11846 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_11848 = eq(T_11846, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11848 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Acquire type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:27 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'A' channel carries Acquire type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11849 = or(T_11714[0], reset) @[Periphery.scala 291:14]
        node T_11851 = eq(T_11849, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11851 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:28 assert (source_ok, \"'A' channel Acquire carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11853 = geq(TLFragmenter_1_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_11854 = or(T_11853, reset) @[Periphery.scala 291:14]
        node T_11856 = eq(T_11854, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11856 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:29 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel Acquire smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11857 = or(T_11724, reset) @[Periphery.scala 291:14]
        node T_11859 = eq(T_11857, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11859 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:30 assert (is_aligned, \"'A' channel Acquire address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11860 = leq(TLFragmenter_1_1.io.out[0].a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node T_11861 = or(T_11860, reset) @[Periphery.scala 291:14]
        node T_11863 = eq(T_11861, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11863 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire carries invalid grow param (connected at Periphery.scala:291:14)\n    at Monitor.scala:31 assert (TLPermissions.isGrow(bundle.param), \"'A' channel Acquire carries invalid grow param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11864 = not(TLFragmenter_1_1.io.out[0].a.bits.mask) @[Periphery.scala 291:14]
        node T_11866 = eq(T_11864, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_11867 = or(T_11866, reset) @[Periphery.scala 291:14]
        node T_11869 = eq(T_11867, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11869 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Acquire contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:32 assert (~bundle.mask === UInt(0), \"'A' channel Acquire contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_11870 = eq(TLFragmenter_1_1.io.out[0].a.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:14]
      when T_11870 : @[Periphery.scala 291:14]
        node T_11872 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_11873 = dshl(T_11872, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_11874 = bits(T_11873, 2, 0) @[package.scala 11:76]
        node T_11875 = not(T_11874) @[package.scala 11:40]
        node T_11876 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_11877 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_11879 = neq(T_11877, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_11881 = eq(T_11879, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_11882 = or(T_11876, T_11877) @[Edges.scala 63:32]
        node T_11883 = bits(T_11882, 3, 2) @[Edges.scala 61:22]
        node T_11884 = bits(T_11882, 1, 0) @[Edges.scala 62:22]
        node T_11886 = neq(T_11884, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_11888 = eq(T_11886, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_11889 = or(T_11883, T_11884) @[Edges.scala 63:32]
        node T_11890 = bits(T_11889, 0, 0) @[Edges.scala 58:14]
        node T_11891 = not(T_11890) @[Edges.scala 58:9]
        node T_11892 = cat(T_11888, T_11891) @[Cat.scala 20:58]
        node T_11893 = cat(T_11881, T_11892) @[Cat.scala 20:58]
        node T_11894 = not(T_11875) @[Edges.scala 66:39]
        node T_11895 = and(T_11893, T_11894) @[Edges.scala 66:37]
        node T_11896 = cat(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_11895) @[Cat.scala 20:58]
        node T_11898 = leq(UInt<1>("h00"), TLFragmenter_1_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_11900 = leq(TLFragmenter_1_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Parameters.scala 61:42]
        node T_11901 = and(T_11898, T_11900) @[Parameters.scala 61:37]
        node T_11902 = or(T_11901, reset) @[Periphery.scala 291:14]
        node T_11904 = eq(T_11902, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11904 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:36 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11905 = or(T_11714[0], reset) @[Periphery.scala 291:14]
        node T_11907 = eq(T_11905, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11907 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:37 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11908 = or(T_11724, reset) @[Periphery.scala 291:14]
        node T_11910 = eq(T_11908, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11910 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:38 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11912 = eq(TLFragmenter_1_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_11913 = or(T_11912, reset) @[Periphery.scala 291:14]
        node T_11915 = eq(T_11913, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11915 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:39 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11916 = eq(TLFragmenter_1_1.io.out[0].a.bits.mask, T_11817) @[Periphery.scala 291:14]
        node T_11917 = or(T_11916, reset) @[Periphery.scala 291:14]
        node T_11919 = eq(T_11917, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11919 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:40 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_11920 = eq(TLFragmenter_1_1.io.out[0].a.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_11920 : @[Periphery.scala 291:14]
        node T_11922 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_11923 = dshl(T_11922, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_11924 = bits(T_11923, 2, 0) @[package.scala 11:76]
        node T_11925 = not(T_11924) @[package.scala 11:40]
        node T_11926 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_11927 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_11929 = neq(T_11927, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_11931 = eq(T_11929, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_11932 = or(T_11926, T_11927) @[Edges.scala 63:32]
        node T_11933 = bits(T_11932, 3, 2) @[Edges.scala 61:22]
        node T_11934 = bits(T_11932, 1, 0) @[Edges.scala 62:22]
        node T_11936 = neq(T_11934, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_11938 = eq(T_11936, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_11939 = or(T_11933, T_11934) @[Edges.scala 63:32]
        node T_11940 = bits(T_11939, 0, 0) @[Edges.scala 58:14]
        node T_11941 = not(T_11940) @[Edges.scala 58:9]
        node T_11942 = cat(T_11938, T_11941) @[Cat.scala 20:58]
        node T_11943 = cat(T_11931, T_11942) @[Cat.scala 20:58]
        node T_11944 = not(T_11925) @[Edges.scala 66:39]
        node T_11945 = and(T_11943, T_11944) @[Edges.scala 66:37]
        node T_11946 = cat(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_11945) @[Cat.scala 20:58]
        node T_11948 = leq(UInt<1>("h00"), TLFragmenter_1_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_11950 = leq(TLFragmenter_1_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Parameters.scala 61:42]
        node T_11951 = and(T_11948, T_11950) @[Parameters.scala 61:37]
        node T_11952 = or(T_11951, reset) @[Periphery.scala 291:14]
        node T_11954 = eq(T_11952, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11954 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:44 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11955 = or(T_11714[0], reset) @[Periphery.scala 291:14]
        node T_11957 = eq(T_11955, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11957 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:45 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11958 = or(T_11724, reset) @[Periphery.scala 291:14]
        node T_11960 = eq(T_11958, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11960 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:46 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11962 = eq(TLFragmenter_1_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_11963 = or(T_11962, reset) @[Periphery.scala 291:14]
        node T_11965 = eq(T_11963, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11965 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:47 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_11966 = eq(TLFragmenter_1_1.io.out[0].a.bits.mask, T_11817) @[Periphery.scala 291:14]
        node T_11967 = or(T_11966, reset) @[Periphery.scala 291:14]
        node T_11969 = eq(T_11967, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_11969 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:48 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_11970 = eq(TLFragmenter_1_1.io.out[0].a.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:14]
      when T_11970 : @[Periphery.scala 291:14]
        node T_11972 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_11973 = dshl(T_11972, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_11974 = bits(T_11973, 2, 0) @[package.scala 11:76]
        node T_11975 = not(T_11974) @[package.scala 11:40]
        node T_11976 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_11977 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_11979 = neq(T_11977, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_11981 = eq(T_11979, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_11982 = or(T_11976, T_11977) @[Edges.scala 63:32]
        node T_11983 = bits(T_11982, 3, 2) @[Edges.scala 61:22]
        node T_11984 = bits(T_11982, 1, 0) @[Edges.scala 62:22]
        node T_11986 = neq(T_11984, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_11988 = eq(T_11986, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_11989 = or(T_11983, T_11984) @[Edges.scala 63:32]
        node T_11990 = bits(T_11989, 0, 0) @[Edges.scala 58:14]
        node T_11991 = not(T_11990) @[Edges.scala 58:9]
        node T_11992 = cat(T_11988, T_11991) @[Cat.scala 20:58]
        node T_11993 = cat(T_11981, T_11992) @[Cat.scala 20:58]
        node T_11994 = not(T_11975) @[Edges.scala 66:39]
        node T_11995 = and(T_11993, T_11994) @[Edges.scala 66:37]
        node T_11996 = cat(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_11995) @[Cat.scala 20:58]
        node T_11998 = leq(UInt<1>("h00"), TLFragmenter_1_1.io.out[0].a.bits.size) @[Parameters.scala 61:32]
        node T_12000 = leq(TLFragmenter_1_1.io.out[0].a.bits.size, UInt<2>("h03")) @[Parameters.scala 61:42]
        node T_12001 = and(T_11998, T_12000) @[Parameters.scala 61:37]
        node T_12002 = or(T_12001, reset) @[Periphery.scala 291:14]
        node T_12004 = eq(T_12002, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12004 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:52 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12005 = or(T_11714[0], reset) @[Periphery.scala 291:14]
        node T_12007 = eq(T_12005, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12007 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12008 = or(T_11724, reset) @[Periphery.scala 291:14]
        node T_12010 = eq(T_12008, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12010 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:54 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12012 = eq(TLFragmenter_1_1.io.out[0].a.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12013 = or(T_12012, reset) @[Periphery.scala 291:14]
        node T_12015 = eq(T_12013, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12015 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:55 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12016 = not(T_11817) @[Periphery.scala 291:14]
        node T_12017 = and(TLFragmenter_1_1.io.out[0].a.bits.mask, T_12016) @[Periphery.scala 291:14]
        node T_12019 = eq(T_12017, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12020 = or(T_12019, reset) @[Periphery.scala 291:14]
        node T_12022 = eq(T_12020, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12022 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:56 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12023 = eq(TLFragmenter_1_1.io.out[0].a.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:14]
      when T_12023 : @[Periphery.scala 291:14]
        node T_12025 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_12026 = dshl(T_12025, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_12027 = bits(T_12026, 2, 0) @[package.scala 11:76]
        node T_12028 = not(T_12027) @[package.scala 11:40]
        node T_12029 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_12030 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_12032 = neq(T_12030, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_12034 = eq(T_12032, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_12035 = or(T_12029, T_12030) @[Edges.scala 63:32]
        node T_12036 = bits(T_12035, 3, 2) @[Edges.scala 61:22]
        node T_12037 = bits(T_12035, 1, 0) @[Edges.scala 62:22]
        node T_12039 = neq(T_12037, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_12041 = eq(T_12039, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_12042 = or(T_12036, T_12037) @[Edges.scala 63:32]
        node T_12043 = bits(T_12042, 0, 0) @[Edges.scala 58:14]
        node T_12044 = not(T_12043) @[Edges.scala 58:9]
        node T_12045 = cat(T_12041, T_12044) @[Cat.scala 20:58]
        node T_12046 = cat(T_12034, T_12045) @[Cat.scala 20:58]
        node T_12047 = not(T_12028) @[Edges.scala 66:39]
        node T_12048 = and(T_12046, T_12047) @[Edges.scala 66:37]
        node T_12049 = cat(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_12048) @[Cat.scala 20:58]
        node T_12051 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12053 = eq(T_12051, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12053 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:60 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12054 = or(T_11714[0], reset) @[Periphery.scala 291:14]
        node T_12056 = eq(T_12054, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12056 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:61 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12057 = or(T_11724, reset) @[Periphery.scala 291:14]
        node T_12059 = eq(T_12057, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12059 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:62 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12060 = leq(TLFragmenter_1_1.io.out[0].a.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_12061 = or(T_12060, reset) @[Periphery.scala 291:14]
        node T_12063 = eq(T_12061, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12063 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:291:14)\n    at Monitor.scala:63 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12064 = eq(TLFragmenter_1_1.io.out[0].a.bits.mask, T_11817) @[Periphery.scala 291:14]
        node T_12065 = or(T_12064, reset) @[Periphery.scala 291:14]
        node T_12067 = eq(T_12065, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12067 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:64 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12068 = eq(TLFragmenter_1_1.io.out[0].a.bits.opcode, UInt<2>("h03")) @[Periphery.scala 291:14]
      when T_12068 : @[Periphery.scala 291:14]
        node T_12070 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_12071 = dshl(T_12070, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_12072 = bits(T_12071, 2, 0) @[package.scala 11:76]
        node T_12073 = not(T_12072) @[package.scala 11:40]
        node T_12074 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_12075 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_12077 = neq(T_12075, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_12079 = eq(T_12077, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_12080 = or(T_12074, T_12075) @[Edges.scala 63:32]
        node T_12081 = bits(T_12080, 3, 2) @[Edges.scala 61:22]
        node T_12082 = bits(T_12080, 1, 0) @[Edges.scala 62:22]
        node T_12084 = neq(T_12082, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_12086 = eq(T_12084, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_12087 = or(T_12081, T_12082) @[Edges.scala 63:32]
        node T_12088 = bits(T_12087, 0, 0) @[Edges.scala 58:14]
        node T_12089 = not(T_12088) @[Edges.scala 58:9]
        node T_12090 = cat(T_12086, T_12089) @[Cat.scala 20:58]
        node T_12091 = cat(T_12079, T_12090) @[Cat.scala 20:58]
        node T_12092 = not(T_12073) @[Edges.scala 66:39]
        node T_12093 = and(T_12091, T_12092) @[Edges.scala 66:37]
        node T_12094 = cat(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_12093) @[Cat.scala 20:58]
        node T_12096 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12098 = eq(T_12096, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12098 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:68 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12099 = or(T_11714[0], reset) @[Periphery.scala 291:14]
        node T_12101 = eq(T_12099, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12101 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:69 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12102 = or(T_11724, reset) @[Periphery.scala 291:14]
        node T_12104 = eq(T_12102, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12104 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:70 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12105 = leq(TLFragmenter_1_1.io.out[0].a.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_12106 = or(T_12105, reset) @[Periphery.scala 291:14]
        node T_12108 = eq(T_12106, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12108 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at Periphery.scala:291:14)\n    at Monitor.scala:71 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12109 = eq(TLFragmenter_1_1.io.out[0].a.bits.mask, T_11817) @[Periphery.scala 291:14]
        node T_12110 = or(T_12109, reset) @[Periphery.scala 291:14]
        node T_12112 = eq(T_12110, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12112 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:72 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12113 = eq(TLFragmenter_1_1.io.out[0].a.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:14]
      when T_12113 : @[Periphery.scala 291:14]
        node T_12115 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
        node T_12116 = dshl(T_12115, TLFragmenter_1_1.io.out[0].a.bits.size) @[package.scala 11:71]
        node T_12117 = bits(T_12116, 2, 0) @[package.scala 11:76]
        node T_12118 = not(T_12117) @[package.scala 11:40]
        node T_12119 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 7, 4) @[Edges.scala 61:22]
        node T_12120 = bits(TLFragmenter_1_1.io.out[0].a.bits.mask, 3, 0) @[Edges.scala 62:22]
        node T_12122 = neq(T_12120, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_12124 = eq(T_12122, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_12125 = or(T_12119, T_12120) @[Edges.scala 63:32]
        node T_12126 = bits(T_12125, 3, 2) @[Edges.scala 61:22]
        node T_12127 = bits(T_12125, 1, 0) @[Edges.scala 62:22]
        node T_12129 = neq(T_12127, UInt<1>("h00")) @[Edges.scala 63:17]
        node T_12131 = eq(T_12129, UInt<1>("h00")) @[Edges.scala 63:13]
        node T_12132 = or(T_12126, T_12127) @[Edges.scala 63:32]
        node T_12133 = bits(T_12132, 0, 0) @[Edges.scala 58:14]
        node T_12134 = not(T_12133) @[Edges.scala 58:9]
        node T_12135 = cat(T_12131, T_12134) @[Cat.scala 20:58]
        node T_12136 = cat(T_12124, T_12135) @[Cat.scala 20:58]
        node T_12137 = not(T_12118) @[Edges.scala 66:39]
        node T_12138 = and(T_12136, T_12137) @[Edges.scala 66:37]
        node T_12139 = cat(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_12138) @[Cat.scala 20:58]
        node T_12141 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12143 = eq(T_12141, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12143 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:76 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12144 = or(T_11714[0], reset) @[Periphery.scala 291:14]
        node T_12146 = eq(T_12144, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12146 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:77 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12147 = or(T_11724, reset) @[Periphery.scala 291:14]
        node T_12149 = eq(T_12147, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12149 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:78 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12150 = eq(TLFragmenter_1_1.io.out[0].a.bits.mask, T_11817) @[Periphery.scala 291:14]
        node T_12151 = or(T_12150, reset) @[Periphery.scala 291:14]
        node T_12153 = eq(T_12151, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12153 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:79 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    when TLFragmenter_1_1.io.out[0].b.valid : @[Periphery.scala 291:14]
      node T_12154 = leq(TLFragmenter_1_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Bundles.scala 54:24]
      node T_12155 = or(T_12154, reset) @[Periphery.scala 291:14]
      node T_12157 = eq(T_12155, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12157 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel has invalid opcode (connected at Periphery.scala:291:14)\n    at Monitor.scala:84 assert (TLMessages.isB(bundle.opcode), \"'B' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12159 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_12160 = dshl(T_12159, TLFragmenter_1_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_12161 = bits(T_12160, 2, 0) @[package.scala 11:76]
      node T_12162 = not(T_12161) @[package.scala 11:40]
      node T_12163 = bits(TLFragmenter_1_1.io.out[0].b.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_12164 = bits(TLFragmenter_1_1.io.out[0].b.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_12166 = neq(T_12164, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_12168 = eq(T_12166, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_12169 = or(T_12163, T_12164) @[Edges.scala 63:32]
      node T_12170 = bits(T_12169, 3, 2) @[Edges.scala 61:22]
      node T_12171 = bits(T_12169, 1, 0) @[Edges.scala 62:22]
      node T_12173 = neq(T_12171, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_12175 = eq(T_12173, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_12176 = or(T_12170, T_12171) @[Edges.scala 63:32]
      node T_12177 = bits(T_12176, 0, 0) @[Edges.scala 58:14]
      node T_12178 = not(T_12177) @[Edges.scala 58:9]
      node T_12179 = cat(T_12175, T_12178) @[Cat.scala 20:58]
      node T_12180 = cat(T_12168, T_12179) @[Cat.scala 20:58]
      node T_12181 = not(T_12162) @[Edges.scala 66:39]
      node T_12182 = and(T_12180, T_12181) @[Edges.scala 66:37]
      node T_12183 = cat(TLFragmenter_1_1.io.out[0].b.bits.addr_hi, T_12182) @[Cat.scala 20:58]
      node T_12185 = xor(T_12183, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_12186 = cvt(T_12185) @[Parameters.scala 89:49]
      node T_12188 = and(T_12186, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_12189 = asSInt(T_12188) @[Parameters.scala 89:52]
      node T_12191 = eq(T_12189, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_12197 : UInt<1>[1] @[Parameters.scala 227:36]
      T_12197 is invalid @[Parameters.scala 227:36]
      T_12197[0] <= T_12191 @[Parameters.scala 227:36]
      node T_12200 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_12201 = dshl(T_12200, TLFragmenter_1_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_12202 = bits(T_12201, 2, 0) @[package.scala 11:76]
      node T_12203 = not(T_12202) @[package.scala 11:40]
      node T_12204 = shr(T_12203, 3) @[Edges.scala 15:47]
      node T_12205 = and(TLFragmenter_1_1.io.out[0].b.bits.addr_hi, T_12204) @[Edges.scala 16:16]
      node T_12207 = eq(T_12205, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_12209 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_12210 = dshl(T_12209, TLFragmenter_1_1.io.out[0].b.bits.size) @[package.scala 11:71]
      node T_12211 = bits(T_12210, 2, 0) @[package.scala 11:76]
      node T_12212 = not(T_12211) @[package.scala 11:40]
      node T_12213 = bits(TLFragmenter_1_1.io.out[0].b.bits.mask, 7, 4) @[Edges.scala 61:22]
      node T_12214 = bits(TLFragmenter_1_1.io.out[0].b.bits.mask, 3, 0) @[Edges.scala 62:22]
      node T_12216 = neq(T_12214, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_12218 = eq(T_12216, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_12219 = or(T_12213, T_12214) @[Edges.scala 63:32]
      node T_12220 = bits(T_12219, 3, 2) @[Edges.scala 61:22]
      node T_12221 = bits(T_12219, 1, 0) @[Edges.scala 62:22]
      node T_12223 = neq(T_12221, UInt<1>("h00")) @[Edges.scala 63:17]
      node T_12225 = eq(T_12223, UInt<1>("h00")) @[Edges.scala 63:13]
      node T_12226 = or(T_12220, T_12221) @[Edges.scala 63:32]
      node T_12227 = bits(T_12226, 0, 0) @[Edges.scala 58:14]
      node T_12228 = not(T_12227) @[Edges.scala 58:9]
      node T_12229 = cat(T_12225, T_12228) @[Cat.scala 20:58]
      node T_12230 = cat(T_12218, T_12229) @[Cat.scala 20:58]
      node T_12231 = not(T_12212) @[Edges.scala 66:39]
      node T_12232 = and(T_12230, T_12231) @[Edges.scala 66:37]
      node T_12234 = bits(TLFragmenter_1_1.io.out[0].b.bits.size, 1, 0) @[OneHot.scala 46:21]
      node T_12235 = dshl(UInt<1>("h01"), T_12234) @[OneHot.scala 46:16]
      node T_12236 = bits(T_12235, 2, 0) @[OneHot.scala 46:41]
      node T_12238 = geq(TLFragmenter_1_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Edges.scala 33:21]
      node T_12240 = bits(T_12236, 2, 2) @[Edges.scala 36:26]
      node T_12241 = bits(T_12232, 2, 2) @[Edges.scala 37:26]
      node T_12243 = eq(T_12241, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_12244 = and(UInt<1>("h01"), T_12243) @[Edges.scala 41:27]
      node T_12245 = and(T_12240, T_12244) @[Edges.scala 42:38]
      node T_12246 = or(T_12238, T_12245) @[Edges.scala 42:29]
      node T_12247 = and(UInt<1>("h01"), T_12241) @[Edges.scala 41:27]
      node T_12248 = and(T_12240, T_12247) @[Edges.scala 42:38]
      node T_12249 = or(T_12238, T_12248) @[Edges.scala 42:29]
      node T_12250 = bits(T_12236, 1, 1) @[Edges.scala 36:26]
      node T_12251 = bits(T_12232, 1, 1) @[Edges.scala 37:26]
      node T_12253 = eq(T_12251, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_12254 = and(T_12244, T_12253) @[Edges.scala 41:27]
      node T_12255 = and(T_12250, T_12254) @[Edges.scala 42:38]
      node T_12256 = or(T_12246, T_12255) @[Edges.scala 42:29]
      node T_12257 = and(T_12244, T_12251) @[Edges.scala 41:27]
      node T_12258 = and(T_12250, T_12257) @[Edges.scala 42:38]
      node T_12259 = or(T_12246, T_12258) @[Edges.scala 42:29]
      node T_12260 = and(T_12247, T_12253) @[Edges.scala 41:27]
      node T_12261 = and(T_12250, T_12260) @[Edges.scala 42:38]
      node T_12262 = or(T_12249, T_12261) @[Edges.scala 42:29]
      node T_12263 = and(T_12247, T_12251) @[Edges.scala 41:27]
      node T_12264 = and(T_12250, T_12263) @[Edges.scala 42:38]
      node T_12265 = or(T_12249, T_12264) @[Edges.scala 42:29]
      node T_12266 = bits(T_12236, 0, 0) @[Edges.scala 36:26]
      node T_12267 = bits(T_12232, 0, 0) @[Edges.scala 37:26]
      node T_12269 = eq(T_12267, UInt<1>("h00")) @[Edges.scala 38:20]
      node T_12270 = and(T_12254, T_12269) @[Edges.scala 41:27]
      node T_12271 = and(T_12266, T_12270) @[Edges.scala 42:38]
      node T_12272 = or(T_12256, T_12271) @[Edges.scala 42:29]
      node T_12273 = and(T_12254, T_12267) @[Edges.scala 41:27]
      node T_12274 = and(T_12266, T_12273) @[Edges.scala 42:38]
      node T_12275 = or(T_12256, T_12274) @[Edges.scala 42:29]
      node T_12276 = and(T_12257, T_12269) @[Edges.scala 41:27]
      node T_12277 = and(T_12266, T_12276) @[Edges.scala 42:38]
      node T_12278 = or(T_12259, T_12277) @[Edges.scala 42:29]
      node T_12279 = and(T_12257, T_12267) @[Edges.scala 41:27]
      node T_12280 = and(T_12266, T_12279) @[Edges.scala 42:38]
      node T_12281 = or(T_12259, T_12280) @[Edges.scala 42:29]
      node T_12282 = and(T_12260, T_12269) @[Edges.scala 41:27]
      node T_12283 = and(T_12266, T_12282) @[Edges.scala 42:38]
      node T_12284 = or(T_12262, T_12283) @[Edges.scala 42:29]
      node T_12285 = and(T_12260, T_12267) @[Edges.scala 41:27]
      node T_12286 = and(T_12266, T_12285) @[Edges.scala 42:38]
      node T_12287 = or(T_12262, T_12286) @[Edges.scala 42:29]
      node T_12288 = and(T_12263, T_12269) @[Edges.scala 41:27]
      node T_12289 = and(T_12266, T_12288) @[Edges.scala 42:38]
      node T_12290 = or(T_12265, T_12289) @[Edges.scala 42:29]
      node T_12291 = and(T_12263, T_12267) @[Edges.scala 41:27]
      node T_12292 = and(T_12266, T_12291) @[Edges.scala 42:38]
      node T_12293 = or(T_12265, T_12292) @[Edges.scala 42:29]
      node T_12294 = cat(T_12275, T_12272) @[Cat.scala 20:58]
      node T_12295 = cat(T_12281, T_12278) @[Cat.scala 20:58]
      node T_12296 = cat(T_12295, T_12294) @[Cat.scala 20:58]
      node T_12297 = cat(T_12287, T_12284) @[Cat.scala 20:58]
      node T_12298 = cat(T_12293, T_12290) @[Cat.scala 20:58]
      node T_12299 = cat(T_12298, T_12297) @[Cat.scala 20:58]
      node T_12300 = cat(T_12299, T_12296) @[Cat.scala 20:58]
      node T_12301 = eq(TLFragmenter_1_1.io.out[0].b.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:14]
      when T_12301 : @[Periphery.scala 291:14]
        node T_12303 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12305 = eq(T_12303, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12305 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Probe type unsupported by client (connected at Periphery.scala:291:14)\n    at Monitor.scala:92 assert (edge.client.supportsProbe(bundle.source, bundle.size), \"'B' channel carries Probe type unsupported by client\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12306 = or(T_12197[0], reset) @[Periphery.scala 291:14]
        node T_12308 = eq(T_12306, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12308 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:93 assert (address_ok, \"'B' channel Probe carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12310 = geq(TLFragmenter_1_1.io.out[0].b.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_12311 = or(T_12310, reset) @[Periphery.scala 291:14]
        node T_12313 = eq(T_12311, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12313 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:94 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'B' channel Probe smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12314 = or(T_12207, reset) @[Periphery.scala 291:14]
        node T_12316 = eq(T_12314, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12316 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:95 assert (is_aligned, \"'B' channel Probe address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12317 = leq(TLFragmenter_1_1.io.out[0].b.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_12318 = or(T_12317, reset) @[Periphery.scala 291:14]
        node T_12320 = eq(T_12318, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12320 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe carries invalid cap param (connected at Periphery.scala:291:14)\n    at Monitor.scala:96 assert (TLPermissions.isCap(bundle.param), \"'B' channel Probe carries invalid cap param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12321 = not(TLFragmenter_1_1.io.out[0].b.bits.mask) @[Periphery.scala 291:14]
        node T_12323 = eq(T_12321, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12324 = or(T_12323, reset) @[Periphery.scala 291:14]
        node T_12326 = eq(T_12324, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12326 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Probe contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:97 assert (~bundle.mask === UInt(0).asUInt, \"'B' channel Probe contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12327 = eq(TLFragmenter_1_1.io.out[0].b.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:14]
      when T_12327 : @[Periphery.scala 291:14]
        node T_12329 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12331 = eq(T_12329, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12331 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Get type unsupported by client (connected at Periphery.scala:291:14)\n    at Monitor.scala:101 assert (edge.client.supportsGet(bundle.source, bundle.size), \"'B' channel carries Get type unsupported by client\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12332 = or(T_12197[0], reset) @[Periphery.scala 291:14]
        node T_12334 = eq(T_12332, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12334 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:102 assert (address_ok, \"'B' channel Get carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12335 = or(T_12207, reset) @[Periphery.scala 291:14]
        node T_12337 = eq(T_12335, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12337 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:103 assert (is_aligned, \"'B' channel Get address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12339 = eq(TLFragmenter_1_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12340 = or(T_12339, reset) @[Periphery.scala 291:14]
        node T_12342 = eq(T_12340, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12342 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Get carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:104 assert (bundle.param === UInt(0), \"'B' channel Get carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12343 = eq(TLFragmenter_1_1.io.out[0].b.bits.mask, T_12300) @[Periphery.scala 291:14]
        node T_12344 = or(T_12343, reset) @[Periphery.scala 291:14]
        node T_12346 = eq(T_12344, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12346 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12347 = eq(TLFragmenter_1_1.io.out[0].b.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12347 : @[Periphery.scala 291:14]
        node T_12349 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12351 = eq(T_12349, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12351 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutFull type unsupported by client (connected at Periphery.scala:291:14)\n    at Monitor.scala:109 assert (edge.client.supportsPutFull(bundle.source, bundle.size), \"'B' channel carries PutFull type unsupported by client\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12352 = or(T_12197[0], reset) @[Periphery.scala 291:14]
        node T_12354 = eq(T_12352, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12354 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:110 assert (address_ok, \"'B' channel PutFull carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12355 = or(T_12207, reset) @[Periphery.scala 291:14]
        node T_12357 = eq(T_12355, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12357 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:111 assert (is_aligned, \"'B' channel PutFull address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12359 = eq(TLFragmenter_1_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12360 = or(T_12359, reset) @[Periphery.scala 291:14]
        node T_12362 = eq(T_12360, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12362 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:112 assert (bundle.param === UInt(0), \"'B' channel PutFull carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12363 = eq(TLFragmenter_1_1.io.out[0].b.bits.mask, T_12300) @[Periphery.scala 291:14]
        node T_12364 = or(T_12363, reset) @[Periphery.scala 291:14]
        node T_12366 = eq(T_12364, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12366 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutFull contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:113 assert (bundle.mask === mask, \"'B' channel PutFull contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12367 = eq(TLFragmenter_1_1.io.out[0].b.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:14]
      when T_12367 : @[Periphery.scala 291:14]
        node T_12369 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12371 = eq(T_12369, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12371 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries PutPartial type unsupported by client (connected at Periphery.scala:291:14)\n    at Monitor.scala:117 assert (edge.client.supportsPutPartial(bundle.source, bundle.size), \"'B' channel carries PutPartial type unsupported by client\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12372 = or(T_12197[0], reset) @[Periphery.scala 291:14]
        node T_12374 = eq(T_12372, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12374 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:118 assert (address_ok, \"'B' channel PutPartial carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12375 = or(T_12207, reset) @[Periphery.scala 291:14]
        node T_12377 = eq(T_12375, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12377 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:119 assert (is_aligned, \"'B' channel PutPartial address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12379 = eq(TLFragmenter_1_1.io.out[0].b.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12380 = or(T_12379, reset) @[Periphery.scala 291:14]
        node T_12382 = eq(T_12380, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12382 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:120 assert (bundle.param === UInt(0), \"'B' channel PutPartial carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12383 = not(T_12300) @[Periphery.scala 291:14]
        node T_12384 = and(TLFragmenter_1_1.io.out[0].b.bits.mask, T_12383) @[Periphery.scala 291:14]
        node T_12386 = eq(T_12384, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12387 = or(T_12386, reset) @[Periphery.scala 291:14]
        node T_12389 = eq(T_12387, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12389 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel PutPartial contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:121 assert ((bundle.mask & ~mask) === UInt(0), \"'B' channel PutPartial contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12390 = eq(TLFragmenter_1_1.io.out[0].b.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:14]
      when T_12390 : @[Periphery.scala 291:14]
        node T_12392 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12394 = eq(T_12392, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12394 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Arithmetic type unsupported by client (connected at Periphery.scala:291:14)\n    at Monitor.scala:125 assert (edge.client.supportsArithmetic(bundle.source, bundle.size), \"'B' channel carries Arithmetic type unsupported by client\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12395 = or(T_12197[0], reset) @[Periphery.scala 291:14]
        node T_12397 = eq(T_12395, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12397 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:126 assert (address_ok, \"'B' channel Arithmetic carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12398 = or(T_12207, reset) @[Periphery.scala 291:14]
        node T_12400 = eq(T_12398, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12400 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:127 assert (is_aligned, \"'B' channel Arithmetic address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12401 = leq(TLFragmenter_1_1.io.out[0].b.bits.param, UInt<3>("h04")) @[Bundles.scala 94:33]
        node T_12402 = or(T_12401, reset) @[Periphery.scala 291:14]
        node T_12404 = eq(T_12402, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12404 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic carries invalid opcode param (connected at Periphery.scala:291:14)\n    at Monitor.scala:128 assert (TLAtomics.isArithmetic(bundle.param), \"'B' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12405 = eq(TLFragmenter_1_1.io.out[0].b.bits.mask, T_12300) @[Periphery.scala 291:14]
        node T_12406 = or(T_12405, reset) @[Periphery.scala 291:14]
        node T_12408 = eq(T_12406, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12408 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Arithmetic contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:129 assert (bundle.mask === mask, \"'B' channel Arithmetic contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12409 = eq(TLFragmenter_1_1.io.out[0].b.bits.opcode, UInt<2>("h03")) @[Periphery.scala 291:14]
      when T_12409 : @[Periphery.scala 291:14]
        node T_12411 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12413 = eq(T_12411, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12413 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Logical type unsupported by client (connected at Periphery.scala:291:14)\n    at Monitor.scala:133 assert (edge.client.supportsLogical(bundle.source, bundle.size), \"'B' channel carries Logical type unsupported by client\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12414 = or(T_12197[0], reset) @[Periphery.scala 291:14]
        node T_12416 = eq(T_12414, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12416 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:134 assert (address_ok, \"'B' channel Logical carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12417 = or(T_12207, reset) @[Periphery.scala 291:14]
        node T_12419 = eq(T_12417, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12419 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:135 assert (is_aligned, \"'B' channel Logical address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12420 = leq(TLFragmenter_1_1.io.out[0].b.bits.param, UInt<2>("h03")) @[Bundles.scala 101:30]
        node T_12421 = or(T_12420, reset) @[Periphery.scala 291:14]
        node T_12423 = eq(T_12421, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12423 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical carries invalid opcode param (connected at Periphery.scala:291:14)\n    at Monitor.scala:136 assert (TLAtomics.isLogical(bundle.param), \"'B' channel Logical carries invalid opcode param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12424 = eq(TLFragmenter_1_1.io.out[0].b.bits.mask, T_12300) @[Periphery.scala 291:14]
        node T_12425 = or(T_12424, reset) @[Periphery.scala 291:14]
        node T_12427 = eq(T_12425, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12427 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Logical contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:137 assert (bundle.mask === mask, \"'B' channel Logical contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12428 = eq(TLFragmenter_1_1.io.out[0].b.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:14]
      when T_12428 : @[Periphery.scala 291:14]
        node T_12430 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12432 = eq(T_12430, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12432 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel carries Hint type unsupported by client (connected at Periphery.scala:291:14)\n    at Monitor.scala:141 assert (edge.client.supportsHint(bundle.source, bundle.size), \"'B' channel carries Hint type unsupported by client\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12433 = or(T_12197[0], reset) @[Periphery.scala 291:14]
        node T_12435 = eq(T_12433, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12435 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:142 assert (address_ok, \"'B' channel Hint carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12436 = or(T_12207, reset) @[Periphery.scala 291:14]
        node T_12438 = eq(T_12436, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12438 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:143 assert (is_aligned, \"'B' channel Hint address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12439 = eq(TLFragmenter_1_1.io.out[0].b.bits.mask, T_12300) @[Periphery.scala 291:14]
        node T_12440 = or(T_12439, reset) @[Periphery.scala 291:14]
        node T_12442 = eq(T_12440, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12442 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'B' channel Hint contains invalid mask (connected at Periphery.scala:291:14)\n    at Monitor.scala:144 assert (bundle.mask === mask, \"'B' channel Hint contains invalid mask\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    when TLFragmenter_1_1.io.out[0].c.valid : @[Periphery.scala 291:14]
      node T_12443 = leq(TLFragmenter_1_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Bundles.scala 55:24]
      node T_12444 = or(T_12443, reset) @[Periphery.scala 291:14]
      node T_12446 = eq(T_12444, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12446 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel has invalid opcode (connected at Periphery.scala:291:14)\n    at Monitor.scala:149 assert (TLMessages.isC(bundle.opcode), \"'C' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12448 = xor(UInt<1>("h00"), TLFragmenter_1_1.io.out[0].c.bits.source) @[Parameters.scala 37:23]
      node T_12449 = not(T_12448) @[Parameters.scala 37:9]
      node T_12451 = or(T_12449, UInt<7>("h07f")) @[Parameters.scala 37:28]
      node T_12452 = not(T_12451) @[Parameters.scala 37:7]
      node T_12454 = eq(T_12452, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_12460 : UInt<1>[1] @[Parameters.scala 326:27]
      T_12460 is invalid @[Parameters.scala 326:27]
      T_12460[0] <= T_12454 @[Parameters.scala 326:27]
      node T_12463 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_12464 = dshl(T_12463, TLFragmenter_1_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_12465 = bits(T_12464, 2, 0) @[package.scala 11:76]
      node T_12466 = not(T_12465) @[package.scala 11:40]
      node T_12467 = shr(T_12466, 3) @[Edges.scala 15:47]
      node T_12468 = and(TLFragmenter_1_1.io.out[0].c.bits.addr_hi, T_12467) @[Edges.scala 16:16]
      node T_12470 = eq(T_12468, UInt<1>("h00")) @[Edges.scala 16:24]
      node T_12472 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_12473 = dshl(T_12472, TLFragmenter_1_1.io.out[0].c.bits.size) @[package.scala 11:71]
      node T_12474 = bits(T_12473, 2, 0) @[package.scala 11:76]
      node T_12475 = not(T_12474) @[package.scala 11:40]
      node T_12476 = and(TLFragmenter_1_1.io.out[0].c.bits.addr_lo, T_12475) @[Edges.scala 23:16]
      node T_12478 = eq(T_12476, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_12479 = and(T_12470, T_12478) @[Periphery.scala 291:14]
      node T_12480 = cat(TLFragmenter_1_1.io.out[0].c.bits.addr_hi, TLFragmenter_1_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
      node T_12482 = xor(T_12480, UInt<31>("h044000000")) @[Parameters.scala 89:31]
      node T_12483 = cvt(T_12482) @[Parameters.scala 89:49]
      node T_12485 = and(T_12483, asSInt(UInt<17>("h010000"))) @[Parameters.scala 89:52]
      node T_12486 = asSInt(T_12485) @[Parameters.scala 89:52]
      node T_12488 = eq(T_12486, asSInt(UInt<1>("h00"))) @[Parameters.scala 89:67]
      wire T_12494 : UInt<1>[1] @[Parameters.scala 227:36]
      T_12494 is invalid @[Parameters.scala 227:36]
      T_12494[0] <= T_12488 @[Parameters.scala 227:36]
      node T_12496 = eq(TLFragmenter_1_1.io.out[0].c.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:14]
      when T_12496 : @[Periphery.scala 291:14]
        node T_12497 = or(T_12494[0], reset) @[Periphery.scala 291:14]
        node T_12499 = eq(T_12497, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12499 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:156 assert (address_ok, \"'C' channel ProbeAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12500 = or(T_12460[0], reset) @[Periphery.scala 291:14]
        node T_12502 = eq(T_12500, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12502 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:157 assert (source_ok, \"'C' channel ProbeAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12504 = geq(TLFragmenter_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_12505 = or(T_12504, reset) @[Periphery.scala 291:14]
        node T_12507 = eq(T_12505, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12507 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:158 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAck smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12508 = or(T_12479, reset) @[Periphery.scala 291:14]
        node T_12510 = eq(T_12508, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12510 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:159 assert (is_aligned, \"'C' channel ProbeAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12511 = leq(TLFragmenter_1_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_12512 = or(T_12511, reset) @[Periphery.scala 291:14]
        node T_12514 = eq(T_12512, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12514 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at Periphery.scala:291:14)\n    at Monitor.scala:160 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAck carries invalid report param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12516 = eq(TLFragmenter_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12517 = or(T_12516, reset) @[Periphery.scala 291:14]
        node T_12519 = eq(T_12517, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12519 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Probe carries an error (connected at Periphery.scala:291:14)\n    at Monitor.scala:161 assert (!bundle.error, \"'C' channel Probe carries an error\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12520 = eq(TLFragmenter_1_1.io.out[0].c.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:14]
      when T_12520 : @[Periphery.scala 291:14]
        node T_12521 = or(T_12494[0], reset) @[Periphery.scala 291:14]
        node T_12523 = eq(T_12521, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12523 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:165 assert (address_ok, \"'C' channel ProbeAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12524 = or(T_12460[0], reset) @[Periphery.scala 291:14]
        node T_12526 = eq(T_12524, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12526 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:166 assert (source_ok, \"'C' channel ProbeAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12528 = geq(TLFragmenter_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_12529 = or(T_12528, reset) @[Periphery.scala 291:14]
        node T_12531 = eq(T_12529, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12531 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:167 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ProbeAckData smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12532 = or(T_12479, reset) @[Periphery.scala 291:14]
        node T_12534 = eq(T_12532, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12534 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:168 assert (is_aligned, \"'C' channel ProbeAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12535 = leq(TLFragmenter_1_1.io.out[0].c.bits.param, UInt<3>("h05")) @[Bundles.scala 83:29]
        node T_12536 = or(T_12535, reset) @[Periphery.scala 291:14]
        node T_12538 = eq(T_12536, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12538 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at Periphery.scala:291:14)\n    at Monitor.scala:169 assert (TLPermissions.isReport(bundle.param), \"'C' channel ProbeAckData carries invalid report param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12540 = eq(TLFragmenter_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12541 = or(T_12540, reset) @[Periphery.scala 291:14]
        node T_12543 = eq(T_12541, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12543 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ProbeData carries an error (connected at Periphery.scala:291:14)\n    at Monitor.scala:170 assert (!bundle.error, \"'C' channel ProbeData carries an error\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12544 = eq(TLFragmenter_1_1.io.out[0].c.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:14]
      when T_12544 : @[Periphery.scala 291:14]
        node T_12545 = cat(TLFragmenter_1_1.io.out[0].c.bits.addr_hi, TLFragmenter_1_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_12547 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12549 = eq(T_12547, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12549 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:174 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries Release type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12550 = or(T_12460[0], reset) @[Periphery.scala 291:14]
        node T_12552 = eq(T_12550, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12552 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:175 assert (source_ok, \"'C' channel Release carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12554 = geq(TLFragmenter_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_12555 = or(T_12554, reset) @[Periphery.scala 291:14]
        node T_12557 = eq(T_12555, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12557 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:176 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel Release smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12558 = or(T_12479, reset) @[Periphery.scala 291:14]
        node T_12560 = eq(T_12558, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12560 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:177 assert (is_aligned, \"'C' channel Release address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12561 = leq(TLFragmenter_1_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_12562 = or(T_12561, reset) @[Periphery.scala 291:14]
        node T_12564 = eq(T_12562, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12564 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries invalid shrink param (connected at Periphery.scala:291:14)\n    at Monitor.scala:178 assert (TLPermissions.isShrink(bundle.param), \"'C' channel Release carries invalid shrink param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12566 = eq(TLFragmenter_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12567 = or(T_12566, reset) @[Periphery.scala 291:14]
        node T_12569 = eq(T_12567, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12569 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel Release carries an error (connected at Periphery.scala:291:14)\n    at Monitor.scala:179 assert (!bundle.error, \"'C' channel Release carries an error\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12570 = eq(TLFragmenter_1_1.io.out[0].c.bits.opcode, UInt<3>("h07")) @[Periphery.scala 291:14]
      when T_12570 : @[Periphery.scala 291:14]
        node T_12571 = cat(TLFragmenter_1_1.io.out[0].c.bits.addr_hi, TLFragmenter_1_1.io.out[0].c.bits.addr_lo) @[Cat.scala 20:58]
        node T_12573 = or(UInt<1>("h00"), reset) @[Periphery.scala 291:14]
        node T_12575 = eq(T_12573, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12575 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at Periphery.scala:291:14)\n    at Monitor.scala:183 assert (edge.manager.supportsAcquireSafe(edge.address(bundle), bundle.size), \"'C' channel carries ReleaseData type unsupported by manager\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12576 = or(T_12460[0], reset) @[Periphery.scala 291:14]
        node T_12578 = eq(T_12576, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12578 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:184 assert (source_ok, \"'C' channel ReleaseData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12580 = geq(TLFragmenter_1_1.io.out[0].c.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_12581 = or(T_12580, reset) @[Periphery.scala 291:14]
        node T_12583 = eq(T_12581, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12583 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:185 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'C' channel ReleaseData smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12584 = or(T_12479, reset) @[Periphery.scala 291:14]
        node T_12586 = eq(T_12584, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12586 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:186 assert (is_aligned, \"'C' channel ReleaseData address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12587 = leq(TLFragmenter_1_1.io.out[0].c.bits.param, UInt<2>("h02")) @[Bundles.scala 77:29]
        node T_12588 = or(T_12587, reset) @[Periphery.scala 291:14]
        node T_12590 = eq(T_12588, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12590 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries invalid shrink param (connected at Periphery.scala:291:14)\n    at Monitor.scala:187 assert (TLPermissions.isShrink(bundle.param), \"'C' channel ReleaseData carries invalid shrink param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12592 = eq(TLFragmenter_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12593 = or(T_12592, reset) @[Periphery.scala 291:14]
        node T_12595 = eq(T_12593, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12595 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel ReleaseData carries an error (connected at Periphery.scala:291:14)\n    at Monitor.scala:188 assert (!bundle.error, \"'C' channel ReleaseData carries an error\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12596 = eq(TLFragmenter_1_1.io.out[0].c.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12596 : @[Periphery.scala 291:14]
        node T_12597 = or(T_12494[0], reset) @[Periphery.scala 291:14]
        node T_12599 = eq(T_12597, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12599 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:192 assert (address_ok, \"'C' channel AccessAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12600 = or(T_12460[0], reset) @[Periphery.scala 291:14]
        node T_12602 = eq(T_12600, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12602 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:193 assert (source_ok, \"'C' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12603 = or(T_12479, reset) @[Periphery.scala 291:14]
        node T_12605 = eq(T_12603, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12605 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:194 assert (is_aligned, \"'C' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12607 = eq(TLFragmenter_1_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12608 = or(T_12607, reset) @[Periphery.scala 291:14]
        node T_12610 = eq(T_12608, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12610 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAck carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:195 assert (bundle.param === UInt(0), \"'C' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12611 = eq(TLFragmenter_1_1.io.out[0].c.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:14]
      when T_12611 : @[Periphery.scala 291:14]
        node T_12612 = or(T_12494[0], reset) @[Periphery.scala 291:14]
        node T_12614 = eq(T_12612, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12614 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:199 assert (address_ok, \"'C' channel AccessAckData carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12615 = or(T_12460[0], reset) @[Periphery.scala 291:14]
        node T_12617 = eq(T_12615, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12617 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:200 assert (source_ok, \"'C' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12618 = or(T_12479, reset) @[Periphery.scala 291:14]
        node T_12620 = eq(T_12618, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12620 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:201 assert (is_aligned, \"'C' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12622 = eq(TLFragmenter_1_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12623 = or(T_12622, reset) @[Periphery.scala 291:14]
        node T_12625 = eq(T_12623, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12625 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:202 assert (bundle.param === UInt(0), \"'C' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12626 = eq(TLFragmenter_1_1.io.out[0].c.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:14]
      when T_12626 : @[Periphery.scala 291:14]
        node T_12627 = or(T_12494[0], reset) @[Periphery.scala 291:14]
        node T_12629 = eq(T_12627, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12629 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at Periphery.scala:291:14)\n    at Monitor.scala:206 assert (address_ok, \"'C' channel HintAck carries unmanaged address\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12630 = or(T_12460[0], reset) @[Periphery.scala 291:14]
        node T_12632 = eq(T_12630, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12632 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:207 assert (source_ok, \"'C' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12633 = or(T_12479, reset) @[Periphery.scala 291:14]
        node T_12635 = eq(T_12633, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12635 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:208 assert (is_aligned, \"'C' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12637 = eq(TLFragmenter_1_1.io.out[0].c.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12638 = or(T_12637, reset) @[Periphery.scala 291:14]
        node T_12640 = eq(T_12638, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12640 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:209 assert (bundle.param === UInt(0), \"'C' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12642 = eq(TLFragmenter_1_1.io.out[0].c.bits.error, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12643 = or(T_12642, reset) @[Periphery.scala 291:14]
        node T_12645 = eq(T_12643, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12645 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'C' channel HintAck carries an error (connected at Periphery.scala:291:14)\n    at Monitor.scala:210 assert (!bundle.error, \"'C' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    when TLFragmenter_1_1.io.out[0].d.valid : @[Periphery.scala 291:14]
      node T_12646 = leq(TLFragmenter_1_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 56:24]
      node T_12647 = or(T_12646, reset) @[Periphery.scala 291:14]
      node T_12649 = eq(T_12647, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12649 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at Periphery.scala:291:14)\n    at Monitor.scala:215 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12651 = xor(UInt<1>("h00"), TLFragmenter_1_1.io.out[0].d.bits.source) @[Parameters.scala 37:23]
      node T_12652 = not(T_12651) @[Parameters.scala 37:9]
      node T_12654 = or(T_12652, UInt<7>("h07f")) @[Parameters.scala 37:28]
      node T_12655 = not(T_12654) @[Parameters.scala 37:7]
      node T_12657 = eq(T_12655, UInt<1>("h00")) @[Parameters.scala 37:49]
      wire T_12663 : UInt<1>[1] @[Parameters.scala 326:27]
      T_12663 is invalid @[Parameters.scala 326:27]
      T_12663[0] <= T_12657 @[Parameters.scala 326:27]
      node T_12666 = asUInt(asSInt(UInt<3>("h07"))) @[package.scala 11:64]
      node T_12667 = dshl(T_12666, TLFragmenter_1_1.io.out[0].d.bits.size) @[package.scala 11:71]
      node T_12668 = bits(T_12667, 2, 0) @[package.scala 11:76]
      node T_12669 = not(T_12668) @[package.scala 11:40]
      node T_12670 = and(TLFragmenter_1_1.io.out[0].d.bits.addr_lo, T_12669) @[Edges.scala 23:16]
      node T_12672 = eq(T_12670, UInt<1>("h00")) @[Edges.scala 23:24]
      node T_12674 = eq(UInt<1>("h00"), TLFragmenter_1_1.io.out[0].d.bits.sink) @[Parameters.scala 35:39]
      wire T_12680 : UInt<1>[1] @[Parameters.scala 220:31]
      T_12680 is invalid @[Parameters.scala 220:31]
      T_12680[0] <= T_12674 @[Parameters.scala 220:31]
      node T_12682 = eq(TLFragmenter_1_1.io.out[0].d.bits.opcode, UInt<3>("h06")) @[Periphery.scala 291:14]
      when T_12682 : @[Periphery.scala 291:14]
        node T_12683 = or(T_12663[0], reset) @[Periphery.scala 291:14]
        node T_12685 = eq(T_12683, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12685 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:222 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12686 = or(T_12672, reset) @[Periphery.scala 291:14]
        node T_12688 = eq(T_12686, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12688 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:223 assert (is_aligned, \"'D' channel ReleaseAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12689 = or(T_12680[0], reset) @[Periphery.scala 291:14]
        node T_12691 = eq(T_12689, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12691 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:224 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12693 = geq(TLFragmenter_1_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_12694 = or(T_12693, reset) @[Periphery.scala 291:14]
        node T_12696 = eq(T_12694, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12696 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:225 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12698 = eq(TLFragmenter_1_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12699 = or(T_12698, reset) @[Periphery.scala 291:14]
        node T_12701 = eq(T_12699, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12701 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:226 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12703 = eq(TLFragmenter_1_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12704 = or(T_12703, reset) @[Periphery.scala 291:14]
        node T_12706 = eq(T_12704, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12706 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries an error (connected at Periphery.scala:291:14)\n    at Monitor.scala:227 assert (!bundle.error, \"'D' channel ReleaseAck carries an error\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12707 = eq(TLFragmenter_1_1.io.out[0].d.bits.opcode, UInt<3>("h04")) @[Periphery.scala 291:14]
      when T_12707 : @[Periphery.scala 291:14]
        node T_12708 = or(T_12663[0], reset) @[Periphery.scala 291:14]
        node T_12710 = eq(T_12708, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12710 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:231 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12711 = or(T_12672, reset) @[Periphery.scala 291:14]
        node T_12713 = eq(T_12711, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12713 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:232 assert (is_aligned, \"'D' channel Grant address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12714 = or(T_12680[0], reset) @[Periphery.scala 291:14]
        node T_12716 = eq(T_12714, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12716 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:233 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12718 = geq(TLFragmenter_1_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_12719 = or(T_12718, reset) @[Periphery.scala 291:14]
        node T_12721 = eq(T_12719, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12721 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:234 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12722 = leq(TLFragmenter_1_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_12723 = or(T_12722, reset) @[Periphery.scala 291:14]
        node T_12725 = eq(T_12723, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12725 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at Periphery.scala:291:14)\n    at Monitor.scala:235 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12726 = eq(TLFragmenter_1_1.io.out[0].d.bits.opcode, UInt<3>("h05")) @[Periphery.scala 291:14]
      when T_12726 : @[Periphery.scala 291:14]
        node T_12727 = or(T_12663[0], reset) @[Periphery.scala 291:14]
        node T_12729 = eq(T_12727, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12729 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:239 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12730 = or(T_12672, reset) @[Periphery.scala 291:14]
        node T_12732 = eq(T_12730, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12732 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:240 assert (is_aligned, \"'D' channel GrantData address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12733 = or(T_12680[0], reset) @[Periphery.scala 291:14]
        node T_12735 = eq(T_12733, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12735 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:241 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12737 = geq(TLFragmenter_1_1.io.out[0].d.bits.size, UInt<2>("h03")) @[Periphery.scala 291:14]
        node T_12738 = or(T_12737, reset) @[Periphery.scala 291:14]
        node T_12740 = eq(T_12738, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12740 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at Periphery.scala:291:14)\n    at Monitor.scala:242 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12741 = leq(TLFragmenter_1_1.io.out[0].d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node T_12742 = or(T_12741, reset) @[Periphery.scala 291:14]
        node T_12744 = eq(T_12742, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12744 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at Periphery.scala:291:14)\n    at Monitor.scala:243 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12745 = eq(TLFragmenter_1_1.io.out[0].d.bits.opcode, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12745 : @[Periphery.scala 291:14]
        node T_12746 = or(T_12663[0], reset) @[Periphery.scala 291:14]
        node T_12748 = eq(T_12746, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12748 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:247 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12749 = or(T_12672, reset) @[Periphery.scala 291:14]
        node T_12751 = eq(T_12749, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12751 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:248 assert (is_aligned, \"'D' channel AccessAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12752 = or(T_12680[0], reset) @[Periphery.scala 291:14]
        node T_12754 = eq(T_12752, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12754 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:249 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12756 = eq(TLFragmenter_1_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12757 = or(T_12756, reset) @[Periphery.scala 291:14]
        node T_12759 = eq(T_12757, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12759 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:251 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12760 = eq(TLFragmenter_1_1.io.out[0].d.bits.opcode, UInt<1>("h01")) @[Periphery.scala 291:14]
      when T_12760 : @[Periphery.scala 291:14]
        node T_12761 = or(T_12663[0], reset) @[Periphery.scala 291:14]
        node T_12763 = eq(T_12761, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12763 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:255 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12764 = or(T_12672, reset) @[Periphery.scala 291:14]
        node T_12766 = eq(T_12764, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12766 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:256 assert (is_aligned, \"'D' channel AccessAckData address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12767 = or(T_12680[0], reset) @[Periphery.scala 291:14]
        node T_12769 = eq(T_12767, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12769 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:257 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12771 = eq(TLFragmenter_1_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12772 = or(T_12771, reset) @[Periphery.scala 291:14]
        node T_12774 = eq(T_12772, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12774 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:259 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12775 = eq(TLFragmenter_1_1.io.out[0].d.bits.opcode, UInt<2>("h02")) @[Periphery.scala 291:14]
      when T_12775 : @[Periphery.scala 291:14]
        node T_12776 = or(T_12663[0], reset) @[Periphery.scala 291:14]
        node T_12778 = eq(T_12776, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12778 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:263 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12779 = or(T_12672, reset) @[Periphery.scala 291:14]
        node T_12781 = eq(T_12779, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12781 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck address not aligned to size (connected at Periphery.scala:291:14)\n    at Monitor.scala:264 assert (is_aligned, \"'D' channel HintAck address not aligned to size\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12782 = or(T_12680[0], reset) @[Periphery.scala 291:14]
        node T_12784 = eq(T_12782, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12784 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:265 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12786 = eq(TLFragmenter_1_1.io.out[0].d.bits.param, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12787 = or(T_12786, reset) @[Periphery.scala 291:14]
        node T_12789 = eq(T_12787, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12789 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at Periphery.scala:291:14)\n    at Monitor.scala:267 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        node T_12791 = eq(TLFragmenter_1_1.io.out[0].d.bits.error, UInt<1>("h00")) @[Periphery.scala 291:14]
        node T_12792 = or(T_12791, reset) @[Periphery.scala 291:14]
        node T_12794 = eq(T_12792, UInt<1>("h00")) @[Periphery.scala 291:14]
        when T_12794 : @[Periphery.scala 291:14]
          printf(clk, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries an error (connected at Periphery.scala:291:14)\n    at Monitor.scala:268 assert (!bundle.error, \"'D' channel HintAck carries an error\" + extra)\n") @[Periphery.scala 291:14]
          stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
          skip @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    when TLFragmenter_1_1.io.out[0].e.valid : @[Periphery.scala 291:14]
      node T_12796 = eq(UInt<1>("h00"), TLFragmenter_1_1.io.out[0].e.bits.sink) @[Parameters.scala 35:39]
      wire T_12802 : UInt<1>[1] @[Parameters.scala 220:31]
      T_12802 is invalid @[Parameters.scala 220:31]
      T_12802[0] <= T_12796 @[Parameters.scala 220:31]
      node T_12804 = or(T_12802[0], reset) @[Periphery.scala 291:14]
      node T_12806 = eq(T_12804, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12806 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channels carries invalid sink ID (connected at Periphery.scala:291:14)\n    at Monitor.scala:273 assert (edge.manager.containsById(bundle.sink), \"'E' channels carries invalid sink ID\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_12808 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_12810 : UInt, clk
    reg T_12812 : UInt, clk
    reg T_12814 : UInt, clk
    reg T_12816 : UInt, clk
    reg T_12818 : UInt, clk
    node T_12820 = neq(T_12808, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_12821 = and(TLFragmenter_1_1.io.out[0].a.valid, T_12820) @[Periphery.scala 291:14]
    when T_12821 : @[Periphery.scala 291:14]
      node T_12822 = eq(TLFragmenter_1_1.io.out[0].a.bits.opcode, T_12810) @[Periphery.scala 291:14]
      node T_12823 = or(T_12822, reset) @[Periphery.scala 291:14]
      node T_12825 = eq(T_12823, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12825 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:292 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12826 = eq(TLFragmenter_1_1.io.out[0].a.bits.param, T_12812) @[Periphery.scala 291:14]
      node T_12827 = or(T_12826, reset) @[Periphery.scala 291:14]
      node T_12829 = eq(T_12827, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12829 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:293 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12830 = eq(TLFragmenter_1_1.io.out[0].a.bits.size, T_12814) @[Periphery.scala 291:14]
      node T_12831 = or(T_12830, reset) @[Periphery.scala 291:14]
      node T_12833 = eq(T_12831, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12833 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:294 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12834 = eq(TLFragmenter_1_1.io.out[0].a.bits.source, T_12816) @[Periphery.scala 291:14]
      node T_12835 = or(T_12834, reset) @[Periphery.scala 291:14]
      node T_12837 = eq(T_12835, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12837 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:295 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12838 = eq(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, T_12818) @[Periphery.scala 291:14]
      node T_12839 = or(T_12838, reset) @[Periphery.scala 291:14]
      node T_12841 = eq(T_12839, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12841 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:296 assert (a.bits.addr_hi=== addr_hi,\"'A' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    node T_12842 = and(TLFragmenter_1_1.io.out[0].a.ready, TLFragmenter_1_1.io.out[0].a.valid) @[Decoupled.scala 21:42]
    when T_12842 : @[Periphery.scala 291:14]
      node T_12844 = sub(T_12808, UInt<1>("h01")) @[Periphery.scala 291:14]
      node T_12845 = tail(T_12844, 1) @[Periphery.scala 291:14]
      T_12808 <= T_12845 @[Periphery.scala 291:14]
      node T_12847 = eq(T_12808, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12847 : @[Periphery.scala 291:14]
        node T_12848 = bits(TLFragmenter_1_1.io.out[0].a.bits.opcode, 2, 2) @[Edges.scala 125:37]
        node T_12850 = eq(T_12848, UInt<1>("h00")) @[Edges.scala 125:28]
        node T_12853 = bits(TLFragmenter_1_1.io.out[0].a.bits.size, 1, 0) @[OneHot.scala 46:21]
        node T_12854 = dshl(UInt<1>("h01"), T_12853) @[OneHot.scala 46:16]
        node T_12855 = bits(T_12854, 3, 0) @[OneHot.scala 46:41]
        node T_12856 = shr(T_12855, 3) @[Edges.scala 209:50]
        node T_12857 = or(T_12856, UInt<1>("h01")) @[Edges.scala 210:29]
        node T_12859 = mux(T_12850, T_12857, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_12861 = sub(T_12859, UInt<1>("h01")) @[Periphery.scala 291:14]
        node T_12862 = tail(T_12861, 1) @[Periphery.scala 291:14]
        T_12808 <= T_12862 @[Periphery.scala 291:14]
        T_12810 <= TLFragmenter_1_1.io.out[0].a.bits.opcode @[Periphery.scala 291:14]
        T_12812 <= TLFragmenter_1_1.io.out[0].a.bits.param @[Periphery.scala 291:14]
        T_12814 <= TLFragmenter_1_1.io.out[0].a.bits.size @[Periphery.scala 291:14]
        T_12816 <= TLFragmenter_1_1.io.out[0].a.bits.source @[Periphery.scala 291:14]
        T_12818 <= TLFragmenter_1_1.io.out[0].a.bits.addr_hi @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_12864 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_12866 : UInt, clk
    reg T_12868 : UInt, clk
    reg T_12870 : UInt, clk
    reg T_12872 : UInt, clk
    reg T_12874 : UInt, clk
    node T_12876 = neq(T_12864, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_12877 = and(TLFragmenter_1_1.io.out[0].b.valid, T_12876) @[Periphery.scala 291:14]
    when T_12877 : @[Periphery.scala 291:14]
      node T_12878 = eq(TLFragmenter_1_1.io.out[0].b.bits.opcode, T_12866) @[Periphery.scala 291:14]
      node T_12879 = or(T_12878, reset) @[Periphery.scala 291:14]
      node T_12881 = eq(T_12879, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12881 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel opcode changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:319 assert (b.bits.opcode === opcode, \"'B' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12882 = eq(TLFragmenter_1_1.io.out[0].b.bits.param, T_12868) @[Periphery.scala 291:14]
      node T_12883 = or(T_12882, reset) @[Periphery.scala 291:14]
      node T_12885 = eq(T_12883, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12885 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel param changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:320 assert (b.bits.param  === param,  \"'B' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12886 = eq(TLFragmenter_1_1.io.out[0].b.bits.size, T_12870) @[Periphery.scala 291:14]
      node T_12887 = or(T_12886, reset) @[Periphery.scala 291:14]
      node T_12889 = eq(T_12887, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12889 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel size changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:321 assert (b.bits.size   === size,   \"'B' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12890 = eq(TLFragmenter_1_1.io.out[0].b.bits.source, T_12872) @[Periphery.scala 291:14]
      node T_12891 = or(T_12890, reset) @[Periphery.scala 291:14]
      node T_12893 = eq(T_12891, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12893 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel source changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:322 assert (b.bits.source === source, \"'B' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12894 = eq(TLFragmenter_1_1.io.out[0].b.bits.addr_hi, T_12874) @[Periphery.scala 291:14]
      node T_12895 = or(T_12894, reset) @[Periphery.scala 291:14]
      node T_12897 = eq(T_12895, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12897 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:323 assert (b.bits.addr_hi=== addr_hi,\"'B' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    node T_12898 = and(TLFragmenter_1_1.io.out[0].b.ready, TLFragmenter_1_1.io.out[0].b.valid) @[Decoupled.scala 21:42]
    when T_12898 : @[Periphery.scala 291:14]
      node T_12900 = sub(T_12864, UInt<1>("h01")) @[Periphery.scala 291:14]
      node T_12901 = tail(T_12900, 1) @[Periphery.scala 291:14]
      T_12864 <= T_12901 @[Periphery.scala 291:14]
      node T_12903 = eq(T_12864, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12903 : @[Periphery.scala 291:14]
        node T_12904 = bits(TLFragmenter_1_1.io.out[0].b.bits.opcode, 2, 2) @[Edges.scala 130:37]
        node T_12906 = eq(T_12904, UInt<1>("h00")) @[Edges.scala 130:28]
        node T_12910 = bits(TLFragmenter_1_1.io.out[0].b.bits.size, 1, 0) @[OneHot.scala 46:21]
        node T_12911 = dshl(UInt<1>("h01"), T_12910) @[OneHot.scala 46:16]
        node T_12912 = bits(T_12911, 3, 0) @[OneHot.scala 46:41]
        node T_12913 = shr(T_12912, 3) @[Edges.scala 209:50]
        node T_12914 = or(T_12913, UInt<1>("h01")) @[Edges.scala 210:29]
        node T_12916 = mux(UInt<1>("h00"), T_12914, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_12918 = sub(T_12916, UInt<1>("h01")) @[Periphery.scala 291:14]
        node T_12919 = tail(T_12918, 1) @[Periphery.scala 291:14]
        T_12864 <= T_12919 @[Periphery.scala 291:14]
        T_12866 <= TLFragmenter_1_1.io.out[0].b.bits.opcode @[Periphery.scala 291:14]
        T_12868 <= TLFragmenter_1_1.io.out[0].b.bits.param @[Periphery.scala 291:14]
        T_12870 <= TLFragmenter_1_1.io.out[0].b.bits.size @[Periphery.scala 291:14]
        T_12872 <= TLFragmenter_1_1.io.out[0].b.bits.source @[Periphery.scala 291:14]
        T_12874 <= TLFragmenter_1_1.io.out[0].b.bits.addr_hi @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_12921 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_12923 : UInt, clk
    reg T_12925 : UInt, clk
    reg T_12927 : UInt, clk
    reg T_12929 : UInt, clk
    reg T_12931 : UInt, clk
    reg T_12933 : UInt, clk
    node T_12935 = neq(T_12921, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_12936 = and(TLFragmenter_1_1.io.out[0].c.valid, T_12935) @[Periphery.scala 291:14]
    when T_12936 : @[Periphery.scala 291:14]
      node T_12937 = eq(TLFragmenter_1_1.io.out[0].c.bits.opcode, T_12923) @[Periphery.scala 291:14]
      node T_12938 = or(T_12937, reset) @[Periphery.scala 291:14]
      node T_12940 = eq(T_12938, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12940 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:347 assert (c.bits.opcode === opcode, \"'C' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12941 = eq(TLFragmenter_1_1.io.out[0].c.bits.param, T_12925) @[Periphery.scala 291:14]
      node T_12942 = or(T_12941, reset) @[Periphery.scala 291:14]
      node T_12944 = eq(T_12942, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12944 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel param changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:348 assert (c.bits.param  === param,  \"'C' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12945 = eq(TLFragmenter_1_1.io.out[0].c.bits.size, T_12927) @[Periphery.scala 291:14]
      node T_12946 = or(T_12945, reset) @[Periphery.scala 291:14]
      node T_12948 = eq(T_12946, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12948 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel size changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:349 assert (c.bits.size   === size,   \"'C' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12949 = eq(TLFragmenter_1_1.io.out[0].c.bits.source, T_12929) @[Periphery.scala 291:14]
      node T_12950 = or(T_12949, reset) @[Periphery.scala 291:14]
      node T_12952 = eq(T_12950, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12952 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel source changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:350 assert (c.bits.source === source, \"'C' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12953 = eq(TLFragmenter_1_1.io.out[0].c.bits.addr_hi, T_12931) @[Periphery.scala 291:14]
      node T_12954 = or(T_12953, reset) @[Periphery.scala 291:14]
      node T_12956 = eq(T_12954, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12956 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_hi changed with multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:351 assert (c.bits.addr_hi=== addr_hi,\"'C' channel addr_hi changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_12957 = eq(TLFragmenter_1_1.io.out[0].c.bits.addr_lo, T_12933) @[Periphery.scala 291:14]
      node T_12958 = or(T_12957, reset) @[Periphery.scala 291:14]
      node T_12960 = eq(T_12958, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12960 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel addr_lo changed with multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:352 assert (c.bits.addr_lo=== addr_lo,\"'C' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    node T_12961 = and(TLFragmenter_1_1.io.out[0].c.ready, TLFragmenter_1_1.io.out[0].c.valid) @[Decoupled.scala 21:42]
    when T_12961 : @[Periphery.scala 291:14]
      node T_12963 = sub(T_12921, UInt<1>("h01")) @[Periphery.scala 291:14]
      node T_12964 = tail(T_12963, 1) @[Periphery.scala 291:14]
      T_12921 <= T_12964 @[Periphery.scala 291:14]
      node T_12966 = eq(T_12921, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_12966 : @[Periphery.scala 291:14]
        node T_12967 = bits(TLFragmenter_1_1.io.out[0].c.bits.opcode, 0, 0) @[Edges.scala 135:36]
        node T_12971 = bits(TLFragmenter_1_1.io.out[0].c.bits.size, 1, 0) @[OneHot.scala 46:21]
        node T_12972 = dshl(UInt<1>("h01"), T_12971) @[OneHot.scala 46:16]
        node T_12973 = bits(T_12972, 3, 0) @[OneHot.scala 46:41]
        node T_12974 = shr(T_12973, 3) @[Edges.scala 209:50]
        node T_12975 = or(T_12974, UInt<1>("h01")) @[Edges.scala 210:29]
        node T_12977 = mux(UInt<1>("h00"), T_12975, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_12979 = sub(T_12977, UInt<1>("h01")) @[Periphery.scala 291:14]
        node T_12980 = tail(T_12979, 1) @[Periphery.scala 291:14]
        T_12921 <= T_12980 @[Periphery.scala 291:14]
        T_12923 <= TLFragmenter_1_1.io.out[0].c.bits.opcode @[Periphery.scala 291:14]
        T_12925 <= TLFragmenter_1_1.io.out[0].c.bits.param @[Periphery.scala 291:14]
        T_12927 <= TLFragmenter_1_1.io.out[0].c.bits.size @[Periphery.scala 291:14]
        T_12929 <= TLFragmenter_1_1.io.out[0].c.bits.source @[Periphery.scala 291:14]
        T_12931 <= TLFragmenter_1_1.io.out[0].c.bits.addr_hi @[Periphery.scala 291:14]
        T_12933 <= TLFragmenter_1_1.io.out[0].c.bits.addr_lo @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_12982 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_12984 : UInt, clk
    reg T_12986 : UInt, clk
    reg T_12988 : UInt, clk
    reg T_12990 : UInt, clk
    reg T_12992 : UInt, clk
    reg T_12994 : UInt, clk
    node T_12996 = neq(T_12982, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_12997 = and(TLFragmenter_1_1.io.out[0].d.valid, T_12996) @[Periphery.scala 291:14]
    when T_12997 : @[Periphery.scala 291:14]
      node T_12998 = eq(TLFragmenter_1_1.io.out[0].d.bits.opcode, T_12984) @[Periphery.scala 291:14]
      node T_12999 = or(T_12998, reset) @[Periphery.scala 291:14]
      node T_13001 = eq(T_12999, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13001 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:377 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13002 = eq(TLFragmenter_1_1.io.out[0].d.bits.param, T_12986) @[Periphery.scala 291:14]
      node T_13003 = or(T_13002, reset) @[Periphery.scala 291:14]
      node T_13005 = eq(T_13003, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13005 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:378 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13006 = eq(TLFragmenter_1_1.io.out[0].d.bits.size, T_12988) @[Periphery.scala 291:14]
      node T_13007 = or(T_13006, reset) @[Periphery.scala 291:14]
      node T_13009 = eq(T_13007, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13009 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:379 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13010 = eq(TLFragmenter_1_1.io.out[0].d.bits.source, T_12990) @[Periphery.scala 291:14]
      node T_13011 = or(T_13010, reset) @[Periphery.scala 291:14]
      node T_13013 = eq(T_13011, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13013 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:380 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13014 = eq(TLFragmenter_1_1.io.out[0].d.bits.sink, T_12992) @[Periphery.scala 291:14]
      node T_13015 = or(T_13014, reset) @[Periphery.scala 291:14]
      node T_13017 = eq(T_13015, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13017 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:381 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13018 = eq(TLFragmenter_1_1.io.out[0].d.bits.addr_lo, T_12994) @[Periphery.scala 291:14]
      node T_13019 = or(T_13018, reset) @[Periphery.scala 291:14]
      node T_13021 = eq(T_13019, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13021 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel addr_lo changed with multibeat operation (connected at Periphery.scala:291:14)\n    at Monitor.scala:382 assert (d.bits.addr_lo=== addr_lo,\"'D' channel addr_lo changed with multibeat operation\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    node T_13022 = and(TLFragmenter_1_1.io.out[0].d.ready, TLFragmenter_1_1.io.out[0].d.valid) @[Decoupled.scala 21:42]
    when T_13022 : @[Periphery.scala 291:14]
      node T_13024 = sub(T_12982, UInt<1>("h01")) @[Periphery.scala 291:14]
      node T_13025 = tail(T_13024, 1) @[Periphery.scala 291:14]
      T_12982 <= T_13025 @[Periphery.scala 291:14]
      node T_13027 = eq(T_12982, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13027 : @[Periphery.scala 291:14]
        node T_13028 = bits(TLFragmenter_1_1.io.out[0].d.bits.opcode, 0, 0) @[Edges.scala 139:36]
        node T_13031 = bits(TLFragmenter_1_1.io.out[0].d.bits.size, 1, 0) @[OneHot.scala 46:21]
        node T_13032 = dshl(UInt<1>("h01"), T_13031) @[OneHot.scala 46:16]
        node T_13033 = bits(T_13032, 3, 0) @[OneHot.scala 46:41]
        node T_13034 = shr(T_13033, 3) @[Edges.scala 209:50]
        node T_13035 = or(T_13034, UInt<1>("h01")) @[Edges.scala 210:29]
        node T_13037 = mux(T_13028, T_13035, UInt<1>("h01")) @[Edges.scala 210:12]
        node T_13039 = sub(T_13037, UInt<1>("h01")) @[Periphery.scala 291:14]
        node T_13040 = tail(T_13039, 1) @[Periphery.scala 291:14]
        T_12982 <= T_13040 @[Periphery.scala 291:14]
        T_12984 <= TLFragmenter_1_1.io.out[0].d.bits.opcode @[Periphery.scala 291:14]
        T_12986 <= TLFragmenter_1_1.io.out[0].d.bits.param @[Periphery.scala 291:14]
        T_12988 <= TLFragmenter_1_1.io.out[0].d.bits.size @[Periphery.scala 291:14]
        T_12990 <= TLFragmenter_1_1.io.out[0].d.bits.source @[Periphery.scala 291:14]
        T_12992 <= TLFragmenter_1_1.io.out[0].d.bits.sink @[Periphery.scala 291:14]
        T_12994 <= TLFragmenter_1_1.io.out[0].d.bits.addr_lo @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_13042 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13042 <= TLFragmenter_1_1.io.out[0].a.valid
    reg T_13044 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13044 <= TLFragmenter_1_1.io.out[0].a.ready
    reg T_13045 : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}, clk
    T_13045 <- TLFragmenter_1_1.io.out[0].a.bits
    node T_13053 = cat(TLFragmenter_1_1.io.out[0].a.bits.addr_hi, TLFragmenter_1_1.io.out[0].a.bits.mask) @[Periphery.scala 291:14]
    node T_13054 = cat(T_13053, TLFragmenter_1_1.io.out[0].a.bits.data) @[Periphery.scala 291:14]
    node T_13055 = cat(TLFragmenter_1_1.io.out[0].a.bits.size, TLFragmenter_1_1.io.out[0].a.bits.source) @[Periphery.scala 291:14]
    node T_13056 = cat(TLFragmenter_1_1.io.out[0].a.bits.opcode, TLFragmenter_1_1.io.out[0].a.bits.param) @[Periphery.scala 291:14]
    node T_13057 = cat(T_13056, T_13055) @[Periphery.scala 291:14]
    node T_13058 = cat(T_13057, T_13054) @[Periphery.scala 291:14]
    node T_13059 = cat(T_13045.addr_hi, T_13045.mask) @[Periphery.scala 291:14]
    node T_13060 = cat(T_13059, T_13045.data) @[Periphery.scala 291:14]
    node T_13061 = cat(T_13045.size, T_13045.source) @[Periphery.scala 291:14]
    node T_13062 = cat(T_13045.opcode, T_13045.param) @[Periphery.scala 291:14]
    node T_13063 = cat(T_13062, T_13061) @[Periphery.scala 291:14]
    node T_13064 = cat(T_13063, T_13060) @[Periphery.scala 291:14]
    node T_13065 = eq(T_13058, T_13064) @[Periphery.scala 291:14]
    node T_13067 = eq(T_13044, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_13068 = and(T_13042, T_13067) @[Periphery.scala 291:14]
    when T_13068 : @[Periphery.scala 291:14]
      node T_13069 = or(TLFragmenter_1_1.io.out[0].a.valid, reset) @[Periphery.scala 291:14]
      node T_13071 = eq(T_13069, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13071 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:14)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13072 = or(T_13065, reset) @[Periphery.scala 291:14]
      node T_13074 = eq(T_13072, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13074 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'A' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:14)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_13076 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13076 <= TLFragmenter_1_1.io.out[0].b.valid
    reg T_13078 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13078 <= TLFragmenter_1_1.io.out[0].b.ready
    reg T_13079 : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, mask : UInt<8>, data : UInt<64>}, clk
    T_13079 <- TLFragmenter_1_1.io.out[0].b.bits
    node T_13087 = cat(TLFragmenter_1_1.io.out[0].b.bits.addr_hi, TLFragmenter_1_1.io.out[0].b.bits.mask) @[Periphery.scala 291:14]
    node T_13088 = cat(T_13087, TLFragmenter_1_1.io.out[0].b.bits.data) @[Periphery.scala 291:14]
    node T_13089 = cat(TLFragmenter_1_1.io.out[0].b.bits.size, TLFragmenter_1_1.io.out[0].b.bits.source) @[Periphery.scala 291:14]
    node T_13090 = cat(TLFragmenter_1_1.io.out[0].b.bits.opcode, TLFragmenter_1_1.io.out[0].b.bits.param) @[Periphery.scala 291:14]
    node T_13091 = cat(T_13090, T_13089) @[Periphery.scala 291:14]
    node T_13092 = cat(T_13091, T_13088) @[Periphery.scala 291:14]
    node T_13093 = cat(T_13079.addr_hi, T_13079.mask) @[Periphery.scala 291:14]
    node T_13094 = cat(T_13093, T_13079.data) @[Periphery.scala 291:14]
    node T_13095 = cat(T_13079.size, T_13079.source) @[Periphery.scala 291:14]
    node T_13096 = cat(T_13079.opcode, T_13079.param) @[Periphery.scala 291:14]
    node T_13097 = cat(T_13096, T_13095) @[Periphery.scala 291:14]
    node T_13098 = cat(T_13097, T_13094) @[Periphery.scala 291:14]
    node T_13099 = eq(T_13092, T_13098) @[Periphery.scala 291:14]
    node T_13101 = eq(T_13078, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_13102 = and(T_13076, T_13101) @[Periphery.scala 291:14]
    when T_13102 : @[Periphery.scala 291:14]
      node T_13103 = or(TLFragmenter_1_1.io.out[0].b.valid, reset) @[Periphery.scala 291:14]
      node T_13105 = eq(T_13103, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13105 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:14)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13106 = or(T_13099, reset) @[Periphery.scala 291:14]
      node T_13108 = eq(T_13106, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13108 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'B' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:14)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_13110 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13110 <= TLFragmenter_1_1.io.out[0].c.valid
    reg T_13112 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13112 <= TLFragmenter_1_1.io.out[0].c.ready
    reg T_13113 : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, addr_hi : UInt<28>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}, clk
    T_13113 <- TLFragmenter_1_1.io.out[0].c.bits
    node T_13122 = cat(TLFragmenter_1_1.io.out[0].c.bits.data, TLFragmenter_1_1.io.out[0].c.bits.error) @[Periphery.scala 291:14]
    node T_13123 = cat(TLFragmenter_1_1.io.out[0].c.bits.addr_hi, TLFragmenter_1_1.io.out[0].c.bits.addr_lo) @[Periphery.scala 291:14]
    node T_13124 = cat(T_13123, T_13122) @[Periphery.scala 291:14]
    node T_13125 = cat(TLFragmenter_1_1.io.out[0].c.bits.size, TLFragmenter_1_1.io.out[0].c.bits.source) @[Periphery.scala 291:14]
    node T_13126 = cat(TLFragmenter_1_1.io.out[0].c.bits.opcode, TLFragmenter_1_1.io.out[0].c.bits.param) @[Periphery.scala 291:14]
    node T_13127 = cat(T_13126, T_13125) @[Periphery.scala 291:14]
    node T_13128 = cat(T_13127, T_13124) @[Periphery.scala 291:14]
    node T_13129 = cat(T_13113.data, T_13113.error) @[Periphery.scala 291:14]
    node T_13130 = cat(T_13113.addr_hi, T_13113.addr_lo) @[Periphery.scala 291:14]
    node T_13131 = cat(T_13130, T_13129) @[Periphery.scala 291:14]
    node T_13132 = cat(T_13113.size, T_13113.source) @[Periphery.scala 291:14]
    node T_13133 = cat(T_13113.opcode, T_13113.param) @[Periphery.scala 291:14]
    node T_13134 = cat(T_13133, T_13132) @[Periphery.scala 291:14]
    node T_13135 = cat(T_13134, T_13131) @[Periphery.scala 291:14]
    node T_13136 = eq(T_13128, T_13135) @[Periphery.scala 291:14]
    node T_13138 = eq(T_13112, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_13139 = and(T_13110, T_13138) @[Periphery.scala 291:14]
    when T_13139 : @[Periphery.scala 291:14]
      node T_13140 = or(TLFragmenter_1_1.io.out[0].c.valid, reset) @[Periphery.scala 291:14]
      node T_13142 = eq(T_13140, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13142 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:14)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13143 = or(T_13136, reset) @[Periphery.scala 291:14]
      node T_13145 = eq(T_13143, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13145 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'C' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:14)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_13147 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13147 <= TLFragmenter_1_1.io.out[0].d.valid
    reg T_13149 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13149 <= TLFragmenter_1_1.io.out[0].d.ready
    reg T_13150 : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, addr_lo : UInt<3>, data : UInt<64>, error : UInt<1>}, clk
    T_13150 <- TLFragmenter_1_1.io.out[0].d.bits
    node T_13159 = cat(TLFragmenter_1_1.io.out[0].d.bits.data, TLFragmenter_1_1.io.out[0].d.bits.error) @[Periphery.scala 291:14]
    node T_13160 = cat(TLFragmenter_1_1.io.out[0].d.bits.sink, TLFragmenter_1_1.io.out[0].d.bits.addr_lo) @[Periphery.scala 291:14]
    node T_13161 = cat(T_13160, T_13159) @[Periphery.scala 291:14]
    node T_13162 = cat(TLFragmenter_1_1.io.out[0].d.bits.size, TLFragmenter_1_1.io.out[0].d.bits.source) @[Periphery.scala 291:14]
    node T_13163 = cat(TLFragmenter_1_1.io.out[0].d.bits.opcode, TLFragmenter_1_1.io.out[0].d.bits.param) @[Periphery.scala 291:14]
    node T_13164 = cat(T_13163, T_13162) @[Periphery.scala 291:14]
    node T_13165 = cat(T_13164, T_13161) @[Periphery.scala 291:14]
    node T_13166 = cat(T_13150.data, T_13150.error) @[Periphery.scala 291:14]
    node T_13167 = cat(T_13150.sink, T_13150.addr_lo) @[Periphery.scala 291:14]
    node T_13168 = cat(T_13167, T_13166) @[Periphery.scala 291:14]
    node T_13169 = cat(T_13150.size, T_13150.source) @[Periphery.scala 291:14]
    node T_13170 = cat(T_13150.opcode, T_13150.param) @[Periphery.scala 291:14]
    node T_13171 = cat(T_13170, T_13169) @[Periphery.scala 291:14]
    node T_13172 = cat(T_13171, T_13168) @[Periphery.scala 291:14]
    node T_13173 = eq(T_13165, T_13172) @[Periphery.scala 291:14]
    node T_13175 = eq(T_13149, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_13176 = and(T_13147, T_13175) @[Periphery.scala 291:14]
    when T_13176 : @[Periphery.scala 291:14]
      node T_13177 = or(TLFragmenter_1_1.io.out[0].d.valid, reset) @[Periphery.scala 291:14]
      node T_13179 = eq(T_13177, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13179 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:14)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13180 = or(T_13173, reset) @[Periphery.scala 291:14]
      node T_13182 = eq(T_13180, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13182 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'D' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:14)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    reg T_13184 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13184 <= TLFragmenter_1_1.io.out[0].e.valid
    reg T_13186 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_13186 <= TLFragmenter_1_1.io.out[0].e.ready
    reg T_13187 : {sink : UInt<1>}, clk
    T_13187 <- TLFragmenter_1_1.io.out[0].e.bits
    node T_13189 = eq(TLFragmenter_1_1.io.out[0].e.bits.sink, T_13187.sink) @[Periphery.scala 291:14]
    node T_13191 = eq(T_13186, UInt<1>("h00")) @[Periphery.scala 291:14]
    node T_13192 = and(T_13184, T_13191) @[Periphery.scala 291:14]
    when T_13192 : @[Periphery.scala 291:14]
      node T_13193 = or(TLFragmenter_1_1.io.out[0].e.valid, reset) @[Periphery.scala 291:14]
      node T_13195 = eq(T_13193, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13195 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (valid lowered) (connected at Periphery.scala:291:14)\n    at Monitor.scala:412 assert(irr.valid,    s\"${irr.bits.channelName} had contents that were revoked by the supplier (valid lowered)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      node T_13196 = or(T_13189, reset) @[Periphery.scala 291:14]
      node T_13198 = eq(T_13196, UInt<1>("h00")) @[Periphery.scala 291:14]
      when T_13198 : @[Periphery.scala 291:14]
        printf(clk, UInt<1>(1), "Assertion failed: 'E' channel had contents that were revoked by the supplier (contents changed) (connected at Periphery.scala:291:14)\n    at Monitor.scala:413 assert(bits_changed, s\"${irr.bits.channelName} had contents that were revoked by the supplier (contents changed)\" + extra)\n") @[Periphery.scala 291:14]
        stop(clk, UInt<1>(1), 1) @[Periphery.scala 291:14]
        skip @[Periphery.scala 291:14]
      skip @[Periphery.scala 291:14]
    clint_1.io.in[0] <- TLFragmenter_1_1.io.out[0] @[Periphery.scala 291:14]
    inst coreplex of DefaultCoreplex @[Configs.scala 43:55]
    coreplex.io is invalid
    coreplex.clk <= clk
    coreplex.reset <= reset
    inst mmioNetwork of TileLinkRecursiveInterconnect_2 @[Top.scala 69:11]
    mmioNetwork.io is invalid
    mmioNetwork.clk <= clk
    mmioNetwork.reset <= reset
    mmioNetwork.io.in[0] <- coreplex.io.master.mmio @[Top.scala 71:26]
    TLLegacy_1.io.legacy <- mmioNetwork.io.out[0] @[Top.scala 72:33]
    coreplex.io.debug <- io.debug @[Periphery.scala 113:23]
    coreplex.io.interrupts[0] <= io.interrupts[0] @[Periphery.scala 142:33]
    coreplex.io.interrupts[1] <= io.interrupts[1] @[Periphery.scala 142:33]
    reg T_16840 : UInt<7>, clk with : (reset => (reset, UInt<7>("h00")))
    node T_16842 = eq(T_16840, UInt<7>("h063")) @[Counter.scala 20:24]
    node T_16844 = add(T_16840, UInt<1>("h01")) @[Counter.scala 21:22]
    node T_16845 = tail(T_16844, 1) @[Counter.scala 21:22]
    T_16840 <= T_16845 @[Counter.scala 21:13]
    when T_16842 : @[Counter.scala 23:21]
      T_16840 <= UInt<1>("h00") @[Counter.scala 23:29]
      skip @[Counter.scala 23:21]
    clint_1.io.rtcTick <= T_16842 @[Periphery.scala 304:33]
    coreplex.io.clint_1 <= clint_1.io.tiles @[Periphery.scala 305:21]
    inst NastiIOTileLinkIOConverter_1 of NastiIOTileLinkIOConverter @[Periphery.scala 61:24]
    NastiIOTileLinkIOConverter_1.io is invalid
    NastiIOTileLinkIOConverter_1.clk <= clk
    NastiIOTileLinkIOConverter_1.reset <= reset
    NastiIOTileLinkIOConverter_1.io.tl <- coreplex.io.master.mem[0] @[Periphery.scala 62:18]
    wire T_17009 : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}} @[Periphery.scala 52:20]
    T_17009 is invalid @[Periphery.scala 52:20]
    inst Queue_20_1 of Queue_20 @[Decoupled.scala 241:19]
    Queue_20_1.io is invalid
    Queue_20_1.clk <= clk
    Queue_20_1.reset <= reset
    Queue_20_1.io.enq.valid <= NastiIOTileLinkIOConverter_1.io.nasti.ar.valid @[Decoupled.scala 242:20]
    Queue_20_1.io.enq.bits <- NastiIOTileLinkIOConverter_1.io.nasti.ar.bits @[Decoupled.scala 243:19]
    NastiIOTileLinkIOConverter_1.io.nasti.ar.ready <= Queue_20_1.io.enq.ready @[Decoupled.scala 244:15]
    T_17009.ar <- Queue_20_1.io.deq @[Periphery.scala 53:14]
    inst Queue_21_1 of Queue_20 @[Decoupled.scala 241:19]
    Queue_21_1.io is invalid
    Queue_21_1.clk <= clk
    Queue_21_1.reset <= reset
    Queue_21_1.io.enq.valid <= NastiIOTileLinkIOConverter_1.io.nasti.aw.valid @[Decoupled.scala 242:20]
    Queue_21_1.io.enq.bits <- NastiIOTileLinkIOConverter_1.io.nasti.aw.bits @[Decoupled.scala 243:19]
    NastiIOTileLinkIOConverter_1.io.nasti.aw.ready <= Queue_21_1.io.enq.ready @[Decoupled.scala 244:15]
    T_17009.aw <- Queue_21_1.io.deq @[Periphery.scala 54:14]
    inst Queue_22_1 of Queue_22 @[Decoupled.scala 241:19]
    Queue_22_1.io is invalid
    Queue_22_1.clk <= clk
    Queue_22_1.reset <= reset
    Queue_22_1.io.enq.valid <= NastiIOTileLinkIOConverter_1.io.nasti.w.valid @[Decoupled.scala 242:20]
    Queue_22_1.io.enq.bits <- NastiIOTileLinkIOConverter_1.io.nasti.w.bits @[Decoupled.scala 243:19]
    NastiIOTileLinkIOConverter_1.io.nasti.w.ready <= Queue_22_1.io.enq.ready @[Decoupled.scala 244:15]
    T_17009.w <- Queue_22_1.io.deq @[Periphery.scala 55:14]
    inst Queue_23_1 of Queue_23 @[Decoupled.scala 241:19]
    Queue_23_1.io is invalid
    Queue_23_1.clk <= clk
    Queue_23_1.reset <= reset
    Queue_23_1.io.enq.valid <= T_17009.r.valid @[Decoupled.scala 242:20]
    Queue_23_1.io.enq.bits <- T_17009.r.bits @[Decoupled.scala 243:19]
    T_17009.r.ready <= Queue_23_1.io.enq.ready @[Decoupled.scala 244:15]
    NastiIOTileLinkIOConverter_1.io.nasti.r <- Queue_23_1.io.deq @[Periphery.scala 56:14]
    inst Queue_24_1 of Queue_24 @[Decoupled.scala 241:19]
    Queue_24_1.io is invalid
    Queue_24_1.clk <= clk
    Queue_24_1.reset <= reset
    Queue_24_1.io.enq.valid <= T_17009.b.valid @[Decoupled.scala 242:20]
    Queue_24_1.io.enq.bits <- T_17009.b.bits @[Decoupled.scala 243:19]
    T_17009.b.ready <= Queue_24_1.io.enq.ready @[Decoupled.scala 244:15]
    NastiIOTileLinkIOConverter_1.io.nasti.b <- Queue_24_1.io.deq @[Periphery.scala 57:14]
    T_17009.ar.bits.cache <= UInt<4>("h03") @[Periphery.scala 171:28]
    T_17009.aw.bits.cache <= UInt<4>("h03") @[Periphery.scala 172:28]
    io.mem_axi[0] <- T_17009 @[Periphery.scala 173:9]
    
  module SimAXIMem : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
    
    io is invalid
    reg rValid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_324 = and(io.axi.ar.ready, io.axi.ar.valid) @[Decoupled.scala 21:42]
    reg ar : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}, clk
    when T_324 : @[Reg.scala 29:19]
      ar <- io.axi.ar.bits @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_337 = eq(rValid, UInt<1>("h00")) @[TestHarness.scala 84:22]
    io.axi.ar.ready <= T_337 @[TestHarness.scala 84:19]
    node T_338 = and(io.axi.ar.ready, io.axi.ar.valid) @[Decoupled.scala 21:42]
    when T_338 : @[TestHarness.scala 85:27]
      rValid <= UInt<1>("h01") @[TestHarness.scala 85:36]
      skip @[TestHarness.scala 85:27]
    node T_340 = and(io.axi.r.ready, io.axi.r.valid) @[Decoupled.scala 21:42]
    when T_340 : @[TestHarness.scala 86:26]
      node T_341 = eq(ar.burst, UInt<2>("h01")) @[TestHarness.scala 87:21]
      node T_342 = or(T_341, reset) @[TestHarness.scala 87:11]
      node T_344 = eq(T_342, UInt<1>("h00")) @[TestHarness.scala 87:11]
      when T_344 : @[TestHarness.scala 87:11]
        printf(clk, UInt<1>(1), "Assertion failed\n    at TestHarness.scala:87 assert(ar.burst === NastiConstants.BURST_INCR)\n") @[TestHarness.scala 87:11]
        stop(clk, UInt<1>(1), 1) @[TestHarness.scala 87:11]
        skip @[TestHarness.scala 87:11]
      node T_346 = dshl(UInt<1>("h01"), ar.size) @[TestHarness.scala 88:35]
      node T_347 = add(ar.addr, T_346) @[TestHarness.scala 88:24]
      node T_348 = tail(T_347, 1) @[TestHarness.scala 88:24]
      ar.addr <= T_348 @[TestHarness.scala 88:13]
      node T_350 = sub(ar.len, UInt<1>("h01")) @[TestHarness.scala 89:22]
      node T_351 = tail(T_350, 1) @[TestHarness.scala 89:22]
      ar.len <= T_351 @[TestHarness.scala 89:12]
      node T_353 = eq(ar.len, UInt<1>("h00")) @[TestHarness.scala 90:18]
      when T_353 : @[TestHarness.scala 90:31]
        rValid <= UInt<1>("h00") @[TestHarness.scala 90:40]
        skip @[TestHarness.scala 90:31]
      skip @[TestHarness.scala 86:26]
    cmem mem : UInt<64>[33554432] @[TestHarness.scala 96:16]
    reg wValid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg bValid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_358 = and(io.axi.aw.ready, io.axi.aw.valid) @[Decoupled.scala 21:42]
    reg aw : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}, clk
    when T_358 : @[Reg.scala 29:19]
      aw <- io.axi.aw.bits @[Reg.scala 29:23]
      skip @[Reg.scala 29:19]
    node T_371 = eq(wValid, UInt<1>("h00")) @[TestHarness.scala 101:22]
    node T_373 = eq(bValid, UInt<1>("h00")) @[TestHarness.scala 101:33]
    node T_374 = and(T_371, T_373) @[TestHarness.scala 101:30]
    io.axi.aw.ready <= T_374 @[TestHarness.scala 101:19]
    io.axi.w.ready <= wValid @[TestHarness.scala 102:18]
    node T_375 = and(io.axi.b.ready, io.axi.b.valid) @[Decoupled.scala 21:42]
    when T_375 : @[TestHarness.scala 103:26]
      bValid <= UInt<1>("h00") @[TestHarness.scala 103:35]
      skip @[TestHarness.scala 103:26]
    node T_377 = and(io.axi.aw.ready, io.axi.aw.valid) @[Decoupled.scala 21:42]
    when T_377 : @[TestHarness.scala 104:27]
      wValid <= UInt<1>("h01") @[TestHarness.scala 104:36]
      skip @[TestHarness.scala 104:27]
    node T_379 = and(io.axi.w.ready, io.axi.w.valid) @[Decoupled.scala 21:42]
    when T_379 : @[TestHarness.scala 105:26]
      node T_380 = eq(aw.burst, UInt<2>("h01")) @[TestHarness.scala 106:21]
      node T_381 = or(T_380, reset) @[TestHarness.scala 106:11]
      node T_383 = eq(T_381, UInt<1>("h00")) @[TestHarness.scala 106:11]
      when T_383 : @[TestHarness.scala 106:11]
        printf(clk, UInt<1>(1), "Assertion failed\n    at TestHarness.scala:106 assert(aw.burst === NastiConstants.BURST_INCR)\n") @[TestHarness.scala 106:11]
        stop(clk, UInt<1>(1), 1) @[TestHarness.scala 106:11]
        skip @[TestHarness.scala 106:11]
      node T_385 = dshl(UInt<1>("h01"), aw.size) @[TestHarness.scala 107:35]
      node T_386 = add(aw.addr, T_385) @[TestHarness.scala 107:24]
      node T_387 = tail(T_386, 1) @[TestHarness.scala 107:24]
      aw.addr <= T_387 @[TestHarness.scala 107:13]
      node T_389 = sub(aw.len, UInt<1>("h01")) @[TestHarness.scala 108:22]
      node T_390 = tail(T_389, 1) @[TestHarness.scala 108:22]
      aw.len <= T_390 @[TestHarness.scala 108:12]
      node T_392 = eq(aw.len, UInt<1>("h00")) @[TestHarness.scala 109:18]
      when T_392 : @[TestHarness.scala 109:31]
        wValid <= UInt<1>("h00") @[TestHarness.scala 110:14]
        bValid <= UInt<1>("h01") @[TestHarness.scala 111:14]
        skip @[TestHarness.scala 109:31]
      node T_395 = bits(io.axi.w.bits.strb, 0, 0) @[Bitwise.scala 13:51]
      node T_396 = bits(io.axi.w.bits.strb, 1, 1) @[Bitwise.scala 13:51]
      node T_397 = bits(io.axi.w.bits.strb, 2, 2) @[Bitwise.scala 13:51]
      node T_398 = bits(io.axi.w.bits.strb, 3, 3) @[Bitwise.scala 13:51]
      node T_399 = bits(io.axi.w.bits.strb, 4, 4) @[Bitwise.scala 13:51]
      node T_400 = bits(io.axi.w.bits.strb, 5, 5) @[Bitwise.scala 13:51]
      node T_401 = bits(io.axi.w.bits.strb, 6, 6) @[Bitwise.scala 13:51]
      node T_402 = bits(io.axi.w.bits.strb, 7, 7) @[Bitwise.scala 13:51]
      node T_403 = bits(T_395, 0, 0) @[Bitwise.scala 33:15]
      node T_406 = mux(T_403, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_407 = bits(T_396, 0, 0) @[Bitwise.scala 33:15]
      node T_410 = mux(T_407, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_411 = bits(T_397, 0, 0) @[Bitwise.scala 33:15]
      node T_414 = mux(T_411, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_415 = bits(T_398, 0, 0) @[Bitwise.scala 33:15]
      node T_418 = mux(T_415, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_419 = bits(T_399, 0, 0) @[Bitwise.scala 33:15]
      node T_422 = mux(T_419, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_423 = bits(T_400, 0, 0) @[Bitwise.scala 33:15]
      node T_426 = mux(T_423, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_427 = bits(T_401, 0, 0) @[Bitwise.scala 33:15]
      node T_430 = mux(T_427, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_431 = bits(T_402, 0, 0) @[Bitwise.scala 33:15]
      node T_434 = mux(T_431, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12]
      node T_435 = cat(T_410, T_406) @[Cat.scala 20:58]
      node T_436 = cat(T_418, T_414) @[Cat.scala 20:58]
      node T_437 = cat(T_436, T_435) @[Cat.scala 20:58]
      node T_438 = cat(T_426, T_422) @[Cat.scala 20:58]
      node T_439 = cat(T_434, T_430) @[Cat.scala 20:58]
      node T_440 = cat(T_439, T_438) @[Cat.scala 20:58]
      node T_441 = cat(T_440, T_437) @[Cat.scala 20:58]
      node T_442 = and(T_441, io.axi.w.bits.data) @[TestHarness.scala 116:24]
      node T_443 = not(T_441) @[TestHarness.scala 116:35]
      node T_444 = shr(aw.addr, 3) @[TestHarness.scala 114:28]
      node T_445 = bits(T_444, 24, 0) @[TestHarness.scala 114:58]
      infer mport T_446 = mem[T_445], clk
      node T_447 = and(T_443, T_446) @[TestHarness.scala 116:41]
      node T_448 = or(T_442, T_447) @[TestHarness.scala 116:33]
      node T_449 = shr(aw.addr, 3) @[TestHarness.scala 114:28]
      node T_450 = bits(T_449, 24, 0) @[TestHarness.scala 114:58]
      infer mport T_451 = mem[T_450], clk
      T_451 <= T_448 @[TestHarness.scala 117:9]
      skip @[TestHarness.scala 105:26]
    io.axi.b.valid <= bValid @[TestHarness.scala 120:18]
    io.axi.b.bits.id <= aw.id @[TestHarness.scala 121:20]
    io.axi.b.bits.resp <= UInt<2>("h00") @[TestHarness.scala 122:22]
    io.axi.r.valid <= rValid @[TestHarness.scala 124:18]
    io.axi.r.bits.id <= ar.id @[TestHarness.scala 125:20]
    node T_452 = shr(ar.addr, 3) @[TestHarness.scala 126:38]
    node T_453 = bits(T_452, 24, 0) @[TestHarness.scala 126:68]
    infer mport T_454 = mem[T_453], clk
    io.axi.r.bits.data <= T_454 @[TestHarness.scala 126:22]
    io.axi.r.bits.resp <= UInt<2>("h00") @[TestHarness.scala 127:22]
    node T_456 = eq(ar.len, UInt<1>("h00")) @[TestHarness.scala 128:32]
    io.axi.r.bits.last <= T_456 @[TestHarness.scala 128:22]
    
  module LatencyPipe : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}
    
    io is invalid
    io.out <- io.in @[TestHarness.scala 189:10]
    
  module LatencyPipe_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}}
    
    io is invalid
    io.out <- io.in @[TestHarness.scala 189:10]
    
  extmodule SimDTM : 
    output exit : UInt<32>
    output debug : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<5>, data : UInt<34>, op : UInt<2>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<34>, resp : UInt<2>}}}
    input reset : UInt<1>
    input clk : Clock
    
    
  module TestHarness : 
    input clk : Clock
    input reset : UInt<1>
    output io : {success : UInt<1>}
    
    io is invalid
    inst dut of ExampleTop @[Top.scala 96:36]
    dut.io is invalid
    dut.clk <= clk
    dut.reset <= reset
    dut.io.interrupts[0] <= UInt<1>("h00") @[TestHarness.scala 34:9]
    dut.io.interrupts[1] <= UInt<1>("h00") @[TestHarness.scala 34:9]
    inst SimAXIMem_1 of SimAXIMem @[TestHarness.scala 40:23]
    SimAXIMem_1.io is invalid
    SimAXIMem_1.clk <= clk
    SimAXIMem_1.reset <= reset
    SimAXIMem_1.io.axi.ar <- dut.io.mem_axi[0].ar @[TestHarness.scala 41:21]
    SimAXIMem_1.io.axi.aw <- dut.io.mem_axi[0].aw @[TestHarness.scala 42:21]
    SimAXIMem_1.io.axi.w <- dut.io.mem_axi[0].w @[TestHarness.scala 43:21]
    inst LatencyPipe_2 of LatencyPipe @[TestHarness.scala 194:22]
    LatencyPipe_2.io is invalid
    LatencyPipe_2.clk <= clk
    LatencyPipe_2.reset <= reset
    LatencyPipe_2.io.in <- SimAXIMem_1.io.axi.r @[TestHarness.scala 195:16]
    dut.io.mem_axi[0].r <- LatencyPipe_2.io.out @[TestHarness.scala 44:13]
    inst LatencyPipe_1_1 of LatencyPipe_1 @[TestHarness.scala 194:22]
    LatencyPipe_1_1.io is invalid
    LatencyPipe_1_1.clk <= clk
    LatencyPipe_1_1.reset <= reset
    LatencyPipe_1_1.io.in <- SimAXIMem_1.io.axi.b @[TestHarness.scala 195:16]
    dut.io.mem_axi[0].b <- LatencyPipe_1_1.io.out @[TestHarness.scala 45:13]
    inst SimDTM_1 of SimDTM @[TestHarness.scala 56:21]
    SimDTM_1.exit is invalid
    SimDTM_1.debug is invalid
    SimDTM_1.reset is invalid
    SimDTM_1.clk is invalid
    SimDTM_1.clk <= clk @[TestHarness.scala 141:12]
    SimDTM_1.reset <= reset @[TestHarness.scala 142:14]
    dut.io.debug <- SimDTM_1.debug @[TestHarness.scala 143:11]
    node T_38 = eq(SimDTM_1.exit, UInt<1>("h01")) @[TestHarness.scala 145:47]
    io.success <= T_38 @[TestHarness.scala 145:15]
    node T_40 = geq(SimDTM_1.exit, UInt<2>("h02")) @[TestHarness.scala 146:19]
    when T_40 : @[TestHarness.scala 146:25]
      node T_41 = shr(SimDTM_1.exit, 1) @[TestHarness.scala 147:59]
      node T_43 = eq(reset, UInt<1>("h00")) @[TestHarness.scala 147:13]
      when T_43 : @[TestHarness.scala 147:13]
        printf(clk, UInt<1>(1), "*** FAILED *** (exit code = %d)\n", T_41) @[TestHarness.scala 147:13]
        skip @[TestHarness.scala 147:13]
      node T_45 = eq(reset, UInt<1>("h00")) @[TestHarness.scala 148:11]
      when T_45 : @[TestHarness.scala 148:11]
        stop(clk, UInt<1>(1), 1) @[TestHarness.scala 148:11]
        skip @[TestHarness.scala 148:11]
      skip @[TestHarness.scala 146:25]
    
